#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D M_CrystalEx_test_snp_0_Screen_0;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _731;
uint _2216;
uint _2217;
uint _2218;
uint _2489;
uint _2490;
uint _2491;
float _2750;
float _2751;
float _2752;
float _2753;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _154 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _155 = _154 * NORMAL.x;
    float _156 = _154 * NORMAL.y;
    float _157 = _154 * NORMAL.z;
    float _162;
    float _163;
    float _164;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _162 = (-0.0) - _155;
        _163 = (-0.0) - _156;
        _164 = (-0.0) - _157;
    }
    else
    {
        _162 = _155;
        _163 = _156;
        _164 = _157;
    }
    float _209 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _219 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _209);
    float _220 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _209);
    float _221 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _209);
    float _242 = (cbSceneParam._m0[85u].z * gl_FragCoord.x) / cbSceneParam._m0[86u].x;
    float _243 = (cbSceneParam._m0[85u].w * gl_FragCoord.y) / cbSceneParam._m0[86u].y;
    float _250 = isnan(cbInstanceData._m0[8u].x) ? _242 : (isnan(_242) ? cbInstanceData._m0[8u].x : max(_242, cbInstanceData._m0[8u].x));
    float _251 = isnan(cbInstanceData._m0[8u].y) ? _243 : (isnan(_243) ? cbInstanceData._m0[8u].y : max(_243, cbInstanceData._m0[8u].y));
    vec4 _256 = texture(sampler2D(M_CrystalEx_test_snp_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _250 : (isnan(_250) ? cbInstanceData._m0[8u].z : min(_250, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _251 : (isnan(_251) ? cbInstanceData._m0[8u].w : min(_251, cbInstanceData._m0[8u].w))));
    float _279 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _280 = _279 * _219;
    float _281 = _279 * _220;
    float _282 = _279 * _221;
    float _286 = abs(dot(vec4(_162, _163, _164, 0.0), vec4(_280, _281, _282, 0.0)));
    float _287 = log2(cbMtdParam._m0[10u].y);
    float _309 = inversesqrt(dot(vec3(_162, _163, _164), vec3(_162, _163, _164)));
    float _310 = _309 * _162;
    float _311 = _309 * _163;
    float _312 = _309 * _164;
    float _2782 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _314 = isnan(1.0) ? _2782 : (isnan(_2782) ? 1.0 : min(_2782, 1.0));
    float _2793 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _315 = isnan(1.0) ? _2793 : (isnan(_2793) ? 1.0 : min(_2793, 1.0));
    float _2804 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _316 = isnan(1.0) ? _2804 : (isnan(_2804) ? 1.0 : min(_2804, 1.0));
    float _2815 = isnan(0.0) ? cbMtdParam._m0[10u].z : (isnan(cbMtdParam._m0[10u].z) ? 0.0 : max(cbMtdParam._m0[10u].z, 0.0));
    float _317 = isnan(1.0) ? _2815 : (isnan(_2815) ? 1.0 : min(_2815, 1.0));
    float _333 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _338 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _340 = _338.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _545 = sqrt(((_219 * _219) + (_220 * _220)) + (_221 * _221));
        float _551 = (cbMatDynParam._m0[5u].x * _545) + cbMatDynParam._m0[5u].y;
        float _2826 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
        float _552 = isnan(1.0) ? _2826 : (isnan(_2826) ? 1.0 : min(_2826, 1.0));
        float _556 = (cbMatDynParam._m0[5u].z * _545) + cbMatDynParam._m0[5u].w;
        float _2837 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2837 : (isnan(_2837) ? 1.0 : min(_2837, 1.0))) - _552)) + _552) < ((_340 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _351 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _352 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _372 = fma(_312, cbSceneParam._m0[5u].z, fma(_311, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _310));
    float _375 = fma(_312, cbSceneParam._m0[6u].z, fma(_311, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _310));
    float _378 = fma(_312, cbSceneParam._m0[7u].z, fma(_311, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _310));
    float _379 = _314 * 3.3333332538604736328125;
    float _381 = _315 * 3.3333332538604736328125;
    float _382 = _316 * 3.3333332538604736328125;
    float _390 = ((isnan(1.0) ? _379 : (isnan(_379) ? 1.0 : min(_379, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _392 = ((isnan(1.0) ? _381 : (isnan(_381) ? 1.0 : min(_381, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _393 = ((isnan(1.0) ? _382 : (isnan(_382) ? 1.0 : min(_382, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _399 = (_314 + (-0.0599999986588954925537109375)) + (isnan(_390) ? 0.0 : (isnan(0.0) ? _390 : max(0.0, _390)));
    float _401 = (_315 + (-0.0599999986588954925537109375)) + (isnan(_392) ? 0.0 : (isnan(0.0) ? _392 : max(0.0, _392)));
    float _403 = (_316 + (-0.0599999986588954925537109375)) + (isnan(_393) ? 0.0 : (isnan(0.0) ? _393 : max(0.0, _393)));
    float _415 = (_399 * _399) - ((0.02999999932944774627685546875 - _314) * 0.119999997317790985107421875);
    float _416 = (_401 * _401) - ((0.02999999932944774627685546875 - _315) * 0.119999997317790985107421875);
    float _417 = (_403 * _403) - ((0.02999999932944774627685546875 - _316) * 0.119999997317790985107421875);
    float _427 = (sqrt(isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0))) - _399) * 16.666667938232421875;
    float _429 = (sqrt(isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0))) - _401) * 16.666667938232421875;
    float _430 = (sqrt(isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0))) - _403) * 16.666667938232421875;
    float _431 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _432 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _433 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _444 = (((isnan(1.0) ? _432 : (isnan(_432) ? 1.0 : min(_432, 1.0))) * 0.58700001239776611328125) + ((isnan(1.0) ? _431 : (isnan(_431) ? 1.0 : min(_431, 1.0))) * 0.29890000820159912109375)) + ((isnan(1.0) ? _433 : (isnan(_433) ? 1.0 : min(_433, 1.0))) * 0.114000000059604644775390625);
    float _445 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    vec4 _454 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _351, cbSceneParam._m0[86u].y * _352));
    float _457 = _454.x * TEXCOORD.z;
    float _458 = dot(vec3(_310, _311, _312), vec3(_280, _281, _282));
    float _461 = _458 * 2.0;
    float _466 = (_461 * _310) - _280;
    float _467 = (_461 * _311) - _281;
    float _468 = (_461 * _312) - _282;
    float _472 = abs(dot(vec3(_280, _281, _282), vec3(_310, _311, _312)));
    float _2933 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _473 = isnan(1.0) ? _2933 : (isnan(_2933) ? 1.0 : min(_2933, 1.0));
    float _479 = sqrt(_317);
    float _491 = exp2((_479 * 5.0) * log2(1.0 - (_473 * 0.999000012874603271484375))) / (4.0 - (_479 * 3.0));
    float _497 = (1.0 - _491) * ((_479 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _498 = _491 * _479;
    float _526 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _530 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _534 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _730;
    float _732;
    float _733;
    float _734;
    float _735;
    float _736;
    float _737;
    float _738;
    float _739;
    float _740;
    float _741;
    float _742;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _590 = fma(_534, cbModelParam._m0[26u].z, fma(_530, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _526));
        float _594 = fma(_534, cbModelParam._m0[27u].z, fma(_530, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _526));
        float _598 = fma(_534, cbModelParam._m0[28u].z, fma(_530, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _526));
        float _623 = _526 + _310;
        float _624 = _530 + _311;
        float _625 = _534 + _312;
        float _635 = fma(_625, cbModelParam._m0[26u].z, fma(_624, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _623)) - _590;
        float _636 = fma(_625, cbModelParam._m0[27u].z, fma(_624, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _623)) - _594;
        float _637 = fma(_625, cbModelParam._m0[28u].z, fma(_624, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _623)) - _598;
        float _641 = inversesqrt(dot(vec3(_635, _636, _637), vec3(_635, _636, _637)));
        float _654 = ((_641 * _635) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_590 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _655 = ((_641 * _636) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_594 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _656 = ((_641 * _637) / cbModelParam._m0[34u].z) + ((((((_598 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _659 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_654, _655, _656), 0.0);
        vec4 _666 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_654, _655, _656), 0.0);
        vec4 _673 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_654, _655, _656), 0.0);
        vec4 _680 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_654, _655, _656), 0.0);
        float _693 = exp2((_659.w + (-0.5)) * 20.0) * 2.0;
        float _703 = exp2((_666.w + (-0.5)) * 20.0) * 2.0;
        float _713 = exp2((_673.w + (-0.5)) * 20.0) * 2.0;
        float _723 = exp2((_680.w + (-0.5)) * 20.0) * 2.0;
        float _724 = _723 * (_680.x + (-0.5));
        float _725 = _723 * (_680.y + (-0.5));
        float _726 = _723 * (_680.z + (-0.5));
        _730 = _693 * (_659.z + (-0.5));
        _732 = _693 * (_659.y + (-0.5));
        _733 = _693 * (_659.x + (-0.5));
        _734 = _703 * (_666.z + (-0.5));
        _735 = _703 * (_666.y + (-0.5));
        _736 = _703 * (_666.x + (-0.5));
        _737 = _713 * (_673.z + (-0.5));
        _738 = _713 * (_673.y + (-0.5));
        _739 = _713 * (_673.x + (-0.5));
        _740 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        _741 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        _742 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    }
    else
    {
        _730 = _731;
        _732 = _731;
        _733 = _731;
        _734 = _731;
        _735 = _731;
        _736 = _731;
        _737 = _731;
        _738 = _731;
        _739 = _731;
        _740 = _731;
        _741 = _731;
        _742 = _731;
    }
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _771 = fma(_534, cbModelParam._m0[30u].z, fma(_530, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _526));
        float _775 = fma(_534, cbModelParam._m0[31u].z, fma(_530, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _526));
        float _779 = fma(_534, cbModelParam._m0[32u].z, fma(_530, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _526));
        float _802 = _526 + _310;
        float _803 = _530 + _311;
        float _804 = _534 + _312;
        float _814 = fma(_804, cbModelParam._m0[30u].z, fma(_803, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _802)) - _771;
        float _815 = fma(_804, cbModelParam._m0[31u].z, fma(_803, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _802)) - _775;
        float _816 = fma(_804, cbModelParam._m0[32u].z, fma(_803, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _802)) - _779;
        float _820 = inversesqrt(dot(vec3(_814, _815, _816), vec3(_814, _815, _816)));
        float _833 = ((_820 * _814) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_771 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _834 = ((_820 * _815) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_775 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _835 = ((_820 * _816) / cbModelParam._m0[35u].z) + ((((((_779 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _837 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _844 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _851 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        float _870 = exp2((_837.w + (-0.5)) * 20.0) * 2.0;
        float _880 = exp2((_844.w + (-0.5)) * 20.0) * 2.0;
        float _890 = exp2((_851.w + (-0.5)) * 20.0) * 2.0;
        float _900 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _901 = _900 * (_858.x + (-0.5));
        float _902 = _900 * (_858.y + (-0.5));
        float _903 = _900 * (_858.z + (-0.5));
        _907 = _870 * (_837.z + (-0.5));
        _908 = _870 * (_837.y + (-0.5));
        _909 = _870 * (_837.x + (-0.5));
        _910 = _880 * (_844.z + (-0.5));
        _911 = _880 * (_844.y + (-0.5));
        _912 = _880 * (_844.x + (-0.5));
        _913 = _890 * (_851.z + (-0.5));
        _914 = _890 * (_851.y + (-0.5));
        _915 = _890 * (_851.x + (-0.5));
        _916 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        _917 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        _918 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    }
    else
    {
        _907 = _731;
        _908 = _731;
        _909 = _731;
        _910 = _731;
        _911 = _731;
        _912 = _731;
        _913 = _731;
        _914 = _731;
        _915 = _731;
        _916 = _731;
        _917 = _731;
        _918 = _731;
    }
    float _933 = _466 * 0.5;
    float _934 = _467 * 0.5;
    float _935 = _468 * 0.5;
    float _936 = dot(vec4(_933, _934, _935, 1.0), vec4(_909, _912, _915, _918));
    float _939 = dot(vec4(_933, _934, _935, 1.0), vec4(_908, _911, _914, _917));
    float _942 = dot(vec4(_933, _934, _935, 1.0), vec4(_907, _910, _913, _916));
    float _977;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _949 = dot(vec4(_933, _934, _935, 1.0), vec4(_730, _734, _737, _740));
        float _953 = dot(vec4(_933, _934, _935, 1.0), vec4(_732, _735, _738, _741));
        float _957 = dot(vec4(_933, _934, _935, 1.0), vec4(_733, _736, _739, _742));
        float _964 = dot(vec4(cbModelParam._m0[39u]), vec4(_933, _934, _935, 1.0));
        _977 = dot(vec3(isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0)), isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0)), isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_964) ? 0.0 : (isnan(0.0) ? _964 : max(0.0, _964))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _977 = 1.0;
    }
    float _988;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _979 = dot(vec4(cbModelParam._m0[40u]), vec4(_933, _934, _935, 1.0));
        _988 = dot(vec3(isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0)), isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0)), isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_979) ? 0.0 : (isnan(0.0) ? _979 : max(0.0, _979))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _988 = 1.0;
    }
    float _992 = (_988 * cbModelParam._m0[1u].x) + (_977 * (1.0 - cbModelParam._m0[1u].x));
    float _1000 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _317);
    float _1001 = isnan(_1000) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1000 : min(cbModelParam._m0[25u].z, _1000));
    float _1084;
    float _1086;
    float _1088;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1051 = fma(_534, cbModelParam._m0[13u].z, fma(_530, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _526)) + cbModelParam._m0[13u].w;
        float _1055 = fma(_534, cbModelParam._m0[14u].z, fma(_530, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _526)) + cbModelParam._m0[14u].w;
        float _1059 = fma(_534, cbModelParam._m0[15u].z, fma(_530, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _526)) + cbModelParam._m0[15u].w;
        float _1062 = fma(_468, cbModelParam._m0[13u].z, fma(_467, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _466));
        float _1065 = fma(_468, cbModelParam._m0[14u].z, fma(_467, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _466));
        float _1068 = fma(_468, cbModelParam._m0[15u].z, fma(_467, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _466));
        float _1096;
        if (_1062 > 0.0)
        {
            _1096 = abs((1.0 - _1051) / _1062);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1062 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1051 + 1.0) / _1062);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1096 = frontier_phi_19_17_ladder;
        }
        float _1444;
        if (_1065 > 0.0)
        {
            _1444 = abs((1.0 - _1055) / _1065);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1065 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1055 + 1.0) / _1065);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1444 = frontier_phi_28_24_ladder;
        }
        float _1650;
        if (_1068 > 0.0)
        {
            _1650 = abs((1.0 - _1059) / _1068);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1068 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1059 + 1.0) / _1068);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1650 = frontier_phi_40_35_ladder;
        }
        float _1652 = isnan(_1444) ? _1096 : (isnan(_1096) ? _1444 : min(_1096, _1444));
        float _1653 = isnan(_1650) ? _1652 : (isnan(_1652) ? _1650 : min(_1652, _1650));
        float _1657 = (_1653 * _1062) + _1051;
        float _1658 = (_1653 * _1065) + _1055;
        float _1659 = (_1653 * _1068) + _1059;
        float _1660 = _1653 * 9.9999997473787516355514526367188e-05;
        float _1662 = (-1.0) - _1660;
        float _1664 = _1660 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1659 > _1664) || ((_1659 < _1662) || ((_1658 > _1664) || ((_1658 < _1662) || ((_1657 < _1662) || (_1657 > _1664))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1857 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1659, cbModelParam._m0[9u].z, fma(_1658, cbModelParam._m0[9u].y, _1657 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1659, cbModelParam._m0[10u].z, fma(_1658, cbModelParam._m0[10u].y, _1657 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1659, cbModelParam._m0[11u].z, fma(_1658, cbModelParam._m0[11u].y, _1657 * cbModelParam._m0[11u].x))), _1001);
            frontier_phi_18_40_ladder = _1857.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1857.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1857.x * cbModelParam._m0[1u].y;
        }
        _1084 = frontier_phi_18_40_ladder_2;
        _1086 = frontier_phi_18_40_ladder_1;
        _1088 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1072 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_466, _467, _468), _1001);
        _1084 = _1072.x * cbModelParam._m0[1u].y;
        _1086 = _1072.y * cbModelParam._m0[1u].y;
        _1088 = _1072.z * cbModelParam._m0[1u].y;
    }
    float _1092 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _317);
    float _1093 = isnan(_1092) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1092 : min(cbModelParam._m0[25u].w, _1092));
    float _1186;
    float _1188;
    float _1190;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1150 = fma(_534, cbModelParam._m0[21u].z, fma(_530, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _526)) + cbModelParam._m0[21u].w;
        float _1154 = fma(_534, cbModelParam._m0[22u].z, fma(_530, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _526)) + cbModelParam._m0[22u].w;
        float _1158 = fma(_534, cbModelParam._m0[23u].z, fma(_530, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _526)) + cbModelParam._m0[23u].w;
        float _1161 = fma(_468, cbModelParam._m0[21u].z, fma(_467, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _466));
        float _1164 = fma(_468, cbModelParam._m0[22u].z, fma(_467, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _466));
        float _1167 = fma(_468, cbModelParam._m0[23u].z, fma(_467, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _466));
        float _1449;
        if (_1161 > 0.0)
        {
            _1449 = abs((1.0 - _1150) / _1161);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1161 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1150 + 1.0) / _1161);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1449 = frontier_phi_30_26_ladder;
        }
        float _1677;
        if (_1164 > 0.0)
        {
            _1677 = abs((1.0 - _1154) / _1164);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1164 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1154 + 1.0) / _1164);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1677 = frontier_phi_42_37_ladder;
        }
        float _1979;
        if (_1167 > 0.0)
        {
            _1979 = abs((1.0 - _1158) / _1167);
        }
        else
        {
            float frontier_phi_53_48_ladder;
            if (_1167 < 0.0)
            {
                frontier_phi_53_48_ladder = abs((_1158 + 1.0) / _1167);
            }
            else
            {
                frontier_phi_53_48_ladder = 5000.0;
            }
            _1979 = frontier_phi_53_48_ladder;
        }
        float _1981 = isnan(_1677) ? _1449 : (isnan(_1449) ? _1677 : min(_1449, _1677));
        float _1982 = isnan(_1979) ? _1981 : (isnan(_1981) ? _1979 : min(_1981, _1979));
        float _1986 = (_1982 * _1161) + _1150;
        float _1987 = (_1982 * _1164) + _1154;
        float _1988 = (_1982 * _1167) + _1158;
        float _1989 = _1982 * 9.9999997473787516355514526367188e-05;
        float _1990 = (-1.0) - _1989;
        float _1992 = _1989 + 1.0;
        float frontier_phi_27_53_ladder;
        float frontier_phi_27_53_ladder_1;
        float frontier_phi_27_53_ladder_2;
        if ((_1988 > _1992) || ((_1988 < _1990) || ((_1987 > _1992) || ((_1987 < _1990) || ((_1986 < _1990) || (_1986 > _1992))))))
        {
            frontier_phi_27_53_ladder = 0.0;
            frontier_phi_27_53_ladder_1 = 0.0;
            frontier_phi_27_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2114 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1988, cbModelParam._m0[17u].z, fma(_1987, cbModelParam._m0[17u].y, _1986 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1988, cbModelParam._m0[18u].z, fma(_1987, cbModelParam._m0[18u].y, _1986 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1988, cbModelParam._m0[19u].z, fma(_1987, cbModelParam._m0[19u].y, _1986 * cbModelParam._m0[19u].x))), _1093);
            frontier_phi_27_53_ladder = _2114.y * cbModelParam._m0[1u].z;
            frontier_phi_27_53_ladder_1 = _2114.x * cbModelParam._m0[1u].z;
            frontier_phi_27_53_ladder_2 = _2114.z * cbModelParam._m0[1u].z;
        }
        _1186 = frontier_phi_27_53_ladder_1;
        _1188 = frontier_phi_27_53_ladder;
        _1190 = frontier_phi_27_53_ladder_2;
    }
    else
    {
        vec4 _1170 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_466, _467, _468), _1093);
        _1186 = _1170.x * cbModelParam._m0[1u].z;
        _1188 = _1170.y * cbModelParam._m0[1u].z;
        _1190 = _1170.z * cbModelParam._m0[1u].z;
    }
    float _1203 = (((_497 * _314) + _498) * _457) * ((cbModelParam._m0[1u].w * (_1186 - _1084)) + _1084);
    float _1205 = (((_497 * _315) + _498) * _457) * ((cbModelParam._m0[1u].w * (_1188 - _1086)) + _1086);
    float _1207 = (((_497 * _316) + _498) * _457) * ((cbModelParam._m0[1u].w * (_1190 - _1088)) + _1088);
    float _1228 = fma(_1207, cbSceneParam._m0[89u].z, fma(_1205, cbSceneParam._m0[89u].y, _1203 * cbSceneParam._m0[89u].x));
    float _1231 = fma(_1207, cbSceneParam._m0[90u].z, fma(_1205, cbSceneParam._m0[90u].y, _1203 * cbSceneParam._m0[90u].x));
    float _1234 = fma(_1207, cbSceneParam._m0[91u].z, fma(_1205, cbSceneParam._m0[91u].y, _1203 * cbSceneParam._m0[91u].x));
    uint _1241 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1245 = floatBitsToUint(cbInstanceData._m0[_1241 + 5u]);
    uint _1247 = _1245.x * 14u;
    uint _1248 = _1247 + 13u;
    float _1254 = _457 + (-1.0);
    float _1259 = (cbLight._m0[_1248].x * _1254) + 1.0;
    float _1260 = (cbLight._m0[_1248].y * _1254) + 1.0;
    float _1261 = (cbLight._m0[_1248].w * _1254) + 1.0;
    uint _1265 = _1247 + 8u;
    float _1281 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1247].w)) * _317) * 0.949999988079071044921875);
    float _1282 = _1281 * _1281;
    float _1283 = cbLight._m0[_1247].x + _280;
    float _1284 = cbLight._m0[_1247].y + _281;
    float _1285 = cbLight._m0[_1247].z + _282;
    float _1289 = inversesqrt(dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285)));
    float _1290 = _1289 * _1283;
    float _1291 = _1289 * _1284;
    float _1292 = _1289 * _1285;
    float _1293 = dot(vec3(_310, _311, _312), vec3(cbLight._m0[_1247].xyz));
    float _3059 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
    float _1296 = isnan(1.0) ? _3059 : (isnan(_3059) ? 1.0 : min(_3059, 1.0));
    float _3070 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _1297 = isnan(1.0) ? _3070 : (isnan(_3070) ? 1.0 : min(_3070, 1.0));
    float _1298 = dot(vec3(_310, _311, _312), vec3(_1290, _1291, _1292));
    float _3081 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
    float _1301 = isnan(1.0) ? _3081 : (isnan(_3081) ? 1.0 : min(_3081, 1.0));
    float _1302 = dot(vec3(cbLight._m0[_1247].xyz), vec3(_1290, _1291, _1292));
    float _3092 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
    float _1306 = _1282 * _1282;
    float _1310 = ((_1301 * _1301) * (_1306 + (-1.0))) + 1.0;
    float _1318 = exp2(log2(1.0 - (isnan(1.0) ? _3092 : (isnan(_3092) ? 1.0 : min(_3092, 1.0)))) * 5.0);
    float _1319 = 1.0 - _314;
    float _1320 = 1.0 - _315;
    float _1321 = 1.0 - _316;
    float _1328 = 1.0 - _1282;
    float _1339 = (0.5 / (((_1297 * ((_1296 * _1328) + _1282)) + 9.9999999392252902907785028219223e-09) + (((_1297 * _1328) + _1282) * _1296))) * _1296;
    float _3103 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
    float _1341 = (isnan(1.0) ? _3103 : (isnan(_3103) ? 1.0 : min(_3103, 1.0))) * (_1306 / ((_1310 * _1310) * 3.141590118408203125));
    float _1342 = isnan(1.0) ? _1259 : (isnan(_1259) ? 1.0 : min(_1259, 1.0));
    uint _1352 = _1247 | 1u;
    uint _1356 = _1247 + 9u;
    float _1370 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1352].w)) * _317) * 0.949999988079071044921875);
    float _1371 = _1370 * _1370;
    float _1372 = cbLight._m0[_1352].x + _280;
    float _1373 = cbLight._m0[_1352].y + _281;
    float _1374 = cbLight._m0[_1352].z + _282;
    float _1378 = inversesqrt(dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374)));
    float _1379 = _1378 * _1372;
    float _1380 = _1378 * _1373;
    float _1381 = _1378 * _1374;
    float _1382 = dot(vec3(_310, _311, _312), vec3(cbLight._m0[_1352].xyz));
    float _3119 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
    float _1385 = isnan(1.0) ? _3119 : (isnan(_3119) ? 1.0 : min(_3119, 1.0));
    float _1386 = dot(vec3(_310, _311, _312), vec3(_1379, _1380, _1381));
    float _3130 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
    float _1389 = isnan(1.0) ? _3130 : (isnan(_3130) ? 1.0 : min(_3130, 1.0));
    float _1390 = dot(vec3(cbLight._m0[_1352].xyz), vec3(_1379, _1380, _1381));
    float _3141 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
    float _1394 = _1371 * _1371;
    float _1398 = ((_1389 * _1389) * (_1394 + (-1.0))) + 1.0;
    float _1405 = exp2(log2(1.0 - (isnan(1.0) ? _3141 : (isnan(_3141) ? 1.0 : min(_3141, 1.0)))) * 5.0);
    float _1412 = 1.0 - _1371;
    float _1422 = (0.5 / (((_1297 * ((_1385 * _1412) + _1371)) + 9.9999999392252902907785028219223e-09) + (((_1297 * _1412) + _1371) * _1385))) * _1385;
    float _3152 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
    float _1424 = (isnan(1.0) ? _3152 : (isnan(_3152) ? 1.0 : min(_3152, 1.0))) * (_1394 / ((_1398 * _1398) * 3.141590118408203125));
    float _1425 = isnan(1.0) ? _1260 : (isnan(_1260) ? 1.0 : min(_1260, 1.0));
    float _1435 = (((((_1405 * _1319) + _314) * cbLight._m0[_1356].x) * _1424) * _1425) + (((((_1318 * _1319) + _314) * cbLight._m0[_1265].x) * _1341) * _1342);
    float _1436 = (((((_1405 * _1320) + _315) * cbLight._m0[_1356].y) * _1424) * _1425) + (((((_1318 * _1320) + _315) * cbLight._m0[_1265].y) * _1341) * _1342);
    float _1437 = (((((_1405 * _1321) + _316) * cbLight._m0[_1356].z) * _1424) * _1425) + (((((_1318 * _1321) + _316) * cbLight._m0[_1265].z) * _1341) * _1342);
    uvec4 _1441 = floatBitsToUint(cbLight._m0[_1247 + 12u]);
    float _1454;
    float _1456;
    float _1458;
    if (_1441.x == 0u)
    {
        _1454 = _1435;
        _1456 = _1436;
        _1458 = _1437;
    }
    else
    {
        float _1464 = (cbLight._m0[_1248].z * _1254) + 1.0;
        uint _1465 = _1247 + 2u;
        uint _1469 = _1247 + 10u;
        float _1483 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1465].w)) * _317) * 0.949999988079071044921875);
        float _1484 = _1483 * _1483;
        float _1485 = cbLight._m0[_1465].x + _280;
        float _1486 = cbLight._m0[_1465].y + _281;
        float _1487 = cbLight._m0[_1465].z + _282;
        float _1491 = inversesqrt(dot(vec3(_1485, _1486, _1487), vec3(_1485, _1486, _1487)));
        float _1492 = _1491 * _1485;
        float _1493 = _1491 * _1486;
        float _1494 = _1491 * _1487;
        float _1495 = dot(vec3(_310, _311, _312), vec3(cbLight._m0[_1465].xyz));
        float _3168 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1498 = isnan(1.0) ? _3168 : (isnan(_3168) ? 1.0 : min(_3168, 1.0));
        float _1499 = dot(vec3(_310, _311, _312), vec3(_1492, _1493, _1494));
        float _3179 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1502 = isnan(1.0) ? _3179 : (isnan(_3179) ? 1.0 : min(_3179, 1.0));
        float _1503 = dot(vec3(cbLight._m0[_1465].xyz), vec3(_1492, _1493, _1494));
        float _3190 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1507 = _1484 * _1484;
        float _1511 = ((_1502 * _1502) * (_1507 + (-1.0))) + 1.0;
        float _1518 = exp2(log2(1.0 - (isnan(1.0) ? _3190 : (isnan(_3190) ? 1.0 : min(_3190, 1.0)))) * 5.0);
        float _1525 = 1.0 - _1484;
        float _1535 = (0.5 / (((_1297 * ((_1498 * _1525) + _1484)) + 9.9999999392252902907785028219223e-09) + (((_1297 * _1525) + _1484) * _1498))) * _1498;
        float _3201 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1537 = (isnan(1.0) ? _3201 : (isnan(_3201) ? 1.0 : min(_3201, 1.0))) * (_1507 / ((_1511 * _1511) * 3.141590118408203125));
        float _1538 = isnan(1.0) ? _1464 : (isnan(_1464) ? 1.0 : min(_1464, 1.0));
        _1454 = (((((_1518 * _1319) + _314) * cbLight._m0[_1469].x) * _1537) * _1538) + _1435;
        _1456 = (((((_1518 * _1320) + _315) * cbLight._m0[_1469].y) * _1537) * _1538) + _1436;
        _1458 = (((((_1518 * _1321) + _316) * cbLight._m0[_1469].z) * _1537) * _1538) + _1437;
    }
    float _1556;
    float _1558;
    float _1560;
    if (_1441.y == 0u)
    {
        _1556 = _1454;
        _1558 = _1456;
        _1560 = _1458;
    }
    else
    {
        uint _1567 = _1247 + 3u;
        uint _1571 = _1247 + 11u;
        float _1585 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1567].w)) * _317) * 0.949999988079071044921875);
        float _1586 = _1585 * _1585;
        float _1587 = cbLight._m0[_1567].x + _280;
        float _1588 = cbLight._m0[_1567].y + _281;
        float _1589 = cbLight._m0[_1567].z + _282;
        float _1593 = inversesqrt(dot(vec3(_1587, _1588, _1589), vec3(_1587, _1588, _1589)));
        float _1594 = _1593 * _1587;
        float _1595 = _1593 * _1588;
        float _1596 = _1593 * _1589;
        float _1597 = dot(vec3(_310, _311, _312), vec3(cbLight._m0[_1567].xyz));
        float _3217 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1600 = isnan(1.0) ? _3217 : (isnan(_3217) ? 1.0 : min(_3217, 1.0));
        float _1601 = dot(vec3(_310, _311, _312), vec3(_1594, _1595, _1596));
        float _3228 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1604 = isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0));
        float _1605 = dot(vec3(cbLight._m0[_1567].xyz), vec3(_1594, _1595, _1596));
        float _3239 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1609 = _1586 * _1586;
        float _1613 = ((_1604 * _1604) * (_1609 + (-1.0))) + 1.0;
        float _1620 = exp2(log2(1.0 - (isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0)))) * 5.0);
        float _1627 = 1.0 - _1586;
        float _1637 = (0.5 / (((_1297 * ((_1600 * _1627) + _1586)) + 9.9999999392252902907785028219223e-09) + (((_1297 * _1627) + _1586) * _1600))) * _1600;
        float _3250 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1639 = (isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0))) * (_1609 / ((_1613 * _1613) * 3.141590118408203125));
        float _1640 = isnan(1.0) ? _1261 : (isnan(_1261) ? 1.0 : min(_1261, 1.0));
        _1556 = (((((_1620 * _1319) + _314) * cbLight._m0[_1571].x) * _1639) * _1640) + _1454;
        _1558 = (((((_1620 * _1320) + _315) * cbLight._m0[_1571].y) * _1639) * _1640) + _1456;
        _1560 = (((((_1620 * _1321) + _316) * cbLight._m0[_1571].z) * _1639) * _1640) + _1458;
    }
    float _1781;
    float _1783;
    float _1785;
    if (_1245.y == 0u)
    {
        float _1721 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1722 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1721;
        float _1723 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1721;
        float _1724 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1721;
        uvec4 _1736 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1737 = _1736.x;
        uint _1748 = uint((float(_1736.y) * floor(float(uint(cbSceneParam._m0[85u].y * _352) / _1737))) + floor(float(uint(cbSceneParam._m0[85u].x * _351) / _1737)));
        float _1758 = (log2(_1724 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1759 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        uint _1762 = uint(isnan(14.0) ? _1759 : (isnan(_1759) ? 14.0 : min(_1759, 14.0)));
        uvec4 _1767 = texelFetch(g_lightClusterGridBuffer, int(((_1762 << 2u) + (_1748 << 6u)) >> 2u));
        uint _1768 = _1767.x;
        uint _1769 = _1736.z;
        float _1866;
        float _1868;
        float _1870;
        if (((((1u << ((_1769 >> 4u) & 15u)) + 4294967295u) & _1768) == 0u) || ((_1769 & 240u) == 0u))
        {
            _1866 = 0.0;
            _1868 = 0.0;
            _1870 = 0.0;
        }
        else
        {
            float _1867;
            float _1869;
            float _1871;
            float _2028 = 0.0;
            float _2029 = 0.0;
            float _2030 = 0.0;
            uint _2031 = 0u;
            uint _2040;
            bool _2041;
            for (;;)
            {
                _2040 = texelFetch(g_lightClassification, int((((_1762 << 5u) + (_1748 << 9u)) + (_2031 << 2u)) >> 2u)).x;
                _2041 = _2040 == 0u;
                float frontier_phi_64_pred;
                float frontier_phi_64_pred_1;
                float frontier_phi_64_pred_2;
                if (_2041)
                {
                    frontier_phi_64_pred = _2030;
                    frontier_phi_64_pred_1 = _2029;
                    frontier_phi_64_pred_2 = _2028;
                }
                else
                {
                    float _2186;
                    float _2187;
                    float _2188;
                    uint _2189;
                    _2186 = _2028;
                    _2187 = _2029;
                    _2188 = _2030;
                    _2189 = _2040;
                    float _2119;
                    float _2120;
                    float _2121;
                    for (;;)
                    {
                        uint _2193 = uint(findLSB(_2189)) + (_2031 << 5u);
                        uint _2190 = (_2189 + 4294967295u) & _2189;
                        uint _2195 = _2193 * 48u;
                        vec4 _2209 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2195)).x, texelFetch(g_PointLightRenderingBuffer, int(_2195 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2195 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2195 + 3u)).x));
                        uint _2226 = (_2193 * 48u) + 8u;
                        vec3 _2237 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2226)).x, texelFetch(g_PointLightRenderingBuffer, int(_2226 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2226 + 2u)).x));
                        float _2241 = _2209.x - _1722;
                        float _2242 = _2209.y - _1723;
                        float _2243 = _2209.z - _1724;
                        float _2244 = dot(vec3(_2241, _2242, _2243), vec3(_2241, _2242, _2243));
                        float _2247 = inversesqrt(_2244);
                        float _2248 = _2247 * _2241;
                        float _2249 = _2247 * _2242;
                        float _2250 = _2247 * _2243;
                        float _2256 = 1.0 - (_2244 * _2209.w);
                        float _3276 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
                        float _2258 = sqrt(_2244) * uintBitsToFloat(uvec4(_2216, _2217, _2218, texelFetch(g_PointLightRenderingBuffer, int(((_2193 * 48u) + 4u) + 3u)).x)).w;
                        float _2262 = _2258 * _2258;
                        float _2263 = (-0.0) - _1722;
                        float _2264 = (-0.0) - _1723;
                        float _2265 = (-0.0) - _1724;
                        float _2269 = inversesqrt(dot(vec3(_2263, _2264, _2265), vec3(_2263, _2264, _2265)));
                        float _2270 = _2269 * _2263;
                        float _2271 = _2269 * _2264;
                        float _2272 = _2269 * _2265;
                        float _2280 = exp2(log2(1.0 / ((_2262 * 3.5) + 5.0)) * 0.25);
                        float _2281 = 1.0 - _479;
                        float _2288 = sqrt(1.0 - ((1.0 - (_2281 * _2281)) * (1.0 - (_2280 * _2280))));
                        float _2289 = _2288 * _2288;
                        float _2290 = _2289 * _2289;
                        float _2291 = _2270 + _2248;
                        float _2292 = _2271 + _2249;
                        float _2293 = _2272 + _2250;
                        float _2297 = inversesqrt(dot(vec3(_2291, _2292, _2293), vec3(_2291, _2292, _2293)));
                        float _2301 = dot(vec3(_372, _375, _378), vec3(_2270, _2271, _2272));
                        float _3287 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
                        float _2304 = isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0));
                        float _2305 = dot(vec3(_372, _375, _378), vec3(_2297 * _2291, _2297 * _2292, _2297 * _2293));
                        float _3298 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
                        float _2308 = isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0));
                        float _2312 = ((_2308 * _2308) * (_2290 + (-1.0))) + 1.0;
                        float _2313 = (1.39999997615814208984375 / (_2258 + 1.39999997615814208984375)) * _2289;
                        float _2314 = _2313 * _2313;
                        float _2317 = ((1.0 - _2314) * dot(vec3(_372, _375, _378), vec3(_2248, _2249, _2250))) + _2314;
                        float _3309 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
                        float _2318 = isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0));
                        float _2319 = 1.0 - _2289;
                        float _2329 = (0.5 / (((_2318 * ((_2304 * _2319) + _2289)) + 9.9999999392252902907785028219223e-09) + (((_2318 * _2319) + _2289) * _2304))) * _2318;
                        float _3320 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
                        float _2340 = (((_2290 * 3.1415927410125732421875) * (isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0)))) / ((_2312 * _2312) * ((_2262 * 2.1991131305694580078125) + 3.141590118408203125))) * (isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0)));
                        _2119 = (_2340 * _2237.x) + _2186;
                        _2120 = (_2340 * _2237.y) + _2187;
                        _2121 = (_2340 * _2237.z) + _2188;
                        if (_2190 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2186 = _2119;
                            _2187 = _2120;
                            _2188 = _2121;
                            _2189 = _2190;
                        }
                    }
                    frontier_phi_64_pred = _2121;
                    frontier_phi_64_pred_1 = _2120;
                    frontier_phi_64_pred_2 = _2119;
                }
                _1871 = frontier_phi_64_pred;
                _1869 = frontier_phi_64_pred_1;
                _1867 = frontier_phi_64_pred_2;
                uint _2032 = _2031 + 1u;
                if (_2032 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2028 = _1867;
                    _2029 = _1869;
                    _2030 = _1871;
                    _2031 = _2032;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1866 = _1867;
            _1868 = _1869;
            _1870 = _1871;
        }
        uvec4 _1874 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1875 = _1874.z;
        uint _1877 = (_1875 >> 8u) & 15u;
        float _2005;
        float _2007;
        float _2009;
        if (((4294967295u << _1877) & _1768) == 0u)
        {
            _2005 = _1866;
            _2007 = _1868;
            _2009 = _1870;
        }
        else
        {
            float _2021 = inversesqrt(dot(vec3(_1722, _1723, _1724), vec3(_1722, _1723, _1724)));
            float _2022 = _2021 * _1722;
            float _2023 = _2021 * _1723;
            float _2024 = _2021 * _1724;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            if (_1877 < ((_1875 >> 12u) & 15u))
            {
                float _2006;
                float _2008;
                float _2010;
                float _2172 = _1866;
                float _2173 = _1868;
                float _2174 = _1870;
                uint _2175 = _1877;
                uint _2184;
                bool _2185;
                for (;;)
                {
                    _2184 = texelFetch(g_lightClassification, int((((_1762 << 5u) + (_1748 << 9u)) + (_2175 << 2u)) >> 2u)).x;
                    _2185 = _2184 == 0u;
                    float frontier_phi_75_pred;
                    float frontier_phi_75_pred_1;
                    float frontier_phi_75_pred_2;
                    if (_2185)
                    {
                        frontier_phi_75_pred = _2174;
                        frontier_phi_75_pred_1 = _2173;
                        frontier_phi_75_pred_2 = _2172;
                    }
                    else
                    {
                        float _2354;
                        float _2355;
                        float _2356;
                        float _2620;
                        float _2621;
                        float _2622;
                        float _2364 = _2172;
                        float _2365 = _2173;
                        float _2366 = _2174;
                        uint _2367 = _2184;
                        uint _2368;
                        uint _2378;
                        vec4 _2393;
                        float _2394;
                        vec3 _2406;
                        vec4 _2422;
                        vec4 _2438;
                        float _2485;
                        bool _2486;
                        for (;;)
                        {
                            _2378 = ((_2175 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2367));
                            _2368 = (_2367 + 4294967295u) & _2367;
                            uint _2380 = _2378 * 40u;
                            _2393 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2380 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2380 + 3u)).x));
                            _2394 = _2393.w;
                            uint _2396 = (_2378 * 40u) + 8u;
                            _2406 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2396)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2396 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2396 + 2u)).x));
                            uint _2409 = (_2378 * 40u) + 16u;
                            _2422 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2409)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2409 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2409 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2409 + 3u)).x));
                            uint _2425 = (_2378 * 40u) + 20u;
                            _2438 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2425)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2425 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2425 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2425 + 3u)).x));
                            uint _2441 = (_2378 * 40u) + 24u;
                            vec4 _2454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2441 + 3u)).x));
                            uint _2460 = (_2378 * 40u) + 28u;
                            vec4 _2473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2460 + 3u)).x));
                            _2485 = fma(_1724, _2473.z, fma(_1723, _2473.y, _2473.x * _1722)) + _2473.w;
                            _2486 = !((fma(_1724, _2454.z, fma(_1723, _2454.y, _2454.x * _1722)) + _2454.w) <= 0.0);
                            float frontier_phi_81_pred;
                            float frontier_phi_81_pred_1;
                            float frontier_phi_81_pred_2;
                            if (_2486)
                            {
                                float _2520 = _2393.x - _1722;
                                float _2521 = _2393.y - _1723;
                                float _2522 = _2393.z - _1724;
                                float _2523 = dot(vec3(_2520, _2521, _2522), vec3(_2520, _2521, _2522));
                                float _2526 = inversesqrt(_2523);
                                float _2527 = _2526 * _2520;
                                float _2528 = _2526 * _2521;
                                float _2529 = _2526 * _2522;
                                float _2533 = 1.0 - (_2523 / (_2394 * _2394));
                                float _3331 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
                                float _2535 = sqrt(_2523) * uintBitsToFloat(uvec4(_2489, _2490, _2491, texelFetch(g_SpotLightRenderingBuffer, int(((_2378 * 40u) + 4u) + 3u)).x)).w;
                                float _2538 = _2535 * _2535;
                                float _2539 = (fma(_1724, _2422.z, fma(_1723, _2422.y, _2422.x * _1722)) + _2422.w) / _2485;
                                float _2540 = (fma(_1724, _2438.z, fma(_1723, _2438.y, _2438.x * _1722)) + _2438.w) / _2485;
                                float _2544 = 1.0 - dot(vec2(_2539, _2540), vec2(_2539, _2540));
                                float _3342 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
                                float _2554 = exp2(log2(1.0 / ((_2538 * 3.5) + 5.0)) * 0.25);
                                float _2555 = 1.0 - _479;
                                float _2562 = sqrt(1.0 - ((1.0 - (_2555 * _2555)) * (1.0 - (_2554 * _2554))));
                                float _2563 = _2562 * _2562;
                                float _2564 = _2563 * _2563;
                                float _2565 = _2527 - _2022;
                                float _2566 = _2528 - _2023;
                                float _2567 = _2529 - _2024;
                                float _2571 = inversesqrt(dot(vec3(_2565, _2566, _2567), vec3(_2565, _2566, _2567)));
                                float _2575 = dot(vec3(_372, _375, _378), vec3((-0.0) - _2022, (-0.0) - _2023, (-0.0) - _2024));
                                float _3353 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
                                float _2578 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
                                float _2579 = dot(vec3(_372, _375, _378), vec3(_2571 * _2565, _2571 * _2566, _2571 * _2567));
                                float _3364 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
                                float _2582 = isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0));
                                float _2586 = ((_2582 * _2582) * (_2564 + (-1.0))) + 1.0;
                                float _2587 = (1.39999997615814208984375 / (_2535 + 1.39999997615814208984375)) * _2563;
                                float _2588 = _2587 * _2587;
                                float _2594 = ((1.0 - _2588) * dot(vec3(_372, _375, _378), vec3(_2527, _2528, _2529))) + _2588;
                                float _3375 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
                                float _2595 = isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0));
                                float _2596 = 1.0 - _2563;
                                float _2606 = (0.5 / (((_2595 * ((_2578 * _2596) + _2563)) + 9.9999999392252902907785028219223e-09) + (((_2595 * _2596) + _2563) * _2578))) * _2595;
                                float _3386 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
                                float _2616 = ((isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0))) * (isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0)))) * (((_2564 * 3.1415927410125732421875) * (isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0)))) / ((_2586 * _2586) * ((_2538 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_81_pred = _2616 * _2406.z;
                                frontier_phi_81_pred_1 = _2616 * _2406.y;
                                frontier_phi_81_pred_2 = _2616 * _2406.x;
                            }
                            else
                            {
                                frontier_phi_81_pred = 0.0;
                                frontier_phi_81_pred_1 = 0.0;
                                frontier_phi_81_pred_2 = 0.0;
                            }
                            _2622 = frontier_phi_81_pred;
                            _2621 = frontier_phi_81_pred_1;
                            _2620 = frontier_phi_81_pred_2;
                            _2354 = _2620 + _2364;
                            _2355 = _2621 + _2365;
                            _2356 = _2622 + _2366;
                            if (_2368 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2364 = _2354;
                                _2365 = _2355;
                                _2366 = _2356;
                                _2367 = _2368;
                                continue;
                            }
                        }
                        frontier_phi_75_pred = _2356;
                        frontier_phi_75_pred_1 = _2355;
                        frontier_phi_75_pred_2 = _2354;
                    }
                    _2010 = frontier_phi_75_pred;
                    _2008 = frontier_phi_75_pred_1;
                    _2006 = frontier_phi_75_pred_2;
                    uint _2176 = _2175 + 1u;
                    if (_2176 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2172 = _2006;
                        _2173 = _2008;
                        _2174 = _2010;
                        _2175 = _2176;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2008;
                frontier_phi_55_56_ladder_1 = _2010;
                frontier_phi_55_56_ladder_2 = _2006;
            }
            else
            {
                frontier_phi_55_56_ladder = _1868;
                frontier_phi_55_56_ladder_1 = _1870;
                frontier_phi_55_56_ladder_2 = _1866;
            }
            _2005 = frontier_phi_55_56_ladder_2;
            _2007 = frontier_phi_55_56_ladder;
            _2009 = frontier_phi_55_56_ladder_1;
        }
        float _2014 = isnan(1.0) ? _457 : (isnan(_457) ? 1.0 : min(_457, 1.0));
        _1781 = ((_2005 * _314) * _2014) + _1556;
        _1783 = ((_2007 * _315) * _2014) + _1558;
        _1785 = ((_2009 * _316) * _2014) + _1560;
    }
    else
    {
        _1781 = _1556;
        _1783 = _1558;
        _1785 = _1560;
    }
    float _1789 = 0.959999978542327880859375 - ((isnan(1.0) ? _445 : (isnan(_445) ? 1.0 : min(_445, 1.0))) * 0.959999978542327880859375);
    float _1797 = _1789 - (exp2(log2(1.0 - _473) * 5.0) * _1789);
    float _1801 = ((_1781 + ((isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0))) * _992)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _256.x) * exp2((-0.0) - (((cbMtdParam._m0[10u].w * cbMtdParam._m0[10u].x) * _286) * _287))) * _1797);
    float _1802 = ((_1783 + ((isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0))) * _992)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _256.y) * exp2((-0.0) - (((cbMtdParam._m0[11u].x * cbMtdParam._m0[10u].x) * _286) * _287))) * _1797);
    float _1803 = ((_1785 + ((isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0))) * _992)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _256.z) * exp2((-0.0) - (((cbMtdParam._m0[11u].y * cbMtdParam._m0[10u].x) * _286) * _287))) * _1797);
    uint _1804 = _1241 + 6u;
    float _1812 = _351 / cbSceneParam._m0[86u].x;
    float _1813 = _352 / cbSceneParam._m0[86u].y;
    vec4 _1827 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1812, _1813, (log2((isnan(cbSceneParam._m0[77u].w) ? _333 : (isnan(_333) ? cbSceneParam._m0[77u].w : min(_333, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1829 = _1827.x;
    float _1830 = _1827.y;
    float _1831 = _1827.z;
    float _1832 = _1827.w;
    float _1922;
    float _1924;
    float _1926;
    float _1928;
    if (_333 > cbSceneParam._m0[78u].w)
    {
        float _1885 = isnan(_333) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _333 : min(cbSceneParam._m0[80u].w, _333));
        float _1886 = _1885 / _333;
        float _1897 = _1886 * _219;
        float _1898 = _220 * _1886;
        float _1899 = (-0.0) - _1898;
        float _1900 = _1886 * _221;
        float _1902 = (cbSceneParam._m0[77u].w * _1899) / _1885;
        float _1903 = _1902 + cbSceneParam._m0[79u].w;
        float _1904 = cbSceneParam._m0[79u].w - _1898;
        float _1910 = sqrt(((_1897 * _1897) + (_1898 * _1898)) + (_1900 * _1900));
        float _1913 = (1.0 - (cbSceneParam._m0[77u].w / _1885)) * _1910;
        float _1918 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1920 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2129;
        if (abs((_1899 - _1902) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2129 = ((((_1903 > 0.0) ? exp2(_1918 * _1903) : (2.0 - exp2(_1920 * _1903))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1913;
        }
        else
        {
            float _2054 = 1.0 / cbSceneParam._m0[80u].x;
            float _2055 = isnan(_1904) ? _1903 : (isnan(_1903) ? _1904 : max(_1903, _1904));
            float _2056 = isnan(_1904) ? _1903 : (isnan(_1903) ? _1904 : min(_1903, _1904));
            float _2065 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : min(_2055, 0.0));
            float _2066 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : min(_2056, 0.0));
            _2129 = ((abs(_1910 / _1899) * cbSceneParam._m0[80u].y) * ((((_2065 - _2066) * 2.0) - ((exp2(_1918 * (isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0)))) - exp2(_1918 * (isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0))))) * _2054)) - ((exp2(_1920 * _2065) - exp2(_1920 * _2066)) * _2054))) + (_1913 * cbSceneParam._m0[80u].z);
        }
        vec4 _2131 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1812, _1813, 1.0), 0.0);
        float _2140 = exp2((_2129 * (-1.44269502162933349609375)) * (1.0 - _2131.w));
        float _2141 = log2(_2140);
        float _2157 = log2(_1832);
        _1922 = (exp2(_2157 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2141 * cbSceneParam._m0[78u].x)) * _2131.x) / cbSceneParam._m0[78u].x)) + _1829;
        _1924 = (exp2(_2157 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2141 * cbSceneParam._m0[78u].y)) * _2131.y) / cbSceneParam._m0[78u].y)) + _1830;
        _1926 = (exp2(_2157 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2141 * cbSceneParam._m0[78u].z)) * _2131.z) / cbSceneParam._m0[78u].z)) + _1831;
        _1928 = _2140 * _1832;
    }
    else
    {
        _1922 = _1829;
        _1924 = _1830;
        _1926 = _1831;
        _1928 = _1832;
    }
    bool _2167;
    vec4 _1937;
    vec4 _1959;
    float _1961;
    float _1965;
    float _1966;
    float _1967;
    float _1968;
    bool _1978;
    for (;;)
    {
        _1937 = cbMatDynParam._m0[0u];
        float _1939 = roundEven(_1937.y);
        bool _1940 = _1939 == 3.0;
        float _1941 = log2(_1928);
        float _1948 = exp2(_1941 * cbSceneParam._m0[78u].x) * _1801;
        float _1949 = exp2(_1941 * cbSceneParam._m0[78u].y) * _1802;
        float _1950 = exp2(_1941 * cbSceneParam._m0[78u].z) * _1803;
        float _1957 = _340 + (-0.5);
        _1959 = cbMtdParam._m0[1u];
        _1961 = _1959.y * _1957;
        float _1964 = (_1939 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1965 = _1964 * (_1940 ? _1948 : (_1948 + (cbSceneParam._m0[72u].w * _1922)));
        _1966 = _1964 * (_1940 ? _1949 : (_1949 + (cbSceneParam._m0[72u].w * _1924)));
        _1967 = _1964 * (_1940 ? _1950 : (_1950 + (cbSceneParam._m0[72u].w * _1926)));
        _1968 = _1957 * 0.999000012874603271484375;
        _1978 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1978)
        {
            if ((cbInstanceData._m0[_1241 + 7u].x + _1968) < 0.5)
            {
                _2167 = true;
                break;
            }
        }
        uint _2090 = (_1241 + 9u) + uint(_1937.w);
        if ((cbInstanceData._m0[_2090].w < 1.0) && ((cbInstanceData._m0[_2090].w + _1968) < 0.5))
        {
            _2167 = true;
            break;
        }
        if ((_1961 + 1.0) < _1959.x)
        {
            _2167 = true;
            break;
        }
        _2167 = false;
        break;
    }
    float _2345;
    if (_2167)
    {
        discard_state = true;
        _2345 = 0.0;
    }
    else
    {
        _2345 = cbInstanceData._m0[_1804].w;
    }
    SV_Target.x = _1965;
    SV_Target.y = _1966;
    SV_Target.z = _1967;
    SV_Target.w = _2345;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1804].w;
    discard_exit();
}


