#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D M_CrystalEx_test_snp_0_Screen_0;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _733;
uint _2239;
uint _2240;
uint _2241;
uint _2512;
uint _2513;
uint _2514;
float _2773;
float _2774;
float _2775;
float _2776;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _156 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _157 = _156 * NORMAL.x;
    float _158 = _156 * NORMAL.y;
    float _159 = _156 * NORMAL.z;
    float _164;
    float _165;
    float _166;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _164 = (-0.0) - _157;
        _165 = (-0.0) - _158;
        _166 = (-0.0) - _159;
    }
    else
    {
        _164 = _157;
        _165 = _158;
        _166 = _159;
    }
    float _211 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _221 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _211);
    float _222 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _211);
    float _223 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _211);
    float _244 = (cbSceneParam._m0[85u].z * gl_FragCoord.x) / cbSceneParam._m0[86u].x;
    float _245 = (cbSceneParam._m0[85u].w * gl_FragCoord.y) / cbSceneParam._m0[86u].y;
    float _252 = isnan(cbInstanceData._m0[8u].x) ? _244 : (isnan(_244) ? cbInstanceData._m0[8u].x : max(_244, cbInstanceData._m0[8u].x));
    float _253 = isnan(cbInstanceData._m0[8u].y) ? _245 : (isnan(_245) ? cbInstanceData._m0[8u].y : max(_245, cbInstanceData._m0[8u].y));
    vec4 _258 = texture(sampler2D(M_CrystalEx_test_snp_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _252 : (isnan(_252) ? cbInstanceData._m0[8u].z : min(_252, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _253 : (isnan(_253) ? cbInstanceData._m0[8u].w : min(_253, cbInstanceData._m0[8u].w))));
    float _281 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _282 = _281 * _221;
    float _283 = _281 * _222;
    float _284 = _281 * _223;
    float _288 = abs(dot(vec4(_164, _165, _166, 0.0), vec4(_282, _283, _284, 0.0)));
    float _289 = log2(cbMtdParam._m0[10u].y);
    float _311 = inversesqrt(dot(vec3(_164, _165, _166), vec3(_164, _165, _166)));
    float _312 = _311 * _164;
    float _313 = _311 * _165;
    float _314 = _311 * _166;
    float _2805 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _316 = isnan(1.0) ? _2805 : (isnan(_2805) ? 1.0 : min(_2805, 1.0));
    float _2816 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _317 = isnan(1.0) ? _2816 : (isnan(_2816) ? 1.0 : min(_2816, 1.0));
    float _2827 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _318 = isnan(1.0) ? _2827 : (isnan(_2827) ? 1.0 : min(_2827, 1.0));
    float _2838 = isnan(0.0) ? cbMtdParam._m0[10u].z : (isnan(cbMtdParam._m0[10u].z) ? 0.0 : max(cbMtdParam._m0[10u].z, 0.0));
    float _319 = isnan(1.0) ? _2838 : (isnan(_2838) ? 1.0 : min(_2838, 1.0));
    float _335 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _340 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _342 = _340.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _547 = sqrt(((_221 * _221) + (_222 * _222)) + (_223 * _223));
        float _553 = (cbMatDynParam._m0[5u].x * _547) + cbMatDynParam._m0[5u].y;
        float _2849 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
        float _554 = isnan(1.0) ? _2849 : (isnan(_2849) ? 1.0 : min(_2849, 1.0));
        float _558 = (cbMatDynParam._m0[5u].z * _547) + cbMatDynParam._m0[5u].w;
        float _2860 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2860 : (isnan(_2860) ? 1.0 : min(_2860, 1.0))) - _554)) + _554) < ((_342 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _353 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _354 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _374 = fma(_314, cbSceneParam._m0[5u].z, fma(_313, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _312));
    float _377 = fma(_314, cbSceneParam._m0[6u].z, fma(_313, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _312));
    float _380 = fma(_314, cbSceneParam._m0[7u].z, fma(_313, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _312));
    float _381 = _316 * 3.3333332538604736328125;
    float _383 = _317 * 3.3333332538604736328125;
    float _384 = _318 * 3.3333332538604736328125;
    float _392 = ((isnan(1.0) ? _381 : (isnan(_381) ? 1.0 : min(_381, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _394 = ((isnan(1.0) ? _383 : (isnan(_383) ? 1.0 : min(_383, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _395 = ((isnan(1.0) ? _384 : (isnan(_384) ? 1.0 : min(_384, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _401 = (_316 + (-0.0599999986588954925537109375)) + (isnan(_392) ? 0.0 : (isnan(0.0) ? _392 : max(0.0, _392)));
    float _403 = (_317 + (-0.0599999986588954925537109375)) + (isnan(_394) ? 0.0 : (isnan(0.0) ? _394 : max(0.0, _394)));
    float _405 = (_318 + (-0.0599999986588954925537109375)) + (isnan(_395) ? 0.0 : (isnan(0.0) ? _395 : max(0.0, _395)));
    float _417 = (_401 * _401) - ((0.02999999932944774627685546875 - _316) * 0.119999997317790985107421875);
    float _418 = (_403 * _403) - ((0.02999999932944774627685546875 - _317) * 0.119999997317790985107421875);
    float _419 = (_405 * _405) - ((0.02999999932944774627685546875 - _318) * 0.119999997317790985107421875);
    float _429 = (sqrt(isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0))) - _401) * 16.666667938232421875;
    float _431 = (sqrt(isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0))) - _403) * 16.666667938232421875;
    float _432 = (sqrt(isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0))) - _405) * 16.666667938232421875;
    float _433 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _434 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _435 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _446 = (((isnan(1.0) ? _434 : (isnan(_434) ? 1.0 : min(_434, 1.0))) * 0.58700001239776611328125) + ((isnan(1.0) ? _433 : (isnan(_433) ? 1.0 : min(_433, 1.0))) * 0.29890000820159912109375)) + ((isnan(1.0) ? _435 : (isnan(_435) ? 1.0 : min(_435, 1.0))) * 0.114000000059604644775390625);
    float _447 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    vec4 _456 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _353, cbSceneParam._m0[86u].y * _354));
    float _459 = _456.x * TEXCOORD.z;
    float _460 = dot(vec3(_312, _313, _314), vec3(_282, _283, _284));
    float _463 = _460 * 2.0;
    float _468 = (_463 * _312) - _282;
    float _469 = (_463 * _313) - _283;
    float _470 = (_463 * _314) - _284;
    float _474 = abs(dot(vec3(_282, _283, _284), vec3(_312, _313, _314)));
    float _2956 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _475 = isnan(1.0) ? _2956 : (isnan(_2956) ? 1.0 : min(_2956, 1.0));
    float _481 = sqrt(_319);
    float _493 = exp2((_481 * 5.0) * log2(1.0 - (_475 * 0.999000012874603271484375))) / (4.0 - (_481 * 3.0));
    float _499 = (1.0 - _493) * ((_481 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _500 = _493 * _481;
    float _528 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _532 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _536 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _732;
    float _734;
    float _735;
    float _736;
    float _737;
    float _738;
    float _739;
    float _740;
    float _741;
    float _742;
    float _743;
    float _744;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _592 = fma(_536, cbModelParam._m0[26u].z, fma(_532, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _528));
        float _596 = fma(_536, cbModelParam._m0[27u].z, fma(_532, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _528));
        float _600 = fma(_536, cbModelParam._m0[28u].z, fma(_532, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _528));
        float _625 = _528 + _312;
        float _626 = _532 + _313;
        float _627 = _536 + _314;
        float _637 = fma(_627, cbModelParam._m0[26u].z, fma(_626, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _625)) - _592;
        float _638 = fma(_627, cbModelParam._m0[27u].z, fma(_626, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _625)) - _596;
        float _639 = fma(_627, cbModelParam._m0[28u].z, fma(_626, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _625)) - _600;
        float _643 = inversesqrt(dot(vec3(_637, _638, _639), vec3(_637, _638, _639)));
        float _656 = ((_643 * _637) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_592 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _657 = ((_643 * _638) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_596 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _658 = ((_643 * _639) / cbModelParam._m0[34u].z) + ((((((_600 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _661 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_656, _657, _658), 0.0);
        vec4 _668 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_656, _657, _658), 0.0);
        vec4 _675 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_656, _657, _658), 0.0);
        vec4 _682 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_656, _657, _658), 0.0);
        float _695 = exp2((_661.w + (-0.5)) * 20.0) * 2.0;
        float _705 = exp2((_668.w + (-0.5)) * 20.0) * 2.0;
        float _715 = exp2((_675.w + (-0.5)) * 20.0) * 2.0;
        float _725 = exp2((_682.w + (-0.5)) * 20.0) * 2.0;
        float _726 = _725 * (_682.x + (-0.5));
        float _727 = _725 * (_682.y + (-0.5));
        float _728 = _725 * (_682.z + (-0.5));
        _732 = _695 * (_661.z + (-0.5));
        _734 = _695 * (_661.y + (-0.5));
        _735 = _695 * (_661.x + (-0.5));
        _736 = _705 * (_668.z + (-0.5));
        _737 = _705 * (_668.y + (-0.5));
        _738 = _705 * (_668.x + (-0.5));
        _739 = _715 * (_675.z + (-0.5));
        _740 = _715 * (_675.y + (-0.5));
        _741 = _715 * (_675.x + (-0.5));
        _742 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        _743 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        _744 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    }
    else
    {
        _732 = _733;
        _734 = _733;
        _735 = _733;
        _736 = _733;
        _737 = _733;
        _738 = _733;
        _739 = _733;
        _740 = _733;
        _741 = _733;
        _742 = _733;
        _743 = _733;
        _744 = _733;
    }
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _773 = fma(_536, cbModelParam._m0[30u].z, fma(_532, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _528));
        float _777 = fma(_536, cbModelParam._m0[31u].z, fma(_532, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _528));
        float _781 = fma(_536, cbModelParam._m0[32u].z, fma(_532, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _528));
        float _804 = _528 + _312;
        float _805 = _532 + _313;
        float _806 = _536 + _314;
        float _816 = fma(_806, cbModelParam._m0[30u].z, fma(_805, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _804)) - _773;
        float _817 = fma(_806, cbModelParam._m0[31u].z, fma(_805, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _804)) - _777;
        float _818 = fma(_806, cbModelParam._m0[32u].z, fma(_805, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _804)) - _781;
        float _822 = inversesqrt(dot(vec3(_816, _817, _818), vec3(_816, _817, _818)));
        float _835 = ((_822 * _816) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_773 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _836 = ((_822 * _817) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_777 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _837 = ((_822 * _818) / cbModelParam._m0[35u].z) + ((((((_781 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _839 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        vec4 _846 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        vec4 _853 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        vec4 _860 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        float _872 = exp2((_839.w + (-0.5)) * 20.0) * 2.0;
        float _882 = exp2((_846.w + (-0.5)) * 20.0) * 2.0;
        float _892 = exp2((_853.w + (-0.5)) * 20.0) * 2.0;
        float _902 = exp2((_860.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_860.x + (-0.5));
        float _904 = _902 * (_860.y + (-0.5));
        float _905 = _902 * (_860.z + (-0.5));
        _909 = _872 * (_839.z + (-0.5));
        _910 = _872 * (_839.y + (-0.5));
        _911 = _872 * (_839.x + (-0.5));
        _912 = _882 * (_846.z + (-0.5));
        _913 = _882 * (_846.y + (-0.5));
        _914 = _882 * (_846.x + (-0.5));
        _915 = _892 * (_853.z + (-0.5));
        _916 = _892 * (_853.y + (-0.5));
        _917 = _892 * (_853.x + (-0.5));
        _918 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        _919 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        _920 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    }
    else
    {
        _909 = _733;
        _910 = _733;
        _911 = _733;
        _912 = _733;
        _913 = _733;
        _914 = _733;
        _915 = _733;
        _916 = _733;
        _917 = _733;
        _918 = _733;
        _919 = _733;
        _920 = _733;
    }
    float _935 = _468 * 0.5;
    float _936 = _469 * 0.5;
    float _937 = _470 * 0.5;
    float _938 = dot(vec4(_935, _936, _937, 1.0), vec4(_911, _914, _917, _920));
    float _941 = dot(vec4(_935, _936, _937, 1.0), vec4(_910, _913, _916, _919));
    float _944 = dot(vec4(_935, _936, _937, 1.0), vec4(_909, _912, _915, _918));
    float _979;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _951 = dot(vec4(_935, _936, _937, 1.0), vec4(_732, _736, _739, _742));
        float _955 = dot(vec4(_935, _936, _937, 1.0), vec4(_734, _737, _740, _743));
        float _959 = dot(vec4(_935, _936, _937, 1.0), vec4(_735, _738, _741, _744));
        float _966 = dot(vec4(cbModelParam._m0[39u]), vec4(_935, _936, _937, 1.0));
        _979 = dot(vec3(isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0)), isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0)), isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_966) ? 0.0 : (isnan(0.0) ? _966 : max(0.0, _966))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _979 = 1.0;
    }
    float _990;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _981 = dot(vec4(cbModelParam._m0[40u]), vec4(_935, _936, _937, 1.0));
        _990 = dot(vec3(isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0)), isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0)), isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_981) ? 0.0 : (isnan(0.0) ? _981 : max(0.0, _981))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _990 = 1.0;
    }
    float _994 = (_990 * cbModelParam._m0[1u].x) + (_979 * (1.0 - cbModelParam._m0[1u].x));
    float _1002 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _319);
    float _1003 = isnan(_1002) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1002 : min(cbModelParam._m0[25u].z, _1002));
    float _1086;
    float _1088;
    float _1090;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1053 = fma(_536, cbModelParam._m0[13u].z, fma(_532, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _528)) + cbModelParam._m0[13u].w;
        float _1057 = fma(_536, cbModelParam._m0[14u].z, fma(_532, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _528)) + cbModelParam._m0[14u].w;
        float _1061 = fma(_536, cbModelParam._m0[15u].z, fma(_532, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _528)) + cbModelParam._m0[15u].w;
        float _1064 = fma(_470, cbModelParam._m0[13u].z, fma(_469, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _468));
        float _1067 = fma(_470, cbModelParam._m0[14u].z, fma(_469, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _468));
        float _1070 = fma(_470, cbModelParam._m0[15u].z, fma(_469, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _468));
        float _1098;
        if (_1064 > 0.0)
        {
            _1098 = abs((1.0 - _1053) / _1064);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1064 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1053 + 1.0) / _1064);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1098 = frontier_phi_19_17_ladder;
        }
        float _1467;
        if (_1067 > 0.0)
        {
            _1467 = abs((1.0 - _1057) / _1067);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1067 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1057 + 1.0) / _1067);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1467 = frontier_phi_28_24_ladder;
        }
        float _1673;
        if (_1070 > 0.0)
        {
            _1673 = abs((1.0 - _1061) / _1070);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1070 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1061 + 1.0) / _1070);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1673 = frontier_phi_40_35_ladder;
        }
        float _1675 = isnan(_1467) ? _1098 : (isnan(_1098) ? _1467 : min(_1098, _1467));
        float _1676 = isnan(_1673) ? _1675 : (isnan(_1675) ? _1673 : min(_1675, _1673));
        float _1680 = (_1676 * _1064) + _1053;
        float _1681 = (_1676 * _1067) + _1057;
        float _1682 = (_1676 * _1070) + _1061;
        float _1683 = _1676 * 9.9999997473787516355514526367188e-05;
        float _1685 = (-1.0) - _1683;
        float _1687 = _1683 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1682 > _1687) || ((_1682 < _1685) || ((_1681 > _1687) || ((_1681 < _1685) || ((_1680 < _1685) || (_1680 > _1687))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1880 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1682, cbModelParam._m0[9u].z, fma(_1681, cbModelParam._m0[9u].y, _1680 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1682, cbModelParam._m0[10u].z, fma(_1681, cbModelParam._m0[10u].y, _1680 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1682, cbModelParam._m0[11u].z, fma(_1681, cbModelParam._m0[11u].y, _1680 * cbModelParam._m0[11u].x))), _1003);
            frontier_phi_18_40_ladder = _1880.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1880.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1880.x * cbModelParam._m0[1u].y;
        }
        _1086 = frontier_phi_18_40_ladder_2;
        _1088 = frontier_phi_18_40_ladder_1;
        _1090 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1074 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_468, _469, _470), _1003);
        _1086 = _1074.x * cbModelParam._m0[1u].y;
        _1088 = _1074.y * cbModelParam._m0[1u].y;
        _1090 = _1074.z * cbModelParam._m0[1u].y;
    }
    float _1094 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _319);
    float _1095 = isnan(_1094) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1094 : min(cbModelParam._m0[25u].w, _1094));
    float _1188;
    float _1190;
    float _1192;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1152 = fma(_536, cbModelParam._m0[21u].z, fma(_532, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _528)) + cbModelParam._m0[21u].w;
        float _1156 = fma(_536, cbModelParam._m0[22u].z, fma(_532, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _528)) + cbModelParam._m0[22u].w;
        float _1160 = fma(_536, cbModelParam._m0[23u].z, fma(_532, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _528)) + cbModelParam._m0[23u].w;
        float _1163 = fma(_470, cbModelParam._m0[21u].z, fma(_469, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _468));
        float _1166 = fma(_470, cbModelParam._m0[22u].z, fma(_469, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _468));
        float _1169 = fma(_470, cbModelParam._m0[23u].z, fma(_469, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _468));
        float _1472;
        if (_1163 > 0.0)
        {
            _1472 = abs((1.0 - _1152) / _1163);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1163 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1152 + 1.0) / _1163);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1472 = frontier_phi_30_26_ladder;
        }
        float _1700;
        if (_1166 > 0.0)
        {
            _1700 = abs((1.0 - _1156) / _1166);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1166 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1156 + 1.0) / _1166);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1700 = frontier_phi_42_37_ladder;
        }
        float _2002;
        if (_1169 > 0.0)
        {
            _2002 = abs((1.0 - _1160) / _1169);
        }
        else
        {
            float frontier_phi_53_48_ladder;
            if (_1169 < 0.0)
            {
                frontier_phi_53_48_ladder = abs((_1160 + 1.0) / _1169);
            }
            else
            {
                frontier_phi_53_48_ladder = 5000.0;
            }
            _2002 = frontier_phi_53_48_ladder;
        }
        float _2004 = isnan(_1700) ? _1472 : (isnan(_1472) ? _1700 : min(_1472, _1700));
        float _2005 = isnan(_2002) ? _2004 : (isnan(_2004) ? _2002 : min(_2004, _2002));
        float _2009 = (_2005 * _1163) + _1152;
        float _2010 = (_2005 * _1166) + _1156;
        float _2011 = (_2005 * _1169) + _1160;
        float _2012 = _2005 * 9.9999997473787516355514526367188e-05;
        float _2013 = (-1.0) - _2012;
        float _2015 = _2012 + 1.0;
        float frontier_phi_27_53_ladder;
        float frontier_phi_27_53_ladder_1;
        float frontier_phi_27_53_ladder_2;
        if ((_2011 > _2015) || ((_2011 < _2013) || ((_2010 > _2015) || ((_2010 < _2013) || ((_2009 < _2013) || (_2009 > _2015))))))
        {
            frontier_phi_27_53_ladder = 0.0;
            frontier_phi_27_53_ladder_1 = 0.0;
            frontier_phi_27_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2137 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2011, cbModelParam._m0[17u].z, fma(_2010, cbModelParam._m0[17u].y, _2009 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2011, cbModelParam._m0[18u].z, fma(_2010, cbModelParam._m0[18u].y, _2009 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2011, cbModelParam._m0[19u].z, fma(_2010, cbModelParam._m0[19u].y, _2009 * cbModelParam._m0[19u].x))), _1095);
            frontier_phi_27_53_ladder = _2137.y * cbModelParam._m0[1u].z;
            frontier_phi_27_53_ladder_1 = _2137.x * cbModelParam._m0[1u].z;
            frontier_phi_27_53_ladder_2 = _2137.z * cbModelParam._m0[1u].z;
        }
        _1188 = frontier_phi_27_53_ladder_1;
        _1190 = frontier_phi_27_53_ladder;
        _1192 = frontier_phi_27_53_ladder_2;
    }
    else
    {
        vec4 _1172 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_468, _469, _470), _1095);
        _1188 = _1172.x * cbModelParam._m0[1u].z;
        _1190 = _1172.y * cbModelParam._m0[1u].z;
        _1192 = _1172.z * cbModelParam._m0[1u].z;
    }
    float _1205 = (((_499 * _316) + _500) * _459) * ((cbModelParam._m0[1u].w * (_1188 - _1086)) + _1086);
    float _1207 = (((_499 * _317) + _500) * _459) * ((cbModelParam._m0[1u].w * (_1190 - _1088)) + _1088);
    float _1209 = (((_499 * _318) + _500) * _459) * ((cbModelParam._m0[1u].w * (_1192 - _1090)) + _1090);
    float _1230 = fma(_1209, cbSceneParam._m0[89u].z, fma(_1207, cbSceneParam._m0[89u].y, _1205 * cbSceneParam._m0[89u].x));
    float _1233 = fma(_1209, cbSceneParam._m0[90u].z, fma(_1207, cbSceneParam._m0[90u].y, _1205 * cbSceneParam._m0[90u].x));
    float _1236 = fma(_1209, cbSceneParam._m0[91u].z, fma(_1207, cbSceneParam._m0[91u].y, _1205 * cbSceneParam._m0[91u].x));
    vec4 _1244 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_353, _354));
    float _1246 = _1244.w;
    uint _1261 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1265 = floatBitsToUint(cbInstanceData._m0[_1261 + 5u]);
    uint _1267 = _1265.x * 14u;
    uint _1268 = _1267 + 13u;
    float _1274 = _459 + (-1.0);
    float _1279 = (cbLight._m0[_1268].x * _1274) + 1.0;
    float _1280 = (cbLight._m0[_1268].y * _1274) + 1.0;
    float _1281 = (cbLight._m0[_1268].w * _1274) + 1.0;
    uint _1285 = _1267 + 8u;
    float _1301 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1267].w)) * _319) * 0.949999988079071044921875);
    float _1302 = _1301 * _1301;
    float _1303 = cbLight._m0[_1267].x + _282;
    float _1304 = cbLight._m0[_1267].y + _283;
    float _1305 = cbLight._m0[_1267].z + _284;
    float _1309 = inversesqrt(dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305)));
    float _1310 = _1309 * _1303;
    float _1311 = _1309 * _1304;
    float _1312 = _1309 * _1305;
    float _1313 = dot(vec3(_312, _313, _314), vec3(cbLight._m0[_1267].xyz));
    float _3082 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
    float _1316 = isnan(1.0) ? _3082 : (isnan(_3082) ? 1.0 : min(_3082, 1.0));
    float _3093 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _1317 = isnan(1.0) ? _3093 : (isnan(_3093) ? 1.0 : min(_3093, 1.0));
    float _1318 = dot(vec3(_312, _313, _314), vec3(_1310, _1311, _1312));
    float _3104 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
    float _1321 = isnan(1.0) ? _3104 : (isnan(_3104) ? 1.0 : min(_3104, 1.0));
    float _1322 = dot(vec3(cbLight._m0[_1267].xyz), vec3(_1310, _1311, _1312));
    float _3115 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
    float _1326 = _1302 * _1302;
    float _1330 = ((_1321 * _1321) * (_1326 + (-1.0))) + 1.0;
    float _1338 = exp2(log2(1.0 - (isnan(1.0) ? _3115 : (isnan(_3115) ? 1.0 : min(_3115, 1.0)))) * 5.0);
    float _1339 = 1.0 - _316;
    float _1340 = 1.0 - _317;
    float _1341 = 1.0 - _318;
    float _1348 = 1.0 - _1302;
    float _1359 = (0.5 / (((_1317 * ((_1316 * _1348) + _1302)) + 9.9999999392252902907785028219223e-09) + (((_1317 * _1348) + _1302) * _1316))) * _1316;
    float _3126 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
    float _1361 = (isnan(1.0) ? _3126 : (isnan(_3126) ? 1.0 : min(_3126, 1.0))) * (_1326 / ((_1330 * _1330) * 3.141590118408203125));
    float _1362 = isnan(1.0) ? _1279 : (isnan(_1279) ? 1.0 : min(_1279, 1.0));
    uint _1375 = _1267 | 1u;
    uint _1379 = _1267 + 9u;
    float _1393 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1375].w)) * _319) * 0.949999988079071044921875);
    float _1394 = _1393 * _1393;
    float _1395 = cbLight._m0[_1375].x + _282;
    float _1396 = cbLight._m0[_1375].y + _283;
    float _1397 = cbLight._m0[_1375].z + _284;
    float _1401 = inversesqrt(dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397)));
    float _1402 = _1401 * _1395;
    float _1403 = _1401 * _1396;
    float _1404 = _1401 * _1397;
    float _1405 = dot(vec3(_312, _313, _314), vec3(cbLight._m0[_1375].xyz));
    float _3142 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
    float _1408 = isnan(1.0) ? _3142 : (isnan(_3142) ? 1.0 : min(_3142, 1.0));
    float _1409 = dot(vec3(_312, _313, _314), vec3(_1402, _1403, _1404));
    float _3153 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
    float _1412 = isnan(1.0) ? _3153 : (isnan(_3153) ? 1.0 : min(_3153, 1.0));
    float _1413 = dot(vec3(cbLight._m0[_1375].xyz), vec3(_1402, _1403, _1404));
    float _3164 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
    float _1417 = _1394 * _1394;
    float _1421 = ((_1412 * _1412) * (_1417 + (-1.0))) + 1.0;
    float _1428 = exp2(log2(1.0 - (isnan(1.0) ? _3164 : (isnan(_3164) ? 1.0 : min(_3164, 1.0)))) * 5.0);
    float _1435 = 1.0 - _1394;
    float _1445 = (0.5 / (((_1317 * ((_1408 * _1435) + _1394)) + 9.9999999392252902907785028219223e-09) + (((_1317 * _1435) + _1394) * _1408))) * _1408;
    float _3175 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
    float _1447 = (isnan(1.0) ? _3175 : (isnan(_3175) ? 1.0 : min(_3175, 1.0))) * (_1417 / ((_1421 * _1421) * 3.141590118408203125));
    float _1448 = isnan(1.0) ? _1280 : (isnan(_1280) ? 1.0 : min(_1280, 1.0));
    float _1458 = (((((_1428 * _1339) + _316) * cbLight._m0[_1379].x) * _1447) * _1448) + ((((cbLight._m0[_1285].x * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1246))) * ((_1338 * _1339) + _316)) * _1361) * _1362);
    float _1459 = (((((_1428 * _1340) + _317) * cbLight._m0[_1379].y) * _1447) * _1448) + ((((cbLight._m0[_1285].y * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1246))) * ((_1338 * _1340) + _317)) * _1361) * _1362);
    float _1460 = (((((_1428 * _1341) + _318) * cbLight._m0[_1379].z) * _1447) * _1448) + ((((cbLight._m0[_1285].z * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1246))) * ((_1338 * _1341) + _318)) * _1361) * _1362);
    uvec4 _1464 = floatBitsToUint(cbLight._m0[_1267 + 12u]);
    float _1477;
    float _1479;
    float _1481;
    if (_1464.x == 0u)
    {
        _1477 = _1458;
        _1479 = _1459;
        _1481 = _1460;
    }
    else
    {
        float _1487 = (cbLight._m0[_1268].z * _1274) + 1.0;
        uint _1488 = _1267 + 2u;
        uint _1492 = _1267 + 10u;
        float _1506 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1488].w)) * _319) * 0.949999988079071044921875);
        float _1507 = _1506 * _1506;
        float _1508 = cbLight._m0[_1488].x + _282;
        float _1509 = cbLight._m0[_1488].y + _283;
        float _1510 = cbLight._m0[_1488].z + _284;
        float _1514 = inversesqrt(dot(vec3(_1508, _1509, _1510), vec3(_1508, _1509, _1510)));
        float _1515 = _1514 * _1508;
        float _1516 = _1514 * _1509;
        float _1517 = _1514 * _1510;
        float _1518 = dot(vec3(_312, _313, _314), vec3(cbLight._m0[_1488].xyz));
        float _3191 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1521 = isnan(1.0) ? _3191 : (isnan(_3191) ? 1.0 : min(_3191, 1.0));
        float _1522 = dot(vec3(_312, _313, _314), vec3(_1515, _1516, _1517));
        float _3202 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1525 = isnan(1.0) ? _3202 : (isnan(_3202) ? 1.0 : min(_3202, 1.0));
        float _1526 = dot(vec3(cbLight._m0[_1488].xyz), vec3(_1515, _1516, _1517));
        float _3213 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1530 = _1507 * _1507;
        float _1534 = ((_1525 * _1525) * (_1530 + (-1.0))) + 1.0;
        float _1541 = exp2(log2(1.0 - (isnan(1.0) ? _3213 : (isnan(_3213) ? 1.0 : min(_3213, 1.0)))) * 5.0);
        float _1548 = 1.0 - _1507;
        float _1558 = (0.5 / (((_1317 * ((_1521 * _1548) + _1507)) + 9.9999999392252902907785028219223e-09) + (((_1317 * _1548) + _1507) * _1521))) * _1521;
        float _3224 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1560 = (isnan(1.0) ? _3224 : (isnan(_3224) ? 1.0 : min(_3224, 1.0))) * (_1530 / ((_1534 * _1534) * 3.141590118408203125));
        float _1561 = isnan(1.0) ? _1487 : (isnan(_1487) ? 1.0 : min(_1487, 1.0));
        _1477 = (((((_1541 * _1339) + _316) * cbLight._m0[_1492].x) * _1560) * _1561) + _1458;
        _1479 = (((((_1541 * _1340) + _317) * cbLight._m0[_1492].y) * _1560) * _1561) + _1459;
        _1481 = (((((_1541 * _1341) + _318) * cbLight._m0[_1492].z) * _1560) * _1561) + _1460;
    }
    float _1579;
    float _1581;
    float _1583;
    if (_1464.y == 0u)
    {
        _1579 = _1477;
        _1581 = _1479;
        _1583 = _1481;
    }
    else
    {
        uint _1590 = _1267 + 3u;
        uint _1594 = _1267 + 11u;
        float _1608 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1590].w)) * _319) * 0.949999988079071044921875);
        float _1609 = _1608 * _1608;
        float _1610 = cbLight._m0[_1590].x + _282;
        float _1611 = cbLight._m0[_1590].y + _283;
        float _1612 = cbLight._m0[_1590].z + _284;
        float _1616 = inversesqrt(dot(vec3(_1610, _1611, _1612), vec3(_1610, _1611, _1612)));
        float _1617 = _1616 * _1610;
        float _1618 = _1616 * _1611;
        float _1619 = _1616 * _1612;
        float _1620 = dot(vec3(_312, _313, _314), vec3(cbLight._m0[_1590].xyz));
        float _3240 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1623 = isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0));
        float _1624 = dot(vec3(_312, _313, _314), vec3(_1617, _1618, _1619));
        float _3251 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1627 = isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0));
        float _1628 = dot(vec3(cbLight._m0[_1590].xyz), vec3(_1617, _1618, _1619));
        float _3262 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1632 = _1609 * _1609;
        float _1636 = ((_1627 * _1627) * (_1632 + (-1.0))) + 1.0;
        float _1643 = exp2(log2(1.0 - (isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0)))) * 5.0);
        float _1650 = 1.0 - _1609;
        float _1660 = (0.5 / (((_1317 * ((_1623 * _1650) + _1609)) + 9.9999999392252902907785028219223e-09) + (((_1317 * _1650) + _1609) * _1623))) * _1623;
        float _3273 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1662 = (isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0))) * (_1632 / ((_1636 * _1636) * 3.141590118408203125));
        float _1663 = isnan(1.0) ? _1281 : (isnan(_1281) ? 1.0 : min(_1281, 1.0));
        _1579 = (((((_1643 * _1339) + _316) * cbLight._m0[_1594].x) * _1662) * _1663) + _1477;
        _1581 = (((((_1643 * _1340) + _317) * cbLight._m0[_1594].y) * _1662) * _1663) + _1479;
        _1583 = (((((_1643 * _1341) + _318) * cbLight._m0[_1594].z) * _1662) * _1663) + _1481;
    }
    float _1804;
    float _1806;
    float _1808;
    if (_1265.y == 0u)
    {
        float _1744 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1745 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1744;
        float _1746 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1744;
        float _1747 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1744;
        uvec4 _1759 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1760 = _1759.x;
        uint _1771 = uint((float(_1759.y) * floor(float(uint(cbSceneParam._m0[85u].y * _354) / _1760))) + floor(float(uint(cbSceneParam._m0[85u].x * _353) / _1760)));
        float _1781 = (log2(_1747 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1782 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        uint _1785 = uint(isnan(14.0) ? _1782 : (isnan(_1782) ? 14.0 : min(_1782, 14.0)));
        uvec4 _1790 = texelFetch(g_lightClusterGridBuffer, int(((_1785 << 2u) + (_1771 << 6u)) >> 2u));
        uint _1791 = _1790.x;
        uint _1792 = _1759.z;
        float _1889;
        float _1891;
        float _1893;
        if (((((1u << ((_1792 >> 4u) & 15u)) + 4294967295u) & _1791) == 0u) || ((_1792 & 240u) == 0u))
        {
            _1889 = 0.0;
            _1891 = 0.0;
            _1893 = 0.0;
        }
        else
        {
            float _1890;
            float _1892;
            float _1894;
            float _2051 = 0.0;
            float _2052 = 0.0;
            float _2053 = 0.0;
            uint _2054 = 0u;
            uint _2063;
            bool _2064;
            for (;;)
            {
                _2063 = texelFetch(g_lightClassification, int((((_1785 << 5u) + (_1771 << 9u)) + (_2054 << 2u)) >> 2u)).x;
                _2064 = _2063 == 0u;
                float frontier_phi_64_pred;
                float frontier_phi_64_pred_1;
                float frontier_phi_64_pred_2;
                if (_2064)
                {
                    frontier_phi_64_pred = _2053;
                    frontier_phi_64_pred_1 = _2052;
                    frontier_phi_64_pred_2 = _2051;
                }
                else
                {
                    float _2209;
                    float _2210;
                    float _2211;
                    uint _2212;
                    _2209 = _2051;
                    _2210 = _2052;
                    _2211 = _2053;
                    _2212 = _2063;
                    float _2142;
                    float _2143;
                    float _2144;
                    for (;;)
                    {
                        uint _2216 = uint(findLSB(_2212)) + (_2054 << 5u);
                        uint _2213 = (_2212 + 4294967295u) & _2212;
                        uint _2218 = _2216 * 48u;
                        vec4 _2232 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2218)).x, texelFetch(g_PointLightRenderingBuffer, int(_2218 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2218 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2218 + 3u)).x));
                        uint _2249 = (_2216 * 48u) + 8u;
                        vec3 _2260 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2249)).x, texelFetch(g_PointLightRenderingBuffer, int(_2249 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2249 + 2u)).x));
                        float _2264 = _2232.x - _1745;
                        float _2265 = _2232.y - _1746;
                        float _2266 = _2232.z - _1747;
                        float _2267 = dot(vec3(_2264, _2265, _2266), vec3(_2264, _2265, _2266));
                        float _2270 = inversesqrt(_2267);
                        float _2271 = _2270 * _2264;
                        float _2272 = _2270 * _2265;
                        float _2273 = _2270 * _2266;
                        float _2279 = 1.0 - (_2267 * _2232.w);
                        float _3299 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
                        float _2281 = sqrt(_2267) * uintBitsToFloat(uvec4(_2239, _2240, _2241, texelFetch(g_PointLightRenderingBuffer, int(((_2216 * 48u) + 4u) + 3u)).x)).w;
                        float _2285 = _2281 * _2281;
                        float _2286 = (-0.0) - _1745;
                        float _2287 = (-0.0) - _1746;
                        float _2288 = (-0.0) - _1747;
                        float _2292 = inversesqrt(dot(vec3(_2286, _2287, _2288), vec3(_2286, _2287, _2288)));
                        float _2293 = _2292 * _2286;
                        float _2294 = _2292 * _2287;
                        float _2295 = _2292 * _2288;
                        float _2303 = exp2(log2(1.0 / ((_2285 * 3.5) + 5.0)) * 0.25);
                        float _2304 = 1.0 - _481;
                        float _2311 = sqrt(1.0 - ((1.0 - (_2304 * _2304)) * (1.0 - (_2303 * _2303))));
                        float _2312 = _2311 * _2311;
                        float _2313 = _2312 * _2312;
                        float _2314 = _2293 + _2271;
                        float _2315 = _2294 + _2272;
                        float _2316 = _2295 + _2273;
                        float _2320 = inversesqrt(dot(vec3(_2314, _2315, _2316), vec3(_2314, _2315, _2316)));
                        float _2324 = dot(vec3(_374, _377, _380), vec3(_2293, _2294, _2295));
                        float _3310 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
                        float _2327 = isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0));
                        float _2328 = dot(vec3(_374, _377, _380), vec3(_2320 * _2314, _2320 * _2315, _2320 * _2316));
                        float _3321 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
                        float _2331 = isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0));
                        float _2335 = ((_2331 * _2331) * (_2313 + (-1.0))) + 1.0;
                        float _2336 = (1.39999997615814208984375 / (_2281 + 1.39999997615814208984375)) * _2312;
                        float _2337 = _2336 * _2336;
                        float _2340 = ((1.0 - _2337) * dot(vec3(_374, _377, _380), vec3(_2271, _2272, _2273))) + _2337;
                        float _3332 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
                        float _2341 = isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0));
                        float _2342 = 1.0 - _2312;
                        float _2352 = (0.5 / (((_2341 * ((_2327 * _2342) + _2312)) + 9.9999999392252902907785028219223e-09) + (((_2341 * _2342) + _2312) * _2327))) * _2341;
                        float _3343 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
                        float _2363 = (((_2313 * 3.1415927410125732421875) * (isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0)))) / ((_2335 * _2335) * ((_2285 * 2.1991131305694580078125) + 3.141590118408203125))) * (isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0)));
                        _2142 = (_2363 * _2260.x) + _2209;
                        _2143 = (_2363 * _2260.y) + _2210;
                        _2144 = (_2363 * _2260.z) + _2211;
                        if (_2213 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2209 = _2142;
                            _2210 = _2143;
                            _2211 = _2144;
                            _2212 = _2213;
                        }
                    }
                    frontier_phi_64_pred = _2144;
                    frontier_phi_64_pred_1 = _2143;
                    frontier_phi_64_pred_2 = _2142;
                }
                _1894 = frontier_phi_64_pred;
                _1892 = frontier_phi_64_pred_1;
                _1890 = frontier_phi_64_pred_2;
                uint _2055 = _2054 + 1u;
                if (_2055 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2051 = _1890;
                    _2052 = _1892;
                    _2053 = _1894;
                    _2054 = _2055;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1889 = _1890;
            _1891 = _1892;
            _1893 = _1894;
        }
        uvec4 _1897 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1898 = _1897.z;
        uint _1900 = (_1898 >> 8u) & 15u;
        float _2028;
        float _2030;
        float _2032;
        if (((4294967295u << _1900) & _1791) == 0u)
        {
            _2028 = _1889;
            _2030 = _1891;
            _2032 = _1893;
        }
        else
        {
            float _2044 = inversesqrt(dot(vec3(_1745, _1746, _1747), vec3(_1745, _1746, _1747)));
            float _2045 = _2044 * _1745;
            float _2046 = _2044 * _1746;
            float _2047 = _2044 * _1747;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            if (_1900 < ((_1898 >> 12u) & 15u))
            {
                float _2029;
                float _2031;
                float _2033;
                float _2195 = _1889;
                float _2196 = _1891;
                float _2197 = _1893;
                uint _2198 = _1900;
                uint _2207;
                bool _2208;
                for (;;)
                {
                    _2207 = texelFetch(g_lightClassification, int((((_1785 << 5u) + (_1771 << 9u)) + (_2198 << 2u)) >> 2u)).x;
                    _2208 = _2207 == 0u;
                    float frontier_phi_75_pred;
                    float frontier_phi_75_pred_1;
                    float frontier_phi_75_pred_2;
                    if (_2208)
                    {
                        frontier_phi_75_pred = _2197;
                        frontier_phi_75_pred_1 = _2196;
                        frontier_phi_75_pred_2 = _2195;
                    }
                    else
                    {
                        float _2377;
                        float _2378;
                        float _2379;
                        float _2643;
                        float _2644;
                        float _2645;
                        float _2387 = _2195;
                        float _2388 = _2196;
                        float _2389 = _2197;
                        uint _2390 = _2207;
                        uint _2391;
                        uint _2401;
                        vec4 _2416;
                        float _2417;
                        vec3 _2429;
                        vec4 _2445;
                        vec4 _2461;
                        float _2508;
                        bool _2509;
                        for (;;)
                        {
                            _2401 = ((_2198 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2390));
                            _2391 = (_2390 + 4294967295u) & _2390;
                            uint _2403 = _2401 * 40u;
                            _2416 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2403 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2403 + 3u)).x));
                            _2417 = _2416.w;
                            uint _2419 = (_2401 * 40u) + 8u;
                            _2429 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2419)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2419 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2419 + 2u)).x));
                            uint _2432 = (_2401 * 40u) + 16u;
                            _2445 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2432)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2432 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2432 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2432 + 3u)).x));
                            uint _2448 = (_2401 * 40u) + 20u;
                            _2461 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2448)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2448 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2448 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2448 + 3u)).x));
                            uint _2464 = (_2401 * 40u) + 24u;
                            vec4 _2477 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2464)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2464 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2464 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2464 + 3u)).x));
                            uint _2483 = (_2401 * 40u) + 28u;
                            vec4 _2496 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2483)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2483 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2483 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2483 + 3u)).x));
                            _2508 = fma(_1747, _2496.z, fma(_1746, _2496.y, _2496.x * _1745)) + _2496.w;
                            _2509 = !((fma(_1747, _2477.z, fma(_1746, _2477.y, _2477.x * _1745)) + _2477.w) <= 0.0);
                            float frontier_phi_81_pred;
                            float frontier_phi_81_pred_1;
                            float frontier_phi_81_pred_2;
                            if (_2509)
                            {
                                float _2543 = _2416.x - _1745;
                                float _2544 = _2416.y - _1746;
                                float _2545 = _2416.z - _1747;
                                float _2546 = dot(vec3(_2543, _2544, _2545), vec3(_2543, _2544, _2545));
                                float _2549 = inversesqrt(_2546);
                                float _2550 = _2549 * _2543;
                                float _2551 = _2549 * _2544;
                                float _2552 = _2549 * _2545;
                                float _2556 = 1.0 - (_2546 / (_2417 * _2417));
                                float _3354 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
                                float _2558 = sqrt(_2546) * uintBitsToFloat(uvec4(_2512, _2513, _2514, texelFetch(g_SpotLightRenderingBuffer, int(((_2401 * 40u) + 4u) + 3u)).x)).w;
                                float _2561 = _2558 * _2558;
                                float _2562 = (fma(_1747, _2445.z, fma(_1746, _2445.y, _2445.x * _1745)) + _2445.w) / _2508;
                                float _2563 = (fma(_1747, _2461.z, fma(_1746, _2461.y, _2461.x * _1745)) + _2461.w) / _2508;
                                float _2567 = 1.0 - dot(vec2(_2562, _2563), vec2(_2562, _2563));
                                float _3365 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
                                float _2577 = exp2(log2(1.0 / ((_2561 * 3.5) + 5.0)) * 0.25);
                                float _2578 = 1.0 - _481;
                                float _2585 = sqrt(1.0 - ((1.0 - (_2578 * _2578)) * (1.0 - (_2577 * _2577))));
                                float _2586 = _2585 * _2585;
                                float _2587 = _2586 * _2586;
                                float _2588 = _2550 - _2045;
                                float _2589 = _2551 - _2046;
                                float _2590 = _2552 - _2047;
                                float _2594 = inversesqrt(dot(vec3(_2588, _2589, _2590), vec3(_2588, _2589, _2590)));
                                float _2598 = dot(vec3(_374, _377, _380), vec3((-0.0) - _2045, (-0.0) - _2046, (-0.0) - _2047));
                                float _3376 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
                                float _2601 = isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0));
                                float _2602 = dot(vec3(_374, _377, _380), vec3(_2594 * _2588, _2594 * _2589, _2594 * _2590));
                                float _3387 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
                                float _2605 = isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0));
                                float _2609 = ((_2605 * _2605) * (_2587 + (-1.0))) + 1.0;
                                float _2610 = (1.39999997615814208984375 / (_2558 + 1.39999997615814208984375)) * _2586;
                                float _2611 = _2610 * _2610;
                                float _2617 = ((1.0 - _2611) * dot(vec3(_374, _377, _380), vec3(_2550, _2551, _2552))) + _2611;
                                float _3398 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
                                float _2618 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
                                float _2619 = 1.0 - _2586;
                                float _2629 = (0.5 / (((_2618 * ((_2601 * _2619) + _2586)) + 9.9999999392252902907785028219223e-09) + (((_2618 * _2619) + _2586) * _2601))) * _2618;
                                float _3409 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
                                float _2639 = ((isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0))) * (isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0)))) * (((_2587 * 3.1415927410125732421875) * (isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0)))) / ((_2609 * _2609) * ((_2561 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_81_pred = _2639 * _2429.z;
                                frontier_phi_81_pred_1 = _2639 * _2429.y;
                                frontier_phi_81_pred_2 = _2639 * _2429.x;
                            }
                            else
                            {
                                frontier_phi_81_pred = 0.0;
                                frontier_phi_81_pred_1 = 0.0;
                                frontier_phi_81_pred_2 = 0.0;
                            }
                            _2645 = frontier_phi_81_pred;
                            _2644 = frontier_phi_81_pred_1;
                            _2643 = frontier_phi_81_pred_2;
                            _2377 = _2643 + _2387;
                            _2378 = _2644 + _2388;
                            _2379 = _2645 + _2389;
                            if (_2391 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2387 = _2377;
                                _2388 = _2378;
                                _2389 = _2379;
                                _2390 = _2391;
                                continue;
                            }
                        }
                        frontier_phi_75_pred = _2379;
                        frontier_phi_75_pred_1 = _2378;
                        frontier_phi_75_pred_2 = _2377;
                    }
                    _2033 = frontier_phi_75_pred;
                    _2031 = frontier_phi_75_pred_1;
                    _2029 = frontier_phi_75_pred_2;
                    uint _2199 = _2198 + 1u;
                    if (_2199 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2195 = _2029;
                        _2196 = _2031;
                        _2197 = _2033;
                        _2198 = _2199;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2031;
                frontier_phi_55_56_ladder_1 = _2033;
                frontier_phi_55_56_ladder_2 = _2029;
            }
            else
            {
                frontier_phi_55_56_ladder = _1891;
                frontier_phi_55_56_ladder_1 = _1893;
                frontier_phi_55_56_ladder_2 = _1889;
            }
            _2028 = frontier_phi_55_56_ladder_2;
            _2030 = frontier_phi_55_56_ladder;
            _2032 = frontier_phi_55_56_ladder_1;
        }
        float _2037 = isnan(1.0) ? _459 : (isnan(_459) ? 1.0 : min(_459, 1.0));
        _1804 = ((_2028 * _316) * _2037) + _1579;
        _1806 = ((_2030 * _317) * _2037) + _1581;
        _1808 = ((_2032 * _318) * _2037) + _1583;
    }
    else
    {
        _1804 = _1579;
        _1806 = _1581;
        _1808 = _1583;
    }
    float _1812 = 0.959999978542327880859375 - ((isnan(1.0) ? _447 : (isnan(_447) ? 1.0 : min(_447, 1.0))) * 0.959999978542327880859375);
    float _1820 = _1812 - (exp2(log2(1.0 - _475) * 5.0) * _1812);
    float _1824 = ((_1804 + ((isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0))) * _994)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _258.x) * exp2((-0.0) - (((cbMtdParam._m0[10u].w * cbMtdParam._m0[10u].x) * _288) * _289))) * _1820);
    float _1825 = ((_1806 + ((isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0))) * _994)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _258.y) * exp2((-0.0) - (((cbMtdParam._m0[11u].x * cbMtdParam._m0[10u].x) * _288) * _289))) * _1820);
    float _1826 = ((_1808 + ((isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0))) * _994)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _258.z) * exp2((-0.0) - (((cbMtdParam._m0[11u].y * cbMtdParam._m0[10u].x) * _288) * _289))) * _1820);
    uint _1827 = _1261 + 6u;
    float _1835 = _353 / cbSceneParam._m0[86u].x;
    float _1836 = _354 / cbSceneParam._m0[86u].y;
    vec4 _1850 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1835, _1836, (log2((isnan(cbSceneParam._m0[77u].w) ? _335 : (isnan(_335) ? cbSceneParam._m0[77u].w : min(_335, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1852 = _1850.x;
    float _1853 = _1850.y;
    float _1854 = _1850.z;
    float _1855 = _1850.w;
    float _1945;
    float _1947;
    float _1949;
    float _1951;
    if (_335 > cbSceneParam._m0[78u].w)
    {
        float _1908 = isnan(_335) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _335 : min(cbSceneParam._m0[80u].w, _335));
        float _1909 = _1908 / _335;
        float _1920 = _1909 * _221;
        float _1921 = _222 * _1909;
        float _1922 = (-0.0) - _1921;
        float _1923 = _1909 * _223;
        float _1925 = (cbSceneParam._m0[77u].w * _1922) / _1908;
        float _1926 = _1925 + cbSceneParam._m0[79u].w;
        float _1927 = cbSceneParam._m0[79u].w - _1921;
        float _1933 = sqrt(((_1920 * _1920) + (_1921 * _1921)) + (_1923 * _1923));
        float _1936 = (1.0 - (cbSceneParam._m0[77u].w / _1908)) * _1933;
        float _1941 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1943 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2152;
        if (abs((_1922 - _1925) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2152 = ((((_1926 > 0.0) ? exp2(_1941 * _1926) : (2.0 - exp2(_1943 * _1926))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1936;
        }
        else
        {
            float _2077 = 1.0 / cbSceneParam._m0[80u].x;
            float _2078 = isnan(_1927) ? _1926 : (isnan(_1926) ? _1927 : max(_1926, _1927));
            float _2079 = isnan(_1927) ? _1926 : (isnan(_1926) ? _1927 : min(_1926, _1927));
            float _2088 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : min(_2078, 0.0));
            float _2089 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : min(_2079, 0.0));
            _2152 = ((abs(_1933 / _1922) * cbSceneParam._m0[80u].y) * ((((_2088 - _2089) * 2.0) - ((exp2(_1941 * (isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0)))) - exp2(_1941 * (isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0))))) * _2077)) - ((exp2(_1943 * _2088) - exp2(_1943 * _2089)) * _2077))) + (_1936 * cbSceneParam._m0[80u].z);
        }
        vec4 _2154 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1835, _1836, 1.0), 0.0);
        float _2163 = exp2((_2152 * (-1.44269502162933349609375)) * (1.0 - _2154.w));
        float _2164 = log2(_2163);
        float _2180 = log2(_1855);
        _1945 = (exp2(_2180 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2164 * cbSceneParam._m0[78u].x)) * _2154.x) / cbSceneParam._m0[78u].x)) + _1852;
        _1947 = (exp2(_2180 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2164 * cbSceneParam._m0[78u].y)) * _2154.y) / cbSceneParam._m0[78u].y)) + _1853;
        _1949 = (exp2(_2180 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2164 * cbSceneParam._m0[78u].z)) * _2154.z) / cbSceneParam._m0[78u].z)) + _1854;
        _1951 = _2163 * _1855;
    }
    else
    {
        _1945 = _1852;
        _1947 = _1853;
        _1949 = _1854;
        _1951 = _1855;
    }
    bool _2190;
    vec4 _1960;
    vec4 _1982;
    float _1984;
    float _1988;
    float _1989;
    float _1990;
    float _1991;
    bool _2001;
    for (;;)
    {
        _1960 = cbMatDynParam._m0[0u];
        float _1962 = roundEven(_1960.y);
        bool _1963 = _1962 == 3.0;
        float _1964 = log2(_1951);
        float _1971 = exp2(_1964 * cbSceneParam._m0[78u].x) * _1824;
        float _1972 = exp2(_1964 * cbSceneParam._m0[78u].y) * _1825;
        float _1973 = exp2(_1964 * cbSceneParam._m0[78u].z) * _1826;
        float _1980 = _342 + (-0.5);
        _1982 = cbMtdParam._m0[1u];
        _1984 = _1982.y * _1980;
        float _1987 = (_1962 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1988 = _1987 * (_1963 ? _1971 : (_1971 + (cbSceneParam._m0[72u].w * _1945)));
        _1989 = _1987 * (_1963 ? _1972 : (_1972 + (cbSceneParam._m0[72u].w * _1947)));
        _1990 = _1987 * (_1963 ? _1973 : (_1973 + (cbSceneParam._m0[72u].w * _1949)));
        _1991 = _1980 * 0.999000012874603271484375;
        _2001 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2001)
        {
            if ((cbInstanceData._m0[_1261 + 7u].x + _1991) < 0.5)
            {
                _2190 = true;
                break;
            }
        }
        uint _2113 = (_1261 + 9u) + uint(_1960.w);
        if ((cbInstanceData._m0[_2113].w < 1.0) && ((cbInstanceData._m0[_2113].w + _1991) < 0.5))
        {
            _2190 = true;
            break;
        }
        if ((_1984 + 1.0) < _1982.x)
        {
            _2190 = true;
            break;
        }
        _2190 = false;
        break;
    }
    float _2368;
    if (_2190)
    {
        discard_state = true;
        _2368 = 0.0;
    }
    else
    {
        _2368 = cbInstanceData._m0[_1827].w;
    }
    SV_Target.x = _1988;
    SV_Target.y = _1989;
    SV_Target.z = _1990;
    SV_Target.w = _2368;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1827].w;
    discard_exit();
}


