#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Emissive_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Emissive_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Emissive_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _848;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _188 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _195 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _196 = _195 * NORMAL.x;
    float _197 = _195 * NORMAL.y;
    float _198 = _195 * NORMAL.z;
    float _202 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210;
    float _211;
    float _212;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _210 = (-0.0) - _196;
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
    }
    else
    {
        _210 = _196;
        _211 = _197;
        _212 = _198;
    }
    vec4 _226 = texture(sampler2D(M_AMSN_V_Emissive_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _229 = _226.x;
    float _230 = _226.y;
    float _231 = _226.z;
    float _233 = _226.w * TEXCOORD_1.z;
    vec4 _249 = texture(sampler2D(M_AMSN_V_Emissive_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _253 = _249.z;
    float _257 = (_249.x * 2.0) + (-1.0);
    float _259 = (_249.y * 2.0) + (-1.0);
    float _260 = dot(vec2(_257, _259), vec2(_257, _259));
    float _3206 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _266 = sqrt(1.0 - (isnan(1.0) ? _3206 : (isnan(_3206) ? 1.0 : min(_3206, 1.0))));
    vec4 _279 = texture(sampler2D(M_AMSN_V_Emissive_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _289 = fma(_266, _210, fma(_259, _202 * TANGENT.x, (_188 * _180) * _257));
    float _292 = fma(_266, _211, fma(_259, _202 * TANGENT.y, (_188 * _181) * _257));
    float _295 = fma(_266, _212, fma(_259, _202 * TANGENT.z, (_188 * _182) * _257));
    float _299 = inversesqrt(dot(vec3(_289, _292, _295), vec3(_289, _292, _295)));
    float _300 = _299 * _289;
    float _301 = _299 * _292;
    float _302 = _299 * _295;
    float _3217 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _303 = isnan(1.0) ? _3217 : (isnan(_3217) ? 1.0 : min(_3217, 1.0));
    float _3228 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _304 = isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0));
    float _3239 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _3250 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3261 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3272 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _308 = isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0));
    float _324 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _366 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _376 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _366);
    float _377 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _366);
    float _378 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _366);
    float _382 = inversesqrt(dot(vec3(_376, _377, _378), vec3(_376, _377, _378)));
    float _383 = _376 * _382;
    float _384 = _377 * _382;
    float _385 = _378 * _382;
    float _391 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _392 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _413 = fma(_302, cbSceneParam._m0[5u].z, fma(_301, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _300));
    float _416 = fma(_302, cbSceneParam._m0[6u].z, fma(_301, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _300));
    float _419 = fma(_302, cbSceneParam._m0[7u].z, fma(_301, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _300));
    uint _432 = uint(roundEven(NORMAL.w)) * 13u;
    uint _434 = _432 + 9u;
    uint _435 = _434 + uint(cbMatDynParam._m0[0u].w);
    float _441 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0)))) * cbInstanceData._m0[_435].x;
    float _442 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0)))) * cbInstanceData._m0[_435].y;
    float _443 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0)))) * cbInstanceData._m0[_435].z;
    float _3283 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _444 = isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0));
    float _3294 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _445 = isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0));
    float _3305 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _446 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
    float _447 = 1.0 - _308;
    float _448 = _444 * _447;
    float _449 = _445 * _447;
    float _450 = _446 * _447;
    float _455 = (_444 + (-0.039999999105930328369140625)) * _308;
    float _456 = (_445 + (-0.039999999105930328369140625)) * _308;
    float _457 = (_446 + (-0.039999999105930328369140625)) * _308;
    float _458 = _455 + 0.039999999105930328369140625;
    float _460 = _456 + 0.039999999105930328369140625;
    float _461 = _457 + 0.039999999105930328369140625;
    vec4 _470 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _391, cbSceneParam._m0[86u].y * _392));
    float _473 = _470.x * TEXCOORD_1.w;
    float _474 = dot(vec3(_300, _301, _302), vec3(_383, _384, _385));
    float _477 = _474 * 2.0;
    float _481 = (_477 * _300) - _383;
    float _482 = (_477 * _301) - _384;
    float _483 = (_477 * _302) - _385;
    float _487 = abs(dot(vec3(_383, _384, _385), vec3(_300, _301, _302)));
    float _3316 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _489 = sqrt(_304);
    float _502 = exp2((_489 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_489 * 3.0));
    float _508 = (1.0 - _502) * ((_489 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _509 = _502 * _489;
    float _537 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _541 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _545 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _847;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _572 = fma(_545, cbModelParam._m0[26u].z, fma(_541, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _537));
        float _576 = fma(_545, cbModelParam._m0[27u].z, fma(_541, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _537));
        float _580 = fma(_545, cbModelParam._m0[28u].z, fma(_541, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _537));
        float _605 = _537 + _300;
        float _606 = _541 + _301;
        float _607 = _545 + _302;
        float _617 = fma(_607, cbModelParam._m0[26u].z, fma(_606, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _605)) - _572;
        float _618 = fma(_607, cbModelParam._m0[27u].z, fma(_606, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _605)) - _576;
        float _619 = fma(_607, cbModelParam._m0[28u].z, fma(_606, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _605)) - _580;
        float _623 = inversesqrt(dot(vec3(_617, _618, _619), vec3(_617, _618, _619)));
        float _636 = ((_623 * _617) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_572 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _637 = ((_623 * _618) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_576 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _638 = ((_623 * _619) / cbModelParam._m0[34u].z) + ((((((_580 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _641 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_636, _637, _638), 0.0);
        vec4 _648 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_636, _637, _638), 0.0);
        vec4 _655 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_636, _637, _638), 0.0);
        vec4 _662 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_636, _637, _638), 0.0);
        float _675 = exp2((_641.w + (-0.5)) * 20.0) * 2.0;
        float _676 = _675 * (_641.x + (-0.5));
        float _677 = _675 * (_641.y + (-0.5));
        float _678 = _675 * (_641.z + (-0.5));
        float _685 = exp2((_648.w + (-0.5)) * 20.0) * 2.0;
        float _686 = _685 * (_648.x + (-0.5));
        float _687 = _685 * (_648.y + (-0.5));
        float _688 = _685 * (_648.z + (-0.5));
        float _695 = exp2((_655.w + (-0.5)) * 20.0) * 2.0;
        float _696 = _695 * (_655.x + (-0.5));
        float _697 = _695 * (_655.y + (-0.5));
        float _698 = _695 * (_655.z + (-0.5));
        float _705 = exp2((_662.w + (-0.5)) * 20.0) * 2.0;
        float _706 = _705 * (_662.x + (-0.5));
        float _707 = _705 * (_662.y + (-0.5));
        float _708 = _705 * (_662.z + (-0.5));
        float _709 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _710 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _711 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _712 = _676 * 0.5;
        float _713 = _686 * 0.5;
        float _714 = _696 * 0.5;
        float _715 = dot(vec3(_712, _713, _714), vec3(_712, _713, _714));
        float _720 = (_715 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_715);
        float _729 = (dot(vec3(_300, _301, _302), vec3(_720 * _712, _720 * _713, _720 * _714)) + 1.0) * 0.5;
        float _3342 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _739 = sqrt(((_713 * _713) + (_712 * _712)) + (_714 * _714)) / (_709 + 9.9999997473787516355514526367188e-06);
        float _3353 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _740 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
        float _741 = _740 * 2.0;
        float _745 = (1.0 - _740) / (_740 + 1.0);
        float _3364 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _746 = isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0));
        float _755 = ((((1.0 - _746) * (_741 + 2.0)) * exp2(log2(isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0))) * (_741 + 1.0))) + _746) * _709;
        float _756 = _677 * 0.5;
        float _757 = _687 * 0.5;
        float _758 = _697 * 0.5;
        float _759 = dot(vec3(_756, _757, _758), vec3(_756, _757, _758));
        float _764 = (_759 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_759);
        float _772 = (dot(vec3(_300, _301, _302), vec3(_764 * _756, _764 * _757, _764 * _758)) + 1.0) * 0.5;
        float _3375 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _781 = sqrt(((_757 * _757) + (_756 * _756)) + (_758 * _758)) / (_710 + 9.9999997473787516355514526367188e-06);
        float _3386 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _782 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
        float _783 = _782 * 2.0;
        float _787 = (1.0 - _782) / (_782 + 1.0);
        float _3397 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _788 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
        float _797 = ((((1.0 - _788) * (_783 + 2.0)) * exp2(log2(isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0))) * (_783 + 1.0))) + _788) * _710;
        float _798 = _678 * 0.5;
        float _799 = _688 * 0.5;
        float _800 = _698 * 0.5;
        float _801 = dot(vec3(_798, _799, _800), vec3(_798, _799, _800));
        float _806 = (_801 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_801);
        float _814 = (dot(vec3(_300, _301, _302), vec3(_806 * _798, _806 * _799, _806 * _800)) + 1.0) * 0.5;
        float _3408 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _823 = sqrt(((_799 * _799) + (_798 * _798)) + (_800 * _800)) / (_711 + 9.9999997473787516355514526367188e-06);
        float _3419 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _824 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
        float _825 = _824 * 2.0;
        float _829 = (1.0 - _824) / (_824 + 1.0);
        float _3430 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
        float _839 = ((((1.0 - _830) * (_825 + 2.0)) * exp2(log2(isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0))) * (_825 + 1.0))) + _830) * _711;
        _847 = _678;
        _849 = _677;
        _850 = _676;
        _851 = _688;
        _852 = _687;
        _853 = _686;
        _854 = _698;
        _855 = _697;
        _856 = _696;
        _857 = _711;
        _858 = _710;
        _859 = _709;
        _860 = cbModelParam._m0[36u].z * (isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0)));
        _861 = cbModelParam._m0[36u].z * (isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0)));
        _862 = cbModelParam._m0[36u].z * (isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0)));
    }
    else
    {
        _847 = _848;
        _849 = _848;
        _850 = _848;
        _851 = _848;
        _852 = _848;
        _853 = _848;
        _854 = _848;
        _855 = _848;
        _856 = _848;
        _857 = _848;
        _858 = _848;
        _859 = _848;
        _860 = 0.0;
        _861 = 0.0;
        _862 = 0.0;
    }
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _888 = fma(_545, cbModelParam._m0[30u].z, fma(_541, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _537));
        float _892 = fma(_545, cbModelParam._m0[31u].z, fma(_541, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _537));
        float _896 = fma(_545, cbModelParam._m0[32u].z, fma(_541, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _537));
        float _919 = _537 + _300;
        float _920 = _541 + _301;
        float _921 = _545 + _302;
        float _931 = fma(_921, cbModelParam._m0[30u].z, fma(_920, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _919)) - _888;
        float _932 = fma(_921, cbModelParam._m0[31u].z, fma(_920, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _919)) - _892;
        float _933 = fma(_921, cbModelParam._m0[32u].z, fma(_920, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _919)) - _896;
        float _937 = inversesqrt(dot(vec3(_931, _932, _933), vec3(_931, _932, _933)));
        float _950 = ((_937 * _931) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_888 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _951 = ((_937 * _932) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_892 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _952 = ((_937 * _933) / cbModelParam._m0[35u].z) + ((((((_896 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        float _987 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_954.x + (-0.5));
        float _989 = _987 * (_954.y + (-0.5));
        float _990 = _987 * (_954.z + (-0.5));
        float _997 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_961.x + (-0.5));
        float _999 = _997 * (_961.y + (-0.5));
        float _1000 = _997 * (_961.z + (-0.5));
        float _1007 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_968.x + (-0.5));
        float _1009 = _1007 * (_968.y + (-0.5));
        float _1010 = _1007 * (_968.z + (-0.5));
        float _1017 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = _1017 * (_975.x + (-0.5));
        float _1019 = _1017 * (_975.y + (-0.5));
        float _1020 = _1017 * (_975.z + (-0.5));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1024 = _988 * 0.5;
        float _1025 = _998 * 0.5;
        float _1026 = _1008 * 0.5;
        float _1027 = dot(vec3(_1024, _1025, _1026), vec3(_1024, _1025, _1026));
        float _1032 = (_1027 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1027);
        float _1040 = (dot(vec3(_300, _301, _302), vec3(_1032 * _1024, _1032 * _1025, _1032 * _1026)) + 1.0) * 0.5;
        float _3471 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1049 = sqrt(((_1025 * _1025) + (_1024 * _1024)) + (_1026 * _1026)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _3482 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
        float _1051 = _1050 * 2.0;
        float _1055 = (1.0 - _1050) / (_1050 + 1.0);
        float _3493 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
        float _1065 = ((((1.0 - _1056) * (_1051 + 2.0)) * exp2(log2(isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0))) * (_1051 + 1.0))) + _1056) * _1021;
        float _1066 = _989 * 0.5;
        float _1067 = _999 * 0.5;
        float _1068 = _1009 * 0.5;
        float _1069 = dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068));
        float _1074 = (_1069 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1069);
        float _1082 = (dot(vec3(_300, _301, _302), vec3(_1074 * _1066, _1074 * _1067, _1074 * _1068)) + 1.0) * 0.5;
        float _3504 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1091 = sqrt(((_1067 * _1067) + (_1066 * _1066)) + (_1068 * _1068)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3515 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _1093 = _1092 * 2.0;
        float _1097 = (1.0 - _1092) / (_1092 + 1.0);
        float _3526 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
        float _1107 = ((((1.0 - _1098) * (_1093 + 2.0)) * exp2(log2(isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0))) * (_1093 + 1.0))) + _1098) * _1022;
        float _1108 = _990 * 0.5;
        float _1109 = _1000 * 0.5;
        float _1110 = _1010 * 0.5;
        float _1111 = dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110));
        float _1116 = (_1111 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1111);
        float _1124 = (dot(vec3(_300, _301, _302), vec3(_1116 * _1108, _1116 * _1109, _1116 * _1110)) + 1.0) * 0.5;
        float _3537 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1133 = sqrt(((_1109 * _1109) + (_1108 * _1108)) + (_1110 * _1110)) / (_1023 + 9.9999997473787516355514526367188e-06);
        float _3548 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _1135 = _1134 * 2.0;
        float _1139 = (1.0 - _1134) / (_1134 + 1.0);
        float _3559 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _1149 = ((((1.0 - _1140) * (_1135 + 2.0)) * exp2(log2(isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0))) * (_1135 + 1.0))) + _1140) * _1023;
        _1157 = _990;
        _1158 = _989;
        _1159 = _988;
        _1160 = _1000;
        _1161 = _999;
        _1162 = _998;
        _1163 = _1010;
        _1164 = _1009;
        _1165 = _1008;
        _1166 = _1023;
        _1167 = _1022;
        _1168 = _1021;
        _1169 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0)));
        _1170 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0)));
        _1171 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)));
    }
    else
    {
        _1157 = _848;
        _1158 = _848;
        _1159 = _848;
        _1160 = _848;
        _1161 = _848;
        _1162 = _848;
        _1163 = _848;
        _1164 = _848;
        _1165 = _848;
        _1166 = _848;
        _1167 = _848;
        _1168 = _848;
        _1169 = 0.0;
        _1170 = 0.0;
        _1171 = 0.0;
    }
    float _1181 = (cbModelParam._m0[1u].x * (_1169 - _860)) + _860;
    float _1182 = (cbModelParam._m0[1u].x * (_1170 - _861)) + _861;
    float _1183 = (cbModelParam._m0[1u].x * (_1171 - _862)) + _862;
    float _1204 = fma(_1183, cbSceneParam._m0[89u].z, fma(_1182, cbSceneParam._m0[89u].y, _1181 * cbSceneParam._m0[89u].x));
    float _1207 = fma(_1183, cbSceneParam._m0[90u].z, fma(_1182, cbSceneParam._m0[90u].y, _1181 * cbSceneParam._m0[90u].x));
    float _1210 = fma(_1183, cbSceneParam._m0[91u].z, fma(_1182, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1181));
    float _1225 = _481 * 0.5;
    float _1226 = _482 * 0.5;
    float _1227 = _483 * 0.5;
    float _1228 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_1159, _1162, _1165, _1168));
    float _1231 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_1158, _1161, _1164, _1167));
    float _1234 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_1157, _1160, _1163, _1166));
    float _1268;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1241 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_847, _851, _854, _857));
        float _1245 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_849, _852, _855, _858));
        float _1249 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_850, _853, _856, _859));
        float _1256 = dot(vec4(cbModelParam._m0[39u]), vec4(_1225, _1226, _1227, 1.0));
        _1268 = dot(vec3(isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)), isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)), isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1256) ? 0.0 : (isnan(0.0) ? _1256 : max(0.0, _1256))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1268 = 1.0;
    }
    float _1279;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1270 = dot(vec4(cbModelParam._m0[40u]), vec4(_1225, _1226, _1227, 1.0));
        _1279 = dot(vec3(isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)), isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)), isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1270) ? 0.0 : (isnan(0.0) ? _1270 : max(0.0, _1270))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1279 = 1.0;
    }
    float _1283 = (_1279 * cbModelParam._m0[1u].x) + (_1268 * (1.0 - cbModelParam._m0[1u].x));
    float _1293 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _304);
    float _1294 = isnan(_1293) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1293 : min(cbModelParam._m0[25u].z, _1293));
    float _1376;
    float _1378;
    float _1380;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1343 = fma(_545, cbModelParam._m0[13u].z, fma(_541, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _537)) + cbModelParam._m0[13u].w;
        float _1347 = fma(_545, cbModelParam._m0[14u].z, fma(_541, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _537)) + cbModelParam._m0[14u].w;
        float _1351 = fma(_545, cbModelParam._m0[15u].z, fma(_541, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _537)) + cbModelParam._m0[15u].w;
        float _1354 = fma(_483, cbModelParam._m0[13u].z, fma(_482, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _481));
        float _1357 = fma(_483, cbModelParam._m0[14u].z, fma(_482, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _481));
        float _1360 = fma(_483, cbModelParam._m0[15u].z, fma(_482, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _481));
        float _1388;
        if (_1354 > 0.0)
        {
            _1388 = abs((1.0 - _1343) / _1354);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1354 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1343 + 1.0) / _1354);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1388 = frontier_phi_16_14_ladder;
        }
        float _1596;
        if (_1357 > 0.0)
        {
            _1596 = abs((1.0 - _1347) / _1357);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1357 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1347 + 1.0) / _1357);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1596 = frontier_phi_25_21_ladder;
        }
        float _1850;
        if (_1360 > 0.0)
        {
            _1850 = abs((1.0 - _1351) / _1360);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1360 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1351 + 1.0) / _1360);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1850 = frontier_phi_37_32_ladder;
        }
        float _1852 = isnan(_1596) ? _1388 : (isnan(_1388) ? _1596 : min(_1388, _1596));
        float _1853 = isnan(_1850) ? _1852 : (isnan(_1852) ? _1850 : min(_1852, _1850));
        float _1857 = (_1853 * _1354) + _1343;
        float _1858 = (_1853 * _1357) + _1347;
        float _1859 = (_1853 * _1360) + _1351;
        float _1860 = _1853 * 9.9999997473787516355514526367188e-05;
        float _1862 = (-1.0) - _1860;
        float _1864 = _1860 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1859 > _1864) || ((_1859 < _1862) || ((_1858 > _1864) || ((_1858 < _1862) || ((_1857 < _1862) || (_1857 > _1864))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1987 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1859, cbModelParam._m0[9u].z, fma(_1858, cbModelParam._m0[9u].y, _1857 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1859, cbModelParam._m0[10u].z, fma(_1858, cbModelParam._m0[10u].y, _1857 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1859, cbModelParam._m0[11u].z, fma(_1858, cbModelParam._m0[11u].y, _1857 * cbModelParam._m0[11u].x))), _1294);
            frontier_phi_15_37_ladder = _1987.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1987.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1987.x * cbModelParam._m0[1u].y;
        }
        _1376 = frontier_phi_15_37_ladder_2;
        _1378 = frontier_phi_15_37_ladder_1;
        _1380 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1364 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_481, _482, _483), _1294);
        _1376 = _1364.x * cbModelParam._m0[1u].y;
        _1378 = _1364.y * cbModelParam._m0[1u].y;
        _1380 = _1364.z * cbModelParam._m0[1u].y;
    }
    float _1384 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _304);
    float _1385 = isnan(_1384) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1384 : min(cbModelParam._m0[25u].w, _1384));
    float _1478;
    float _1480;
    float _1482;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1442 = fma(_545, cbModelParam._m0[21u].z, fma(_541, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _537)) + cbModelParam._m0[21u].w;
        float _1446 = fma(_545, cbModelParam._m0[22u].z, fma(_541, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _537)) + cbModelParam._m0[22u].w;
        float _1450 = fma(_545, cbModelParam._m0[23u].z, fma(_541, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _537)) + cbModelParam._m0[23u].w;
        float _1453 = fma(_483, cbModelParam._m0[21u].z, fma(_482, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _481));
        float _1456 = fma(_483, cbModelParam._m0[22u].z, fma(_482, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _481));
        float _1459 = fma(_483, cbModelParam._m0[23u].z, fma(_482, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _481));
        float _1601;
        if (_1453 > 0.0)
        {
            _1601 = abs((1.0 - _1442) / _1453);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1453 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1442 + 1.0) / _1453);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1601 = frontier_phi_27_23_ladder;
        }
        float _1877;
        if (_1456 > 0.0)
        {
            _1877 = abs((1.0 - _1446) / _1456);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1456 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1446 + 1.0) / _1456);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1877 = frontier_phi_39_34_ladder;
        }
        float _2090;
        if (_1459 > 0.0)
        {
            _2090 = abs((1.0 - _1450) / _1459);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1459 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1450 + 1.0) / _1459);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2090 = frontier_phi_48_45_ladder;
        }
        float _2092 = isnan(_1877) ? _1601 : (isnan(_1601) ? _1877 : min(_1601, _1877));
        float _2093 = isnan(_2090) ? _2092 : (isnan(_2092) ? _2090 : min(_2092, _2090));
        float _2097 = (_2093 * _1453) + _1442;
        float _2098 = (_2093 * _1456) + _1446;
        float _2099 = (_2093 * _1459) + _1450;
        float _2100 = _2093 * 9.9999997473787516355514526367188e-05;
        float _2101 = (-1.0) - _2100;
        float _2103 = _2100 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2099 > _2103) || ((_2099 < _2101) || ((_2098 > _2103) || ((_2098 < _2101) || ((_2097 < _2101) || (_2097 > _2103))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2318 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2099, cbModelParam._m0[17u].z, fma(_2098, cbModelParam._m0[17u].y, _2097 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2099, cbModelParam._m0[18u].z, fma(_2098, cbModelParam._m0[18u].y, _2097 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2099, cbModelParam._m0[19u].z, fma(_2098, cbModelParam._m0[19u].y, _2097 * cbModelParam._m0[19u].x))), _1385);
            frontier_phi_24_48_ladder = _2318.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2318.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2318.x * cbModelParam._m0[1u].z;
        }
        _1478 = frontier_phi_24_48_ladder_2;
        _1480 = frontier_phi_24_48_ladder_1;
        _1482 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1462 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_481, _482, _483), _1385);
        _1478 = _1462.x * cbModelParam._m0[1u].z;
        _1480 = _1462.y * cbModelParam._m0[1u].z;
        _1482 = _1462.z * cbModelParam._m0[1u].z;
    }
    float _1495 = (((_508 * _458) + _509) * _473) * ((cbModelParam._m0[1u].w * (_1478 - _1376)) + _1376);
    float _1497 = (((_508 * _460) + _509) * _473) * ((cbModelParam._m0[1u].w * (_1480 - _1378)) + _1378);
    float _1499 = (((_508 * _461) + _509) * _473) * ((cbModelParam._m0[1u].w * (_1482 - _1380)) + _1380);
    float _1502 = fma(_1499, cbSceneParam._m0[89u].z, fma(_1497, cbSceneParam._m0[89u].y, _1495 * cbSceneParam._m0[89u].x));
    float _1505 = fma(_1499, cbSceneParam._m0[90u].z, fma(_1497, cbSceneParam._m0[90u].y, _1495 * cbSceneParam._m0[90u].x));
    float _1508 = fma(_1499, cbSceneParam._m0[91u].z, fma(_1497, cbSceneParam._m0[91u].y, _1495 * cbSceneParam._m0[91u].x));
    uvec4 _1518 = floatBitsToUint(cbInstanceData._m0[_432 + 5u]);
    uint _1520 = _1518.x * 14u;
    uint _1521 = _1520 + 13u;
    float _1528 = _473 + (-1.0);
    float _1533 = (cbLight._m0[_1521].x * _1528) + 1.0;
    float _1534 = (cbLight._m0[_1521].y * _1528) + 1.0;
    float _1535 = (cbLight._m0[_1521].z * _1528) + 1.0;
    float _1536 = (cbLight._m0[_1521].w * _1528) + 1.0;
    uint _1537 = _1520 + 5u;
    float _1543 = isnan(1.0) ? _1534 : (isnan(_1534) ? 1.0 : min(_1534, 1.0));
    uint _1547 = _1520 + 4u;
    float _1554 = isnan(1.0) ? _1533 : (isnan(_1533) ? 1.0 : min(_1533, 1.0));
    uint _1558 = _1520 | 1u;
    float _1569 = dot(vec3(cbLight._m0[_1520].xyz), vec3(_300, _301, _302));
    float _1572 = dot(vec3(cbLight._m0[_1558].xyz), vec3(_300, _301, _302));
    float _3695 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
    float _3706 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
    float _1577 = (isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * 0.3183098733425140380859375;
    float _1579 = (isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * 0.3183098733425140380859375;
    float _1586 = ((cbLight._m0[_1537].x * _1543) * _1579) + ((cbLight._m0[_1547].x * _1554) * _1577);
    float _1587 = ((_1543 * cbLight._m0[_1537].y) * _1579) + ((_1554 * cbLight._m0[_1547].y) * _1577);
    float _1588 = ((_1543 * cbLight._m0[_1537].z) * _1579) + ((_1554 * cbLight._m0[_1547].z) * _1577);
    uvec4 _1593 = floatBitsToUint(cbLight._m0[_1520 + 12u]);
    bool _1595 = _1593.x == 0u;
    float _1606;
    float _1608;
    float _1610;
    if (_1595)
    {
        _1606 = _1586;
        _1608 = _1587;
        _1610 = _1588;
    }
    else
    {
        uint _1614 = _1520 + 6u;
        float _1630 = (dot(vec3(cbLight._m0[_1520 + 2u].xyz), vec3(_300, _301, _302)) * 0.5) + 0.5;
        float _1631 = _1630 * _1630;
        float _3717 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1632 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1633 = isnan(1.0) ? _1535 : (isnan(_1535) ? 1.0 : min(_1535, 1.0));
        _1606 = (((cbLight._m0[_1614].x * 0.3183098733425140380859375) * _1632) * _1633) + _1586;
        _1608 = (((cbLight._m0[_1614].y * 0.3183098733425140380859375) * _1632) * _1633) + _1587;
        _1610 = (((cbLight._m0[_1614].z * 0.3183098733425140380859375) * _1632) * _1633) + _1588;
    }
    bool _1613 = _1593.y == 0u;
    float _1651;
    float _1653;
    float _1655;
    if (_1613)
    {
        _1651 = _1606;
        _1653 = _1608;
        _1655 = _1610;
    }
    else
    {
        uint _1821 = _1520 + 7u;
        float _1837 = (dot(vec3(cbLight._m0[_1520 + 3u].xyz), vec3(_300, _301, _302)) * 0.5) + 0.5;
        float _1838 = _1837 * _1837;
        float _3733 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1839 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1840 = isnan(1.0) ? _1536 : (isnan(_1536) ? 1.0 : min(_1536, 1.0));
        _1651 = (((cbLight._m0[_1821].x * 0.3183098733425140380859375) * _1839) * _1840) + _1606;
        _1653 = (((cbLight._m0[_1821].y * 0.3183098733425140380859375) * _1839) * _1840) + _1608;
        _1655 = (((cbLight._m0[_1821].z * 0.3183098733425140380859375) * _1839) * _1840) + _1610;
    }
    uint _1658 = _1520 + 8u;
    float _1671 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1520].w)) * _304) * 0.949999988079071044921875);
    float _1672 = _1671 * _1671;
    float _1673 = cbLight._m0[_1520].x + _383;
    float _1674 = cbLight._m0[_1520].y + _384;
    float _1675 = cbLight._m0[_1520].z + _385;
    float _1679 = inversesqrt(dot(vec3(_1673, _1674, _1675), vec3(_1673, _1674, _1675)));
    float _1680 = _1679 * _1673;
    float _1681 = _1679 * _1674;
    float _1682 = _1679 * _1675;
    float _1683 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1520].xyz));
    float _3749 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
    float _1686 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
    float _3760 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _1687 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    float _1688 = dot(vec3(_300, _301, _302), vec3(_1680, _1681, _1682));
    float _3771 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
    float _1691 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
    float _1692 = dot(vec3(cbLight._m0[_1520].xyz), vec3(_1680, _1681, _1682));
    float _3782 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
    float _1696 = _1672 * _1672;
    float _1700 = ((_1691 * _1691) * (_1696 + (-1.0))) + 1.0;
    float _1708 = exp2(log2(1.0 - (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0)))) * 5.0);
    float _1709 = 0.959999978542327880859375 - _455;
    float _1711 = 0.959999978542327880859375 - _456;
    float _1712 = 0.959999978542327880859375 - _457;
    float _1719 = 1.0 - _1672;
    float _1730 = (0.5 / (((_1687 * ((_1686 * _1719) + _1672)) + 9.9999999392252902907785028219223e-09) + (((_1687 * _1719) + _1672) * _1686))) * _1686;
    float _3793 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
    float _1732 = (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * (_1696 / ((_1700 * _1700) * 3.141590118408203125));
    uint _1743 = _1520 + 9u;
    float _1754 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1558].w)) * _304) * 0.949999988079071044921875);
    float _1755 = _1754 * _1754;
    float _1756 = cbLight._m0[_1558].x + _383;
    float _1757 = cbLight._m0[_1558].y + _384;
    float _1758 = cbLight._m0[_1558].z + _385;
    float _1762 = inversesqrt(dot(vec3(_1756, _1757, _1758), vec3(_1756, _1757, _1758)));
    float _1763 = _1762 * _1756;
    float _1764 = _1762 * _1757;
    float _1765 = _1762 * _1758;
    float _1766 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1558].xyz));
    float _3804 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _1769 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _1770 = dot(vec3(_300, _301, _302), vec3(_1763, _1764, _1765));
    float _3815 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
    float _1773 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    float _1774 = dot(vec3(cbLight._m0[_1558].xyz), vec3(_1763, _1764, _1765));
    float _3826 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
    float _1778 = _1755 * _1755;
    float _1782 = ((_1773 * _1773) * (_1778 + (-1.0))) + 1.0;
    float _1789 = exp2(log2(1.0 - (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0)))) * 5.0);
    float _1796 = 1.0 - _1755;
    float _1806 = (0.5 / (((_1687 * ((_1769 * _1796) + _1755)) + 9.9999999392252902907785028219223e-09) + (((_1687 * _1796) + _1755) * _1769))) * _1769;
    float _3837 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
    float _1808 = (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_1778 / ((_1782 * _1782) * 3.141590118408203125));
    float _1818 = (((((_1789 * _1709) + _458) * cbLight._m0[_1743].x) * _1808) * _1543) + (((((_1708 * _1709) + _458) * cbLight._m0[_1658].x) * _1732) * _1554);
    float _1819 = (((((_1789 * _1711) + _460) * cbLight._m0[_1743].y) * _1808) * _1543) + (((((_1708 * _1711) + _460) * cbLight._m0[_1658].y) * _1732) * _1554);
    float _1820 = (((((_1789 * _1712) + _461) * cbLight._m0[_1743].z) * _1808) * _1543) + (((((_1708 * _1712) + _461) * cbLight._m0[_1658].z) * _1732) * _1554);
    float _1882;
    float _1884;
    float _1886;
    if (_1595)
    {
        _1882 = _1818;
        _1884 = _1819;
        _1886 = _1820;
    }
    else
    {
        uint _1888 = _1520 + 2u;
        uint _1892 = _1520 + 10u;
        float _1906 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1888].w)) * _304) * 0.949999988079071044921875);
        float _1907 = _1906 * _1906;
        float _1908 = cbLight._m0[_1888].x + _383;
        float _1909 = cbLight._m0[_1888].y + _384;
        float _1910 = cbLight._m0[_1888].z + _385;
        float _1914 = inversesqrt(dot(vec3(_1908, _1909, _1910), vec3(_1908, _1909, _1910)));
        float _1915 = _1914 * _1908;
        float _1916 = _1914 * _1909;
        float _1917 = _1914 * _1910;
        float _1918 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1888].xyz));
        float _3848 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
        float _1921 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1922 = dot(vec3(_300, _301, _302), vec3(_1915, _1916, _1917));
        float _3859 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
        float _1925 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1926 = dot(vec3(cbLight._m0[_1888].xyz), vec3(_1915, _1916, _1917));
        float _3870 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
        float _1930 = _1907 * _1907;
        float _1934 = ((_1925 * _1925) * (_1930 + (-1.0))) + 1.0;
        float _1941 = exp2(log2(1.0 - (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0)))) * 5.0);
        float _1948 = 1.0 - _1907;
        float _1958 = (0.5 / (((_1687 * ((_1921 * _1948) + _1907)) + 9.9999999392252902907785028219223e-09) + (((_1687 * _1948) + _1907) * _1921))) * _1921;
        float _3881 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
        float _1960 = (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * (_1930 / ((_1934 * _1934) * 3.141590118408203125));
        float _1961 = isnan(1.0) ? _1535 : (isnan(_1535) ? 1.0 : min(_1535, 1.0));
        _1882 = (((((_1941 * _1709) + _458) * cbLight._m0[_1892].x) * _1960) * _1961) + _1818;
        _1884 = (((((_1941 * _1711) + _460) * cbLight._m0[_1892].y) * _1960) * _1961) + _1819;
        _1886 = (((((_1941 * _1712) + _461) * cbLight._m0[_1892].z) * _1960) * _1961) + _1820;
    }
    float _1996;
    float _1998;
    float _2000;
    if (_1613)
    {
        _1996 = _1882;
        _1998 = _1884;
        _2000 = _1886;
    }
    else
    {
        uint _2007 = _1520 + 3u;
        uint _2011 = _1520 + 11u;
        float _2025 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2007].w)) * _304) * 0.949999988079071044921875);
        float _2026 = _2025 * _2025;
        float _2027 = cbLight._m0[_2007].x + _383;
        float _2028 = cbLight._m0[_2007].y + _384;
        float _2029 = cbLight._m0[_2007].z + _385;
        float _2033 = inversesqrt(dot(vec3(_2027, _2028, _2029), vec3(_2027, _2028, _2029)));
        float _2034 = _2033 * _2027;
        float _2035 = _2033 * _2028;
        float _2036 = _2033 * _2029;
        float _2037 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_2007].xyz));
        float _3897 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        float _2040 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _2041 = dot(vec3(_300, _301, _302), vec3(_2034, _2035, _2036));
        float _3908 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
        float _2044 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _2045 = dot(vec3(cbLight._m0[_2007].xyz), vec3(_2034, _2035, _2036));
        float _3919 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2049 = _2026 * _2026;
        float _2053 = ((_2044 * _2044) * (_2049 + (-1.0))) + 1.0;
        float _2060 = exp2(log2(1.0 - (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0)))) * 5.0);
        float _2067 = 1.0 - _2026;
        float _2077 = (0.5 / (((_1687 * ((_2040 * _2067) + _2026)) + 9.9999999392252902907785028219223e-09) + (((_1687 * _2067) + _2026) * _2040))) * _2040;
        float _3930 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2079 = (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * (_2049 / ((_2053 * _2053) * 3.141590118408203125));
        float _2080 = isnan(1.0) ? _1536 : (isnan(_1536) ? 1.0 : min(_1536, 1.0));
        _1996 = (((((_2060 * _1709) + _458) * cbLight._m0[_2011].x) * _2079) * _2080) + _1882;
        _1998 = (((((_2060 * _1711) + _460) * cbLight._m0[_2011].y) * _2079) * _2080) + _1884;
        _2000 = (((((_2060 * _1712) + _461) * cbLight._m0[_2011].z) * _2079) * _2080) + _1886;
    }
    float _2214;
    float _2216;
    float _2218;
    float _2220;
    float _2222;
    float _2224;
    if (_1518.y == 0u)
    {
        float _2155 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2156 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2155;
        float _2157 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2155;
        float _2158 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2155;
        uvec4 _2170 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2171 = _2170.x;
        uint _2182 = uint((float(_2170.y) * floor(float(uint(cbSceneParam._m0[85u].y * _392) / _2171))) + floor(float(uint(cbSceneParam._m0[85u].x * _391) / _2171)));
        float _2192 = (log2(_2158 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2193 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        uint _2196 = uint(isnan(14.0) ? _2193 : (isnan(_2193) ? 14.0 : min(_2193, 14.0)));
        uvec4 _2201 = texelFetch(g_lightClusterGridBuffer, int(((_2196 << 2u) + (_2182 << 6u)) >> 2u));
        uint _2202 = _2201.x;
        uint _2203 = _2170.z;
        float _2323;
        float _2325;
        float _2327;
        float _2329;
        float _2331;
        float _2333;
        if (((((1u << ((_2203 >> 4u) & 15u)) + 4294967295u) & _2202) == 0u) || ((_2203 & 240u) == 0u))
        {
            _2323 = 0.0;
            _2325 = 0.0;
            _2327 = 0.0;
            _2329 = 0.0;
            _2331 = 0.0;
            _2333 = 0.0;
        }
        else
        {
            float _2324;
            float _2326;
            float _2328;
            float _2330;
            float _2332;
            float _2334;
            float _2467 = 0.0;
            float _2468 = 0.0;
            float _2469 = 0.0;
            float _2470 = 0.0;
            float _2471 = 0.0;
            float _2472 = 0.0;
            uint _2473 = 0u;
            uint _2482;
            bool _2483;
            for (;;)
            {
                _2482 = texelFetch(g_lightClassification, int((((_2196 << 5u) + (_2182 << 9u)) + (_2473 << 2u)) >> 2u)).x;
                _2483 = _2482 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2483)
                {
                    frontier_phi_63_pred = _2472;
                    frontier_phi_63_pred_1 = _2471;
                    frontier_phi_63_pred_2 = _2470;
                    frontier_phi_63_pred_3 = _2469;
                    frontier_phi_63_pred_4 = _2468;
                    frontier_phi_63_pred_5 = _2467;
                }
                else
                {
                    float _2591;
                    float _2592;
                    float _2593;
                    float _2594;
                    float _2595;
                    float _2596;
                    uint _2597;
                    _2591 = _2467;
                    _2592 = _2468;
                    _2593 = _2469;
                    _2594 = _2470;
                    _2595 = _2471;
                    _2596 = _2472;
                    _2597 = _2482;
                    float _2523;
                    float _2524;
                    float _2525;
                    float _2526;
                    float _2527;
                    float _2528;
                    for (;;)
                    {
                        uint _2601 = uint(findLSB(_2597)) + (_2473 << 5u);
                        uint _2598 = (_2597 + 4294967295u) & _2597;
                        uint _2603 = _2601 * 48u;
                        vec4 _2617 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2603)).x, texelFetch(g_PointLightRenderingBuffer, int(_2603 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2603 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2603 + 3u)).x));
                        uint _2623 = (_2601 * 48u) + 4u;
                        vec4 _2636 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2623)).x, texelFetch(g_PointLightRenderingBuffer, int(_2623 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2623 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2623 + 3u)).x));
                        uint _2642 = (_2601 * 48u) + 8u;
                        vec3 _2653 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2642)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 2u)).x));
                        float _2657 = _2617.x - _2156;
                        float _2658 = _2617.y - _2157;
                        float _2659 = _2617.z - _2158;
                        float _2660 = dot(vec3(_2657, _2658, _2659), vec3(_2657, _2658, _2659));
                        float _2663 = inversesqrt(_2660);
                        float _2664 = _2663 * _2657;
                        float _2665 = _2663 * _2658;
                        float _2666 = _2663 * _2659;
                        float _2667 = dot(vec3(_413, _416, _419), vec3(_2664, _2665, _2666));
                        float _2672 = 1.0 - (_2660 * _2617.w);
                        float _3956 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
                        float _2673 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
                        float _2674 = sqrt(_2660) * _2636.w;
                        float _2677 = 1.39999997615814208984375 / (_2674 + 1.39999997615814208984375);
                        float _2678 = _2677 * _2677;
                        float _2681 = ((1.0 - _2678) * _2667) + _2678;
                        float _2684 = _2674 * _2674;
                        float _2688 = ((isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0))) * _2673) / ((_2684 * 0.699999988079071044921875) + 1.0);
                        float _2692 = (-0.0) - _2156;
                        float _2693 = (-0.0) - _2157;
                        float _2694 = (-0.0) - _2158;
                        float _2698 = inversesqrt(dot(vec3(_2692, _2693, _2694), vec3(_2692, _2693, _2694)));
                        float _2699 = _2698 * _2692;
                        float _2700 = _2698 * _2693;
                        float _2701 = _2698 * _2694;
                        float _2709 = exp2(log2(1.0 / ((_2684 * 3.5) + 5.0)) * 0.25);
                        float _2710 = 1.0 - _489;
                        float _2717 = sqrt(1.0 - ((1.0 - (_2710 * _2710)) * (1.0 - (_2709 * _2709))));
                        float _2718 = _2717 * _2717;
                        float _2719 = _2718 * _2718;
                        float _2720 = _2699 + _2664;
                        float _2721 = _2700 + _2665;
                        float _2722 = _2701 + _2666;
                        float _2726 = inversesqrt(dot(vec3(_2720, _2721, _2722), vec3(_2720, _2721, _2722)));
                        float _2730 = dot(vec3(_413, _416, _419), vec3(_2699, _2700, _2701));
                        float _3972 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
                        float _2733 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
                        float _2734 = dot(vec3(_413, _416, _419), vec3(_2726 * _2720, _2726 * _2721, _2726 * _2722));
                        float _3983 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
                        float _2737 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
                        float _2741 = ((_2737 * _2737) * (_2719 + (-1.0))) + 1.0;
                        float _2742 = _2677 * _2718;
                        float _2743 = _2742 * _2742;
                        float _2746 = ((1.0 - _2743) * _2667) + _2743;
                        float _3994 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
                        float _2747 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
                        float _2748 = 1.0 - _2718;
                        float _2758 = (0.5 / (((_2747 * ((_2733 * _2748) + _2718)) + 9.9999999392252902907785028219223e-09) + (((_2747 * _2748) + _2718) * _2733))) * _2747;
                        float _4005 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
                        float _2769 = (((_2719 * 3.1415927410125732421875) * (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) / ((_2741 * _2741) * ((_2684 * 2.1991131305694580078125) + 3.141590118408203125))) * _2673;
                        _2526 = (_2688 * _2636.x) + _2594;
                        _2527 = (_2688 * _2636.y) + _2595;
                        _2528 = (_2688 * _2636.z) + _2596;
                        _2523 = (_2769 * _2653.x) + _2591;
                        _2524 = (_2769 * _2653.y) + _2592;
                        _2525 = (_2769 * _2653.z) + _2593;
                        if (_2598 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2591 = _2523;
                            _2592 = _2524;
                            _2593 = _2525;
                            _2594 = _2526;
                            _2595 = _2527;
                            _2596 = _2528;
                            _2597 = _2598;
                        }
                    }
                    frontier_phi_63_pred = _2528;
                    frontier_phi_63_pred_1 = _2527;
                    frontier_phi_63_pred_2 = _2526;
                    frontier_phi_63_pred_3 = _2525;
                    frontier_phi_63_pred_4 = _2524;
                    frontier_phi_63_pred_5 = _2523;
                }
                _2334 = frontier_phi_63_pred;
                _2332 = frontier_phi_63_pred_1;
                _2330 = frontier_phi_63_pred_2;
                _2328 = frontier_phi_63_pred_3;
                _2326 = frontier_phi_63_pred_4;
                _2324 = frontier_phi_63_pred_5;
                uint _2474 = _2473 + 1u;
                if (_2474 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2467 = _2324;
                    _2468 = _2326;
                    _2469 = _2328;
                    _2470 = _2330;
                    _2471 = _2332;
                    _2472 = _2334;
                    _2473 = _2474;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2323 = _2324;
            _2325 = _2326;
            _2327 = _2328;
            _2329 = _2330;
            _2331 = _2332;
            _2333 = _2334;
        }
        uvec4 _2337 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2338 = _2337.z;
        uint _2340 = (_2338 >> 8u) & 15u;
        float _2435;
        float _2437;
        float _2439;
        float _2441;
        float _2443;
        float _2445;
        if (((4294967295u << _2340) & _2202) == 0u)
        {
            _2435 = _2323;
            _2437 = _2325;
            _2439 = _2327;
            _2441 = _2329;
            _2443 = _2331;
            _2445 = _2333;
        }
        else
        {
            float _2460 = inversesqrt(dot(vec3(_2156, _2157, _2158), vec3(_2156, _2157, _2158)));
            float _2461 = _2460 * _2156;
            float _2462 = _2460 * _2157;
            float _2463 = _2460 * _2158;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2340 < ((_2338 >> 12u) & 15u))
            {
                float _2436;
                float _2438;
                float _2440;
                float _2442;
                float _2444;
                float _2446;
                float _2574 = _2323;
                float _2575 = _2325;
                float _2576 = _2327;
                float _2577 = _2329;
                float _2578 = _2331;
                float _2579 = _2333;
                uint _2580 = _2340;
                uint _2589;
                bool _2590;
                for (;;)
                {
                    _2589 = texelFetch(g_lightClassification, int((((_2196 << 5u) + (_2182 << 9u)) + (_2580 << 2u)) >> 2u)).x;
                    _2590 = _2589 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2590)
                    {
                        frontier_phi_69_pred = _2579;
                        frontier_phi_69_pred_1 = _2578;
                        frontier_phi_69_pred_2 = _2577;
                        frontier_phi_69_pred_3 = _2576;
                        frontier_phi_69_pred_4 = _2575;
                        frontier_phi_69_pred_5 = _2574;
                    }
                    else
                    {
                        float _2774;
                        float _2775;
                        float _2776;
                        float _2777;
                        float _2778;
                        float _2779;
                        float _3070;
                        float _3071;
                        float _3072;
                        float _3073;
                        float _3074;
                        float _3075;
                        float _2787 = _2574;
                        float _2788 = _2575;
                        float _2789 = _2576;
                        float _2790 = _2577;
                        float _2791 = _2578;
                        float _2792 = _2579;
                        uint _2793 = _2589;
                        uint _2794;
                        vec4 _2819;
                        float _2820;
                        vec4 _2835;
                        vec3 _2847;
                        vec4 _2863;
                        vec4 _2879;
                        float _2926;
                        bool _2927;
                        for (;;)
                        {
                            uint _2804 = ((_2580 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2793));
                            _2794 = (_2793 + 4294967295u) & _2793;
                            uint _2806 = _2804 * 40u;
                            _2819 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2806)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 3u)).x));
                            _2820 = _2819.w;
                            uint _2822 = (_2804 * 40u) + 4u;
                            _2835 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2822)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 3u)).x));
                            uint _2837 = (_2804 * 40u) + 8u;
                            _2847 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2837)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 2u)).x));
                            uint _2850 = (_2804 * 40u) + 16u;
                            _2863 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2850)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 3u)).x));
                            uint _2866 = (_2804 * 40u) + 20u;
                            _2879 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2866)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 3u)).x));
                            uint _2882 = (_2804 * 40u) + 24u;
                            vec4 _2895 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2882)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 3u)).x));
                            uint _2901 = (_2804 * 40u) + 28u;
                            vec4 _2914 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2901)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 3u)).x));
                            _2926 = fma(_2158, _2914.z, fma(_2157, _2914.y, _2914.x * _2156)) + _2914.w;
                            _2927 = !((fma(_2158, _2895.z, fma(_2157, _2895.y, _2895.x * _2156)) + _2895.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2927)
                            {
                                float _2954 = _2819.x - _2156;
                                float _2955 = _2819.y - _2157;
                                float _2956 = _2819.z - _2158;
                                float _2957 = dot(vec3(_2954, _2955, _2956), vec3(_2954, _2955, _2956));
                                float _2960 = inversesqrt(_2957);
                                float _2961 = _2960 * _2954;
                                float _2962 = _2960 * _2955;
                                float _2963 = _2960 * _2956;
                                float _2967 = 1.0 - (_2957 / (_2820 * _2820));
                                float _4016 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
                                float _2968 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
                                float _2972 = sqrt(_2957) * _2835.w;
                                float _2974 = 1.39999997615814208984375 / (_2972 + 1.39999997615814208984375);
                                float _2975 = _2974 * _2974;
                                float _2978 = ((1.0 - _2975) * dot(vec3(_2961, _2962, _2963), vec3(_413, _416, _419))) + _2975;
                                float _2981 = _2972 * _2972;
                                float _2985 = (fma(_2158, _2863.z, fma(_2157, _2863.y, _2863.x * _2156)) + _2863.w) / _2926;
                                float _2986 = (fma(_2158, _2879.z, fma(_2157, _2879.y, _2879.x * _2156)) + _2879.w) / _2926;
                                float _2990 = 1.0 - dot(vec2(_2985, _2986), vec2(_2985, _2986));
                                float _4032 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
                                float _2991 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
                                float _2992 = _2991 * (((isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0))) * _2968) / ((_2981 * 0.699999988079071044921875) + 1.0));
                                float _3004 = exp2(log2(1.0 / ((_2981 * 3.5) + 5.0)) * 0.25);
                                float _3005 = 1.0 - _489;
                                float _3012 = sqrt(1.0 - ((1.0 - (_3005 * _3005)) * (1.0 - (_3004 * _3004))));
                                float _3013 = _3012 * _3012;
                                float _3014 = _3013 * _3013;
                                float _3015 = _2961 - _2461;
                                float _3016 = _2962 - _2462;
                                float _3017 = _2963 - _2463;
                                float _3021 = inversesqrt(dot(vec3(_3015, _3016, _3017), vec3(_3015, _3016, _3017)));
                                float _3025 = dot(vec3(_413, _416, _419), vec3((-0.0) - _2461, (-0.0) - _2462, (-0.0) - _2463));
                                float _4043 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                                float _3028 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
                                float _3029 = dot(vec3(_413, _416, _419), vec3(_3021 * _3015, _3021 * _3016, _3021 * _3017));
                                float _4054 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                                float _3032 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
                                float _3036 = ((_3032 * _3032) * (_3014 + (-1.0))) + 1.0;
                                float _3037 = _2974 * _3013;
                                float _3038 = _3037 * _3037;
                                float _3044 = ((1.0 - _3038) * dot(vec3(_413, _416, _419), vec3(_2961, _2962, _2963))) + _3038;
                                float _4065 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                                float _3045 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
                                float _3046 = 1.0 - _3013;
                                float _3056 = (0.5 / (((_3045 * ((_3028 * _3046) + _3013)) + 9.9999999392252902907785028219223e-09) + (((_3045 * _3046) + _3013) * _3028))) * _3045;
                                float _4076 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                                float _3066 = (_2991 * _2968) * (((_3014 * 3.1415927410125732421875) * (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0)))) / ((_3036 * _3036) * ((_2981 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2992 * _2835.z;
                                frontier_phi_75_pred_1 = _2992 * _2835.y;
                                frontier_phi_75_pred_2 = _2992 * _2835.x;
                                frontier_phi_75_pred_3 = _3066 * _2847.z;
                                frontier_phi_75_pred_4 = _3066 * _2847.y;
                                frontier_phi_75_pred_5 = _3066 * _2847.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3075 = frontier_phi_75_pred;
                            _3074 = frontier_phi_75_pred_1;
                            _3073 = frontier_phi_75_pred_2;
                            _3072 = frontier_phi_75_pred_3;
                            _3071 = frontier_phi_75_pred_4;
                            _3070 = frontier_phi_75_pred_5;
                            _2777 = _3073 + _2790;
                            _2778 = _3074 + _2791;
                            _2779 = _3075 + _2792;
                            _2774 = _3070 + _2787;
                            _2775 = _3071 + _2788;
                            _2776 = _3072 + _2789;
                            if (_2794 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2787 = _2774;
                                _2788 = _2775;
                                _2789 = _2776;
                                _2790 = _2777;
                                _2791 = _2778;
                                _2792 = _2779;
                                _2793 = _2794;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2779;
                        frontier_phi_69_pred_1 = _2778;
                        frontier_phi_69_pred_2 = _2777;
                        frontier_phi_69_pred_3 = _2776;
                        frontier_phi_69_pred_4 = _2775;
                        frontier_phi_69_pred_5 = _2774;
                    }
                    _2446 = frontier_phi_69_pred;
                    _2444 = frontier_phi_69_pred_1;
                    _2442 = frontier_phi_69_pred_2;
                    _2440 = frontier_phi_69_pred_3;
                    _2438 = frontier_phi_69_pred_4;
                    _2436 = frontier_phi_69_pred_5;
                    uint _2581 = _2580 + 1u;
                    if (_2581 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2574 = _2436;
                        _2575 = _2438;
                        _2576 = _2440;
                        _2577 = _2442;
                        _2578 = _2444;
                        _2579 = _2446;
                        _2580 = _2581;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2446;
                frontier_phi_57_58_ladder_1 = _2444;
                frontier_phi_57_58_ladder_2 = _2442;
                frontier_phi_57_58_ladder_3 = _2440;
                frontier_phi_57_58_ladder_4 = _2438;
                frontier_phi_57_58_ladder_5 = _2436;
            }
            else
            {
                frontier_phi_57_58_ladder = _2333;
                frontier_phi_57_58_ladder_1 = _2331;
                frontier_phi_57_58_ladder_2 = _2329;
                frontier_phi_57_58_ladder_3 = _2327;
                frontier_phi_57_58_ladder_4 = _2325;
                frontier_phi_57_58_ladder_5 = _2323;
            }
            _2435 = frontier_phi_57_58_ladder_5;
            _2437 = frontier_phi_57_58_ladder_4;
            _2439 = frontier_phi_57_58_ladder_3;
            _2441 = frontier_phi_57_58_ladder_2;
            _2443 = frontier_phi_57_58_ladder_1;
            _2445 = frontier_phi_57_58_ladder;
        }
        float _2450 = isnan(1.0) ? _473 : (isnan(_473) ? 1.0 : min(_473, 1.0));
        _2214 = (_2450 * _2441) + _1651;
        _2216 = (_2450 * _2443) + _1653;
        _2218 = (_2450 * _2445) + _1655;
        _2220 = ((_2435 * _458) * _2450) + _1996;
        _2222 = ((_2437 * _460) * _2450) + _1998;
        _2224 = ((_2439 * _461) * _2450) + _2000;
    }
    else
    {
        _2214 = _1651;
        _2216 = _1653;
        _2218 = _1655;
        _2220 = _1996;
        _2222 = _1998;
        _2224 = _2000;
    }
    uint _2230 = _434 + uint(cbMatDynParam._m0[0u].w);
    float _4092 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _4103 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _4114 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _4125 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _2256 = (((isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (_2214 + ((isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0))) * _473))) + ((_2220 + ((isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))) * _1283)) * cbPerFrame._m0[3u].x)) + ((_279.x * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2230].x);
    float _2258 = (((_279.y * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2230].y) + ((_2222 + ((isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))) * _1283)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_2216 + ((isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0))) * _473)));
    float _2260 = (((_279.z * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2230].z) + ((_2224 + ((isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))) * _1283)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_2218 + ((isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0))) * _473)));
    float _2268 = cbInstanceData._m0[_432 + 6u].w * (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0)));
    float _2273 = _391 / cbSceneParam._m0[86u].x;
    float _2274 = _392 / cbSceneParam._m0[86u].y;
    vec4 _2288 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2273, _2274, (log2((isnan(cbSceneParam._m0[77u].w) ? _324 : (isnan(_324) ? cbSceneParam._m0[77u].w : min(_324, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2290 = _2288.x;
    float _2291 = _2288.y;
    float _2292 = _2288.z;
    float _2293 = _2288.w;
    float _2385;
    float _2387;
    float _2389;
    float _2391;
    if (_324 > cbSceneParam._m0[78u].w)
    {
        float _2348 = isnan(_324) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _324 : min(cbSceneParam._m0[80u].w, _324));
        float _2349 = _2348 / _324;
        float _2360 = _2349 * _376;
        float _2361 = _377 * _2349;
        float _2362 = (-0.0) - _2361;
        float _2363 = _2349 * _378;
        float _2365 = (cbSceneParam._m0[77u].w * _2362) / _2348;
        float _2366 = _2365 + cbSceneParam._m0[79u].w;
        float _2367 = cbSceneParam._m0[79u].w - _2361;
        float _2373 = sqrt(((_2360 * _2360) + (_2361 * _2361)) + (_2363 * _2363));
        float _2376 = (1.0 - (cbSceneParam._m0[77u].w / _2348)) * _2373;
        float _2381 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2383 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2536;
        if (abs((_2362 - _2365) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2536 = ((((_2366 > 0.0) ? exp2(_2381 * _2366) : (2.0 - exp2(_2383 * _2366))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2376;
        }
        else
        {
            float _2496 = 1.0 / cbSceneParam._m0[80u].x;
            float _2497 = isnan(_2367) ? _2366 : (isnan(_2366) ? _2367 : max(_2366, _2367));
            float _2498 = isnan(_2367) ? _2366 : (isnan(_2366) ? _2367 : min(_2366, _2367));
            float _2507 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : min(_2497, 0.0));
            float _2508 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : min(_2498, 0.0));
            _2536 = ((abs(_2373 / _2362) * cbSceneParam._m0[80u].y) * ((((_2507 - _2508) * 2.0) - ((exp2(_2381 * (isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0)))) - exp2(_2381 * (isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0))))) * _2496)) - ((exp2(_2383 * _2507) - exp2(_2383 * _2508)) * _2496))) + (_2376 * cbSceneParam._m0[80u].z);
        }
        vec4 _2538 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2273, _2274, 1.0), 0.0);
        float _2547 = exp2((_2536 * (-1.44269502162933349609375)) * (1.0 - _2538.w));
        float _2548 = log2(_2547);
        float _2564 = log2(_2293);
        _2385 = (exp2(_2564 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2548 * cbSceneParam._m0[78u].x)) * _2538.x) / cbSceneParam._m0[78u].x)) + _2290;
        _2387 = (exp2(_2564 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2548 * cbSceneParam._m0[78u].y)) * _2538.y) / cbSceneParam._m0[78u].y)) + _2291;
        _2389 = (exp2(_2564 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2548 * cbSceneParam._m0[78u].z)) * _2538.z) / cbSceneParam._m0[78u].z)) + _2292;
        _2391 = _2547 * _2293;
    }
    else
    {
        _2385 = _2290;
        _2387 = _2291;
        _2389 = _2292;
        _2391 = _2293;
    }
    float _2403 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2404 = _2403 == 3.0;
    float _2405 = log2(_2391);
    float _2412 = exp2(_2405 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0)));
    float _2413 = exp2(_2405 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0)));
    float _2414 = exp2(_2405 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0)));
    float _2423 = (_2403 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2423 * (_2404 ? _2412 : (_2412 + (cbSceneParam._m0[72u].w * _2385)));
    SV_Target.y = _2423 * (_2404 ? _2413 : (_2413 + (cbSceneParam._m0[72u].w * _2387)));
    SV_Target.z = _2423 * (_2404 ? _2414 : (_2414 + (cbSceneParam._m0[72u].w * _2389)));
    SV_Target.w = _2268;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2268;
}


