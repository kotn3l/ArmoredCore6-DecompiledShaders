#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Emissive_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Emissive_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Emissive_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _852;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = _199 * NORMAL.x;
    float _201 = _199 * NORMAL.y;
    float _202 = _199 * NORMAL.z;
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214;
    float _215;
    float _216;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
    }
    else
    {
        _214 = _200;
        _215 = _201;
        _216 = _202;
    }
    vec4 _230 = texture(sampler2D(M_AMSN_V_Emissive_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _233 = _230.x;
    float _234 = _230.y;
    float _235 = _230.z;
    float _237 = _230.w * TEXCOORD_1.z;
    vec4 _253 = texture(sampler2D(M_AMSN_V_Emissive_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _257 = _253.z;
    float _261 = (_253.x * 2.0) + (-1.0);
    float _263 = (_253.y * 2.0) + (-1.0);
    float _264 = dot(vec2(_261, _263), vec2(_261, _263));
    float _3493 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _270 = sqrt(1.0 - (isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0))));
    vec4 _283 = texture(sampler2D(M_AMSN_V_Emissive_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _293 = fma(_270, _214, fma(_263, _206 * TANGENT.x, (_192 * _184) * _261));
    float _296 = fma(_270, _215, fma(_263, _206 * TANGENT.y, (_192 * _185) * _261));
    float _299 = fma(_270, _216, fma(_263, _206 * TANGENT.z, (_192 * _186) * _261));
    float _303 = inversesqrt(dot(vec3(_293, _296, _299), vec3(_293, _296, _299)));
    float _304 = _303 * _293;
    float _305 = _303 * _296;
    float _306 = _303 * _299;
    float _3504 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _307 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
    float _3515 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _308 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
    float _3526 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3537 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3548 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3559 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _312 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
    float _328 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _370 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _380 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _370);
    float _381 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _370);
    float _382 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _370);
    float _386 = inversesqrt(dot(vec3(_380, _381, _382), vec3(_380, _381, _382)));
    float _387 = _380 * _386;
    float _388 = _381 * _386;
    float _389 = _382 * _386;
    float _395 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _396 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _417 = fma(_306, cbSceneParam._m0[5u].z, fma(_305, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _304));
    float _420 = fma(_306, cbSceneParam._m0[6u].z, fma(_305, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _304));
    float _423 = fma(_306, cbSceneParam._m0[7u].z, fma(_305, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _304));
    uint _436 = uint(roundEven(NORMAL.w)) * 13u;
    uint _438 = _436 + 9u;
    uint _439 = _438 + uint(cbMatDynParam._m0[0u].w);
    float _445 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0)))) * cbInstanceData._m0[_439].x;
    float _446 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0)))) * cbInstanceData._m0[_439].y;
    float _447 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0)))) * cbInstanceData._m0[_439].z;
    float _3570 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _448 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
    float _3581 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _449 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
    float _3592 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _450 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
    float _451 = 1.0 - _312;
    float _452 = _448 * _451;
    float _453 = _449 * _451;
    float _454 = _450 * _451;
    float _459 = (_448 + (-0.039999999105930328369140625)) * _312;
    float _460 = (_449 + (-0.039999999105930328369140625)) * _312;
    float _461 = (_450 + (-0.039999999105930328369140625)) * _312;
    float _462 = _459 + 0.039999999105930328369140625;
    float _464 = _460 + 0.039999999105930328369140625;
    float _465 = _461 + 0.039999999105930328369140625;
    vec4 _474 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _395, cbSceneParam._m0[86u].y * _396));
    float _477 = _474.x * TEXCOORD_1.w;
    float _478 = dot(vec3(_304, _305, _306), vec3(_387, _388, _389));
    float _481 = _478 * 2.0;
    float _485 = (_481 * _304) - _387;
    float _486 = (_481 * _305) - _388;
    float _487 = (_481 * _306) - _389;
    float _491 = abs(dot(vec3(_387, _388, _389), vec3(_304, _305, _306)));
    float _3603 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _493 = sqrt(_308);
    float _506 = exp2((_493 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_493 * 3.0));
    float _512 = (1.0 - _506) * ((_493 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _513 = _506 * _493;
    float _541 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _545 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _549 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _851;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _576 = fma(_549, cbModelParam._m0[26u].z, fma(_545, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _541));
        float _580 = fma(_549, cbModelParam._m0[27u].z, fma(_545, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _541));
        float _584 = fma(_549, cbModelParam._m0[28u].z, fma(_545, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _541));
        float _609 = _541 + _304;
        float _610 = _545 + _305;
        float _611 = _549 + _306;
        float _621 = fma(_611, cbModelParam._m0[26u].z, fma(_610, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _609)) - _576;
        float _622 = fma(_611, cbModelParam._m0[27u].z, fma(_610, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _609)) - _580;
        float _623 = fma(_611, cbModelParam._m0[28u].z, fma(_610, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _609)) - _584;
        float _627 = inversesqrt(dot(vec3(_621, _622, _623), vec3(_621, _622, _623)));
        float _640 = ((_627 * _621) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_576 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _641 = ((_627 * _622) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_580 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _642 = ((_627 * _623) / cbModelParam._m0[34u].z) + ((((((_584 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _645 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_640, _641, _642), 0.0);
        vec4 _652 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_640, _641, _642), 0.0);
        vec4 _659 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_640, _641, _642), 0.0);
        vec4 _666 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_640, _641, _642), 0.0);
        float _679 = exp2((_645.w + (-0.5)) * 20.0) * 2.0;
        float _680 = _679 * (_645.x + (-0.5));
        float _681 = _679 * (_645.y + (-0.5));
        float _682 = _679 * (_645.z + (-0.5));
        float _689 = exp2((_652.w + (-0.5)) * 20.0) * 2.0;
        float _690 = _689 * (_652.x + (-0.5));
        float _691 = _689 * (_652.y + (-0.5));
        float _692 = _689 * (_652.z + (-0.5));
        float _699 = exp2((_659.w + (-0.5)) * 20.0) * 2.0;
        float _700 = _699 * (_659.x + (-0.5));
        float _701 = _699 * (_659.y + (-0.5));
        float _702 = _699 * (_659.z + (-0.5));
        float _709 = exp2((_666.w + (-0.5)) * 20.0) * 2.0;
        float _710 = _709 * (_666.x + (-0.5));
        float _711 = _709 * (_666.y + (-0.5));
        float _712 = _709 * (_666.z + (-0.5));
        float _713 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _714 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
        float _715 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _716 = _680 * 0.5;
        float _717 = _690 * 0.5;
        float _718 = _700 * 0.5;
        float _719 = dot(vec3(_716, _717, _718), vec3(_716, _717, _718));
        float _724 = (_719 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_719);
        float _733 = (dot(vec3(_304, _305, _306), vec3(_724 * _716, _724 * _717, _724 * _718)) + 1.0) * 0.5;
        float _3629 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _743 = sqrt(((_717 * _717) + (_716 * _716)) + (_718 * _718)) / (_713 + 9.9999997473787516355514526367188e-06);
        float _3640 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _744 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _745 = _744 * 2.0;
        float _749 = (1.0 - _744) / (_744 + 1.0);
        float _3651 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _750 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _759 = ((((1.0 - _750) * (_745 + 2.0)) * exp2(log2(isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * (_745 + 1.0))) + _750) * _713;
        float _760 = _681 * 0.5;
        float _761 = _691 * 0.5;
        float _762 = _701 * 0.5;
        float _763 = dot(vec3(_760, _761, _762), vec3(_760, _761, _762));
        float _768 = (_763 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_763);
        float _776 = (dot(vec3(_304, _305, _306), vec3(_768 * _760, _768 * _761, _768 * _762)) + 1.0) * 0.5;
        float _3662 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _785 = sqrt(((_761 * _761) + (_760 * _760)) + (_762 * _762)) / (_714 + 9.9999997473787516355514526367188e-06);
        float _3673 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _786 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _787 = _786 * 2.0;
        float _791 = (1.0 - _786) / (_786 + 1.0);
        float _3684 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _792 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _801 = ((((1.0 - _792) * (_787 + 2.0)) * exp2(log2(isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * (_787 + 1.0))) + _792) * _714;
        float _802 = _682 * 0.5;
        float _803 = _692 * 0.5;
        float _804 = _702 * 0.5;
        float _805 = dot(vec3(_802, _803, _804), vec3(_802, _803, _804));
        float _810 = (_805 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_805);
        float _818 = (dot(vec3(_304, _305, _306), vec3(_810 * _802, _810 * _803, _810 * _804)) + 1.0) * 0.5;
        float _3695 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _827 = sqrt(((_803 * _803) + (_802 * _802)) + (_804 * _804)) / (_715 + 9.9999997473787516355514526367188e-06);
        float _3706 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _828 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _829 = _828 * 2.0;
        float _833 = (1.0 - _828) / (_828 + 1.0);
        float _3717 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _834 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _843 = ((((1.0 - _834) * (_829 + 2.0)) * exp2(log2(isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * (_829 + 1.0))) + _834) * _715;
        _851 = _682;
        _853 = _681;
        _854 = _680;
        _855 = _692;
        _856 = _691;
        _857 = _690;
        _858 = _702;
        _859 = _701;
        _860 = _700;
        _861 = _715;
        _862 = _714;
        _863 = _713;
        _864 = cbModelParam._m0[36u].z * (isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0)));
        _865 = cbModelParam._m0[36u].z * (isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0)));
        _866 = cbModelParam._m0[36u].z * (isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0)));
    }
    else
    {
        _851 = _852;
        _853 = _852;
        _854 = _852;
        _855 = _852;
        _856 = _852;
        _857 = _852;
        _858 = _852;
        _859 = _852;
        _860 = _852;
        _861 = _852;
        _862 = _852;
        _863 = _852;
        _864 = 0.0;
        _865 = 0.0;
        _866 = 0.0;
    }
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _892 = fma(_549, cbModelParam._m0[30u].z, fma(_545, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _541));
        float _896 = fma(_549, cbModelParam._m0[31u].z, fma(_545, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _541));
        float _900 = fma(_549, cbModelParam._m0[32u].z, fma(_545, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _541));
        float _923 = _541 + _304;
        float _924 = _545 + _305;
        float _925 = _549 + _306;
        float _935 = fma(_925, cbModelParam._m0[30u].z, fma(_924, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _923)) - _892;
        float _936 = fma(_925, cbModelParam._m0[31u].z, fma(_924, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _923)) - _896;
        float _937 = fma(_925, cbModelParam._m0[32u].z, fma(_924, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _923)) - _900;
        float _941 = inversesqrt(dot(vec3(_935, _936, _937), vec3(_935, _936, _937)));
        float _954 = ((_941 * _935) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_892 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _955 = ((_941 * _936) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_896 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _956 = ((_941 * _937) / cbModelParam._m0[35u].z) + ((((((_900 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _958 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        float _991 = exp2((_958.w + (-0.5)) * 20.0) * 2.0;
        float _992 = _991 * (_958.x + (-0.5));
        float _993 = _991 * (_958.y + (-0.5));
        float _994 = _991 * (_958.z + (-0.5));
        float _1001 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_965.x + (-0.5));
        float _1003 = _1001 * (_965.y + (-0.5));
        float _1004 = _1001 * (_965.z + (-0.5));
        float _1011 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_972.x + (-0.5));
        float _1013 = _1011 * (_972.y + (-0.5));
        float _1014 = _1011 * (_972.z + (-0.5));
        float _1021 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_979.x + (-0.5));
        float _1023 = _1021 * (_979.y + (-0.5));
        float _1024 = _1021 * (_979.z + (-0.5));
        float _1025 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1026 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1027 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1028 = _992 * 0.5;
        float _1029 = _1002 * 0.5;
        float _1030 = _1012 * 0.5;
        float _1031 = dot(vec3(_1028, _1029, _1030), vec3(_1028, _1029, _1030));
        float _1036 = (_1031 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1031);
        float _1044 = (dot(vec3(_304, _305, _306), vec3(_1036 * _1028, _1036 * _1029, _1036 * _1030)) + 1.0) * 0.5;
        float _3758 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1053 = sqrt(((_1029 * _1029) + (_1028 * _1028)) + (_1030 * _1030)) / (_1025 + 9.9999997473787516355514526367188e-06);
        float _3769 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1055 = _1054 * 2.0;
        float _1059 = (1.0 - _1054) / (_1054 + 1.0);
        float _3780 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1069 = ((((1.0 - _1060) * (_1055 + 2.0)) * exp2(log2(isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * (_1055 + 1.0))) + _1060) * _1025;
        float _1070 = _993 * 0.5;
        float _1071 = _1003 * 0.5;
        float _1072 = _1013 * 0.5;
        float _1073 = dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072));
        float _1078 = (_1073 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1073);
        float _1086 = (dot(vec3(_304, _305, _306), vec3(_1078 * _1070, _1078 * _1071, _1078 * _1072)) + 1.0) * 0.5;
        float _3791 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1095 = sqrt(((_1071 * _1071) + (_1070 * _1070)) + (_1072 * _1072)) / (_1026 + 9.9999997473787516355514526367188e-06);
        float _3802 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1097 = _1096 * 2.0;
        float _1101 = (1.0 - _1096) / (_1096 + 1.0);
        float _3813 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1111 = ((((1.0 - _1102) * (_1097 + 2.0)) * exp2(log2(isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * (_1097 + 1.0))) + _1102) * _1026;
        float _1112 = _994 * 0.5;
        float _1113 = _1004 * 0.5;
        float _1114 = _1014 * 0.5;
        float _1115 = dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114));
        float _1120 = (_1115 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1115);
        float _1128 = (dot(vec3(_304, _305, _306), vec3(_1120 * _1112, _1120 * _1113, _1120 * _1114)) + 1.0) * 0.5;
        float _3824 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1137 = sqrt(((_1113 * _1113) + (_1112 * _1112)) + (_1114 * _1114)) / (_1027 + 9.9999997473787516355514526367188e-06);
        float _3835 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1139 = _1138 * 2.0;
        float _1143 = (1.0 - _1138) / (_1138 + 1.0);
        float _3846 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1153 = ((((1.0 - _1144) * (_1139 + 2.0)) * exp2(log2(isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * (_1139 + 1.0))) + _1144) * _1027;
        _1161 = _994;
        _1162 = _993;
        _1163 = _992;
        _1164 = _1004;
        _1165 = _1003;
        _1166 = _1002;
        _1167 = _1014;
        _1168 = _1013;
        _1169 = _1012;
        _1170 = _1027;
        _1171 = _1026;
        _1172 = _1025;
        _1173 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0)));
        _1174 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0)));
        _1175 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)));
    }
    else
    {
        _1161 = _852;
        _1162 = _852;
        _1163 = _852;
        _1164 = _852;
        _1165 = _852;
        _1166 = _852;
        _1167 = _852;
        _1168 = _852;
        _1169 = _852;
        _1170 = _852;
        _1171 = _852;
        _1172 = _852;
        _1173 = 0.0;
        _1174 = 0.0;
        _1175 = 0.0;
    }
    float _1185 = (cbModelParam._m0[1u].x * (_1173 - _864)) + _864;
    float _1186 = (cbModelParam._m0[1u].x * (_1174 - _865)) + _865;
    float _1187 = (cbModelParam._m0[1u].x * (_1175 - _866)) + _866;
    float _1208 = fma(_1187, cbSceneParam._m0[89u].z, fma(_1186, cbSceneParam._m0[89u].y, _1185 * cbSceneParam._m0[89u].x));
    float _1211 = fma(_1187, cbSceneParam._m0[90u].z, fma(_1186, cbSceneParam._m0[90u].y, _1185 * cbSceneParam._m0[90u].x));
    float _1214 = fma(_1187, cbSceneParam._m0[91u].z, fma(_1186, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1185));
    float _1229 = _485 * 0.5;
    float _1230 = _486 * 0.5;
    float _1231 = _487 * 0.5;
    float _1232 = dot(vec4(_1229, _1230, _1231, 1.0), vec4(_1163, _1166, _1169, _1172));
    float _1235 = dot(vec4(_1229, _1230, _1231, 1.0), vec4(_1162, _1165, _1168, _1171));
    float _1238 = dot(vec4(_1229, _1230, _1231, 1.0), vec4(_1161, _1164, _1167, _1170));
    float _1272;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1245 = dot(vec4(_1229, _1230, _1231, 1.0), vec4(_851, _855, _858, _861));
        float _1249 = dot(vec4(_1229, _1230, _1231, 1.0), vec4(_853, _856, _859, _862));
        float _1253 = dot(vec4(_1229, _1230, _1231, 1.0), vec4(_854, _857, _860, _863));
        float _1260 = dot(vec4(cbModelParam._m0[39u]), vec4(_1229, _1230, _1231, 1.0));
        _1272 = dot(vec3(isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)), isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)), isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1260) ? 0.0 : (isnan(0.0) ? _1260 : max(0.0, _1260))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1272 = 1.0;
    }
    float _1283;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1274 = dot(vec4(cbModelParam._m0[40u]), vec4(_1229, _1230, _1231, 1.0));
        _1283 = dot(vec3(isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)), isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)), isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1274) ? 0.0 : (isnan(0.0) ? _1274 : max(0.0, _1274))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1283 = 1.0;
    }
    float _1287 = (_1283 * cbModelParam._m0[1u].x) + (_1272 * (1.0 - cbModelParam._m0[1u].x));
    float _1297 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _308);
    float _1298 = isnan(_1297) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1297 : min(cbModelParam._m0[25u].z, _1297));
    float _1380;
    float _1382;
    float _1384;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1347 = fma(_549, cbModelParam._m0[13u].z, fma(_545, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _541)) + cbModelParam._m0[13u].w;
        float _1351 = fma(_549, cbModelParam._m0[14u].z, fma(_545, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _541)) + cbModelParam._m0[14u].w;
        float _1355 = fma(_549, cbModelParam._m0[15u].z, fma(_545, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _541)) + cbModelParam._m0[15u].w;
        float _1358 = fma(_487, cbModelParam._m0[13u].z, fma(_486, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _485));
        float _1361 = fma(_487, cbModelParam._m0[14u].z, fma(_486, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _485));
        float _1364 = fma(_487, cbModelParam._m0[15u].z, fma(_486, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _485));
        float _1392;
        if (_1358 > 0.0)
        {
            _1392 = abs((1.0 - _1347) / _1358);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1358 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1347 + 1.0) / _1358);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1392 = frontier_phi_16_14_ladder;
        }
        float _1568;
        if (_1361 > 0.0)
        {
            _1568 = abs((1.0 - _1351) / _1361);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1361 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1351 + 1.0) / _1361);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1568 = frontier_phi_25_21_ladder;
        }
        float _1864;
        if (_1364 > 0.0)
        {
            _1864 = abs((1.0 - _1355) / _1364);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1364 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1355 + 1.0) / _1364);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1864 = frontier_phi_37_32_ladder;
        }
        float _1866 = isnan(_1568) ? _1392 : (isnan(_1392) ? _1568 : min(_1392, _1568));
        float _1867 = isnan(_1864) ? _1866 : (isnan(_1866) ? _1864 : min(_1866, _1864));
        float _1871 = (_1867 * _1358) + _1347;
        float _1872 = (_1867 * _1361) + _1351;
        float _1873 = (_1867 * _1364) + _1355;
        float _1874 = _1867 * 9.9999997473787516355514526367188e-05;
        float _1876 = (-1.0) - _1874;
        float _1878 = _1874 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1873 > _1878) || ((_1873 < _1876) || ((_1872 > _1878) || ((_1872 < _1876) || ((_1871 < _1876) || (_1871 > _1878))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2018 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1873, cbModelParam._m0[9u].z, fma(_1872, cbModelParam._m0[9u].y, _1871 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1873, cbModelParam._m0[10u].z, fma(_1872, cbModelParam._m0[10u].y, _1871 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1873, cbModelParam._m0[11u].z, fma(_1872, cbModelParam._m0[11u].y, _1871 * cbModelParam._m0[11u].x))), _1298);
            frontier_phi_15_37_ladder = _2018.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2018.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2018.z * cbModelParam._m0[1u].y;
        }
        _1380 = frontier_phi_15_37_ladder_1;
        _1382 = frontier_phi_15_37_ladder;
        _1384 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1368 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_485, _486, _487), _1298);
        _1380 = _1368.x * cbModelParam._m0[1u].y;
        _1382 = _1368.y * cbModelParam._m0[1u].y;
        _1384 = _1368.z * cbModelParam._m0[1u].y;
    }
    float _1388 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _308);
    float _1389 = isnan(_1388) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1388 : min(cbModelParam._m0[25u].w, _1388));
    float _1482;
    float _1484;
    float _1486;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1446 = fma(_549, cbModelParam._m0[21u].z, fma(_545, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _541)) + cbModelParam._m0[21u].w;
        float _1450 = fma(_549, cbModelParam._m0[22u].z, fma(_545, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _541)) + cbModelParam._m0[22u].w;
        float _1454 = fma(_549, cbModelParam._m0[23u].z, fma(_545, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _541)) + cbModelParam._m0[23u].w;
        float _1457 = fma(_487, cbModelParam._m0[21u].z, fma(_486, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _485));
        float _1460 = fma(_487, cbModelParam._m0[22u].z, fma(_486, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _485));
        float _1463 = fma(_487, cbModelParam._m0[23u].z, fma(_486, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _485));
        float _1573;
        if (_1457 > 0.0)
        {
            _1573 = abs((1.0 - _1446) / _1457);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1457 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1446 + 1.0) / _1457);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1573 = frontier_phi_27_23_ladder;
        }
        float _1891;
        if (_1460 > 0.0)
        {
            _1891 = abs((1.0 - _1450) / _1460);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1460 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1450 + 1.0) / _1460);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1891 = frontier_phi_39_34_ladder;
        }
        float _2229;
        if (_1463 > 0.0)
        {
            _2229 = abs((1.0 - _1454) / _1463);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1463 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1454 + 1.0) / _1463);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2229 = frontier_phi_49_46_ladder;
        }
        float _2231 = isnan(_1891) ? _1573 : (isnan(_1573) ? _1891 : min(_1573, _1891));
        float _2232 = isnan(_2229) ? _2231 : (isnan(_2231) ? _2229 : min(_2231, _2229));
        float _2236 = (_2232 * _1457) + _1446;
        float _2237 = (_2232 * _1460) + _1450;
        float _2238 = (_2232 * _1463) + _1454;
        float _2239 = _2232 * 9.9999997473787516355514526367188e-05;
        float _2240 = (-1.0) - _2239;
        float _2242 = _2239 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2238 > _2242) || ((_2238 < _2240) || ((_2237 > _2242) || ((_2237 < _2240) || ((_2236 < _2240) || (_2236 > _2242))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2360 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2238, cbModelParam._m0[17u].z, fma(_2237, cbModelParam._m0[17u].y, _2236 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2238, cbModelParam._m0[18u].z, fma(_2237, cbModelParam._m0[18u].y, _2236 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2238, cbModelParam._m0[19u].z, fma(_2237, cbModelParam._m0[19u].y, _2236 * cbModelParam._m0[19u].x))), _1389);
            frontier_phi_24_49_ladder = _2360.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2360.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2360.x * cbModelParam._m0[1u].z;
        }
        _1482 = frontier_phi_24_49_ladder_2;
        _1484 = frontier_phi_24_49_ladder_1;
        _1486 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1466 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_485, _486, _487), _1389);
        _1482 = _1466.x * cbModelParam._m0[1u].z;
        _1484 = _1466.y * cbModelParam._m0[1u].z;
        _1486 = _1466.z * cbModelParam._m0[1u].z;
    }
    float _1499 = (((_512 * _462) + _513) * _477) * ((cbModelParam._m0[1u].w * (_1482 - _1380)) + _1380);
    float _1501 = (((_512 * _464) + _513) * _477) * ((cbModelParam._m0[1u].w * (_1484 - _1382)) + _1382);
    float _1503 = (((_512 * _465) + _513) * _477) * ((cbModelParam._m0[1u].w * (_1486 - _1384)) + _1384);
    float _1506 = fma(_1503, cbSceneParam._m0[89u].z, fma(_1501, cbSceneParam._m0[89u].y, _1499 * cbSceneParam._m0[89u].x));
    float _1509 = fma(_1503, cbSceneParam._m0[90u].z, fma(_1501, cbSceneParam._m0[90u].y, _1499 * cbSceneParam._m0[90u].x));
    float _1512 = fma(_1503, cbSceneParam._m0[91u].z, fma(_1501, cbSceneParam._m0[91u].y, _1499 * cbSceneParam._m0[91u].x));
    float _1547 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1551 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1555 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1559 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1560 = _1547 / _1559;
    float _1561 = _1551 / _1559;
    float _1562 = _1555 / _1559;
    float _1709;
    float _1710;
    float _1711;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1589 = ((uint(_1562 > cbSceneParam._m0[59u].y) + uint(_1562 > cbSceneParam._m0[59u].x)) + uint(_1562 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1590 = _1589 + 43u;
        uint _1598 = _1589 + 44u;
        uint _1606 = _1589 + 45u;
        uint _1614 = _1589 + 46u;
        float _1625 = fma(_1559, cbSceneParam._m0[_1590].w, fma(_1555, cbSceneParam._m0[_1590].z, fma(_1551, cbSceneParam._m0[_1590].y, _1547 * cbSceneParam._m0[_1590].x)));
        float _1629 = fma(_1559, cbSceneParam._m0[_1598].w, fma(_1555, cbSceneParam._m0[_1598].z, fma(_1551, cbSceneParam._m0[_1598].y, _1547 * cbSceneParam._m0[_1598].x)));
        float _1637 = fma(_1559, cbSceneParam._m0[_1614].w, fma(_1555, cbSceneParam._m0[_1614].z, fma(_1551, cbSceneParam._m0[_1614].y, _1547 * cbSceneParam._m0[_1614].x)));
        float _1642 = cbSceneParam._m0[33u].z * _1637;
        float _1644 = cbSceneParam._m0[33u].w * _1637;
        float _1647 = fma(_1559, cbSceneParam._m0[_1606].w, fma(_1555, cbSceneParam._m0[_1606].z, fma(_1551, cbSceneParam._m0[_1606].y, _1547 * cbSceneParam._m0[_1606].x))) / _1637;
        float _1695 = (cbSceneParam._m0[33u].x - sqrt(((_1561 * _1561) + (_1560 * _1560)) + (_1562 * _1562))) * cbSceneParam._m0[33u].y;
        float _3972 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1702 = (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1642 + _1625) / _1637, (_1644 + _1629) / _1637), _1647), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1644 + _1625) / _1637, (_1629 - _1642) / _1637), _1647), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1625 - _1642) / _1637, (_1629 - _1644) / _1637), _1647), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1625 - _1644) / _1637, (_1642 + _1629) / _1637), _1647), 0.0)).x), vec4(0.25)));
        _1709 = 1.0 - (_1702 * cbSceneParam._m0[34u].x);
        _1710 = 1.0 - (_1702 * cbSceneParam._m0[34u].y);
        _1711 = 1.0 - (_1702 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1709 = 1.0;
        _1710 = 1.0;
        _1711 = 1.0;
    }
    float _1775;
    float _1777;
    float _1779;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1763 = fma(_1559, cbSceneParam._m0[63u].w, fma(_1555, cbSceneParam._m0[63u].z, fma(_1551, cbSceneParam._m0[63u].y, _1547 * cbSceneParam._m0[63u].x)));
        float _1764 = fma(_1559, cbSceneParam._m0[60u].w, fma(_1555, cbSceneParam._m0[60u].z, fma(_1551, cbSceneParam._m0[60u].y, _1547 * cbSceneParam._m0[60u].x))) / _1763;
        float _1765 = fma(_1559, cbSceneParam._m0[61u].w, fma(_1555, cbSceneParam._m0[61u].z, fma(_1551, cbSceneParam._m0[61u].y, _1547 * cbSceneParam._m0[61u].x))) / _1763;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1764 >= cbSceneParam._m0[64u].x) && (_1765 >= cbSceneParam._m0[64u].y)) && (_1764 <= cbSceneParam._m0[64u].z)) && (_1765 <= cbSceneParam._m0[64u].w))
        {
            float _1904 = fma(_1559, cbSceneParam._m0[62u].w, fma(_1555, cbSceneParam._m0[62u].z, fma(_1551, cbSceneParam._m0[62u].y, _1547 * cbSceneParam._m0[62u].x))) / _1763;
            float _1908 = isnan(cbSceneParam._m0[41u].w) ? _1904 : (isnan(_1904) ? cbSceneParam._m0[41u].w : max(_1904, cbSceneParam._m0[41u].w));
            float _1951 = (cbSceneParam._m0[33u].x - sqrt(((_1561 * _1561) + (_1560 * _1560)) + (_1562 * _1562))) * cbSceneParam._m0[33u].y;
            float _3988 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
            float _1958 = (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1764, cbSceneParam._m0[33u].w + _1765), _1908), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1764, _1765 - cbSceneParam._m0[33u].z), _1908), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1764 - cbSceneParam._m0[33u].z, _1765 - cbSceneParam._m0[33u].w), _1908), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1764 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1765), _1908), 0.0)).x), vec4(0.25)));
            float _1962 = 1.0 - (_1958 * cbSceneParam._m0[34u].x);
            float _1963 = 1.0 - (_1958 * cbSceneParam._m0[34u].y);
            float _1964 = 1.0 - (_1958 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1963) ? _1710 : (isnan(_1710) ? _1963 : min(_1710, _1963));
            frontier_phi_36_35_ladder_1 = isnan(_1964) ? _1711 : (isnan(_1711) ? _1964 : min(_1711, _1964));
            frontier_phi_36_35_ladder_2 = isnan(_1962) ? _1709 : (isnan(_1709) ? _1962 : min(_1709, _1962));
        }
        else
        {
            frontier_phi_36_35_ladder = _1710;
            frontier_phi_36_35_ladder_1 = _1711;
            frontier_phi_36_35_ladder_2 = _1709;
        }
        _1775 = frontier_phi_36_35_ladder_2;
        _1777 = frontier_phi_36_35_ladder;
        _1779 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1775 = _1709;
        _1777 = _1710;
        _1779 = _1711;
    }
    uvec4 _1784 = floatBitsToUint(cbInstanceData._m0[_436 + 5u]);
    uint _1786 = _1784.x * 14u;
    uint _1787 = _1786 + 13u;
    float _1794 = _477 + (-1.0);
    float _1799 = (cbLight._m0[_1787].x * _1794) + 1.0;
    float _1800 = (cbLight._m0[_1787].y * _1794) + 1.0;
    float _1801 = (cbLight._m0[_1787].z * _1794) + 1.0;
    float _1802 = (cbLight._m0[_1787].w * _1794) + 1.0;
    uint _1803 = _1786 + 5u;
    float _1809 = isnan(1.0) ? _1800 : (isnan(_1800) ? 1.0 : min(_1800, 1.0));
    uint _1813 = _1786 + 4u;
    float _1823 = isnan(1.0) ? _1799 : (isnan(_1799) ? 1.0 : min(_1799, 1.0));
    uint _1827 = _1786 | 1u;
    float _1838 = dot(vec3(cbLight._m0[_1786].xyz), vec3(_304, _305, _306));
    float _1841 = dot(vec3(cbLight._m0[_1827].xyz), vec3(_304, _305, _306));
    float _4024 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
    float _4035 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
    float _1846 = (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * 0.3183098733425140380859375;
    float _1848 = (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) * 0.3183098733425140380859375;
    float _1855 = ((cbLight._m0[_1803].x * _1809) * _1848) + (((cbLight._m0[_1813].x * _1775) * _1823) * _1846);
    float _1856 = ((_1809 * cbLight._m0[_1803].y) * _1848) + (((cbLight._m0[_1813].y * _1777) * _1823) * _1846);
    float _1857 = ((_1809 * cbLight._m0[_1803].z) * _1848) + (((cbLight._m0[_1813].z * _1779) * _1823) * _1846);
    uvec4 _1861 = floatBitsToUint(cbLight._m0[_1786 + 12u]);
    bool _1863 = _1861.x == 0u;
    float _1965;
    float _1967;
    float _1969;
    if (_1863)
    {
        _1965 = _1855;
        _1967 = _1856;
        _1969 = _1857;
    }
    else
    {
        uint _1973 = _1786 + 6u;
        float _1989 = (dot(vec3(cbLight._m0[_1786 + 2u].xyz), vec3(_304, _305, _306)) * 0.5) + 0.5;
        float _1990 = _1989 * _1989;
        float _4046 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
        float _1991 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1992 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
        _1965 = (((cbLight._m0[_1973].x * 0.3183098733425140380859375) * _1991) * _1992) + _1855;
        _1967 = (((cbLight._m0[_1973].y * 0.3183098733425140380859375) * _1991) * _1992) + _1856;
        _1969 = (((cbLight._m0[_1973].z * 0.3183098733425140380859375) * _1991) * _1992) + _1857;
    }
    bool _1972 = _1861.y == 0u;
    float _2027;
    float _2029;
    float _2031;
    if (_1972)
    {
        _2027 = _1965;
        _2029 = _1967;
        _2031 = _1969;
    }
    else
    {
        uint _2200 = _1786 + 7u;
        float _2216 = (dot(vec3(cbLight._m0[_1786 + 3u].xyz), vec3(_304, _305, _306)) * 0.5) + 0.5;
        float _2217 = _2216 * _2216;
        float _4062 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2218 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _2219 = isnan(1.0) ? _1802 : (isnan(_1802) ? 1.0 : min(_1802, 1.0));
        _2027 = (((cbLight._m0[_2200].x * 0.3183098733425140380859375) * _2218) * _2219) + _1965;
        _2029 = (((cbLight._m0[_2200].y * 0.3183098733425140380859375) * _2218) * _2219) + _1967;
        _2031 = (((cbLight._m0[_2200].z * 0.3183098733425140380859375) * _2218) * _2219) + _1969;
    }
    uint _2034 = _1786 + 8u;
    float _2047 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1786].w)) * _308) * 0.949999988079071044921875);
    float _2048 = _2047 * _2047;
    float _2049 = cbLight._m0[_1786].x + _387;
    float _2050 = cbLight._m0[_1786].y + _388;
    float _2051 = cbLight._m0[_1786].z + _389;
    float _2055 = inversesqrt(dot(vec3(_2049, _2050, _2051), vec3(_2049, _2050, _2051)));
    float _2056 = _2055 * _2049;
    float _2057 = _2055 * _2050;
    float _2058 = _2055 * _2051;
    float _2059 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_1786].xyz));
    float _4078 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2062 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _4089 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _2063 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _2064 = dot(vec3(_304, _305, _306), vec3(_2056, _2057, _2058));
    float _4100 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2067 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _2068 = dot(vec3(cbLight._m0[_1786].xyz), vec3(_2056, _2057, _2058));
    float _4111 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2072 = _2048 * _2048;
    float _2076 = ((_2067 * _2067) * (_2072 + (-1.0))) + 1.0;
    float _2084 = exp2(log2(1.0 - (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0)))) * 5.0);
    float _2085 = 0.959999978542327880859375 - _459;
    float _2087 = 0.959999978542327880859375 - _460;
    float _2088 = 0.959999978542327880859375 - _461;
    float _2095 = 1.0 - _2048;
    float _2106 = (0.5 / (((_2063 * ((_2062 * _2095) + _2048)) + 9.9999999392252902907785028219223e-09) + (((_2063 * _2095) + _2048) * _2062))) * _2062;
    float _4122 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2108 = (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_2072 / ((_2076 * _2076) * 3.141590118408203125));
    uint _2122 = _1786 + 9u;
    float _2133 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1827].w)) * _308) * 0.949999988079071044921875);
    float _2134 = _2133 * _2133;
    float _2135 = cbLight._m0[_1827].x + _387;
    float _2136 = cbLight._m0[_1827].y + _388;
    float _2137 = cbLight._m0[_1827].z + _389;
    float _2141 = inversesqrt(dot(vec3(_2135, _2136, _2137), vec3(_2135, _2136, _2137)));
    float _2142 = _2141 * _2135;
    float _2143 = _2141 * _2136;
    float _2144 = _2141 * _2137;
    float _2145 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_1827].xyz));
    float _4133 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2148 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _2149 = dot(vec3(_304, _305, _306), vec3(_2142, _2143, _2144));
    float _4144 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2152 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    float _2153 = dot(vec3(cbLight._m0[_1827].xyz), vec3(_2142, _2143, _2144));
    float _4155 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2157 = _2134 * _2134;
    float _2161 = ((_2152 * _2152) * (_2157 + (-1.0))) + 1.0;
    float _2168 = exp2(log2(1.0 - (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0)))) * 5.0);
    float _2175 = 1.0 - _2134;
    float _2185 = (0.5 / (((_2063 * ((_2148 * _2175) + _2134)) + 9.9999999392252902907785028219223e-09) + (((_2063 * _2175) + _2134) * _2148))) * _2148;
    float _4166 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2187 = (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_2157 / ((_2161 * _2161) * 3.141590118408203125));
    float _2197 = (((((_2168 * _2085) + _462) * cbLight._m0[_2122].x) * _2187) * _1809) + ((((cbLight._m0[_2034].x * _1775) * ((_2084 * _2085) + _462)) * _2108) * _1823);
    float _2198 = (((((_2168 * _2087) + _464) * cbLight._m0[_2122].y) * _2187) * _1809) + ((((cbLight._m0[_2034].y * _1777) * ((_2084 * _2087) + _464)) * _2108) * _1823);
    float _2199 = (((((_2168 * _2088) + _465) * cbLight._m0[_2122].z) * _2187) * _1809) + ((((cbLight._m0[_2034].z * _1779) * ((_2084 * _2088) + _465)) * _2108) * _1823);
    float _2255;
    float _2257;
    float _2259;
    if (_1863)
    {
        _2255 = _2197;
        _2257 = _2198;
        _2259 = _2199;
    }
    else
    {
        uint _2261 = _1786 + 2u;
        uint _2265 = _1786 + 10u;
        float _2279 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2261].w)) * _308) * 0.949999988079071044921875);
        float _2280 = _2279 * _2279;
        float _2281 = cbLight._m0[_2261].x + _387;
        float _2282 = cbLight._m0[_2261].y + _388;
        float _2283 = cbLight._m0[_2261].z + _389;
        float _2287 = inversesqrt(dot(vec3(_2281, _2282, _2283), vec3(_2281, _2282, _2283)));
        float _2288 = _2287 * _2281;
        float _2289 = _2287 * _2282;
        float _2290 = _2287 * _2283;
        float _2291 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_2261].xyz));
        float _4177 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        float _2294 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _2295 = dot(vec3(_304, _305, _306), vec3(_2288, _2289, _2290));
        float _4188 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        float _2298 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _2299 = dot(vec3(cbLight._m0[_2261].xyz), vec3(_2288, _2289, _2290));
        float _4199 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
        float _2303 = _2280 * _2280;
        float _2307 = ((_2298 * _2298) * (_2303 + (-1.0))) + 1.0;
        float _2314 = exp2(log2(1.0 - (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0)))) * 5.0);
        float _2321 = 1.0 - _2280;
        float _2331 = (0.5 / (((_2063 * ((_2294 * _2321) + _2280)) + 9.9999999392252902907785028219223e-09) + (((_2063 * _2321) + _2280) * _2294))) * _2294;
        float _4210 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2333 = (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_2303 / ((_2307 * _2307) * 3.141590118408203125));
        float _2334 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
        _2255 = (((((_2314 * _2085) + _462) * cbLight._m0[_2265].x) * _2333) * _2334) + _2197;
        _2257 = (((((_2314 * _2087) + _464) * cbLight._m0[_2265].y) * _2333) * _2334) + _2198;
        _2259 = (((((_2314 * _2088) + _465) * cbLight._m0[_2265].z) * _2333) * _2334) + _2199;
    }
    float _2365;
    float _2367;
    float _2369;
    if (_1972)
    {
        _2365 = _2255;
        _2367 = _2257;
        _2369 = _2259;
    }
    else
    {
        uint _2376 = _1786 + 3u;
        uint _2380 = _1786 + 11u;
        float _2394 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2376].w)) * _308) * 0.949999988079071044921875);
        float _2395 = _2394 * _2394;
        float _2396 = cbLight._m0[_2376].x + _387;
        float _2397 = cbLight._m0[_2376].y + _388;
        float _2398 = cbLight._m0[_2376].z + _389;
        float _2402 = inversesqrt(dot(vec3(_2396, _2397, _2398), vec3(_2396, _2397, _2398)));
        float _2403 = _2402 * _2396;
        float _2404 = _2402 * _2397;
        float _2405 = _2402 * _2398;
        float _2406 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_2376].xyz));
        float _4226 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2409 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _2410 = dot(vec3(_304, _305, _306), vec3(_2403, _2404, _2405));
        float _4237 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2413 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _2414 = dot(vec3(cbLight._m0[_2376].xyz), vec3(_2403, _2404, _2405));
        float _4248 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
        float _2418 = _2395 * _2395;
        float _2422 = ((_2413 * _2413) * (_2418 + (-1.0))) + 1.0;
        float _2429 = exp2(log2(1.0 - (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0)))) * 5.0);
        float _2436 = 1.0 - _2395;
        float _2446 = (0.5 / (((_2063 * ((_2409 * _2436) + _2395)) + 9.9999999392252902907785028219223e-09) + (((_2063 * _2436) + _2395) * _2409))) * _2409;
        float _4259 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2448 = (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * (_2418 / ((_2422 * _2422) * 3.141590118408203125));
        float _2449 = isnan(1.0) ? _1802 : (isnan(_1802) ? 1.0 : min(_1802, 1.0));
        _2365 = (((((_2429 * _2085) + _462) * cbLight._m0[_2380].x) * _2448) * _2449) + _2255;
        _2367 = (((((_2429 * _2087) + _464) * cbLight._m0[_2380].y) * _2448) * _2449) + _2257;
        _2369 = (((((_2429 * _2088) + _465) * cbLight._m0[_2380].z) * _2448) * _2449) + _2259;
    }
    float _2514;
    float _2516;
    float _2518;
    float _2520;
    float _2522;
    float _2524;
    if (_1784.y == 0u)
    {
        uvec4 _2470 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2471 = _2470.x;
        uint _2482 = uint((float(_2470.y) * floor(float(uint(cbSceneParam._m0[85u].y * _396) / _2471))) + floor(float(uint(cbSceneParam._m0[85u].x * _395) / _2471)));
        float _2492 = (log2(_1562 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2493 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        uint _2496 = uint(isnan(14.0) ? _2493 : (isnan(_2493) ? 14.0 : min(_2493, 14.0)));
        uvec4 _2501 = texelFetch(g_lightClusterGridBuffer, int(((_2496 << 2u) + (_2482 << 6u)) >> 2u));
        uint _2502 = _2501.x;
        uint _2503 = _2470.z;
        float _2602;
        float _2604;
        float _2606;
        float _2608;
        float _2610;
        float _2612;
        if (((((1u << ((_2503 >> 4u) & 15u)) + 4294967295u) & _2502) == 0u) || ((_2503 & 240u) == 0u))
        {
            _2602 = 0.0;
            _2604 = 0.0;
            _2606 = 0.0;
            _2608 = 0.0;
            _2610 = 0.0;
            _2612 = 0.0;
        }
        else
        {
            float _2603;
            float _2605;
            float _2607;
            float _2609;
            float _2611;
            float _2613;
            float _2746 = 0.0;
            float _2747 = 0.0;
            float _2748 = 0.0;
            float _2749 = 0.0;
            float _2750 = 0.0;
            float _2751 = 0.0;
            uint _2752 = 0u;
            uint _2761;
            bool _2762;
            for (;;)
            {
                _2761 = texelFetch(g_lightClassification, int((((_2496 << 5u) + (_2482 << 9u)) + (_2752 << 2u)) >> 2u)).x;
                _2762 = _2761 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2762)
                {
                    frontier_phi_68_pred = _2751;
                    frontier_phi_68_pred_1 = _2750;
                    frontier_phi_68_pred_2 = _2749;
                    frontier_phi_68_pred_3 = _2747;
                    frontier_phi_68_pred_4 = _2746;
                    frontier_phi_68_pred_5 = _2748;
                }
                else
                {
                    float _2870;
                    float _2871;
                    float _2872;
                    float _2873;
                    float _2874;
                    float _2875;
                    uint _2876;
                    _2870 = _2746;
                    _2871 = _2747;
                    _2872 = _2748;
                    _2873 = _2749;
                    _2874 = _2750;
                    _2875 = _2751;
                    _2876 = _2761;
                    float _2802;
                    float _2803;
                    float _2804;
                    float _2805;
                    float _2806;
                    float _2807;
                    for (;;)
                    {
                        uint _2880 = uint(findLSB(_2876)) + (_2752 << 5u);
                        uint _2877 = (_2876 + 4294967295u) & _2876;
                        uint _2882 = _2880 * 48u;
                        vec4 _2896 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2882)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 3u)).x));
                        uint _2902 = (_2880 * 48u) + 4u;
                        vec4 _2915 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2902)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 3u)).x));
                        uint _2921 = (_2880 * 48u) + 8u;
                        vec3 _2932 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2921)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 2u)).x));
                        float _2936 = _2896.x - _1560;
                        float _2937 = _2896.y - _1561;
                        float _2938 = _2896.z - _1562;
                        float _2939 = dot(vec3(_2936, _2937, _2938), vec3(_2936, _2937, _2938));
                        float _2942 = inversesqrt(_2939);
                        float _2943 = _2942 * _2936;
                        float _2944 = _2942 * _2937;
                        float _2945 = _2942 * _2938;
                        float _2946 = dot(vec3(_417, _420, _423), vec3(_2943, _2944, _2945));
                        float _2951 = 1.0 - (_2939 * _2896.w);
                        float _4285 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
                        float _2952 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
                        float _2953 = sqrt(_2939) * _2915.w;
                        float _2956 = 1.39999997615814208984375 / (_2953 + 1.39999997615814208984375);
                        float _2957 = _2956 * _2956;
                        float _2960 = ((1.0 - _2957) * _2946) + _2957;
                        float _2963 = _2953 * _2953;
                        float _2967 = ((isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0))) * _2952) / ((_2963 * 0.699999988079071044921875) + 1.0);
                        float _2971 = (-0.0) - _1560;
                        float _2972 = (-0.0) - _1561;
                        float _2973 = (-0.0) - _1562;
                        float _2977 = inversesqrt(dot(vec3(_2971, _2972, _2973), vec3(_2971, _2972, _2973)));
                        float _2978 = _2977 * _2971;
                        float _2979 = _2977 * _2972;
                        float _2980 = _2977 * _2973;
                        float _2987 = exp2(log2(1.0 / ((_2963 * 3.5) + 5.0)) * 0.25);
                        float _2988 = 1.0 - _493;
                        float _2995 = sqrt(1.0 - ((1.0 - (_2988 * _2988)) * (1.0 - (_2987 * _2987))));
                        float _2996 = _2995 * _2995;
                        float _2997 = _2996 * _2996;
                        float _2998 = _2978 + _2943;
                        float _2999 = _2979 + _2944;
                        float _3000 = _2980 + _2945;
                        float _3004 = inversesqrt(dot(vec3(_2998, _2999, _3000), vec3(_2998, _2999, _3000)));
                        float _3008 = dot(vec3(_417, _420, _423), vec3(_2978, _2979, _2980));
                        float _4301 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                        float _3011 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
                        float _3012 = dot(vec3(_417, _420, _423), vec3(_3004 * _2998, _3004 * _2999, _3004 * _3000));
                        float _4312 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                        float _3015 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
                        float _3019 = ((_3015 * _3015) * (_2997 + (-1.0))) + 1.0;
                        float _3020 = _2956 * _2996;
                        float _3021 = _3020 * _3020;
                        float _3024 = ((1.0 - _3021) * _2946) + _3021;
                        float _4323 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                        float _3025 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                        float _3026 = 1.0 - _2996;
                        float _3036 = (0.5 / (((_3025 * ((_3011 * _3026) + _2996)) + 9.9999999392252902907785028219223e-09) + (((_3025 * _3026) + _2996) * _3011))) * _3025;
                        float _4334 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                        float _3047 = (((_2997 * 3.1415927410125732421875) * (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0)))) / ((_3019 * _3019) * ((_2963 * 2.1991131305694580078125) + 3.141590118408203125))) * _2952;
                        _2805 = (_2967 * _2915.x) + _2873;
                        _2806 = (_2967 * _2915.y) + _2874;
                        _2807 = (_2967 * _2915.z) + _2875;
                        _2802 = (_3047 * _2932.x) + _2870;
                        _2803 = (_3047 * _2932.y) + _2871;
                        _2804 = (_3047 * _2932.z) + _2872;
                        if (_2877 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2870 = _2802;
                            _2871 = _2803;
                            _2872 = _2804;
                            _2873 = _2805;
                            _2874 = _2806;
                            _2875 = _2807;
                            _2876 = _2877;
                        }
                    }
                    frontier_phi_68_pred = _2807;
                    frontier_phi_68_pred_1 = _2806;
                    frontier_phi_68_pred_2 = _2805;
                    frontier_phi_68_pred_3 = _2803;
                    frontier_phi_68_pred_4 = _2802;
                    frontier_phi_68_pred_5 = _2804;
                }
                _2613 = frontier_phi_68_pred;
                _2611 = frontier_phi_68_pred_1;
                _2609 = frontier_phi_68_pred_2;
                _2605 = frontier_phi_68_pred_3;
                _2603 = frontier_phi_68_pred_4;
                _2607 = frontier_phi_68_pred_5;
                uint _2753 = _2752 + 1u;
                if (_2753 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2746 = _2603;
                    _2747 = _2605;
                    _2748 = _2607;
                    _2749 = _2609;
                    _2750 = _2611;
                    _2751 = _2613;
                    _2752 = _2753;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2602 = _2603;
            _2604 = _2605;
            _2606 = _2607;
            _2608 = _2609;
            _2610 = _2611;
            _2612 = _2613;
        }
        uvec4 _2616 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2617 = _2616.z;
        uint _2619 = (_2617 >> 8u) & 15u;
        float _2714;
        float _2716;
        float _2718;
        float _2720;
        float _2722;
        float _2724;
        if (((4294967295u << _2619) & _2502) == 0u)
        {
            _2714 = _2602;
            _2716 = _2604;
            _2718 = _2606;
            _2720 = _2608;
            _2722 = _2610;
            _2724 = _2612;
        }
        else
        {
            float _2739 = inversesqrt(dot(vec3(_1560, _1561, _1562), vec3(_1560, _1561, _1562)));
            float _2740 = _2739 * _1560;
            float _2741 = _2739 * _1561;
            float _2742 = _2739 * _1562;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2619 < ((_2617 >> 12u) & 15u))
            {
                float _2715;
                float _2717;
                float _2719;
                float _2721;
                float _2723;
                float _2725;
                float _2853 = _2602;
                float _2854 = _2604;
                float _2855 = _2606;
                float _2856 = _2608;
                float _2857 = _2610;
                float _2858 = _2612;
                uint _2859 = _2619;
                uint _2868;
                bool _2869;
                for (;;)
                {
                    _2868 = texelFetch(g_lightClassification, int((((_2496 << 5u) + (_2482 << 9u)) + (_2859 << 2u)) >> 2u)).x;
                    _2869 = _2868 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2869)
                    {
                        frontier_phi_74_pred = _2855;
                        frontier_phi_74_pred_1 = _2854;
                        frontier_phi_74_pred_2 = _2853;
                        frontier_phi_74_pred_3 = _2858;
                        frontier_phi_74_pred_4 = _2857;
                        frontier_phi_74_pred_5 = _2856;
                    }
                    else
                    {
                        float _3052;
                        float _3053;
                        float _3054;
                        float _3055;
                        float _3056;
                        float _3057;
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3065 = _2853;
                        float _3066 = _2854;
                        float _3067 = _2855;
                        float _3068 = _2856;
                        float _3069 = _2857;
                        float _3070 = _2858;
                        uint _3071 = _2868;
                        uint _3072;
                        vec4 _3097;
                        float _3098;
                        vec4 _3113;
                        vec3 _3125;
                        vec4 _3141;
                        vec4 _3157;
                        float _3204;
                        bool _3205;
                        for (;;)
                        {
                            uint _3082 = ((_2859 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3071));
                            _3072 = (_3071 + 4294967295u) & _3071;
                            uint _3084 = _3082 * 40u;
                            _3097 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3084)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 3u)).x));
                            _3098 = _3097.w;
                            uint _3100 = (_3082 * 40u) + 4u;
                            _3113 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 3u)).x));
                            uint _3115 = (_3082 * 40u) + 8u;
                            _3125 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x));
                            uint _3128 = (_3082 * 40u) + 16u;
                            _3141 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3128)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 3u)).x));
                            uint _3144 = (_3082 * 40u) + 20u;
                            _3157 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3144)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 3u)).x));
                            uint _3160 = (_3082 * 40u) + 24u;
                            vec4 _3173 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3160)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 3u)).x));
                            uint _3179 = (_3082 * 40u) + 28u;
                            vec4 _3192 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3179)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 3u)).x));
                            _3204 = fma(_1562, _3192.z, fma(_1561, _3192.y, _3192.x * _1560)) + _3192.w;
                            _3205 = !((fma(_1562, _3173.z, fma(_1561, _3173.y, _3173.x * _1560)) + _3173.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3205)
                            {
                                float _3232 = _3097.x - _1560;
                                float _3233 = _3097.y - _1561;
                                float _3234 = _3097.z - _1562;
                                float _3235 = dot(vec3(_3232, _3233, _3234), vec3(_3232, _3233, _3234));
                                float _3238 = inversesqrt(_3235);
                                float _3239 = _3238 * _3232;
                                float _3240 = _3238 * _3233;
                                float _3241 = _3238 * _3234;
                                float _3245 = 1.0 - (_3235 / (_3098 * _3098));
                                float _4345 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                                float _3246 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
                                float _3250 = sqrt(_3235) * _3113.w;
                                float _3252 = 1.39999997615814208984375 / (_3250 + 1.39999997615814208984375);
                                float _3253 = _3252 * _3252;
                                float _3256 = ((1.0 - _3253) * dot(vec3(_3239, _3240, _3241), vec3(_417, _420, _423))) + _3253;
                                float _3259 = _3250 * _3250;
                                float _3263 = (fma(_1562, _3141.z, fma(_1561, _3141.y, _3141.x * _1560)) + _3141.w) / _3204;
                                float _3264 = (fma(_1562, _3157.z, fma(_1561, _3157.y, _3157.x * _1560)) + _3157.w) / _3204;
                                float _3268 = 1.0 - dot(vec2(_3263, _3264), vec2(_3263, _3264));
                                float _4361 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                                float _3269 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
                                float _3270 = _3269 * (((isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0))) * _3246) / ((_3259 * 0.699999988079071044921875) + 1.0));
                                float _3282 = exp2(log2(1.0 / ((_3259 * 3.5) + 5.0)) * 0.25);
                                float _3283 = 1.0 - _493;
                                float _3290 = sqrt(1.0 - ((1.0 - (_3283 * _3283)) * (1.0 - (_3282 * _3282))));
                                float _3291 = _3290 * _3290;
                                float _3292 = _3291 * _3291;
                                float _3293 = _3239 - _2740;
                                float _3294 = _3240 - _2741;
                                float _3295 = _3241 - _2742;
                                float _3299 = inversesqrt(dot(vec3(_3293, _3294, _3295), vec3(_3293, _3294, _3295)));
                                float _3303 = dot(vec3(_417, _420, _423), vec3((-0.0) - _2740, (-0.0) - _2741, (-0.0) - _2742));
                                float _4372 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                                float _3306 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
                                float _3307 = dot(vec3(_417, _420, _423), vec3(_3299 * _3293, _3299 * _3294, _3299 * _3295));
                                float _4383 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                                float _3310 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
                                float _3314 = ((_3310 * _3310) * (_3292 + (-1.0))) + 1.0;
                                float _3315 = _3252 * _3291;
                                float _3316 = _3315 * _3315;
                                float _3322 = ((1.0 - _3316) * dot(vec3(_417, _420, _423), vec3(_3239, _3240, _3241))) + _3316;
                                float _4394 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                                float _3323 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
                                float _3324 = 1.0 - _3291;
                                float _3334 = (0.5 / (((_3323 * ((_3306 * _3324) + _3291)) + 9.9999999392252902907785028219223e-09) + (((_3323 * _3324) + _3291) * _3306))) * _3323;
                                float _4405 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                                float _3344 = (_3269 * _3246) * (((_3292 * 3.1415927410125732421875) * (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0)))) / ((_3314 * _3314) * ((_3259 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3344 * _3125.z;
                                frontier_phi_80_pred_1 = _3344 * _3125.y;
                                frontier_phi_80_pred_2 = _3344 * _3125.x;
                                frontier_phi_80_pred_3 = _3270 * _3113.z;
                                frontier_phi_80_pred_4 = _3270 * _3113.y;
                                frontier_phi_80_pred_5 = _3270 * _3113.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3350 = frontier_phi_80_pred;
                            _3349 = frontier_phi_80_pred_1;
                            _3348 = frontier_phi_80_pred_2;
                            _3353 = frontier_phi_80_pred_3;
                            _3352 = frontier_phi_80_pred_4;
                            _3351 = frontier_phi_80_pred_5;
                            _3055 = _3351 + _3068;
                            _3056 = _3352 + _3069;
                            _3057 = _3353 + _3070;
                            _3052 = _3348 + _3065;
                            _3053 = _3349 + _3066;
                            _3054 = _3350 + _3067;
                            if (_3072 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3065 = _3052;
                                _3066 = _3053;
                                _3067 = _3054;
                                _3068 = _3055;
                                _3069 = _3056;
                                _3070 = _3057;
                                _3071 = _3072;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3054;
                        frontier_phi_74_pred_1 = _3053;
                        frontier_phi_74_pred_2 = _3052;
                        frontier_phi_74_pred_3 = _3057;
                        frontier_phi_74_pred_4 = _3056;
                        frontier_phi_74_pred_5 = _3055;
                    }
                    _2719 = frontier_phi_74_pred;
                    _2717 = frontier_phi_74_pred_1;
                    _2715 = frontier_phi_74_pred_2;
                    _2725 = frontier_phi_74_pred_3;
                    _2723 = frontier_phi_74_pred_4;
                    _2721 = frontier_phi_74_pred_5;
                    uint _2860 = _2859 + 1u;
                    if (_2860 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2853 = _2715;
                        _2854 = _2717;
                        _2855 = _2719;
                        _2856 = _2721;
                        _2857 = _2723;
                        _2858 = _2725;
                        _2859 = _2860;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2723;
                frontier_phi_62_63_ladder_1 = _2721;
                frontier_phi_62_63_ladder_2 = _2719;
                frontier_phi_62_63_ladder_3 = _2725;
                frontier_phi_62_63_ladder_4 = _2717;
                frontier_phi_62_63_ladder_5 = _2715;
            }
            else
            {
                frontier_phi_62_63_ladder = _2610;
                frontier_phi_62_63_ladder_1 = _2608;
                frontier_phi_62_63_ladder_2 = _2606;
                frontier_phi_62_63_ladder_3 = _2612;
                frontier_phi_62_63_ladder_4 = _2604;
                frontier_phi_62_63_ladder_5 = _2602;
            }
            _2714 = frontier_phi_62_63_ladder_5;
            _2716 = frontier_phi_62_63_ladder_4;
            _2718 = frontier_phi_62_63_ladder_2;
            _2720 = frontier_phi_62_63_ladder_1;
            _2722 = frontier_phi_62_63_ladder;
            _2724 = frontier_phi_62_63_ladder_3;
        }
        float _2729 = isnan(1.0) ? _477 : (isnan(_477) ? 1.0 : min(_477, 1.0));
        _2514 = (_2729 * _2720) + _2027;
        _2516 = (_2729 * _2722) + _2029;
        _2518 = (_2729 * _2724) + _2031;
        _2520 = ((_2714 * _462) * _2729) + _2365;
        _2522 = ((_2716 * _464) * _2729) + _2367;
        _2524 = ((_2718 * _465) * _2729) + _2369;
    }
    else
    {
        _2514 = _2027;
        _2516 = _2029;
        _2518 = _2031;
        _2520 = _2365;
        _2522 = _2367;
        _2524 = _2369;
    }
    uint _2530 = _438 + uint(cbMatDynParam._m0[0u].w);
    float _4421 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _4432 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _4443 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _4454 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _2556 = (((isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * (_2514 + ((isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0))) * _477))) + ((_2520 + ((isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))) * _1287)) * cbPerFrame._m0[3u].x)) + ((_283.x * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2530].x);
    float _2558 = (((_283.y * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2530].y) + ((_2522 + ((isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))) * _1287)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_2516 + ((isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0))) * _477)));
    float _2560 = (((_283.z * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2530].z) + ((_2524 + ((isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))) * _1287)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2518 + ((isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0))) * _477)));
    float _2568 = cbInstanceData._m0[_436 + 6u].w * (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0)));
    float _2573 = _395 / cbSceneParam._m0[86u].x;
    float _2574 = _396 / cbSceneParam._m0[86u].y;
    vec4 _2588 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2573, _2574, (log2((isnan(cbSceneParam._m0[77u].w) ? _328 : (isnan(_328) ? cbSceneParam._m0[77u].w : min(_328, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2590 = _2588.x;
    float _2591 = _2588.y;
    float _2592 = _2588.z;
    float _2593 = _2588.w;
    float _2664;
    float _2666;
    float _2668;
    float _2670;
    if (_328 > cbSceneParam._m0[78u].w)
    {
        float _2627 = isnan(_328) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _328 : min(cbSceneParam._m0[80u].w, _328));
        float _2628 = _2627 / _328;
        float _2639 = _2628 * _380;
        float _2640 = _381 * _2628;
        float _2641 = (-0.0) - _2640;
        float _2642 = _2628 * _382;
        float _2644 = (cbSceneParam._m0[77u].w * _2641) / _2627;
        float _2645 = _2644 + cbSceneParam._m0[79u].w;
        float _2646 = cbSceneParam._m0[79u].w - _2640;
        float _2652 = sqrt(((_2639 * _2639) + (_2640 * _2640)) + (_2642 * _2642));
        float _2655 = (1.0 - (cbSceneParam._m0[77u].w / _2627)) * _2652;
        float _2660 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2662 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2815;
        if (abs((_2641 - _2644) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2815 = ((((_2645 > 0.0) ? exp2(_2660 * _2645) : (2.0 - exp2(_2662 * _2645))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2655;
        }
        else
        {
            float _2775 = 1.0 / cbSceneParam._m0[80u].x;
            float _2776 = isnan(_2646) ? _2645 : (isnan(_2645) ? _2646 : max(_2645, _2646));
            float _2777 = isnan(_2646) ? _2645 : (isnan(_2645) ? _2646 : min(_2645, _2646));
            float _2786 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : min(_2776, 0.0));
            float _2787 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : min(_2777, 0.0));
            _2815 = ((abs(_2652 / _2641) * cbSceneParam._m0[80u].y) * ((((_2786 - _2787) * 2.0) - ((exp2(_2660 * (isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0)))) - exp2(_2660 * (isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0))))) * _2775)) - ((exp2(_2662 * _2786) - exp2(_2662 * _2787)) * _2775))) + (_2655 * cbSceneParam._m0[80u].z);
        }
        vec4 _2817 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2573, _2574, 1.0), 0.0);
        float _2826 = exp2((_2815 * (-1.44269502162933349609375)) * (1.0 - _2817.w));
        float _2827 = log2(_2826);
        float _2843 = log2(_2593);
        _2664 = (exp2(_2843 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2827 * cbSceneParam._m0[78u].x)) * _2817.x) / cbSceneParam._m0[78u].x)) + _2590;
        _2666 = (exp2(_2843 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2827 * cbSceneParam._m0[78u].y)) * _2817.y) / cbSceneParam._m0[78u].y)) + _2591;
        _2668 = (exp2(_2843 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2827 * cbSceneParam._m0[78u].z)) * _2817.z) / cbSceneParam._m0[78u].z)) + _2592;
        _2670 = _2826 * _2593;
    }
    else
    {
        _2664 = _2590;
        _2666 = _2591;
        _2668 = _2592;
        _2670 = _2593;
    }
    float _2682 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2683 = _2682 == 3.0;
    float _2684 = log2(_2670);
    float _2691 = exp2(_2684 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0)));
    float _2692 = exp2(_2684 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0)));
    float _2693 = exp2(_2684 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0)));
    float _2702 = (_2682 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2702 * (_2683 ? _2691 : (_2691 + (cbSceneParam._m0[72u].w * _2664)));
    SV_Target.y = _2702 * (_2683 ? _2692 : (_2692 + (cbSceneParam._m0[72u].w * _2666)));
    SV_Target.z = _2702 * (_2683 ? _2693 : (_2693 + (cbSceneParam._m0[72u].w * _2668)));
    SV_Target.w = _2568;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2568;
}


