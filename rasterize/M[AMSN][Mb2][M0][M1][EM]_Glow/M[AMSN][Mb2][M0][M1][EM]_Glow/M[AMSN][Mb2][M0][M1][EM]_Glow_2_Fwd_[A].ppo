#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1014;
float _3422;
float _3423;
float _3424;
float _3425;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _239 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _245 = _239.x * cbMtdParam._m0[9u].x;
    float _246 = _239.y * cbMtdParam._m0[9u].y;
    float _247 = _239.z * cbMtdParam._m0[9u].z;
    vec4 _267 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _288 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_267.x + 0.00999999977648258209228515625));
    float _290 = _288 * (cbMtdParam._m0[15u].x + 1.0);
    float _3434 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _291 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
    float _299 = ((((cbMtdParam._m0[12u].x - _245) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _291) + _245;
    float _300 = ((((cbMtdParam._m0[12u].y - _246) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _291) + _246;
    float _301 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _247)) * _291) + _247;
    vec4 _313 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _317 = _313.z;
    float _321 = (_313.x * 2.0) + (-1.0);
    float _323 = (_313.y * 2.0) + (-1.0);
    float _324 = dot(vec2(_321, _323), vec2(_321, _323));
    float _3445 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _329 = sqrt(1.0 - (isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0))));
    float _332 = _288 * (cbMtdParam._m0[14u].w + 1.0);
    float _3456 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _336 = ((cbMtdParam._m0[14u].y - _317) * (isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0)))) + _317;
    vec4 _364 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _379 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _408 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _414 = (_408.x * 2.0) + (-1.0);
    float _415 = (_408.y * 2.0) + (-1.0);
    float _416 = dot(vec2(_414, _415), vec2(_414, _415));
    float _3467 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _432 = (_291 * (((cbMtdParam._m0[13u].z * _321) - _321) + _414)) + _321;
    float _433 = (_291 * (((cbMtdParam._m0[13u].z * _323) - _323) + _415)) + _323;
    float _434 = (_291 * (sqrt(1.0 - (isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0)))) - _329)) + _329;
    float _437 = fma(_434, _210 * NORMAL.x, fma(_433, _217 * TANGENT.x, (_203 * _195) * _432));
    float _440 = fma(_434, _210 * NORMAL.y, fma(_433, _217 * TANGENT.y, (_203 * _196) * _432));
    float _443 = fma(_434, _210 * NORMAL.z, fma(_433, _217 * TANGENT.z, (_203 * _197) * _432));
    float _447 = inversesqrt(dot(vec3(_437, _440, _443), vec3(_437, _440, _443)));
    float _448 = _447 * _437;
    float _449 = _447 * _440;
    float _450 = _447 * _443;
    float _3478 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _451 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
    float _3489 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _3500 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _3511 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _470 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _511 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _521 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _511);
    float _522 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _511);
    float _523 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _511);
    float _527 = inversesqrt(dot(vec3(_521, _522, _523), vec3(_521, _522, _523)));
    float _528 = _521 * _527;
    float _529 = _522 * _527;
    float _530 = _523 * _527;
    vec4 _535 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _537 = _535.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _694 = sqrt(((_521 * _521) + (_522 * _522)) + (_523 * _523));
        float _700 = (cbMatDynParam._m0[5u].x * _694) + cbMatDynParam._m0[5u].y;
        float _3522 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
        float _701 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _705 = (cbMatDynParam._m0[5u].z * _694) + cbMatDynParam._m0[5u].w;
        float _3533 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))) - _701)) + _701) < ((_537 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _549 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _550 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _570 = fma(_450, cbSceneParam._m0[5u].z, fma(_449, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _448));
    float _573 = fma(_450, cbSceneParam._m0[6u].z, fma(_449, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _448));
    float _576 = fma(_450, cbSceneParam._m0[7u].z, fma(_449, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _448));
    uint _589 = uint(roundEven(NORMAL.w)) * 13u;
    uint _590 = _589 + 9u;
    uint _591 = _590 + uint(cbMatDynParam._m0[0u].w);
    float _597 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0)))) * cbInstanceData._m0[_591].x;
    float _598 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0)))) * cbInstanceData._m0[_591].y;
    float _599 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0)))) * cbInstanceData._m0[_591].z;
    float _3544 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _600 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
    float _3555 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _601 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
    float _3566 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _602 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
    vec4 _611 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _549, cbSceneParam._m0[86u].y * _550));
    float _614 = _611.x * TEXCOORD_3.w;
    float _615 = dot(vec3(_448, _449, _450), vec3(_528, _529, _530));
    float _618 = _615 * 2.0;
    float _622 = (_618 * _448) - _528;
    float _623 = (_618 * _449) - _529;
    float _624 = (_618 * _450) - _530;
    float _628 = abs(dot(vec3(_528, _529, _530), vec3(_448, _449, _450)));
    float _3577 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _630 = sqrt(_451);
    float _643 = exp2((_630 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_630 * 3.0));
    float _675 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _679 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _683 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1013;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _738 = fma(_683, cbModelParam._m0[26u].z, fma(_679, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _675));
        float _742 = fma(_683, cbModelParam._m0[27u].z, fma(_679, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _675));
        float _746 = fma(_683, cbModelParam._m0[28u].z, fma(_679, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _675));
        float _771 = _675 + _448;
        float _772 = _679 + _449;
        float _773 = _683 + _450;
        float _783 = fma(_773, cbModelParam._m0[26u].z, fma(_772, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _771)) - _738;
        float _784 = fma(_773, cbModelParam._m0[27u].z, fma(_772, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _771)) - _742;
        float _785 = fma(_773, cbModelParam._m0[28u].z, fma(_772, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _771)) - _746;
        float _789 = inversesqrt(dot(vec3(_783, _784, _785), vec3(_783, _784, _785)));
        float _802 = ((_789 * _783) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_738 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _803 = ((_789 * _784) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_742 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _804 = ((_789 * _785) / cbModelParam._m0[34u].z) + ((((((_746 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _807 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_802, _803, _804), 0.0);
        vec4 _814 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_802, _803, _804), 0.0);
        vec4 _821 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_802, _803, _804), 0.0);
        vec4 _828 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_802, _803, _804), 0.0);
        float _841 = exp2((_807.w + (-0.5)) * 20.0) * 2.0;
        float _842 = _841 * (_807.x + (-0.5));
        float _843 = _841 * (_807.y + (-0.5));
        float _844 = _841 * (_807.z + (-0.5));
        float _851 = exp2((_814.w + (-0.5)) * 20.0) * 2.0;
        float _852 = _851 * (_814.x + (-0.5));
        float _853 = _851 * (_814.y + (-0.5));
        float _854 = _851 * (_814.z + (-0.5));
        float _861 = exp2((_821.w + (-0.5)) * 20.0) * 2.0;
        float _862 = _861 * (_821.x + (-0.5));
        float _863 = _861 * (_821.y + (-0.5));
        float _864 = _861 * (_821.z + (-0.5));
        float _871 = exp2((_828.w + (-0.5)) * 20.0) * 2.0;
        float _872 = _871 * (_828.x + (-0.5));
        float _873 = _871 * (_828.y + (-0.5));
        float _874 = _871 * (_828.z + (-0.5));
        float _875 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _876 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _877 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _878 = _842 * 0.5;
        float _879 = _852 * 0.5;
        float _880 = _862 * 0.5;
        float _881 = dot(vec3(_878, _879, _880), vec3(_878, _879, _880));
        float _886 = (_881 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_881);
        float _895 = (dot(vec3(_448, _449, _450), vec3(_886 * _878, _886 * _879, _886 * _880)) + 1.0) * 0.5;
        float _3603 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _905 = sqrt(((_879 * _879) + (_878 * _878)) + (_880 * _880)) / (_875 + 9.9999997473787516355514526367188e-06);
        float _3614 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _907 = _906 * 2.0;
        float _911 = (1.0 - _906) / (_906 + 1.0);
        float _3625 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _912 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _921 = ((((1.0 - _912) * (_907 + 2.0)) * exp2(log2(isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * (_907 + 1.0))) + _912) * _875;
        float _922 = _843 * 0.5;
        float _923 = _853 * 0.5;
        float _924 = _863 * 0.5;
        float _925 = dot(vec3(_922, _923, _924), vec3(_922, _923, _924));
        float _930 = (_925 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_925);
        float _938 = (dot(vec3(_448, _449, _450), vec3(_930 * _922, _930 * _923, _930 * _924)) + 1.0) * 0.5;
        float _3636 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _947 = sqrt(((_923 * _923) + (_922 * _922)) + (_924 * _924)) / (_876 + 9.9999997473787516355514526367188e-06);
        float _3647 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _949 = _948 * 2.0;
        float _953 = (1.0 - _948) / (_948 + 1.0);
        float _3658 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _963 = ((((1.0 - _954) * (_949 + 2.0)) * exp2(log2(isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))) * (_949 + 1.0))) + _954) * _876;
        float _964 = _844 * 0.5;
        float _965 = _854 * 0.5;
        float _966 = _864 * 0.5;
        float _967 = dot(vec3(_964, _965, _966), vec3(_964, _965, _966));
        float _972 = (_967 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_967);
        float _980 = (dot(vec3(_448, _449, _450), vec3(_972 * _964, _972 * _965, _972 * _966)) + 1.0) * 0.5;
        float _3669 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _989 = sqrt(((_965 * _965) + (_964 * _964)) + (_966 * _966)) / (_877 + 9.9999997473787516355514526367188e-06);
        float _3680 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _991 = _990 * 2.0;
        float _995 = (1.0 - _990) / (_990 + 1.0);
        float _3691 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1005 = ((((1.0 - _996) * (_991 + 2.0)) * exp2(log2(isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * (_991 + 1.0))) + _996) * _877;
        _1013 = _844;
        _1015 = _843;
        _1016 = _842;
        _1017 = _854;
        _1018 = _853;
        _1019 = _852;
        _1020 = _864;
        _1021 = _863;
        _1022 = _862;
        _1023 = _877;
        _1024 = _876;
        _1025 = _875;
        _1026 = cbModelParam._m0[36u].z * (isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0)));
        _1027 = cbModelParam._m0[36u].z * (isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0)));
        _1028 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0)));
    }
    else
    {
        _1013 = _1014;
        _1015 = _1014;
        _1016 = _1014;
        _1017 = _1014;
        _1018 = _1014;
        _1019 = _1014;
        _1020 = _1014;
        _1021 = _1014;
        _1022 = _1014;
        _1023 = _1014;
        _1024 = _1014;
        _1025 = _1014;
        _1026 = 0.0;
        _1027 = 0.0;
        _1028 = 0.0;
    }
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1057 = fma(_683, cbModelParam._m0[30u].z, fma(_679, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _675));
        float _1061 = fma(_683, cbModelParam._m0[31u].z, fma(_679, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _675));
        float _1065 = fma(_683, cbModelParam._m0[32u].z, fma(_679, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _675));
        float _1088 = _675 + _448;
        float _1089 = _679 + _449;
        float _1090 = _683 + _450;
        float _1100 = fma(_1090, cbModelParam._m0[30u].z, fma(_1089, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1088)) - _1057;
        float _1101 = fma(_1090, cbModelParam._m0[31u].z, fma(_1089, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1088)) - _1061;
        float _1102 = fma(_1090, cbModelParam._m0[32u].z, fma(_1089, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1088)) - _1065;
        float _1106 = inversesqrt(dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102)));
        float _1119 = ((_1106 * _1100) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1057 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1120 = ((_1106 * _1101) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1061 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1121 = ((_1106 * _1102) / cbModelParam._m0[35u].z) + ((((((_1065 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        float _1156 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1123.x + (-0.5));
        float _1158 = _1156 * (_1123.y + (-0.5));
        float _1159 = _1156 * (_1123.z + (-0.5));
        float _1166 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1130.x + (-0.5));
        float _1168 = _1166 * (_1130.y + (-0.5));
        float _1169 = _1166 * (_1130.z + (-0.5));
        float _1176 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1137.x + (-0.5));
        float _1178 = _1176 * (_1137.y + (-0.5));
        float _1179 = _1176 * (_1137.z + (-0.5));
        float _1186 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1144.x + (-0.5));
        float _1188 = _1186 * (_1144.y + (-0.5));
        float _1189 = _1186 * (_1144.z + (-0.5));
        float _1190 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1191 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = _1157 * 0.5;
        float _1194 = _1167 * 0.5;
        float _1195 = _1177 * 0.5;
        float _1196 = dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195));
        float _1201 = (_1196 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1196);
        float _1209 = (dot(vec3(_448, _449, _450), vec3(_1201 * _1193, _1201 * _1194, _1201 * _1195)) + 1.0) * 0.5;
        float _3732 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1218 = sqrt(((_1194 * _1194) + (_1193 * _1193)) + (_1195 * _1195)) / (_1190 + 9.9999997473787516355514526367188e-06);
        float _3743 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1220 = _1219 * 2.0;
        float _1224 = (1.0 - _1219) / (_1219 + 1.0);
        float _3754 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1234 = ((((1.0 - _1225) * (_1220 + 2.0)) * exp2(log2(isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * (_1220 + 1.0))) + _1225) * _1190;
        float _1235 = _1158 * 0.5;
        float _1236 = _1168 * 0.5;
        float _1237 = _1178 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1251 = (dot(vec3(_448, _449, _450), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _3765 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1260 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1191 + 9.9999997473787516355514526367188e-06);
        float _3776 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _3787 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * (_1262 + 1.0))) + _1267) * _1191;
        float _1277 = _1159 * 0.5;
        float _1278 = _1169 * 0.5;
        float _1279 = _1179 * 0.5;
        float _1280 = dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279));
        float _1285 = (_1280 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1280);
        float _1293 = (dot(vec3(_448, _449, _450), vec3(_1285 * _1277, _1285 * _1278, _1285 * _1279)) + 1.0) * 0.5;
        float _3798 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1302 = sqrt(((_1278 * _1278) + (_1277 * _1277)) + (_1279 * _1279)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _3809 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _3820 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * (_1304 + 1.0))) + _1309) * _1192;
        _1326 = _1159;
        _1327 = _1158;
        _1328 = _1157;
        _1329 = _1169;
        _1330 = _1168;
        _1331 = _1167;
        _1332 = _1179;
        _1333 = _1178;
        _1334 = _1177;
        _1335 = _1192;
        _1336 = _1191;
        _1337 = _1190;
        _1338 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)));
        _1339 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
        _1340 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
    }
    else
    {
        _1326 = _1014;
        _1327 = _1014;
        _1328 = _1014;
        _1329 = _1014;
        _1330 = _1014;
        _1331 = _1014;
        _1332 = _1014;
        _1333 = _1014;
        _1334 = _1014;
        _1335 = _1014;
        _1336 = _1014;
        _1337 = _1014;
        _1338 = 0.0;
        _1339 = 0.0;
        _1340 = 0.0;
    }
    float _1350 = (cbModelParam._m0[1u].x * (_1338 - _1026)) + _1026;
    float _1351 = (cbModelParam._m0[1u].x * (_1339 - _1027)) + _1027;
    float _1352 = (cbModelParam._m0[1u].x * (_1340 - _1028)) + _1028;
    float _1373 = fma(_1352, cbSceneParam._m0[89u].z, fma(_1351, cbSceneParam._m0[89u].y, _1350 * cbSceneParam._m0[89u].x));
    float _1376 = fma(_1352, cbSceneParam._m0[90u].z, fma(_1351, cbSceneParam._m0[90u].y, _1350 * cbSceneParam._m0[90u].x));
    float _1379 = fma(_1352, cbSceneParam._m0[91u].z, fma(_1351, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1350));
    float _1394 = _622 * 0.5;
    float _1395 = _623 * 0.5;
    float _1396 = _624 * 0.5;
    float _1397 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1328, _1331, _1334, _1337));
    float _1400 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1327, _1330, _1333, _1336));
    float _1403 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1326, _1329, _1332, _1335));
    float _1437;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1410 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1013, _1017, _1020, _1023));
        float _1414 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1015, _1018, _1021, _1024));
        float _1418 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1016, _1019, _1022, _1025));
        float _1425 = dot(vec4(cbModelParam._m0[39u]), vec4(_1394, _1395, _1396, 1.0));
        _1437 = dot(vec3(isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)), isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)), isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1425) ? 0.0 : (isnan(0.0) ? _1425 : max(0.0, _1425))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1437 = 1.0;
    }
    float _1448;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1439 = dot(vec4(cbModelParam._m0[40u]), vec4(_1394, _1395, _1396, 1.0));
        _1448 = dot(vec3(isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)), isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)), isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1439) ? 0.0 : (isnan(0.0) ? _1439 : max(0.0, _1439))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1448 = 1.0;
    }
    float _1452 = (_1448 * cbModelParam._m0[1u].x) + (_1437 * (1.0 - cbModelParam._m0[1u].x));
    float _1462 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _451);
    float _1463 = isnan(_1462) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1462 : min(cbModelParam._m0[25u].z, _1462));
    float _1543;
    float _1545;
    float _1547;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1510 = fma(_683, cbModelParam._m0[13u].z, fma(_679, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _675)) + cbModelParam._m0[13u].w;
        float _1514 = fma(_683, cbModelParam._m0[14u].z, fma(_679, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _675)) + cbModelParam._m0[14u].w;
        float _1518 = fma(_683, cbModelParam._m0[15u].z, fma(_679, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _675)) + cbModelParam._m0[15u].w;
        float _1521 = fma(_624, cbModelParam._m0[13u].z, fma(_623, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _622));
        float _1524 = fma(_624, cbModelParam._m0[14u].z, fma(_623, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _622));
        float _1527 = fma(_624, cbModelParam._m0[15u].z, fma(_623, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _622));
        float _1555;
        if (_1521 > 0.0)
        {
            _1555 = abs((1.0 - _1510) / _1521);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1521 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1510 + 1.0) / _1521);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1555 = frontier_phi_17_15_ladder;
        }
        float _1758;
        if (_1524 > 0.0)
        {
            _1758 = abs((1.0 - _1514) / _1524);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1524 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1514 + 1.0) / _1524);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1758 = frontier_phi_26_22_ladder;
        }
        float _2001;
        if (_1527 > 0.0)
        {
            _2001 = abs((1.0 - _1518) / _1527);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1527 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1518 + 1.0) / _1527);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2001 = frontier_phi_38_33_ladder;
        }
        float _2003 = isnan(_1758) ? _1555 : (isnan(_1555) ? _1758 : min(_1555, _1758));
        float _2004 = isnan(_2001) ? _2003 : (isnan(_2003) ? _2001 : min(_2003, _2001));
        float _2008 = (_2004 * _1521) + _1510;
        float _2009 = (_2004 * _1524) + _1514;
        float _2010 = (_2004 * _1527) + _1518;
        float _2011 = _2004 * 9.9999997473787516355514526367188e-05;
        float _2013 = (-1.0) - _2011;
        float _2015 = _2011 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2010 > _2015) || ((_2010 < _2013) || ((_2009 > _2015) || ((_2009 < _2013) || ((_2008 < _2013) || (_2008 > _2015))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2134 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2010, cbModelParam._m0[9u].z, fma(_2009, cbModelParam._m0[9u].y, _2008 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2010, cbModelParam._m0[10u].z, fma(_2009, cbModelParam._m0[10u].y, _2008 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2010, cbModelParam._m0[11u].z, fma(_2009, cbModelParam._m0[11u].y, _2008 * cbModelParam._m0[11u].x))), _1463);
            frontier_phi_16_38_ladder = _2134.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2134.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2134.x * cbModelParam._m0[1u].y;
        }
        _1543 = frontier_phi_16_38_ladder_2;
        _1545 = frontier_phi_16_38_ladder_1;
        _1547 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1531 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_622, _623, _624), _1463);
        _1543 = _1531.x * cbModelParam._m0[1u].y;
        _1545 = _1531.y * cbModelParam._m0[1u].y;
        _1547 = _1531.z * cbModelParam._m0[1u].y;
    }
    float _1551 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _451);
    float _1552 = isnan(_1551) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1551 : min(cbModelParam._m0[25u].w, _1551));
    float _1643;
    float _1645;
    float _1647;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1607 = fma(_683, cbModelParam._m0[21u].z, fma(_679, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _675)) + cbModelParam._m0[21u].w;
        float _1611 = fma(_683, cbModelParam._m0[22u].z, fma(_679, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _675)) + cbModelParam._m0[22u].w;
        float _1615 = fma(_683, cbModelParam._m0[23u].z, fma(_679, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _675)) + cbModelParam._m0[23u].w;
        float _1618 = fma(_624, cbModelParam._m0[21u].z, fma(_623, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _622));
        float _1621 = fma(_624, cbModelParam._m0[22u].z, fma(_623, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _622));
        float _1624 = fma(_624, cbModelParam._m0[23u].z, fma(_623, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _622));
        float _1763;
        if (_1618 > 0.0)
        {
            _1763 = abs((1.0 - _1607) / _1618);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1618 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1607 + 1.0) / _1618);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1763 = frontier_phi_28_24_ladder;
        }
        float _2028;
        if (_1621 > 0.0)
        {
            _2028 = abs((1.0 - _1611) / _1621);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1621 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1611 + 1.0) / _1621);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2028 = frontier_phi_40_35_ladder;
        }
        float _2233;
        if (_1624 > 0.0)
        {
            _2233 = abs((1.0 - _1615) / _1624);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1624 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1615 + 1.0) / _1624);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2233 = frontier_phi_49_46_ladder;
        }
        float _2235 = isnan(_2028) ? _1763 : (isnan(_1763) ? _2028 : min(_1763, _2028));
        float _2236 = isnan(_2233) ? _2235 : (isnan(_2235) ? _2233 : min(_2235, _2233));
        float _2240 = (_2236 * _1618) + _1607;
        float _2241 = (_2236 * _1621) + _1611;
        float _2242 = (_2236 * _1624) + _1615;
        float _2243 = _2236 * 9.9999997473787516355514526367188e-05;
        float _2244 = (-1.0) - _2243;
        float _2246 = _2243 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2242 > _2246) || ((_2242 < _2244) || ((_2241 > _2246) || ((_2241 < _2244) || ((_2240 < _2244) || (_2240 > _2246))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2476 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2242, cbModelParam._m0[17u].z, fma(_2241, cbModelParam._m0[17u].y, _2240 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2242, cbModelParam._m0[18u].z, fma(_2241, cbModelParam._m0[18u].y, _2240 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2242, cbModelParam._m0[19u].z, fma(_2241, cbModelParam._m0[19u].y, _2240 * cbModelParam._m0[19u].x))), _1552);
            frontier_phi_25_49_ladder = _2476.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2476.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2476.x * cbModelParam._m0[1u].z;
        }
        _1643 = frontier_phi_25_49_ladder_2;
        _1645 = frontier_phi_25_49_ladder_1;
        _1647 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1627 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_622, _623, _624), _1552);
        _1643 = _1627.x * cbModelParam._m0[1u].z;
        _1645 = _1627.y * cbModelParam._m0[1u].z;
        _1647 = _1627.z * cbModelParam._m0[1u].z;
    }
    float _1659 = ((((1.0 - _643) * ((_630 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_643 * _630)) * _614;
    float _1660 = _1659 * ((cbModelParam._m0[1u].w * (_1643 - _1543)) + _1543);
    float _1661 = _1659 * ((cbModelParam._m0[1u].w * (_1645 - _1545)) + _1545);
    float _1662 = _1659 * ((cbModelParam._m0[1u].w * (_1647 - _1547)) + _1547);
    float _1665 = fma(_1662, cbSceneParam._m0[89u].z, fma(_1661, cbSceneParam._m0[89u].y, _1660 * cbSceneParam._m0[89u].x));
    float _1668 = fma(_1662, cbSceneParam._m0[90u].z, fma(_1661, cbSceneParam._m0[90u].y, _1660 * cbSceneParam._m0[90u].x));
    float _1671 = fma(_1662, cbSceneParam._m0[91u].z, fma(_1661, cbSceneParam._m0[91u].y, _1660 * cbSceneParam._m0[91u].x));
    uvec4 _1681 = floatBitsToUint(cbInstanceData._m0[_589 + 5u]);
    uint _1683 = _1681.x * 14u;
    uint _1684 = _1683 + 13u;
    float _1691 = _614 + (-1.0);
    float _1696 = (cbLight._m0[_1684].x * _1691) + 1.0;
    float _1697 = (cbLight._m0[_1684].y * _1691) + 1.0;
    float _1698 = (cbLight._m0[_1684].z * _1691) + 1.0;
    float _1699 = (cbLight._m0[_1684].w * _1691) + 1.0;
    uint _1700 = _1683 + 5u;
    float _1706 = isnan(1.0) ? _1697 : (isnan(_1697) ? 1.0 : min(_1697, 1.0));
    uint _1710 = _1683 + 4u;
    float _1717 = isnan(1.0) ? _1696 : (isnan(_1696) ? 1.0 : min(_1696, 1.0));
    uint _1721 = _1683 | 1u;
    float _1732 = dot(vec3(cbLight._m0[_1683].xyz), vec3(_448, _449, _450));
    float _1735 = dot(vec3(cbLight._m0[_1721].xyz), vec3(_448, _449, _450));
    float _3956 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
    float _3967 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
    float _1740 = (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * 0.3183098733425140380859375;
    float _1742 = (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * 0.3183098733425140380859375;
    float _1749 = ((cbLight._m0[_1700].x * _1706) * _1742) + ((cbLight._m0[_1710].x * _1717) * _1740);
    float _1750 = ((_1706 * cbLight._m0[_1700].y) * _1742) + ((_1717 * cbLight._m0[_1710].y) * _1740);
    float _1751 = ((_1706 * cbLight._m0[_1700].z) * _1742) + ((_1717 * cbLight._m0[_1710].z) * _1740);
    uvec4 _1755 = floatBitsToUint(cbLight._m0[_1683 + 12u]);
    bool _1757 = _1755.x == 0u;
    float _1768;
    float _1770;
    float _1772;
    if (_1757)
    {
        _1768 = _1749;
        _1770 = _1750;
        _1772 = _1751;
    }
    else
    {
        uint _1776 = _1683 + 6u;
        float _1792 = (dot(vec3(cbLight._m0[_1683 + 2u].xyz), vec3(_448, _449, _450)) * 0.5) + 0.5;
        float _1793 = _1792 * _1792;
        float _3978 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1794 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1795 = isnan(1.0) ? _1698 : (isnan(_1698) ? 1.0 : min(_1698, 1.0));
        _1768 = (((cbLight._m0[_1776].x * 0.3183098733425140380859375) * _1794) * _1795) + _1749;
        _1770 = (((cbLight._m0[_1776].y * 0.3183098733425140380859375) * _1794) * _1795) + _1750;
        _1772 = (((cbLight._m0[_1776].z * 0.3183098733425140380859375) * _1794) * _1795) + _1751;
    }
    bool _1775 = _1755.y == 0u;
    float _1813;
    float _1815;
    float _1817;
    if (_1775)
    {
        _1813 = _1768;
        _1815 = _1770;
        _1817 = _1772;
    }
    else
    {
        uint _1972 = _1683 + 7u;
        float _1988 = (dot(vec3(cbLight._m0[_1683 + 3u].xyz), vec3(_448, _449, _450)) * 0.5) + 0.5;
        float _1989 = _1988 * _1988;
        float _3994 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        float _1990 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1991 = isnan(1.0) ? _1699 : (isnan(_1699) ? 1.0 : min(_1699, 1.0));
        _1813 = (((cbLight._m0[_1972].x * 0.3183098733425140380859375) * _1990) * _1991) + _1768;
        _1815 = (((cbLight._m0[_1972].y * 0.3183098733425140380859375) * _1990) * _1991) + _1770;
        _1817 = (((cbLight._m0[_1972].z * 0.3183098733425140380859375) * _1990) * _1991) + _1772;
    }
    uint _1820 = _1683 + 8u;
    float _1833 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1683].w)) * _451) * 0.949999988079071044921875);
    float _1834 = _1833 * _1833;
    float _1835 = cbLight._m0[_1683].x + _528;
    float _1836 = cbLight._m0[_1683].y + _529;
    float _1837 = cbLight._m0[_1683].z + _530;
    float _1841 = inversesqrt(dot(vec3(_1835, _1836, _1837), vec3(_1835, _1836, _1837)));
    float _1842 = _1841 * _1835;
    float _1843 = _1841 * _1836;
    float _1844 = _1841 * _1837;
    float _1845 = dot(vec3(_448, _449, _450), vec3(cbLight._m0[_1683].xyz));
    float _4010 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _1848 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _4021 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _1849 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _1850 = dot(vec3(_448, _449, _450), vec3(_1842, _1843, _1844));
    float _4032 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
    float _1853 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _1854 = dot(vec3(cbLight._m0[_1683].xyz), vec3(_1842, _1843, _1844));
    float _4043 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1858 = _1834 * _1834;
    float _1862 = ((_1853 * _1853) * (_1858 + (-1.0))) + 1.0;
    float _1873 = (exp2(log2(1.0 - (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1874 = 1.0 - _1834;
    float _1885 = (0.5 / (((_1849 * ((_1848 * _1874) + _1834)) + 9.9999999392252902907785028219223e-09) + (((_1849 * _1874) + _1834) * _1848))) * _1848;
    float _4054 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1887 = (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_1858 / ((_1862 * _1862) * 3.141590118408203125));
    uint _1898 = _1683 + 9u;
    float _1909 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1721].w)) * _451) * 0.949999988079071044921875);
    float _1910 = _1909 * _1909;
    float _1911 = cbLight._m0[_1721].x + _528;
    float _1912 = cbLight._m0[_1721].y + _529;
    float _1913 = cbLight._m0[_1721].z + _530;
    float _1917 = inversesqrt(dot(vec3(_1911, _1912, _1913), vec3(_1911, _1912, _1913)));
    float _1918 = _1917 * _1911;
    float _1919 = _1917 * _1912;
    float _1920 = _1917 * _1913;
    float _1921 = dot(vec3(_448, _449, _450), vec3(cbLight._m0[_1721].xyz));
    float _4065 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
    float _1924 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _1925 = dot(vec3(_448, _449, _450), vec3(_1918, _1919, _1920));
    float _4076 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _1928 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _1929 = dot(vec3(cbLight._m0[_1721].xyz), vec3(_1918, _1919, _1920));
    float _4087 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
    float _1933 = _1910 * _1910;
    float _1937 = ((_1928 * _1928) * (_1933 + (-1.0))) + 1.0;
    float _1946 = (exp2(log2(1.0 - (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1947 = 1.0 - _1910;
    float _1957 = (0.5 / (((_1849 * ((_1924 * _1947) + _1910)) + 9.9999999392252902907785028219223e-09) + (((_1849 * _1947) + _1910) * _1924))) * _1924;
    float _4098 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1959 = (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_1933 / ((_1937 * _1937) * 3.141590118408203125));
    float _1969 = (((_1946 * cbLight._m0[_1898].x) * _1959) * _1706) + (((_1873 * cbLight._m0[_1820].x) * _1887) * _1717);
    float _1970 = (((_1946 * cbLight._m0[_1898].y) * _1959) * _1706) + (((_1873 * cbLight._m0[_1820].y) * _1887) * _1717);
    float _1971 = (((_1946 * cbLight._m0[_1898].z) * _1959) * _1706) + (((_1873 * cbLight._m0[_1820].z) * _1887) * _1717);
    float _2033;
    float _2035;
    float _2037;
    if (_1757)
    {
        _2033 = _1969;
        _2035 = _1970;
        _2037 = _1971;
    }
    else
    {
        uint _2039 = _1683 + 2u;
        uint _2043 = _1683 + 10u;
        float _2057 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2039].w)) * _451) * 0.949999988079071044921875);
        float _2058 = _2057 * _2057;
        float _2059 = cbLight._m0[_2039].x + _528;
        float _2060 = cbLight._m0[_2039].y + _529;
        float _2061 = cbLight._m0[_2039].z + _530;
        float _2065 = inversesqrt(dot(vec3(_2059, _2060, _2061), vec3(_2059, _2060, _2061)));
        float _2066 = _2065 * _2059;
        float _2067 = _2065 * _2060;
        float _2068 = _2065 * _2061;
        float _2069 = dot(vec3(_448, _449, _450), vec3(cbLight._m0[_2039].xyz));
        float _4109 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
        float _2072 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _2073 = dot(vec3(_448, _449, _450), vec3(_2066, _2067, _2068));
        float _4120 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2076 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _2077 = dot(vec3(cbLight._m0[_2039].xyz), vec3(_2066, _2067, _2068));
        float _4131 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2081 = _2058 * _2058;
        float _2085 = ((_2076 * _2076) * (_2081 + (-1.0))) + 1.0;
        float _2094 = (exp2(log2(1.0 - (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2095 = 1.0 - _2058;
        float _2105 = (0.5 / (((_1849 * ((_2072 * _2095) + _2058)) + 9.9999999392252902907785028219223e-09) + (((_1849 * _2095) + _2058) * _2072))) * _2072;
        float _4142 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2107 = (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_2081 / ((_2085 * _2085) * 3.141590118408203125));
        float _2108 = isnan(1.0) ? _1698 : (isnan(_1698) ? 1.0 : min(_1698, 1.0));
        _2033 = (((_2094 * cbLight._m0[_2043].x) * _2107) * _2108) + _1969;
        _2035 = (((_2094 * cbLight._m0[_2043].y) * _2107) * _2108) + _1970;
        _2037 = (((_2094 * cbLight._m0[_2043].z) * _2107) * _2108) + _1971;
    }
    float _2143;
    float _2145;
    float _2147;
    if (_1775)
    {
        _2143 = _2033;
        _2145 = _2035;
        _2147 = _2037;
    }
    else
    {
        uint _2154 = _1683 + 3u;
        uint _2158 = _1683 + 11u;
        float _2172 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2154].w)) * _451) * 0.949999988079071044921875);
        float _2173 = _2172 * _2172;
        float _2174 = cbLight._m0[_2154].x + _528;
        float _2175 = cbLight._m0[_2154].y + _529;
        float _2176 = cbLight._m0[_2154].z + _530;
        float _2180 = inversesqrt(dot(vec3(_2174, _2175, _2176), vec3(_2174, _2175, _2176)));
        float _2181 = _2180 * _2174;
        float _2182 = _2180 * _2175;
        float _2183 = _2180 * _2176;
        float _2184 = dot(vec3(_448, _449, _450), vec3(cbLight._m0[_2154].xyz));
        float _4158 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
        float _2187 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _2188 = dot(vec3(_448, _449, _450), vec3(_2181, _2182, _2183));
        float _4169 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2191 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _2192 = dot(vec3(cbLight._m0[_2154].xyz), vec3(_2181, _2182, _2183));
        float _4180 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2196 = _2173 * _2173;
        float _2200 = ((_2191 * _2191) * (_2196 + (-1.0))) + 1.0;
        float _2209 = (exp2(log2(1.0 - (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2210 = 1.0 - _2173;
        float _2220 = (0.5 / (((_1849 * ((_2187 * _2210) + _2173)) + 9.9999999392252902907785028219223e-09) + (((_1849 * _2210) + _2173) * _2187))) * _2187;
        float _4191 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        float _2222 = (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_2196 / ((_2200 * _2200) * 3.141590118408203125));
        float _2223 = isnan(1.0) ? _1699 : (isnan(_1699) ? 1.0 : min(_1699, 1.0));
        _2143 = (((_2209 * cbLight._m0[_2158].x) * _2222) * _2223) + _2033;
        _2145 = (((_2209 * cbLight._m0[_2158].y) * _2222) * _2223) + _2035;
        _2147 = (((_2209 * cbLight._m0[_2158].z) * _2222) * _2223) + _2037;
    }
    float _2358;
    float _2360;
    float _2362;
    float _2364;
    float _2366;
    float _2368;
    if (_1681.y == 0u)
    {
        float _2298 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2299 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2298;
        float _2300 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2298;
        float _2301 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2298;
        uvec4 _2313 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2314 = _2313.x;
        uint _2325 = uint((float(_2313.y) * floor(float(uint(cbSceneParam._m0[85u].y * _550) / _2314))) + floor(float(uint(cbSceneParam._m0[85u].x * _549) / _2314)));
        float _2335 = (log2(_2301 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2336 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        uint _2339 = uint(isnan(14.0) ? _2336 : (isnan(_2336) ? 14.0 : min(_2336, 14.0)));
        uvec4 _2344 = texelFetch(g_lightClusterGridBuffer, int(((_2339 << 2u) + (_2325 << 6u)) >> 2u));
        uint _2345 = _2344.x;
        uint _2346 = _2313.z;
        float _2481;
        float _2483;
        float _2485;
        float _2487;
        float _2489;
        float _2491;
        if (((((1u << ((_2346 >> 4u) & 15u)) + 4294967295u) & _2345) == 0u) || ((_2346 & 240u) == 0u))
        {
            _2481 = 0.0;
            _2483 = 0.0;
            _2485 = 0.0;
            _2487 = 0.0;
            _2489 = 0.0;
            _2491 = 0.0;
        }
        else
        {
            float _2482;
            float _2484;
            float _2486;
            float _2488;
            float _2490;
            float _2492;
            float _2643 = 0.0;
            float _2644 = 0.0;
            float _2645 = 0.0;
            float _2646 = 0.0;
            float _2647 = 0.0;
            float _2648 = 0.0;
            uint _2649 = 0u;
            uint _2658;
            bool _2659;
            for (;;)
            {
                _2658 = texelFetch(g_lightClassification, int((((_2339 << 5u) + (_2325 << 9u)) + (_2649 << 2u)) >> 2u)).x;
                _2659 = _2658 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2659)
                {
                    frontier_phi_66_pred = _2643;
                    frontier_phi_66_pred_1 = _2648;
                    frontier_phi_66_pred_2 = _2647;
                    frontier_phi_66_pred_3 = _2646;
                    frontier_phi_66_pred_4 = _2645;
                    frontier_phi_66_pred_5 = _2644;
                }
                else
                {
                    float _2788;
                    float _2789;
                    float _2790;
                    float _2791;
                    float _2792;
                    float _2793;
                    uint _2794;
                    _2788 = _2643;
                    _2789 = _2644;
                    _2790 = _2645;
                    _2791 = _2646;
                    _2792 = _2647;
                    _2793 = _2648;
                    _2794 = _2658;
                    float _2715;
                    float _2716;
                    float _2717;
                    float _2718;
                    float _2719;
                    float _2720;
                    for (;;)
                    {
                        uint _2798 = uint(findLSB(_2794)) + (_2649 << 5u);
                        uint _2795 = (_2794 + 4294967295u) & _2794;
                        uint _2800 = _2798 * 48u;
                        vec4 _2814 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2800)).x, texelFetch(g_PointLightRenderingBuffer, int(_2800 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2800 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2800 + 3u)).x));
                        uint _2820 = (_2798 * 48u) + 4u;
                        vec4 _2833 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2820)).x, texelFetch(g_PointLightRenderingBuffer, int(_2820 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2820 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2820 + 3u)).x));
                        uint _2839 = (_2798 * 48u) + 8u;
                        vec3 _2850 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2839)).x, texelFetch(g_PointLightRenderingBuffer, int(_2839 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2839 + 2u)).x));
                        float _2854 = _2814.x - _2299;
                        float _2855 = _2814.y - _2300;
                        float _2856 = _2814.z - _2301;
                        float _2857 = dot(vec3(_2854, _2855, _2856), vec3(_2854, _2855, _2856));
                        float _2860 = inversesqrt(_2857);
                        float _2861 = _2860 * _2854;
                        float _2862 = _2860 * _2855;
                        float _2863 = _2860 * _2856;
                        float _2864 = dot(vec3(_570, _573, _576), vec3(_2861, _2862, _2863));
                        float _2869 = 1.0 - (_2857 * _2814.w);
                        float _4217 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
                        float _2870 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
                        float _2871 = sqrt(_2857) * _2833.w;
                        float _2874 = 1.39999997615814208984375 / (_2871 + 1.39999997615814208984375);
                        float _2875 = _2874 * _2874;
                        float _2878 = ((1.0 - _2875) * _2864) + _2875;
                        float _2881 = _2871 * _2871;
                        float _2885 = ((isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0))) * _2870) / ((_2881 * 0.699999988079071044921875) + 1.0);
                        float _2889 = (-0.0) - _2299;
                        float _2890 = (-0.0) - _2300;
                        float _2891 = (-0.0) - _2301;
                        float _2895 = inversesqrt(dot(vec3(_2889, _2890, _2891), vec3(_2889, _2890, _2891)));
                        float _2896 = _2895 * _2889;
                        float _2897 = _2895 * _2890;
                        float _2898 = _2895 * _2891;
                        float _2906 = exp2(log2(1.0 / ((_2881 * 3.5) + 5.0)) * 0.25);
                        float _2907 = 1.0 - _630;
                        float _2914 = sqrt(1.0 - ((1.0 - (_2907 * _2907)) * (1.0 - (_2906 * _2906))));
                        float _2915 = _2914 * _2914;
                        float _2916 = _2915 * _2915;
                        float _2917 = _2896 + _2861;
                        float _2918 = _2897 + _2862;
                        float _2919 = _2898 + _2863;
                        float _2923 = inversesqrt(dot(vec3(_2917, _2918, _2919), vec3(_2917, _2918, _2919)));
                        float _2927 = dot(vec3(_570, _573, _576), vec3(_2896, _2897, _2898));
                        float _4233 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
                        float _2930 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
                        float _2931 = dot(vec3(_570, _573, _576), vec3(_2923 * _2917, _2923 * _2918, _2923 * _2919));
                        float _4244 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
                        float _2934 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
                        float _2938 = ((_2934 * _2934) * (_2916 + (-1.0))) + 1.0;
                        float _2939 = _2874 * _2915;
                        float _2940 = _2939 * _2939;
                        float _2943 = ((1.0 - _2940) * _2864) + _2940;
                        float _4255 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
                        float _2944 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
                        float _2945 = 1.0 - _2915;
                        float _2955 = (0.5 / (((_2944 * ((_2930 * _2945) + _2915)) + 9.9999999392252902907785028219223e-09) + (((_2944 * _2945) + _2915) * _2930))) * _2944;
                        float _4266 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
                        float _2966 = (((_2916 * 3.1415927410125732421875) * (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0)))) / ((_2938 * _2938) * ((_2881 * 2.1991131305694580078125) + 3.141590118408203125))) * _2870;
                        _2718 = (_2885 * _2833.x) + _2791;
                        _2719 = (_2885 * _2833.y) + _2792;
                        _2720 = (_2885 * _2833.z) + _2793;
                        _2715 = (_2966 * _2850.x) + _2788;
                        _2716 = (_2966 * _2850.y) + _2789;
                        _2717 = (_2966 * _2850.z) + _2790;
                        if (_2795 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2788 = _2715;
                            _2789 = _2716;
                            _2790 = _2717;
                            _2791 = _2718;
                            _2792 = _2719;
                            _2793 = _2720;
                            _2794 = _2795;
                        }
                    }
                    frontier_phi_66_pred = _2715;
                    frontier_phi_66_pred_1 = _2720;
                    frontier_phi_66_pred_2 = _2719;
                    frontier_phi_66_pred_3 = _2718;
                    frontier_phi_66_pred_4 = _2717;
                    frontier_phi_66_pred_5 = _2716;
                }
                _2482 = frontier_phi_66_pred;
                _2492 = frontier_phi_66_pred_1;
                _2490 = frontier_phi_66_pred_2;
                _2488 = frontier_phi_66_pred_3;
                _2486 = frontier_phi_66_pred_4;
                _2484 = frontier_phi_66_pred_5;
                uint _2650 = _2649 + 1u;
                if (_2650 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2643 = _2482;
                    _2644 = _2484;
                    _2645 = _2486;
                    _2646 = _2488;
                    _2647 = _2490;
                    _2648 = _2492;
                    _2649 = _2650;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2481 = _2482;
            _2483 = _2484;
            _2485 = _2486;
            _2487 = _2488;
            _2489 = _2490;
            _2491 = _2492;
        }
        uvec4 _2495 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2496 = _2495.z;
        uint _2498 = (_2496 >> 8u) & 15u;
        float _2611;
        float _2613;
        float _2615;
        float _2617;
        float _2619;
        float _2621;
        if (((4294967295u << _2498) & _2345) == 0u)
        {
            _2611 = _2481;
            _2613 = _2483;
            _2615 = _2485;
            _2617 = _2487;
            _2619 = _2489;
            _2621 = _2491;
        }
        else
        {
            float _2636 = inversesqrt(dot(vec3(_2299, _2300, _2301), vec3(_2299, _2300, _2301)));
            float _2637 = _2636 * _2299;
            float _2638 = _2636 * _2300;
            float _2639 = _2636 * _2301;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2498 < ((_2496 >> 12u) & 15u))
            {
                float _2612;
                float _2614;
                float _2616;
                float _2618;
                float _2620;
                float _2622;
                float _2771 = _2481;
                float _2772 = _2483;
                float _2773 = _2485;
                float _2774 = _2487;
                float _2775 = _2489;
                float _2776 = _2491;
                uint _2777 = _2498;
                uint _2786;
                bool _2787;
                for (;;)
                {
                    _2786 = texelFetch(g_lightClassification, int((((_2339 << 5u) + (_2325 << 9u)) + (_2777 << 2u)) >> 2u)).x;
                    _2787 = _2786 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2787)
                    {
                        frontier_phi_77_pred = _2776;
                        frontier_phi_77_pred_1 = _2775;
                        frontier_phi_77_pred_2 = _2774;
                        frontier_phi_77_pred_3 = _2773;
                        frontier_phi_77_pred_4 = _2772;
                        frontier_phi_77_pred_5 = _2771;
                    }
                    else
                    {
                        float _2980;
                        float _2981;
                        float _2982;
                        float _2983;
                        float _2984;
                        float _2985;
                        float _3275;
                        float _3276;
                        float _3277;
                        float _3278;
                        float _3279;
                        float _3280;
                        float _2993 = _2771;
                        float _2994 = _2772;
                        float _2995 = _2773;
                        float _2996 = _2774;
                        float _2997 = _2775;
                        float _2998 = _2776;
                        uint _2999 = _2786;
                        uint _3000;
                        vec4 _3025;
                        float _3026;
                        vec4 _3041;
                        vec3 _3053;
                        vec4 _3068;
                        vec4 _3084;
                        float _3131;
                        bool _3132;
                        for (;;)
                        {
                            uint _3010 = ((_2777 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2999));
                            _3000 = (_2999 + 4294967295u) & _2999;
                            uint _3012 = _3010 * 40u;
                            _3025 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3012)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 3u)).x));
                            _3026 = _3025.w;
                            uint _3028 = (_3010 * 40u) + 4u;
                            _3041 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 3u)).x));
                            uint _3043 = (_3010 * 40u) + 8u;
                            _3053 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3043)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 2u)).x));
                            uint _3055 = (_3010 * 40u) + 16u;
                            _3068 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3055)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 3u)).x));
                            uint _3071 = (_3010 * 40u) + 20u;
                            _3084 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 3u)).x));
                            uint _3087 = (_3010 * 40u) + 24u;
                            vec4 _3100 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3087)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 3u)).x));
                            uint _3106 = (_3010 * 40u) + 28u;
                            vec4 _3119 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3106)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 3u)).x));
                            _3131 = fma(_2301, _3119.z, fma(_2300, _3119.y, _3119.x * _2299)) + _3119.w;
                            _3132 = !((fma(_2301, _3100.z, fma(_2300, _3100.y, _3100.x * _2299)) + _3100.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3132)
                            {
                                float _3159 = _3025.x - _2299;
                                float _3160 = _3025.y - _2300;
                                float _3161 = _3025.z - _2301;
                                float _3162 = dot(vec3(_3159, _3160, _3161), vec3(_3159, _3160, _3161));
                                float _3165 = inversesqrt(_3162);
                                float _3166 = _3165 * _3159;
                                float _3167 = _3165 * _3160;
                                float _3168 = _3165 * _3161;
                                float _3172 = 1.0 - (_3162 / (_3026 * _3026));
                                float _4277 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                                float _3173 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
                                float _3177 = sqrt(_3162) * _3041.w;
                                float _3179 = 1.39999997615814208984375 / (_3177 + 1.39999997615814208984375);
                                float _3180 = _3179 * _3179;
                                float _3183 = ((1.0 - _3180) * dot(vec3(_3166, _3167, _3168), vec3(_570, _573, _576))) + _3180;
                                float _3186 = _3177 * _3177;
                                float _3190 = (fma(_2301, _3068.z, fma(_2300, _3068.y, _3068.x * _2299)) + _3068.w) / _3131;
                                float _3191 = (fma(_2301, _3084.z, fma(_2300, _3084.y, _3084.x * _2299)) + _3084.w) / _3131;
                                float _3195 = 1.0 - dot(vec2(_3190, _3191), vec2(_3190, _3191));
                                float _4293 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                                float _3196 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                                float _3197 = _3196 * (((isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0))) * _3173) / ((_3186 * 0.699999988079071044921875) + 1.0));
                                float _3209 = exp2(log2(1.0 / ((_3186 * 3.5) + 5.0)) * 0.25);
                                float _3210 = 1.0 - _630;
                                float _3217 = sqrt(1.0 - ((1.0 - (_3210 * _3210)) * (1.0 - (_3209 * _3209))));
                                float _3218 = _3217 * _3217;
                                float _3219 = _3218 * _3218;
                                float _3220 = _3166 - _2637;
                                float _3221 = _3167 - _2638;
                                float _3222 = _3168 - _2639;
                                float _3226 = inversesqrt(dot(vec3(_3220, _3221, _3222), vec3(_3220, _3221, _3222)));
                                float _3230 = dot(vec3(_570, _573, _576), vec3((-0.0) - _2637, (-0.0) - _2638, (-0.0) - _2639));
                                float _4304 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                                float _3233 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
                                float _3234 = dot(vec3(_570, _573, _576), vec3(_3226 * _3220, _3226 * _3221, _3226 * _3222));
                                float _4315 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                                float _3237 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
                                float _3241 = ((_3237 * _3237) * (_3219 + (-1.0))) + 1.0;
                                float _3242 = _3179 * _3218;
                                float _3243 = _3242 * _3242;
                                float _3249 = ((1.0 - _3243) * dot(vec3(_570, _573, _576), vec3(_3166, _3167, _3168))) + _3243;
                                float _4326 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                                float _3250 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
                                float _3251 = 1.0 - _3218;
                                float _3261 = (0.5 / (((_3250 * ((_3233 * _3251) + _3218)) + 9.9999999392252902907785028219223e-09) + (((_3250 * _3251) + _3218) * _3233))) * _3250;
                                float _4337 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                                float _3271 = (_3196 * _3173) * (((_3219 * 3.1415927410125732421875) * (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0)))) / ((_3241 * _3241) * ((_3186 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3197 * _3041.y;
                                frontier_phi_83_pred_1 = _3197 * _3041.x;
                                frontier_phi_83_pred_2 = _3271 * _3053.z;
                                frontier_phi_83_pred_3 = _3271 * _3053.y;
                                frontier_phi_83_pred_4 = _3271 * _3053.x;
                                frontier_phi_83_pred_5 = _3197 * _3041.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3279 = frontier_phi_83_pred;
                            _3278 = frontier_phi_83_pred_1;
                            _3277 = frontier_phi_83_pred_2;
                            _3276 = frontier_phi_83_pred_3;
                            _3275 = frontier_phi_83_pred_4;
                            _3280 = frontier_phi_83_pred_5;
                            _2983 = _3278 + _2996;
                            _2984 = _3279 + _2997;
                            _2985 = _3280 + _2998;
                            _2980 = _3275 + _2993;
                            _2981 = _3276 + _2994;
                            _2982 = _3277 + _2995;
                            if (_3000 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2993 = _2980;
                                _2994 = _2981;
                                _2995 = _2982;
                                _2996 = _2983;
                                _2997 = _2984;
                                _2998 = _2985;
                                _2999 = _3000;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2985;
                        frontier_phi_77_pred_1 = _2984;
                        frontier_phi_77_pred_2 = _2983;
                        frontier_phi_77_pred_3 = _2982;
                        frontier_phi_77_pred_4 = _2981;
                        frontier_phi_77_pred_5 = _2980;
                    }
                    _2622 = frontier_phi_77_pred;
                    _2620 = frontier_phi_77_pred_1;
                    _2618 = frontier_phi_77_pred_2;
                    _2616 = frontier_phi_77_pred_3;
                    _2614 = frontier_phi_77_pred_4;
                    _2612 = frontier_phi_77_pred_5;
                    uint _2778 = _2777 + 1u;
                    if (_2778 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2771 = _2612;
                        _2772 = _2614;
                        _2773 = _2616;
                        _2774 = _2618;
                        _2775 = _2620;
                        _2776 = _2622;
                        _2777 = _2778;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2616;
                frontier_phi_58_59_ladder_1 = _2622;
                frontier_phi_58_59_ladder_2 = _2620;
                frontier_phi_58_59_ladder_3 = _2618;
                frontier_phi_58_59_ladder_4 = _2614;
                frontier_phi_58_59_ladder_5 = _2612;
            }
            else
            {
                frontier_phi_58_59_ladder = _2485;
                frontier_phi_58_59_ladder_1 = _2491;
                frontier_phi_58_59_ladder_2 = _2489;
                frontier_phi_58_59_ladder_3 = _2487;
                frontier_phi_58_59_ladder_4 = _2483;
                frontier_phi_58_59_ladder_5 = _2481;
            }
            _2611 = frontier_phi_58_59_ladder_5;
            _2613 = frontier_phi_58_59_ladder_4;
            _2615 = frontier_phi_58_59_ladder;
            _2617 = frontier_phi_58_59_ladder_3;
            _2619 = frontier_phi_58_59_ladder_2;
            _2621 = frontier_phi_58_59_ladder_1;
        }
        float _2626 = isnan(1.0) ? _614 : (isnan(_614) ? 1.0 : min(_614, 1.0));
        _2358 = (_2626 * _2617) + _1813;
        _2360 = (_2626 * _2619) + _1815;
        _2362 = (_2626 * _2621) + _1817;
        _2364 = ((_2611 * 0.039999999105930328369140625) * _2626) + _2143;
        _2366 = ((_2613 * 0.039999999105930328369140625) * _2626) + _2145;
        _2368 = ((_2615 * 0.039999999105930328369140625) * _2626) + _2147;
    }
    else
    {
        _2358 = _1813;
        _2360 = _1815;
        _2362 = _1817;
        _2364 = _2143;
        _2366 = _2145;
        _2368 = _2147;
    }
    uint _2374 = _590 + uint(cbMatDynParam._m0[0u].w);
    float _2382 = ((_291 * cbMtdParam._m0[11u].x) * (_379.x + _364.x)) * cbInstanceData._m0[_2374].x;
    float _2385 = ((_291 * cbMtdParam._m0[11u].y) * (_379.y + _364.y)) * cbInstanceData._m0[_2374].y;
    float _2388 = ((_291 * cbMtdParam._m0[11u].z) * (_379.z + _364.z)) * cbInstanceData._m0[_2374].z;
    float _4353 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _4364 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _4375 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _2405 = (((isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_2358 + ((isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0))) * _614))) + ((_2364 + ((isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))) * _1452)) * cbPerFrame._m0[3u].x)) + _2382;
    float _2407 = (_2385 + ((_2366 + ((isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))) * _1452)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * (_2360 + ((isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0))) * _614)));
    float _2409 = (_2388 + ((_2368 + ((isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))) * _1452)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (_2362 + ((isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0))) * _614)));
    float _2410 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _2411 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2412 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    float _2418 = cbMtdParam._m0[2u].x * _2382;
    float _2419 = cbMtdParam._m0[2u].y * _2385;
    float _2420 = cbMtdParam._m0[2u].z * _2388;
    float _4401 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2422 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
    uint _2423 = _589 + 6u;
    float _2431 = _549 / cbSceneParam._m0[86u].x;
    float _2432 = _550 / cbSceneParam._m0[86u].y;
    vec4 _2446 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2431, _2432, (log2((isnan(cbSceneParam._m0[77u].w) ? _470 : (isnan(_470) ? cbSceneParam._m0[77u].w : min(_470, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2448 = _2446.x;
    float _2449 = _2446.y;
    float _2450 = _2446.z;
    float _2451 = _2446.w;
    float _2544;
    float _2546;
    float _2548;
    float _2550;
    if (_470 > cbSceneParam._m0[78u].w)
    {
        float _2506 = isnan(_470) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _470 : min(cbSceneParam._m0[80u].w, _470));
        float _2507 = _2506 / _470;
        float _2518 = _2507 * _521;
        float _2519 = _522 * _2507;
        float _2520 = (-0.0) - _2519;
        float _2522 = _2507 * _523;
        float _2524 = (cbSceneParam._m0[77u].w * _2520) / _2506;
        float _2525 = _2524 + cbSceneParam._m0[79u].w;
        float _2526 = cbSceneParam._m0[79u].w - _2519;
        float _2532 = sqrt(((_2518 * _2518) + (_2519 * _2519)) + (_2522 * _2522));
        float _2535 = (1.0 - (cbSceneParam._m0[77u].w / _2506)) * _2532;
        float _2540 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2542 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2728;
        if (abs((_2520 - _2524) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2728 = ((((_2525 > 0.0) ? exp2(_2540 * _2525) : (2.0 - exp2(_2542 * _2525))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2535;
        }
        else
        {
            float _2672 = 1.0 / cbSceneParam._m0[80u].x;
            float _2673 = isnan(_2526) ? _2525 : (isnan(_2525) ? _2526 : max(_2525, _2526));
            float _2674 = isnan(_2526) ? _2525 : (isnan(_2525) ? _2526 : min(_2525, _2526));
            float _2683 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : min(_2673, 0.0));
            float _2684 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : min(_2674, 0.0));
            _2728 = ((abs(_2532 / _2520) * cbSceneParam._m0[80u].y) * ((((_2683 - _2684) * 2.0) - ((exp2(_2540 * (isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0)))) - exp2(_2540 * (isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0))))) * _2672)) - ((exp2(_2542 * _2683) - exp2(_2542 * _2684)) * _2672))) + (_2535 * cbSceneParam._m0[80u].z);
        }
        vec4 _2730 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2431, _2432, 1.0), 0.0);
        float _2739 = exp2((_2728 * (-1.44269502162933349609375)) * (1.0 - _2730.w));
        float _2740 = log2(_2739);
        float _2756 = log2(_2451);
        _2544 = (exp2(_2756 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2740 * cbSceneParam._m0[78u].x)) * _2730.x) / cbSceneParam._m0[78u].x)) + _2448;
        _2546 = (exp2(_2756 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2740 * cbSceneParam._m0[78u].y)) * _2730.y) / cbSceneParam._m0[78u].y)) + _2449;
        _2548 = (exp2(_2756 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2740 * cbSceneParam._m0[78u].z)) * _2730.z) / cbSceneParam._m0[78u].z)) + _2450;
        _2550 = _2739 * _2451;
    }
    else
    {
        _2544 = _2448;
        _2546 = _2449;
        _2548 = _2450;
        _2550 = _2451;
    }
    bool _2766;
    vec4 _2560;
    vec4 _2582;
    float _2584;
    float _2588;
    float _2589;
    float _2590;
    float _2593;
    float _2596;
    float _2599;
    float _2600;
    bool _2610;
    for (;;)
    {
        _2560 = cbMatDynParam._m0[0u];
        float _2562 = roundEven(_2560.y);
        bool _2563 = _2562 == 3.0;
        float _2564 = log2(_2550);
        float _2568 = exp2(_2564 * cbSceneParam._m0[78u].x);
        float _2569 = exp2(_2564 * cbSceneParam._m0[78u].y);
        float _2570 = exp2(_2564 * cbSceneParam._m0[78u].z);
        float _2571 = _2568 * _2410;
        float _2572 = _2569 * _2411;
        float _2573 = _2570 * _2412;
        float _2580 = _537 + (-0.5);
        _2582 = cbMtdParam._m0[1u];
        _2584 = _2582.y * _2580;
        float _2587 = (_2562 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2588 = _2587 * (_2563 ? _2571 : (_2571 + (cbSceneParam._m0[72u].w * _2544)));
        _2589 = _2587 * (_2563 ? _2572 : (_2572 + (cbSceneParam._m0[72u].w * _2546)));
        _2590 = _2587 * (_2563 ? _2573 : (_2573 + (cbSceneParam._m0[72u].w * _2548)));
        _2593 = ((_2418 * _2422) * _2568) * _2587;
        _2596 = ((_2419 * _2422) * _2569) * _2587;
        _2599 = ((_2420 * _2422) * _2570) * _2587;
        _2600 = _2580 * 0.999000012874603271484375;
        _2610 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2610)
        {
            if ((cbInstanceData._m0[_589 + 7u].x + _2600) < 0.5)
            {
                _2766 = true;
                break;
            }
        }
        uint _2707 = _590 + uint(_2560.w);
        if ((cbInstanceData._m0[_2707].w < 1.0) && ((cbInstanceData._m0[_2707].w + _2600) < 0.5))
        {
            _2766 = true;
            break;
        }
        if ((_2584 + 1.0) < _2582.x)
        {
            _2766 = true;
            break;
        }
        _2766 = false;
        break;
    }
    float _2971;
    if (_2766)
    {
        discard_state = true;
        _2971 = 0.0;
    }
    else
    {
        _2971 = cbInstanceData._m0[_2423].w;
    }
    SV_Target.x = _2588;
    SV_Target.y = _2589;
    SV_Target.z = _2590;
    SV_Target.w = _2971;
    SV_Target_1.x = _2593;
    SV_Target_1.y = _2596;
    SV_Target_1.z = _2599;
    SV_Target_1.w = cbInstanceData._m0[_2423].w;
    discard_exit();
}


