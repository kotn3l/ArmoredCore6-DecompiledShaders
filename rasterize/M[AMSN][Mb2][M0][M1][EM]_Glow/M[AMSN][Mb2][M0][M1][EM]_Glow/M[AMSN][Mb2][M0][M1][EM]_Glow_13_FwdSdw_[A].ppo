#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1082;
float _3767;
float _3768;
float _3769;
float _3770;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _249 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _255 = _249.x * cbMtdParam._m0[9u].x;
    float _256 = _249.y * cbMtdParam._m0[9u].y;
    float _257 = _249.z * cbMtdParam._m0[9u].z;
    vec4 _277 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _298 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_277.x + 0.00999999977648258209228515625));
    float _300 = _298 * (cbMtdParam._m0[15u].x + 1.0);
    float _3779 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _301 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _309 = ((((cbMtdParam._m0[12u].x - _255) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _301) + _255;
    float _310 = ((((cbMtdParam._m0[12u].y - _256) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _301) + _256;
    float _311 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _257)) * _301) + _257;
    vec4 _323 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _327 = _323.z;
    float _331 = (_323.x * 2.0) + (-1.0);
    float _333 = (_323.y * 2.0) + (-1.0);
    float _334 = dot(vec2(_331, _333), vec2(_331, _333));
    float _3790 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _339 = sqrt(1.0 - (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))));
    float _342 = _298 * (cbMtdParam._m0[14u].w + 1.0);
    float _3801 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _346 = ((cbMtdParam._m0[14u].y - _327) * (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0)))) + _327;
    vec4 _374 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _389 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _434 = (TEXCOORD_6.x - ((cbMtdParam._m0[13u].w * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_5, SS_WrapLinear), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].x + 1.0);
    float _3812 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _435 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _436 = ((_389.x + _374.x) * cbMtdParam._m0[11u].x) * _435;
    float _437 = ((_389.y + _374.y) * cbMtdParam._m0[11u].y) * _435;
    float _438 = ((_389.z + _374.z) * cbMtdParam._m0[11u].z) * _435;
    vec4 _450 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[9u].w));
    float _452 = _450.x;
    vec4 _477 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _483 = (_477.x * 2.0) + (-1.0);
    float _484 = (_477.y * 2.0) + (-1.0);
    float _485 = dot(vec2(_483, _484), vec2(_483, _484));
    float _3823 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _501 = (_301 * (((cbMtdParam._m0[13u].z * _331) - _331) + _483)) + _331;
    float _502 = (_301 * (((cbMtdParam._m0[13u].z * _333) - _333) + _484)) + _333;
    float _503 = (_301 * (sqrt(1.0 - (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0)))) - _339)) + _339;
    float _506 = fma(_503, _220 * NORMAL.x, fma(_502, _227 * TANGENT.x, (_213 * _205) * _501));
    float _509 = fma(_503, _220 * NORMAL.y, fma(_502, _227 * TANGENT.y, (_213 * _206) * _501));
    float _512 = fma(_503, _220 * NORMAL.z, fma(_502, _227 * TANGENT.z, (_213 * _207) * _501));
    float _516 = inversesqrt(dot(vec3(_506, _509, _512), vec3(_506, _509, _512)));
    float _517 = _516 * _506;
    float _518 = _516 * _509;
    float _519 = _516 * _512;
    float _3834 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _520 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _3845 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _3856 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _3867 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _539 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _579 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _589 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _579);
    float _590 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _579);
    float _591 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _579);
    float _595 = inversesqrt(dot(vec3(_589, _590, _591), vec3(_589, _590, _591)));
    float _596 = _589 * _595;
    float _597 = _590 * _595;
    float _598 = _591 * _595;
    vec4 _603 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _605 = _603.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _762 = sqrt(((_589 * _589) + (_590 * _590)) + (_591 * _591));
        float _768 = (cbMatDynParam._m0[5u].x * _762) + cbMatDynParam._m0[5u].y;
        float _3878 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _769 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _773 = (cbMatDynParam._m0[5u].z * _762) + cbMatDynParam._m0[5u].w;
        float _3889 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) - _769)) + _769) < ((_605 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _617 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _618 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _638 = fma(_519, cbSceneParam._m0[5u].z, fma(_518, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _517));
    float _641 = fma(_519, cbSceneParam._m0[6u].z, fma(_518, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _517));
    float _644 = fma(_519, cbSceneParam._m0[7u].z, fma(_518, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _517));
    uint _657 = uint(roundEven(NORMAL.w)) * 13u;
    uint _658 = _657 + 9u;
    uint _659 = _658 + uint(cbMatDynParam._m0[0u].w);
    float _665 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0)))) * cbInstanceData._m0[_659].x;
    float _666 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0)))) * cbInstanceData._m0[_659].y;
    float _667 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0)))) * cbInstanceData._m0[_659].z;
    float _3900 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _668 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _3911 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _669 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _3922 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _670 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    vec4 _679 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _617, cbSceneParam._m0[86u].y * _618));
    float _682 = _679.x * TEXCOORD_3.w;
    float _683 = dot(vec3(_517, _518, _519), vec3(_596, _597, _598));
    float _686 = _683 * 2.0;
    float _690 = (_686 * _517) - _596;
    float _691 = (_686 * _518) - _597;
    float _692 = (_686 * _519) - _598;
    float _696 = abs(dot(vec3(_596, _597, _598), vec3(_517, _518, _519)));
    float _3933 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _698 = sqrt(_520);
    float _711 = exp2((_698 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_698 * 3.0));
    float _743 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _747 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _751 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1081;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _806 = fma(_751, cbModelParam._m0[26u].z, fma(_747, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _743));
        float _810 = fma(_751, cbModelParam._m0[27u].z, fma(_747, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _743));
        float _814 = fma(_751, cbModelParam._m0[28u].z, fma(_747, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _743));
        float _839 = _743 + _517;
        float _840 = _747 + _518;
        float _841 = _751 + _519;
        float _851 = fma(_841, cbModelParam._m0[26u].z, fma(_840, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _839)) - _806;
        float _852 = fma(_841, cbModelParam._m0[27u].z, fma(_840, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _839)) - _810;
        float _853 = fma(_841, cbModelParam._m0[28u].z, fma(_840, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _839)) - _814;
        float _857 = inversesqrt(dot(vec3(_851, _852, _853), vec3(_851, _852, _853)));
        float _870 = ((_857 * _851) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_806 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _871 = ((_857 * _852) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_810 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _872 = ((_857 * _853) / cbModelParam._m0[34u].z) + ((((((_814 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _875 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        vec4 _882 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        float _909 = exp2((_875.w + (-0.5)) * 20.0) * 2.0;
        float _910 = _909 * (_875.x + (-0.5));
        float _911 = _909 * (_875.y + (-0.5));
        float _912 = _909 * (_875.z + (-0.5));
        float _919 = exp2((_882.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_882.x + (-0.5));
        float _921 = _919 * (_882.y + (-0.5));
        float _922 = _919 * (_882.z + (-0.5));
        float _929 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_889.x + (-0.5));
        float _931 = _929 * (_889.y + (-0.5));
        float _932 = _929 * (_889.z + (-0.5));
        float _939 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_896.x + (-0.5));
        float _941 = _939 * (_896.y + (-0.5));
        float _942 = _939 * (_896.z + (-0.5));
        float _943 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _944 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _945 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _946 = _910 * 0.5;
        float _947 = _920 * 0.5;
        float _948 = _930 * 0.5;
        float _949 = dot(vec3(_946, _947, _948), vec3(_946, _947, _948));
        float _954 = (_949 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_949);
        float _963 = (dot(vec3(_517, _518, _519), vec3(_954 * _946, _954 * _947, _954 * _948)) + 1.0) * 0.5;
        float _3959 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _973 = sqrt(((_947 * _947) + (_946 * _946)) + (_948 * _948)) / (_943 + 9.9999997473787516355514526367188e-06);
        float _3970 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _975 = _974 * 2.0;
        float _979 = (1.0 - _974) / (_974 + 1.0);
        float _3981 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _989 = ((((1.0 - _980) * (_975 + 2.0)) * exp2(log2(isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * (_975 + 1.0))) + _980) * _943;
        float _990 = _911 * 0.5;
        float _991 = _921 * 0.5;
        float _992 = _931 * 0.5;
        float _993 = dot(vec3(_990, _991, _992), vec3(_990, _991, _992));
        float _998 = (_993 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_993);
        float _1006 = (dot(vec3(_517, _518, _519), vec3(_998 * _990, _998 * _991, _998 * _992)) + 1.0) * 0.5;
        float _3992 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1015 = sqrt(((_991 * _991) + (_990 * _990)) + (_992 * _992)) / (_944 + 9.9999997473787516355514526367188e-06);
        float _4003 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1017 = _1016 * 2.0;
        float _1021 = (1.0 - _1016) / (_1016 + 1.0);
        float _4014 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1031 = ((((1.0 - _1022) * (_1017 + 2.0)) * exp2(log2(isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_1017 + 1.0))) + _1022) * _944;
        float _1032 = _912 * 0.5;
        float _1033 = _922 * 0.5;
        float _1034 = _932 * 0.5;
        float _1035 = dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034));
        float _1040 = (_1035 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1035);
        float _1048 = (dot(vec3(_517, _518, _519), vec3(_1040 * _1032, _1040 * _1033, _1040 * _1034)) + 1.0) * 0.5;
        float _4025 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1057 = sqrt(((_1033 * _1033) + (_1032 * _1032)) + (_1034 * _1034)) / (_945 + 9.9999997473787516355514526367188e-06);
        float _4036 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1059 = _1058 * 2.0;
        float _1063 = (1.0 - _1058) / (_1058 + 1.0);
        float _4047 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1073 = ((((1.0 - _1064) * (_1059 + 2.0)) * exp2(log2(isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_1059 + 1.0))) + _1064) * _945;
        _1081 = _912;
        _1083 = _911;
        _1084 = _910;
        _1085 = _922;
        _1086 = _921;
        _1087 = _920;
        _1088 = _932;
        _1089 = _931;
        _1090 = _930;
        _1091 = _945;
        _1092 = _944;
        _1093 = _943;
        _1094 = cbModelParam._m0[36u].z * (isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0)));
        _1095 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0)));
        _1096 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)));
    }
    else
    {
        _1081 = _1082;
        _1083 = _1082;
        _1084 = _1082;
        _1085 = _1082;
        _1086 = _1082;
        _1087 = _1082;
        _1088 = _1082;
        _1089 = _1082;
        _1090 = _1082;
        _1091 = _1082;
        _1092 = _1082;
        _1093 = _1082;
        _1094 = 0.0;
        _1095 = 0.0;
        _1096 = 0.0;
    }
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1125 = fma(_751, cbModelParam._m0[30u].z, fma(_747, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _743));
        float _1129 = fma(_751, cbModelParam._m0[31u].z, fma(_747, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _743));
        float _1133 = fma(_751, cbModelParam._m0[32u].z, fma(_747, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _743));
        float _1156 = _743 + _517;
        float _1157 = _747 + _518;
        float _1158 = _751 + _519;
        float _1168 = fma(_1158, cbModelParam._m0[30u].z, fma(_1157, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1156)) - _1125;
        float _1169 = fma(_1158, cbModelParam._m0[31u].z, fma(_1157, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1156)) - _1129;
        float _1170 = fma(_1158, cbModelParam._m0[32u].z, fma(_1157, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1156)) - _1133;
        float _1174 = inversesqrt(dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170)));
        float _1187 = ((_1174 * _1168) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1125 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1188 = ((_1174 * _1169) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1129 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1189 = ((_1174 * _1170) / cbModelParam._m0[35u].z) + ((((((_1133 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        float _1224 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1191.x + (-0.5));
        float _1226 = _1224 * (_1191.y + (-0.5));
        float _1227 = _1224 * (_1191.z + (-0.5));
        float _1234 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1198.x + (-0.5));
        float _1236 = _1234 * (_1198.y + (-0.5));
        float _1237 = _1234 * (_1198.z + (-0.5));
        float _1244 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1205.x + (-0.5));
        float _1246 = _1244 * (_1205.y + (-0.5));
        float _1247 = _1244 * (_1205.z + (-0.5));
        float _1254 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1212.x + (-0.5));
        float _1256 = _1254 * (_1212.y + (-0.5));
        float _1257 = _1254 * (_1212.z + (-0.5));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1260 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1261 = _1225 * 0.5;
        float _1262 = _1235 * 0.5;
        float _1263 = _1245 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1277 = (dot(vec3(_517, _518, _519), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _4088 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1286 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _4099 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1288 = _1287 * 2.0;
        float _1292 = (1.0 - _1287) / (_1287 + 1.0);
        float _4110 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1302 = ((((1.0 - _1293) * (_1288 + 2.0)) * exp2(log2(isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_1288 + 1.0))) + _1293) * _1258;
        float _1303 = _1226 * 0.5;
        float _1304 = _1236 * 0.5;
        float _1305 = _1246 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1319 = (dot(vec3(_517, _518, _519), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _4121 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1328 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1259 + 9.9999997473787516355514526367188e-06);
        float _4132 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _4143 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_1330 + 1.0))) + _1335) * _1259;
        float _1345 = _1227 * 0.5;
        float _1346 = _1237 * 0.5;
        float _1347 = _1247 * 0.5;
        float _1348 = dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347));
        float _1353 = (_1348 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1348);
        float _1361 = (dot(vec3(_517, _518, _519), vec3(_1353 * _1345, _1353 * _1346, _1353 * _1347)) + 1.0) * 0.5;
        float _4154 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1370 = sqrt(((_1346 * _1346) + (_1345 * _1345)) + (_1347 * _1347)) / (_1260 + 9.9999997473787516355514526367188e-06);
        float _4165 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1372 = _1371 * 2.0;
        float _1376 = (1.0 - _1371) / (_1371 + 1.0);
        float _4176 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1386 = ((((1.0 - _1377) * (_1372 + 2.0)) * exp2(log2(isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_1372 + 1.0))) + _1377) * _1260;
        _1394 = _1227;
        _1395 = _1226;
        _1396 = _1225;
        _1397 = _1237;
        _1398 = _1236;
        _1399 = _1235;
        _1400 = _1247;
        _1401 = _1246;
        _1402 = _1245;
        _1403 = _1260;
        _1404 = _1259;
        _1405 = _1258;
        _1406 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)));
        _1407 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
        _1408 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)));
    }
    else
    {
        _1394 = _1082;
        _1395 = _1082;
        _1396 = _1082;
        _1397 = _1082;
        _1398 = _1082;
        _1399 = _1082;
        _1400 = _1082;
        _1401 = _1082;
        _1402 = _1082;
        _1403 = _1082;
        _1404 = _1082;
        _1405 = _1082;
        _1406 = 0.0;
        _1407 = 0.0;
        _1408 = 0.0;
    }
    float _1418 = (cbModelParam._m0[1u].x * (_1406 - _1094)) + _1094;
    float _1419 = (cbModelParam._m0[1u].x * (_1407 - _1095)) + _1095;
    float _1420 = (cbModelParam._m0[1u].x * (_1408 - _1096)) + _1096;
    float _1441 = fma(_1420, cbSceneParam._m0[89u].z, fma(_1419, cbSceneParam._m0[89u].y, _1418 * cbSceneParam._m0[89u].x));
    float _1444 = fma(_1420, cbSceneParam._m0[90u].z, fma(_1419, cbSceneParam._m0[90u].y, _1418 * cbSceneParam._m0[90u].x));
    float _1447 = fma(_1420, cbSceneParam._m0[91u].z, fma(_1419, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1418));
    float _1462 = _690 * 0.5;
    float _1463 = _691 * 0.5;
    float _1464 = _692 * 0.5;
    float _1465 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1396, _1399, _1402, _1405));
    float _1468 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1395, _1398, _1401, _1404));
    float _1471 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1394, _1397, _1400, _1403));
    float _1505;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1478 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1081, _1085, _1088, _1091));
        float _1482 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1083, _1086, _1089, _1092));
        float _1486 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1084, _1087, _1090, _1093));
        float _1493 = dot(vec4(cbModelParam._m0[39u]), vec4(_1462, _1463, _1464, 1.0));
        _1505 = dot(vec3(isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)), isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)), isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1493) ? 0.0 : (isnan(0.0) ? _1493 : max(0.0, _1493))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1505 = 1.0;
    }
    float _1516;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1507 = dot(vec4(cbModelParam._m0[40u]), vec4(_1462, _1463, _1464, 1.0));
        _1516 = dot(vec3(isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)), isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)), isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1507) ? 0.0 : (isnan(0.0) ? _1507 : max(0.0, _1507))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1516 = 1.0;
    }
    float _1520 = (_1516 * cbModelParam._m0[1u].x) + (_1505 * (1.0 - cbModelParam._m0[1u].x));
    float _1530 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _520);
    float _1531 = isnan(_1530) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1530 : min(cbModelParam._m0[25u].z, _1530));
    float _1611;
    float _1613;
    float _1615;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1578 = fma(_751, cbModelParam._m0[13u].z, fma(_747, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _743)) + cbModelParam._m0[13u].w;
        float _1582 = fma(_751, cbModelParam._m0[14u].z, fma(_747, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _743)) + cbModelParam._m0[14u].w;
        float _1586 = fma(_751, cbModelParam._m0[15u].z, fma(_747, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _743)) + cbModelParam._m0[15u].w;
        float _1589 = fma(_692, cbModelParam._m0[13u].z, fma(_691, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _690));
        float _1592 = fma(_692, cbModelParam._m0[14u].z, fma(_691, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _690));
        float _1595 = fma(_692, cbModelParam._m0[15u].z, fma(_691, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _690));
        float _1623;
        if (_1589 > 0.0)
        {
            _1623 = abs((1.0 - _1578) / _1589);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1589 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1578 + 1.0) / _1589);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1623 = frontier_phi_17_15_ladder;
        }
        float _1794;
        if (_1592 > 0.0)
        {
            _1794 = abs((1.0 - _1582) / _1592);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1592 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1582 + 1.0) / _1592);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1794 = frontier_phi_26_22_ladder;
        }
        float _2090;
        if (_1595 > 0.0)
        {
            _2090 = abs((1.0 - _1586) / _1595);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1595 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1586 + 1.0) / _1595);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2090 = frontier_phi_38_33_ladder;
        }
        float _2092 = isnan(_1794) ? _1623 : (isnan(_1623) ? _1794 : min(_1623, _1794));
        float _2093 = isnan(_2090) ? _2092 : (isnan(_2092) ? _2090 : min(_2092, _2090));
        float _2097 = (_2093 * _1589) + _1578;
        float _2098 = (_2093 * _1592) + _1582;
        float _2099 = (_2093 * _1595) + _1586;
        float _2100 = _2093 * 9.9999997473787516355514526367188e-05;
        float _2102 = (-1.0) - _2100;
        float _2104 = _2100 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2099 > _2104) || ((_2099 < _2102) || ((_2098 > _2104) || ((_2098 < _2102) || ((_2097 < _2102) || (_2097 > _2104))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2244 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2099, cbModelParam._m0[9u].z, fma(_2098, cbModelParam._m0[9u].y, _2097 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2099, cbModelParam._m0[10u].z, fma(_2098, cbModelParam._m0[10u].y, _2097 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2099, cbModelParam._m0[11u].z, fma(_2098, cbModelParam._m0[11u].y, _2097 * cbModelParam._m0[11u].x))), _1531);
            frontier_phi_16_38_ladder = _2244.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2244.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2244.x * cbModelParam._m0[1u].y;
        }
        _1611 = frontier_phi_16_38_ladder_2;
        _1613 = frontier_phi_16_38_ladder_1;
        _1615 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1599 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_690, _691, _692), _1531);
        _1611 = _1599.x * cbModelParam._m0[1u].y;
        _1613 = _1599.y * cbModelParam._m0[1u].y;
        _1615 = _1599.z * cbModelParam._m0[1u].y;
    }
    float _1619 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _520);
    float _1620 = isnan(_1619) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1619 : min(cbModelParam._m0[25u].w, _1619));
    float _1711;
    float _1713;
    float _1715;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1675 = fma(_751, cbModelParam._m0[21u].z, fma(_747, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _743)) + cbModelParam._m0[21u].w;
        float _1679 = fma(_751, cbModelParam._m0[22u].z, fma(_747, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _743)) + cbModelParam._m0[22u].w;
        float _1683 = fma(_751, cbModelParam._m0[23u].z, fma(_747, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _743)) + cbModelParam._m0[23u].w;
        float _1686 = fma(_692, cbModelParam._m0[21u].z, fma(_691, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _690));
        float _1689 = fma(_692, cbModelParam._m0[22u].z, fma(_691, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _690));
        float _1692 = fma(_692, cbModelParam._m0[23u].z, fma(_691, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _690));
        float _1799;
        if (_1686 > 0.0)
        {
            _1799 = abs((1.0 - _1675) / _1686);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1686 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1675 + 1.0) / _1686);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1799 = frontier_phi_28_24_ladder;
        }
        float _2117;
        if (_1689 > 0.0)
        {
            _2117 = abs((1.0 - _1679) / _1689);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1689 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1679 + 1.0) / _1689);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2117 = frontier_phi_40_35_ladder;
        }
        float _2444;
        if (_1692 > 0.0)
        {
            _2444 = abs((1.0 - _1683) / _1692);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1692 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1683 + 1.0) / _1692);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2444 = frontier_phi_50_47_ladder;
        }
        float _2446 = isnan(_2117) ? _1799 : (isnan(_1799) ? _2117 : min(_1799, _2117));
        float _2447 = isnan(_2444) ? _2446 : (isnan(_2446) ? _2444 : min(_2446, _2444));
        float _2451 = (_2447 * _1686) + _1675;
        float _2452 = (_2447 * _1689) + _1679;
        float _2453 = (_2447 * _1692) + _1683;
        float _2454 = _2447 * 9.9999997473787516355514526367188e-05;
        float _2455 = (-1.0) - _2454;
        float _2457 = _2454 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2453 > _2457) || ((_2453 < _2455) || ((_2452 > _2457) || ((_2452 < _2455) || ((_2451 < _2455) || (_2451 > _2457))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2571 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2453, cbModelParam._m0[17u].z, fma(_2452, cbModelParam._m0[17u].y, _2451 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2453, cbModelParam._m0[18u].z, fma(_2452, cbModelParam._m0[18u].y, _2451 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2453, cbModelParam._m0[19u].z, fma(_2452, cbModelParam._m0[19u].y, _2451 * cbModelParam._m0[19u].x))), _1620);
            frontier_phi_25_50_ladder = _2571.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2571.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2571.x * cbModelParam._m0[1u].z;
        }
        _1711 = frontier_phi_25_50_ladder_2;
        _1713 = frontier_phi_25_50_ladder_1;
        _1715 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1695 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_690, _691, _692), _1620);
        _1711 = _1695.x * cbModelParam._m0[1u].z;
        _1713 = _1695.y * cbModelParam._m0[1u].z;
        _1715 = _1695.z * cbModelParam._m0[1u].z;
    }
    float _1727 = ((((1.0 - _711) * ((_698 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_711 * _698)) * _682;
    float _1728 = _1727 * ((cbModelParam._m0[1u].w * (_1711 - _1611)) + _1611);
    float _1729 = _1727 * ((cbModelParam._m0[1u].w * (_1713 - _1613)) + _1613);
    float _1730 = _1727 * ((cbModelParam._m0[1u].w * (_1715 - _1615)) + _1615);
    float _1733 = fma(_1730, cbSceneParam._m0[89u].z, fma(_1729, cbSceneParam._m0[89u].y, _1728 * cbSceneParam._m0[89u].x));
    float _1736 = fma(_1730, cbSceneParam._m0[90u].z, fma(_1729, cbSceneParam._m0[90u].y, _1728 * cbSceneParam._m0[90u].x));
    float _1739 = fma(_1730, cbSceneParam._m0[91u].z, fma(_1729, cbSceneParam._m0[91u].y, _1728 * cbSceneParam._m0[91u].x));
    float _1773 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1777 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1781 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1785 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1786 = _1773 / _1785;
    float _1787 = _1777 / _1785;
    float _1788 = _1781 / _1785;
    float _1935;
    float _1936;
    float _1937;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1815 = ((uint(_1788 > cbSceneParam._m0[59u].y) + uint(_1788 > cbSceneParam._m0[59u].x)) + uint(_1788 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1816 = _1815 + 43u;
        uint _1824 = _1815 + 44u;
        uint _1832 = _1815 + 45u;
        uint _1840 = _1815 + 46u;
        float _1851 = fma(_1785, cbSceneParam._m0[_1816].w, fma(_1781, cbSceneParam._m0[_1816].z, fma(_1777, cbSceneParam._m0[_1816].y, _1773 * cbSceneParam._m0[_1816].x)));
        float _1855 = fma(_1785, cbSceneParam._m0[_1824].w, fma(_1781, cbSceneParam._m0[_1824].z, fma(_1777, cbSceneParam._m0[_1824].y, _1773 * cbSceneParam._m0[_1824].x)));
        float _1863 = fma(_1785, cbSceneParam._m0[_1840].w, fma(_1781, cbSceneParam._m0[_1840].z, fma(_1777, cbSceneParam._m0[_1840].y, _1773 * cbSceneParam._m0[_1840].x)));
        float _1868 = cbSceneParam._m0[33u].z * _1863;
        float _1870 = cbSceneParam._m0[33u].w * _1863;
        float _1873 = fma(_1785, cbSceneParam._m0[_1832].w, fma(_1781, cbSceneParam._m0[_1832].z, fma(_1777, cbSceneParam._m0[_1832].y, _1773 * cbSceneParam._m0[_1832].x))) / _1863;
        float _1921 = (cbSceneParam._m0[33u].x - sqrt(((_1787 * _1787) + (_1786 * _1786)) + (_1788 * _1788))) * cbSceneParam._m0[33u].y;
        float _4302 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
        float _1928 = (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1868 + _1851) / _1863, (_1870 + _1855) / _1863), _1873), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1870 + _1851) / _1863, (_1855 - _1868) / _1863), _1873), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1851 - _1868) / _1863, (_1855 - _1870) / _1863), _1873), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1851 - _1870) / _1863, (_1868 + _1855) / _1863), _1873), 0.0)).x), vec4(0.25)));
        _1935 = 1.0 - (_1928 * cbSceneParam._m0[34u].x);
        _1936 = 1.0 - (_1928 * cbSceneParam._m0[34u].y);
        _1937 = 1.0 - (_1928 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1935 = 1.0;
        _1936 = 1.0;
        _1937 = 1.0;
    }
    float _2001;
    float _2003;
    float _2005;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1989 = fma(_1785, cbSceneParam._m0[63u].w, fma(_1781, cbSceneParam._m0[63u].z, fma(_1777, cbSceneParam._m0[63u].y, _1773 * cbSceneParam._m0[63u].x)));
        float _1990 = fma(_1785, cbSceneParam._m0[60u].w, fma(_1781, cbSceneParam._m0[60u].z, fma(_1777, cbSceneParam._m0[60u].y, _1773 * cbSceneParam._m0[60u].x))) / _1989;
        float _1991 = fma(_1785, cbSceneParam._m0[61u].w, fma(_1781, cbSceneParam._m0[61u].z, fma(_1777, cbSceneParam._m0[61u].y, _1773 * cbSceneParam._m0[61u].x))) / _1989;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1990 >= cbSceneParam._m0[64u].x) && (_1991 >= cbSceneParam._m0[64u].y)) && (_1990 <= cbSceneParam._m0[64u].z)) && (_1991 <= cbSceneParam._m0[64u].w))
        {
            float _2130 = fma(_1785, cbSceneParam._m0[62u].w, fma(_1781, cbSceneParam._m0[62u].z, fma(_1777, cbSceneParam._m0[62u].y, _1773 * cbSceneParam._m0[62u].x))) / _1989;
            float _2134 = isnan(cbSceneParam._m0[41u].w) ? _2130 : (isnan(_2130) ? cbSceneParam._m0[41u].w : max(_2130, cbSceneParam._m0[41u].w));
            float _2177 = (cbSceneParam._m0[33u].x - sqrt(((_1787 * _1787) + (_1786 * _1786)) + (_1788 * _1788))) * cbSceneParam._m0[33u].y;
            float _4318 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
            float _2184 = (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1990, cbSceneParam._m0[33u].w + _1991), _2134), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1990, _1991 - cbSceneParam._m0[33u].z), _2134), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1990 - cbSceneParam._m0[33u].z, _1991 - cbSceneParam._m0[33u].w), _2134), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1990 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1991), _2134), 0.0)).x), vec4(0.25)));
            float _2188 = 1.0 - (_2184 * cbSceneParam._m0[34u].x);
            float _2189 = 1.0 - (_2184 * cbSceneParam._m0[34u].y);
            float _2190 = 1.0 - (_2184 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2190) ? _1937 : (isnan(_1937) ? _2190 : min(_1937, _2190));
            frontier_phi_37_36_ladder_1 = isnan(_2189) ? _1936 : (isnan(_1936) ? _2189 : min(_1936, _2189));
            frontier_phi_37_36_ladder_2 = isnan(_2188) ? _1935 : (isnan(_1935) ? _2188 : min(_1935, _2188));
        }
        else
        {
            frontier_phi_37_36_ladder = _1937;
            frontier_phi_37_36_ladder_1 = _1936;
            frontier_phi_37_36_ladder_2 = _1935;
        }
        _2001 = frontier_phi_37_36_ladder_2;
        _2003 = frontier_phi_37_36_ladder_1;
        _2005 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2001 = _1935;
        _2003 = _1936;
        _2005 = _1937;
    }
    uvec4 _2010 = floatBitsToUint(cbInstanceData._m0[_657 + 5u]);
    uint _2012 = _2010.x * 14u;
    uint _2013 = _2012 + 13u;
    float _2020 = _682 + (-1.0);
    float _2025 = (cbLight._m0[_2013].x * _2020) + 1.0;
    float _2026 = (cbLight._m0[_2013].y * _2020) + 1.0;
    float _2027 = (cbLight._m0[_2013].z * _2020) + 1.0;
    float _2028 = (cbLight._m0[_2013].w * _2020) + 1.0;
    uint _2029 = _2012 + 5u;
    float _2035 = isnan(1.0) ? _2026 : (isnan(_2026) ? 1.0 : min(_2026, 1.0));
    uint _2039 = _2012 + 4u;
    float _2049 = isnan(1.0) ? _2025 : (isnan(_2025) ? 1.0 : min(_2025, 1.0));
    uint _2053 = _2012 | 1u;
    float _2064 = dot(vec3(cbLight._m0[_2012].xyz), vec3(_517, _518, _519));
    float _2067 = dot(vec3(cbLight._m0[_2053].xyz), vec3(_517, _518, _519));
    float _4354 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _4365 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2072 = (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * 0.3183098733425140380859375;
    float _2074 = (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * 0.3183098733425140380859375;
    float _2081 = ((cbLight._m0[_2029].x * _2035) * _2074) + (((cbLight._m0[_2039].x * _2001) * _2049) * _2072);
    float _2082 = ((_2035 * cbLight._m0[_2029].y) * _2074) + (((cbLight._m0[_2039].y * _2003) * _2049) * _2072);
    float _2083 = ((_2035 * cbLight._m0[_2029].z) * _2074) + (((cbLight._m0[_2039].z * _2005) * _2049) * _2072);
    uvec4 _2087 = floatBitsToUint(cbLight._m0[_2012 + 12u]);
    bool _2089 = _2087.x == 0u;
    float _2191;
    float _2193;
    float _2195;
    if (_2089)
    {
        _2191 = _2081;
        _2193 = _2082;
        _2195 = _2083;
    }
    else
    {
        uint _2199 = _2012 + 6u;
        float _2215 = (dot(vec3(cbLight._m0[_2012 + 2u].xyz), vec3(_517, _518, _519)) * 0.5) + 0.5;
        float _2216 = _2215 * _2215;
        float _4376 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2217 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _2218 = isnan(1.0) ? _2027 : (isnan(_2027) ? 1.0 : min(_2027, 1.0));
        _2191 = (((cbLight._m0[_2199].x * 0.3183098733425140380859375) * _2217) * _2218) + _2081;
        _2193 = (((cbLight._m0[_2199].y * 0.3183098733425140380859375) * _2217) * _2218) + _2082;
        _2195 = (((cbLight._m0[_2199].z * 0.3183098733425140380859375) * _2217) * _2218) + _2083;
    }
    bool _2198 = _2087.y == 0u;
    float _2253;
    float _2255;
    float _2257;
    if (_2198)
    {
        _2253 = _2191;
        _2255 = _2193;
        _2257 = _2195;
    }
    else
    {
        uint _2415 = _2012 + 7u;
        float _2431 = (dot(vec3(cbLight._m0[_2012 + 3u].xyz), vec3(_517, _518, _519)) * 0.5) + 0.5;
        float _2432 = _2431 * _2431;
        float _4392 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2433 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _2434 = isnan(1.0) ? _2028 : (isnan(_2028) ? 1.0 : min(_2028, 1.0));
        _2253 = (((cbLight._m0[_2415].x * 0.3183098733425140380859375) * _2433) * _2434) + _2191;
        _2255 = (((cbLight._m0[_2415].y * 0.3183098733425140380859375) * _2433) * _2434) + _2193;
        _2257 = (((cbLight._m0[_2415].z * 0.3183098733425140380859375) * _2433) * _2434) + _2195;
    }
    uint _2260 = _2012 + 8u;
    float _2273 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2012].w)) * _520) * 0.949999988079071044921875);
    float _2274 = _2273 * _2273;
    float _2275 = cbLight._m0[_2012].x + _596;
    float _2276 = cbLight._m0[_2012].y + _597;
    float _2277 = cbLight._m0[_2012].z + _598;
    float _2281 = inversesqrt(dot(vec3(_2275, _2276, _2277), vec3(_2275, _2276, _2277)));
    float _2282 = _2281 * _2275;
    float _2283 = _2281 * _2276;
    float _2284 = _2281 * _2277;
    float _2285 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_2012].xyz));
    float _4408 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2288 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
    float _4419 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _2289 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
    float _2290 = dot(vec3(_517, _518, _519), vec3(_2282, _2283, _2284));
    float _4430 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2293 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
    float _2294 = dot(vec3(cbLight._m0[_2012].xyz), vec3(_2282, _2283, _2284));
    float _4441 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
    float _2298 = _2274 * _2274;
    float _2302 = ((_2293 * _2293) * (_2298 + (-1.0))) + 1.0;
    float _2313 = (exp2(log2(1.0 - (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2314 = 1.0 - _2274;
    float _2325 = (0.5 / (((_2289 * ((_2288 * _2314) + _2274)) + 9.9999999392252902907785028219223e-09) + (((_2289 * _2314) + _2274) * _2288))) * _2288;
    float _4452 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2327 = (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * (_2298 / ((_2302 * _2302) * 3.141590118408203125));
    uint _2341 = _2012 + 9u;
    float _2352 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2053].w)) * _520) * 0.949999988079071044921875);
    float _2353 = _2352 * _2352;
    float _2354 = cbLight._m0[_2053].x + _596;
    float _2355 = cbLight._m0[_2053].y + _597;
    float _2356 = cbLight._m0[_2053].z + _598;
    float _2360 = inversesqrt(dot(vec3(_2354, _2355, _2356), vec3(_2354, _2355, _2356)));
    float _2361 = _2360 * _2354;
    float _2362 = _2360 * _2355;
    float _2363 = _2360 * _2356;
    float _2364 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_2053].xyz));
    float _4463 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2367 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
    float _2368 = dot(vec3(_517, _518, _519), vec3(_2361, _2362, _2363));
    float _4474 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2371 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
    float _2372 = dot(vec3(cbLight._m0[_2053].xyz), vec3(_2361, _2362, _2363));
    float _4485 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
    float _2376 = _2353 * _2353;
    float _2380 = ((_2371 * _2371) * (_2376 + (-1.0))) + 1.0;
    float _2389 = (exp2(log2(1.0 - (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2390 = 1.0 - _2353;
    float _2400 = (0.5 / (((_2289 * ((_2367 * _2390) + _2353)) + 9.9999999392252902907785028219223e-09) + (((_2289 * _2390) + _2353) * _2367))) * _2367;
    float _4496 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2402 = (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * (_2376 / ((_2380 * _2380) * 3.141590118408203125));
    float _2412 = (((_2389 * cbLight._m0[_2341].x) * _2402) * _2035) + ((((cbLight._m0[_2260].x * _2001) * _2313) * _2327) * _2049);
    float _2413 = (((_2389 * cbLight._m0[_2341].y) * _2402) * _2035) + ((((cbLight._m0[_2260].y * _2003) * _2313) * _2327) * _2049);
    float _2414 = (((_2389 * cbLight._m0[_2341].z) * _2402) * _2035) + ((((cbLight._m0[_2260].z * _2005) * _2313) * _2327) * _2049);
    float _2470;
    float _2472;
    float _2474;
    if (_2089)
    {
        _2470 = _2412;
        _2472 = _2413;
        _2474 = _2414;
    }
    else
    {
        uint _2476 = _2012 + 2u;
        uint _2480 = _2012 + 10u;
        float _2494 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2476].w)) * _520) * 0.949999988079071044921875);
        float _2495 = _2494 * _2494;
        float _2496 = cbLight._m0[_2476].x + _596;
        float _2497 = cbLight._m0[_2476].y + _597;
        float _2498 = cbLight._m0[_2476].z + _598;
        float _2502 = inversesqrt(dot(vec3(_2496, _2497, _2498), vec3(_2496, _2497, _2498)));
        float _2503 = _2502 * _2496;
        float _2504 = _2502 * _2497;
        float _2505 = _2502 * _2498;
        float _2506 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_2476].xyz));
        float _4507 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2509 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
        float _2510 = dot(vec3(_517, _518, _519), vec3(_2503, _2504, _2505));
        float _4518 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
        float _2513 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
        float _2514 = dot(vec3(cbLight._m0[_2476].xyz), vec3(_2503, _2504, _2505));
        float _4529 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2518 = _2495 * _2495;
        float _2522 = ((_2513 * _2513) * (_2518 + (-1.0))) + 1.0;
        float _2531 = (exp2(log2(1.0 - (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2532 = 1.0 - _2495;
        float _2542 = (0.5 / (((_2289 * ((_2509 * _2532) + _2495)) + 9.9999999392252902907785028219223e-09) + (((_2289 * _2532) + _2495) * _2509))) * _2509;
        float _4540 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2544 = (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0))) * (_2518 / ((_2522 * _2522) * 3.141590118408203125));
        float _2545 = isnan(1.0) ? _2027 : (isnan(_2027) ? 1.0 : min(_2027, 1.0));
        _2470 = (((_2531 * cbLight._m0[_2480].x) * _2544) * _2545) + _2412;
        _2472 = (((_2531 * cbLight._m0[_2480].y) * _2544) * _2545) + _2413;
        _2474 = (((_2531 * cbLight._m0[_2480].z) * _2544) * _2545) + _2414;
    }
    float _2576;
    float _2578;
    float _2580;
    if (_2198)
    {
        _2576 = _2470;
        _2578 = _2472;
        _2580 = _2474;
    }
    else
    {
        uint _2587 = _2012 + 3u;
        uint _2591 = _2012 + 11u;
        float _2605 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2587].w)) * _520) * 0.949999988079071044921875);
        float _2606 = _2605 * _2605;
        float _2607 = cbLight._m0[_2587].x + _596;
        float _2608 = cbLight._m0[_2587].y + _597;
        float _2609 = cbLight._m0[_2587].z + _598;
        float _2613 = inversesqrt(dot(vec3(_2607, _2608, _2609), vec3(_2607, _2608, _2609)));
        float _2614 = _2613 * _2607;
        float _2615 = _2613 * _2608;
        float _2616 = _2613 * _2609;
        float _2617 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_2587].xyz));
        float _4556 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2620 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
        float _2621 = dot(vec3(_517, _518, _519), vec3(_2614, _2615, _2616));
        float _4567 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
        float _2624 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
        float _2625 = dot(vec3(cbLight._m0[_2587].xyz), vec3(_2614, _2615, _2616));
        float _4578 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
        float _2629 = _2606 * _2606;
        float _2633 = ((_2624 * _2624) * (_2629 + (-1.0))) + 1.0;
        float _2642 = (exp2(log2(1.0 - (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2643 = 1.0 - _2606;
        float _2653 = (0.5 / (((_2289 * ((_2620 * _2643) + _2606)) + 9.9999999392252902907785028219223e-09) + (((_2289 * _2643) + _2606) * _2620))) * _2620;
        float _4589 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        float _2655 = (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0))) * (_2629 / ((_2633 * _2633) * 3.141590118408203125));
        float _2656 = isnan(1.0) ? _2028 : (isnan(_2028) ? 1.0 : min(_2028, 1.0));
        _2576 = (((_2642 * cbLight._m0[_2591].x) * _2655) * _2656) + _2470;
        _2578 = (((_2642 * cbLight._m0[_2591].y) * _2655) * _2656) + _2472;
        _2580 = (((_2642 * cbLight._m0[_2591].z) * _2655) * _2656) + _2474;
    }
    float _2722;
    float _2724;
    float _2726;
    float _2728;
    float _2730;
    float _2732;
    if (_2010.y == 0u)
    {
        uvec4 _2677 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2678 = _2677.x;
        uint _2689 = uint((float(_2677.y) * floor(float(uint(cbSceneParam._m0[85u].y * _618) / _2678))) + floor(float(uint(cbSceneParam._m0[85u].x * _617) / _2678)));
        float _2699 = (log2(_1788 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2700 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
        uint _2703 = uint(isnan(14.0) ? _2700 : (isnan(_2700) ? 14.0 : min(_2700, 14.0)));
        uvec4 _2708 = texelFetch(g_lightClusterGridBuffer, int(((_2703 << 2u) + (_2689 << 6u)) >> 2u));
        uint _2709 = _2708.x;
        uint _2710 = _2677.z;
        float _2818;
        float _2820;
        float _2822;
        float _2824;
        float _2826;
        float _2828;
        if (((((1u << ((_2710 >> 4u) & 15u)) + 4294967295u) & _2709) == 0u) || ((_2710 & 240u) == 0u))
        {
            _2818 = 0.0;
            _2820 = 0.0;
            _2822 = 0.0;
            _2824 = 0.0;
            _2826 = 0.0;
            _2828 = 0.0;
        }
        else
        {
            float _2819;
            float _2821;
            float _2823;
            float _2825;
            float _2827;
            float _2829;
            float _2980 = 0.0;
            float _2981 = 0.0;
            float _2982 = 0.0;
            float _2983 = 0.0;
            float _2984 = 0.0;
            float _2985 = 0.0;
            uint _2986 = 0u;
            uint _2995;
            bool _2996;
            for (;;)
            {
                _2995 = texelFetch(g_lightClassification, int((((_2703 << 5u) + (_2689 << 9u)) + (_2986 << 2u)) >> 2u)).x;
                _2996 = _2995 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2996)
                {
                    frontier_phi_71_pred = _2985;
                    frontier_phi_71_pred_1 = _2984;
                    frontier_phi_71_pred_2 = _2983;
                    frontier_phi_71_pred_3 = _2982;
                    frontier_phi_71_pred_4 = _2981;
                    frontier_phi_71_pred_5 = _2980;
                }
                else
                {
                    float _3125;
                    float _3126;
                    float _3127;
                    float _3128;
                    float _3129;
                    float _3130;
                    uint _3131;
                    _3125 = _2980;
                    _3126 = _2981;
                    _3127 = _2982;
                    _3128 = _2983;
                    _3129 = _2984;
                    _3130 = _2985;
                    _3131 = _2995;
                    float _3052;
                    float _3053;
                    float _3054;
                    float _3055;
                    float _3056;
                    float _3057;
                    for (;;)
                    {
                        uint _3135 = uint(findLSB(_3131)) + (_2986 << 5u);
                        uint _3132 = (_3131 + 4294967295u) & _3131;
                        uint _3137 = _3135 * 48u;
                        vec4 _3151 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3137)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 3u)).x));
                        uint _3157 = (_3135 * 48u) + 4u;
                        vec4 _3170 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3157)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 3u)).x));
                        uint _3176 = (_3135 * 48u) + 8u;
                        vec3 _3187 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3176)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 2u)).x));
                        float _3191 = _3151.x - _1786;
                        float _3192 = _3151.y - _1787;
                        float _3193 = _3151.z - _1788;
                        float _3194 = dot(vec3(_3191, _3192, _3193), vec3(_3191, _3192, _3193));
                        float _3197 = inversesqrt(_3194);
                        float _3198 = _3197 * _3191;
                        float _3199 = _3197 * _3192;
                        float _3200 = _3197 * _3193;
                        float _3201 = dot(vec3(_638, _641, _644), vec3(_3198, _3199, _3200));
                        float _3206 = 1.0 - (_3194 * _3151.w);
                        float _4615 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                        float _3207 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
                        float _3208 = sqrt(_3194) * _3170.w;
                        float _3211 = 1.39999997615814208984375 / (_3208 + 1.39999997615814208984375);
                        float _3212 = _3211 * _3211;
                        float _3215 = ((1.0 - _3212) * _3201) + _3212;
                        float _3218 = _3208 * _3208;
                        float _3222 = ((isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0))) * _3207) / ((_3218 * 0.699999988079071044921875) + 1.0);
                        float _3226 = (-0.0) - _1786;
                        float _3227 = (-0.0) - _1787;
                        float _3228 = (-0.0) - _1788;
                        float _3232 = inversesqrt(dot(vec3(_3226, _3227, _3228), vec3(_3226, _3227, _3228)));
                        float _3233 = _3232 * _3226;
                        float _3234 = _3232 * _3227;
                        float _3235 = _3232 * _3228;
                        float _3242 = exp2(log2(1.0 / ((_3218 * 3.5) + 5.0)) * 0.25);
                        float _3243 = 1.0 - _698;
                        float _3250 = sqrt(1.0 - ((1.0 - (_3243 * _3243)) * (1.0 - (_3242 * _3242))));
                        float _3251 = _3250 * _3250;
                        float _3252 = _3251 * _3251;
                        float _3253 = _3233 + _3198;
                        float _3254 = _3234 + _3199;
                        float _3255 = _3235 + _3200;
                        float _3259 = inversesqrt(dot(vec3(_3253, _3254, _3255), vec3(_3253, _3254, _3255)));
                        float _3263 = dot(vec3(_638, _641, _644), vec3(_3233, _3234, _3235));
                        float _4631 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                        float _3266 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
                        float _3267 = dot(vec3(_638, _641, _644), vec3(_3259 * _3253, _3259 * _3254, _3259 * _3255));
                        float _4642 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                        float _3270 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                        float _3274 = ((_3270 * _3270) * (_3252 + (-1.0))) + 1.0;
                        float _3275 = _3211 * _3251;
                        float _3276 = _3275 * _3275;
                        float _3279 = ((1.0 - _3276) * _3201) + _3276;
                        float _4653 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                        float _3280 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
                        float _3281 = 1.0 - _3251;
                        float _3291 = (0.5 / (((_3280 * ((_3266 * _3281) + _3251)) + 9.9999999392252902907785028219223e-09) + (((_3280 * _3281) + _3251) * _3266))) * _3280;
                        float _4664 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                        float _3302 = (((_3252 * 3.1415927410125732421875) * (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0)))) / ((_3274 * _3274) * ((_3218 * 2.1991131305694580078125) + 3.141590118408203125))) * _3207;
                        _3055 = (_3222 * _3170.x) + _3128;
                        _3056 = (_3222 * _3170.y) + _3129;
                        _3057 = (_3222 * _3170.z) + _3130;
                        _3052 = (_3302 * _3187.x) + _3125;
                        _3053 = (_3302 * _3187.y) + _3126;
                        _3054 = (_3302 * _3187.z) + _3127;
                        if (_3132 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3125 = _3052;
                            _3126 = _3053;
                            _3127 = _3054;
                            _3128 = _3055;
                            _3129 = _3056;
                            _3130 = _3057;
                            _3131 = _3132;
                        }
                    }
                    frontier_phi_71_pred = _3057;
                    frontier_phi_71_pred_1 = _3056;
                    frontier_phi_71_pred_2 = _3055;
                    frontier_phi_71_pred_3 = _3054;
                    frontier_phi_71_pred_4 = _3053;
                    frontier_phi_71_pred_5 = _3052;
                }
                _2829 = frontier_phi_71_pred;
                _2827 = frontier_phi_71_pred_1;
                _2825 = frontier_phi_71_pred_2;
                _2823 = frontier_phi_71_pred_3;
                _2821 = frontier_phi_71_pred_4;
                _2819 = frontier_phi_71_pred_5;
                uint _2987 = _2986 + 1u;
                if (_2987 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2980 = _2819;
                    _2981 = _2821;
                    _2982 = _2823;
                    _2983 = _2825;
                    _2984 = _2827;
                    _2985 = _2829;
                    _2986 = _2987;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2818 = _2819;
            _2820 = _2821;
            _2822 = _2823;
            _2824 = _2825;
            _2826 = _2827;
            _2828 = _2829;
        }
        uvec4 _2832 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2833 = _2832.z;
        uint _2835 = (_2833 >> 8u) & 15u;
        float _2948;
        float _2950;
        float _2952;
        float _2954;
        float _2956;
        float _2958;
        if (((4294967295u << _2835) & _2709) == 0u)
        {
            _2948 = _2818;
            _2950 = _2820;
            _2952 = _2822;
            _2954 = _2824;
            _2956 = _2826;
            _2958 = _2828;
        }
        else
        {
            float _2973 = inversesqrt(dot(vec3(_1786, _1787, _1788), vec3(_1786, _1787, _1788)));
            float _2974 = _2973 * _1786;
            float _2975 = _2973 * _1787;
            float _2976 = _2973 * _1788;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2835 < ((_2833 >> 12u) & 15u))
            {
                float _2949;
                float _2951;
                float _2953;
                float _2955;
                float _2957;
                float _2959;
                float _3108 = _2818;
                float _3109 = _2820;
                float _3110 = _2822;
                float _3111 = _2824;
                float _3112 = _2826;
                float _3113 = _2828;
                uint _3114 = _2835;
                uint _3123;
                bool _3124;
                for (;;)
                {
                    _3123 = texelFetch(g_lightClassification, int((((_2703 << 5u) + (_2689 << 9u)) + (_3114 << 2u)) >> 2u)).x;
                    _3124 = _3123 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3124)
                    {
                        frontier_phi_82_pred = _3113;
                        frontier_phi_82_pred_1 = _3112;
                        frontier_phi_82_pred_2 = _3111;
                        frontier_phi_82_pred_3 = _3110;
                        frontier_phi_82_pred_4 = _3109;
                        frontier_phi_82_pred_5 = _3108;
                    }
                    else
                    {
                        float _3316;
                        float _3317;
                        float _3318;
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3611;
                        float _3612;
                        float _3613;
                        float _3614;
                        float _3615;
                        float _3616;
                        float _3329 = _3108;
                        float _3330 = _3109;
                        float _3331 = _3110;
                        float _3332 = _3111;
                        float _3333 = _3112;
                        float _3334 = _3113;
                        uint _3335 = _3123;
                        uint _3336;
                        vec4 _3361;
                        float _3362;
                        vec4 _3377;
                        vec3 _3389;
                        vec4 _3404;
                        vec4 _3420;
                        float _3467;
                        bool _3468;
                        for (;;)
                        {
                            uint _3346 = ((_3114 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3335));
                            _3336 = (_3335 + 4294967295u) & _3335;
                            uint _3348 = _3346 * 40u;
                            _3361 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 3u)).x));
                            _3362 = _3361.w;
                            uint _3364 = (_3346 * 40u) + 4u;
                            _3377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 3u)).x));
                            uint _3379 = (_3346 * 40u) + 8u;
                            _3389 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3379)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 2u)).x));
                            uint _3391 = (_3346 * 40u) + 16u;
                            _3404 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3391)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 3u)).x));
                            uint _3407 = (_3346 * 40u) + 20u;
                            _3420 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3407)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 3u)).x));
                            uint _3423 = (_3346 * 40u) + 24u;
                            vec4 _3436 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3423)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 3u)).x));
                            uint _3442 = (_3346 * 40u) + 28u;
                            vec4 _3455 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3442)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 3u)).x));
                            _3467 = fma(_1788, _3455.z, fma(_1787, _3455.y, _3455.x * _1786)) + _3455.w;
                            _3468 = !((fma(_1788, _3436.z, fma(_1787, _3436.y, _3436.x * _1786)) + _3436.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3468)
                            {
                                float _3495 = _3361.x - _1786;
                                float _3496 = _3361.y - _1787;
                                float _3497 = _3361.z - _1788;
                                float _3498 = dot(vec3(_3495, _3496, _3497), vec3(_3495, _3496, _3497));
                                float _3501 = inversesqrt(_3498);
                                float _3502 = _3501 * _3495;
                                float _3503 = _3501 * _3496;
                                float _3504 = _3501 * _3497;
                                float _3508 = 1.0 - (_3498 / (_3362 * _3362));
                                float _4675 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                                float _3509 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                                float _3513 = sqrt(_3498) * _3377.w;
                                float _3515 = 1.39999997615814208984375 / (_3513 + 1.39999997615814208984375);
                                float _3516 = _3515 * _3515;
                                float _3519 = ((1.0 - _3516) * dot(vec3(_3502, _3503, _3504), vec3(_638, _641, _644))) + _3516;
                                float _3522 = _3513 * _3513;
                                float _3526 = (fma(_1788, _3404.z, fma(_1787, _3404.y, _3404.x * _1786)) + _3404.w) / _3467;
                                float _3527 = (fma(_1788, _3420.z, fma(_1787, _3420.y, _3420.x * _1786)) + _3420.w) / _3467;
                                float _3531 = 1.0 - dot(vec2(_3526, _3527), vec2(_3526, _3527));
                                float _4691 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                                float _3532 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
                                float _3533 = _3532 * (((isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0))) * _3509) / ((_3522 * 0.699999988079071044921875) + 1.0));
                                float _3545 = exp2(log2(1.0 / ((_3522 * 3.5) + 5.0)) * 0.25);
                                float _3546 = 1.0 - _698;
                                float _3553 = sqrt(1.0 - ((1.0 - (_3546 * _3546)) * (1.0 - (_3545 * _3545))));
                                float _3554 = _3553 * _3553;
                                float _3555 = _3554 * _3554;
                                float _3556 = _3502 - _2974;
                                float _3557 = _3503 - _2975;
                                float _3558 = _3504 - _2976;
                                float _3562 = inversesqrt(dot(vec3(_3556, _3557, _3558), vec3(_3556, _3557, _3558)));
                                float _3566 = dot(vec3(_638, _641, _644), vec3((-0.0) - _2974, (-0.0) - _2975, (-0.0) - _2976));
                                float _4702 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                                float _3569 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
                                float _3570 = dot(vec3(_638, _641, _644), vec3(_3562 * _3556, _3562 * _3557, _3562 * _3558));
                                float _4713 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0));
                                float _3573 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
                                float _3577 = ((_3573 * _3573) * (_3555 + (-1.0))) + 1.0;
                                float _3578 = _3515 * _3554;
                                float _3579 = _3578 * _3578;
                                float _3585 = ((1.0 - _3579) * dot(vec3(_638, _641, _644), vec3(_3502, _3503, _3504))) + _3579;
                                float _4724 = isnan(0.0) ? _3585 : (isnan(_3585) ? 0.0 : max(_3585, 0.0));
                                float _3586 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
                                float _3587 = 1.0 - _3554;
                                float _3597 = (0.5 / (((_3586 * ((_3569 * _3587) + _3554)) + 9.9999999392252902907785028219223e-09) + (((_3586 * _3587) + _3554) * _3569))) * _3586;
                                float _4735 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                                float _3607 = (_3532 * _3509) * (((_3555 * 3.1415927410125732421875) * (isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0)))) / ((_3577 * _3577) * ((_3522 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3533 * _3377.z;
                                frontier_phi_88_pred_1 = _3533 * _3377.y;
                                frontier_phi_88_pred_2 = _3533 * _3377.x;
                                frontier_phi_88_pred_3 = _3607 * _3389.z;
                                frontier_phi_88_pred_4 = _3607 * _3389.y;
                                frontier_phi_88_pred_5 = _3607 * _3389.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3616 = frontier_phi_88_pred;
                            _3615 = frontier_phi_88_pred_1;
                            _3614 = frontier_phi_88_pred_2;
                            _3613 = frontier_phi_88_pred_3;
                            _3612 = frontier_phi_88_pred_4;
                            _3611 = frontier_phi_88_pred_5;
                            _3319 = _3614 + _3332;
                            _3320 = _3615 + _3333;
                            _3321 = _3616 + _3334;
                            _3316 = _3611 + _3329;
                            _3317 = _3612 + _3330;
                            _3318 = _3613 + _3331;
                            if (_3336 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3329 = _3316;
                                _3330 = _3317;
                                _3331 = _3318;
                                _3332 = _3319;
                                _3333 = _3320;
                                _3334 = _3321;
                                _3335 = _3336;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3321;
                        frontier_phi_82_pred_1 = _3320;
                        frontier_phi_82_pred_2 = _3319;
                        frontier_phi_82_pred_3 = _3318;
                        frontier_phi_82_pred_4 = _3317;
                        frontier_phi_82_pred_5 = _3316;
                    }
                    _2959 = frontier_phi_82_pred;
                    _2957 = frontier_phi_82_pred_1;
                    _2955 = frontier_phi_82_pred_2;
                    _2953 = frontier_phi_82_pred_3;
                    _2951 = frontier_phi_82_pred_4;
                    _2949 = frontier_phi_82_pred_5;
                    uint _3115 = _3114 + 1u;
                    if (_3115 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3108 = _2949;
                        _3109 = _2951;
                        _3110 = _2953;
                        _3111 = _2955;
                        _3112 = _2957;
                        _3113 = _2959;
                        _3114 = _3115;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2955;
                frontier_phi_63_64_ladder_1 = _2959;
                frontier_phi_63_64_ladder_2 = _2957;
                frontier_phi_63_64_ladder_3 = _2953;
                frontier_phi_63_64_ladder_4 = _2951;
                frontier_phi_63_64_ladder_5 = _2949;
            }
            else
            {
                frontier_phi_63_64_ladder = _2824;
                frontier_phi_63_64_ladder_1 = _2828;
                frontier_phi_63_64_ladder_2 = _2826;
                frontier_phi_63_64_ladder_3 = _2822;
                frontier_phi_63_64_ladder_4 = _2820;
                frontier_phi_63_64_ladder_5 = _2818;
            }
            _2948 = frontier_phi_63_64_ladder_5;
            _2950 = frontier_phi_63_64_ladder_4;
            _2952 = frontier_phi_63_64_ladder_3;
            _2954 = frontier_phi_63_64_ladder;
            _2956 = frontier_phi_63_64_ladder_2;
            _2958 = frontier_phi_63_64_ladder_1;
        }
        float _2963 = isnan(1.0) ? _682 : (isnan(_682) ? 1.0 : min(_682, 1.0));
        _2722 = (_2963 * _2954) + _2253;
        _2724 = (_2963 * _2956) + _2255;
        _2726 = (_2963 * _2958) + _2257;
        _2728 = ((_2948 * 0.039999999105930328369140625) * _2963) + _2576;
        _2730 = ((_2950 * 0.039999999105930328369140625) * _2963) + _2578;
        _2732 = ((_2952 * 0.039999999105930328369140625) * _2963) + _2580;
    }
    else
    {
        _2722 = _2253;
        _2724 = _2255;
        _2726 = _2257;
        _2728 = _2576;
        _2730 = _2578;
        _2732 = _2580;
    }
    uint _2738 = _658 + uint(cbMatDynParam._m0[0u].w);
    float _2744 = cbInstanceData._m0[_2738].x * (_436 - (_452 * _436));
    float _2745 = cbInstanceData._m0[_2738].y * (_437 - (_452 * _437));
    float _2746 = cbInstanceData._m0[_2738].z * (_438 - (_452 * _438));
    float _4751 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _4762 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _4773 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _2763 = (((isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0))) * (_2722 + ((isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))) * _682))) + ((_2728 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _1520)) * cbPerFrame._m0[3u].x)) + _2744;
    float _2765 = (_2745 + ((_2730 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _1520)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0))) * (_2724 + ((isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0))) * _682)));
    float _2767 = (_2746 + ((_2732 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _1520)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0))) * (_2726 + ((isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))) * _682)));
    float _2768 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
    float _2769 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
    float _2770 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
    float _2776 = cbMtdParam._m0[2u].x * _2744;
    float _2777 = cbMtdParam._m0[2u].y * _2745;
    float _2778 = cbMtdParam._m0[2u].z * _2746;
    float _4799 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2780 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
    uint _2781 = _657 + 6u;
    float _2789 = _617 / cbSceneParam._m0[86u].x;
    float _2790 = _618 / cbSceneParam._m0[86u].y;
    vec4 _2804 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2789, _2790, (log2((isnan(cbSceneParam._m0[77u].w) ? _539 : (isnan(_539) ? cbSceneParam._m0[77u].w : min(_539, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2806 = _2804.x;
    float _2807 = _2804.y;
    float _2808 = _2804.z;
    float _2809 = _2804.w;
    float _2881;
    float _2883;
    float _2885;
    float _2887;
    if (_539 > cbSceneParam._m0[78u].w)
    {
        float _2843 = isnan(_539) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _539 : min(cbSceneParam._m0[80u].w, _539));
        float _2844 = _2843 / _539;
        float _2855 = _2844 * _589;
        float _2856 = _590 * _2844;
        float _2857 = (-0.0) - _2856;
        float _2859 = _2844 * _591;
        float _2861 = (cbSceneParam._m0[77u].w * _2857) / _2843;
        float _2862 = _2861 + cbSceneParam._m0[79u].w;
        float _2863 = cbSceneParam._m0[79u].w - _2856;
        float _2869 = sqrt(((_2855 * _2855) + (_2856 * _2856)) + (_2859 * _2859));
        float _2872 = (1.0 - (cbSceneParam._m0[77u].w / _2843)) * _2869;
        float _2877 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2879 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3065;
        if (abs((_2857 - _2861) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3065 = ((((_2862 > 0.0) ? exp2(_2877 * _2862) : (2.0 - exp2(_2879 * _2862))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2872;
        }
        else
        {
            float _3009 = 1.0 / cbSceneParam._m0[80u].x;
            float _3010 = isnan(_2863) ? _2862 : (isnan(_2862) ? _2863 : max(_2862, _2863));
            float _3011 = isnan(_2863) ? _2862 : (isnan(_2862) ? _2863 : min(_2862, _2863));
            float _3020 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : min(_3010, 0.0));
            float _3021 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : min(_3011, 0.0));
            _3065 = ((abs(_2869 / _2857) * cbSceneParam._m0[80u].y) * ((((_3020 - _3021) * 2.0) - ((exp2(_2877 * (isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0)))) - exp2(_2877 * (isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0))))) * _3009)) - ((exp2(_2879 * _3020) - exp2(_2879 * _3021)) * _3009))) + (_2872 * cbSceneParam._m0[80u].z);
        }
        vec4 _3067 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2789, _2790, 1.0), 0.0);
        float _3076 = exp2((_3065 * (-1.44269502162933349609375)) * (1.0 - _3067.w));
        float _3077 = log2(_3076);
        float _3093 = log2(_2809);
        _2881 = (exp2(_3093 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3077 * cbSceneParam._m0[78u].x)) * _3067.x) / cbSceneParam._m0[78u].x)) + _2806;
        _2883 = (exp2(_3093 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3077 * cbSceneParam._m0[78u].y)) * _3067.y) / cbSceneParam._m0[78u].y)) + _2807;
        _2885 = (exp2(_3093 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3077 * cbSceneParam._m0[78u].z)) * _3067.z) / cbSceneParam._m0[78u].z)) + _2808;
        _2887 = _3076 * _2809;
    }
    else
    {
        _2881 = _2806;
        _2883 = _2807;
        _2885 = _2808;
        _2887 = _2809;
    }
    bool _3103;
    vec4 _2897;
    vec4 _2919;
    float _2921;
    float _2925;
    float _2926;
    float _2927;
    float _2930;
    float _2933;
    float _2936;
    float _2937;
    bool _2947;
    for (;;)
    {
        _2897 = cbMatDynParam._m0[0u];
        float _2899 = roundEven(_2897.y);
        bool _2900 = _2899 == 3.0;
        float _2901 = log2(_2887);
        float _2905 = exp2(_2901 * cbSceneParam._m0[78u].x);
        float _2906 = exp2(_2901 * cbSceneParam._m0[78u].y);
        float _2907 = exp2(_2901 * cbSceneParam._m0[78u].z);
        float _2908 = _2905 * _2768;
        float _2909 = _2906 * _2769;
        float _2910 = _2907 * _2770;
        float _2917 = _605 + (-0.5);
        _2919 = cbMtdParam._m0[1u];
        _2921 = _2919.y * _2917;
        float _2924 = (_2899 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2925 = _2924 * (_2900 ? _2908 : (_2908 + (cbSceneParam._m0[72u].w * _2881)));
        _2926 = _2924 * (_2900 ? _2909 : (_2909 + (cbSceneParam._m0[72u].w * _2883)));
        _2927 = _2924 * (_2900 ? _2910 : (_2910 + (cbSceneParam._m0[72u].w * _2885)));
        _2930 = ((_2776 * _2780) * _2905) * _2924;
        _2933 = ((_2777 * _2780) * _2906) * _2924;
        _2936 = ((_2778 * _2780) * _2907) * _2924;
        _2937 = _2917 * 0.999000012874603271484375;
        _2947 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2947)
        {
            if ((cbInstanceData._m0[_657 + 7u].x + _2937) < 0.5)
            {
                _3103 = true;
                break;
            }
        }
        uint _3044 = _658 + uint(_2897.w);
        if ((cbInstanceData._m0[_3044].w < 1.0) && ((cbInstanceData._m0[_3044].w + _2937) < 0.5))
        {
            _3103 = true;
            break;
        }
        if ((_2921 + 1.0) < _2919.x)
        {
            _3103 = true;
            break;
        }
        _3103 = false;
        break;
    }
    float _3307;
    if (_3103)
    {
        discard_state = true;
        _3307 = 0.0;
    }
    else
    {
        _3307 = cbInstanceData._m0[_2781].w;
    }
    SV_Target.x = _2925;
    SV_Target.y = _2926;
    SV_Target.z = _2927;
    SV_Target.w = _3307;
    SV_Target_1.x = _2930;
    SV_Target_1.y = _2933;
    SV_Target_1.z = _2936;
    SV_Target_1.w = cbInstanceData._m0[_2781].w;
    discard_exit();
}


