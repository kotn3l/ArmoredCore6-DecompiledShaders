#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1034;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _241 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _247 = _241.x * cbMtdParam._m0[9u].x;
    float _248 = _241.y * cbMtdParam._m0[9u].y;
    float _249 = _241.z * cbMtdParam._m0[9u].z;
    vec4 _269 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _290 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_269.x + 0.00999999977648258209228515625));
    float _292 = _290 * (cbMtdParam._m0[15u].x + 1.0);
    float _3382 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _293 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
    float _301 = ((((cbMtdParam._m0[12u].x - _247) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _293) + _247;
    float _302 = ((((cbMtdParam._m0[12u].y - _248) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _293) + _248;
    float _303 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _249)) * _293) + _249;
    vec4 _315 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _319 = _315.z;
    float _323 = (_315.x * 2.0) + (-1.0);
    float _325 = (_315.y * 2.0) + (-1.0);
    float _326 = dot(vec2(_323, _325), vec2(_323, _325));
    float _3393 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _331 = sqrt(1.0 - (isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0))));
    float _334 = _290 * (cbMtdParam._m0[14u].w + 1.0);
    float _3404 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _338 = ((cbMtdParam._m0[14u].y - _319) * (isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0)))) + _319;
    vec4 _366 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _381 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _426 = (TEXCOORD_6.x - ((cbMtdParam._m0[13u].w * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_5, SS_WrapLinear), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].x + 1.0);
    float _3415 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _427 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
    float _428 = ((_381.x + _366.x) * cbMtdParam._m0[11u].x) * _427;
    float _429 = ((_381.y + _366.y) * cbMtdParam._m0[11u].y) * _427;
    float _430 = ((_381.z + _366.z) * cbMtdParam._m0[11u].z) * _427;
    vec4 _442 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[9u].w));
    float _444 = _442.x;
    vec4 _469 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _475 = (_469.x * 2.0) + (-1.0);
    float _476 = (_469.y * 2.0) + (-1.0);
    float _477 = dot(vec2(_475, _476), vec2(_475, _476));
    float _3426 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _493 = (_293 * (((cbMtdParam._m0[13u].z * _323) - _323) + _475)) + _323;
    float _494 = (_293 * (((cbMtdParam._m0[13u].z * _325) - _325) + _476)) + _325;
    float _495 = (_293 * (sqrt(1.0 - (isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0)))) - _331)) + _331;
    float _498 = fma(_495, _212 * NORMAL.x, fma(_494, _219 * TANGENT.x, (_205 * _197) * _493));
    float _501 = fma(_495, _212 * NORMAL.y, fma(_494, _219 * TANGENT.y, (_205 * _198) * _493));
    float _504 = fma(_495, _212 * NORMAL.z, fma(_494, _219 * TANGENT.z, (_205 * _199) * _493));
    float _508 = inversesqrt(dot(vec3(_498, _501, _504), vec3(_498, _501, _504)));
    float _509 = _508 * _498;
    float _510 = _508 * _501;
    float _511 = _508 * _504;
    float _3437 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _512 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
    float _3448 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3459 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _3470 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _531 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _571 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _581 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _571);
    float _582 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _571);
    float _583 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _571);
    float _587 = inversesqrt(dot(vec3(_581, _582, _583), vec3(_581, _582, _583)));
    float _588 = _581 * _587;
    float _589 = _582 * _587;
    float _590 = _583 * _587;
    float _596 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _597 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _618 = fma(_511, cbSceneParam._m0[5u].z, fma(_510, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _509));
    float _621 = fma(_511, cbSceneParam._m0[6u].z, fma(_510, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _509));
    float _624 = fma(_511, cbSceneParam._m0[7u].z, fma(_510, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _509));
    uint _637 = uint(roundEven(NORMAL.w)) * 13u;
    uint _638 = _637 + 9u;
    uint _639 = _638 + uint(cbMatDynParam._m0[0u].w);
    float _645 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0)))) * cbInstanceData._m0[_639].x;
    float _646 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0)))) * cbInstanceData._m0[_639].y;
    float _647 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0)))) * cbInstanceData._m0[_639].z;
    float _3481 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _648 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
    float _3492 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _649 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
    float _3503 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _650 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
    vec4 _659 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _596, cbSceneParam._m0[86u].y * _597));
    float _662 = _659.x * TEXCOORD_3.w;
    float _663 = dot(vec3(_509, _510, _511), vec3(_588, _589, _590));
    float _666 = _663 * 2.0;
    float _670 = (_666 * _509) - _588;
    float _671 = (_666 * _510) - _589;
    float _672 = (_666 * _511) - _590;
    float _676 = abs(dot(vec3(_588, _589, _590), vec3(_509, _510, _511)));
    float _3514 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _678 = sqrt(_512);
    float _691 = exp2((_678 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_678 * 3.0));
    float _723 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _727 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _731 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1033;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _758 = fma(_731, cbModelParam._m0[26u].z, fma(_727, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _723));
        float _762 = fma(_731, cbModelParam._m0[27u].z, fma(_727, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _723));
        float _766 = fma(_731, cbModelParam._m0[28u].z, fma(_727, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _723));
        float _791 = _723 + _509;
        float _792 = _727 + _510;
        float _793 = _731 + _511;
        float _803 = fma(_793, cbModelParam._m0[26u].z, fma(_792, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _791)) - _758;
        float _804 = fma(_793, cbModelParam._m0[27u].z, fma(_792, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _791)) - _762;
        float _805 = fma(_793, cbModelParam._m0[28u].z, fma(_792, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _791)) - _766;
        float _809 = inversesqrt(dot(vec3(_803, _804, _805), vec3(_803, _804, _805)));
        float _822 = ((_809 * _803) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_758 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _823 = ((_809 * _804) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_762 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _824 = ((_809 * _805) / cbModelParam._m0[34u].z) + ((((((_766 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _827 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        vec4 _834 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        vec4 _841 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        vec4 _848 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        float _861 = exp2((_827.w + (-0.5)) * 20.0) * 2.0;
        float _862 = _861 * (_827.x + (-0.5));
        float _863 = _861 * (_827.y + (-0.5));
        float _864 = _861 * (_827.z + (-0.5));
        float _871 = exp2((_834.w + (-0.5)) * 20.0) * 2.0;
        float _872 = _871 * (_834.x + (-0.5));
        float _873 = _871 * (_834.y + (-0.5));
        float _874 = _871 * (_834.z + (-0.5));
        float _881 = exp2((_841.w + (-0.5)) * 20.0) * 2.0;
        float _882 = _881 * (_841.x + (-0.5));
        float _883 = _881 * (_841.y + (-0.5));
        float _884 = _881 * (_841.z + (-0.5));
        float _891 = exp2((_848.w + (-0.5)) * 20.0) * 2.0;
        float _892 = _891 * (_848.x + (-0.5));
        float _893 = _891 * (_848.y + (-0.5));
        float _894 = _891 * (_848.z + (-0.5));
        float _895 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _896 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _897 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _898 = _862 * 0.5;
        float _899 = _872 * 0.5;
        float _900 = _882 * 0.5;
        float _901 = dot(vec3(_898, _899, _900), vec3(_898, _899, _900));
        float _906 = (_901 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_901);
        float _915 = (dot(vec3(_509, _510, _511), vec3(_906 * _898, _906 * _899, _906 * _900)) + 1.0) * 0.5;
        float _3540 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _925 = sqrt(((_899 * _899) + (_898 * _898)) + (_900 * _900)) / (_895 + 9.9999997473787516355514526367188e-06);
        float _3551 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _926 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
        float _927 = _926 * 2.0;
        float _931 = (1.0 - _926) / (_926 + 1.0);
        float _3562 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _941 = ((((1.0 - _932) * (_927 + 2.0)) * exp2(log2(isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0))) * (_927 + 1.0))) + _932) * _895;
        float _942 = _863 * 0.5;
        float _943 = _873 * 0.5;
        float _944 = _883 * 0.5;
        float _945 = dot(vec3(_942, _943, _944), vec3(_942, _943, _944));
        float _950 = (_945 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_945);
        float _958 = (dot(vec3(_509, _510, _511), vec3(_950 * _942, _950 * _943, _950 * _944)) + 1.0) * 0.5;
        float _3573 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _967 = sqrt(((_943 * _943) + (_942 * _942)) + (_944 * _944)) / (_896 + 9.9999997473787516355514526367188e-06);
        float _3584 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
        float _969 = _968 * 2.0;
        float _973 = (1.0 - _968) / (_968 + 1.0);
        float _3595 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _983 = ((((1.0 - _974) * (_969 + 2.0)) * exp2(log2(isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) * (_969 + 1.0))) + _974) * _896;
        float _984 = _864 * 0.5;
        float _985 = _874 * 0.5;
        float _986 = _884 * 0.5;
        float _987 = dot(vec3(_984, _985, _986), vec3(_984, _985, _986));
        float _992 = (_987 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_987);
        float _1000 = (dot(vec3(_509, _510, _511), vec3(_992 * _984, _992 * _985, _992 * _986)) + 1.0) * 0.5;
        float _3606 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1009 = sqrt(((_985 * _985) + (_984 * _984)) + (_986 * _986)) / (_897 + 9.9999997473787516355514526367188e-06);
        float _3617 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _1011 = _1010 * 2.0;
        float _1015 = (1.0 - _1010) / (_1010 + 1.0);
        float _3628 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _1025 = ((((1.0 - _1016) * (_1011 + 2.0)) * exp2(log2(isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) * (_1011 + 1.0))) + _1016) * _897;
        _1033 = _864;
        _1035 = _863;
        _1036 = _862;
        _1037 = _874;
        _1038 = _873;
        _1039 = _872;
        _1040 = _884;
        _1041 = _883;
        _1042 = _882;
        _1043 = _897;
        _1044 = _896;
        _1045 = _895;
        _1046 = cbModelParam._m0[36u].z * (isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0)));
        _1047 = cbModelParam._m0[36u].z * (isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0)));
        _1048 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0)));
    }
    else
    {
        _1033 = _1034;
        _1035 = _1034;
        _1036 = _1034;
        _1037 = _1034;
        _1038 = _1034;
        _1039 = _1034;
        _1040 = _1034;
        _1041 = _1034;
        _1042 = _1034;
        _1043 = _1034;
        _1044 = _1034;
        _1045 = _1034;
        _1046 = 0.0;
        _1047 = 0.0;
        _1048 = 0.0;
    }
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1074 = fma(_731, cbModelParam._m0[30u].z, fma(_727, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _723));
        float _1078 = fma(_731, cbModelParam._m0[31u].z, fma(_727, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _723));
        float _1082 = fma(_731, cbModelParam._m0[32u].z, fma(_727, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _723));
        float _1105 = _723 + _509;
        float _1106 = _727 + _510;
        float _1107 = _731 + _511;
        float _1117 = fma(_1107, cbModelParam._m0[30u].z, fma(_1106, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1105)) - _1074;
        float _1118 = fma(_1107, cbModelParam._m0[31u].z, fma(_1106, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1105)) - _1078;
        float _1119 = fma(_1107, cbModelParam._m0[32u].z, fma(_1106, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1105)) - _1082;
        float _1123 = inversesqrt(dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119)));
        float _1136 = ((_1123 * _1117) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1074 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1137 = ((_1123 * _1118) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1078 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1138 = ((_1123 * _1119) / cbModelParam._m0[35u].z) + ((((((_1082 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        float _1173 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1140.x + (-0.5));
        float _1175 = _1173 * (_1140.y + (-0.5));
        float _1176 = _1173 * (_1140.z + (-0.5));
        float _1183 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1147.x + (-0.5));
        float _1185 = _1183 * (_1147.y + (-0.5));
        float _1186 = _1183 * (_1147.z + (-0.5));
        float _1193 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1154.x + (-0.5));
        float _1195 = _1193 * (_1154.y + (-0.5));
        float _1196 = _1193 * (_1154.z + (-0.5));
        float _1203 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1161.x + (-0.5));
        float _1205 = _1203 * (_1161.y + (-0.5));
        float _1206 = _1203 * (_1161.z + (-0.5));
        float _1207 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1208 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = _1174 * 0.5;
        float _1211 = _1184 * 0.5;
        float _1212 = _1194 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1226 = (dot(vec3(_509, _510, _511), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _3669 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1235 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1207 + 9.9999997473787516355514526367188e-06);
        float _3680 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _3691 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * (_1237 + 1.0))) + _1242) * _1207;
        float _1252 = _1175 * 0.5;
        float _1253 = _1185 * 0.5;
        float _1254 = _1195 * 0.5;
        float _1255 = dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254));
        float _1260 = (_1255 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1255);
        float _1268 = (dot(vec3(_509, _510, _511), vec3(_1260 * _1252, _1260 * _1253, _1260 * _1254)) + 1.0) * 0.5;
        float _3702 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1277 = sqrt(((_1253 * _1253) + (_1252 * _1252)) + (_1254 * _1254)) / (_1208 + 9.9999997473787516355514526367188e-06);
        float _3713 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1279 = _1278 * 2.0;
        float _1283 = (1.0 - _1278) / (_1278 + 1.0);
        float _3724 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1293 = ((((1.0 - _1284) * (_1279 + 2.0)) * exp2(log2(isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * (_1279 + 1.0))) + _1284) * _1208;
        float _1294 = _1176 * 0.5;
        float _1295 = _1186 * 0.5;
        float _1296 = _1196 * 0.5;
        float _1297 = dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296));
        float _1302 = (_1297 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1297);
        float _1310 = (dot(vec3(_509, _510, _511), vec3(_1302 * _1294, _1302 * _1295, _1302 * _1296)) + 1.0) * 0.5;
        float _3735 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1319 = sqrt(((_1295 * _1295) + (_1294 * _1294)) + (_1296 * _1296)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _3746 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1321 = _1320 * 2.0;
        float _1325 = (1.0 - _1320) / (_1320 + 1.0);
        float _3757 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1335 = ((((1.0 - _1326) * (_1321 + 2.0)) * exp2(log2(isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * (_1321 + 1.0))) + _1326) * _1209;
        _1343 = _1176;
        _1344 = _1175;
        _1345 = _1174;
        _1346 = _1186;
        _1347 = _1185;
        _1348 = _1184;
        _1349 = _1196;
        _1350 = _1195;
        _1351 = _1194;
        _1352 = _1209;
        _1353 = _1208;
        _1354 = _1207;
        _1355 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
        _1356 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)));
        _1357 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)));
    }
    else
    {
        _1343 = _1034;
        _1344 = _1034;
        _1345 = _1034;
        _1346 = _1034;
        _1347 = _1034;
        _1348 = _1034;
        _1349 = _1034;
        _1350 = _1034;
        _1351 = _1034;
        _1352 = _1034;
        _1353 = _1034;
        _1354 = _1034;
        _1355 = 0.0;
        _1356 = 0.0;
        _1357 = 0.0;
    }
    float _1367 = (cbModelParam._m0[1u].x * (_1355 - _1046)) + _1046;
    float _1368 = (cbModelParam._m0[1u].x * (_1356 - _1047)) + _1047;
    float _1369 = (cbModelParam._m0[1u].x * (_1357 - _1048)) + _1048;
    float _1390 = fma(_1369, cbSceneParam._m0[89u].z, fma(_1368, cbSceneParam._m0[89u].y, _1367 * cbSceneParam._m0[89u].x));
    float _1393 = fma(_1369, cbSceneParam._m0[90u].z, fma(_1368, cbSceneParam._m0[90u].y, _1367 * cbSceneParam._m0[90u].x));
    float _1396 = fma(_1369, cbSceneParam._m0[91u].z, fma(_1368, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1367));
    float _1411 = _670 * 0.5;
    float _1412 = _671 * 0.5;
    float _1413 = _672 * 0.5;
    float _1414 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1345, _1348, _1351, _1354));
    float _1417 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1344, _1347, _1350, _1353));
    float _1420 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1343, _1346, _1349, _1352));
    float _1454;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1427 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1033, _1037, _1040, _1043));
        float _1431 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1035, _1038, _1041, _1044));
        float _1435 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1036, _1039, _1042, _1045));
        float _1442 = dot(vec4(cbModelParam._m0[39u]), vec4(_1411, _1412, _1413, 1.0));
        _1454 = dot(vec3(isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)), isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)), isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1442) ? 0.0 : (isnan(0.0) ? _1442 : max(0.0, _1442))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1454 = 1.0;
    }
    float _1465;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1456 = dot(vec4(cbModelParam._m0[40u]), vec4(_1411, _1412, _1413, 1.0));
        _1465 = dot(vec3(isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)), isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)), isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1456) ? 0.0 : (isnan(0.0) ? _1456 : max(0.0, _1456))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1465 = 1.0;
    }
    float _1469 = (_1465 * cbModelParam._m0[1u].x) + (_1454 * (1.0 - cbModelParam._m0[1u].x));
    float _1479 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _512);
    float _1480 = isnan(_1479) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1479 : min(cbModelParam._m0[25u].z, _1479));
    float _1560;
    float _1562;
    float _1564;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1527 = fma(_731, cbModelParam._m0[13u].z, fma(_727, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _723)) + cbModelParam._m0[13u].w;
        float _1531 = fma(_731, cbModelParam._m0[14u].z, fma(_727, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _723)) + cbModelParam._m0[14u].w;
        float _1535 = fma(_731, cbModelParam._m0[15u].z, fma(_727, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _723)) + cbModelParam._m0[15u].w;
        float _1538 = fma(_672, cbModelParam._m0[13u].z, fma(_671, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _670));
        float _1541 = fma(_672, cbModelParam._m0[14u].z, fma(_671, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _670));
        float _1544 = fma(_672, cbModelParam._m0[15u].z, fma(_671, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _670));
        float _1572;
        if (_1538 > 0.0)
        {
            _1572 = abs((1.0 - _1527) / _1538);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1538 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1527 + 1.0) / _1538);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1572 = frontier_phi_14_12_ladder;
        }
        float _1775;
        if (_1541 > 0.0)
        {
            _1775 = abs((1.0 - _1531) / _1541);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1541 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1531 + 1.0) / _1541);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1775 = frontier_phi_23_19_ladder;
        }
        float _2018;
        if (_1544 > 0.0)
        {
            _2018 = abs((1.0 - _1535) / _1544);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1544 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1535 + 1.0) / _1544);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2018 = frontier_phi_35_30_ladder;
        }
        float _2020 = isnan(_1775) ? _1572 : (isnan(_1572) ? _1775 : min(_1572, _1775));
        float _2021 = isnan(_2018) ? _2020 : (isnan(_2020) ? _2018 : min(_2020, _2018));
        float _2025 = (_2021 * _1538) + _1527;
        float _2026 = (_2021 * _1541) + _1531;
        float _2027 = (_2021 * _1544) + _1535;
        float _2028 = _2021 * 9.9999997473787516355514526367188e-05;
        float _2030 = (-1.0) - _2028;
        float _2032 = _2028 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2027 > _2032) || ((_2027 < _2030) || ((_2026 > _2032) || ((_2026 < _2030) || ((_2025 < _2030) || (_2025 > _2032))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2151 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2027, cbModelParam._m0[9u].z, fma(_2026, cbModelParam._m0[9u].y, _2025 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2027, cbModelParam._m0[10u].z, fma(_2026, cbModelParam._m0[10u].y, _2025 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2027, cbModelParam._m0[11u].z, fma(_2026, cbModelParam._m0[11u].y, _2025 * cbModelParam._m0[11u].x))), _1480);
            frontier_phi_13_35_ladder = _2151.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2151.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2151.x * cbModelParam._m0[1u].y;
        }
        _1560 = frontier_phi_13_35_ladder_2;
        _1562 = frontier_phi_13_35_ladder_1;
        _1564 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1548 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_670, _671, _672), _1480);
        _1560 = _1548.x * cbModelParam._m0[1u].y;
        _1562 = _1548.y * cbModelParam._m0[1u].y;
        _1564 = _1548.z * cbModelParam._m0[1u].y;
    }
    float _1568 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _512);
    float _1569 = isnan(_1568) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1568 : min(cbModelParam._m0[25u].w, _1568));
    float _1660;
    float _1662;
    float _1664;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1624 = fma(_731, cbModelParam._m0[21u].z, fma(_727, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _723)) + cbModelParam._m0[21u].w;
        float _1628 = fma(_731, cbModelParam._m0[22u].z, fma(_727, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _723)) + cbModelParam._m0[22u].w;
        float _1632 = fma(_731, cbModelParam._m0[23u].z, fma(_727, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _723)) + cbModelParam._m0[23u].w;
        float _1635 = fma(_672, cbModelParam._m0[21u].z, fma(_671, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _670));
        float _1638 = fma(_672, cbModelParam._m0[22u].z, fma(_671, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _670));
        float _1641 = fma(_672, cbModelParam._m0[23u].z, fma(_671, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _670));
        float _1780;
        if (_1635 > 0.0)
        {
            _1780 = abs((1.0 - _1624) / _1635);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1635 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1624 + 1.0) / _1635);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1780 = frontier_phi_25_21_ladder;
        }
        float _2045;
        if (_1638 > 0.0)
        {
            _2045 = abs((1.0 - _1628) / _1638);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1628 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2045 = frontier_phi_37_32_ladder;
        }
        float _2250;
        if (_1641 > 0.0)
        {
            _2250 = abs((1.0 - _1632) / _1641);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1641 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1632 + 1.0) / _1641);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2250 = frontier_phi_46_43_ladder;
        }
        float _2252 = isnan(_2045) ? _1780 : (isnan(_1780) ? _2045 : min(_1780, _2045));
        float _2253 = isnan(_2250) ? _2252 : (isnan(_2252) ? _2250 : min(_2252, _2250));
        float _2257 = (_2253 * _1635) + _1624;
        float _2258 = (_2253 * _1638) + _1628;
        float _2259 = (_2253 * _1641) + _1632;
        float _2260 = _2253 * 9.9999997473787516355514526367188e-05;
        float _2261 = (-1.0) - _2260;
        float _2263 = _2260 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2259 > _2263) || ((_2259 < _2261) || ((_2258 > _2263) || ((_2258 < _2261) || ((_2257 < _2261) || (_2257 > _2263))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2487 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2259, cbModelParam._m0[17u].z, fma(_2258, cbModelParam._m0[17u].y, _2257 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2259, cbModelParam._m0[18u].z, fma(_2258, cbModelParam._m0[18u].y, _2257 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2259, cbModelParam._m0[19u].z, fma(_2258, cbModelParam._m0[19u].y, _2257 * cbModelParam._m0[19u].x))), _1569);
            frontier_phi_22_46_ladder = _2487.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2487.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2487.x * cbModelParam._m0[1u].z;
        }
        _1660 = frontier_phi_22_46_ladder_2;
        _1662 = frontier_phi_22_46_ladder_1;
        _1664 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1644 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_670, _671, _672), _1569);
        _1660 = _1644.x * cbModelParam._m0[1u].z;
        _1662 = _1644.y * cbModelParam._m0[1u].z;
        _1664 = _1644.z * cbModelParam._m0[1u].z;
    }
    float _1676 = ((((1.0 - _691) * ((_678 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_691 * _678)) * _662;
    float _1677 = _1676 * ((cbModelParam._m0[1u].w * (_1660 - _1560)) + _1560);
    float _1678 = _1676 * ((cbModelParam._m0[1u].w * (_1662 - _1562)) + _1562);
    float _1679 = _1676 * ((cbModelParam._m0[1u].w * (_1664 - _1564)) + _1564);
    float _1682 = fma(_1679, cbSceneParam._m0[89u].z, fma(_1678, cbSceneParam._m0[89u].y, _1677 * cbSceneParam._m0[89u].x));
    float _1685 = fma(_1679, cbSceneParam._m0[90u].z, fma(_1678, cbSceneParam._m0[90u].y, _1677 * cbSceneParam._m0[90u].x));
    float _1688 = fma(_1679, cbSceneParam._m0[91u].z, fma(_1678, cbSceneParam._m0[91u].y, _1677 * cbSceneParam._m0[91u].x));
    uvec4 _1698 = floatBitsToUint(cbInstanceData._m0[_637 + 5u]);
    uint _1700 = _1698.x * 14u;
    uint _1701 = _1700 + 13u;
    float _1708 = _662 + (-1.0);
    float _1713 = (cbLight._m0[_1701].x * _1708) + 1.0;
    float _1714 = (cbLight._m0[_1701].y * _1708) + 1.0;
    float _1715 = (cbLight._m0[_1701].z * _1708) + 1.0;
    float _1716 = (cbLight._m0[_1701].w * _1708) + 1.0;
    uint _1717 = _1700 + 5u;
    float _1723 = isnan(1.0) ? _1714 : (isnan(_1714) ? 1.0 : min(_1714, 1.0));
    uint _1727 = _1700 + 4u;
    float _1734 = isnan(1.0) ? _1713 : (isnan(_1713) ? 1.0 : min(_1713, 1.0));
    uint _1738 = _1700 | 1u;
    float _1749 = dot(vec3(cbLight._m0[_1700].xyz), vec3(_509, _510, _511));
    float _1752 = dot(vec3(cbLight._m0[_1738].xyz), vec3(_509, _510, _511));
    float _3893 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
    float _3904 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
    float _1757 = (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * 0.3183098733425140380859375;
    float _1759 = (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * 0.3183098733425140380859375;
    float _1766 = ((cbLight._m0[_1717].x * _1723) * _1759) + ((cbLight._m0[_1727].x * _1734) * _1757);
    float _1767 = ((_1723 * cbLight._m0[_1717].y) * _1759) + ((_1734 * cbLight._m0[_1727].y) * _1757);
    float _1768 = ((_1723 * cbLight._m0[_1717].z) * _1759) + ((_1734 * cbLight._m0[_1727].z) * _1757);
    uvec4 _1772 = floatBitsToUint(cbLight._m0[_1700 + 12u]);
    bool _1774 = _1772.x == 0u;
    float _1785;
    float _1787;
    float _1789;
    if (_1774)
    {
        _1785 = _1766;
        _1787 = _1767;
        _1789 = _1768;
    }
    else
    {
        uint _1793 = _1700 + 6u;
        float _1809 = (dot(vec3(cbLight._m0[_1700 + 2u].xyz), vec3(_509, _510, _511)) * 0.5) + 0.5;
        float _1810 = _1809 * _1809;
        float _3915 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
        float _1811 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1812 = isnan(1.0) ? _1715 : (isnan(_1715) ? 1.0 : min(_1715, 1.0));
        _1785 = (((cbLight._m0[_1793].x * 0.3183098733425140380859375) * _1811) * _1812) + _1766;
        _1787 = (((cbLight._m0[_1793].y * 0.3183098733425140380859375) * _1811) * _1812) + _1767;
        _1789 = (((cbLight._m0[_1793].z * 0.3183098733425140380859375) * _1811) * _1812) + _1768;
    }
    bool _1792 = _1772.y == 0u;
    float _1830;
    float _1832;
    float _1834;
    if (_1792)
    {
        _1830 = _1785;
        _1832 = _1787;
        _1834 = _1789;
    }
    else
    {
        uint _1989 = _1700 + 7u;
        float _2005 = (dot(vec3(cbLight._m0[_1700 + 3u].xyz), vec3(_509, _510, _511)) * 0.5) + 0.5;
        float _2006 = _2005 * _2005;
        float _3931 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
        float _2007 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _2008 = isnan(1.0) ? _1716 : (isnan(_1716) ? 1.0 : min(_1716, 1.0));
        _1830 = (((cbLight._m0[_1989].x * 0.3183098733425140380859375) * _2007) * _2008) + _1785;
        _1832 = (((cbLight._m0[_1989].y * 0.3183098733425140380859375) * _2007) * _2008) + _1787;
        _1834 = (((cbLight._m0[_1989].z * 0.3183098733425140380859375) * _2007) * _2008) + _1789;
    }
    uint _1837 = _1700 + 8u;
    float _1850 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1700].w)) * _512) * 0.949999988079071044921875);
    float _1851 = _1850 * _1850;
    float _1852 = cbLight._m0[_1700].x + _588;
    float _1853 = cbLight._m0[_1700].y + _589;
    float _1854 = cbLight._m0[_1700].z + _590;
    float _1858 = inversesqrt(dot(vec3(_1852, _1853, _1854), vec3(_1852, _1853, _1854)));
    float _1859 = _1858 * _1852;
    float _1860 = _1858 * _1853;
    float _1861 = _1858 * _1854;
    float _1862 = dot(vec3(_509, _510, _511), vec3(cbLight._m0[_1700].xyz));
    float _3947 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _1865 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _3958 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _1866 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _1867 = dot(vec3(_509, _510, _511), vec3(_1859, _1860, _1861));
    float _3969 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1870 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _1871 = dot(vec3(cbLight._m0[_1700].xyz), vec3(_1859, _1860, _1861));
    float _3980 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _1875 = _1851 * _1851;
    float _1879 = ((_1870 * _1870) * (_1875 + (-1.0))) + 1.0;
    float _1890 = (exp2(log2(1.0 - (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1891 = 1.0 - _1851;
    float _1902 = (0.5 / (((_1866 * ((_1865 * _1891) + _1851)) + 9.9999999392252902907785028219223e-09) + (((_1866 * _1891) + _1851) * _1865))) * _1865;
    float _3991 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1904 = (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_1875 / ((_1879 * _1879) * 3.141590118408203125));
    uint _1915 = _1700 + 9u;
    float _1926 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1738].w)) * _512) * 0.949999988079071044921875);
    float _1927 = _1926 * _1926;
    float _1928 = cbLight._m0[_1738].x + _588;
    float _1929 = cbLight._m0[_1738].y + _589;
    float _1930 = cbLight._m0[_1738].z + _590;
    float _1934 = inversesqrt(dot(vec3(_1928, _1929, _1930), vec3(_1928, _1929, _1930)));
    float _1935 = _1934 * _1928;
    float _1936 = _1934 * _1929;
    float _1937 = _1934 * _1930;
    float _1938 = dot(vec3(_509, _510, _511), vec3(cbLight._m0[_1738].xyz));
    float _4002 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
    float _1941 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _1942 = dot(vec3(_509, _510, _511), vec3(_1935, _1936, _1937));
    float _4013 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _1945 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
    float _1946 = dot(vec3(cbLight._m0[_1738].xyz), vec3(_1935, _1936, _1937));
    float _4024 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _1950 = _1927 * _1927;
    float _1954 = ((_1945 * _1945) * (_1950 + (-1.0))) + 1.0;
    float _1963 = (exp2(log2(1.0 - (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1964 = 1.0 - _1927;
    float _1974 = (0.5 / (((_1866 * ((_1941 * _1964) + _1927)) + 9.9999999392252902907785028219223e-09) + (((_1866 * _1964) + _1927) * _1941))) * _1941;
    float _4035 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _1976 = (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) * (_1950 / ((_1954 * _1954) * 3.141590118408203125));
    float _1986 = (((_1963 * cbLight._m0[_1915].x) * _1976) * _1723) + (((_1890 * cbLight._m0[_1837].x) * _1904) * _1734);
    float _1987 = (((_1963 * cbLight._m0[_1915].y) * _1976) * _1723) + (((_1890 * cbLight._m0[_1837].y) * _1904) * _1734);
    float _1988 = (((_1963 * cbLight._m0[_1915].z) * _1976) * _1723) + (((_1890 * cbLight._m0[_1837].z) * _1904) * _1734);
    float _2050;
    float _2052;
    float _2054;
    if (_1774)
    {
        _2050 = _1986;
        _2052 = _1987;
        _2054 = _1988;
    }
    else
    {
        uint _2056 = _1700 + 2u;
        uint _2060 = _1700 + 10u;
        float _2074 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2056].w)) * _512) * 0.949999988079071044921875);
        float _2075 = _2074 * _2074;
        float _2076 = cbLight._m0[_2056].x + _588;
        float _2077 = cbLight._m0[_2056].y + _589;
        float _2078 = cbLight._m0[_2056].z + _590;
        float _2082 = inversesqrt(dot(vec3(_2076, _2077, _2078), vec3(_2076, _2077, _2078)));
        float _2083 = _2082 * _2076;
        float _2084 = _2082 * _2077;
        float _2085 = _2082 * _2078;
        float _2086 = dot(vec3(_509, _510, _511), vec3(cbLight._m0[_2056].xyz));
        float _4046 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
        float _2089 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _2090 = dot(vec3(_509, _510, _511), vec3(_2083, _2084, _2085));
        float _4057 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
        float _2093 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _2094 = dot(vec3(cbLight._m0[_2056].xyz), vec3(_2083, _2084, _2085));
        float _4068 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        float _2098 = _2075 * _2075;
        float _2102 = ((_2093 * _2093) * (_2098 + (-1.0))) + 1.0;
        float _2111 = (exp2(log2(1.0 - (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2112 = 1.0 - _2075;
        float _2122 = (0.5 / (((_1866 * ((_2089 * _2112) + _2075)) + 9.9999999392252902907785028219223e-09) + (((_1866 * _2112) + _2075) * _2089))) * _2089;
        float _4079 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2124 = (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_2098 / ((_2102 * _2102) * 3.141590118408203125));
        float _2125 = isnan(1.0) ? _1715 : (isnan(_1715) ? 1.0 : min(_1715, 1.0));
        _2050 = (((_2111 * cbLight._m0[_2060].x) * _2124) * _2125) + _1986;
        _2052 = (((_2111 * cbLight._m0[_2060].y) * _2124) * _2125) + _1987;
        _2054 = (((_2111 * cbLight._m0[_2060].z) * _2124) * _2125) + _1988;
    }
    float _2160;
    float _2162;
    float _2164;
    if (_1792)
    {
        _2160 = _2050;
        _2162 = _2052;
        _2164 = _2054;
    }
    else
    {
        uint _2171 = _1700 + 3u;
        uint _2175 = _1700 + 11u;
        float _2189 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2171].w)) * _512) * 0.949999988079071044921875);
        float _2190 = _2189 * _2189;
        float _2191 = cbLight._m0[_2171].x + _588;
        float _2192 = cbLight._m0[_2171].y + _589;
        float _2193 = cbLight._m0[_2171].z + _590;
        float _2197 = inversesqrt(dot(vec3(_2191, _2192, _2193), vec3(_2191, _2192, _2193)));
        float _2198 = _2197 * _2191;
        float _2199 = _2197 * _2192;
        float _2200 = _2197 * _2193;
        float _2201 = dot(vec3(_509, _510, _511), vec3(cbLight._m0[_2171].xyz));
        float _4095 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
        float _2204 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _2205 = dot(vec3(_509, _510, _511), vec3(_2198, _2199, _2200));
        float _4106 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
        float _2208 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _2209 = dot(vec3(cbLight._m0[_2171].xyz), vec3(_2198, _2199, _2200));
        float _4117 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        float _2213 = _2190 * _2190;
        float _2217 = ((_2208 * _2208) * (_2213 + (-1.0))) + 1.0;
        float _2226 = (exp2(log2(1.0 - (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2227 = 1.0 - _2190;
        float _2237 = (0.5 / (((_1866 * ((_2204 * _2227) + _2190)) + 9.9999999392252902907785028219223e-09) + (((_1866 * _2227) + _2190) * _2204))) * _2204;
        float _4128 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
        float _2239 = (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_2213 / ((_2217 * _2217) * 3.141590118408203125));
        float _2240 = isnan(1.0) ? _1716 : (isnan(_1716) ? 1.0 : min(_1716, 1.0));
        _2160 = (((_2226 * cbLight._m0[_2175].x) * _2239) * _2240) + _2050;
        _2162 = (((_2226 * cbLight._m0[_2175].y) * _2239) * _2240) + _2052;
        _2164 = (((_2226 * cbLight._m0[_2175].z) * _2239) * _2240) + _2054;
    }
    float _2375;
    float _2377;
    float _2379;
    float _2381;
    float _2383;
    float _2385;
    if (_1698.y == 0u)
    {
        float _2315 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2316 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2315;
        float _2317 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2315;
        float _2318 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2315;
        uvec4 _2330 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2331 = _2330.x;
        uint _2342 = uint((float(_2330.y) * floor(float(uint(cbSceneParam._m0[85u].y * _597) / _2331))) + floor(float(uint(cbSceneParam._m0[85u].x * _596) / _2331)));
        float _2352 = (log2(_2318 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2353 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        uint _2356 = uint(isnan(14.0) ? _2353 : (isnan(_2353) ? 14.0 : min(_2353, 14.0)));
        uvec4 _2361 = texelFetch(g_lightClusterGridBuffer, int(((_2356 << 2u) + (_2342 << 6u)) >> 2u));
        uint _2362 = _2361.x;
        uint _2363 = _2330.z;
        float _2492;
        float _2494;
        float _2496;
        float _2498;
        float _2500;
        float _2502;
        if (((((1u << ((_2363 >> 4u) & 15u)) + 4294967295u) & _2362) == 0u) || ((_2363 & 240u) == 0u))
        {
            _2492 = 0.0;
            _2494 = 0.0;
            _2496 = 0.0;
            _2498 = 0.0;
            _2500 = 0.0;
            _2502 = 0.0;
        }
        else
        {
            float _2493;
            float _2495;
            float _2497;
            float _2499;
            float _2501;
            float _2503;
            float _2646 = 0.0;
            float _2647 = 0.0;
            float _2648 = 0.0;
            float _2649 = 0.0;
            float _2650 = 0.0;
            float _2651 = 0.0;
            uint _2652 = 0u;
            uint _2661;
            bool _2662;
            for (;;)
            {
                _2661 = texelFetch(g_lightClassification, int((((_2356 << 5u) + (_2342 << 9u)) + (_2652 << 2u)) >> 2u)).x;
                _2662 = _2661 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2662)
                {
                    frontier_phi_61_pred = _2646;
                    frontier_phi_61_pred_1 = _2651;
                    frontier_phi_61_pred_2 = _2650;
                    frontier_phi_61_pred_3 = _2649;
                    frontier_phi_61_pred_4 = _2648;
                    frontier_phi_61_pred_5 = _2647;
                }
                else
                {
                    float _2770;
                    float _2771;
                    float _2772;
                    float _2773;
                    float _2774;
                    float _2775;
                    uint _2776;
                    _2770 = _2646;
                    _2771 = _2647;
                    _2772 = _2648;
                    _2773 = _2649;
                    _2774 = _2650;
                    _2775 = _2651;
                    _2776 = _2661;
                    float _2702;
                    float _2703;
                    float _2704;
                    float _2705;
                    float _2706;
                    float _2707;
                    for (;;)
                    {
                        uint _2780 = uint(findLSB(_2776)) + (_2652 << 5u);
                        uint _2777 = (_2776 + 4294967295u) & _2776;
                        uint _2782 = _2780 * 48u;
                        vec4 _2796 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2782)).x, texelFetch(g_PointLightRenderingBuffer, int(_2782 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2782 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2782 + 3u)).x));
                        uint _2802 = (_2780 * 48u) + 4u;
                        vec4 _2815 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2802)).x, texelFetch(g_PointLightRenderingBuffer, int(_2802 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2802 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2802 + 3u)).x));
                        uint _2821 = (_2780 * 48u) + 8u;
                        vec3 _2832 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2821)).x, texelFetch(g_PointLightRenderingBuffer, int(_2821 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2821 + 2u)).x));
                        float _2836 = _2796.x - _2316;
                        float _2837 = _2796.y - _2317;
                        float _2838 = _2796.z - _2318;
                        float _2839 = dot(vec3(_2836, _2837, _2838), vec3(_2836, _2837, _2838));
                        float _2842 = inversesqrt(_2839);
                        float _2843 = _2842 * _2836;
                        float _2844 = _2842 * _2837;
                        float _2845 = _2842 * _2838;
                        float _2846 = dot(vec3(_618, _621, _624), vec3(_2843, _2844, _2845));
                        float _2851 = 1.0 - (_2839 * _2796.w);
                        float _4154 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
                        float _2852 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
                        float _2853 = sqrt(_2839) * _2815.w;
                        float _2856 = 1.39999997615814208984375 / (_2853 + 1.39999997615814208984375);
                        float _2857 = _2856 * _2856;
                        float _2860 = ((1.0 - _2857) * _2846) + _2857;
                        float _2863 = _2853 * _2853;
                        float _2867 = ((isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0))) * _2852) / ((_2863 * 0.699999988079071044921875) + 1.0);
                        float _2871 = (-0.0) - _2316;
                        float _2872 = (-0.0) - _2317;
                        float _2873 = (-0.0) - _2318;
                        float _2877 = inversesqrt(dot(vec3(_2871, _2872, _2873), vec3(_2871, _2872, _2873)));
                        float _2878 = _2877 * _2871;
                        float _2879 = _2877 * _2872;
                        float _2880 = _2877 * _2873;
                        float _2888 = exp2(log2(1.0 / ((_2863 * 3.5) + 5.0)) * 0.25);
                        float _2889 = 1.0 - _678;
                        float _2896 = sqrt(1.0 - ((1.0 - (_2889 * _2889)) * (1.0 - (_2888 * _2888))));
                        float _2897 = _2896 * _2896;
                        float _2898 = _2897 * _2897;
                        float _2899 = _2878 + _2843;
                        float _2900 = _2879 + _2844;
                        float _2901 = _2880 + _2845;
                        float _2905 = inversesqrt(dot(vec3(_2899, _2900, _2901), vec3(_2899, _2900, _2901)));
                        float _2909 = dot(vec3(_618, _621, _624), vec3(_2878, _2879, _2880));
                        float _4170 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
                        float _2912 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
                        float _2913 = dot(vec3(_618, _621, _624), vec3(_2905 * _2899, _2905 * _2900, _2905 * _2901));
                        float _4181 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
                        float _2916 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
                        float _2920 = ((_2916 * _2916) * (_2898 + (-1.0))) + 1.0;
                        float _2921 = _2856 * _2897;
                        float _2922 = _2921 * _2921;
                        float _2925 = ((1.0 - _2922) * _2846) + _2922;
                        float _4192 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
                        float _2926 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
                        float _2927 = 1.0 - _2897;
                        float _2937 = (0.5 / (((_2926 * ((_2912 * _2927) + _2897)) + 9.9999999392252902907785028219223e-09) + (((_2926 * _2927) + _2897) * _2912))) * _2926;
                        float _4203 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
                        float _2948 = (((_2898 * 3.1415927410125732421875) * (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0)))) / ((_2920 * _2920) * ((_2863 * 2.1991131305694580078125) + 3.141590118408203125))) * _2852;
                        _2705 = (_2867 * _2815.x) + _2773;
                        _2706 = (_2867 * _2815.y) + _2774;
                        _2707 = (_2867 * _2815.z) + _2775;
                        _2702 = (_2948 * _2832.x) + _2770;
                        _2703 = (_2948 * _2832.y) + _2771;
                        _2704 = (_2948 * _2832.z) + _2772;
                        if (_2777 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2770 = _2702;
                            _2771 = _2703;
                            _2772 = _2704;
                            _2773 = _2705;
                            _2774 = _2706;
                            _2775 = _2707;
                            _2776 = _2777;
                        }
                    }
                    frontier_phi_61_pred = _2702;
                    frontier_phi_61_pred_1 = _2707;
                    frontier_phi_61_pred_2 = _2706;
                    frontier_phi_61_pred_3 = _2705;
                    frontier_phi_61_pred_4 = _2704;
                    frontier_phi_61_pred_5 = _2703;
                }
                _2493 = frontier_phi_61_pred;
                _2503 = frontier_phi_61_pred_1;
                _2501 = frontier_phi_61_pred_2;
                _2499 = frontier_phi_61_pred_3;
                _2497 = frontier_phi_61_pred_4;
                _2495 = frontier_phi_61_pred_5;
                uint _2653 = _2652 + 1u;
                if (_2653 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2646 = _2493;
                    _2647 = _2495;
                    _2648 = _2497;
                    _2649 = _2499;
                    _2650 = _2501;
                    _2651 = _2503;
                    _2652 = _2653;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2492 = _2493;
            _2494 = _2495;
            _2496 = _2497;
            _2498 = _2499;
            _2500 = _2501;
            _2502 = _2503;
        }
        uvec4 _2506 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2507 = _2506.z;
        uint _2509 = (_2507 >> 8u) & 15u;
        float _2614;
        float _2616;
        float _2618;
        float _2620;
        float _2622;
        float _2624;
        if (((4294967295u << _2509) & _2362) == 0u)
        {
            _2614 = _2492;
            _2616 = _2494;
            _2618 = _2496;
            _2620 = _2498;
            _2622 = _2500;
            _2624 = _2502;
        }
        else
        {
            float _2639 = inversesqrt(dot(vec3(_2316, _2317, _2318), vec3(_2316, _2317, _2318)));
            float _2640 = _2639 * _2316;
            float _2641 = _2639 * _2317;
            float _2642 = _2639 * _2318;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2509 < ((_2507 >> 12u) & 15u))
            {
                float _2615;
                float _2617;
                float _2619;
                float _2621;
                float _2623;
                float _2625;
                float _2753 = _2492;
                float _2754 = _2494;
                float _2755 = _2496;
                float _2756 = _2498;
                float _2757 = _2500;
                float _2758 = _2502;
                uint _2759 = _2509;
                uint _2768;
                bool _2769;
                for (;;)
                {
                    _2768 = texelFetch(g_lightClassification, int((((_2356 << 5u) + (_2342 << 9u)) + (_2759 << 2u)) >> 2u)).x;
                    _2769 = _2768 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2769)
                    {
                        frontier_phi_67_pred = _2756;
                        frontier_phi_67_pred_1 = _2757;
                        frontier_phi_67_pred_2 = _2758;
                        frontier_phi_67_pred_3 = _2755;
                        frontier_phi_67_pred_4 = _2754;
                        frontier_phi_67_pred_5 = _2753;
                    }
                    else
                    {
                        float _2953;
                        float _2954;
                        float _2955;
                        float _2956;
                        float _2957;
                        float _2958;
                        float _3248;
                        float _3249;
                        float _3250;
                        float _3251;
                        float _3252;
                        float _3253;
                        float _2966 = _2753;
                        float _2967 = _2754;
                        float _2968 = _2755;
                        float _2969 = _2756;
                        float _2970 = _2757;
                        float _2971 = _2758;
                        uint _2972 = _2768;
                        uint _2973;
                        vec4 _2998;
                        float _2999;
                        vec4 _3014;
                        vec3 _3026;
                        vec4 _3041;
                        vec4 _3057;
                        float _3104;
                        bool _3105;
                        for (;;)
                        {
                            uint _2983 = ((_2759 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2972));
                            _2973 = (_2972 + 4294967295u) & _2972;
                            uint _2985 = _2983 * 40u;
                            _2998 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2985)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 3u)).x));
                            _2999 = _2998.w;
                            uint _3001 = (_2983 * 40u) + 4u;
                            _3014 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3001)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 3u)).x));
                            uint _3016 = (_2983 * 40u) + 8u;
                            _3026 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3016)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 2u)).x));
                            uint _3028 = (_2983 * 40u) + 16u;
                            _3041 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 3u)).x));
                            uint _3044 = (_2983 * 40u) + 20u;
                            _3057 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3044)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 3u)).x));
                            uint _3060 = (_2983 * 40u) + 24u;
                            vec4 _3073 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3060)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 3u)).x));
                            uint _3079 = (_2983 * 40u) + 28u;
                            vec4 _3092 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3079)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 3u)).x));
                            _3104 = fma(_2318, _3092.z, fma(_2317, _3092.y, _3092.x * _2316)) + _3092.w;
                            _3105 = !((fma(_2318, _3073.z, fma(_2317, _3073.y, _3073.x * _2316)) + _3073.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3105)
                            {
                                float _3132 = _2998.x - _2316;
                                float _3133 = _2998.y - _2317;
                                float _3134 = _2998.z - _2318;
                                float _3135 = dot(vec3(_3132, _3133, _3134), vec3(_3132, _3133, _3134));
                                float _3138 = inversesqrt(_3135);
                                float _3139 = _3138 * _3132;
                                float _3140 = _3138 * _3133;
                                float _3141 = _3138 * _3134;
                                float _3145 = 1.0 - (_3135 / (_2999 * _2999));
                                float _4214 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                                float _3146 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
                                float _3150 = sqrt(_3135) * _3014.w;
                                float _3152 = 1.39999997615814208984375 / (_3150 + 1.39999997615814208984375);
                                float _3153 = _3152 * _3152;
                                float _3156 = ((1.0 - _3153) * dot(vec3(_3139, _3140, _3141), vec3(_618, _621, _624))) + _3153;
                                float _3159 = _3150 * _3150;
                                float _3163 = (fma(_2318, _3041.z, fma(_2317, _3041.y, _3041.x * _2316)) + _3041.w) / _3104;
                                float _3164 = (fma(_2318, _3057.z, fma(_2317, _3057.y, _3057.x * _2316)) + _3057.w) / _3104;
                                float _3168 = 1.0 - dot(vec2(_3163, _3164), vec2(_3163, _3164));
                                float _4230 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                                float _3169 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
                                float _3170 = _3169 * (((isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0))) * _3146) / ((_3159 * 0.699999988079071044921875) + 1.0));
                                float _3182 = exp2(log2(1.0 / ((_3159 * 3.5) + 5.0)) * 0.25);
                                float _3183 = 1.0 - _678;
                                float _3190 = sqrt(1.0 - ((1.0 - (_3183 * _3183)) * (1.0 - (_3182 * _3182))));
                                float _3191 = _3190 * _3190;
                                float _3192 = _3191 * _3191;
                                float _3193 = _3139 - _2640;
                                float _3194 = _3140 - _2641;
                                float _3195 = _3141 - _2642;
                                float _3199 = inversesqrt(dot(vec3(_3193, _3194, _3195), vec3(_3193, _3194, _3195)));
                                float _3203 = dot(vec3(_618, _621, _624), vec3((-0.0) - _2640, (-0.0) - _2641, (-0.0) - _2642));
                                float _4241 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                                float _3206 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
                                float _3207 = dot(vec3(_618, _621, _624), vec3(_3199 * _3193, _3199 * _3194, _3199 * _3195));
                                float _4252 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                                float _3210 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
                                float _3214 = ((_3210 * _3210) * (_3192 + (-1.0))) + 1.0;
                                float _3215 = _3152 * _3191;
                                float _3216 = _3215 * _3215;
                                float _3222 = ((1.0 - _3216) * dot(vec3(_618, _621, _624), vec3(_3139, _3140, _3141))) + _3216;
                                float _4263 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                                float _3223 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
                                float _3224 = 1.0 - _3191;
                                float _3234 = (0.5 / (((_3223 * ((_3206 * _3224) + _3191)) + 9.9999999392252902907785028219223e-09) + (((_3223 * _3224) + _3191) * _3206))) * _3223;
                                float _4274 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                                float _3244 = (_3169 * _3146) * (((_3192 * 3.1415927410125732421875) * (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0)))) / ((_3214 * _3214) * ((_3159 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3244 * _3026.x;
                                frontier_phi_73_pred_1 = _3244 * _3026.y;
                                frontier_phi_73_pred_2 = _3170 * _3014.z;
                                frontier_phi_73_pred_3 = _3170 * _3014.y;
                                frontier_phi_73_pred_4 = _3170 * _3014.x;
                                frontier_phi_73_pred_5 = _3244 * _3026.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3248 = frontier_phi_73_pred;
                            _3249 = frontier_phi_73_pred_1;
                            _3253 = frontier_phi_73_pred_2;
                            _3252 = frontier_phi_73_pred_3;
                            _3251 = frontier_phi_73_pred_4;
                            _3250 = frontier_phi_73_pred_5;
                            _2956 = _3251 + _2969;
                            _2957 = _3252 + _2970;
                            _2958 = _3253 + _2971;
                            _2953 = _3248 + _2966;
                            _2954 = _3249 + _2967;
                            _2955 = _3250 + _2968;
                            if (_2973 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2966 = _2953;
                                _2967 = _2954;
                                _2968 = _2955;
                                _2969 = _2956;
                                _2970 = _2957;
                                _2971 = _2958;
                                _2972 = _2973;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2956;
                        frontier_phi_67_pred_1 = _2957;
                        frontier_phi_67_pred_2 = _2958;
                        frontier_phi_67_pred_3 = _2955;
                        frontier_phi_67_pred_4 = _2954;
                        frontier_phi_67_pred_5 = _2953;
                    }
                    _2621 = frontier_phi_67_pred;
                    _2623 = frontier_phi_67_pred_1;
                    _2625 = frontier_phi_67_pred_2;
                    _2619 = frontier_phi_67_pred_3;
                    _2617 = frontier_phi_67_pred_4;
                    _2615 = frontier_phi_67_pred_5;
                    uint _2760 = _2759 + 1u;
                    if (_2760 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2753 = _2615;
                        _2754 = _2617;
                        _2755 = _2619;
                        _2756 = _2621;
                        _2757 = _2623;
                        _2758 = _2625;
                        _2759 = _2760;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2623;
                frontier_phi_55_56_ladder_1 = _2625;
                frontier_phi_55_56_ladder_2 = _2621;
                frontier_phi_55_56_ladder_3 = _2619;
                frontier_phi_55_56_ladder_4 = _2617;
                frontier_phi_55_56_ladder_5 = _2615;
            }
            else
            {
                frontier_phi_55_56_ladder = _2500;
                frontier_phi_55_56_ladder_1 = _2502;
                frontier_phi_55_56_ladder_2 = _2498;
                frontier_phi_55_56_ladder_3 = _2496;
                frontier_phi_55_56_ladder_4 = _2494;
                frontier_phi_55_56_ladder_5 = _2492;
            }
            _2614 = frontier_phi_55_56_ladder_5;
            _2616 = frontier_phi_55_56_ladder_4;
            _2618 = frontier_phi_55_56_ladder_3;
            _2620 = frontier_phi_55_56_ladder_2;
            _2622 = frontier_phi_55_56_ladder;
            _2624 = frontier_phi_55_56_ladder_1;
        }
        float _2629 = isnan(1.0) ? _662 : (isnan(_662) ? 1.0 : min(_662, 1.0));
        _2375 = (_2629 * _2620) + _1830;
        _2377 = (_2629 * _2622) + _1832;
        _2379 = (_2629 * _2624) + _1834;
        _2381 = ((_2614 * 0.039999999105930328369140625) * _2629) + _2160;
        _2383 = ((_2616 * 0.039999999105930328369140625) * _2629) + _2162;
        _2385 = ((_2618 * 0.039999999105930328369140625) * _2629) + _2164;
    }
    else
    {
        _2375 = _1830;
        _2377 = _1832;
        _2379 = _1834;
        _2381 = _2160;
        _2383 = _2162;
        _2385 = _2164;
    }
    uint _2391 = _638 + uint(cbMatDynParam._m0[0u].w);
    float _2397 = cbInstanceData._m0[_2391].x * (_428 - (_444 * _428));
    float _2398 = cbInstanceData._m0[_2391].y * (_429 - (_444 * _429));
    float _2399 = cbInstanceData._m0[_2391].z * (_430 - (_444 * _430));
    float _4290 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _4301 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _4312 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _2416 = (((isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_2375 + ((isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0))) * _662))) + ((_2381 + ((isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))) * _1469)) * cbPerFrame._m0[3u].x)) + _2397;
    float _2418 = (_2398 + ((_2383 + ((isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0))) * _1469)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_2377 + ((isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0))) * _662)));
    float _2420 = (_2399 + ((_2385 + ((isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))) * _1469)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_2379 + ((isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0))) * _662)));
    float _4338 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2433 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
    uint _2434 = _637 + 6u;
    float _2442 = _596 / cbSceneParam._m0[86u].x;
    float _2443 = _597 / cbSceneParam._m0[86u].y;
    vec4 _2457 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2442, _2443, (log2((isnan(cbSceneParam._m0[77u].w) ? _531 : (isnan(_531) ? cbSceneParam._m0[77u].w : min(_531, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2459 = _2457.x;
    float _2460 = _2457.y;
    float _2461 = _2457.z;
    float _2462 = _2457.w;
    float _2555;
    float _2557;
    float _2559;
    float _2561;
    if (_531 > cbSceneParam._m0[78u].w)
    {
        float _2517 = isnan(_531) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _531 : min(cbSceneParam._m0[80u].w, _531));
        float _2518 = _2517 / _531;
        float _2529 = _2518 * _581;
        float _2530 = _582 * _2518;
        float _2531 = (-0.0) - _2530;
        float _2533 = _2518 * _583;
        float _2535 = (cbSceneParam._m0[77u].w * _2531) / _2517;
        float _2536 = _2535 + cbSceneParam._m0[79u].w;
        float _2537 = cbSceneParam._m0[79u].w - _2530;
        float _2543 = sqrt(((_2529 * _2529) + (_2530 * _2530)) + (_2533 * _2533));
        float _2546 = (1.0 - (cbSceneParam._m0[77u].w / _2517)) * _2543;
        float _2551 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2553 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2715;
        if (abs((_2531 - _2535) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2715 = ((((_2536 > 0.0) ? exp2(_2551 * _2536) : (2.0 - exp2(_2553 * _2536))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2546;
        }
        else
        {
            float _2675 = 1.0 / cbSceneParam._m0[80u].x;
            float _2676 = isnan(_2537) ? _2536 : (isnan(_2536) ? _2537 : max(_2536, _2537));
            float _2677 = isnan(_2537) ? _2536 : (isnan(_2536) ? _2537 : min(_2536, _2537));
            float _2686 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : min(_2676, 0.0));
            float _2687 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : min(_2677, 0.0));
            _2715 = ((abs(_2543 / _2531) * cbSceneParam._m0[80u].y) * ((((_2686 - _2687) * 2.0) - ((exp2(_2551 * (isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0)))) - exp2(_2551 * (isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0))))) * _2675)) - ((exp2(_2553 * _2686) - exp2(_2553 * _2687)) * _2675))) + (_2546 * cbSceneParam._m0[80u].z);
        }
        vec4 _2717 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2442, _2443, 1.0), 0.0);
        float _2726 = exp2((_2715 * (-1.44269502162933349609375)) * (1.0 - _2717.w));
        float _2727 = log2(_2726);
        float _2743 = log2(_2462);
        _2555 = (exp2(_2743 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2727 * cbSceneParam._m0[78u].x)) * _2717.x) / cbSceneParam._m0[78u].x)) + _2459;
        _2557 = (exp2(_2743 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2727 * cbSceneParam._m0[78u].y)) * _2717.y) / cbSceneParam._m0[78u].y)) + _2460;
        _2559 = (exp2(_2743 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2727 * cbSceneParam._m0[78u].z)) * _2717.z) / cbSceneParam._m0[78u].z)) + _2461;
        _2561 = _2726 * _2462;
    }
    else
    {
        _2555 = _2459;
        _2557 = _2460;
        _2559 = _2461;
        _2561 = _2462;
    }
    float _2573 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2574 = _2573 == 3.0;
    float _2575 = log2(_2561);
    float _2579 = exp2(_2575 * cbSceneParam._m0[78u].x);
    float _2580 = exp2(_2575 * cbSceneParam._m0[78u].y);
    float _2581 = exp2(_2575 * cbSceneParam._m0[78u].z);
    float _2582 = _2579 * (isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0)));
    float _2583 = _2580 * (isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0)));
    float _2584 = _2581 * (isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0)));
    float _2593 = (_2573 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2593 * (_2574 ? _2582 : (_2582 + (cbSceneParam._m0[72u].w * _2555)));
    SV_Target.y = _2593 * (_2574 ? _2583 : (_2583 + (cbSceneParam._m0[72u].w * _2557)));
    SV_Target.z = _2593 * (_2574 ? _2584 : (_2584 + (cbSceneParam._m0[72u].w * _2559)));
    SV_Target.w = cbInstanceData._m0[_2434].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2397) * _2433) * _2579) * _2593;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2398) * _2433) * _2580) * _2593;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2399) * _2433) * _2581) * _2593;
    SV_Target_1.w = cbInstanceData._m0[_2434].w;
}


