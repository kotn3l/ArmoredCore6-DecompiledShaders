#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1078;
float _3480;
float _3481;
float _3482;
float _3483;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _245 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _251 = _245.x * cbMtdParam._m0[9u].x;
    float _252 = _245.y * cbMtdParam._m0[9u].y;
    float _253 = _245.z * cbMtdParam._m0[9u].z;
    vec4 _273 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _294 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_273.x + 0.00999999977648258209228515625));
    float _296 = _294 * (cbMtdParam._m0[15u].x + 1.0);
    float _3492 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _297 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
    float _305 = ((((cbMtdParam._m0[12u].x - _251) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _297) + _251;
    float _306 = ((((cbMtdParam._m0[12u].y - _252) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _297) + _252;
    float _307 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _253)) * _297) + _253;
    vec4 _319 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _323 = _319.z;
    float _327 = (_319.x * 2.0) + (-1.0);
    float _329 = (_319.y * 2.0) + (-1.0);
    float _330 = dot(vec2(_327, _329), vec2(_327, _329));
    float _3503 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _335 = sqrt(1.0 - (isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0))));
    float _338 = _294 * (cbMtdParam._m0[14u].w + 1.0);
    float _3514 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _342 = ((cbMtdParam._m0[14u].y - _323) * (isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0)))) + _323;
    vec4 _370 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _385 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _430 = (TEXCOORD_6.x - ((cbMtdParam._m0[13u].w * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_5, SS_WrapLinear), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].x + 1.0);
    float _3525 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _431 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
    float _432 = ((_385.x + _370.x) * cbMtdParam._m0[11u].x) * _431;
    float _433 = ((_385.y + _370.y) * cbMtdParam._m0[11u].y) * _431;
    float _434 = ((_385.z + _370.z) * cbMtdParam._m0[11u].z) * _431;
    vec4 _446 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[9u].w));
    float _448 = _446.x;
    vec4 _473 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _479 = (_473.x * 2.0) + (-1.0);
    float _480 = (_473.y * 2.0) + (-1.0);
    float _481 = dot(vec2(_479, _480), vec2(_479, _480));
    float _3536 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _497 = (_297 * (((cbMtdParam._m0[13u].z * _327) - _327) + _479)) + _327;
    float _498 = (_297 * (((cbMtdParam._m0[13u].z * _329) - _329) + _480)) + _329;
    float _499 = (_297 * (sqrt(1.0 - (isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0)))) - _335)) + _335;
    float _502 = fma(_499, _216 * NORMAL.x, fma(_498, _223 * TANGENT.x, (_209 * _201) * _497));
    float _505 = fma(_499, _216 * NORMAL.y, fma(_498, _223 * TANGENT.y, (_209 * _202) * _497));
    float _508 = fma(_499, _216 * NORMAL.z, fma(_498, _223 * TANGENT.z, (_209 * _203) * _497));
    float _512 = inversesqrt(dot(vec3(_502, _505, _508), vec3(_502, _505, _508)));
    float _513 = _512 * _502;
    float _514 = _512 * _505;
    float _515 = _512 * _508;
    float _3547 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _516 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
    float _3558 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3569 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _3580 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _535 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _575 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _585 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _575);
    float _586 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _575);
    float _587 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _575);
    float _591 = inversesqrt(dot(vec3(_585, _586, _587), vec3(_585, _586, _587)));
    float _592 = _585 * _591;
    float _593 = _586 * _591;
    float _594 = _587 * _591;
    vec4 _599 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _601 = _599.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _758 = sqrt(((_585 * _585) + (_586 * _586)) + (_587 * _587));
        float _764 = (cbMatDynParam._m0[5u].x * _758) + cbMatDynParam._m0[5u].y;
        float _3591 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _765 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _769 = (cbMatDynParam._m0[5u].z * _758) + cbMatDynParam._m0[5u].w;
        float _3602 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))) - _765)) + _765) < ((_601 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _613 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _614 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _634 = fma(_515, cbSceneParam._m0[5u].z, fma(_514, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _513));
    float _637 = fma(_515, cbSceneParam._m0[6u].z, fma(_514, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _513));
    float _640 = fma(_515, cbSceneParam._m0[7u].z, fma(_514, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _513));
    uint _653 = uint(roundEven(NORMAL.w)) * 13u;
    uint _654 = _653 + 9u;
    uint _655 = _654 + uint(cbMatDynParam._m0[0u].w);
    float _661 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0)))) * cbInstanceData._m0[_655].x;
    float _662 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0)))) * cbInstanceData._m0[_655].y;
    float _663 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0)))) * cbInstanceData._m0[_655].z;
    float _3613 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _664 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
    float _3624 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _665 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
    float _3635 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _666 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
    vec4 _675 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _613, cbSceneParam._m0[86u].y * _614));
    float _678 = _675.x * TEXCOORD_3.w;
    float _679 = dot(vec3(_513, _514, _515), vec3(_592, _593, _594));
    float _682 = _679 * 2.0;
    float _686 = (_682 * _513) - _592;
    float _687 = (_682 * _514) - _593;
    float _688 = (_682 * _515) - _594;
    float _692 = abs(dot(vec3(_592, _593, _594), vec3(_513, _514, _515)));
    float _3646 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _694 = sqrt(_516);
    float _707 = exp2((_694 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_694 * 3.0));
    float _739 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _743 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _747 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1077;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _802 = fma(_747, cbModelParam._m0[26u].z, fma(_743, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _739));
        float _806 = fma(_747, cbModelParam._m0[27u].z, fma(_743, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _739));
        float _810 = fma(_747, cbModelParam._m0[28u].z, fma(_743, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _739));
        float _835 = _739 + _513;
        float _836 = _743 + _514;
        float _837 = _747 + _515;
        float _847 = fma(_837, cbModelParam._m0[26u].z, fma(_836, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _835)) - _802;
        float _848 = fma(_837, cbModelParam._m0[27u].z, fma(_836, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _835)) - _806;
        float _849 = fma(_837, cbModelParam._m0[28u].z, fma(_836, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _835)) - _810;
        float _853 = inversesqrt(dot(vec3(_847, _848, _849), vec3(_847, _848, _849)));
        float _866 = ((_853 * _847) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_802 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _867 = ((_853 * _848) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_806 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _868 = ((_853 * _849) / cbModelParam._m0[34u].z) + ((((((_810 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _871 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        vec4 _878 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        vec4 _885 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        vec4 _892 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        float _905 = exp2((_871.w + (-0.5)) * 20.0) * 2.0;
        float _906 = _905 * (_871.x + (-0.5));
        float _907 = _905 * (_871.y + (-0.5));
        float _908 = _905 * (_871.z + (-0.5));
        float _915 = exp2((_878.w + (-0.5)) * 20.0) * 2.0;
        float _916 = _915 * (_878.x + (-0.5));
        float _917 = _915 * (_878.y + (-0.5));
        float _918 = _915 * (_878.z + (-0.5));
        float _925 = exp2((_885.w + (-0.5)) * 20.0) * 2.0;
        float _926 = _925 * (_885.x + (-0.5));
        float _927 = _925 * (_885.y + (-0.5));
        float _928 = _925 * (_885.z + (-0.5));
        float _935 = exp2((_892.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_892.x + (-0.5));
        float _937 = _935 * (_892.y + (-0.5));
        float _938 = _935 * (_892.z + (-0.5));
        float _939 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _940 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _941 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _942 = _906 * 0.5;
        float _943 = _916 * 0.5;
        float _944 = _926 * 0.5;
        float _945 = dot(vec3(_942, _943, _944), vec3(_942, _943, _944));
        float _950 = (_945 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_945);
        float _959 = (dot(vec3(_513, _514, _515), vec3(_950 * _942, _950 * _943, _950 * _944)) + 1.0) * 0.5;
        float _3672 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _969 = sqrt(((_943 * _943) + (_942 * _942)) + (_944 * _944)) / (_939 + 9.9999997473787516355514526367188e-06);
        float _3683 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _971 = _970 * 2.0;
        float _975 = (1.0 - _970) / (_970 + 1.0);
        float _3694 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _985 = ((((1.0 - _976) * (_971 + 2.0)) * exp2(log2(isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * (_971 + 1.0))) + _976) * _939;
        float _986 = _907 * 0.5;
        float _987 = _917 * 0.5;
        float _988 = _927 * 0.5;
        float _989 = dot(vec3(_986, _987, _988), vec3(_986, _987, _988));
        float _994 = (_989 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_989);
        float _1002 = (dot(vec3(_513, _514, _515), vec3(_994 * _986, _994 * _987, _994 * _988)) + 1.0) * 0.5;
        float _3705 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1011 = sqrt(((_987 * _987) + (_986 * _986)) + (_988 * _988)) / (_940 + 9.9999997473787516355514526367188e-06);
        float _3716 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1013 = _1012 * 2.0;
        float _1017 = (1.0 - _1012) / (_1012 + 1.0);
        float _3727 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1027 = ((((1.0 - _1018) * (_1013 + 2.0)) * exp2(log2(isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * (_1013 + 1.0))) + _1018) * _940;
        float _1028 = _908 * 0.5;
        float _1029 = _918 * 0.5;
        float _1030 = _928 * 0.5;
        float _1031 = dot(vec3(_1028, _1029, _1030), vec3(_1028, _1029, _1030));
        float _1036 = (_1031 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1031);
        float _1044 = (dot(vec3(_513, _514, _515), vec3(_1036 * _1028, _1036 * _1029, _1036 * _1030)) + 1.0) * 0.5;
        float _3738 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1053 = sqrt(((_1029 * _1029) + (_1028 * _1028)) + (_1030 * _1030)) / (_941 + 9.9999997473787516355514526367188e-06);
        float _3749 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1055 = _1054 * 2.0;
        float _1059 = (1.0 - _1054) / (_1054 + 1.0);
        float _3760 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1069 = ((((1.0 - _1060) * (_1055 + 2.0)) * exp2(log2(isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * (_1055 + 1.0))) + _1060) * _941;
        _1077 = _908;
        _1079 = _907;
        _1080 = _906;
        _1081 = _918;
        _1082 = _917;
        _1083 = _916;
        _1084 = _928;
        _1085 = _927;
        _1086 = _926;
        _1087 = _941;
        _1088 = _940;
        _1089 = _939;
        _1090 = cbModelParam._m0[36u].z * (isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0)));
        _1091 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0)));
        _1092 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0)));
    }
    else
    {
        _1077 = _1078;
        _1079 = _1078;
        _1080 = _1078;
        _1081 = _1078;
        _1082 = _1078;
        _1083 = _1078;
        _1084 = _1078;
        _1085 = _1078;
        _1086 = _1078;
        _1087 = _1078;
        _1088 = _1078;
        _1089 = _1078;
        _1090 = 0.0;
        _1091 = 0.0;
        _1092 = 0.0;
    }
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1121 = fma(_747, cbModelParam._m0[30u].z, fma(_743, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _739));
        float _1125 = fma(_747, cbModelParam._m0[31u].z, fma(_743, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _739));
        float _1129 = fma(_747, cbModelParam._m0[32u].z, fma(_743, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _739));
        float _1152 = _739 + _513;
        float _1153 = _743 + _514;
        float _1154 = _747 + _515;
        float _1164 = fma(_1154, cbModelParam._m0[30u].z, fma(_1153, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1152)) - _1121;
        float _1165 = fma(_1154, cbModelParam._m0[31u].z, fma(_1153, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1152)) - _1125;
        float _1166 = fma(_1154, cbModelParam._m0[32u].z, fma(_1153, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1152)) - _1129;
        float _1170 = inversesqrt(dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166)));
        float _1183 = ((_1170 * _1164) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1121 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1184 = ((_1170 * _1165) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1125 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1185 = ((_1170 * _1166) / cbModelParam._m0[35u].z) + ((((((_1129 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        float _1220 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1187.x + (-0.5));
        float _1222 = _1220 * (_1187.y + (-0.5));
        float _1223 = _1220 * (_1187.z + (-0.5));
        float _1230 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1194.x + (-0.5));
        float _1232 = _1230 * (_1194.y + (-0.5));
        float _1233 = _1230 * (_1194.z + (-0.5));
        float _1240 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1201.x + (-0.5));
        float _1242 = _1240 * (_1201.y + (-0.5));
        float _1243 = _1240 * (_1201.z + (-0.5));
        float _1250 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1208.x + (-0.5));
        float _1252 = _1250 * (_1208.y + (-0.5));
        float _1253 = _1250 * (_1208.z + (-0.5));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = _1221 * 0.5;
        float _1258 = _1231 * 0.5;
        float _1259 = _1241 * 0.5;
        float _1260 = dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259));
        float _1265 = (_1260 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1260);
        float _1273 = (dot(vec3(_513, _514, _515), vec3(_1265 * _1257, _1265 * _1258, _1265 * _1259)) + 1.0) * 0.5;
        float _3801 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1282 = sqrt(((_1258 * _1258) + (_1257 * _1257)) + (_1259 * _1259)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _3812 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1284 = _1283 * 2.0;
        float _1288 = (1.0 - _1283) / (_1283 + 1.0);
        float _3823 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1298 = ((((1.0 - _1289) * (_1284 + 2.0)) * exp2(log2(isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * (_1284 + 1.0))) + _1289) * _1254;
        float _1299 = _1222 * 0.5;
        float _1300 = _1232 * 0.5;
        float _1301 = _1242 * 0.5;
        float _1302 = dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301));
        float _1307 = (_1302 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1302);
        float _1315 = (dot(vec3(_513, _514, _515), vec3(_1307 * _1299, _1307 * _1300, _1307 * _1301)) + 1.0) * 0.5;
        float _3834 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1324 = sqrt(((_1300 * _1300) + (_1299 * _1299)) + (_1301 * _1301)) / (_1255 + 9.9999997473787516355514526367188e-06);
        float _3845 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1326 = _1325 * 2.0;
        float _1330 = (1.0 - _1325) / (_1325 + 1.0);
        float _3856 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1340 = ((((1.0 - _1331) * (_1326 + 2.0)) * exp2(log2(isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_1326 + 1.0))) + _1331) * _1255;
        float _1341 = _1223 * 0.5;
        float _1342 = _1233 * 0.5;
        float _1343 = _1243 * 0.5;
        float _1344 = dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343));
        float _1349 = (_1344 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1344);
        float _1357 = (dot(vec3(_513, _514, _515), vec3(_1349 * _1341, _1349 * _1342, _1349 * _1343)) + 1.0) * 0.5;
        float _3867 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1366 = sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _3878 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1368 = _1367 * 2.0;
        float _1372 = (1.0 - _1367) / (_1367 + 1.0);
        float _3889 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1382 = ((((1.0 - _1373) * (_1368 + 2.0)) * exp2(log2(isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * (_1368 + 1.0))) + _1373) * _1256;
        _1390 = _1223;
        _1391 = _1222;
        _1392 = _1221;
        _1393 = _1233;
        _1394 = _1232;
        _1395 = _1231;
        _1396 = _1243;
        _1397 = _1242;
        _1398 = _1241;
        _1399 = _1256;
        _1400 = _1255;
        _1401 = _1254;
        _1402 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)));
        _1403 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)));
        _1404 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
    }
    else
    {
        _1390 = _1078;
        _1391 = _1078;
        _1392 = _1078;
        _1393 = _1078;
        _1394 = _1078;
        _1395 = _1078;
        _1396 = _1078;
        _1397 = _1078;
        _1398 = _1078;
        _1399 = _1078;
        _1400 = _1078;
        _1401 = _1078;
        _1402 = 0.0;
        _1403 = 0.0;
        _1404 = 0.0;
    }
    float _1414 = (cbModelParam._m0[1u].x * (_1402 - _1090)) + _1090;
    float _1415 = (cbModelParam._m0[1u].x * (_1403 - _1091)) + _1091;
    float _1416 = (cbModelParam._m0[1u].x * (_1404 - _1092)) + _1092;
    float _1437 = fma(_1416, cbSceneParam._m0[89u].z, fma(_1415, cbSceneParam._m0[89u].y, _1414 * cbSceneParam._m0[89u].x));
    float _1440 = fma(_1416, cbSceneParam._m0[90u].z, fma(_1415, cbSceneParam._m0[90u].y, _1414 * cbSceneParam._m0[90u].x));
    float _1443 = fma(_1416, cbSceneParam._m0[91u].z, fma(_1415, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1414));
    float _1458 = _686 * 0.5;
    float _1459 = _687 * 0.5;
    float _1460 = _688 * 0.5;
    float _1461 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1392, _1395, _1398, _1401));
    float _1464 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1391, _1394, _1397, _1400));
    float _1467 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1390, _1393, _1396, _1399));
    float _1501;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1474 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1077, _1081, _1084, _1087));
        float _1478 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1079, _1082, _1085, _1088));
        float _1482 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1080, _1083, _1086, _1089));
        float _1489 = dot(vec4(cbModelParam._m0[39u]), vec4(_1458, _1459, _1460, 1.0));
        _1501 = dot(vec3(isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)), isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)), isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1489) ? 0.0 : (isnan(0.0) ? _1489 : max(0.0, _1489))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1501 = 1.0;
    }
    float _1512;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1503 = dot(vec4(cbModelParam._m0[40u]), vec4(_1458, _1459, _1460, 1.0));
        _1512 = dot(vec3(isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)), isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)), isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1503) ? 0.0 : (isnan(0.0) ? _1503 : max(0.0, _1503))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1512 = 1.0;
    }
    float _1516 = (_1512 * cbModelParam._m0[1u].x) + (_1501 * (1.0 - cbModelParam._m0[1u].x));
    float _1526 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _516);
    float _1527 = isnan(_1526) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1526 : min(cbModelParam._m0[25u].z, _1526));
    float _1607;
    float _1609;
    float _1611;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1574 = fma(_747, cbModelParam._m0[13u].z, fma(_743, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _739)) + cbModelParam._m0[13u].w;
        float _1578 = fma(_747, cbModelParam._m0[14u].z, fma(_743, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _739)) + cbModelParam._m0[14u].w;
        float _1582 = fma(_747, cbModelParam._m0[15u].z, fma(_743, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _739)) + cbModelParam._m0[15u].w;
        float _1585 = fma(_688, cbModelParam._m0[13u].z, fma(_687, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _686));
        float _1588 = fma(_688, cbModelParam._m0[14u].z, fma(_687, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _686));
        float _1591 = fma(_688, cbModelParam._m0[15u].z, fma(_687, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _686));
        float _1619;
        if (_1585 > 0.0)
        {
            _1619 = abs((1.0 - _1574) / _1585);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1585 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1574 + 1.0) / _1585);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1619 = frontier_phi_17_15_ladder;
        }
        float _1822;
        if (_1588 > 0.0)
        {
            _1822 = abs((1.0 - _1578) / _1588);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1588 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1578 + 1.0) / _1588);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1822 = frontier_phi_26_22_ladder;
        }
        float _2065;
        if (_1591 > 0.0)
        {
            _2065 = abs((1.0 - _1582) / _1591);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1591 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1582 + 1.0) / _1591);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2065 = frontier_phi_38_33_ladder;
        }
        float _2067 = isnan(_1822) ? _1619 : (isnan(_1619) ? _1822 : min(_1619, _1822));
        float _2068 = isnan(_2065) ? _2067 : (isnan(_2067) ? _2065 : min(_2067, _2065));
        float _2072 = (_2068 * _1585) + _1574;
        float _2073 = (_2068 * _1588) + _1578;
        float _2074 = (_2068 * _1591) + _1582;
        float _2075 = _2068 * 9.9999997473787516355514526367188e-05;
        float _2077 = (-1.0) - _2075;
        float _2079 = _2075 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2074 > _2079) || ((_2074 < _2077) || ((_2073 > _2079) || ((_2073 < _2077) || ((_2072 < _2077) || (_2072 > _2079))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2198 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2074, cbModelParam._m0[9u].z, fma(_2073, cbModelParam._m0[9u].y, _2072 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2074, cbModelParam._m0[10u].z, fma(_2073, cbModelParam._m0[10u].y, _2072 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2074, cbModelParam._m0[11u].z, fma(_2073, cbModelParam._m0[11u].y, _2072 * cbModelParam._m0[11u].x))), _1527);
            frontier_phi_16_38_ladder = _2198.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2198.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2198.x * cbModelParam._m0[1u].y;
        }
        _1607 = frontier_phi_16_38_ladder_2;
        _1609 = frontier_phi_16_38_ladder_1;
        _1611 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1595 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_686, _687, _688), _1527);
        _1607 = _1595.x * cbModelParam._m0[1u].y;
        _1609 = _1595.y * cbModelParam._m0[1u].y;
        _1611 = _1595.z * cbModelParam._m0[1u].y;
    }
    float _1615 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _516);
    float _1616 = isnan(_1615) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1615 : min(cbModelParam._m0[25u].w, _1615));
    float _1707;
    float _1709;
    float _1711;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1671 = fma(_747, cbModelParam._m0[21u].z, fma(_743, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _739)) + cbModelParam._m0[21u].w;
        float _1675 = fma(_747, cbModelParam._m0[22u].z, fma(_743, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _739)) + cbModelParam._m0[22u].w;
        float _1679 = fma(_747, cbModelParam._m0[23u].z, fma(_743, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _739)) + cbModelParam._m0[23u].w;
        float _1682 = fma(_688, cbModelParam._m0[21u].z, fma(_687, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _686));
        float _1685 = fma(_688, cbModelParam._m0[22u].z, fma(_687, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _686));
        float _1688 = fma(_688, cbModelParam._m0[23u].z, fma(_687, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _686));
        float _1827;
        if (_1682 > 0.0)
        {
            _1827 = abs((1.0 - _1671) / _1682);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1671 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1827 = frontier_phi_28_24_ladder;
        }
        float _2092;
        if (_1685 > 0.0)
        {
            _2092 = abs((1.0 - _1675) / _1685);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1685 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1675 + 1.0) / _1685);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2092 = frontier_phi_40_35_ladder;
        }
        float _2297;
        if (_1688 > 0.0)
        {
            _2297 = abs((1.0 - _1679) / _1688);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1688 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1679 + 1.0) / _1688);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2297 = frontier_phi_49_46_ladder;
        }
        float _2299 = isnan(_2092) ? _1827 : (isnan(_1827) ? _2092 : min(_1827, _2092));
        float _2300 = isnan(_2297) ? _2299 : (isnan(_2299) ? _2297 : min(_2299, _2297));
        float _2304 = (_2300 * _1682) + _1671;
        float _2305 = (_2300 * _1685) + _1675;
        float _2306 = (_2300 * _1688) + _1679;
        float _2307 = _2300 * 9.9999997473787516355514526367188e-05;
        float _2308 = (-1.0) - _2307;
        float _2310 = _2307 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2306 > _2310) || ((_2306 < _2308) || ((_2305 > _2310) || ((_2305 < _2308) || ((_2304 < _2308) || (_2304 > _2310))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2534 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2306, cbModelParam._m0[17u].z, fma(_2305, cbModelParam._m0[17u].y, _2304 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2306, cbModelParam._m0[18u].z, fma(_2305, cbModelParam._m0[18u].y, _2304 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2306, cbModelParam._m0[19u].z, fma(_2305, cbModelParam._m0[19u].y, _2304 * cbModelParam._m0[19u].x))), _1616);
            frontier_phi_25_49_ladder = _2534.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2534.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2534.x * cbModelParam._m0[1u].z;
        }
        _1707 = frontier_phi_25_49_ladder_2;
        _1709 = frontier_phi_25_49_ladder_1;
        _1711 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1691 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_686, _687, _688), _1616);
        _1707 = _1691.x * cbModelParam._m0[1u].z;
        _1709 = _1691.y * cbModelParam._m0[1u].z;
        _1711 = _1691.z * cbModelParam._m0[1u].z;
    }
    float _1723 = ((((1.0 - _707) * ((_694 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_707 * _694)) * _678;
    float _1724 = _1723 * ((cbModelParam._m0[1u].w * (_1707 - _1607)) + _1607);
    float _1725 = _1723 * ((cbModelParam._m0[1u].w * (_1709 - _1609)) + _1609);
    float _1726 = _1723 * ((cbModelParam._m0[1u].w * (_1711 - _1611)) + _1611);
    float _1729 = fma(_1726, cbSceneParam._m0[89u].z, fma(_1725, cbSceneParam._m0[89u].y, _1724 * cbSceneParam._m0[89u].x));
    float _1732 = fma(_1726, cbSceneParam._m0[90u].z, fma(_1725, cbSceneParam._m0[90u].y, _1724 * cbSceneParam._m0[90u].x));
    float _1735 = fma(_1726, cbSceneParam._m0[91u].z, fma(_1725, cbSceneParam._m0[91u].y, _1724 * cbSceneParam._m0[91u].x));
    uvec4 _1745 = floatBitsToUint(cbInstanceData._m0[_653 + 5u]);
    uint _1747 = _1745.x * 14u;
    uint _1748 = _1747 + 13u;
    float _1755 = _678 + (-1.0);
    float _1760 = (cbLight._m0[_1748].x * _1755) + 1.0;
    float _1761 = (cbLight._m0[_1748].y * _1755) + 1.0;
    float _1762 = (cbLight._m0[_1748].z * _1755) + 1.0;
    float _1763 = (cbLight._m0[_1748].w * _1755) + 1.0;
    uint _1764 = _1747 + 5u;
    float _1770 = isnan(1.0) ? _1761 : (isnan(_1761) ? 1.0 : min(_1761, 1.0));
    uint _1774 = _1747 + 4u;
    float _1781 = isnan(1.0) ? _1760 : (isnan(_1760) ? 1.0 : min(_1760, 1.0));
    uint _1785 = _1747 | 1u;
    float _1796 = dot(vec3(cbLight._m0[_1747].xyz), vec3(_513, _514, _515));
    float _1799 = dot(vec3(cbLight._m0[_1785].xyz), vec3(_513, _514, _515));
    float _4025 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _4036 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
    float _1804 = (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * 0.3183098733425140380859375;
    float _1806 = (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * 0.3183098733425140380859375;
    float _1813 = ((cbLight._m0[_1764].x * _1770) * _1806) + ((cbLight._m0[_1774].x * _1781) * _1804);
    float _1814 = ((_1770 * cbLight._m0[_1764].y) * _1806) + ((_1781 * cbLight._m0[_1774].y) * _1804);
    float _1815 = ((_1770 * cbLight._m0[_1764].z) * _1806) + ((_1781 * cbLight._m0[_1774].z) * _1804);
    uvec4 _1819 = floatBitsToUint(cbLight._m0[_1747 + 12u]);
    bool _1821 = _1819.x == 0u;
    float _1832;
    float _1834;
    float _1836;
    if (_1821)
    {
        _1832 = _1813;
        _1834 = _1814;
        _1836 = _1815;
    }
    else
    {
        uint _1840 = _1747 + 6u;
        float _1856 = (dot(vec3(cbLight._m0[_1747 + 2u].xyz), vec3(_513, _514, _515)) * 0.5) + 0.5;
        float _1857 = _1856 * _1856;
        float _4047 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
        float _1858 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1859 = isnan(1.0) ? _1762 : (isnan(_1762) ? 1.0 : min(_1762, 1.0));
        _1832 = (((cbLight._m0[_1840].x * 0.3183098733425140380859375) * _1858) * _1859) + _1813;
        _1834 = (((cbLight._m0[_1840].y * 0.3183098733425140380859375) * _1858) * _1859) + _1814;
        _1836 = (((cbLight._m0[_1840].z * 0.3183098733425140380859375) * _1858) * _1859) + _1815;
    }
    bool _1839 = _1819.y == 0u;
    float _1877;
    float _1879;
    float _1881;
    if (_1839)
    {
        _1877 = _1832;
        _1879 = _1834;
        _1881 = _1836;
    }
    else
    {
        uint _2036 = _1747 + 7u;
        float _2052 = (dot(vec3(cbLight._m0[_1747 + 3u].xyz), vec3(_513, _514, _515)) * 0.5) + 0.5;
        float _2053 = _2052 * _2052;
        float _4063 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        float _2054 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _2055 = isnan(1.0) ? _1763 : (isnan(_1763) ? 1.0 : min(_1763, 1.0));
        _1877 = (((cbLight._m0[_2036].x * 0.3183098733425140380859375) * _2054) * _2055) + _1832;
        _1879 = (((cbLight._m0[_2036].y * 0.3183098733425140380859375) * _2054) * _2055) + _1834;
        _1881 = (((cbLight._m0[_2036].z * 0.3183098733425140380859375) * _2054) * _2055) + _1836;
    }
    uint _1884 = _1747 + 8u;
    float _1897 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1747].w)) * _516) * 0.949999988079071044921875);
    float _1898 = _1897 * _1897;
    float _1899 = cbLight._m0[_1747].x + _592;
    float _1900 = cbLight._m0[_1747].y + _593;
    float _1901 = cbLight._m0[_1747].z + _594;
    float _1905 = inversesqrt(dot(vec3(_1899, _1900, _1901), vec3(_1899, _1900, _1901)));
    float _1906 = _1905 * _1899;
    float _1907 = _1905 * _1900;
    float _1908 = _1905 * _1901;
    float _1909 = dot(vec3(_513, _514, _515), vec3(cbLight._m0[_1747].xyz));
    float _4079 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1912 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _4090 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _1913 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _1914 = dot(vec3(_513, _514, _515), vec3(_1906, _1907, _1908));
    float _4101 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _1917 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _1918 = dot(vec3(cbLight._m0[_1747].xyz), vec3(_1906, _1907, _1908));
    float _4112 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1922 = _1898 * _1898;
    float _1926 = ((_1917 * _1917) * (_1922 + (-1.0))) + 1.0;
    float _1937 = (exp2(log2(1.0 - (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1938 = 1.0 - _1898;
    float _1949 = (0.5 / (((_1913 * ((_1912 * _1938) + _1898)) + 9.9999999392252902907785028219223e-09) + (((_1913 * _1938) + _1898) * _1912))) * _1912;
    float _4123 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
    float _1951 = (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_1922 / ((_1926 * _1926) * 3.141590118408203125));
    uint _1962 = _1747 + 9u;
    float _1973 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1785].w)) * _516) * 0.949999988079071044921875);
    float _1974 = _1973 * _1973;
    float _1975 = cbLight._m0[_1785].x + _592;
    float _1976 = cbLight._m0[_1785].y + _593;
    float _1977 = cbLight._m0[_1785].z + _594;
    float _1981 = inversesqrt(dot(vec3(_1975, _1976, _1977), vec3(_1975, _1976, _1977)));
    float _1982 = _1981 * _1975;
    float _1983 = _1981 * _1976;
    float _1984 = _1981 * _1977;
    float _1985 = dot(vec3(_513, _514, _515), vec3(cbLight._m0[_1785].xyz));
    float _4134 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1988 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _1989 = dot(vec3(_513, _514, _515), vec3(_1982, _1983, _1984));
    float _4145 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1992 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
    float _1993 = dot(vec3(cbLight._m0[_1785].xyz), vec3(_1982, _1983, _1984));
    float _4156 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1997 = _1974 * _1974;
    float _2001 = ((_1992 * _1992) * (_1997 + (-1.0))) + 1.0;
    float _2010 = (exp2(log2(1.0 - (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2011 = 1.0 - _1974;
    float _2021 = (0.5 / (((_1913 * ((_1988 * _2011) + _1974)) + 9.9999999392252902907785028219223e-09) + (((_1913 * _2011) + _1974) * _1988))) * _1988;
    float _4167 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2023 = (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_1997 / ((_2001 * _2001) * 3.141590118408203125));
    float _2033 = (((_2010 * cbLight._m0[_1962].x) * _2023) * _1770) + (((_1937 * cbLight._m0[_1884].x) * _1951) * _1781);
    float _2034 = (((_2010 * cbLight._m0[_1962].y) * _2023) * _1770) + (((_1937 * cbLight._m0[_1884].y) * _1951) * _1781);
    float _2035 = (((_2010 * cbLight._m0[_1962].z) * _2023) * _1770) + (((_1937 * cbLight._m0[_1884].z) * _1951) * _1781);
    float _2097;
    float _2099;
    float _2101;
    if (_1821)
    {
        _2097 = _2033;
        _2099 = _2034;
        _2101 = _2035;
    }
    else
    {
        uint _2103 = _1747 + 2u;
        uint _2107 = _1747 + 10u;
        float _2121 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2103].w)) * _516) * 0.949999988079071044921875);
        float _2122 = _2121 * _2121;
        float _2123 = cbLight._m0[_2103].x + _592;
        float _2124 = cbLight._m0[_2103].y + _593;
        float _2125 = cbLight._m0[_2103].z + _594;
        float _2129 = inversesqrt(dot(vec3(_2123, _2124, _2125), vec3(_2123, _2124, _2125)));
        float _2130 = _2129 * _2123;
        float _2131 = _2129 * _2124;
        float _2132 = _2129 * _2125;
        float _2133 = dot(vec3(_513, _514, _515), vec3(cbLight._m0[_2103].xyz));
        float _4178 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2136 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _2137 = dot(vec3(_513, _514, _515), vec3(_2130, _2131, _2132));
        float _4189 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2140 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _2141 = dot(vec3(cbLight._m0[_2103].xyz), vec3(_2130, _2131, _2132));
        float _4200 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
        float _2145 = _2122 * _2122;
        float _2149 = ((_2140 * _2140) * (_2145 + (-1.0))) + 1.0;
        float _2158 = (exp2(log2(1.0 - (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2159 = 1.0 - _2122;
        float _2169 = (0.5 / (((_1913 * ((_2136 * _2159) + _2122)) + 9.9999999392252902907785028219223e-09) + (((_1913 * _2159) + _2122) * _2136))) * _2136;
        float _4211 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
        float _2171 = (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_2145 / ((_2149 * _2149) * 3.141590118408203125));
        float _2172 = isnan(1.0) ? _1762 : (isnan(_1762) ? 1.0 : min(_1762, 1.0));
        _2097 = (((_2158 * cbLight._m0[_2107].x) * _2171) * _2172) + _2033;
        _2099 = (((_2158 * cbLight._m0[_2107].y) * _2171) * _2172) + _2034;
        _2101 = (((_2158 * cbLight._m0[_2107].z) * _2171) * _2172) + _2035;
    }
    float _2207;
    float _2209;
    float _2211;
    if (_1839)
    {
        _2207 = _2097;
        _2209 = _2099;
        _2211 = _2101;
    }
    else
    {
        uint _2218 = _1747 + 3u;
        uint _2222 = _1747 + 11u;
        float _2236 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2218].w)) * _516) * 0.949999988079071044921875);
        float _2237 = _2236 * _2236;
        float _2238 = cbLight._m0[_2218].x + _592;
        float _2239 = cbLight._m0[_2218].y + _593;
        float _2240 = cbLight._m0[_2218].z + _594;
        float _2244 = inversesqrt(dot(vec3(_2238, _2239, _2240), vec3(_2238, _2239, _2240)));
        float _2245 = _2244 * _2238;
        float _2246 = _2244 * _2239;
        float _2247 = _2244 * _2240;
        float _2248 = dot(vec3(_513, _514, _515), vec3(cbLight._m0[_2218].xyz));
        float _4227 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2251 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _2252 = dot(vec3(_513, _514, _515), vec3(_2245, _2246, _2247));
        float _4238 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        float _2255 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _2256 = dot(vec3(cbLight._m0[_2218].xyz), vec3(_2245, _2246, _2247));
        float _4249 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2260 = _2237 * _2237;
        float _2264 = ((_2255 * _2255) * (_2260 + (-1.0))) + 1.0;
        float _2273 = (exp2(log2(1.0 - (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2274 = 1.0 - _2237;
        float _2284 = (0.5 / (((_1913 * ((_2251 * _2274) + _2237)) + 9.9999999392252902907785028219223e-09) + (((_1913 * _2274) + _2237) * _2251))) * _2251;
        float _4260 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
        float _2286 = (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_2260 / ((_2264 * _2264) * 3.141590118408203125));
        float _2287 = isnan(1.0) ? _1763 : (isnan(_1763) ? 1.0 : min(_1763, 1.0));
        _2207 = (((_2273 * cbLight._m0[_2222].x) * _2286) * _2287) + _2097;
        _2209 = (((_2273 * cbLight._m0[_2222].y) * _2286) * _2287) + _2099;
        _2211 = (((_2273 * cbLight._m0[_2222].z) * _2286) * _2287) + _2101;
    }
    float _2422;
    float _2424;
    float _2426;
    float _2428;
    float _2430;
    float _2432;
    if (_1745.y == 0u)
    {
        float _2362 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2363 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2362;
        float _2364 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2362;
        float _2365 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2362;
        uvec4 _2377 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2378 = _2377.x;
        uint _2389 = uint((float(_2377.y) * floor(float(uint(cbSceneParam._m0[85u].y * _614) / _2378))) + floor(float(uint(cbSceneParam._m0[85u].x * _613) / _2378)));
        float _2399 = (log2(_2365 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2400 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
        uint _2403 = uint(isnan(14.0) ? _2400 : (isnan(_2400) ? 14.0 : min(_2400, 14.0)));
        uvec4 _2408 = texelFetch(g_lightClusterGridBuffer, int(((_2403 << 2u) + (_2389 << 6u)) >> 2u));
        uint _2409 = _2408.x;
        uint _2410 = _2377.z;
        float _2539;
        float _2541;
        float _2543;
        float _2545;
        float _2547;
        float _2549;
        if (((((1u << ((_2410 >> 4u) & 15u)) + 4294967295u) & _2409) == 0u) || ((_2410 & 240u) == 0u))
        {
            _2539 = 0.0;
            _2541 = 0.0;
            _2543 = 0.0;
            _2545 = 0.0;
            _2547 = 0.0;
            _2549 = 0.0;
        }
        else
        {
            float _2540;
            float _2542;
            float _2544;
            float _2546;
            float _2548;
            float _2550;
            float _2701 = 0.0;
            float _2702 = 0.0;
            float _2703 = 0.0;
            float _2704 = 0.0;
            float _2705 = 0.0;
            float _2706 = 0.0;
            uint _2707 = 0u;
            uint _2716;
            bool _2717;
            for (;;)
            {
                _2716 = texelFetch(g_lightClassification, int((((_2403 << 5u) + (_2389 << 9u)) + (_2707 << 2u)) >> 2u)).x;
                _2717 = _2716 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2717)
                {
                    frontier_phi_66_pred = _2701;
                    frontier_phi_66_pred_1 = _2706;
                    frontier_phi_66_pred_2 = _2705;
                    frontier_phi_66_pred_3 = _2704;
                    frontier_phi_66_pred_4 = _2703;
                    frontier_phi_66_pred_5 = _2702;
                }
                else
                {
                    float _2846;
                    float _2847;
                    float _2848;
                    float _2849;
                    float _2850;
                    float _2851;
                    uint _2852;
                    _2846 = _2701;
                    _2847 = _2702;
                    _2848 = _2703;
                    _2849 = _2704;
                    _2850 = _2705;
                    _2851 = _2706;
                    _2852 = _2716;
                    float _2773;
                    float _2774;
                    float _2775;
                    float _2776;
                    float _2777;
                    float _2778;
                    for (;;)
                    {
                        uint _2856 = uint(findLSB(_2852)) + (_2707 << 5u);
                        uint _2853 = (_2852 + 4294967295u) & _2852;
                        uint _2858 = _2856 * 48u;
                        vec4 _2872 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2858)).x, texelFetch(g_PointLightRenderingBuffer, int(_2858 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2858 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2858 + 3u)).x));
                        uint _2878 = (_2856 * 48u) + 4u;
                        vec4 _2891 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2878)).x, texelFetch(g_PointLightRenderingBuffer, int(_2878 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2878 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2878 + 3u)).x));
                        uint _2897 = (_2856 * 48u) + 8u;
                        vec3 _2908 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2897)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 2u)).x));
                        float _2912 = _2872.x - _2363;
                        float _2913 = _2872.y - _2364;
                        float _2914 = _2872.z - _2365;
                        float _2915 = dot(vec3(_2912, _2913, _2914), vec3(_2912, _2913, _2914));
                        float _2918 = inversesqrt(_2915);
                        float _2919 = _2918 * _2912;
                        float _2920 = _2918 * _2913;
                        float _2921 = _2918 * _2914;
                        float _2922 = dot(vec3(_634, _637, _640), vec3(_2919, _2920, _2921));
                        float _2927 = 1.0 - (_2915 * _2872.w);
                        float _4286 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
                        float _2928 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
                        float _2929 = sqrt(_2915) * _2891.w;
                        float _2932 = 1.39999997615814208984375 / (_2929 + 1.39999997615814208984375);
                        float _2933 = _2932 * _2932;
                        float _2936 = ((1.0 - _2933) * _2922) + _2933;
                        float _2939 = _2929 * _2929;
                        float _2943 = ((isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0))) * _2928) / ((_2939 * 0.699999988079071044921875) + 1.0);
                        float _2947 = (-0.0) - _2363;
                        float _2948 = (-0.0) - _2364;
                        float _2949 = (-0.0) - _2365;
                        float _2953 = inversesqrt(dot(vec3(_2947, _2948, _2949), vec3(_2947, _2948, _2949)));
                        float _2954 = _2953 * _2947;
                        float _2955 = _2953 * _2948;
                        float _2956 = _2953 * _2949;
                        float _2964 = exp2(log2(1.0 / ((_2939 * 3.5) + 5.0)) * 0.25);
                        float _2965 = 1.0 - _694;
                        float _2972 = sqrt(1.0 - ((1.0 - (_2965 * _2965)) * (1.0 - (_2964 * _2964))));
                        float _2973 = _2972 * _2972;
                        float _2974 = _2973 * _2973;
                        float _2975 = _2954 + _2919;
                        float _2976 = _2955 + _2920;
                        float _2977 = _2956 + _2921;
                        float _2981 = inversesqrt(dot(vec3(_2975, _2976, _2977), vec3(_2975, _2976, _2977)));
                        float _2985 = dot(vec3(_634, _637, _640), vec3(_2954, _2955, _2956));
                        float _4302 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
                        float _2988 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
                        float _2989 = dot(vec3(_634, _637, _640), vec3(_2981 * _2975, _2981 * _2976, _2981 * _2977));
                        float _4313 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                        float _2992 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
                        float _2996 = ((_2992 * _2992) * (_2974 + (-1.0))) + 1.0;
                        float _2997 = _2932 * _2973;
                        float _2998 = _2997 * _2997;
                        float _3001 = ((1.0 - _2998) * _2922) + _2998;
                        float _4324 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                        float _3002 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
                        float _3003 = 1.0 - _2973;
                        float _3013 = (0.5 / (((_3002 * ((_2988 * _3003) + _2973)) + 9.9999999392252902907785028219223e-09) + (((_3002 * _3003) + _2973) * _2988))) * _3002;
                        float _4335 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                        float _3024 = (((_2974 * 3.1415927410125732421875) * (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0)))) / ((_2996 * _2996) * ((_2939 * 2.1991131305694580078125) + 3.141590118408203125))) * _2928;
                        _2776 = (_2943 * _2891.x) + _2849;
                        _2777 = (_2943 * _2891.y) + _2850;
                        _2778 = (_2943 * _2891.z) + _2851;
                        _2773 = (_3024 * _2908.x) + _2846;
                        _2774 = (_3024 * _2908.y) + _2847;
                        _2775 = (_3024 * _2908.z) + _2848;
                        if (_2853 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2846 = _2773;
                            _2847 = _2774;
                            _2848 = _2775;
                            _2849 = _2776;
                            _2850 = _2777;
                            _2851 = _2778;
                            _2852 = _2853;
                        }
                    }
                    frontier_phi_66_pred = _2773;
                    frontier_phi_66_pred_1 = _2778;
                    frontier_phi_66_pred_2 = _2777;
                    frontier_phi_66_pred_3 = _2776;
                    frontier_phi_66_pred_4 = _2775;
                    frontier_phi_66_pred_5 = _2774;
                }
                _2540 = frontier_phi_66_pred;
                _2550 = frontier_phi_66_pred_1;
                _2548 = frontier_phi_66_pred_2;
                _2546 = frontier_phi_66_pred_3;
                _2544 = frontier_phi_66_pred_4;
                _2542 = frontier_phi_66_pred_5;
                uint _2708 = _2707 + 1u;
                if (_2708 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2701 = _2540;
                    _2702 = _2542;
                    _2703 = _2544;
                    _2704 = _2546;
                    _2705 = _2548;
                    _2706 = _2550;
                    _2707 = _2708;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2539 = _2540;
            _2541 = _2542;
            _2543 = _2544;
            _2545 = _2546;
            _2547 = _2548;
            _2549 = _2550;
        }
        uvec4 _2553 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2554 = _2553.z;
        uint _2556 = (_2554 >> 8u) & 15u;
        float _2669;
        float _2671;
        float _2673;
        float _2675;
        float _2677;
        float _2679;
        if (((4294967295u << _2556) & _2409) == 0u)
        {
            _2669 = _2539;
            _2671 = _2541;
            _2673 = _2543;
            _2675 = _2545;
            _2677 = _2547;
            _2679 = _2549;
        }
        else
        {
            float _2694 = inversesqrt(dot(vec3(_2363, _2364, _2365), vec3(_2363, _2364, _2365)));
            float _2695 = _2694 * _2363;
            float _2696 = _2694 * _2364;
            float _2697 = _2694 * _2365;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2556 < ((_2554 >> 12u) & 15u))
            {
                float _2670;
                float _2672;
                float _2674;
                float _2676;
                float _2678;
                float _2680;
                float _2829 = _2539;
                float _2830 = _2541;
                float _2831 = _2543;
                float _2832 = _2545;
                float _2833 = _2547;
                float _2834 = _2549;
                uint _2835 = _2556;
                uint _2844;
                bool _2845;
                for (;;)
                {
                    _2844 = texelFetch(g_lightClassification, int((((_2403 << 5u) + (_2389 << 9u)) + (_2835 << 2u)) >> 2u)).x;
                    _2845 = _2844 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2845)
                    {
                        frontier_phi_77_pred = _2834;
                        frontier_phi_77_pred_1 = _2833;
                        frontier_phi_77_pred_2 = _2832;
                        frontier_phi_77_pred_3 = _2831;
                        frontier_phi_77_pred_4 = _2830;
                        frontier_phi_77_pred_5 = _2829;
                    }
                    else
                    {
                        float _3038;
                        float _3039;
                        float _3040;
                        float _3041;
                        float _3042;
                        float _3043;
                        float _3333;
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3051 = _2829;
                        float _3052 = _2830;
                        float _3053 = _2831;
                        float _3054 = _2832;
                        float _3055 = _2833;
                        float _3056 = _2834;
                        uint _3057 = _2844;
                        uint _3058;
                        vec4 _3083;
                        float _3084;
                        vec4 _3099;
                        vec3 _3111;
                        vec4 _3126;
                        vec4 _3142;
                        float _3189;
                        bool _3190;
                        for (;;)
                        {
                            uint _3068 = ((_2835 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3057));
                            _3058 = (_3057 + 4294967295u) & _3057;
                            uint _3070 = _3068 * 40u;
                            _3083 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3070)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 3u)).x));
                            _3084 = _3083.w;
                            uint _3086 = (_3068 * 40u) + 4u;
                            _3099 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 3u)).x));
                            uint _3101 = (_3068 * 40u) + 8u;
                            _3111 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3101)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 2u)).x));
                            uint _3113 = (_3068 * 40u) + 16u;
                            _3126 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3113)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 3u)).x));
                            uint _3129 = (_3068 * 40u) + 20u;
                            _3142 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3129)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 3u)).x));
                            uint _3145 = (_3068 * 40u) + 24u;
                            vec4 _3158 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3145)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 3u)).x));
                            uint _3164 = (_3068 * 40u) + 28u;
                            vec4 _3177 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3164)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 3u)).x));
                            _3189 = fma(_2365, _3177.z, fma(_2364, _3177.y, _3177.x * _2363)) + _3177.w;
                            _3190 = !((fma(_2365, _3158.z, fma(_2364, _3158.y, _3158.x * _2363)) + _3158.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3190)
                            {
                                float _3217 = _3083.x - _2363;
                                float _3218 = _3083.y - _2364;
                                float _3219 = _3083.z - _2365;
                                float _3220 = dot(vec3(_3217, _3218, _3219), vec3(_3217, _3218, _3219));
                                float _3223 = inversesqrt(_3220);
                                float _3224 = _3223 * _3217;
                                float _3225 = _3223 * _3218;
                                float _3226 = _3223 * _3219;
                                float _3230 = 1.0 - (_3220 / (_3084 * _3084));
                                float _4346 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                                float _3231 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
                                float _3235 = sqrt(_3220) * _3099.w;
                                float _3237 = 1.39999997615814208984375 / (_3235 + 1.39999997615814208984375);
                                float _3238 = _3237 * _3237;
                                float _3241 = ((1.0 - _3238) * dot(vec3(_3224, _3225, _3226), vec3(_634, _637, _640))) + _3238;
                                float _3244 = _3235 * _3235;
                                float _3248 = (fma(_2365, _3126.z, fma(_2364, _3126.y, _3126.x * _2363)) + _3126.w) / _3189;
                                float _3249 = (fma(_2365, _3142.z, fma(_2364, _3142.y, _3142.x * _2363)) + _3142.w) / _3189;
                                float _3253 = 1.0 - dot(vec2(_3248, _3249), vec2(_3248, _3249));
                                float _4362 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                                float _3254 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
                                float _3255 = _3254 * (((isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0))) * _3231) / ((_3244 * 0.699999988079071044921875) + 1.0));
                                float _3267 = exp2(log2(1.0 / ((_3244 * 3.5) + 5.0)) * 0.25);
                                float _3268 = 1.0 - _694;
                                float _3275 = sqrt(1.0 - ((1.0 - (_3268 * _3268)) * (1.0 - (_3267 * _3267))));
                                float _3276 = _3275 * _3275;
                                float _3277 = _3276 * _3276;
                                float _3278 = _3224 - _2695;
                                float _3279 = _3225 - _2696;
                                float _3280 = _3226 - _2697;
                                float _3284 = inversesqrt(dot(vec3(_3278, _3279, _3280), vec3(_3278, _3279, _3280)));
                                float _3288 = dot(vec3(_634, _637, _640), vec3((-0.0) - _2695, (-0.0) - _2696, (-0.0) - _2697));
                                float _4373 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                                float _3291 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
                                float _3292 = dot(vec3(_634, _637, _640), vec3(_3284 * _3278, _3284 * _3279, _3284 * _3280));
                                float _4384 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                                float _3295 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
                                float _3299 = ((_3295 * _3295) * (_3277 + (-1.0))) + 1.0;
                                float _3300 = _3237 * _3276;
                                float _3301 = _3300 * _3300;
                                float _3307 = ((1.0 - _3301) * dot(vec3(_634, _637, _640), vec3(_3224, _3225, _3226))) + _3301;
                                float _4395 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                                float _3308 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
                                float _3309 = 1.0 - _3276;
                                float _3319 = (0.5 / (((_3308 * ((_3291 * _3309) + _3276)) + 9.9999999392252902907785028219223e-09) + (((_3308 * _3309) + _3276) * _3291))) * _3308;
                                float _4406 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                                float _3329 = (_3254 * _3231) * (((_3277 * 3.1415927410125732421875) * (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0)))) / ((_3299 * _3299) * ((_3244 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3255 * _3099.y;
                                frontier_phi_83_pred_1 = _3255 * _3099.x;
                                frontier_phi_83_pred_2 = _3329 * _3111.z;
                                frontier_phi_83_pred_3 = _3329 * _3111.y;
                                frontier_phi_83_pred_4 = _3329 * _3111.x;
                                frontier_phi_83_pred_5 = _3255 * _3099.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3337 = frontier_phi_83_pred;
                            _3336 = frontier_phi_83_pred_1;
                            _3335 = frontier_phi_83_pred_2;
                            _3334 = frontier_phi_83_pred_3;
                            _3333 = frontier_phi_83_pred_4;
                            _3338 = frontier_phi_83_pred_5;
                            _3041 = _3336 + _3054;
                            _3042 = _3337 + _3055;
                            _3043 = _3338 + _3056;
                            _3038 = _3333 + _3051;
                            _3039 = _3334 + _3052;
                            _3040 = _3335 + _3053;
                            if (_3058 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3051 = _3038;
                                _3052 = _3039;
                                _3053 = _3040;
                                _3054 = _3041;
                                _3055 = _3042;
                                _3056 = _3043;
                                _3057 = _3058;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3043;
                        frontier_phi_77_pred_1 = _3042;
                        frontier_phi_77_pred_2 = _3041;
                        frontier_phi_77_pred_3 = _3040;
                        frontier_phi_77_pred_4 = _3039;
                        frontier_phi_77_pred_5 = _3038;
                    }
                    _2680 = frontier_phi_77_pred;
                    _2678 = frontier_phi_77_pred_1;
                    _2676 = frontier_phi_77_pred_2;
                    _2674 = frontier_phi_77_pred_3;
                    _2672 = frontier_phi_77_pred_4;
                    _2670 = frontier_phi_77_pred_5;
                    uint _2836 = _2835 + 1u;
                    if (_2836 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2829 = _2670;
                        _2830 = _2672;
                        _2831 = _2674;
                        _2832 = _2676;
                        _2833 = _2678;
                        _2834 = _2680;
                        _2835 = _2836;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2674;
                frontier_phi_58_59_ladder_1 = _2680;
                frontier_phi_58_59_ladder_2 = _2678;
                frontier_phi_58_59_ladder_3 = _2676;
                frontier_phi_58_59_ladder_4 = _2672;
                frontier_phi_58_59_ladder_5 = _2670;
            }
            else
            {
                frontier_phi_58_59_ladder = _2543;
                frontier_phi_58_59_ladder_1 = _2549;
                frontier_phi_58_59_ladder_2 = _2547;
                frontier_phi_58_59_ladder_3 = _2545;
                frontier_phi_58_59_ladder_4 = _2541;
                frontier_phi_58_59_ladder_5 = _2539;
            }
            _2669 = frontier_phi_58_59_ladder_5;
            _2671 = frontier_phi_58_59_ladder_4;
            _2673 = frontier_phi_58_59_ladder;
            _2675 = frontier_phi_58_59_ladder_3;
            _2677 = frontier_phi_58_59_ladder_2;
            _2679 = frontier_phi_58_59_ladder_1;
        }
        float _2684 = isnan(1.0) ? _678 : (isnan(_678) ? 1.0 : min(_678, 1.0));
        _2422 = (_2684 * _2675) + _1877;
        _2424 = (_2684 * _2677) + _1879;
        _2426 = (_2684 * _2679) + _1881;
        _2428 = ((_2669 * 0.039999999105930328369140625) * _2684) + _2207;
        _2430 = ((_2671 * 0.039999999105930328369140625) * _2684) + _2209;
        _2432 = ((_2673 * 0.039999999105930328369140625) * _2684) + _2211;
    }
    else
    {
        _2422 = _1877;
        _2424 = _1879;
        _2426 = _1881;
        _2428 = _2207;
        _2430 = _2209;
        _2432 = _2211;
    }
    uint _2438 = _654 + uint(cbMatDynParam._m0[0u].w);
    float _2444 = cbInstanceData._m0[_2438].x * (_432 - (_448 * _432));
    float _2445 = cbInstanceData._m0[_2438].y * (_433 - (_448 * _433));
    float _2446 = cbInstanceData._m0[_2438].z * (_434 - (_448 * _434));
    float _4422 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _4433 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _4444 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _2463 = (((isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_2422 + ((isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0))) * _678))) + ((_2428 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _1516)) * cbPerFrame._m0[3u].x)) + _2444;
    float _2465 = (_2445 + ((_2430 + ((isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))) * _1516)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (_2424 + ((isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))) * _678)));
    float _2467 = (_2446 + ((_2432 + ((isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) * _1516)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_2426 + ((isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))) * _678)));
    float _2468 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
    float _2469 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _2470 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
    float _2476 = cbMtdParam._m0[2u].x * _2444;
    float _2477 = cbMtdParam._m0[2u].y * _2445;
    float _2478 = cbMtdParam._m0[2u].z * _2446;
    float _4470 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2480 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
    uint _2481 = _653 + 6u;
    float _2489 = _613 / cbSceneParam._m0[86u].x;
    float _2490 = _614 / cbSceneParam._m0[86u].y;
    vec4 _2504 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2489, _2490, (log2((isnan(cbSceneParam._m0[77u].w) ? _535 : (isnan(_535) ? cbSceneParam._m0[77u].w : min(_535, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2506 = _2504.x;
    float _2507 = _2504.y;
    float _2508 = _2504.z;
    float _2509 = _2504.w;
    float _2602;
    float _2604;
    float _2606;
    float _2608;
    if (_535 > cbSceneParam._m0[78u].w)
    {
        float _2564 = isnan(_535) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _535 : min(cbSceneParam._m0[80u].w, _535));
        float _2565 = _2564 / _535;
        float _2576 = _2565 * _585;
        float _2577 = _586 * _2565;
        float _2578 = (-0.0) - _2577;
        float _2580 = _2565 * _587;
        float _2582 = (cbSceneParam._m0[77u].w * _2578) / _2564;
        float _2583 = _2582 + cbSceneParam._m0[79u].w;
        float _2584 = cbSceneParam._m0[79u].w - _2577;
        float _2590 = sqrt(((_2576 * _2576) + (_2577 * _2577)) + (_2580 * _2580));
        float _2593 = (1.0 - (cbSceneParam._m0[77u].w / _2564)) * _2590;
        float _2598 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2600 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2786;
        if (abs((_2578 - _2582) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2786 = ((((_2583 > 0.0) ? exp2(_2598 * _2583) : (2.0 - exp2(_2600 * _2583))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2593;
        }
        else
        {
            float _2730 = 1.0 / cbSceneParam._m0[80u].x;
            float _2731 = isnan(_2584) ? _2583 : (isnan(_2583) ? _2584 : max(_2583, _2584));
            float _2732 = isnan(_2584) ? _2583 : (isnan(_2583) ? _2584 : min(_2583, _2584));
            float _2741 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : min(_2731, 0.0));
            float _2742 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : min(_2732, 0.0));
            _2786 = ((abs(_2590 / _2578) * cbSceneParam._m0[80u].y) * ((((_2741 - _2742) * 2.0) - ((exp2(_2598 * (isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0)))) - exp2(_2598 * (isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0))))) * _2730)) - ((exp2(_2600 * _2741) - exp2(_2600 * _2742)) * _2730))) + (_2593 * cbSceneParam._m0[80u].z);
        }
        vec4 _2788 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2489, _2490, 1.0), 0.0);
        float _2797 = exp2((_2786 * (-1.44269502162933349609375)) * (1.0 - _2788.w));
        float _2798 = log2(_2797);
        float _2814 = log2(_2509);
        _2602 = (exp2(_2814 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2798 * cbSceneParam._m0[78u].x)) * _2788.x) / cbSceneParam._m0[78u].x)) + _2506;
        _2604 = (exp2(_2814 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2798 * cbSceneParam._m0[78u].y)) * _2788.y) / cbSceneParam._m0[78u].y)) + _2507;
        _2606 = (exp2(_2814 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2798 * cbSceneParam._m0[78u].z)) * _2788.z) / cbSceneParam._m0[78u].z)) + _2508;
        _2608 = _2797 * _2509;
    }
    else
    {
        _2602 = _2506;
        _2604 = _2507;
        _2606 = _2508;
        _2608 = _2509;
    }
    bool _2824;
    vec4 _2618;
    vec4 _2640;
    float _2642;
    float _2646;
    float _2647;
    float _2648;
    float _2651;
    float _2654;
    float _2657;
    float _2658;
    bool _2668;
    for (;;)
    {
        _2618 = cbMatDynParam._m0[0u];
        float _2620 = roundEven(_2618.y);
        bool _2621 = _2620 == 3.0;
        float _2622 = log2(_2608);
        float _2626 = exp2(_2622 * cbSceneParam._m0[78u].x);
        float _2627 = exp2(_2622 * cbSceneParam._m0[78u].y);
        float _2628 = exp2(_2622 * cbSceneParam._m0[78u].z);
        float _2629 = _2626 * _2468;
        float _2630 = _2627 * _2469;
        float _2631 = _2628 * _2470;
        float _2638 = _601 + (-0.5);
        _2640 = cbMtdParam._m0[1u];
        _2642 = _2640.y * _2638;
        float _2645 = (_2620 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2646 = _2645 * (_2621 ? _2629 : (_2629 + (cbSceneParam._m0[72u].w * _2602)));
        _2647 = _2645 * (_2621 ? _2630 : (_2630 + (cbSceneParam._m0[72u].w * _2604)));
        _2648 = _2645 * (_2621 ? _2631 : (_2631 + (cbSceneParam._m0[72u].w * _2606)));
        _2651 = ((_2476 * _2480) * _2626) * _2645;
        _2654 = ((_2477 * _2480) * _2627) * _2645;
        _2657 = ((_2478 * _2480) * _2628) * _2645;
        _2658 = _2638 * 0.999000012874603271484375;
        _2668 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2668)
        {
            if ((cbInstanceData._m0[_653 + 7u].x + _2658) < 0.5)
            {
                _2824 = true;
                break;
            }
        }
        uint _2765 = _654 + uint(_2618.w);
        if ((cbInstanceData._m0[_2765].w < 1.0) && ((cbInstanceData._m0[_2765].w + _2658) < 0.5))
        {
            _2824 = true;
            break;
        }
        if ((_2642 + 1.0) < _2640.x)
        {
            _2824 = true;
            break;
        }
        _2824 = false;
        break;
    }
    float _3029;
    if (_2824)
    {
        discard_state = true;
        _3029 = 0.0;
    }
    else
    {
        _3029 = cbInstanceData._m0[_2481].w;
    }
    SV_Target.x = _2646;
    SV_Target.y = _2647;
    SV_Target.z = _2648;
    SV_Target.w = _3029;
    SV_Target_1.x = _2651;
    SV_Target_1.y = _2654;
    SV_Target_1.z = _2657;
    SV_Target_1.w = cbInstanceData._m0[_2481].w;
    discard_exit();
}


