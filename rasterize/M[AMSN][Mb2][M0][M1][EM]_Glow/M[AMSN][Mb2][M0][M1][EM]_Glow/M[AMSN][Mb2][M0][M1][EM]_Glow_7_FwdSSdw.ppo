#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _925;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _189 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _190 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _191 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_189, _190, _191), vec3(_189, _190, _191)));
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _233 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _239 = _233.x * cbMtdParam._m0[9u].x;
    float _240 = _233.y * cbMtdParam._m0[9u].y;
    float _241 = _233.z * cbMtdParam._m0[9u].z;
    vec4 _261 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _276 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _278 = _276.x;
    vec4 _290 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _294 = _290.z;
    float _298 = (_290.x * 2.0) + (-1.0);
    float _300 = (_290.y * 2.0) + (-1.0);
    float _301 = dot(vec2(_298, _300), vec2(_298, _300));
    float _3325 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _307 = sqrt(1.0 - (isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0))));
    vec4 _335 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _350 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _365 = (TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_261.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].x + 1.0);
    float _3336 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _366 = isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0));
    float _369 = fma(_307, _204 * NORMAL.x, fma(_300, _211 * TANGENT.x, (_197 * _189) * _298));
    float _372 = fma(_307, _204 * NORMAL.y, fma(_300, _211 * TANGENT.y, (_197 * _190) * _298));
    float _375 = fma(_307, _204 * NORMAL.z, fma(_300, _211 * TANGENT.z, (_197 * _191) * _298));
    float _379 = inversesqrt(dot(vec3(_369, _372, _375), vec3(_369, _372, _375)));
    float _380 = _379 * _369;
    float _381 = _379 * _372;
    float _382 = _379 * _375;
    float _3347 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _383 = isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0));
    float _3358 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3369 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3380 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3391 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _387 = isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0));
    float _403 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _444 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _454 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _444);
    float _455 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _444);
    float _456 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _444);
    float _460 = inversesqrt(dot(vec3(_454, _455, _456), vec3(_454, _455, _456)));
    float _461 = _454 * _460;
    float _462 = _455 * _460;
    float _463 = _456 * _460;
    float _469 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _470 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _490 = fma(_382, cbSceneParam._m0[5u].z, fma(_381, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _380));
    float _493 = fma(_382, cbSceneParam._m0[6u].z, fma(_381, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _380));
    float _496 = fma(_382, cbSceneParam._m0[7u].z, fma(_381, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _380));
    uint _509 = uint(roundEven(NORMAL.w)) * 13u;
    uint _511 = _509 + 9u;
    uint _512 = _511 + uint(cbMatDynParam._m0[0u].w);
    float _518 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0)))) * cbInstanceData._m0[_512].x;
    float _519 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0)))) * cbInstanceData._m0[_512].y;
    float _520 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0)))) * cbInstanceData._m0[_512].z;
    float _3402 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _521 = isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0));
    float _3413 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _522 = isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0));
    float _3424 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _523 = isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0));
    float _524 = 1.0 - _387;
    float _525 = _521 * _524;
    float _526 = _522 * _524;
    float _527 = _523 * _524;
    float _532 = (_521 + (-0.039999999105930328369140625)) * _387;
    float _533 = (_522 + (-0.039999999105930328369140625)) * _387;
    float _534 = (_523 + (-0.039999999105930328369140625)) * _387;
    float _535 = _532 + 0.039999999105930328369140625;
    float _537 = _533 + 0.039999999105930328369140625;
    float _538 = _534 + 0.039999999105930328369140625;
    vec4 _547 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _469, cbSceneParam._m0[86u].y * _470));
    float _550 = _547.x * TEXCOORD_3.w;
    float _551 = dot(vec3(_380, _381, _382), vec3(_461, _462, _463));
    float _554 = _551 * 2.0;
    float _558 = (_554 * _380) - _461;
    float _559 = (_554 * _381) - _462;
    float _560 = (_554 * _382) - _463;
    float _564 = abs(dot(vec3(_461, _462, _463), vec3(_380, _381, _382)));
    float _3435 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _566 = sqrt(_383);
    float _579 = exp2((_566 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_566 * 3.0));
    float _585 = (1.0 - _579) * ((_566 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _586 = _579 * _566;
    float _614 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _618 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _622 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _924;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _649 = fma(_622, cbModelParam._m0[26u].z, fma(_618, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _614));
        float _653 = fma(_622, cbModelParam._m0[27u].z, fma(_618, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _614));
        float _657 = fma(_622, cbModelParam._m0[28u].z, fma(_618, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _614));
        float _682 = _614 + _380;
        float _683 = _618 + _381;
        float _684 = _622 + _382;
        float _694 = fma(_684, cbModelParam._m0[26u].z, fma(_683, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _682)) - _649;
        float _695 = fma(_684, cbModelParam._m0[27u].z, fma(_683, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _682)) - _653;
        float _696 = fma(_684, cbModelParam._m0[28u].z, fma(_683, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _682)) - _657;
        float _700 = inversesqrt(dot(vec3(_694, _695, _696), vec3(_694, _695, _696)));
        float _713 = ((_700 * _694) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_649 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _714 = ((_700 * _695) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_653 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _715 = ((_700 * _696) / cbModelParam._m0[34u].z) + ((((((_657 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _718 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_713, _714, _715), 0.0);
        vec4 _725 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_713, _714, _715), 0.0);
        vec4 _732 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_713, _714, _715), 0.0);
        vec4 _739 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_713, _714, _715), 0.0);
        float _752 = exp2((_718.w + (-0.5)) * 20.0) * 2.0;
        float _753 = _752 * (_718.x + (-0.5));
        float _754 = _752 * (_718.y + (-0.5));
        float _755 = _752 * (_718.z + (-0.5));
        float _762 = exp2((_725.w + (-0.5)) * 20.0) * 2.0;
        float _763 = _762 * (_725.x + (-0.5));
        float _764 = _762 * (_725.y + (-0.5));
        float _765 = _762 * (_725.z + (-0.5));
        float _772 = exp2((_732.w + (-0.5)) * 20.0) * 2.0;
        float _773 = _772 * (_732.x + (-0.5));
        float _774 = _772 * (_732.y + (-0.5));
        float _775 = _772 * (_732.z + (-0.5));
        float _782 = exp2((_739.w + (-0.5)) * 20.0) * 2.0;
        float _783 = _782 * (_739.x + (-0.5));
        float _784 = _782 * (_739.y + (-0.5));
        float _785 = _782 * (_739.z + (-0.5));
        float _786 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _787 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _788 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _789 = _753 * 0.5;
        float _790 = _763 * 0.5;
        float _791 = _773 * 0.5;
        float _792 = dot(vec3(_789, _790, _791), vec3(_789, _790, _791));
        float _797 = (_792 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_792);
        float _806 = (dot(vec3(_380, _381, _382), vec3(_797 * _789, _797 * _790, _797 * _791)) + 1.0) * 0.5;
        float _3461 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _816 = sqrt(((_790 * _790) + (_789 * _789)) + (_791 * _791)) / (_786 + 9.9999997473787516355514526367188e-06);
        float _3472 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _817 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
        float _818 = _817 * 2.0;
        float _822 = (1.0 - _817) / (_817 + 1.0);
        float _3483 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _823 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
        float _832 = ((((1.0 - _823) * (_818 + 2.0)) * exp2(log2(isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0))) * (_818 + 1.0))) + _823) * _786;
        float _833 = _754 * 0.5;
        float _834 = _764 * 0.5;
        float _835 = _774 * 0.5;
        float _836 = dot(vec3(_833, _834, _835), vec3(_833, _834, _835));
        float _841 = (_836 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_836);
        float _849 = (dot(vec3(_380, _381, _382), vec3(_841 * _833, _841 * _834, _841 * _835)) + 1.0) * 0.5;
        float _3494 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _858 = sqrt(((_834 * _834) + (_833 * _833)) + (_835 * _835)) / (_787 + 9.9999997473787516355514526367188e-06);
        float _3505 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _859 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
        float _860 = _859 * 2.0;
        float _864 = (1.0 - _859) / (_859 + 1.0);
        float _3516 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _865 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
        float _874 = ((((1.0 - _865) * (_860 + 2.0)) * exp2(log2(isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0))) * (_860 + 1.0))) + _865) * _787;
        float _875 = _755 * 0.5;
        float _876 = _765 * 0.5;
        float _877 = _775 * 0.5;
        float _878 = dot(vec3(_875, _876, _877), vec3(_875, _876, _877));
        float _883 = (_878 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_878);
        float _891 = (dot(vec3(_380, _381, _382), vec3(_883 * _875, _883 * _876, _883 * _877)) + 1.0) * 0.5;
        float _3527 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _900 = sqrt(((_876 * _876) + (_875 * _875)) + (_877 * _877)) / (_788 + 9.9999997473787516355514526367188e-06);
        float _3538 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _901 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
        float _902 = _901 * 2.0;
        float _906 = (1.0 - _901) / (_901 + 1.0);
        float _3549 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _907 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _916 = ((((1.0 - _907) * (_902 + 2.0)) * exp2(log2(isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0))) * (_902 + 1.0))) + _907) * _788;
        _924 = _755;
        _926 = _754;
        _927 = _753;
        _928 = _765;
        _929 = _764;
        _930 = _763;
        _931 = _775;
        _932 = _774;
        _933 = _773;
        _934 = _788;
        _935 = _787;
        _936 = _786;
        _937 = cbModelParam._m0[36u].z * (isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0)));
        _938 = cbModelParam._m0[36u].z * (isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0)));
        _939 = cbModelParam._m0[36u].z * (isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0)));
    }
    else
    {
        _924 = _925;
        _926 = _925;
        _927 = _925;
        _928 = _925;
        _929 = _925;
        _930 = _925;
        _931 = _925;
        _932 = _925;
        _933 = _925;
        _934 = _925;
        _935 = _925;
        _936 = _925;
        _937 = 0.0;
        _938 = 0.0;
        _939 = 0.0;
    }
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _965 = fma(_622, cbModelParam._m0[30u].z, fma(_618, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _614));
        float _969 = fma(_622, cbModelParam._m0[31u].z, fma(_618, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _614));
        float _973 = fma(_622, cbModelParam._m0[32u].z, fma(_618, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _614));
        float _996 = _614 + _380;
        float _997 = _618 + _381;
        float _998 = _622 + _382;
        float _1008 = fma(_998, cbModelParam._m0[30u].z, fma(_997, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _996)) - _965;
        float _1009 = fma(_998, cbModelParam._m0[31u].z, fma(_997, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _996)) - _969;
        float _1010 = fma(_998, cbModelParam._m0[32u].z, fma(_997, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _996)) - _973;
        float _1014 = inversesqrt(dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010)));
        float _1027 = ((_1014 * _1008) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_965 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1028 = ((_1014 * _1009) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_969 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1029 = ((_1014 * _1010) / cbModelParam._m0[35u].z) + ((((((_973 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        vec4 _1045 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        float _1064 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1031.x + (-0.5));
        float _1066 = _1064 * (_1031.y + (-0.5));
        float _1067 = _1064 * (_1031.z + (-0.5));
        float _1074 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1038.x + (-0.5));
        float _1076 = _1074 * (_1038.y + (-0.5));
        float _1077 = _1074 * (_1038.z + (-0.5));
        float _1084 = exp2((_1045.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1045.x + (-0.5));
        float _1086 = _1084 * (_1045.y + (-0.5));
        float _1087 = _1084 * (_1045.z + (-0.5));
        float _1094 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1052.x + (-0.5));
        float _1096 = _1094 * (_1052.y + (-0.5));
        float _1097 = _1094 * (_1052.z + (-0.5));
        float _1098 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1099 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1100 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1101 = _1065 * 0.5;
        float _1102 = _1075 * 0.5;
        float _1103 = _1085 * 0.5;
        float _1104 = dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103));
        float _1109 = (_1104 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1104);
        float _1117 = (dot(vec3(_380, _381, _382), vec3(_1109 * _1101, _1109 * _1102, _1109 * _1103)) + 1.0) * 0.5;
        float _3590 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1126 = sqrt(((_1102 * _1102) + (_1101 * _1101)) + (_1103 * _1103)) / (_1098 + 9.9999997473787516355514526367188e-06);
        float _3601 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
        float _1128 = _1127 * 2.0;
        float _1132 = (1.0 - _1127) / (_1127 + 1.0);
        float _3612 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _1142 = ((((1.0 - _1133) * (_1128 + 2.0)) * exp2(log2(isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0))) * (_1128 + 1.0))) + _1133) * _1098;
        float _1143 = _1066 * 0.5;
        float _1144 = _1076 * 0.5;
        float _1145 = _1086 * 0.5;
        float _1146 = dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145));
        float _1151 = (_1146 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1146);
        float _1159 = (dot(vec3(_380, _381, _382), vec3(_1151 * _1143, _1151 * _1144, _1151 * _1145)) + 1.0) * 0.5;
        float _3623 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1168 = sqrt(((_1144 * _1144) + (_1143 * _1143)) + (_1145 * _1145)) / (_1099 + 9.9999997473787516355514526367188e-06);
        float _3634 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
        float _1170 = _1169 * 2.0;
        float _1174 = (1.0 - _1169) / (_1169 + 1.0);
        float _3645 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _1184 = ((((1.0 - _1175) * (_1170 + 2.0)) * exp2(log2(isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0))) * (_1170 + 1.0))) + _1175) * _1099;
        float _1185 = _1067 * 0.5;
        float _1186 = _1077 * 0.5;
        float _1187 = _1087 * 0.5;
        float _1188 = dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187));
        float _1193 = (_1188 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1188);
        float _1201 = (dot(vec3(_380, _381, _382), vec3(_1193 * _1185, _1193 * _1186, _1193 * _1187)) + 1.0) * 0.5;
        float _3656 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1210 = sqrt(((_1186 * _1186) + (_1185 * _1185)) + (_1187 * _1187)) / (_1100 + 9.9999997473787516355514526367188e-06);
        float _3667 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _3678 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0))) * (_1212 + 1.0))) + _1217) * _1100;
        _1234 = _1067;
        _1235 = _1066;
        _1236 = _1065;
        _1237 = _1077;
        _1238 = _1076;
        _1239 = _1075;
        _1240 = _1087;
        _1241 = _1086;
        _1242 = _1085;
        _1243 = _1100;
        _1244 = _1099;
        _1245 = _1098;
        _1246 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0)));
        _1247 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)));
        _1248 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
    }
    else
    {
        _1234 = _925;
        _1235 = _925;
        _1236 = _925;
        _1237 = _925;
        _1238 = _925;
        _1239 = _925;
        _1240 = _925;
        _1241 = _925;
        _1242 = _925;
        _1243 = _925;
        _1244 = _925;
        _1245 = _925;
        _1246 = 0.0;
        _1247 = 0.0;
        _1248 = 0.0;
    }
    float _1258 = (cbModelParam._m0[1u].x * (_1246 - _937)) + _937;
    float _1259 = (cbModelParam._m0[1u].x * (_1247 - _938)) + _938;
    float _1260 = (cbModelParam._m0[1u].x * (_1248 - _939)) + _939;
    float _1281 = fma(_1260, cbSceneParam._m0[89u].z, fma(_1259, cbSceneParam._m0[89u].y, _1258 * cbSceneParam._m0[89u].x));
    float _1284 = fma(_1260, cbSceneParam._m0[90u].z, fma(_1259, cbSceneParam._m0[90u].y, _1258 * cbSceneParam._m0[90u].x));
    float _1287 = fma(_1260, cbSceneParam._m0[91u].z, fma(_1259, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1258));
    float _1302 = _558 * 0.5;
    float _1303 = _559 * 0.5;
    float _1304 = _560 * 0.5;
    float _1305 = dot(vec4(_1302, _1303, _1304, 1.0), vec4(_1236, _1239, _1242, _1245));
    float _1308 = dot(vec4(_1302, _1303, _1304, 1.0), vec4(_1235, _1238, _1241, _1244));
    float _1311 = dot(vec4(_1302, _1303, _1304, 1.0), vec4(_1234, _1237, _1240, _1243));
    float _1345;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1318 = dot(vec4(_1302, _1303, _1304, 1.0), vec4(_924, _928, _931, _934));
        float _1322 = dot(vec4(_1302, _1303, _1304, 1.0), vec4(_926, _929, _932, _935));
        float _1326 = dot(vec4(_1302, _1303, _1304, 1.0), vec4(_927, _930, _933, _936));
        float _1333 = dot(vec4(cbModelParam._m0[39u]), vec4(_1302, _1303, _1304, 1.0));
        _1345 = dot(vec3(isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)), isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)), isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1333) ? 0.0 : (isnan(0.0) ? _1333 : max(0.0, _1333))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1345 = 1.0;
    }
    float _1356;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1347 = dot(vec4(cbModelParam._m0[40u]), vec4(_1302, _1303, _1304, 1.0));
        _1356 = dot(vec3(isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)), isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)), isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1347) ? 0.0 : (isnan(0.0) ? _1347 : max(0.0, _1347))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1356 = 1.0;
    }
    float _1360 = (_1356 * cbModelParam._m0[1u].x) + (_1345 * (1.0 - cbModelParam._m0[1u].x));
    float _1370 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _383);
    float _1371 = isnan(_1370) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1370 : min(cbModelParam._m0[25u].z, _1370));
    float _1451;
    float _1453;
    float _1455;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1418 = fma(_622, cbModelParam._m0[13u].z, fma(_618, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _614)) + cbModelParam._m0[13u].w;
        float _1422 = fma(_622, cbModelParam._m0[14u].z, fma(_618, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _614)) + cbModelParam._m0[14u].w;
        float _1426 = fma(_622, cbModelParam._m0[15u].z, fma(_618, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _614)) + cbModelParam._m0[15u].w;
        float _1429 = fma(_560, cbModelParam._m0[13u].z, fma(_559, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _558));
        float _1432 = fma(_560, cbModelParam._m0[14u].z, fma(_559, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _558));
        float _1435 = fma(_560, cbModelParam._m0[15u].z, fma(_559, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _558));
        float _1463;
        if (_1429 > 0.0)
        {
            _1463 = abs((1.0 - _1418) / _1429);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1429 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1418 + 1.0) / _1429);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1463 = frontier_phi_14_12_ladder;
        }
        float _1690;
        if (_1432 > 0.0)
        {
            _1690 = abs((1.0 - _1422) / _1432);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1432 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1422 + 1.0) / _1432);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1690 = frontier_phi_23_19_ladder;
        }
        float _1947;
        if (_1435 > 0.0)
        {
            _1947 = abs((1.0 - _1426) / _1435);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1435 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1426 + 1.0) / _1435);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1947 = frontier_phi_35_30_ladder;
        }
        float _1949 = isnan(_1690) ? _1463 : (isnan(_1463) ? _1690 : min(_1463, _1690));
        float _1950 = isnan(_1947) ? _1949 : (isnan(_1949) ? _1947 : min(_1949, _1947));
        float _1954 = (_1950 * _1429) + _1418;
        float _1955 = (_1950 * _1432) + _1422;
        float _1956 = (_1950 * _1435) + _1426;
        float _1957 = _1950 * 9.9999997473787516355514526367188e-05;
        float _1959 = (-1.0) - _1957;
        float _1961 = _1957 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1956 > _1961) || ((_1956 < _1959) || ((_1955 > _1961) || ((_1955 < _1959) || ((_1954 < _1959) || (_1954 > _1961))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2084 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1956, cbModelParam._m0[9u].z, fma(_1955, cbModelParam._m0[9u].y, _1954 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1956, cbModelParam._m0[10u].z, fma(_1955, cbModelParam._m0[10u].y, _1954 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1956, cbModelParam._m0[11u].z, fma(_1955, cbModelParam._m0[11u].y, _1954 * cbModelParam._m0[11u].x))), _1371);
            frontier_phi_13_35_ladder = _2084.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2084.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2084.x * cbModelParam._m0[1u].y;
        }
        _1451 = frontier_phi_13_35_ladder_2;
        _1453 = frontier_phi_13_35_ladder_1;
        _1455 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1439 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_558, _559, _560), _1371);
        _1451 = _1439.x * cbModelParam._m0[1u].y;
        _1453 = _1439.y * cbModelParam._m0[1u].y;
        _1455 = _1439.z * cbModelParam._m0[1u].y;
    }
    float _1459 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _383);
    float _1460 = isnan(_1459) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1459 : min(cbModelParam._m0[25u].w, _1459));
    float _1551;
    float _1553;
    float _1555;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1515 = fma(_622, cbModelParam._m0[21u].z, fma(_618, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _614)) + cbModelParam._m0[21u].w;
        float _1519 = fma(_622, cbModelParam._m0[22u].z, fma(_618, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _614)) + cbModelParam._m0[22u].w;
        float _1523 = fma(_622, cbModelParam._m0[23u].z, fma(_618, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _614)) + cbModelParam._m0[23u].w;
        float _1526 = fma(_560, cbModelParam._m0[21u].z, fma(_559, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _558));
        float _1529 = fma(_560, cbModelParam._m0[22u].z, fma(_559, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _558));
        float _1532 = fma(_560, cbModelParam._m0[23u].z, fma(_559, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _558));
        float _1695;
        if (_1526 > 0.0)
        {
            _1695 = abs((1.0 - _1515) / _1526);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1526 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1515 + 1.0) / _1526);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1695 = frontier_phi_25_21_ladder;
        }
        float _1974;
        if (_1529 > 0.0)
        {
            _1974 = abs((1.0 - _1519) / _1529);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1529 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1519 + 1.0) / _1529);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1974 = frontier_phi_37_32_ladder;
        }
        float _2187;
        if (_1532 > 0.0)
        {
            _2187 = abs((1.0 - _1523) / _1532);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1532 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1523 + 1.0) / _1532);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2187 = frontier_phi_46_43_ladder;
        }
        float _2189 = isnan(_1974) ? _1695 : (isnan(_1695) ? _1974 : min(_1695, _1974));
        float _2190 = isnan(_2187) ? _2189 : (isnan(_2189) ? _2187 : min(_2189, _2187));
        float _2194 = (_2190 * _1526) + _1515;
        float _2195 = (_2190 * _1529) + _1519;
        float _2196 = (_2190 * _1532) + _1523;
        float _2197 = _2190 * 9.9999997473787516355514526367188e-05;
        float _2198 = (-1.0) - _2197;
        float _2200 = _2197 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2196 > _2200) || ((_2196 < _2198) || ((_2195 > _2200) || ((_2195 < _2198) || ((_2194 < _2198) || (_2194 > _2200))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2430 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2196, cbModelParam._m0[17u].z, fma(_2195, cbModelParam._m0[17u].y, _2194 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2196, cbModelParam._m0[18u].z, fma(_2195, cbModelParam._m0[18u].y, _2194 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2196, cbModelParam._m0[19u].z, fma(_2195, cbModelParam._m0[19u].y, _2194 * cbModelParam._m0[19u].x))), _1460);
            frontier_phi_22_46_ladder = _2430.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2430.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2430.x * cbModelParam._m0[1u].z;
        }
        _1551 = frontier_phi_22_46_ladder_2;
        _1553 = frontier_phi_22_46_ladder_1;
        _1555 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1535 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_558, _559, _560), _1460);
        _1551 = _1535.x * cbModelParam._m0[1u].z;
        _1553 = _1535.y * cbModelParam._m0[1u].z;
        _1555 = _1535.z * cbModelParam._m0[1u].z;
    }
    float _1568 = (((_585 * _535) + _586) * _550) * ((cbModelParam._m0[1u].w * (_1551 - _1451)) + _1451);
    float _1570 = (((_585 * _537) + _586) * _550) * ((cbModelParam._m0[1u].w * (_1553 - _1453)) + _1453);
    float _1572 = (((_585 * _538) + _586) * _550) * ((cbModelParam._m0[1u].w * (_1555 - _1455)) + _1455);
    float _1575 = fma(_1572, cbSceneParam._m0[89u].z, fma(_1570, cbSceneParam._m0[89u].y, _1568 * cbSceneParam._m0[89u].x));
    float _1578 = fma(_1572, cbSceneParam._m0[90u].z, fma(_1570, cbSceneParam._m0[90u].y, _1568 * cbSceneParam._m0[90u].x));
    float _1581 = fma(_1572, cbSceneParam._m0[91u].z, fma(_1570, cbSceneParam._m0[91u].y, _1568 * cbSceneParam._m0[91u].x));
    vec4 _1589 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_469, _470));
    float _1591 = _1589.w;
    float _1603 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1591);
    float _1604 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1591);
    float _1605 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1591);
    uvec4 _1609 = floatBitsToUint(cbInstanceData._m0[_509 + 5u]);
    uint _1611 = _1609.x * 14u;
    uint _1612 = _1611 + 13u;
    float _1619 = _550 + (-1.0);
    float _1624 = (cbLight._m0[_1612].x * _1619) + 1.0;
    float _1625 = (cbLight._m0[_1612].y * _1619) + 1.0;
    float _1626 = (cbLight._m0[_1612].z * _1619) + 1.0;
    float _1627 = (cbLight._m0[_1612].w * _1619) + 1.0;
    uint _1628 = _1611 + 5u;
    float _1634 = isnan(1.0) ? _1625 : (isnan(_1625) ? 1.0 : min(_1625, 1.0));
    uint _1638 = _1611 + 4u;
    float _1648 = isnan(1.0) ? _1624 : (isnan(_1624) ? 1.0 : min(_1624, 1.0));
    uint _1652 = _1611 | 1u;
    float _1663 = dot(vec3(cbLight._m0[_1611].xyz), vec3(_380, _381, _382));
    float _1666 = dot(vec3(cbLight._m0[_1652].xyz), vec3(_380, _381, _382));
    float _3814 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
    float _3825 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
    float _1671 = (isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) * 0.3183098733425140380859375;
    float _1673 = (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * 0.3183098733425140380859375;
    float _1680 = ((cbLight._m0[_1628].x * _1634) * _1673) + (((cbLight._m0[_1638].x * _1603) * _1648) * _1671);
    float _1681 = ((_1634 * cbLight._m0[_1628].y) * _1673) + (((cbLight._m0[_1638].y * _1604) * _1648) * _1671);
    float _1682 = ((_1634 * cbLight._m0[_1628].z) * _1673) + (((cbLight._m0[_1638].z * _1605) * _1648) * _1671);
    uvec4 _1687 = floatBitsToUint(cbLight._m0[_1611 + 12u]);
    bool _1689 = _1687.x == 0u;
    float _1700;
    float _1702;
    float _1704;
    if (_1689)
    {
        _1700 = _1680;
        _1702 = _1681;
        _1704 = _1682;
    }
    else
    {
        uint _1708 = _1611 + 6u;
        float _1724 = (dot(vec3(cbLight._m0[_1611 + 2u].xyz), vec3(_380, _381, _382)) * 0.5) + 0.5;
        float _1725 = _1724 * _1724;
        float _3836 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1726 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1727 = isnan(1.0) ? _1626 : (isnan(_1626) ? 1.0 : min(_1626, 1.0));
        _1700 = (((cbLight._m0[_1708].x * 0.3183098733425140380859375) * _1726) * _1727) + _1680;
        _1702 = (((cbLight._m0[_1708].y * 0.3183098733425140380859375) * _1726) * _1727) + _1681;
        _1704 = (((cbLight._m0[_1708].z * 0.3183098733425140380859375) * _1726) * _1727) + _1682;
    }
    bool _1707 = _1687.y == 0u;
    float _1745;
    float _1747;
    float _1749;
    if (_1707)
    {
        _1745 = _1700;
        _1747 = _1702;
        _1749 = _1704;
    }
    else
    {
        uint _1918 = _1611 + 7u;
        float _1934 = (dot(vec3(cbLight._m0[_1611 + 3u].xyz), vec3(_380, _381, _382)) * 0.5) + 0.5;
        float _1935 = _1934 * _1934;
        float _3852 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
        float _1936 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1937 = isnan(1.0) ? _1627 : (isnan(_1627) ? 1.0 : min(_1627, 1.0));
        _1745 = (((cbLight._m0[_1918].x * 0.3183098733425140380859375) * _1936) * _1937) + _1700;
        _1747 = (((cbLight._m0[_1918].y * 0.3183098733425140380859375) * _1936) * _1937) + _1702;
        _1749 = (((cbLight._m0[_1918].z * 0.3183098733425140380859375) * _1936) * _1937) + _1704;
    }
    uint _1752 = _1611 + 8u;
    float _1765 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1611].w)) * _383) * 0.949999988079071044921875);
    float _1766 = _1765 * _1765;
    float _1767 = cbLight._m0[_1611].x + _461;
    float _1768 = cbLight._m0[_1611].y + _462;
    float _1769 = cbLight._m0[_1611].z + _463;
    float _1773 = inversesqrt(dot(vec3(_1767, _1768, _1769), vec3(_1767, _1768, _1769)));
    float _1774 = _1773 * _1767;
    float _1775 = _1773 * _1768;
    float _1776 = _1773 * _1769;
    float _1777 = dot(vec3(_380, _381, _382), vec3(cbLight._m0[_1611].xyz));
    float _3868 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
    float _1780 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _3879 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _1781 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _1782 = dot(vec3(_380, _381, _382), vec3(_1774, _1775, _1776));
    float _3890 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
    float _1785 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _1786 = dot(vec3(cbLight._m0[_1611].xyz), vec3(_1774, _1775, _1776));
    float _3901 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
    float _1790 = _1766 * _1766;
    float _1794 = ((_1785 * _1785) * (_1790 + (-1.0))) + 1.0;
    float _1802 = exp2(log2(1.0 - (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) * 5.0);
    float _1803 = 0.959999978542327880859375 - _532;
    float _1805 = 0.959999978542327880859375 - _533;
    float _1806 = 0.959999978542327880859375 - _534;
    float _1813 = 1.0 - _1766;
    float _1824 = (0.5 / (((_1781 * ((_1780 * _1813) + _1766)) + 9.9999999392252902907785028219223e-09) + (((_1781 * _1813) + _1766) * _1780))) * _1780;
    float _3912 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
    float _1826 = (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * (_1790 / ((_1794 * _1794) * 3.141590118408203125));
    uint _1840 = _1611 + 9u;
    float _1851 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1652].w)) * _383) * 0.949999988079071044921875);
    float _1852 = _1851 * _1851;
    float _1853 = cbLight._m0[_1652].x + _461;
    float _1854 = cbLight._m0[_1652].y + _462;
    float _1855 = cbLight._m0[_1652].z + _463;
    float _1859 = inversesqrt(dot(vec3(_1853, _1854, _1855), vec3(_1853, _1854, _1855)));
    float _1860 = _1859 * _1853;
    float _1861 = _1859 * _1854;
    float _1862 = _1859 * _1855;
    float _1863 = dot(vec3(_380, _381, _382), vec3(cbLight._m0[_1652].xyz));
    float _3923 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _1866 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _1867 = dot(vec3(_380, _381, _382), vec3(_1860, _1861, _1862));
    float _3934 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1870 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _1871 = dot(vec3(cbLight._m0[_1652].xyz), vec3(_1860, _1861, _1862));
    float _3945 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _1875 = _1852 * _1852;
    float _1879 = ((_1870 * _1870) * (_1875 + (-1.0))) + 1.0;
    float _1886 = exp2(log2(1.0 - (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0)))) * 5.0);
    float _1893 = 1.0 - _1852;
    float _1903 = (0.5 / (((_1781 * ((_1866 * _1893) + _1852)) + 9.9999999392252902907785028219223e-09) + (((_1781 * _1893) + _1852) * _1866))) * _1866;
    float _3956 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
    float _1905 = (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * (_1875 / ((_1879 * _1879) * 3.141590118408203125));
    float _1915 = (((((_1886 * _1803) + _535) * cbLight._m0[_1840].x) * _1905) * _1634) + ((((cbLight._m0[_1752].x * _1603) * ((_1802 * _1803) + _535)) * _1826) * _1648);
    float _1916 = (((((_1886 * _1805) + _537) * cbLight._m0[_1840].y) * _1905) * _1634) + ((((cbLight._m0[_1752].y * _1604) * ((_1802 * _1805) + _537)) * _1826) * _1648);
    float _1917 = (((((_1886 * _1806) + _538) * cbLight._m0[_1840].z) * _1905) * _1634) + ((((cbLight._m0[_1752].z * _1605) * ((_1802 * _1806) + _538)) * _1826) * _1648);
    float _1979;
    float _1981;
    float _1983;
    if (_1689)
    {
        _1979 = _1915;
        _1981 = _1916;
        _1983 = _1917;
    }
    else
    {
        uint _1985 = _1611 + 2u;
        uint _1989 = _1611 + 10u;
        float _2003 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1985].w)) * _383) * 0.949999988079071044921875);
        float _2004 = _2003 * _2003;
        float _2005 = cbLight._m0[_1985].x + _461;
        float _2006 = cbLight._m0[_1985].y + _462;
        float _2007 = cbLight._m0[_1985].z + _463;
        float _2011 = inversesqrt(dot(vec3(_2005, _2006, _2007), vec3(_2005, _2006, _2007)));
        float _2012 = _2011 * _2005;
        float _2013 = _2011 * _2006;
        float _2014 = _2011 * _2007;
        float _2015 = dot(vec3(_380, _381, _382), vec3(cbLight._m0[_1985].xyz));
        float _3967 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
        float _2018 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _2019 = dot(vec3(_380, _381, _382), vec3(_2012, _2013, _2014));
        float _3978 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
        float _2022 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _2023 = dot(vec3(cbLight._m0[_1985].xyz), vec3(_2012, _2013, _2014));
        float _3989 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
        float _2027 = _2004 * _2004;
        float _2031 = ((_2022 * _2022) * (_2027 + (-1.0))) + 1.0;
        float _2038 = exp2(log2(1.0 - (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0)))) * 5.0);
        float _2045 = 1.0 - _2004;
        float _2055 = (0.5 / (((_1781 * ((_2018 * _2045) + _2004)) + 9.9999999392252902907785028219223e-09) + (((_1781 * _2045) + _2004) * _2018))) * _2018;
        float _4000 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
        float _2057 = (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_2027 / ((_2031 * _2031) * 3.141590118408203125));
        float _2058 = isnan(1.0) ? _1626 : (isnan(_1626) ? 1.0 : min(_1626, 1.0));
        _1979 = (((((_2038 * _1803) + _535) * cbLight._m0[_1989].x) * _2057) * _2058) + _1915;
        _1981 = (((((_2038 * _1805) + _537) * cbLight._m0[_1989].y) * _2057) * _2058) + _1916;
        _1983 = (((((_2038 * _1806) + _538) * cbLight._m0[_1989].z) * _2057) * _2058) + _1917;
    }
    float _2093;
    float _2095;
    float _2097;
    if (_1707)
    {
        _2093 = _1979;
        _2095 = _1981;
        _2097 = _1983;
    }
    else
    {
        uint _2104 = _1611 + 3u;
        uint _2108 = _1611 + 11u;
        float _2122 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2104].w)) * _383) * 0.949999988079071044921875);
        float _2123 = _2122 * _2122;
        float _2124 = cbLight._m0[_2104].x + _461;
        float _2125 = cbLight._m0[_2104].y + _462;
        float _2126 = cbLight._m0[_2104].z + _463;
        float _2130 = inversesqrt(dot(vec3(_2124, _2125, _2126), vec3(_2124, _2125, _2126)));
        float _2131 = _2130 * _2124;
        float _2132 = _2130 * _2125;
        float _2133 = _2130 * _2126;
        float _2134 = dot(vec3(_380, _381, _382), vec3(cbLight._m0[_2104].xyz));
        float _4016 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        float _2137 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _2138 = dot(vec3(_380, _381, _382), vec3(_2131, _2132, _2133));
        float _4027 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
        float _2141 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _2142 = dot(vec3(cbLight._m0[_2104].xyz), vec3(_2131, _2132, _2133));
        float _4038 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2146 = _2123 * _2123;
        float _2150 = ((_2141 * _2141) * (_2146 + (-1.0))) + 1.0;
        float _2157 = exp2(log2(1.0 - (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)))) * 5.0);
        float _2164 = 1.0 - _2123;
        float _2174 = (0.5 / (((_1781 * ((_2137 * _2164) + _2123)) + 9.9999999392252902907785028219223e-09) + (((_1781 * _2164) + _2123) * _2137))) * _2137;
        float _4049 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2176 = (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_2146 / ((_2150 * _2150) * 3.141590118408203125));
        float _2177 = isnan(1.0) ? _1627 : (isnan(_1627) ? 1.0 : min(_1627, 1.0));
        _2093 = (((((_2157 * _1803) + _535) * cbLight._m0[_2108].x) * _2176) * _2177) + _1979;
        _2095 = (((((_2157 * _1805) + _537) * cbLight._m0[_2108].y) * _2176) * _2177) + _1981;
        _2097 = (((((_2157 * _1806) + _538) * cbLight._m0[_2108].z) * _2176) * _2177) + _1983;
    }
    float _2312;
    float _2314;
    float _2316;
    float _2318;
    float _2320;
    float _2322;
    if (_1609.y == 0u)
    {
        float _2252 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2253 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2252;
        float _2254 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2252;
        float _2255 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2252;
        uvec4 _2267 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2268 = _2267.x;
        uint _2279 = uint((float(_2267.y) * floor(float(uint(cbSceneParam._m0[85u].y * _470) / _2268))) + floor(float(uint(cbSceneParam._m0[85u].x * _469) / _2268)));
        float _2289 = (log2(_2255 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2290 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
        uint _2293 = uint(isnan(14.0) ? _2290 : (isnan(_2290) ? 14.0 : min(_2290, 14.0)));
        uvec4 _2298 = texelFetch(g_lightClusterGridBuffer, int(((_2293 << 2u) + (_2279 << 6u)) >> 2u));
        uint _2299 = _2298.x;
        uint _2300 = _2267.z;
        float _2435;
        float _2437;
        float _2439;
        float _2441;
        float _2443;
        float _2445;
        if (((((1u << ((_2300 >> 4u) & 15u)) + 4294967295u) & _2299) == 0u) || ((_2300 & 240u) == 0u))
        {
            _2435 = 0.0;
            _2437 = 0.0;
            _2439 = 0.0;
            _2441 = 0.0;
            _2443 = 0.0;
            _2445 = 0.0;
        }
        else
        {
            float _2436;
            float _2438;
            float _2440;
            float _2442;
            float _2444;
            float _2446;
            float _2589 = 0.0;
            float _2590 = 0.0;
            float _2591 = 0.0;
            float _2592 = 0.0;
            float _2593 = 0.0;
            float _2594 = 0.0;
            uint _2595 = 0u;
            uint _2604;
            bool _2605;
            for (;;)
            {
                _2604 = texelFetch(g_lightClassification, int((((_2293 << 5u) + (_2279 << 9u)) + (_2595 << 2u)) >> 2u)).x;
                _2605 = _2604 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2605)
                {
                    frontier_phi_61_pred = _2589;
                    frontier_phi_61_pred_1 = _2594;
                    frontier_phi_61_pred_2 = _2593;
                    frontier_phi_61_pred_3 = _2592;
                    frontier_phi_61_pred_4 = _2591;
                    frontier_phi_61_pred_5 = _2590;
                }
                else
                {
                    float _2713;
                    float _2714;
                    float _2715;
                    float _2716;
                    float _2717;
                    float _2718;
                    uint _2719;
                    _2713 = _2589;
                    _2714 = _2590;
                    _2715 = _2591;
                    _2716 = _2592;
                    _2717 = _2593;
                    _2718 = _2594;
                    _2719 = _2604;
                    float _2645;
                    float _2646;
                    float _2647;
                    float _2648;
                    float _2649;
                    float _2650;
                    for (;;)
                    {
                        uint _2723 = uint(findLSB(_2719)) + (_2595 << 5u);
                        uint _2720 = (_2719 + 4294967295u) & _2719;
                        uint _2725 = _2723 * 48u;
                        vec4 _2739 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2725)).x, texelFetch(g_PointLightRenderingBuffer, int(_2725 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2725 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2725 + 3u)).x));
                        uint _2745 = (_2723 * 48u) + 4u;
                        vec4 _2758 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2745)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 3u)).x));
                        uint _2764 = (_2723 * 48u) + 8u;
                        vec3 _2775 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2764)).x, texelFetch(g_PointLightRenderingBuffer, int(_2764 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2764 + 2u)).x));
                        float _2779 = _2739.x - _2253;
                        float _2780 = _2739.y - _2254;
                        float _2781 = _2739.z - _2255;
                        float _2782 = dot(vec3(_2779, _2780, _2781), vec3(_2779, _2780, _2781));
                        float _2785 = inversesqrt(_2782);
                        float _2786 = _2785 * _2779;
                        float _2787 = _2785 * _2780;
                        float _2788 = _2785 * _2781;
                        float _2789 = dot(vec3(_490, _493, _496), vec3(_2786, _2787, _2788));
                        float _2794 = 1.0 - (_2782 * _2739.w);
                        float _4075 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
                        float _2795 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
                        float _2796 = sqrt(_2782) * _2758.w;
                        float _2799 = 1.39999997615814208984375 / (_2796 + 1.39999997615814208984375);
                        float _2800 = _2799 * _2799;
                        float _2803 = ((1.0 - _2800) * _2789) + _2800;
                        float _2806 = _2796 * _2796;
                        float _2810 = ((isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0))) * _2795) / ((_2806 * 0.699999988079071044921875) + 1.0);
                        float _2814 = (-0.0) - _2253;
                        float _2815 = (-0.0) - _2254;
                        float _2816 = (-0.0) - _2255;
                        float _2820 = inversesqrt(dot(vec3(_2814, _2815, _2816), vec3(_2814, _2815, _2816)));
                        float _2821 = _2820 * _2814;
                        float _2822 = _2820 * _2815;
                        float _2823 = _2820 * _2816;
                        float _2831 = exp2(log2(1.0 / ((_2806 * 3.5) + 5.0)) * 0.25);
                        float _2832 = 1.0 - _566;
                        float _2839 = sqrt(1.0 - ((1.0 - (_2832 * _2832)) * (1.0 - (_2831 * _2831))));
                        float _2840 = _2839 * _2839;
                        float _2841 = _2840 * _2840;
                        float _2842 = _2821 + _2786;
                        float _2843 = _2822 + _2787;
                        float _2844 = _2823 + _2788;
                        float _2848 = inversesqrt(dot(vec3(_2842, _2843, _2844), vec3(_2842, _2843, _2844)));
                        float _2852 = dot(vec3(_490, _493, _496), vec3(_2821, _2822, _2823));
                        float _4091 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
                        float _2855 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
                        float _2856 = dot(vec3(_490, _493, _496), vec3(_2848 * _2842, _2848 * _2843, _2848 * _2844));
                        float _4102 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
                        float _2859 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
                        float _2863 = ((_2859 * _2859) * (_2841 + (-1.0))) + 1.0;
                        float _2864 = _2799 * _2840;
                        float _2865 = _2864 * _2864;
                        float _2868 = ((1.0 - _2865) * _2789) + _2865;
                        float _4113 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
                        float _2869 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
                        float _2870 = 1.0 - _2840;
                        float _2880 = (0.5 / (((_2869 * ((_2855 * _2870) + _2840)) + 9.9999999392252902907785028219223e-09) + (((_2869 * _2870) + _2840) * _2855))) * _2869;
                        float _4124 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
                        float _2891 = (((_2841 * 3.1415927410125732421875) * (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)))) / ((_2863 * _2863) * ((_2806 * 2.1991131305694580078125) + 3.141590118408203125))) * _2795;
                        _2648 = (_2810 * _2758.x) + _2716;
                        _2649 = (_2810 * _2758.y) + _2717;
                        _2650 = (_2810 * _2758.z) + _2718;
                        _2645 = (_2891 * _2775.x) + _2713;
                        _2646 = (_2891 * _2775.y) + _2714;
                        _2647 = (_2891 * _2775.z) + _2715;
                        if (_2720 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2713 = _2645;
                            _2714 = _2646;
                            _2715 = _2647;
                            _2716 = _2648;
                            _2717 = _2649;
                            _2718 = _2650;
                            _2719 = _2720;
                        }
                    }
                    frontier_phi_61_pred = _2645;
                    frontier_phi_61_pred_1 = _2650;
                    frontier_phi_61_pred_2 = _2649;
                    frontier_phi_61_pred_3 = _2648;
                    frontier_phi_61_pred_4 = _2647;
                    frontier_phi_61_pred_5 = _2646;
                }
                _2436 = frontier_phi_61_pred;
                _2446 = frontier_phi_61_pred_1;
                _2444 = frontier_phi_61_pred_2;
                _2442 = frontier_phi_61_pred_3;
                _2440 = frontier_phi_61_pred_4;
                _2438 = frontier_phi_61_pred_5;
                uint _2596 = _2595 + 1u;
                if (_2596 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2589 = _2436;
                    _2590 = _2438;
                    _2591 = _2440;
                    _2592 = _2442;
                    _2593 = _2444;
                    _2594 = _2446;
                    _2595 = _2596;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2435 = _2436;
            _2437 = _2438;
            _2439 = _2440;
            _2441 = _2442;
            _2443 = _2444;
            _2445 = _2446;
        }
        uvec4 _2449 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2450 = _2449.z;
        uint _2452 = (_2450 >> 8u) & 15u;
        float _2557;
        float _2559;
        float _2561;
        float _2563;
        float _2565;
        float _2567;
        if (((4294967295u << _2452) & _2299) == 0u)
        {
            _2557 = _2435;
            _2559 = _2437;
            _2561 = _2439;
            _2563 = _2441;
            _2565 = _2443;
            _2567 = _2445;
        }
        else
        {
            float _2582 = inversesqrt(dot(vec3(_2253, _2254, _2255), vec3(_2253, _2254, _2255)));
            float _2583 = _2582 * _2253;
            float _2584 = _2582 * _2254;
            float _2585 = _2582 * _2255;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2452 < ((_2450 >> 12u) & 15u))
            {
                float _2558;
                float _2560;
                float _2562;
                float _2564;
                float _2566;
                float _2568;
                float _2696 = _2435;
                float _2697 = _2437;
                float _2698 = _2439;
                float _2699 = _2441;
                float _2700 = _2443;
                float _2701 = _2445;
                uint _2702 = _2452;
                uint _2711;
                bool _2712;
                for (;;)
                {
                    _2711 = texelFetch(g_lightClassification, int((((_2293 << 5u) + (_2279 << 9u)) + (_2702 << 2u)) >> 2u)).x;
                    _2712 = _2711 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2712)
                    {
                        frontier_phi_67_pred = _2699;
                        frontier_phi_67_pred_1 = _2700;
                        frontier_phi_67_pred_2 = _2701;
                        frontier_phi_67_pred_3 = _2698;
                        frontier_phi_67_pred_4 = _2697;
                        frontier_phi_67_pred_5 = _2696;
                    }
                    else
                    {
                        float _2896;
                        float _2897;
                        float _2898;
                        float _2899;
                        float _2900;
                        float _2901;
                        float _3191;
                        float _3192;
                        float _3193;
                        float _3194;
                        float _3195;
                        float _3196;
                        float _2909 = _2696;
                        float _2910 = _2697;
                        float _2911 = _2698;
                        float _2912 = _2699;
                        float _2913 = _2700;
                        float _2914 = _2701;
                        uint _2915 = _2711;
                        uint _2916;
                        vec4 _2941;
                        float _2942;
                        vec4 _2957;
                        vec3 _2969;
                        vec4 _2984;
                        vec4 _3000;
                        float _3047;
                        bool _3048;
                        for (;;)
                        {
                            uint _2926 = ((_2702 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2915));
                            _2916 = (_2915 + 4294967295u) & _2915;
                            uint _2928 = _2926 * 40u;
                            _2941 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2928)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 3u)).x));
                            _2942 = _2941.w;
                            uint _2944 = (_2926 * 40u) + 4u;
                            _2957 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2944)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 3u)).x));
                            uint _2959 = (_2926 * 40u) + 8u;
                            _2969 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2959)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 2u)).x));
                            uint _2971 = (_2926 * 40u) + 16u;
                            _2984 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2971)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 3u)).x));
                            uint _2987 = (_2926 * 40u) + 20u;
                            _3000 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2987)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 3u)).x));
                            uint _3003 = (_2926 * 40u) + 24u;
                            vec4 _3016 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3003)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 3u)).x));
                            uint _3022 = (_2926 * 40u) + 28u;
                            vec4 _3035 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3022)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 3u)).x));
                            _3047 = fma(_2255, _3035.z, fma(_2254, _3035.y, _3035.x * _2253)) + _3035.w;
                            _3048 = !((fma(_2255, _3016.z, fma(_2254, _3016.y, _3016.x * _2253)) + _3016.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3048)
                            {
                                float _3075 = _2941.x - _2253;
                                float _3076 = _2941.y - _2254;
                                float _3077 = _2941.z - _2255;
                                float _3078 = dot(vec3(_3075, _3076, _3077), vec3(_3075, _3076, _3077));
                                float _3081 = inversesqrt(_3078);
                                float _3082 = _3081 * _3075;
                                float _3083 = _3081 * _3076;
                                float _3084 = _3081 * _3077;
                                float _3088 = 1.0 - (_3078 / (_2942 * _2942));
                                float _4135 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
                                float _3089 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
                                float _3093 = sqrt(_3078) * _2957.w;
                                float _3095 = 1.39999997615814208984375 / (_3093 + 1.39999997615814208984375);
                                float _3096 = _3095 * _3095;
                                float _3099 = ((1.0 - _3096) * dot(vec3(_3082, _3083, _3084), vec3(_490, _493, _496))) + _3096;
                                float _3102 = _3093 * _3093;
                                float _3106 = (fma(_2255, _2984.z, fma(_2254, _2984.y, _2984.x * _2253)) + _2984.w) / _3047;
                                float _3107 = (fma(_2255, _3000.z, fma(_2254, _3000.y, _3000.x * _2253)) + _3000.w) / _3047;
                                float _3111 = 1.0 - dot(vec2(_3106, _3107), vec2(_3106, _3107));
                                float _4151 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                                float _3112 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
                                float _3113 = _3112 * (((isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0))) * _3089) / ((_3102 * 0.699999988079071044921875) + 1.0));
                                float _3125 = exp2(log2(1.0 / ((_3102 * 3.5) + 5.0)) * 0.25);
                                float _3126 = 1.0 - _566;
                                float _3133 = sqrt(1.0 - ((1.0 - (_3126 * _3126)) * (1.0 - (_3125 * _3125))));
                                float _3134 = _3133 * _3133;
                                float _3135 = _3134 * _3134;
                                float _3136 = _3082 - _2583;
                                float _3137 = _3083 - _2584;
                                float _3138 = _3084 - _2585;
                                float _3142 = inversesqrt(dot(vec3(_3136, _3137, _3138), vec3(_3136, _3137, _3138)));
                                float _3146 = dot(vec3(_490, _493, _496), vec3((-0.0) - _2583, (-0.0) - _2584, (-0.0) - _2585));
                                float _4162 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
                                float _3149 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
                                float _3150 = dot(vec3(_490, _493, _496), vec3(_3142 * _3136, _3142 * _3137, _3142 * _3138));
                                float _4173 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                                float _3153 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
                                float _3157 = ((_3153 * _3153) * (_3135 + (-1.0))) + 1.0;
                                float _3158 = _3095 * _3134;
                                float _3159 = _3158 * _3158;
                                float _3165 = ((1.0 - _3159) * dot(vec3(_490, _493, _496), vec3(_3082, _3083, _3084))) + _3159;
                                float _4184 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                                float _3166 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
                                float _3167 = 1.0 - _3134;
                                float _3177 = (0.5 / (((_3166 * ((_3149 * _3167) + _3134)) + 9.9999999392252902907785028219223e-09) + (((_3166 * _3167) + _3134) * _3149))) * _3166;
                                float _4195 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                                float _3187 = (_3112 * _3089) * (((_3135 * 3.1415927410125732421875) * (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0)))) / ((_3157 * _3157) * ((_3102 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3187 * _2969.x;
                                frontier_phi_73_pred_1 = _3187 * _2969.y;
                                frontier_phi_73_pred_2 = _3113 * _2957.z;
                                frontier_phi_73_pred_3 = _3113 * _2957.y;
                                frontier_phi_73_pred_4 = _3113 * _2957.x;
                                frontier_phi_73_pred_5 = _3187 * _2969.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3191 = frontier_phi_73_pred;
                            _3192 = frontier_phi_73_pred_1;
                            _3196 = frontier_phi_73_pred_2;
                            _3195 = frontier_phi_73_pred_3;
                            _3194 = frontier_phi_73_pred_4;
                            _3193 = frontier_phi_73_pred_5;
                            _2899 = _3194 + _2912;
                            _2900 = _3195 + _2913;
                            _2901 = _3196 + _2914;
                            _2896 = _3191 + _2909;
                            _2897 = _3192 + _2910;
                            _2898 = _3193 + _2911;
                            if (_2916 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2909 = _2896;
                                _2910 = _2897;
                                _2911 = _2898;
                                _2912 = _2899;
                                _2913 = _2900;
                                _2914 = _2901;
                                _2915 = _2916;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2899;
                        frontier_phi_67_pred_1 = _2900;
                        frontier_phi_67_pred_2 = _2901;
                        frontier_phi_67_pred_3 = _2898;
                        frontier_phi_67_pred_4 = _2897;
                        frontier_phi_67_pred_5 = _2896;
                    }
                    _2564 = frontier_phi_67_pred;
                    _2566 = frontier_phi_67_pred_1;
                    _2568 = frontier_phi_67_pred_2;
                    _2562 = frontier_phi_67_pred_3;
                    _2560 = frontier_phi_67_pred_4;
                    _2558 = frontier_phi_67_pred_5;
                    uint _2703 = _2702 + 1u;
                    if (_2703 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2696 = _2558;
                        _2697 = _2560;
                        _2698 = _2562;
                        _2699 = _2564;
                        _2700 = _2566;
                        _2701 = _2568;
                        _2702 = _2703;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2566;
                frontier_phi_55_56_ladder_1 = _2568;
                frontier_phi_55_56_ladder_2 = _2564;
                frontier_phi_55_56_ladder_3 = _2562;
                frontier_phi_55_56_ladder_4 = _2560;
                frontier_phi_55_56_ladder_5 = _2558;
            }
            else
            {
                frontier_phi_55_56_ladder = _2443;
                frontier_phi_55_56_ladder_1 = _2445;
                frontier_phi_55_56_ladder_2 = _2441;
                frontier_phi_55_56_ladder_3 = _2439;
                frontier_phi_55_56_ladder_4 = _2437;
                frontier_phi_55_56_ladder_5 = _2435;
            }
            _2557 = frontier_phi_55_56_ladder_5;
            _2559 = frontier_phi_55_56_ladder_4;
            _2561 = frontier_phi_55_56_ladder_3;
            _2563 = frontier_phi_55_56_ladder_2;
            _2565 = frontier_phi_55_56_ladder;
            _2567 = frontier_phi_55_56_ladder_1;
        }
        float _2572 = isnan(1.0) ? _550 : (isnan(_550) ? 1.0 : min(_550, 1.0));
        _2312 = (_2572 * _2563) + _1745;
        _2314 = (_2572 * _2565) + _1747;
        _2316 = (_2572 * _2567) + _1749;
        _2318 = ((_2557 * _535) * _2572) + _2093;
        _2320 = ((_2559 * _537) * _2572) + _2095;
        _2322 = ((_2561 * _538) * _2572) + _2097;
    }
    else
    {
        _2312 = _1745;
        _2314 = _1747;
        _2316 = _1749;
        _2318 = _2093;
        _2320 = _2095;
        _2322 = _2097;
    }
    uint _2328 = _511 + uint(cbMatDynParam._m0[0u].w);
    float _2336 = ((_366 * cbMtdParam._m0[11u].x) * (_350.x + _335.x)) * cbInstanceData._m0[_2328].x;
    float _2339 = ((_366 * cbMtdParam._m0[11u].y) * (_350.y + _335.y)) * cbInstanceData._m0[_2328].y;
    float _2342 = ((_366 * cbMtdParam._m0[11u].z) * (_350.z + _335.z)) * cbInstanceData._m0[_2328].z;
    float _4211 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _4222 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _4233 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _2359 = (((isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_2312 + ((isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0))) * _550))) + ((_2318 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _1360)) * cbPerFrame._m0[3u].x)) + _2336;
    float _2361 = (_2339 + ((_2320 + ((isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))) * _1360)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_2314 + ((isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0))) * _550)));
    float _2363 = (_2342 + ((_2322 + ((isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))) * _1360)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_2316 + ((isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0))) * _550)));
    float _4259 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2376 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    uint _2377 = _509 + 6u;
    float _2385 = _469 / cbSceneParam._m0[86u].x;
    float _2386 = _470 / cbSceneParam._m0[86u].y;
    vec4 _2400 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2385, _2386, (log2((isnan(cbSceneParam._m0[77u].w) ? _403 : (isnan(_403) ? cbSceneParam._m0[77u].w : min(_403, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2402 = _2400.x;
    float _2403 = _2400.y;
    float _2404 = _2400.z;
    float _2405 = _2400.w;
    float _2498;
    float _2500;
    float _2502;
    float _2504;
    if (_403 > cbSceneParam._m0[78u].w)
    {
        float _2460 = isnan(_403) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _403 : min(cbSceneParam._m0[80u].w, _403));
        float _2461 = _2460 / _403;
        float _2472 = _2461 * _454;
        float _2473 = _455 * _2461;
        float _2474 = (-0.0) - _2473;
        float _2476 = _2461 * _456;
        float _2478 = (cbSceneParam._m0[77u].w * _2474) / _2460;
        float _2479 = _2478 + cbSceneParam._m0[79u].w;
        float _2480 = cbSceneParam._m0[79u].w - _2473;
        float _2486 = sqrt(((_2472 * _2472) + (_2473 * _2473)) + (_2476 * _2476));
        float _2489 = (1.0 - (cbSceneParam._m0[77u].w / _2460)) * _2486;
        float _2494 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2496 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2658;
        if (abs((_2474 - _2478) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2658 = ((((_2479 > 0.0) ? exp2(_2494 * _2479) : (2.0 - exp2(_2496 * _2479))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2489;
        }
        else
        {
            float _2618 = 1.0 / cbSceneParam._m0[80u].x;
            float _2619 = isnan(_2480) ? _2479 : (isnan(_2479) ? _2480 : max(_2479, _2480));
            float _2620 = isnan(_2480) ? _2479 : (isnan(_2479) ? _2480 : min(_2479, _2480));
            float _2629 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : min(_2619, 0.0));
            float _2630 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : min(_2620, 0.0));
            _2658 = ((abs(_2486 / _2474) * cbSceneParam._m0[80u].y) * ((((_2629 - _2630) * 2.0) - ((exp2(_2494 * (isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0)))) - exp2(_2494 * (isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0))))) * _2618)) - ((exp2(_2496 * _2629) - exp2(_2496 * _2630)) * _2618))) + (_2489 * cbSceneParam._m0[80u].z);
        }
        vec4 _2660 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2385, _2386, 1.0), 0.0);
        float _2669 = exp2((_2658 * (-1.44269502162933349609375)) * (1.0 - _2660.w));
        float _2670 = log2(_2669);
        float _2686 = log2(_2405);
        _2498 = (exp2(_2686 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2670 * cbSceneParam._m0[78u].x)) * _2660.x) / cbSceneParam._m0[78u].x)) + _2402;
        _2500 = (exp2(_2686 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2670 * cbSceneParam._m0[78u].y)) * _2660.y) / cbSceneParam._m0[78u].y)) + _2403;
        _2502 = (exp2(_2686 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2670 * cbSceneParam._m0[78u].z)) * _2660.z) / cbSceneParam._m0[78u].z)) + _2404;
        _2504 = _2669 * _2405;
    }
    else
    {
        _2498 = _2402;
        _2500 = _2403;
        _2502 = _2404;
        _2504 = _2405;
    }
    float _2516 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2517 = _2516 == 3.0;
    float _2518 = log2(_2504);
    float _2522 = exp2(_2518 * cbSceneParam._m0[78u].x);
    float _2523 = exp2(_2518 * cbSceneParam._m0[78u].y);
    float _2524 = exp2(_2518 * cbSceneParam._m0[78u].z);
    float _2525 = _2522 * (isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0)));
    float _2526 = _2523 * (isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0)));
    float _2527 = _2524 * (isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0)));
    float _2536 = (_2516 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2536 * (_2517 ? _2525 : (_2525 + (cbSceneParam._m0[72u].w * _2498)));
    SV_Target.y = _2536 * (_2517 ? _2526 : (_2526 + (cbSceneParam._m0[72u].w * _2500)));
    SV_Target.z = _2536 * (_2517 ? _2527 : (_2527 + (cbSceneParam._m0[72u].w * _2502)));
    SV_Target.w = cbInstanceData._m0[_2377].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2336) * _2376) * _2522) * _2536;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2339) * _2376) * _2523) * _2536;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2342) * _2376) * _2524) * _2536;
    SV_Target_1.w = cbInstanceData._m0[_2377].w;
}


