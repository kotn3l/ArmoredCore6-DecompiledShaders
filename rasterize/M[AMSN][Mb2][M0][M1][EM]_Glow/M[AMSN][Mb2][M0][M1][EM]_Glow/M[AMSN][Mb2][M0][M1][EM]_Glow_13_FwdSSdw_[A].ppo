#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1080;
float _3506;
float _3507;
float _3508;
float _3509;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _247 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _253 = _247.x * cbMtdParam._m0[9u].x;
    float _254 = _247.y * cbMtdParam._m0[9u].y;
    float _255 = _247.z * cbMtdParam._m0[9u].z;
    vec4 _275 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _296 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_275.x + 0.00999999977648258209228515625));
    float _298 = _296 * (cbMtdParam._m0[15u].x + 1.0);
    float _3518 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _299 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
    float _307 = ((((cbMtdParam._m0[12u].x - _253) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _299) + _253;
    float _308 = ((((cbMtdParam._m0[12u].y - _254) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _299) + _254;
    float _309 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _255)) * _299) + _255;
    vec4 _321 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _325 = _321.z;
    float _329 = (_321.x * 2.0) + (-1.0);
    float _331 = (_321.y * 2.0) + (-1.0);
    float _332 = dot(vec2(_329, _331), vec2(_329, _331));
    float _3529 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _337 = sqrt(1.0 - (isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))));
    float _340 = _296 * (cbMtdParam._m0[14u].w + 1.0);
    float _3540 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _344 = ((cbMtdParam._m0[14u].y - _325) * (isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0)))) + _325;
    vec4 _372 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _387 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _432 = (TEXCOORD_6.x - ((cbMtdParam._m0[13u].w * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_5, SS_WrapLinear), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].x + 1.0);
    float _3551 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _433 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
    float _434 = ((_387.x + _372.x) * cbMtdParam._m0[11u].x) * _433;
    float _435 = ((_387.y + _372.y) * cbMtdParam._m0[11u].y) * _433;
    float _436 = ((_387.z + _372.z) * cbMtdParam._m0[11u].z) * _433;
    vec4 _448 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[9u].w));
    float _450 = _448.x;
    vec4 _475 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _481 = (_475.x * 2.0) + (-1.0);
    float _482 = (_475.y * 2.0) + (-1.0);
    float _483 = dot(vec2(_481, _482), vec2(_481, _482));
    float _3562 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _499 = (_299 * (((cbMtdParam._m0[13u].z * _329) - _329) + _481)) + _329;
    float _500 = (_299 * (((cbMtdParam._m0[13u].z * _331) - _331) + _482)) + _331;
    float _501 = (_299 * (sqrt(1.0 - (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0)))) - _337)) + _337;
    float _504 = fma(_501, _218 * NORMAL.x, fma(_500, _225 * TANGENT.x, (_211 * _203) * _499));
    float _507 = fma(_501, _218 * NORMAL.y, fma(_500, _225 * TANGENT.y, (_211 * _204) * _499));
    float _510 = fma(_501, _218 * NORMAL.z, fma(_500, _225 * TANGENT.z, (_211 * _205) * _499));
    float _514 = inversesqrt(dot(vec3(_504, _507, _510), vec3(_504, _507, _510)));
    float _515 = _514 * _504;
    float _516 = _514 * _507;
    float _517 = _514 * _510;
    float _3573 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _518 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
    float _3584 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _3595 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _3606 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _537 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _577 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _587 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _577);
    float _588 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _577);
    float _589 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _577);
    float _593 = inversesqrt(dot(vec3(_587, _588, _589), vec3(_587, _588, _589)));
    float _594 = _587 * _593;
    float _595 = _588 * _593;
    float _596 = _589 * _593;
    vec4 _601 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _603 = _601.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _760 = sqrt(((_587 * _587) + (_588 * _588)) + (_589 * _589));
        float _766 = (cbMatDynParam._m0[5u].x * _760) + cbMatDynParam._m0[5u].y;
        float _3617 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _767 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _771 = (cbMatDynParam._m0[5u].z * _760) + cbMatDynParam._m0[5u].w;
        float _3628 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) - _767)) + _767) < ((_603 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _615 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _616 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _636 = fma(_517, cbSceneParam._m0[5u].z, fma(_516, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _515));
    float _639 = fma(_517, cbSceneParam._m0[6u].z, fma(_516, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _515));
    float _642 = fma(_517, cbSceneParam._m0[7u].z, fma(_516, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _515));
    uint _655 = uint(roundEven(NORMAL.w)) * 13u;
    uint _656 = _655 + 9u;
    uint _657 = _656 + uint(cbMatDynParam._m0[0u].w);
    float _663 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0)))) * cbInstanceData._m0[_657].x;
    float _664 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0)))) * cbInstanceData._m0[_657].y;
    float _665 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0)))) * cbInstanceData._m0[_657].z;
    float _3639 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _666 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
    float _3650 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _667 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
    float _3661 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _668 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
    vec4 _677 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _615, cbSceneParam._m0[86u].y * _616));
    float _680 = _677.x * TEXCOORD_3.w;
    float _681 = dot(vec3(_515, _516, _517), vec3(_594, _595, _596));
    float _684 = _681 * 2.0;
    float _688 = (_684 * _515) - _594;
    float _689 = (_684 * _516) - _595;
    float _690 = (_684 * _517) - _596;
    float _694 = abs(dot(vec3(_594, _595, _596), vec3(_515, _516, _517)));
    float _3672 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _696 = sqrt(_518);
    float _709 = exp2((_696 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_696 * 3.0));
    float _741 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _745 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _749 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1079;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _804 = fma(_749, cbModelParam._m0[26u].z, fma(_745, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _741));
        float _808 = fma(_749, cbModelParam._m0[27u].z, fma(_745, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _741));
        float _812 = fma(_749, cbModelParam._m0[28u].z, fma(_745, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _741));
        float _837 = _741 + _515;
        float _838 = _745 + _516;
        float _839 = _749 + _517;
        float _849 = fma(_839, cbModelParam._m0[26u].z, fma(_838, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _837)) - _804;
        float _850 = fma(_839, cbModelParam._m0[27u].z, fma(_838, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _837)) - _808;
        float _851 = fma(_839, cbModelParam._m0[28u].z, fma(_838, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _837)) - _812;
        float _855 = inversesqrt(dot(vec3(_849, _850, _851), vec3(_849, _850, _851)));
        float _868 = ((_855 * _849) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_804 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _869 = ((_855 * _850) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_808 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _870 = ((_855 * _851) / cbModelParam._m0[34u].z) + ((((((_812 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _873 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        vec4 _880 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        float _907 = exp2((_873.w + (-0.5)) * 20.0) * 2.0;
        float _908 = _907 * (_873.x + (-0.5));
        float _909 = _907 * (_873.y + (-0.5));
        float _910 = _907 * (_873.z + (-0.5));
        float _917 = exp2((_880.w + (-0.5)) * 20.0) * 2.0;
        float _918 = _917 * (_880.x + (-0.5));
        float _919 = _917 * (_880.y + (-0.5));
        float _920 = _917 * (_880.z + (-0.5));
        float _927 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _928 = _927 * (_887.x + (-0.5));
        float _929 = _927 * (_887.y + (-0.5));
        float _930 = _927 * (_887.z + (-0.5));
        float _937 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_894.x + (-0.5));
        float _939 = _937 * (_894.y + (-0.5));
        float _940 = _937 * (_894.z + (-0.5));
        float _941 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _942 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _943 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _944 = _908 * 0.5;
        float _945 = _918 * 0.5;
        float _946 = _928 * 0.5;
        float _947 = dot(vec3(_944, _945, _946), vec3(_944, _945, _946));
        float _952 = (_947 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_947);
        float _961 = (dot(vec3(_515, _516, _517), vec3(_952 * _944, _952 * _945, _952 * _946)) + 1.0) * 0.5;
        float _3698 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _971 = sqrt(((_945 * _945) + (_944 * _944)) + (_946 * _946)) / (_941 + 9.9999997473787516355514526367188e-06);
        float _3709 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _973 = _972 * 2.0;
        float _977 = (1.0 - _972) / (_972 + 1.0);
        float _3720 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _987 = ((((1.0 - _978) * (_973 + 2.0)) * exp2(log2(isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * (_973 + 1.0))) + _978) * _941;
        float _988 = _909 * 0.5;
        float _989 = _919 * 0.5;
        float _990 = _929 * 0.5;
        float _991 = dot(vec3(_988, _989, _990), vec3(_988, _989, _990));
        float _996 = (_991 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_991);
        float _1004 = (dot(vec3(_515, _516, _517), vec3(_996 * _988, _996 * _989, _996 * _990)) + 1.0) * 0.5;
        float _3731 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1013 = sqrt(((_989 * _989) + (_988 * _988)) + (_990 * _990)) / (_942 + 9.9999997473787516355514526367188e-06);
        float _3742 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1015 = _1014 * 2.0;
        float _1019 = (1.0 - _1014) / (_1014 + 1.0);
        float _3753 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1029 = ((((1.0 - _1020) * (_1015 + 2.0)) * exp2(log2(isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * (_1015 + 1.0))) + _1020) * _942;
        float _1030 = _910 * 0.5;
        float _1031 = _920 * 0.5;
        float _1032 = _930 * 0.5;
        float _1033 = dot(vec3(_1030, _1031, _1032), vec3(_1030, _1031, _1032));
        float _1038 = (_1033 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1033);
        float _1046 = (dot(vec3(_515, _516, _517), vec3(_1038 * _1030, _1038 * _1031, _1038 * _1032)) + 1.0) * 0.5;
        float _3764 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1055 = sqrt(((_1031 * _1031) + (_1030 * _1030)) + (_1032 * _1032)) / (_943 + 9.9999997473787516355514526367188e-06);
        float _3775 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1057 = _1056 * 2.0;
        float _1061 = (1.0 - _1056) / (_1056 + 1.0);
        float _3786 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1071 = ((((1.0 - _1062) * (_1057 + 2.0)) * exp2(log2(isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * (_1057 + 1.0))) + _1062) * _943;
        _1079 = _910;
        _1081 = _909;
        _1082 = _908;
        _1083 = _920;
        _1084 = _919;
        _1085 = _918;
        _1086 = _930;
        _1087 = _929;
        _1088 = _928;
        _1089 = _943;
        _1090 = _942;
        _1091 = _941;
        _1092 = cbModelParam._m0[36u].z * (isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0)));
        _1093 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0)));
        _1094 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0)));
    }
    else
    {
        _1079 = _1080;
        _1081 = _1080;
        _1082 = _1080;
        _1083 = _1080;
        _1084 = _1080;
        _1085 = _1080;
        _1086 = _1080;
        _1087 = _1080;
        _1088 = _1080;
        _1089 = _1080;
        _1090 = _1080;
        _1091 = _1080;
        _1092 = 0.0;
        _1093 = 0.0;
        _1094 = 0.0;
    }
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1123 = fma(_749, cbModelParam._m0[30u].z, fma(_745, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _741));
        float _1127 = fma(_749, cbModelParam._m0[31u].z, fma(_745, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _741));
        float _1131 = fma(_749, cbModelParam._m0[32u].z, fma(_745, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _741));
        float _1154 = _741 + _515;
        float _1155 = _745 + _516;
        float _1156 = _749 + _517;
        float _1166 = fma(_1156, cbModelParam._m0[30u].z, fma(_1155, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1154)) - _1123;
        float _1167 = fma(_1156, cbModelParam._m0[31u].z, fma(_1155, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1154)) - _1127;
        float _1168 = fma(_1156, cbModelParam._m0[32u].z, fma(_1155, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1154)) - _1131;
        float _1172 = inversesqrt(dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168)));
        float _1185 = ((_1172 * _1166) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1123 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1186 = ((_1172 * _1167) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1127 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1187 = ((_1172 * _1168) / cbModelParam._m0[35u].z) + ((((((_1131 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        float _1222 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1189.x + (-0.5));
        float _1224 = _1222 * (_1189.y + (-0.5));
        float _1225 = _1222 * (_1189.z + (-0.5));
        float _1232 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1196.x + (-0.5));
        float _1234 = _1232 * (_1196.y + (-0.5));
        float _1235 = _1232 * (_1196.z + (-0.5));
        float _1242 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1203.x + (-0.5));
        float _1244 = _1242 * (_1203.y + (-0.5));
        float _1245 = _1242 * (_1203.z + (-0.5));
        float _1252 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1210.x + (-0.5));
        float _1254 = _1252 * (_1210.y + (-0.5));
        float _1255 = _1252 * (_1210.z + (-0.5));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = _1223 * 0.5;
        float _1260 = _1233 * 0.5;
        float _1261 = _1243 * 0.5;
        float _1262 = dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261));
        float _1267 = (_1262 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1262);
        float _1275 = (dot(vec3(_515, _516, _517), vec3(_1267 * _1259, _1267 * _1260, _1267 * _1261)) + 1.0) * 0.5;
        float _3827 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1284 = sqrt(((_1260 * _1260) + (_1259 * _1259)) + (_1261 * _1261)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _3838 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1286 = _1285 * 2.0;
        float _1290 = (1.0 - _1285) / (_1285 + 1.0);
        float _3849 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1300 = ((((1.0 - _1291) * (_1286 + 2.0)) * exp2(log2(isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * (_1286 + 1.0))) + _1291) * _1256;
        float _1301 = _1224 * 0.5;
        float _1302 = _1234 * 0.5;
        float _1303 = _1244 * 0.5;
        float _1304 = dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303));
        float _1309 = (_1304 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1304);
        float _1317 = (dot(vec3(_515, _516, _517), vec3(_1309 * _1301, _1309 * _1302, _1309 * _1303)) + 1.0) * 0.5;
        float _3860 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1326 = sqrt(((_1302 * _1302) + (_1301 * _1301)) + (_1303 * _1303)) / (_1257 + 9.9999997473787516355514526367188e-06);
        float _3871 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1328 = _1327 * 2.0;
        float _1332 = (1.0 - _1327) / (_1327 + 1.0);
        float _3882 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1342 = ((((1.0 - _1333) * (_1328 + 2.0)) * exp2(log2(isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * (_1328 + 1.0))) + _1333) * _1257;
        float _1343 = _1225 * 0.5;
        float _1344 = _1235 * 0.5;
        float _1345 = _1245 * 0.5;
        float _1346 = dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345));
        float _1351 = (_1346 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1346);
        float _1359 = (dot(vec3(_515, _516, _517), vec3(_1351 * _1343, _1351 * _1344, _1351 * _1345)) + 1.0) * 0.5;
        float _3893 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1368 = sqrt(((_1344 * _1344) + (_1343 * _1343)) + (_1345 * _1345)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _3904 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1370 = _1369 * 2.0;
        float _1374 = (1.0 - _1369) / (_1369 + 1.0);
        float _3915 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1384 = ((((1.0 - _1375) * (_1370 + 2.0)) * exp2(log2(isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * (_1370 + 1.0))) + _1375) * _1258;
        _1392 = _1225;
        _1393 = _1224;
        _1394 = _1223;
        _1395 = _1235;
        _1396 = _1234;
        _1397 = _1233;
        _1398 = _1245;
        _1399 = _1244;
        _1400 = _1243;
        _1401 = _1258;
        _1402 = _1257;
        _1403 = _1256;
        _1404 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)));
        _1405 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)));
        _1406 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)));
    }
    else
    {
        _1392 = _1080;
        _1393 = _1080;
        _1394 = _1080;
        _1395 = _1080;
        _1396 = _1080;
        _1397 = _1080;
        _1398 = _1080;
        _1399 = _1080;
        _1400 = _1080;
        _1401 = _1080;
        _1402 = _1080;
        _1403 = _1080;
        _1404 = 0.0;
        _1405 = 0.0;
        _1406 = 0.0;
    }
    float _1416 = (cbModelParam._m0[1u].x * (_1404 - _1092)) + _1092;
    float _1417 = (cbModelParam._m0[1u].x * (_1405 - _1093)) + _1093;
    float _1418 = (cbModelParam._m0[1u].x * (_1406 - _1094)) + _1094;
    float _1439 = fma(_1418, cbSceneParam._m0[89u].z, fma(_1417, cbSceneParam._m0[89u].y, _1416 * cbSceneParam._m0[89u].x));
    float _1442 = fma(_1418, cbSceneParam._m0[90u].z, fma(_1417, cbSceneParam._m0[90u].y, _1416 * cbSceneParam._m0[90u].x));
    float _1445 = fma(_1418, cbSceneParam._m0[91u].z, fma(_1417, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1416));
    float _1460 = _688 * 0.5;
    float _1461 = _689 * 0.5;
    float _1462 = _690 * 0.5;
    float _1463 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1394, _1397, _1400, _1403));
    float _1466 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1393, _1396, _1399, _1402));
    float _1469 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1392, _1395, _1398, _1401));
    float _1503;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1476 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1079, _1083, _1086, _1089));
        float _1480 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1081, _1084, _1087, _1090));
        float _1484 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1082, _1085, _1088, _1091));
        float _1491 = dot(vec4(cbModelParam._m0[39u]), vec4(_1460, _1461, _1462, 1.0));
        _1503 = dot(vec3(isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)), isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)), isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1491) ? 0.0 : (isnan(0.0) ? _1491 : max(0.0, _1491))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1503 = 1.0;
    }
    float _1514;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1505 = dot(vec4(cbModelParam._m0[40u]), vec4(_1460, _1461, _1462, 1.0));
        _1514 = dot(vec3(isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)), isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)), isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1505) ? 0.0 : (isnan(0.0) ? _1505 : max(0.0, _1505))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1514 = 1.0;
    }
    float _1518 = (_1514 * cbModelParam._m0[1u].x) + (_1503 * (1.0 - cbModelParam._m0[1u].x));
    float _1528 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _518);
    float _1529 = isnan(_1528) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1528 : min(cbModelParam._m0[25u].z, _1528));
    float _1609;
    float _1611;
    float _1613;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1576 = fma(_749, cbModelParam._m0[13u].z, fma(_745, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _741)) + cbModelParam._m0[13u].w;
        float _1580 = fma(_749, cbModelParam._m0[14u].z, fma(_745, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _741)) + cbModelParam._m0[14u].w;
        float _1584 = fma(_749, cbModelParam._m0[15u].z, fma(_745, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _741)) + cbModelParam._m0[15u].w;
        float _1587 = fma(_690, cbModelParam._m0[13u].z, fma(_689, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _688));
        float _1590 = fma(_690, cbModelParam._m0[14u].z, fma(_689, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _688));
        float _1593 = fma(_690, cbModelParam._m0[15u].z, fma(_689, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _688));
        float _1621;
        if (_1587 > 0.0)
        {
            _1621 = abs((1.0 - _1576) / _1587);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1587 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1576 + 1.0) / _1587);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1621 = frontier_phi_17_15_ladder;
        }
        float _1845;
        if (_1590 > 0.0)
        {
            _1845 = abs((1.0 - _1580) / _1590);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1590 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1580 + 1.0) / _1590);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1845 = frontier_phi_26_22_ladder;
        }
        float _2091;
        if (_1593 > 0.0)
        {
            _2091 = abs((1.0 - _1584) / _1593);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1593 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1584 + 1.0) / _1593);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2091 = frontier_phi_38_33_ladder;
        }
        float _2093 = isnan(_1845) ? _1621 : (isnan(_1621) ? _1845 : min(_1621, _1845));
        float _2094 = isnan(_2091) ? _2093 : (isnan(_2093) ? _2091 : min(_2093, _2091));
        float _2098 = (_2094 * _1587) + _1576;
        float _2099 = (_2094 * _1590) + _1580;
        float _2100 = (_2094 * _1593) + _1584;
        float _2101 = _2094 * 9.9999997473787516355514526367188e-05;
        float _2103 = (-1.0) - _2101;
        float _2105 = _2101 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2100 > _2105) || ((_2100 < _2103) || ((_2099 > _2105) || ((_2099 < _2103) || ((_2098 < _2103) || (_2098 > _2105))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2224 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2100, cbModelParam._m0[9u].z, fma(_2099, cbModelParam._m0[9u].y, _2098 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2100, cbModelParam._m0[10u].z, fma(_2099, cbModelParam._m0[10u].y, _2098 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2100, cbModelParam._m0[11u].z, fma(_2099, cbModelParam._m0[11u].y, _2098 * cbModelParam._m0[11u].x))), _1529);
            frontier_phi_16_38_ladder = _2224.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2224.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2224.x * cbModelParam._m0[1u].y;
        }
        _1609 = frontier_phi_16_38_ladder_2;
        _1611 = frontier_phi_16_38_ladder_1;
        _1613 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1597 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_688, _689, _690), _1529);
        _1609 = _1597.x * cbModelParam._m0[1u].y;
        _1611 = _1597.y * cbModelParam._m0[1u].y;
        _1613 = _1597.z * cbModelParam._m0[1u].y;
    }
    float _1617 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _518);
    float _1618 = isnan(_1617) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1617 : min(cbModelParam._m0[25u].w, _1617));
    float _1709;
    float _1711;
    float _1713;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1673 = fma(_749, cbModelParam._m0[21u].z, fma(_745, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _741)) + cbModelParam._m0[21u].w;
        float _1677 = fma(_749, cbModelParam._m0[22u].z, fma(_745, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _741)) + cbModelParam._m0[22u].w;
        float _1681 = fma(_749, cbModelParam._m0[23u].z, fma(_745, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _741)) + cbModelParam._m0[23u].w;
        float _1684 = fma(_690, cbModelParam._m0[21u].z, fma(_689, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _688));
        float _1687 = fma(_690, cbModelParam._m0[22u].z, fma(_689, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _688));
        float _1690 = fma(_690, cbModelParam._m0[23u].z, fma(_689, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _688));
        float _1850;
        if (_1684 > 0.0)
        {
            _1850 = abs((1.0 - _1673) / _1684);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1684 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1673 + 1.0) / _1684);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1850 = frontier_phi_28_24_ladder;
        }
        float _2118;
        if (_1687 > 0.0)
        {
            _2118 = abs((1.0 - _1677) / _1687);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1687 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1677 + 1.0) / _1687);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2118 = frontier_phi_40_35_ladder;
        }
        float _2323;
        if (_1690 > 0.0)
        {
            _2323 = abs((1.0 - _1681) / _1690);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1690 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1681 + 1.0) / _1690);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2323 = frontier_phi_49_46_ladder;
        }
        float _2325 = isnan(_2118) ? _1850 : (isnan(_1850) ? _2118 : min(_1850, _2118));
        float _2326 = isnan(_2323) ? _2325 : (isnan(_2325) ? _2323 : min(_2325, _2323));
        float _2330 = (_2326 * _1684) + _1673;
        float _2331 = (_2326 * _1687) + _1677;
        float _2332 = (_2326 * _1690) + _1681;
        float _2333 = _2326 * 9.9999997473787516355514526367188e-05;
        float _2334 = (-1.0) - _2333;
        float _2336 = _2333 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2332 > _2336) || ((_2332 < _2334) || ((_2331 > _2336) || ((_2331 < _2334) || ((_2330 < _2334) || (_2330 > _2336))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2560 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2332, cbModelParam._m0[17u].z, fma(_2331, cbModelParam._m0[17u].y, _2330 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2332, cbModelParam._m0[18u].z, fma(_2331, cbModelParam._m0[18u].y, _2330 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2332, cbModelParam._m0[19u].z, fma(_2331, cbModelParam._m0[19u].y, _2330 * cbModelParam._m0[19u].x))), _1618);
            frontier_phi_25_49_ladder = _2560.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2560.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2560.x * cbModelParam._m0[1u].z;
        }
        _1709 = frontier_phi_25_49_ladder_2;
        _1711 = frontier_phi_25_49_ladder_1;
        _1713 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1693 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_688, _689, _690), _1618);
        _1709 = _1693.x * cbModelParam._m0[1u].z;
        _1711 = _1693.y * cbModelParam._m0[1u].z;
        _1713 = _1693.z * cbModelParam._m0[1u].z;
    }
    float _1725 = ((((1.0 - _709) * ((_696 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_709 * _696)) * _680;
    float _1726 = _1725 * ((cbModelParam._m0[1u].w * (_1709 - _1609)) + _1609);
    float _1727 = _1725 * ((cbModelParam._m0[1u].w * (_1711 - _1611)) + _1611);
    float _1728 = _1725 * ((cbModelParam._m0[1u].w * (_1713 - _1613)) + _1613);
    float _1731 = fma(_1728, cbSceneParam._m0[89u].z, fma(_1727, cbSceneParam._m0[89u].y, _1726 * cbSceneParam._m0[89u].x));
    float _1734 = fma(_1728, cbSceneParam._m0[90u].z, fma(_1727, cbSceneParam._m0[90u].y, _1726 * cbSceneParam._m0[90u].x));
    float _1737 = fma(_1728, cbSceneParam._m0[91u].z, fma(_1727, cbSceneParam._m0[91u].y, _1726 * cbSceneParam._m0[91u].x));
    vec4 _1745 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_615, _616));
    float _1747 = _1745.w;
    float _1759 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1747);
    float _1760 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1747);
    float _1761 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1747);
    uvec4 _1765 = floatBitsToUint(cbInstanceData._m0[_655 + 5u]);
    uint _1767 = _1765.x * 14u;
    uint _1768 = _1767 + 13u;
    float _1775 = _680 + (-1.0);
    float _1780 = (cbLight._m0[_1768].x * _1775) + 1.0;
    float _1781 = (cbLight._m0[_1768].y * _1775) + 1.0;
    float _1782 = (cbLight._m0[_1768].z * _1775) + 1.0;
    float _1783 = (cbLight._m0[_1768].w * _1775) + 1.0;
    uint _1784 = _1767 + 5u;
    float _1790 = isnan(1.0) ? _1781 : (isnan(_1781) ? 1.0 : min(_1781, 1.0));
    uint _1794 = _1767 + 4u;
    float _1804 = isnan(1.0) ? _1780 : (isnan(_1780) ? 1.0 : min(_1780, 1.0));
    uint _1808 = _1767 | 1u;
    float _1819 = dot(vec3(cbLight._m0[_1767].xyz), vec3(_515, _516, _517));
    float _1822 = dot(vec3(cbLight._m0[_1808].xyz), vec3(_515, _516, _517));
    float _4051 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
    float _4062 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
    float _1827 = (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * 0.3183098733425140380859375;
    float _1829 = (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * 0.3183098733425140380859375;
    float _1836 = ((cbLight._m0[_1784].x * _1790) * _1829) + (((cbLight._m0[_1794].x * _1759) * _1804) * _1827);
    float _1837 = ((_1790 * cbLight._m0[_1784].y) * _1829) + (((cbLight._m0[_1794].y * _1760) * _1804) * _1827);
    float _1838 = ((_1790 * cbLight._m0[_1784].z) * _1829) + (((cbLight._m0[_1794].z * _1761) * _1804) * _1827);
    uvec4 _1842 = floatBitsToUint(cbLight._m0[_1767 + 12u]);
    bool _1844 = _1842.x == 0u;
    float _1855;
    float _1857;
    float _1859;
    if (_1844)
    {
        _1855 = _1836;
        _1857 = _1837;
        _1859 = _1838;
    }
    else
    {
        uint _1863 = _1767 + 6u;
        float _1879 = (dot(vec3(cbLight._m0[_1767 + 2u].xyz), vec3(_515, _516, _517)) * 0.5) + 0.5;
        float _1880 = _1879 * _1879;
        float _4073 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
        float _1881 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1882 = isnan(1.0) ? _1782 : (isnan(_1782) ? 1.0 : min(_1782, 1.0));
        _1855 = (((cbLight._m0[_1863].x * 0.3183098733425140380859375) * _1881) * _1882) + _1836;
        _1857 = (((cbLight._m0[_1863].y * 0.3183098733425140380859375) * _1881) * _1882) + _1837;
        _1859 = (((cbLight._m0[_1863].z * 0.3183098733425140380859375) * _1881) * _1882) + _1838;
    }
    bool _1862 = _1842.y == 0u;
    float _1900;
    float _1902;
    float _1904;
    if (_1862)
    {
        _1900 = _1855;
        _1902 = _1857;
        _1904 = _1859;
    }
    else
    {
        uint _2062 = _1767 + 7u;
        float _2078 = (dot(vec3(cbLight._m0[_1767 + 3u].xyz), vec3(_515, _516, _517)) * 0.5) + 0.5;
        float _2079 = _2078 * _2078;
        float _4089 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2080 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _2081 = isnan(1.0) ? _1783 : (isnan(_1783) ? 1.0 : min(_1783, 1.0));
        _1900 = (((cbLight._m0[_2062].x * 0.3183098733425140380859375) * _2080) * _2081) + _1855;
        _1902 = (((cbLight._m0[_2062].y * 0.3183098733425140380859375) * _2080) * _2081) + _1857;
        _1904 = (((cbLight._m0[_2062].z * 0.3183098733425140380859375) * _2080) * _2081) + _1859;
    }
    uint _1907 = _1767 + 8u;
    float _1920 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1767].w)) * _518) * 0.949999988079071044921875);
    float _1921 = _1920 * _1920;
    float _1922 = cbLight._m0[_1767].x + _594;
    float _1923 = cbLight._m0[_1767].y + _595;
    float _1924 = cbLight._m0[_1767].z + _596;
    float _1928 = inversesqrt(dot(vec3(_1922, _1923, _1924), vec3(_1922, _1923, _1924)));
    float _1929 = _1928 * _1922;
    float _1930 = _1928 * _1923;
    float _1931 = _1928 * _1924;
    float _1932 = dot(vec3(_515, _516, _517), vec3(cbLight._m0[_1767].xyz));
    float _4105 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _1935 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _4116 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _1936 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _1937 = dot(vec3(_515, _516, _517), vec3(_1929, _1930, _1931));
    float _4127 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1940 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _1941 = dot(vec3(cbLight._m0[_1767].xyz), vec3(_1929, _1930, _1931));
    float _4138 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _1945 = _1921 * _1921;
    float _1949 = ((_1940 * _1940) * (_1945 + (-1.0))) + 1.0;
    float _1960 = (exp2(log2(1.0 - (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1961 = 1.0 - _1921;
    float _1972 = (0.5 / (((_1936 * ((_1935 * _1961) + _1921)) + 9.9999999392252902907785028219223e-09) + (((_1936 * _1961) + _1921) * _1935))) * _1935;
    float _4149 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1974 = (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_1945 / ((_1949 * _1949) * 3.141590118408203125));
    uint _1988 = _1767 + 9u;
    float _1999 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1808].w)) * _518) * 0.949999988079071044921875);
    float _2000 = _1999 * _1999;
    float _2001 = cbLight._m0[_1808].x + _594;
    float _2002 = cbLight._m0[_1808].y + _595;
    float _2003 = cbLight._m0[_1808].z + _596;
    float _2007 = inversesqrt(dot(vec3(_2001, _2002, _2003), vec3(_2001, _2002, _2003)));
    float _2008 = _2007 * _2001;
    float _2009 = _2007 * _2002;
    float _2010 = _2007 * _2003;
    float _2011 = dot(vec3(_515, _516, _517), vec3(cbLight._m0[_1808].xyz));
    float _4160 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2014 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
    float _2015 = dot(vec3(_515, _516, _517), vec3(_2008, _2009, _2010));
    float _4171 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2018 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _2019 = dot(vec3(cbLight._m0[_1808].xyz), vec3(_2008, _2009, _2010));
    float _4182 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _2023 = _2000 * _2000;
    float _2027 = ((_2018 * _2018) * (_2023 + (-1.0))) + 1.0;
    float _2036 = (exp2(log2(1.0 - (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2037 = 1.0 - _2000;
    float _2047 = (0.5 / (((_1936 * ((_2014 * _2037) + _2000)) + 9.9999999392252902907785028219223e-09) + (((_1936 * _2037) + _2000) * _2014))) * _2014;
    float _4193 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2049 = (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * (_2023 / ((_2027 * _2027) * 3.141590118408203125));
    float _2059 = (((_2036 * cbLight._m0[_1988].x) * _2049) * _1790) + ((((cbLight._m0[_1907].x * _1759) * _1960) * _1974) * _1804);
    float _2060 = (((_2036 * cbLight._m0[_1988].y) * _2049) * _1790) + ((((cbLight._m0[_1907].y * _1760) * _1960) * _1974) * _1804);
    float _2061 = (((_2036 * cbLight._m0[_1988].z) * _2049) * _1790) + ((((cbLight._m0[_1907].z * _1761) * _1960) * _1974) * _1804);
    float _2123;
    float _2125;
    float _2127;
    if (_1844)
    {
        _2123 = _2059;
        _2125 = _2060;
        _2127 = _2061;
    }
    else
    {
        uint _2129 = _1767 + 2u;
        uint _2133 = _1767 + 10u;
        float _2147 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2129].w)) * _518) * 0.949999988079071044921875);
        float _2148 = _2147 * _2147;
        float _2149 = cbLight._m0[_2129].x + _594;
        float _2150 = cbLight._m0[_2129].y + _595;
        float _2151 = cbLight._m0[_2129].z + _596;
        float _2155 = inversesqrt(dot(vec3(_2149, _2150, _2151), vec3(_2149, _2150, _2151)));
        float _2156 = _2155 * _2149;
        float _2157 = _2155 * _2150;
        float _2158 = _2155 * _2151;
        float _2159 = dot(vec3(_515, _516, _517), vec3(cbLight._m0[_2129].xyz));
        float _4204 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2162 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _2163 = dot(vec3(_515, _516, _517), vec3(_2156, _2157, _2158));
        float _4215 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
        float _2166 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _2167 = dot(vec3(cbLight._m0[_2129].xyz), vec3(_2156, _2157, _2158));
        float _4226 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
        float _2171 = _2148 * _2148;
        float _2175 = ((_2166 * _2166) * (_2171 + (-1.0))) + 1.0;
        float _2184 = (exp2(log2(1.0 - (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2185 = 1.0 - _2148;
        float _2195 = (0.5 / (((_1936 * ((_2162 * _2185) + _2148)) + 9.9999999392252902907785028219223e-09) + (((_1936 * _2185) + _2148) * _2162))) * _2162;
        float _4237 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        float _2197 = (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (_2171 / ((_2175 * _2175) * 3.141590118408203125));
        float _2198 = isnan(1.0) ? _1782 : (isnan(_1782) ? 1.0 : min(_1782, 1.0));
        _2123 = (((_2184 * cbLight._m0[_2133].x) * _2197) * _2198) + _2059;
        _2125 = (((_2184 * cbLight._m0[_2133].y) * _2197) * _2198) + _2060;
        _2127 = (((_2184 * cbLight._m0[_2133].z) * _2197) * _2198) + _2061;
    }
    float _2233;
    float _2235;
    float _2237;
    if (_1862)
    {
        _2233 = _2123;
        _2235 = _2125;
        _2237 = _2127;
    }
    else
    {
        uint _2244 = _1767 + 3u;
        uint _2248 = _1767 + 11u;
        float _2262 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2244].w)) * _518) * 0.949999988079071044921875);
        float _2263 = _2262 * _2262;
        float _2264 = cbLight._m0[_2244].x + _594;
        float _2265 = cbLight._m0[_2244].y + _595;
        float _2266 = cbLight._m0[_2244].z + _596;
        float _2270 = inversesqrt(dot(vec3(_2264, _2265, _2266), vec3(_2264, _2265, _2266)));
        float _2271 = _2270 * _2264;
        float _2272 = _2270 * _2265;
        float _2273 = _2270 * _2266;
        float _2274 = dot(vec3(_515, _516, _517), vec3(cbLight._m0[_2244].xyz));
        float _4253 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2277 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _2278 = dot(vec3(_515, _516, _517), vec3(_2271, _2272, _2273));
        float _4264 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2281 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _2282 = dot(vec3(cbLight._m0[_2244].xyz), vec3(_2271, _2272, _2273));
        float _4275 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2286 = _2263 * _2263;
        float _2290 = ((_2281 * _2281) * (_2286 + (-1.0))) + 1.0;
        float _2299 = (exp2(log2(1.0 - (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2300 = 1.0 - _2263;
        float _2310 = (0.5 / (((_1936 * ((_2277 * _2300) + _2263)) + 9.9999999392252902907785028219223e-09) + (((_1936 * _2300) + _2263) * _2277))) * _2277;
        float _4286 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
        float _2312 = (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_2286 / ((_2290 * _2290) * 3.141590118408203125));
        float _2313 = isnan(1.0) ? _1783 : (isnan(_1783) ? 1.0 : min(_1783, 1.0));
        _2233 = (((_2299 * cbLight._m0[_2248].x) * _2312) * _2313) + _2123;
        _2235 = (((_2299 * cbLight._m0[_2248].y) * _2312) * _2313) + _2125;
        _2237 = (((_2299 * cbLight._m0[_2248].z) * _2312) * _2313) + _2127;
    }
    float _2448;
    float _2450;
    float _2452;
    float _2454;
    float _2456;
    float _2458;
    if (_1765.y == 0u)
    {
        float _2388 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2389 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2388;
        float _2390 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2388;
        float _2391 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2388;
        uvec4 _2403 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2404 = _2403.x;
        uint _2415 = uint((float(_2403.y) * floor(float(uint(cbSceneParam._m0[85u].y * _616) / _2404))) + floor(float(uint(cbSceneParam._m0[85u].x * _615) / _2404)));
        float _2425 = (log2(_2391 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2426 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        uint _2429 = uint(isnan(14.0) ? _2426 : (isnan(_2426) ? 14.0 : min(_2426, 14.0)));
        uvec4 _2434 = texelFetch(g_lightClusterGridBuffer, int(((_2429 << 2u) + (_2415 << 6u)) >> 2u));
        uint _2435 = _2434.x;
        uint _2436 = _2403.z;
        float _2565;
        float _2567;
        float _2569;
        float _2571;
        float _2573;
        float _2575;
        if (((((1u << ((_2436 >> 4u) & 15u)) + 4294967295u) & _2435) == 0u) || ((_2436 & 240u) == 0u))
        {
            _2565 = 0.0;
            _2567 = 0.0;
            _2569 = 0.0;
            _2571 = 0.0;
            _2573 = 0.0;
            _2575 = 0.0;
        }
        else
        {
            float _2566;
            float _2568;
            float _2570;
            float _2572;
            float _2574;
            float _2576;
            float _2727 = 0.0;
            float _2728 = 0.0;
            float _2729 = 0.0;
            float _2730 = 0.0;
            float _2731 = 0.0;
            float _2732 = 0.0;
            uint _2733 = 0u;
            uint _2742;
            bool _2743;
            for (;;)
            {
                _2742 = texelFetch(g_lightClassification, int((((_2429 << 5u) + (_2415 << 9u)) + (_2733 << 2u)) >> 2u)).x;
                _2743 = _2742 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2743)
                {
                    frontier_phi_66_pred = _2727;
                    frontier_phi_66_pred_1 = _2732;
                    frontier_phi_66_pred_2 = _2731;
                    frontier_phi_66_pred_3 = _2730;
                    frontier_phi_66_pred_4 = _2729;
                    frontier_phi_66_pred_5 = _2728;
                }
                else
                {
                    float _2872;
                    float _2873;
                    float _2874;
                    float _2875;
                    float _2876;
                    float _2877;
                    uint _2878;
                    _2872 = _2727;
                    _2873 = _2728;
                    _2874 = _2729;
                    _2875 = _2730;
                    _2876 = _2731;
                    _2877 = _2732;
                    _2878 = _2742;
                    float _2799;
                    float _2800;
                    float _2801;
                    float _2802;
                    float _2803;
                    float _2804;
                    for (;;)
                    {
                        uint _2882 = uint(findLSB(_2878)) + (_2733 << 5u);
                        uint _2879 = (_2878 + 4294967295u) & _2878;
                        uint _2884 = _2882 * 48u;
                        vec4 _2898 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2884)).x, texelFetch(g_PointLightRenderingBuffer, int(_2884 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2884 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2884 + 3u)).x));
                        uint _2904 = (_2882 * 48u) + 4u;
                        vec4 _2917 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2904)).x, texelFetch(g_PointLightRenderingBuffer, int(_2904 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2904 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2904 + 3u)).x));
                        uint _2923 = (_2882 * 48u) + 8u;
                        vec3 _2934 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2923)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 2u)).x));
                        float _2938 = _2898.x - _2389;
                        float _2939 = _2898.y - _2390;
                        float _2940 = _2898.z - _2391;
                        float _2941 = dot(vec3(_2938, _2939, _2940), vec3(_2938, _2939, _2940));
                        float _2944 = inversesqrt(_2941);
                        float _2945 = _2944 * _2938;
                        float _2946 = _2944 * _2939;
                        float _2947 = _2944 * _2940;
                        float _2948 = dot(vec3(_636, _639, _642), vec3(_2945, _2946, _2947));
                        float _2953 = 1.0 - (_2941 * _2898.w);
                        float _4312 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
                        float _2954 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
                        float _2955 = sqrt(_2941) * _2917.w;
                        float _2958 = 1.39999997615814208984375 / (_2955 + 1.39999997615814208984375);
                        float _2959 = _2958 * _2958;
                        float _2962 = ((1.0 - _2959) * _2948) + _2959;
                        float _2965 = _2955 * _2955;
                        float _2969 = ((isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0))) * _2954) / ((_2965 * 0.699999988079071044921875) + 1.0);
                        float _2973 = (-0.0) - _2389;
                        float _2974 = (-0.0) - _2390;
                        float _2975 = (-0.0) - _2391;
                        float _2979 = inversesqrt(dot(vec3(_2973, _2974, _2975), vec3(_2973, _2974, _2975)));
                        float _2980 = _2979 * _2973;
                        float _2981 = _2979 * _2974;
                        float _2982 = _2979 * _2975;
                        float _2990 = exp2(log2(1.0 / ((_2965 * 3.5) + 5.0)) * 0.25);
                        float _2991 = 1.0 - _696;
                        float _2998 = sqrt(1.0 - ((1.0 - (_2991 * _2991)) * (1.0 - (_2990 * _2990))));
                        float _2999 = _2998 * _2998;
                        float _3000 = _2999 * _2999;
                        float _3001 = _2980 + _2945;
                        float _3002 = _2981 + _2946;
                        float _3003 = _2982 + _2947;
                        float _3007 = inversesqrt(dot(vec3(_3001, _3002, _3003), vec3(_3001, _3002, _3003)));
                        float _3011 = dot(vec3(_636, _639, _642), vec3(_2980, _2981, _2982));
                        float _4328 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                        float _3014 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
                        float _3015 = dot(vec3(_636, _639, _642), vec3(_3007 * _3001, _3007 * _3002, _3007 * _3003));
                        float _4339 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                        float _3018 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
                        float _3022 = ((_3018 * _3018) * (_3000 + (-1.0))) + 1.0;
                        float _3023 = _2958 * _2999;
                        float _3024 = _3023 * _3023;
                        float _3027 = ((1.0 - _3024) * _2948) + _3024;
                        float _4350 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                        float _3028 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
                        float _3029 = 1.0 - _2999;
                        float _3039 = (0.5 / (((_3028 * ((_3014 * _3029) + _2999)) + 9.9999999392252902907785028219223e-09) + (((_3028 * _3029) + _2999) * _3014))) * _3028;
                        float _4361 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                        float _3050 = (((_3000 * 3.1415927410125732421875) * (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0)))) / ((_3022 * _3022) * ((_2965 * 2.1991131305694580078125) + 3.141590118408203125))) * _2954;
                        _2802 = (_2969 * _2917.x) + _2875;
                        _2803 = (_2969 * _2917.y) + _2876;
                        _2804 = (_2969 * _2917.z) + _2877;
                        _2799 = (_3050 * _2934.x) + _2872;
                        _2800 = (_3050 * _2934.y) + _2873;
                        _2801 = (_3050 * _2934.z) + _2874;
                        if (_2879 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2872 = _2799;
                            _2873 = _2800;
                            _2874 = _2801;
                            _2875 = _2802;
                            _2876 = _2803;
                            _2877 = _2804;
                            _2878 = _2879;
                        }
                    }
                    frontier_phi_66_pred = _2799;
                    frontier_phi_66_pred_1 = _2804;
                    frontier_phi_66_pred_2 = _2803;
                    frontier_phi_66_pred_3 = _2802;
                    frontier_phi_66_pred_4 = _2801;
                    frontier_phi_66_pred_5 = _2800;
                }
                _2566 = frontier_phi_66_pred;
                _2576 = frontier_phi_66_pred_1;
                _2574 = frontier_phi_66_pred_2;
                _2572 = frontier_phi_66_pred_3;
                _2570 = frontier_phi_66_pred_4;
                _2568 = frontier_phi_66_pred_5;
                uint _2734 = _2733 + 1u;
                if (_2734 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2727 = _2566;
                    _2728 = _2568;
                    _2729 = _2570;
                    _2730 = _2572;
                    _2731 = _2574;
                    _2732 = _2576;
                    _2733 = _2734;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2565 = _2566;
            _2567 = _2568;
            _2569 = _2570;
            _2571 = _2572;
            _2573 = _2574;
            _2575 = _2576;
        }
        uvec4 _2579 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2580 = _2579.z;
        uint _2582 = (_2580 >> 8u) & 15u;
        float _2695;
        float _2697;
        float _2699;
        float _2701;
        float _2703;
        float _2705;
        if (((4294967295u << _2582) & _2435) == 0u)
        {
            _2695 = _2565;
            _2697 = _2567;
            _2699 = _2569;
            _2701 = _2571;
            _2703 = _2573;
            _2705 = _2575;
        }
        else
        {
            float _2720 = inversesqrt(dot(vec3(_2389, _2390, _2391), vec3(_2389, _2390, _2391)));
            float _2721 = _2720 * _2389;
            float _2722 = _2720 * _2390;
            float _2723 = _2720 * _2391;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2582 < ((_2580 >> 12u) & 15u))
            {
                float _2696;
                float _2698;
                float _2700;
                float _2702;
                float _2704;
                float _2706;
                float _2855 = _2565;
                float _2856 = _2567;
                float _2857 = _2569;
                float _2858 = _2571;
                float _2859 = _2573;
                float _2860 = _2575;
                uint _2861 = _2582;
                uint _2870;
                bool _2871;
                for (;;)
                {
                    _2870 = texelFetch(g_lightClassification, int((((_2429 << 5u) + (_2415 << 9u)) + (_2861 << 2u)) >> 2u)).x;
                    _2871 = _2870 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2871)
                    {
                        frontier_phi_77_pred = _2860;
                        frontier_phi_77_pred_1 = _2859;
                        frontier_phi_77_pred_2 = _2858;
                        frontier_phi_77_pred_3 = _2857;
                        frontier_phi_77_pred_4 = _2856;
                        frontier_phi_77_pred_5 = _2855;
                    }
                    else
                    {
                        float _3064;
                        float _3065;
                        float _3066;
                        float _3067;
                        float _3068;
                        float _3069;
                        float _3359;
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3077 = _2855;
                        float _3078 = _2856;
                        float _3079 = _2857;
                        float _3080 = _2858;
                        float _3081 = _2859;
                        float _3082 = _2860;
                        uint _3083 = _2870;
                        uint _3084;
                        vec4 _3109;
                        float _3110;
                        vec4 _3125;
                        vec3 _3137;
                        vec4 _3152;
                        vec4 _3168;
                        float _3215;
                        bool _3216;
                        for (;;)
                        {
                            uint _3094 = ((_2861 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3083));
                            _3084 = (_3083 + 4294967295u) & _3083;
                            uint _3096 = _3094 * 40u;
                            _3109 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3096)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 3u)).x));
                            _3110 = _3109.w;
                            uint _3112 = (_3094 * 40u) + 4u;
                            _3125 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 3u)).x));
                            uint _3127 = (_3094 * 40u) + 8u;
                            _3137 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3127)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 2u)).x));
                            uint _3139 = (_3094 * 40u) + 16u;
                            _3152 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 3u)).x));
                            uint _3155 = (_3094 * 40u) + 20u;
                            _3168 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3155)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 3u)).x));
                            uint _3171 = (_3094 * 40u) + 24u;
                            vec4 _3184 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3171)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 3u)).x));
                            uint _3190 = (_3094 * 40u) + 28u;
                            vec4 _3203 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3190)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 3u)).x));
                            _3215 = fma(_2391, _3203.z, fma(_2390, _3203.y, _3203.x * _2389)) + _3203.w;
                            _3216 = !((fma(_2391, _3184.z, fma(_2390, _3184.y, _3184.x * _2389)) + _3184.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3216)
                            {
                                float _3243 = _3109.x - _2389;
                                float _3244 = _3109.y - _2390;
                                float _3245 = _3109.z - _2391;
                                float _3246 = dot(vec3(_3243, _3244, _3245), vec3(_3243, _3244, _3245));
                                float _3249 = inversesqrt(_3246);
                                float _3250 = _3249 * _3243;
                                float _3251 = _3249 * _3244;
                                float _3252 = _3249 * _3245;
                                float _3256 = 1.0 - (_3246 / (_3110 * _3110));
                                float _4372 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                                float _3257 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
                                float _3261 = sqrt(_3246) * _3125.w;
                                float _3263 = 1.39999997615814208984375 / (_3261 + 1.39999997615814208984375);
                                float _3264 = _3263 * _3263;
                                float _3267 = ((1.0 - _3264) * dot(vec3(_3250, _3251, _3252), vec3(_636, _639, _642))) + _3264;
                                float _3270 = _3261 * _3261;
                                float _3274 = (fma(_2391, _3152.z, fma(_2390, _3152.y, _3152.x * _2389)) + _3152.w) / _3215;
                                float _3275 = (fma(_2391, _3168.z, fma(_2390, _3168.y, _3168.x * _2389)) + _3168.w) / _3215;
                                float _3279 = 1.0 - dot(vec2(_3274, _3275), vec2(_3274, _3275));
                                float _4388 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                                float _3280 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                                float _3281 = _3280 * (((isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0))) * _3257) / ((_3270 * 0.699999988079071044921875) + 1.0));
                                float _3293 = exp2(log2(1.0 / ((_3270 * 3.5) + 5.0)) * 0.25);
                                float _3294 = 1.0 - _696;
                                float _3301 = sqrt(1.0 - ((1.0 - (_3294 * _3294)) * (1.0 - (_3293 * _3293))));
                                float _3302 = _3301 * _3301;
                                float _3303 = _3302 * _3302;
                                float _3304 = _3250 - _2721;
                                float _3305 = _3251 - _2722;
                                float _3306 = _3252 - _2723;
                                float _3310 = inversesqrt(dot(vec3(_3304, _3305, _3306), vec3(_3304, _3305, _3306)));
                                float _3314 = dot(vec3(_636, _639, _642), vec3((-0.0) - _2721, (-0.0) - _2722, (-0.0) - _2723));
                                float _4399 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                                float _3317 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                                float _3318 = dot(vec3(_636, _639, _642), vec3(_3310 * _3304, _3310 * _3305, _3310 * _3306));
                                float _4410 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                                float _3321 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                                float _3325 = ((_3321 * _3321) * (_3303 + (-1.0))) + 1.0;
                                float _3326 = _3263 * _3302;
                                float _3327 = _3326 * _3326;
                                float _3333 = ((1.0 - _3327) * dot(vec3(_636, _639, _642), vec3(_3250, _3251, _3252))) + _3327;
                                float _4421 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                                float _3334 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
                                float _3335 = 1.0 - _3302;
                                float _3345 = (0.5 / (((_3334 * ((_3317 * _3335) + _3302)) + 9.9999999392252902907785028219223e-09) + (((_3334 * _3335) + _3302) * _3317))) * _3334;
                                float _4432 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                                float _3355 = (_3280 * _3257) * (((_3303 * 3.1415927410125732421875) * (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0)))) / ((_3325 * _3325) * ((_3270 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3281 * _3125.y;
                                frontier_phi_83_pred_1 = _3281 * _3125.x;
                                frontier_phi_83_pred_2 = _3355 * _3137.z;
                                frontier_phi_83_pred_3 = _3355 * _3137.y;
                                frontier_phi_83_pred_4 = _3355 * _3137.x;
                                frontier_phi_83_pred_5 = _3281 * _3125.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3363 = frontier_phi_83_pred;
                            _3362 = frontier_phi_83_pred_1;
                            _3361 = frontier_phi_83_pred_2;
                            _3360 = frontier_phi_83_pred_3;
                            _3359 = frontier_phi_83_pred_4;
                            _3364 = frontier_phi_83_pred_5;
                            _3067 = _3362 + _3080;
                            _3068 = _3363 + _3081;
                            _3069 = _3364 + _3082;
                            _3064 = _3359 + _3077;
                            _3065 = _3360 + _3078;
                            _3066 = _3361 + _3079;
                            if (_3084 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3077 = _3064;
                                _3078 = _3065;
                                _3079 = _3066;
                                _3080 = _3067;
                                _3081 = _3068;
                                _3082 = _3069;
                                _3083 = _3084;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3069;
                        frontier_phi_77_pred_1 = _3068;
                        frontier_phi_77_pred_2 = _3067;
                        frontier_phi_77_pred_3 = _3066;
                        frontier_phi_77_pred_4 = _3065;
                        frontier_phi_77_pred_5 = _3064;
                    }
                    _2706 = frontier_phi_77_pred;
                    _2704 = frontier_phi_77_pred_1;
                    _2702 = frontier_phi_77_pred_2;
                    _2700 = frontier_phi_77_pred_3;
                    _2698 = frontier_phi_77_pred_4;
                    _2696 = frontier_phi_77_pred_5;
                    uint _2862 = _2861 + 1u;
                    if (_2862 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2855 = _2696;
                        _2856 = _2698;
                        _2857 = _2700;
                        _2858 = _2702;
                        _2859 = _2704;
                        _2860 = _2706;
                        _2861 = _2862;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2700;
                frontier_phi_58_59_ladder_1 = _2706;
                frontier_phi_58_59_ladder_2 = _2704;
                frontier_phi_58_59_ladder_3 = _2702;
                frontier_phi_58_59_ladder_4 = _2698;
                frontier_phi_58_59_ladder_5 = _2696;
            }
            else
            {
                frontier_phi_58_59_ladder = _2569;
                frontier_phi_58_59_ladder_1 = _2575;
                frontier_phi_58_59_ladder_2 = _2573;
                frontier_phi_58_59_ladder_3 = _2571;
                frontier_phi_58_59_ladder_4 = _2567;
                frontier_phi_58_59_ladder_5 = _2565;
            }
            _2695 = frontier_phi_58_59_ladder_5;
            _2697 = frontier_phi_58_59_ladder_4;
            _2699 = frontier_phi_58_59_ladder;
            _2701 = frontier_phi_58_59_ladder_3;
            _2703 = frontier_phi_58_59_ladder_2;
            _2705 = frontier_phi_58_59_ladder_1;
        }
        float _2710 = isnan(1.0) ? _680 : (isnan(_680) ? 1.0 : min(_680, 1.0));
        _2448 = (_2710 * _2701) + _1900;
        _2450 = (_2710 * _2703) + _1902;
        _2452 = (_2710 * _2705) + _1904;
        _2454 = ((_2695 * 0.039999999105930328369140625) * _2710) + _2233;
        _2456 = ((_2697 * 0.039999999105930328369140625) * _2710) + _2235;
        _2458 = ((_2699 * 0.039999999105930328369140625) * _2710) + _2237;
    }
    else
    {
        _2448 = _1900;
        _2450 = _1902;
        _2452 = _1904;
        _2454 = _2233;
        _2456 = _2235;
        _2458 = _2237;
    }
    uint _2464 = _656 + uint(cbMatDynParam._m0[0u].w);
    float _2470 = cbInstanceData._m0[_2464].x * (_434 - (_450 * _434));
    float _2471 = cbInstanceData._m0[_2464].y * (_435 - (_450 * _435));
    float _2472 = cbInstanceData._m0[_2464].z * (_436 - (_450 * _436));
    float _4448 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _4459 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _4470 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _2489 = (((isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_2448 + ((isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0))) * _680))) + ((_2454 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _1518)) * cbPerFrame._m0[3u].x)) + _2470;
    float _2491 = (_2471 + ((_2456 + ((isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))) * _1518)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_2450 + ((isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0))) * _680)));
    float _2493 = (_2472 + ((_2458 + ((isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))) * _1518)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_2452 + ((isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0))) * _680)));
    float _2494 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
    float _2495 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
    float _2496 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _2502 = cbMtdParam._m0[2u].x * _2470;
    float _2503 = cbMtdParam._m0[2u].y * _2471;
    float _2504 = cbMtdParam._m0[2u].z * _2472;
    float _4496 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2506 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
    uint _2507 = _655 + 6u;
    float _2515 = _615 / cbSceneParam._m0[86u].x;
    float _2516 = _616 / cbSceneParam._m0[86u].y;
    vec4 _2530 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2515, _2516, (log2((isnan(cbSceneParam._m0[77u].w) ? _537 : (isnan(_537) ? cbSceneParam._m0[77u].w : min(_537, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2532 = _2530.x;
    float _2533 = _2530.y;
    float _2534 = _2530.z;
    float _2535 = _2530.w;
    float _2628;
    float _2630;
    float _2632;
    float _2634;
    if (_537 > cbSceneParam._m0[78u].w)
    {
        float _2590 = isnan(_537) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _537 : min(cbSceneParam._m0[80u].w, _537));
        float _2591 = _2590 / _537;
        float _2602 = _2591 * _587;
        float _2603 = _588 * _2591;
        float _2604 = (-0.0) - _2603;
        float _2606 = _2591 * _589;
        float _2608 = (cbSceneParam._m0[77u].w * _2604) / _2590;
        float _2609 = _2608 + cbSceneParam._m0[79u].w;
        float _2610 = cbSceneParam._m0[79u].w - _2603;
        float _2616 = sqrt(((_2602 * _2602) + (_2603 * _2603)) + (_2606 * _2606));
        float _2619 = (1.0 - (cbSceneParam._m0[77u].w / _2590)) * _2616;
        float _2624 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2626 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2812;
        if (abs((_2604 - _2608) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2812 = ((((_2609 > 0.0) ? exp2(_2624 * _2609) : (2.0 - exp2(_2626 * _2609))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2619;
        }
        else
        {
            float _2756 = 1.0 / cbSceneParam._m0[80u].x;
            float _2757 = isnan(_2610) ? _2609 : (isnan(_2609) ? _2610 : max(_2609, _2610));
            float _2758 = isnan(_2610) ? _2609 : (isnan(_2609) ? _2610 : min(_2609, _2610));
            float _2767 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : min(_2757, 0.0));
            float _2768 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : min(_2758, 0.0));
            _2812 = ((abs(_2616 / _2604) * cbSceneParam._m0[80u].y) * ((((_2767 - _2768) * 2.0) - ((exp2(_2624 * (isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0)))) - exp2(_2624 * (isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0))))) * _2756)) - ((exp2(_2626 * _2767) - exp2(_2626 * _2768)) * _2756))) + (_2619 * cbSceneParam._m0[80u].z);
        }
        vec4 _2814 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2515, _2516, 1.0), 0.0);
        float _2823 = exp2((_2812 * (-1.44269502162933349609375)) * (1.0 - _2814.w));
        float _2824 = log2(_2823);
        float _2840 = log2(_2535);
        _2628 = (exp2(_2840 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2824 * cbSceneParam._m0[78u].x)) * _2814.x) / cbSceneParam._m0[78u].x)) + _2532;
        _2630 = (exp2(_2840 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2824 * cbSceneParam._m0[78u].y)) * _2814.y) / cbSceneParam._m0[78u].y)) + _2533;
        _2632 = (exp2(_2840 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2824 * cbSceneParam._m0[78u].z)) * _2814.z) / cbSceneParam._m0[78u].z)) + _2534;
        _2634 = _2823 * _2535;
    }
    else
    {
        _2628 = _2532;
        _2630 = _2533;
        _2632 = _2534;
        _2634 = _2535;
    }
    bool _2850;
    vec4 _2644;
    vec4 _2666;
    float _2668;
    float _2672;
    float _2673;
    float _2674;
    float _2677;
    float _2680;
    float _2683;
    float _2684;
    bool _2694;
    for (;;)
    {
        _2644 = cbMatDynParam._m0[0u];
        float _2646 = roundEven(_2644.y);
        bool _2647 = _2646 == 3.0;
        float _2648 = log2(_2634);
        float _2652 = exp2(_2648 * cbSceneParam._m0[78u].x);
        float _2653 = exp2(_2648 * cbSceneParam._m0[78u].y);
        float _2654 = exp2(_2648 * cbSceneParam._m0[78u].z);
        float _2655 = _2652 * _2494;
        float _2656 = _2653 * _2495;
        float _2657 = _2654 * _2496;
        float _2664 = _603 + (-0.5);
        _2666 = cbMtdParam._m0[1u];
        _2668 = _2666.y * _2664;
        float _2671 = (_2646 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2672 = _2671 * (_2647 ? _2655 : (_2655 + (cbSceneParam._m0[72u].w * _2628)));
        _2673 = _2671 * (_2647 ? _2656 : (_2656 + (cbSceneParam._m0[72u].w * _2630)));
        _2674 = _2671 * (_2647 ? _2657 : (_2657 + (cbSceneParam._m0[72u].w * _2632)));
        _2677 = ((_2502 * _2506) * _2652) * _2671;
        _2680 = ((_2503 * _2506) * _2653) * _2671;
        _2683 = ((_2504 * _2506) * _2654) * _2671;
        _2684 = _2664 * 0.999000012874603271484375;
        _2694 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2694)
        {
            if ((cbInstanceData._m0[_655 + 7u].x + _2684) < 0.5)
            {
                _2850 = true;
                break;
            }
        }
        uint _2791 = _656 + uint(_2644.w);
        if ((cbInstanceData._m0[_2791].w < 1.0) && ((cbInstanceData._m0[_2791].w + _2684) < 0.5))
        {
            _2850 = true;
            break;
        }
        if ((_2668 + 1.0) < _2666.x)
        {
            _2850 = true;
            break;
        }
        _2850 = false;
        break;
    }
    float _3055;
    if (_2850)
    {
        discard_state = true;
        _3055 = 0.0;
    }
    else
    {
        _3055 = cbInstanceData._m0[_2507].w;
    }
    SV_Target.x = _2672;
    SV_Target.y = _2673;
    SV_Target.z = _2674;
    SV_Target.w = _3055;
    SV_Target_1.x = _2677;
    SV_Target_1.y = _2680;
    SV_Target_1.z = _2683;
    SV_Target_1.w = cbInstanceData._m0[_2507].w;
    discard_exit();
}


