#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1073;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _247 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _253 = _247.x * cbMtdParam._m0[9u].x;
    float _254 = _247.y * cbMtdParam._m0[9u].y;
    float _255 = _247.z * cbMtdParam._m0[9u].z;
    vec4 _275 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _296 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_275.x + 0.00999999977648258209228515625));
    float _298 = _296 * (cbMtdParam._m0[15u].x + 1.0);
    float _3725 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _299 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _307 = ((((cbMtdParam._m0[12u].x - _253) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _299) + _253;
    float _308 = ((((cbMtdParam._m0[12u].y - _254) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _299) + _254;
    float _309 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _255)) * _299) + _255;
    vec4 _322 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _324 = _322.x;
    vec4 _336 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _340 = _336.z;
    float _344 = (_336.x * 2.0) + (-1.0);
    float _346 = (_336.y * 2.0) + (-1.0);
    float _347 = dot(vec2(_344, _346), vec2(_344, _346));
    float _3736 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _352 = sqrt(1.0 - (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))));
    float _355 = _296 * (cbMtdParam._m0[14u].w + 1.0);
    float _3747 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _359 = ((cbMtdParam._m0[14u].y - _340) * (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0)))) + _340;
    vec4 _387 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _402 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _447 = (TEXCOORD_6.x - ((cbMtdParam._m0[13u].w * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_5, SS_WrapLinear), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].x + 1.0);
    float _3758 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _448 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _449 = ((_402.x + _387.x) * cbMtdParam._m0[11u].x) * _448;
    float _450 = ((_402.y + _387.y) * cbMtdParam._m0[11u].y) * _448;
    float _451 = ((_402.z + _387.z) * cbMtdParam._m0[11u].z) * _448;
    vec4 _463 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[9u].w));
    float _465 = _463.x;
    vec4 _490 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _496 = (_490.x * 2.0) + (-1.0);
    float _497 = (_490.y * 2.0) + (-1.0);
    float _498 = dot(vec2(_496, _497), vec2(_496, _497));
    float _3769 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _514 = (_299 * (((cbMtdParam._m0[13u].z * _344) - _344) + _496)) + _344;
    float _515 = (_299 * (((cbMtdParam._m0[13u].z * _346) - _346) + _497)) + _346;
    float _516 = (_299 * (sqrt(1.0 - (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0)))) - _352)) + _352;
    float _519 = fma(_516, _218 * NORMAL.x, fma(_515, _225 * TANGENT.x, (_211 * _203) * _514));
    float _522 = fma(_516, _218 * NORMAL.y, fma(_515, _225 * TANGENT.y, (_211 * _204) * _514));
    float _525 = fma(_516, _218 * NORMAL.z, fma(_515, _225 * TANGENT.z, (_211 * _205) * _514));
    float _529 = inversesqrt(dot(vec3(_519, _522, _525), vec3(_519, _522, _525)));
    float _530 = _529 * _519;
    float _531 = _529 * _522;
    float _532 = _529 * _525;
    float _3780 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _533 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _3791 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _3802 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _3813 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _3824 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _537 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _553 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _593 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _603 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _593);
    float _604 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _593);
    float _605 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _593);
    float _609 = inversesqrt(dot(vec3(_603, _604, _605), vec3(_603, _604, _605)));
    float _610 = _603 * _609;
    float _611 = _604 * _609;
    float _612 = _605 * _609;
    float _618 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _619 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _639 = fma(_532, cbSceneParam._m0[5u].z, fma(_531, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _530));
    float _642 = fma(_532, cbSceneParam._m0[6u].z, fma(_531, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _530));
    float _645 = fma(_532, cbSceneParam._m0[7u].z, fma(_531, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _530));
    uint _658 = uint(roundEven(NORMAL.w)) * 13u;
    uint _659 = _658 + 9u;
    uint _660 = _659 + uint(cbMatDynParam._m0[0u].w);
    float _666 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0)))) * cbInstanceData._m0[_660].x;
    float _667 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0)))) * cbInstanceData._m0[_660].y;
    float _668 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0)))) * cbInstanceData._m0[_660].z;
    float _3835 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _669 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _3846 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _670 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _3857 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _671 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _672 = 1.0 - _537;
    float _673 = _669 * _672;
    float _674 = _670 * _672;
    float _675 = _671 * _672;
    float _680 = (_669 + (-0.039999999105930328369140625)) * _537;
    float _681 = (_670 + (-0.039999999105930328369140625)) * _537;
    float _682 = (_671 + (-0.039999999105930328369140625)) * _537;
    float _683 = _680 + 0.039999999105930328369140625;
    float _685 = _681 + 0.039999999105930328369140625;
    float _686 = _682 + 0.039999999105930328369140625;
    vec4 _695 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _618, cbSceneParam._m0[86u].y * _619));
    float _698 = _695.x * TEXCOORD_3.w;
    float _699 = dot(vec3(_530, _531, _532), vec3(_610, _611, _612));
    float _702 = _699 * 2.0;
    float _706 = (_702 * _530) - _610;
    float _707 = (_702 * _531) - _611;
    float _708 = (_702 * _532) - _612;
    float _712 = abs(dot(vec3(_610, _611, _612), vec3(_530, _531, _532)));
    float _3868 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _714 = sqrt(_533);
    float _727 = exp2((_714 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_714 * 3.0));
    float _733 = (1.0 - _727) * ((_714 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _734 = _727 * _714;
    float _762 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _766 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _770 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1072;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _797 = fma(_770, cbModelParam._m0[26u].z, fma(_766, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _762));
        float _801 = fma(_770, cbModelParam._m0[27u].z, fma(_766, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _762));
        float _805 = fma(_770, cbModelParam._m0[28u].z, fma(_766, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _762));
        float _830 = _762 + _530;
        float _831 = _766 + _531;
        float _832 = _770 + _532;
        float _842 = fma(_832, cbModelParam._m0[26u].z, fma(_831, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _830)) - _797;
        float _843 = fma(_832, cbModelParam._m0[27u].z, fma(_831, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _830)) - _801;
        float _844 = fma(_832, cbModelParam._m0[28u].z, fma(_831, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _830)) - _805;
        float _848 = inversesqrt(dot(vec3(_842, _843, _844), vec3(_842, _843, _844)));
        float _861 = ((_848 * _842) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_797 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _862 = ((_848 * _843) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_801 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _863 = ((_848 * _844) / cbModelParam._m0[34u].z) + ((((((_805 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _866 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        vec4 _873 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        vec4 _880 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        float _900 = exp2((_866.w + (-0.5)) * 20.0) * 2.0;
        float _901 = _900 * (_866.x + (-0.5));
        float _902 = _900 * (_866.y + (-0.5));
        float _903 = _900 * (_866.z + (-0.5));
        float _910 = exp2((_873.w + (-0.5)) * 20.0) * 2.0;
        float _911 = _910 * (_873.x + (-0.5));
        float _912 = _910 * (_873.y + (-0.5));
        float _913 = _910 * (_873.z + (-0.5));
        float _920 = exp2((_880.w + (-0.5)) * 20.0) * 2.0;
        float _921 = _920 * (_880.x + (-0.5));
        float _922 = _920 * (_880.y + (-0.5));
        float _923 = _920 * (_880.z + (-0.5));
        float _930 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _931 = _930 * (_887.x + (-0.5));
        float _932 = _930 * (_887.y + (-0.5));
        float _933 = _930 * (_887.z + (-0.5));
        float _934 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _935 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _936 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _937 = _901 * 0.5;
        float _938 = _911 * 0.5;
        float _939 = _921 * 0.5;
        float _940 = dot(vec3(_937, _938, _939), vec3(_937, _938, _939));
        float _945 = (_940 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_940);
        float _954 = (dot(vec3(_530, _531, _532), vec3(_945 * _937, _945 * _938, _945 * _939)) + 1.0) * 0.5;
        float _3894 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _964 = sqrt(((_938 * _938) + (_937 * _937)) + (_939 * _939)) / (_934 + 9.9999997473787516355514526367188e-06);
        float _3905 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _966 = _965 * 2.0;
        float _970 = (1.0 - _965) / (_965 + 1.0);
        float _3916 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _980 = ((((1.0 - _971) * (_966 + 2.0)) * exp2(log2(isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_966 + 1.0))) + _971) * _934;
        float _981 = _902 * 0.5;
        float _982 = _912 * 0.5;
        float _983 = _922 * 0.5;
        float _984 = dot(vec3(_981, _982, _983), vec3(_981, _982, _983));
        float _989 = (_984 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_984);
        float _997 = (dot(vec3(_530, _531, _532), vec3(_989 * _981, _989 * _982, _989 * _983)) + 1.0) * 0.5;
        float _3927 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1006 = sqrt(((_982 * _982) + (_981 * _981)) + (_983 * _983)) / (_935 + 9.9999997473787516355514526367188e-06);
        float _3938 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1008 = _1007 * 2.0;
        float _1012 = (1.0 - _1007) / (_1007 + 1.0);
        float _3949 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1022 = ((((1.0 - _1013) * (_1008 + 2.0)) * exp2(log2(isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * (_1008 + 1.0))) + _1013) * _935;
        float _1023 = _903 * 0.5;
        float _1024 = _913 * 0.5;
        float _1025 = _923 * 0.5;
        float _1026 = dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025));
        float _1031 = (_1026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1026);
        float _1039 = (dot(vec3(_530, _531, _532), vec3(_1031 * _1023, _1031 * _1024, _1031 * _1025)) + 1.0) * 0.5;
        float _3960 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1048 = sqrt(((_1024 * _1024) + (_1023 * _1023)) + (_1025 * _1025)) / (_936 + 9.9999997473787516355514526367188e-06);
        float _3971 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1050 = _1049 * 2.0;
        float _1054 = (1.0 - _1049) / (_1049 + 1.0);
        float _3982 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1064 = ((((1.0 - _1055) * (_1050 + 2.0)) * exp2(log2(isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_1050 + 1.0))) + _1055) * _936;
        _1072 = _903;
        _1074 = _902;
        _1075 = _901;
        _1076 = _913;
        _1077 = _912;
        _1078 = _911;
        _1079 = _923;
        _1080 = _922;
        _1081 = _921;
        _1082 = _936;
        _1083 = _935;
        _1084 = _934;
        _1085 = cbModelParam._m0[36u].z * (isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0)));
        _1086 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0)));
        _1087 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0)));
    }
    else
    {
        _1072 = _1073;
        _1074 = _1073;
        _1075 = _1073;
        _1076 = _1073;
        _1077 = _1073;
        _1078 = _1073;
        _1079 = _1073;
        _1080 = _1073;
        _1081 = _1073;
        _1082 = _1073;
        _1083 = _1073;
        _1084 = _1073;
        _1085 = 0.0;
        _1086 = 0.0;
        _1087 = 0.0;
    }
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1113 = fma(_770, cbModelParam._m0[30u].z, fma(_766, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _762));
        float _1117 = fma(_770, cbModelParam._m0[31u].z, fma(_766, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _762));
        float _1121 = fma(_770, cbModelParam._m0[32u].z, fma(_766, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _762));
        float _1144 = _762 + _530;
        float _1145 = _766 + _531;
        float _1146 = _770 + _532;
        float _1156 = fma(_1146, cbModelParam._m0[30u].z, fma(_1145, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1144)) - _1113;
        float _1157 = fma(_1146, cbModelParam._m0[31u].z, fma(_1145, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1144)) - _1117;
        float _1158 = fma(_1146, cbModelParam._m0[32u].z, fma(_1145, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1144)) - _1121;
        float _1162 = inversesqrt(dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158)));
        float _1175 = ((_1162 * _1156) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1113 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1176 = ((_1162 * _1157) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1117 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1177 = ((_1162 * _1158) / cbModelParam._m0[35u].z) + ((((((_1121 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        float _1212 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1179.x + (-0.5));
        float _1214 = _1212 * (_1179.y + (-0.5));
        float _1215 = _1212 * (_1179.z + (-0.5));
        float _1222 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1186.x + (-0.5));
        float _1224 = _1222 * (_1186.y + (-0.5));
        float _1225 = _1222 * (_1186.z + (-0.5));
        float _1232 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1193.x + (-0.5));
        float _1234 = _1232 * (_1193.y + (-0.5));
        float _1235 = _1232 * (_1193.z + (-0.5));
        float _1242 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1200.x + (-0.5));
        float _1244 = _1242 * (_1200.y + (-0.5));
        float _1245 = _1242 * (_1200.z + (-0.5));
        float _1246 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1247 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1248 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1249 = _1213 * 0.5;
        float _1250 = _1223 * 0.5;
        float _1251 = _1233 * 0.5;
        float _1252 = dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251));
        float _1257 = (_1252 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1252);
        float _1265 = (dot(vec3(_530, _531, _532), vec3(_1257 * _1249, _1257 * _1250, _1257 * _1251)) + 1.0) * 0.5;
        float _4023 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1274 = sqrt(((_1250 * _1250) + (_1249 * _1249)) + (_1251 * _1251)) / (_1246 + 9.9999997473787516355514526367188e-06);
        float _4034 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1276 = _1275 * 2.0;
        float _1280 = (1.0 - _1275) / (_1275 + 1.0);
        float _4045 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1290 = ((((1.0 - _1281) * (_1276 + 2.0)) * exp2(log2(isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_1276 + 1.0))) + _1281) * _1246;
        float _1291 = _1214 * 0.5;
        float _1292 = _1224 * 0.5;
        float _1293 = _1234 * 0.5;
        float _1294 = dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293));
        float _1299 = (_1294 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1294);
        float _1307 = (dot(vec3(_530, _531, _532), vec3(_1299 * _1291, _1299 * _1292, _1299 * _1293)) + 1.0) * 0.5;
        float _4056 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1316 = sqrt(((_1292 * _1292) + (_1291 * _1291)) + (_1293 * _1293)) / (_1247 + 9.9999997473787516355514526367188e-06);
        float _4067 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1318 = _1317 * 2.0;
        float _1322 = (1.0 - _1317) / (_1317 + 1.0);
        float _4078 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1332 = ((((1.0 - _1323) * (_1318 + 2.0)) * exp2(log2(isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * (_1318 + 1.0))) + _1323) * _1247;
        float _1333 = _1215 * 0.5;
        float _1334 = _1225 * 0.5;
        float _1335 = _1235 * 0.5;
        float _1336 = dot(vec3(_1333, _1334, _1335), vec3(_1333, _1334, _1335));
        float _1341 = (_1336 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1336);
        float _1349 = (dot(vec3(_530, _531, _532), vec3(_1341 * _1333, _1341 * _1334, _1341 * _1335)) + 1.0) * 0.5;
        float _4089 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1358 = sqrt(((_1334 * _1334) + (_1333 * _1333)) + (_1335 * _1335)) / (_1248 + 9.9999997473787516355514526367188e-06);
        float _4100 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1360 = _1359 * 2.0;
        float _1364 = (1.0 - _1359) / (_1359 + 1.0);
        float _4111 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1374 = ((((1.0 - _1365) * (_1360 + 2.0)) * exp2(log2(isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_1360 + 1.0))) + _1365) * _1248;
        _1382 = _1215;
        _1383 = _1214;
        _1384 = _1213;
        _1385 = _1225;
        _1386 = _1224;
        _1387 = _1223;
        _1388 = _1235;
        _1389 = _1234;
        _1390 = _1233;
        _1391 = _1248;
        _1392 = _1247;
        _1393 = _1246;
        _1394 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)));
        _1395 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)));
        _1396 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)));
    }
    else
    {
        _1382 = _1073;
        _1383 = _1073;
        _1384 = _1073;
        _1385 = _1073;
        _1386 = _1073;
        _1387 = _1073;
        _1388 = _1073;
        _1389 = _1073;
        _1390 = _1073;
        _1391 = _1073;
        _1392 = _1073;
        _1393 = _1073;
        _1394 = 0.0;
        _1395 = 0.0;
        _1396 = 0.0;
    }
    float _1406 = (cbModelParam._m0[1u].x * (_1394 - _1085)) + _1085;
    float _1407 = (cbModelParam._m0[1u].x * (_1395 - _1086)) + _1086;
    float _1408 = (cbModelParam._m0[1u].x * (_1396 - _1087)) + _1087;
    float _1429 = fma(_1408, cbSceneParam._m0[89u].z, fma(_1407, cbSceneParam._m0[89u].y, _1406 * cbSceneParam._m0[89u].x));
    float _1432 = fma(_1408, cbSceneParam._m0[90u].z, fma(_1407, cbSceneParam._m0[90u].y, _1406 * cbSceneParam._m0[90u].x));
    float _1435 = fma(_1408, cbSceneParam._m0[91u].z, fma(_1407, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1406));
    float _1450 = _706 * 0.5;
    float _1451 = _707 * 0.5;
    float _1452 = _708 * 0.5;
    float _1453 = dot(vec4(_1450, _1451, _1452, 1.0), vec4(_1384, _1387, _1390, _1393));
    float _1456 = dot(vec4(_1450, _1451, _1452, 1.0), vec4(_1383, _1386, _1389, _1392));
    float _1459 = dot(vec4(_1450, _1451, _1452, 1.0), vec4(_1382, _1385, _1388, _1391));
    float _1493;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1466 = dot(vec4(_1450, _1451, _1452, 1.0), vec4(_1072, _1076, _1079, _1082));
        float _1470 = dot(vec4(_1450, _1451, _1452, 1.0), vec4(_1074, _1077, _1080, _1083));
        float _1474 = dot(vec4(_1450, _1451, _1452, 1.0), vec4(_1075, _1078, _1081, _1084));
        float _1481 = dot(vec4(cbModelParam._m0[39u]), vec4(_1450, _1451, _1452, 1.0));
        _1493 = dot(vec3(isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)), isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)), isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1481) ? 0.0 : (isnan(0.0) ? _1481 : max(0.0, _1481))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1493 = 1.0;
    }
    float _1504;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1495 = dot(vec4(cbModelParam._m0[40u]), vec4(_1450, _1451, _1452, 1.0));
        _1504 = dot(vec3(isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)), isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)), isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1495) ? 0.0 : (isnan(0.0) ? _1495 : max(0.0, _1495))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1504 = 1.0;
    }
    float _1508 = (_1504 * cbModelParam._m0[1u].x) + (_1493 * (1.0 - cbModelParam._m0[1u].x));
    float _1518 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _533);
    float _1519 = isnan(_1518) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1518 : min(cbModelParam._m0[25u].z, _1518));
    float _1599;
    float _1601;
    float _1603;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1566 = fma(_770, cbModelParam._m0[13u].z, fma(_766, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _762)) + cbModelParam._m0[13u].w;
        float _1570 = fma(_770, cbModelParam._m0[14u].z, fma(_766, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _762)) + cbModelParam._m0[14u].w;
        float _1574 = fma(_770, cbModelParam._m0[15u].z, fma(_766, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _762)) + cbModelParam._m0[15u].w;
        float _1577 = fma(_708, cbModelParam._m0[13u].z, fma(_707, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _706));
        float _1580 = fma(_708, cbModelParam._m0[14u].z, fma(_707, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _706));
        float _1583 = fma(_708, cbModelParam._m0[15u].z, fma(_707, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _706));
        float _1611;
        if (_1577 > 0.0)
        {
            _1611 = abs((1.0 - _1566) / _1577);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1577 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1566 + 1.0) / _1577);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1611 = frontier_phi_14_12_ladder;
        }
        float _1784;
        if (_1580 > 0.0)
        {
            _1784 = abs((1.0 - _1570) / _1580);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1580 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1570 + 1.0) / _1580);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1784 = frontier_phi_23_19_ladder;
        }
        float _2080;
        if (_1583 > 0.0)
        {
            _2080 = abs((1.0 - _1574) / _1583);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1583 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1574 + 1.0) / _1583);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2080 = frontier_phi_35_30_ladder;
        }
        float _2082 = isnan(_1784) ? _1611 : (isnan(_1611) ? _1784 : min(_1611, _1784));
        float _2083 = isnan(_2080) ? _2082 : (isnan(_2082) ? _2080 : min(_2082, _2080));
        float _2087 = (_2083 * _1577) + _1566;
        float _2088 = (_2083 * _1580) + _1570;
        float _2089 = (_2083 * _1583) + _1574;
        float _2090 = _2083 * 9.9999997473787516355514526367188e-05;
        float _2092 = (-1.0) - _2090;
        float _2094 = _2090 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2089 > _2094) || ((_2089 < _2092) || ((_2088 > _2094) || ((_2088 < _2092) || ((_2087 < _2092) || (_2087 > _2094))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2234 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2089, cbModelParam._m0[9u].z, fma(_2088, cbModelParam._m0[9u].y, _2087 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2089, cbModelParam._m0[10u].z, fma(_2088, cbModelParam._m0[10u].y, _2087 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2089, cbModelParam._m0[11u].z, fma(_2088, cbModelParam._m0[11u].y, _2087 * cbModelParam._m0[11u].x))), _1519);
            frontier_phi_13_35_ladder = _2234.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2234.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2234.x * cbModelParam._m0[1u].y;
        }
        _1599 = frontier_phi_13_35_ladder_2;
        _1601 = frontier_phi_13_35_ladder_1;
        _1603 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1587 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_706, _707, _708), _1519);
        _1599 = _1587.x * cbModelParam._m0[1u].y;
        _1601 = _1587.y * cbModelParam._m0[1u].y;
        _1603 = _1587.z * cbModelParam._m0[1u].y;
    }
    float _1607 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _533);
    float _1608 = isnan(_1607) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1607 : min(cbModelParam._m0[25u].w, _1607));
    float _1699;
    float _1701;
    float _1703;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1663 = fma(_770, cbModelParam._m0[21u].z, fma(_766, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _762)) + cbModelParam._m0[21u].w;
        float _1667 = fma(_770, cbModelParam._m0[22u].z, fma(_766, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _762)) + cbModelParam._m0[22u].w;
        float _1671 = fma(_770, cbModelParam._m0[23u].z, fma(_766, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _762)) + cbModelParam._m0[23u].w;
        float _1674 = fma(_708, cbModelParam._m0[21u].z, fma(_707, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _706));
        float _1677 = fma(_708, cbModelParam._m0[22u].z, fma(_707, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _706));
        float _1680 = fma(_708, cbModelParam._m0[23u].z, fma(_707, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _706));
        float _1789;
        if (_1674 > 0.0)
        {
            _1789 = abs((1.0 - _1663) / _1674);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1674 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1663 + 1.0) / _1674);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1789 = frontier_phi_25_21_ladder;
        }
        float _2107;
        if (_1677 > 0.0)
        {
            _2107 = abs((1.0 - _1667) / _1677);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1677 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1667 + 1.0) / _1677);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2107 = frontier_phi_37_32_ladder;
        }
        float _2445;
        if (_1680 > 0.0)
        {
            _2445 = abs((1.0 - _1671) / _1680);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1680 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1671 + 1.0) / _1680);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2445 = frontier_phi_47_44_ladder;
        }
        float _2447 = isnan(_2107) ? _1789 : (isnan(_1789) ? _2107 : min(_1789, _2107));
        float _2448 = isnan(_2445) ? _2447 : (isnan(_2447) ? _2445 : min(_2447, _2445));
        float _2452 = (_2448 * _1674) + _1663;
        float _2453 = (_2448 * _1677) + _1667;
        float _2454 = (_2448 * _1680) + _1671;
        float _2455 = _2448 * 9.9999997473787516355514526367188e-05;
        float _2456 = (-1.0) - _2455;
        float _2458 = _2455 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2454 > _2458) || ((_2454 < _2456) || ((_2453 > _2458) || ((_2453 < _2456) || ((_2452 < _2456) || (_2452 > _2458))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2576 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2454, cbModelParam._m0[17u].z, fma(_2453, cbModelParam._m0[17u].y, _2452 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2454, cbModelParam._m0[18u].z, fma(_2453, cbModelParam._m0[18u].y, _2452 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2454, cbModelParam._m0[19u].z, fma(_2453, cbModelParam._m0[19u].y, _2452 * cbModelParam._m0[19u].x))), _1608);
            frontier_phi_22_47_ladder = _2576.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2576.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2576.x * cbModelParam._m0[1u].z;
        }
        _1699 = frontier_phi_22_47_ladder_2;
        _1701 = frontier_phi_22_47_ladder_1;
        _1703 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1683 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_706, _707, _708), _1608);
        _1699 = _1683.x * cbModelParam._m0[1u].z;
        _1701 = _1683.y * cbModelParam._m0[1u].z;
        _1703 = _1683.z * cbModelParam._m0[1u].z;
    }
    float _1716 = (((_733 * _683) + _734) * _698) * ((cbModelParam._m0[1u].w * (_1699 - _1599)) + _1599);
    float _1718 = (((_733 * _685) + _734) * _698) * ((cbModelParam._m0[1u].w * (_1701 - _1601)) + _1601);
    float _1720 = (((_733 * _686) + _734) * _698) * ((cbModelParam._m0[1u].w * (_1703 - _1603)) + _1603);
    float _1723 = fma(_1720, cbSceneParam._m0[89u].z, fma(_1718, cbSceneParam._m0[89u].y, _1716 * cbSceneParam._m0[89u].x));
    float _1726 = fma(_1720, cbSceneParam._m0[90u].z, fma(_1718, cbSceneParam._m0[90u].y, _1716 * cbSceneParam._m0[90u].x));
    float _1729 = fma(_1720, cbSceneParam._m0[91u].z, fma(_1718, cbSceneParam._m0[91u].y, _1716 * cbSceneParam._m0[91u].x));
    float _1763 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1767 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1771 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1775 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1776 = _1763 / _1775;
    float _1777 = _1767 / _1775;
    float _1778 = _1771 / _1775;
    float _1925;
    float _1926;
    float _1927;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1805 = ((uint(_1778 > cbSceneParam._m0[59u].y) + uint(_1778 > cbSceneParam._m0[59u].x)) + uint(_1778 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1806 = _1805 + 43u;
        uint _1814 = _1805 + 44u;
        uint _1822 = _1805 + 45u;
        uint _1830 = _1805 + 46u;
        float _1841 = fma(_1775, cbSceneParam._m0[_1806].w, fma(_1771, cbSceneParam._m0[_1806].z, fma(_1767, cbSceneParam._m0[_1806].y, _1763 * cbSceneParam._m0[_1806].x)));
        float _1845 = fma(_1775, cbSceneParam._m0[_1814].w, fma(_1771, cbSceneParam._m0[_1814].z, fma(_1767, cbSceneParam._m0[_1814].y, _1763 * cbSceneParam._m0[_1814].x)));
        float _1853 = fma(_1775, cbSceneParam._m0[_1830].w, fma(_1771, cbSceneParam._m0[_1830].z, fma(_1767, cbSceneParam._m0[_1830].y, _1763 * cbSceneParam._m0[_1830].x)));
        float _1858 = cbSceneParam._m0[33u].z * _1853;
        float _1860 = cbSceneParam._m0[33u].w * _1853;
        float _1863 = fma(_1775, cbSceneParam._m0[_1822].w, fma(_1771, cbSceneParam._m0[_1822].z, fma(_1767, cbSceneParam._m0[_1822].y, _1763 * cbSceneParam._m0[_1822].x))) / _1853;
        float _1911 = (cbSceneParam._m0[33u].x - sqrt(((_1777 * _1777) + (_1776 * _1776)) + (_1778 * _1778))) * cbSceneParam._m0[33u].y;
        float _4237 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
        float _1918 = (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1858 + _1841) / _1853, (_1860 + _1845) / _1853), _1863), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1860 + _1841) / _1853, (_1845 - _1858) / _1853), _1863), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1841 - _1858) / _1853, (_1845 - _1860) / _1853), _1863), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1841 - _1860) / _1853, (_1858 + _1845) / _1853), _1863), 0.0)).x), vec4(0.25)));
        _1925 = 1.0 - (_1918 * cbSceneParam._m0[34u].x);
        _1926 = 1.0 - (_1918 * cbSceneParam._m0[34u].y);
        _1927 = 1.0 - (_1918 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1925 = 1.0;
        _1926 = 1.0;
        _1927 = 1.0;
    }
    float _1991;
    float _1993;
    float _1995;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1979 = fma(_1775, cbSceneParam._m0[63u].w, fma(_1771, cbSceneParam._m0[63u].z, fma(_1767, cbSceneParam._m0[63u].y, _1763 * cbSceneParam._m0[63u].x)));
        float _1980 = fma(_1775, cbSceneParam._m0[60u].w, fma(_1771, cbSceneParam._m0[60u].z, fma(_1767, cbSceneParam._m0[60u].y, _1763 * cbSceneParam._m0[60u].x))) / _1979;
        float _1981 = fma(_1775, cbSceneParam._m0[61u].w, fma(_1771, cbSceneParam._m0[61u].z, fma(_1767, cbSceneParam._m0[61u].y, _1763 * cbSceneParam._m0[61u].x))) / _1979;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1980 >= cbSceneParam._m0[64u].x) && (_1981 >= cbSceneParam._m0[64u].y)) && (_1980 <= cbSceneParam._m0[64u].z)) && (_1981 <= cbSceneParam._m0[64u].w))
        {
            float _2120 = fma(_1775, cbSceneParam._m0[62u].w, fma(_1771, cbSceneParam._m0[62u].z, fma(_1767, cbSceneParam._m0[62u].y, _1763 * cbSceneParam._m0[62u].x))) / _1979;
            float _2124 = isnan(cbSceneParam._m0[41u].w) ? _2120 : (isnan(_2120) ? cbSceneParam._m0[41u].w : max(_2120, cbSceneParam._m0[41u].w));
            float _2167 = (cbSceneParam._m0[33u].x - sqrt(((_1777 * _1777) + (_1776 * _1776)) + (_1778 * _1778))) * cbSceneParam._m0[33u].y;
            float _4253 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
            float _2174 = (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1980, cbSceneParam._m0[33u].w + _1981), _2124), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1980, _1981 - cbSceneParam._m0[33u].z), _2124), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1980 - cbSceneParam._m0[33u].z, _1981 - cbSceneParam._m0[33u].w), _2124), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1980 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1981), _2124), 0.0)).x), vec4(0.25)));
            float _2178 = 1.0 - (_2174 * cbSceneParam._m0[34u].x);
            float _2179 = 1.0 - (_2174 * cbSceneParam._m0[34u].y);
            float _2180 = 1.0 - (_2174 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2180) ? _1927 : (isnan(_1927) ? _2180 : min(_1927, _2180));
            frontier_phi_34_33_ladder_1 = isnan(_2179) ? _1926 : (isnan(_1926) ? _2179 : min(_1926, _2179));
            frontier_phi_34_33_ladder_2 = isnan(_2178) ? _1925 : (isnan(_1925) ? _2178 : min(_1925, _2178));
        }
        else
        {
            frontier_phi_34_33_ladder = _1927;
            frontier_phi_34_33_ladder_1 = _1926;
            frontier_phi_34_33_ladder_2 = _1925;
        }
        _1991 = frontier_phi_34_33_ladder_2;
        _1993 = frontier_phi_34_33_ladder_1;
        _1995 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1991 = _1925;
        _1993 = _1926;
        _1995 = _1927;
    }
    uvec4 _2000 = floatBitsToUint(cbInstanceData._m0[_658 + 5u]);
    uint _2002 = _2000.x * 14u;
    uint _2003 = _2002 + 13u;
    float _2010 = _698 + (-1.0);
    float _2015 = (cbLight._m0[_2003].x * _2010) + 1.0;
    float _2016 = (cbLight._m0[_2003].y * _2010) + 1.0;
    float _2017 = (cbLight._m0[_2003].z * _2010) + 1.0;
    float _2018 = (cbLight._m0[_2003].w * _2010) + 1.0;
    uint _2019 = _2002 + 5u;
    float _2025 = isnan(1.0) ? _2016 : (isnan(_2016) ? 1.0 : min(_2016, 1.0));
    uint _2029 = _2002 + 4u;
    float _2039 = isnan(1.0) ? _2015 : (isnan(_2015) ? 1.0 : min(_2015, 1.0));
    uint _2043 = _2002 | 1u;
    float _2054 = dot(vec3(cbLight._m0[_2002].xyz), vec3(_530, _531, _532));
    float _2057 = dot(vec3(cbLight._m0[_2043].xyz), vec3(_530, _531, _532));
    float _4289 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _4300 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2062 = (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * 0.3183098733425140380859375;
    float _2064 = (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * 0.3183098733425140380859375;
    float _2071 = ((cbLight._m0[_2019].x * _2025) * _2064) + (((cbLight._m0[_2029].x * _1991) * _2039) * _2062);
    float _2072 = ((_2025 * cbLight._m0[_2019].y) * _2064) + (((cbLight._m0[_2029].y * _1993) * _2039) * _2062);
    float _2073 = ((_2025 * cbLight._m0[_2019].z) * _2064) + (((cbLight._m0[_2029].z * _1995) * _2039) * _2062);
    uvec4 _2077 = floatBitsToUint(cbLight._m0[_2002 + 12u]);
    bool _2079 = _2077.x == 0u;
    float _2181;
    float _2183;
    float _2185;
    if (_2079)
    {
        _2181 = _2071;
        _2183 = _2072;
        _2185 = _2073;
    }
    else
    {
        uint _2189 = _2002 + 6u;
        float _2205 = (dot(vec3(cbLight._m0[_2002 + 2u].xyz), vec3(_530, _531, _532)) * 0.5) + 0.5;
        float _2206 = _2205 * _2205;
        float _4311 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2207 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _2208 = isnan(1.0) ? _2017 : (isnan(_2017) ? 1.0 : min(_2017, 1.0));
        _2181 = (((cbLight._m0[_2189].x * 0.3183098733425140380859375) * _2207) * _2208) + _2071;
        _2183 = (((cbLight._m0[_2189].y * 0.3183098733425140380859375) * _2207) * _2208) + _2072;
        _2185 = (((cbLight._m0[_2189].z * 0.3183098733425140380859375) * _2207) * _2208) + _2073;
    }
    bool _2188 = _2077.y == 0u;
    float _2243;
    float _2245;
    float _2247;
    if (_2188)
    {
        _2243 = _2181;
        _2245 = _2183;
        _2247 = _2185;
    }
    else
    {
        uint _2416 = _2002 + 7u;
        float _2432 = (dot(vec3(cbLight._m0[_2002 + 3u].xyz), vec3(_530, _531, _532)) * 0.5) + 0.5;
        float _2433 = _2432 * _2432;
        float _4327 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2434 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _2435 = isnan(1.0) ? _2018 : (isnan(_2018) ? 1.0 : min(_2018, 1.0));
        _2243 = (((cbLight._m0[_2416].x * 0.3183098733425140380859375) * _2434) * _2435) + _2181;
        _2245 = (((cbLight._m0[_2416].y * 0.3183098733425140380859375) * _2434) * _2435) + _2183;
        _2247 = (((cbLight._m0[_2416].z * 0.3183098733425140380859375) * _2434) * _2435) + _2185;
    }
    uint _2250 = _2002 + 8u;
    float _2263 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2002].w)) * _533) * 0.949999988079071044921875);
    float _2264 = _2263 * _2263;
    float _2265 = cbLight._m0[_2002].x + _610;
    float _2266 = cbLight._m0[_2002].y + _611;
    float _2267 = cbLight._m0[_2002].z + _612;
    float _2271 = inversesqrt(dot(vec3(_2265, _2266, _2267), vec3(_2265, _2266, _2267)));
    float _2272 = _2271 * _2265;
    float _2273 = _2271 * _2266;
    float _2274 = _2271 * _2267;
    float _2275 = dot(vec3(_530, _531, _532), vec3(cbLight._m0[_2002].xyz));
    float _4343 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2278 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
    float _4354 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _2279 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
    float _2280 = dot(vec3(_530, _531, _532), vec3(_2272, _2273, _2274));
    float _4365 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2283 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
    float _2284 = dot(vec3(cbLight._m0[_2002].xyz), vec3(_2272, _2273, _2274));
    float _4376 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2288 = _2264 * _2264;
    float _2292 = ((_2283 * _2283) * (_2288 + (-1.0))) + 1.0;
    float _2300 = exp2(log2(1.0 - (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0)))) * 5.0);
    float _2301 = 0.959999978542327880859375 - _680;
    float _2303 = 0.959999978542327880859375 - _681;
    float _2304 = 0.959999978542327880859375 - _682;
    float _2311 = 1.0 - _2264;
    float _2322 = (0.5 / (((_2279 * ((_2278 * _2311) + _2264)) + 9.9999999392252902907785028219223e-09) + (((_2279 * _2311) + _2264) * _2278))) * _2278;
    float _4387 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2324 = (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_2288 / ((_2292 * _2292) * 3.141590118408203125));
    uint _2338 = _2002 + 9u;
    float _2349 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2043].w)) * _533) * 0.949999988079071044921875);
    float _2350 = _2349 * _2349;
    float _2351 = cbLight._m0[_2043].x + _610;
    float _2352 = cbLight._m0[_2043].y + _611;
    float _2353 = cbLight._m0[_2043].z + _612;
    float _2357 = inversesqrt(dot(vec3(_2351, _2352, _2353), vec3(_2351, _2352, _2353)));
    float _2358 = _2357 * _2351;
    float _2359 = _2357 * _2352;
    float _2360 = _2357 * _2353;
    float _2361 = dot(vec3(_530, _531, _532), vec3(cbLight._m0[_2043].xyz));
    float _4398 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2364 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
    float _2365 = dot(vec3(_530, _531, _532), vec3(_2358, _2359, _2360));
    float _4409 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2368 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
    float _2369 = dot(vec3(cbLight._m0[_2043].xyz), vec3(_2358, _2359, _2360));
    float _4420 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2373 = _2350 * _2350;
    float _2377 = ((_2368 * _2368) * (_2373 + (-1.0))) + 1.0;
    float _2384 = exp2(log2(1.0 - (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0)))) * 5.0);
    float _2391 = 1.0 - _2350;
    float _2401 = (0.5 / (((_2279 * ((_2364 * _2391) + _2350)) + 9.9999999392252902907785028219223e-09) + (((_2279 * _2391) + _2350) * _2364))) * _2364;
    float _4431 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2403 = (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_2373 / ((_2377 * _2377) * 3.141590118408203125));
    float _2413 = (((((_2384 * _2301) + _683) * cbLight._m0[_2338].x) * _2403) * _2025) + ((((cbLight._m0[_2250].x * _1991) * ((_2300 * _2301) + _683)) * _2324) * _2039);
    float _2414 = (((((_2384 * _2303) + _685) * cbLight._m0[_2338].y) * _2403) * _2025) + ((((cbLight._m0[_2250].y * _1993) * ((_2300 * _2303) + _685)) * _2324) * _2039);
    float _2415 = (((((_2384 * _2304) + _686) * cbLight._m0[_2338].z) * _2403) * _2025) + ((((cbLight._m0[_2250].z * _1995) * ((_2300 * _2304) + _686)) * _2324) * _2039);
    float _2471;
    float _2473;
    float _2475;
    if (_2079)
    {
        _2471 = _2413;
        _2473 = _2414;
        _2475 = _2415;
    }
    else
    {
        uint _2477 = _2002 + 2u;
        uint _2481 = _2002 + 10u;
        float _2495 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2477].w)) * _533) * 0.949999988079071044921875);
        float _2496 = _2495 * _2495;
        float _2497 = cbLight._m0[_2477].x + _610;
        float _2498 = cbLight._m0[_2477].y + _611;
        float _2499 = cbLight._m0[_2477].z + _612;
        float _2503 = inversesqrt(dot(vec3(_2497, _2498, _2499), vec3(_2497, _2498, _2499)));
        float _2504 = _2503 * _2497;
        float _2505 = _2503 * _2498;
        float _2506 = _2503 * _2499;
        float _2507 = dot(vec3(_530, _531, _532), vec3(cbLight._m0[_2477].xyz));
        float _4442 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        float _2510 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _2511 = dot(vec3(_530, _531, _532), vec3(_2504, _2505, _2506));
        float _4453 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2514 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _2515 = dot(vec3(cbLight._m0[_2477].xyz), vec3(_2504, _2505, _2506));
        float _4464 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2519 = _2496 * _2496;
        float _2523 = ((_2514 * _2514) * (_2519 + (-1.0))) + 1.0;
        float _2530 = exp2(log2(1.0 - (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0)))) * 5.0);
        float _2537 = 1.0 - _2496;
        float _2547 = (0.5 / (((_2279 * ((_2510 * _2537) + _2496)) + 9.9999999392252902907785028219223e-09) + (((_2279 * _2537) + _2496) * _2510))) * _2510;
        float _4475 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2549 = (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_2519 / ((_2523 * _2523) * 3.141590118408203125));
        float _2550 = isnan(1.0) ? _2017 : (isnan(_2017) ? 1.0 : min(_2017, 1.0));
        _2471 = (((((_2530 * _2301) + _683) * cbLight._m0[_2481].x) * _2549) * _2550) + _2413;
        _2473 = (((((_2530 * _2303) + _685) * cbLight._m0[_2481].y) * _2549) * _2550) + _2414;
        _2475 = (((((_2530 * _2304) + _686) * cbLight._m0[_2481].z) * _2549) * _2550) + _2415;
    }
    float _2581;
    float _2583;
    float _2585;
    if (_2188)
    {
        _2581 = _2471;
        _2583 = _2473;
        _2585 = _2475;
    }
    else
    {
        uint _2592 = _2002 + 3u;
        uint _2596 = _2002 + 11u;
        float _2610 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2592].w)) * _533) * 0.949999988079071044921875);
        float _2611 = _2610 * _2610;
        float _2612 = cbLight._m0[_2592].x + _610;
        float _2613 = cbLight._m0[_2592].y + _611;
        float _2614 = cbLight._m0[_2592].z + _612;
        float _2618 = inversesqrt(dot(vec3(_2612, _2613, _2614), vec3(_2612, _2613, _2614)));
        float _2619 = _2618 * _2612;
        float _2620 = _2618 * _2613;
        float _2621 = _2618 * _2614;
        float _2622 = dot(vec3(_530, _531, _532), vec3(cbLight._m0[_2592].xyz));
        float _4491 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        float _2625 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _2626 = dot(vec3(_530, _531, _532), vec3(_2619, _2620, _2621));
        float _4502 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
        float _2629 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _2630 = dot(vec3(cbLight._m0[_2592].xyz), vec3(_2619, _2620, _2621));
        float _4513 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        float _2634 = _2611 * _2611;
        float _2638 = ((_2629 * _2629) * (_2634 + (-1.0))) + 1.0;
        float _2645 = exp2(log2(1.0 - (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0)))) * 5.0);
        float _2652 = 1.0 - _2611;
        float _2662 = (0.5 / (((_2279 * ((_2625 * _2652) + _2611)) + 9.9999999392252902907785028219223e-09) + (((_2279 * _2652) + _2611) * _2625))) * _2625;
        float _4524 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
        float _2664 = (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (_2634 / ((_2638 * _2638) * 3.141590118408203125));
        float _2665 = isnan(1.0) ? _2018 : (isnan(_2018) ? 1.0 : min(_2018, 1.0));
        _2581 = (((((_2645 * _2301) + _683) * cbLight._m0[_2596].x) * _2664) * _2665) + _2471;
        _2583 = (((((_2645 * _2303) + _685) * cbLight._m0[_2596].y) * _2664) * _2665) + _2473;
        _2585 = (((((_2645 * _2304) + _686) * cbLight._m0[_2596].z) * _2664) * _2665) + _2475;
    }
    float _2731;
    float _2733;
    float _2735;
    float _2737;
    float _2739;
    float _2741;
    if (_2000.y == 0u)
    {
        uvec4 _2686 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2687 = _2686.x;
        uint _2698 = uint((float(_2686.y) * floor(float(uint(cbSceneParam._m0[85u].y * _619) / _2687))) + floor(float(uint(cbSceneParam._m0[85u].x * _618) / _2687)));
        float _2708 = (log2(_1778 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2709 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
        uint _2712 = uint(isnan(14.0) ? _2709 : (isnan(_2709) ? 14.0 : min(_2709, 14.0)));
        uvec4 _2717 = texelFetch(g_lightClusterGridBuffer, int(((_2712 << 2u) + (_2698 << 6u)) >> 2u));
        uint _2718 = _2717.x;
        uint _2719 = _2686.z;
        float _2827;
        float _2829;
        float _2831;
        float _2833;
        float _2835;
        float _2837;
        if (((((1u << ((_2719 >> 4u) & 15u)) + 4294967295u) & _2718) == 0u) || ((_2719 & 240u) == 0u))
        {
            _2827 = 0.0;
            _2829 = 0.0;
            _2831 = 0.0;
            _2833 = 0.0;
            _2835 = 0.0;
            _2837 = 0.0;
        }
        else
        {
            float _2828;
            float _2830;
            float _2832;
            float _2834;
            float _2836;
            float _2838;
            float _2981 = 0.0;
            float _2982 = 0.0;
            float _2983 = 0.0;
            float _2984 = 0.0;
            float _2985 = 0.0;
            float _2986 = 0.0;
            uint _2987 = 0u;
            uint _2996;
            bool _2997;
            for (;;)
            {
                _2996 = texelFetch(g_lightClassification, int((((_2712 << 5u) + (_2698 << 9u)) + (_2987 << 2u)) >> 2u)).x;
                _2997 = _2996 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2997)
                {
                    frontier_phi_66_pred = _2986;
                    frontier_phi_66_pred_1 = _2985;
                    frontier_phi_66_pred_2 = _2984;
                    frontier_phi_66_pred_3 = _2983;
                    frontier_phi_66_pred_4 = _2982;
                    frontier_phi_66_pred_5 = _2981;
                }
                else
                {
                    float _3105;
                    float _3106;
                    float _3107;
                    float _3108;
                    float _3109;
                    float _3110;
                    uint _3111;
                    _3105 = _2981;
                    _3106 = _2982;
                    _3107 = _2983;
                    _3108 = _2984;
                    _3109 = _2985;
                    _3110 = _2986;
                    _3111 = _2996;
                    float _3037;
                    float _3038;
                    float _3039;
                    float _3040;
                    float _3041;
                    float _3042;
                    for (;;)
                    {
                        uint _3115 = uint(findLSB(_3111)) + (_2987 << 5u);
                        uint _3112 = (_3111 + 4294967295u) & _3111;
                        uint _3117 = _3115 * 48u;
                        vec4 _3131 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3117)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 3u)).x));
                        uint _3137 = (_3115 * 48u) + 4u;
                        vec4 _3150 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3137)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 3u)).x));
                        uint _3156 = (_3115 * 48u) + 8u;
                        vec3 _3167 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3156)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 2u)).x));
                        float _3171 = _3131.x - _1776;
                        float _3172 = _3131.y - _1777;
                        float _3173 = _3131.z - _1778;
                        float _3174 = dot(vec3(_3171, _3172, _3173), vec3(_3171, _3172, _3173));
                        float _3177 = inversesqrt(_3174);
                        float _3178 = _3177 * _3171;
                        float _3179 = _3177 * _3172;
                        float _3180 = _3177 * _3173;
                        float _3181 = dot(vec3(_639, _642, _645), vec3(_3178, _3179, _3180));
                        float _3186 = 1.0 - (_3174 * _3131.w);
                        float _4550 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                        float _3187 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
                        float _3188 = sqrt(_3174) * _3150.w;
                        float _3191 = 1.39999997615814208984375 / (_3188 + 1.39999997615814208984375);
                        float _3192 = _3191 * _3191;
                        float _3195 = ((1.0 - _3192) * _3181) + _3192;
                        float _3198 = _3188 * _3188;
                        float _3202 = ((isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0))) * _3187) / ((_3198 * 0.699999988079071044921875) + 1.0);
                        float _3206 = (-0.0) - _1776;
                        float _3207 = (-0.0) - _1777;
                        float _3208 = (-0.0) - _1778;
                        float _3212 = inversesqrt(dot(vec3(_3206, _3207, _3208), vec3(_3206, _3207, _3208)));
                        float _3213 = _3212 * _3206;
                        float _3214 = _3212 * _3207;
                        float _3215 = _3212 * _3208;
                        float _3222 = exp2(log2(1.0 / ((_3198 * 3.5) + 5.0)) * 0.25);
                        float _3223 = 1.0 - _714;
                        float _3230 = sqrt(1.0 - ((1.0 - (_3223 * _3223)) * (1.0 - (_3222 * _3222))));
                        float _3231 = _3230 * _3230;
                        float _3232 = _3231 * _3231;
                        float _3233 = _3213 + _3178;
                        float _3234 = _3214 + _3179;
                        float _3235 = _3215 + _3180;
                        float _3239 = inversesqrt(dot(vec3(_3233, _3234, _3235), vec3(_3233, _3234, _3235)));
                        float _3243 = dot(vec3(_639, _642, _645), vec3(_3213, _3214, _3215));
                        float _4566 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                        float _3246 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                        float _3247 = dot(vec3(_639, _642, _645), vec3(_3239 * _3233, _3239 * _3234, _3239 * _3235));
                        float _4577 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                        float _3250 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                        float _3254 = ((_3250 * _3250) * (_3232 + (-1.0))) + 1.0;
                        float _3255 = _3191 * _3231;
                        float _3256 = _3255 * _3255;
                        float _3259 = ((1.0 - _3256) * _3181) + _3256;
                        float _4588 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                        float _3260 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                        float _3261 = 1.0 - _3231;
                        float _3271 = (0.5 / (((_3260 * ((_3246 * _3261) + _3231)) + 9.9999999392252902907785028219223e-09) + (((_3260 * _3261) + _3231) * _3246))) * _3260;
                        float _4599 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                        float _3282 = (((_3232 * 3.1415927410125732421875) * (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0)))) / ((_3254 * _3254) * ((_3198 * 2.1991131305694580078125) + 3.141590118408203125))) * _3187;
                        _3040 = (_3202 * _3150.x) + _3108;
                        _3041 = (_3202 * _3150.y) + _3109;
                        _3042 = (_3202 * _3150.z) + _3110;
                        _3037 = (_3282 * _3167.x) + _3105;
                        _3038 = (_3282 * _3167.y) + _3106;
                        _3039 = (_3282 * _3167.z) + _3107;
                        if (_3112 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3105 = _3037;
                            _3106 = _3038;
                            _3107 = _3039;
                            _3108 = _3040;
                            _3109 = _3041;
                            _3110 = _3042;
                            _3111 = _3112;
                        }
                    }
                    frontier_phi_66_pred = _3042;
                    frontier_phi_66_pred_1 = _3041;
                    frontier_phi_66_pred_2 = _3040;
                    frontier_phi_66_pred_3 = _3039;
                    frontier_phi_66_pred_4 = _3038;
                    frontier_phi_66_pred_5 = _3037;
                }
                _2838 = frontier_phi_66_pred;
                _2836 = frontier_phi_66_pred_1;
                _2834 = frontier_phi_66_pred_2;
                _2832 = frontier_phi_66_pred_3;
                _2830 = frontier_phi_66_pred_4;
                _2828 = frontier_phi_66_pred_5;
                uint _2988 = _2987 + 1u;
                if (_2988 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2981 = _2828;
                    _2982 = _2830;
                    _2983 = _2832;
                    _2984 = _2834;
                    _2985 = _2836;
                    _2986 = _2838;
                    _2987 = _2988;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2827 = _2828;
            _2829 = _2830;
            _2831 = _2832;
            _2833 = _2834;
            _2835 = _2836;
            _2837 = _2838;
        }
        uvec4 _2841 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2842 = _2841.z;
        uint _2844 = (_2842 >> 8u) & 15u;
        float _2949;
        float _2951;
        float _2953;
        float _2955;
        float _2957;
        float _2959;
        if (((4294967295u << _2844) & _2718) == 0u)
        {
            _2949 = _2827;
            _2951 = _2829;
            _2953 = _2831;
            _2955 = _2833;
            _2957 = _2835;
            _2959 = _2837;
        }
        else
        {
            float _2974 = inversesqrt(dot(vec3(_1776, _1777, _1778), vec3(_1776, _1777, _1778)));
            float _2975 = _2974 * _1776;
            float _2976 = _2974 * _1777;
            float _2977 = _2974 * _1778;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2844 < ((_2842 >> 12u) & 15u))
            {
                float _2950;
                float _2952;
                float _2954;
                float _2956;
                float _2958;
                float _2960;
                float _3088 = _2827;
                float _3089 = _2829;
                float _3090 = _2831;
                float _3091 = _2833;
                float _3092 = _2835;
                float _3093 = _2837;
                uint _3094 = _2844;
                uint _3103;
                bool _3104;
                for (;;)
                {
                    _3103 = texelFetch(g_lightClassification, int((((_2712 << 5u) + (_2698 << 9u)) + (_3094 << 2u)) >> 2u)).x;
                    _3104 = _3103 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3104)
                    {
                        frontier_phi_72_pred = _3093;
                        frontier_phi_72_pred_1 = _3092;
                        frontier_phi_72_pred_2 = _3091;
                        frontier_phi_72_pred_3 = _3090;
                        frontier_phi_72_pred_4 = _3089;
                        frontier_phi_72_pred_5 = _3088;
                    }
                    else
                    {
                        float _3287;
                        float _3288;
                        float _3289;
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3582;
                        float _3583;
                        float _3584;
                        float _3585;
                        float _3586;
                        float _3587;
                        float _3300 = _3088;
                        float _3301 = _3089;
                        float _3302 = _3090;
                        float _3303 = _3091;
                        float _3304 = _3092;
                        float _3305 = _3093;
                        uint _3306 = _3103;
                        uint _3307;
                        vec4 _3332;
                        float _3333;
                        vec4 _3348;
                        vec3 _3360;
                        vec4 _3375;
                        vec4 _3391;
                        float _3438;
                        bool _3439;
                        for (;;)
                        {
                            uint _3317 = ((_3094 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3306));
                            _3307 = (_3306 + 4294967295u) & _3306;
                            uint _3319 = _3317 * 40u;
                            _3332 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3319)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 3u)).x));
                            _3333 = _3332.w;
                            uint _3335 = (_3317 * 40u) + 4u;
                            _3348 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 3u)).x));
                            uint _3350 = (_3317 * 40u) + 8u;
                            _3360 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3350)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 2u)).x));
                            uint _3362 = (_3317 * 40u) + 16u;
                            _3375 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3362)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 3u)).x));
                            uint _3378 = (_3317 * 40u) + 20u;
                            _3391 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3378)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 3u)).x));
                            uint _3394 = (_3317 * 40u) + 24u;
                            vec4 _3407 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3394)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 3u)).x));
                            uint _3413 = (_3317 * 40u) + 28u;
                            vec4 _3426 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3413)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 3u)).x));
                            _3438 = fma(_1778, _3426.z, fma(_1777, _3426.y, _3426.x * _1776)) + _3426.w;
                            _3439 = !((fma(_1778, _3407.z, fma(_1777, _3407.y, _3407.x * _1776)) + _3407.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3439)
                            {
                                float _3466 = _3332.x - _1776;
                                float _3467 = _3332.y - _1777;
                                float _3468 = _3332.z - _1778;
                                float _3469 = dot(vec3(_3466, _3467, _3468), vec3(_3466, _3467, _3468));
                                float _3472 = inversesqrt(_3469);
                                float _3473 = _3472 * _3466;
                                float _3474 = _3472 * _3467;
                                float _3475 = _3472 * _3468;
                                float _3479 = 1.0 - (_3469 / (_3333 * _3333));
                                float _4610 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                                float _3480 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                                float _3484 = sqrt(_3469) * _3348.w;
                                float _3486 = 1.39999997615814208984375 / (_3484 + 1.39999997615814208984375);
                                float _3487 = _3486 * _3486;
                                float _3490 = ((1.0 - _3487) * dot(vec3(_3473, _3474, _3475), vec3(_639, _642, _645))) + _3487;
                                float _3493 = _3484 * _3484;
                                float _3497 = (fma(_1778, _3375.z, fma(_1777, _3375.y, _3375.x * _1776)) + _3375.w) / _3438;
                                float _3498 = (fma(_1778, _3391.z, fma(_1777, _3391.y, _3391.x * _1776)) + _3391.w) / _3438;
                                float _3502 = 1.0 - dot(vec2(_3497, _3498), vec2(_3497, _3498));
                                float _4626 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                                float _3503 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                                float _3504 = _3503 * (((isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0))) * _3480) / ((_3493 * 0.699999988079071044921875) + 1.0));
                                float _3516 = exp2(log2(1.0 / ((_3493 * 3.5) + 5.0)) * 0.25);
                                float _3517 = 1.0 - _714;
                                float _3524 = sqrt(1.0 - ((1.0 - (_3517 * _3517)) * (1.0 - (_3516 * _3516))));
                                float _3525 = _3524 * _3524;
                                float _3526 = _3525 * _3525;
                                float _3527 = _3473 - _2975;
                                float _3528 = _3474 - _2976;
                                float _3529 = _3475 - _2977;
                                float _3533 = inversesqrt(dot(vec3(_3527, _3528, _3529), vec3(_3527, _3528, _3529)));
                                float _3537 = dot(vec3(_639, _642, _645), vec3((-0.0) - _2975, (-0.0) - _2976, (-0.0) - _2977));
                                float _4637 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                                float _3540 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                                float _3541 = dot(vec3(_639, _642, _645), vec3(_3533 * _3527, _3533 * _3528, _3533 * _3529));
                                float _4648 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                                float _3544 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                                float _3548 = ((_3544 * _3544) * (_3526 + (-1.0))) + 1.0;
                                float _3549 = _3486 * _3525;
                                float _3550 = _3549 * _3549;
                                float _3556 = ((1.0 - _3550) * dot(vec3(_639, _642, _645), vec3(_3473, _3474, _3475))) + _3550;
                                float _4659 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                                float _3557 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                                float _3558 = 1.0 - _3525;
                                float _3568 = (0.5 / (((_3557 * ((_3540 * _3558) + _3525)) + 9.9999999392252902907785028219223e-09) + (((_3557 * _3558) + _3525) * _3540))) * _3557;
                                float _4670 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                                float _3578 = (_3503 * _3480) * (((_3526 * 3.1415927410125732421875) * (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0)))) / ((_3548 * _3548) * ((_3493 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3504 * _3348.y;
                                frontier_phi_78_pred_1 = _3504 * _3348.x;
                                frontier_phi_78_pred_2 = _3578 * _3360.z;
                                frontier_phi_78_pred_3 = _3578 * _3360.y;
                                frontier_phi_78_pred_4 = _3578 * _3360.x;
                                frontier_phi_78_pred_5 = _3504 * _3348.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3586 = frontier_phi_78_pred;
                            _3585 = frontier_phi_78_pred_1;
                            _3584 = frontier_phi_78_pred_2;
                            _3583 = frontier_phi_78_pred_3;
                            _3582 = frontier_phi_78_pred_4;
                            _3587 = frontier_phi_78_pred_5;
                            _3290 = _3585 + _3303;
                            _3291 = _3586 + _3304;
                            _3292 = _3587 + _3305;
                            _3287 = _3582 + _3300;
                            _3288 = _3583 + _3301;
                            _3289 = _3584 + _3302;
                            if (_3307 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3300 = _3287;
                                _3301 = _3288;
                                _3302 = _3289;
                                _3303 = _3290;
                                _3304 = _3291;
                                _3305 = _3292;
                                _3306 = _3307;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3292;
                        frontier_phi_72_pred_1 = _3291;
                        frontier_phi_72_pred_2 = _3290;
                        frontier_phi_72_pred_3 = _3289;
                        frontier_phi_72_pred_4 = _3288;
                        frontier_phi_72_pred_5 = _3287;
                    }
                    _2960 = frontier_phi_72_pred;
                    _2958 = frontier_phi_72_pred_1;
                    _2956 = frontier_phi_72_pred_2;
                    _2954 = frontier_phi_72_pred_3;
                    _2952 = frontier_phi_72_pred_4;
                    _2950 = frontier_phi_72_pred_5;
                    uint _3095 = _3094 + 1u;
                    if (_3095 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3088 = _2950;
                        _3089 = _2952;
                        _3090 = _2954;
                        _3091 = _2956;
                        _3092 = _2958;
                        _3093 = _2960;
                        _3094 = _3095;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2960;
                frontier_phi_60_61_ladder_1 = _2958;
                frontier_phi_60_61_ladder_2 = _2954;
                frontier_phi_60_61_ladder_3 = _2952;
                frontier_phi_60_61_ladder_4 = _2950;
                frontier_phi_60_61_ladder_5 = _2956;
            }
            else
            {
                frontier_phi_60_61_ladder = _2837;
                frontier_phi_60_61_ladder_1 = _2835;
                frontier_phi_60_61_ladder_2 = _2831;
                frontier_phi_60_61_ladder_3 = _2829;
                frontier_phi_60_61_ladder_4 = _2827;
                frontier_phi_60_61_ladder_5 = _2833;
            }
            _2949 = frontier_phi_60_61_ladder_4;
            _2951 = frontier_phi_60_61_ladder_3;
            _2953 = frontier_phi_60_61_ladder_2;
            _2955 = frontier_phi_60_61_ladder_5;
            _2957 = frontier_phi_60_61_ladder_1;
            _2959 = frontier_phi_60_61_ladder;
        }
        float _2964 = isnan(1.0) ? _698 : (isnan(_698) ? 1.0 : min(_698, 1.0));
        _2731 = (_2964 * _2955) + _2243;
        _2733 = (_2964 * _2957) + _2245;
        _2735 = (_2964 * _2959) + _2247;
        _2737 = ((_2949 * _683) * _2964) + _2581;
        _2739 = ((_2951 * _685) * _2964) + _2583;
        _2741 = ((_2953 * _686) * _2964) + _2585;
    }
    else
    {
        _2731 = _2243;
        _2733 = _2245;
        _2735 = _2247;
        _2737 = _2581;
        _2739 = _2583;
        _2741 = _2585;
    }
    uint _2747 = _659 + uint(cbMatDynParam._m0[0u].w);
    float _2753 = cbInstanceData._m0[_2747].x * (_449 - (_465 * _449));
    float _2754 = cbInstanceData._m0[_2747].y * (_450 - (_465 * _450));
    float _2755 = cbInstanceData._m0[_2747].z * (_451 - (_465 * _451));
    float _4686 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _4697 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _4708 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _2772 = (((isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (_2731 + ((isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))) * _698))) + ((_2737 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _1508)) * cbPerFrame._m0[3u].x)) + _2753;
    float _2774 = (_2754 + ((_2739 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _1508)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0))) * (_2733 + ((isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0))) * _698)));
    float _2776 = (_2755 + ((_2741 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _1508)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0))) * (_2735 + ((isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0))) * _698)));
    float _4734 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2789 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
    uint _2790 = _658 + 6u;
    float _2798 = _618 / cbSceneParam._m0[86u].x;
    float _2799 = _619 / cbSceneParam._m0[86u].y;
    vec4 _2813 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2798, _2799, (log2((isnan(cbSceneParam._m0[77u].w) ? _553 : (isnan(_553) ? cbSceneParam._m0[77u].w : min(_553, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2815 = _2813.x;
    float _2816 = _2813.y;
    float _2817 = _2813.z;
    float _2818 = _2813.w;
    float _2890;
    float _2892;
    float _2894;
    float _2896;
    if (_553 > cbSceneParam._m0[78u].w)
    {
        float _2852 = isnan(_553) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _553 : min(cbSceneParam._m0[80u].w, _553));
        float _2853 = _2852 / _553;
        float _2864 = _2853 * _603;
        float _2865 = _604 * _2853;
        float _2866 = (-0.0) - _2865;
        float _2868 = _2853 * _605;
        float _2870 = (cbSceneParam._m0[77u].w * _2866) / _2852;
        float _2871 = _2870 + cbSceneParam._m0[79u].w;
        float _2872 = cbSceneParam._m0[79u].w - _2865;
        float _2878 = sqrt(((_2864 * _2864) + (_2865 * _2865)) + (_2868 * _2868));
        float _2881 = (1.0 - (cbSceneParam._m0[77u].w / _2852)) * _2878;
        float _2886 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2888 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3050;
        if (abs((_2866 - _2870) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3050 = ((((_2871 > 0.0) ? exp2(_2886 * _2871) : (2.0 - exp2(_2888 * _2871))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2881;
        }
        else
        {
            float _3010 = 1.0 / cbSceneParam._m0[80u].x;
            float _3011 = isnan(_2872) ? _2871 : (isnan(_2871) ? _2872 : max(_2871, _2872));
            float _3012 = isnan(_2872) ? _2871 : (isnan(_2871) ? _2872 : min(_2871, _2872));
            float _3021 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : min(_3011, 0.0));
            float _3022 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : min(_3012, 0.0));
            _3050 = ((abs(_2878 / _2866) * cbSceneParam._m0[80u].y) * ((((_3021 - _3022) * 2.0) - ((exp2(_2886 * (isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0)))) - exp2(_2886 * (isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0))))) * _3010)) - ((exp2(_2888 * _3021) - exp2(_2888 * _3022)) * _3010))) + (_2881 * cbSceneParam._m0[80u].z);
        }
        vec4 _3052 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2798, _2799, 1.0), 0.0);
        float _3061 = exp2((_3050 * (-1.44269502162933349609375)) * (1.0 - _3052.w));
        float _3062 = log2(_3061);
        float _3078 = log2(_2818);
        _2890 = (exp2(_3078 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3062 * cbSceneParam._m0[78u].x)) * _3052.x) / cbSceneParam._m0[78u].x)) + _2815;
        _2892 = (exp2(_3078 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3062 * cbSceneParam._m0[78u].y)) * _3052.y) / cbSceneParam._m0[78u].y)) + _2816;
        _2894 = (exp2(_3078 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3062 * cbSceneParam._m0[78u].z)) * _3052.z) / cbSceneParam._m0[78u].z)) + _2817;
        _2896 = _3061 * _2818;
    }
    else
    {
        _2890 = _2815;
        _2892 = _2816;
        _2894 = _2817;
        _2896 = _2818;
    }
    float _2908 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2909 = _2908 == 3.0;
    float _2910 = log2(_2896);
    float _2914 = exp2(_2910 * cbSceneParam._m0[78u].x);
    float _2915 = exp2(_2910 * cbSceneParam._m0[78u].y);
    float _2916 = exp2(_2910 * cbSceneParam._m0[78u].z);
    float _2917 = _2914 * (isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0)));
    float _2918 = _2915 * (isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0)));
    float _2919 = _2916 * (isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0)));
    float _2928 = (_2908 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2928 * (_2909 ? _2917 : (_2917 + (cbSceneParam._m0[72u].w * _2890)));
    SV_Target.y = _2928 * (_2909 ? _2918 : (_2918 + (cbSceneParam._m0[72u].w * _2892)));
    SV_Target.z = _2928 * (_2909 ? _2919 : (_2919 + (cbSceneParam._m0[72u].w * _2894)));
    SV_Target.w = cbInstanceData._m0[_2790].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2753) * _2789) * _2914) * _2928;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2754) * _2789) * _2915) * _2928;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2755) * _2789) * _2916) * _2928;
    SV_Target_1.w = cbInstanceData._m0[_2790].w;
}


