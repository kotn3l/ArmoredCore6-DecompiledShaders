#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _934;
float _3367;
float _3368;
float _3369;
float _3370;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _191 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _192 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _193 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_191, _192, _193), vec3(_191, _192, _193)));
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _235 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _241 = _235.x * cbMtdParam._m0[9u].x;
    float _242 = _235.y * cbMtdParam._m0[9u].y;
    float _243 = _235.z * cbMtdParam._m0[9u].z;
    vec4 _263 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _277 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _281 = _277.z;
    float _285 = (_277.x * 2.0) + (-1.0);
    float _287 = (_277.y * 2.0) + (-1.0);
    float _288 = dot(vec2(_285, _287), vec2(_285, _287));
    float _3379 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _294 = sqrt(1.0 - (isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0))));
    vec4 _322 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _337 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _352 = (TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_263.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].x + 1.0);
    float _3390 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _353 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
    float _356 = fma(_294, _206 * NORMAL.x, fma(_287, _213 * TANGENT.x, (_199 * _191) * _285));
    float _359 = fma(_294, _206 * NORMAL.y, fma(_287, _213 * TANGENT.y, (_199 * _192) * _285));
    float _362 = fma(_294, _206 * NORMAL.z, fma(_287, _213 * TANGENT.z, (_199 * _193) * _285));
    float _366 = inversesqrt(dot(vec3(_356, _359, _362), vec3(_356, _359, _362)));
    float _367 = _366 * _356;
    float _368 = _366 * _359;
    float _369 = _366 * _362;
    float _3401 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _370 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
    float _3412 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3423 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3434 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _389 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _430 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _440 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _430);
    float _441 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _430);
    float _442 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _430);
    float _446 = inversesqrt(dot(vec3(_440, _441, _442), vec3(_440, _441, _442)));
    float _447 = _440 * _446;
    float _448 = _441 * _446;
    float _449 = _442 * _446;
    vec4 _454 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _456 = _454.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _614 = sqrt(((_440 * _440) + (_441 * _441)) + (_442 * _442));
        float _620 = (cbMatDynParam._m0[5u].x * _614) + cbMatDynParam._m0[5u].y;
        float _3445 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
        float _621 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
        float _625 = (cbMatDynParam._m0[5u].z * _614) + cbMatDynParam._m0[5u].w;
        float _3456 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0))) - _621)) + _621) < ((_456 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _468 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _469 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _489 = fma(_369, cbSceneParam._m0[5u].z, fma(_368, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _367));
    float _492 = fma(_369, cbSceneParam._m0[6u].z, fma(_368, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _367));
    float _495 = fma(_369, cbSceneParam._m0[7u].z, fma(_368, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _367));
    uint _508 = uint(roundEven(NORMAL.w)) * 13u;
    uint _510 = _508 + 9u;
    uint _511 = _510 + uint(cbMatDynParam._m0[0u].w);
    float _517 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0)))) * cbInstanceData._m0[_511].x;
    float _518 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0)))) * cbInstanceData._m0[_511].y;
    float _519 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0)))) * cbInstanceData._m0[_511].z;
    float _3467 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _520 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
    float _3478 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _521 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
    float _3489 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _522 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
    vec4 _531 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _468, cbSceneParam._m0[86u].y * _469));
    float _534 = _531.x * TEXCOORD_3.w;
    float _535 = dot(vec3(_367, _368, _369), vec3(_447, _448, _449));
    float _538 = _535 * 2.0;
    float _542 = (_538 * _367) - _447;
    float _543 = (_538 * _368) - _448;
    float _544 = (_538 * _369) - _449;
    float _548 = abs(dot(vec3(_447, _448, _449), vec3(_367, _368, _369)));
    float _3500 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _550 = sqrt(_370);
    float _563 = exp2((_550 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_550 * 3.0));
    float _595 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _599 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _603 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _933;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _658 = fma(_603, cbModelParam._m0[26u].z, fma(_599, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _595));
        float _662 = fma(_603, cbModelParam._m0[27u].z, fma(_599, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _595));
        float _666 = fma(_603, cbModelParam._m0[28u].z, fma(_599, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _595));
        float _691 = _595 + _367;
        float _692 = _599 + _368;
        float _693 = _603 + _369;
        float _703 = fma(_693, cbModelParam._m0[26u].z, fma(_692, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _691)) - _658;
        float _704 = fma(_693, cbModelParam._m0[27u].z, fma(_692, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _691)) - _662;
        float _705 = fma(_693, cbModelParam._m0[28u].z, fma(_692, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _691)) - _666;
        float _709 = inversesqrt(dot(vec3(_703, _704, _705), vec3(_703, _704, _705)));
        float _722 = ((_709 * _703) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_658 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _723 = ((_709 * _704) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_662 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _724 = ((_709 * _705) / cbModelParam._m0[34u].z) + ((((((_666 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _727 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_722, _723, _724), 0.0);
        vec4 _734 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_722, _723, _724), 0.0);
        vec4 _741 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_722, _723, _724), 0.0);
        vec4 _748 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_722, _723, _724), 0.0);
        float _761 = exp2((_727.w + (-0.5)) * 20.0) * 2.0;
        float _762 = _761 * (_727.x + (-0.5));
        float _763 = _761 * (_727.y + (-0.5));
        float _764 = _761 * (_727.z + (-0.5));
        float _771 = exp2((_734.w + (-0.5)) * 20.0) * 2.0;
        float _772 = _771 * (_734.x + (-0.5));
        float _773 = _771 * (_734.y + (-0.5));
        float _774 = _771 * (_734.z + (-0.5));
        float _781 = exp2((_741.w + (-0.5)) * 20.0) * 2.0;
        float _782 = _781 * (_741.x + (-0.5));
        float _783 = _781 * (_741.y + (-0.5));
        float _784 = _781 * (_741.z + (-0.5));
        float _791 = exp2((_748.w + (-0.5)) * 20.0) * 2.0;
        float _792 = _791 * (_748.x + (-0.5));
        float _793 = _791 * (_748.y + (-0.5));
        float _794 = _791 * (_748.z + (-0.5));
        float _795 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _796 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _797 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _798 = _762 * 0.5;
        float _799 = _772 * 0.5;
        float _800 = _782 * 0.5;
        float _801 = dot(vec3(_798, _799, _800), vec3(_798, _799, _800));
        float _806 = (_801 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_801);
        float _815 = (dot(vec3(_367, _368, _369), vec3(_806 * _798, _806 * _799, _806 * _800)) + 1.0) * 0.5;
        float _3526 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _825 = sqrt(((_799 * _799) + (_798 * _798)) + (_800 * _800)) / (_795 + 9.9999997473787516355514526367188e-06);
        float _3537 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _826 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _827 = _826 * 2.0;
        float _831 = (1.0 - _826) / (_826 + 1.0);
        float _3548 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _832 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _841 = ((((1.0 - _832) * (_827 + 2.0)) * exp2(log2(isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))) * (_827 + 1.0))) + _832) * _795;
        float _842 = _763 * 0.5;
        float _843 = _773 * 0.5;
        float _844 = _783 * 0.5;
        float _845 = dot(vec3(_842, _843, _844), vec3(_842, _843, _844));
        float _850 = (_845 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_845);
        float _858 = (dot(vec3(_367, _368, _369), vec3(_850 * _842, _850 * _843, _850 * _844)) + 1.0) * 0.5;
        float _3559 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _867 = sqrt(((_843 * _843) + (_842 * _842)) + (_844 * _844)) / (_796 + 9.9999997473787516355514526367188e-06);
        float _3570 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _868 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _869 = _868 * 2.0;
        float _873 = (1.0 - _868) / (_868 + 1.0);
        float _3581 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _874 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _883 = ((((1.0 - _874) * (_869 + 2.0)) * exp2(log2(isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0))) * (_869 + 1.0))) + _874) * _796;
        float _884 = _764 * 0.5;
        float _885 = _774 * 0.5;
        float _886 = _784 * 0.5;
        float _887 = dot(vec3(_884, _885, _886), vec3(_884, _885, _886));
        float _892 = (_887 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_887);
        float _900 = (dot(vec3(_367, _368, _369), vec3(_892 * _884, _892 * _885, _892 * _886)) + 1.0) * 0.5;
        float _3592 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _909 = sqrt(((_885 * _885) + (_884 * _884)) + (_886 * _886)) / (_797 + 9.9999997473787516355514526367188e-06);
        float _3603 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _911 = _910 * 2.0;
        float _915 = (1.0 - _910) / (_910 + 1.0);
        float _3614 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _925 = ((((1.0 - _916) * (_911 + 2.0)) * exp2(log2(isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0))) * (_911 + 1.0))) + _916) * _797;
        _933 = _764;
        _935 = _763;
        _936 = _762;
        _937 = _774;
        _938 = _773;
        _939 = _772;
        _940 = _784;
        _941 = _783;
        _942 = _782;
        _943 = _797;
        _944 = _796;
        _945 = _795;
        _946 = cbModelParam._m0[36u].z * (isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0)));
        _947 = cbModelParam._m0[36u].z * (isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0)));
        _948 = cbModelParam._m0[36u].z * (isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0)));
    }
    else
    {
        _933 = _934;
        _935 = _934;
        _936 = _934;
        _937 = _934;
        _938 = _934;
        _939 = _934;
        _940 = _934;
        _941 = _934;
        _942 = _934;
        _943 = _934;
        _944 = _934;
        _945 = _934;
        _946 = 0.0;
        _947 = 0.0;
        _948 = 0.0;
    }
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _977 = fma(_603, cbModelParam._m0[30u].z, fma(_599, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _595));
        float _981 = fma(_603, cbModelParam._m0[31u].z, fma(_599, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _595));
        float _985 = fma(_603, cbModelParam._m0[32u].z, fma(_599, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _595));
        float _1008 = _595 + _367;
        float _1009 = _599 + _368;
        float _1010 = _603 + _369;
        float _1020 = fma(_1010, cbModelParam._m0[30u].z, fma(_1009, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1008)) - _977;
        float _1021 = fma(_1010, cbModelParam._m0[31u].z, fma(_1009, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1008)) - _981;
        float _1022 = fma(_1010, cbModelParam._m0[32u].z, fma(_1009, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1008)) - _985;
        float _1026 = inversesqrt(dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022)));
        float _1039 = ((_1026 * _1020) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_977 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1040 = ((_1026 * _1021) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_981 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1041 = ((_1026 * _1022) / cbModelParam._m0[35u].z) + ((((((_985 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1043 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        float _1076 = exp2((_1043.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1043.x + (-0.5));
        float _1078 = _1076 * (_1043.y + (-0.5));
        float _1079 = _1076 * (_1043.z + (-0.5));
        float _1086 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1050.x + (-0.5));
        float _1088 = _1086 * (_1050.y + (-0.5));
        float _1089 = _1086 * (_1050.z + (-0.5));
        float _1096 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1057.x + (-0.5));
        float _1098 = _1096 * (_1057.y + (-0.5));
        float _1099 = _1096 * (_1057.z + (-0.5));
        float _1106 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1064.x + (-0.5));
        float _1108 = _1106 * (_1064.y + (-0.5));
        float _1109 = _1106 * (_1064.z + (-0.5));
        float _1110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1112 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1113 = _1077 * 0.5;
        float _1114 = _1087 * 0.5;
        float _1115 = _1097 * 0.5;
        float _1116 = dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115));
        float _1121 = (_1116 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1116);
        float _1129 = (dot(vec3(_367, _368, _369), vec3(_1121 * _1113, _1121 * _1114, _1121 * _1115)) + 1.0) * 0.5;
        float _3655 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1138 = sqrt(((_1114 * _1114) + (_1113 * _1113)) + (_1115 * _1115)) / (_1110 + 9.9999997473787516355514526367188e-06);
        float _3666 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _1140 = _1139 * 2.0;
        float _1144 = (1.0 - _1139) / (_1139 + 1.0);
        float _3677 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1154 = ((((1.0 - _1145) * (_1140 + 2.0)) * exp2(log2(isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * (_1140 + 1.0))) + _1145) * _1110;
        float _1155 = _1078 * 0.5;
        float _1156 = _1088 * 0.5;
        float _1157 = _1098 * 0.5;
        float _1158 = dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157));
        float _1163 = (_1158 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1158);
        float _1171 = (dot(vec3(_367, _368, _369), vec3(_1163 * _1155, _1163 * _1156, _1163 * _1157)) + 1.0) * 0.5;
        float _3688 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1180 = sqrt(((_1156 * _1156) + (_1155 * _1155)) + (_1157 * _1157)) / (_1111 + 9.9999997473787516355514526367188e-06);
        float _3699 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1182 = _1181 * 2.0;
        float _1186 = (1.0 - _1181) / (_1181 + 1.0);
        float _3710 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1196 = ((((1.0 - _1187) * (_1182 + 2.0)) * exp2(log2(isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * (_1182 + 1.0))) + _1187) * _1111;
        float _1197 = _1079 * 0.5;
        float _1198 = _1089 * 0.5;
        float _1199 = _1099 * 0.5;
        float _1200 = dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199));
        float _1205 = (_1200 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1200);
        float _1213 = (dot(vec3(_367, _368, _369), vec3(_1205 * _1197, _1205 * _1198, _1205 * _1199)) + 1.0) * 0.5;
        float _3721 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1222 = sqrt(((_1198 * _1198) + (_1197 * _1197)) + (_1199 * _1199)) / (_1112 + 9.9999997473787516355514526367188e-06);
        float _3732 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1224 = _1223 * 2.0;
        float _1228 = (1.0 - _1223) / (_1223 + 1.0);
        float _3743 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1238 = ((((1.0 - _1229) * (_1224 + 2.0)) * exp2(log2(isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * (_1224 + 1.0))) + _1229) * _1112;
        _1246 = _1079;
        _1247 = _1078;
        _1248 = _1077;
        _1249 = _1089;
        _1250 = _1088;
        _1251 = _1087;
        _1252 = _1099;
        _1253 = _1098;
        _1254 = _1097;
        _1255 = _1112;
        _1256 = _1111;
        _1257 = _1110;
        _1258 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)));
        _1259 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0)));
        _1260 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)));
    }
    else
    {
        _1246 = _934;
        _1247 = _934;
        _1248 = _934;
        _1249 = _934;
        _1250 = _934;
        _1251 = _934;
        _1252 = _934;
        _1253 = _934;
        _1254 = _934;
        _1255 = _934;
        _1256 = _934;
        _1257 = _934;
        _1258 = 0.0;
        _1259 = 0.0;
        _1260 = 0.0;
    }
    float _1270 = (cbModelParam._m0[1u].x * (_1258 - _946)) + _946;
    float _1271 = (cbModelParam._m0[1u].x * (_1259 - _947)) + _947;
    float _1272 = (cbModelParam._m0[1u].x * (_1260 - _948)) + _948;
    float _1293 = fma(_1272, cbSceneParam._m0[89u].z, fma(_1271, cbSceneParam._m0[89u].y, _1270 * cbSceneParam._m0[89u].x));
    float _1296 = fma(_1272, cbSceneParam._m0[90u].z, fma(_1271, cbSceneParam._m0[90u].y, _1270 * cbSceneParam._m0[90u].x));
    float _1299 = fma(_1272, cbSceneParam._m0[91u].z, fma(_1271, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1270));
    float _1314 = _542 * 0.5;
    float _1315 = _543 * 0.5;
    float _1316 = _544 * 0.5;
    float _1317 = dot(vec4(_1314, _1315, _1316, 1.0), vec4(_1248, _1251, _1254, _1257));
    float _1320 = dot(vec4(_1314, _1315, _1316, 1.0), vec4(_1247, _1250, _1253, _1256));
    float _1323 = dot(vec4(_1314, _1315, _1316, 1.0), vec4(_1246, _1249, _1252, _1255));
    float _1357;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1330 = dot(vec4(_1314, _1315, _1316, 1.0), vec4(_933, _937, _940, _943));
        float _1334 = dot(vec4(_1314, _1315, _1316, 1.0), vec4(_935, _938, _941, _944));
        float _1338 = dot(vec4(_1314, _1315, _1316, 1.0), vec4(_936, _939, _942, _945));
        float _1345 = dot(vec4(cbModelParam._m0[39u]), vec4(_1314, _1315, _1316, 1.0));
        _1357 = dot(vec3(isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)), isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)), isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1345) ? 0.0 : (isnan(0.0) ? _1345 : max(0.0, _1345))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1357 = 1.0;
    }
    float _1368;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1359 = dot(vec4(cbModelParam._m0[40u]), vec4(_1314, _1315, _1316, 1.0));
        _1368 = dot(vec3(isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)), isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)), isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1359) ? 0.0 : (isnan(0.0) ? _1359 : max(0.0, _1359))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1368 = 1.0;
    }
    float _1372 = (_1368 * cbModelParam._m0[1u].x) + (_1357 * (1.0 - cbModelParam._m0[1u].x));
    float _1382 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _370);
    float _1383 = isnan(_1382) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1382 : min(cbModelParam._m0[25u].z, _1382));
    float _1463;
    float _1465;
    float _1467;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1430 = fma(_603, cbModelParam._m0[13u].z, fma(_599, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _595)) + cbModelParam._m0[13u].w;
        float _1434 = fma(_603, cbModelParam._m0[14u].z, fma(_599, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _595)) + cbModelParam._m0[14u].w;
        float _1438 = fma(_603, cbModelParam._m0[15u].z, fma(_599, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _595)) + cbModelParam._m0[15u].w;
        float _1441 = fma(_544, cbModelParam._m0[13u].z, fma(_543, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _542));
        float _1444 = fma(_544, cbModelParam._m0[14u].z, fma(_543, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _542));
        float _1447 = fma(_544, cbModelParam._m0[15u].z, fma(_543, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _542));
        float _1475;
        if (_1441 > 0.0)
        {
            _1475 = abs((1.0 - _1430) / _1441);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1441 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1430 + 1.0) / _1441);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1475 = frontier_phi_17_15_ladder;
        }
        float _1700;
        if (_1444 > 0.0)
        {
            _1700 = abs((1.0 - _1434) / _1444);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1444 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1434 + 1.0) / _1444);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1700 = frontier_phi_26_22_ladder;
        }
        float _1946;
        if (_1447 > 0.0)
        {
            _1946 = abs((1.0 - _1438) / _1447);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1447 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1438 + 1.0) / _1447);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1946 = frontier_phi_38_33_ladder;
        }
        float _1948 = isnan(_1700) ? _1475 : (isnan(_1475) ? _1700 : min(_1475, _1700));
        float _1949 = isnan(_1946) ? _1948 : (isnan(_1948) ? _1946 : min(_1948, _1946));
        float _1953 = (_1949 * _1441) + _1430;
        float _1954 = (_1949 * _1444) + _1434;
        float _1955 = (_1949 * _1447) + _1438;
        float _1956 = _1949 * 9.9999997473787516355514526367188e-05;
        float _1958 = (-1.0) - _1956;
        float _1960 = _1956 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1955 > _1960) || ((_1955 < _1958) || ((_1954 > _1960) || ((_1954 < _1958) || ((_1953 < _1958) || (_1953 > _1960))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2079 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1955, cbModelParam._m0[9u].z, fma(_1954, cbModelParam._m0[9u].y, _1953 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1955, cbModelParam._m0[10u].z, fma(_1954, cbModelParam._m0[10u].y, _1953 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1955, cbModelParam._m0[11u].z, fma(_1954, cbModelParam._m0[11u].y, _1953 * cbModelParam._m0[11u].x))), _1383);
            frontier_phi_16_38_ladder = _2079.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2079.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2079.x * cbModelParam._m0[1u].y;
        }
        _1463 = frontier_phi_16_38_ladder_2;
        _1465 = frontier_phi_16_38_ladder_1;
        _1467 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1451 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_542, _543, _544), _1383);
        _1463 = _1451.x * cbModelParam._m0[1u].y;
        _1465 = _1451.y * cbModelParam._m0[1u].y;
        _1467 = _1451.z * cbModelParam._m0[1u].y;
    }
    float _1471 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _370);
    float _1472 = isnan(_1471) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1471 : min(cbModelParam._m0[25u].w, _1471));
    float _1563;
    float _1565;
    float _1567;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1527 = fma(_603, cbModelParam._m0[21u].z, fma(_599, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _595)) + cbModelParam._m0[21u].w;
        float _1531 = fma(_603, cbModelParam._m0[22u].z, fma(_599, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _595)) + cbModelParam._m0[22u].w;
        float _1535 = fma(_603, cbModelParam._m0[23u].z, fma(_599, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _595)) + cbModelParam._m0[23u].w;
        float _1538 = fma(_544, cbModelParam._m0[21u].z, fma(_543, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _542));
        float _1541 = fma(_544, cbModelParam._m0[22u].z, fma(_543, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _542));
        float _1544 = fma(_544, cbModelParam._m0[23u].z, fma(_543, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _542));
        float _1705;
        if (_1538 > 0.0)
        {
            _1705 = abs((1.0 - _1527) / _1538);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1538 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1527 + 1.0) / _1538);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1705 = frontier_phi_28_24_ladder;
        }
        float _1973;
        if (_1541 > 0.0)
        {
            _1973 = abs((1.0 - _1531) / _1541);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1541 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1531 + 1.0) / _1541);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1973 = frontier_phi_40_35_ladder;
        }
        float _2178;
        if (_1544 > 0.0)
        {
            _2178 = abs((1.0 - _1535) / _1544);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1544 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1535 + 1.0) / _1544);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2178 = frontier_phi_49_46_ladder;
        }
        float _2180 = isnan(_1973) ? _1705 : (isnan(_1705) ? _1973 : min(_1705, _1973));
        float _2181 = isnan(_2178) ? _2180 : (isnan(_2180) ? _2178 : min(_2180, _2178));
        float _2185 = (_2181 * _1538) + _1527;
        float _2186 = (_2181 * _1541) + _1531;
        float _2187 = (_2181 * _1544) + _1535;
        float _2188 = _2181 * 9.9999997473787516355514526367188e-05;
        float _2189 = (-1.0) - _2188;
        float _2191 = _2188 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2187 > _2191) || ((_2187 < _2189) || ((_2186 > _2191) || ((_2186 < _2189) || ((_2185 < _2189) || (_2185 > _2191))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2421 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2187, cbModelParam._m0[17u].z, fma(_2186, cbModelParam._m0[17u].y, _2185 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2187, cbModelParam._m0[18u].z, fma(_2186, cbModelParam._m0[18u].y, _2185 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2187, cbModelParam._m0[19u].z, fma(_2186, cbModelParam._m0[19u].y, _2185 * cbModelParam._m0[19u].x))), _1472);
            frontier_phi_25_49_ladder = _2421.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2421.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2421.x * cbModelParam._m0[1u].z;
        }
        _1563 = frontier_phi_25_49_ladder_2;
        _1565 = frontier_phi_25_49_ladder_1;
        _1567 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1547 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_542, _543, _544), _1472);
        _1563 = _1547.x * cbModelParam._m0[1u].z;
        _1565 = _1547.y * cbModelParam._m0[1u].z;
        _1567 = _1547.z * cbModelParam._m0[1u].z;
    }
    float _1579 = ((((1.0 - _563) * ((_550 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_563 * _550)) * _534;
    float _1580 = _1579 * ((cbModelParam._m0[1u].w * (_1563 - _1463)) + _1463);
    float _1581 = _1579 * ((cbModelParam._m0[1u].w * (_1565 - _1465)) + _1465);
    float _1582 = _1579 * ((cbModelParam._m0[1u].w * (_1567 - _1467)) + _1467);
    float _1585 = fma(_1582, cbSceneParam._m0[89u].z, fma(_1581, cbSceneParam._m0[89u].y, _1580 * cbSceneParam._m0[89u].x));
    float _1588 = fma(_1582, cbSceneParam._m0[90u].z, fma(_1581, cbSceneParam._m0[90u].y, _1580 * cbSceneParam._m0[90u].x));
    float _1591 = fma(_1582, cbSceneParam._m0[91u].z, fma(_1581, cbSceneParam._m0[91u].y, _1580 * cbSceneParam._m0[91u].x));
    vec4 _1599 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_468, _469));
    float _1601 = _1599.w;
    float _1613 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1601);
    float _1614 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1601);
    float _1615 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1601);
    uvec4 _1619 = floatBitsToUint(cbInstanceData._m0[_508 + 5u]);
    uint _1621 = _1619.x * 14u;
    uint _1622 = _1621 + 13u;
    float _1629 = _534 + (-1.0);
    float _1634 = (cbLight._m0[_1622].x * _1629) + 1.0;
    float _1635 = (cbLight._m0[_1622].y * _1629) + 1.0;
    float _1636 = (cbLight._m0[_1622].z * _1629) + 1.0;
    float _1637 = (cbLight._m0[_1622].w * _1629) + 1.0;
    uint _1638 = _1621 + 5u;
    float _1644 = isnan(1.0) ? _1635 : (isnan(_1635) ? 1.0 : min(_1635, 1.0));
    uint _1648 = _1621 + 4u;
    float _1658 = isnan(1.0) ? _1634 : (isnan(_1634) ? 1.0 : min(_1634, 1.0));
    uint _1662 = _1621 | 1u;
    float _1673 = dot(vec3(cbLight._m0[_1621].xyz), vec3(_367, _368, _369));
    float _1676 = dot(vec3(cbLight._m0[_1662].xyz), vec3(_367, _368, _369));
    float _3879 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
    float _3890 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
    float _1681 = (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * 0.3183098733425140380859375;
    float _1683 = (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * 0.3183098733425140380859375;
    float _1690 = ((cbLight._m0[_1638].x * _1644) * _1683) + (((cbLight._m0[_1648].x * _1613) * _1658) * _1681);
    float _1691 = ((_1644 * cbLight._m0[_1638].y) * _1683) + (((cbLight._m0[_1648].y * _1614) * _1658) * _1681);
    float _1692 = ((_1644 * cbLight._m0[_1638].z) * _1683) + (((cbLight._m0[_1648].z * _1615) * _1658) * _1681);
    uvec4 _1697 = floatBitsToUint(cbLight._m0[_1621 + 12u]);
    bool _1699 = _1697.x == 0u;
    float _1710;
    float _1712;
    float _1714;
    if (_1699)
    {
        _1710 = _1690;
        _1712 = _1691;
        _1714 = _1692;
    }
    else
    {
        uint _1718 = _1621 + 6u;
        float _1734 = (dot(vec3(cbLight._m0[_1621 + 2u].xyz), vec3(_367, _368, _369)) * 0.5) + 0.5;
        float _1735 = _1734 * _1734;
        float _3901 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1736 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1737 = isnan(1.0) ? _1636 : (isnan(_1636) ? 1.0 : min(_1636, 1.0));
        _1710 = (((cbLight._m0[_1718].x * 0.3183098733425140380859375) * _1736) * _1737) + _1690;
        _1712 = (((cbLight._m0[_1718].y * 0.3183098733425140380859375) * _1736) * _1737) + _1691;
        _1714 = (((cbLight._m0[_1718].z * 0.3183098733425140380859375) * _1736) * _1737) + _1692;
    }
    bool _1717 = _1697.y == 0u;
    float _1755;
    float _1757;
    float _1759;
    if (_1717)
    {
        _1755 = _1710;
        _1757 = _1712;
        _1759 = _1714;
    }
    else
    {
        uint _1917 = _1621 + 7u;
        float _1933 = (dot(vec3(cbLight._m0[_1621 + 3u].xyz), vec3(_367, _368, _369)) * 0.5) + 0.5;
        float _1934 = _1933 * _1933;
        float _3917 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
        float _1935 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1936 = isnan(1.0) ? _1637 : (isnan(_1637) ? 1.0 : min(_1637, 1.0));
        _1755 = (((cbLight._m0[_1917].x * 0.3183098733425140380859375) * _1935) * _1936) + _1710;
        _1757 = (((cbLight._m0[_1917].y * 0.3183098733425140380859375) * _1935) * _1936) + _1712;
        _1759 = (((cbLight._m0[_1917].z * 0.3183098733425140380859375) * _1935) * _1936) + _1714;
    }
    uint _1762 = _1621 + 8u;
    float _1775 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1621].w)) * _370) * 0.949999988079071044921875);
    float _1776 = _1775 * _1775;
    float _1777 = cbLight._m0[_1621].x + _447;
    float _1778 = cbLight._m0[_1621].y + _448;
    float _1779 = cbLight._m0[_1621].z + _449;
    float _1783 = inversesqrt(dot(vec3(_1777, _1778, _1779), vec3(_1777, _1778, _1779)));
    float _1784 = _1783 * _1777;
    float _1785 = _1783 * _1778;
    float _1786 = _1783 * _1779;
    float _1787 = dot(vec3(_367, _368, _369), vec3(cbLight._m0[_1621].xyz));
    float _3933 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
    float _1790 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _3944 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _1791 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _1792 = dot(vec3(_367, _368, _369), vec3(_1784, _1785, _1786));
    float _3955 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1795 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _1796 = dot(vec3(cbLight._m0[_1621].xyz), vec3(_1784, _1785, _1786));
    float _3966 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _1800 = _1776 * _1776;
    float _1804 = ((_1795 * _1795) * (_1800 + (-1.0))) + 1.0;
    float _1815 = (exp2(log2(1.0 - (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1816 = 1.0 - _1776;
    float _1827 = (0.5 / (((_1791 * ((_1790 * _1816) + _1776)) + 9.9999999392252902907785028219223e-09) + (((_1791 * _1816) + _1776) * _1790))) * _1790;
    float _3977 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _1829 = (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (_1800 / ((_1804 * _1804) * 3.141590118408203125));
    uint _1843 = _1621 + 9u;
    float _1854 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1662].w)) * _370) * 0.949999988079071044921875);
    float _1855 = _1854 * _1854;
    float _1856 = cbLight._m0[_1662].x + _447;
    float _1857 = cbLight._m0[_1662].y + _448;
    float _1858 = cbLight._m0[_1662].z + _449;
    float _1862 = inversesqrt(dot(vec3(_1856, _1857, _1858), vec3(_1856, _1857, _1858)));
    float _1863 = _1862 * _1856;
    float _1864 = _1862 * _1857;
    float _1865 = _1862 * _1858;
    float _1866 = dot(vec3(_367, _368, _369), vec3(cbLight._m0[_1662].xyz));
    float _3988 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _1869 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _1870 = dot(vec3(_367, _368, _369), vec3(_1863, _1864, _1865));
    float _3999 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
    float _1873 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _1874 = dot(vec3(cbLight._m0[_1662].xyz), vec3(_1863, _1864, _1865));
    float _4010 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _1878 = _1855 * _1855;
    float _1882 = ((_1873 * _1873) * (_1878 + (-1.0))) + 1.0;
    float _1891 = (exp2(log2(1.0 - (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1892 = 1.0 - _1855;
    float _1902 = (0.5 / (((_1791 * ((_1869 * _1892) + _1855)) + 9.9999999392252902907785028219223e-09) + (((_1791 * _1892) + _1855) * _1869))) * _1869;
    float _4021 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1904 = (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_1878 / ((_1882 * _1882) * 3.141590118408203125));
    float _1914 = (((_1891 * cbLight._m0[_1843].x) * _1904) * _1644) + ((((cbLight._m0[_1762].x * _1613) * _1815) * _1829) * _1658);
    float _1915 = (((_1891 * cbLight._m0[_1843].y) * _1904) * _1644) + ((((cbLight._m0[_1762].y * _1614) * _1815) * _1829) * _1658);
    float _1916 = (((_1891 * cbLight._m0[_1843].z) * _1904) * _1644) + ((((cbLight._m0[_1762].z * _1615) * _1815) * _1829) * _1658);
    float _1978;
    float _1980;
    float _1982;
    if (_1699)
    {
        _1978 = _1914;
        _1980 = _1915;
        _1982 = _1916;
    }
    else
    {
        uint _1984 = _1621 + 2u;
        uint _1988 = _1621 + 10u;
        float _2002 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1984].w)) * _370) * 0.949999988079071044921875);
        float _2003 = _2002 * _2002;
        float _2004 = cbLight._m0[_1984].x + _447;
        float _2005 = cbLight._m0[_1984].y + _448;
        float _2006 = cbLight._m0[_1984].z + _449;
        float _2010 = inversesqrt(dot(vec3(_2004, _2005, _2006), vec3(_2004, _2005, _2006)));
        float _2011 = _2010 * _2004;
        float _2012 = _2010 * _2005;
        float _2013 = _2010 * _2006;
        float _2014 = dot(vec3(_367, _368, _369), vec3(cbLight._m0[_1984].xyz));
        float _4032 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
        float _2017 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _2018 = dot(vec3(_367, _368, _369), vec3(_2011, _2012, _2013));
        float _4043 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
        float _2021 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _2022 = dot(vec3(cbLight._m0[_1984].xyz), vec3(_2011, _2012, _2013));
        float _4054 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
        float _2026 = _2003 * _2003;
        float _2030 = ((_2021 * _2021) * (_2026 + (-1.0))) + 1.0;
        float _2039 = (exp2(log2(1.0 - (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2040 = 1.0 - _2003;
        float _2050 = (0.5 / (((_1791 * ((_2017 * _2040) + _2003)) + 9.9999999392252902907785028219223e-09) + (((_1791 * _2040) + _2003) * _2017))) * _2017;
        float _4065 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
        float _2052 = (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_2026 / ((_2030 * _2030) * 3.141590118408203125));
        float _2053 = isnan(1.0) ? _1636 : (isnan(_1636) ? 1.0 : min(_1636, 1.0));
        _1978 = (((_2039 * cbLight._m0[_1988].x) * _2052) * _2053) + _1914;
        _1980 = (((_2039 * cbLight._m0[_1988].y) * _2052) * _2053) + _1915;
        _1982 = (((_2039 * cbLight._m0[_1988].z) * _2052) * _2053) + _1916;
    }
    float _2088;
    float _2090;
    float _2092;
    if (_1717)
    {
        _2088 = _1978;
        _2090 = _1980;
        _2092 = _1982;
    }
    else
    {
        uint _2099 = _1621 + 3u;
        uint _2103 = _1621 + 11u;
        float _2117 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2099].w)) * _370) * 0.949999988079071044921875);
        float _2118 = _2117 * _2117;
        float _2119 = cbLight._m0[_2099].x + _447;
        float _2120 = cbLight._m0[_2099].y + _448;
        float _2121 = cbLight._m0[_2099].z + _449;
        float _2125 = inversesqrt(dot(vec3(_2119, _2120, _2121), vec3(_2119, _2120, _2121)));
        float _2126 = _2125 * _2119;
        float _2127 = _2125 * _2120;
        float _2128 = _2125 * _2121;
        float _2129 = dot(vec3(_367, _368, _369), vec3(cbLight._m0[_2099].xyz));
        float _4081 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2132 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _2133 = dot(vec3(_367, _368, _369), vec3(_2126, _2127, _2128));
        float _4092 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2136 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _2137 = dot(vec3(cbLight._m0[_2099].xyz), vec3(_2126, _2127, _2128));
        float _4103 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2141 = _2118 * _2118;
        float _2145 = ((_2136 * _2136) * (_2141 + (-1.0))) + 1.0;
        float _2154 = (exp2(log2(1.0 - (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2155 = 1.0 - _2118;
        float _2165 = (0.5 / (((_1791 * ((_2132 * _2155) + _2118)) + 9.9999999392252902907785028219223e-09) + (((_1791 * _2155) + _2118) * _2132))) * _2132;
        float _4114 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2167 = (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_2141 / ((_2145 * _2145) * 3.141590118408203125));
        float _2168 = isnan(1.0) ? _1637 : (isnan(_1637) ? 1.0 : min(_1637, 1.0));
        _2088 = (((_2154 * cbLight._m0[_2103].x) * _2167) * _2168) + _1978;
        _2090 = (((_2154 * cbLight._m0[_2103].y) * _2167) * _2168) + _1980;
        _2092 = (((_2154 * cbLight._m0[_2103].z) * _2167) * _2168) + _1982;
    }
    float _2303;
    float _2305;
    float _2307;
    float _2309;
    float _2311;
    float _2313;
    if (_1619.y == 0u)
    {
        float _2243 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2244 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2243;
        float _2245 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2243;
        float _2246 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2243;
        uvec4 _2258 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2259 = _2258.x;
        uint _2270 = uint((float(_2258.y) * floor(float(uint(cbSceneParam._m0[85u].y * _469) / _2259))) + floor(float(uint(cbSceneParam._m0[85u].x * _468) / _2259)));
        float _2280 = (log2(_2246 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2281 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        uint _2284 = uint(isnan(14.0) ? _2281 : (isnan(_2281) ? 14.0 : min(_2281, 14.0)));
        uvec4 _2289 = texelFetch(g_lightClusterGridBuffer, int(((_2284 << 2u) + (_2270 << 6u)) >> 2u));
        uint _2290 = _2289.x;
        uint _2291 = _2258.z;
        float _2426;
        float _2428;
        float _2430;
        float _2432;
        float _2434;
        float _2436;
        if (((((1u << ((_2291 >> 4u) & 15u)) + 4294967295u) & _2290) == 0u) || ((_2291 & 240u) == 0u))
        {
            _2426 = 0.0;
            _2428 = 0.0;
            _2430 = 0.0;
            _2432 = 0.0;
            _2434 = 0.0;
            _2436 = 0.0;
        }
        else
        {
            float _2427;
            float _2429;
            float _2431;
            float _2433;
            float _2435;
            float _2437;
            float _2588 = 0.0;
            float _2589 = 0.0;
            float _2590 = 0.0;
            float _2591 = 0.0;
            float _2592 = 0.0;
            float _2593 = 0.0;
            uint _2594 = 0u;
            uint _2603;
            bool _2604;
            for (;;)
            {
                _2603 = texelFetch(g_lightClassification, int((((_2284 << 5u) + (_2270 << 9u)) + (_2594 << 2u)) >> 2u)).x;
                _2604 = _2603 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2604)
                {
                    frontier_phi_66_pred = _2588;
                    frontier_phi_66_pred_1 = _2593;
                    frontier_phi_66_pred_2 = _2592;
                    frontier_phi_66_pred_3 = _2591;
                    frontier_phi_66_pred_4 = _2590;
                    frontier_phi_66_pred_5 = _2589;
                }
                else
                {
                    float _2733;
                    float _2734;
                    float _2735;
                    float _2736;
                    float _2737;
                    float _2738;
                    uint _2739;
                    _2733 = _2588;
                    _2734 = _2589;
                    _2735 = _2590;
                    _2736 = _2591;
                    _2737 = _2592;
                    _2738 = _2593;
                    _2739 = _2603;
                    float _2660;
                    float _2661;
                    float _2662;
                    float _2663;
                    float _2664;
                    float _2665;
                    for (;;)
                    {
                        uint _2743 = uint(findLSB(_2739)) + (_2594 << 5u);
                        uint _2740 = (_2739 + 4294967295u) & _2739;
                        uint _2745 = _2743 * 48u;
                        vec4 _2759 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2745)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 3u)).x));
                        uint _2765 = (_2743 * 48u) + 4u;
                        vec4 _2778 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2765)).x, texelFetch(g_PointLightRenderingBuffer, int(_2765 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2765 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2765 + 3u)).x));
                        uint _2784 = (_2743 * 48u) + 8u;
                        vec3 _2795 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2784)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 2u)).x));
                        float _2799 = _2759.x - _2244;
                        float _2800 = _2759.y - _2245;
                        float _2801 = _2759.z - _2246;
                        float _2802 = dot(vec3(_2799, _2800, _2801), vec3(_2799, _2800, _2801));
                        float _2805 = inversesqrt(_2802);
                        float _2806 = _2805 * _2799;
                        float _2807 = _2805 * _2800;
                        float _2808 = _2805 * _2801;
                        float _2809 = dot(vec3(_489, _492, _495), vec3(_2806, _2807, _2808));
                        float _2814 = 1.0 - (_2802 * _2759.w);
                        float _4140 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
                        float _2815 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
                        float _2816 = sqrt(_2802) * _2778.w;
                        float _2819 = 1.39999997615814208984375 / (_2816 + 1.39999997615814208984375);
                        float _2820 = _2819 * _2819;
                        float _2823 = ((1.0 - _2820) * _2809) + _2820;
                        float _2826 = _2816 * _2816;
                        float _2830 = ((isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0))) * _2815) / ((_2826 * 0.699999988079071044921875) + 1.0);
                        float _2834 = (-0.0) - _2244;
                        float _2835 = (-0.0) - _2245;
                        float _2836 = (-0.0) - _2246;
                        float _2840 = inversesqrt(dot(vec3(_2834, _2835, _2836), vec3(_2834, _2835, _2836)));
                        float _2841 = _2840 * _2834;
                        float _2842 = _2840 * _2835;
                        float _2843 = _2840 * _2836;
                        float _2851 = exp2(log2(1.0 / ((_2826 * 3.5) + 5.0)) * 0.25);
                        float _2852 = 1.0 - _550;
                        float _2859 = sqrt(1.0 - ((1.0 - (_2852 * _2852)) * (1.0 - (_2851 * _2851))));
                        float _2860 = _2859 * _2859;
                        float _2861 = _2860 * _2860;
                        float _2862 = _2841 + _2806;
                        float _2863 = _2842 + _2807;
                        float _2864 = _2843 + _2808;
                        float _2868 = inversesqrt(dot(vec3(_2862, _2863, _2864), vec3(_2862, _2863, _2864)));
                        float _2872 = dot(vec3(_489, _492, _495), vec3(_2841, _2842, _2843));
                        float _4156 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
                        float _2875 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
                        float _2876 = dot(vec3(_489, _492, _495), vec3(_2868 * _2862, _2868 * _2863, _2868 * _2864));
                        float _4167 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
                        float _2879 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
                        float _2883 = ((_2879 * _2879) * (_2861 + (-1.0))) + 1.0;
                        float _2884 = _2819 * _2860;
                        float _2885 = _2884 * _2884;
                        float _2888 = ((1.0 - _2885) * _2809) + _2885;
                        float _4178 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
                        float _2889 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
                        float _2890 = 1.0 - _2860;
                        float _2900 = (0.5 / (((_2889 * ((_2875 * _2890) + _2860)) + 9.9999999392252902907785028219223e-09) + (((_2889 * _2890) + _2860) * _2875))) * _2889;
                        float _4189 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
                        float _2911 = (((_2861 * 3.1415927410125732421875) * (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0)))) / ((_2883 * _2883) * ((_2826 * 2.1991131305694580078125) + 3.141590118408203125))) * _2815;
                        _2663 = (_2830 * _2778.x) + _2736;
                        _2664 = (_2830 * _2778.y) + _2737;
                        _2665 = (_2830 * _2778.z) + _2738;
                        _2660 = (_2911 * _2795.x) + _2733;
                        _2661 = (_2911 * _2795.y) + _2734;
                        _2662 = (_2911 * _2795.z) + _2735;
                        if (_2740 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2733 = _2660;
                            _2734 = _2661;
                            _2735 = _2662;
                            _2736 = _2663;
                            _2737 = _2664;
                            _2738 = _2665;
                            _2739 = _2740;
                        }
                    }
                    frontier_phi_66_pred = _2660;
                    frontier_phi_66_pred_1 = _2665;
                    frontier_phi_66_pred_2 = _2664;
                    frontier_phi_66_pred_3 = _2663;
                    frontier_phi_66_pred_4 = _2662;
                    frontier_phi_66_pred_5 = _2661;
                }
                _2427 = frontier_phi_66_pred;
                _2437 = frontier_phi_66_pred_1;
                _2435 = frontier_phi_66_pred_2;
                _2433 = frontier_phi_66_pred_3;
                _2431 = frontier_phi_66_pred_4;
                _2429 = frontier_phi_66_pred_5;
                uint _2595 = _2594 + 1u;
                if (_2595 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2588 = _2427;
                    _2589 = _2429;
                    _2590 = _2431;
                    _2591 = _2433;
                    _2592 = _2435;
                    _2593 = _2437;
                    _2594 = _2595;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2426 = _2427;
            _2428 = _2429;
            _2430 = _2431;
            _2432 = _2433;
            _2434 = _2435;
            _2436 = _2437;
        }
        uvec4 _2440 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2441 = _2440.z;
        uint _2443 = (_2441 >> 8u) & 15u;
        float _2556;
        float _2558;
        float _2560;
        float _2562;
        float _2564;
        float _2566;
        if (((4294967295u << _2443) & _2290) == 0u)
        {
            _2556 = _2426;
            _2558 = _2428;
            _2560 = _2430;
            _2562 = _2432;
            _2564 = _2434;
            _2566 = _2436;
        }
        else
        {
            float _2581 = inversesqrt(dot(vec3(_2244, _2245, _2246), vec3(_2244, _2245, _2246)));
            float _2582 = _2581 * _2244;
            float _2583 = _2581 * _2245;
            float _2584 = _2581 * _2246;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2443 < ((_2441 >> 12u) & 15u))
            {
                float _2557;
                float _2559;
                float _2561;
                float _2563;
                float _2565;
                float _2567;
                float _2716 = _2426;
                float _2717 = _2428;
                float _2718 = _2430;
                float _2719 = _2432;
                float _2720 = _2434;
                float _2721 = _2436;
                uint _2722 = _2443;
                uint _2731;
                bool _2732;
                for (;;)
                {
                    _2731 = texelFetch(g_lightClassification, int((((_2284 << 5u) + (_2270 << 9u)) + (_2722 << 2u)) >> 2u)).x;
                    _2732 = _2731 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2732)
                    {
                        frontier_phi_77_pred = _2721;
                        frontier_phi_77_pred_1 = _2720;
                        frontier_phi_77_pred_2 = _2719;
                        frontier_phi_77_pred_3 = _2718;
                        frontier_phi_77_pred_4 = _2717;
                        frontier_phi_77_pred_5 = _2716;
                    }
                    else
                    {
                        float _2925;
                        float _2926;
                        float _2927;
                        float _2928;
                        float _2929;
                        float _2930;
                        float _3220;
                        float _3221;
                        float _3222;
                        float _3223;
                        float _3224;
                        float _3225;
                        float _2938 = _2716;
                        float _2939 = _2717;
                        float _2940 = _2718;
                        float _2941 = _2719;
                        float _2942 = _2720;
                        float _2943 = _2721;
                        uint _2944 = _2731;
                        uint _2945;
                        vec4 _2970;
                        float _2971;
                        vec4 _2986;
                        vec3 _2998;
                        vec4 _3013;
                        vec4 _3029;
                        float _3076;
                        bool _3077;
                        for (;;)
                        {
                            uint _2955 = ((_2722 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2944));
                            _2945 = (_2944 + 4294967295u) & _2944;
                            uint _2957 = _2955 * 40u;
                            _2970 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2957)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 3u)).x));
                            _2971 = _2970.w;
                            uint _2973 = (_2955 * 40u) + 4u;
                            _2986 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2973)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 3u)).x));
                            uint _2988 = (_2955 * 40u) + 8u;
                            _2998 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2988)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 2u)).x));
                            uint _3000 = (_2955 * 40u) + 16u;
                            _3013 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3000)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 3u)).x));
                            uint _3016 = (_2955 * 40u) + 20u;
                            _3029 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3016)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 3u)).x));
                            uint _3032 = (_2955 * 40u) + 24u;
                            vec4 _3045 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3032)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 3u)).x));
                            uint _3051 = (_2955 * 40u) + 28u;
                            vec4 _3064 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3051)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 3u)).x));
                            _3076 = fma(_2246, _3064.z, fma(_2245, _3064.y, _3064.x * _2244)) + _3064.w;
                            _3077 = !((fma(_2246, _3045.z, fma(_2245, _3045.y, _3045.x * _2244)) + _3045.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3077)
                            {
                                float _3104 = _2970.x - _2244;
                                float _3105 = _2970.y - _2245;
                                float _3106 = _2970.z - _2246;
                                float _3107 = dot(vec3(_3104, _3105, _3106), vec3(_3104, _3105, _3106));
                                float _3110 = inversesqrt(_3107);
                                float _3111 = _3110 * _3104;
                                float _3112 = _3110 * _3105;
                                float _3113 = _3110 * _3106;
                                float _3117 = 1.0 - (_3107 / (_2971 * _2971));
                                float _4200 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                                float _3118 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
                                float _3122 = sqrt(_3107) * _2986.w;
                                float _3124 = 1.39999997615814208984375 / (_3122 + 1.39999997615814208984375);
                                float _3125 = _3124 * _3124;
                                float _3128 = ((1.0 - _3125) * dot(vec3(_3111, _3112, _3113), vec3(_489, _492, _495))) + _3125;
                                float _3131 = _3122 * _3122;
                                float _3135 = (fma(_2246, _3013.z, fma(_2245, _3013.y, _3013.x * _2244)) + _3013.w) / _3076;
                                float _3136 = (fma(_2246, _3029.z, fma(_2245, _3029.y, _3029.x * _2244)) + _3029.w) / _3076;
                                float _3140 = 1.0 - dot(vec2(_3135, _3136), vec2(_3135, _3136));
                                float _4216 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                                float _3141 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
                                float _3142 = _3141 * (((isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0))) * _3118) / ((_3131 * 0.699999988079071044921875) + 1.0));
                                float _3154 = exp2(log2(1.0 / ((_3131 * 3.5) + 5.0)) * 0.25);
                                float _3155 = 1.0 - _550;
                                float _3162 = sqrt(1.0 - ((1.0 - (_3155 * _3155)) * (1.0 - (_3154 * _3154))));
                                float _3163 = _3162 * _3162;
                                float _3164 = _3163 * _3163;
                                float _3165 = _3111 - _2582;
                                float _3166 = _3112 - _2583;
                                float _3167 = _3113 - _2584;
                                float _3171 = inversesqrt(dot(vec3(_3165, _3166, _3167), vec3(_3165, _3166, _3167)));
                                float _3175 = dot(vec3(_489, _492, _495), vec3((-0.0) - _2582, (-0.0) - _2583, (-0.0) - _2584));
                                float _4227 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                                float _3178 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
                                float _3179 = dot(vec3(_489, _492, _495), vec3(_3171 * _3165, _3171 * _3166, _3171 * _3167));
                                float _4238 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                                float _3182 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
                                float _3186 = ((_3182 * _3182) * (_3164 + (-1.0))) + 1.0;
                                float _3187 = _3124 * _3163;
                                float _3188 = _3187 * _3187;
                                float _3194 = ((1.0 - _3188) * dot(vec3(_489, _492, _495), vec3(_3111, _3112, _3113))) + _3188;
                                float _4249 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                                float _3195 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
                                float _3196 = 1.0 - _3163;
                                float _3206 = (0.5 / (((_3195 * ((_3178 * _3196) + _3163)) + 9.9999999392252902907785028219223e-09) + (((_3195 * _3196) + _3163) * _3178))) * _3195;
                                float _4260 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                                float _3216 = (_3141 * _3118) * (((_3164 * 3.1415927410125732421875) * (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0)))) / ((_3186 * _3186) * ((_3131 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3142 * _2986.y;
                                frontier_phi_83_pred_1 = _3142 * _2986.x;
                                frontier_phi_83_pred_2 = _3216 * _2998.z;
                                frontier_phi_83_pred_3 = _3216 * _2998.y;
                                frontier_phi_83_pred_4 = _3216 * _2998.x;
                                frontier_phi_83_pred_5 = _3142 * _2986.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3224 = frontier_phi_83_pred;
                            _3223 = frontier_phi_83_pred_1;
                            _3222 = frontier_phi_83_pred_2;
                            _3221 = frontier_phi_83_pred_3;
                            _3220 = frontier_phi_83_pred_4;
                            _3225 = frontier_phi_83_pred_5;
                            _2928 = _3223 + _2941;
                            _2929 = _3224 + _2942;
                            _2930 = _3225 + _2943;
                            _2925 = _3220 + _2938;
                            _2926 = _3221 + _2939;
                            _2927 = _3222 + _2940;
                            if (_2945 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2938 = _2925;
                                _2939 = _2926;
                                _2940 = _2927;
                                _2941 = _2928;
                                _2942 = _2929;
                                _2943 = _2930;
                                _2944 = _2945;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2930;
                        frontier_phi_77_pred_1 = _2929;
                        frontier_phi_77_pred_2 = _2928;
                        frontier_phi_77_pred_3 = _2927;
                        frontier_phi_77_pred_4 = _2926;
                        frontier_phi_77_pred_5 = _2925;
                    }
                    _2567 = frontier_phi_77_pred;
                    _2565 = frontier_phi_77_pred_1;
                    _2563 = frontier_phi_77_pred_2;
                    _2561 = frontier_phi_77_pred_3;
                    _2559 = frontier_phi_77_pred_4;
                    _2557 = frontier_phi_77_pred_5;
                    uint _2723 = _2722 + 1u;
                    if (_2723 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2716 = _2557;
                        _2717 = _2559;
                        _2718 = _2561;
                        _2719 = _2563;
                        _2720 = _2565;
                        _2721 = _2567;
                        _2722 = _2723;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2561;
                frontier_phi_58_59_ladder_1 = _2567;
                frontier_phi_58_59_ladder_2 = _2565;
                frontier_phi_58_59_ladder_3 = _2563;
                frontier_phi_58_59_ladder_4 = _2559;
                frontier_phi_58_59_ladder_5 = _2557;
            }
            else
            {
                frontier_phi_58_59_ladder = _2430;
                frontier_phi_58_59_ladder_1 = _2436;
                frontier_phi_58_59_ladder_2 = _2434;
                frontier_phi_58_59_ladder_3 = _2432;
                frontier_phi_58_59_ladder_4 = _2428;
                frontier_phi_58_59_ladder_5 = _2426;
            }
            _2556 = frontier_phi_58_59_ladder_5;
            _2558 = frontier_phi_58_59_ladder_4;
            _2560 = frontier_phi_58_59_ladder;
            _2562 = frontier_phi_58_59_ladder_3;
            _2564 = frontier_phi_58_59_ladder_2;
            _2566 = frontier_phi_58_59_ladder_1;
        }
        float _2571 = isnan(1.0) ? _534 : (isnan(_534) ? 1.0 : min(_534, 1.0));
        _2303 = (_2571 * _2562) + _1755;
        _2305 = (_2571 * _2564) + _1757;
        _2307 = (_2571 * _2566) + _1759;
        _2309 = ((_2556 * 0.039999999105930328369140625) * _2571) + _2088;
        _2311 = ((_2558 * 0.039999999105930328369140625) * _2571) + _2090;
        _2313 = ((_2560 * 0.039999999105930328369140625) * _2571) + _2092;
    }
    else
    {
        _2303 = _1755;
        _2305 = _1757;
        _2307 = _1759;
        _2309 = _2088;
        _2311 = _2090;
        _2313 = _2092;
    }
    uint _2319 = _510 + uint(cbMatDynParam._m0[0u].w);
    float _2327 = ((_353 * cbMtdParam._m0[11u].x) * (_337.x + _322.x)) * cbInstanceData._m0[_2319].x;
    float _2330 = ((_353 * cbMtdParam._m0[11u].y) * (_337.y + _322.y)) * cbInstanceData._m0[_2319].y;
    float _2333 = ((_353 * cbMtdParam._m0[11u].z) * (_337.z + _322.z)) * cbInstanceData._m0[_2319].z;
    float _4276 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _4287 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _4298 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _2350 = (((isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_2303 + ((isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0))) * _534))) + ((_2309 + ((isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))) * _1372)) * cbPerFrame._m0[3u].x)) + _2327;
    float _2352 = (_2330 + ((_2311 + ((isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0))) * _1372)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_2305 + ((isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0))) * _534)));
    float _2354 = (_2333 + ((_2313 + ((isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))) * _1372)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_2307 + ((isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0))) * _534)));
    float _2355 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2356 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2357 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2363 = cbMtdParam._m0[2u].x * _2327;
    float _2364 = cbMtdParam._m0[2u].y * _2330;
    float _2365 = cbMtdParam._m0[2u].z * _2333;
    float _4324 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2367 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
    uint _2368 = _508 + 6u;
    float _2376 = _468 / cbSceneParam._m0[86u].x;
    float _2377 = _469 / cbSceneParam._m0[86u].y;
    vec4 _2391 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2376, _2377, (log2((isnan(cbSceneParam._m0[77u].w) ? _389 : (isnan(_389) ? cbSceneParam._m0[77u].w : min(_389, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2393 = _2391.x;
    float _2394 = _2391.y;
    float _2395 = _2391.z;
    float _2396 = _2391.w;
    float _2489;
    float _2491;
    float _2493;
    float _2495;
    if (_389 > cbSceneParam._m0[78u].w)
    {
        float _2451 = isnan(_389) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _389 : min(cbSceneParam._m0[80u].w, _389));
        float _2452 = _2451 / _389;
        float _2463 = _2452 * _440;
        float _2464 = _441 * _2452;
        float _2465 = (-0.0) - _2464;
        float _2467 = _2452 * _442;
        float _2469 = (cbSceneParam._m0[77u].w * _2465) / _2451;
        float _2470 = _2469 + cbSceneParam._m0[79u].w;
        float _2471 = cbSceneParam._m0[79u].w - _2464;
        float _2477 = sqrt(((_2463 * _2463) + (_2464 * _2464)) + (_2467 * _2467));
        float _2480 = (1.0 - (cbSceneParam._m0[77u].w / _2451)) * _2477;
        float _2485 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2487 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2673;
        if (abs((_2465 - _2469) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2673 = ((((_2470 > 0.0) ? exp2(_2485 * _2470) : (2.0 - exp2(_2487 * _2470))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2480;
        }
        else
        {
            float _2617 = 1.0 / cbSceneParam._m0[80u].x;
            float _2618 = isnan(_2471) ? _2470 : (isnan(_2470) ? _2471 : max(_2470, _2471));
            float _2619 = isnan(_2471) ? _2470 : (isnan(_2470) ? _2471 : min(_2470, _2471));
            float _2628 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : min(_2618, 0.0));
            float _2629 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : min(_2619, 0.0));
            _2673 = ((abs(_2477 / _2465) * cbSceneParam._m0[80u].y) * ((((_2628 - _2629) * 2.0) - ((exp2(_2485 * (isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0)))) - exp2(_2485 * (isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0))))) * _2617)) - ((exp2(_2487 * _2628) - exp2(_2487 * _2629)) * _2617))) + (_2480 * cbSceneParam._m0[80u].z);
        }
        vec4 _2675 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2376, _2377, 1.0), 0.0);
        float _2684 = exp2((_2673 * (-1.44269502162933349609375)) * (1.0 - _2675.w));
        float _2685 = log2(_2684);
        float _2701 = log2(_2396);
        _2489 = (exp2(_2701 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2685 * cbSceneParam._m0[78u].x)) * _2675.x) / cbSceneParam._m0[78u].x)) + _2393;
        _2491 = (exp2(_2701 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2685 * cbSceneParam._m0[78u].y)) * _2675.y) / cbSceneParam._m0[78u].y)) + _2394;
        _2493 = (exp2(_2701 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2685 * cbSceneParam._m0[78u].z)) * _2675.z) / cbSceneParam._m0[78u].z)) + _2395;
        _2495 = _2684 * _2396;
    }
    else
    {
        _2489 = _2393;
        _2491 = _2394;
        _2493 = _2395;
        _2495 = _2396;
    }
    bool _2711;
    vec4 _2505;
    vec4 _2527;
    float _2529;
    float _2533;
    float _2534;
    float _2535;
    float _2538;
    float _2541;
    float _2544;
    float _2545;
    bool _2555;
    for (;;)
    {
        _2505 = cbMatDynParam._m0[0u];
        float _2507 = roundEven(_2505.y);
        bool _2508 = _2507 == 3.0;
        float _2509 = log2(_2495);
        float _2513 = exp2(_2509 * cbSceneParam._m0[78u].x);
        float _2514 = exp2(_2509 * cbSceneParam._m0[78u].y);
        float _2515 = exp2(_2509 * cbSceneParam._m0[78u].z);
        float _2516 = _2513 * _2355;
        float _2517 = _2514 * _2356;
        float _2518 = _2515 * _2357;
        float _2525 = _456 + (-0.5);
        _2527 = cbMtdParam._m0[1u];
        _2529 = _2527.y * _2525;
        float _2532 = (_2507 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2533 = _2532 * (_2508 ? _2516 : (_2516 + (cbSceneParam._m0[72u].w * _2489)));
        _2534 = _2532 * (_2508 ? _2517 : (_2517 + (cbSceneParam._m0[72u].w * _2491)));
        _2535 = _2532 * (_2508 ? _2518 : (_2518 + (cbSceneParam._m0[72u].w * _2493)));
        _2538 = ((_2363 * _2367) * _2513) * _2532;
        _2541 = ((_2364 * _2367) * _2514) * _2532;
        _2544 = ((_2365 * _2367) * _2515) * _2532;
        _2545 = _2525 * 0.999000012874603271484375;
        _2555 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2555)
        {
            if ((cbInstanceData._m0[_508 + 7u].x + _2545) < 0.5)
            {
                _2711 = true;
                break;
            }
        }
        uint _2652 = _510 + uint(_2505.w);
        if ((cbInstanceData._m0[_2652].w < 1.0) && ((cbInstanceData._m0[_2652].w + _2545) < 0.5))
        {
            _2711 = true;
            break;
        }
        if ((_2529 + 1.0) < _2527.x)
        {
            _2711 = true;
            break;
        }
        _2711 = false;
        break;
    }
    float _2916;
    if (_2711)
    {
        discard_state = true;
        _2916 = 0.0;
    }
    else
    {
        _2916 = cbInstanceData._m0[_2368].w;
    }
    SV_Target.x = _2533;
    SV_Target.y = _2534;
    SV_Target.z = _2535;
    SV_Target.w = _2916;
    SV_Target_1.x = _2538;
    SV_Target_1.y = _2541;
    SV_Target_1.z = _2544;
    SV_Target_1.w = cbInstanceData._m0[_2368].w;
    discard_exit();
}


