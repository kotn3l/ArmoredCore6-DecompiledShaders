#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1051;
float _3504;
float _3505;
float _3506;
float _3507;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _243 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _249 = _243.x * cbMtdParam._m0[9u].x;
    float _250 = _243.y * cbMtdParam._m0[9u].y;
    float _251 = _243.z * cbMtdParam._m0[9u].z;
    vec4 _271 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _292 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_271.x + 0.00999999977648258209228515625));
    float _294 = _292 * (cbMtdParam._m0[15u].x + 1.0);
    float _3516 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _295 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
    float _303 = ((((cbMtdParam._m0[12u].x - _249) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _295) + _249;
    float _304 = ((((cbMtdParam._m0[12u].y - _250) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _295) + _250;
    float _305 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _251)) * _295) + _251;
    vec4 _318 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _320 = _318.x;
    vec4 _332 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _336 = _332.z;
    float _340 = (_332.x * 2.0) + (-1.0);
    float _342 = (_332.y * 2.0) + (-1.0);
    float _343 = dot(vec2(_340, _342), vec2(_340, _342));
    float _3527 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _348 = sqrt(1.0 - (isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0))));
    float _351 = _292 * (cbMtdParam._m0[14u].w + 1.0);
    float _3538 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _355 = ((cbMtdParam._m0[14u].y - _336) * (isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0)))) + _336;
    vec4 _383 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _398 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _427 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _433 = (_427.x * 2.0) + (-1.0);
    float _434 = (_427.y * 2.0) + (-1.0);
    float _435 = dot(vec2(_433, _434), vec2(_433, _434));
    float _3549 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _451 = (_295 * (((cbMtdParam._m0[13u].z * _340) - _340) + _433)) + _340;
    float _452 = (_295 * (((cbMtdParam._m0[13u].z * _342) - _342) + _434)) + _342;
    float _453 = (_295 * (sqrt(1.0 - (isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0)))) - _348)) + _348;
    float _456 = fma(_453, _214 * NORMAL.x, fma(_452, _221 * TANGENT.x, (_207 * _199) * _451));
    float _459 = fma(_453, _214 * NORMAL.y, fma(_452, _221 * TANGENT.y, (_207 * _200) * _451));
    float _462 = fma(_453, _214 * NORMAL.z, fma(_452, _221 * TANGENT.z, (_207 * _201) * _451));
    float _466 = inversesqrt(dot(vec3(_456, _459, _462), vec3(_456, _459, _462)));
    float _467 = _466 * _456;
    float _468 = _466 * _459;
    float _469 = _466 * _462;
    float _3560 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _470 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
    float _3571 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3582 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _3593 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3604 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _474 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
    float _490 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _531 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _541 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _531);
    float _542 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _531);
    float _543 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _531);
    float _547 = inversesqrt(dot(vec3(_541, _542, _543), vec3(_541, _542, _543)));
    float _548 = _541 * _547;
    float _549 = _542 * _547;
    float _550 = _543 * _547;
    vec4 _555 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _557 = _555.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _731 = sqrt(((_541 * _541) + (_542 * _542)) + (_543 * _543));
        float _737 = (cbMatDynParam._m0[5u].x * _731) + cbMatDynParam._m0[5u].y;
        float _3615 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _738 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _742 = (cbMatDynParam._m0[5u].z * _731) + cbMatDynParam._m0[5u].w;
        float _3626 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) - _738)) + _738) < ((_557 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _568 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _569 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _589 = fma(_469, cbSceneParam._m0[5u].z, fma(_468, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _467));
    float _592 = fma(_469, cbSceneParam._m0[6u].z, fma(_468, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _467));
    float _595 = fma(_469, cbSceneParam._m0[7u].z, fma(_468, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _467));
    uint _608 = uint(roundEven(NORMAL.w)) * 13u;
    uint _609 = _608 + 9u;
    uint _610 = _609 + uint(cbMatDynParam._m0[0u].w);
    float _616 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0)))) * cbInstanceData._m0[_610].x;
    float _617 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0)))) * cbInstanceData._m0[_610].y;
    float _618 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0)))) * cbInstanceData._m0[_610].z;
    float _3637 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _619 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
    float _3648 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _620 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
    float _3659 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _621 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
    float _622 = 1.0 - _474;
    float _623 = _619 * _622;
    float _624 = _620 * _622;
    float _625 = _621 * _622;
    float _630 = (_619 + (-0.039999999105930328369140625)) * _474;
    float _631 = (_620 + (-0.039999999105930328369140625)) * _474;
    float _632 = (_621 + (-0.039999999105930328369140625)) * _474;
    float _633 = _630 + 0.039999999105930328369140625;
    float _635 = _631 + 0.039999999105930328369140625;
    float _636 = _632 + 0.039999999105930328369140625;
    vec4 _645 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _568, cbSceneParam._m0[86u].y * _569));
    float _648 = _645.x * TEXCOORD_3.w;
    float _649 = dot(vec3(_467, _468, _469), vec3(_548, _549, _550));
    float _652 = _649 * 2.0;
    float _656 = (_652 * _467) - _548;
    float _657 = (_652 * _468) - _549;
    float _658 = (_652 * _469) - _550;
    float _662 = abs(dot(vec3(_548, _549, _550), vec3(_467, _468, _469)));
    float _3670 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _664 = sqrt(_470);
    float _677 = exp2((_664 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_664 * 3.0));
    float _683 = (1.0 - _677) * ((_664 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _684 = _677 * _664;
    float _712 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _716 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _720 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1050;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _775 = fma(_720, cbModelParam._m0[26u].z, fma(_716, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _712));
        float _779 = fma(_720, cbModelParam._m0[27u].z, fma(_716, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _712));
        float _783 = fma(_720, cbModelParam._m0[28u].z, fma(_716, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _712));
        float _808 = _712 + _467;
        float _809 = _716 + _468;
        float _810 = _720 + _469;
        float _820 = fma(_810, cbModelParam._m0[26u].z, fma(_809, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _808)) - _775;
        float _821 = fma(_810, cbModelParam._m0[27u].z, fma(_809, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _808)) - _779;
        float _822 = fma(_810, cbModelParam._m0[28u].z, fma(_809, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _808)) - _783;
        float _826 = inversesqrt(dot(vec3(_820, _821, _822), vec3(_820, _821, _822)));
        float _839 = ((_826 * _820) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_775 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _840 = ((_826 * _821) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_779 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _841 = ((_826 * _822) / cbModelParam._m0[34u].z) + ((((((_783 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _844 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        vec4 _851 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        vec4 _865 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        float _878 = exp2((_844.w + (-0.5)) * 20.0) * 2.0;
        float _879 = _878 * (_844.x + (-0.5));
        float _880 = _878 * (_844.y + (-0.5));
        float _881 = _878 * (_844.z + (-0.5));
        float _888 = exp2((_851.w + (-0.5)) * 20.0) * 2.0;
        float _889 = _888 * (_851.x + (-0.5));
        float _890 = _888 * (_851.y + (-0.5));
        float _891 = _888 * (_851.z + (-0.5));
        float _898 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_858.x + (-0.5));
        float _900 = _898 * (_858.y + (-0.5));
        float _901 = _898 * (_858.z + (-0.5));
        float _908 = exp2((_865.w + (-0.5)) * 20.0) * 2.0;
        float _909 = _908 * (_865.x + (-0.5));
        float _910 = _908 * (_865.y + (-0.5));
        float _911 = _908 * (_865.z + (-0.5));
        float _912 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _913 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _914 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _915 = _879 * 0.5;
        float _916 = _889 * 0.5;
        float _917 = _899 * 0.5;
        float _918 = dot(vec3(_915, _916, _917), vec3(_915, _916, _917));
        float _923 = (_918 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_918);
        float _932 = (dot(vec3(_467, _468, _469), vec3(_923 * _915, _923 * _916, _923 * _917)) + 1.0) * 0.5;
        float _3696 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _942 = sqrt(((_916 * _916) + (_915 * _915)) + (_917 * _917)) / (_912 + 9.9999997473787516355514526367188e-06);
        float _3707 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _944 = _943 * 2.0;
        float _948 = (1.0 - _943) / (_943 + 1.0);
        float _3718 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _958 = ((((1.0 - _949) * (_944 + 2.0)) * exp2(log2(isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * (_944 + 1.0))) + _949) * _912;
        float _959 = _880 * 0.5;
        float _960 = _890 * 0.5;
        float _961 = _900 * 0.5;
        float _962 = dot(vec3(_959, _960, _961), vec3(_959, _960, _961));
        float _967 = (_962 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_962);
        float _975 = (dot(vec3(_467, _468, _469), vec3(_967 * _959, _967 * _960, _967 * _961)) + 1.0) * 0.5;
        float _3729 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _984 = sqrt(((_960 * _960) + (_959 * _959)) + (_961 * _961)) / (_913 + 9.9999997473787516355514526367188e-06);
        float _3740 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _986 = _985 * 2.0;
        float _990 = (1.0 - _985) / (_985 + 1.0);
        float _3751 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _991 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1000 = ((((1.0 - _991) * (_986 + 2.0)) * exp2(log2(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_986 + 1.0))) + _991) * _913;
        float _1001 = _881 * 0.5;
        float _1002 = _891 * 0.5;
        float _1003 = _901 * 0.5;
        float _1004 = dot(vec3(_1001, _1002, _1003), vec3(_1001, _1002, _1003));
        float _1009 = (_1004 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1004);
        float _1017 = (dot(vec3(_467, _468, _469), vec3(_1009 * _1001, _1009 * _1002, _1009 * _1003)) + 1.0) * 0.5;
        float _3762 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1026 = sqrt(((_1002 * _1002) + (_1001 * _1001)) + (_1003 * _1003)) / (_914 + 9.9999997473787516355514526367188e-06);
        float _3773 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1028 = _1027 * 2.0;
        float _1032 = (1.0 - _1027) / (_1027 + 1.0);
        float _3784 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1042 = ((((1.0 - _1033) * (_1028 + 2.0)) * exp2(log2(isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_1028 + 1.0))) + _1033) * _914;
        _1050 = _881;
        _1052 = _880;
        _1053 = _879;
        _1054 = _891;
        _1055 = _890;
        _1056 = _889;
        _1057 = _901;
        _1058 = _900;
        _1059 = _899;
        _1060 = _914;
        _1061 = _913;
        _1062 = _912;
        _1063 = cbModelParam._m0[36u].z * (isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0)));
        _1064 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0)));
        _1065 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0)));
    }
    else
    {
        _1050 = _1051;
        _1052 = _1051;
        _1053 = _1051;
        _1054 = _1051;
        _1055 = _1051;
        _1056 = _1051;
        _1057 = _1051;
        _1058 = _1051;
        _1059 = _1051;
        _1060 = _1051;
        _1061 = _1051;
        _1062 = _1051;
        _1063 = 0.0;
        _1064 = 0.0;
        _1065 = 0.0;
    }
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1094 = fma(_720, cbModelParam._m0[30u].z, fma(_716, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _712));
        float _1098 = fma(_720, cbModelParam._m0[31u].z, fma(_716, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _712));
        float _1102 = fma(_720, cbModelParam._m0[32u].z, fma(_716, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _712));
        float _1125 = _712 + _467;
        float _1126 = _716 + _468;
        float _1127 = _720 + _469;
        float _1137 = fma(_1127, cbModelParam._m0[30u].z, fma(_1126, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1125)) - _1094;
        float _1138 = fma(_1127, cbModelParam._m0[31u].z, fma(_1126, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1125)) - _1098;
        float _1139 = fma(_1127, cbModelParam._m0[32u].z, fma(_1126, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1125)) - _1102;
        float _1143 = inversesqrt(dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139)));
        float _1156 = ((_1143 * _1137) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1094 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1157 = ((_1143 * _1138) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1098 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1158 = ((_1143 * _1139) / cbModelParam._m0[35u].z) + ((((((_1102 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        float _1193 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1160.x + (-0.5));
        float _1195 = _1193 * (_1160.y + (-0.5));
        float _1196 = _1193 * (_1160.z + (-0.5));
        float _1203 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1167.x + (-0.5));
        float _1205 = _1203 * (_1167.y + (-0.5));
        float _1206 = _1203 * (_1167.z + (-0.5));
        float _1213 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1174.x + (-0.5));
        float _1215 = _1213 * (_1174.y + (-0.5));
        float _1216 = _1213 * (_1174.z + (-0.5));
        float _1223 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1181.x + (-0.5));
        float _1225 = _1223 * (_1181.y + (-0.5));
        float _1226 = _1223 * (_1181.z + (-0.5));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = _1194 * 0.5;
        float _1231 = _1204 * 0.5;
        float _1232 = _1214 * 0.5;
        float _1233 = dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232));
        float _1238 = (_1233 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1233);
        float _1246 = (dot(vec3(_467, _468, _469), vec3(_1238 * _1230, _1238 * _1231, _1238 * _1232)) + 1.0) * 0.5;
        float _3825 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1255 = sqrt(((_1231 * _1231) + (_1230 * _1230)) + (_1232 * _1232)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _3836 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1257 = _1256 * 2.0;
        float _1261 = (1.0 - _1256) / (_1256 + 1.0);
        float _3847 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1271 = ((((1.0 - _1262) * (_1257 + 2.0)) * exp2(log2(isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * (_1257 + 1.0))) + _1262) * _1227;
        float _1272 = _1195 * 0.5;
        float _1273 = _1205 * 0.5;
        float _1274 = _1215 * 0.5;
        float _1275 = dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274));
        float _1280 = (_1275 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1275);
        float _1288 = (dot(vec3(_467, _468, _469), vec3(_1280 * _1272, _1280 * _1273, _1280 * _1274)) + 1.0) * 0.5;
        float _3858 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1297 = sqrt(((_1273 * _1273) + (_1272 * _1272)) + (_1274 * _1274)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _3869 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1299 = _1298 * 2.0;
        float _1303 = (1.0 - _1298) / (_1298 + 1.0);
        float _3880 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1313 = ((((1.0 - _1304) * (_1299 + 2.0)) * exp2(log2(isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * (_1299 + 1.0))) + _1304) * _1228;
        float _1314 = _1196 * 0.5;
        float _1315 = _1206 * 0.5;
        float _1316 = _1216 * 0.5;
        float _1317 = dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316));
        float _1322 = (_1317 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1317);
        float _1330 = (dot(vec3(_467, _468, _469), vec3(_1322 * _1314, _1322 * _1315, _1322 * _1316)) + 1.0) * 0.5;
        float _3891 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1339 = sqrt(((_1315 * _1315) + (_1314 * _1314)) + (_1316 * _1316)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _3902 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1341 = _1340 * 2.0;
        float _1345 = (1.0 - _1340) / (_1340 + 1.0);
        float _3913 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1355 = ((((1.0 - _1346) * (_1341 + 2.0)) * exp2(log2(isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_1341 + 1.0))) + _1346) * _1229;
        _1363 = _1196;
        _1364 = _1195;
        _1365 = _1194;
        _1366 = _1206;
        _1367 = _1205;
        _1368 = _1204;
        _1369 = _1216;
        _1370 = _1215;
        _1371 = _1214;
        _1372 = _1229;
        _1373 = _1228;
        _1374 = _1227;
        _1375 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)));
        _1376 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)));
        _1377 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)));
    }
    else
    {
        _1363 = _1051;
        _1364 = _1051;
        _1365 = _1051;
        _1366 = _1051;
        _1367 = _1051;
        _1368 = _1051;
        _1369 = _1051;
        _1370 = _1051;
        _1371 = _1051;
        _1372 = _1051;
        _1373 = _1051;
        _1374 = _1051;
        _1375 = 0.0;
        _1376 = 0.0;
        _1377 = 0.0;
    }
    float _1387 = (cbModelParam._m0[1u].x * (_1375 - _1063)) + _1063;
    float _1388 = (cbModelParam._m0[1u].x * (_1376 - _1064)) + _1064;
    float _1389 = (cbModelParam._m0[1u].x * (_1377 - _1065)) + _1065;
    float _1410 = fma(_1389, cbSceneParam._m0[89u].z, fma(_1388, cbSceneParam._m0[89u].y, _1387 * cbSceneParam._m0[89u].x));
    float _1413 = fma(_1389, cbSceneParam._m0[90u].z, fma(_1388, cbSceneParam._m0[90u].y, _1387 * cbSceneParam._m0[90u].x));
    float _1416 = fma(_1389, cbSceneParam._m0[91u].z, fma(_1388, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1387));
    float _1431 = _656 * 0.5;
    float _1432 = _657 * 0.5;
    float _1433 = _658 * 0.5;
    float _1434 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1365, _1368, _1371, _1374));
    float _1437 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1364, _1367, _1370, _1373));
    float _1440 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1363, _1366, _1369, _1372));
    float _1474;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1447 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1050, _1054, _1057, _1060));
        float _1451 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1052, _1055, _1058, _1061));
        float _1455 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1053, _1056, _1059, _1062));
        float _1462 = dot(vec4(cbModelParam._m0[39u]), vec4(_1431, _1432, _1433, 1.0));
        _1474 = dot(vec3(isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)), isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)), isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1462) ? 0.0 : (isnan(0.0) ? _1462 : max(0.0, _1462))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1474 = 1.0;
    }
    float _1485;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1476 = dot(vec4(cbModelParam._m0[40u]), vec4(_1431, _1432, _1433, 1.0));
        _1485 = dot(vec3(isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)), isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)), isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1476) ? 0.0 : (isnan(0.0) ? _1476 : max(0.0, _1476))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1485 = 1.0;
    }
    float _1489 = (_1485 * cbModelParam._m0[1u].x) + (_1474 * (1.0 - cbModelParam._m0[1u].x));
    float _1499 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _470);
    float _1500 = isnan(_1499) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1499 : min(cbModelParam._m0[25u].z, _1499));
    float _1580;
    float _1582;
    float _1584;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1547 = fma(_720, cbModelParam._m0[13u].z, fma(_716, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _712)) + cbModelParam._m0[13u].w;
        float _1551 = fma(_720, cbModelParam._m0[14u].z, fma(_716, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _712)) + cbModelParam._m0[14u].w;
        float _1555 = fma(_720, cbModelParam._m0[15u].z, fma(_716, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _712)) + cbModelParam._m0[15u].w;
        float _1558 = fma(_658, cbModelParam._m0[13u].z, fma(_657, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _656));
        float _1561 = fma(_658, cbModelParam._m0[14u].z, fma(_657, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _656));
        float _1564 = fma(_658, cbModelParam._m0[15u].z, fma(_657, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _656));
        float _1592;
        if (_1558 > 0.0)
        {
            _1592 = abs((1.0 - _1547) / _1558);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1558 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1547 + 1.0) / _1558);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1592 = frontier_phi_17_15_ladder;
        }
        float _1818;
        if (_1561 > 0.0)
        {
            _1818 = abs((1.0 - _1551) / _1561);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1561 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1551 + 1.0) / _1561);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1818 = frontier_phi_26_22_ladder;
        }
        float _2075;
        if (_1564 > 0.0)
        {
            _2075 = abs((1.0 - _1555) / _1564);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1564 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1555 + 1.0) / _1564);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2075 = frontier_phi_38_33_ladder;
        }
        float _2077 = isnan(_1818) ? _1592 : (isnan(_1592) ? _1818 : min(_1592, _1818));
        float _2078 = isnan(_2075) ? _2077 : (isnan(_2077) ? _2075 : min(_2077, _2075));
        float _2082 = (_2078 * _1558) + _1547;
        float _2083 = (_2078 * _1561) + _1551;
        float _2084 = (_2078 * _1564) + _1555;
        float _2085 = _2078 * 9.9999997473787516355514526367188e-05;
        float _2087 = (-1.0) - _2085;
        float _2089 = _2085 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2084 > _2089) || ((_2084 < _2087) || ((_2083 > _2089) || ((_2083 < _2087) || ((_2082 < _2087) || (_2082 > _2089))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2212 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2084, cbModelParam._m0[9u].z, fma(_2083, cbModelParam._m0[9u].y, _2082 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2084, cbModelParam._m0[10u].z, fma(_2083, cbModelParam._m0[10u].y, _2082 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2084, cbModelParam._m0[11u].z, fma(_2083, cbModelParam._m0[11u].y, _2082 * cbModelParam._m0[11u].x))), _1500);
            frontier_phi_16_38_ladder = _2212.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2212.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2212.x * cbModelParam._m0[1u].y;
        }
        _1580 = frontier_phi_16_38_ladder_2;
        _1582 = frontier_phi_16_38_ladder_1;
        _1584 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1568 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_656, _657, _658), _1500);
        _1580 = _1568.x * cbModelParam._m0[1u].y;
        _1582 = _1568.y * cbModelParam._m0[1u].y;
        _1584 = _1568.z * cbModelParam._m0[1u].y;
    }
    float _1588 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _470);
    float _1589 = isnan(_1588) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1588 : min(cbModelParam._m0[25u].w, _1588));
    float _1680;
    float _1682;
    float _1684;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1644 = fma(_720, cbModelParam._m0[21u].z, fma(_716, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _712)) + cbModelParam._m0[21u].w;
        float _1648 = fma(_720, cbModelParam._m0[22u].z, fma(_716, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _712)) + cbModelParam._m0[22u].w;
        float _1652 = fma(_720, cbModelParam._m0[23u].z, fma(_716, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _712)) + cbModelParam._m0[23u].w;
        float _1655 = fma(_658, cbModelParam._m0[21u].z, fma(_657, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _656));
        float _1658 = fma(_658, cbModelParam._m0[22u].z, fma(_657, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _656));
        float _1661 = fma(_658, cbModelParam._m0[23u].z, fma(_657, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _656));
        float _1823;
        if (_1655 > 0.0)
        {
            _1823 = abs((1.0 - _1644) / _1655);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1644 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1823 = frontier_phi_28_24_ladder;
        }
        float _2102;
        if (_1658 > 0.0)
        {
            _2102 = abs((1.0 - _1648) / _1658);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1658 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1648 + 1.0) / _1658);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2102 = frontier_phi_40_35_ladder;
        }
        float _2315;
        if (_1661 > 0.0)
        {
            _2315 = abs((1.0 - _1652) / _1661);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1661 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1652 + 1.0) / _1661);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2315 = frontier_phi_49_46_ladder;
        }
        float _2317 = isnan(_2102) ? _1823 : (isnan(_1823) ? _2102 : min(_1823, _2102));
        float _2318 = isnan(_2315) ? _2317 : (isnan(_2317) ? _2315 : min(_2317, _2315));
        float _2322 = (_2318 * _1655) + _1644;
        float _2323 = (_2318 * _1658) + _1648;
        float _2324 = (_2318 * _1661) + _1652;
        float _2325 = _2318 * 9.9999997473787516355514526367188e-05;
        float _2326 = (-1.0) - _2325;
        float _2328 = _2325 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2324 > _2328) || ((_2324 < _2326) || ((_2323 > _2328) || ((_2323 < _2326) || ((_2322 < _2326) || (_2322 > _2328))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2558 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2324, cbModelParam._m0[17u].z, fma(_2323, cbModelParam._m0[17u].y, _2322 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2324, cbModelParam._m0[18u].z, fma(_2323, cbModelParam._m0[18u].y, _2322 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2324, cbModelParam._m0[19u].z, fma(_2323, cbModelParam._m0[19u].y, _2322 * cbModelParam._m0[19u].x))), _1589);
            frontier_phi_25_49_ladder = _2558.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2558.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2558.x * cbModelParam._m0[1u].z;
        }
        _1680 = frontier_phi_25_49_ladder_2;
        _1682 = frontier_phi_25_49_ladder_1;
        _1684 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1664 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_656, _657, _658), _1589);
        _1680 = _1664.x * cbModelParam._m0[1u].z;
        _1682 = _1664.y * cbModelParam._m0[1u].z;
        _1684 = _1664.z * cbModelParam._m0[1u].z;
    }
    float _1697 = (((_683 * _633) + _684) * _648) * ((cbModelParam._m0[1u].w * (_1680 - _1580)) + _1580);
    float _1699 = (((_683 * _635) + _684) * _648) * ((cbModelParam._m0[1u].w * (_1682 - _1582)) + _1582);
    float _1701 = (((_683 * _636) + _684) * _648) * ((cbModelParam._m0[1u].w * (_1684 - _1584)) + _1584);
    float _1704 = fma(_1701, cbSceneParam._m0[89u].z, fma(_1699, cbSceneParam._m0[89u].y, _1697 * cbSceneParam._m0[89u].x));
    float _1707 = fma(_1701, cbSceneParam._m0[90u].z, fma(_1699, cbSceneParam._m0[90u].y, _1697 * cbSceneParam._m0[90u].x));
    float _1710 = fma(_1701, cbSceneParam._m0[91u].z, fma(_1699, cbSceneParam._m0[91u].y, _1697 * cbSceneParam._m0[91u].x));
    vec4 _1718 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_568, _569));
    float _1720 = _1718.w;
    float _1732 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1720);
    float _1733 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1720);
    float _1734 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1720);
    uvec4 _1738 = floatBitsToUint(cbInstanceData._m0[_608 + 5u]);
    uint _1740 = _1738.x * 14u;
    uint _1741 = _1740 + 13u;
    float _1748 = _648 + (-1.0);
    float _1753 = (cbLight._m0[_1741].x * _1748) + 1.0;
    float _1754 = (cbLight._m0[_1741].y * _1748) + 1.0;
    float _1755 = (cbLight._m0[_1741].z * _1748) + 1.0;
    float _1756 = (cbLight._m0[_1741].w * _1748) + 1.0;
    uint _1757 = _1740 + 5u;
    float _1763 = isnan(1.0) ? _1754 : (isnan(_1754) ? 1.0 : min(_1754, 1.0));
    uint _1767 = _1740 + 4u;
    float _1777 = isnan(1.0) ? _1753 : (isnan(_1753) ? 1.0 : min(_1753, 1.0));
    uint _1781 = _1740 | 1u;
    float _1792 = dot(vec3(cbLight._m0[_1740].xyz), vec3(_467, _468, _469));
    float _1795 = dot(vec3(cbLight._m0[_1781].xyz), vec3(_467, _468, _469));
    float _4049 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _4060 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
    float _1800 = (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * 0.3183098733425140380859375;
    float _1802 = (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * 0.3183098733425140380859375;
    float _1809 = ((cbLight._m0[_1757].x * _1763) * _1802) + (((cbLight._m0[_1767].x * _1732) * _1777) * _1800);
    float _1810 = ((_1763 * cbLight._m0[_1757].y) * _1802) + (((cbLight._m0[_1767].y * _1733) * _1777) * _1800);
    float _1811 = ((_1763 * cbLight._m0[_1757].z) * _1802) + (((cbLight._m0[_1767].z * _1734) * _1777) * _1800);
    uvec4 _1815 = floatBitsToUint(cbLight._m0[_1740 + 12u]);
    bool _1817 = _1815.x == 0u;
    float _1828;
    float _1830;
    float _1832;
    if (_1817)
    {
        _1828 = _1809;
        _1830 = _1810;
        _1832 = _1811;
    }
    else
    {
        uint _1836 = _1740 + 6u;
        float _1852 = (dot(vec3(cbLight._m0[_1740 + 2u].xyz), vec3(_467, _468, _469)) * 0.5) + 0.5;
        float _1853 = _1852 * _1852;
        float _4071 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
        float _1854 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1855 = isnan(1.0) ? _1755 : (isnan(_1755) ? 1.0 : min(_1755, 1.0));
        _1828 = (((cbLight._m0[_1836].x * 0.3183098733425140380859375) * _1854) * _1855) + _1809;
        _1830 = (((cbLight._m0[_1836].y * 0.3183098733425140380859375) * _1854) * _1855) + _1810;
        _1832 = (((cbLight._m0[_1836].z * 0.3183098733425140380859375) * _1854) * _1855) + _1811;
    }
    bool _1835 = _1815.y == 0u;
    float _1873;
    float _1875;
    float _1877;
    if (_1835)
    {
        _1873 = _1828;
        _1875 = _1830;
        _1877 = _1832;
    }
    else
    {
        uint _2046 = _1740 + 7u;
        float _2062 = (dot(vec3(cbLight._m0[_1740 + 3u].xyz), vec3(_467, _468, _469)) * 0.5) + 0.5;
        float _2063 = _2062 * _2062;
        float _4087 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
        float _2064 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _2065 = isnan(1.0) ? _1756 : (isnan(_1756) ? 1.0 : min(_1756, 1.0));
        _1873 = (((cbLight._m0[_2046].x * 0.3183098733425140380859375) * _2064) * _2065) + _1828;
        _1875 = (((cbLight._m0[_2046].y * 0.3183098733425140380859375) * _2064) * _2065) + _1830;
        _1877 = (((cbLight._m0[_2046].z * 0.3183098733425140380859375) * _2064) * _2065) + _1832;
    }
    uint _1880 = _1740 + 8u;
    float _1893 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1740].w)) * _470) * 0.949999988079071044921875);
    float _1894 = _1893 * _1893;
    float _1895 = cbLight._m0[_1740].x + _548;
    float _1896 = cbLight._m0[_1740].y + _549;
    float _1897 = cbLight._m0[_1740].z + _550;
    float _1901 = inversesqrt(dot(vec3(_1895, _1896, _1897), vec3(_1895, _1896, _1897)));
    float _1902 = _1901 * _1895;
    float _1903 = _1901 * _1896;
    float _1904 = _1901 * _1897;
    float _1905 = dot(vec3(_467, _468, _469), vec3(cbLight._m0[_1740].xyz));
    float _4103 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1908 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _4114 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _1909 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _1910 = dot(vec3(_467, _468, _469), vec3(_1902, _1903, _1904));
    float _4125 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _1913 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _1914 = dot(vec3(cbLight._m0[_1740].xyz), vec3(_1902, _1903, _1904));
    float _4136 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _1918 = _1894 * _1894;
    float _1922 = ((_1913 * _1913) * (_1918 + (-1.0))) + 1.0;
    float _1930 = exp2(log2(1.0 - (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0)))) * 5.0);
    float _1931 = 0.959999978542327880859375 - _630;
    float _1933 = 0.959999978542327880859375 - _631;
    float _1934 = 0.959999978542327880859375 - _632;
    float _1941 = 1.0 - _1894;
    float _1952 = (0.5 / (((_1909 * ((_1908 * _1941) + _1894)) + 9.9999999392252902907785028219223e-09) + (((_1909 * _1941) + _1894) * _1908))) * _1908;
    float _4147 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _1954 = (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_1918 / ((_1922 * _1922) * 3.141590118408203125));
    uint _1968 = _1740 + 9u;
    float _1979 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1781].w)) * _470) * 0.949999988079071044921875);
    float _1980 = _1979 * _1979;
    float _1981 = cbLight._m0[_1781].x + _548;
    float _1982 = cbLight._m0[_1781].y + _549;
    float _1983 = cbLight._m0[_1781].z + _550;
    float _1987 = inversesqrt(dot(vec3(_1981, _1982, _1983), vec3(_1981, _1982, _1983)));
    float _1988 = _1987 * _1981;
    float _1989 = _1987 * _1982;
    float _1990 = _1987 * _1983;
    float _1991 = dot(vec3(_467, _468, _469), vec3(cbLight._m0[_1781].xyz));
    float _4158 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _1994 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    float _1995 = dot(vec3(_467, _468, _469), vec3(_1988, _1989, _1990));
    float _4169 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _1998 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _1999 = dot(vec3(cbLight._m0[_1781].xyz), vec3(_1988, _1989, _1990));
    float _4180 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _2003 = _1980 * _1980;
    float _2007 = ((_1998 * _1998) * (_2003 + (-1.0))) + 1.0;
    float _2014 = exp2(log2(1.0 - (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0)))) * 5.0);
    float _2021 = 1.0 - _1980;
    float _2031 = (0.5 / (((_1909 * ((_1994 * _2021) + _1980)) + 9.9999999392252902907785028219223e-09) + (((_1909 * _2021) + _1980) * _1994))) * _1994;
    float _4191 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2033 = (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_2003 / ((_2007 * _2007) * 3.141590118408203125));
    float _2043 = (((((_2014 * _1931) + _633) * cbLight._m0[_1968].x) * _2033) * _1763) + ((((cbLight._m0[_1880].x * _1732) * ((_1930 * _1931) + _633)) * _1954) * _1777);
    float _2044 = (((((_2014 * _1933) + _635) * cbLight._m0[_1968].y) * _2033) * _1763) + ((((cbLight._m0[_1880].y * _1733) * ((_1930 * _1933) + _635)) * _1954) * _1777);
    float _2045 = (((((_2014 * _1934) + _636) * cbLight._m0[_1968].z) * _2033) * _1763) + ((((cbLight._m0[_1880].z * _1734) * ((_1930 * _1934) + _636)) * _1954) * _1777);
    float _2107;
    float _2109;
    float _2111;
    if (_1817)
    {
        _2107 = _2043;
        _2109 = _2044;
        _2111 = _2045;
    }
    else
    {
        uint _2113 = _1740 + 2u;
        uint _2117 = _1740 + 10u;
        float _2131 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2113].w)) * _470) * 0.949999988079071044921875);
        float _2132 = _2131 * _2131;
        float _2133 = cbLight._m0[_2113].x + _548;
        float _2134 = cbLight._m0[_2113].y + _549;
        float _2135 = cbLight._m0[_2113].z + _550;
        float _2139 = inversesqrt(dot(vec3(_2133, _2134, _2135), vec3(_2133, _2134, _2135)));
        float _2140 = _2139 * _2133;
        float _2141 = _2139 * _2134;
        float _2142 = _2139 * _2135;
        float _2143 = dot(vec3(_467, _468, _469), vec3(cbLight._m0[_2113].xyz));
        float _4202 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
        float _2146 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _2147 = dot(vec3(_467, _468, _469), vec3(_2140, _2141, _2142));
        float _4213 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
        float _2150 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _2151 = dot(vec3(cbLight._m0[_2113].xyz), vec3(_2140, _2141, _2142));
        float _4224 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2155 = _2132 * _2132;
        float _2159 = ((_2150 * _2150) * (_2155 + (-1.0))) + 1.0;
        float _2166 = exp2(log2(1.0 - (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0)))) * 5.0);
        float _2173 = 1.0 - _2132;
        float _2183 = (0.5 / (((_1909 * ((_2146 * _2173) + _2132)) + 9.9999999392252902907785028219223e-09) + (((_1909 * _2173) + _2132) * _2146))) * _2146;
        float _4235 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
        float _2185 = (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_2155 / ((_2159 * _2159) * 3.141590118408203125));
        float _2186 = isnan(1.0) ? _1755 : (isnan(_1755) ? 1.0 : min(_1755, 1.0));
        _2107 = (((((_2166 * _1931) + _633) * cbLight._m0[_2117].x) * _2185) * _2186) + _2043;
        _2109 = (((((_2166 * _1933) + _635) * cbLight._m0[_2117].y) * _2185) * _2186) + _2044;
        _2111 = (((((_2166 * _1934) + _636) * cbLight._m0[_2117].z) * _2185) * _2186) + _2045;
    }
    float _2221;
    float _2223;
    float _2225;
    if (_1835)
    {
        _2221 = _2107;
        _2223 = _2109;
        _2225 = _2111;
    }
    else
    {
        uint _2232 = _1740 + 3u;
        uint _2236 = _1740 + 11u;
        float _2250 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2232].w)) * _470) * 0.949999988079071044921875);
        float _2251 = _2250 * _2250;
        float _2252 = cbLight._m0[_2232].x + _548;
        float _2253 = cbLight._m0[_2232].y + _549;
        float _2254 = cbLight._m0[_2232].z + _550;
        float _2258 = inversesqrt(dot(vec3(_2252, _2253, _2254), vec3(_2252, _2253, _2254)));
        float _2259 = _2258 * _2252;
        float _2260 = _2258 * _2253;
        float _2261 = _2258 * _2254;
        float _2262 = dot(vec3(_467, _468, _469), vec3(cbLight._m0[_2232].xyz));
        float _4251 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        float _2265 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _2266 = dot(vec3(_467, _468, _469), vec3(_2259, _2260, _2261));
        float _4262 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2269 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _2270 = dot(vec3(cbLight._m0[_2232].xyz), vec3(_2259, _2260, _2261));
        float _4273 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2274 = _2251 * _2251;
        float _2278 = ((_2269 * _2269) * (_2274 + (-1.0))) + 1.0;
        float _2285 = exp2(log2(1.0 - (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0)))) * 5.0);
        float _2292 = 1.0 - _2251;
        float _2302 = (0.5 / (((_1909 * ((_2265 * _2292) + _2251)) + 9.9999999392252902907785028219223e-09) + (((_1909 * _2292) + _2251) * _2265))) * _2265;
        float _4284 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2304 = (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_2274 / ((_2278 * _2278) * 3.141590118408203125));
        float _2305 = isnan(1.0) ? _1756 : (isnan(_1756) ? 1.0 : min(_1756, 1.0));
        _2221 = (((((_2285 * _1931) + _633) * cbLight._m0[_2236].x) * _2304) * _2305) + _2107;
        _2223 = (((((_2285 * _1933) + _635) * cbLight._m0[_2236].y) * _2304) * _2305) + _2109;
        _2225 = (((((_2285 * _1934) + _636) * cbLight._m0[_2236].z) * _2304) * _2305) + _2111;
    }
    float _2440;
    float _2442;
    float _2444;
    float _2446;
    float _2448;
    float _2450;
    if (_1738.y == 0u)
    {
        float _2380 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2381 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2380;
        float _2382 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2380;
        float _2383 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2380;
        uvec4 _2395 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2396 = _2395.x;
        uint _2407 = uint((float(_2395.y) * floor(float(uint(cbSceneParam._m0[85u].y * _569) / _2396))) + floor(float(uint(cbSceneParam._m0[85u].x * _568) / _2396)));
        float _2417 = (log2(_2383 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2418 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        uint _2421 = uint(isnan(14.0) ? _2418 : (isnan(_2418) ? 14.0 : min(_2418, 14.0)));
        uvec4 _2426 = texelFetch(g_lightClusterGridBuffer, int(((_2421 << 2u) + (_2407 << 6u)) >> 2u));
        uint _2427 = _2426.x;
        uint _2428 = _2395.z;
        float _2563;
        float _2565;
        float _2567;
        float _2569;
        float _2571;
        float _2573;
        if (((((1u << ((_2428 >> 4u) & 15u)) + 4294967295u) & _2427) == 0u) || ((_2428 & 240u) == 0u))
        {
            _2563 = 0.0;
            _2565 = 0.0;
            _2567 = 0.0;
            _2569 = 0.0;
            _2571 = 0.0;
            _2573 = 0.0;
        }
        else
        {
            float _2564;
            float _2566;
            float _2568;
            float _2570;
            float _2572;
            float _2574;
            float _2725 = 0.0;
            float _2726 = 0.0;
            float _2727 = 0.0;
            float _2728 = 0.0;
            float _2729 = 0.0;
            float _2730 = 0.0;
            uint _2731 = 0u;
            uint _2740;
            bool _2741;
            for (;;)
            {
                _2740 = texelFetch(g_lightClassification, int((((_2421 << 5u) + (_2407 << 9u)) + (_2731 << 2u)) >> 2u)).x;
                _2741 = _2740 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2741)
                {
                    frontier_phi_66_pred = _2725;
                    frontier_phi_66_pred_1 = _2730;
                    frontier_phi_66_pred_2 = _2729;
                    frontier_phi_66_pred_3 = _2728;
                    frontier_phi_66_pred_4 = _2727;
                    frontier_phi_66_pred_5 = _2726;
                }
                else
                {
                    float _2870;
                    float _2871;
                    float _2872;
                    float _2873;
                    float _2874;
                    float _2875;
                    uint _2876;
                    _2870 = _2725;
                    _2871 = _2726;
                    _2872 = _2727;
                    _2873 = _2728;
                    _2874 = _2729;
                    _2875 = _2730;
                    _2876 = _2740;
                    float _2797;
                    float _2798;
                    float _2799;
                    float _2800;
                    float _2801;
                    float _2802;
                    for (;;)
                    {
                        uint _2880 = uint(findLSB(_2876)) + (_2731 << 5u);
                        uint _2877 = (_2876 + 4294967295u) & _2876;
                        uint _2882 = _2880 * 48u;
                        vec4 _2896 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2882)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 3u)).x));
                        uint _2902 = (_2880 * 48u) + 4u;
                        vec4 _2915 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2902)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 3u)).x));
                        uint _2921 = (_2880 * 48u) + 8u;
                        vec3 _2932 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2921)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 2u)).x));
                        float _2936 = _2896.x - _2381;
                        float _2937 = _2896.y - _2382;
                        float _2938 = _2896.z - _2383;
                        float _2939 = dot(vec3(_2936, _2937, _2938), vec3(_2936, _2937, _2938));
                        float _2942 = inversesqrt(_2939);
                        float _2943 = _2942 * _2936;
                        float _2944 = _2942 * _2937;
                        float _2945 = _2942 * _2938;
                        float _2946 = dot(vec3(_589, _592, _595), vec3(_2943, _2944, _2945));
                        float _2951 = 1.0 - (_2939 * _2896.w);
                        float _4310 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
                        float _2952 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
                        float _2953 = sqrt(_2939) * _2915.w;
                        float _2956 = 1.39999997615814208984375 / (_2953 + 1.39999997615814208984375);
                        float _2957 = _2956 * _2956;
                        float _2960 = ((1.0 - _2957) * _2946) + _2957;
                        float _2963 = _2953 * _2953;
                        float _2967 = ((isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0))) * _2952) / ((_2963 * 0.699999988079071044921875) + 1.0);
                        float _2971 = (-0.0) - _2381;
                        float _2972 = (-0.0) - _2382;
                        float _2973 = (-0.0) - _2383;
                        float _2977 = inversesqrt(dot(vec3(_2971, _2972, _2973), vec3(_2971, _2972, _2973)));
                        float _2978 = _2977 * _2971;
                        float _2979 = _2977 * _2972;
                        float _2980 = _2977 * _2973;
                        float _2988 = exp2(log2(1.0 / ((_2963 * 3.5) + 5.0)) * 0.25);
                        float _2989 = 1.0 - _664;
                        float _2996 = sqrt(1.0 - ((1.0 - (_2989 * _2989)) * (1.0 - (_2988 * _2988))));
                        float _2997 = _2996 * _2996;
                        float _2998 = _2997 * _2997;
                        float _2999 = _2978 + _2943;
                        float _3000 = _2979 + _2944;
                        float _3001 = _2980 + _2945;
                        float _3005 = inversesqrt(dot(vec3(_2999, _3000, _3001), vec3(_2999, _3000, _3001)));
                        float _3009 = dot(vec3(_589, _592, _595), vec3(_2978, _2979, _2980));
                        float _4326 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                        float _3012 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
                        float _3013 = dot(vec3(_589, _592, _595), vec3(_3005 * _2999, _3005 * _3000, _3005 * _3001));
                        float _4337 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                        float _3016 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                        float _3020 = ((_3016 * _3016) * (_2998 + (-1.0))) + 1.0;
                        float _3021 = _2956 * _2997;
                        float _3022 = _3021 * _3021;
                        float _3025 = ((1.0 - _3022) * _2946) + _3022;
                        float _4348 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                        float _3026 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
                        float _3027 = 1.0 - _2997;
                        float _3037 = (0.5 / (((_3026 * ((_3012 * _3027) + _2997)) + 9.9999999392252902907785028219223e-09) + (((_3026 * _3027) + _2997) * _3012))) * _3026;
                        float _4359 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                        float _3048 = (((_2998 * 3.1415927410125732421875) * (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0)))) / ((_3020 * _3020) * ((_2963 * 2.1991131305694580078125) + 3.141590118408203125))) * _2952;
                        _2800 = (_2967 * _2915.x) + _2873;
                        _2801 = (_2967 * _2915.y) + _2874;
                        _2802 = (_2967 * _2915.z) + _2875;
                        _2797 = (_3048 * _2932.x) + _2870;
                        _2798 = (_3048 * _2932.y) + _2871;
                        _2799 = (_3048 * _2932.z) + _2872;
                        if (_2877 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2870 = _2797;
                            _2871 = _2798;
                            _2872 = _2799;
                            _2873 = _2800;
                            _2874 = _2801;
                            _2875 = _2802;
                            _2876 = _2877;
                        }
                    }
                    frontier_phi_66_pred = _2797;
                    frontier_phi_66_pred_1 = _2802;
                    frontier_phi_66_pred_2 = _2801;
                    frontier_phi_66_pred_3 = _2800;
                    frontier_phi_66_pred_4 = _2799;
                    frontier_phi_66_pred_5 = _2798;
                }
                _2564 = frontier_phi_66_pred;
                _2574 = frontier_phi_66_pred_1;
                _2572 = frontier_phi_66_pred_2;
                _2570 = frontier_phi_66_pred_3;
                _2568 = frontier_phi_66_pred_4;
                _2566 = frontier_phi_66_pred_5;
                uint _2732 = _2731 + 1u;
                if (_2732 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2725 = _2564;
                    _2726 = _2566;
                    _2727 = _2568;
                    _2728 = _2570;
                    _2729 = _2572;
                    _2730 = _2574;
                    _2731 = _2732;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2563 = _2564;
            _2565 = _2566;
            _2567 = _2568;
            _2569 = _2570;
            _2571 = _2572;
            _2573 = _2574;
        }
        uvec4 _2577 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2578 = _2577.z;
        uint _2580 = (_2578 >> 8u) & 15u;
        float _2693;
        float _2695;
        float _2697;
        float _2699;
        float _2701;
        float _2703;
        if (((4294967295u << _2580) & _2427) == 0u)
        {
            _2693 = _2563;
            _2695 = _2565;
            _2697 = _2567;
            _2699 = _2569;
            _2701 = _2571;
            _2703 = _2573;
        }
        else
        {
            float _2718 = inversesqrt(dot(vec3(_2381, _2382, _2383), vec3(_2381, _2382, _2383)));
            float _2719 = _2718 * _2381;
            float _2720 = _2718 * _2382;
            float _2721 = _2718 * _2383;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2580 < ((_2578 >> 12u) & 15u))
            {
                float _2694;
                float _2696;
                float _2698;
                float _2700;
                float _2702;
                float _2704;
                float _2853 = _2563;
                float _2854 = _2565;
                float _2855 = _2567;
                float _2856 = _2569;
                float _2857 = _2571;
                float _2858 = _2573;
                uint _2859 = _2580;
                uint _2868;
                bool _2869;
                for (;;)
                {
                    _2868 = texelFetch(g_lightClassification, int((((_2421 << 5u) + (_2407 << 9u)) + (_2859 << 2u)) >> 2u)).x;
                    _2869 = _2868 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2869)
                    {
                        frontier_phi_77_pred = _2858;
                        frontier_phi_77_pred_1 = _2857;
                        frontier_phi_77_pred_2 = _2856;
                        frontier_phi_77_pred_3 = _2855;
                        frontier_phi_77_pred_4 = _2854;
                        frontier_phi_77_pred_5 = _2853;
                    }
                    else
                    {
                        float _3062;
                        float _3063;
                        float _3064;
                        float _3065;
                        float _3066;
                        float _3067;
                        float _3357;
                        float _3358;
                        float _3359;
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3075 = _2853;
                        float _3076 = _2854;
                        float _3077 = _2855;
                        float _3078 = _2856;
                        float _3079 = _2857;
                        float _3080 = _2858;
                        uint _3081 = _2868;
                        uint _3082;
                        vec4 _3107;
                        float _3108;
                        vec4 _3123;
                        vec3 _3135;
                        vec4 _3150;
                        vec4 _3166;
                        float _3213;
                        bool _3214;
                        for (;;)
                        {
                            uint _3092 = ((_2859 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3081));
                            _3082 = (_3081 + 4294967295u) & _3081;
                            uint _3094 = _3092 * 40u;
                            _3107 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3094)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 3u)).x));
                            _3108 = _3107.w;
                            uint _3110 = (_3092 * 40u) + 4u;
                            _3123 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3110)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 3u)).x));
                            uint _3125 = (_3092 * 40u) + 8u;
                            _3135 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3125)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 2u)).x));
                            uint _3137 = (_3092 * 40u) + 16u;
                            _3150 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3137)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 3u)).x));
                            uint _3153 = (_3092 * 40u) + 20u;
                            _3166 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 3u)).x));
                            uint _3169 = (_3092 * 40u) + 24u;
                            vec4 _3182 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 3u)).x));
                            uint _3188 = (_3092 * 40u) + 28u;
                            vec4 _3201 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3188)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 3u)).x));
                            _3213 = fma(_2383, _3201.z, fma(_2382, _3201.y, _3201.x * _2381)) + _3201.w;
                            _3214 = !((fma(_2383, _3182.z, fma(_2382, _3182.y, _3182.x * _2381)) + _3182.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3214)
                            {
                                float _3241 = _3107.x - _2381;
                                float _3242 = _3107.y - _2382;
                                float _3243 = _3107.z - _2383;
                                float _3244 = dot(vec3(_3241, _3242, _3243), vec3(_3241, _3242, _3243));
                                float _3247 = inversesqrt(_3244);
                                float _3248 = _3247 * _3241;
                                float _3249 = _3247 * _3242;
                                float _3250 = _3247 * _3243;
                                float _3254 = 1.0 - (_3244 / (_3108 * _3108));
                                float _4370 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                                float _3255 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
                                float _3259 = sqrt(_3244) * _3123.w;
                                float _3261 = 1.39999997615814208984375 / (_3259 + 1.39999997615814208984375);
                                float _3262 = _3261 * _3261;
                                float _3265 = ((1.0 - _3262) * dot(vec3(_3248, _3249, _3250), vec3(_589, _592, _595))) + _3262;
                                float _3268 = _3259 * _3259;
                                float _3272 = (fma(_2383, _3150.z, fma(_2382, _3150.y, _3150.x * _2381)) + _3150.w) / _3213;
                                float _3273 = (fma(_2383, _3166.z, fma(_2382, _3166.y, _3166.x * _2381)) + _3166.w) / _3213;
                                float _3277 = 1.0 - dot(vec2(_3272, _3273), vec2(_3272, _3273));
                                float _4386 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                                float _3278 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                                float _3279 = _3278 * (((isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0))) * _3255) / ((_3268 * 0.699999988079071044921875) + 1.0));
                                float _3291 = exp2(log2(1.0 / ((_3268 * 3.5) + 5.0)) * 0.25);
                                float _3292 = 1.0 - _664;
                                float _3299 = sqrt(1.0 - ((1.0 - (_3292 * _3292)) * (1.0 - (_3291 * _3291))));
                                float _3300 = _3299 * _3299;
                                float _3301 = _3300 * _3300;
                                float _3302 = _3248 - _2719;
                                float _3303 = _3249 - _2720;
                                float _3304 = _3250 - _2721;
                                float _3308 = inversesqrt(dot(vec3(_3302, _3303, _3304), vec3(_3302, _3303, _3304)));
                                float _3312 = dot(vec3(_589, _592, _595), vec3((-0.0) - _2719, (-0.0) - _2720, (-0.0) - _2721));
                                float _4397 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                                float _3315 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                                float _3316 = dot(vec3(_589, _592, _595), vec3(_3308 * _3302, _3308 * _3303, _3308 * _3304));
                                float _4408 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                                float _3319 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
                                float _3323 = ((_3319 * _3319) * (_3301 + (-1.0))) + 1.0;
                                float _3324 = _3261 * _3300;
                                float _3325 = _3324 * _3324;
                                float _3331 = ((1.0 - _3325) * dot(vec3(_589, _592, _595), vec3(_3248, _3249, _3250))) + _3325;
                                float _4419 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                                float _3332 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
                                float _3333 = 1.0 - _3300;
                                float _3343 = (0.5 / (((_3332 * ((_3315 * _3333) + _3300)) + 9.9999999392252902907785028219223e-09) + (((_3332 * _3333) + _3300) * _3315))) * _3332;
                                float _4430 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                                float _3353 = (_3278 * _3255) * (((_3301 * 3.1415927410125732421875) * (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0)))) / ((_3323 * _3323) * ((_3268 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3279 * _3123.y;
                                frontier_phi_83_pred_1 = _3279 * _3123.x;
                                frontier_phi_83_pred_2 = _3353 * _3135.z;
                                frontier_phi_83_pred_3 = _3353 * _3135.y;
                                frontier_phi_83_pred_4 = _3353 * _3135.x;
                                frontier_phi_83_pred_5 = _3279 * _3123.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3361 = frontier_phi_83_pred;
                            _3360 = frontier_phi_83_pred_1;
                            _3359 = frontier_phi_83_pred_2;
                            _3358 = frontier_phi_83_pred_3;
                            _3357 = frontier_phi_83_pred_4;
                            _3362 = frontier_phi_83_pred_5;
                            _3065 = _3360 + _3078;
                            _3066 = _3361 + _3079;
                            _3067 = _3362 + _3080;
                            _3062 = _3357 + _3075;
                            _3063 = _3358 + _3076;
                            _3064 = _3359 + _3077;
                            if (_3082 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3075 = _3062;
                                _3076 = _3063;
                                _3077 = _3064;
                                _3078 = _3065;
                                _3079 = _3066;
                                _3080 = _3067;
                                _3081 = _3082;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3067;
                        frontier_phi_77_pred_1 = _3066;
                        frontier_phi_77_pred_2 = _3065;
                        frontier_phi_77_pred_3 = _3064;
                        frontier_phi_77_pred_4 = _3063;
                        frontier_phi_77_pred_5 = _3062;
                    }
                    _2704 = frontier_phi_77_pred;
                    _2702 = frontier_phi_77_pred_1;
                    _2700 = frontier_phi_77_pred_2;
                    _2698 = frontier_phi_77_pred_3;
                    _2696 = frontier_phi_77_pred_4;
                    _2694 = frontier_phi_77_pred_5;
                    uint _2860 = _2859 + 1u;
                    if (_2860 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2853 = _2694;
                        _2854 = _2696;
                        _2855 = _2698;
                        _2856 = _2700;
                        _2857 = _2702;
                        _2858 = _2704;
                        _2859 = _2860;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2698;
                frontier_phi_58_59_ladder_1 = _2704;
                frontier_phi_58_59_ladder_2 = _2702;
                frontier_phi_58_59_ladder_3 = _2700;
                frontier_phi_58_59_ladder_4 = _2696;
                frontier_phi_58_59_ladder_5 = _2694;
            }
            else
            {
                frontier_phi_58_59_ladder = _2567;
                frontier_phi_58_59_ladder_1 = _2573;
                frontier_phi_58_59_ladder_2 = _2571;
                frontier_phi_58_59_ladder_3 = _2569;
                frontier_phi_58_59_ladder_4 = _2565;
                frontier_phi_58_59_ladder_5 = _2563;
            }
            _2693 = frontier_phi_58_59_ladder_5;
            _2695 = frontier_phi_58_59_ladder_4;
            _2697 = frontier_phi_58_59_ladder;
            _2699 = frontier_phi_58_59_ladder_3;
            _2701 = frontier_phi_58_59_ladder_2;
            _2703 = frontier_phi_58_59_ladder_1;
        }
        float _2708 = isnan(1.0) ? _648 : (isnan(_648) ? 1.0 : min(_648, 1.0));
        _2440 = (_2708 * _2699) + _1873;
        _2442 = (_2708 * _2701) + _1875;
        _2444 = (_2708 * _2703) + _1877;
        _2446 = ((_2693 * _633) * _2708) + _2221;
        _2448 = ((_2695 * _635) * _2708) + _2223;
        _2450 = ((_2697 * _636) * _2708) + _2225;
    }
    else
    {
        _2440 = _1873;
        _2442 = _1875;
        _2444 = _1877;
        _2446 = _2221;
        _2448 = _2223;
        _2450 = _2225;
    }
    uint _2456 = _609 + uint(cbMatDynParam._m0[0u].w);
    float _2464 = ((_295 * cbMtdParam._m0[11u].x) * (_398.x + _383.x)) * cbInstanceData._m0[_2456].x;
    float _2467 = ((_295 * cbMtdParam._m0[11u].y) * (_398.y + _383.y)) * cbInstanceData._m0[_2456].y;
    float _2470 = ((_295 * cbMtdParam._m0[11u].z) * (_398.z + _383.z)) * cbInstanceData._m0[_2456].z;
    float _4446 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _4457 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _4468 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _2487 = (((isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_2440 + ((isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0))) * _648))) + ((_2446 + ((isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))) * _1489)) * cbPerFrame._m0[3u].x)) + _2464;
    float _2489 = (_2467 + ((_2448 + ((isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))) * _1489)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (_2442 + ((isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0))) * _648)));
    float _2491 = (_2470 + ((_2450 + ((isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))) * _1489)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2444 + ((isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0))) * _648)));
    float _2492 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
    float _2493 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
    float _2494 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
    float _2500 = cbMtdParam._m0[2u].x * _2464;
    float _2501 = cbMtdParam._m0[2u].y * _2467;
    float _2502 = cbMtdParam._m0[2u].z * _2470;
    float _4494 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2504 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
    uint _2505 = _608 + 6u;
    float _2513 = _568 / cbSceneParam._m0[86u].x;
    float _2514 = _569 / cbSceneParam._m0[86u].y;
    vec4 _2528 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2513, _2514, (log2((isnan(cbSceneParam._m0[77u].w) ? _490 : (isnan(_490) ? cbSceneParam._m0[77u].w : min(_490, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2530 = _2528.x;
    float _2531 = _2528.y;
    float _2532 = _2528.z;
    float _2533 = _2528.w;
    float _2626;
    float _2628;
    float _2630;
    float _2632;
    if (_490 > cbSceneParam._m0[78u].w)
    {
        float _2588 = isnan(_490) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _490 : min(cbSceneParam._m0[80u].w, _490));
        float _2589 = _2588 / _490;
        float _2600 = _2589 * _541;
        float _2601 = _542 * _2589;
        float _2602 = (-0.0) - _2601;
        float _2604 = _2589 * _543;
        float _2606 = (cbSceneParam._m0[77u].w * _2602) / _2588;
        float _2607 = _2606 + cbSceneParam._m0[79u].w;
        float _2608 = cbSceneParam._m0[79u].w - _2601;
        float _2614 = sqrt(((_2600 * _2600) + (_2601 * _2601)) + (_2604 * _2604));
        float _2617 = (1.0 - (cbSceneParam._m0[77u].w / _2588)) * _2614;
        float _2622 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2624 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2810;
        if (abs((_2602 - _2606) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2810 = ((((_2607 > 0.0) ? exp2(_2622 * _2607) : (2.0 - exp2(_2624 * _2607))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2617;
        }
        else
        {
            float _2754 = 1.0 / cbSceneParam._m0[80u].x;
            float _2755 = isnan(_2608) ? _2607 : (isnan(_2607) ? _2608 : max(_2607, _2608));
            float _2756 = isnan(_2608) ? _2607 : (isnan(_2607) ? _2608 : min(_2607, _2608));
            float _2765 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : min(_2755, 0.0));
            float _2766 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : min(_2756, 0.0));
            _2810 = ((abs(_2614 / _2602) * cbSceneParam._m0[80u].y) * ((((_2765 - _2766) * 2.0) - ((exp2(_2622 * (isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0)))) - exp2(_2622 * (isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0))))) * _2754)) - ((exp2(_2624 * _2765) - exp2(_2624 * _2766)) * _2754))) + (_2617 * cbSceneParam._m0[80u].z);
        }
        vec4 _2812 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2513, _2514, 1.0), 0.0);
        float _2821 = exp2((_2810 * (-1.44269502162933349609375)) * (1.0 - _2812.w));
        float _2822 = log2(_2821);
        float _2838 = log2(_2533);
        _2626 = (exp2(_2838 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2822 * cbSceneParam._m0[78u].x)) * _2812.x) / cbSceneParam._m0[78u].x)) + _2530;
        _2628 = (exp2(_2838 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2822 * cbSceneParam._m0[78u].y)) * _2812.y) / cbSceneParam._m0[78u].y)) + _2531;
        _2630 = (exp2(_2838 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2822 * cbSceneParam._m0[78u].z)) * _2812.z) / cbSceneParam._m0[78u].z)) + _2532;
        _2632 = _2821 * _2533;
    }
    else
    {
        _2626 = _2530;
        _2628 = _2531;
        _2630 = _2532;
        _2632 = _2533;
    }
    bool _2848;
    vec4 _2642;
    vec4 _2664;
    float _2666;
    float _2670;
    float _2671;
    float _2672;
    float _2675;
    float _2678;
    float _2681;
    float _2682;
    bool _2692;
    for (;;)
    {
        _2642 = cbMatDynParam._m0[0u];
        float _2644 = roundEven(_2642.y);
        bool _2645 = _2644 == 3.0;
        float _2646 = log2(_2632);
        float _2650 = exp2(_2646 * cbSceneParam._m0[78u].x);
        float _2651 = exp2(_2646 * cbSceneParam._m0[78u].y);
        float _2652 = exp2(_2646 * cbSceneParam._m0[78u].z);
        float _2653 = _2650 * _2492;
        float _2654 = _2651 * _2493;
        float _2655 = _2652 * _2494;
        float _2662 = _557 + (-0.5);
        _2664 = cbMtdParam._m0[1u];
        _2666 = _2664.y * _2662;
        float _2669 = (_2644 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2670 = _2669 * (_2645 ? _2653 : (_2653 + (cbSceneParam._m0[72u].w * _2626)));
        _2671 = _2669 * (_2645 ? _2654 : (_2654 + (cbSceneParam._m0[72u].w * _2628)));
        _2672 = _2669 * (_2645 ? _2655 : (_2655 + (cbSceneParam._m0[72u].w * _2630)));
        _2675 = ((_2500 * _2504) * _2650) * _2669;
        _2678 = ((_2501 * _2504) * _2651) * _2669;
        _2681 = ((_2502 * _2504) * _2652) * _2669;
        _2682 = _2662 * 0.999000012874603271484375;
        _2692 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2692)
        {
            if ((cbInstanceData._m0[_608 + 7u].x + _2682) < 0.5)
            {
                _2848 = true;
                break;
            }
        }
        uint _2789 = _609 + uint(_2642.w);
        if ((cbInstanceData._m0[_2789].w < 1.0) && ((cbInstanceData._m0[_2789].w + _2682) < 0.5))
        {
            _2848 = true;
            break;
        }
        if ((_2666 + 1.0) < _2664.x)
        {
            _2848 = true;
            break;
        }
        _2848 = false;
        break;
    }
    float _3053;
    if (_2848)
    {
        discard_state = true;
        _3053 = 0.0;
    }
    else
    {
        _3053 = cbInstanceData._m0[_2505].w;
    }
    SV_Target.x = _2670;
    SV_Target.y = _2671;
    SV_Target.z = _2672;
    SV_Target.w = _3053;
    SV_Target_1.x = _2675;
    SV_Target_1.y = _2678;
    SV_Target_1.z = _2681;
    SV_Target_1.w = cbInstanceData._m0[_2505].w;
    discard_exit();
}


