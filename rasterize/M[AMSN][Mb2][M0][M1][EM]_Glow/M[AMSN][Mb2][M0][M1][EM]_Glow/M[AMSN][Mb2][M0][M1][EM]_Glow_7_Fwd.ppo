#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _923;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _187 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _188 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _189 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_187, _188, _189), vec3(_187, _188, _189)));
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _231 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _237 = _231.x * cbMtdParam._m0[9u].x;
    float _238 = _231.y * cbMtdParam._m0[9u].y;
    float _239 = _231.z * cbMtdParam._m0[9u].z;
    vec4 _259 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _274 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _276 = _274.x;
    vec4 _288 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _292 = _288.z;
    float _296 = (_288.x * 2.0) + (-1.0);
    float _298 = (_288.y * 2.0) + (-1.0);
    float _299 = dot(vec2(_296, _298), vec2(_296, _298));
    float _3299 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _305 = sqrt(1.0 - (isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0))));
    vec4 _333 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _348 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _363 = (TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_259.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].x + 1.0);
    float _3310 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _364 = isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0));
    float _367 = fma(_305, _202 * NORMAL.x, fma(_298, _209 * TANGENT.x, (_195 * _187) * _296));
    float _370 = fma(_305, _202 * NORMAL.y, fma(_298, _209 * TANGENT.y, (_195 * _188) * _296));
    float _373 = fma(_305, _202 * NORMAL.z, fma(_298, _209 * TANGENT.z, (_195 * _189) * _296));
    float _377 = inversesqrt(dot(vec3(_367, _370, _373), vec3(_367, _370, _373)));
    float _378 = _377 * _367;
    float _379 = _377 * _370;
    float _380 = _377 * _373;
    float _3321 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _381 = isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0));
    float _3332 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3343 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3354 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3365 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _385 = isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0));
    float _401 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _442 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _452 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _442);
    float _453 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _442);
    float _454 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _442);
    float _458 = inversesqrt(dot(vec3(_452, _453, _454), vec3(_452, _453, _454)));
    float _459 = _452 * _458;
    float _460 = _453 * _458;
    float _461 = _454 * _458;
    float _467 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _468 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _488 = fma(_380, cbSceneParam._m0[5u].z, fma(_379, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _378));
    float _491 = fma(_380, cbSceneParam._m0[6u].z, fma(_379, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _378));
    float _494 = fma(_380, cbSceneParam._m0[7u].z, fma(_379, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _378));
    uint _507 = uint(roundEven(NORMAL.w)) * 13u;
    uint _509 = _507 + 9u;
    uint _510 = _509 + uint(cbMatDynParam._m0[0u].w);
    float _516 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0)))) * cbInstanceData._m0[_510].x;
    float _517 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0)))) * cbInstanceData._m0[_510].y;
    float _518 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0)))) * cbInstanceData._m0[_510].z;
    float _3376 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _519 = isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0));
    float _3387 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _520 = isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0));
    float _3398 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _521 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
    float _522 = 1.0 - _385;
    float _523 = _519 * _522;
    float _524 = _520 * _522;
    float _525 = _521 * _522;
    float _530 = (_519 + (-0.039999999105930328369140625)) * _385;
    float _531 = (_520 + (-0.039999999105930328369140625)) * _385;
    float _532 = (_521 + (-0.039999999105930328369140625)) * _385;
    float _533 = _530 + 0.039999999105930328369140625;
    float _535 = _531 + 0.039999999105930328369140625;
    float _536 = _532 + 0.039999999105930328369140625;
    vec4 _545 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _467, cbSceneParam._m0[86u].y * _468));
    float _548 = _545.x * TEXCOORD_3.w;
    float _549 = dot(vec3(_378, _379, _380), vec3(_459, _460, _461));
    float _552 = _549 * 2.0;
    float _556 = (_552 * _378) - _459;
    float _557 = (_552 * _379) - _460;
    float _558 = (_552 * _380) - _461;
    float _562 = abs(dot(vec3(_459, _460, _461), vec3(_378, _379, _380)));
    float _3409 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _564 = sqrt(_381);
    float _577 = exp2((_564 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_564 * 3.0));
    float _583 = (1.0 - _577) * ((_564 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _584 = _577 * _564;
    float _612 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _616 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _620 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _922;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _647 = fma(_620, cbModelParam._m0[26u].z, fma(_616, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _612));
        float _651 = fma(_620, cbModelParam._m0[27u].z, fma(_616, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _612));
        float _655 = fma(_620, cbModelParam._m0[28u].z, fma(_616, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _612));
        float _680 = _612 + _378;
        float _681 = _616 + _379;
        float _682 = _620 + _380;
        float _692 = fma(_682, cbModelParam._m0[26u].z, fma(_681, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _680)) - _647;
        float _693 = fma(_682, cbModelParam._m0[27u].z, fma(_681, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _680)) - _651;
        float _694 = fma(_682, cbModelParam._m0[28u].z, fma(_681, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _680)) - _655;
        float _698 = inversesqrt(dot(vec3(_692, _693, _694), vec3(_692, _693, _694)));
        float _711 = ((_698 * _692) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_647 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _712 = ((_698 * _693) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_651 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _713 = ((_698 * _694) / cbModelParam._m0[34u].z) + ((((((_655 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _716 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_711, _712, _713), 0.0);
        vec4 _723 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_711, _712, _713), 0.0);
        vec4 _730 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_711, _712, _713), 0.0);
        vec4 _737 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_711, _712, _713), 0.0);
        float _750 = exp2((_716.w + (-0.5)) * 20.0) * 2.0;
        float _751 = _750 * (_716.x + (-0.5));
        float _752 = _750 * (_716.y + (-0.5));
        float _753 = _750 * (_716.z + (-0.5));
        float _760 = exp2((_723.w + (-0.5)) * 20.0) * 2.0;
        float _761 = _760 * (_723.x + (-0.5));
        float _762 = _760 * (_723.y + (-0.5));
        float _763 = _760 * (_723.z + (-0.5));
        float _770 = exp2((_730.w + (-0.5)) * 20.0) * 2.0;
        float _771 = _770 * (_730.x + (-0.5));
        float _772 = _770 * (_730.y + (-0.5));
        float _773 = _770 * (_730.z + (-0.5));
        float _780 = exp2((_737.w + (-0.5)) * 20.0) * 2.0;
        float _781 = _780 * (_737.x + (-0.5));
        float _782 = _780 * (_737.y + (-0.5));
        float _783 = _780 * (_737.z + (-0.5));
        float _784 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _785 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _786 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _787 = _751 * 0.5;
        float _788 = _761 * 0.5;
        float _789 = _771 * 0.5;
        float _790 = dot(vec3(_787, _788, _789), vec3(_787, _788, _789));
        float _795 = (_790 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_790);
        float _804 = (dot(vec3(_378, _379, _380), vec3(_795 * _787, _795 * _788, _795 * _789)) + 1.0) * 0.5;
        float _3435 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _814 = sqrt(((_788 * _788) + (_787 * _787)) + (_789 * _789)) / (_784 + 9.9999997473787516355514526367188e-06);
        float _3446 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _815 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
        float _816 = _815 * 2.0;
        float _820 = (1.0 - _815) / (_815 + 1.0);
        float _3457 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _821 = isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0));
        float _830 = ((((1.0 - _821) * (_816 + 2.0)) * exp2(log2(isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0))) * (_816 + 1.0))) + _821) * _784;
        float _831 = _752 * 0.5;
        float _832 = _762 * 0.5;
        float _833 = _772 * 0.5;
        float _834 = dot(vec3(_831, _832, _833), vec3(_831, _832, _833));
        float _839 = (_834 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_834);
        float _847 = (dot(vec3(_378, _379, _380), vec3(_839 * _831, _839 * _832, _839 * _833)) + 1.0) * 0.5;
        float _3468 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _856 = sqrt(((_832 * _832) + (_831 * _831)) + (_833 * _833)) / (_785 + 9.9999997473787516355514526367188e-06);
        float _3479 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _857 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
        float _858 = _857 * 2.0;
        float _862 = (1.0 - _857) / (_857 + 1.0);
        float _3490 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _863 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
        float _872 = ((((1.0 - _863) * (_858 + 2.0)) * exp2(log2(isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0))) * (_858 + 1.0))) + _863) * _785;
        float _873 = _753 * 0.5;
        float _874 = _763 * 0.5;
        float _875 = _773 * 0.5;
        float _876 = dot(vec3(_873, _874, _875), vec3(_873, _874, _875));
        float _881 = (_876 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_876);
        float _889 = (dot(vec3(_378, _379, _380), vec3(_881 * _873, _881 * _874, _881 * _875)) + 1.0) * 0.5;
        float _3501 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _898 = sqrt(((_874 * _874) + (_873 * _873)) + (_875 * _875)) / (_786 + 9.9999997473787516355514526367188e-06);
        float _3512 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _899 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
        float _900 = _899 * 2.0;
        float _904 = (1.0 - _899) / (_899 + 1.0);
        float _3523 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _905 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _914 = ((((1.0 - _905) * (_900 + 2.0)) * exp2(log2(isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0))) * (_900 + 1.0))) + _905) * _786;
        _922 = _753;
        _924 = _752;
        _925 = _751;
        _926 = _763;
        _927 = _762;
        _928 = _761;
        _929 = _773;
        _930 = _772;
        _931 = _771;
        _932 = _786;
        _933 = _785;
        _934 = _784;
        _935 = cbModelParam._m0[36u].z * (isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0)));
        _936 = cbModelParam._m0[36u].z * (isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0)));
        _937 = cbModelParam._m0[36u].z * (isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0)));
    }
    else
    {
        _922 = _923;
        _924 = _923;
        _925 = _923;
        _926 = _923;
        _927 = _923;
        _928 = _923;
        _929 = _923;
        _930 = _923;
        _931 = _923;
        _932 = _923;
        _933 = _923;
        _934 = _923;
        _935 = 0.0;
        _936 = 0.0;
        _937 = 0.0;
    }
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _963 = fma(_620, cbModelParam._m0[30u].z, fma(_616, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _612));
        float _967 = fma(_620, cbModelParam._m0[31u].z, fma(_616, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _612));
        float _971 = fma(_620, cbModelParam._m0[32u].z, fma(_616, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _612));
        float _994 = _612 + _378;
        float _995 = _616 + _379;
        float _996 = _620 + _380;
        float _1006 = fma(_996, cbModelParam._m0[30u].z, fma(_995, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _994)) - _963;
        float _1007 = fma(_996, cbModelParam._m0[31u].z, fma(_995, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _994)) - _967;
        float _1008 = fma(_996, cbModelParam._m0[32u].z, fma(_995, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _994)) - _971;
        float _1012 = inversesqrt(dot(vec3(_1006, _1007, _1008), vec3(_1006, _1007, _1008)));
        float _1025 = ((_1012 * _1006) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_963 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1026 = ((_1012 * _1007) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_967 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1027 = ((_1012 * _1008) / cbModelParam._m0[35u].z) + ((((((_971 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        vec4 _1043 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        float _1062 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1029.x + (-0.5));
        float _1064 = _1062 * (_1029.y + (-0.5));
        float _1065 = _1062 * (_1029.z + (-0.5));
        float _1072 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1036.x + (-0.5));
        float _1074 = _1072 * (_1036.y + (-0.5));
        float _1075 = _1072 * (_1036.z + (-0.5));
        float _1082 = exp2((_1043.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1043.x + (-0.5));
        float _1084 = _1082 * (_1043.y + (-0.5));
        float _1085 = _1082 * (_1043.z + (-0.5));
        float _1092 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1093 = _1092 * (_1050.x + (-0.5));
        float _1094 = _1092 * (_1050.y + (-0.5));
        float _1095 = _1092 * (_1050.z + (-0.5));
        float _1096 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1097 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1098 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1099 = _1063 * 0.5;
        float _1100 = _1073 * 0.5;
        float _1101 = _1083 * 0.5;
        float _1102 = dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101));
        float _1107 = (_1102 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1102);
        float _1115 = (dot(vec3(_378, _379, _380), vec3(_1107 * _1099, _1107 * _1100, _1107 * _1101)) + 1.0) * 0.5;
        float _3564 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1124 = sqrt(((_1100 * _1100) + (_1099 * _1099)) + (_1101 * _1101)) / (_1096 + 9.9999997473787516355514526367188e-06);
        float _3575 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
        float _1126 = _1125 * 2.0;
        float _1130 = (1.0 - _1125) / (_1125 + 1.0);
        float _3586 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
        float _1140 = ((((1.0 - _1131) * (_1126 + 2.0)) * exp2(log2(isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0))) * (_1126 + 1.0))) + _1131) * _1096;
        float _1141 = _1064 * 0.5;
        float _1142 = _1074 * 0.5;
        float _1143 = _1084 * 0.5;
        float _1144 = dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143));
        float _1149 = (_1144 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1144);
        float _1157 = (dot(vec3(_378, _379, _380), vec3(_1149 * _1141, _1149 * _1142, _1149 * _1143)) + 1.0) * 0.5;
        float _3597 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1166 = sqrt(((_1142 * _1142) + (_1141 * _1141)) + (_1143 * _1143)) / (_1097 + 9.9999997473787516355514526367188e-06);
        float _3608 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _1168 = _1167 * 2.0;
        float _1172 = (1.0 - _1167) / (_1167 + 1.0);
        float _3619 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _1182 = ((((1.0 - _1173) * (_1168 + 2.0)) * exp2(log2(isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0))) * (_1168 + 1.0))) + _1173) * _1097;
        float _1183 = _1065 * 0.5;
        float _1184 = _1075 * 0.5;
        float _1185 = _1085 * 0.5;
        float _1186 = dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185));
        float _1191 = (_1186 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1186);
        float _1199 = (dot(vec3(_378, _379, _380), vec3(_1191 * _1183, _1191 * _1184, _1191 * _1185)) + 1.0) * 0.5;
        float _3630 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1208 = sqrt(((_1184 * _1184) + (_1183 * _1183)) + (_1185 * _1185)) / (_1098 + 9.9999997473787516355514526367188e-06);
        float _3641 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
        float _1210 = _1209 * 2.0;
        float _1214 = (1.0 - _1209) / (_1209 + 1.0);
        float _3652 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _1224 = ((((1.0 - _1215) * (_1210 + 2.0)) * exp2(log2(isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))) * (_1210 + 1.0))) + _1215) * _1098;
        _1232 = _1065;
        _1233 = _1064;
        _1234 = _1063;
        _1235 = _1075;
        _1236 = _1074;
        _1237 = _1073;
        _1238 = _1085;
        _1239 = _1084;
        _1240 = _1083;
        _1241 = _1098;
        _1242 = _1097;
        _1243 = _1096;
        _1244 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0)));
        _1245 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)));
        _1246 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)));
    }
    else
    {
        _1232 = _923;
        _1233 = _923;
        _1234 = _923;
        _1235 = _923;
        _1236 = _923;
        _1237 = _923;
        _1238 = _923;
        _1239 = _923;
        _1240 = _923;
        _1241 = _923;
        _1242 = _923;
        _1243 = _923;
        _1244 = 0.0;
        _1245 = 0.0;
        _1246 = 0.0;
    }
    float _1256 = (cbModelParam._m0[1u].x * (_1244 - _935)) + _935;
    float _1257 = (cbModelParam._m0[1u].x * (_1245 - _936)) + _936;
    float _1258 = (cbModelParam._m0[1u].x * (_1246 - _937)) + _937;
    float _1279 = fma(_1258, cbSceneParam._m0[89u].z, fma(_1257, cbSceneParam._m0[89u].y, _1256 * cbSceneParam._m0[89u].x));
    float _1282 = fma(_1258, cbSceneParam._m0[90u].z, fma(_1257, cbSceneParam._m0[90u].y, _1256 * cbSceneParam._m0[90u].x));
    float _1285 = fma(_1258, cbSceneParam._m0[91u].z, fma(_1257, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1256));
    float _1300 = _556 * 0.5;
    float _1301 = _557 * 0.5;
    float _1302 = _558 * 0.5;
    float _1303 = dot(vec4(_1300, _1301, _1302, 1.0), vec4(_1234, _1237, _1240, _1243));
    float _1306 = dot(vec4(_1300, _1301, _1302, 1.0), vec4(_1233, _1236, _1239, _1242));
    float _1309 = dot(vec4(_1300, _1301, _1302, 1.0), vec4(_1232, _1235, _1238, _1241));
    float _1343;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1316 = dot(vec4(_1300, _1301, _1302, 1.0), vec4(_922, _926, _929, _932));
        float _1320 = dot(vec4(_1300, _1301, _1302, 1.0), vec4(_924, _927, _930, _933));
        float _1324 = dot(vec4(_1300, _1301, _1302, 1.0), vec4(_925, _928, _931, _934));
        float _1331 = dot(vec4(cbModelParam._m0[39u]), vec4(_1300, _1301, _1302, 1.0));
        _1343 = dot(vec3(isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)), isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)), isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1331) ? 0.0 : (isnan(0.0) ? _1331 : max(0.0, _1331))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1343 = 1.0;
    }
    float _1354;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1345 = dot(vec4(cbModelParam._m0[40u]), vec4(_1300, _1301, _1302, 1.0));
        _1354 = dot(vec3(isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)), isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)), isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1345) ? 0.0 : (isnan(0.0) ? _1345 : max(0.0, _1345))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1354 = 1.0;
    }
    float _1358 = (_1354 * cbModelParam._m0[1u].x) + (_1343 * (1.0 - cbModelParam._m0[1u].x));
    float _1368 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _381);
    float _1369 = isnan(_1368) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1368 : min(cbModelParam._m0[25u].z, _1368));
    float _1449;
    float _1451;
    float _1453;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1416 = fma(_620, cbModelParam._m0[13u].z, fma(_616, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _612)) + cbModelParam._m0[13u].w;
        float _1420 = fma(_620, cbModelParam._m0[14u].z, fma(_616, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _612)) + cbModelParam._m0[14u].w;
        float _1424 = fma(_620, cbModelParam._m0[15u].z, fma(_616, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _612)) + cbModelParam._m0[15u].w;
        float _1427 = fma(_558, cbModelParam._m0[13u].z, fma(_557, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _556));
        float _1430 = fma(_558, cbModelParam._m0[14u].z, fma(_557, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _556));
        float _1433 = fma(_558, cbModelParam._m0[15u].z, fma(_557, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _556));
        float _1461;
        if (_1427 > 0.0)
        {
            _1461 = abs((1.0 - _1416) / _1427);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1427 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1416 + 1.0) / _1427);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1461 = frontier_phi_14_12_ladder;
        }
        float _1667;
        if (_1430 > 0.0)
        {
            _1667 = abs((1.0 - _1420) / _1430);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1430 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1420 + 1.0) / _1430);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1667 = frontier_phi_23_19_ladder;
        }
        float _1921;
        if (_1433 > 0.0)
        {
            _1921 = abs((1.0 - _1424) / _1433);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1433 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1424 + 1.0) / _1433);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1921 = frontier_phi_35_30_ladder;
        }
        float _1923 = isnan(_1667) ? _1461 : (isnan(_1461) ? _1667 : min(_1461, _1667));
        float _1924 = isnan(_1921) ? _1923 : (isnan(_1923) ? _1921 : min(_1923, _1921));
        float _1928 = (_1924 * _1427) + _1416;
        float _1929 = (_1924 * _1430) + _1420;
        float _1930 = (_1924 * _1433) + _1424;
        float _1931 = _1924 * 9.9999997473787516355514526367188e-05;
        float _1933 = (-1.0) - _1931;
        float _1935 = _1931 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1930 > _1935) || ((_1930 < _1933) || ((_1929 > _1935) || ((_1929 < _1933) || ((_1928 < _1933) || (_1928 > _1935))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2058 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1930, cbModelParam._m0[9u].z, fma(_1929, cbModelParam._m0[9u].y, _1928 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1930, cbModelParam._m0[10u].z, fma(_1929, cbModelParam._m0[10u].y, _1928 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1930, cbModelParam._m0[11u].z, fma(_1929, cbModelParam._m0[11u].y, _1928 * cbModelParam._m0[11u].x))), _1369);
            frontier_phi_13_35_ladder = _2058.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2058.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2058.x * cbModelParam._m0[1u].y;
        }
        _1449 = frontier_phi_13_35_ladder_2;
        _1451 = frontier_phi_13_35_ladder_1;
        _1453 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1437 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_556, _557, _558), _1369);
        _1449 = _1437.x * cbModelParam._m0[1u].y;
        _1451 = _1437.y * cbModelParam._m0[1u].y;
        _1453 = _1437.z * cbModelParam._m0[1u].y;
    }
    float _1457 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _381);
    float _1458 = isnan(_1457) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1457 : min(cbModelParam._m0[25u].w, _1457));
    float _1549;
    float _1551;
    float _1553;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1513 = fma(_620, cbModelParam._m0[21u].z, fma(_616, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _612)) + cbModelParam._m0[21u].w;
        float _1517 = fma(_620, cbModelParam._m0[22u].z, fma(_616, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _612)) + cbModelParam._m0[22u].w;
        float _1521 = fma(_620, cbModelParam._m0[23u].z, fma(_616, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _612)) + cbModelParam._m0[23u].w;
        float _1524 = fma(_558, cbModelParam._m0[21u].z, fma(_557, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _556));
        float _1527 = fma(_558, cbModelParam._m0[22u].z, fma(_557, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _556));
        float _1530 = fma(_558, cbModelParam._m0[23u].z, fma(_557, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _556));
        float _1672;
        if (_1524 > 0.0)
        {
            _1672 = abs((1.0 - _1513) / _1524);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1524 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1513 + 1.0) / _1524);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1672 = frontier_phi_25_21_ladder;
        }
        float _1948;
        if (_1527 > 0.0)
        {
            _1948 = abs((1.0 - _1517) / _1527);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1527 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1517 + 1.0) / _1527);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1948 = frontier_phi_37_32_ladder;
        }
        float _2161;
        if (_1530 > 0.0)
        {
            _2161 = abs((1.0 - _1521) / _1530);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1530 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1521 + 1.0) / _1530);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2161 = frontier_phi_46_43_ladder;
        }
        float _2163 = isnan(_1948) ? _1672 : (isnan(_1672) ? _1948 : min(_1672, _1948));
        float _2164 = isnan(_2161) ? _2163 : (isnan(_2163) ? _2161 : min(_2163, _2161));
        float _2168 = (_2164 * _1524) + _1513;
        float _2169 = (_2164 * _1527) + _1517;
        float _2170 = (_2164 * _1530) + _1521;
        float _2171 = _2164 * 9.9999997473787516355514526367188e-05;
        float _2172 = (-1.0) - _2171;
        float _2174 = _2171 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2170 > _2174) || ((_2170 < _2172) || ((_2169 > _2174) || ((_2169 < _2172) || ((_2168 < _2172) || (_2168 > _2174))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2404 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2170, cbModelParam._m0[17u].z, fma(_2169, cbModelParam._m0[17u].y, _2168 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2170, cbModelParam._m0[18u].z, fma(_2169, cbModelParam._m0[18u].y, _2168 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2170, cbModelParam._m0[19u].z, fma(_2169, cbModelParam._m0[19u].y, _2168 * cbModelParam._m0[19u].x))), _1458);
            frontier_phi_22_46_ladder = _2404.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2404.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2404.x * cbModelParam._m0[1u].z;
        }
        _1549 = frontier_phi_22_46_ladder_2;
        _1551 = frontier_phi_22_46_ladder_1;
        _1553 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1533 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_556, _557, _558), _1458);
        _1549 = _1533.x * cbModelParam._m0[1u].z;
        _1551 = _1533.y * cbModelParam._m0[1u].z;
        _1553 = _1533.z * cbModelParam._m0[1u].z;
    }
    float _1566 = (((_583 * _533) + _584) * _548) * ((cbModelParam._m0[1u].w * (_1549 - _1449)) + _1449);
    float _1568 = (((_583 * _535) + _584) * _548) * ((cbModelParam._m0[1u].w * (_1551 - _1451)) + _1451);
    float _1570 = (((_583 * _536) + _584) * _548) * ((cbModelParam._m0[1u].w * (_1553 - _1453)) + _1453);
    float _1573 = fma(_1570, cbSceneParam._m0[89u].z, fma(_1568, cbSceneParam._m0[89u].y, _1566 * cbSceneParam._m0[89u].x));
    float _1576 = fma(_1570, cbSceneParam._m0[90u].z, fma(_1568, cbSceneParam._m0[90u].y, _1566 * cbSceneParam._m0[90u].x));
    float _1579 = fma(_1570, cbSceneParam._m0[91u].z, fma(_1568, cbSceneParam._m0[91u].y, _1566 * cbSceneParam._m0[91u].x));
    uvec4 _1589 = floatBitsToUint(cbInstanceData._m0[_507 + 5u]);
    uint _1591 = _1589.x * 14u;
    uint _1592 = _1591 + 13u;
    float _1599 = _548 + (-1.0);
    float _1604 = (cbLight._m0[_1592].x * _1599) + 1.0;
    float _1605 = (cbLight._m0[_1592].y * _1599) + 1.0;
    float _1606 = (cbLight._m0[_1592].z * _1599) + 1.0;
    float _1607 = (cbLight._m0[_1592].w * _1599) + 1.0;
    uint _1608 = _1591 + 5u;
    float _1614 = isnan(1.0) ? _1605 : (isnan(_1605) ? 1.0 : min(_1605, 1.0));
    uint _1618 = _1591 + 4u;
    float _1625 = isnan(1.0) ? _1604 : (isnan(_1604) ? 1.0 : min(_1604, 1.0));
    uint _1629 = _1591 | 1u;
    float _1640 = dot(vec3(cbLight._m0[_1591].xyz), vec3(_378, _379, _380));
    float _1643 = dot(vec3(cbLight._m0[_1629].xyz), vec3(_378, _379, _380));
    float _3788 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
    float _3799 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
    float _1648 = (isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * 0.3183098733425140380859375;
    float _1650 = (isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * 0.3183098733425140380859375;
    float _1657 = ((cbLight._m0[_1608].x * _1614) * _1650) + ((cbLight._m0[_1618].x * _1625) * _1648);
    float _1658 = ((_1614 * cbLight._m0[_1608].y) * _1650) + ((_1625 * cbLight._m0[_1618].y) * _1648);
    float _1659 = ((_1614 * cbLight._m0[_1608].z) * _1650) + ((_1625 * cbLight._m0[_1618].z) * _1648);
    uvec4 _1664 = floatBitsToUint(cbLight._m0[_1591 + 12u]);
    bool _1666 = _1664.x == 0u;
    float _1677;
    float _1679;
    float _1681;
    if (_1666)
    {
        _1677 = _1657;
        _1679 = _1658;
        _1681 = _1659;
    }
    else
    {
        uint _1685 = _1591 + 6u;
        float _1701 = (dot(vec3(cbLight._m0[_1591 + 2u].xyz), vec3(_378, _379, _380)) * 0.5) + 0.5;
        float _1702 = _1701 * _1701;
        float _3810 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1704 = isnan(1.0) ? _1606 : (isnan(_1606) ? 1.0 : min(_1606, 1.0));
        _1677 = (((cbLight._m0[_1685].x * 0.3183098733425140380859375) * _1703) * _1704) + _1657;
        _1679 = (((cbLight._m0[_1685].y * 0.3183098733425140380859375) * _1703) * _1704) + _1658;
        _1681 = (((cbLight._m0[_1685].z * 0.3183098733425140380859375) * _1703) * _1704) + _1659;
    }
    bool _1684 = _1664.y == 0u;
    float _1722;
    float _1724;
    float _1726;
    if (_1684)
    {
        _1722 = _1677;
        _1724 = _1679;
        _1726 = _1681;
    }
    else
    {
        uint _1892 = _1591 + 7u;
        float _1908 = (dot(vec3(cbLight._m0[_1591 + 3u].xyz), vec3(_378, _379, _380)) * 0.5) + 0.5;
        float _1909 = _1908 * _1908;
        float _3826 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
        float _1910 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1911 = isnan(1.0) ? _1607 : (isnan(_1607) ? 1.0 : min(_1607, 1.0));
        _1722 = (((cbLight._m0[_1892].x * 0.3183098733425140380859375) * _1910) * _1911) + _1677;
        _1724 = (((cbLight._m0[_1892].y * 0.3183098733425140380859375) * _1910) * _1911) + _1679;
        _1726 = (((cbLight._m0[_1892].z * 0.3183098733425140380859375) * _1910) * _1911) + _1681;
    }
    uint _1729 = _1591 + 8u;
    float _1742 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1591].w)) * _381) * 0.949999988079071044921875);
    float _1743 = _1742 * _1742;
    float _1744 = cbLight._m0[_1591].x + _459;
    float _1745 = cbLight._m0[_1591].y + _460;
    float _1746 = cbLight._m0[_1591].z + _461;
    float _1750 = inversesqrt(dot(vec3(_1744, _1745, _1746), vec3(_1744, _1745, _1746)));
    float _1751 = _1750 * _1744;
    float _1752 = _1750 * _1745;
    float _1753 = _1750 * _1746;
    float _1754 = dot(vec3(_378, _379, _380), vec3(cbLight._m0[_1591].xyz));
    float _3842 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
    float _1757 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _3853 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _1758 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _1759 = dot(vec3(_378, _379, _380), vec3(_1751, _1752, _1753));
    float _3864 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
    float _1762 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    float _1763 = dot(vec3(cbLight._m0[_1591].xyz), vec3(_1751, _1752, _1753));
    float _3875 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
    float _1767 = _1743 * _1743;
    float _1771 = ((_1762 * _1762) * (_1767 + (-1.0))) + 1.0;
    float _1779 = exp2(log2(1.0 - (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0)))) * 5.0);
    float _1780 = 0.959999978542327880859375 - _530;
    float _1782 = 0.959999978542327880859375 - _531;
    float _1783 = 0.959999978542327880859375 - _532;
    float _1790 = 1.0 - _1743;
    float _1801 = (0.5 / (((_1758 * ((_1757 * _1790) + _1743)) + 9.9999999392252902907785028219223e-09) + (((_1758 * _1790) + _1743) * _1757))) * _1757;
    float _3886 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _1803 = (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1767 / ((_1771 * _1771) * 3.141590118408203125));
    uint _1814 = _1591 + 9u;
    float _1825 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1629].w)) * _381) * 0.949999988079071044921875);
    float _1826 = _1825 * _1825;
    float _1827 = cbLight._m0[_1629].x + _459;
    float _1828 = cbLight._m0[_1629].y + _460;
    float _1829 = cbLight._m0[_1629].z + _461;
    float _1833 = inversesqrt(dot(vec3(_1827, _1828, _1829), vec3(_1827, _1828, _1829)));
    float _1834 = _1833 * _1827;
    float _1835 = _1833 * _1828;
    float _1836 = _1833 * _1829;
    float _1837 = dot(vec3(_378, _379, _380), vec3(cbLight._m0[_1629].xyz));
    float _3897 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1840 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _1841 = dot(vec3(_378, _379, _380), vec3(_1834, _1835, _1836));
    float _3908 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
    float _1844 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _1845 = dot(vec3(cbLight._m0[_1629].xyz), vec3(_1834, _1835, _1836));
    float _3919 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _1849 = _1826 * _1826;
    float _1853 = ((_1844 * _1844) * (_1849 + (-1.0))) + 1.0;
    float _1860 = exp2(log2(1.0 - (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0)))) * 5.0);
    float _1867 = 1.0 - _1826;
    float _1877 = (0.5 / (((_1758 * ((_1840 * _1867) + _1826)) + 9.9999999392252902907785028219223e-09) + (((_1758 * _1867) + _1826) * _1840))) * _1840;
    float _3930 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
    float _1879 = (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * (_1849 / ((_1853 * _1853) * 3.141590118408203125));
    float _1889 = (((((_1860 * _1780) + _533) * cbLight._m0[_1814].x) * _1879) * _1614) + (((((_1779 * _1780) + _533) * cbLight._m0[_1729].x) * _1803) * _1625);
    float _1890 = (((((_1860 * _1782) + _535) * cbLight._m0[_1814].y) * _1879) * _1614) + (((((_1779 * _1782) + _535) * cbLight._m0[_1729].y) * _1803) * _1625);
    float _1891 = (((((_1860 * _1783) + _536) * cbLight._m0[_1814].z) * _1879) * _1614) + (((((_1779 * _1783) + _536) * cbLight._m0[_1729].z) * _1803) * _1625);
    float _1953;
    float _1955;
    float _1957;
    if (_1666)
    {
        _1953 = _1889;
        _1955 = _1890;
        _1957 = _1891;
    }
    else
    {
        uint _1959 = _1591 + 2u;
        uint _1963 = _1591 + 10u;
        float _1977 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1959].w)) * _381) * 0.949999988079071044921875);
        float _1978 = _1977 * _1977;
        float _1979 = cbLight._m0[_1959].x + _459;
        float _1980 = cbLight._m0[_1959].y + _460;
        float _1981 = cbLight._m0[_1959].z + _461;
        float _1985 = inversesqrt(dot(vec3(_1979, _1980, _1981), vec3(_1979, _1980, _1981)));
        float _1986 = _1985 * _1979;
        float _1987 = _1985 * _1980;
        float _1988 = _1985 * _1981;
        float _1989 = dot(vec3(_378, _379, _380), vec3(cbLight._m0[_1959].xyz));
        float _3941 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        float _1992 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1993 = dot(vec3(_378, _379, _380), vec3(_1986, _1987, _1988));
        float _3952 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
        float _1996 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1997 = dot(vec3(cbLight._m0[_1959].xyz), vec3(_1986, _1987, _1988));
        float _3963 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
        float _2001 = _1978 * _1978;
        float _2005 = ((_1996 * _1996) * (_2001 + (-1.0))) + 1.0;
        float _2012 = exp2(log2(1.0 - (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0)))) * 5.0);
        float _2019 = 1.0 - _1978;
        float _2029 = (0.5 / (((_1758 * ((_1992 * _2019) + _1978)) + 9.9999999392252902907785028219223e-09) + (((_1758 * _2019) + _1978) * _1992))) * _1992;
        float _3974 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
        float _2031 = (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * (_2001 / ((_2005 * _2005) * 3.141590118408203125));
        float _2032 = isnan(1.0) ? _1606 : (isnan(_1606) ? 1.0 : min(_1606, 1.0));
        _1953 = (((((_2012 * _1780) + _533) * cbLight._m0[_1963].x) * _2031) * _2032) + _1889;
        _1955 = (((((_2012 * _1782) + _535) * cbLight._m0[_1963].y) * _2031) * _2032) + _1890;
        _1957 = (((((_2012 * _1783) + _536) * cbLight._m0[_1963].z) * _2031) * _2032) + _1891;
    }
    float _2067;
    float _2069;
    float _2071;
    if (_1684)
    {
        _2067 = _1953;
        _2069 = _1955;
        _2071 = _1957;
    }
    else
    {
        uint _2078 = _1591 + 3u;
        uint _2082 = _1591 + 11u;
        float _2096 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2078].w)) * _381) * 0.949999988079071044921875);
        float _2097 = _2096 * _2096;
        float _2098 = cbLight._m0[_2078].x + _459;
        float _2099 = cbLight._m0[_2078].y + _460;
        float _2100 = cbLight._m0[_2078].z + _461;
        float _2104 = inversesqrt(dot(vec3(_2098, _2099, _2100), vec3(_2098, _2099, _2100)));
        float _2105 = _2104 * _2098;
        float _2106 = _2104 * _2099;
        float _2107 = _2104 * _2100;
        float _2108 = dot(vec3(_378, _379, _380), vec3(cbLight._m0[_2078].xyz));
        float _3990 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
        float _2111 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _2112 = dot(vec3(_378, _379, _380), vec3(_2105, _2106, _2107));
        float _4001 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
        float _2115 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _2116 = dot(vec3(cbLight._m0[_2078].xyz), vec3(_2105, _2106, _2107));
        float _4012 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
        float _2120 = _2097 * _2097;
        float _2124 = ((_2115 * _2115) * (_2120 + (-1.0))) + 1.0;
        float _2131 = exp2(log2(1.0 - (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) * 5.0);
        float _2138 = 1.0 - _2097;
        float _2148 = (0.5 / (((_1758 * ((_2111 * _2138) + _2097)) + 9.9999999392252902907785028219223e-09) + (((_1758 * _2138) + _2097) * _2111))) * _2111;
        float _4023 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
        float _2150 = (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_2120 / ((_2124 * _2124) * 3.141590118408203125));
        float _2151 = isnan(1.0) ? _1607 : (isnan(_1607) ? 1.0 : min(_1607, 1.0));
        _2067 = (((((_2131 * _1780) + _533) * cbLight._m0[_2082].x) * _2150) * _2151) + _1953;
        _2069 = (((((_2131 * _1782) + _535) * cbLight._m0[_2082].y) * _2150) * _2151) + _1955;
        _2071 = (((((_2131 * _1783) + _536) * cbLight._m0[_2082].z) * _2150) * _2151) + _1957;
    }
    float _2286;
    float _2288;
    float _2290;
    float _2292;
    float _2294;
    float _2296;
    if (_1589.y == 0u)
    {
        float _2226 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2227 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2226;
        float _2228 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2226;
        float _2229 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2226;
        uvec4 _2241 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2242 = _2241.x;
        uint _2253 = uint((float(_2241.y) * floor(float(uint(cbSceneParam._m0[85u].y * _468) / _2242))) + floor(float(uint(cbSceneParam._m0[85u].x * _467) / _2242)));
        float _2263 = (log2(_2229 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2264 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
        uint _2267 = uint(isnan(14.0) ? _2264 : (isnan(_2264) ? 14.0 : min(_2264, 14.0)));
        uvec4 _2272 = texelFetch(g_lightClusterGridBuffer, int(((_2267 << 2u) + (_2253 << 6u)) >> 2u));
        uint _2273 = _2272.x;
        uint _2274 = _2241.z;
        float _2409;
        float _2411;
        float _2413;
        float _2415;
        float _2417;
        float _2419;
        if (((((1u << ((_2274 >> 4u) & 15u)) + 4294967295u) & _2273) == 0u) || ((_2274 & 240u) == 0u))
        {
            _2409 = 0.0;
            _2411 = 0.0;
            _2413 = 0.0;
            _2415 = 0.0;
            _2417 = 0.0;
            _2419 = 0.0;
        }
        else
        {
            float _2410;
            float _2412;
            float _2414;
            float _2416;
            float _2418;
            float _2420;
            float _2563 = 0.0;
            float _2564 = 0.0;
            float _2565 = 0.0;
            float _2566 = 0.0;
            float _2567 = 0.0;
            float _2568 = 0.0;
            uint _2569 = 0u;
            uint _2578;
            bool _2579;
            for (;;)
            {
                _2578 = texelFetch(g_lightClassification, int((((_2267 << 5u) + (_2253 << 9u)) + (_2569 << 2u)) >> 2u)).x;
                _2579 = _2578 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2579)
                {
                    frontier_phi_61_pred = _2563;
                    frontier_phi_61_pred_1 = _2568;
                    frontier_phi_61_pred_2 = _2567;
                    frontier_phi_61_pred_3 = _2566;
                    frontier_phi_61_pred_4 = _2565;
                    frontier_phi_61_pred_5 = _2564;
                }
                else
                {
                    float _2687;
                    float _2688;
                    float _2689;
                    float _2690;
                    float _2691;
                    float _2692;
                    uint _2693;
                    _2687 = _2563;
                    _2688 = _2564;
                    _2689 = _2565;
                    _2690 = _2566;
                    _2691 = _2567;
                    _2692 = _2568;
                    _2693 = _2578;
                    float _2619;
                    float _2620;
                    float _2621;
                    float _2622;
                    float _2623;
                    float _2624;
                    for (;;)
                    {
                        uint _2697 = uint(findLSB(_2693)) + (_2569 << 5u);
                        uint _2694 = (_2693 + 4294967295u) & _2693;
                        uint _2699 = _2697 * 48u;
                        vec4 _2713 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2699)).x, texelFetch(g_PointLightRenderingBuffer, int(_2699 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2699 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2699 + 3u)).x));
                        uint _2719 = (_2697 * 48u) + 4u;
                        vec4 _2732 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2719)).x, texelFetch(g_PointLightRenderingBuffer, int(_2719 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2719 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2719 + 3u)).x));
                        uint _2738 = (_2697 * 48u) + 8u;
                        vec3 _2749 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2738)).x, texelFetch(g_PointLightRenderingBuffer, int(_2738 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2738 + 2u)).x));
                        float _2753 = _2713.x - _2227;
                        float _2754 = _2713.y - _2228;
                        float _2755 = _2713.z - _2229;
                        float _2756 = dot(vec3(_2753, _2754, _2755), vec3(_2753, _2754, _2755));
                        float _2759 = inversesqrt(_2756);
                        float _2760 = _2759 * _2753;
                        float _2761 = _2759 * _2754;
                        float _2762 = _2759 * _2755;
                        float _2763 = dot(vec3(_488, _491, _494), vec3(_2760, _2761, _2762));
                        float _2768 = 1.0 - (_2756 * _2713.w);
                        float _4049 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
                        float _2769 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
                        float _2770 = sqrt(_2756) * _2732.w;
                        float _2773 = 1.39999997615814208984375 / (_2770 + 1.39999997615814208984375);
                        float _2774 = _2773 * _2773;
                        float _2777 = ((1.0 - _2774) * _2763) + _2774;
                        float _2780 = _2770 * _2770;
                        float _2784 = ((isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0))) * _2769) / ((_2780 * 0.699999988079071044921875) + 1.0);
                        float _2788 = (-0.0) - _2227;
                        float _2789 = (-0.0) - _2228;
                        float _2790 = (-0.0) - _2229;
                        float _2794 = inversesqrt(dot(vec3(_2788, _2789, _2790), vec3(_2788, _2789, _2790)));
                        float _2795 = _2794 * _2788;
                        float _2796 = _2794 * _2789;
                        float _2797 = _2794 * _2790;
                        float _2805 = exp2(log2(1.0 / ((_2780 * 3.5) + 5.0)) * 0.25);
                        float _2806 = 1.0 - _564;
                        float _2813 = sqrt(1.0 - ((1.0 - (_2806 * _2806)) * (1.0 - (_2805 * _2805))));
                        float _2814 = _2813 * _2813;
                        float _2815 = _2814 * _2814;
                        float _2816 = _2795 + _2760;
                        float _2817 = _2796 + _2761;
                        float _2818 = _2797 + _2762;
                        float _2822 = inversesqrt(dot(vec3(_2816, _2817, _2818), vec3(_2816, _2817, _2818)));
                        float _2826 = dot(vec3(_488, _491, _494), vec3(_2795, _2796, _2797));
                        float _4065 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
                        float _2829 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
                        float _2830 = dot(vec3(_488, _491, _494), vec3(_2822 * _2816, _2822 * _2817, _2822 * _2818));
                        float _4076 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
                        float _2833 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
                        float _2837 = ((_2833 * _2833) * (_2815 + (-1.0))) + 1.0;
                        float _2838 = _2773 * _2814;
                        float _2839 = _2838 * _2838;
                        float _2842 = ((1.0 - _2839) * _2763) + _2839;
                        float _4087 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
                        float _2843 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
                        float _2844 = 1.0 - _2814;
                        float _2854 = (0.5 / (((_2843 * ((_2829 * _2844) + _2814)) + 9.9999999392252902907785028219223e-09) + (((_2843 * _2844) + _2814) * _2829))) * _2843;
                        float _4098 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
                        float _2865 = (((_2815 * 3.1415927410125732421875) * (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) / ((_2837 * _2837) * ((_2780 * 2.1991131305694580078125) + 3.141590118408203125))) * _2769;
                        _2622 = (_2784 * _2732.x) + _2690;
                        _2623 = (_2784 * _2732.y) + _2691;
                        _2624 = (_2784 * _2732.z) + _2692;
                        _2619 = (_2865 * _2749.x) + _2687;
                        _2620 = (_2865 * _2749.y) + _2688;
                        _2621 = (_2865 * _2749.z) + _2689;
                        if (_2694 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2687 = _2619;
                            _2688 = _2620;
                            _2689 = _2621;
                            _2690 = _2622;
                            _2691 = _2623;
                            _2692 = _2624;
                            _2693 = _2694;
                        }
                    }
                    frontier_phi_61_pred = _2619;
                    frontier_phi_61_pred_1 = _2624;
                    frontier_phi_61_pred_2 = _2623;
                    frontier_phi_61_pred_3 = _2622;
                    frontier_phi_61_pred_4 = _2621;
                    frontier_phi_61_pred_5 = _2620;
                }
                _2410 = frontier_phi_61_pred;
                _2420 = frontier_phi_61_pred_1;
                _2418 = frontier_phi_61_pred_2;
                _2416 = frontier_phi_61_pred_3;
                _2414 = frontier_phi_61_pred_4;
                _2412 = frontier_phi_61_pred_5;
                uint _2570 = _2569 + 1u;
                if (_2570 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2563 = _2410;
                    _2564 = _2412;
                    _2565 = _2414;
                    _2566 = _2416;
                    _2567 = _2418;
                    _2568 = _2420;
                    _2569 = _2570;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2409 = _2410;
            _2411 = _2412;
            _2413 = _2414;
            _2415 = _2416;
            _2417 = _2418;
            _2419 = _2420;
        }
        uvec4 _2423 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2424 = _2423.z;
        uint _2426 = (_2424 >> 8u) & 15u;
        float _2531;
        float _2533;
        float _2535;
        float _2537;
        float _2539;
        float _2541;
        if (((4294967295u << _2426) & _2273) == 0u)
        {
            _2531 = _2409;
            _2533 = _2411;
            _2535 = _2413;
            _2537 = _2415;
            _2539 = _2417;
            _2541 = _2419;
        }
        else
        {
            float _2556 = inversesqrt(dot(vec3(_2227, _2228, _2229), vec3(_2227, _2228, _2229)));
            float _2557 = _2556 * _2227;
            float _2558 = _2556 * _2228;
            float _2559 = _2556 * _2229;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2426 < ((_2424 >> 12u) & 15u))
            {
                float _2532;
                float _2534;
                float _2536;
                float _2538;
                float _2540;
                float _2542;
                float _2670 = _2409;
                float _2671 = _2411;
                float _2672 = _2413;
                float _2673 = _2415;
                float _2674 = _2417;
                float _2675 = _2419;
                uint _2676 = _2426;
                uint _2685;
                bool _2686;
                for (;;)
                {
                    _2685 = texelFetch(g_lightClassification, int((((_2267 << 5u) + (_2253 << 9u)) + (_2676 << 2u)) >> 2u)).x;
                    _2686 = _2685 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2686)
                    {
                        frontier_phi_67_pred = _2673;
                        frontier_phi_67_pred_1 = _2674;
                        frontier_phi_67_pred_2 = _2675;
                        frontier_phi_67_pred_3 = _2672;
                        frontier_phi_67_pred_4 = _2671;
                        frontier_phi_67_pred_5 = _2670;
                    }
                    else
                    {
                        float _2870;
                        float _2871;
                        float _2872;
                        float _2873;
                        float _2874;
                        float _2875;
                        float _3165;
                        float _3166;
                        float _3167;
                        float _3168;
                        float _3169;
                        float _3170;
                        float _2883 = _2670;
                        float _2884 = _2671;
                        float _2885 = _2672;
                        float _2886 = _2673;
                        float _2887 = _2674;
                        float _2888 = _2675;
                        uint _2889 = _2685;
                        uint _2890;
                        vec4 _2915;
                        float _2916;
                        vec4 _2931;
                        vec3 _2943;
                        vec4 _2958;
                        vec4 _2974;
                        float _3021;
                        bool _3022;
                        for (;;)
                        {
                            uint _2900 = ((_2676 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2889));
                            _2890 = (_2889 + 4294967295u) & _2889;
                            uint _2902 = _2900 * 40u;
                            _2915 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2902)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 3u)).x));
                            _2916 = _2915.w;
                            uint _2918 = (_2900 * 40u) + 4u;
                            _2931 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2918)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 3u)).x));
                            uint _2933 = (_2900 * 40u) + 8u;
                            _2943 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2933)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 2u)).x));
                            uint _2945 = (_2900 * 40u) + 16u;
                            _2958 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2945)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 3u)).x));
                            uint _2961 = (_2900 * 40u) + 20u;
                            _2974 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2961)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 3u)).x));
                            uint _2977 = (_2900 * 40u) + 24u;
                            vec4 _2990 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2977)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 3u)).x));
                            uint _2996 = (_2900 * 40u) + 28u;
                            vec4 _3009 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2996)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 3u)).x));
                            _3021 = fma(_2229, _3009.z, fma(_2228, _3009.y, _3009.x * _2227)) + _3009.w;
                            _3022 = !((fma(_2229, _2990.z, fma(_2228, _2990.y, _2990.x * _2227)) + _2990.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3022)
                            {
                                float _3049 = _2915.x - _2227;
                                float _3050 = _2915.y - _2228;
                                float _3051 = _2915.z - _2229;
                                float _3052 = dot(vec3(_3049, _3050, _3051), vec3(_3049, _3050, _3051));
                                float _3055 = inversesqrt(_3052);
                                float _3056 = _3055 * _3049;
                                float _3057 = _3055 * _3050;
                                float _3058 = _3055 * _3051;
                                float _3062 = 1.0 - (_3052 / (_2916 * _2916));
                                float _4109 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                                float _3063 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
                                float _3067 = sqrt(_3052) * _2931.w;
                                float _3069 = 1.39999997615814208984375 / (_3067 + 1.39999997615814208984375);
                                float _3070 = _3069 * _3069;
                                float _3073 = ((1.0 - _3070) * dot(vec3(_3056, _3057, _3058), vec3(_488, _491, _494))) + _3070;
                                float _3076 = _3067 * _3067;
                                float _3080 = (fma(_2229, _2958.z, fma(_2228, _2958.y, _2958.x * _2227)) + _2958.w) / _3021;
                                float _3081 = (fma(_2229, _2974.z, fma(_2228, _2974.y, _2974.x * _2227)) + _2974.w) / _3021;
                                float _3085 = 1.0 - dot(vec2(_3080, _3081), vec2(_3080, _3081));
                                float _4125 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                                float _3086 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
                                float _3087 = _3086 * (((isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0))) * _3063) / ((_3076 * 0.699999988079071044921875) + 1.0));
                                float _3099 = exp2(log2(1.0 / ((_3076 * 3.5) + 5.0)) * 0.25);
                                float _3100 = 1.0 - _564;
                                float _3107 = sqrt(1.0 - ((1.0 - (_3100 * _3100)) * (1.0 - (_3099 * _3099))));
                                float _3108 = _3107 * _3107;
                                float _3109 = _3108 * _3108;
                                float _3110 = _3056 - _2557;
                                float _3111 = _3057 - _2558;
                                float _3112 = _3058 - _2559;
                                float _3116 = inversesqrt(dot(vec3(_3110, _3111, _3112), vec3(_3110, _3111, _3112)));
                                float _3120 = dot(vec3(_488, _491, _494), vec3((-0.0) - _2557, (-0.0) - _2558, (-0.0) - _2559));
                                float _4136 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                                float _3123 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
                                float _3124 = dot(vec3(_488, _491, _494), vec3(_3116 * _3110, _3116 * _3111, _3116 * _3112));
                                float _4147 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                                float _3127 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
                                float _3131 = ((_3127 * _3127) * (_3109 + (-1.0))) + 1.0;
                                float _3132 = _3069 * _3108;
                                float _3133 = _3132 * _3132;
                                float _3139 = ((1.0 - _3133) * dot(vec3(_488, _491, _494), vec3(_3056, _3057, _3058))) + _3133;
                                float _4158 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                                float _3140 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
                                float _3141 = 1.0 - _3108;
                                float _3151 = (0.5 / (((_3140 * ((_3123 * _3141) + _3108)) + 9.9999999392252902907785028219223e-09) + (((_3140 * _3141) + _3108) * _3123))) * _3140;
                                float _4169 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                                float _3161 = (_3086 * _3063) * (((_3109 * 3.1415927410125732421875) * (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0)))) / ((_3131 * _3131) * ((_3076 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3161 * _2943.x;
                                frontier_phi_73_pred_1 = _3161 * _2943.y;
                                frontier_phi_73_pred_2 = _3087 * _2931.z;
                                frontier_phi_73_pred_3 = _3087 * _2931.y;
                                frontier_phi_73_pred_4 = _3087 * _2931.x;
                                frontier_phi_73_pred_5 = _3161 * _2943.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3165 = frontier_phi_73_pred;
                            _3166 = frontier_phi_73_pred_1;
                            _3170 = frontier_phi_73_pred_2;
                            _3169 = frontier_phi_73_pred_3;
                            _3168 = frontier_phi_73_pred_4;
                            _3167 = frontier_phi_73_pred_5;
                            _2873 = _3168 + _2886;
                            _2874 = _3169 + _2887;
                            _2875 = _3170 + _2888;
                            _2870 = _3165 + _2883;
                            _2871 = _3166 + _2884;
                            _2872 = _3167 + _2885;
                            if (_2890 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2883 = _2870;
                                _2884 = _2871;
                                _2885 = _2872;
                                _2886 = _2873;
                                _2887 = _2874;
                                _2888 = _2875;
                                _2889 = _2890;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2873;
                        frontier_phi_67_pred_1 = _2874;
                        frontier_phi_67_pred_2 = _2875;
                        frontier_phi_67_pred_3 = _2872;
                        frontier_phi_67_pred_4 = _2871;
                        frontier_phi_67_pred_5 = _2870;
                    }
                    _2538 = frontier_phi_67_pred;
                    _2540 = frontier_phi_67_pred_1;
                    _2542 = frontier_phi_67_pred_2;
                    _2536 = frontier_phi_67_pred_3;
                    _2534 = frontier_phi_67_pred_4;
                    _2532 = frontier_phi_67_pred_5;
                    uint _2677 = _2676 + 1u;
                    if (_2677 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2670 = _2532;
                        _2671 = _2534;
                        _2672 = _2536;
                        _2673 = _2538;
                        _2674 = _2540;
                        _2675 = _2542;
                        _2676 = _2677;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2540;
                frontier_phi_55_56_ladder_1 = _2542;
                frontier_phi_55_56_ladder_2 = _2538;
                frontier_phi_55_56_ladder_3 = _2536;
                frontier_phi_55_56_ladder_4 = _2534;
                frontier_phi_55_56_ladder_5 = _2532;
            }
            else
            {
                frontier_phi_55_56_ladder = _2417;
                frontier_phi_55_56_ladder_1 = _2419;
                frontier_phi_55_56_ladder_2 = _2415;
                frontier_phi_55_56_ladder_3 = _2413;
                frontier_phi_55_56_ladder_4 = _2411;
                frontier_phi_55_56_ladder_5 = _2409;
            }
            _2531 = frontier_phi_55_56_ladder_5;
            _2533 = frontier_phi_55_56_ladder_4;
            _2535 = frontier_phi_55_56_ladder_3;
            _2537 = frontier_phi_55_56_ladder_2;
            _2539 = frontier_phi_55_56_ladder;
            _2541 = frontier_phi_55_56_ladder_1;
        }
        float _2546 = isnan(1.0) ? _548 : (isnan(_548) ? 1.0 : min(_548, 1.0));
        _2286 = (_2546 * _2537) + _1722;
        _2288 = (_2546 * _2539) + _1724;
        _2290 = (_2546 * _2541) + _1726;
        _2292 = ((_2531 * _533) * _2546) + _2067;
        _2294 = ((_2533 * _535) * _2546) + _2069;
        _2296 = ((_2535 * _536) * _2546) + _2071;
    }
    else
    {
        _2286 = _1722;
        _2288 = _1724;
        _2290 = _1726;
        _2292 = _2067;
        _2294 = _2069;
        _2296 = _2071;
    }
    uint _2302 = _509 + uint(cbMatDynParam._m0[0u].w);
    float _2310 = ((_364 * cbMtdParam._m0[11u].x) * (_348.x + _333.x)) * cbInstanceData._m0[_2302].x;
    float _2313 = ((_364 * cbMtdParam._m0[11u].y) * (_348.y + _333.y)) * cbInstanceData._m0[_2302].y;
    float _2316 = ((_364 * cbMtdParam._m0[11u].z) * (_348.z + _333.z)) * cbInstanceData._m0[_2302].z;
    float _4185 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _4196 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _4207 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _2333 = (((isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_2286 + ((isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0))) * _548))) + ((_2292 + ((isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))) * _1358)) * cbPerFrame._m0[3u].x)) + _2310;
    float _2335 = (_2313 + ((_2294 + ((isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0))) * _1358)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_2288 + ((isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0))) * _548)));
    float _2337 = (_2316 + ((_2296 + ((isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))) * _1358)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_2290 + ((isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0))) * _548)));
    float _4233 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2350 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
    uint _2351 = _507 + 6u;
    float _2359 = _467 / cbSceneParam._m0[86u].x;
    float _2360 = _468 / cbSceneParam._m0[86u].y;
    vec4 _2374 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2359, _2360, (log2((isnan(cbSceneParam._m0[77u].w) ? _401 : (isnan(_401) ? cbSceneParam._m0[77u].w : min(_401, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2376 = _2374.x;
    float _2377 = _2374.y;
    float _2378 = _2374.z;
    float _2379 = _2374.w;
    float _2472;
    float _2474;
    float _2476;
    float _2478;
    if (_401 > cbSceneParam._m0[78u].w)
    {
        float _2434 = isnan(_401) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _401 : min(cbSceneParam._m0[80u].w, _401));
        float _2435 = _2434 / _401;
        float _2446 = _2435 * _452;
        float _2447 = _453 * _2435;
        float _2448 = (-0.0) - _2447;
        float _2450 = _2435 * _454;
        float _2452 = (cbSceneParam._m0[77u].w * _2448) / _2434;
        float _2453 = _2452 + cbSceneParam._m0[79u].w;
        float _2454 = cbSceneParam._m0[79u].w - _2447;
        float _2460 = sqrt(((_2446 * _2446) + (_2447 * _2447)) + (_2450 * _2450));
        float _2463 = (1.0 - (cbSceneParam._m0[77u].w / _2434)) * _2460;
        float _2468 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2470 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2632;
        if (abs((_2448 - _2452) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2632 = ((((_2453 > 0.0) ? exp2(_2468 * _2453) : (2.0 - exp2(_2470 * _2453))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2463;
        }
        else
        {
            float _2592 = 1.0 / cbSceneParam._m0[80u].x;
            float _2593 = isnan(_2454) ? _2453 : (isnan(_2453) ? _2454 : max(_2453, _2454));
            float _2594 = isnan(_2454) ? _2453 : (isnan(_2453) ? _2454 : min(_2453, _2454));
            float _2603 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : min(_2593, 0.0));
            float _2604 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : min(_2594, 0.0));
            _2632 = ((abs(_2460 / _2448) * cbSceneParam._m0[80u].y) * ((((_2603 - _2604) * 2.0) - ((exp2(_2468 * (isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0)))) - exp2(_2468 * (isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0))))) * _2592)) - ((exp2(_2470 * _2603) - exp2(_2470 * _2604)) * _2592))) + (_2463 * cbSceneParam._m0[80u].z);
        }
        vec4 _2634 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2359, _2360, 1.0), 0.0);
        float _2643 = exp2((_2632 * (-1.44269502162933349609375)) * (1.0 - _2634.w));
        float _2644 = log2(_2643);
        float _2660 = log2(_2379);
        _2472 = (exp2(_2660 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2644 * cbSceneParam._m0[78u].x)) * _2634.x) / cbSceneParam._m0[78u].x)) + _2376;
        _2474 = (exp2(_2660 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2644 * cbSceneParam._m0[78u].y)) * _2634.y) / cbSceneParam._m0[78u].y)) + _2377;
        _2476 = (exp2(_2660 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2644 * cbSceneParam._m0[78u].z)) * _2634.z) / cbSceneParam._m0[78u].z)) + _2378;
        _2478 = _2643 * _2379;
    }
    else
    {
        _2472 = _2376;
        _2474 = _2377;
        _2476 = _2378;
        _2478 = _2379;
    }
    float _2490 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2491 = _2490 == 3.0;
    float _2492 = log2(_2478);
    float _2496 = exp2(_2492 * cbSceneParam._m0[78u].x);
    float _2497 = exp2(_2492 * cbSceneParam._m0[78u].y);
    float _2498 = exp2(_2492 * cbSceneParam._m0[78u].z);
    float _2499 = _2496 * (isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0)));
    float _2500 = _2497 * (isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0)));
    float _2501 = _2498 * (isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0)));
    float _2510 = (_2490 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2510 * (_2491 ? _2499 : (_2499 + (cbSceneParam._m0[72u].w * _2472)));
    SV_Target.y = _2510 * (_2491 ? _2500 : (_2500 + (cbSceneParam._m0[72u].w * _2474)));
    SV_Target.z = _2510 * (_2491 ? _2501 : (_2501 + (cbSceneParam._m0[72u].w * _2476)));
    SV_Target.w = cbInstanceData._m0[_2351].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2310) * _2350) * _2496) * _2510;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2313) * _2350) * _2497) * _2510;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2316) * _2350) * _2498) * _2510;
    SV_Target_1.w = cbInstanceData._m0[_2351].w;
}


