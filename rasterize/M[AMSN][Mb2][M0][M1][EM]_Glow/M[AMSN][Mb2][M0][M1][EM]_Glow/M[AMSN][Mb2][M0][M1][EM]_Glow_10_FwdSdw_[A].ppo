#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1096;
float _3808;
float _3809;
float _3810;
float _3811;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _249 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _255 = _249.x * cbMtdParam._m0[9u].x;
    float _256 = _249.y * cbMtdParam._m0[9u].y;
    float _257 = _249.z * cbMtdParam._m0[9u].z;
    vec4 _295 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _311 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3820 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _312 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _319 = (((_295.x * cbMtdParam._m0[10u].x) - _255) * _312) + _255;
    float _320 = (((_295.y * cbMtdParam._m0[10u].y) - _256) * _312) + _256;
    float _321 = (((_295.z * cbMtdParam._m0[10u].z) - _257) * _312) + _257;
    vec4 _341 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _356 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _358 = _356.x;
    float _376 = ((texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[7u].w)).x - _358) * _312) + _358;
    vec4 _389 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _397 = (_389.x * 2.0) + (-1.0);
    float _399 = (_389.y * 2.0) + (-1.0);
    float _400 = dot(vec2(_397, _399), vec2(_397, _399));
    float _3831 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    vec4 _417 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _421 = _417.z;
    float _424 = (_417.x * 2.0) + (-1.0);
    float _425 = (_417.y * 2.0) + (-1.0);
    float _426 = dot(vec2(_424, _425), vec2(_424, _425));
    float _3842 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _431 = sqrt(1.0 - (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))));
    float _434 = (_312 * (_389.z - _421)) + _421;
    vec4 _461 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _476 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _490 = (TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_341.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].x + 1.0);
    float _3853 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _491 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _498 = (_312 * (_397 - _424)) + _424;
    float _499 = (_312 * (_399 - _425)) + _425;
    float _500 = (_312 * (sqrt(1.0 - (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0)))) - _431)) + _431;
    float _503 = fma(_500, _220 * NORMAL.x, fma(_499, _227 * TANGENT.x, (_213 * _205) * _498));
    float _506 = fma(_500, _220 * NORMAL.y, fma(_499, _227 * TANGENT.y, (_213 * _206) * _498));
    float _509 = fma(_500, _220 * NORMAL.z, fma(_499, _227 * TANGENT.z, (_213 * _207) * _498));
    float _513 = inversesqrt(dot(vec3(_503, _506, _509), vec3(_503, _506, _509)));
    float _514 = _513 * _503;
    float _515 = _513 * _506;
    float _516 = _513 * _509;
    float _3864 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _517 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    float _3875 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _3886 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _3897 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _3908 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _521 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _537 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _578 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _588 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _578);
    float _589 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _578);
    float _590 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _578);
    float _594 = inversesqrt(dot(vec3(_588, _589, _590), vec3(_588, _589, _590)));
    float _595 = _588 * _594;
    float _596 = _589 * _594;
    float _597 = _590 * _594;
    vec4 _602 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _604 = _602.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _776 = sqrt(((_588 * _588) + (_589 * _589)) + (_590 * _590));
        float _782 = (cbMatDynParam._m0[5u].x * _776) + cbMatDynParam._m0[5u].y;
        float _3919 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _783 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _787 = (cbMatDynParam._m0[5u].z * _776) + cbMatDynParam._m0[5u].w;
        float _3930 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) - _783)) + _783) < ((_604 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _615 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _616 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _634 = fma(_516, cbSceneParam._m0[5u].z, fma(_515, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _514));
    float _637 = fma(_516, cbSceneParam._m0[6u].z, fma(_515, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _514));
    float _640 = fma(_516, cbSceneParam._m0[7u].z, fma(_515, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _514));
    uint _653 = uint(roundEven(NORMAL.w)) * 13u;
    uint _654 = _653 + 9u;
    uint _655 = _654 + uint(cbMatDynParam._m0[0u].w);
    float _661 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0)))) * cbInstanceData._m0[_655].x;
    float _662 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0)))) * cbInstanceData._m0[_655].y;
    float _663 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0)))) * cbInstanceData._m0[_655].z;
    float _3941 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _664 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
    float _3952 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _665 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _3963 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _666 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _667 = 1.0 - _521;
    float _668 = _664 * _667;
    float _669 = _665 * _667;
    float _670 = _666 * _667;
    float _675 = (_664 + (-0.039999999105930328369140625)) * _521;
    float _676 = (_665 + (-0.039999999105930328369140625)) * _521;
    float _677 = (_666 + (-0.039999999105930328369140625)) * _521;
    float _678 = _675 + 0.039999999105930328369140625;
    float _680 = _676 + 0.039999999105930328369140625;
    float _681 = _677 + 0.039999999105930328369140625;
    vec4 _690 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _615, cbSceneParam._m0[86u].y * _616));
    float _693 = _690.x * TEXCOORD_3.w;
    float _694 = dot(vec3(_514, _515, _516), vec3(_595, _596, _597));
    float _697 = _694 * 2.0;
    float _701 = (_697 * _514) - _595;
    float _702 = (_697 * _515) - _596;
    float _703 = (_697 * _516) - _597;
    float _707 = abs(dot(vec3(_595, _596, _597), vec3(_514, _515, _516)));
    float _3974 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _709 = sqrt(_517);
    float _722 = exp2((_709 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_709 * 3.0));
    float _728 = (1.0 - _722) * ((_709 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _729 = _722 * _709;
    float _757 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _761 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _765 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1095;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _820 = fma(_765, cbModelParam._m0[26u].z, fma(_761, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _757));
        float _824 = fma(_765, cbModelParam._m0[27u].z, fma(_761, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _757));
        float _828 = fma(_765, cbModelParam._m0[28u].z, fma(_761, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _757));
        float _853 = _757 + _514;
        float _854 = _761 + _515;
        float _855 = _765 + _516;
        float _865 = fma(_855, cbModelParam._m0[26u].z, fma(_854, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _853)) - _820;
        float _866 = fma(_855, cbModelParam._m0[27u].z, fma(_854, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _853)) - _824;
        float _867 = fma(_855, cbModelParam._m0[28u].z, fma(_854, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _853)) - _828;
        float _871 = inversesqrt(dot(vec3(_865, _866, _867), vec3(_865, _866, _867)));
        float _884 = ((_871 * _865) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_820 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _885 = ((_871 * _866) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_824 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _886 = ((_871 * _867) / cbModelParam._m0[34u].z) + ((((((_828 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        vec4 _903 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        vec4 _910 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        float _923 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _924 = _923 * (_889.x + (-0.5));
        float _925 = _923 * (_889.y + (-0.5));
        float _926 = _923 * (_889.z + (-0.5));
        float _933 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_896.x + (-0.5));
        float _935 = _933 * (_896.y + (-0.5));
        float _936 = _933 * (_896.z + (-0.5));
        float _943 = exp2((_903.w + (-0.5)) * 20.0) * 2.0;
        float _944 = _943 * (_903.x + (-0.5));
        float _945 = _943 * (_903.y + (-0.5));
        float _946 = _943 * (_903.z + (-0.5));
        float _953 = exp2((_910.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_910.x + (-0.5));
        float _955 = _953 * (_910.y + (-0.5));
        float _956 = _953 * (_910.z + (-0.5));
        float _957 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _958 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _959 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _960 = _924 * 0.5;
        float _961 = _934 * 0.5;
        float _962 = _944 * 0.5;
        float _963 = dot(vec3(_960, _961, _962), vec3(_960, _961, _962));
        float _968 = (_963 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_963);
        float _977 = (dot(vec3(_514, _515, _516), vec3(_968 * _960, _968 * _961, _968 * _962)) + 1.0) * 0.5;
        float _4000 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _987 = sqrt(((_961 * _961) + (_960 * _960)) + (_962 * _962)) / (_957 + 9.9999997473787516355514526367188e-06);
        float _4011 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _989 = _988 * 2.0;
        float _993 = (1.0 - _988) / (_988 + 1.0);
        float _4022 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1003 = ((((1.0 - _994) * (_989 + 2.0)) * exp2(log2(isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_989 + 1.0))) + _994) * _957;
        float _1004 = _925 * 0.5;
        float _1005 = _935 * 0.5;
        float _1006 = _945 * 0.5;
        float _1007 = dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006));
        float _1012 = (_1007 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1007);
        float _1020 = (dot(vec3(_514, _515, _516), vec3(_1012 * _1004, _1012 * _1005, _1012 * _1006)) + 1.0) * 0.5;
        float _4033 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1029 = sqrt(((_1005 * _1005) + (_1004 * _1004)) + (_1006 * _1006)) / (_958 + 9.9999997473787516355514526367188e-06);
        float _4044 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1031 = _1030 * 2.0;
        float _1035 = (1.0 - _1030) / (_1030 + 1.0);
        float _4055 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1045 = ((((1.0 - _1036) * (_1031 + 2.0)) * exp2(log2(isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_1031 + 1.0))) + _1036) * _958;
        float _1046 = _926 * 0.5;
        float _1047 = _936 * 0.5;
        float _1048 = _946 * 0.5;
        float _1049 = dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048));
        float _1054 = (_1049 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1049);
        float _1062 = (dot(vec3(_514, _515, _516), vec3(_1054 * _1046, _1054 * _1047, _1054 * _1048)) + 1.0) * 0.5;
        float _4066 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1071 = sqrt(((_1047 * _1047) + (_1046 * _1046)) + (_1048 * _1048)) / (_959 + 9.9999997473787516355514526367188e-06);
        float _4077 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1073 = _1072 * 2.0;
        float _1077 = (1.0 - _1072) / (_1072 + 1.0);
        float _4088 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1087 = ((((1.0 - _1078) * (_1073 + 2.0)) * exp2(log2(isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_1073 + 1.0))) + _1078) * _959;
        _1095 = _926;
        _1097 = _925;
        _1098 = _924;
        _1099 = _936;
        _1100 = _935;
        _1101 = _934;
        _1102 = _946;
        _1103 = _945;
        _1104 = _944;
        _1105 = _959;
        _1106 = _958;
        _1107 = _957;
        _1108 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0)));
        _1109 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0)));
        _1110 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0)));
    }
    else
    {
        _1095 = _1096;
        _1097 = _1096;
        _1098 = _1096;
        _1099 = _1096;
        _1100 = _1096;
        _1101 = _1096;
        _1102 = _1096;
        _1103 = _1096;
        _1104 = _1096;
        _1105 = _1096;
        _1106 = _1096;
        _1107 = _1096;
        _1108 = 0.0;
        _1109 = 0.0;
        _1110 = 0.0;
    }
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1139 = fma(_765, cbModelParam._m0[30u].z, fma(_761, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _757));
        float _1143 = fma(_765, cbModelParam._m0[31u].z, fma(_761, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _757));
        float _1147 = fma(_765, cbModelParam._m0[32u].z, fma(_761, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _757));
        float _1170 = _757 + _514;
        float _1171 = _761 + _515;
        float _1172 = _765 + _516;
        float _1182 = fma(_1172, cbModelParam._m0[30u].z, fma(_1171, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1170)) - _1139;
        float _1183 = fma(_1172, cbModelParam._m0[31u].z, fma(_1171, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1170)) - _1143;
        float _1184 = fma(_1172, cbModelParam._m0[32u].z, fma(_1171, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1170)) - _1147;
        float _1188 = inversesqrt(dot(vec3(_1182, _1183, _1184), vec3(_1182, _1183, _1184)));
        float _1201 = ((_1188 * _1182) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1139 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1202 = ((_1188 * _1183) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1143 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1203 = ((_1188 * _1184) / cbModelParam._m0[35u].z) + ((((((_1147 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1201, _1202, _1203), 0.0);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1201, _1202, _1203), 0.0);
        vec4 _1219 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1201, _1202, _1203), 0.0);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1201, _1202, _1203), 0.0);
        float _1238 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1205.x + (-0.5));
        float _1240 = _1238 * (_1205.y + (-0.5));
        float _1241 = _1238 * (_1205.z + (-0.5));
        float _1248 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1212.x + (-0.5));
        float _1250 = _1248 * (_1212.y + (-0.5));
        float _1251 = _1248 * (_1212.z + (-0.5));
        float _1258 = exp2((_1219.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1219.x + (-0.5));
        float _1260 = _1258 * (_1219.y + (-0.5));
        float _1261 = _1258 * (_1219.z + (-0.5));
        float _1268 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1226.x + (-0.5));
        float _1270 = _1268 * (_1226.y + (-0.5));
        float _1271 = _1268 * (_1226.z + (-0.5));
        float _1272 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1273 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1274 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1275 = _1239 * 0.5;
        float _1276 = _1249 * 0.5;
        float _1277 = _1259 * 0.5;
        float _1278 = dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277));
        float _1283 = (_1278 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1278);
        float _1291 = (dot(vec3(_514, _515, _516), vec3(_1283 * _1275, _1283 * _1276, _1283 * _1277)) + 1.0) * 0.5;
        float _4129 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1300 = sqrt(((_1276 * _1276) + (_1275 * _1275)) + (_1277 * _1277)) / (_1272 + 9.9999997473787516355514526367188e-06);
        float _4140 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1302 = _1301 * 2.0;
        float _1306 = (1.0 - _1301) / (_1301 + 1.0);
        float _4151 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1316 = ((((1.0 - _1307) * (_1302 + 2.0)) * exp2(log2(isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_1302 + 1.0))) + _1307) * _1272;
        float _1317 = _1240 * 0.5;
        float _1318 = _1250 * 0.5;
        float _1319 = _1260 * 0.5;
        float _1320 = dot(vec3(_1317, _1318, _1319), vec3(_1317, _1318, _1319));
        float _1325 = (_1320 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1320);
        float _1333 = (dot(vec3(_514, _515, _516), vec3(_1325 * _1317, _1325 * _1318, _1325 * _1319)) + 1.0) * 0.5;
        float _4162 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1342 = sqrt(((_1318 * _1318) + (_1317 * _1317)) + (_1319 * _1319)) / (_1273 + 9.9999997473787516355514526367188e-06);
        float _4173 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1344 = _1343 * 2.0;
        float _1348 = (1.0 - _1343) / (_1343 + 1.0);
        float _4184 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1358 = ((((1.0 - _1349) * (_1344 + 2.0)) * exp2(log2(isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_1344 + 1.0))) + _1349) * _1273;
        float _1359 = _1241 * 0.5;
        float _1360 = _1251 * 0.5;
        float _1361 = _1261 * 0.5;
        float _1362 = dot(vec3(_1359, _1360, _1361), vec3(_1359, _1360, _1361));
        float _1367 = (_1362 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1362);
        float _1375 = (dot(vec3(_514, _515, _516), vec3(_1367 * _1359, _1367 * _1360, _1367 * _1361)) + 1.0) * 0.5;
        float _4195 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1384 = sqrt(((_1360 * _1360) + (_1359 * _1359)) + (_1361 * _1361)) / (_1274 + 9.9999997473787516355514526367188e-06);
        float _4206 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1386 = _1385 * 2.0;
        float _1390 = (1.0 - _1385) / (_1385 + 1.0);
        float _4217 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1400 = ((((1.0 - _1391) * (_1386 + 2.0)) * exp2(log2(isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_1386 + 1.0))) + _1391) * _1274;
        _1408 = _1241;
        _1409 = _1240;
        _1410 = _1239;
        _1411 = _1251;
        _1412 = _1250;
        _1413 = _1249;
        _1414 = _1261;
        _1415 = _1260;
        _1416 = _1259;
        _1417 = _1274;
        _1418 = _1273;
        _1419 = _1272;
        _1420 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)));
        _1421 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)));
        _1422 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)));
    }
    else
    {
        _1408 = _1096;
        _1409 = _1096;
        _1410 = _1096;
        _1411 = _1096;
        _1412 = _1096;
        _1413 = _1096;
        _1414 = _1096;
        _1415 = _1096;
        _1416 = _1096;
        _1417 = _1096;
        _1418 = _1096;
        _1419 = _1096;
        _1420 = 0.0;
        _1421 = 0.0;
        _1422 = 0.0;
    }
    float _1432 = (cbModelParam._m0[1u].x * (_1420 - _1108)) + _1108;
    float _1433 = (cbModelParam._m0[1u].x * (_1421 - _1109)) + _1109;
    float _1434 = (cbModelParam._m0[1u].x * (_1422 - _1110)) + _1110;
    float _1455 = fma(_1434, cbSceneParam._m0[89u].z, fma(_1433, cbSceneParam._m0[89u].y, _1432 * cbSceneParam._m0[89u].x));
    float _1458 = fma(_1434, cbSceneParam._m0[90u].z, fma(_1433, cbSceneParam._m0[90u].y, _1432 * cbSceneParam._m0[90u].x));
    float _1461 = fma(_1434, cbSceneParam._m0[91u].z, fma(_1433, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1432));
    float _1476 = _701 * 0.5;
    float _1477 = _702 * 0.5;
    float _1478 = _703 * 0.5;
    float _1479 = dot(vec4(_1476, _1477, _1478, 1.0), vec4(_1410, _1413, _1416, _1419));
    float _1482 = dot(vec4(_1476, _1477, _1478, 1.0), vec4(_1409, _1412, _1415, _1418));
    float _1485 = dot(vec4(_1476, _1477, _1478, 1.0), vec4(_1408, _1411, _1414, _1417));
    float _1519;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1492 = dot(vec4(_1476, _1477, _1478, 1.0), vec4(_1095, _1099, _1102, _1105));
        float _1496 = dot(vec4(_1476, _1477, _1478, 1.0), vec4(_1097, _1100, _1103, _1106));
        float _1500 = dot(vec4(_1476, _1477, _1478, 1.0), vec4(_1098, _1101, _1104, _1107));
        float _1507 = dot(vec4(cbModelParam._m0[39u]), vec4(_1476, _1477, _1478, 1.0));
        _1519 = dot(vec3(isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)), isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)), isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1507) ? 0.0 : (isnan(0.0) ? _1507 : max(0.0, _1507))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1519 = 1.0;
    }
    float _1530;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1521 = dot(vec4(cbModelParam._m0[40u]), vec4(_1476, _1477, _1478, 1.0));
        _1530 = dot(vec3(isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)), isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)), isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1521) ? 0.0 : (isnan(0.0) ? _1521 : max(0.0, _1521))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1530 = 1.0;
    }
    float _1534 = (_1530 * cbModelParam._m0[1u].x) + (_1519 * (1.0 - cbModelParam._m0[1u].x));
    float _1544 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _517);
    float _1545 = isnan(_1544) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1544 : min(cbModelParam._m0[25u].z, _1544));
    float _1625;
    float _1627;
    float _1629;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1592 = fma(_765, cbModelParam._m0[13u].z, fma(_761, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _757)) + cbModelParam._m0[13u].w;
        float _1596 = fma(_765, cbModelParam._m0[14u].z, fma(_761, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _757)) + cbModelParam._m0[14u].w;
        float _1600 = fma(_765, cbModelParam._m0[15u].z, fma(_761, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _757)) + cbModelParam._m0[15u].w;
        float _1603 = fma(_703, cbModelParam._m0[13u].z, fma(_702, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _701));
        float _1606 = fma(_703, cbModelParam._m0[14u].z, fma(_702, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _701));
        float _1609 = fma(_703, cbModelParam._m0[15u].z, fma(_702, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _701));
        float _1637;
        if (_1603 > 0.0)
        {
            _1637 = abs((1.0 - _1592) / _1603);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1603 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1592 + 1.0) / _1603);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1637 = frontier_phi_17_15_ladder;
        }
        float _1811;
        if (_1606 > 0.0)
        {
            _1811 = abs((1.0 - _1596) / _1606);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1606 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1596 + 1.0) / _1606);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1811 = frontier_phi_26_22_ladder;
        }
        float _2106;
        if (_1609 > 0.0)
        {
            _2106 = abs((1.0 - _1600) / _1609);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1609 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1600 + 1.0) / _1609);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2106 = frontier_phi_38_33_ladder;
        }
        float _2108 = isnan(_1811) ? _1637 : (isnan(_1637) ? _1811 : min(_1637, _1811));
        float _2109 = isnan(_2106) ? _2108 : (isnan(_2108) ? _2106 : min(_2108, _2106));
        float _2113 = (_2109 * _1603) + _1592;
        float _2114 = (_2109 * _1606) + _1596;
        float _2115 = (_2109 * _1609) + _1600;
        float _2116 = _2109 * 9.9999997473787516355514526367188e-05;
        float _2118 = (-1.0) - _2116;
        float _2120 = _2116 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2115 > _2120) || ((_2115 < _2118) || ((_2114 > _2120) || ((_2114 < _2118) || ((_2113 < _2118) || (_2113 > _2120))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2260 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2115, cbModelParam._m0[9u].z, fma(_2114, cbModelParam._m0[9u].y, _2113 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2115, cbModelParam._m0[10u].z, fma(_2114, cbModelParam._m0[10u].y, _2113 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2115, cbModelParam._m0[11u].z, fma(_2114, cbModelParam._m0[11u].y, _2113 * cbModelParam._m0[11u].x))), _1545);
            frontier_phi_16_38_ladder = _2260.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2260.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2260.x * cbModelParam._m0[1u].y;
        }
        _1625 = frontier_phi_16_38_ladder_2;
        _1627 = frontier_phi_16_38_ladder_1;
        _1629 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1613 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_701, _702, _703), _1545);
        _1625 = _1613.x * cbModelParam._m0[1u].y;
        _1627 = _1613.y * cbModelParam._m0[1u].y;
        _1629 = _1613.z * cbModelParam._m0[1u].y;
    }
    float _1633 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _517);
    float _1634 = isnan(_1633) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1633 : min(cbModelParam._m0[25u].w, _1633));
    float _1725;
    float _1727;
    float _1729;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1689 = fma(_765, cbModelParam._m0[21u].z, fma(_761, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _757)) + cbModelParam._m0[21u].w;
        float _1693 = fma(_765, cbModelParam._m0[22u].z, fma(_761, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _757)) + cbModelParam._m0[22u].w;
        float _1697 = fma(_765, cbModelParam._m0[23u].z, fma(_761, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _757)) + cbModelParam._m0[23u].w;
        float _1700 = fma(_703, cbModelParam._m0[21u].z, fma(_702, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _701));
        float _1703 = fma(_703, cbModelParam._m0[22u].z, fma(_702, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _701));
        float _1706 = fma(_703, cbModelParam._m0[23u].z, fma(_702, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _701));
        float _1816;
        if (_1700 > 0.0)
        {
            _1816 = abs((1.0 - _1689) / _1700);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1700 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1689 + 1.0) / _1700);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1816 = frontier_phi_28_24_ladder;
        }
        float _2133;
        if (_1703 > 0.0)
        {
            _2133 = abs((1.0 - _1693) / _1703);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1703 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1693 + 1.0) / _1703);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2133 = frontier_phi_40_35_ladder;
        }
        float _2471;
        if (_1706 > 0.0)
        {
            _2471 = abs((1.0 - _1697) / _1706);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1706 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1697 + 1.0) / _1706);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2471 = frontier_phi_50_47_ladder;
        }
        float _2473 = isnan(_2133) ? _1816 : (isnan(_1816) ? _2133 : min(_1816, _2133));
        float _2474 = isnan(_2471) ? _2473 : (isnan(_2473) ? _2471 : min(_2473, _2471));
        float _2478 = (_2474 * _1700) + _1689;
        float _2479 = (_2474 * _1703) + _1693;
        float _2480 = (_2474 * _1706) + _1697;
        float _2481 = _2474 * 9.9999997473787516355514526367188e-05;
        float _2482 = (-1.0) - _2481;
        float _2484 = _2481 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2480 > _2484) || ((_2480 < _2482) || ((_2479 > _2484) || ((_2479 < _2482) || ((_2478 < _2482) || (_2478 > _2484))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2602 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2480, cbModelParam._m0[17u].z, fma(_2479, cbModelParam._m0[17u].y, _2478 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2480, cbModelParam._m0[18u].z, fma(_2479, cbModelParam._m0[18u].y, _2478 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2480, cbModelParam._m0[19u].z, fma(_2479, cbModelParam._m0[19u].y, _2478 * cbModelParam._m0[19u].x))), _1634);
            frontier_phi_25_50_ladder = _2602.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2602.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2602.x * cbModelParam._m0[1u].z;
        }
        _1725 = frontier_phi_25_50_ladder_2;
        _1727 = frontier_phi_25_50_ladder_1;
        _1729 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1709 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_701, _702, _703), _1634);
        _1725 = _1709.x * cbModelParam._m0[1u].z;
        _1727 = _1709.y * cbModelParam._m0[1u].z;
        _1729 = _1709.z * cbModelParam._m0[1u].z;
    }
    float _1742 = (((_728 * _678) + _729) * _693) * ((cbModelParam._m0[1u].w * (_1725 - _1625)) + _1625);
    float _1744 = (((_728 * _680) + _729) * _693) * ((cbModelParam._m0[1u].w * (_1727 - _1627)) + _1627);
    float _1746 = (((_728 * _681) + _729) * _693) * ((cbModelParam._m0[1u].w * (_1729 - _1629)) + _1629);
    float _1749 = fma(_1746, cbSceneParam._m0[89u].z, fma(_1744, cbSceneParam._m0[89u].y, _1742 * cbSceneParam._m0[89u].x));
    float _1752 = fma(_1746, cbSceneParam._m0[90u].z, fma(_1744, cbSceneParam._m0[90u].y, _1742 * cbSceneParam._m0[90u].x));
    float _1755 = fma(_1746, cbSceneParam._m0[91u].z, fma(_1744, cbSceneParam._m0[91u].y, _1742 * cbSceneParam._m0[91u].x));
    float _1790 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1794 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1798 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1802 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1803 = _1790 / _1802;
    float _1804 = _1794 / _1802;
    float _1805 = _1798 / _1802;
    float _1952;
    float _1953;
    float _1954;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1832 = ((uint(_1805 > cbSceneParam._m0[59u].y) + uint(_1805 > cbSceneParam._m0[59u].x)) + uint(_1805 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1833 = _1832 + 43u;
        uint _1841 = _1832 + 44u;
        uint _1849 = _1832 + 45u;
        uint _1857 = _1832 + 46u;
        float _1868 = fma(_1802, cbSceneParam._m0[_1833].w, fma(_1798, cbSceneParam._m0[_1833].z, fma(_1794, cbSceneParam._m0[_1833].y, _1790 * cbSceneParam._m0[_1833].x)));
        float _1872 = fma(_1802, cbSceneParam._m0[_1841].w, fma(_1798, cbSceneParam._m0[_1841].z, fma(_1794, cbSceneParam._m0[_1841].y, _1790 * cbSceneParam._m0[_1841].x)));
        float _1880 = fma(_1802, cbSceneParam._m0[_1857].w, fma(_1798, cbSceneParam._m0[_1857].z, fma(_1794, cbSceneParam._m0[_1857].y, _1790 * cbSceneParam._m0[_1857].x)));
        float _1885 = cbSceneParam._m0[33u].z * _1880;
        float _1887 = cbSceneParam._m0[33u].w * _1880;
        float _1890 = fma(_1802, cbSceneParam._m0[_1849].w, fma(_1798, cbSceneParam._m0[_1849].z, fma(_1794, cbSceneParam._m0[_1849].y, _1790 * cbSceneParam._m0[_1849].x))) / _1880;
        float _1938 = (cbSceneParam._m0[33u].x - sqrt(((_1804 * _1804) + (_1803 * _1803)) + (_1805 * _1805))) * cbSceneParam._m0[33u].y;
        float _4343 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
        float _1945 = (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1885 + _1868) / _1880, (_1887 + _1872) / _1880), _1890), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1887 + _1868) / _1880, (_1872 - _1885) / _1880), _1890), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1868 - _1885) / _1880, (_1872 - _1887) / _1880), _1890), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1868 - _1887) / _1880, (_1885 + _1872) / _1880), _1890), 0.0)).x), vec4(0.25)));
        _1952 = 1.0 - (_1945 * cbSceneParam._m0[34u].x);
        _1953 = 1.0 - (_1945 * cbSceneParam._m0[34u].y);
        _1954 = 1.0 - (_1945 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1952 = 1.0;
        _1953 = 1.0;
        _1954 = 1.0;
    }
    float _2018;
    float _2020;
    float _2022;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2006 = fma(_1802, cbSceneParam._m0[63u].w, fma(_1798, cbSceneParam._m0[63u].z, fma(_1794, cbSceneParam._m0[63u].y, _1790 * cbSceneParam._m0[63u].x)));
        float _2007 = fma(_1802, cbSceneParam._m0[60u].w, fma(_1798, cbSceneParam._m0[60u].z, fma(_1794, cbSceneParam._m0[60u].y, _1790 * cbSceneParam._m0[60u].x))) / _2006;
        float _2008 = fma(_1802, cbSceneParam._m0[61u].w, fma(_1798, cbSceneParam._m0[61u].z, fma(_1794, cbSceneParam._m0[61u].y, _1790 * cbSceneParam._m0[61u].x))) / _2006;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2007 >= cbSceneParam._m0[64u].x) && (_2008 >= cbSceneParam._m0[64u].y)) && (_2007 <= cbSceneParam._m0[64u].z)) && (_2008 <= cbSceneParam._m0[64u].w))
        {
            float _2146 = fma(_1802, cbSceneParam._m0[62u].w, fma(_1798, cbSceneParam._m0[62u].z, fma(_1794, cbSceneParam._m0[62u].y, _1790 * cbSceneParam._m0[62u].x))) / _2006;
            float _2150 = isnan(cbSceneParam._m0[41u].w) ? _2146 : (isnan(_2146) ? cbSceneParam._m0[41u].w : max(_2146, cbSceneParam._m0[41u].w));
            float _2193 = (cbSceneParam._m0[33u].x - sqrt(((_1804 * _1804) + (_1803 * _1803)) + (_1805 * _1805))) * cbSceneParam._m0[33u].y;
            float _4359 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
            float _2200 = (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2007, cbSceneParam._m0[33u].w + _2008), _2150), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2007, _2008 - cbSceneParam._m0[33u].z), _2150), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2007 - cbSceneParam._m0[33u].z, _2008 - cbSceneParam._m0[33u].w), _2150), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2007 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2008), _2150), 0.0)).x), vec4(0.25)));
            float _2204 = 1.0 - (_2200 * cbSceneParam._m0[34u].x);
            float _2205 = 1.0 - (_2200 * cbSceneParam._m0[34u].y);
            float _2206 = 1.0 - (_2200 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2206) ? _1954 : (isnan(_1954) ? _2206 : min(_1954, _2206));
            frontier_phi_37_36_ladder_1 = isnan(_2205) ? _1953 : (isnan(_1953) ? _2205 : min(_1953, _2205));
            frontier_phi_37_36_ladder_2 = isnan(_2204) ? _1952 : (isnan(_1952) ? _2204 : min(_1952, _2204));
        }
        else
        {
            frontier_phi_37_36_ladder = _1954;
            frontier_phi_37_36_ladder_1 = _1953;
            frontier_phi_37_36_ladder_2 = _1952;
        }
        _2018 = frontier_phi_37_36_ladder_2;
        _2020 = frontier_phi_37_36_ladder_1;
        _2022 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2018 = _1952;
        _2020 = _1953;
        _2022 = _1954;
    }
    uvec4 _2027 = floatBitsToUint(cbInstanceData._m0[_653 + 5u]);
    uint _2029 = _2027.x * 14u;
    uint _2030 = _2029 + 13u;
    float _2037 = _693 + (-1.0);
    float _2042 = (cbLight._m0[_2030].x * _2037) + 1.0;
    float _2043 = (cbLight._m0[_2030].y * _2037) + 1.0;
    float _2044 = (cbLight._m0[_2030].z * _2037) + 1.0;
    float _2045 = (cbLight._m0[_2030].w * _2037) + 1.0;
    uint _2046 = _2029 + 5u;
    float _2052 = isnan(1.0) ? _2043 : (isnan(_2043) ? 1.0 : min(_2043, 1.0));
    uint _2056 = _2029 + 4u;
    float _2065 = isnan(1.0) ? _2042 : (isnan(_2042) ? 1.0 : min(_2042, 1.0));
    uint _2069 = _2029 | 1u;
    float _2080 = dot(vec3(cbLight._m0[_2029].xyz), vec3(_514, _515, _516));
    float _2083 = dot(vec3(cbLight._m0[_2069].xyz), vec3(_514, _515, _516));
    float _4395 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _4406 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _2088 = (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * 0.3183098733425140380859375;
    float _2090 = (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * 0.3183098733425140380859375;
    float _2097 = ((cbLight._m0[_2046].x * _2052) * _2090) + (((cbLight._m0[_2056].x * _2018) * _2065) * _2088);
    float _2098 = ((_2052 * cbLight._m0[_2046].y) * _2090) + (((cbLight._m0[_2056].y * _2020) * _2065) * _2088);
    float _2099 = ((_2052 * cbLight._m0[_2046].z) * _2090) + (((cbLight._m0[_2056].z * _2022) * _2065) * _2088);
    uvec4 _2103 = floatBitsToUint(cbLight._m0[_2029 + 12u]);
    bool _2105 = _2103.x == 0u;
    float _2207;
    float _2209;
    float _2211;
    if (_2105)
    {
        _2207 = _2097;
        _2209 = _2098;
        _2211 = _2099;
    }
    else
    {
        uint _2215 = _2029 + 6u;
        float _2231 = (dot(vec3(cbLight._m0[_2029 + 2u].xyz), vec3(_514, _515, _516)) * 0.5) + 0.5;
        float _2232 = _2231 * _2231;
        float _4417 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        float _2233 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _2234 = isnan(1.0) ? _2044 : (isnan(_2044) ? 1.0 : min(_2044, 1.0));
        _2207 = (((cbLight._m0[_2215].x * 0.3183098733425140380859375) * _2233) * _2234) + _2097;
        _2209 = (((cbLight._m0[_2215].y * 0.3183098733425140380859375) * _2233) * _2234) + _2098;
        _2211 = (((cbLight._m0[_2215].z * 0.3183098733425140380859375) * _2233) * _2234) + _2099;
    }
    bool _2214 = _2103.y == 0u;
    float _2269;
    float _2271;
    float _2273;
    if (_2214)
    {
        _2269 = _2207;
        _2271 = _2209;
        _2273 = _2211;
    }
    else
    {
        uint _2442 = _2029 + 7u;
        float _2458 = (dot(vec3(cbLight._m0[_2029 + 3u].xyz), vec3(_514, _515, _516)) * 0.5) + 0.5;
        float _2459 = _2458 * _2458;
        float _4433 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2460 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _2461 = isnan(1.0) ? _2045 : (isnan(_2045) ? 1.0 : min(_2045, 1.0));
        _2269 = (((cbLight._m0[_2442].x * 0.3183098733425140380859375) * _2460) * _2461) + _2207;
        _2271 = (((cbLight._m0[_2442].y * 0.3183098733425140380859375) * _2460) * _2461) + _2209;
        _2273 = (((cbLight._m0[_2442].z * 0.3183098733425140380859375) * _2460) * _2461) + _2211;
    }
    uint _2276 = _2029 + 8u;
    float _2289 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2029].w)) * _517) * 0.949999988079071044921875);
    float _2290 = _2289 * _2289;
    float _2291 = cbLight._m0[_2029].x + _595;
    float _2292 = cbLight._m0[_2029].y + _596;
    float _2293 = cbLight._m0[_2029].z + _597;
    float _2297 = inversesqrt(dot(vec3(_2291, _2292, _2293), vec3(_2291, _2292, _2293)));
    float _2298 = _2297 * _2291;
    float _2299 = _2297 * _2292;
    float _2300 = _2297 * _2293;
    float _2301 = dot(vec3(_514, _515, _516), vec3(cbLight._m0[_2029].xyz));
    float _4449 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2304 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
    float _4460 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _2305 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
    float _2306 = dot(vec3(_514, _515, _516), vec3(_2298, _2299, _2300));
    float _4471 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
    float _2309 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
    float _2310 = dot(vec3(cbLight._m0[_2029].xyz), vec3(_2298, _2299, _2300));
    float _4482 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2314 = _2290 * _2290;
    float _2318 = ((_2309 * _2309) * (_2314 + (-1.0))) + 1.0;
    float _2326 = exp2(log2(1.0 - (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0)))) * 5.0);
    float _2327 = 0.959999978542327880859375 - _675;
    float _2329 = 0.959999978542327880859375 - _676;
    float _2330 = 0.959999978542327880859375 - _677;
    float _2337 = 1.0 - _2290;
    float _2348 = (0.5 / (((_2305 * ((_2304 * _2337) + _2290)) + 9.9999999392252902907785028219223e-09) + (((_2305 * _2337) + _2290) * _2304))) * _2304;
    float _4493 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2350 = (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * (_2314 / ((_2318 * _2318) * 3.141590118408203125));
    uint _2364 = _2029 + 9u;
    float _2375 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2069].w)) * _517) * 0.949999988079071044921875);
    float _2376 = _2375 * _2375;
    float _2377 = cbLight._m0[_2069].x + _595;
    float _2378 = cbLight._m0[_2069].y + _596;
    float _2379 = cbLight._m0[_2069].z + _597;
    float _2383 = inversesqrt(dot(vec3(_2377, _2378, _2379), vec3(_2377, _2378, _2379)));
    float _2384 = _2383 * _2377;
    float _2385 = _2383 * _2378;
    float _2386 = _2383 * _2379;
    float _2387 = dot(vec3(_514, _515, _516), vec3(cbLight._m0[_2069].xyz));
    float _4504 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _2390 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
    float _2391 = dot(vec3(_514, _515, _516), vec3(_2384, _2385, _2386));
    float _4515 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2394 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
    float _2395 = dot(vec3(cbLight._m0[_2069].xyz), vec3(_2384, _2385, _2386));
    float _4526 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
    float _2399 = _2376 * _2376;
    float _2403 = ((_2394 * _2394) * (_2399 + (-1.0))) + 1.0;
    float _2410 = exp2(log2(1.0 - (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0)))) * 5.0);
    float _2417 = 1.0 - _2376;
    float _2427 = (0.5 / (((_2305 * ((_2390 * _2417) + _2376)) + 9.9999999392252902907785028219223e-09) + (((_2305 * _2417) + _2376) * _2390))) * _2390;
    float _4537 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
    float _2429 = (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * (_2399 / ((_2403 * _2403) * 3.141590118408203125));
    float _2439 = (((((_2410 * _2327) + _678) * cbLight._m0[_2364].x) * _2429) * _2052) + ((((cbLight._m0[_2276].x * _2018) * ((_2326 * _2327) + _678)) * _2350) * _2065);
    float _2440 = (((((_2410 * _2329) + _680) * cbLight._m0[_2364].y) * _2429) * _2052) + ((((cbLight._m0[_2276].y * _2020) * ((_2326 * _2329) + _680)) * _2350) * _2065);
    float _2441 = (((((_2410 * _2330) + _681) * cbLight._m0[_2364].z) * _2429) * _2052) + ((((cbLight._m0[_2276].z * _2022) * ((_2326 * _2330) + _681)) * _2350) * _2065);
    float _2497;
    float _2499;
    float _2501;
    if (_2105)
    {
        _2497 = _2439;
        _2499 = _2440;
        _2501 = _2441;
    }
    else
    {
        uint _2503 = _2029 + 2u;
        uint _2507 = _2029 + 10u;
        float _2521 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2503].w)) * _517) * 0.949999988079071044921875);
        float _2522 = _2521 * _2521;
        float _2523 = cbLight._m0[_2503].x + _595;
        float _2524 = cbLight._m0[_2503].y + _596;
        float _2525 = cbLight._m0[_2503].z + _597;
        float _2529 = inversesqrt(dot(vec3(_2523, _2524, _2525), vec3(_2523, _2524, _2525)));
        float _2530 = _2529 * _2523;
        float _2531 = _2529 * _2524;
        float _2532 = _2529 * _2525;
        float _2533 = dot(vec3(_514, _515, _516), vec3(cbLight._m0[_2503].xyz));
        float _4548 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2536 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
        float _2537 = dot(vec3(_514, _515, _516), vec3(_2530, _2531, _2532));
        float _4559 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2540 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
        float _2541 = dot(vec3(cbLight._m0[_2503].xyz), vec3(_2530, _2531, _2532));
        float _4570 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2545 = _2522 * _2522;
        float _2549 = ((_2540 * _2540) * (_2545 + (-1.0))) + 1.0;
        float _2556 = exp2(log2(1.0 - (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0)))) * 5.0);
        float _2563 = 1.0 - _2522;
        float _2573 = (0.5 / (((_2305 * ((_2536 * _2563) + _2522)) + 9.9999999392252902907785028219223e-09) + (((_2305 * _2563) + _2522) * _2536))) * _2536;
        float _4581 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2575 = (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (_2545 / ((_2549 * _2549) * 3.141590118408203125));
        float _2576 = isnan(1.0) ? _2044 : (isnan(_2044) ? 1.0 : min(_2044, 1.0));
        _2497 = (((((_2556 * _2327) + _678) * cbLight._m0[_2507].x) * _2575) * _2576) + _2439;
        _2499 = (((((_2556 * _2329) + _680) * cbLight._m0[_2507].y) * _2575) * _2576) + _2440;
        _2501 = (((((_2556 * _2330) + _681) * cbLight._m0[_2507].z) * _2575) * _2576) + _2441;
    }
    float _2607;
    float _2609;
    float _2611;
    if (_2214)
    {
        _2607 = _2497;
        _2609 = _2499;
        _2611 = _2501;
    }
    else
    {
        uint _2618 = _2029 + 3u;
        uint _2622 = _2029 + 11u;
        float _2636 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2618].w)) * _517) * 0.949999988079071044921875);
        float _2637 = _2636 * _2636;
        float _2638 = cbLight._m0[_2618].x + _595;
        float _2639 = cbLight._m0[_2618].y + _596;
        float _2640 = cbLight._m0[_2618].z + _597;
        float _2644 = inversesqrt(dot(vec3(_2638, _2639, _2640), vec3(_2638, _2639, _2640)));
        float _2645 = _2644 * _2638;
        float _2646 = _2644 * _2639;
        float _2647 = _2644 * _2640;
        float _2648 = dot(vec3(_514, _515, _516), vec3(cbLight._m0[_2618].xyz));
        float _4597 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2651 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
        float _2652 = dot(vec3(_514, _515, _516), vec3(_2645, _2646, _2647));
        float _4608 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        float _2655 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
        float _2656 = dot(vec3(cbLight._m0[_2618].xyz), vec3(_2645, _2646, _2647));
        float _4619 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2660 = _2637 * _2637;
        float _2664 = ((_2655 * _2655) * (_2660 + (-1.0))) + 1.0;
        float _2671 = exp2(log2(1.0 - (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0)))) * 5.0);
        float _2678 = 1.0 - _2637;
        float _2688 = (0.5 / (((_2305 * ((_2651 * _2678) + _2637)) + 9.9999999392252902907785028219223e-09) + (((_2305 * _2678) + _2637) * _2651))) * _2651;
        float _4630 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
        float _2690 = (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * (_2660 / ((_2664 * _2664) * 3.141590118408203125));
        float _2691 = isnan(1.0) ? _2045 : (isnan(_2045) ? 1.0 : min(_2045, 1.0));
        _2607 = (((((_2671 * _2327) + _678) * cbLight._m0[_2622].x) * _2690) * _2691) + _2497;
        _2609 = (((((_2671 * _2329) + _680) * cbLight._m0[_2622].y) * _2690) * _2691) + _2499;
        _2611 = (((((_2671 * _2330) + _681) * cbLight._m0[_2622].z) * _2690) * _2691) + _2501;
    }
    float _2757;
    float _2759;
    float _2761;
    float _2763;
    float _2765;
    float _2767;
    if (_2027.y == 0u)
    {
        uvec4 _2712 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2713 = _2712.x;
        uint _2724 = uint((float(_2712.y) * floor(float(uint(cbSceneParam._m0[85u].y * _616) / _2713))) + floor(float(uint(cbSceneParam._m0[85u].x * _615) / _2713)));
        float _2734 = (log2(_1805 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2735 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
        uint _2738 = uint(isnan(14.0) ? _2735 : (isnan(_2735) ? 14.0 : min(_2735, 14.0)));
        uvec4 _2743 = texelFetch(g_lightClusterGridBuffer, int(((_2738 << 2u) + (_2724 << 6u)) >> 2u));
        uint _2744 = _2743.x;
        uint _2745 = _2712.z;
        float _2859;
        float _2861;
        float _2863;
        float _2865;
        float _2867;
        float _2869;
        if (((((1u << ((_2745 >> 4u) & 15u)) + 4294967295u) & _2744) == 0u) || ((_2745 & 240u) == 0u))
        {
            _2859 = 0.0;
            _2861 = 0.0;
            _2863 = 0.0;
            _2865 = 0.0;
            _2867 = 0.0;
            _2869 = 0.0;
        }
        else
        {
            float _2860;
            float _2862;
            float _2864;
            float _2866;
            float _2868;
            float _2870;
            float _3021 = 0.0;
            float _3022 = 0.0;
            float _3023 = 0.0;
            float _3024 = 0.0;
            float _3025 = 0.0;
            float _3026 = 0.0;
            uint _3027 = 0u;
            uint _3036;
            bool _3037;
            for (;;)
            {
                _3036 = texelFetch(g_lightClassification, int((((_2738 << 5u) + (_2724 << 9u)) + (_3027 << 2u)) >> 2u)).x;
                _3037 = _3036 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3037)
                {
                    frontier_phi_71_pred = _3026;
                    frontier_phi_71_pred_1 = _3025;
                    frontier_phi_71_pred_2 = _3024;
                    frontier_phi_71_pred_3 = _3023;
                    frontier_phi_71_pred_4 = _3022;
                    frontier_phi_71_pred_5 = _3021;
                }
                else
                {
                    float _3166;
                    float _3167;
                    float _3168;
                    float _3169;
                    float _3170;
                    float _3171;
                    uint _3172;
                    _3166 = _3021;
                    _3167 = _3022;
                    _3168 = _3023;
                    _3169 = _3024;
                    _3170 = _3025;
                    _3171 = _3026;
                    _3172 = _3036;
                    float _3093;
                    float _3094;
                    float _3095;
                    float _3096;
                    float _3097;
                    float _3098;
                    for (;;)
                    {
                        uint _3176 = uint(findLSB(_3172)) + (_3027 << 5u);
                        uint _3173 = (_3172 + 4294967295u) & _3172;
                        uint _3178 = _3176 * 48u;
                        vec4 _3192 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3178)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 3u)).x));
                        uint _3198 = (_3176 * 48u) + 4u;
                        vec4 _3211 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3198)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 3u)).x));
                        uint _3217 = (_3176 * 48u) + 8u;
                        vec3 _3228 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3217)).x, texelFetch(g_PointLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3217 + 2u)).x));
                        float _3232 = _3192.x - _1803;
                        float _3233 = _3192.y - _1804;
                        float _3234 = _3192.z - _1805;
                        float _3235 = dot(vec3(_3232, _3233, _3234), vec3(_3232, _3233, _3234));
                        float _3238 = inversesqrt(_3235);
                        float _3239 = _3238 * _3232;
                        float _3240 = _3238 * _3233;
                        float _3241 = _3238 * _3234;
                        float _3242 = dot(vec3(_634, _637, _640), vec3(_3239, _3240, _3241));
                        float _3247 = 1.0 - (_3235 * _3192.w);
                        float _4656 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                        float _3248 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
                        float _3249 = sqrt(_3235) * _3211.w;
                        float _3252 = 1.39999997615814208984375 / (_3249 + 1.39999997615814208984375);
                        float _3253 = _3252 * _3252;
                        float _3256 = ((1.0 - _3253) * _3242) + _3253;
                        float _3259 = _3249 * _3249;
                        float _3263 = ((isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0))) * _3248) / ((_3259 * 0.699999988079071044921875) + 1.0);
                        float _3267 = (-0.0) - _1803;
                        float _3268 = (-0.0) - _1804;
                        float _3269 = (-0.0) - _1805;
                        float _3273 = inversesqrt(dot(vec3(_3267, _3268, _3269), vec3(_3267, _3268, _3269)));
                        float _3274 = _3273 * _3267;
                        float _3275 = _3273 * _3268;
                        float _3276 = _3273 * _3269;
                        float _3283 = exp2(log2(1.0 / ((_3259 * 3.5) + 5.0)) * 0.25);
                        float _3284 = 1.0 - _709;
                        float _3291 = sqrt(1.0 - ((1.0 - (_3284 * _3284)) * (1.0 - (_3283 * _3283))));
                        float _3292 = _3291 * _3291;
                        float _3293 = _3292 * _3292;
                        float _3294 = _3274 + _3239;
                        float _3295 = _3275 + _3240;
                        float _3296 = _3276 + _3241;
                        float _3300 = inversesqrt(dot(vec3(_3294, _3295, _3296), vec3(_3294, _3295, _3296)));
                        float _3304 = dot(vec3(_634, _637, _640), vec3(_3274, _3275, _3276));
                        float _4672 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                        float _3307 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
                        float _3308 = dot(vec3(_634, _637, _640), vec3(_3300 * _3294, _3300 * _3295, _3300 * _3296));
                        float _4683 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                        float _3311 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
                        float _3315 = ((_3311 * _3311) * (_3293 + (-1.0))) + 1.0;
                        float _3316 = _3252 * _3292;
                        float _3317 = _3316 * _3316;
                        float _3320 = ((1.0 - _3317) * _3242) + _3317;
                        float _4694 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                        float _3321 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                        float _3322 = 1.0 - _3292;
                        float _3332 = (0.5 / (((_3321 * ((_3307 * _3322) + _3292)) + 9.9999999392252902907785028219223e-09) + (((_3321 * _3322) + _3292) * _3307))) * _3321;
                        float _4705 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                        float _3343 = (((_3293 * 3.1415927410125732421875) * (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0)))) / ((_3315 * _3315) * ((_3259 * 2.1991131305694580078125) + 3.141590118408203125))) * _3248;
                        _3096 = (_3263 * _3211.x) + _3169;
                        _3097 = (_3263 * _3211.y) + _3170;
                        _3098 = (_3263 * _3211.z) + _3171;
                        _3093 = (_3343 * _3228.x) + _3166;
                        _3094 = (_3343 * _3228.y) + _3167;
                        _3095 = (_3343 * _3228.z) + _3168;
                        if (_3173 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3166 = _3093;
                            _3167 = _3094;
                            _3168 = _3095;
                            _3169 = _3096;
                            _3170 = _3097;
                            _3171 = _3098;
                            _3172 = _3173;
                        }
                    }
                    frontier_phi_71_pred = _3098;
                    frontier_phi_71_pred_1 = _3097;
                    frontier_phi_71_pred_2 = _3096;
                    frontier_phi_71_pred_3 = _3095;
                    frontier_phi_71_pred_4 = _3094;
                    frontier_phi_71_pred_5 = _3093;
                }
                _2870 = frontier_phi_71_pred;
                _2868 = frontier_phi_71_pred_1;
                _2866 = frontier_phi_71_pred_2;
                _2864 = frontier_phi_71_pred_3;
                _2862 = frontier_phi_71_pred_4;
                _2860 = frontier_phi_71_pred_5;
                uint _3028 = _3027 + 1u;
                if (_3028 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3021 = _2860;
                    _3022 = _2862;
                    _3023 = _2864;
                    _3024 = _2866;
                    _3025 = _2868;
                    _3026 = _2870;
                    _3027 = _3028;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2859 = _2860;
            _2861 = _2862;
            _2863 = _2864;
            _2865 = _2866;
            _2867 = _2868;
            _2869 = _2870;
        }
        uvec4 _2873 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2874 = _2873.z;
        uint _2876 = (_2874 >> 8u) & 15u;
        float _2989;
        float _2991;
        float _2993;
        float _2995;
        float _2997;
        float _2999;
        if (((4294967295u << _2876) & _2744) == 0u)
        {
            _2989 = _2859;
            _2991 = _2861;
            _2993 = _2863;
            _2995 = _2865;
            _2997 = _2867;
            _2999 = _2869;
        }
        else
        {
            float _3014 = inversesqrt(dot(vec3(_1803, _1804, _1805), vec3(_1803, _1804, _1805)));
            float _3015 = _3014 * _1803;
            float _3016 = _3014 * _1804;
            float _3017 = _3014 * _1805;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2876 < ((_2874 >> 12u) & 15u))
            {
                float _2990;
                float _2992;
                float _2994;
                float _2996;
                float _2998;
                float _3000;
                float _3149 = _2859;
                float _3150 = _2861;
                float _3151 = _2863;
                float _3152 = _2865;
                float _3153 = _2867;
                float _3154 = _2869;
                uint _3155 = _2876;
                uint _3164;
                bool _3165;
                for (;;)
                {
                    _3164 = texelFetch(g_lightClassification, int((((_2738 << 5u) + (_2724 << 9u)) + (_3155 << 2u)) >> 2u)).x;
                    _3165 = _3164 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3165)
                    {
                        frontier_phi_82_pred = _3154;
                        frontier_phi_82_pred_1 = _3153;
                        frontier_phi_82_pred_2 = _3152;
                        frontier_phi_82_pred_3 = _3151;
                        frontier_phi_82_pred_4 = _3150;
                        frontier_phi_82_pred_5 = _3149;
                    }
                    else
                    {
                        float _3357;
                        float _3358;
                        float _3359;
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3652;
                        float _3653;
                        float _3654;
                        float _3655;
                        float _3656;
                        float _3657;
                        float _3370 = _3149;
                        float _3371 = _3150;
                        float _3372 = _3151;
                        float _3373 = _3152;
                        float _3374 = _3153;
                        float _3375 = _3154;
                        uint _3376 = _3164;
                        uint _3377;
                        vec4 _3402;
                        float _3403;
                        vec4 _3418;
                        vec3 _3430;
                        vec4 _3445;
                        vec4 _3461;
                        float _3508;
                        bool _3509;
                        for (;;)
                        {
                            uint _3387 = ((_3155 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3376));
                            _3377 = (_3376 + 4294967295u) & _3376;
                            uint _3389 = _3387 * 40u;
                            _3402 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3389)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 3u)).x));
                            _3403 = _3402.w;
                            uint _3405 = (_3387 * 40u) + 4u;
                            _3418 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3405)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 3u)).x));
                            uint _3420 = (_3387 * 40u) + 8u;
                            _3430 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3420)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 2u)).x));
                            uint _3432 = (_3387 * 40u) + 16u;
                            _3445 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3432)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 3u)).x));
                            uint _3448 = (_3387 * 40u) + 20u;
                            _3461 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3448)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 3u)).x));
                            uint _3464 = (_3387 * 40u) + 24u;
                            vec4 _3477 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3464)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 3u)).x));
                            uint _3483 = (_3387 * 40u) + 28u;
                            vec4 _3496 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3483)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 3u)).x));
                            _3508 = fma(_1805, _3496.z, fma(_1804, _3496.y, _3496.x * _1803)) + _3496.w;
                            _3509 = !((fma(_1805, _3477.z, fma(_1804, _3477.y, _3477.x * _1803)) + _3477.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3509)
                            {
                                float _3536 = _3402.x - _1803;
                                float _3537 = _3402.y - _1804;
                                float _3538 = _3402.z - _1805;
                                float _3539 = dot(vec3(_3536, _3537, _3538), vec3(_3536, _3537, _3538));
                                float _3542 = inversesqrt(_3539);
                                float _3543 = _3542 * _3536;
                                float _3544 = _3542 * _3537;
                                float _3545 = _3542 * _3538;
                                float _3549 = 1.0 - (_3539 / (_3403 * _3403));
                                float _4716 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                                float _3550 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
                                float _3554 = sqrt(_3539) * _3418.w;
                                float _3556 = 1.39999997615814208984375 / (_3554 + 1.39999997615814208984375);
                                float _3557 = _3556 * _3556;
                                float _3560 = ((1.0 - _3557) * dot(vec3(_3543, _3544, _3545), vec3(_634, _637, _640))) + _3557;
                                float _3563 = _3554 * _3554;
                                float _3567 = (fma(_1805, _3445.z, fma(_1804, _3445.y, _3445.x * _1803)) + _3445.w) / _3508;
                                float _3568 = (fma(_1805, _3461.z, fma(_1804, _3461.y, _3461.x * _1803)) + _3461.w) / _3508;
                                float _3572 = 1.0 - dot(vec2(_3567, _3568), vec2(_3567, _3568));
                                float _4732 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                                float _3573 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
                                float _3574 = _3573 * (((isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0))) * _3550) / ((_3563 * 0.699999988079071044921875) + 1.0));
                                float _3586 = exp2(log2(1.0 / ((_3563 * 3.5) + 5.0)) * 0.25);
                                float _3587 = 1.0 - _709;
                                float _3594 = sqrt(1.0 - ((1.0 - (_3587 * _3587)) * (1.0 - (_3586 * _3586))));
                                float _3595 = _3594 * _3594;
                                float _3596 = _3595 * _3595;
                                float _3597 = _3543 - _3015;
                                float _3598 = _3544 - _3016;
                                float _3599 = _3545 - _3017;
                                float _3603 = inversesqrt(dot(vec3(_3597, _3598, _3599), vec3(_3597, _3598, _3599)));
                                float _3607 = dot(vec3(_634, _637, _640), vec3((-0.0) - _3015, (-0.0) - _3016, (-0.0) - _3017));
                                float _4743 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                                float _3610 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
                                float _3611 = dot(vec3(_634, _637, _640), vec3(_3603 * _3597, _3603 * _3598, _3603 * _3599));
                                float _4754 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                                float _3614 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
                                float _3618 = ((_3614 * _3614) * (_3596 + (-1.0))) + 1.0;
                                float _3619 = _3556 * _3595;
                                float _3620 = _3619 * _3619;
                                float _3626 = ((1.0 - _3620) * dot(vec3(_634, _637, _640), vec3(_3543, _3544, _3545))) + _3620;
                                float _4765 = isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0));
                                float _3627 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
                                float _3628 = 1.0 - _3595;
                                float _3638 = (0.5 / (((_3627 * ((_3610 * _3628) + _3595)) + 9.9999999392252902907785028219223e-09) + (((_3627 * _3628) + _3595) * _3610))) * _3627;
                                float _4776 = isnan(0.0) ? _3638 : (isnan(_3638) ? 0.0 : max(_3638, 0.0));
                                float _3648 = (_3573 * _3550) * (((_3596 * 3.1415927410125732421875) * (isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0)))) / ((_3618 * _3618) * ((_3563 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3574 * _3418.z;
                                frontier_phi_88_pred_1 = _3574 * _3418.y;
                                frontier_phi_88_pred_2 = _3574 * _3418.x;
                                frontier_phi_88_pred_3 = _3648 * _3430.z;
                                frontier_phi_88_pred_4 = _3648 * _3430.y;
                                frontier_phi_88_pred_5 = _3648 * _3430.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3657 = frontier_phi_88_pred;
                            _3656 = frontier_phi_88_pred_1;
                            _3655 = frontier_phi_88_pred_2;
                            _3654 = frontier_phi_88_pred_3;
                            _3653 = frontier_phi_88_pred_4;
                            _3652 = frontier_phi_88_pred_5;
                            _3360 = _3655 + _3373;
                            _3361 = _3656 + _3374;
                            _3362 = _3657 + _3375;
                            _3357 = _3652 + _3370;
                            _3358 = _3653 + _3371;
                            _3359 = _3654 + _3372;
                            if (_3377 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3370 = _3357;
                                _3371 = _3358;
                                _3372 = _3359;
                                _3373 = _3360;
                                _3374 = _3361;
                                _3375 = _3362;
                                _3376 = _3377;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3362;
                        frontier_phi_82_pred_1 = _3361;
                        frontier_phi_82_pred_2 = _3360;
                        frontier_phi_82_pred_3 = _3359;
                        frontier_phi_82_pred_4 = _3358;
                        frontier_phi_82_pred_5 = _3357;
                    }
                    _3000 = frontier_phi_82_pred;
                    _2998 = frontier_phi_82_pred_1;
                    _2996 = frontier_phi_82_pred_2;
                    _2994 = frontier_phi_82_pred_3;
                    _2992 = frontier_phi_82_pred_4;
                    _2990 = frontier_phi_82_pred_5;
                    uint _3156 = _3155 + 1u;
                    if (_3156 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3149 = _2990;
                        _3150 = _2992;
                        _3151 = _2994;
                        _3152 = _2996;
                        _3153 = _2998;
                        _3154 = _3000;
                        _3155 = _3156;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2996;
                frontier_phi_63_64_ladder_1 = _3000;
                frontier_phi_63_64_ladder_2 = _2998;
                frontier_phi_63_64_ladder_3 = _2994;
                frontier_phi_63_64_ladder_4 = _2992;
                frontier_phi_63_64_ladder_5 = _2990;
            }
            else
            {
                frontier_phi_63_64_ladder = _2865;
                frontier_phi_63_64_ladder_1 = _2869;
                frontier_phi_63_64_ladder_2 = _2867;
                frontier_phi_63_64_ladder_3 = _2863;
                frontier_phi_63_64_ladder_4 = _2861;
                frontier_phi_63_64_ladder_5 = _2859;
            }
            _2989 = frontier_phi_63_64_ladder_5;
            _2991 = frontier_phi_63_64_ladder_4;
            _2993 = frontier_phi_63_64_ladder_3;
            _2995 = frontier_phi_63_64_ladder;
            _2997 = frontier_phi_63_64_ladder_2;
            _2999 = frontier_phi_63_64_ladder_1;
        }
        float _3004 = isnan(1.0) ? _693 : (isnan(_693) ? 1.0 : min(_693, 1.0));
        _2757 = (_3004 * _2995) + _2269;
        _2759 = (_3004 * _2997) + _2271;
        _2761 = (_3004 * _2999) + _2273;
        _2763 = ((_2989 * _678) * _3004) + _2607;
        _2765 = ((_2991 * _680) * _3004) + _2609;
        _2767 = ((_2993 * _681) * _3004) + _2611;
    }
    else
    {
        _2757 = _2269;
        _2759 = _2271;
        _2761 = _2273;
        _2763 = _2607;
        _2765 = _2609;
        _2767 = _2611;
    }
    uint _2773 = _654 + uint(cbMatDynParam._m0[0u].w);
    float _2781 = ((_491 * cbMtdParam._m0[11u].x) * (_476.x + _461.x)) * cbInstanceData._m0[_2773].x;
    float _2784 = ((_491 * cbMtdParam._m0[11u].y) * (_476.y + _461.y)) * cbInstanceData._m0[_2773].y;
    float _2787 = ((_491 * cbMtdParam._m0[11u].z) * (_476.z + _461.z)) * cbInstanceData._m0[_2773].z;
    float _4792 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _4803 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _4814 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _2804 = (((isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0))) * (_2757 + ((isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0))) * _693))) + ((_2763 + ((isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))) * _1534)) * cbPerFrame._m0[3u].x)) + _2781;
    float _2806 = (_2784 + ((_2765 + ((isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))) * _1534)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0))) * (_2759 + ((isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0))) * _693)));
    float _2808 = (_2787 + ((_2767 + ((isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))) * _1534)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0))) * (_2761 + ((isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0))) * _693)));
    float _2809 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
    float _2810 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
    float _2811 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
    float _2817 = cbMtdParam._m0[2u].x * _2781;
    float _2818 = cbMtdParam._m0[2u].y * _2784;
    float _2819 = cbMtdParam._m0[2u].z * _2787;
    float _4840 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2821 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
    uint _2822 = _653 + 6u;
    float _2830 = _615 / cbSceneParam._m0[86u].x;
    float _2831 = _616 / cbSceneParam._m0[86u].y;
    vec4 _2845 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2830, _2831, (log2((isnan(cbSceneParam._m0[77u].w) ? _537 : (isnan(_537) ? cbSceneParam._m0[77u].w : min(_537, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2847 = _2845.x;
    float _2848 = _2845.y;
    float _2849 = _2845.z;
    float _2850 = _2845.w;
    float _2922;
    float _2924;
    float _2926;
    float _2928;
    if (_537 > cbSceneParam._m0[78u].w)
    {
        float _2884 = isnan(_537) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _537 : min(cbSceneParam._m0[80u].w, _537));
        float _2885 = _2884 / _537;
        float _2896 = _2885 * _588;
        float _2897 = _589 * _2885;
        float _2898 = (-0.0) - _2897;
        float _2900 = _2885 * _590;
        float _2902 = (cbSceneParam._m0[77u].w * _2898) / _2884;
        float _2903 = _2902 + cbSceneParam._m0[79u].w;
        float _2904 = cbSceneParam._m0[79u].w - _2897;
        float _2910 = sqrt(((_2896 * _2896) + (_2897 * _2897)) + (_2900 * _2900));
        float _2913 = (1.0 - (cbSceneParam._m0[77u].w / _2884)) * _2910;
        float _2918 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2920 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3106;
        if (abs((_2898 - _2902) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3106 = ((((_2903 > 0.0) ? exp2(_2918 * _2903) : (2.0 - exp2(_2920 * _2903))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2913;
        }
        else
        {
            float _3050 = 1.0 / cbSceneParam._m0[80u].x;
            float _3051 = isnan(_2904) ? _2903 : (isnan(_2903) ? _2904 : max(_2903, _2904));
            float _3052 = isnan(_2904) ? _2903 : (isnan(_2903) ? _2904 : min(_2903, _2904));
            float _3061 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : min(_3051, 0.0));
            float _3062 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : min(_3052, 0.0));
            _3106 = ((abs(_2910 / _2898) * cbSceneParam._m0[80u].y) * ((((_3061 - _3062) * 2.0) - ((exp2(_2918 * (isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0)))) - exp2(_2918 * (isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0))))) * _3050)) - ((exp2(_2920 * _3061) - exp2(_2920 * _3062)) * _3050))) + (_2913 * cbSceneParam._m0[80u].z);
        }
        vec4 _3108 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2830, _2831, 1.0), 0.0);
        float _3117 = exp2((_3106 * (-1.44269502162933349609375)) * (1.0 - _3108.w));
        float _3118 = log2(_3117);
        float _3134 = log2(_2850);
        _2922 = (exp2(_3134 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3118 * cbSceneParam._m0[78u].x)) * _3108.x) / cbSceneParam._m0[78u].x)) + _2847;
        _2924 = (exp2(_3134 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3118 * cbSceneParam._m0[78u].y)) * _3108.y) / cbSceneParam._m0[78u].y)) + _2848;
        _2926 = (exp2(_3134 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3118 * cbSceneParam._m0[78u].z)) * _3108.z) / cbSceneParam._m0[78u].z)) + _2849;
        _2928 = _3117 * _2850;
    }
    else
    {
        _2922 = _2847;
        _2924 = _2848;
        _2926 = _2849;
        _2928 = _2850;
    }
    bool _3144;
    vec4 _2938;
    vec4 _2960;
    float _2962;
    float _2966;
    float _2967;
    float _2968;
    float _2971;
    float _2974;
    float _2977;
    float _2978;
    bool _2988;
    for (;;)
    {
        _2938 = cbMatDynParam._m0[0u];
        float _2940 = roundEven(_2938.y);
        bool _2941 = _2940 == 3.0;
        float _2942 = log2(_2928);
        float _2946 = exp2(_2942 * cbSceneParam._m0[78u].x);
        float _2947 = exp2(_2942 * cbSceneParam._m0[78u].y);
        float _2948 = exp2(_2942 * cbSceneParam._m0[78u].z);
        float _2949 = _2946 * _2809;
        float _2950 = _2947 * _2810;
        float _2951 = _2948 * _2811;
        float _2958 = _604 + (-0.5);
        _2960 = cbMtdParam._m0[1u];
        _2962 = _2960.y * _2958;
        float _2965 = (_2940 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2966 = _2965 * (_2941 ? _2949 : (_2949 + (cbSceneParam._m0[72u].w * _2922)));
        _2967 = _2965 * (_2941 ? _2950 : (_2950 + (cbSceneParam._m0[72u].w * _2924)));
        _2968 = _2965 * (_2941 ? _2951 : (_2951 + (cbSceneParam._m0[72u].w * _2926)));
        _2971 = ((_2817 * _2821) * _2946) * _2965;
        _2974 = ((_2818 * _2821) * _2947) * _2965;
        _2977 = ((_2819 * _2821) * _2948) * _2965;
        _2978 = _2958 * 0.999000012874603271484375;
        _2988 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2988)
        {
            if ((cbInstanceData._m0[_653 + 7u].x + _2978) < 0.5)
            {
                _3144 = true;
                break;
            }
        }
        uint _3085 = _654 + uint(_2938.w);
        if ((cbInstanceData._m0[_3085].w < 1.0) && ((cbInstanceData._m0[_3085].w + _2978) < 0.5))
        {
            _3144 = true;
            break;
        }
        if ((_2962 + 1.0) < _2960.x)
        {
            _3144 = true;
            break;
        }
        _3144 = false;
        break;
    }
    float _3348;
    if (_3144)
    {
        discard_state = true;
        _3348 = 0.0;
    }
    else
    {
        _3348 = cbInstanceData._m0[_2822].w;
    }
    SV_Target.x = _2966;
    SV_Target.y = _2967;
    SV_Target.z = _2968;
    SV_Target.w = _3348;
    SV_Target_1.x = _2971;
    SV_Target_1.y = _2974;
    SV_Target_1.z = _2977;
    SV_Target_1.w = cbInstanceData._m0[_2822].w;
    discard_exit();
}


