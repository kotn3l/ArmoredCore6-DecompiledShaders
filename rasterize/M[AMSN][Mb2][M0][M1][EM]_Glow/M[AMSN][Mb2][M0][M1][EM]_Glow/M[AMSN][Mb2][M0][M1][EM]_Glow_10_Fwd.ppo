#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1048;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _241 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _247 = _241.x * cbMtdParam._m0[9u].x;
    float _248 = _241.y * cbMtdParam._m0[9u].y;
    float _249 = _241.z * cbMtdParam._m0[9u].z;
    vec4 _287 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _303 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3423 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _304 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
    float _311 = (((_287.x * cbMtdParam._m0[10u].x) - _247) * _304) + _247;
    float _312 = (((_287.y * cbMtdParam._m0[10u].y) - _248) * _304) + _248;
    float _313 = (((_287.z * cbMtdParam._m0[10u].z) - _249) * _304) + _249;
    vec4 _333 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _348 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _350 = _348.x;
    float _368 = ((texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[7u].w)).x - _350) * _304) + _350;
    vec4 _381 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _389 = (_381.x * 2.0) + (-1.0);
    float _391 = (_381.y * 2.0) + (-1.0);
    float _392 = dot(vec2(_389, _391), vec2(_389, _391));
    float _3434 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    vec4 _409 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _413 = _409.z;
    float _416 = (_409.x * 2.0) + (-1.0);
    float _417 = (_409.y * 2.0) + (-1.0);
    float _418 = dot(vec2(_416, _417), vec2(_416, _417));
    float _3445 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _423 = sqrt(1.0 - (isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0))));
    float _426 = (_304 * (_381.z - _413)) + _413;
    vec4 _453 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _468 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _482 = (TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_333.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].x + 1.0);
    float _3456 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _483 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
    float _490 = (_304 * (_389 - _416)) + _416;
    float _491 = (_304 * (_391 - _417)) + _417;
    float _492 = (_304 * (sqrt(1.0 - (isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0)))) - _423)) + _423;
    float _495 = fma(_492, _212 * NORMAL.x, fma(_491, _219 * TANGENT.x, (_205 * _197) * _490));
    float _498 = fma(_492, _212 * NORMAL.y, fma(_491, _219 * TANGENT.y, (_205 * _198) * _490));
    float _501 = fma(_492, _212 * NORMAL.z, fma(_491, _219 * TANGENT.z, (_205 * _199) * _490));
    float _505 = inversesqrt(dot(vec3(_495, _498, _501), vec3(_495, _498, _501)));
    float _506 = _505 * _495;
    float _507 = _505 * _498;
    float _508 = _505 * _501;
    float _3467 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _509 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
    float _3478 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _3489 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _3500 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _3511 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _513 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
    float _529 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _570 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _580 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _570);
    float _581 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _570);
    float _582 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _570);
    float _586 = inversesqrt(dot(vec3(_580, _581, _582), vec3(_580, _581, _582)));
    float _587 = _580 * _586;
    float _588 = _581 * _586;
    float _589 = _582 * _586;
    float _595 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _596 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _614 = fma(_508, cbSceneParam._m0[5u].z, fma(_507, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _506));
    float _617 = fma(_508, cbSceneParam._m0[6u].z, fma(_507, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _506));
    float _620 = fma(_508, cbSceneParam._m0[7u].z, fma(_507, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _506));
    uint _633 = uint(roundEven(NORMAL.w)) * 13u;
    uint _634 = _633 + 9u;
    uint _635 = _634 + uint(cbMatDynParam._m0[0u].w);
    float _641 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0)))) * cbInstanceData._m0[_635].x;
    float _642 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0)))) * cbInstanceData._m0[_635].y;
    float _643 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0)))) * cbInstanceData._m0[_635].z;
    float _3522 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _644 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
    float _3533 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _645 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
    float _3544 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _646 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
    float _647 = 1.0 - _513;
    float _648 = _644 * _647;
    float _649 = _645 * _647;
    float _650 = _646 * _647;
    float _655 = (_644 + (-0.039999999105930328369140625)) * _513;
    float _656 = (_645 + (-0.039999999105930328369140625)) * _513;
    float _657 = (_646 + (-0.039999999105930328369140625)) * _513;
    float _658 = _655 + 0.039999999105930328369140625;
    float _660 = _656 + 0.039999999105930328369140625;
    float _661 = _657 + 0.039999999105930328369140625;
    vec4 _670 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _595, cbSceneParam._m0[86u].y * _596));
    float _673 = _670.x * TEXCOORD_3.w;
    float _674 = dot(vec3(_506, _507, _508), vec3(_587, _588, _589));
    float _677 = _674 * 2.0;
    float _681 = (_677 * _506) - _587;
    float _682 = (_677 * _507) - _588;
    float _683 = (_677 * _508) - _589;
    float _687 = abs(dot(vec3(_587, _588, _589), vec3(_506, _507, _508)));
    float _3555 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _689 = sqrt(_509);
    float _702 = exp2((_689 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_689 * 3.0));
    float _708 = (1.0 - _702) * ((_689 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _709 = _702 * _689;
    float _737 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _741 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _745 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1047;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _772 = fma(_745, cbModelParam._m0[26u].z, fma(_741, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _737));
        float _776 = fma(_745, cbModelParam._m0[27u].z, fma(_741, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _737));
        float _780 = fma(_745, cbModelParam._m0[28u].z, fma(_741, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _737));
        float _805 = _737 + _506;
        float _806 = _741 + _507;
        float _807 = _745 + _508;
        float _817 = fma(_807, cbModelParam._m0[26u].z, fma(_806, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _805)) - _772;
        float _818 = fma(_807, cbModelParam._m0[27u].z, fma(_806, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _805)) - _776;
        float _819 = fma(_807, cbModelParam._m0[28u].z, fma(_806, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _805)) - _780;
        float _823 = inversesqrt(dot(vec3(_817, _818, _819), vec3(_817, _818, _819)));
        float _836 = ((_823 * _817) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_772 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _837 = ((_823 * _818) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_776 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _838 = ((_823 * _819) / cbModelParam._m0[34u].z) + ((((((_780 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _841 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_836, _837, _838), 0.0);
        vec4 _848 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_836, _837, _838), 0.0);
        vec4 _855 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_836, _837, _838), 0.0);
        vec4 _862 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_836, _837, _838), 0.0);
        float _875 = exp2((_841.w + (-0.5)) * 20.0) * 2.0;
        float _876 = _875 * (_841.x + (-0.5));
        float _877 = _875 * (_841.y + (-0.5));
        float _878 = _875 * (_841.z + (-0.5));
        float _885 = exp2((_848.w + (-0.5)) * 20.0) * 2.0;
        float _886 = _885 * (_848.x + (-0.5));
        float _887 = _885 * (_848.y + (-0.5));
        float _888 = _885 * (_848.z + (-0.5));
        float _895 = exp2((_855.w + (-0.5)) * 20.0) * 2.0;
        float _896 = _895 * (_855.x + (-0.5));
        float _897 = _895 * (_855.y + (-0.5));
        float _898 = _895 * (_855.z + (-0.5));
        float _905 = exp2((_862.w + (-0.5)) * 20.0) * 2.0;
        float _906 = _905 * (_862.x + (-0.5));
        float _907 = _905 * (_862.y + (-0.5));
        float _908 = _905 * (_862.z + (-0.5));
        float _909 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _910 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _911 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _912 = _876 * 0.5;
        float _913 = _886 * 0.5;
        float _914 = _896 * 0.5;
        float _915 = dot(vec3(_912, _913, _914), vec3(_912, _913, _914));
        float _920 = (_915 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_915);
        float _929 = (dot(vec3(_506, _507, _508), vec3(_920 * _912, _920 * _913, _920 * _914)) + 1.0) * 0.5;
        float _3581 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _939 = sqrt(((_913 * _913) + (_912 * _912)) + (_914 * _914)) / (_909 + 9.9999997473787516355514526367188e-06);
        float _3592 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _941 = _940 * 2.0;
        float _945 = (1.0 - _940) / (_940 + 1.0);
        float _3603 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _946 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _955 = ((((1.0 - _946) * (_941 + 2.0)) * exp2(log2(isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) * (_941 + 1.0))) + _946) * _909;
        float _956 = _877 * 0.5;
        float _957 = _887 * 0.5;
        float _958 = _897 * 0.5;
        float _959 = dot(vec3(_956, _957, _958), vec3(_956, _957, _958));
        float _964 = (_959 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_959);
        float _972 = (dot(vec3(_506, _507, _508), vec3(_964 * _956, _964 * _957, _964 * _958)) + 1.0) * 0.5;
        float _3614 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _981 = sqrt(((_957 * _957) + (_956 * _956)) + (_958 * _958)) / (_910 + 9.9999997473787516355514526367188e-06);
        float _3625 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _983 = _982 * 2.0;
        float _987 = (1.0 - _982) / (_982 + 1.0);
        float _3636 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _997 = ((((1.0 - _988) * (_983 + 2.0)) * exp2(log2(isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))) * (_983 + 1.0))) + _988) * _910;
        float _998 = _878 * 0.5;
        float _999 = _888 * 0.5;
        float _1000 = _898 * 0.5;
        float _1001 = dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000));
        float _1006 = (_1001 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1001);
        float _1014 = (dot(vec3(_506, _507, _508), vec3(_1006 * _998, _1006 * _999, _1006 * _1000)) + 1.0) * 0.5;
        float _3647 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1023 = sqrt(((_999 * _999) + (_998 * _998)) + (_1000 * _1000)) / (_911 + 9.9999997473787516355514526367188e-06);
        float _3658 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1025 = _1024 * 2.0;
        float _1029 = (1.0 - _1024) / (_1024 + 1.0);
        float _3669 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1039 = ((((1.0 - _1030) * (_1025 + 2.0)) * exp2(log2(isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * (_1025 + 1.0))) + _1030) * _911;
        _1047 = _878;
        _1049 = _877;
        _1050 = _876;
        _1051 = _888;
        _1052 = _887;
        _1053 = _886;
        _1054 = _898;
        _1055 = _897;
        _1056 = _896;
        _1057 = _911;
        _1058 = _910;
        _1059 = _909;
        _1060 = cbModelParam._m0[36u].z * (isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0)));
        _1061 = cbModelParam._m0[36u].z * (isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0)));
        _1062 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0)));
    }
    else
    {
        _1047 = _1048;
        _1049 = _1048;
        _1050 = _1048;
        _1051 = _1048;
        _1052 = _1048;
        _1053 = _1048;
        _1054 = _1048;
        _1055 = _1048;
        _1056 = _1048;
        _1057 = _1048;
        _1058 = _1048;
        _1059 = _1048;
        _1060 = 0.0;
        _1061 = 0.0;
        _1062 = 0.0;
    }
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1088 = fma(_745, cbModelParam._m0[30u].z, fma(_741, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _737));
        float _1092 = fma(_745, cbModelParam._m0[31u].z, fma(_741, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _737));
        float _1096 = fma(_745, cbModelParam._m0[32u].z, fma(_741, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _737));
        float _1119 = _737 + _506;
        float _1120 = _741 + _507;
        float _1121 = _745 + _508;
        float _1131 = fma(_1121, cbModelParam._m0[30u].z, fma(_1120, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1119)) - _1088;
        float _1132 = fma(_1121, cbModelParam._m0[31u].z, fma(_1120, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1119)) - _1092;
        float _1133 = fma(_1121, cbModelParam._m0[32u].z, fma(_1120, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1119)) - _1096;
        float _1137 = inversesqrt(dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133)));
        float _1150 = ((_1137 * _1131) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1088 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1151 = ((_1137 * _1132) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1092 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1152 = ((_1137 * _1133) / cbModelParam._m0[35u].z) + ((((((_1096 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        float _1187 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1154.x + (-0.5));
        float _1189 = _1187 * (_1154.y + (-0.5));
        float _1190 = _1187 * (_1154.z + (-0.5));
        float _1197 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1161.x + (-0.5));
        float _1199 = _1197 * (_1161.y + (-0.5));
        float _1200 = _1197 * (_1161.z + (-0.5));
        float _1207 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1168.x + (-0.5));
        float _1209 = _1207 * (_1168.y + (-0.5));
        float _1210 = _1207 * (_1168.z + (-0.5));
        float _1217 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1175.x + (-0.5));
        float _1219 = _1217 * (_1175.y + (-0.5));
        float _1220 = _1217 * (_1175.z + (-0.5));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1224 = _1188 * 0.5;
        float _1225 = _1198 * 0.5;
        float _1226 = _1208 * 0.5;
        float _1227 = dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226));
        float _1232 = (_1227 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1227);
        float _1240 = (dot(vec3(_506, _507, _508), vec3(_1232 * _1224, _1232 * _1225, _1232 * _1226)) + 1.0) * 0.5;
        float _3710 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1249 = sqrt(((_1225 * _1225) + (_1224 * _1224)) + (_1226 * _1226)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _3721 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1251 = _1250 * 2.0;
        float _1255 = (1.0 - _1250) / (_1250 + 1.0);
        float _3732 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1265 = ((((1.0 - _1256) * (_1251 + 2.0)) * exp2(log2(isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) * (_1251 + 1.0))) + _1256) * _1221;
        float _1266 = _1189 * 0.5;
        float _1267 = _1199 * 0.5;
        float _1268 = _1209 * 0.5;
        float _1269 = dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268));
        float _1274 = (_1269 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1269);
        float _1282 = (dot(vec3(_506, _507, _508), vec3(_1274 * _1266, _1274 * _1267, _1274 * _1268)) + 1.0) * 0.5;
        float _3743 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1291 = sqrt(((_1267 * _1267) + (_1266 * _1266)) + (_1268 * _1268)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _3754 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1293 = _1292 * 2.0;
        float _1297 = (1.0 - _1292) / (_1292 + 1.0);
        float _3765 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1307 = ((((1.0 - _1298) * (_1293 + 2.0)) * exp2(log2(isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * (_1293 + 1.0))) + _1298) * _1222;
        float _1308 = _1190 * 0.5;
        float _1309 = _1200 * 0.5;
        float _1310 = _1210 * 0.5;
        float _1311 = dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310));
        float _1316 = (_1311 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1311);
        float _1324 = (dot(vec3(_506, _507, _508), vec3(_1316 * _1308, _1316 * _1309, _1316 * _1310)) + 1.0) * 0.5;
        float _3776 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1333 = sqrt(((_1309 * _1309) + (_1308 * _1308)) + (_1310 * _1310)) / (_1223 + 9.9999997473787516355514526367188e-06);
        float _3787 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1335 = _1334 * 2.0;
        float _1339 = (1.0 - _1334) / (_1334 + 1.0);
        float _3798 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1349 = ((((1.0 - _1340) * (_1335 + 2.0)) * exp2(log2(isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * (_1335 + 1.0))) + _1340) * _1223;
        _1357 = _1190;
        _1358 = _1189;
        _1359 = _1188;
        _1360 = _1200;
        _1361 = _1199;
        _1362 = _1198;
        _1363 = _1210;
        _1364 = _1209;
        _1365 = _1208;
        _1366 = _1223;
        _1367 = _1222;
        _1368 = _1221;
        _1369 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)));
        _1370 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)));
        _1371 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)));
    }
    else
    {
        _1357 = _1048;
        _1358 = _1048;
        _1359 = _1048;
        _1360 = _1048;
        _1361 = _1048;
        _1362 = _1048;
        _1363 = _1048;
        _1364 = _1048;
        _1365 = _1048;
        _1366 = _1048;
        _1367 = _1048;
        _1368 = _1048;
        _1369 = 0.0;
        _1370 = 0.0;
        _1371 = 0.0;
    }
    float _1381 = (cbModelParam._m0[1u].x * (_1369 - _1060)) + _1060;
    float _1382 = (cbModelParam._m0[1u].x * (_1370 - _1061)) + _1061;
    float _1383 = (cbModelParam._m0[1u].x * (_1371 - _1062)) + _1062;
    float _1404 = fma(_1383, cbSceneParam._m0[89u].z, fma(_1382, cbSceneParam._m0[89u].y, _1381 * cbSceneParam._m0[89u].x));
    float _1407 = fma(_1383, cbSceneParam._m0[90u].z, fma(_1382, cbSceneParam._m0[90u].y, _1381 * cbSceneParam._m0[90u].x));
    float _1410 = fma(_1383, cbSceneParam._m0[91u].z, fma(_1382, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1381));
    float _1425 = _681 * 0.5;
    float _1426 = _682 * 0.5;
    float _1427 = _683 * 0.5;
    float _1428 = dot(vec4(_1425, _1426, _1427, 1.0), vec4(_1359, _1362, _1365, _1368));
    float _1431 = dot(vec4(_1425, _1426, _1427, 1.0), vec4(_1358, _1361, _1364, _1367));
    float _1434 = dot(vec4(_1425, _1426, _1427, 1.0), vec4(_1357, _1360, _1363, _1366));
    float _1468;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1441 = dot(vec4(_1425, _1426, _1427, 1.0), vec4(_1047, _1051, _1054, _1057));
        float _1445 = dot(vec4(_1425, _1426, _1427, 1.0), vec4(_1049, _1052, _1055, _1058));
        float _1449 = dot(vec4(_1425, _1426, _1427, 1.0), vec4(_1050, _1053, _1056, _1059));
        float _1456 = dot(vec4(cbModelParam._m0[39u]), vec4(_1425, _1426, _1427, 1.0));
        _1468 = dot(vec3(isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)), isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)), isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1456) ? 0.0 : (isnan(0.0) ? _1456 : max(0.0, _1456))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1468 = 1.0;
    }
    float _1479;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1470 = dot(vec4(cbModelParam._m0[40u]), vec4(_1425, _1426, _1427, 1.0));
        _1479 = dot(vec3(isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)), isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)), isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1470) ? 0.0 : (isnan(0.0) ? _1470 : max(0.0, _1470))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1479 = 1.0;
    }
    float _1483 = (_1479 * cbModelParam._m0[1u].x) + (_1468 * (1.0 - cbModelParam._m0[1u].x));
    float _1493 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _509);
    float _1494 = isnan(_1493) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1493 : min(cbModelParam._m0[25u].z, _1493));
    float _1574;
    float _1576;
    float _1578;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1541 = fma(_745, cbModelParam._m0[13u].z, fma(_741, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _737)) + cbModelParam._m0[13u].w;
        float _1545 = fma(_745, cbModelParam._m0[14u].z, fma(_741, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _737)) + cbModelParam._m0[14u].w;
        float _1549 = fma(_745, cbModelParam._m0[15u].z, fma(_741, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _737)) + cbModelParam._m0[15u].w;
        float _1552 = fma(_683, cbModelParam._m0[13u].z, fma(_682, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _681));
        float _1555 = fma(_683, cbModelParam._m0[14u].z, fma(_682, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _681));
        float _1558 = fma(_683, cbModelParam._m0[15u].z, fma(_682, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _681));
        float _1586;
        if (_1552 > 0.0)
        {
            _1586 = abs((1.0 - _1541) / _1552);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1552 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1541 + 1.0) / _1552);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1586 = frontier_phi_14_12_ladder;
        }
        float _1791;
        if (_1555 > 0.0)
        {
            _1791 = abs((1.0 - _1545) / _1555);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1555 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1545 + 1.0) / _1555);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1791 = frontier_phi_23_19_ladder;
        }
        float _2045;
        if (_1558 > 0.0)
        {
            _2045 = abs((1.0 - _1549) / _1558);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1558 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1549 + 1.0) / _1558);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2045 = frontier_phi_35_30_ladder;
        }
        float _2047 = isnan(_1791) ? _1586 : (isnan(_1586) ? _1791 : min(_1586, _1791));
        float _2048 = isnan(_2045) ? _2047 : (isnan(_2047) ? _2045 : min(_2047, _2045));
        float _2052 = (_2048 * _1552) + _1541;
        float _2053 = (_2048 * _1555) + _1545;
        float _2054 = (_2048 * _1558) + _1549;
        float _2055 = _2048 * 9.9999997473787516355514526367188e-05;
        float _2057 = (-1.0) - _2055;
        float _2059 = _2055 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2054 > _2059) || ((_2054 < _2057) || ((_2053 > _2059) || ((_2053 < _2057) || ((_2052 < _2057) || (_2052 > _2059))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2182 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2054, cbModelParam._m0[9u].z, fma(_2053, cbModelParam._m0[9u].y, _2052 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2054, cbModelParam._m0[10u].z, fma(_2053, cbModelParam._m0[10u].y, _2052 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2054, cbModelParam._m0[11u].z, fma(_2053, cbModelParam._m0[11u].y, _2052 * cbModelParam._m0[11u].x))), _1494);
            frontier_phi_13_35_ladder = _2182.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2182.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2182.x * cbModelParam._m0[1u].y;
        }
        _1574 = frontier_phi_13_35_ladder_2;
        _1576 = frontier_phi_13_35_ladder_1;
        _1578 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1562 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_681, _682, _683), _1494);
        _1574 = _1562.x * cbModelParam._m0[1u].y;
        _1576 = _1562.y * cbModelParam._m0[1u].y;
        _1578 = _1562.z * cbModelParam._m0[1u].y;
    }
    float _1582 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _509);
    float _1583 = isnan(_1582) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1582 : min(cbModelParam._m0[25u].w, _1582));
    float _1674;
    float _1676;
    float _1678;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1638 = fma(_745, cbModelParam._m0[21u].z, fma(_741, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _737)) + cbModelParam._m0[21u].w;
        float _1642 = fma(_745, cbModelParam._m0[22u].z, fma(_741, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _737)) + cbModelParam._m0[22u].w;
        float _1646 = fma(_745, cbModelParam._m0[23u].z, fma(_741, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _737)) + cbModelParam._m0[23u].w;
        float _1649 = fma(_683, cbModelParam._m0[21u].z, fma(_682, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _681));
        float _1652 = fma(_683, cbModelParam._m0[22u].z, fma(_682, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _681));
        float _1655 = fma(_683, cbModelParam._m0[23u].z, fma(_682, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _681));
        float _1796;
        if (_1649 > 0.0)
        {
            _1796 = abs((1.0 - _1638) / _1649);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1649 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1638 + 1.0) / _1649);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1796 = frontier_phi_25_21_ladder;
        }
        float _2072;
        if (_1652 > 0.0)
        {
            _2072 = abs((1.0 - _1642) / _1652);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1652 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1642 + 1.0) / _1652);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2072 = frontier_phi_37_32_ladder;
        }
        float _2285;
        if (_1655 > 0.0)
        {
            _2285 = abs((1.0 - _1646) / _1655);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1646 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2285 = frontier_phi_46_43_ladder;
        }
        float _2287 = isnan(_2072) ? _1796 : (isnan(_1796) ? _2072 : min(_1796, _2072));
        float _2288 = isnan(_2285) ? _2287 : (isnan(_2287) ? _2285 : min(_2287, _2285));
        float _2292 = (_2288 * _1649) + _1638;
        float _2293 = (_2288 * _1652) + _1642;
        float _2294 = (_2288 * _1655) + _1646;
        float _2295 = _2288 * 9.9999997473787516355514526367188e-05;
        float _2296 = (-1.0) - _2295;
        float _2298 = _2295 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2294 > _2298) || ((_2294 < _2296) || ((_2293 > _2298) || ((_2293 < _2296) || ((_2292 < _2296) || (_2292 > _2298))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2528 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2294, cbModelParam._m0[17u].z, fma(_2293, cbModelParam._m0[17u].y, _2292 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2294, cbModelParam._m0[18u].z, fma(_2293, cbModelParam._m0[18u].y, _2292 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2294, cbModelParam._m0[19u].z, fma(_2293, cbModelParam._m0[19u].y, _2292 * cbModelParam._m0[19u].x))), _1583);
            frontier_phi_22_46_ladder = _2528.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2528.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2528.x * cbModelParam._m0[1u].z;
        }
        _1674 = frontier_phi_22_46_ladder_2;
        _1676 = frontier_phi_22_46_ladder_1;
        _1678 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1658 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_681, _682, _683), _1583);
        _1674 = _1658.x * cbModelParam._m0[1u].z;
        _1676 = _1658.y * cbModelParam._m0[1u].z;
        _1678 = _1658.z * cbModelParam._m0[1u].z;
    }
    float _1691 = (((_708 * _658) + _709) * _673) * ((cbModelParam._m0[1u].w * (_1674 - _1574)) + _1574);
    float _1693 = (((_708 * _660) + _709) * _673) * ((cbModelParam._m0[1u].w * (_1676 - _1576)) + _1576);
    float _1695 = (((_708 * _661) + _709) * _673) * ((cbModelParam._m0[1u].w * (_1678 - _1578)) + _1578);
    float _1698 = fma(_1695, cbSceneParam._m0[89u].z, fma(_1693, cbSceneParam._m0[89u].y, _1691 * cbSceneParam._m0[89u].x));
    float _1701 = fma(_1695, cbSceneParam._m0[90u].z, fma(_1693, cbSceneParam._m0[90u].y, _1691 * cbSceneParam._m0[90u].x));
    float _1704 = fma(_1695, cbSceneParam._m0[91u].z, fma(_1693, cbSceneParam._m0[91u].y, _1691 * cbSceneParam._m0[91u].x));
    uvec4 _1714 = floatBitsToUint(cbInstanceData._m0[_633 + 5u]);
    uint _1716 = _1714.x * 14u;
    uint _1717 = _1716 + 13u;
    float _1724 = _673 + (-1.0);
    float _1729 = (cbLight._m0[_1717].x * _1724) + 1.0;
    float _1730 = (cbLight._m0[_1717].y * _1724) + 1.0;
    float _1731 = (cbLight._m0[_1717].z * _1724) + 1.0;
    float _1732 = (cbLight._m0[_1717].w * _1724) + 1.0;
    uint _1733 = _1716 + 5u;
    float _1739 = isnan(1.0) ? _1730 : (isnan(_1730) ? 1.0 : min(_1730, 1.0));
    uint _1743 = _1716 + 4u;
    float _1749 = isnan(1.0) ? _1729 : (isnan(_1729) ? 1.0 : min(_1729, 1.0));
    uint _1753 = _1716 | 1u;
    float _1764 = dot(vec3(cbLight._m0[_1716].xyz), vec3(_506, _507, _508));
    float _1767 = dot(vec3(cbLight._m0[_1753].xyz), vec3(_506, _507, _508));
    float _3934 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
    float _3945 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
    float _1772 = (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * 0.3183098733425140380859375;
    float _1774 = (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * 0.3183098733425140380859375;
    float _1781 = ((cbLight._m0[_1733].x * _1739) * _1774) + ((cbLight._m0[_1743].x * _1749) * _1772);
    float _1782 = ((_1739 * cbLight._m0[_1733].y) * _1774) + ((_1749 * cbLight._m0[_1743].y) * _1772);
    float _1783 = ((_1739 * cbLight._m0[_1733].z) * _1774) + ((_1749 * cbLight._m0[_1743].z) * _1772);
    uvec4 _1788 = floatBitsToUint(cbLight._m0[_1716 + 12u]);
    bool _1790 = _1788.x == 0u;
    float _1801;
    float _1803;
    float _1805;
    if (_1790)
    {
        _1801 = _1781;
        _1803 = _1782;
        _1805 = _1783;
    }
    else
    {
        uint _1809 = _1716 + 6u;
        float _1825 = (dot(vec3(cbLight._m0[_1716 + 2u].xyz), vec3(_506, _507, _508)) * 0.5) + 0.5;
        float _1826 = _1825 * _1825;
        float _3956 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
        float _1827 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1828 = isnan(1.0) ? _1731 : (isnan(_1731) ? 1.0 : min(_1731, 1.0));
        _1801 = (((cbLight._m0[_1809].x * 0.3183098733425140380859375) * _1827) * _1828) + _1781;
        _1803 = (((cbLight._m0[_1809].y * 0.3183098733425140380859375) * _1827) * _1828) + _1782;
        _1805 = (((cbLight._m0[_1809].z * 0.3183098733425140380859375) * _1827) * _1828) + _1783;
    }
    bool _1808 = _1788.y == 0u;
    float _1846;
    float _1848;
    float _1850;
    if (_1808)
    {
        _1846 = _1801;
        _1848 = _1803;
        _1850 = _1805;
    }
    else
    {
        uint _2016 = _1716 + 7u;
        float _2032 = (dot(vec3(cbLight._m0[_1716 + 3u].xyz), vec3(_506, _507, _508)) * 0.5) + 0.5;
        float _2033 = _2032 * _2032;
        float _3972 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
        float _2034 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _2035 = isnan(1.0) ? _1732 : (isnan(_1732) ? 1.0 : min(_1732, 1.0));
        _1846 = (((cbLight._m0[_2016].x * 0.3183098733425140380859375) * _2034) * _2035) + _1801;
        _1848 = (((cbLight._m0[_2016].y * 0.3183098733425140380859375) * _2034) * _2035) + _1803;
        _1850 = (((cbLight._m0[_2016].z * 0.3183098733425140380859375) * _2034) * _2035) + _1805;
    }
    uint _1853 = _1716 + 8u;
    float _1866 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1716].w)) * _509) * 0.949999988079071044921875);
    float _1867 = _1866 * _1866;
    float _1868 = cbLight._m0[_1716].x + _587;
    float _1869 = cbLight._m0[_1716].y + _588;
    float _1870 = cbLight._m0[_1716].z + _589;
    float _1874 = inversesqrt(dot(vec3(_1868, _1869, _1870), vec3(_1868, _1869, _1870)));
    float _1875 = _1874 * _1868;
    float _1876 = _1874 * _1869;
    float _1877 = _1874 * _1870;
    float _1878 = dot(vec3(_506, _507, _508), vec3(cbLight._m0[_1716].xyz));
    float _3988 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _1881 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _3999 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _1882 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _1883 = dot(vec3(_506, _507, _508), vec3(_1875, _1876, _1877));
    float _4010 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _1886 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _1887 = dot(vec3(cbLight._m0[_1716].xyz), vec3(_1875, _1876, _1877));
    float _4021 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _1891 = _1867 * _1867;
    float _1895 = ((_1886 * _1886) * (_1891 + (-1.0))) + 1.0;
    float _1903 = exp2(log2(1.0 - (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0)))) * 5.0);
    float _1904 = 0.959999978542327880859375 - _655;
    float _1906 = 0.959999978542327880859375 - _656;
    float _1907 = 0.959999978542327880859375 - _657;
    float _1914 = 1.0 - _1867;
    float _1925 = (0.5 / (((_1882 * ((_1881 * _1914) + _1867)) + 9.9999999392252902907785028219223e-09) + (((_1882 * _1914) + _1867) * _1881))) * _1881;
    float _4032 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _1927 = (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1891 / ((_1895 * _1895) * 3.141590118408203125));
    uint _1938 = _1716 + 9u;
    float _1949 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1753].w)) * _509) * 0.949999988079071044921875);
    float _1950 = _1949 * _1949;
    float _1951 = cbLight._m0[_1753].x + _587;
    float _1952 = cbLight._m0[_1753].y + _588;
    float _1953 = cbLight._m0[_1753].z + _589;
    float _1957 = inversesqrt(dot(vec3(_1951, _1952, _1953), vec3(_1951, _1952, _1953)));
    float _1958 = _1957 * _1951;
    float _1959 = _1957 * _1952;
    float _1960 = _1957 * _1953;
    float _1961 = dot(vec3(_506, _507, _508), vec3(cbLight._m0[_1753].xyz));
    float _4043 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1964 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _1965 = dot(vec3(_506, _507, _508), vec3(_1958, _1959, _1960));
    float _4054 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _1968 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _1969 = dot(vec3(cbLight._m0[_1753].xyz), vec3(_1958, _1959, _1960));
    float _4065 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _1973 = _1950 * _1950;
    float _1977 = ((_1968 * _1968) * (_1973 + (-1.0))) + 1.0;
    float _1984 = exp2(log2(1.0 - (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0)))) * 5.0);
    float _1991 = 1.0 - _1950;
    float _2001 = (0.5 / (((_1882 * ((_1964 * _1991) + _1950)) + 9.9999999392252902907785028219223e-09) + (((_1882 * _1991) + _1950) * _1964))) * _1964;
    float _4076 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _2003 = (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (_1973 / ((_1977 * _1977) * 3.141590118408203125));
    float _2013 = (((((_1984 * _1904) + _658) * cbLight._m0[_1938].x) * _2003) * _1739) + (((((_1903 * _1904) + _658) * cbLight._m0[_1853].x) * _1927) * _1749);
    float _2014 = (((((_1984 * _1906) + _660) * cbLight._m0[_1938].y) * _2003) * _1739) + (((((_1903 * _1906) + _660) * cbLight._m0[_1853].y) * _1927) * _1749);
    float _2015 = (((((_1984 * _1907) + _661) * cbLight._m0[_1938].z) * _2003) * _1739) + (((((_1903 * _1907) + _661) * cbLight._m0[_1853].z) * _1927) * _1749);
    float _2077;
    float _2079;
    float _2081;
    if (_1790)
    {
        _2077 = _2013;
        _2079 = _2014;
        _2081 = _2015;
    }
    else
    {
        uint _2083 = _1716 + 2u;
        uint _2087 = _1716 + 10u;
        float _2101 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2083].w)) * _509) * 0.949999988079071044921875);
        float _2102 = _2101 * _2101;
        float _2103 = cbLight._m0[_2083].x + _587;
        float _2104 = cbLight._m0[_2083].y + _588;
        float _2105 = cbLight._m0[_2083].z + _589;
        float _2109 = inversesqrt(dot(vec3(_2103, _2104, _2105), vec3(_2103, _2104, _2105)));
        float _2110 = _2109 * _2103;
        float _2111 = _2109 * _2104;
        float _2112 = _2109 * _2105;
        float _2113 = dot(vec3(_506, _507, _508), vec3(cbLight._m0[_2083].xyz));
        float _4087 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
        float _2116 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _2117 = dot(vec3(_506, _507, _508), vec3(_2110, _2111, _2112));
        float _4098 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        float _2120 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _2121 = dot(vec3(cbLight._m0[_2083].xyz), vec3(_2110, _2111, _2112));
        float _4109 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        float _2125 = _2102 * _2102;
        float _2129 = ((_2120 * _2120) * (_2125 + (-1.0))) + 1.0;
        float _2136 = exp2(log2(1.0 - (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0)))) * 5.0);
        float _2143 = 1.0 - _2102;
        float _2153 = (0.5 / (((_1882 * ((_2116 * _2143) + _2102)) + 9.9999999392252902907785028219223e-09) + (((_1882 * _2143) + _2102) * _2116))) * _2116;
        float _4120 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2155 = (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_2125 / ((_2129 * _2129) * 3.141590118408203125));
        float _2156 = isnan(1.0) ? _1731 : (isnan(_1731) ? 1.0 : min(_1731, 1.0));
        _2077 = (((((_2136 * _1904) + _658) * cbLight._m0[_2087].x) * _2155) * _2156) + _2013;
        _2079 = (((((_2136 * _1906) + _660) * cbLight._m0[_2087].y) * _2155) * _2156) + _2014;
        _2081 = (((((_2136 * _1907) + _661) * cbLight._m0[_2087].z) * _2155) * _2156) + _2015;
    }
    float _2191;
    float _2193;
    float _2195;
    if (_1808)
    {
        _2191 = _2077;
        _2193 = _2079;
        _2195 = _2081;
    }
    else
    {
        uint _2202 = _1716 + 3u;
        uint _2206 = _1716 + 11u;
        float _2220 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2202].w)) * _509) * 0.949999988079071044921875);
        float _2221 = _2220 * _2220;
        float _2222 = cbLight._m0[_2202].x + _587;
        float _2223 = cbLight._m0[_2202].y + _588;
        float _2224 = cbLight._m0[_2202].z + _589;
        float _2228 = inversesqrt(dot(vec3(_2222, _2223, _2224), vec3(_2222, _2223, _2224)));
        float _2229 = _2228 * _2222;
        float _2230 = _2228 * _2223;
        float _2231 = _2228 * _2224;
        float _2232 = dot(vec3(_506, _507, _508), vec3(cbLight._m0[_2202].xyz));
        float _4136 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        float _2235 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _2236 = dot(vec3(_506, _507, _508), vec3(_2229, _2230, _2231));
        float _4147 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
        float _2239 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _2240 = dot(vec3(cbLight._m0[_2202].xyz), vec3(_2229, _2230, _2231));
        float _4158 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2244 = _2221 * _2221;
        float _2248 = ((_2239 * _2239) * (_2244 + (-1.0))) + 1.0;
        float _2255 = exp2(log2(1.0 - (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0)))) * 5.0);
        float _2262 = 1.0 - _2221;
        float _2272 = (0.5 / (((_1882 * ((_2235 * _2262) + _2221)) + 9.9999999392252902907785028219223e-09) + (((_1882 * _2262) + _2221) * _2235))) * _2235;
        float _4169 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2274 = (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_2244 / ((_2248 * _2248) * 3.141590118408203125));
        float _2275 = isnan(1.0) ? _1732 : (isnan(_1732) ? 1.0 : min(_1732, 1.0));
        _2191 = (((((_2255 * _1904) + _658) * cbLight._m0[_2206].x) * _2274) * _2275) + _2077;
        _2193 = (((((_2255 * _1906) + _660) * cbLight._m0[_2206].y) * _2274) * _2275) + _2079;
        _2195 = (((((_2255 * _1907) + _661) * cbLight._m0[_2206].z) * _2274) * _2275) + _2081;
    }
    float _2410;
    float _2412;
    float _2414;
    float _2416;
    float _2418;
    float _2420;
    if (_1714.y == 0u)
    {
        float _2350 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2351 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2350;
        float _2352 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2350;
        float _2353 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2350;
        uvec4 _2365 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2366 = _2365.x;
        uint _2377 = uint((float(_2365.y) * floor(float(uint(cbSceneParam._m0[85u].y * _596) / _2366))) + floor(float(uint(cbSceneParam._m0[85u].x * _595) / _2366)));
        float _2387 = (log2(_2353 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2388 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        uint _2391 = uint(isnan(14.0) ? _2388 : (isnan(_2388) ? 14.0 : min(_2388, 14.0)));
        uvec4 _2396 = texelFetch(g_lightClusterGridBuffer, int(((_2391 << 2u) + (_2377 << 6u)) >> 2u));
        uint _2397 = _2396.x;
        uint _2398 = _2365.z;
        float _2533;
        float _2535;
        float _2537;
        float _2539;
        float _2541;
        float _2543;
        if (((((1u << ((_2398 >> 4u) & 15u)) + 4294967295u) & _2397) == 0u) || ((_2398 & 240u) == 0u))
        {
            _2533 = 0.0;
            _2535 = 0.0;
            _2537 = 0.0;
            _2539 = 0.0;
            _2541 = 0.0;
            _2543 = 0.0;
        }
        else
        {
            float _2534;
            float _2536;
            float _2538;
            float _2540;
            float _2542;
            float _2544;
            float _2687 = 0.0;
            float _2688 = 0.0;
            float _2689 = 0.0;
            float _2690 = 0.0;
            float _2691 = 0.0;
            float _2692 = 0.0;
            uint _2693 = 0u;
            uint _2702;
            bool _2703;
            for (;;)
            {
                _2702 = texelFetch(g_lightClassification, int((((_2391 << 5u) + (_2377 << 9u)) + (_2693 << 2u)) >> 2u)).x;
                _2703 = _2702 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2703)
                {
                    frontier_phi_61_pred = _2687;
                    frontier_phi_61_pred_1 = _2692;
                    frontier_phi_61_pred_2 = _2691;
                    frontier_phi_61_pred_3 = _2690;
                    frontier_phi_61_pred_4 = _2689;
                    frontier_phi_61_pred_5 = _2688;
                }
                else
                {
                    float _2811;
                    float _2812;
                    float _2813;
                    float _2814;
                    float _2815;
                    float _2816;
                    uint _2817;
                    _2811 = _2687;
                    _2812 = _2688;
                    _2813 = _2689;
                    _2814 = _2690;
                    _2815 = _2691;
                    _2816 = _2692;
                    _2817 = _2702;
                    float _2743;
                    float _2744;
                    float _2745;
                    float _2746;
                    float _2747;
                    float _2748;
                    for (;;)
                    {
                        uint _2821 = uint(findLSB(_2817)) + (_2693 << 5u);
                        uint _2818 = (_2817 + 4294967295u) & _2817;
                        uint _2823 = _2821 * 48u;
                        vec4 _2837 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2823)).x, texelFetch(g_PointLightRenderingBuffer, int(_2823 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2823 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2823 + 3u)).x));
                        uint _2843 = (_2821 * 48u) + 4u;
                        vec4 _2856 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2843)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 3u)).x));
                        uint _2862 = (_2821 * 48u) + 8u;
                        vec3 _2873 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2862)).x, texelFetch(g_PointLightRenderingBuffer, int(_2862 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2862 + 2u)).x));
                        float _2877 = _2837.x - _2351;
                        float _2878 = _2837.y - _2352;
                        float _2879 = _2837.z - _2353;
                        float _2880 = dot(vec3(_2877, _2878, _2879), vec3(_2877, _2878, _2879));
                        float _2883 = inversesqrt(_2880);
                        float _2884 = _2883 * _2877;
                        float _2885 = _2883 * _2878;
                        float _2886 = _2883 * _2879;
                        float _2887 = dot(vec3(_614, _617, _620), vec3(_2884, _2885, _2886));
                        float _2892 = 1.0 - (_2880 * _2837.w);
                        float _4195 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
                        float _2893 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
                        float _2894 = sqrt(_2880) * _2856.w;
                        float _2897 = 1.39999997615814208984375 / (_2894 + 1.39999997615814208984375);
                        float _2898 = _2897 * _2897;
                        float _2901 = ((1.0 - _2898) * _2887) + _2898;
                        float _2904 = _2894 * _2894;
                        float _2908 = ((isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0))) * _2893) / ((_2904 * 0.699999988079071044921875) + 1.0);
                        float _2912 = (-0.0) - _2351;
                        float _2913 = (-0.0) - _2352;
                        float _2914 = (-0.0) - _2353;
                        float _2918 = inversesqrt(dot(vec3(_2912, _2913, _2914), vec3(_2912, _2913, _2914)));
                        float _2919 = _2918 * _2912;
                        float _2920 = _2918 * _2913;
                        float _2921 = _2918 * _2914;
                        float _2929 = exp2(log2(1.0 / ((_2904 * 3.5) + 5.0)) * 0.25);
                        float _2930 = 1.0 - _689;
                        float _2937 = sqrt(1.0 - ((1.0 - (_2930 * _2930)) * (1.0 - (_2929 * _2929))));
                        float _2938 = _2937 * _2937;
                        float _2939 = _2938 * _2938;
                        float _2940 = _2919 + _2884;
                        float _2941 = _2920 + _2885;
                        float _2942 = _2921 + _2886;
                        float _2946 = inversesqrt(dot(vec3(_2940, _2941, _2942), vec3(_2940, _2941, _2942)));
                        float _2950 = dot(vec3(_614, _617, _620), vec3(_2919, _2920, _2921));
                        float _4211 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
                        float _2953 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
                        float _2954 = dot(vec3(_614, _617, _620), vec3(_2946 * _2940, _2946 * _2941, _2946 * _2942));
                        float _4222 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
                        float _2957 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
                        float _2961 = ((_2957 * _2957) * (_2939 + (-1.0))) + 1.0;
                        float _2962 = _2897 * _2938;
                        float _2963 = _2962 * _2962;
                        float _2966 = ((1.0 - _2963) * _2887) + _2963;
                        float _4233 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
                        float _2967 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
                        float _2968 = 1.0 - _2938;
                        float _2978 = (0.5 / (((_2967 * ((_2953 * _2968) + _2938)) + 9.9999999392252902907785028219223e-09) + (((_2967 * _2968) + _2938) * _2953))) * _2967;
                        float _4244 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
                        float _2989 = (((_2939 * 3.1415927410125732421875) * (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0)))) / ((_2961 * _2961) * ((_2904 * 2.1991131305694580078125) + 3.141590118408203125))) * _2893;
                        _2746 = (_2908 * _2856.x) + _2814;
                        _2747 = (_2908 * _2856.y) + _2815;
                        _2748 = (_2908 * _2856.z) + _2816;
                        _2743 = (_2989 * _2873.x) + _2811;
                        _2744 = (_2989 * _2873.y) + _2812;
                        _2745 = (_2989 * _2873.z) + _2813;
                        if (_2818 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2811 = _2743;
                            _2812 = _2744;
                            _2813 = _2745;
                            _2814 = _2746;
                            _2815 = _2747;
                            _2816 = _2748;
                            _2817 = _2818;
                        }
                    }
                    frontier_phi_61_pred = _2743;
                    frontier_phi_61_pred_1 = _2748;
                    frontier_phi_61_pred_2 = _2747;
                    frontier_phi_61_pred_3 = _2746;
                    frontier_phi_61_pred_4 = _2745;
                    frontier_phi_61_pred_5 = _2744;
                }
                _2534 = frontier_phi_61_pred;
                _2544 = frontier_phi_61_pred_1;
                _2542 = frontier_phi_61_pred_2;
                _2540 = frontier_phi_61_pred_3;
                _2538 = frontier_phi_61_pred_4;
                _2536 = frontier_phi_61_pred_5;
                uint _2694 = _2693 + 1u;
                if (_2694 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2687 = _2534;
                    _2688 = _2536;
                    _2689 = _2538;
                    _2690 = _2540;
                    _2691 = _2542;
                    _2692 = _2544;
                    _2693 = _2694;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2533 = _2534;
            _2535 = _2536;
            _2537 = _2538;
            _2539 = _2540;
            _2541 = _2542;
            _2543 = _2544;
        }
        uvec4 _2547 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2548 = _2547.z;
        uint _2550 = (_2548 >> 8u) & 15u;
        float _2655;
        float _2657;
        float _2659;
        float _2661;
        float _2663;
        float _2665;
        if (((4294967295u << _2550) & _2397) == 0u)
        {
            _2655 = _2533;
            _2657 = _2535;
            _2659 = _2537;
            _2661 = _2539;
            _2663 = _2541;
            _2665 = _2543;
        }
        else
        {
            float _2680 = inversesqrt(dot(vec3(_2351, _2352, _2353), vec3(_2351, _2352, _2353)));
            float _2681 = _2680 * _2351;
            float _2682 = _2680 * _2352;
            float _2683 = _2680 * _2353;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2550 < ((_2548 >> 12u) & 15u))
            {
                float _2656;
                float _2658;
                float _2660;
                float _2662;
                float _2664;
                float _2666;
                float _2794 = _2533;
                float _2795 = _2535;
                float _2796 = _2537;
                float _2797 = _2539;
                float _2798 = _2541;
                float _2799 = _2543;
                uint _2800 = _2550;
                uint _2809;
                bool _2810;
                for (;;)
                {
                    _2809 = texelFetch(g_lightClassification, int((((_2391 << 5u) + (_2377 << 9u)) + (_2800 << 2u)) >> 2u)).x;
                    _2810 = _2809 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2810)
                    {
                        frontier_phi_67_pred = _2797;
                        frontier_phi_67_pred_1 = _2798;
                        frontier_phi_67_pred_2 = _2799;
                        frontier_phi_67_pred_3 = _2796;
                        frontier_phi_67_pred_4 = _2795;
                        frontier_phi_67_pred_5 = _2794;
                    }
                    else
                    {
                        float _2994;
                        float _2995;
                        float _2996;
                        float _2997;
                        float _2998;
                        float _2999;
                        float _3289;
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3293;
                        float _3294;
                        float _3007 = _2794;
                        float _3008 = _2795;
                        float _3009 = _2796;
                        float _3010 = _2797;
                        float _3011 = _2798;
                        float _3012 = _2799;
                        uint _3013 = _2809;
                        uint _3014;
                        vec4 _3039;
                        float _3040;
                        vec4 _3055;
                        vec3 _3067;
                        vec4 _3082;
                        vec4 _3098;
                        float _3145;
                        bool _3146;
                        for (;;)
                        {
                            uint _3024 = ((_2800 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3013));
                            _3014 = (_3013 + 4294967295u) & _3013;
                            uint _3026 = _3024 * 40u;
                            _3039 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3026)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 3u)).x));
                            _3040 = _3039.w;
                            uint _3042 = (_3024 * 40u) + 4u;
                            _3055 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3042)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 3u)).x));
                            uint _3057 = (_3024 * 40u) + 8u;
                            _3067 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3057)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 2u)).x));
                            uint _3069 = (_3024 * 40u) + 16u;
                            _3082 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3069)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 3u)).x));
                            uint _3085 = (_3024 * 40u) + 20u;
                            _3098 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3085)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 3u)).x));
                            uint _3101 = (_3024 * 40u) + 24u;
                            vec4 _3114 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3101)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 3u)).x));
                            uint _3120 = (_3024 * 40u) + 28u;
                            vec4 _3133 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3120)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 3u)).x));
                            _3145 = fma(_2353, _3133.z, fma(_2352, _3133.y, _3133.x * _2351)) + _3133.w;
                            _3146 = !((fma(_2353, _3114.z, fma(_2352, _3114.y, _3114.x * _2351)) + _3114.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3146)
                            {
                                float _3173 = _3039.x - _2351;
                                float _3174 = _3039.y - _2352;
                                float _3175 = _3039.z - _2353;
                                float _3176 = dot(vec3(_3173, _3174, _3175), vec3(_3173, _3174, _3175));
                                float _3179 = inversesqrt(_3176);
                                float _3180 = _3179 * _3173;
                                float _3181 = _3179 * _3174;
                                float _3182 = _3179 * _3175;
                                float _3186 = 1.0 - (_3176 / (_3040 * _3040));
                                float _4255 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                                float _3187 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
                                float _3191 = sqrt(_3176) * _3055.w;
                                float _3193 = 1.39999997615814208984375 / (_3191 + 1.39999997615814208984375);
                                float _3194 = _3193 * _3193;
                                float _3197 = ((1.0 - _3194) * dot(vec3(_3180, _3181, _3182), vec3(_614, _617, _620))) + _3194;
                                float _3200 = _3191 * _3191;
                                float _3204 = (fma(_2353, _3082.z, fma(_2352, _3082.y, _3082.x * _2351)) + _3082.w) / _3145;
                                float _3205 = (fma(_2353, _3098.z, fma(_2352, _3098.y, _3098.x * _2351)) + _3098.w) / _3145;
                                float _3209 = 1.0 - dot(vec2(_3204, _3205), vec2(_3204, _3205));
                                float _4271 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                                float _3210 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
                                float _3211 = _3210 * (((isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0))) * _3187) / ((_3200 * 0.699999988079071044921875) + 1.0));
                                float _3223 = exp2(log2(1.0 / ((_3200 * 3.5) + 5.0)) * 0.25);
                                float _3224 = 1.0 - _689;
                                float _3231 = sqrt(1.0 - ((1.0 - (_3224 * _3224)) * (1.0 - (_3223 * _3223))));
                                float _3232 = _3231 * _3231;
                                float _3233 = _3232 * _3232;
                                float _3234 = _3180 - _2681;
                                float _3235 = _3181 - _2682;
                                float _3236 = _3182 - _2683;
                                float _3240 = inversesqrt(dot(vec3(_3234, _3235, _3236), vec3(_3234, _3235, _3236)));
                                float _3244 = dot(vec3(_614, _617, _620), vec3((-0.0) - _2681, (-0.0) - _2682, (-0.0) - _2683));
                                float _4282 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                                float _3247 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
                                float _3248 = dot(vec3(_614, _617, _620), vec3(_3240 * _3234, _3240 * _3235, _3240 * _3236));
                                float _4293 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                                float _3251 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                                float _3255 = ((_3251 * _3251) * (_3233 + (-1.0))) + 1.0;
                                float _3256 = _3193 * _3232;
                                float _3257 = _3256 * _3256;
                                float _3263 = ((1.0 - _3257) * dot(vec3(_614, _617, _620), vec3(_3180, _3181, _3182))) + _3257;
                                float _4304 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                                float _3264 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
                                float _3265 = 1.0 - _3232;
                                float _3275 = (0.5 / (((_3264 * ((_3247 * _3265) + _3232)) + 9.9999999392252902907785028219223e-09) + (((_3264 * _3265) + _3232) * _3247))) * _3264;
                                float _4315 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                                float _3285 = (_3210 * _3187) * (((_3233 * 3.1415927410125732421875) * (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0)))) / ((_3255 * _3255) * ((_3200 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3285 * _3067.x;
                                frontier_phi_73_pred_1 = _3285 * _3067.y;
                                frontier_phi_73_pred_2 = _3211 * _3055.z;
                                frontier_phi_73_pred_3 = _3211 * _3055.y;
                                frontier_phi_73_pred_4 = _3211 * _3055.x;
                                frontier_phi_73_pred_5 = _3285 * _3067.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3289 = frontier_phi_73_pred;
                            _3290 = frontier_phi_73_pred_1;
                            _3294 = frontier_phi_73_pred_2;
                            _3293 = frontier_phi_73_pred_3;
                            _3292 = frontier_phi_73_pred_4;
                            _3291 = frontier_phi_73_pred_5;
                            _2997 = _3292 + _3010;
                            _2998 = _3293 + _3011;
                            _2999 = _3294 + _3012;
                            _2994 = _3289 + _3007;
                            _2995 = _3290 + _3008;
                            _2996 = _3291 + _3009;
                            if (_3014 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3007 = _2994;
                                _3008 = _2995;
                                _3009 = _2996;
                                _3010 = _2997;
                                _3011 = _2998;
                                _3012 = _2999;
                                _3013 = _3014;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2997;
                        frontier_phi_67_pred_1 = _2998;
                        frontier_phi_67_pred_2 = _2999;
                        frontier_phi_67_pred_3 = _2996;
                        frontier_phi_67_pred_4 = _2995;
                        frontier_phi_67_pred_5 = _2994;
                    }
                    _2662 = frontier_phi_67_pred;
                    _2664 = frontier_phi_67_pred_1;
                    _2666 = frontier_phi_67_pred_2;
                    _2660 = frontier_phi_67_pred_3;
                    _2658 = frontier_phi_67_pred_4;
                    _2656 = frontier_phi_67_pred_5;
                    uint _2801 = _2800 + 1u;
                    if (_2801 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2794 = _2656;
                        _2795 = _2658;
                        _2796 = _2660;
                        _2797 = _2662;
                        _2798 = _2664;
                        _2799 = _2666;
                        _2800 = _2801;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2664;
                frontier_phi_55_56_ladder_1 = _2666;
                frontier_phi_55_56_ladder_2 = _2662;
                frontier_phi_55_56_ladder_3 = _2660;
                frontier_phi_55_56_ladder_4 = _2658;
                frontier_phi_55_56_ladder_5 = _2656;
            }
            else
            {
                frontier_phi_55_56_ladder = _2541;
                frontier_phi_55_56_ladder_1 = _2543;
                frontier_phi_55_56_ladder_2 = _2539;
                frontier_phi_55_56_ladder_3 = _2537;
                frontier_phi_55_56_ladder_4 = _2535;
                frontier_phi_55_56_ladder_5 = _2533;
            }
            _2655 = frontier_phi_55_56_ladder_5;
            _2657 = frontier_phi_55_56_ladder_4;
            _2659 = frontier_phi_55_56_ladder_3;
            _2661 = frontier_phi_55_56_ladder_2;
            _2663 = frontier_phi_55_56_ladder;
            _2665 = frontier_phi_55_56_ladder_1;
        }
        float _2670 = isnan(1.0) ? _673 : (isnan(_673) ? 1.0 : min(_673, 1.0));
        _2410 = (_2670 * _2661) + _1846;
        _2412 = (_2670 * _2663) + _1848;
        _2414 = (_2670 * _2665) + _1850;
        _2416 = ((_2655 * _658) * _2670) + _2191;
        _2418 = ((_2657 * _660) * _2670) + _2193;
        _2420 = ((_2659 * _661) * _2670) + _2195;
    }
    else
    {
        _2410 = _1846;
        _2412 = _1848;
        _2414 = _1850;
        _2416 = _2191;
        _2418 = _2193;
        _2420 = _2195;
    }
    uint _2426 = _634 + uint(cbMatDynParam._m0[0u].w);
    float _2434 = ((_483 * cbMtdParam._m0[11u].x) * (_468.x + _453.x)) * cbInstanceData._m0[_2426].x;
    float _2437 = ((_483 * cbMtdParam._m0[11u].y) * (_468.y + _453.y)) * cbInstanceData._m0[_2426].y;
    float _2440 = ((_483 * cbMtdParam._m0[11u].z) * (_468.z + _453.z)) * cbInstanceData._m0[_2426].z;
    float _4331 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _4342 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _4353 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _2457 = (((isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (_2410 + ((isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))) * _673))) + ((_2416 + ((isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))) * _1483)) * cbPerFrame._m0[3u].x)) + _2434;
    float _2459 = (_2437 + ((_2418 + ((isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))) * _1483)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_2412 + ((isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0))) * _673)));
    float _2461 = (_2440 + ((_2420 + ((isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))) * _1483)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_2414 + ((isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0))) * _673)));
    float _4379 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2474 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
    uint _2475 = _633 + 6u;
    float _2483 = _595 / cbSceneParam._m0[86u].x;
    float _2484 = _596 / cbSceneParam._m0[86u].y;
    vec4 _2498 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2483, _2484, (log2((isnan(cbSceneParam._m0[77u].w) ? _529 : (isnan(_529) ? cbSceneParam._m0[77u].w : min(_529, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2500 = _2498.x;
    float _2501 = _2498.y;
    float _2502 = _2498.z;
    float _2503 = _2498.w;
    float _2596;
    float _2598;
    float _2600;
    float _2602;
    if (_529 > cbSceneParam._m0[78u].w)
    {
        float _2558 = isnan(_529) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _529 : min(cbSceneParam._m0[80u].w, _529));
        float _2559 = _2558 / _529;
        float _2570 = _2559 * _580;
        float _2571 = _581 * _2559;
        float _2572 = (-0.0) - _2571;
        float _2574 = _2559 * _582;
        float _2576 = (cbSceneParam._m0[77u].w * _2572) / _2558;
        float _2577 = _2576 + cbSceneParam._m0[79u].w;
        float _2578 = cbSceneParam._m0[79u].w - _2571;
        float _2584 = sqrt(((_2570 * _2570) + (_2571 * _2571)) + (_2574 * _2574));
        float _2587 = (1.0 - (cbSceneParam._m0[77u].w / _2558)) * _2584;
        float _2592 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2594 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2756;
        if (abs((_2572 - _2576) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2756 = ((((_2577 > 0.0) ? exp2(_2592 * _2577) : (2.0 - exp2(_2594 * _2577))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2587;
        }
        else
        {
            float _2716 = 1.0 / cbSceneParam._m0[80u].x;
            float _2717 = isnan(_2578) ? _2577 : (isnan(_2577) ? _2578 : max(_2577, _2578));
            float _2718 = isnan(_2578) ? _2577 : (isnan(_2577) ? _2578 : min(_2577, _2578));
            float _2727 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : min(_2717, 0.0));
            float _2728 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : min(_2718, 0.0));
            _2756 = ((abs(_2584 / _2572) * cbSceneParam._m0[80u].y) * ((((_2727 - _2728) * 2.0) - ((exp2(_2592 * (isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0)))) - exp2(_2592 * (isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0))))) * _2716)) - ((exp2(_2594 * _2727) - exp2(_2594 * _2728)) * _2716))) + (_2587 * cbSceneParam._m0[80u].z);
        }
        vec4 _2758 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2483, _2484, 1.0), 0.0);
        float _2767 = exp2((_2756 * (-1.44269502162933349609375)) * (1.0 - _2758.w));
        float _2768 = log2(_2767);
        float _2784 = log2(_2503);
        _2596 = (exp2(_2784 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2768 * cbSceneParam._m0[78u].x)) * _2758.x) / cbSceneParam._m0[78u].x)) + _2500;
        _2598 = (exp2(_2784 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2768 * cbSceneParam._m0[78u].y)) * _2758.y) / cbSceneParam._m0[78u].y)) + _2501;
        _2600 = (exp2(_2784 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2768 * cbSceneParam._m0[78u].z)) * _2758.z) / cbSceneParam._m0[78u].z)) + _2502;
        _2602 = _2767 * _2503;
    }
    else
    {
        _2596 = _2500;
        _2598 = _2501;
        _2600 = _2502;
        _2602 = _2503;
    }
    float _2614 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2615 = _2614 == 3.0;
    float _2616 = log2(_2602);
    float _2620 = exp2(_2616 * cbSceneParam._m0[78u].x);
    float _2621 = exp2(_2616 * cbSceneParam._m0[78u].y);
    float _2622 = exp2(_2616 * cbSceneParam._m0[78u].z);
    float _2623 = _2620 * (isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0)));
    float _2624 = _2621 * (isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0)));
    float _2625 = _2622 * (isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0)));
    float _2634 = (_2614 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2634 * (_2615 ? _2623 : (_2623 + (cbSceneParam._m0[72u].w * _2596)));
    SV_Target.y = _2634 * (_2615 ? _2624 : (_2624 + (cbSceneParam._m0[72u].w * _2598)));
    SV_Target.z = _2634 * (_2615 ? _2625 : (_2625 + (cbSceneParam._m0[72u].w * _2600)));
    SV_Target.w = cbInstanceData._m0[_2475].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2434) * _2474) * _2620) * _2634;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2437) * _2474) * _2621) * _2634;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2440) * _2474) * _2622) * _2634;
    SV_Target_1.w = cbInstanceData._m0[_2475].w;
}


