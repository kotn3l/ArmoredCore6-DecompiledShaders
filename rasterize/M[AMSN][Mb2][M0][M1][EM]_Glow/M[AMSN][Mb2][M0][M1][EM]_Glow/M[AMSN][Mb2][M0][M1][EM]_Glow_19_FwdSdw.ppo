#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1196;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _257 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _263 = _257.x * cbMtdParam._m0[9u].x;
    float _264 = _257.y * cbMtdParam._m0[9u].y;
    float _265 = _257.z * cbMtdParam._m0[9u].z;
    vec4 _303 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _319 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3847 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _320 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _327 = (((_303.x * cbMtdParam._m0[10u].x) - _263) * _320) + _263;
    float _328 = (((_303.y * cbMtdParam._m0[10u].y) - _264) * _320) + _264;
    float _329 = (((_303.z * cbMtdParam._m0[10u].z) - _265) * _320) + _265;
    vec4 _349 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _368 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_349.x + 0.00999999977648258209228515625));
    float _370 = _368 * (cbMtdParam._m0[15u].x + 1.0);
    float _3858 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _371 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _379 = ((((cbMtdParam._m0[12u].x - _327) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _371) + _327;
    float _380 = ((((cbMtdParam._m0[12u].y - _328) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _371) + _328;
    float _381 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _329)) * _371) + _329;
    vec4 _394 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _396 = _394.x;
    float _414 = ((texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[7u].w)).x - _396) * _320) + _396;
    vec4 _427 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _435 = (_427.x * 2.0) + (-1.0);
    float _437 = (_427.y * 2.0) + (-1.0);
    float _438 = dot(vec2(_435, _437), vec2(_435, _437));
    float _3869 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    vec4 _455 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _459 = _455.z;
    float _462 = (_455.x * 2.0) + (-1.0);
    float _463 = (_455.y * 2.0) + (-1.0);
    float _464 = dot(vec2(_462, _463), vec2(_462, _463));
    float _3880 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _469 = sqrt(1.0 - (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))));
    float _472 = (_320 * (_427.z - _459)) + _459;
    float _475 = _368 * (cbMtdParam._m0[14u].w + 1.0);
    float _3891 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _479 = ((cbMtdParam._m0[14u].y - _472) * (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0)))) + _472;
    vec4 _506 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _521 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _563 = (TEXCOORD_6.x - ((cbMtdParam._m0[13u].w * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_5, SS_WrapLinear), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].x + 1.0);
    float _3902 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _564 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
    float _565 = ((_521.x + _506.x) * cbMtdParam._m0[11u].x) * _564;
    float _566 = ((_521.y + _506.y) * cbMtdParam._m0[11u].y) * _564;
    float _567 = ((_521.z + _506.z) * cbMtdParam._m0[11u].z) * _564;
    vec4 _579 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[9u].w));
    float _581 = _579.x;
    float _594 = (_320 * (_435 - _462)) + _462;
    float _595 = (_320 * (_437 - _463)) + _463;
    float _596 = (_320 * (sqrt(1.0 - (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0)))) - _469)) + _469;
    vec4 _615 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _621 = (_615.x * 2.0) + (-1.0);
    float _622 = (_615.y * 2.0) + (-1.0);
    float _623 = dot(vec2(_621, _622), vec2(_621, _622));
    float _3913 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _639 = (_371 * (((_594 * cbMtdParam._m0[13u].z) - _594) + _621)) + _594;
    float _640 = (_371 * (((_595 * cbMtdParam._m0[13u].z) - _595) + _622)) + _595;
    float _641 = (_371 * (sqrt(1.0 - (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0)))) - _596)) + _596;
    float _644 = fma(_641, _228 * NORMAL.x, fma(_640, _235 * TANGENT.x, (_221 * _213) * _639));
    float _647 = fma(_641, _228 * NORMAL.y, fma(_640, _235 * TANGENT.y, (_221 * _214) * _639));
    float _650 = fma(_641, _228 * NORMAL.z, fma(_640, _235 * TANGENT.z, (_221 * _215) * _639));
    float _654 = inversesqrt(dot(vec3(_644, _647, _650), vec3(_644, _647, _650)));
    float _655 = _654 * _644;
    float _656 = _654 * _647;
    float _657 = _654 * _650;
    float _3924 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _658 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _3935 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _3946 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _3957 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _3968 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _662 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _678 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _718 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _728 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _718);
    float _729 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _718);
    float _730 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _718);
    float _734 = inversesqrt(dot(vec3(_728, _729, _730), vec3(_728, _729, _730)));
    float _735 = _728 * _734;
    float _736 = _729 * _734;
    float _737 = _730 * _734;
    float _743 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _744 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _762 = fma(_657, cbSceneParam._m0[5u].z, fma(_656, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _655));
    float _765 = fma(_657, cbSceneParam._m0[6u].z, fma(_656, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _655));
    float _768 = fma(_657, cbSceneParam._m0[7u].z, fma(_656, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _655));
    uint _781 = uint(roundEven(NORMAL.w)) * 13u;
    uint _782 = _781 + 9u;
    uint _783 = _782 + uint(cbMatDynParam._m0[0u].w);
    float _789 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0)))) * cbInstanceData._m0[_783].x;
    float _790 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0)))) * cbInstanceData._m0[_783].y;
    float _791 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0)))) * cbInstanceData._m0[_783].z;
    float _3979 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _792 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _3990 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _793 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _4001 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _794 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _795 = 1.0 - _662;
    float _796 = _792 * _795;
    float _797 = _793 * _795;
    float _798 = _794 * _795;
    float _803 = (_792 + (-0.039999999105930328369140625)) * _662;
    float _804 = (_793 + (-0.039999999105930328369140625)) * _662;
    float _805 = (_794 + (-0.039999999105930328369140625)) * _662;
    float _806 = _803 + 0.039999999105930328369140625;
    float _808 = _804 + 0.039999999105930328369140625;
    float _809 = _805 + 0.039999999105930328369140625;
    vec4 _818 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _743, cbSceneParam._m0[86u].y * _744));
    float _821 = _818.x * TEXCOORD_3.w;
    float _822 = dot(vec3(_655, _656, _657), vec3(_735, _736, _737));
    float _825 = _822 * 2.0;
    float _829 = (_825 * _655) - _735;
    float _830 = (_825 * _656) - _736;
    float _831 = (_825 * _657) - _737;
    float _835 = abs(dot(vec3(_735, _736, _737), vec3(_655, _656, _657)));
    float _4012 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _837 = sqrt(_658);
    float _850 = exp2((_837 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_837 * 3.0));
    float _856 = (1.0 - _850) * ((_837 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _857 = _850 * _837;
    float _885 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _889 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _893 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1195;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _920 = fma(_893, cbModelParam._m0[26u].z, fma(_889, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _885));
        float _924 = fma(_893, cbModelParam._m0[27u].z, fma(_889, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _885));
        float _928 = fma(_893, cbModelParam._m0[28u].z, fma(_889, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _885));
        float _953 = _885 + _655;
        float _954 = _889 + _656;
        float _955 = _893 + _657;
        float _965 = fma(_955, cbModelParam._m0[26u].z, fma(_954, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _953)) - _920;
        float _966 = fma(_955, cbModelParam._m0[27u].z, fma(_954, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _953)) - _924;
        float _967 = fma(_955, cbModelParam._m0[28u].z, fma(_954, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _953)) - _928;
        float _971 = inversesqrt(dot(vec3(_965, _966, _967), vec3(_965, _966, _967)));
        float _984 = ((_971 * _965) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_920 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _985 = ((_971 * _966) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_924 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _986 = ((_971 * _967) / cbModelParam._m0[34u].z) + ((((((_928 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        float _1023 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_989.x + (-0.5));
        float _1025 = _1023 * (_989.y + (-0.5));
        float _1026 = _1023 * (_989.z + (-0.5));
        float _1033 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_996.x + (-0.5));
        float _1035 = _1033 * (_996.y + (-0.5));
        float _1036 = _1033 * (_996.z + (-0.5));
        float _1043 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1003.x + (-0.5));
        float _1045 = _1043 * (_1003.y + (-0.5));
        float _1046 = _1043 * (_1003.z + (-0.5));
        float _1053 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1010.x + (-0.5));
        float _1055 = _1053 * (_1010.y + (-0.5));
        float _1056 = _1053 * (_1010.z + (-0.5));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1058 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1060 = _1024 * 0.5;
        float _1061 = _1034 * 0.5;
        float _1062 = _1044 * 0.5;
        float _1063 = dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062));
        float _1068 = (_1063 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1063);
        float _1077 = (dot(vec3(_655, _656, _657), vec3(_1068 * _1060, _1068 * _1061, _1068 * _1062)) + 1.0) * 0.5;
        float _4038 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1087 = sqrt(((_1061 * _1061) + (_1060 * _1060)) + (_1062 * _1062)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _4049 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1089 = _1088 * 2.0;
        float _1093 = (1.0 - _1088) / (_1088 + 1.0);
        float _4060 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1103 = ((((1.0 - _1094) * (_1089 + 2.0)) * exp2(log2(isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * (_1089 + 1.0))) + _1094) * _1057;
        float _1104 = _1025 * 0.5;
        float _1105 = _1035 * 0.5;
        float _1106 = _1045 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1120 = (dot(vec3(_655, _656, _657), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _4071 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1129 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1058 + 9.9999997473787516355514526367188e-06);
        float _4082 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1131 = _1130 * 2.0;
        float _1135 = (1.0 - _1130) / (_1130 + 1.0);
        float _4093 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1145 = ((((1.0 - _1136) * (_1131 + 2.0)) * exp2(log2(isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (_1131 + 1.0))) + _1136) * _1058;
        float _1146 = _1026 * 0.5;
        float _1147 = _1036 * 0.5;
        float _1148 = _1046 * 0.5;
        float _1149 = dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148));
        float _1154 = (_1149 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1149);
        float _1162 = (dot(vec3(_655, _656, _657), vec3(_1154 * _1146, _1154 * _1147, _1154 * _1148)) + 1.0) * 0.5;
        float _4104 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1171 = sqrt(((_1147 * _1147) + (_1146 * _1146)) + (_1148 * _1148)) / (_1059 + 9.9999997473787516355514526367188e-06);
        float _4115 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1173 = _1172 * 2.0;
        float _1177 = (1.0 - _1172) / (_1172 + 1.0);
        float _4126 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1187 = ((((1.0 - _1178) * (_1173 + 2.0)) * exp2(log2(isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_1173 + 1.0))) + _1178) * _1059;
        _1195 = _1026;
        _1197 = _1025;
        _1198 = _1024;
        _1199 = _1036;
        _1200 = _1035;
        _1201 = _1034;
        _1202 = _1046;
        _1203 = _1045;
        _1204 = _1044;
        _1205 = _1059;
        _1206 = _1058;
        _1207 = _1057;
        _1208 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)));
        _1209 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)));
        _1210 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)));
    }
    else
    {
        _1195 = _1196;
        _1197 = _1196;
        _1198 = _1196;
        _1199 = _1196;
        _1200 = _1196;
        _1201 = _1196;
        _1202 = _1196;
        _1203 = _1196;
        _1204 = _1196;
        _1205 = _1196;
        _1206 = _1196;
        _1207 = _1196;
        _1208 = 0.0;
        _1209 = 0.0;
        _1210 = 0.0;
    }
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1236 = fma(_893, cbModelParam._m0[30u].z, fma(_889, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _885));
        float _1240 = fma(_893, cbModelParam._m0[31u].z, fma(_889, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _885));
        float _1244 = fma(_893, cbModelParam._m0[32u].z, fma(_889, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _885));
        float _1267 = _885 + _655;
        float _1268 = _889 + _656;
        float _1269 = _893 + _657;
        float _1279 = fma(_1269, cbModelParam._m0[30u].z, fma(_1268, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1267)) - _1236;
        float _1280 = fma(_1269, cbModelParam._m0[31u].z, fma(_1268, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1267)) - _1240;
        float _1281 = fma(_1269, cbModelParam._m0[32u].z, fma(_1268, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1267)) - _1244;
        float _1285 = inversesqrt(dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281)));
        float _1298 = ((_1285 * _1279) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1236 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1299 = ((_1285 * _1280) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1240 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1300 = ((_1285 * _1281) / cbModelParam._m0[35u].z) + ((((((_1244 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        float _1335 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1302.x + (-0.5));
        float _1337 = _1335 * (_1302.y + (-0.5));
        float _1338 = _1335 * (_1302.z + (-0.5));
        float _1345 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1309.x + (-0.5));
        float _1347 = _1345 * (_1309.y + (-0.5));
        float _1348 = _1345 * (_1309.z + (-0.5));
        float _1355 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1316.x + (-0.5));
        float _1357 = _1355 * (_1316.y + (-0.5));
        float _1358 = _1355 * (_1316.z + (-0.5));
        float _1365 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1323.x + (-0.5));
        float _1367 = _1365 * (_1323.y + (-0.5));
        float _1368 = _1365 * (_1323.z + (-0.5));
        float _1369 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1370 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = _1336 * 0.5;
        float _1373 = _1346 * 0.5;
        float _1374 = _1356 * 0.5;
        float _1375 = dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374));
        float _1380 = (_1375 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1375);
        float _1388 = (dot(vec3(_655, _656, _657), vec3(_1380 * _1372, _1380 * _1373, _1380 * _1374)) + 1.0) * 0.5;
        float _4167 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1397 = sqrt(((_1373 * _1373) + (_1372 * _1372)) + (_1374 * _1374)) / (_1369 + 9.9999997473787516355514526367188e-06);
        float _4178 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1399 = _1398 * 2.0;
        float _1403 = (1.0 - _1398) / (_1398 + 1.0);
        float _4189 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1413 = ((((1.0 - _1404) * (_1399 + 2.0)) * exp2(log2(isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_1399 + 1.0))) + _1404) * _1369;
        float _1414 = _1337 * 0.5;
        float _1415 = _1347 * 0.5;
        float _1416 = _1357 * 0.5;
        float _1417 = dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416));
        float _1422 = (_1417 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1417);
        float _1430 = (dot(vec3(_655, _656, _657), vec3(_1422 * _1414, _1422 * _1415, _1422 * _1416)) + 1.0) * 0.5;
        float _4200 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1439 = sqrt(((_1415 * _1415) + (_1414 * _1414)) + (_1416 * _1416)) / (_1370 + 9.9999997473787516355514526367188e-06);
        float _4211 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1441 = _1440 * 2.0;
        float _1445 = (1.0 - _1440) / (_1440 + 1.0);
        float _4222 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1455 = ((((1.0 - _1446) * (_1441 + 2.0)) * exp2(log2(isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * (_1441 + 1.0))) + _1446) * _1370;
        float _1456 = _1338 * 0.5;
        float _1457 = _1348 * 0.5;
        float _1458 = _1358 * 0.5;
        float _1459 = dot(vec3(_1456, _1457, _1458), vec3(_1456, _1457, _1458));
        float _1464 = (_1459 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1459);
        float _1472 = (dot(vec3(_655, _656, _657), vec3(_1464 * _1456, _1464 * _1457, _1464 * _1458)) + 1.0) * 0.5;
        float _4233 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1481 = sqrt(((_1457 * _1457) + (_1456 * _1456)) + (_1458 * _1458)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _4244 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _1483 = _1482 * 2.0;
        float _1487 = (1.0 - _1482) / (_1482 + 1.0);
        float _4255 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1497 = ((((1.0 - _1488) * (_1483 + 2.0)) * exp2(log2(isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_1483 + 1.0))) + _1488) * _1371;
        _1505 = _1338;
        _1506 = _1337;
        _1507 = _1336;
        _1508 = _1348;
        _1509 = _1347;
        _1510 = _1346;
        _1511 = _1358;
        _1512 = _1357;
        _1513 = _1356;
        _1514 = _1371;
        _1515 = _1370;
        _1516 = _1369;
        _1517 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)));
        _1518 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)));
        _1519 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)));
    }
    else
    {
        _1505 = _1196;
        _1506 = _1196;
        _1507 = _1196;
        _1508 = _1196;
        _1509 = _1196;
        _1510 = _1196;
        _1511 = _1196;
        _1512 = _1196;
        _1513 = _1196;
        _1514 = _1196;
        _1515 = _1196;
        _1516 = _1196;
        _1517 = 0.0;
        _1518 = 0.0;
        _1519 = 0.0;
    }
    float _1529 = (cbModelParam._m0[1u].x * (_1517 - _1208)) + _1208;
    float _1530 = (cbModelParam._m0[1u].x * (_1518 - _1209)) + _1209;
    float _1531 = (cbModelParam._m0[1u].x * (_1519 - _1210)) + _1210;
    float _1552 = fma(_1531, cbSceneParam._m0[89u].z, fma(_1530, cbSceneParam._m0[89u].y, _1529 * cbSceneParam._m0[89u].x));
    float _1555 = fma(_1531, cbSceneParam._m0[90u].z, fma(_1530, cbSceneParam._m0[90u].y, _1529 * cbSceneParam._m0[90u].x));
    float _1558 = fma(_1531, cbSceneParam._m0[91u].z, fma(_1530, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1529));
    float _1573 = _829 * 0.5;
    float _1574 = _830 * 0.5;
    float _1575 = _831 * 0.5;
    float _1576 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1507, _1510, _1513, _1516));
    float _1579 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1506, _1509, _1512, _1515));
    float _1582 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1505, _1508, _1511, _1514));
    float _1616;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1589 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1195, _1199, _1202, _1205));
        float _1593 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1197, _1200, _1203, _1206));
        float _1597 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1198, _1201, _1204, _1207));
        float _1604 = dot(vec4(cbModelParam._m0[39u]), vec4(_1573, _1574, _1575, 1.0));
        _1616 = dot(vec3(isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)), isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)), isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1604) ? 0.0 : (isnan(0.0) ? _1604 : max(0.0, _1604))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1616 = 1.0;
    }
    float _1627;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1618 = dot(vec4(cbModelParam._m0[40u]), vec4(_1573, _1574, _1575, 1.0));
        _1627 = dot(vec3(isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)), isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)), isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1618) ? 0.0 : (isnan(0.0) ? _1618 : max(0.0, _1618))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1627 = 1.0;
    }
    float _1631 = (_1627 * cbModelParam._m0[1u].x) + (_1616 * (1.0 - cbModelParam._m0[1u].x));
    float _1641 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _658);
    float _1642 = isnan(_1641) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1641 : min(cbModelParam._m0[25u].z, _1641));
    float _1722;
    float _1724;
    float _1726;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1689 = fma(_893, cbModelParam._m0[13u].z, fma(_889, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _885)) + cbModelParam._m0[13u].w;
        float _1693 = fma(_893, cbModelParam._m0[14u].z, fma(_889, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _885)) + cbModelParam._m0[14u].w;
        float _1697 = fma(_893, cbModelParam._m0[15u].z, fma(_889, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _885)) + cbModelParam._m0[15u].w;
        float _1700 = fma(_831, cbModelParam._m0[13u].z, fma(_830, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _829));
        float _1703 = fma(_831, cbModelParam._m0[14u].z, fma(_830, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _829));
        float _1706 = fma(_831, cbModelParam._m0[15u].z, fma(_830, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _829));
        float _1734;
        if (_1700 > 0.0)
        {
            _1734 = abs((1.0 - _1689) / _1700);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1700 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1689 + 1.0) / _1700);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1734 = frontier_phi_14_12_ladder;
        }
        float _1907;
        if (_1703 > 0.0)
        {
            _1907 = abs((1.0 - _1693) / _1703);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1703 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1693 + 1.0) / _1703);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1907 = frontier_phi_23_19_ladder;
        }
        float _2202;
        if (_1706 > 0.0)
        {
            _2202 = abs((1.0 - _1697) / _1706);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1706 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1697 + 1.0) / _1706);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2202 = frontier_phi_35_30_ladder;
        }
        float _2204 = isnan(_1907) ? _1734 : (isnan(_1734) ? _1907 : min(_1734, _1907));
        float _2205 = isnan(_2202) ? _2204 : (isnan(_2204) ? _2202 : min(_2204, _2202));
        float _2209 = (_2205 * _1700) + _1689;
        float _2210 = (_2205 * _1703) + _1693;
        float _2211 = (_2205 * _1706) + _1697;
        float _2212 = _2205 * 9.9999997473787516355514526367188e-05;
        float _2214 = (-1.0) - _2212;
        float _2216 = _2212 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2211 > _2216) || ((_2211 < _2214) || ((_2210 > _2216) || ((_2210 < _2214) || ((_2209 < _2214) || (_2209 > _2216))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2356 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2211, cbModelParam._m0[9u].z, fma(_2210, cbModelParam._m0[9u].y, _2209 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2211, cbModelParam._m0[10u].z, fma(_2210, cbModelParam._m0[10u].y, _2209 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2211, cbModelParam._m0[11u].z, fma(_2210, cbModelParam._m0[11u].y, _2209 * cbModelParam._m0[11u].x))), _1642);
            frontier_phi_13_35_ladder = _2356.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2356.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2356.x * cbModelParam._m0[1u].y;
        }
        _1722 = frontier_phi_13_35_ladder_2;
        _1724 = frontier_phi_13_35_ladder_1;
        _1726 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1710 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_829, _830, _831), _1642);
        _1722 = _1710.x * cbModelParam._m0[1u].y;
        _1724 = _1710.y * cbModelParam._m0[1u].y;
        _1726 = _1710.z * cbModelParam._m0[1u].y;
    }
    float _1730 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _658);
    float _1731 = isnan(_1730) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1730 : min(cbModelParam._m0[25u].w, _1730));
    float _1822;
    float _1824;
    float _1826;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1786 = fma(_893, cbModelParam._m0[21u].z, fma(_889, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _885)) + cbModelParam._m0[21u].w;
        float _1790 = fma(_893, cbModelParam._m0[22u].z, fma(_889, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _885)) + cbModelParam._m0[22u].w;
        float _1794 = fma(_893, cbModelParam._m0[23u].z, fma(_889, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _885)) + cbModelParam._m0[23u].w;
        float _1797 = fma(_831, cbModelParam._m0[21u].z, fma(_830, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _829));
        float _1800 = fma(_831, cbModelParam._m0[22u].z, fma(_830, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _829));
        float _1803 = fma(_831, cbModelParam._m0[23u].z, fma(_830, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _829));
        float _1912;
        if (_1797 > 0.0)
        {
            _1912 = abs((1.0 - _1786) / _1797);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1786 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1912 = frontier_phi_25_21_ladder;
        }
        float _2229;
        if (_1800 > 0.0)
        {
            _2229 = abs((1.0 - _1790) / _1800);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1790 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2229 = frontier_phi_37_32_ladder;
        }
        float _2567;
        if (_1803 > 0.0)
        {
            _2567 = abs((1.0 - _1794) / _1803);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1794 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2567 = frontier_phi_47_44_ladder;
        }
        float _2569 = isnan(_2229) ? _1912 : (isnan(_1912) ? _2229 : min(_1912, _2229));
        float _2570 = isnan(_2567) ? _2569 : (isnan(_2569) ? _2567 : min(_2569, _2567));
        float _2574 = (_2570 * _1797) + _1786;
        float _2575 = (_2570 * _1800) + _1790;
        float _2576 = (_2570 * _1803) + _1794;
        float _2577 = _2570 * 9.9999997473787516355514526367188e-05;
        float _2578 = (-1.0) - _2577;
        float _2580 = _2577 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2576 > _2580) || ((_2576 < _2578) || ((_2575 > _2580) || ((_2575 < _2578) || ((_2574 < _2578) || (_2574 > _2580))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2698 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2576, cbModelParam._m0[17u].z, fma(_2575, cbModelParam._m0[17u].y, _2574 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2576, cbModelParam._m0[18u].z, fma(_2575, cbModelParam._m0[18u].y, _2574 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2576, cbModelParam._m0[19u].z, fma(_2575, cbModelParam._m0[19u].y, _2574 * cbModelParam._m0[19u].x))), _1731);
            frontier_phi_22_47_ladder = _2698.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2698.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2698.x * cbModelParam._m0[1u].z;
        }
        _1822 = frontier_phi_22_47_ladder_2;
        _1824 = frontier_phi_22_47_ladder_1;
        _1826 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1806 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_829, _830, _831), _1731);
        _1822 = _1806.x * cbModelParam._m0[1u].z;
        _1824 = _1806.y * cbModelParam._m0[1u].z;
        _1826 = _1806.z * cbModelParam._m0[1u].z;
    }
    float _1839 = (((_856 * _806) + _857) * _821) * ((cbModelParam._m0[1u].w * (_1822 - _1722)) + _1722);
    float _1841 = (((_856 * _808) + _857) * _821) * ((cbModelParam._m0[1u].w * (_1824 - _1724)) + _1724);
    float _1843 = (((_856 * _809) + _857) * _821) * ((cbModelParam._m0[1u].w * (_1826 - _1726)) + _1726);
    float _1846 = fma(_1843, cbSceneParam._m0[89u].z, fma(_1841, cbSceneParam._m0[89u].y, _1839 * cbSceneParam._m0[89u].x));
    float _1849 = fma(_1843, cbSceneParam._m0[90u].z, fma(_1841, cbSceneParam._m0[90u].y, _1839 * cbSceneParam._m0[90u].x));
    float _1852 = fma(_1843, cbSceneParam._m0[91u].z, fma(_1841, cbSceneParam._m0[91u].y, _1839 * cbSceneParam._m0[91u].x));
    float _1886 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1890 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1894 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1898 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1899 = _1886 / _1898;
    float _1900 = _1890 / _1898;
    float _1901 = _1894 / _1898;
    float _2048;
    float _2049;
    float _2050;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1928 = ((uint(_1901 > cbSceneParam._m0[59u].y) + uint(_1901 > cbSceneParam._m0[59u].x)) + uint(_1901 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1929 = _1928 + 43u;
        uint _1937 = _1928 + 44u;
        uint _1945 = _1928 + 45u;
        uint _1953 = _1928 + 46u;
        float _1964 = fma(_1898, cbSceneParam._m0[_1929].w, fma(_1894, cbSceneParam._m0[_1929].z, fma(_1890, cbSceneParam._m0[_1929].y, _1886 * cbSceneParam._m0[_1929].x)));
        float _1968 = fma(_1898, cbSceneParam._m0[_1937].w, fma(_1894, cbSceneParam._m0[_1937].z, fma(_1890, cbSceneParam._m0[_1937].y, _1886 * cbSceneParam._m0[_1937].x)));
        float _1976 = fma(_1898, cbSceneParam._m0[_1953].w, fma(_1894, cbSceneParam._m0[_1953].z, fma(_1890, cbSceneParam._m0[_1953].y, _1886 * cbSceneParam._m0[_1953].x)));
        float _1981 = cbSceneParam._m0[33u].z * _1976;
        float _1983 = cbSceneParam._m0[33u].w * _1976;
        float _1986 = fma(_1898, cbSceneParam._m0[_1945].w, fma(_1894, cbSceneParam._m0[_1945].z, fma(_1890, cbSceneParam._m0[_1945].y, _1886 * cbSceneParam._m0[_1945].x))) / _1976;
        float _2034 = (cbSceneParam._m0[33u].x - sqrt(((_1900 * _1900) + (_1899 * _1899)) + (_1901 * _1901))) * cbSceneParam._m0[33u].y;
        float _4381 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
        float _2041 = (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1981 + _1964) / _1976, (_1983 + _1968) / _1976), _1986), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1983 + _1964) / _1976, (_1968 - _1981) / _1976), _1986), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1964 - _1981) / _1976, (_1968 - _1983) / _1976), _1986), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1964 - _1983) / _1976, (_1981 + _1968) / _1976), _1986), 0.0)).x), vec4(0.25)));
        _2048 = 1.0 - (_2041 * cbSceneParam._m0[34u].x);
        _2049 = 1.0 - (_2041 * cbSceneParam._m0[34u].y);
        _2050 = 1.0 - (_2041 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2048 = 1.0;
        _2049 = 1.0;
        _2050 = 1.0;
    }
    float _2114;
    float _2116;
    float _2118;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2102 = fma(_1898, cbSceneParam._m0[63u].w, fma(_1894, cbSceneParam._m0[63u].z, fma(_1890, cbSceneParam._m0[63u].y, _1886 * cbSceneParam._m0[63u].x)));
        float _2103 = fma(_1898, cbSceneParam._m0[60u].w, fma(_1894, cbSceneParam._m0[60u].z, fma(_1890, cbSceneParam._m0[60u].y, _1886 * cbSceneParam._m0[60u].x))) / _2102;
        float _2104 = fma(_1898, cbSceneParam._m0[61u].w, fma(_1894, cbSceneParam._m0[61u].z, fma(_1890, cbSceneParam._m0[61u].y, _1886 * cbSceneParam._m0[61u].x))) / _2102;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2103 >= cbSceneParam._m0[64u].x) && (_2104 >= cbSceneParam._m0[64u].y)) && (_2103 <= cbSceneParam._m0[64u].z)) && (_2104 <= cbSceneParam._m0[64u].w))
        {
            float _2242 = fma(_1898, cbSceneParam._m0[62u].w, fma(_1894, cbSceneParam._m0[62u].z, fma(_1890, cbSceneParam._m0[62u].y, _1886 * cbSceneParam._m0[62u].x))) / _2102;
            float _2246 = isnan(cbSceneParam._m0[41u].w) ? _2242 : (isnan(_2242) ? cbSceneParam._m0[41u].w : max(_2242, cbSceneParam._m0[41u].w));
            float _2289 = (cbSceneParam._m0[33u].x - sqrt(((_1900 * _1900) + (_1899 * _1899)) + (_1901 * _1901))) * cbSceneParam._m0[33u].y;
            float _4397 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
            float _2296 = (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2103, cbSceneParam._m0[33u].w + _2104), _2246), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2103, _2104 - cbSceneParam._m0[33u].z), _2246), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2103 - cbSceneParam._m0[33u].z, _2104 - cbSceneParam._m0[33u].w), _2246), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2103 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2104), _2246), 0.0)).x), vec4(0.25)));
            float _2300 = 1.0 - (_2296 * cbSceneParam._m0[34u].x);
            float _2301 = 1.0 - (_2296 * cbSceneParam._m0[34u].y);
            float _2302 = 1.0 - (_2296 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2302) ? _2050 : (isnan(_2050) ? _2302 : min(_2050, _2302));
            frontier_phi_34_33_ladder_1 = isnan(_2301) ? _2049 : (isnan(_2049) ? _2301 : min(_2049, _2301));
            frontier_phi_34_33_ladder_2 = isnan(_2300) ? _2048 : (isnan(_2048) ? _2300 : min(_2048, _2300));
        }
        else
        {
            frontier_phi_34_33_ladder = _2050;
            frontier_phi_34_33_ladder_1 = _2049;
            frontier_phi_34_33_ladder_2 = _2048;
        }
        _2114 = frontier_phi_34_33_ladder_2;
        _2116 = frontier_phi_34_33_ladder_1;
        _2118 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2114 = _2048;
        _2116 = _2049;
        _2118 = _2050;
    }
    uvec4 _2123 = floatBitsToUint(cbInstanceData._m0[_781 + 5u]);
    uint _2125 = _2123.x * 14u;
    uint _2126 = _2125 + 13u;
    float _2133 = _821 + (-1.0);
    float _2138 = (cbLight._m0[_2126].x * _2133) + 1.0;
    float _2139 = (cbLight._m0[_2126].y * _2133) + 1.0;
    float _2140 = (cbLight._m0[_2126].z * _2133) + 1.0;
    float _2141 = (cbLight._m0[_2126].w * _2133) + 1.0;
    uint _2142 = _2125 + 5u;
    float _2148 = isnan(1.0) ? _2139 : (isnan(_2139) ? 1.0 : min(_2139, 1.0));
    uint _2152 = _2125 + 4u;
    float _2161 = isnan(1.0) ? _2138 : (isnan(_2138) ? 1.0 : min(_2138, 1.0));
    uint _2165 = _2125 | 1u;
    float _2176 = dot(vec3(cbLight._m0[_2125].xyz), vec3(_655, _656, _657));
    float _2179 = dot(vec3(cbLight._m0[_2165].xyz), vec3(_655, _656, _657));
    float _4433 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _4444 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2184 = (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * 0.3183098733425140380859375;
    float _2186 = (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * 0.3183098733425140380859375;
    float _2193 = ((cbLight._m0[_2142].x * _2148) * _2186) + (((cbLight._m0[_2152].x * _2114) * _2161) * _2184);
    float _2194 = ((_2148 * cbLight._m0[_2142].y) * _2186) + (((cbLight._m0[_2152].y * _2116) * _2161) * _2184);
    float _2195 = ((_2148 * cbLight._m0[_2142].z) * _2186) + (((cbLight._m0[_2152].z * _2118) * _2161) * _2184);
    uvec4 _2199 = floatBitsToUint(cbLight._m0[_2125 + 12u]);
    bool _2201 = _2199.x == 0u;
    float _2303;
    float _2305;
    float _2307;
    if (_2201)
    {
        _2303 = _2193;
        _2305 = _2194;
        _2307 = _2195;
    }
    else
    {
        uint _2311 = _2125 + 6u;
        float _2327 = (dot(vec3(cbLight._m0[_2125 + 2u].xyz), vec3(_655, _656, _657)) * 0.5) + 0.5;
        float _2328 = _2327 * _2327;
        float _4455 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2329 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _2330 = isnan(1.0) ? _2140 : (isnan(_2140) ? 1.0 : min(_2140, 1.0));
        _2303 = (((cbLight._m0[_2311].x * 0.3183098733425140380859375) * _2329) * _2330) + _2193;
        _2305 = (((cbLight._m0[_2311].y * 0.3183098733425140380859375) * _2329) * _2330) + _2194;
        _2307 = (((cbLight._m0[_2311].z * 0.3183098733425140380859375) * _2329) * _2330) + _2195;
    }
    bool _2310 = _2199.y == 0u;
    float _2365;
    float _2367;
    float _2369;
    if (_2310)
    {
        _2365 = _2303;
        _2367 = _2305;
        _2369 = _2307;
    }
    else
    {
        uint _2538 = _2125 + 7u;
        float _2554 = (dot(vec3(cbLight._m0[_2125 + 3u].xyz), vec3(_655, _656, _657)) * 0.5) + 0.5;
        float _2555 = _2554 * _2554;
        float _4471 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2556 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _2557 = isnan(1.0) ? _2141 : (isnan(_2141) ? 1.0 : min(_2141, 1.0));
        _2365 = (((cbLight._m0[_2538].x * 0.3183098733425140380859375) * _2556) * _2557) + _2303;
        _2367 = (((cbLight._m0[_2538].y * 0.3183098733425140380859375) * _2556) * _2557) + _2305;
        _2369 = (((cbLight._m0[_2538].z * 0.3183098733425140380859375) * _2556) * _2557) + _2307;
    }
    uint _2372 = _2125 + 8u;
    float _2385 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2125].w)) * _658) * 0.949999988079071044921875);
    float _2386 = _2385 * _2385;
    float _2387 = cbLight._m0[_2125].x + _735;
    float _2388 = cbLight._m0[_2125].y + _736;
    float _2389 = cbLight._m0[_2125].z + _737;
    float _2393 = inversesqrt(dot(vec3(_2387, _2388, _2389), vec3(_2387, _2388, _2389)));
    float _2394 = _2393 * _2387;
    float _2395 = _2393 * _2388;
    float _2396 = _2393 * _2389;
    float _2397 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_2125].xyz));
    float _4487 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2400 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
    float _4498 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _2401 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
    float _2402 = dot(vec3(_655, _656, _657), vec3(_2394, _2395, _2396));
    float _4509 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
    float _2405 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
    float _2406 = dot(vec3(cbLight._m0[_2125].xyz), vec3(_2394, _2395, _2396));
    float _4520 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2410 = _2386 * _2386;
    float _2414 = ((_2405 * _2405) * (_2410 + (-1.0))) + 1.0;
    float _2422 = exp2(log2(1.0 - (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) * 5.0);
    float _2423 = 0.959999978542327880859375 - _803;
    float _2425 = 0.959999978542327880859375 - _804;
    float _2426 = 0.959999978542327880859375 - _805;
    float _2433 = 1.0 - _2386;
    float _2444 = (0.5 / (((_2401 * ((_2400 * _2433) + _2386)) + 9.9999999392252902907785028219223e-09) + (((_2401 * _2433) + _2386) * _2400))) * _2400;
    float _4531 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
    float _2446 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2410 / ((_2414 * _2414) * 3.141590118408203125));
    uint _2460 = _2125 + 9u;
    float _2471 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2165].w)) * _658) * 0.949999988079071044921875);
    float _2472 = _2471 * _2471;
    float _2473 = cbLight._m0[_2165].x + _735;
    float _2474 = cbLight._m0[_2165].y + _736;
    float _2475 = cbLight._m0[_2165].z + _737;
    float _2479 = inversesqrt(dot(vec3(_2473, _2474, _2475), vec3(_2473, _2474, _2475)));
    float _2480 = _2479 * _2473;
    float _2481 = _2479 * _2474;
    float _2482 = _2479 * _2475;
    float _2483 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_2165].xyz));
    float _4542 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
    float _2486 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
    float _2487 = dot(vec3(_655, _656, _657), vec3(_2480, _2481, _2482));
    float _4553 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
    float _2490 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
    float _2491 = dot(vec3(cbLight._m0[_2165].xyz), vec3(_2480, _2481, _2482));
    float _4564 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
    float _2495 = _2472 * _2472;
    float _2499 = ((_2490 * _2490) * (_2495 + (-1.0))) + 1.0;
    float _2506 = exp2(log2(1.0 - (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0)))) * 5.0);
    float _2513 = 1.0 - _2472;
    float _2523 = (0.5 / (((_2401 * ((_2486 * _2513) + _2472)) + 9.9999999392252902907785028219223e-09) + (((_2401 * _2513) + _2472) * _2486))) * _2486;
    float _4575 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
    float _2525 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2495 / ((_2499 * _2499) * 3.141590118408203125));
    float _2535 = (((((_2506 * _2423) + _806) * cbLight._m0[_2460].x) * _2525) * _2148) + ((((cbLight._m0[_2372].x * _2114) * ((_2422 * _2423) + _806)) * _2446) * _2161);
    float _2536 = (((((_2506 * _2425) + _808) * cbLight._m0[_2460].y) * _2525) * _2148) + ((((cbLight._m0[_2372].y * _2116) * ((_2422 * _2425) + _808)) * _2446) * _2161);
    float _2537 = (((((_2506 * _2426) + _809) * cbLight._m0[_2460].z) * _2525) * _2148) + ((((cbLight._m0[_2372].z * _2118) * ((_2422 * _2426) + _809)) * _2446) * _2161);
    float _2593;
    float _2595;
    float _2597;
    if (_2201)
    {
        _2593 = _2535;
        _2595 = _2536;
        _2597 = _2537;
    }
    else
    {
        uint _2599 = _2125 + 2u;
        uint _2603 = _2125 + 10u;
        float _2617 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2599].w)) * _658) * 0.949999988079071044921875);
        float _2618 = _2617 * _2617;
        float _2619 = cbLight._m0[_2599].x + _735;
        float _2620 = cbLight._m0[_2599].y + _736;
        float _2621 = cbLight._m0[_2599].z + _737;
        float _2625 = inversesqrt(dot(vec3(_2619, _2620, _2621), vec3(_2619, _2620, _2621)));
        float _2626 = _2625 * _2619;
        float _2627 = _2625 * _2620;
        float _2628 = _2625 * _2621;
        float _2629 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_2599].xyz));
        float _4586 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        float _2632 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
        float _2633 = dot(vec3(_655, _656, _657), vec3(_2626, _2627, _2628));
        float _4597 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        float _2636 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
        float _2637 = dot(vec3(cbLight._m0[_2599].xyz), vec3(_2626, _2627, _2628));
        float _4608 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        float _2641 = _2618 * _2618;
        float _2645 = ((_2636 * _2636) * (_2641 + (-1.0))) + 1.0;
        float _2652 = exp2(log2(1.0 - (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0)))) * 5.0);
        float _2659 = 1.0 - _2618;
        float _2669 = (0.5 / (((_2401 * ((_2632 * _2659) + _2618)) + 9.9999999392252902907785028219223e-09) + (((_2401 * _2659) + _2618) * _2632))) * _2632;
        float _4619 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
        float _2671 = (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (_2641 / ((_2645 * _2645) * 3.141590118408203125));
        float _2672 = isnan(1.0) ? _2140 : (isnan(_2140) ? 1.0 : min(_2140, 1.0));
        _2593 = (((((_2652 * _2423) + _806) * cbLight._m0[_2603].x) * _2671) * _2672) + _2535;
        _2595 = (((((_2652 * _2425) + _808) * cbLight._m0[_2603].y) * _2671) * _2672) + _2536;
        _2597 = (((((_2652 * _2426) + _809) * cbLight._m0[_2603].z) * _2671) * _2672) + _2537;
    }
    float _2703;
    float _2705;
    float _2707;
    if (_2310)
    {
        _2703 = _2593;
        _2705 = _2595;
        _2707 = _2597;
    }
    else
    {
        uint _2714 = _2125 + 3u;
        uint _2718 = _2125 + 11u;
        float _2732 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2714].w)) * _658) * 0.949999988079071044921875);
        float _2733 = _2732 * _2732;
        float _2734 = cbLight._m0[_2714].x + _735;
        float _2735 = cbLight._m0[_2714].y + _736;
        float _2736 = cbLight._m0[_2714].z + _737;
        float _2740 = inversesqrt(dot(vec3(_2734, _2735, _2736), vec3(_2734, _2735, _2736)));
        float _2741 = _2740 * _2734;
        float _2742 = _2740 * _2735;
        float _2743 = _2740 * _2736;
        float _2744 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_2714].xyz));
        float _4635 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
        float _2747 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
        float _2748 = dot(vec3(_655, _656, _657), vec3(_2741, _2742, _2743));
        float _4646 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
        float _2751 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _2752 = dot(vec3(cbLight._m0[_2714].xyz), vec3(_2741, _2742, _2743));
        float _4657 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
        float _2756 = _2733 * _2733;
        float _2760 = ((_2751 * _2751) * (_2756 + (-1.0))) + 1.0;
        float _2767 = exp2(log2(1.0 - (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0)))) * 5.0);
        float _2774 = 1.0 - _2733;
        float _2784 = (0.5 / (((_2401 * ((_2747 * _2774) + _2733)) + 9.9999999392252902907785028219223e-09) + (((_2401 * _2774) + _2733) * _2747))) * _2747;
        float _4668 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
        float _2786 = (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (_2756 / ((_2760 * _2760) * 3.141590118408203125));
        float _2787 = isnan(1.0) ? _2141 : (isnan(_2141) ? 1.0 : min(_2141, 1.0));
        _2703 = (((((_2767 * _2423) + _806) * cbLight._m0[_2718].x) * _2786) * _2787) + _2593;
        _2705 = (((((_2767 * _2425) + _808) * cbLight._m0[_2718].y) * _2786) * _2787) + _2595;
        _2707 = (((((_2767 * _2426) + _809) * cbLight._m0[_2718].z) * _2786) * _2787) + _2597;
    }
    float _2853;
    float _2855;
    float _2857;
    float _2859;
    float _2861;
    float _2863;
    if (_2123.y == 0u)
    {
        uvec4 _2808 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2809 = _2808.x;
        uint _2820 = uint((float(_2808.y) * floor(float(uint(cbSceneParam._m0[85u].y * _744) / _2809))) + floor(float(uint(cbSceneParam._m0[85u].x * _743) / _2809)));
        float _2830 = (log2(_1901 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2831 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
        uint _2834 = uint(isnan(14.0) ? _2831 : (isnan(_2831) ? 14.0 : min(_2831, 14.0)));
        uvec4 _2839 = texelFetch(g_lightClusterGridBuffer, int(((_2834 << 2u) + (_2820 << 6u)) >> 2u));
        uint _2840 = _2839.x;
        uint _2841 = _2808.z;
        float _2949;
        float _2951;
        float _2953;
        float _2955;
        float _2957;
        float _2959;
        if (((((1u << ((_2841 >> 4u) & 15u)) + 4294967295u) & _2840) == 0u) || ((_2841 & 240u) == 0u))
        {
            _2949 = 0.0;
            _2951 = 0.0;
            _2953 = 0.0;
            _2955 = 0.0;
            _2957 = 0.0;
            _2959 = 0.0;
        }
        else
        {
            float _2950;
            float _2952;
            float _2954;
            float _2956;
            float _2958;
            float _2960;
            float _3103 = 0.0;
            float _3104 = 0.0;
            float _3105 = 0.0;
            float _3106 = 0.0;
            float _3107 = 0.0;
            float _3108 = 0.0;
            uint _3109 = 0u;
            uint _3118;
            bool _3119;
            for (;;)
            {
                _3118 = texelFetch(g_lightClassification, int((((_2834 << 5u) + (_2820 << 9u)) + (_3109 << 2u)) >> 2u)).x;
                _3119 = _3118 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3119)
                {
                    frontier_phi_66_pred = _3108;
                    frontier_phi_66_pred_1 = _3107;
                    frontier_phi_66_pred_2 = _3106;
                    frontier_phi_66_pred_3 = _3105;
                    frontier_phi_66_pred_4 = _3104;
                    frontier_phi_66_pred_5 = _3103;
                }
                else
                {
                    float _3227;
                    float _3228;
                    float _3229;
                    float _3230;
                    float _3231;
                    float _3232;
                    uint _3233;
                    _3227 = _3103;
                    _3228 = _3104;
                    _3229 = _3105;
                    _3230 = _3106;
                    _3231 = _3107;
                    _3232 = _3108;
                    _3233 = _3118;
                    float _3159;
                    float _3160;
                    float _3161;
                    float _3162;
                    float _3163;
                    float _3164;
                    for (;;)
                    {
                        uint _3237 = uint(findLSB(_3233)) + (_3109 << 5u);
                        uint _3234 = (_3233 + 4294967295u) & _3233;
                        uint _3239 = _3237 * 48u;
                        vec4 _3253 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3239)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 3u)).x));
                        uint _3259 = (_3237 * 48u) + 4u;
                        vec4 _3272 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3259)).x, texelFetch(g_PointLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3259 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3259 + 3u)).x));
                        uint _3278 = (_3237 * 48u) + 8u;
                        vec3 _3289 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3278)).x, texelFetch(g_PointLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3278 + 2u)).x));
                        float _3293 = _3253.x - _1899;
                        float _3294 = _3253.y - _1900;
                        float _3295 = _3253.z - _1901;
                        float _3296 = dot(vec3(_3293, _3294, _3295), vec3(_3293, _3294, _3295));
                        float _3299 = inversesqrt(_3296);
                        float _3300 = _3299 * _3293;
                        float _3301 = _3299 * _3294;
                        float _3302 = _3299 * _3295;
                        float _3303 = dot(vec3(_762, _765, _768), vec3(_3300, _3301, _3302));
                        float _3308 = 1.0 - (_3296 * _3253.w);
                        float _4694 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                        float _3309 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                        float _3310 = sqrt(_3296) * _3272.w;
                        float _3313 = 1.39999997615814208984375 / (_3310 + 1.39999997615814208984375);
                        float _3314 = _3313 * _3313;
                        float _3317 = ((1.0 - _3314) * _3303) + _3314;
                        float _3320 = _3310 * _3310;
                        float _3324 = ((isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0))) * _3309) / ((_3320 * 0.699999988079071044921875) + 1.0);
                        float _3328 = (-0.0) - _1899;
                        float _3329 = (-0.0) - _1900;
                        float _3330 = (-0.0) - _1901;
                        float _3334 = inversesqrt(dot(vec3(_3328, _3329, _3330), vec3(_3328, _3329, _3330)));
                        float _3335 = _3334 * _3328;
                        float _3336 = _3334 * _3329;
                        float _3337 = _3334 * _3330;
                        float _3344 = exp2(log2(1.0 / ((_3320 * 3.5) + 5.0)) * 0.25);
                        float _3345 = 1.0 - _837;
                        float _3352 = sqrt(1.0 - ((1.0 - (_3345 * _3345)) * (1.0 - (_3344 * _3344))));
                        float _3353 = _3352 * _3352;
                        float _3354 = _3353 * _3353;
                        float _3355 = _3335 + _3300;
                        float _3356 = _3336 + _3301;
                        float _3357 = _3337 + _3302;
                        float _3361 = inversesqrt(dot(vec3(_3355, _3356, _3357), vec3(_3355, _3356, _3357)));
                        float _3365 = dot(vec3(_762, _765, _768), vec3(_3335, _3336, _3337));
                        float _4710 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                        float _3368 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                        float _3369 = dot(vec3(_762, _765, _768), vec3(_3361 * _3355, _3361 * _3356, _3361 * _3357));
                        float _4721 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                        float _3372 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
                        float _3376 = ((_3372 * _3372) * (_3354 + (-1.0))) + 1.0;
                        float _3377 = _3313 * _3353;
                        float _3378 = _3377 * _3377;
                        float _3381 = ((1.0 - _3378) * _3303) + _3378;
                        float _4732 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                        float _3382 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
                        float _3383 = 1.0 - _3353;
                        float _3393 = (0.5 / (((_3382 * ((_3368 * _3383) + _3353)) + 9.9999999392252902907785028219223e-09) + (((_3382 * _3383) + _3353) * _3368))) * _3382;
                        float _4743 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                        float _3404 = (((_3354 * 3.1415927410125732421875) * (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0)))) / ((_3376 * _3376) * ((_3320 * 2.1991131305694580078125) + 3.141590118408203125))) * _3309;
                        _3162 = (_3324 * _3272.x) + _3230;
                        _3163 = (_3324 * _3272.y) + _3231;
                        _3164 = (_3324 * _3272.z) + _3232;
                        _3159 = (_3404 * _3289.x) + _3227;
                        _3160 = (_3404 * _3289.y) + _3228;
                        _3161 = (_3404 * _3289.z) + _3229;
                        if (_3234 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3227 = _3159;
                            _3228 = _3160;
                            _3229 = _3161;
                            _3230 = _3162;
                            _3231 = _3163;
                            _3232 = _3164;
                            _3233 = _3234;
                        }
                    }
                    frontier_phi_66_pred = _3164;
                    frontier_phi_66_pred_1 = _3163;
                    frontier_phi_66_pred_2 = _3162;
                    frontier_phi_66_pred_3 = _3161;
                    frontier_phi_66_pred_4 = _3160;
                    frontier_phi_66_pred_5 = _3159;
                }
                _2960 = frontier_phi_66_pred;
                _2958 = frontier_phi_66_pred_1;
                _2956 = frontier_phi_66_pred_2;
                _2954 = frontier_phi_66_pred_3;
                _2952 = frontier_phi_66_pred_4;
                _2950 = frontier_phi_66_pred_5;
                uint _3110 = _3109 + 1u;
                if (_3110 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3103 = _2950;
                    _3104 = _2952;
                    _3105 = _2954;
                    _3106 = _2956;
                    _3107 = _2958;
                    _3108 = _2960;
                    _3109 = _3110;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2949 = _2950;
            _2951 = _2952;
            _2953 = _2954;
            _2955 = _2956;
            _2957 = _2958;
            _2959 = _2960;
        }
        uvec4 _2963 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2964 = _2963.z;
        uint _2966 = (_2964 >> 8u) & 15u;
        float _3071;
        float _3073;
        float _3075;
        float _3077;
        float _3079;
        float _3081;
        if (((4294967295u << _2966) & _2840) == 0u)
        {
            _3071 = _2949;
            _3073 = _2951;
            _3075 = _2953;
            _3077 = _2955;
            _3079 = _2957;
            _3081 = _2959;
        }
        else
        {
            float _3096 = inversesqrt(dot(vec3(_1899, _1900, _1901), vec3(_1899, _1900, _1901)));
            float _3097 = _3096 * _1899;
            float _3098 = _3096 * _1900;
            float _3099 = _3096 * _1901;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2966 < ((_2964 >> 12u) & 15u))
            {
                float _3072;
                float _3074;
                float _3076;
                float _3078;
                float _3080;
                float _3082;
                float _3210 = _2949;
                float _3211 = _2951;
                float _3212 = _2953;
                float _3213 = _2955;
                float _3214 = _2957;
                float _3215 = _2959;
                uint _3216 = _2966;
                uint _3225;
                bool _3226;
                for (;;)
                {
                    _3225 = texelFetch(g_lightClassification, int((((_2834 << 5u) + (_2820 << 9u)) + (_3216 << 2u)) >> 2u)).x;
                    _3226 = _3225 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3226)
                    {
                        frontier_phi_72_pred = _3215;
                        frontier_phi_72_pred_1 = _3214;
                        frontier_phi_72_pred_2 = _3213;
                        frontier_phi_72_pred_3 = _3212;
                        frontier_phi_72_pred_4 = _3211;
                        frontier_phi_72_pred_5 = _3210;
                    }
                    else
                    {
                        float _3409;
                        float _3410;
                        float _3411;
                        float _3412;
                        float _3413;
                        float _3414;
                        float _3704;
                        float _3705;
                        float _3706;
                        float _3707;
                        float _3708;
                        float _3709;
                        float _3422 = _3210;
                        float _3423 = _3211;
                        float _3424 = _3212;
                        float _3425 = _3213;
                        float _3426 = _3214;
                        float _3427 = _3215;
                        uint _3428 = _3225;
                        uint _3429;
                        vec4 _3454;
                        float _3455;
                        vec4 _3470;
                        vec3 _3482;
                        vec4 _3497;
                        vec4 _3513;
                        float _3560;
                        bool _3561;
                        for (;;)
                        {
                            uint _3439 = ((_3216 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3428));
                            _3429 = (_3428 + 4294967295u) & _3428;
                            uint _3441 = _3439 * 40u;
                            _3454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 3u)).x));
                            _3455 = _3454.w;
                            uint _3457 = (_3439 * 40u) + 4u;
                            _3470 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3457)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 3u)).x));
                            uint _3472 = (_3439 * 40u) + 8u;
                            _3482 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 2u)).x));
                            uint _3484 = (_3439 * 40u) + 16u;
                            _3497 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 3u)).x));
                            uint _3500 = (_3439 * 40u) + 20u;
                            _3513 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3500)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 3u)).x));
                            uint _3516 = (_3439 * 40u) + 24u;
                            vec4 _3529 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3516)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 3u)).x));
                            uint _3535 = (_3439 * 40u) + 28u;
                            vec4 _3548 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3535)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 3u)).x));
                            _3560 = fma(_1901, _3548.z, fma(_1900, _3548.y, _3548.x * _1899)) + _3548.w;
                            _3561 = !((fma(_1901, _3529.z, fma(_1900, _3529.y, _3529.x * _1899)) + _3529.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3561)
                            {
                                float _3588 = _3454.x - _1899;
                                float _3589 = _3454.y - _1900;
                                float _3590 = _3454.z - _1901;
                                float _3591 = dot(vec3(_3588, _3589, _3590), vec3(_3588, _3589, _3590));
                                float _3594 = inversesqrt(_3591);
                                float _3595 = _3594 * _3588;
                                float _3596 = _3594 * _3589;
                                float _3597 = _3594 * _3590;
                                float _3601 = 1.0 - (_3591 / (_3455 * _3455));
                                float _4754 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                                float _3602 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
                                float _3606 = sqrt(_3591) * _3470.w;
                                float _3608 = 1.39999997615814208984375 / (_3606 + 1.39999997615814208984375);
                                float _3609 = _3608 * _3608;
                                float _3612 = ((1.0 - _3609) * dot(vec3(_3595, _3596, _3597), vec3(_762, _765, _768))) + _3609;
                                float _3615 = _3606 * _3606;
                                float _3619 = (fma(_1901, _3497.z, fma(_1900, _3497.y, _3497.x * _1899)) + _3497.w) / _3560;
                                float _3620 = (fma(_1901, _3513.z, fma(_1900, _3513.y, _3513.x * _1899)) + _3513.w) / _3560;
                                float _3624 = 1.0 - dot(vec2(_3619, _3620), vec2(_3619, _3620));
                                float _4770 = isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0));
                                float _3625 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
                                float _3626 = _3625 * (((isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0))) * _3602) / ((_3615 * 0.699999988079071044921875) + 1.0));
                                float _3638 = exp2(log2(1.0 / ((_3615 * 3.5) + 5.0)) * 0.25);
                                float _3639 = 1.0 - _837;
                                float _3646 = sqrt(1.0 - ((1.0 - (_3639 * _3639)) * (1.0 - (_3638 * _3638))));
                                float _3647 = _3646 * _3646;
                                float _3648 = _3647 * _3647;
                                float _3649 = _3595 - _3097;
                                float _3650 = _3596 - _3098;
                                float _3651 = _3597 - _3099;
                                float _3655 = inversesqrt(dot(vec3(_3649, _3650, _3651), vec3(_3649, _3650, _3651)));
                                float _3659 = dot(vec3(_762, _765, _768), vec3((-0.0) - _3097, (-0.0) - _3098, (-0.0) - _3099));
                                float _4781 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                                float _3662 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                                float _3663 = dot(vec3(_762, _765, _768), vec3(_3655 * _3649, _3655 * _3650, _3655 * _3651));
                                float _4792 = isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0));
                                float _3666 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                                float _3670 = ((_3666 * _3666) * (_3648 + (-1.0))) + 1.0;
                                float _3671 = _3608 * _3647;
                                float _3672 = _3671 * _3671;
                                float _3678 = ((1.0 - _3672) * dot(vec3(_762, _765, _768), vec3(_3595, _3596, _3597))) + _3672;
                                float _4803 = isnan(0.0) ? _3678 : (isnan(_3678) ? 0.0 : max(_3678, 0.0));
                                float _3679 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                                float _3680 = 1.0 - _3647;
                                float _3690 = (0.5 / (((_3679 * ((_3662 * _3680) + _3647)) + 9.9999999392252902907785028219223e-09) + (((_3679 * _3680) + _3647) * _3662))) * _3679;
                                float _4814 = isnan(0.0) ? _3690 : (isnan(_3690) ? 0.0 : max(_3690, 0.0));
                                float _3700 = (_3625 * _3602) * (((_3648 * 3.1415927410125732421875) * (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0)))) / ((_3670 * _3670) * ((_3615 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3626 * _3470.y;
                                frontier_phi_78_pred_1 = _3626 * _3470.x;
                                frontier_phi_78_pred_2 = _3700 * _3482.z;
                                frontier_phi_78_pred_3 = _3700 * _3482.y;
                                frontier_phi_78_pred_4 = _3700 * _3482.x;
                                frontier_phi_78_pred_5 = _3626 * _3470.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3708 = frontier_phi_78_pred;
                            _3707 = frontier_phi_78_pred_1;
                            _3706 = frontier_phi_78_pred_2;
                            _3705 = frontier_phi_78_pred_3;
                            _3704 = frontier_phi_78_pred_4;
                            _3709 = frontier_phi_78_pred_5;
                            _3412 = _3707 + _3425;
                            _3413 = _3708 + _3426;
                            _3414 = _3709 + _3427;
                            _3409 = _3704 + _3422;
                            _3410 = _3705 + _3423;
                            _3411 = _3706 + _3424;
                            if (_3429 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3422 = _3409;
                                _3423 = _3410;
                                _3424 = _3411;
                                _3425 = _3412;
                                _3426 = _3413;
                                _3427 = _3414;
                                _3428 = _3429;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3414;
                        frontier_phi_72_pred_1 = _3413;
                        frontier_phi_72_pred_2 = _3412;
                        frontier_phi_72_pred_3 = _3411;
                        frontier_phi_72_pred_4 = _3410;
                        frontier_phi_72_pred_5 = _3409;
                    }
                    _3082 = frontier_phi_72_pred;
                    _3080 = frontier_phi_72_pred_1;
                    _3078 = frontier_phi_72_pred_2;
                    _3076 = frontier_phi_72_pred_3;
                    _3074 = frontier_phi_72_pred_4;
                    _3072 = frontier_phi_72_pred_5;
                    uint _3217 = _3216 + 1u;
                    if (_3217 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3210 = _3072;
                        _3211 = _3074;
                        _3212 = _3076;
                        _3213 = _3078;
                        _3214 = _3080;
                        _3215 = _3082;
                        _3216 = _3217;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3082;
                frontier_phi_60_61_ladder_1 = _3080;
                frontier_phi_60_61_ladder_2 = _3076;
                frontier_phi_60_61_ladder_3 = _3074;
                frontier_phi_60_61_ladder_4 = _3072;
                frontier_phi_60_61_ladder_5 = _3078;
            }
            else
            {
                frontier_phi_60_61_ladder = _2959;
                frontier_phi_60_61_ladder_1 = _2957;
                frontier_phi_60_61_ladder_2 = _2953;
                frontier_phi_60_61_ladder_3 = _2951;
                frontier_phi_60_61_ladder_4 = _2949;
                frontier_phi_60_61_ladder_5 = _2955;
            }
            _3071 = frontier_phi_60_61_ladder_4;
            _3073 = frontier_phi_60_61_ladder_3;
            _3075 = frontier_phi_60_61_ladder_2;
            _3077 = frontier_phi_60_61_ladder_5;
            _3079 = frontier_phi_60_61_ladder_1;
            _3081 = frontier_phi_60_61_ladder;
        }
        float _3086 = isnan(1.0) ? _821 : (isnan(_821) ? 1.0 : min(_821, 1.0));
        _2853 = (_3086 * _3077) + _2365;
        _2855 = (_3086 * _3079) + _2367;
        _2857 = (_3086 * _3081) + _2369;
        _2859 = ((_3071 * _806) * _3086) + _2703;
        _2861 = ((_3073 * _808) * _3086) + _2705;
        _2863 = ((_3075 * _809) * _3086) + _2707;
    }
    else
    {
        _2853 = _2365;
        _2855 = _2367;
        _2857 = _2369;
        _2859 = _2703;
        _2861 = _2705;
        _2863 = _2707;
    }
    uint _2869 = _782 + uint(cbMatDynParam._m0[0u].w);
    float _2875 = cbInstanceData._m0[_2869].x * (_565 - (_581 * _565));
    float _2876 = cbInstanceData._m0[_2869].y * (_566 - (_581 * _566));
    float _2877 = cbInstanceData._m0[_2869].z * (_567 - (_581 * _567));
    float _4830 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _4841 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _4852 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _2894 = (((isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0))) * (_2853 + ((isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))) * _821))) + ((_2859 + ((isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))) * _1631)) * cbPerFrame._m0[3u].x)) + _2875;
    float _2896 = (_2876 + ((_2861 + ((isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0))) * _1631)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0))) * (_2855 + ((isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))) * _821)));
    float _2898 = (_2877 + ((_2863 + ((isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0))) * _1631)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0))) * (_2857 + ((isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))) * _821)));
    float _4878 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2911 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
    uint _2912 = _781 + 6u;
    float _2920 = _743 / cbSceneParam._m0[86u].x;
    float _2921 = _744 / cbSceneParam._m0[86u].y;
    vec4 _2935 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2920, _2921, (log2((isnan(cbSceneParam._m0[77u].w) ? _678 : (isnan(_678) ? cbSceneParam._m0[77u].w : min(_678, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2937 = _2935.x;
    float _2938 = _2935.y;
    float _2939 = _2935.z;
    float _2940 = _2935.w;
    float _3012;
    float _3014;
    float _3016;
    float _3018;
    if (_678 > cbSceneParam._m0[78u].w)
    {
        float _2974 = isnan(_678) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _678 : min(cbSceneParam._m0[80u].w, _678));
        float _2975 = _2974 / _678;
        float _2986 = _2975 * _728;
        float _2987 = _729 * _2975;
        float _2988 = (-0.0) - _2987;
        float _2990 = _2975 * _730;
        float _2992 = (cbSceneParam._m0[77u].w * _2988) / _2974;
        float _2993 = _2992 + cbSceneParam._m0[79u].w;
        float _2994 = cbSceneParam._m0[79u].w - _2987;
        float _3000 = sqrt(((_2986 * _2986) + (_2987 * _2987)) + (_2990 * _2990));
        float _3003 = (1.0 - (cbSceneParam._m0[77u].w / _2974)) * _3000;
        float _3008 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3010 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3172;
        if (abs((_2988 - _2992) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3172 = ((((_2993 > 0.0) ? exp2(_3008 * _2993) : (2.0 - exp2(_3010 * _2993))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3003;
        }
        else
        {
            float _3132 = 1.0 / cbSceneParam._m0[80u].x;
            float _3133 = isnan(_2994) ? _2993 : (isnan(_2993) ? _2994 : max(_2993, _2994));
            float _3134 = isnan(_2994) ? _2993 : (isnan(_2993) ? _2994 : min(_2993, _2994));
            float _3143 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : min(_3133, 0.0));
            float _3144 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : min(_3134, 0.0));
            _3172 = ((abs(_3000 / _2988) * cbSceneParam._m0[80u].y) * ((((_3143 - _3144) * 2.0) - ((exp2(_3008 * (isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0)))) - exp2(_3008 * (isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0))))) * _3132)) - ((exp2(_3010 * _3143) - exp2(_3010 * _3144)) * _3132))) + (_3003 * cbSceneParam._m0[80u].z);
        }
        vec4 _3174 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2920, _2921, 1.0), 0.0);
        float _3183 = exp2((_3172 * (-1.44269502162933349609375)) * (1.0 - _3174.w));
        float _3184 = log2(_3183);
        float _3200 = log2(_2940);
        _3012 = (exp2(_3200 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3184 * cbSceneParam._m0[78u].x)) * _3174.x) / cbSceneParam._m0[78u].x)) + _2937;
        _3014 = (exp2(_3200 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3184 * cbSceneParam._m0[78u].y)) * _3174.y) / cbSceneParam._m0[78u].y)) + _2938;
        _3016 = (exp2(_3200 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3184 * cbSceneParam._m0[78u].z)) * _3174.z) / cbSceneParam._m0[78u].z)) + _2939;
        _3018 = _3183 * _2940;
    }
    else
    {
        _3012 = _2937;
        _3014 = _2938;
        _3016 = _2939;
        _3018 = _2940;
    }
    float _3030 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3031 = _3030 == 3.0;
    float _3032 = log2(_3018);
    float _3036 = exp2(_3032 * cbSceneParam._m0[78u].x);
    float _3037 = exp2(_3032 * cbSceneParam._m0[78u].y);
    float _3038 = exp2(_3032 * cbSceneParam._m0[78u].z);
    float _3039 = _3036 * (isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0)));
    float _3040 = _3037 * (isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0)));
    float _3041 = _3038 * (isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0)));
    float _3050 = (_3030 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3050 * (_3031 ? _3039 : (_3039 + (cbSceneParam._m0[72u].w * _3012)));
    SV_Target.y = _3050 * (_3031 ? _3040 : (_3040 + (cbSceneParam._m0[72u].w * _3014)));
    SV_Target.z = _3050 * (_3031 ? _3041 : (_3041 + (cbSceneParam._m0[72u].w * _3016)));
    SV_Target.w = cbInstanceData._m0[_2912].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2875) * _2911) * _3036) * _3050;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2876) * _2911) * _3037) * _3050;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2877) * _2911) * _3038) * _3050;
    SV_Target_1.w = cbInstanceData._m0[_2912].w;
}


