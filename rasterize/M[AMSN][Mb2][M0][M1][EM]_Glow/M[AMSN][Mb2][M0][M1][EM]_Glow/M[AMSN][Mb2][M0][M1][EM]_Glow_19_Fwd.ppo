#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1192;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _253 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _259 = _253.x * cbMtdParam._m0[9u].x;
    float _260 = _253.y * cbMtdParam._m0[9u].y;
    float _261 = _253.z * cbMtdParam._m0[9u].z;
    vec4 _299 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _315 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3560 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _316 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
    float _323 = (((_299.x * cbMtdParam._m0[10u].x) - _259) * _316) + _259;
    float _324 = (((_299.y * cbMtdParam._m0[10u].y) - _260) * _316) + _260;
    float _325 = (((_299.z * cbMtdParam._m0[10u].z) - _261) * _316) + _261;
    vec4 _345 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _364 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_345.x + 0.00999999977648258209228515625));
    float _366 = _364 * (cbMtdParam._m0[15u].x + 1.0);
    float _3571 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _367 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
    float _375 = ((((cbMtdParam._m0[12u].x - _323) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _367) + _323;
    float _376 = ((((cbMtdParam._m0[12u].y - _324) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _367) + _324;
    float _377 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _325)) * _367) + _325;
    vec4 _390 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _392 = _390.x;
    float _410 = ((texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[7u].w)).x - _392) * _316) + _392;
    vec4 _423 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _431 = (_423.x * 2.0) + (-1.0);
    float _433 = (_423.y * 2.0) + (-1.0);
    float _434 = dot(vec2(_431, _433), vec2(_431, _433));
    float _3582 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    vec4 _451 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _455 = _451.z;
    float _458 = (_451.x * 2.0) + (-1.0);
    float _459 = (_451.y * 2.0) + (-1.0);
    float _460 = dot(vec2(_458, _459), vec2(_458, _459));
    float _3593 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _465 = sqrt(1.0 - (isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))));
    float _468 = (_316 * (_423.z - _455)) + _455;
    float _471 = _364 * (cbMtdParam._m0[14u].w + 1.0);
    float _3604 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _475 = ((cbMtdParam._m0[14u].y - _468) * (isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0)))) + _468;
    vec4 _502 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _517 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _559 = (TEXCOORD_6.x - ((cbMtdParam._m0[13u].w * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_5, SS_WrapLinear), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].x + 1.0);
    float _3615 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _560 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
    float _561 = ((_517.x + _502.x) * cbMtdParam._m0[11u].x) * _560;
    float _562 = ((_517.y + _502.y) * cbMtdParam._m0[11u].y) * _560;
    float _563 = ((_517.z + _502.z) * cbMtdParam._m0[11u].z) * _560;
    vec4 _575 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[9u].w));
    float _577 = _575.x;
    float _590 = (_316 * (_431 - _458)) + _458;
    float _591 = (_316 * (_433 - _459)) + _459;
    float _592 = (_316 * (sqrt(1.0 - (isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0)))) - _465)) + _465;
    vec4 _611 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _617 = (_611.x * 2.0) + (-1.0);
    float _618 = (_611.y * 2.0) + (-1.0);
    float _619 = dot(vec2(_617, _618), vec2(_617, _618));
    float _3626 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _635 = (_367 * (((_590 * cbMtdParam._m0[13u].z) - _590) + _617)) + _590;
    float _636 = (_367 * (((_591 * cbMtdParam._m0[13u].z) - _591) + _618)) + _591;
    float _637 = (_367 * (sqrt(1.0 - (isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0)))) - _592)) + _592;
    float _640 = fma(_637, _224 * NORMAL.x, fma(_636, _231 * TANGENT.x, (_217 * _209) * _635));
    float _643 = fma(_637, _224 * NORMAL.y, fma(_636, _231 * TANGENT.y, (_217 * _210) * _635));
    float _646 = fma(_637, _224 * NORMAL.z, fma(_636, _231 * TANGENT.z, (_217 * _211) * _635));
    float _650 = inversesqrt(dot(vec3(_640, _643, _646), vec3(_640, _643, _646)));
    float _651 = _650 * _640;
    float _652 = _650 * _643;
    float _653 = _650 * _646;
    float _3637 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _654 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
    float _3648 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _3659 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _3670 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _3681 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _658 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
    float _674 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _714 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _724 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _714);
    float _725 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _714);
    float _726 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _714);
    float _730 = inversesqrt(dot(vec3(_724, _725, _726), vec3(_724, _725, _726)));
    float _731 = _724 * _730;
    float _732 = _725 * _730;
    float _733 = _726 * _730;
    float _739 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _740 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _758 = fma(_653, cbSceneParam._m0[5u].z, fma(_652, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _651));
    float _761 = fma(_653, cbSceneParam._m0[6u].z, fma(_652, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _651));
    float _764 = fma(_653, cbSceneParam._m0[7u].z, fma(_652, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _651));
    uint _777 = uint(roundEven(NORMAL.w)) * 13u;
    uint _778 = _777 + 9u;
    uint _779 = _778 + uint(cbMatDynParam._m0[0u].w);
    float _785 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0)))) * cbInstanceData._m0[_779].x;
    float _786 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0)))) * cbInstanceData._m0[_779].y;
    float _787 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0)))) * cbInstanceData._m0[_779].z;
    float _3692 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _788 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    float _3703 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _789 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _3714 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _790 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    float _791 = 1.0 - _658;
    float _792 = _788 * _791;
    float _793 = _789 * _791;
    float _794 = _790 * _791;
    float _799 = (_788 + (-0.039999999105930328369140625)) * _658;
    float _800 = (_789 + (-0.039999999105930328369140625)) * _658;
    float _801 = (_790 + (-0.039999999105930328369140625)) * _658;
    float _802 = _799 + 0.039999999105930328369140625;
    float _804 = _800 + 0.039999999105930328369140625;
    float _805 = _801 + 0.039999999105930328369140625;
    vec4 _814 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _739, cbSceneParam._m0[86u].y * _740));
    float _817 = _814.x * TEXCOORD_3.w;
    float _818 = dot(vec3(_651, _652, _653), vec3(_731, _732, _733));
    float _821 = _818 * 2.0;
    float _825 = (_821 * _651) - _731;
    float _826 = (_821 * _652) - _732;
    float _827 = (_821 * _653) - _733;
    float _831 = abs(dot(vec3(_731, _732, _733), vec3(_651, _652, _653)));
    float _3725 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _833 = sqrt(_654);
    float _846 = exp2((_833 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_833 * 3.0));
    float _852 = (1.0 - _846) * ((_833 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _853 = _846 * _833;
    float _881 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _885 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _889 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1191;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _916 = fma(_889, cbModelParam._m0[26u].z, fma(_885, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _881));
        float _920 = fma(_889, cbModelParam._m0[27u].z, fma(_885, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _881));
        float _924 = fma(_889, cbModelParam._m0[28u].z, fma(_885, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _881));
        float _949 = _881 + _651;
        float _950 = _885 + _652;
        float _951 = _889 + _653;
        float _961 = fma(_951, cbModelParam._m0[26u].z, fma(_950, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _949)) - _916;
        float _962 = fma(_951, cbModelParam._m0[27u].z, fma(_950, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _949)) - _920;
        float _963 = fma(_951, cbModelParam._m0[28u].z, fma(_950, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _949)) - _924;
        float _967 = inversesqrt(dot(vec3(_961, _962, _963), vec3(_961, _962, _963)));
        float _980 = ((_967 * _961) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_916 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _981 = ((_967 * _962) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_920 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _982 = ((_967 * _963) / cbModelParam._m0[34u].z) + ((((((_924 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_980, _981, _982), 0.0);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_980, _981, _982), 0.0);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_980, _981, _982), 0.0);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_980, _981, _982), 0.0);
        float _1019 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_985.x + (-0.5));
        float _1021 = _1019 * (_985.y + (-0.5));
        float _1022 = _1019 * (_985.z + (-0.5));
        float _1029 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_992.x + (-0.5));
        float _1031 = _1029 * (_992.y + (-0.5));
        float _1032 = _1029 * (_992.z + (-0.5));
        float _1039 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = _1039 * (_999.x + (-0.5));
        float _1041 = _1039 * (_999.y + (-0.5));
        float _1042 = _1039 * (_999.z + (-0.5));
        float _1049 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1050 = _1049 * (_1006.x + (-0.5));
        float _1051 = _1049 * (_1006.y + (-0.5));
        float _1052 = _1049 * (_1006.z + (-0.5));
        float _1053 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1054 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1055 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1056 = _1020 * 0.5;
        float _1057 = _1030 * 0.5;
        float _1058 = _1040 * 0.5;
        float _1059 = dot(vec3(_1056, _1057, _1058), vec3(_1056, _1057, _1058));
        float _1064 = (_1059 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1059);
        float _1073 = (dot(vec3(_651, _652, _653), vec3(_1064 * _1056, _1064 * _1057, _1064 * _1058)) + 1.0) * 0.5;
        float _3751 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1083 = sqrt(((_1057 * _1057) + (_1056 * _1056)) + (_1058 * _1058)) / (_1053 + 9.9999997473787516355514526367188e-06);
        float _3762 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1085 = _1084 * 2.0;
        float _1089 = (1.0 - _1084) / (_1084 + 1.0);
        float _3773 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1099 = ((((1.0 - _1090) * (_1085 + 2.0)) * exp2(log2(isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * (_1085 + 1.0))) + _1090) * _1053;
        float _1100 = _1021 * 0.5;
        float _1101 = _1031 * 0.5;
        float _1102 = _1041 * 0.5;
        float _1103 = dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102));
        float _1108 = (_1103 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1103);
        float _1116 = (dot(vec3(_651, _652, _653), vec3(_1108 * _1100, _1108 * _1101, _1108 * _1102)) + 1.0) * 0.5;
        float _3784 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1125 = sqrt(((_1101 * _1101) + (_1100 * _1100)) + (_1102 * _1102)) / (_1054 + 9.9999997473787516355514526367188e-06);
        float _3795 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1127 = _1126 * 2.0;
        float _1131 = (1.0 - _1126) / (_1126 + 1.0);
        float _3806 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1141 = ((((1.0 - _1132) * (_1127 + 2.0)) * exp2(log2(isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * (_1127 + 1.0))) + _1132) * _1054;
        float _1142 = _1022 * 0.5;
        float _1143 = _1032 * 0.5;
        float _1144 = _1042 * 0.5;
        float _1145 = dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144));
        float _1150 = (_1145 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1145);
        float _1158 = (dot(vec3(_651, _652, _653), vec3(_1150 * _1142, _1150 * _1143, _1150 * _1144)) + 1.0) * 0.5;
        float _3817 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1167 = sqrt(((_1143 * _1143) + (_1142 * _1142)) + (_1144 * _1144)) / (_1055 + 9.9999997473787516355514526367188e-06);
        float _3828 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1169 = _1168 * 2.0;
        float _1173 = (1.0 - _1168) / (_1168 + 1.0);
        float _3839 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1183 = ((((1.0 - _1174) * (_1169 + 2.0)) * exp2(log2(isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_1169 + 1.0))) + _1174) * _1055;
        _1191 = _1022;
        _1193 = _1021;
        _1194 = _1020;
        _1195 = _1032;
        _1196 = _1031;
        _1197 = _1030;
        _1198 = _1042;
        _1199 = _1041;
        _1200 = _1040;
        _1201 = _1055;
        _1202 = _1054;
        _1203 = _1053;
        _1204 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0)));
        _1205 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0)));
        _1206 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)));
    }
    else
    {
        _1191 = _1192;
        _1193 = _1192;
        _1194 = _1192;
        _1195 = _1192;
        _1196 = _1192;
        _1197 = _1192;
        _1198 = _1192;
        _1199 = _1192;
        _1200 = _1192;
        _1201 = _1192;
        _1202 = _1192;
        _1203 = _1192;
        _1204 = 0.0;
        _1205 = 0.0;
        _1206 = 0.0;
    }
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1232 = fma(_889, cbModelParam._m0[30u].z, fma(_885, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _881));
        float _1236 = fma(_889, cbModelParam._m0[31u].z, fma(_885, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _881));
        float _1240 = fma(_889, cbModelParam._m0[32u].z, fma(_885, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _881));
        float _1263 = _881 + _651;
        float _1264 = _885 + _652;
        float _1265 = _889 + _653;
        float _1275 = fma(_1265, cbModelParam._m0[30u].z, fma(_1264, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1263)) - _1232;
        float _1276 = fma(_1265, cbModelParam._m0[31u].z, fma(_1264, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1263)) - _1236;
        float _1277 = fma(_1265, cbModelParam._m0[32u].z, fma(_1264, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1263)) - _1240;
        float _1281 = inversesqrt(dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277)));
        float _1294 = ((_1281 * _1275) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1232 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1295 = ((_1281 * _1276) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1236 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1296 = ((_1281 * _1277) / cbModelParam._m0[35u].z) + ((((((_1240 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1298 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        vec4 _1305 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        vec4 _1312 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        vec4 _1319 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        float _1331 = exp2((_1298.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1298.x + (-0.5));
        float _1333 = _1331 * (_1298.y + (-0.5));
        float _1334 = _1331 * (_1298.z + (-0.5));
        float _1341 = exp2((_1305.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1305.x + (-0.5));
        float _1343 = _1341 * (_1305.y + (-0.5));
        float _1344 = _1341 * (_1305.z + (-0.5));
        float _1351 = exp2((_1312.w + (-0.5)) * 20.0) * 2.0;
        float _1352 = _1351 * (_1312.x + (-0.5));
        float _1353 = _1351 * (_1312.y + (-0.5));
        float _1354 = _1351 * (_1312.z + (-0.5));
        float _1361 = exp2((_1319.w + (-0.5)) * 20.0) * 2.0;
        float _1362 = _1361 * (_1319.x + (-0.5));
        float _1363 = _1361 * (_1319.y + (-0.5));
        float _1364 = _1361 * (_1319.z + (-0.5));
        float _1365 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1366 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1367 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1368 = _1332 * 0.5;
        float _1369 = _1342 * 0.5;
        float _1370 = _1352 * 0.5;
        float _1371 = dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370));
        float _1376 = (_1371 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1371);
        float _1384 = (dot(vec3(_651, _652, _653), vec3(_1376 * _1368, _1376 * _1369, _1376 * _1370)) + 1.0) * 0.5;
        float _3880 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1393 = sqrt(((_1369 * _1369) + (_1368 * _1368)) + (_1370 * _1370)) / (_1365 + 9.9999997473787516355514526367188e-06);
        float _3891 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1395 = _1394 * 2.0;
        float _1399 = (1.0 - _1394) / (_1394 + 1.0);
        float _3902 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1409 = ((((1.0 - _1400) * (_1395 + 2.0)) * exp2(log2(isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * (_1395 + 1.0))) + _1400) * _1365;
        float _1410 = _1333 * 0.5;
        float _1411 = _1343 * 0.5;
        float _1412 = _1353 * 0.5;
        float _1413 = dot(vec3(_1410, _1411, _1412), vec3(_1410, _1411, _1412));
        float _1418 = (_1413 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1413);
        float _1426 = (dot(vec3(_651, _652, _653), vec3(_1418 * _1410, _1418 * _1411, _1418 * _1412)) + 1.0) * 0.5;
        float _3913 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1435 = sqrt(((_1411 * _1411) + (_1410 * _1410)) + (_1412 * _1412)) / (_1366 + 9.9999997473787516355514526367188e-06);
        float _3924 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1437 = _1436 * 2.0;
        float _1441 = (1.0 - _1436) / (_1436 + 1.0);
        float _3935 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1451 = ((((1.0 - _1442) * (_1437 + 2.0)) * exp2(log2(isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * (_1437 + 1.0))) + _1442) * _1366;
        float _1452 = _1334 * 0.5;
        float _1453 = _1344 * 0.5;
        float _1454 = _1354 * 0.5;
        float _1455 = dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454));
        float _1460 = (_1455 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1455);
        float _1468 = (dot(vec3(_651, _652, _653), vec3(_1460 * _1452, _1460 * _1453, _1460 * _1454)) + 1.0) * 0.5;
        float _3946 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1477 = sqrt(((_1453 * _1453) + (_1452 * _1452)) + (_1454 * _1454)) / (_1367 + 9.9999997473787516355514526367188e-06);
        float _3957 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1479 = _1478 * 2.0;
        float _1483 = (1.0 - _1478) / (_1478 + 1.0);
        float _3968 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1493 = ((((1.0 - _1484) * (_1479 + 2.0)) * exp2(log2(isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * (_1479 + 1.0))) + _1484) * _1367;
        _1501 = _1334;
        _1502 = _1333;
        _1503 = _1332;
        _1504 = _1344;
        _1505 = _1343;
        _1506 = _1342;
        _1507 = _1354;
        _1508 = _1353;
        _1509 = _1352;
        _1510 = _1367;
        _1511 = _1366;
        _1512 = _1365;
        _1513 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)));
        _1514 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)));
        _1515 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)));
    }
    else
    {
        _1501 = _1192;
        _1502 = _1192;
        _1503 = _1192;
        _1504 = _1192;
        _1505 = _1192;
        _1506 = _1192;
        _1507 = _1192;
        _1508 = _1192;
        _1509 = _1192;
        _1510 = _1192;
        _1511 = _1192;
        _1512 = _1192;
        _1513 = 0.0;
        _1514 = 0.0;
        _1515 = 0.0;
    }
    float _1525 = (cbModelParam._m0[1u].x * (_1513 - _1204)) + _1204;
    float _1526 = (cbModelParam._m0[1u].x * (_1514 - _1205)) + _1205;
    float _1527 = (cbModelParam._m0[1u].x * (_1515 - _1206)) + _1206;
    float _1548 = fma(_1527, cbSceneParam._m0[89u].z, fma(_1526, cbSceneParam._m0[89u].y, _1525 * cbSceneParam._m0[89u].x));
    float _1551 = fma(_1527, cbSceneParam._m0[90u].z, fma(_1526, cbSceneParam._m0[90u].y, _1525 * cbSceneParam._m0[90u].x));
    float _1554 = fma(_1527, cbSceneParam._m0[91u].z, fma(_1526, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1525));
    float _1569 = _825 * 0.5;
    float _1570 = _826 * 0.5;
    float _1571 = _827 * 0.5;
    float _1572 = dot(vec4(_1569, _1570, _1571, 1.0), vec4(_1503, _1506, _1509, _1512));
    float _1575 = dot(vec4(_1569, _1570, _1571, 1.0), vec4(_1502, _1505, _1508, _1511));
    float _1578 = dot(vec4(_1569, _1570, _1571, 1.0), vec4(_1501, _1504, _1507, _1510));
    float _1612;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1585 = dot(vec4(_1569, _1570, _1571, 1.0), vec4(_1191, _1195, _1198, _1201));
        float _1589 = dot(vec4(_1569, _1570, _1571, 1.0), vec4(_1193, _1196, _1199, _1202));
        float _1593 = dot(vec4(_1569, _1570, _1571, 1.0), vec4(_1194, _1197, _1200, _1203));
        float _1600 = dot(vec4(cbModelParam._m0[39u]), vec4(_1569, _1570, _1571, 1.0));
        _1612 = dot(vec3(isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)), isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)), isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1600) ? 0.0 : (isnan(0.0) ? _1600 : max(0.0, _1600))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1612 = 1.0;
    }
    float _1623;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1614 = dot(vec4(cbModelParam._m0[40u]), vec4(_1569, _1570, _1571, 1.0));
        _1623 = dot(vec3(isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)), isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)), isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1614) ? 0.0 : (isnan(0.0) ? _1614 : max(0.0, _1614))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1623 = 1.0;
    }
    float _1627 = (_1623 * cbModelParam._m0[1u].x) + (_1612 * (1.0 - cbModelParam._m0[1u].x));
    float _1637 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _654);
    float _1638 = isnan(_1637) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1637 : min(cbModelParam._m0[25u].z, _1637));
    float _1718;
    float _1720;
    float _1722;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1685 = fma(_889, cbModelParam._m0[13u].z, fma(_885, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _881)) + cbModelParam._m0[13u].w;
        float _1689 = fma(_889, cbModelParam._m0[14u].z, fma(_885, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _881)) + cbModelParam._m0[14u].w;
        float _1693 = fma(_889, cbModelParam._m0[15u].z, fma(_885, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _881)) + cbModelParam._m0[15u].w;
        float _1696 = fma(_827, cbModelParam._m0[13u].z, fma(_826, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _825));
        float _1699 = fma(_827, cbModelParam._m0[14u].z, fma(_826, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _825));
        float _1702 = fma(_827, cbModelParam._m0[15u].z, fma(_826, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _825));
        float _1730;
        if (_1696 > 0.0)
        {
            _1730 = abs((1.0 - _1685) / _1696);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1696 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1685 + 1.0) / _1696);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1730 = frontier_phi_14_12_ladder;
        }
        float _1934;
        if (_1699 > 0.0)
        {
            _1934 = abs((1.0 - _1689) / _1699);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1699 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1689 + 1.0) / _1699);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1934 = frontier_phi_23_19_ladder;
        }
        float _2188;
        if (_1702 > 0.0)
        {
            _2188 = abs((1.0 - _1693) / _1702);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1702 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1693 + 1.0) / _1702);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2188 = frontier_phi_35_30_ladder;
        }
        float _2190 = isnan(_1934) ? _1730 : (isnan(_1730) ? _1934 : min(_1730, _1934));
        float _2191 = isnan(_2188) ? _2190 : (isnan(_2190) ? _2188 : min(_2190, _2188));
        float _2195 = (_2191 * _1696) + _1685;
        float _2196 = (_2191 * _1699) + _1689;
        float _2197 = (_2191 * _1702) + _1693;
        float _2198 = _2191 * 9.9999997473787516355514526367188e-05;
        float _2200 = (-1.0) - _2198;
        float _2202 = _2198 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2197 > _2202) || ((_2197 < _2200) || ((_2196 > _2202) || ((_2196 < _2200) || ((_2195 < _2200) || (_2195 > _2202))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2325 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2197, cbModelParam._m0[9u].z, fma(_2196, cbModelParam._m0[9u].y, _2195 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2197, cbModelParam._m0[10u].z, fma(_2196, cbModelParam._m0[10u].y, _2195 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2197, cbModelParam._m0[11u].z, fma(_2196, cbModelParam._m0[11u].y, _2195 * cbModelParam._m0[11u].x))), _1638);
            frontier_phi_13_35_ladder = _2325.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2325.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2325.x * cbModelParam._m0[1u].y;
        }
        _1718 = frontier_phi_13_35_ladder_2;
        _1720 = frontier_phi_13_35_ladder_1;
        _1722 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1706 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_825, _826, _827), _1638);
        _1718 = _1706.x * cbModelParam._m0[1u].y;
        _1720 = _1706.y * cbModelParam._m0[1u].y;
        _1722 = _1706.z * cbModelParam._m0[1u].y;
    }
    float _1726 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _654);
    float _1727 = isnan(_1726) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1726 : min(cbModelParam._m0[25u].w, _1726));
    float _1818;
    float _1820;
    float _1822;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1782 = fma(_889, cbModelParam._m0[21u].z, fma(_885, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _881)) + cbModelParam._m0[21u].w;
        float _1786 = fma(_889, cbModelParam._m0[22u].z, fma(_885, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _881)) + cbModelParam._m0[22u].w;
        float _1790 = fma(_889, cbModelParam._m0[23u].z, fma(_885, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _881)) + cbModelParam._m0[23u].w;
        float _1793 = fma(_827, cbModelParam._m0[21u].z, fma(_826, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _825));
        float _1796 = fma(_827, cbModelParam._m0[22u].z, fma(_826, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _825));
        float _1799 = fma(_827, cbModelParam._m0[23u].z, fma(_826, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _825));
        float _1939;
        if (_1793 > 0.0)
        {
            _1939 = abs((1.0 - _1782) / _1793);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1793 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1782 + 1.0) / _1793);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1939 = frontier_phi_25_21_ladder;
        }
        float _2215;
        if (_1796 > 0.0)
        {
            _2215 = abs((1.0 - _1786) / _1796);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1796 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1786 + 1.0) / _1796);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2215 = frontier_phi_37_32_ladder;
        }
        float _2428;
        if (_1799 > 0.0)
        {
            _2428 = abs((1.0 - _1790) / _1799);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1799 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1790 + 1.0) / _1799);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2428 = frontier_phi_46_43_ladder;
        }
        float _2430 = isnan(_2215) ? _1939 : (isnan(_1939) ? _2215 : min(_1939, _2215));
        float _2431 = isnan(_2428) ? _2430 : (isnan(_2430) ? _2428 : min(_2430, _2428));
        float _2435 = (_2431 * _1793) + _1782;
        float _2436 = (_2431 * _1796) + _1786;
        float _2437 = (_2431 * _1799) + _1790;
        float _2438 = _2431 * 9.9999997473787516355514526367188e-05;
        float _2439 = (-1.0) - _2438;
        float _2441 = _2438 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2437 > _2441) || ((_2437 < _2439) || ((_2436 > _2441) || ((_2436 < _2439) || ((_2435 < _2439) || (_2435 > _2441))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2665 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2437, cbModelParam._m0[17u].z, fma(_2436, cbModelParam._m0[17u].y, _2435 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2437, cbModelParam._m0[18u].z, fma(_2436, cbModelParam._m0[18u].y, _2435 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2437, cbModelParam._m0[19u].z, fma(_2436, cbModelParam._m0[19u].y, _2435 * cbModelParam._m0[19u].x))), _1727);
            frontier_phi_22_46_ladder = _2665.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2665.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2665.x * cbModelParam._m0[1u].z;
        }
        _1818 = frontier_phi_22_46_ladder_2;
        _1820 = frontier_phi_22_46_ladder_1;
        _1822 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1802 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_825, _826, _827), _1727);
        _1818 = _1802.x * cbModelParam._m0[1u].z;
        _1820 = _1802.y * cbModelParam._m0[1u].z;
        _1822 = _1802.z * cbModelParam._m0[1u].z;
    }
    float _1835 = (((_852 * _802) + _853) * _817) * ((cbModelParam._m0[1u].w * (_1818 - _1718)) + _1718);
    float _1837 = (((_852 * _804) + _853) * _817) * ((cbModelParam._m0[1u].w * (_1820 - _1720)) + _1720);
    float _1839 = (((_852 * _805) + _853) * _817) * ((cbModelParam._m0[1u].w * (_1822 - _1722)) + _1722);
    float _1842 = fma(_1839, cbSceneParam._m0[89u].z, fma(_1837, cbSceneParam._m0[89u].y, _1835 * cbSceneParam._m0[89u].x));
    float _1845 = fma(_1839, cbSceneParam._m0[90u].z, fma(_1837, cbSceneParam._m0[90u].y, _1835 * cbSceneParam._m0[90u].x));
    float _1848 = fma(_1839, cbSceneParam._m0[91u].z, fma(_1837, cbSceneParam._m0[91u].y, _1835 * cbSceneParam._m0[91u].x));
    uvec4 _1858 = floatBitsToUint(cbInstanceData._m0[_777 + 5u]);
    uint _1860 = _1858.x * 14u;
    uint _1861 = _1860 + 13u;
    float _1868 = _817 + (-1.0);
    float _1873 = (cbLight._m0[_1861].x * _1868) + 1.0;
    float _1874 = (cbLight._m0[_1861].y * _1868) + 1.0;
    float _1875 = (cbLight._m0[_1861].z * _1868) + 1.0;
    float _1876 = (cbLight._m0[_1861].w * _1868) + 1.0;
    uint _1877 = _1860 + 5u;
    float _1883 = isnan(1.0) ? _1874 : (isnan(_1874) ? 1.0 : min(_1874, 1.0));
    uint _1887 = _1860 + 4u;
    float _1893 = isnan(1.0) ? _1873 : (isnan(_1873) ? 1.0 : min(_1873, 1.0));
    uint _1897 = _1860 | 1u;
    float _1908 = dot(vec3(cbLight._m0[_1860].xyz), vec3(_651, _652, _653));
    float _1911 = dot(vec3(cbLight._m0[_1897].xyz), vec3(_651, _652, _653));
    float _4104 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _4115 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1916 = (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * 0.3183098733425140380859375;
    float _1918 = (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * 0.3183098733425140380859375;
    float _1925 = ((cbLight._m0[_1877].x * _1883) * _1918) + ((cbLight._m0[_1887].x * _1893) * _1916);
    float _1926 = ((_1883 * cbLight._m0[_1877].y) * _1918) + ((_1893 * cbLight._m0[_1887].y) * _1916);
    float _1927 = ((_1883 * cbLight._m0[_1877].z) * _1918) + ((_1893 * cbLight._m0[_1887].z) * _1916);
    uvec4 _1931 = floatBitsToUint(cbLight._m0[_1860 + 12u]);
    bool _1933 = _1931.x == 0u;
    float _1944;
    float _1946;
    float _1948;
    if (_1933)
    {
        _1944 = _1925;
        _1946 = _1926;
        _1948 = _1927;
    }
    else
    {
        uint _1952 = _1860 + 6u;
        float _1968 = (dot(vec3(cbLight._m0[_1860 + 2u].xyz), vec3(_651, _652, _653)) * 0.5) + 0.5;
        float _1969 = _1968 * _1968;
        float _4126 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
        float _1970 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1971 = isnan(1.0) ? _1875 : (isnan(_1875) ? 1.0 : min(_1875, 1.0));
        _1944 = (((cbLight._m0[_1952].x * 0.3183098733425140380859375) * _1970) * _1971) + _1925;
        _1946 = (((cbLight._m0[_1952].y * 0.3183098733425140380859375) * _1970) * _1971) + _1926;
        _1948 = (((cbLight._m0[_1952].z * 0.3183098733425140380859375) * _1970) * _1971) + _1927;
    }
    bool _1951 = _1931.y == 0u;
    float _1989;
    float _1991;
    float _1993;
    if (_1951)
    {
        _1989 = _1944;
        _1991 = _1946;
        _1993 = _1948;
    }
    else
    {
        uint _2159 = _1860 + 7u;
        float _2175 = (dot(vec3(cbLight._m0[_1860 + 3u].xyz), vec3(_651, _652, _653)) * 0.5) + 0.5;
        float _2176 = _2175 * _2175;
        float _4142 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        float _2177 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _2178 = isnan(1.0) ? _1876 : (isnan(_1876) ? 1.0 : min(_1876, 1.0));
        _1989 = (((cbLight._m0[_2159].x * 0.3183098733425140380859375) * _2177) * _2178) + _1944;
        _1991 = (((cbLight._m0[_2159].y * 0.3183098733425140380859375) * _2177) * _2178) + _1946;
        _1993 = (((cbLight._m0[_2159].z * 0.3183098733425140380859375) * _2177) * _2178) + _1948;
    }
    uint _1996 = _1860 + 8u;
    float _2009 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1860].w)) * _654) * 0.949999988079071044921875);
    float _2010 = _2009 * _2009;
    float _2011 = cbLight._m0[_1860].x + _731;
    float _2012 = cbLight._m0[_1860].y + _732;
    float _2013 = cbLight._m0[_1860].z + _733;
    float _2017 = inversesqrt(dot(vec3(_2011, _2012, _2013), vec3(_2011, _2012, _2013)));
    float _2018 = _2017 * _2011;
    float _2019 = _2017 * _2012;
    float _2020 = _2017 * _2013;
    float _2021 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_1860].xyz));
    float _4158 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2024 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    float _4169 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _2025 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _2026 = dot(vec3(_651, _652, _653), vec3(_2018, _2019, _2020));
    float _4180 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _2029 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _2030 = dot(vec3(cbLight._m0[_1860].xyz), vec3(_2018, _2019, _2020));
    float _4191 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2034 = _2010 * _2010;
    float _2038 = ((_2029 * _2029) * (_2034 + (-1.0))) + 1.0;
    float _2046 = exp2(log2(1.0 - (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0)))) * 5.0);
    float _2047 = 0.959999978542327880859375 - _799;
    float _2049 = 0.959999978542327880859375 - _800;
    float _2050 = 0.959999978542327880859375 - _801;
    float _2057 = 1.0 - _2010;
    float _2068 = (0.5 / (((_2025 * ((_2024 * _2057) + _2010)) + 9.9999999392252902907785028219223e-09) + (((_2025 * _2057) + _2010) * _2024))) * _2024;
    float _4202 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2070 = (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_2034 / ((_2038 * _2038) * 3.141590118408203125));
    uint _2081 = _1860 + 9u;
    float _2092 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1897].w)) * _654) * 0.949999988079071044921875);
    float _2093 = _2092 * _2092;
    float _2094 = cbLight._m0[_1897].x + _731;
    float _2095 = cbLight._m0[_1897].y + _732;
    float _2096 = cbLight._m0[_1897].z + _733;
    float _2100 = inversesqrt(dot(vec3(_2094, _2095, _2096), vec3(_2094, _2095, _2096)));
    float _2101 = _2100 * _2094;
    float _2102 = _2100 * _2095;
    float _2103 = _2100 * _2096;
    float _2104 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_1897].xyz));
    float _4213 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2107 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _2108 = dot(vec3(_651, _652, _653), vec3(_2101, _2102, _2103));
    float _4224 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2111 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
    float _2112 = dot(vec3(cbLight._m0[_1897].xyz), vec3(_2101, _2102, _2103));
    float _4235 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2116 = _2093 * _2093;
    float _2120 = ((_2111 * _2111) * (_2116 + (-1.0))) + 1.0;
    float _2127 = exp2(log2(1.0 - (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0)))) * 5.0);
    float _2134 = 1.0 - _2093;
    float _2144 = (0.5 / (((_2025 * ((_2107 * _2134) + _2093)) + 9.9999999392252902907785028219223e-09) + (((_2025 * _2134) + _2093) * _2107))) * _2107;
    float _4246 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2146 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_2116 / ((_2120 * _2120) * 3.141590118408203125));
    float _2156 = (((((_2127 * _2047) + _802) * cbLight._m0[_2081].x) * _2146) * _1883) + (((((_2046 * _2047) + _802) * cbLight._m0[_1996].x) * _2070) * _1893);
    float _2157 = (((((_2127 * _2049) + _804) * cbLight._m0[_2081].y) * _2146) * _1883) + (((((_2046 * _2049) + _804) * cbLight._m0[_1996].y) * _2070) * _1893);
    float _2158 = (((((_2127 * _2050) + _805) * cbLight._m0[_2081].z) * _2146) * _1883) + (((((_2046 * _2050) + _805) * cbLight._m0[_1996].z) * _2070) * _1893);
    float _2220;
    float _2222;
    float _2224;
    if (_1933)
    {
        _2220 = _2156;
        _2222 = _2157;
        _2224 = _2158;
    }
    else
    {
        uint _2226 = _1860 + 2u;
        uint _2230 = _1860 + 10u;
        float _2244 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2226].w)) * _654) * 0.949999988079071044921875);
        float _2245 = _2244 * _2244;
        float _2246 = cbLight._m0[_2226].x + _731;
        float _2247 = cbLight._m0[_2226].y + _732;
        float _2248 = cbLight._m0[_2226].z + _733;
        float _2252 = inversesqrt(dot(vec3(_2246, _2247, _2248), vec3(_2246, _2247, _2248)));
        float _2253 = _2252 * _2246;
        float _2254 = _2252 * _2247;
        float _2255 = _2252 * _2248;
        float _2256 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_2226].xyz));
        float _4257 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2259 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _2260 = dot(vec3(_651, _652, _653), vec3(_2253, _2254, _2255));
        float _4268 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
        float _2263 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _2264 = dot(vec3(cbLight._m0[_2226].xyz), vec3(_2253, _2254, _2255));
        float _4279 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
        float _2268 = _2245 * _2245;
        float _2272 = ((_2263 * _2263) * (_2268 + (-1.0))) + 1.0;
        float _2279 = exp2(log2(1.0 - (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0)))) * 5.0);
        float _2286 = 1.0 - _2245;
        float _2296 = (0.5 / (((_2025 * ((_2259 * _2286) + _2245)) + 9.9999999392252902907785028219223e-09) + (((_2025 * _2286) + _2245) * _2259))) * _2259;
        float _4290 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2298 = (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_2268 / ((_2272 * _2272) * 3.141590118408203125));
        float _2299 = isnan(1.0) ? _1875 : (isnan(_1875) ? 1.0 : min(_1875, 1.0));
        _2220 = (((((_2279 * _2047) + _802) * cbLight._m0[_2230].x) * _2298) * _2299) + _2156;
        _2222 = (((((_2279 * _2049) + _804) * cbLight._m0[_2230].y) * _2298) * _2299) + _2157;
        _2224 = (((((_2279 * _2050) + _805) * cbLight._m0[_2230].z) * _2298) * _2299) + _2158;
    }
    float _2334;
    float _2336;
    float _2338;
    if (_1951)
    {
        _2334 = _2220;
        _2336 = _2222;
        _2338 = _2224;
    }
    else
    {
        uint _2345 = _1860 + 3u;
        uint _2349 = _1860 + 11u;
        float _2363 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2345].w)) * _654) * 0.949999988079071044921875);
        float _2364 = _2363 * _2363;
        float _2365 = cbLight._m0[_2345].x + _731;
        float _2366 = cbLight._m0[_2345].y + _732;
        float _2367 = cbLight._m0[_2345].z + _733;
        float _2371 = inversesqrt(dot(vec3(_2365, _2366, _2367), vec3(_2365, _2366, _2367)));
        float _2372 = _2371 * _2365;
        float _2373 = _2371 * _2366;
        float _2374 = _2371 * _2367;
        float _2375 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_2345].xyz));
        float _4306 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2378 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _2379 = dot(vec3(_651, _652, _653), vec3(_2372, _2373, _2374));
        float _4317 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
        float _2382 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _2383 = dot(vec3(cbLight._m0[_2345].xyz), vec3(_2372, _2373, _2374));
        float _4328 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2387 = _2364 * _2364;
        float _2391 = ((_2382 * _2382) * (_2387 + (-1.0))) + 1.0;
        float _2398 = exp2(log2(1.0 - (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) * 5.0);
        float _2405 = 1.0 - _2364;
        float _2415 = (0.5 / (((_2025 * ((_2378 * _2405) + _2364)) + 9.9999999392252902907785028219223e-09) + (((_2025 * _2405) + _2364) * _2378))) * _2378;
        float _4339 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2417 = (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_2387 / ((_2391 * _2391) * 3.141590118408203125));
        float _2418 = isnan(1.0) ? _1876 : (isnan(_1876) ? 1.0 : min(_1876, 1.0));
        _2334 = (((((_2398 * _2047) + _802) * cbLight._m0[_2349].x) * _2417) * _2418) + _2220;
        _2336 = (((((_2398 * _2049) + _804) * cbLight._m0[_2349].y) * _2417) * _2418) + _2222;
        _2338 = (((((_2398 * _2050) + _805) * cbLight._m0[_2349].z) * _2417) * _2418) + _2224;
    }
    float _2553;
    float _2555;
    float _2557;
    float _2559;
    float _2561;
    float _2563;
    if (_1858.y == 0u)
    {
        float _2493 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2494 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2493;
        float _2495 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2493;
        float _2496 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2493;
        uvec4 _2508 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2509 = _2508.x;
        uint _2520 = uint((float(_2508.y) * floor(float(uint(cbSceneParam._m0[85u].y * _740) / _2509))) + floor(float(uint(cbSceneParam._m0[85u].x * _739) / _2509)));
        float _2530 = (log2(_2496 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2531 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        uint _2534 = uint(isnan(14.0) ? _2531 : (isnan(_2531) ? 14.0 : min(_2531, 14.0)));
        uvec4 _2539 = texelFetch(g_lightClusterGridBuffer, int(((_2534 << 2u) + (_2520 << 6u)) >> 2u));
        uint _2540 = _2539.x;
        uint _2541 = _2508.z;
        float _2670;
        float _2672;
        float _2674;
        float _2676;
        float _2678;
        float _2680;
        if (((((1u << ((_2541 >> 4u) & 15u)) + 4294967295u) & _2540) == 0u) || ((_2541 & 240u) == 0u))
        {
            _2670 = 0.0;
            _2672 = 0.0;
            _2674 = 0.0;
            _2676 = 0.0;
            _2678 = 0.0;
            _2680 = 0.0;
        }
        else
        {
            float _2671;
            float _2673;
            float _2675;
            float _2677;
            float _2679;
            float _2681;
            float _2824 = 0.0;
            float _2825 = 0.0;
            float _2826 = 0.0;
            float _2827 = 0.0;
            float _2828 = 0.0;
            float _2829 = 0.0;
            uint _2830 = 0u;
            uint _2839;
            bool _2840;
            for (;;)
            {
                _2839 = texelFetch(g_lightClassification, int((((_2534 << 5u) + (_2520 << 9u)) + (_2830 << 2u)) >> 2u)).x;
                _2840 = _2839 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2840)
                {
                    frontier_phi_61_pred = _2824;
                    frontier_phi_61_pred_1 = _2829;
                    frontier_phi_61_pred_2 = _2828;
                    frontier_phi_61_pred_3 = _2827;
                    frontier_phi_61_pred_4 = _2826;
                    frontier_phi_61_pred_5 = _2825;
                }
                else
                {
                    float _2948;
                    float _2949;
                    float _2950;
                    float _2951;
                    float _2952;
                    float _2953;
                    uint _2954;
                    _2948 = _2824;
                    _2949 = _2825;
                    _2950 = _2826;
                    _2951 = _2827;
                    _2952 = _2828;
                    _2953 = _2829;
                    _2954 = _2839;
                    float _2880;
                    float _2881;
                    float _2882;
                    float _2883;
                    float _2884;
                    float _2885;
                    for (;;)
                    {
                        uint _2958 = uint(findLSB(_2954)) + (_2830 << 5u);
                        uint _2955 = (_2954 + 4294967295u) & _2954;
                        uint _2960 = _2958 * 48u;
                        vec4 _2974 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2960)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 3u)).x));
                        uint _2980 = (_2958 * 48u) + 4u;
                        vec4 _2993 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2980)).x, texelFetch(g_PointLightRenderingBuffer, int(_2980 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2980 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2980 + 3u)).x));
                        uint _2999 = (_2958 * 48u) + 8u;
                        vec3 _3010 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2999)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 2u)).x));
                        float _3014 = _2974.x - _2494;
                        float _3015 = _2974.y - _2495;
                        float _3016 = _2974.z - _2496;
                        float _3017 = dot(vec3(_3014, _3015, _3016), vec3(_3014, _3015, _3016));
                        float _3020 = inversesqrt(_3017);
                        float _3021 = _3020 * _3014;
                        float _3022 = _3020 * _3015;
                        float _3023 = _3020 * _3016;
                        float _3024 = dot(vec3(_758, _761, _764), vec3(_3021, _3022, _3023));
                        float _3029 = 1.0 - (_3017 * _2974.w);
                        float _4365 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                        float _3030 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                        float _3031 = sqrt(_3017) * _2993.w;
                        float _3034 = 1.39999997615814208984375 / (_3031 + 1.39999997615814208984375);
                        float _3035 = _3034 * _3034;
                        float _3038 = ((1.0 - _3035) * _3024) + _3035;
                        float _3041 = _3031 * _3031;
                        float _3045 = ((isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0))) * _3030) / ((_3041 * 0.699999988079071044921875) + 1.0);
                        float _3049 = (-0.0) - _2494;
                        float _3050 = (-0.0) - _2495;
                        float _3051 = (-0.0) - _2496;
                        float _3055 = inversesqrt(dot(vec3(_3049, _3050, _3051), vec3(_3049, _3050, _3051)));
                        float _3056 = _3055 * _3049;
                        float _3057 = _3055 * _3050;
                        float _3058 = _3055 * _3051;
                        float _3066 = exp2(log2(1.0 / ((_3041 * 3.5) + 5.0)) * 0.25);
                        float _3067 = 1.0 - _833;
                        float _3074 = sqrt(1.0 - ((1.0 - (_3067 * _3067)) * (1.0 - (_3066 * _3066))));
                        float _3075 = _3074 * _3074;
                        float _3076 = _3075 * _3075;
                        float _3077 = _3056 + _3021;
                        float _3078 = _3057 + _3022;
                        float _3079 = _3058 + _3023;
                        float _3083 = inversesqrt(dot(vec3(_3077, _3078, _3079), vec3(_3077, _3078, _3079)));
                        float _3087 = dot(vec3(_758, _761, _764), vec3(_3056, _3057, _3058));
                        float _4381 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                        float _3090 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                        float _3091 = dot(vec3(_758, _761, _764), vec3(_3083 * _3077, _3083 * _3078, _3083 * _3079));
                        float _4392 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                        float _3094 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
                        float _3098 = ((_3094 * _3094) * (_3076 + (-1.0))) + 1.0;
                        float _3099 = _3034 * _3075;
                        float _3100 = _3099 * _3099;
                        float _3103 = ((1.0 - _3100) * _3024) + _3100;
                        float _4403 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
                        float _3104 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
                        float _3105 = 1.0 - _3075;
                        float _3115 = (0.5 / (((_3104 * ((_3090 * _3105) + _3075)) + 9.9999999392252902907785028219223e-09) + (((_3104 * _3105) + _3075) * _3090))) * _3104;
                        float _4414 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                        float _3126 = (((_3076 * 3.1415927410125732421875) * (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0)))) / ((_3098 * _3098) * ((_3041 * 2.1991131305694580078125) + 3.141590118408203125))) * _3030;
                        _2883 = (_3045 * _2993.x) + _2951;
                        _2884 = (_3045 * _2993.y) + _2952;
                        _2885 = (_3045 * _2993.z) + _2953;
                        _2880 = (_3126 * _3010.x) + _2948;
                        _2881 = (_3126 * _3010.y) + _2949;
                        _2882 = (_3126 * _3010.z) + _2950;
                        if (_2955 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2948 = _2880;
                            _2949 = _2881;
                            _2950 = _2882;
                            _2951 = _2883;
                            _2952 = _2884;
                            _2953 = _2885;
                            _2954 = _2955;
                        }
                    }
                    frontier_phi_61_pred = _2880;
                    frontier_phi_61_pred_1 = _2885;
                    frontier_phi_61_pred_2 = _2884;
                    frontier_phi_61_pred_3 = _2883;
                    frontier_phi_61_pred_4 = _2882;
                    frontier_phi_61_pred_5 = _2881;
                }
                _2671 = frontier_phi_61_pred;
                _2681 = frontier_phi_61_pred_1;
                _2679 = frontier_phi_61_pred_2;
                _2677 = frontier_phi_61_pred_3;
                _2675 = frontier_phi_61_pred_4;
                _2673 = frontier_phi_61_pred_5;
                uint _2831 = _2830 + 1u;
                if (_2831 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2824 = _2671;
                    _2825 = _2673;
                    _2826 = _2675;
                    _2827 = _2677;
                    _2828 = _2679;
                    _2829 = _2681;
                    _2830 = _2831;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2670 = _2671;
            _2672 = _2673;
            _2674 = _2675;
            _2676 = _2677;
            _2678 = _2679;
            _2680 = _2681;
        }
        uvec4 _2684 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2685 = _2684.z;
        uint _2687 = (_2685 >> 8u) & 15u;
        float _2792;
        float _2794;
        float _2796;
        float _2798;
        float _2800;
        float _2802;
        if (((4294967295u << _2687) & _2540) == 0u)
        {
            _2792 = _2670;
            _2794 = _2672;
            _2796 = _2674;
            _2798 = _2676;
            _2800 = _2678;
            _2802 = _2680;
        }
        else
        {
            float _2817 = inversesqrt(dot(vec3(_2494, _2495, _2496), vec3(_2494, _2495, _2496)));
            float _2818 = _2817 * _2494;
            float _2819 = _2817 * _2495;
            float _2820 = _2817 * _2496;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2687 < ((_2685 >> 12u) & 15u))
            {
                float _2793;
                float _2795;
                float _2797;
                float _2799;
                float _2801;
                float _2803;
                float _2931 = _2670;
                float _2932 = _2672;
                float _2933 = _2674;
                float _2934 = _2676;
                float _2935 = _2678;
                float _2936 = _2680;
                uint _2937 = _2687;
                uint _2946;
                bool _2947;
                for (;;)
                {
                    _2946 = texelFetch(g_lightClassification, int((((_2534 << 5u) + (_2520 << 9u)) + (_2937 << 2u)) >> 2u)).x;
                    _2947 = _2946 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2947)
                    {
                        frontier_phi_67_pred = _2934;
                        frontier_phi_67_pred_1 = _2935;
                        frontier_phi_67_pred_2 = _2936;
                        frontier_phi_67_pred_3 = _2933;
                        frontier_phi_67_pred_4 = _2932;
                        frontier_phi_67_pred_5 = _2931;
                    }
                    else
                    {
                        float _3131;
                        float _3132;
                        float _3133;
                        float _3134;
                        float _3135;
                        float _3136;
                        float _3426;
                        float _3427;
                        float _3428;
                        float _3429;
                        float _3430;
                        float _3431;
                        float _3144 = _2931;
                        float _3145 = _2932;
                        float _3146 = _2933;
                        float _3147 = _2934;
                        float _3148 = _2935;
                        float _3149 = _2936;
                        uint _3150 = _2946;
                        uint _3151;
                        vec4 _3176;
                        float _3177;
                        vec4 _3192;
                        vec3 _3204;
                        vec4 _3219;
                        vec4 _3235;
                        float _3282;
                        bool _3283;
                        for (;;)
                        {
                            uint _3161 = ((_2937 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3150));
                            _3151 = (_3150 + 4294967295u) & _3150;
                            uint _3163 = _3161 * 40u;
                            _3176 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 3u)).x));
                            _3177 = _3176.w;
                            uint _3179 = (_3161 * 40u) + 4u;
                            _3192 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3179)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 3u)).x));
                            uint _3194 = (_3161 * 40u) + 8u;
                            _3204 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3194)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 2u)).x));
                            uint _3206 = (_3161 * 40u) + 16u;
                            _3219 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3206)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 3u)).x));
                            uint _3222 = (_3161 * 40u) + 20u;
                            _3235 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3222)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 3u)).x));
                            uint _3238 = (_3161 * 40u) + 24u;
                            vec4 _3251 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3238)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 3u)).x));
                            uint _3257 = (_3161 * 40u) + 28u;
                            vec4 _3270 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3257)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 3u)).x));
                            _3282 = fma(_2496, _3270.z, fma(_2495, _3270.y, _3270.x * _2494)) + _3270.w;
                            _3283 = !((fma(_2496, _3251.z, fma(_2495, _3251.y, _3251.x * _2494)) + _3251.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3283)
                            {
                                float _3310 = _3176.x - _2494;
                                float _3311 = _3176.y - _2495;
                                float _3312 = _3176.z - _2496;
                                float _3313 = dot(vec3(_3310, _3311, _3312), vec3(_3310, _3311, _3312));
                                float _3316 = inversesqrt(_3313);
                                float _3317 = _3316 * _3310;
                                float _3318 = _3316 * _3311;
                                float _3319 = _3316 * _3312;
                                float _3323 = 1.0 - (_3313 / (_3177 * _3177));
                                float _4425 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                                float _3324 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                                float _3328 = sqrt(_3313) * _3192.w;
                                float _3330 = 1.39999997615814208984375 / (_3328 + 1.39999997615814208984375);
                                float _3331 = _3330 * _3330;
                                float _3334 = ((1.0 - _3331) * dot(vec3(_3317, _3318, _3319), vec3(_758, _761, _764))) + _3331;
                                float _3337 = _3328 * _3328;
                                float _3341 = (fma(_2496, _3219.z, fma(_2495, _3219.y, _3219.x * _2494)) + _3219.w) / _3282;
                                float _3342 = (fma(_2496, _3235.z, fma(_2495, _3235.y, _3235.x * _2494)) + _3235.w) / _3282;
                                float _3346 = 1.0 - dot(vec2(_3341, _3342), vec2(_3341, _3342));
                                float _4441 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                                float _3347 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
                                float _3348 = _3347 * (((isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0))) * _3324) / ((_3337 * 0.699999988079071044921875) + 1.0));
                                float _3360 = exp2(log2(1.0 / ((_3337 * 3.5) + 5.0)) * 0.25);
                                float _3361 = 1.0 - _833;
                                float _3368 = sqrt(1.0 - ((1.0 - (_3361 * _3361)) * (1.0 - (_3360 * _3360))));
                                float _3369 = _3368 * _3368;
                                float _3370 = _3369 * _3369;
                                float _3371 = _3317 - _2818;
                                float _3372 = _3318 - _2819;
                                float _3373 = _3319 - _2820;
                                float _3377 = inversesqrt(dot(vec3(_3371, _3372, _3373), vec3(_3371, _3372, _3373)));
                                float _3381 = dot(vec3(_758, _761, _764), vec3((-0.0) - _2818, (-0.0) - _2819, (-0.0) - _2820));
                                float _4452 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                                float _3384 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
                                float _3385 = dot(vec3(_758, _761, _764), vec3(_3377 * _3371, _3377 * _3372, _3377 * _3373));
                                float _4463 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                                float _3388 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
                                float _3392 = ((_3388 * _3388) * (_3370 + (-1.0))) + 1.0;
                                float _3393 = _3330 * _3369;
                                float _3394 = _3393 * _3393;
                                float _3400 = ((1.0 - _3394) * dot(vec3(_758, _761, _764), vec3(_3317, _3318, _3319))) + _3394;
                                float _4474 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                                float _3401 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                                float _3402 = 1.0 - _3369;
                                float _3412 = (0.5 / (((_3401 * ((_3384 * _3402) + _3369)) + 9.9999999392252902907785028219223e-09) + (((_3401 * _3402) + _3369) * _3384))) * _3401;
                                float _4485 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                                float _3422 = (_3347 * _3324) * (((_3370 * 3.1415927410125732421875) * (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0)))) / ((_3392 * _3392) * ((_3337 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3422 * _3204.x;
                                frontier_phi_73_pred_1 = _3422 * _3204.y;
                                frontier_phi_73_pred_2 = _3348 * _3192.z;
                                frontier_phi_73_pred_3 = _3348 * _3192.y;
                                frontier_phi_73_pred_4 = _3348 * _3192.x;
                                frontier_phi_73_pred_5 = _3422 * _3204.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3426 = frontier_phi_73_pred;
                            _3427 = frontier_phi_73_pred_1;
                            _3431 = frontier_phi_73_pred_2;
                            _3430 = frontier_phi_73_pred_3;
                            _3429 = frontier_phi_73_pred_4;
                            _3428 = frontier_phi_73_pred_5;
                            _3134 = _3429 + _3147;
                            _3135 = _3430 + _3148;
                            _3136 = _3431 + _3149;
                            _3131 = _3426 + _3144;
                            _3132 = _3427 + _3145;
                            _3133 = _3428 + _3146;
                            if (_3151 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3144 = _3131;
                                _3145 = _3132;
                                _3146 = _3133;
                                _3147 = _3134;
                                _3148 = _3135;
                                _3149 = _3136;
                                _3150 = _3151;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3134;
                        frontier_phi_67_pred_1 = _3135;
                        frontier_phi_67_pred_2 = _3136;
                        frontier_phi_67_pred_3 = _3133;
                        frontier_phi_67_pred_4 = _3132;
                        frontier_phi_67_pred_5 = _3131;
                    }
                    _2799 = frontier_phi_67_pred;
                    _2801 = frontier_phi_67_pred_1;
                    _2803 = frontier_phi_67_pred_2;
                    _2797 = frontier_phi_67_pred_3;
                    _2795 = frontier_phi_67_pred_4;
                    _2793 = frontier_phi_67_pred_5;
                    uint _2938 = _2937 + 1u;
                    if (_2938 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2931 = _2793;
                        _2932 = _2795;
                        _2933 = _2797;
                        _2934 = _2799;
                        _2935 = _2801;
                        _2936 = _2803;
                        _2937 = _2938;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2801;
                frontier_phi_55_56_ladder_1 = _2803;
                frontier_phi_55_56_ladder_2 = _2799;
                frontier_phi_55_56_ladder_3 = _2797;
                frontier_phi_55_56_ladder_4 = _2795;
                frontier_phi_55_56_ladder_5 = _2793;
            }
            else
            {
                frontier_phi_55_56_ladder = _2678;
                frontier_phi_55_56_ladder_1 = _2680;
                frontier_phi_55_56_ladder_2 = _2676;
                frontier_phi_55_56_ladder_3 = _2674;
                frontier_phi_55_56_ladder_4 = _2672;
                frontier_phi_55_56_ladder_5 = _2670;
            }
            _2792 = frontier_phi_55_56_ladder_5;
            _2794 = frontier_phi_55_56_ladder_4;
            _2796 = frontier_phi_55_56_ladder_3;
            _2798 = frontier_phi_55_56_ladder_2;
            _2800 = frontier_phi_55_56_ladder;
            _2802 = frontier_phi_55_56_ladder_1;
        }
        float _2807 = isnan(1.0) ? _817 : (isnan(_817) ? 1.0 : min(_817, 1.0));
        _2553 = (_2807 * _2798) + _1989;
        _2555 = (_2807 * _2800) + _1991;
        _2557 = (_2807 * _2802) + _1993;
        _2559 = ((_2792 * _802) * _2807) + _2334;
        _2561 = ((_2794 * _804) * _2807) + _2336;
        _2563 = ((_2796 * _805) * _2807) + _2338;
    }
    else
    {
        _2553 = _1989;
        _2555 = _1991;
        _2557 = _1993;
        _2559 = _2334;
        _2561 = _2336;
        _2563 = _2338;
    }
    uint _2569 = _778 + uint(cbMatDynParam._m0[0u].w);
    float _2575 = cbInstanceData._m0[_2569].x * (_561 - (_577 * _561));
    float _2576 = cbInstanceData._m0[_2569].y * (_562 - (_577 * _562));
    float _2577 = cbInstanceData._m0[_2569].z * (_563 - (_577 * _563));
    float _4501 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _4512 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _4523 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _2594 = (((isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * (_2553 + ((isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))) * _817))) + ((_2559 + ((isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))) * _1627)) * cbPerFrame._m0[3u].x)) + _2575;
    float _2596 = (_2576 + ((_2561 + ((isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0))) * _1627)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_2555 + ((isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))) * _817)));
    float _2598 = (_2577 + ((_2563 + ((isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))) * _1627)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * (_2557 + ((isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))) * _817)));
    float _4549 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2611 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
    uint _2612 = _777 + 6u;
    float _2620 = _739 / cbSceneParam._m0[86u].x;
    float _2621 = _740 / cbSceneParam._m0[86u].y;
    vec4 _2635 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2620, _2621, (log2((isnan(cbSceneParam._m0[77u].w) ? _674 : (isnan(_674) ? cbSceneParam._m0[77u].w : min(_674, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2637 = _2635.x;
    float _2638 = _2635.y;
    float _2639 = _2635.z;
    float _2640 = _2635.w;
    float _2733;
    float _2735;
    float _2737;
    float _2739;
    if (_674 > cbSceneParam._m0[78u].w)
    {
        float _2695 = isnan(_674) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _674 : min(cbSceneParam._m0[80u].w, _674));
        float _2696 = _2695 / _674;
        float _2707 = _2696 * _724;
        float _2708 = _725 * _2696;
        float _2709 = (-0.0) - _2708;
        float _2711 = _2696 * _726;
        float _2713 = (cbSceneParam._m0[77u].w * _2709) / _2695;
        float _2714 = _2713 + cbSceneParam._m0[79u].w;
        float _2715 = cbSceneParam._m0[79u].w - _2708;
        float _2721 = sqrt(((_2707 * _2707) + (_2708 * _2708)) + (_2711 * _2711));
        float _2724 = (1.0 - (cbSceneParam._m0[77u].w / _2695)) * _2721;
        float _2729 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2731 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2893;
        if (abs((_2709 - _2713) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2893 = ((((_2714 > 0.0) ? exp2(_2729 * _2714) : (2.0 - exp2(_2731 * _2714))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2724;
        }
        else
        {
            float _2853 = 1.0 / cbSceneParam._m0[80u].x;
            float _2854 = isnan(_2715) ? _2714 : (isnan(_2714) ? _2715 : max(_2714, _2715));
            float _2855 = isnan(_2715) ? _2714 : (isnan(_2714) ? _2715 : min(_2714, _2715));
            float _2864 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : min(_2854, 0.0));
            float _2865 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : min(_2855, 0.0));
            _2893 = ((abs(_2721 / _2709) * cbSceneParam._m0[80u].y) * ((((_2864 - _2865) * 2.0) - ((exp2(_2729 * (isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0)))) - exp2(_2729 * (isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0))))) * _2853)) - ((exp2(_2731 * _2864) - exp2(_2731 * _2865)) * _2853))) + (_2724 * cbSceneParam._m0[80u].z);
        }
        vec4 _2895 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2620, _2621, 1.0), 0.0);
        float _2904 = exp2((_2893 * (-1.44269502162933349609375)) * (1.0 - _2895.w));
        float _2905 = log2(_2904);
        float _2921 = log2(_2640);
        _2733 = (exp2(_2921 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2905 * cbSceneParam._m0[78u].x)) * _2895.x) / cbSceneParam._m0[78u].x)) + _2637;
        _2735 = (exp2(_2921 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2905 * cbSceneParam._m0[78u].y)) * _2895.y) / cbSceneParam._m0[78u].y)) + _2638;
        _2737 = (exp2(_2921 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2905 * cbSceneParam._m0[78u].z)) * _2895.z) / cbSceneParam._m0[78u].z)) + _2639;
        _2739 = _2904 * _2640;
    }
    else
    {
        _2733 = _2637;
        _2735 = _2638;
        _2737 = _2639;
        _2739 = _2640;
    }
    float _2751 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2752 = _2751 == 3.0;
    float _2753 = log2(_2739);
    float _2757 = exp2(_2753 * cbSceneParam._m0[78u].x);
    float _2758 = exp2(_2753 * cbSceneParam._m0[78u].y);
    float _2759 = exp2(_2753 * cbSceneParam._m0[78u].z);
    float _2760 = _2757 * (isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0)));
    float _2761 = _2758 * (isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0)));
    float _2762 = _2759 * (isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0)));
    float _2771 = (_2751 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2771 * (_2752 ? _2760 : (_2760 + (cbSceneParam._m0[72u].w * _2733)));
    SV_Target.y = _2771 * (_2752 ? _2761 : (_2761 + (cbSceneParam._m0[72u].w * _2735)));
    SV_Target.z = _2771 * (_2752 ? _2762 : (_2762 + (cbSceneParam._m0[72u].w * _2737)));
    SV_Target.w = cbInstanceData._m0[_2612].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2575) * _2611) * _2757) * _2771;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2576) * _2611) * _2758) * _2771;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2577) * _2611) * _2759) * _2771;
    SV_Target_1.w = cbInstanceData._m0[_2612].w;
}


