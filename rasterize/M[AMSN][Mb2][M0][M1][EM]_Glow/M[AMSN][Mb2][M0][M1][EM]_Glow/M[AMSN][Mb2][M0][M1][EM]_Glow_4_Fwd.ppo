#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _994;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _193 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _194 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _195 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_193, _194, _195), vec3(_193, _194, _195)));
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _215 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _237 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _243 = _237.x * cbMtdParam._m0[9u].x;
    float _244 = _237.y * cbMtdParam._m0[9u].y;
    float _245 = _237.z * cbMtdParam._m0[9u].z;
    vec4 _283 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _299 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3348 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _300 = isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0));
    float _307 = (((_283.x * cbMtdParam._m0[10u].x) - _243) * _300) + _243;
    float _308 = (((_283.y * cbMtdParam._m0[10u].y) - _244) * _300) + _244;
    float _309 = (((_283.z * cbMtdParam._m0[10u].z) - _245) * _300) + _245;
    vec4 _329 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _344 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _352 = (_344.x * 2.0) + (-1.0);
    float _354 = (_344.y * 2.0) + (-1.0);
    float _355 = dot(vec2(_352, _354), vec2(_352, _354));
    float _3359 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    vec4 _372 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _376 = _372.z;
    float _379 = (_372.x * 2.0) + (-1.0);
    float _380 = (_372.y * 2.0) + (-1.0);
    float _381 = dot(vec2(_379, _380), vec2(_379, _380));
    float _3370 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _386 = sqrt(1.0 - (isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0))));
    float _389 = (_300 * (_344.z - _376)) + _376;
    vec4 _416 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _431 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _445 = (TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_329.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].x + 1.0);
    float _3381 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _446 = isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0));
    float _453 = (_300 * (_352 - _379)) + _379;
    float _454 = (_300 * (_354 - _380)) + _380;
    float _455 = (_300 * (sqrt(1.0 - (isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0)))) - _386)) + _386;
    float _458 = fma(_455, _208 * NORMAL.x, fma(_454, _215 * TANGENT.x, (_201 * _193) * _453));
    float _461 = fma(_455, _208 * NORMAL.y, fma(_454, _215 * TANGENT.y, (_201 * _194) * _453));
    float _464 = fma(_455, _208 * NORMAL.z, fma(_454, _215 * TANGENT.z, (_201 * _195) * _453));
    float _468 = inversesqrt(dot(vec3(_458, _461, _464), vec3(_458, _461, _464)));
    float _469 = _468 * _458;
    float _470 = _468 * _461;
    float _471 = _468 * _464;
    float _3392 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _472 = isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0));
    float _3403 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _3414 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _3425 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _491 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _532 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _542 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _532);
    float _543 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _532);
    float _544 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _532);
    float _548 = inversesqrt(dot(vec3(_542, _543, _544), vec3(_542, _543, _544)));
    float _549 = _542 * _548;
    float _550 = _543 * _548;
    float _551 = _544 * _548;
    float _557 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _558 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _578 = fma(_471, cbSceneParam._m0[5u].z, fma(_470, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _469));
    float _581 = fma(_471, cbSceneParam._m0[6u].z, fma(_470, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _469));
    float _584 = fma(_471, cbSceneParam._m0[7u].z, fma(_470, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _469));
    uint _597 = uint(roundEven(NORMAL.w)) * 13u;
    uint _598 = _597 + 9u;
    uint _599 = _598 + uint(cbMatDynParam._m0[0u].w);
    float _605 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0)))) * cbInstanceData._m0[_599].x;
    float _606 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0)))) * cbInstanceData._m0[_599].y;
    float _607 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0)))) * cbInstanceData._m0[_599].z;
    float _3436 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _608 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
    float _3447 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _609 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
    float _3458 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _610 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
    vec4 _619 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _557, cbSceneParam._m0[86u].y * _558));
    float _622 = _619.x * TEXCOORD_3.w;
    float _623 = dot(vec3(_469, _470, _471), vec3(_549, _550, _551));
    float _626 = _623 * 2.0;
    float _630 = (_626 * _469) - _549;
    float _631 = (_626 * _470) - _550;
    float _632 = (_626 * _471) - _551;
    float _636 = abs(dot(vec3(_549, _550, _551), vec3(_469, _470, _471)));
    float _3469 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _638 = sqrt(_472);
    float _651 = exp2((_638 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_638 * 3.0));
    float _683 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _687 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _691 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _993;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _718 = fma(_691, cbModelParam._m0[26u].z, fma(_687, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _683));
        float _722 = fma(_691, cbModelParam._m0[27u].z, fma(_687, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _683));
        float _726 = fma(_691, cbModelParam._m0[28u].z, fma(_687, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _683));
        float _751 = _683 + _469;
        float _752 = _687 + _470;
        float _753 = _691 + _471;
        float _763 = fma(_753, cbModelParam._m0[26u].z, fma(_752, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _751)) - _718;
        float _764 = fma(_753, cbModelParam._m0[27u].z, fma(_752, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _751)) - _722;
        float _765 = fma(_753, cbModelParam._m0[28u].z, fma(_752, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _751)) - _726;
        float _769 = inversesqrt(dot(vec3(_763, _764, _765), vec3(_763, _764, _765)));
        float _782 = ((_769 * _763) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_718 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _783 = ((_769 * _764) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_722 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _784 = ((_769 * _765) / cbModelParam._m0[34u].z) + ((((((_726 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _787 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_782, _783, _784), 0.0);
        vec4 _794 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_782, _783, _784), 0.0);
        vec4 _801 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_782, _783, _784), 0.0);
        vec4 _808 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_782, _783, _784), 0.0);
        float _821 = exp2((_787.w + (-0.5)) * 20.0) * 2.0;
        float _822 = _821 * (_787.x + (-0.5));
        float _823 = _821 * (_787.y + (-0.5));
        float _824 = _821 * (_787.z + (-0.5));
        float _831 = exp2((_794.w + (-0.5)) * 20.0) * 2.0;
        float _832 = _831 * (_794.x + (-0.5));
        float _833 = _831 * (_794.y + (-0.5));
        float _834 = _831 * (_794.z + (-0.5));
        float _841 = exp2((_801.w + (-0.5)) * 20.0) * 2.0;
        float _842 = _841 * (_801.x + (-0.5));
        float _843 = _841 * (_801.y + (-0.5));
        float _844 = _841 * (_801.z + (-0.5));
        float _851 = exp2((_808.w + (-0.5)) * 20.0) * 2.0;
        float _852 = _851 * (_808.x + (-0.5));
        float _853 = _851 * (_808.y + (-0.5));
        float _854 = _851 * (_808.z + (-0.5));
        float _855 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _856 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _857 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _858 = _822 * 0.5;
        float _859 = _832 * 0.5;
        float _860 = _842 * 0.5;
        float _861 = dot(vec3(_858, _859, _860), vec3(_858, _859, _860));
        float _866 = (_861 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_861);
        float _875 = (dot(vec3(_469, _470, _471), vec3(_866 * _858, _866 * _859, _866 * _860)) + 1.0) * 0.5;
        float _3495 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _885 = sqrt(((_859 * _859) + (_858 * _858)) + (_860 * _860)) / (_855 + 9.9999997473787516355514526367188e-06);
        float _3506 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _886 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
        float _887 = _886 * 2.0;
        float _891 = (1.0 - _886) / (_886 + 1.0);
        float _3517 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _892 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
        float _901 = ((((1.0 - _892) * (_887 + 2.0)) * exp2(log2(isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0))) * (_887 + 1.0))) + _892) * _855;
        float _902 = _823 * 0.5;
        float _903 = _833 * 0.5;
        float _904 = _843 * 0.5;
        float _905 = dot(vec3(_902, _903, _904), vec3(_902, _903, _904));
        float _910 = (_905 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_905);
        float _918 = (dot(vec3(_469, _470, _471), vec3(_910 * _902, _910 * _903, _910 * _904)) + 1.0) * 0.5;
        float _3528 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _927 = sqrt(((_903 * _903) + (_902 * _902)) + (_904 * _904)) / (_856 + 9.9999997473787516355514526367188e-06);
        float _3539 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
        float _929 = _928 * 2.0;
        float _933 = (1.0 - _928) / (_928 + 1.0);
        float _3550 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _943 = ((((1.0 - _934) * (_929 + 2.0)) * exp2(log2(isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0))) * (_929 + 1.0))) + _934) * _856;
        float _944 = _824 * 0.5;
        float _945 = _834 * 0.5;
        float _946 = _844 * 0.5;
        float _947 = dot(vec3(_944, _945, _946), vec3(_944, _945, _946));
        float _952 = (_947 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_947);
        float _960 = (dot(vec3(_469, _470, _471), vec3(_952 * _944, _952 * _945, _952 * _946)) + 1.0) * 0.5;
        float _3561 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _969 = sqrt(((_945 * _945) + (_944 * _944)) + (_946 * _946)) / (_857 + 9.9999997473787516355514526367188e-06);
        float _3572 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
        float _971 = _970 * 2.0;
        float _975 = (1.0 - _970) / (_970 + 1.0);
        float _3583 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
        float _985 = ((((1.0 - _976) * (_971 + 2.0)) * exp2(log2(isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0))) * (_971 + 1.0))) + _976) * _857;
        _993 = _824;
        _995 = _823;
        _996 = _822;
        _997 = _834;
        _998 = _833;
        _999 = _832;
        _1000 = _844;
        _1001 = _843;
        _1002 = _842;
        _1003 = _857;
        _1004 = _856;
        _1005 = _855;
        _1006 = cbModelParam._m0[36u].z * (isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0)));
        _1007 = cbModelParam._m0[36u].z * (isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0)));
        _1008 = cbModelParam._m0[36u].z * (isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0)));
    }
    else
    {
        _993 = _994;
        _995 = _994;
        _996 = _994;
        _997 = _994;
        _998 = _994;
        _999 = _994;
        _1000 = _994;
        _1001 = _994;
        _1002 = _994;
        _1003 = _994;
        _1004 = _994;
        _1005 = _994;
        _1006 = 0.0;
        _1007 = 0.0;
        _1008 = 0.0;
    }
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1034 = fma(_691, cbModelParam._m0[30u].z, fma(_687, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _683));
        float _1038 = fma(_691, cbModelParam._m0[31u].z, fma(_687, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _683));
        float _1042 = fma(_691, cbModelParam._m0[32u].z, fma(_687, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _683));
        float _1065 = _683 + _469;
        float _1066 = _687 + _470;
        float _1067 = _691 + _471;
        float _1077 = fma(_1067, cbModelParam._m0[30u].z, fma(_1066, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1065)) - _1034;
        float _1078 = fma(_1067, cbModelParam._m0[31u].z, fma(_1066, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1065)) - _1038;
        float _1079 = fma(_1067, cbModelParam._m0[32u].z, fma(_1066, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1065)) - _1042;
        float _1083 = inversesqrt(dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079)));
        float _1096 = ((_1083 * _1077) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1034 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1097 = ((_1083 * _1078) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1038 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1098 = ((_1083 * _1079) / cbModelParam._m0[35u].z) + ((((((_1042 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        float _1133 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1100.x + (-0.5));
        float _1135 = _1133 * (_1100.y + (-0.5));
        float _1136 = _1133 * (_1100.z + (-0.5));
        float _1143 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1107.x + (-0.5));
        float _1145 = _1143 * (_1107.y + (-0.5));
        float _1146 = _1143 * (_1107.z + (-0.5));
        float _1153 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1114.x + (-0.5));
        float _1155 = _1153 * (_1114.y + (-0.5));
        float _1156 = _1153 * (_1114.z + (-0.5));
        float _1163 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1121.x + (-0.5));
        float _1165 = _1163 * (_1121.y + (-0.5));
        float _1166 = _1163 * (_1121.z + (-0.5));
        float _1167 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1168 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1169 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1170 = _1134 * 0.5;
        float _1171 = _1144 * 0.5;
        float _1172 = _1154 * 0.5;
        float _1173 = dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172));
        float _1178 = (_1173 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1173);
        float _1186 = (dot(vec3(_469, _470, _471), vec3(_1178 * _1170, _1178 * _1171, _1178 * _1172)) + 1.0) * 0.5;
        float _3624 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1195 = sqrt(((_1171 * _1171) + (_1170 * _1170)) + (_1172 * _1172)) / (_1167 + 9.9999997473787516355514526367188e-06);
        float _3635 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _1197 = _1196 * 2.0;
        float _1201 = (1.0 - _1196) / (_1196 + 1.0);
        float _3646 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _1211 = ((((1.0 - _1202) * (_1197 + 2.0)) * exp2(log2(isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) * (_1197 + 1.0))) + _1202) * _1167;
        float _1212 = _1135 * 0.5;
        float _1213 = _1145 * 0.5;
        float _1214 = _1155 * 0.5;
        float _1215 = dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214));
        float _1220 = (_1215 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1215);
        float _1228 = (dot(vec3(_469, _470, _471), vec3(_1220 * _1212, _1220 * _1213, _1220 * _1214)) + 1.0) * 0.5;
        float _3657 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1237 = sqrt(((_1213 * _1213) + (_1212 * _1212)) + (_1214 * _1214)) / (_1168 + 9.9999997473787516355514526367188e-06);
        float _3668 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _1239 = _1238 * 2.0;
        float _1243 = (1.0 - _1238) / (_1238 + 1.0);
        float _3679 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _1253 = ((((1.0 - _1244) * (_1239 + 2.0)) * exp2(log2(isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0))) * (_1239 + 1.0))) + _1244) * _1168;
        float _1254 = _1136 * 0.5;
        float _1255 = _1146 * 0.5;
        float _1256 = _1156 * 0.5;
        float _1257 = dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256));
        float _1262 = (_1257 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1257);
        float _1270 = (dot(vec3(_469, _470, _471), vec3(_1262 * _1254, _1262 * _1255, _1262 * _1256)) + 1.0) * 0.5;
        float _3690 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1279 = sqrt(((_1255 * _1255) + (_1254 * _1254)) + (_1256 * _1256)) / (_1169 + 9.9999997473787516355514526367188e-06);
        float _3701 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _1281 = _1280 * 2.0;
        float _1285 = (1.0 - _1280) / (_1280 + 1.0);
        float _3712 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1295 = ((((1.0 - _1286) * (_1281 + 2.0)) * exp2(log2(isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))) * (_1281 + 1.0))) + _1286) * _1169;
        _1303 = _1136;
        _1304 = _1135;
        _1305 = _1134;
        _1306 = _1146;
        _1307 = _1145;
        _1308 = _1144;
        _1309 = _1156;
        _1310 = _1155;
        _1311 = _1154;
        _1312 = _1169;
        _1313 = _1168;
        _1314 = _1167;
        _1315 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)));
        _1316 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)));
        _1317 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)));
    }
    else
    {
        _1303 = _994;
        _1304 = _994;
        _1305 = _994;
        _1306 = _994;
        _1307 = _994;
        _1308 = _994;
        _1309 = _994;
        _1310 = _994;
        _1311 = _994;
        _1312 = _994;
        _1313 = _994;
        _1314 = _994;
        _1315 = 0.0;
        _1316 = 0.0;
        _1317 = 0.0;
    }
    float _1327 = (cbModelParam._m0[1u].x * (_1315 - _1006)) + _1006;
    float _1328 = (cbModelParam._m0[1u].x * (_1316 - _1007)) + _1007;
    float _1329 = (cbModelParam._m0[1u].x * (_1317 - _1008)) + _1008;
    float _1350 = fma(_1329, cbSceneParam._m0[89u].z, fma(_1328, cbSceneParam._m0[89u].y, _1327 * cbSceneParam._m0[89u].x));
    float _1353 = fma(_1329, cbSceneParam._m0[90u].z, fma(_1328, cbSceneParam._m0[90u].y, _1327 * cbSceneParam._m0[90u].x));
    float _1356 = fma(_1329, cbSceneParam._m0[91u].z, fma(_1328, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1327));
    float _1371 = _630 * 0.5;
    float _1372 = _631 * 0.5;
    float _1373 = _632 * 0.5;
    float _1374 = dot(vec4(_1371, _1372, _1373, 1.0), vec4(_1305, _1308, _1311, _1314));
    float _1377 = dot(vec4(_1371, _1372, _1373, 1.0), vec4(_1304, _1307, _1310, _1313));
    float _1380 = dot(vec4(_1371, _1372, _1373, 1.0), vec4(_1303, _1306, _1309, _1312));
    float _1414;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1387 = dot(vec4(_1371, _1372, _1373, 1.0), vec4(_993, _997, _1000, _1003));
        float _1391 = dot(vec4(_1371, _1372, _1373, 1.0), vec4(_995, _998, _1001, _1004));
        float _1395 = dot(vec4(_1371, _1372, _1373, 1.0), vec4(_996, _999, _1002, _1005));
        float _1402 = dot(vec4(cbModelParam._m0[39u]), vec4(_1371, _1372, _1373, 1.0));
        _1414 = dot(vec3(isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)), isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)), isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1402) ? 0.0 : (isnan(0.0) ? _1402 : max(0.0, _1402))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1414 = 1.0;
    }
    float _1425;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1416 = dot(vec4(cbModelParam._m0[40u]), vec4(_1371, _1372, _1373, 1.0));
        _1425 = dot(vec3(isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)), isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)), isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1416) ? 0.0 : (isnan(0.0) ? _1416 : max(0.0, _1416))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1425 = 1.0;
    }
    float _1429 = (_1425 * cbModelParam._m0[1u].x) + (_1414 * (1.0 - cbModelParam._m0[1u].x));
    float _1439 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _472);
    float _1440 = isnan(_1439) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1439 : min(cbModelParam._m0[25u].z, _1439));
    float _1520;
    float _1522;
    float _1524;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1487 = fma(_691, cbModelParam._m0[13u].z, fma(_687, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _683)) + cbModelParam._m0[13u].w;
        float _1491 = fma(_691, cbModelParam._m0[14u].z, fma(_687, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _683)) + cbModelParam._m0[14u].w;
        float _1495 = fma(_691, cbModelParam._m0[15u].z, fma(_687, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _683)) + cbModelParam._m0[15u].w;
        float _1498 = fma(_632, cbModelParam._m0[13u].z, fma(_631, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _630));
        float _1501 = fma(_632, cbModelParam._m0[14u].z, fma(_631, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _630));
        float _1504 = fma(_632, cbModelParam._m0[15u].z, fma(_631, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _630));
        float _1532;
        if (_1498 > 0.0)
        {
            _1532 = abs((1.0 - _1487) / _1498);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1498 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1487 + 1.0) / _1498);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1532 = frontier_phi_14_12_ladder;
        }
        float _1735;
        if (_1501 > 0.0)
        {
            _1735 = abs((1.0 - _1491) / _1501);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1501 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1491 + 1.0) / _1501);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1735 = frontier_phi_23_19_ladder;
        }
        float _1978;
        if (_1504 > 0.0)
        {
            _1978 = abs((1.0 - _1495) / _1504);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1504 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1495 + 1.0) / _1504);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1978 = frontier_phi_35_30_ladder;
        }
        float _1980 = isnan(_1735) ? _1532 : (isnan(_1532) ? _1735 : min(_1532, _1735));
        float _1981 = isnan(_1978) ? _1980 : (isnan(_1980) ? _1978 : min(_1980, _1978));
        float _1985 = (_1981 * _1498) + _1487;
        float _1986 = (_1981 * _1501) + _1491;
        float _1987 = (_1981 * _1504) + _1495;
        float _1988 = _1981 * 9.9999997473787516355514526367188e-05;
        float _1990 = (-1.0) - _1988;
        float _1992 = _1988 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1987 > _1992) || ((_1987 < _1990) || ((_1986 > _1992) || ((_1986 < _1990) || ((_1985 < _1990) || (_1985 > _1992))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2111 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1987, cbModelParam._m0[9u].z, fma(_1986, cbModelParam._m0[9u].y, _1985 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1987, cbModelParam._m0[10u].z, fma(_1986, cbModelParam._m0[10u].y, _1985 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1987, cbModelParam._m0[11u].z, fma(_1986, cbModelParam._m0[11u].y, _1985 * cbModelParam._m0[11u].x))), _1440);
            frontier_phi_13_35_ladder = _2111.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2111.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2111.x * cbModelParam._m0[1u].y;
        }
        _1520 = frontier_phi_13_35_ladder_2;
        _1522 = frontier_phi_13_35_ladder_1;
        _1524 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1508 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_630, _631, _632), _1440);
        _1520 = _1508.x * cbModelParam._m0[1u].y;
        _1522 = _1508.y * cbModelParam._m0[1u].y;
        _1524 = _1508.z * cbModelParam._m0[1u].y;
    }
    float _1528 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _472);
    float _1529 = isnan(_1528) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1528 : min(cbModelParam._m0[25u].w, _1528));
    float _1620;
    float _1622;
    float _1624;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1584 = fma(_691, cbModelParam._m0[21u].z, fma(_687, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _683)) + cbModelParam._m0[21u].w;
        float _1588 = fma(_691, cbModelParam._m0[22u].z, fma(_687, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _683)) + cbModelParam._m0[22u].w;
        float _1592 = fma(_691, cbModelParam._m0[23u].z, fma(_687, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _683)) + cbModelParam._m0[23u].w;
        float _1595 = fma(_632, cbModelParam._m0[21u].z, fma(_631, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _630));
        float _1598 = fma(_632, cbModelParam._m0[22u].z, fma(_631, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _630));
        float _1601 = fma(_632, cbModelParam._m0[23u].z, fma(_631, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _630));
        float _1740;
        if (_1595 > 0.0)
        {
            _1740 = abs((1.0 - _1584) / _1595);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1595 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1584 + 1.0) / _1595);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1740 = frontier_phi_25_21_ladder;
        }
        float _2005;
        if (_1598 > 0.0)
        {
            _2005 = abs((1.0 - _1588) / _1598);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1598 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1588 + 1.0) / _1598);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2005 = frontier_phi_37_32_ladder;
        }
        float _2210;
        if (_1601 > 0.0)
        {
            _2210 = abs((1.0 - _1592) / _1601);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1601 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1592 + 1.0) / _1601);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2210 = frontier_phi_46_43_ladder;
        }
        float _2212 = isnan(_2005) ? _1740 : (isnan(_1740) ? _2005 : min(_1740, _2005));
        float _2213 = isnan(_2210) ? _2212 : (isnan(_2212) ? _2210 : min(_2212, _2210));
        float _2217 = (_2213 * _1595) + _1584;
        float _2218 = (_2213 * _1598) + _1588;
        float _2219 = (_2213 * _1601) + _1592;
        float _2220 = _2213 * 9.9999997473787516355514526367188e-05;
        float _2221 = (-1.0) - _2220;
        float _2223 = _2220 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2219 > _2223) || ((_2219 < _2221) || ((_2218 > _2223) || ((_2218 < _2221) || ((_2217 < _2221) || (_2217 > _2223))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2453 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2219, cbModelParam._m0[17u].z, fma(_2218, cbModelParam._m0[17u].y, _2217 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2219, cbModelParam._m0[18u].z, fma(_2218, cbModelParam._m0[18u].y, _2217 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2219, cbModelParam._m0[19u].z, fma(_2218, cbModelParam._m0[19u].y, _2217 * cbModelParam._m0[19u].x))), _1529);
            frontier_phi_22_46_ladder = _2453.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2453.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2453.x * cbModelParam._m0[1u].z;
        }
        _1620 = frontier_phi_22_46_ladder_2;
        _1622 = frontier_phi_22_46_ladder_1;
        _1624 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1604 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_630, _631, _632), _1529);
        _1620 = _1604.x * cbModelParam._m0[1u].z;
        _1622 = _1604.y * cbModelParam._m0[1u].z;
        _1624 = _1604.z * cbModelParam._m0[1u].z;
    }
    float _1636 = ((((1.0 - _651) * ((_638 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_651 * _638)) * _622;
    float _1637 = _1636 * ((cbModelParam._m0[1u].w * (_1620 - _1520)) + _1520);
    float _1638 = _1636 * ((cbModelParam._m0[1u].w * (_1622 - _1522)) + _1522);
    float _1639 = _1636 * ((cbModelParam._m0[1u].w * (_1624 - _1524)) + _1524);
    float _1642 = fma(_1639, cbSceneParam._m0[89u].z, fma(_1638, cbSceneParam._m0[89u].y, _1637 * cbSceneParam._m0[89u].x));
    float _1645 = fma(_1639, cbSceneParam._m0[90u].z, fma(_1638, cbSceneParam._m0[90u].y, _1637 * cbSceneParam._m0[90u].x));
    float _1648 = fma(_1639, cbSceneParam._m0[91u].z, fma(_1638, cbSceneParam._m0[91u].y, _1637 * cbSceneParam._m0[91u].x));
    uvec4 _1658 = floatBitsToUint(cbInstanceData._m0[_597 + 5u]);
    uint _1660 = _1658.x * 14u;
    uint _1661 = _1660 + 13u;
    float _1668 = _622 + (-1.0);
    float _1673 = (cbLight._m0[_1661].x * _1668) + 1.0;
    float _1674 = (cbLight._m0[_1661].y * _1668) + 1.0;
    float _1675 = (cbLight._m0[_1661].z * _1668) + 1.0;
    float _1676 = (cbLight._m0[_1661].w * _1668) + 1.0;
    uint _1677 = _1660 + 5u;
    float _1683 = isnan(1.0) ? _1674 : (isnan(_1674) ? 1.0 : min(_1674, 1.0));
    uint _1687 = _1660 + 4u;
    float _1693 = isnan(1.0) ? _1673 : (isnan(_1673) ? 1.0 : min(_1673, 1.0));
    uint _1697 = _1660 | 1u;
    float _1708 = dot(vec3(cbLight._m0[_1660].xyz), vec3(_469, _470, _471));
    float _1711 = dot(vec3(cbLight._m0[_1697].xyz), vec3(_469, _470, _471));
    float _3848 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
    float _3859 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
    float _1716 = (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * 0.3183098733425140380859375;
    float _1718 = (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * 0.3183098733425140380859375;
    float _1725 = ((cbLight._m0[_1677].x * _1683) * _1718) + ((cbLight._m0[_1687].x * _1693) * _1716);
    float _1726 = ((_1683 * cbLight._m0[_1677].y) * _1718) + ((_1693 * cbLight._m0[_1687].y) * _1716);
    float _1727 = ((_1683 * cbLight._m0[_1677].z) * _1718) + ((_1693 * cbLight._m0[_1687].z) * _1716);
    uvec4 _1732 = floatBitsToUint(cbLight._m0[_1660 + 12u]);
    bool _1734 = _1732.x == 0u;
    float _1745;
    float _1747;
    float _1749;
    if (_1734)
    {
        _1745 = _1725;
        _1747 = _1726;
        _1749 = _1727;
    }
    else
    {
        uint _1753 = _1660 + 6u;
        float _1769 = (dot(vec3(cbLight._m0[_1660 + 2u].xyz), vec3(_469, _470, _471)) * 0.5) + 0.5;
        float _1770 = _1769 * _1769;
        float _3870 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _1771 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1772 = isnan(1.0) ? _1675 : (isnan(_1675) ? 1.0 : min(_1675, 1.0));
        _1745 = (((cbLight._m0[_1753].x * 0.3183098733425140380859375) * _1771) * _1772) + _1725;
        _1747 = (((cbLight._m0[_1753].y * 0.3183098733425140380859375) * _1771) * _1772) + _1726;
        _1749 = (((cbLight._m0[_1753].z * 0.3183098733425140380859375) * _1771) * _1772) + _1727;
    }
    bool _1752 = _1732.y == 0u;
    float _1790;
    float _1792;
    float _1794;
    if (_1752)
    {
        _1790 = _1745;
        _1792 = _1747;
        _1794 = _1749;
    }
    else
    {
        uint _1949 = _1660 + 7u;
        float _1965 = (dot(vec3(cbLight._m0[_1660 + 3u].xyz), vec3(_469, _470, _471)) * 0.5) + 0.5;
        float _1966 = _1965 * _1965;
        float _3886 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
        float _1967 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1968 = isnan(1.0) ? _1676 : (isnan(_1676) ? 1.0 : min(_1676, 1.0));
        _1790 = (((cbLight._m0[_1949].x * 0.3183098733425140380859375) * _1967) * _1968) + _1745;
        _1792 = (((cbLight._m0[_1949].y * 0.3183098733425140380859375) * _1967) * _1968) + _1747;
        _1794 = (((cbLight._m0[_1949].z * 0.3183098733425140380859375) * _1967) * _1968) + _1749;
    }
    uint _1797 = _1660 + 8u;
    float _1810 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1660].w)) * _472) * 0.949999988079071044921875);
    float _1811 = _1810 * _1810;
    float _1812 = cbLight._m0[_1660].x + _549;
    float _1813 = cbLight._m0[_1660].y + _550;
    float _1814 = cbLight._m0[_1660].z + _551;
    float _1818 = inversesqrt(dot(vec3(_1812, _1813, _1814), vec3(_1812, _1813, _1814)));
    float _1819 = _1818 * _1812;
    float _1820 = _1818 * _1813;
    float _1821 = _1818 * _1814;
    float _1822 = dot(vec3(_469, _470, _471), vec3(cbLight._m0[_1660].xyz));
    float _3902 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
    float _1825 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
    float _3913 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _1826 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _1827 = dot(vec3(_469, _470, _471), vec3(_1819, _1820, _1821));
    float _3924 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _1830 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _1831 = dot(vec3(cbLight._m0[_1660].xyz), vec3(_1819, _1820, _1821));
    float _3935 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _1835 = _1811 * _1811;
    float _1839 = ((_1830 * _1830) * (_1835 + (-1.0))) + 1.0;
    float _1850 = (exp2(log2(1.0 - (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1851 = 1.0 - _1811;
    float _1862 = (0.5 / (((_1826 * ((_1825 * _1851) + _1811)) + 9.9999999392252902907785028219223e-09) + (((_1826 * _1851) + _1811) * _1825))) * _1825;
    float _3946 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _1864 = (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * (_1835 / ((_1839 * _1839) * 3.141590118408203125));
    uint _1875 = _1660 + 9u;
    float _1886 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1697].w)) * _472) * 0.949999988079071044921875);
    float _1887 = _1886 * _1886;
    float _1888 = cbLight._m0[_1697].x + _549;
    float _1889 = cbLight._m0[_1697].y + _550;
    float _1890 = cbLight._m0[_1697].z + _551;
    float _1894 = inversesqrt(dot(vec3(_1888, _1889, _1890), vec3(_1888, _1889, _1890)));
    float _1895 = _1894 * _1888;
    float _1896 = _1894 * _1889;
    float _1897 = _1894 * _1890;
    float _1898 = dot(vec3(_469, _470, _471), vec3(cbLight._m0[_1697].xyz));
    float _3957 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _1901 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _1902 = dot(vec3(_469, _470, _471), vec3(_1895, _1896, _1897));
    float _3968 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1905 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _1906 = dot(vec3(cbLight._m0[_1697].xyz), vec3(_1895, _1896, _1897));
    float _3979 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _1910 = _1887 * _1887;
    float _1914 = ((_1905 * _1905) * (_1910 + (-1.0))) + 1.0;
    float _1923 = (exp2(log2(1.0 - (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1924 = 1.0 - _1887;
    float _1934 = (0.5 / (((_1826 * ((_1901 * _1924) + _1887)) + 9.9999999392252902907785028219223e-09) + (((_1826 * _1924) + _1887) * _1901))) * _1901;
    float _3990 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
    float _1936 = (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_1910 / ((_1914 * _1914) * 3.141590118408203125));
    float _1946 = (((_1923 * cbLight._m0[_1875].x) * _1936) * _1683) + (((_1850 * cbLight._m0[_1797].x) * _1864) * _1693);
    float _1947 = (((_1923 * cbLight._m0[_1875].y) * _1936) * _1683) + (((_1850 * cbLight._m0[_1797].y) * _1864) * _1693);
    float _1948 = (((_1923 * cbLight._m0[_1875].z) * _1936) * _1683) + (((_1850 * cbLight._m0[_1797].z) * _1864) * _1693);
    float _2010;
    float _2012;
    float _2014;
    if (_1734)
    {
        _2010 = _1946;
        _2012 = _1947;
        _2014 = _1948;
    }
    else
    {
        uint _2016 = _1660 + 2u;
        uint _2020 = _1660 + 10u;
        float _2034 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2016].w)) * _472) * 0.949999988079071044921875);
        float _2035 = _2034 * _2034;
        float _2036 = cbLight._m0[_2016].x + _549;
        float _2037 = cbLight._m0[_2016].y + _550;
        float _2038 = cbLight._m0[_2016].z + _551;
        float _2042 = inversesqrt(dot(vec3(_2036, _2037, _2038), vec3(_2036, _2037, _2038)));
        float _2043 = _2042 * _2036;
        float _2044 = _2042 * _2037;
        float _2045 = _2042 * _2038;
        float _2046 = dot(vec3(_469, _470, _471), vec3(cbLight._m0[_2016].xyz));
        float _4001 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
        float _2049 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _2050 = dot(vec3(_469, _470, _471), vec3(_2043, _2044, _2045));
        float _4012 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
        float _2053 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _2054 = dot(vec3(cbLight._m0[_2016].xyz), vec3(_2043, _2044, _2045));
        float _4023 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2058 = _2035 * _2035;
        float _2062 = ((_2053 * _2053) * (_2058 + (-1.0))) + 1.0;
        float _2071 = (exp2(log2(1.0 - (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2072 = 1.0 - _2035;
        float _2082 = (0.5 / (((_1826 * ((_2049 * _2072) + _2035)) + 9.9999999392252902907785028219223e-09) + (((_1826 * _2072) + _2035) * _2049))) * _2049;
        float _4034 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
        float _2084 = (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_2058 / ((_2062 * _2062) * 3.141590118408203125));
        float _2085 = isnan(1.0) ? _1675 : (isnan(_1675) ? 1.0 : min(_1675, 1.0));
        _2010 = (((_2071 * cbLight._m0[_2020].x) * _2084) * _2085) + _1946;
        _2012 = (((_2071 * cbLight._m0[_2020].y) * _2084) * _2085) + _1947;
        _2014 = (((_2071 * cbLight._m0[_2020].z) * _2084) * _2085) + _1948;
    }
    float _2120;
    float _2122;
    float _2124;
    if (_1752)
    {
        _2120 = _2010;
        _2122 = _2012;
        _2124 = _2014;
    }
    else
    {
        uint _2131 = _1660 + 3u;
        uint _2135 = _1660 + 11u;
        float _2149 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2131].w)) * _472) * 0.949999988079071044921875);
        float _2150 = _2149 * _2149;
        float _2151 = cbLight._m0[_2131].x + _549;
        float _2152 = cbLight._m0[_2131].y + _550;
        float _2153 = cbLight._m0[_2131].z + _551;
        float _2157 = inversesqrt(dot(vec3(_2151, _2152, _2153), vec3(_2151, _2152, _2153)));
        float _2158 = _2157 * _2151;
        float _2159 = _2157 * _2152;
        float _2160 = _2157 * _2153;
        float _2161 = dot(vec3(_469, _470, _471), vec3(cbLight._m0[_2131].xyz));
        float _4050 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2164 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _2165 = dot(vec3(_469, _470, _471), vec3(_2158, _2159, _2160));
        float _4061 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2168 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _2169 = dot(vec3(cbLight._m0[_2131].xyz), vec3(_2158, _2159, _2160));
        float _4072 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
        float _2173 = _2150 * _2150;
        float _2177 = ((_2168 * _2168) * (_2173 + (-1.0))) + 1.0;
        float _2186 = (exp2(log2(1.0 - (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2187 = 1.0 - _2150;
        float _2197 = (0.5 / (((_1826 * ((_2164 * _2187) + _2150)) + 9.9999999392252902907785028219223e-09) + (((_1826 * _2187) + _2150) * _2164))) * _2164;
        float _4083 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
        float _2199 = (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (_2173 / ((_2177 * _2177) * 3.141590118408203125));
        float _2200 = isnan(1.0) ? _1676 : (isnan(_1676) ? 1.0 : min(_1676, 1.0));
        _2120 = (((_2186 * cbLight._m0[_2135].x) * _2199) * _2200) + _2010;
        _2122 = (((_2186 * cbLight._m0[_2135].y) * _2199) * _2200) + _2012;
        _2124 = (((_2186 * cbLight._m0[_2135].z) * _2199) * _2200) + _2014;
    }
    float _2335;
    float _2337;
    float _2339;
    float _2341;
    float _2343;
    float _2345;
    if (_1658.y == 0u)
    {
        float _2275 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2276 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2275;
        float _2277 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2275;
        float _2278 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2275;
        uvec4 _2290 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2291 = _2290.x;
        uint _2302 = uint((float(_2290.y) * floor(float(uint(cbSceneParam._m0[85u].y * _558) / _2291))) + floor(float(uint(cbSceneParam._m0[85u].x * _557) / _2291)));
        float _2312 = (log2(_2278 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2313 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        uint _2316 = uint(isnan(14.0) ? _2313 : (isnan(_2313) ? 14.0 : min(_2313, 14.0)));
        uvec4 _2321 = texelFetch(g_lightClusterGridBuffer, int(((_2316 << 2u) + (_2302 << 6u)) >> 2u));
        uint _2322 = _2321.x;
        uint _2323 = _2290.z;
        float _2458;
        float _2460;
        float _2462;
        float _2464;
        float _2466;
        float _2468;
        if (((((1u << ((_2323 >> 4u) & 15u)) + 4294967295u) & _2322) == 0u) || ((_2323 & 240u) == 0u))
        {
            _2458 = 0.0;
            _2460 = 0.0;
            _2462 = 0.0;
            _2464 = 0.0;
            _2466 = 0.0;
            _2468 = 0.0;
        }
        else
        {
            float _2459;
            float _2461;
            float _2463;
            float _2465;
            float _2467;
            float _2469;
            float _2612 = 0.0;
            float _2613 = 0.0;
            float _2614 = 0.0;
            float _2615 = 0.0;
            float _2616 = 0.0;
            float _2617 = 0.0;
            uint _2618 = 0u;
            uint _2627;
            bool _2628;
            for (;;)
            {
                _2627 = texelFetch(g_lightClassification, int((((_2316 << 5u) + (_2302 << 9u)) + (_2618 << 2u)) >> 2u)).x;
                _2628 = _2627 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2628)
                {
                    frontier_phi_61_pred = _2612;
                    frontier_phi_61_pred_1 = _2617;
                    frontier_phi_61_pred_2 = _2616;
                    frontier_phi_61_pred_3 = _2615;
                    frontier_phi_61_pred_4 = _2614;
                    frontier_phi_61_pred_5 = _2613;
                }
                else
                {
                    float _2736;
                    float _2737;
                    float _2738;
                    float _2739;
                    float _2740;
                    float _2741;
                    uint _2742;
                    _2736 = _2612;
                    _2737 = _2613;
                    _2738 = _2614;
                    _2739 = _2615;
                    _2740 = _2616;
                    _2741 = _2617;
                    _2742 = _2627;
                    float _2668;
                    float _2669;
                    float _2670;
                    float _2671;
                    float _2672;
                    float _2673;
                    for (;;)
                    {
                        uint _2746 = uint(findLSB(_2742)) + (_2618 << 5u);
                        uint _2743 = (_2742 + 4294967295u) & _2742;
                        uint _2748 = _2746 * 48u;
                        vec4 _2762 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2748)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 3u)).x));
                        uint _2768 = (_2746 * 48u) + 4u;
                        vec4 _2781 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2768)).x, texelFetch(g_PointLightRenderingBuffer, int(_2768 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2768 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2768 + 3u)).x));
                        uint _2787 = (_2746 * 48u) + 8u;
                        vec3 _2798 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2787)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 2u)).x));
                        float _2802 = _2762.x - _2276;
                        float _2803 = _2762.y - _2277;
                        float _2804 = _2762.z - _2278;
                        float _2805 = dot(vec3(_2802, _2803, _2804), vec3(_2802, _2803, _2804));
                        float _2808 = inversesqrt(_2805);
                        float _2809 = _2808 * _2802;
                        float _2810 = _2808 * _2803;
                        float _2811 = _2808 * _2804;
                        float _2812 = dot(vec3(_578, _581, _584), vec3(_2809, _2810, _2811));
                        float _2817 = 1.0 - (_2805 * _2762.w);
                        float _4109 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
                        float _2818 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
                        float _2819 = sqrt(_2805) * _2781.w;
                        float _2822 = 1.39999997615814208984375 / (_2819 + 1.39999997615814208984375);
                        float _2823 = _2822 * _2822;
                        float _2826 = ((1.0 - _2823) * _2812) + _2823;
                        float _2829 = _2819 * _2819;
                        float _2833 = ((isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0))) * _2818) / ((_2829 * 0.699999988079071044921875) + 1.0);
                        float _2837 = (-0.0) - _2276;
                        float _2838 = (-0.0) - _2277;
                        float _2839 = (-0.0) - _2278;
                        float _2843 = inversesqrt(dot(vec3(_2837, _2838, _2839), vec3(_2837, _2838, _2839)));
                        float _2844 = _2843 * _2837;
                        float _2845 = _2843 * _2838;
                        float _2846 = _2843 * _2839;
                        float _2854 = exp2(log2(1.0 / ((_2829 * 3.5) + 5.0)) * 0.25);
                        float _2855 = 1.0 - _638;
                        float _2862 = sqrt(1.0 - ((1.0 - (_2855 * _2855)) * (1.0 - (_2854 * _2854))));
                        float _2863 = _2862 * _2862;
                        float _2864 = _2863 * _2863;
                        float _2865 = _2844 + _2809;
                        float _2866 = _2845 + _2810;
                        float _2867 = _2846 + _2811;
                        float _2871 = inversesqrt(dot(vec3(_2865, _2866, _2867), vec3(_2865, _2866, _2867)));
                        float _2875 = dot(vec3(_578, _581, _584), vec3(_2844, _2845, _2846));
                        float _4125 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
                        float _2878 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
                        float _2879 = dot(vec3(_578, _581, _584), vec3(_2871 * _2865, _2871 * _2866, _2871 * _2867));
                        float _4136 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
                        float _2882 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
                        float _2886 = ((_2882 * _2882) * (_2864 + (-1.0))) + 1.0;
                        float _2887 = _2822 * _2863;
                        float _2888 = _2887 * _2887;
                        float _2891 = ((1.0 - _2888) * _2812) + _2888;
                        float _4147 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
                        float _2892 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
                        float _2893 = 1.0 - _2863;
                        float _2903 = (0.5 / (((_2892 * ((_2878 * _2893) + _2863)) + 9.9999999392252902907785028219223e-09) + (((_2892 * _2893) + _2863) * _2878))) * _2892;
                        float _4158 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
                        float _2914 = (((_2864 * 3.1415927410125732421875) * (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0)))) / ((_2886 * _2886) * ((_2829 * 2.1991131305694580078125) + 3.141590118408203125))) * _2818;
                        _2671 = (_2833 * _2781.x) + _2739;
                        _2672 = (_2833 * _2781.y) + _2740;
                        _2673 = (_2833 * _2781.z) + _2741;
                        _2668 = (_2914 * _2798.x) + _2736;
                        _2669 = (_2914 * _2798.y) + _2737;
                        _2670 = (_2914 * _2798.z) + _2738;
                        if (_2743 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2736 = _2668;
                            _2737 = _2669;
                            _2738 = _2670;
                            _2739 = _2671;
                            _2740 = _2672;
                            _2741 = _2673;
                            _2742 = _2743;
                        }
                    }
                    frontier_phi_61_pred = _2668;
                    frontier_phi_61_pred_1 = _2673;
                    frontier_phi_61_pred_2 = _2672;
                    frontier_phi_61_pred_3 = _2671;
                    frontier_phi_61_pred_4 = _2670;
                    frontier_phi_61_pred_5 = _2669;
                }
                _2459 = frontier_phi_61_pred;
                _2469 = frontier_phi_61_pred_1;
                _2467 = frontier_phi_61_pred_2;
                _2465 = frontier_phi_61_pred_3;
                _2463 = frontier_phi_61_pred_4;
                _2461 = frontier_phi_61_pred_5;
                uint _2619 = _2618 + 1u;
                if (_2619 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2612 = _2459;
                    _2613 = _2461;
                    _2614 = _2463;
                    _2615 = _2465;
                    _2616 = _2467;
                    _2617 = _2469;
                    _2618 = _2619;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2458 = _2459;
            _2460 = _2461;
            _2462 = _2463;
            _2464 = _2465;
            _2466 = _2467;
            _2468 = _2469;
        }
        uvec4 _2472 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2473 = _2472.z;
        uint _2475 = (_2473 >> 8u) & 15u;
        float _2580;
        float _2582;
        float _2584;
        float _2586;
        float _2588;
        float _2590;
        if (((4294967295u << _2475) & _2322) == 0u)
        {
            _2580 = _2458;
            _2582 = _2460;
            _2584 = _2462;
            _2586 = _2464;
            _2588 = _2466;
            _2590 = _2468;
        }
        else
        {
            float _2605 = inversesqrt(dot(vec3(_2276, _2277, _2278), vec3(_2276, _2277, _2278)));
            float _2606 = _2605 * _2276;
            float _2607 = _2605 * _2277;
            float _2608 = _2605 * _2278;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2475 < ((_2473 >> 12u) & 15u))
            {
                float _2581;
                float _2583;
                float _2585;
                float _2587;
                float _2589;
                float _2591;
                float _2719 = _2458;
                float _2720 = _2460;
                float _2721 = _2462;
                float _2722 = _2464;
                float _2723 = _2466;
                float _2724 = _2468;
                uint _2725 = _2475;
                uint _2734;
                bool _2735;
                for (;;)
                {
                    _2734 = texelFetch(g_lightClassification, int((((_2316 << 5u) + (_2302 << 9u)) + (_2725 << 2u)) >> 2u)).x;
                    _2735 = _2734 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2735)
                    {
                        frontier_phi_67_pred = _2722;
                        frontier_phi_67_pred_1 = _2723;
                        frontier_phi_67_pred_2 = _2724;
                        frontier_phi_67_pred_3 = _2721;
                        frontier_phi_67_pred_4 = _2720;
                        frontier_phi_67_pred_5 = _2719;
                    }
                    else
                    {
                        float _2919;
                        float _2920;
                        float _2921;
                        float _2922;
                        float _2923;
                        float _2924;
                        float _3214;
                        float _3215;
                        float _3216;
                        float _3217;
                        float _3218;
                        float _3219;
                        float _2932 = _2719;
                        float _2933 = _2720;
                        float _2934 = _2721;
                        float _2935 = _2722;
                        float _2936 = _2723;
                        float _2937 = _2724;
                        uint _2938 = _2734;
                        uint _2939;
                        vec4 _2964;
                        float _2965;
                        vec4 _2980;
                        vec3 _2992;
                        vec4 _3007;
                        vec4 _3023;
                        float _3070;
                        bool _3071;
                        for (;;)
                        {
                            uint _2949 = ((_2725 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2938));
                            _2939 = (_2938 + 4294967295u) & _2938;
                            uint _2951 = _2949 * 40u;
                            _2964 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2951)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 3u)).x));
                            _2965 = _2964.w;
                            uint _2967 = (_2949 * 40u) + 4u;
                            _2980 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2967)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 3u)).x));
                            uint _2982 = (_2949 * 40u) + 8u;
                            _2992 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2982)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 2u)).x));
                            uint _2994 = (_2949 * 40u) + 16u;
                            _3007 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2994)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 3u)).x));
                            uint _3010 = (_2949 * 40u) + 20u;
                            _3023 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3010)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 3u)).x));
                            uint _3026 = (_2949 * 40u) + 24u;
                            vec4 _3039 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3026)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 3u)).x));
                            uint _3045 = (_2949 * 40u) + 28u;
                            vec4 _3058 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 3u)).x));
                            _3070 = fma(_2278, _3058.z, fma(_2277, _3058.y, _3058.x * _2276)) + _3058.w;
                            _3071 = !((fma(_2278, _3039.z, fma(_2277, _3039.y, _3039.x * _2276)) + _3039.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3071)
                            {
                                float _3098 = _2964.x - _2276;
                                float _3099 = _2964.y - _2277;
                                float _3100 = _2964.z - _2278;
                                float _3101 = dot(vec3(_3098, _3099, _3100), vec3(_3098, _3099, _3100));
                                float _3104 = inversesqrt(_3101);
                                float _3105 = _3104 * _3098;
                                float _3106 = _3104 * _3099;
                                float _3107 = _3104 * _3100;
                                float _3111 = 1.0 - (_3101 / (_2965 * _2965));
                                float _4169 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                                float _3112 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
                                float _3116 = sqrt(_3101) * _2980.w;
                                float _3118 = 1.39999997615814208984375 / (_3116 + 1.39999997615814208984375);
                                float _3119 = _3118 * _3118;
                                float _3122 = ((1.0 - _3119) * dot(vec3(_3105, _3106, _3107), vec3(_578, _581, _584))) + _3119;
                                float _3125 = _3116 * _3116;
                                float _3129 = (fma(_2278, _3007.z, fma(_2277, _3007.y, _3007.x * _2276)) + _3007.w) / _3070;
                                float _3130 = (fma(_2278, _3023.z, fma(_2277, _3023.y, _3023.x * _2276)) + _3023.w) / _3070;
                                float _3134 = 1.0 - dot(vec2(_3129, _3130), vec2(_3129, _3130));
                                float _4185 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                                float _3135 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
                                float _3136 = _3135 * (((isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0))) * _3112) / ((_3125 * 0.699999988079071044921875) + 1.0));
                                float _3148 = exp2(log2(1.0 / ((_3125 * 3.5) + 5.0)) * 0.25);
                                float _3149 = 1.0 - _638;
                                float _3156 = sqrt(1.0 - ((1.0 - (_3149 * _3149)) * (1.0 - (_3148 * _3148))));
                                float _3157 = _3156 * _3156;
                                float _3158 = _3157 * _3157;
                                float _3159 = _3105 - _2606;
                                float _3160 = _3106 - _2607;
                                float _3161 = _3107 - _2608;
                                float _3165 = inversesqrt(dot(vec3(_3159, _3160, _3161), vec3(_3159, _3160, _3161)));
                                float _3169 = dot(vec3(_578, _581, _584), vec3((-0.0) - _2606, (-0.0) - _2607, (-0.0) - _2608));
                                float _4196 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                                float _3172 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
                                float _3173 = dot(vec3(_578, _581, _584), vec3(_3165 * _3159, _3165 * _3160, _3165 * _3161));
                                float _4207 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                                float _3176 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
                                float _3180 = ((_3176 * _3176) * (_3158 + (-1.0))) + 1.0;
                                float _3181 = _3118 * _3157;
                                float _3182 = _3181 * _3181;
                                float _3188 = ((1.0 - _3182) * dot(vec3(_578, _581, _584), vec3(_3105, _3106, _3107))) + _3182;
                                float _4218 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                                float _3189 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
                                float _3190 = 1.0 - _3157;
                                float _3200 = (0.5 / (((_3189 * ((_3172 * _3190) + _3157)) + 9.9999999392252902907785028219223e-09) + (((_3189 * _3190) + _3157) * _3172))) * _3189;
                                float _4229 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                                float _3210 = (_3135 * _3112) * (((_3158 * 3.1415927410125732421875) * (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0)))) / ((_3180 * _3180) * ((_3125 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3210 * _2992.x;
                                frontier_phi_73_pred_1 = _3210 * _2992.y;
                                frontier_phi_73_pred_2 = _3136 * _2980.z;
                                frontier_phi_73_pred_3 = _3136 * _2980.y;
                                frontier_phi_73_pred_4 = _3136 * _2980.x;
                                frontier_phi_73_pred_5 = _3210 * _2992.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3214 = frontier_phi_73_pred;
                            _3215 = frontier_phi_73_pred_1;
                            _3219 = frontier_phi_73_pred_2;
                            _3218 = frontier_phi_73_pred_3;
                            _3217 = frontier_phi_73_pred_4;
                            _3216 = frontier_phi_73_pred_5;
                            _2922 = _3217 + _2935;
                            _2923 = _3218 + _2936;
                            _2924 = _3219 + _2937;
                            _2919 = _3214 + _2932;
                            _2920 = _3215 + _2933;
                            _2921 = _3216 + _2934;
                            if (_2939 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2932 = _2919;
                                _2933 = _2920;
                                _2934 = _2921;
                                _2935 = _2922;
                                _2936 = _2923;
                                _2937 = _2924;
                                _2938 = _2939;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2922;
                        frontier_phi_67_pred_1 = _2923;
                        frontier_phi_67_pred_2 = _2924;
                        frontier_phi_67_pred_3 = _2921;
                        frontier_phi_67_pred_4 = _2920;
                        frontier_phi_67_pred_5 = _2919;
                    }
                    _2587 = frontier_phi_67_pred;
                    _2589 = frontier_phi_67_pred_1;
                    _2591 = frontier_phi_67_pred_2;
                    _2585 = frontier_phi_67_pred_3;
                    _2583 = frontier_phi_67_pred_4;
                    _2581 = frontier_phi_67_pred_5;
                    uint _2726 = _2725 + 1u;
                    if (_2726 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2719 = _2581;
                        _2720 = _2583;
                        _2721 = _2585;
                        _2722 = _2587;
                        _2723 = _2589;
                        _2724 = _2591;
                        _2725 = _2726;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2589;
                frontier_phi_55_56_ladder_1 = _2591;
                frontier_phi_55_56_ladder_2 = _2587;
                frontier_phi_55_56_ladder_3 = _2585;
                frontier_phi_55_56_ladder_4 = _2583;
                frontier_phi_55_56_ladder_5 = _2581;
            }
            else
            {
                frontier_phi_55_56_ladder = _2466;
                frontier_phi_55_56_ladder_1 = _2468;
                frontier_phi_55_56_ladder_2 = _2464;
                frontier_phi_55_56_ladder_3 = _2462;
                frontier_phi_55_56_ladder_4 = _2460;
                frontier_phi_55_56_ladder_5 = _2458;
            }
            _2580 = frontier_phi_55_56_ladder_5;
            _2582 = frontier_phi_55_56_ladder_4;
            _2584 = frontier_phi_55_56_ladder_3;
            _2586 = frontier_phi_55_56_ladder_2;
            _2588 = frontier_phi_55_56_ladder;
            _2590 = frontier_phi_55_56_ladder_1;
        }
        float _2595 = isnan(1.0) ? _622 : (isnan(_622) ? 1.0 : min(_622, 1.0));
        _2335 = (_2595 * _2586) + _1790;
        _2337 = (_2595 * _2588) + _1792;
        _2339 = (_2595 * _2590) + _1794;
        _2341 = ((_2580 * 0.039999999105930328369140625) * _2595) + _2120;
        _2343 = ((_2582 * 0.039999999105930328369140625) * _2595) + _2122;
        _2345 = ((_2584 * 0.039999999105930328369140625) * _2595) + _2124;
    }
    else
    {
        _2335 = _1790;
        _2337 = _1792;
        _2339 = _1794;
        _2341 = _2120;
        _2343 = _2122;
        _2345 = _2124;
    }
    uint _2351 = _598 + uint(cbMatDynParam._m0[0u].w);
    float _2359 = ((_446 * cbMtdParam._m0[11u].x) * (_431.x + _416.x)) * cbInstanceData._m0[_2351].x;
    float _2362 = ((_446 * cbMtdParam._m0[11u].y) * (_431.y + _416.y)) * cbInstanceData._m0[_2351].y;
    float _2365 = ((_446 * cbMtdParam._m0[11u].z) * (_431.z + _416.z)) * cbInstanceData._m0[_2351].z;
    float _4245 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _4256 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _4267 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _2382 = (((isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (_2335 + ((isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0))) * _622))) + ((_2341 + ((isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))) * _1429)) * cbPerFrame._m0[3u].x)) + _2359;
    float _2384 = (_2362 + ((_2343 + ((isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))) * _1429)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_2337 + ((isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0))) * _622)));
    float _2386 = (_2365 + ((_2345 + ((isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))) * _1429)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_2339 + ((isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0))) * _622)));
    float _4293 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2399 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
    uint _2400 = _597 + 6u;
    float _2408 = _557 / cbSceneParam._m0[86u].x;
    float _2409 = _558 / cbSceneParam._m0[86u].y;
    vec4 _2423 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2408, _2409, (log2((isnan(cbSceneParam._m0[77u].w) ? _491 : (isnan(_491) ? cbSceneParam._m0[77u].w : min(_491, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2425 = _2423.x;
    float _2426 = _2423.y;
    float _2427 = _2423.z;
    float _2428 = _2423.w;
    float _2521;
    float _2523;
    float _2525;
    float _2527;
    if (_491 > cbSceneParam._m0[78u].w)
    {
        float _2483 = isnan(_491) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _491 : min(cbSceneParam._m0[80u].w, _491));
        float _2484 = _2483 / _491;
        float _2495 = _2484 * _542;
        float _2496 = _543 * _2484;
        float _2497 = (-0.0) - _2496;
        float _2499 = _2484 * _544;
        float _2501 = (cbSceneParam._m0[77u].w * _2497) / _2483;
        float _2502 = _2501 + cbSceneParam._m0[79u].w;
        float _2503 = cbSceneParam._m0[79u].w - _2496;
        float _2509 = sqrt(((_2495 * _2495) + (_2496 * _2496)) + (_2499 * _2499));
        float _2512 = (1.0 - (cbSceneParam._m0[77u].w / _2483)) * _2509;
        float _2517 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2519 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2681;
        if (abs((_2497 - _2501) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2681 = ((((_2502 > 0.0) ? exp2(_2517 * _2502) : (2.0 - exp2(_2519 * _2502))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2512;
        }
        else
        {
            float _2641 = 1.0 / cbSceneParam._m0[80u].x;
            float _2642 = isnan(_2503) ? _2502 : (isnan(_2502) ? _2503 : max(_2502, _2503));
            float _2643 = isnan(_2503) ? _2502 : (isnan(_2502) ? _2503 : min(_2502, _2503));
            float _2652 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : min(_2642, 0.0));
            float _2653 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : min(_2643, 0.0));
            _2681 = ((abs(_2509 / _2497) * cbSceneParam._m0[80u].y) * ((((_2652 - _2653) * 2.0) - ((exp2(_2517 * (isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0)))) - exp2(_2517 * (isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0))))) * _2641)) - ((exp2(_2519 * _2652) - exp2(_2519 * _2653)) * _2641))) + (_2512 * cbSceneParam._m0[80u].z);
        }
        vec4 _2683 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2408, _2409, 1.0), 0.0);
        float _2692 = exp2((_2681 * (-1.44269502162933349609375)) * (1.0 - _2683.w));
        float _2693 = log2(_2692);
        float _2709 = log2(_2428);
        _2521 = (exp2(_2709 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2693 * cbSceneParam._m0[78u].x)) * _2683.x) / cbSceneParam._m0[78u].x)) + _2425;
        _2523 = (exp2(_2709 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2693 * cbSceneParam._m0[78u].y)) * _2683.y) / cbSceneParam._m0[78u].y)) + _2426;
        _2525 = (exp2(_2709 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2693 * cbSceneParam._m0[78u].z)) * _2683.z) / cbSceneParam._m0[78u].z)) + _2427;
        _2527 = _2692 * _2428;
    }
    else
    {
        _2521 = _2425;
        _2523 = _2426;
        _2525 = _2427;
        _2527 = _2428;
    }
    float _2539 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2540 = _2539 == 3.0;
    float _2541 = log2(_2527);
    float _2545 = exp2(_2541 * cbSceneParam._m0[78u].x);
    float _2546 = exp2(_2541 * cbSceneParam._m0[78u].y);
    float _2547 = exp2(_2541 * cbSceneParam._m0[78u].z);
    float _2548 = _2545 * (isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0)));
    float _2549 = _2546 * (isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0)));
    float _2550 = _2547 * (isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0)));
    float _2559 = (_2539 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2559 * (_2540 ? _2548 : (_2548 + (cbSceneParam._m0[72u].w * _2521)));
    SV_Target.y = _2559 * (_2540 ? _2549 : (_2549 + (cbSceneParam._m0[72u].w * _2523)));
    SV_Target.z = _2559 * (_2540 ? _2550 : (_2550 + (cbSceneParam._m0[72u].w * _2525)));
    SV_Target.w = cbInstanceData._m0[_2400].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2359) * _2399) * _2545) * _2559;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2362) * _2399) * _2546) * _2559;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2365) * _2399) * _2547) * _2559;
    SV_Target_1.w = cbInstanceData._m0[_2400].w;
}


