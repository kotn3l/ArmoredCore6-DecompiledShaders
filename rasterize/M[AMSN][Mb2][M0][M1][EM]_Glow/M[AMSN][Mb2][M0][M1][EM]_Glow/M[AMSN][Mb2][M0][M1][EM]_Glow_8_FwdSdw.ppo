#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1009;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _241 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _247 = _241.x * cbMtdParam._m0[9u].x;
    float _248 = _241.y * cbMtdParam._m0[9u].y;
    float _249 = _241.z * cbMtdParam._m0[9u].z;
    vec4 _269 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _290 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_269.x + 0.00999999977648258209228515625));
    float _292 = _290 * (cbMtdParam._m0[15u].x + 1.0);
    float _3667 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _293 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
    float _301 = ((((cbMtdParam._m0[12u].x - _247) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _293) + _247;
    float _302 = ((((cbMtdParam._m0[12u].y - _248) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _293) + _248;
    float _303 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _249)) * _293) + _249;
    vec4 _316 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _318 = _316.x;
    vec4 _330 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _334 = _330.z;
    float _338 = (_330.x * 2.0) + (-1.0);
    float _340 = (_330.y * 2.0) + (-1.0);
    float _341 = dot(vec2(_338, _340), vec2(_338, _340));
    float _3678 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _346 = sqrt(1.0 - (isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0))));
    float _349 = _290 * (cbMtdParam._m0[14u].w + 1.0);
    float _3689 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _353 = ((cbMtdParam._m0[14u].y - _334) * (isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0)))) + _334;
    vec4 _381 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _396 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _425 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _431 = (_425.x * 2.0) + (-1.0);
    float _432 = (_425.y * 2.0) + (-1.0);
    float _433 = dot(vec2(_431, _432), vec2(_431, _432));
    float _3700 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _449 = (_293 * (((cbMtdParam._m0[13u].z * _338) - _338) + _431)) + _338;
    float _450 = (_293 * (((cbMtdParam._m0[13u].z * _340) - _340) + _432)) + _340;
    float _451 = (_293 * (sqrt(1.0 - (isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0)))) - _346)) + _346;
    float _454 = fma(_451, _212 * NORMAL.x, fma(_450, _219 * TANGENT.x, (_205 * _197) * _449));
    float _457 = fma(_451, _212 * NORMAL.y, fma(_450, _219 * TANGENT.y, (_205 * _198) * _449));
    float _460 = fma(_451, _212 * NORMAL.z, fma(_450, _219 * TANGENT.z, (_205 * _199) * _449));
    float _464 = inversesqrt(dot(vec3(_454, _457, _460), vec3(_454, _457, _460)));
    float _465 = _464 * _454;
    float _466 = _464 * _457;
    float _467 = _464 * _460;
    float _3711 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _468 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
    float _3722 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3733 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _3744 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3755 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _472 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
    float _488 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _529 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _539 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _529);
    float _540 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _529);
    float _541 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _529);
    float _545 = inversesqrt(dot(vec3(_539, _540, _541), vec3(_539, _540, _541)));
    float _546 = _539 * _545;
    float _547 = _540 * _545;
    float _548 = _541 * _545;
    float _554 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _555 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _575 = fma(_467, cbSceneParam._m0[5u].z, fma(_466, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _465));
    float _578 = fma(_467, cbSceneParam._m0[6u].z, fma(_466, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _465));
    float _581 = fma(_467, cbSceneParam._m0[7u].z, fma(_466, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _465));
    uint _594 = uint(roundEven(NORMAL.w)) * 13u;
    uint _595 = _594 + 9u;
    uint _596 = _595 + uint(cbMatDynParam._m0[0u].w);
    float _602 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0)))) * cbInstanceData._m0[_596].x;
    float _603 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0)))) * cbInstanceData._m0[_596].y;
    float _604 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0)))) * cbInstanceData._m0[_596].z;
    float _3766 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _605 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
    float _3777 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _606 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
    float _3788 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _607 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    float _608 = 1.0 - _472;
    float _609 = _605 * _608;
    float _610 = _606 * _608;
    float _611 = _607 * _608;
    float _616 = (_605 + (-0.039999999105930328369140625)) * _472;
    float _617 = (_606 + (-0.039999999105930328369140625)) * _472;
    float _618 = (_607 + (-0.039999999105930328369140625)) * _472;
    float _619 = _616 + 0.039999999105930328369140625;
    float _621 = _617 + 0.039999999105930328369140625;
    float _622 = _618 + 0.039999999105930328369140625;
    vec4 _631 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _554, cbSceneParam._m0[86u].y * _555));
    float _634 = _631.x * TEXCOORD_3.w;
    float _635 = dot(vec3(_465, _466, _467), vec3(_546, _547, _548));
    float _638 = _635 * 2.0;
    float _642 = (_638 * _465) - _546;
    float _643 = (_638 * _466) - _547;
    float _644 = (_638 * _467) - _548;
    float _648 = abs(dot(vec3(_546, _547, _548), vec3(_465, _466, _467)));
    float _3799 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _650 = sqrt(_468);
    float _663 = exp2((_650 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_650 * 3.0));
    float _669 = (1.0 - _663) * ((_650 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _670 = _663 * _650;
    float _698 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _702 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _706 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1008;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _733 = fma(_706, cbModelParam._m0[26u].z, fma(_702, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _698));
        float _737 = fma(_706, cbModelParam._m0[27u].z, fma(_702, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _698));
        float _741 = fma(_706, cbModelParam._m0[28u].z, fma(_702, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _698));
        float _766 = _698 + _465;
        float _767 = _702 + _466;
        float _768 = _706 + _467;
        float _778 = fma(_768, cbModelParam._m0[26u].z, fma(_767, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _766)) - _733;
        float _779 = fma(_768, cbModelParam._m0[27u].z, fma(_767, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _766)) - _737;
        float _780 = fma(_768, cbModelParam._m0[28u].z, fma(_767, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _766)) - _741;
        float _784 = inversesqrt(dot(vec3(_778, _779, _780), vec3(_778, _779, _780)));
        float _797 = ((_784 * _778) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_733 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _798 = ((_784 * _779) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_737 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _799 = ((_784 * _780) / cbModelParam._m0[34u].z) + ((((((_741 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _802 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_797, _798, _799), 0.0);
        vec4 _809 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_797, _798, _799), 0.0);
        vec4 _816 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_797, _798, _799), 0.0);
        vec4 _823 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_797, _798, _799), 0.0);
        float _836 = exp2((_802.w + (-0.5)) * 20.0) * 2.0;
        float _837 = _836 * (_802.x + (-0.5));
        float _838 = _836 * (_802.y + (-0.5));
        float _839 = _836 * (_802.z + (-0.5));
        float _846 = exp2((_809.w + (-0.5)) * 20.0) * 2.0;
        float _847 = _846 * (_809.x + (-0.5));
        float _848 = _846 * (_809.y + (-0.5));
        float _849 = _846 * (_809.z + (-0.5));
        float _856 = exp2((_816.w + (-0.5)) * 20.0) * 2.0;
        float _857 = _856 * (_816.x + (-0.5));
        float _858 = _856 * (_816.y + (-0.5));
        float _859 = _856 * (_816.z + (-0.5));
        float _866 = exp2((_823.w + (-0.5)) * 20.0) * 2.0;
        float _867 = _866 * (_823.x + (-0.5));
        float _868 = _866 * (_823.y + (-0.5));
        float _869 = _866 * (_823.z + (-0.5));
        float _870 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _871 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _872 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _873 = _837 * 0.5;
        float _874 = _847 * 0.5;
        float _875 = _857 * 0.5;
        float _876 = dot(vec3(_873, _874, _875), vec3(_873, _874, _875));
        float _881 = (_876 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_876);
        float _890 = (dot(vec3(_465, _466, _467), vec3(_881 * _873, _881 * _874, _881 * _875)) + 1.0) * 0.5;
        float _3825 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _900 = sqrt(((_874 * _874) + (_873 * _873)) + (_875 * _875)) / (_870 + 9.9999997473787516355514526367188e-06);
        float _3836 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _901 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _902 = _901 * 2.0;
        float _906 = (1.0 - _901) / (_901 + 1.0);
        float _3847 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _907 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _916 = ((((1.0 - _907) * (_902 + 2.0)) * exp2(log2(isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * (_902 + 1.0))) + _907) * _870;
        float _917 = _838 * 0.5;
        float _918 = _848 * 0.5;
        float _919 = _858 * 0.5;
        float _920 = dot(vec3(_917, _918, _919), vec3(_917, _918, _919));
        float _925 = (_920 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_920);
        float _933 = (dot(vec3(_465, _466, _467), vec3(_925 * _917, _925 * _918, _925 * _919)) + 1.0) * 0.5;
        float _3858 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _942 = sqrt(((_918 * _918) + (_917 * _917)) + (_919 * _919)) / (_871 + 9.9999997473787516355514526367188e-06);
        float _3869 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _944 = _943 * 2.0;
        float _948 = (1.0 - _943) / (_943 + 1.0);
        float _3880 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _958 = ((((1.0 - _949) * (_944 + 2.0)) * exp2(log2(isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * (_944 + 1.0))) + _949) * _871;
        float _959 = _839 * 0.5;
        float _960 = _849 * 0.5;
        float _961 = _859 * 0.5;
        float _962 = dot(vec3(_959, _960, _961), vec3(_959, _960, _961));
        float _967 = (_962 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_962);
        float _975 = (dot(vec3(_465, _466, _467), vec3(_967 * _959, _967 * _960, _967 * _961)) + 1.0) * 0.5;
        float _3891 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _984 = sqrt(((_960 * _960) + (_959 * _959)) + (_961 * _961)) / (_872 + 9.9999997473787516355514526367188e-06);
        float _3902 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _986 = _985 * 2.0;
        float _990 = (1.0 - _985) / (_985 + 1.0);
        float _3913 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _991 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1000 = ((((1.0 - _991) * (_986 + 2.0)) * exp2(log2(isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_986 + 1.0))) + _991) * _872;
        _1008 = _839;
        _1010 = _838;
        _1011 = _837;
        _1012 = _849;
        _1013 = _848;
        _1014 = _847;
        _1015 = _859;
        _1016 = _858;
        _1017 = _857;
        _1018 = _872;
        _1019 = _871;
        _1020 = _870;
        _1021 = cbModelParam._m0[36u].z * (isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0)));
        _1022 = cbModelParam._m0[36u].z * (isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0)));
        _1023 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0)));
    }
    else
    {
        _1008 = _1009;
        _1010 = _1009;
        _1011 = _1009;
        _1012 = _1009;
        _1013 = _1009;
        _1014 = _1009;
        _1015 = _1009;
        _1016 = _1009;
        _1017 = _1009;
        _1018 = _1009;
        _1019 = _1009;
        _1020 = _1009;
        _1021 = 0.0;
        _1022 = 0.0;
        _1023 = 0.0;
    }
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1049 = fma(_706, cbModelParam._m0[30u].z, fma(_702, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _698));
        float _1053 = fma(_706, cbModelParam._m0[31u].z, fma(_702, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _698));
        float _1057 = fma(_706, cbModelParam._m0[32u].z, fma(_702, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _698));
        float _1080 = _698 + _465;
        float _1081 = _702 + _466;
        float _1082 = _706 + _467;
        float _1092 = fma(_1082, cbModelParam._m0[30u].z, fma(_1081, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1080)) - _1049;
        float _1093 = fma(_1082, cbModelParam._m0[31u].z, fma(_1081, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1080)) - _1053;
        float _1094 = fma(_1082, cbModelParam._m0[32u].z, fma(_1081, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1080)) - _1057;
        float _1098 = inversesqrt(dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094)));
        float _1111 = ((_1098 * _1092) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1049 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1112 = ((_1098 * _1093) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1053 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1113 = ((_1098 * _1094) / cbModelParam._m0[35u].z) + ((((((_1057 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        float _1148 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1115.x + (-0.5));
        float _1150 = _1148 * (_1115.y + (-0.5));
        float _1151 = _1148 * (_1115.z + (-0.5));
        float _1158 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1122.x + (-0.5));
        float _1160 = _1158 * (_1122.y + (-0.5));
        float _1161 = _1158 * (_1122.z + (-0.5));
        float _1168 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1129.x + (-0.5));
        float _1170 = _1168 * (_1129.y + (-0.5));
        float _1171 = _1168 * (_1129.z + (-0.5));
        float _1178 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1136.x + (-0.5));
        float _1180 = _1178 * (_1136.y + (-0.5));
        float _1181 = _1178 * (_1136.z + (-0.5));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1184 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1185 = _1149 * 0.5;
        float _1186 = _1159 * 0.5;
        float _1187 = _1169 * 0.5;
        float _1188 = dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187));
        float _1193 = (_1188 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1188);
        float _1201 = (dot(vec3(_465, _466, _467), vec3(_1193 * _1185, _1193 * _1186, _1193 * _1187)) + 1.0) * 0.5;
        float _3954 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1210 = sqrt(((_1186 * _1186) + (_1185 * _1185)) + (_1187 * _1187)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _3965 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _3976 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * (_1212 + 1.0))) + _1217) * _1182;
        float _1227 = _1150 * 0.5;
        float _1228 = _1160 * 0.5;
        float _1229 = _1170 * 0.5;
        float _1230 = dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229));
        float _1235 = (_1230 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1230);
        float _1243 = (dot(vec3(_465, _466, _467), vec3(_1235 * _1227, _1235 * _1228, _1235 * _1229)) + 1.0) * 0.5;
        float _3987 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1252 = sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229)) / (_1183 + 9.9999997473787516355514526367188e-06);
        float _3998 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1254 = _1253 * 2.0;
        float _1258 = (1.0 - _1253) / (_1253 + 1.0);
        float _4009 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1268 = ((((1.0 - _1259) * (_1254 + 2.0)) * exp2(log2(isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_1254 + 1.0))) + _1259) * _1183;
        float _1269 = _1151 * 0.5;
        float _1270 = _1161 * 0.5;
        float _1271 = _1171 * 0.5;
        float _1272 = dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271));
        float _1277 = (_1272 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1272);
        float _1285 = (dot(vec3(_465, _466, _467), vec3(_1277 * _1269, _1277 * _1270, _1277 * _1271)) + 1.0) * 0.5;
        float _4020 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1294 = sqrt(((_1270 * _1270) + (_1269 * _1269)) + (_1271 * _1271)) / (_1184 + 9.9999997473787516355514526367188e-06);
        float _4031 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1296 = _1295 * 2.0;
        float _1300 = (1.0 - _1295) / (_1295 + 1.0);
        float _4042 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1310 = ((((1.0 - _1301) * (_1296 + 2.0)) * exp2(log2(isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_1296 + 1.0))) + _1301) * _1184;
        _1318 = _1151;
        _1319 = _1150;
        _1320 = _1149;
        _1321 = _1161;
        _1322 = _1160;
        _1323 = _1159;
        _1324 = _1171;
        _1325 = _1170;
        _1326 = _1169;
        _1327 = _1184;
        _1328 = _1183;
        _1329 = _1182;
        _1330 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
        _1331 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)));
        _1332 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)));
    }
    else
    {
        _1318 = _1009;
        _1319 = _1009;
        _1320 = _1009;
        _1321 = _1009;
        _1322 = _1009;
        _1323 = _1009;
        _1324 = _1009;
        _1325 = _1009;
        _1326 = _1009;
        _1327 = _1009;
        _1328 = _1009;
        _1329 = _1009;
        _1330 = 0.0;
        _1331 = 0.0;
        _1332 = 0.0;
    }
    float _1342 = (cbModelParam._m0[1u].x * (_1330 - _1021)) + _1021;
    float _1343 = (cbModelParam._m0[1u].x * (_1331 - _1022)) + _1022;
    float _1344 = (cbModelParam._m0[1u].x * (_1332 - _1023)) + _1023;
    float _1365 = fma(_1344, cbSceneParam._m0[89u].z, fma(_1343, cbSceneParam._m0[89u].y, _1342 * cbSceneParam._m0[89u].x));
    float _1368 = fma(_1344, cbSceneParam._m0[90u].z, fma(_1343, cbSceneParam._m0[90u].y, _1342 * cbSceneParam._m0[90u].x));
    float _1371 = fma(_1344, cbSceneParam._m0[91u].z, fma(_1343, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1342));
    float _1386 = _642 * 0.5;
    float _1387 = _643 * 0.5;
    float _1388 = _644 * 0.5;
    float _1389 = dot(vec4(_1386, _1387, _1388, 1.0), vec4(_1320, _1323, _1326, _1329));
    float _1392 = dot(vec4(_1386, _1387, _1388, 1.0), vec4(_1319, _1322, _1325, _1328));
    float _1395 = dot(vec4(_1386, _1387, _1388, 1.0), vec4(_1318, _1321, _1324, _1327));
    float _1429;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1402 = dot(vec4(_1386, _1387, _1388, 1.0), vec4(_1008, _1012, _1015, _1018));
        float _1406 = dot(vec4(_1386, _1387, _1388, 1.0), vec4(_1010, _1013, _1016, _1019));
        float _1410 = dot(vec4(_1386, _1387, _1388, 1.0), vec4(_1011, _1014, _1017, _1020));
        float _1417 = dot(vec4(cbModelParam._m0[39u]), vec4(_1386, _1387, _1388, 1.0));
        _1429 = dot(vec3(isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)), isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)), isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1417) ? 0.0 : (isnan(0.0) ? _1417 : max(0.0, _1417))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1429 = 1.0;
    }
    float _1440;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1431 = dot(vec4(cbModelParam._m0[40u]), vec4(_1386, _1387, _1388, 1.0));
        _1440 = dot(vec3(isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)), isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)), isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1431) ? 0.0 : (isnan(0.0) ? _1431 : max(0.0, _1431))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1440 = 1.0;
    }
    float _1444 = (_1440 * cbModelParam._m0[1u].x) + (_1429 * (1.0 - cbModelParam._m0[1u].x));
    float _1454 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _468);
    float _1455 = isnan(_1454) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1454 : min(cbModelParam._m0[25u].z, _1454));
    float _1535;
    float _1537;
    float _1539;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1502 = fma(_706, cbModelParam._m0[13u].z, fma(_702, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _698)) + cbModelParam._m0[13u].w;
        float _1506 = fma(_706, cbModelParam._m0[14u].z, fma(_702, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _698)) + cbModelParam._m0[14u].w;
        float _1510 = fma(_706, cbModelParam._m0[15u].z, fma(_702, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _698)) + cbModelParam._m0[15u].w;
        float _1513 = fma(_644, cbModelParam._m0[13u].z, fma(_643, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _642));
        float _1516 = fma(_644, cbModelParam._m0[14u].z, fma(_643, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _642));
        float _1519 = fma(_644, cbModelParam._m0[15u].z, fma(_643, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _642));
        float _1547;
        if (_1513 > 0.0)
        {
            _1547 = abs((1.0 - _1502) / _1513);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1513 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1502 + 1.0) / _1513);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1547 = frontier_phi_14_12_ladder;
        }
        float _1720;
        if (_1516 > 0.0)
        {
            _1720 = abs((1.0 - _1506) / _1516);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1516 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1506 + 1.0) / _1516);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1720 = frontier_phi_23_19_ladder;
        }
        float _2016;
        if (_1519 > 0.0)
        {
            _2016 = abs((1.0 - _1510) / _1519);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1519 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1510 + 1.0) / _1519);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2016 = frontier_phi_35_30_ladder;
        }
        float _2018 = isnan(_1720) ? _1547 : (isnan(_1547) ? _1720 : min(_1547, _1720));
        float _2019 = isnan(_2016) ? _2018 : (isnan(_2018) ? _2016 : min(_2018, _2016));
        float _2023 = (_2019 * _1513) + _1502;
        float _2024 = (_2019 * _1516) + _1506;
        float _2025 = (_2019 * _1519) + _1510;
        float _2026 = _2019 * 9.9999997473787516355514526367188e-05;
        float _2028 = (-1.0) - _2026;
        float _2030 = _2026 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2025 > _2030) || ((_2025 < _2028) || ((_2024 > _2030) || ((_2024 < _2028) || ((_2023 < _2028) || (_2023 > _2030))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2170 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2025, cbModelParam._m0[9u].z, fma(_2024, cbModelParam._m0[9u].y, _2023 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2025, cbModelParam._m0[10u].z, fma(_2024, cbModelParam._m0[10u].y, _2023 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2025, cbModelParam._m0[11u].z, fma(_2024, cbModelParam._m0[11u].y, _2023 * cbModelParam._m0[11u].x))), _1455);
            frontier_phi_13_35_ladder = _2170.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2170.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2170.x * cbModelParam._m0[1u].y;
        }
        _1535 = frontier_phi_13_35_ladder_2;
        _1537 = frontier_phi_13_35_ladder_1;
        _1539 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1523 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_642, _643, _644), _1455);
        _1535 = _1523.x * cbModelParam._m0[1u].y;
        _1537 = _1523.y * cbModelParam._m0[1u].y;
        _1539 = _1523.z * cbModelParam._m0[1u].y;
    }
    float _1543 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _468);
    float _1544 = isnan(_1543) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1543 : min(cbModelParam._m0[25u].w, _1543));
    float _1635;
    float _1637;
    float _1639;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1599 = fma(_706, cbModelParam._m0[21u].z, fma(_702, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _698)) + cbModelParam._m0[21u].w;
        float _1603 = fma(_706, cbModelParam._m0[22u].z, fma(_702, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _698)) + cbModelParam._m0[22u].w;
        float _1607 = fma(_706, cbModelParam._m0[23u].z, fma(_702, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _698)) + cbModelParam._m0[23u].w;
        float _1610 = fma(_644, cbModelParam._m0[21u].z, fma(_643, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _642));
        float _1613 = fma(_644, cbModelParam._m0[22u].z, fma(_643, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _642));
        float _1616 = fma(_644, cbModelParam._m0[23u].z, fma(_643, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _642));
        float _1725;
        if (_1610 > 0.0)
        {
            _1725 = abs((1.0 - _1599) / _1610);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1610 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1599 + 1.0) / _1610);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1725 = frontier_phi_25_21_ladder;
        }
        float _2043;
        if (_1613 > 0.0)
        {
            _2043 = abs((1.0 - _1603) / _1613);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1613 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1603 + 1.0) / _1613);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2043 = frontier_phi_37_32_ladder;
        }
        float _2381;
        if (_1616 > 0.0)
        {
            _2381 = abs((1.0 - _1607) / _1616);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1616 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1607 + 1.0) / _1616);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2381 = frontier_phi_47_44_ladder;
        }
        float _2383 = isnan(_2043) ? _1725 : (isnan(_1725) ? _2043 : min(_1725, _2043));
        float _2384 = isnan(_2381) ? _2383 : (isnan(_2383) ? _2381 : min(_2383, _2381));
        float _2388 = (_2384 * _1610) + _1599;
        float _2389 = (_2384 * _1613) + _1603;
        float _2390 = (_2384 * _1616) + _1607;
        float _2391 = _2384 * 9.9999997473787516355514526367188e-05;
        float _2392 = (-1.0) - _2391;
        float _2394 = _2391 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2390 > _2394) || ((_2390 < _2392) || ((_2389 > _2394) || ((_2389 < _2392) || ((_2388 < _2392) || (_2388 > _2394))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2512 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2390, cbModelParam._m0[17u].z, fma(_2389, cbModelParam._m0[17u].y, _2388 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2390, cbModelParam._m0[18u].z, fma(_2389, cbModelParam._m0[18u].y, _2388 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2390, cbModelParam._m0[19u].z, fma(_2389, cbModelParam._m0[19u].y, _2388 * cbModelParam._m0[19u].x))), _1544);
            frontier_phi_22_47_ladder = _2512.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2512.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2512.x * cbModelParam._m0[1u].z;
        }
        _1635 = frontier_phi_22_47_ladder_2;
        _1637 = frontier_phi_22_47_ladder_1;
        _1639 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1619 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_642, _643, _644), _1544);
        _1635 = _1619.x * cbModelParam._m0[1u].z;
        _1637 = _1619.y * cbModelParam._m0[1u].z;
        _1639 = _1619.z * cbModelParam._m0[1u].z;
    }
    float _1652 = (((_669 * _619) + _670) * _634) * ((cbModelParam._m0[1u].w * (_1635 - _1535)) + _1535);
    float _1654 = (((_669 * _621) + _670) * _634) * ((cbModelParam._m0[1u].w * (_1637 - _1537)) + _1537);
    float _1656 = (((_669 * _622) + _670) * _634) * ((cbModelParam._m0[1u].w * (_1639 - _1539)) + _1539);
    float _1659 = fma(_1656, cbSceneParam._m0[89u].z, fma(_1654, cbSceneParam._m0[89u].y, _1652 * cbSceneParam._m0[89u].x));
    float _1662 = fma(_1656, cbSceneParam._m0[90u].z, fma(_1654, cbSceneParam._m0[90u].y, _1652 * cbSceneParam._m0[90u].x));
    float _1665 = fma(_1656, cbSceneParam._m0[91u].z, fma(_1654, cbSceneParam._m0[91u].y, _1652 * cbSceneParam._m0[91u].x));
    float _1699 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1703 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1707 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1711 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1712 = _1699 / _1711;
    float _1713 = _1703 / _1711;
    float _1714 = _1707 / _1711;
    float _1861;
    float _1862;
    float _1863;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1741 = ((uint(_1714 > cbSceneParam._m0[59u].y) + uint(_1714 > cbSceneParam._m0[59u].x)) + uint(_1714 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1742 = _1741 + 43u;
        uint _1750 = _1741 + 44u;
        uint _1758 = _1741 + 45u;
        uint _1766 = _1741 + 46u;
        float _1777 = fma(_1711, cbSceneParam._m0[_1742].w, fma(_1707, cbSceneParam._m0[_1742].z, fma(_1703, cbSceneParam._m0[_1742].y, _1699 * cbSceneParam._m0[_1742].x)));
        float _1781 = fma(_1711, cbSceneParam._m0[_1750].w, fma(_1707, cbSceneParam._m0[_1750].z, fma(_1703, cbSceneParam._m0[_1750].y, _1699 * cbSceneParam._m0[_1750].x)));
        float _1789 = fma(_1711, cbSceneParam._m0[_1766].w, fma(_1707, cbSceneParam._m0[_1766].z, fma(_1703, cbSceneParam._m0[_1766].y, _1699 * cbSceneParam._m0[_1766].x)));
        float _1794 = cbSceneParam._m0[33u].z * _1789;
        float _1796 = cbSceneParam._m0[33u].w * _1789;
        float _1799 = fma(_1711, cbSceneParam._m0[_1758].w, fma(_1707, cbSceneParam._m0[_1758].z, fma(_1703, cbSceneParam._m0[_1758].y, _1699 * cbSceneParam._m0[_1758].x))) / _1789;
        float _1847 = (cbSceneParam._m0[33u].x - sqrt(((_1713 * _1713) + (_1712 * _1712)) + (_1714 * _1714))) * cbSceneParam._m0[33u].y;
        float _4168 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
        float _1854 = (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1794 + _1777) / _1789, (_1796 + _1781) / _1789), _1799), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1796 + _1777) / _1789, (_1781 - _1794) / _1789), _1799), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1777 - _1794) / _1789, (_1781 - _1796) / _1789), _1799), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1777 - _1796) / _1789, (_1794 + _1781) / _1789), _1799), 0.0)).x), vec4(0.25)));
        _1861 = 1.0 - (_1854 * cbSceneParam._m0[34u].x);
        _1862 = 1.0 - (_1854 * cbSceneParam._m0[34u].y);
        _1863 = 1.0 - (_1854 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1861 = 1.0;
        _1862 = 1.0;
        _1863 = 1.0;
    }
    float _1927;
    float _1929;
    float _1931;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1915 = fma(_1711, cbSceneParam._m0[63u].w, fma(_1707, cbSceneParam._m0[63u].z, fma(_1703, cbSceneParam._m0[63u].y, _1699 * cbSceneParam._m0[63u].x)));
        float _1916 = fma(_1711, cbSceneParam._m0[60u].w, fma(_1707, cbSceneParam._m0[60u].z, fma(_1703, cbSceneParam._m0[60u].y, _1699 * cbSceneParam._m0[60u].x))) / _1915;
        float _1917 = fma(_1711, cbSceneParam._m0[61u].w, fma(_1707, cbSceneParam._m0[61u].z, fma(_1703, cbSceneParam._m0[61u].y, _1699 * cbSceneParam._m0[61u].x))) / _1915;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1916 >= cbSceneParam._m0[64u].x) && (_1917 >= cbSceneParam._m0[64u].y)) && (_1916 <= cbSceneParam._m0[64u].z)) && (_1917 <= cbSceneParam._m0[64u].w))
        {
            float _2056 = fma(_1711, cbSceneParam._m0[62u].w, fma(_1707, cbSceneParam._m0[62u].z, fma(_1703, cbSceneParam._m0[62u].y, _1699 * cbSceneParam._m0[62u].x))) / _1915;
            float _2060 = isnan(cbSceneParam._m0[41u].w) ? _2056 : (isnan(_2056) ? cbSceneParam._m0[41u].w : max(_2056, cbSceneParam._m0[41u].w));
            float _2103 = (cbSceneParam._m0[33u].x - sqrt(((_1713 * _1713) + (_1712 * _1712)) + (_1714 * _1714))) * cbSceneParam._m0[33u].y;
            float _4184 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
            float _2110 = (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1916, cbSceneParam._m0[33u].w + _1917), _2060), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1916, _1917 - cbSceneParam._m0[33u].z), _2060), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1916 - cbSceneParam._m0[33u].z, _1917 - cbSceneParam._m0[33u].w), _2060), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1916 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1917), _2060), 0.0)).x), vec4(0.25)));
            float _2114 = 1.0 - (_2110 * cbSceneParam._m0[34u].x);
            float _2115 = 1.0 - (_2110 * cbSceneParam._m0[34u].y);
            float _2116 = 1.0 - (_2110 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2116) ? _1863 : (isnan(_1863) ? _2116 : min(_1863, _2116));
            frontier_phi_34_33_ladder_1 = isnan(_2115) ? _1862 : (isnan(_1862) ? _2115 : min(_1862, _2115));
            frontier_phi_34_33_ladder_2 = isnan(_2114) ? _1861 : (isnan(_1861) ? _2114 : min(_1861, _2114));
        }
        else
        {
            frontier_phi_34_33_ladder = _1863;
            frontier_phi_34_33_ladder_1 = _1862;
            frontier_phi_34_33_ladder_2 = _1861;
        }
        _1927 = frontier_phi_34_33_ladder_2;
        _1929 = frontier_phi_34_33_ladder_1;
        _1931 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1927 = _1861;
        _1929 = _1862;
        _1931 = _1863;
    }
    uvec4 _1936 = floatBitsToUint(cbInstanceData._m0[_594 + 5u]);
    uint _1938 = _1936.x * 14u;
    uint _1939 = _1938 + 13u;
    float _1946 = _634 + (-1.0);
    float _1951 = (cbLight._m0[_1939].x * _1946) + 1.0;
    float _1952 = (cbLight._m0[_1939].y * _1946) + 1.0;
    float _1953 = (cbLight._m0[_1939].z * _1946) + 1.0;
    float _1954 = (cbLight._m0[_1939].w * _1946) + 1.0;
    uint _1955 = _1938 + 5u;
    float _1961 = isnan(1.0) ? _1952 : (isnan(_1952) ? 1.0 : min(_1952, 1.0));
    uint _1965 = _1938 + 4u;
    float _1975 = isnan(1.0) ? _1951 : (isnan(_1951) ? 1.0 : min(_1951, 1.0));
    uint _1979 = _1938 | 1u;
    float _1990 = dot(vec3(cbLight._m0[_1938].xyz), vec3(_465, _466, _467));
    float _1993 = dot(vec3(cbLight._m0[_1979].xyz), vec3(_465, _466, _467));
    float _4220 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _4231 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1998 = (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * 0.3183098733425140380859375;
    float _2000 = (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * 0.3183098733425140380859375;
    float _2007 = ((cbLight._m0[_1955].x * _1961) * _2000) + (((cbLight._m0[_1965].x * _1927) * _1975) * _1998);
    float _2008 = ((_1961 * cbLight._m0[_1955].y) * _2000) + (((cbLight._m0[_1965].y * _1929) * _1975) * _1998);
    float _2009 = ((_1961 * cbLight._m0[_1955].z) * _2000) + (((cbLight._m0[_1965].z * _1931) * _1975) * _1998);
    uvec4 _2013 = floatBitsToUint(cbLight._m0[_1938 + 12u]);
    bool _2015 = _2013.x == 0u;
    float _2117;
    float _2119;
    float _2121;
    if (_2015)
    {
        _2117 = _2007;
        _2119 = _2008;
        _2121 = _2009;
    }
    else
    {
        uint _2125 = _1938 + 6u;
        float _2141 = (dot(vec3(cbLight._m0[_1938 + 2u].xyz), vec3(_465, _466, _467)) * 0.5) + 0.5;
        float _2142 = _2141 * _2141;
        float _4242 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2143 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _2144 = isnan(1.0) ? _1953 : (isnan(_1953) ? 1.0 : min(_1953, 1.0));
        _2117 = (((cbLight._m0[_2125].x * 0.3183098733425140380859375) * _2143) * _2144) + _2007;
        _2119 = (((cbLight._m0[_2125].y * 0.3183098733425140380859375) * _2143) * _2144) + _2008;
        _2121 = (((cbLight._m0[_2125].z * 0.3183098733425140380859375) * _2143) * _2144) + _2009;
    }
    bool _2124 = _2013.y == 0u;
    float _2179;
    float _2181;
    float _2183;
    if (_2124)
    {
        _2179 = _2117;
        _2181 = _2119;
        _2183 = _2121;
    }
    else
    {
        uint _2352 = _1938 + 7u;
        float _2368 = (dot(vec3(cbLight._m0[_1938 + 3u].xyz), vec3(_465, _466, _467)) * 0.5) + 0.5;
        float _2369 = _2368 * _2368;
        float _4258 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2370 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _2371 = isnan(1.0) ? _1954 : (isnan(_1954) ? 1.0 : min(_1954, 1.0));
        _2179 = (((cbLight._m0[_2352].x * 0.3183098733425140380859375) * _2370) * _2371) + _2117;
        _2181 = (((cbLight._m0[_2352].y * 0.3183098733425140380859375) * _2370) * _2371) + _2119;
        _2183 = (((cbLight._m0[_2352].z * 0.3183098733425140380859375) * _2370) * _2371) + _2121;
    }
    uint _2186 = _1938 + 8u;
    float _2199 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1938].w)) * _468) * 0.949999988079071044921875);
    float _2200 = _2199 * _2199;
    float _2201 = cbLight._m0[_1938].x + _546;
    float _2202 = cbLight._m0[_1938].y + _547;
    float _2203 = cbLight._m0[_1938].z + _548;
    float _2207 = inversesqrt(dot(vec3(_2201, _2202, _2203), vec3(_2201, _2202, _2203)));
    float _2208 = _2207 * _2201;
    float _2209 = _2207 * _2202;
    float _2210 = _2207 * _2203;
    float _2211 = dot(vec3(_465, _466, _467), vec3(cbLight._m0[_1938].xyz));
    float _4274 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2214 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
    float _4285 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _2215 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
    float _2216 = dot(vec3(_465, _466, _467), vec3(_2208, _2209, _2210));
    float _4296 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _2219 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
    float _2220 = dot(vec3(cbLight._m0[_1938].xyz), vec3(_2208, _2209, _2210));
    float _4307 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2224 = _2200 * _2200;
    float _2228 = ((_2219 * _2219) * (_2224 + (-1.0))) + 1.0;
    float _2236 = exp2(log2(1.0 - (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0)))) * 5.0);
    float _2237 = 0.959999978542327880859375 - _616;
    float _2239 = 0.959999978542327880859375 - _617;
    float _2240 = 0.959999978542327880859375 - _618;
    float _2247 = 1.0 - _2200;
    float _2258 = (0.5 / (((_2215 * ((_2214 * _2247) + _2200)) + 9.9999999392252902907785028219223e-09) + (((_2215 * _2247) + _2200) * _2214))) * _2214;
    float _4318 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2260 = (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_2224 / ((_2228 * _2228) * 3.141590118408203125));
    uint _2274 = _1938 + 9u;
    float _2285 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1979].w)) * _468) * 0.949999988079071044921875);
    float _2286 = _2285 * _2285;
    float _2287 = cbLight._m0[_1979].x + _546;
    float _2288 = cbLight._m0[_1979].y + _547;
    float _2289 = cbLight._m0[_1979].z + _548;
    float _2293 = inversesqrt(dot(vec3(_2287, _2288, _2289), vec3(_2287, _2288, _2289)));
    float _2294 = _2293 * _2287;
    float _2295 = _2293 * _2288;
    float _2296 = _2293 * _2289;
    float _2297 = dot(vec3(_465, _466, _467), vec3(cbLight._m0[_1979].xyz));
    float _4329 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _2300 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
    float _2301 = dot(vec3(_465, _466, _467), vec3(_2294, _2295, _2296));
    float _4340 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2304 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
    float _2305 = dot(vec3(cbLight._m0[_1979].xyz), vec3(_2294, _2295, _2296));
    float _4351 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2309 = _2286 * _2286;
    float _2313 = ((_2304 * _2304) * (_2309 + (-1.0))) + 1.0;
    float _2320 = exp2(log2(1.0 - (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0)))) * 5.0);
    float _2327 = 1.0 - _2286;
    float _2337 = (0.5 / (((_2215 * ((_2300 * _2327) + _2286)) + 9.9999999392252902907785028219223e-09) + (((_2215 * _2327) + _2286) * _2300))) * _2300;
    float _4362 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2339 = (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_2309 / ((_2313 * _2313) * 3.141590118408203125));
    float _2349 = (((((_2320 * _2237) + _619) * cbLight._m0[_2274].x) * _2339) * _1961) + ((((cbLight._m0[_2186].x * _1927) * ((_2236 * _2237) + _619)) * _2260) * _1975);
    float _2350 = (((((_2320 * _2239) + _621) * cbLight._m0[_2274].y) * _2339) * _1961) + ((((cbLight._m0[_2186].y * _1929) * ((_2236 * _2239) + _621)) * _2260) * _1975);
    float _2351 = (((((_2320 * _2240) + _622) * cbLight._m0[_2274].z) * _2339) * _1961) + ((((cbLight._m0[_2186].z * _1931) * ((_2236 * _2240) + _622)) * _2260) * _1975);
    float _2407;
    float _2409;
    float _2411;
    if (_2015)
    {
        _2407 = _2349;
        _2409 = _2350;
        _2411 = _2351;
    }
    else
    {
        uint _2413 = _1938 + 2u;
        uint _2417 = _1938 + 10u;
        float _2431 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2413].w)) * _468) * 0.949999988079071044921875);
        float _2432 = _2431 * _2431;
        float _2433 = cbLight._m0[_2413].x + _546;
        float _2434 = cbLight._m0[_2413].y + _547;
        float _2435 = cbLight._m0[_2413].z + _548;
        float _2439 = inversesqrt(dot(vec3(_2433, _2434, _2435), vec3(_2433, _2434, _2435)));
        float _2440 = _2439 * _2433;
        float _2441 = _2439 * _2434;
        float _2442 = _2439 * _2435;
        float _2443 = dot(vec3(_465, _466, _467), vec3(cbLight._m0[_2413].xyz));
        float _4373 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2446 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _2447 = dot(vec3(_465, _466, _467), vec3(_2440, _2441, _2442));
        float _4384 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2450 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _2451 = dot(vec3(cbLight._m0[_2413].xyz), vec3(_2440, _2441, _2442));
        float _4395 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2455 = _2432 * _2432;
        float _2459 = ((_2450 * _2450) * (_2455 + (-1.0))) + 1.0;
        float _2466 = exp2(log2(1.0 - (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0)))) * 5.0);
        float _2473 = 1.0 - _2432;
        float _2483 = (0.5 / (((_2215 * ((_2446 * _2473) + _2432)) + 9.9999999392252902907785028219223e-09) + (((_2215 * _2473) + _2432) * _2446))) * _2446;
        float _4406 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2485 = (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_2455 / ((_2459 * _2459) * 3.141590118408203125));
        float _2486 = isnan(1.0) ? _1953 : (isnan(_1953) ? 1.0 : min(_1953, 1.0));
        _2407 = (((((_2466 * _2237) + _619) * cbLight._m0[_2417].x) * _2485) * _2486) + _2349;
        _2409 = (((((_2466 * _2239) + _621) * cbLight._m0[_2417].y) * _2485) * _2486) + _2350;
        _2411 = (((((_2466 * _2240) + _622) * cbLight._m0[_2417].z) * _2485) * _2486) + _2351;
    }
    float _2517;
    float _2519;
    float _2521;
    if (_2124)
    {
        _2517 = _2407;
        _2519 = _2409;
        _2521 = _2411;
    }
    else
    {
        uint _2528 = _1938 + 3u;
        uint _2532 = _1938 + 11u;
        float _2546 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2528].w)) * _468) * 0.949999988079071044921875);
        float _2547 = _2546 * _2546;
        float _2548 = cbLight._m0[_2528].x + _546;
        float _2549 = cbLight._m0[_2528].y + _547;
        float _2550 = cbLight._m0[_2528].z + _548;
        float _2554 = inversesqrt(dot(vec3(_2548, _2549, _2550), vec3(_2548, _2549, _2550)));
        float _2555 = _2554 * _2548;
        float _2556 = _2554 * _2549;
        float _2557 = _2554 * _2550;
        float _2558 = dot(vec3(_465, _466, _467), vec3(cbLight._m0[_2528].xyz));
        float _4422 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2561 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _2562 = dot(vec3(_465, _466, _467), vec3(_2555, _2556, _2557));
        float _4433 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        float _2565 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _2566 = dot(vec3(cbLight._m0[_2528].xyz), vec3(_2555, _2556, _2557));
        float _4444 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2570 = _2547 * _2547;
        float _2574 = ((_2565 * _2565) * (_2570 + (-1.0))) + 1.0;
        float _2581 = exp2(log2(1.0 - (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0)))) * 5.0);
        float _2588 = 1.0 - _2547;
        float _2598 = (0.5 / (((_2215 * ((_2561 * _2588) + _2547)) + 9.9999999392252902907785028219223e-09) + (((_2215 * _2588) + _2547) * _2561))) * _2561;
        float _4455 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
        float _2600 = (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_2570 / ((_2574 * _2574) * 3.141590118408203125));
        float _2601 = isnan(1.0) ? _1954 : (isnan(_1954) ? 1.0 : min(_1954, 1.0));
        _2517 = (((((_2581 * _2237) + _619) * cbLight._m0[_2532].x) * _2600) * _2601) + _2407;
        _2519 = (((((_2581 * _2239) + _621) * cbLight._m0[_2532].y) * _2600) * _2601) + _2409;
        _2521 = (((((_2581 * _2240) + _622) * cbLight._m0[_2532].z) * _2600) * _2601) + _2411;
    }
    float _2667;
    float _2669;
    float _2671;
    float _2673;
    float _2675;
    float _2677;
    if (_1936.y == 0u)
    {
        uvec4 _2622 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2623 = _2622.x;
        uint _2634 = uint((float(_2622.y) * floor(float(uint(cbSceneParam._m0[85u].y * _555) / _2623))) + floor(float(uint(cbSceneParam._m0[85u].x * _554) / _2623)));
        float _2644 = (log2(_1714 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2645 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        uint _2648 = uint(isnan(14.0) ? _2645 : (isnan(_2645) ? 14.0 : min(_2645, 14.0)));
        uvec4 _2653 = texelFetch(g_lightClusterGridBuffer, int(((_2648 << 2u) + (_2634 << 6u)) >> 2u));
        uint _2654 = _2653.x;
        uint _2655 = _2622.z;
        float _2769;
        float _2771;
        float _2773;
        float _2775;
        float _2777;
        float _2779;
        if (((((1u << ((_2655 >> 4u) & 15u)) + 4294967295u) & _2654) == 0u) || ((_2655 & 240u) == 0u))
        {
            _2769 = 0.0;
            _2771 = 0.0;
            _2773 = 0.0;
            _2775 = 0.0;
            _2777 = 0.0;
            _2779 = 0.0;
        }
        else
        {
            float _2770;
            float _2772;
            float _2774;
            float _2776;
            float _2778;
            float _2780;
            float _2923 = 0.0;
            float _2924 = 0.0;
            float _2925 = 0.0;
            float _2926 = 0.0;
            float _2927 = 0.0;
            float _2928 = 0.0;
            uint _2929 = 0u;
            uint _2938;
            bool _2939;
            for (;;)
            {
                _2938 = texelFetch(g_lightClassification, int((((_2648 << 5u) + (_2634 << 9u)) + (_2929 << 2u)) >> 2u)).x;
                _2939 = _2938 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2939)
                {
                    frontier_phi_66_pred = _2928;
                    frontier_phi_66_pred_1 = _2927;
                    frontier_phi_66_pred_2 = _2926;
                    frontier_phi_66_pred_3 = _2925;
                    frontier_phi_66_pred_4 = _2924;
                    frontier_phi_66_pred_5 = _2923;
                }
                else
                {
                    float _3047;
                    float _3048;
                    float _3049;
                    float _3050;
                    float _3051;
                    float _3052;
                    uint _3053;
                    _3047 = _2923;
                    _3048 = _2924;
                    _3049 = _2925;
                    _3050 = _2926;
                    _3051 = _2927;
                    _3052 = _2928;
                    _3053 = _2938;
                    float _2979;
                    float _2980;
                    float _2981;
                    float _2982;
                    float _2983;
                    float _2984;
                    for (;;)
                    {
                        uint _3057 = uint(findLSB(_3053)) + (_2929 << 5u);
                        uint _3054 = (_3053 + 4294967295u) & _3053;
                        uint _3059 = _3057 * 48u;
                        vec4 _3073 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3059)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 3u)).x));
                        uint _3079 = (_3057 * 48u) + 4u;
                        vec4 _3092 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3079)).x, texelFetch(g_PointLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3079 + 3u)).x));
                        uint _3098 = (_3057 * 48u) + 8u;
                        vec3 _3109 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3098)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 2u)).x));
                        float _3113 = _3073.x - _1712;
                        float _3114 = _3073.y - _1713;
                        float _3115 = _3073.z - _1714;
                        float _3116 = dot(vec3(_3113, _3114, _3115), vec3(_3113, _3114, _3115));
                        float _3119 = inversesqrt(_3116);
                        float _3120 = _3119 * _3113;
                        float _3121 = _3119 * _3114;
                        float _3122 = _3119 * _3115;
                        float _3123 = dot(vec3(_575, _578, _581), vec3(_3120, _3121, _3122));
                        float _3128 = 1.0 - (_3116 * _3073.w);
                        float _4481 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                        float _3129 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
                        float _3130 = sqrt(_3116) * _3092.w;
                        float _3133 = 1.39999997615814208984375 / (_3130 + 1.39999997615814208984375);
                        float _3134 = _3133 * _3133;
                        float _3137 = ((1.0 - _3134) * _3123) + _3134;
                        float _3140 = _3130 * _3130;
                        float _3144 = ((isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0))) * _3129) / ((_3140 * 0.699999988079071044921875) + 1.0);
                        float _3148 = (-0.0) - _1712;
                        float _3149 = (-0.0) - _1713;
                        float _3150 = (-0.0) - _1714;
                        float _3154 = inversesqrt(dot(vec3(_3148, _3149, _3150), vec3(_3148, _3149, _3150)));
                        float _3155 = _3154 * _3148;
                        float _3156 = _3154 * _3149;
                        float _3157 = _3154 * _3150;
                        float _3164 = exp2(log2(1.0 / ((_3140 * 3.5) + 5.0)) * 0.25);
                        float _3165 = 1.0 - _650;
                        float _3172 = sqrt(1.0 - ((1.0 - (_3165 * _3165)) * (1.0 - (_3164 * _3164))));
                        float _3173 = _3172 * _3172;
                        float _3174 = _3173 * _3173;
                        float _3175 = _3155 + _3120;
                        float _3176 = _3156 + _3121;
                        float _3177 = _3157 + _3122;
                        float _3181 = inversesqrt(dot(vec3(_3175, _3176, _3177), vec3(_3175, _3176, _3177)));
                        float _3185 = dot(vec3(_575, _578, _581), vec3(_3155, _3156, _3157));
                        float _4497 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0));
                        float _3188 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                        float _3189 = dot(vec3(_575, _578, _581), vec3(_3181 * _3175, _3181 * _3176, _3181 * _3177));
                        float _4508 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                        float _3192 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
                        float _3196 = ((_3192 * _3192) * (_3174 + (-1.0))) + 1.0;
                        float _3197 = _3133 * _3173;
                        float _3198 = _3197 * _3197;
                        float _3201 = ((1.0 - _3198) * _3123) + _3198;
                        float _4519 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                        float _3202 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                        float _3203 = 1.0 - _3173;
                        float _3213 = (0.5 / (((_3202 * ((_3188 * _3203) + _3173)) + 9.9999999392252902907785028219223e-09) + (((_3202 * _3203) + _3173) * _3188))) * _3202;
                        float _4530 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                        float _3224 = (((_3174 * 3.1415927410125732421875) * (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0)))) / ((_3196 * _3196) * ((_3140 * 2.1991131305694580078125) + 3.141590118408203125))) * _3129;
                        _2982 = (_3144 * _3092.x) + _3050;
                        _2983 = (_3144 * _3092.y) + _3051;
                        _2984 = (_3144 * _3092.z) + _3052;
                        _2979 = (_3224 * _3109.x) + _3047;
                        _2980 = (_3224 * _3109.y) + _3048;
                        _2981 = (_3224 * _3109.z) + _3049;
                        if (_3054 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3047 = _2979;
                            _3048 = _2980;
                            _3049 = _2981;
                            _3050 = _2982;
                            _3051 = _2983;
                            _3052 = _2984;
                            _3053 = _3054;
                        }
                    }
                    frontier_phi_66_pred = _2984;
                    frontier_phi_66_pred_1 = _2983;
                    frontier_phi_66_pred_2 = _2982;
                    frontier_phi_66_pred_3 = _2981;
                    frontier_phi_66_pred_4 = _2980;
                    frontier_phi_66_pred_5 = _2979;
                }
                _2780 = frontier_phi_66_pred;
                _2778 = frontier_phi_66_pred_1;
                _2776 = frontier_phi_66_pred_2;
                _2774 = frontier_phi_66_pred_3;
                _2772 = frontier_phi_66_pred_4;
                _2770 = frontier_phi_66_pred_5;
                uint _2930 = _2929 + 1u;
                if (_2930 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2923 = _2770;
                    _2924 = _2772;
                    _2925 = _2774;
                    _2926 = _2776;
                    _2927 = _2778;
                    _2928 = _2780;
                    _2929 = _2930;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2769 = _2770;
            _2771 = _2772;
            _2773 = _2774;
            _2775 = _2776;
            _2777 = _2778;
            _2779 = _2780;
        }
        uvec4 _2783 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2784 = _2783.z;
        uint _2786 = (_2784 >> 8u) & 15u;
        float _2891;
        float _2893;
        float _2895;
        float _2897;
        float _2899;
        float _2901;
        if (((4294967295u << _2786) & _2654) == 0u)
        {
            _2891 = _2769;
            _2893 = _2771;
            _2895 = _2773;
            _2897 = _2775;
            _2899 = _2777;
            _2901 = _2779;
        }
        else
        {
            float _2916 = inversesqrt(dot(vec3(_1712, _1713, _1714), vec3(_1712, _1713, _1714)));
            float _2917 = _2916 * _1712;
            float _2918 = _2916 * _1713;
            float _2919 = _2916 * _1714;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2786 < ((_2784 >> 12u) & 15u))
            {
                float _2892;
                float _2894;
                float _2896;
                float _2898;
                float _2900;
                float _2902;
                float _3030 = _2769;
                float _3031 = _2771;
                float _3032 = _2773;
                float _3033 = _2775;
                float _3034 = _2777;
                float _3035 = _2779;
                uint _3036 = _2786;
                uint _3045;
                bool _3046;
                for (;;)
                {
                    _3045 = texelFetch(g_lightClassification, int((((_2648 << 5u) + (_2634 << 9u)) + (_3036 << 2u)) >> 2u)).x;
                    _3046 = _3045 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3046)
                    {
                        frontier_phi_72_pred = _3035;
                        frontier_phi_72_pred_1 = _3034;
                        frontier_phi_72_pred_2 = _3033;
                        frontier_phi_72_pred_3 = _3032;
                        frontier_phi_72_pred_4 = _3031;
                        frontier_phi_72_pred_5 = _3030;
                    }
                    else
                    {
                        float _3229;
                        float _3230;
                        float _3231;
                        float _3232;
                        float _3233;
                        float _3234;
                        float _3524;
                        float _3525;
                        float _3526;
                        float _3527;
                        float _3528;
                        float _3529;
                        float _3242 = _3030;
                        float _3243 = _3031;
                        float _3244 = _3032;
                        float _3245 = _3033;
                        float _3246 = _3034;
                        float _3247 = _3035;
                        uint _3248 = _3045;
                        uint _3249;
                        vec4 _3274;
                        float _3275;
                        vec4 _3290;
                        vec3 _3302;
                        vec4 _3317;
                        vec4 _3333;
                        float _3380;
                        bool _3381;
                        for (;;)
                        {
                            uint _3259 = ((_3036 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3248));
                            _3249 = (_3248 + 4294967295u) & _3248;
                            uint _3261 = _3259 * 40u;
                            _3274 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3261)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 3u)).x));
                            _3275 = _3274.w;
                            uint _3277 = (_3259 * 40u) + 4u;
                            _3290 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3277)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 3u)).x));
                            uint _3292 = (_3259 * 40u) + 8u;
                            _3302 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3292)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 2u)).x));
                            uint _3304 = (_3259 * 40u) + 16u;
                            _3317 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3304)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 3u)).x));
                            uint _3320 = (_3259 * 40u) + 20u;
                            _3333 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3320)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 3u)).x));
                            uint _3336 = (_3259 * 40u) + 24u;
                            vec4 _3349 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3336)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 3u)).x));
                            uint _3355 = (_3259 * 40u) + 28u;
                            vec4 _3368 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3355)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 3u)).x));
                            _3380 = fma(_1714, _3368.z, fma(_1713, _3368.y, _3368.x * _1712)) + _3368.w;
                            _3381 = !((fma(_1714, _3349.z, fma(_1713, _3349.y, _3349.x * _1712)) + _3349.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3381)
                            {
                                float _3408 = _3274.x - _1712;
                                float _3409 = _3274.y - _1713;
                                float _3410 = _3274.z - _1714;
                                float _3411 = dot(vec3(_3408, _3409, _3410), vec3(_3408, _3409, _3410));
                                float _3414 = inversesqrt(_3411);
                                float _3415 = _3414 * _3408;
                                float _3416 = _3414 * _3409;
                                float _3417 = _3414 * _3410;
                                float _3421 = 1.0 - (_3411 / (_3275 * _3275));
                                float _4541 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                                float _3422 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
                                float _3426 = sqrt(_3411) * _3290.w;
                                float _3428 = 1.39999997615814208984375 / (_3426 + 1.39999997615814208984375);
                                float _3429 = _3428 * _3428;
                                float _3432 = ((1.0 - _3429) * dot(vec3(_3415, _3416, _3417), vec3(_575, _578, _581))) + _3429;
                                float _3435 = _3426 * _3426;
                                float _3439 = (fma(_1714, _3317.z, fma(_1713, _3317.y, _3317.x * _1712)) + _3317.w) / _3380;
                                float _3440 = (fma(_1714, _3333.z, fma(_1713, _3333.y, _3333.x * _1712)) + _3333.w) / _3380;
                                float _3444 = 1.0 - dot(vec2(_3439, _3440), vec2(_3439, _3440));
                                float _4557 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                                float _3445 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                                float _3446 = _3445 * (((isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0))) * _3422) / ((_3435 * 0.699999988079071044921875) + 1.0));
                                float _3458 = exp2(log2(1.0 / ((_3435 * 3.5) + 5.0)) * 0.25);
                                float _3459 = 1.0 - _650;
                                float _3466 = sqrt(1.0 - ((1.0 - (_3459 * _3459)) * (1.0 - (_3458 * _3458))));
                                float _3467 = _3466 * _3466;
                                float _3468 = _3467 * _3467;
                                float _3469 = _3415 - _2917;
                                float _3470 = _3416 - _2918;
                                float _3471 = _3417 - _2919;
                                float _3475 = inversesqrt(dot(vec3(_3469, _3470, _3471), vec3(_3469, _3470, _3471)));
                                float _3479 = dot(vec3(_575, _578, _581), vec3((-0.0) - _2917, (-0.0) - _2918, (-0.0) - _2919));
                                float _4568 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                                float _3482 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
                                float _3483 = dot(vec3(_575, _578, _581), vec3(_3475 * _3469, _3475 * _3470, _3475 * _3471));
                                float _4579 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                                float _3486 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
                                float _3490 = ((_3486 * _3486) * (_3468 + (-1.0))) + 1.0;
                                float _3491 = _3428 * _3467;
                                float _3492 = _3491 * _3491;
                                float _3498 = ((1.0 - _3492) * dot(vec3(_575, _578, _581), vec3(_3415, _3416, _3417))) + _3492;
                                float _4590 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                                float _3499 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
                                float _3500 = 1.0 - _3467;
                                float _3510 = (0.5 / (((_3499 * ((_3482 * _3500) + _3467)) + 9.9999999392252902907785028219223e-09) + (((_3499 * _3500) + _3467) * _3482))) * _3499;
                                float _4601 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                                float _3520 = (_3445 * _3422) * (((_3468 * 3.1415927410125732421875) * (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0)))) / ((_3490 * _3490) * ((_3435 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3446 * _3290.y;
                                frontier_phi_78_pred_1 = _3446 * _3290.x;
                                frontier_phi_78_pred_2 = _3520 * _3302.z;
                                frontier_phi_78_pred_3 = _3520 * _3302.y;
                                frontier_phi_78_pred_4 = _3520 * _3302.x;
                                frontier_phi_78_pred_5 = _3446 * _3290.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3528 = frontier_phi_78_pred;
                            _3527 = frontier_phi_78_pred_1;
                            _3526 = frontier_phi_78_pred_2;
                            _3525 = frontier_phi_78_pred_3;
                            _3524 = frontier_phi_78_pred_4;
                            _3529 = frontier_phi_78_pred_5;
                            _3232 = _3527 + _3245;
                            _3233 = _3528 + _3246;
                            _3234 = _3529 + _3247;
                            _3229 = _3524 + _3242;
                            _3230 = _3525 + _3243;
                            _3231 = _3526 + _3244;
                            if (_3249 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3242 = _3229;
                                _3243 = _3230;
                                _3244 = _3231;
                                _3245 = _3232;
                                _3246 = _3233;
                                _3247 = _3234;
                                _3248 = _3249;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3234;
                        frontier_phi_72_pred_1 = _3233;
                        frontier_phi_72_pred_2 = _3232;
                        frontier_phi_72_pred_3 = _3231;
                        frontier_phi_72_pred_4 = _3230;
                        frontier_phi_72_pred_5 = _3229;
                    }
                    _2902 = frontier_phi_72_pred;
                    _2900 = frontier_phi_72_pred_1;
                    _2898 = frontier_phi_72_pred_2;
                    _2896 = frontier_phi_72_pred_3;
                    _2894 = frontier_phi_72_pred_4;
                    _2892 = frontier_phi_72_pred_5;
                    uint _3037 = _3036 + 1u;
                    if (_3037 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3030 = _2892;
                        _3031 = _2894;
                        _3032 = _2896;
                        _3033 = _2898;
                        _3034 = _2900;
                        _3035 = _2902;
                        _3036 = _3037;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2902;
                frontier_phi_60_61_ladder_1 = _2900;
                frontier_phi_60_61_ladder_2 = _2896;
                frontier_phi_60_61_ladder_3 = _2894;
                frontier_phi_60_61_ladder_4 = _2892;
                frontier_phi_60_61_ladder_5 = _2898;
            }
            else
            {
                frontier_phi_60_61_ladder = _2779;
                frontier_phi_60_61_ladder_1 = _2777;
                frontier_phi_60_61_ladder_2 = _2773;
                frontier_phi_60_61_ladder_3 = _2771;
                frontier_phi_60_61_ladder_4 = _2769;
                frontier_phi_60_61_ladder_5 = _2775;
            }
            _2891 = frontier_phi_60_61_ladder_4;
            _2893 = frontier_phi_60_61_ladder_3;
            _2895 = frontier_phi_60_61_ladder_2;
            _2897 = frontier_phi_60_61_ladder_5;
            _2899 = frontier_phi_60_61_ladder_1;
            _2901 = frontier_phi_60_61_ladder;
        }
        float _2906 = isnan(1.0) ? _634 : (isnan(_634) ? 1.0 : min(_634, 1.0));
        _2667 = (_2906 * _2897) + _2179;
        _2669 = (_2906 * _2899) + _2181;
        _2671 = (_2906 * _2901) + _2183;
        _2673 = ((_2891 * _619) * _2906) + _2517;
        _2675 = ((_2893 * _621) * _2906) + _2519;
        _2677 = ((_2895 * _622) * _2906) + _2521;
    }
    else
    {
        _2667 = _2179;
        _2669 = _2181;
        _2671 = _2183;
        _2673 = _2517;
        _2675 = _2519;
        _2677 = _2521;
    }
    uint _2683 = _595 + uint(cbMatDynParam._m0[0u].w);
    float _2691 = ((_293 * cbMtdParam._m0[11u].x) * (_396.x + _381.x)) * cbInstanceData._m0[_2683].x;
    float _2694 = ((_293 * cbMtdParam._m0[11u].y) * (_396.y + _381.y)) * cbInstanceData._m0[_2683].y;
    float _2697 = ((_293 * cbMtdParam._m0[11u].z) * (_396.z + _381.z)) * cbInstanceData._m0[_2683].z;
    float _4617 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _4628 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _4639 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _2714 = (((isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (_2667 + ((isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0))) * _634))) + ((_2673 + ((isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))) * _1444)) * cbPerFrame._m0[3u].x)) + _2691;
    float _2716 = (_2694 + ((_2675 + ((isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))) * _1444)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * (_2669 + ((isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0))) * _634)));
    float _2718 = (_2697 + ((_2677 + ((isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))) * _1444)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * (_2671 + ((isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0))) * _634)));
    float _4665 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2731 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
    uint _2732 = _594 + 6u;
    float _2740 = _554 / cbSceneParam._m0[86u].x;
    float _2741 = _555 / cbSceneParam._m0[86u].y;
    vec4 _2755 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2740, _2741, (log2((isnan(cbSceneParam._m0[77u].w) ? _488 : (isnan(_488) ? cbSceneParam._m0[77u].w : min(_488, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2757 = _2755.x;
    float _2758 = _2755.y;
    float _2759 = _2755.z;
    float _2760 = _2755.w;
    float _2832;
    float _2834;
    float _2836;
    float _2838;
    if (_488 > cbSceneParam._m0[78u].w)
    {
        float _2794 = isnan(_488) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _488 : min(cbSceneParam._m0[80u].w, _488));
        float _2795 = _2794 / _488;
        float _2806 = _2795 * _539;
        float _2807 = _540 * _2795;
        float _2808 = (-0.0) - _2807;
        float _2810 = _2795 * _541;
        float _2812 = (cbSceneParam._m0[77u].w * _2808) / _2794;
        float _2813 = _2812 + cbSceneParam._m0[79u].w;
        float _2814 = cbSceneParam._m0[79u].w - _2807;
        float _2820 = sqrt(((_2806 * _2806) + (_2807 * _2807)) + (_2810 * _2810));
        float _2823 = (1.0 - (cbSceneParam._m0[77u].w / _2794)) * _2820;
        float _2828 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2830 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2992;
        if (abs((_2808 - _2812) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2992 = ((((_2813 > 0.0) ? exp2(_2828 * _2813) : (2.0 - exp2(_2830 * _2813))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2823;
        }
        else
        {
            float _2952 = 1.0 / cbSceneParam._m0[80u].x;
            float _2953 = isnan(_2814) ? _2813 : (isnan(_2813) ? _2814 : max(_2813, _2814));
            float _2954 = isnan(_2814) ? _2813 : (isnan(_2813) ? _2814 : min(_2813, _2814));
            float _2963 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : min(_2953, 0.0));
            float _2964 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : min(_2954, 0.0));
            _2992 = ((abs(_2820 / _2808) * cbSceneParam._m0[80u].y) * ((((_2963 - _2964) * 2.0) - ((exp2(_2828 * (isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0)))) - exp2(_2828 * (isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0))))) * _2952)) - ((exp2(_2830 * _2963) - exp2(_2830 * _2964)) * _2952))) + (_2823 * cbSceneParam._m0[80u].z);
        }
        vec4 _2994 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2740, _2741, 1.0), 0.0);
        float _3003 = exp2((_2992 * (-1.44269502162933349609375)) * (1.0 - _2994.w));
        float _3004 = log2(_3003);
        float _3020 = log2(_2760);
        _2832 = (exp2(_3020 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3004 * cbSceneParam._m0[78u].x)) * _2994.x) / cbSceneParam._m0[78u].x)) + _2757;
        _2834 = (exp2(_3020 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3004 * cbSceneParam._m0[78u].y)) * _2994.y) / cbSceneParam._m0[78u].y)) + _2758;
        _2836 = (exp2(_3020 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3004 * cbSceneParam._m0[78u].z)) * _2994.z) / cbSceneParam._m0[78u].z)) + _2759;
        _2838 = _3003 * _2760;
    }
    else
    {
        _2832 = _2757;
        _2834 = _2758;
        _2836 = _2759;
        _2838 = _2760;
    }
    float _2850 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2851 = _2850 == 3.0;
    float _2852 = log2(_2838);
    float _2856 = exp2(_2852 * cbSceneParam._m0[78u].x);
    float _2857 = exp2(_2852 * cbSceneParam._m0[78u].y);
    float _2858 = exp2(_2852 * cbSceneParam._m0[78u].z);
    float _2859 = _2856 * (isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0)));
    float _2860 = _2857 * (isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0)));
    float _2861 = _2858 * (isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0)));
    float _2870 = (_2850 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2870 * (_2851 ? _2859 : (_2859 + (cbSceneParam._m0[72u].w * _2832)));
    SV_Target.y = _2870 * (_2851 ? _2860 : (_2860 + (cbSceneParam._m0[72u].w * _2834)));
    SV_Target.z = _2870 * (_2851 ? _2861 : (_2861 + (cbSceneParam._m0[72u].w * _2836)));
    SV_Target.w = cbInstanceData._m0[_2732].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2691) * _2731) * _2856) * _2870;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2694) * _2731) * _2857) * _2870;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2697) * _2731) * _2858) * _2870;
    SV_Target_1.w = cbInstanceData._m0[_2732].w;
}


