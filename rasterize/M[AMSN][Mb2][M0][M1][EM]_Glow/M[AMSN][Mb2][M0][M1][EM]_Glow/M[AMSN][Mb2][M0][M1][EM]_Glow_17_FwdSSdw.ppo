#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1071;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _245 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _251 = _245.x * cbMtdParam._m0[9u].x;
    float _252 = _245.y * cbMtdParam._m0[9u].y;
    float _253 = _245.z * cbMtdParam._m0[9u].z;
    vec4 _273 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _294 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_273.x + 0.00999999977648258209228515625));
    float _296 = _294 * (cbMtdParam._m0[15u].x + 1.0);
    float _3464 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _297 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
    float _305 = ((((cbMtdParam._m0[12u].x - _251) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _297) + _251;
    float _306 = ((((cbMtdParam._m0[12u].y - _252) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _297) + _252;
    float _307 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _253)) * _297) + _253;
    vec4 _320 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _322 = _320.x;
    vec4 _334 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _338 = _334.z;
    float _342 = (_334.x * 2.0) + (-1.0);
    float _344 = (_334.y * 2.0) + (-1.0);
    float _345 = dot(vec2(_342, _344), vec2(_342, _344));
    float _3475 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _350 = sqrt(1.0 - (isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0))));
    float _353 = _294 * (cbMtdParam._m0[14u].w + 1.0);
    float _3486 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _357 = ((cbMtdParam._m0[14u].y - _338) * (isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0)))) + _338;
    vec4 _385 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _400 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _445 = (TEXCOORD_6.x - ((cbMtdParam._m0[13u].w * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_5, SS_WrapLinear), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].x + 1.0);
    float _3497 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _446 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
    float _447 = ((_400.x + _385.x) * cbMtdParam._m0[11u].x) * _446;
    float _448 = ((_400.y + _385.y) * cbMtdParam._m0[11u].y) * _446;
    float _449 = ((_400.z + _385.z) * cbMtdParam._m0[11u].z) * _446;
    vec4 _461 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[9u].w));
    float _463 = _461.x;
    vec4 _488 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _494 = (_488.x * 2.0) + (-1.0);
    float _495 = (_488.y * 2.0) + (-1.0);
    float _496 = dot(vec2(_494, _495), vec2(_494, _495));
    float _3508 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _512 = (_297 * (((cbMtdParam._m0[13u].z * _342) - _342) + _494)) + _342;
    float _513 = (_297 * (((cbMtdParam._m0[13u].z * _344) - _344) + _495)) + _344;
    float _514 = (_297 * (sqrt(1.0 - (isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0)))) - _350)) + _350;
    float _517 = fma(_514, _216 * NORMAL.x, fma(_513, _223 * TANGENT.x, (_209 * _201) * _512));
    float _520 = fma(_514, _216 * NORMAL.y, fma(_513, _223 * TANGENT.y, (_209 * _202) * _512));
    float _523 = fma(_514, _216 * NORMAL.z, fma(_513, _223 * TANGENT.z, (_209 * _203) * _512));
    float _527 = inversesqrt(dot(vec3(_517, _520, _523), vec3(_517, _520, _523)));
    float _528 = _527 * _517;
    float _529 = _527 * _520;
    float _530 = _527 * _523;
    float _3519 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _531 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
    float _3530 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3541 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _3552 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _3563 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _535 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
    float _551 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _591 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _601 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _591);
    float _602 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _591);
    float _603 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _591);
    float _607 = inversesqrt(dot(vec3(_601, _602, _603), vec3(_601, _602, _603)));
    float _608 = _601 * _607;
    float _609 = _602 * _607;
    float _610 = _603 * _607;
    float _616 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _617 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _637 = fma(_530, cbSceneParam._m0[5u].z, fma(_529, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _528));
    float _640 = fma(_530, cbSceneParam._m0[6u].z, fma(_529, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _528));
    float _643 = fma(_530, cbSceneParam._m0[7u].z, fma(_529, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _528));
    uint _656 = uint(roundEven(NORMAL.w)) * 13u;
    uint _657 = _656 + 9u;
    uint _658 = _657 + uint(cbMatDynParam._m0[0u].w);
    float _664 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0)))) * cbInstanceData._m0[_658].x;
    float _665 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0)))) * cbInstanceData._m0[_658].y;
    float _666 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0)))) * cbInstanceData._m0[_658].z;
    float _3574 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _667 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
    float _3585 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _668 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
    float _3596 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _669 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
    float _670 = 1.0 - _535;
    float _671 = _667 * _670;
    float _672 = _668 * _670;
    float _673 = _669 * _670;
    float _678 = (_667 + (-0.039999999105930328369140625)) * _535;
    float _679 = (_668 + (-0.039999999105930328369140625)) * _535;
    float _680 = (_669 + (-0.039999999105930328369140625)) * _535;
    float _681 = _678 + 0.039999999105930328369140625;
    float _683 = _679 + 0.039999999105930328369140625;
    float _684 = _680 + 0.039999999105930328369140625;
    vec4 _693 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _616, cbSceneParam._m0[86u].y * _617));
    float _696 = _693.x * TEXCOORD_3.w;
    float _697 = dot(vec3(_528, _529, _530), vec3(_608, _609, _610));
    float _700 = _697 * 2.0;
    float _704 = (_700 * _528) - _608;
    float _705 = (_700 * _529) - _609;
    float _706 = (_700 * _530) - _610;
    float _710 = abs(dot(vec3(_608, _609, _610), vec3(_528, _529, _530)));
    float _3607 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _712 = sqrt(_531);
    float _725 = exp2((_712 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_712 * 3.0));
    float _731 = (1.0 - _725) * ((_712 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _732 = _725 * _712;
    float _760 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _764 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _768 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1070;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _795 = fma(_768, cbModelParam._m0[26u].z, fma(_764, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _760));
        float _799 = fma(_768, cbModelParam._m0[27u].z, fma(_764, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _760));
        float _803 = fma(_768, cbModelParam._m0[28u].z, fma(_764, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _760));
        float _828 = _760 + _528;
        float _829 = _764 + _529;
        float _830 = _768 + _530;
        float _840 = fma(_830, cbModelParam._m0[26u].z, fma(_829, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _828)) - _795;
        float _841 = fma(_830, cbModelParam._m0[27u].z, fma(_829, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _828)) - _799;
        float _842 = fma(_830, cbModelParam._m0[28u].z, fma(_829, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _828)) - _803;
        float _846 = inversesqrt(dot(vec3(_840, _841, _842), vec3(_840, _841, _842)));
        float _859 = ((_846 * _840) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_795 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _860 = ((_846 * _841) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_799 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _861 = ((_846 * _842) / cbModelParam._m0[34u].z) + ((((((_803 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _864 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_859, _860, _861), 0.0);
        vec4 _871 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_859, _860, _861), 0.0);
        vec4 _878 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_859, _860, _861), 0.0);
        vec4 _885 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_859, _860, _861), 0.0);
        float _898 = exp2((_864.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_864.x + (-0.5));
        float _900 = _898 * (_864.y + (-0.5));
        float _901 = _898 * (_864.z + (-0.5));
        float _908 = exp2((_871.w + (-0.5)) * 20.0) * 2.0;
        float _909 = _908 * (_871.x + (-0.5));
        float _910 = _908 * (_871.y + (-0.5));
        float _911 = _908 * (_871.z + (-0.5));
        float _918 = exp2((_878.w + (-0.5)) * 20.0) * 2.0;
        float _919 = _918 * (_878.x + (-0.5));
        float _920 = _918 * (_878.y + (-0.5));
        float _921 = _918 * (_878.z + (-0.5));
        float _928 = exp2((_885.w + (-0.5)) * 20.0) * 2.0;
        float _929 = _928 * (_885.x + (-0.5));
        float _930 = _928 * (_885.y + (-0.5));
        float _931 = _928 * (_885.z + (-0.5));
        float _932 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _933 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _934 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _935 = _899 * 0.5;
        float _936 = _909 * 0.5;
        float _937 = _919 * 0.5;
        float _938 = dot(vec3(_935, _936, _937), vec3(_935, _936, _937));
        float _943 = (_938 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_938);
        float _952 = (dot(vec3(_528, _529, _530), vec3(_943 * _935, _943 * _936, _943 * _937)) + 1.0) * 0.5;
        float _3633 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _962 = sqrt(((_936 * _936) + (_935 * _935)) + (_937 * _937)) / (_932 + 9.9999997473787516355514526367188e-06);
        float _3644 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _964 = _963 * 2.0;
        float _968 = (1.0 - _963) / (_963 + 1.0);
        float _3655 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _978 = ((((1.0 - _969) * (_964 + 2.0)) * exp2(log2(isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * (_964 + 1.0))) + _969) * _932;
        float _979 = _900 * 0.5;
        float _980 = _910 * 0.5;
        float _981 = _920 * 0.5;
        float _982 = dot(vec3(_979, _980, _981), vec3(_979, _980, _981));
        float _987 = (_982 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_982);
        float _995 = (dot(vec3(_528, _529, _530), vec3(_987 * _979, _987 * _980, _987 * _981)) + 1.0) * 0.5;
        float _3666 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _1004 = sqrt(((_980 * _980) + (_979 * _979)) + (_981 * _981)) / (_933 + 9.9999997473787516355514526367188e-06);
        float _3677 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1006 = _1005 * 2.0;
        float _1010 = (1.0 - _1005) / (_1005 + 1.0);
        float _3688 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1020 = ((((1.0 - _1011) * (_1006 + 2.0)) * exp2(log2(isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * (_1006 + 1.0))) + _1011) * _933;
        float _1021 = _901 * 0.5;
        float _1022 = _911 * 0.5;
        float _1023 = _921 * 0.5;
        float _1024 = dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023));
        float _1029 = (_1024 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1024);
        float _1037 = (dot(vec3(_528, _529, _530), vec3(_1029 * _1021, _1029 * _1022, _1029 * _1023)) + 1.0) * 0.5;
        float _3699 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1046 = sqrt(((_1022 * _1022) + (_1021 * _1021)) + (_1023 * _1023)) / (_934 + 9.9999997473787516355514526367188e-06);
        float _3710 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1048 = _1047 * 2.0;
        float _1052 = (1.0 - _1047) / (_1047 + 1.0);
        float _3721 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1062 = ((((1.0 - _1053) * (_1048 + 2.0)) * exp2(log2(isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * (_1048 + 1.0))) + _1053) * _934;
        _1070 = _901;
        _1072 = _900;
        _1073 = _899;
        _1074 = _911;
        _1075 = _910;
        _1076 = _909;
        _1077 = _921;
        _1078 = _920;
        _1079 = _919;
        _1080 = _934;
        _1081 = _933;
        _1082 = _932;
        _1083 = cbModelParam._m0[36u].z * (isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0)));
        _1084 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0)));
        _1085 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0)));
    }
    else
    {
        _1070 = _1071;
        _1072 = _1071;
        _1073 = _1071;
        _1074 = _1071;
        _1075 = _1071;
        _1076 = _1071;
        _1077 = _1071;
        _1078 = _1071;
        _1079 = _1071;
        _1080 = _1071;
        _1081 = _1071;
        _1082 = _1071;
        _1083 = 0.0;
        _1084 = 0.0;
        _1085 = 0.0;
    }
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1111 = fma(_768, cbModelParam._m0[30u].z, fma(_764, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _760));
        float _1115 = fma(_768, cbModelParam._m0[31u].z, fma(_764, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _760));
        float _1119 = fma(_768, cbModelParam._m0[32u].z, fma(_764, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _760));
        float _1142 = _760 + _528;
        float _1143 = _764 + _529;
        float _1144 = _768 + _530;
        float _1154 = fma(_1144, cbModelParam._m0[30u].z, fma(_1143, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1142)) - _1111;
        float _1155 = fma(_1144, cbModelParam._m0[31u].z, fma(_1143, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1142)) - _1115;
        float _1156 = fma(_1144, cbModelParam._m0[32u].z, fma(_1143, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1142)) - _1119;
        float _1160 = inversesqrt(dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156)));
        float _1173 = ((_1160 * _1154) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1111 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1174 = ((_1160 * _1155) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1115 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1175 = ((_1160 * _1156) / cbModelParam._m0[35u].z) + ((((((_1119 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        float _1210 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1177.x + (-0.5));
        float _1212 = _1210 * (_1177.y + (-0.5));
        float _1213 = _1210 * (_1177.z + (-0.5));
        float _1220 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1184.x + (-0.5));
        float _1222 = _1220 * (_1184.y + (-0.5));
        float _1223 = _1220 * (_1184.z + (-0.5));
        float _1230 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1191.x + (-0.5));
        float _1232 = _1230 * (_1191.y + (-0.5));
        float _1233 = _1230 * (_1191.z + (-0.5));
        float _1240 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1198.x + (-0.5));
        float _1242 = _1240 * (_1198.y + (-0.5));
        float _1243 = _1240 * (_1198.z + (-0.5));
        float _1244 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1245 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1246 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1247 = _1211 * 0.5;
        float _1248 = _1221 * 0.5;
        float _1249 = _1231 * 0.5;
        float _1250 = dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249));
        float _1255 = (_1250 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1250);
        float _1263 = (dot(vec3(_528, _529, _530), vec3(_1255 * _1247, _1255 * _1248, _1255 * _1249)) + 1.0) * 0.5;
        float _3762 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1272 = sqrt(((_1248 * _1248) + (_1247 * _1247)) + (_1249 * _1249)) / (_1244 + 9.9999997473787516355514526367188e-06);
        float _3773 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1274 = _1273 * 2.0;
        float _1278 = (1.0 - _1273) / (_1273 + 1.0);
        float _3784 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1288 = ((((1.0 - _1279) * (_1274 + 2.0)) * exp2(log2(isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_1274 + 1.0))) + _1279) * _1244;
        float _1289 = _1212 * 0.5;
        float _1290 = _1222 * 0.5;
        float _1291 = _1232 * 0.5;
        float _1292 = dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291));
        float _1297 = (_1292 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1292);
        float _1305 = (dot(vec3(_528, _529, _530), vec3(_1297 * _1289, _1297 * _1290, _1297 * _1291)) + 1.0) * 0.5;
        float _3795 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1314 = sqrt(((_1290 * _1290) + (_1289 * _1289)) + (_1291 * _1291)) / (_1245 + 9.9999997473787516355514526367188e-06);
        float _3806 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1316 = _1315 * 2.0;
        float _1320 = (1.0 - _1315) / (_1315 + 1.0);
        float _3817 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1330 = ((((1.0 - _1321) * (_1316 + 2.0)) * exp2(log2(isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_1316 + 1.0))) + _1321) * _1245;
        float _1331 = _1213 * 0.5;
        float _1332 = _1223 * 0.5;
        float _1333 = _1233 * 0.5;
        float _1334 = dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333));
        float _1339 = (_1334 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1334);
        float _1347 = (dot(vec3(_528, _529, _530), vec3(_1339 * _1331, _1339 * _1332, _1339 * _1333)) + 1.0) * 0.5;
        float _3828 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1356 = sqrt(((_1332 * _1332) + (_1331 * _1331)) + (_1333 * _1333)) / (_1246 + 9.9999997473787516355514526367188e-06);
        float _3839 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1358 = _1357 * 2.0;
        float _1362 = (1.0 - _1357) / (_1357 + 1.0);
        float _3850 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1372 = ((((1.0 - _1363) * (_1358 + 2.0)) * exp2(log2(isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_1358 + 1.0))) + _1363) * _1246;
        _1380 = _1213;
        _1381 = _1212;
        _1382 = _1211;
        _1383 = _1223;
        _1384 = _1222;
        _1385 = _1221;
        _1386 = _1233;
        _1387 = _1232;
        _1388 = _1231;
        _1389 = _1246;
        _1390 = _1245;
        _1391 = _1244;
        _1392 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)));
        _1393 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)));
        _1394 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)));
    }
    else
    {
        _1380 = _1071;
        _1381 = _1071;
        _1382 = _1071;
        _1383 = _1071;
        _1384 = _1071;
        _1385 = _1071;
        _1386 = _1071;
        _1387 = _1071;
        _1388 = _1071;
        _1389 = _1071;
        _1390 = _1071;
        _1391 = _1071;
        _1392 = 0.0;
        _1393 = 0.0;
        _1394 = 0.0;
    }
    float _1404 = (cbModelParam._m0[1u].x * (_1392 - _1083)) + _1083;
    float _1405 = (cbModelParam._m0[1u].x * (_1393 - _1084)) + _1084;
    float _1406 = (cbModelParam._m0[1u].x * (_1394 - _1085)) + _1085;
    float _1427 = fma(_1406, cbSceneParam._m0[89u].z, fma(_1405, cbSceneParam._m0[89u].y, _1404 * cbSceneParam._m0[89u].x));
    float _1430 = fma(_1406, cbSceneParam._m0[90u].z, fma(_1405, cbSceneParam._m0[90u].y, _1404 * cbSceneParam._m0[90u].x));
    float _1433 = fma(_1406, cbSceneParam._m0[91u].z, fma(_1405, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1404));
    float _1448 = _704 * 0.5;
    float _1449 = _705 * 0.5;
    float _1450 = _706 * 0.5;
    float _1451 = dot(vec4(_1448, _1449, _1450, 1.0), vec4(_1382, _1385, _1388, _1391));
    float _1454 = dot(vec4(_1448, _1449, _1450, 1.0), vec4(_1381, _1384, _1387, _1390));
    float _1457 = dot(vec4(_1448, _1449, _1450, 1.0), vec4(_1380, _1383, _1386, _1389));
    float _1491;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1464 = dot(vec4(_1448, _1449, _1450, 1.0), vec4(_1070, _1074, _1077, _1080));
        float _1468 = dot(vec4(_1448, _1449, _1450, 1.0), vec4(_1072, _1075, _1078, _1081));
        float _1472 = dot(vec4(_1448, _1449, _1450, 1.0), vec4(_1073, _1076, _1079, _1082));
        float _1479 = dot(vec4(cbModelParam._m0[39u]), vec4(_1448, _1449, _1450, 1.0));
        _1491 = dot(vec3(isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)), isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)), isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1479) ? 0.0 : (isnan(0.0) ? _1479 : max(0.0, _1479))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1491 = 1.0;
    }
    float _1502;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1493 = dot(vec4(cbModelParam._m0[40u]), vec4(_1448, _1449, _1450, 1.0));
        _1502 = dot(vec3(isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)), isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)), isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1493) ? 0.0 : (isnan(0.0) ? _1493 : max(0.0, _1493))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1502 = 1.0;
    }
    float _1506 = (_1502 * cbModelParam._m0[1u].x) + (_1491 * (1.0 - cbModelParam._m0[1u].x));
    float _1516 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _531);
    float _1517 = isnan(_1516) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1516 : min(cbModelParam._m0[25u].z, _1516));
    float _1597;
    float _1599;
    float _1601;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1564 = fma(_768, cbModelParam._m0[13u].z, fma(_764, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _760)) + cbModelParam._m0[13u].w;
        float _1568 = fma(_768, cbModelParam._m0[14u].z, fma(_764, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _760)) + cbModelParam._m0[14u].w;
        float _1572 = fma(_768, cbModelParam._m0[15u].z, fma(_764, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _760)) + cbModelParam._m0[15u].w;
        float _1575 = fma(_706, cbModelParam._m0[13u].z, fma(_705, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _704));
        float _1578 = fma(_706, cbModelParam._m0[14u].z, fma(_705, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _704));
        float _1581 = fma(_706, cbModelParam._m0[15u].z, fma(_705, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _704));
        float _1609;
        if (_1575 > 0.0)
        {
            _1609 = abs((1.0 - _1564) / _1575);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1575 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1564 + 1.0) / _1575);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1609 = frontier_phi_14_12_ladder;
        }
        float _1835;
        if (_1578 > 0.0)
        {
            _1835 = abs((1.0 - _1568) / _1578);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1578 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1568 + 1.0) / _1578);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1835 = frontier_phi_23_19_ladder;
        }
        float _2092;
        if (_1581 > 0.0)
        {
            _2092 = abs((1.0 - _1572) / _1581);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1581 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1572 + 1.0) / _1581);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2092 = frontier_phi_35_30_ladder;
        }
        float _2094 = isnan(_1835) ? _1609 : (isnan(_1609) ? _1835 : min(_1609, _1835));
        float _2095 = isnan(_2092) ? _2094 : (isnan(_2094) ? _2092 : min(_2094, _2092));
        float _2099 = (_2095 * _1575) + _1564;
        float _2100 = (_2095 * _1578) + _1568;
        float _2101 = (_2095 * _1581) + _1572;
        float _2102 = _2095 * 9.9999997473787516355514526367188e-05;
        float _2104 = (-1.0) - _2102;
        float _2106 = _2102 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2101 > _2106) || ((_2101 < _2104) || ((_2100 > _2106) || ((_2100 < _2104) || ((_2099 < _2104) || (_2099 > _2106))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2229 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2101, cbModelParam._m0[9u].z, fma(_2100, cbModelParam._m0[9u].y, _2099 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2101, cbModelParam._m0[10u].z, fma(_2100, cbModelParam._m0[10u].y, _2099 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2101, cbModelParam._m0[11u].z, fma(_2100, cbModelParam._m0[11u].y, _2099 * cbModelParam._m0[11u].x))), _1517);
            frontier_phi_13_35_ladder = _2229.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2229.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2229.x * cbModelParam._m0[1u].y;
        }
        _1597 = frontier_phi_13_35_ladder_2;
        _1599 = frontier_phi_13_35_ladder_1;
        _1601 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1585 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_704, _705, _706), _1517);
        _1597 = _1585.x * cbModelParam._m0[1u].y;
        _1599 = _1585.y * cbModelParam._m0[1u].y;
        _1601 = _1585.z * cbModelParam._m0[1u].y;
    }
    float _1605 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _531);
    float _1606 = isnan(_1605) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1605 : min(cbModelParam._m0[25u].w, _1605));
    float _1697;
    float _1699;
    float _1701;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1661 = fma(_768, cbModelParam._m0[21u].z, fma(_764, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _760)) + cbModelParam._m0[21u].w;
        float _1665 = fma(_768, cbModelParam._m0[22u].z, fma(_764, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _760)) + cbModelParam._m0[22u].w;
        float _1669 = fma(_768, cbModelParam._m0[23u].z, fma(_764, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _760)) + cbModelParam._m0[23u].w;
        float _1672 = fma(_706, cbModelParam._m0[21u].z, fma(_705, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _704));
        float _1675 = fma(_706, cbModelParam._m0[22u].z, fma(_705, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _704));
        float _1678 = fma(_706, cbModelParam._m0[23u].z, fma(_705, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _704));
        float _1840;
        if (_1672 > 0.0)
        {
            _1840 = abs((1.0 - _1661) / _1672);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1672 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1661 + 1.0) / _1672);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1840 = frontier_phi_25_21_ladder;
        }
        float _2119;
        if (_1675 > 0.0)
        {
            _2119 = abs((1.0 - _1665) / _1675);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1675 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1665 + 1.0) / _1675);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2119 = frontier_phi_37_32_ladder;
        }
        float _2332;
        if (_1678 > 0.0)
        {
            _2332 = abs((1.0 - _1669) / _1678);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1669 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2332 = frontier_phi_46_43_ladder;
        }
        float _2334 = isnan(_2119) ? _1840 : (isnan(_1840) ? _2119 : min(_1840, _2119));
        float _2335 = isnan(_2332) ? _2334 : (isnan(_2334) ? _2332 : min(_2334, _2332));
        float _2339 = (_2335 * _1672) + _1661;
        float _2340 = (_2335 * _1675) + _1665;
        float _2341 = (_2335 * _1678) + _1669;
        float _2342 = _2335 * 9.9999997473787516355514526367188e-05;
        float _2343 = (-1.0) - _2342;
        float _2345 = _2342 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2341 > _2345) || ((_2341 < _2343) || ((_2340 > _2345) || ((_2340 < _2343) || ((_2339 < _2343) || (_2339 > _2345))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2569 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2341, cbModelParam._m0[17u].z, fma(_2340, cbModelParam._m0[17u].y, _2339 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2341, cbModelParam._m0[18u].z, fma(_2340, cbModelParam._m0[18u].y, _2339 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2341, cbModelParam._m0[19u].z, fma(_2340, cbModelParam._m0[19u].y, _2339 * cbModelParam._m0[19u].x))), _1606);
            frontier_phi_22_46_ladder = _2569.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2569.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2569.x * cbModelParam._m0[1u].z;
        }
        _1697 = frontier_phi_22_46_ladder_2;
        _1699 = frontier_phi_22_46_ladder_1;
        _1701 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1681 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_704, _705, _706), _1606);
        _1697 = _1681.x * cbModelParam._m0[1u].z;
        _1699 = _1681.y * cbModelParam._m0[1u].z;
        _1701 = _1681.z * cbModelParam._m0[1u].z;
    }
    float _1714 = (((_731 * _681) + _732) * _696) * ((cbModelParam._m0[1u].w * (_1697 - _1597)) + _1597);
    float _1716 = (((_731 * _683) + _732) * _696) * ((cbModelParam._m0[1u].w * (_1699 - _1599)) + _1599);
    float _1718 = (((_731 * _684) + _732) * _696) * ((cbModelParam._m0[1u].w * (_1701 - _1601)) + _1601);
    float _1721 = fma(_1718, cbSceneParam._m0[89u].z, fma(_1716, cbSceneParam._m0[89u].y, _1714 * cbSceneParam._m0[89u].x));
    float _1724 = fma(_1718, cbSceneParam._m0[90u].z, fma(_1716, cbSceneParam._m0[90u].y, _1714 * cbSceneParam._m0[90u].x));
    float _1727 = fma(_1718, cbSceneParam._m0[91u].z, fma(_1716, cbSceneParam._m0[91u].y, _1714 * cbSceneParam._m0[91u].x));
    vec4 _1735 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_616, _617));
    float _1737 = _1735.w;
    float _1749 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1737);
    float _1750 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1737);
    float _1751 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1737);
    uvec4 _1755 = floatBitsToUint(cbInstanceData._m0[_656 + 5u]);
    uint _1757 = _1755.x * 14u;
    uint _1758 = _1757 + 13u;
    float _1765 = _696 + (-1.0);
    float _1770 = (cbLight._m0[_1758].x * _1765) + 1.0;
    float _1771 = (cbLight._m0[_1758].y * _1765) + 1.0;
    float _1772 = (cbLight._m0[_1758].z * _1765) + 1.0;
    float _1773 = (cbLight._m0[_1758].w * _1765) + 1.0;
    uint _1774 = _1757 + 5u;
    float _1780 = isnan(1.0) ? _1771 : (isnan(_1771) ? 1.0 : min(_1771, 1.0));
    uint _1784 = _1757 + 4u;
    float _1794 = isnan(1.0) ? _1770 : (isnan(_1770) ? 1.0 : min(_1770, 1.0));
    uint _1798 = _1757 | 1u;
    float _1809 = dot(vec3(cbLight._m0[_1757].xyz), vec3(_528, _529, _530));
    float _1812 = dot(vec3(cbLight._m0[_1798].xyz), vec3(_528, _529, _530));
    float _3986 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _3997 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1817 = (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * 0.3183098733425140380859375;
    float _1819 = (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * 0.3183098733425140380859375;
    float _1826 = ((cbLight._m0[_1774].x * _1780) * _1819) + (((cbLight._m0[_1784].x * _1749) * _1794) * _1817);
    float _1827 = ((_1780 * cbLight._m0[_1774].y) * _1819) + (((cbLight._m0[_1784].y * _1750) * _1794) * _1817);
    float _1828 = ((_1780 * cbLight._m0[_1774].z) * _1819) + (((cbLight._m0[_1784].z * _1751) * _1794) * _1817);
    uvec4 _1832 = floatBitsToUint(cbLight._m0[_1757 + 12u]);
    bool _1834 = _1832.x == 0u;
    float _1845;
    float _1847;
    float _1849;
    if (_1834)
    {
        _1845 = _1826;
        _1847 = _1827;
        _1849 = _1828;
    }
    else
    {
        uint _1853 = _1757 + 6u;
        float _1869 = (dot(vec3(cbLight._m0[_1757 + 2u].xyz), vec3(_528, _529, _530)) * 0.5) + 0.5;
        float _1870 = _1869 * _1869;
        float _4008 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
        float _1871 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1872 = isnan(1.0) ? _1772 : (isnan(_1772) ? 1.0 : min(_1772, 1.0));
        _1845 = (((cbLight._m0[_1853].x * 0.3183098733425140380859375) * _1871) * _1872) + _1826;
        _1847 = (((cbLight._m0[_1853].y * 0.3183098733425140380859375) * _1871) * _1872) + _1827;
        _1849 = (((cbLight._m0[_1853].z * 0.3183098733425140380859375) * _1871) * _1872) + _1828;
    }
    bool _1852 = _1832.y == 0u;
    float _1890;
    float _1892;
    float _1894;
    if (_1852)
    {
        _1890 = _1845;
        _1892 = _1847;
        _1894 = _1849;
    }
    else
    {
        uint _2063 = _1757 + 7u;
        float _2079 = (dot(vec3(cbLight._m0[_1757 + 3u].xyz), vec3(_528, _529, _530)) * 0.5) + 0.5;
        float _2080 = _2079 * _2079;
        float _4024 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2081 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _2082 = isnan(1.0) ? _1773 : (isnan(_1773) ? 1.0 : min(_1773, 1.0));
        _1890 = (((cbLight._m0[_2063].x * 0.3183098733425140380859375) * _2081) * _2082) + _1845;
        _1892 = (((cbLight._m0[_2063].y * 0.3183098733425140380859375) * _2081) * _2082) + _1847;
        _1894 = (((cbLight._m0[_2063].z * 0.3183098733425140380859375) * _2081) * _2082) + _1849;
    }
    uint _1897 = _1757 + 8u;
    float _1910 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1757].w)) * _531) * 0.949999988079071044921875);
    float _1911 = _1910 * _1910;
    float _1912 = cbLight._m0[_1757].x + _608;
    float _1913 = cbLight._m0[_1757].y + _609;
    float _1914 = cbLight._m0[_1757].z + _610;
    float _1918 = inversesqrt(dot(vec3(_1912, _1913, _1914), vec3(_1912, _1913, _1914)));
    float _1919 = _1918 * _1912;
    float _1920 = _1918 * _1913;
    float _1921 = _1918 * _1914;
    float _1922 = dot(vec3(_528, _529, _530), vec3(cbLight._m0[_1757].xyz));
    float _4040 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
    float _1925 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _4051 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _1926 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _1927 = dot(vec3(_528, _529, _530), vec3(_1919, _1920, _1921));
    float _4062 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1930 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _1931 = dot(vec3(cbLight._m0[_1757].xyz), vec3(_1919, _1920, _1921));
    float _4073 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _1935 = _1911 * _1911;
    float _1939 = ((_1930 * _1930) * (_1935 + (-1.0))) + 1.0;
    float _1947 = exp2(log2(1.0 - (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0)))) * 5.0);
    float _1948 = 0.959999978542327880859375 - _678;
    float _1950 = 0.959999978542327880859375 - _679;
    float _1951 = 0.959999978542327880859375 - _680;
    float _1958 = 1.0 - _1911;
    float _1969 = (0.5 / (((_1926 * ((_1925 * _1958) + _1911)) + 9.9999999392252902907785028219223e-09) + (((_1926 * _1958) + _1911) * _1925))) * _1925;
    float _4084 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _1971 = (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_1935 / ((_1939 * _1939) * 3.141590118408203125));
    uint _1985 = _1757 + 9u;
    float _1996 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1798].w)) * _531) * 0.949999988079071044921875);
    float _1997 = _1996 * _1996;
    float _1998 = cbLight._m0[_1798].x + _608;
    float _1999 = cbLight._m0[_1798].y + _609;
    float _2000 = cbLight._m0[_1798].z + _610;
    float _2004 = inversesqrt(dot(vec3(_1998, _1999, _2000), vec3(_1998, _1999, _2000)));
    float _2005 = _2004 * _1998;
    float _2006 = _2004 * _1999;
    float _2007 = _2004 * _2000;
    float _2008 = dot(vec3(_528, _529, _530), vec3(cbLight._m0[_1798].xyz));
    float _4095 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2011 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _2012 = dot(vec3(_528, _529, _530), vec3(_2005, _2006, _2007));
    float _4106 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2015 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _2016 = dot(vec3(cbLight._m0[_1798].xyz), vec3(_2005, _2006, _2007));
    float _4117 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2020 = _1997 * _1997;
    float _2024 = ((_2015 * _2015) * (_2020 + (-1.0))) + 1.0;
    float _2031 = exp2(log2(1.0 - (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0)))) * 5.0);
    float _2038 = 1.0 - _1997;
    float _2048 = (0.5 / (((_1926 * ((_2011 * _2038) + _1997)) + 9.9999999392252902907785028219223e-09) + (((_1926 * _2038) + _1997) * _2011))) * _2011;
    float _4128 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2050 = (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_2020 / ((_2024 * _2024) * 3.141590118408203125));
    float _2060 = (((((_2031 * _1948) + _681) * cbLight._m0[_1985].x) * _2050) * _1780) + ((((cbLight._m0[_1897].x * _1749) * ((_1947 * _1948) + _681)) * _1971) * _1794);
    float _2061 = (((((_2031 * _1950) + _683) * cbLight._m0[_1985].y) * _2050) * _1780) + ((((cbLight._m0[_1897].y * _1750) * ((_1947 * _1950) + _683)) * _1971) * _1794);
    float _2062 = (((((_2031 * _1951) + _684) * cbLight._m0[_1985].z) * _2050) * _1780) + ((((cbLight._m0[_1897].z * _1751) * ((_1947 * _1951) + _684)) * _1971) * _1794);
    float _2124;
    float _2126;
    float _2128;
    if (_1834)
    {
        _2124 = _2060;
        _2126 = _2061;
        _2128 = _2062;
    }
    else
    {
        uint _2130 = _1757 + 2u;
        uint _2134 = _1757 + 10u;
        float _2148 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2130].w)) * _531) * 0.949999988079071044921875);
        float _2149 = _2148 * _2148;
        float _2150 = cbLight._m0[_2130].x + _608;
        float _2151 = cbLight._m0[_2130].y + _609;
        float _2152 = cbLight._m0[_2130].z + _610;
        float _2156 = inversesqrt(dot(vec3(_2150, _2151, _2152), vec3(_2150, _2151, _2152)));
        float _2157 = _2156 * _2150;
        float _2158 = _2156 * _2151;
        float _2159 = _2156 * _2152;
        float _2160 = dot(vec3(_528, _529, _530), vec3(cbLight._m0[_2130].xyz));
        float _4139 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2163 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _2164 = dot(vec3(_528, _529, _530), vec3(_2157, _2158, _2159));
        float _4150 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2167 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _2168 = dot(vec3(cbLight._m0[_2130].xyz), vec3(_2157, _2158, _2159));
        float _4161 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2172 = _2149 * _2149;
        float _2176 = ((_2167 * _2167) * (_2172 + (-1.0))) + 1.0;
        float _2183 = exp2(log2(1.0 - (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)))) * 5.0);
        float _2190 = 1.0 - _2149;
        float _2200 = (0.5 / (((_1926 * ((_2163 * _2190) + _2149)) + 9.9999999392252902907785028219223e-09) + (((_1926 * _2190) + _2149) * _2163))) * _2163;
        float _4172 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        float _2202 = (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_2172 / ((_2176 * _2176) * 3.141590118408203125));
        float _2203 = isnan(1.0) ? _1772 : (isnan(_1772) ? 1.0 : min(_1772, 1.0));
        _2124 = (((((_2183 * _1948) + _681) * cbLight._m0[_2134].x) * _2202) * _2203) + _2060;
        _2126 = (((((_2183 * _1950) + _683) * cbLight._m0[_2134].y) * _2202) * _2203) + _2061;
        _2128 = (((((_2183 * _1951) + _684) * cbLight._m0[_2134].z) * _2202) * _2203) + _2062;
    }
    float _2238;
    float _2240;
    float _2242;
    if (_1852)
    {
        _2238 = _2124;
        _2240 = _2126;
        _2242 = _2128;
    }
    else
    {
        uint _2249 = _1757 + 3u;
        uint _2253 = _1757 + 11u;
        float _2267 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2249].w)) * _531) * 0.949999988079071044921875);
        float _2268 = _2267 * _2267;
        float _2269 = cbLight._m0[_2249].x + _608;
        float _2270 = cbLight._m0[_2249].y + _609;
        float _2271 = cbLight._m0[_2249].z + _610;
        float _2275 = inversesqrt(dot(vec3(_2269, _2270, _2271), vec3(_2269, _2270, _2271)));
        float _2276 = _2275 * _2269;
        float _2277 = _2275 * _2270;
        float _2278 = _2275 * _2271;
        float _2279 = dot(vec3(_528, _529, _530), vec3(cbLight._m0[_2249].xyz));
        float _4188 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2282 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _2283 = dot(vec3(_528, _529, _530), vec3(_2276, _2277, _2278));
        float _4199 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        float _2286 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _2287 = dot(vec3(cbLight._m0[_2249].xyz), vec3(_2276, _2277, _2278));
        float _4210 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2291 = _2268 * _2268;
        float _2295 = ((_2286 * _2286) * (_2291 + (-1.0))) + 1.0;
        float _2302 = exp2(log2(1.0 - (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0)))) * 5.0);
        float _2309 = 1.0 - _2268;
        float _2319 = (0.5 / (((_1926 * ((_2282 * _2309) + _2268)) + 9.9999999392252902907785028219223e-09) + (((_1926 * _2309) + _2268) * _2282))) * _2282;
        float _4221 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2321 = (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_2291 / ((_2295 * _2295) * 3.141590118408203125));
        float _2322 = isnan(1.0) ? _1773 : (isnan(_1773) ? 1.0 : min(_1773, 1.0));
        _2238 = (((((_2302 * _1948) + _681) * cbLight._m0[_2253].x) * _2321) * _2322) + _2124;
        _2240 = (((((_2302 * _1950) + _683) * cbLight._m0[_2253].y) * _2321) * _2322) + _2126;
        _2242 = (((((_2302 * _1951) + _684) * cbLight._m0[_2253].z) * _2321) * _2322) + _2128;
    }
    float _2457;
    float _2459;
    float _2461;
    float _2463;
    float _2465;
    float _2467;
    if (_1755.y == 0u)
    {
        float _2397 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2398 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2397;
        float _2399 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2397;
        float _2400 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2397;
        uvec4 _2412 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2413 = _2412.x;
        uint _2424 = uint((float(_2412.y) * floor(float(uint(cbSceneParam._m0[85u].y * _617) / _2413))) + floor(float(uint(cbSceneParam._m0[85u].x * _616) / _2413)));
        float _2434 = (log2(_2400 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2435 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        uint _2438 = uint(isnan(14.0) ? _2435 : (isnan(_2435) ? 14.0 : min(_2435, 14.0)));
        uvec4 _2443 = texelFetch(g_lightClusterGridBuffer, int(((_2438 << 2u) + (_2424 << 6u)) >> 2u));
        uint _2444 = _2443.x;
        uint _2445 = _2412.z;
        float _2574;
        float _2576;
        float _2578;
        float _2580;
        float _2582;
        float _2584;
        if (((((1u << ((_2445 >> 4u) & 15u)) + 4294967295u) & _2444) == 0u) || ((_2445 & 240u) == 0u))
        {
            _2574 = 0.0;
            _2576 = 0.0;
            _2578 = 0.0;
            _2580 = 0.0;
            _2582 = 0.0;
            _2584 = 0.0;
        }
        else
        {
            float _2575;
            float _2577;
            float _2579;
            float _2581;
            float _2583;
            float _2585;
            float _2728 = 0.0;
            float _2729 = 0.0;
            float _2730 = 0.0;
            float _2731 = 0.0;
            float _2732 = 0.0;
            float _2733 = 0.0;
            uint _2734 = 0u;
            uint _2743;
            bool _2744;
            for (;;)
            {
                _2743 = texelFetch(g_lightClassification, int((((_2438 << 5u) + (_2424 << 9u)) + (_2734 << 2u)) >> 2u)).x;
                _2744 = _2743 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2744)
                {
                    frontier_phi_61_pred = _2728;
                    frontier_phi_61_pred_1 = _2733;
                    frontier_phi_61_pred_2 = _2732;
                    frontier_phi_61_pred_3 = _2731;
                    frontier_phi_61_pred_4 = _2730;
                    frontier_phi_61_pred_5 = _2729;
                }
                else
                {
                    float _2852;
                    float _2853;
                    float _2854;
                    float _2855;
                    float _2856;
                    float _2857;
                    uint _2858;
                    _2852 = _2728;
                    _2853 = _2729;
                    _2854 = _2730;
                    _2855 = _2731;
                    _2856 = _2732;
                    _2857 = _2733;
                    _2858 = _2743;
                    float _2784;
                    float _2785;
                    float _2786;
                    float _2787;
                    float _2788;
                    float _2789;
                    for (;;)
                    {
                        uint _2862 = uint(findLSB(_2858)) + (_2734 << 5u);
                        uint _2859 = (_2858 + 4294967295u) & _2858;
                        uint _2864 = _2862 * 48u;
                        vec4 _2878 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2864)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 3u)).x));
                        uint _2884 = (_2862 * 48u) + 4u;
                        vec4 _2897 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2884)).x, texelFetch(g_PointLightRenderingBuffer, int(_2884 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2884 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2884 + 3u)).x));
                        uint _2903 = (_2862 * 48u) + 8u;
                        vec3 _2914 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2903)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 2u)).x));
                        float _2918 = _2878.x - _2398;
                        float _2919 = _2878.y - _2399;
                        float _2920 = _2878.z - _2400;
                        float _2921 = dot(vec3(_2918, _2919, _2920), vec3(_2918, _2919, _2920));
                        float _2924 = inversesqrt(_2921);
                        float _2925 = _2924 * _2918;
                        float _2926 = _2924 * _2919;
                        float _2927 = _2924 * _2920;
                        float _2928 = dot(vec3(_637, _640, _643), vec3(_2925, _2926, _2927));
                        float _2933 = 1.0 - (_2921 * _2878.w);
                        float _4247 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
                        float _2934 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
                        float _2935 = sqrt(_2921) * _2897.w;
                        float _2938 = 1.39999997615814208984375 / (_2935 + 1.39999997615814208984375);
                        float _2939 = _2938 * _2938;
                        float _2942 = ((1.0 - _2939) * _2928) + _2939;
                        float _2945 = _2935 * _2935;
                        float _2949 = ((isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0))) * _2934) / ((_2945 * 0.699999988079071044921875) + 1.0);
                        float _2953 = (-0.0) - _2398;
                        float _2954 = (-0.0) - _2399;
                        float _2955 = (-0.0) - _2400;
                        float _2959 = inversesqrt(dot(vec3(_2953, _2954, _2955), vec3(_2953, _2954, _2955)));
                        float _2960 = _2959 * _2953;
                        float _2961 = _2959 * _2954;
                        float _2962 = _2959 * _2955;
                        float _2970 = exp2(log2(1.0 / ((_2945 * 3.5) + 5.0)) * 0.25);
                        float _2971 = 1.0 - _712;
                        float _2978 = sqrt(1.0 - ((1.0 - (_2971 * _2971)) * (1.0 - (_2970 * _2970))));
                        float _2979 = _2978 * _2978;
                        float _2980 = _2979 * _2979;
                        float _2981 = _2960 + _2925;
                        float _2982 = _2961 + _2926;
                        float _2983 = _2962 + _2927;
                        float _2987 = inversesqrt(dot(vec3(_2981, _2982, _2983), vec3(_2981, _2982, _2983)));
                        float _2991 = dot(vec3(_637, _640, _643), vec3(_2960, _2961, _2962));
                        float _4263 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
                        float _2994 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
                        float _2995 = dot(vec3(_637, _640, _643), vec3(_2987 * _2981, _2987 * _2982, _2987 * _2983));
                        float _4274 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                        float _2998 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                        float _3002 = ((_2998 * _2998) * (_2980 + (-1.0))) + 1.0;
                        float _3003 = _2938 * _2979;
                        float _3004 = _3003 * _3003;
                        float _3007 = ((1.0 - _3004) * _2928) + _3004;
                        float _4285 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                        float _3008 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
                        float _3009 = 1.0 - _2979;
                        float _3019 = (0.5 / (((_3008 * ((_2994 * _3009) + _2979)) + 9.9999999392252902907785028219223e-09) + (((_3008 * _3009) + _2979) * _2994))) * _3008;
                        float _4296 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
                        float _3030 = (((_2980 * 3.1415927410125732421875) * (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0)))) / ((_3002 * _3002) * ((_2945 * 2.1991131305694580078125) + 3.141590118408203125))) * _2934;
                        _2787 = (_2949 * _2897.x) + _2855;
                        _2788 = (_2949 * _2897.y) + _2856;
                        _2789 = (_2949 * _2897.z) + _2857;
                        _2784 = (_3030 * _2914.x) + _2852;
                        _2785 = (_3030 * _2914.y) + _2853;
                        _2786 = (_3030 * _2914.z) + _2854;
                        if (_2859 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2852 = _2784;
                            _2853 = _2785;
                            _2854 = _2786;
                            _2855 = _2787;
                            _2856 = _2788;
                            _2857 = _2789;
                            _2858 = _2859;
                        }
                    }
                    frontier_phi_61_pred = _2784;
                    frontier_phi_61_pred_1 = _2789;
                    frontier_phi_61_pred_2 = _2788;
                    frontier_phi_61_pred_3 = _2787;
                    frontier_phi_61_pred_4 = _2786;
                    frontier_phi_61_pred_5 = _2785;
                }
                _2575 = frontier_phi_61_pred;
                _2585 = frontier_phi_61_pred_1;
                _2583 = frontier_phi_61_pred_2;
                _2581 = frontier_phi_61_pred_3;
                _2579 = frontier_phi_61_pred_4;
                _2577 = frontier_phi_61_pred_5;
                uint _2735 = _2734 + 1u;
                if (_2735 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2728 = _2575;
                    _2729 = _2577;
                    _2730 = _2579;
                    _2731 = _2581;
                    _2732 = _2583;
                    _2733 = _2585;
                    _2734 = _2735;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2574 = _2575;
            _2576 = _2577;
            _2578 = _2579;
            _2580 = _2581;
            _2582 = _2583;
            _2584 = _2585;
        }
        uvec4 _2588 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2589 = _2588.z;
        uint _2591 = (_2589 >> 8u) & 15u;
        float _2696;
        float _2698;
        float _2700;
        float _2702;
        float _2704;
        float _2706;
        if (((4294967295u << _2591) & _2444) == 0u)
        {
            _2696 = _2574;
            _2698 = _2576;
            _2700 = _2578;
            _2702 = _2580;
            _2704 = _2582;
            _2706 = _2584;
        }
        else
        {
            float _2721 = inversesqrt(dot(vec3(_2398, _2399, _2400), vec3(_2398, _2399, _2400)));
            float _2722 = _2721 * _2398;
            float _2723 = _2721 * _2399;
            float _2724 = _2721 * _2400;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2591 < ((_2589 >> 12u) & 15u))
            {
                float _2697;
                float _2699;
                float _2701;
                float _2703;
                float _2705;
                float _2707;
                float _2835 = _2574;
                float _2836 = _2576;
                float _2837 = _2578;
                float _2838 = _2580;
                float _2839 = _2582;
                float _2840 = _2584;
                uint _2841 = _2591;
                uint _2850;
                bool _2851;
                for (;;)
                {
                    _2850 = texelFetch(g_lightClassification, int((((_2438 << 5u) + (_2424 << 9u)) + (_2841 << 2u)) >> 2u)).x;
                    _2851 = _2850 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2851)
                    {
                        frontier_phi_67_pred = _2838;
                        frontier_phi_67_pred_1 = _2839;
                        frontier_phi_67_pred_2 = _2840;
                        frontier_phi_67_pred_3 = _2837;
                        frontier_phi_67_pred_4 = _2836;
                        frontier_phi_67_pred_5 = _2835;
                    }
                    else
                    {
                        float _3035;
                        float _3036;
                        float _3037;
                        float _3038;
                        float _3039;
                        float _3040;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3335;
                        float _3048 = _2835;
                        float _3049 = _2836;
                        float _3050 = _2837;
                        float _3051 = _2838;
                        float _3052 = _2839;
                        float _3053 = _2840;
                        uint _3054 = _2850;
                        uint _3055;
                        vec4 _3080;
                        float _3081;
                        vec4 _3096;
                        vec3 _3108;
                        vec4 _3123;
                        vec4 _3139;
                        float _3186;
                        bool _3187;
                        for (;;)
                        {
                            uint _3065 = ((_2841 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3054));
                            _3055 = (_3054 + 4294967295u) & _3054;
                            uint _3067 = _3065 * 40u;
                            _3080 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3067)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 3u)).x));
                            _3081 = _3080.w;
                            uint _3083 = (_3065 * 40u) + 4u;
                            _3096 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3083)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 3u)).x));
                            uint _3098 = (_3065 * 40u) + 8u;
                            _3108 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3098)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 2u)).x));
                            uint _3110 = (_3065 * 40u) + 16u;
                            _3123 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3110)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 3u)).x));
                            uint _3126 = (_3065 * 40u) + 20u;
                            _3139 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3126)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 3u)).x));
                            uint _3142 = (_3065 * 40u) + 24u;
                            vec4 _3155 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3142)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 3u)).x));
                            uint _3161 = (_3065 * 40u) + 28u;
                            vec4 _3174 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3161)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 3u)).x));
                            _3186 = fma(_2400, _3174.z, fma(_2399, _3174.y, _3174.x * _2398)) + _3174.w;
                            _3187 = !((fma(_2400, _3155.z, fma(_2399, _3155.y, _3155.x * _2398)) + _3155.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3187)
                            {
                                float _3214 = _3080.x - _2398;
                                float _3215 = _3080.y - _2399;
                                float _3216 = _3080.z - _2400;
                                float _3217 = dot(vec3(_3214, _3215, _3216), vec3(_3214, _3215, _3216));
                                float _3220 = inversesqrt(_3217);
                                float _3221 = _3220 * _3214;
                                float _3222 = _3220 * _3215;
                                float _3223 = _3220 * _3216;
                                float _3227 = 1.0 - (_3217 / (_3081 * _3081));
                                float _4307 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                                float _3228 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
                                float _3232 = sqrt(_3217) * _3096.w;
                                float _3234 = 1.39999997615814208984375 / (_3232 + 1.39999997615814208984375);
                                float _3235 = _3234 * _3234;
                                float _3238 = ((1.0 - _3235) * dot(vec3(_3221, _3222, _3223), vec3(_637, _640, _643))) + _3235;
                                float _3241 = _3232 * _3232;
                                float _3245 = (fma(_2400, _3123.z, fma(_2399, _3123.y, _3123.x * _2398)) + _3123.w) / _3186;
                                float _3246 = (fma(_2400, _3139.z, fma(_2399, _3139.y, _3139.x * _2398)) + _3139.w) / _3186;
                                float _3250 = 1.0 - dot(vec2(_3245, _3246), vec2(_3245, _3246));
                                float _4323 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                                float _3251 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                                float _3252 = _3251 * (((isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0))) * _3228) / ((_3241 * 0.699999988079071044921875) + 1.0));
                                float _3264 = exp2(log2(1.0 / ((_3241 * 3.5) + 5.0)) * 0.25);
                                float _3265 = 1.0 - _712;
                                float _3272 = sqrt(1.0 - ((1.0 - (_3265 * _3265)) * (1.0 - (_3264 * _3264))));
                                float _3273 = _3272 * _3272;
                                float _3274 = _3273 * _3273;
                                float _3275 = _3221 - _2722;
                                float _3276 = _3222 - _2723;
                                float _3277 = _3223 - _2724;
                                float _3281 = inversesqrt(dot(vec3(_3275, _3276, _3277), vec3(_3275, _3276, _3277)));
                                float _3285 = dot(vec3(_637, _640, _643), vec3((-0.0) - _2722, (-0.0) - _2723, (-0.0) - _2724));
                                float _4334 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                                float _3288 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
                                float _3289 = dot(vec3(_637, _640, _643), vec3(_3281 * _3275, _3281 * _3276, _3281 * _3277));
                                float _4345 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                                float _3292 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
                                float _3296 = ((_3292 * _3292) * (_3274 + (-1.0))) + 1.0;
                                float _3297 = _3234 * _3273;
                                float _3298 = _3297 * _3297;
                                float _3304 = ((1.0 - _3298) * dot(vec3(_637, _640, _643), vec3(_3221, _3222, _3223))) + _3298;
                                float _4356 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                                float _3305 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
                                float _3306 = 1.0 - _3273;
                                float _3316 = (0.5 / (((_3305 * ((_3288 * _3306) + _3273)) + 9.9999999392252902907785028219223e-09) + (((_3305 * _3306) + _3273) * _3288))) * _3305;
                                float _4367 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                                float _3326 = (_3251 * _3228) * (((_3274 * 3.1415927410125732421875) * (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0)))) / ((_3296 * _3296) * ((_3241 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3326 * _3108.x;
                                frontier_phi_73_pred_1 = _3326 * _3108.y;
                                frontier_phi_73_pred_2 = _3252 * _3096.z;
                                frontier_phi_73_pred_3 = _3252 * _3096.y;
                                frontier_phi_73_pred_4 = _3252 * _3096.x;
                                frontier_phi_73_pred_5 = _3326 * _3108.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3330 = frontier_phi_73_pred;
                            _3331 = frontier_phi_73_pred_1;
                            _3335 = frontier_phi_73_pred_2;
                            _3334 = frontier_phi_73_pred_3;
                            _3333 = frontier_phi_73_pred_4;
                            _3332 = frontier_phi_73_pred_5;
                            _3038 = _3333 + _3051;
                            _3039 = _3334 + _3052;
                            _3040 = _3335 + _3053;
                            _3035 = _3330 + _3048;
                            _3036 = _3331 + _3049;
                            _3037 = _3332 + _3050;
                            if (_3055 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3048 = _3035;
                                _3049 = _3036;
                                _3050 = _3037;
                                _3051 = _3038;
                                _3052 = _3039;
                                _3053 = _3040;
                                _3054 = _3055;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3038;
                        frontier_phi_67_pred_1 = _3039;
                        frontier_phi_67_pred_2 = _3040;
                        frontier_phi_67_pred_3 = _3037;
                        frontier_phi_67_pred_4 = _3036;
                        frontier_phi_67_pred_5 = _3035;
                    }
                    _2703 = frontier_phi_67_pred;
                    _2705 = frontier_phi_67_pred_1;
                    _2707 = frontier_phi_67_pred_2;
                    _2701 = frontier_phi_67_pred_3;
                    _2699 = frontier_phi_67_pred_4;
                    _2697 = frontier_phi_67_pred_5;
                    uint _2842 = _2841 + 1u;
                    if (_2842 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2835 = _2697;
                        _2836 = _2699;
                        _2837 = _2701;
                        _2838 = _2703;
                        _2839 = _2705;
                        _2840 = _2707;
                        _2841 = _2842;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2705;
                frontier_phi_55_56_ladder_1 = _2707;
                frontier_phi_55_56_ladder_2 = _2703;
                frontier_phi_55_56_ladder_3 = _2701;
                frontier_phi_55_56_ladder_4 = _2699;
                frontier_phi_55_56_ladder_5 = _2697;
            }
            else
            {
                frontier_phi_55_56_ladder = _2582;
                frontier_phi_55_56_ladder_1 = _2584;
                frontier_phi_55_56_ladder_2 = _2580;
                frontier_phi_55_56_ladder_3 = _2578;
                frontier_phi_55_56_ladder_4 = _2576;
                frontier_phi_55_56_ladder_5 = _2574;
            }
            _2696 = frontier_phi_55_56_ladder_5;
            _2698 = frontier_phi_55_56_ladder_4;
            _2700 = frontier_phi_55_56_ladder_3;
            _2702 = frontier_phi_55_56_ladder_2;
            _2704 = frontier_phi_55_56_ladder;
            _2706 = frontier_phi_55_56_ladder_1;
        }
        float _2711 = isnan(1.0) ? _696 : (isnan(_696) ? 1.0 : min(_696, 1.0));
        _2457 = (_2711 * _2702) + _1890;
        _2459 = (_2711 * _2704) + _1892;
        _2461 = (_2711 * _2706) + _1894;
        _2463 = ((_2696 * _681) * _2711) + _2238;
        _2465 = ((_2698 * _683) * _2711) + _2240;
        _2467 = ((_2700 * _684) * _2711) + _2242;
    }
    else
    {
        _2457 = _1890;
        _2459 = _1892;
        _2461 = _1894;
        _2463 = _2238;
        _2465 = _2240;
        _2467 = _2242;
    }
    uint _2473 = _657 + uint(cbMatDynParam._m0[0u].w);
    float _2479 = cbInstanceData._m0[_2473].x * (_447 - (_463 * _447));
    float _2480 = cbInstanceData._m0[_2473].y * (_448 - (_463 * _448));
    float _2481 = cbInstanceData._m0[_2473].z * (_449 - (_463 * _449));
    float _4383 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _4394 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _4405 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _2498 = (((isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_2457 + ((isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0))) * _696))) + ((_2463 + ((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _1506)) * cbPerFrame._m0[3u].x)) + _2479;
    float _2500 = (_2480 + ((_2465 + ((isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))) * _1506)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_2459 + ((isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0))) * _696)));
    float _2502 = (_2481 + ((_2467 + ((isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))) * _1506)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * (_2461 + ((isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))) * _696)));
    float _4431 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2515 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
    uint _2516 = _656 + 6u;
    float _2524 = _616 / cbSceneParam._m0[86u].x;
    float _2525 = _617 / cbSceneParam._m0[86u].y;
    vec4 _2539 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2524, _2525, (log2((isnan(cbSceneParam._m0[77u].w) ? _551 : (isnan(_551) ? cbSceneParam._m0[77u].w : min(_551, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2541 = _2539.x;
    float _2542 = _2539.y;
    float _2543 = _2539.z;
    float _2544 = _2539.w;
    float _2637;
    float _2639;
    float _2641;
    float _2643;
    if (_551 > cbSceneParam._m0[78u].w)
    {
        float _2599 = isnan(_551) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _551 : min(cbSceneParam._m0[80u].w, _551));
        float _2600 = _2599 / _551;
        float _2611 = _2600 * _601;
        float _2612 = _602 * _2600;
        float _2613 = (-0.0) - _2612;
        float _2615 = _2600 * _603;
        float _2617 = (cbSceneParam._m0[77u].w * _2613) / _2599;
        float _2618 = _2617 + cbSceneParam._m0[79u].w;
        float _2619 = cbSceneParam._m0[79u].w - _2612;
        float _2625 = sqrt(((_2611 * _2611) + (_2612 * _2612)) + (_2615 * _2615));
        float _2628 = (1.0 - (cbSceneParam._m0[77u].w / _2599)) * _2625;
        float _2633 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2635 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2797;
        if (abs((_2613 - _2617) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2797 = ((((_2618 > 0.0) ? exp2(_2633 * _2618) : (2.0 - exp2(_2635 * _2618))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2628;
        }
        else
        {
            float _2757 = 1.0 / cbSceneParam._m0[80u].x;
            float _2758 = isnan(_2619) ? _2618 : (isnan(_2618) ? _2619 : max(_2618, _2619));
            float _2759 = isnan(_2619) ? _2618 : (isnan(_2618) ? _2619 : min(_2618, _2619));
            float _2768 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : min(_2758, 0.0));
            float _2769 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : min(_2759, 0.0));
            _2797 = ((abs(_2625 / _2613) * cbSceneParam._m0[80u].y) * ((((_2768 - _2769) * 2.0) - ((exp2(_2633 * (isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0)))) - exp2(_2633 * (isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0))))) * _2757)) - ((exp2(_2635 * _2768) - exp2(_2635 * _2769)) * _2757))) + (_2628 * cbSceneParam._m0[80u].z);
        }
        vec4 _2799 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2524, _2525, 1.0), 0.0);
        float _2808 = exp2((_2797 * (-1.44269502162933349609375)) * (1.0 - _2799.w));
        float _2809 = log2(_2808);
        float _2825 = log2(_2544);
        _2637 = (exp2(_2825 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2809 * cbSceneParam._m0[78u].x)) * _2799.x) / cbSceneParam._m0[78u].x)) + _2541;
        _2639 = (exp2(_2825 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2809 * cbSceneParam._m0[78u].y)) * _2799.y) / cbSceneParam._m0[78u].y)) + _2542;
        _2641 = (exp2(_2825 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2809 * cbSceneParam._m0[78u].z)) * _2799.z) / cbSceneParam._m0[78u].z)) + _2543;
        _2643 = _2808 * _2544;
    }
    else
    {
        _2637 = _2541;
        _2639 = _2542;
        _2641 = _2543;
        _2643 = _2544;
    }
    float _2655 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2656 = _2655 == 3.0;
    float _2657 = log2(_2643);
    float _2661 = exp2(_2657 * cbSceneParam._m0[78u].x);
    float _2662 = exp2(_2657 * cbSceneParam._m0[78u].y);
    float _2663 = exp2(_2657 * cbSceneParam._m0[78u].z);
    float _2664 = _2661 * (isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0)));
    float _2665 = _2662 * (isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0)));
    float _2666 = _2663 * (isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0)));
    float _2675 = (_2655 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2675 * (_2656 ? _2664 : (_2664 + (cbSceneParam._m0[72u].w * _2637)));
    SV_Target.y = _2675 * (_2656 ? _2665 : (_2665 + (cbSceneParam._m0[72u].w * _2639)));
    SV_Target.z = _2675 * (_2656 ? _2666 : (_2666 + (cbSceneParam._m0[72u].w * _2641)));
    SV_Target.w = cbInstanceData._m0[_2516].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2479) * _2515) * _2661) * _2675;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2480) * _2515) * _2662) * _2675;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2481) * _2515) * _2663) * _2675;
    SV_Target_1.w = cbInstanceData._m0[_2516].w;
}


