#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1142;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _253 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _259 = _253.x * cbMtdParam._m0[9u].x;
    float _260 = _253.y * cbMtdParam._m0[9u].y;
    float _261 = _253.z * cbMtdParam._m0[9u].z;
    vec4 _299 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _315 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3772 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _316 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _323 = (((_299.x * cbMtdParam._m0[10u].x) - _259) * _316) + _259;
    float _324 = (((_299.y * cbMtdParam._m0[10u].y) - _260) * _316) + _260;
    float _325 = (((_299.z * cbMtdParam._m0[10u].z) - _261) * _316) + _261;
    vec4 _345 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _364 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_345.x + 0.00999999977648258209228515625));
    float _366 = _364 * (cbMtdParam._m0[15u].x + 1.0);
    float _3783 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _367 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _375 = ((((cbMtdParam._m0[12u].x - _323) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _367) + _323;
    float _376 = ((((cbMtdParam._m0[12u].y - _324) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _367) + _324;
    float _377 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _325)) * _367) + _325;
    vec4 _390 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _398 = (_390.x * 2.0) + (-1.0);
    float _400 = (_390.y * 2.0) + (-1.0);
    float _401 = dot(vec2(_398, _400), vec2(_398, _400));
    float _3794 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    vec4 _418 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _422 = _418.z;
    float _425 = (_418.x * 2.0) + (-1.0);
    float _426 = (_418.y * 2.0) + (-1.0);
    float _427 = dot(vec2(_425, _426), vec2(_425, _426));
    float _3805 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _432 = sqrt(1.0 - (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))));
    float _435 = (_316 * (_390.z - _422)) + _422;
    float _438 = _364 * (cbMtdParam._m0[14u].w + 1.0);
    float _3816 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _442 = ((cbMtdParam._m0[14u].y - _435) * (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0)))) + _435;
    vec4 _469 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _484 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _526 = (TEXCOORD_6.x - ((cbMtdParam._m0[13u].w * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_5, SS_WrapLinear), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].x + 1.0);
    float _3827 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _527 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _528 = ((_484.x + _469.x) * cbMtdParam._m0[11u].x) * _527;
    float _529 = ((_484.y + _469.y) * cbMtdParam._m0[11u].y) * _527;
    float _530 = ((_484.z + _469.z) * cbMtdParam._m0[11u].z) * _527;
    vec4 _542 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[9u].w));
    float _544 = _542.x;
    float _557 = (_316 * (_398 - _425)) + _425;
    float _558 = (_316 * (_400 - _426)) + _426;
    float _559 = (_316 * (sqrt(1.0 - (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0)))) - _432)) + _432;
    vec4 _578 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _584 = (_578.x * 2.0) + (-1.0);
    float _585 = (_578.y * 2.0) + (-1.0);
    float _586 = dot(vec2(_584, _585), vec2(_584, _585));
    float _3838 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _602 = (_367 * (((_557 * cbMtdParam._m0[13u].z) - _557) + _584)) + _557;
    float _603 = (_367 * (((_558 * cbMtdParam._m0[13u].z) - _558) + _585)) + _558;
    float _604 = (_367 * (sqrt(1.0 - (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0)))) - _559)) + _559;
    float _607 = fma(_604, _224 * NORMAL.x, fma(_603, _231 * TANGENT.x, (_217 * _209) * _602));
    float _610 = fma(_604, _224 * NORMAL.y, fma(_603, _231 * TANGENT.y, (_217 * _210) * _602));
    float _613 = fma(_604, _224 * NORMAL.z, fma(_603, _231 * TANGENT.z, (_217 * _211) * _602));
    float _617 = inversesqrt(dot(vec3(_607, _610, _613), vec3(_607, _610, _613)));
    float _618 = _617 * _607;
    float _619 = _617 * _610;
    float _620 = _617 * _613;
    float _3849 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _621 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _3860 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _3871 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _3882 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _640 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _680 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _690 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _680);
    float _691 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _680);
    float _692 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _680);
    float _696 = inversesqrt(dot(vec3(_690, _691, _692), vec3(_690, _691, _692)));
    float _697 = _690 * _696;
    float _698 = _691 * _696;
    float _699 = _692 * _696;
    float _705 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _706 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _726 = fma(_620, cbSceneParam._m0[5u].z, fma(_619, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _618));
    float _729 = fma(_620, cbSceneParam._m0[6u].z, fma(_619, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _618));
    float _732 = fma(_620, cbSceneParam._m0[7u].z, fma(_619, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _618));
    uint _745 = uint(roundEven(NORMAL.w)) * 13u;
    uint _746 = _745 + 9u;
    uint _747 = _746 + uint(cbMatDynParam._m0[0u].w);
    float _753 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) * cbInstanceData._m0[_747].x;
    float _754 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) * cbInstanceData._m0[_747].y;
    float _755 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) * cbInstanceData._m0[_747].z;
    float _3893 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _756 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _3904 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _757 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _3915 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _758 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    vec4 _767 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _705, cbSceneParam._m0[86u].y * _706));
    float _770 = _767.x * TEXCOORD_3.w;
    float _771 = dot(vec3(_618, _619, _620), vec3(_697, _698, _699));
    float _774 = _771 * 2.0;
    float _778 = (_774 * _618) - _697;
    float _779 = (_774 * _619) - _698;
    float _780 = (_774 * _620) - _699;
    float _784 = abs(dot(vec3(_697, _698, _699), vec3(_618, _619, _620)));
    float _3926 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _786 = sqrt(_621);
    float _799 = exp2((_786 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_786 * 3.0));
    float _831 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _835 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _839 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1141;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _866 = fma(_839, cbModelParam._m0[26u].z, fma(_835, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _831));
        float _870 = fma(_839, cbModelParam._m0[27u].z, fma(_835, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _831));
        float _874 = fma(_839, cbModelParam._m0[28u].z, fma(_835, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _831));
        float _899 = _831 + _618;
        float _900 = _835 + _619;
        float _901 = _839 + _620;
        float _911 = fma(_901, cbModelParam._m0[26u].z, fma(_900, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _899)) - _866;
        float _912 = fma(_901, cbModelParam._m0[27u].z, fma(_900, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _899)) - _870;
        float _913 = fma(_901, cbModelParam._m0[28u].z, fma(_900, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _899)) - _874;
        float _917 = inversesqrt(dot(vec3(_911, _912, _913), vec3(_911, _912, _913)));
        float _930 = ((_917 * _911) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_866 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _931 = ((_917 * _912) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_870 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _932 = ((_917 * _913) / cbModelParam._m0[34u].z) + ((((((_874 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _935 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_930, _931, _932), 0.0);
        vec4 _942 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_930, _931, _932), 0.0);
        vec4 _949 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_930, _931, _932), 0.0);
        vec4 _956 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_930, _931, _932), 0.0);
        float _969 = exp2((_935.w + (-0.5)) * 20.0) * 2.0;
        float _970 = _969 * (_935.x + (-0.5));
        float _971 = _969 * (_935.y + (-0.5));
        float _972 = _969 * (_935.z + (-0.5));
        float _979 = exp2((_942.w + (-0.5)) * 20.0) * 2.0;
        float _980 = _979 * (_942.x + (-0.5));
        float _981 = _979 * (_942.y + (-0.5));
        float _982 = _979 * (_942.z + (-0.5));
        float _989 = exp2((_949.w + (-0.5)) * 20.0) * 2.0;
        float _990 = _989 * (_949.x + (-0.5));
        float _991 = _989 * (_949.y + (-0.5));
        float _992 = _989 * (_949.z + (-0.5));
        float _999 = exp2((_956.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_956.x + (-0.5));
        float _1001 = _999 * (_956.y + (-0.5));
        float _1002 = _999 * (_956.z + (-0.5));
        float _1003 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1004 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1005 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1006 = _970 * 0.5;
        float _1007 = _980 * 0.5;
        float _1008 = _990 * 0.5;
        float _1009 = dot(vec3(_1006, _1007, _1008), vec3(_1006, _1007, _1008));
        float _1014 = (_1009 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1009);
        float _1023 = (dot(vec3(_618, _619, _620), vec3(_1014 * _1006, _1014 * _1007, _1014 * _1008)) + 1.0) * 0.5;
        float _3952 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1033 = sqrt(((_1007 * _1007) + (_1006 * _1006)) + (_1008 * _1008)) / (_1003 + 9.9999997473787516355514526367188e-06);
        float _3963 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1035 = _1034 * 2.0;
        float _1039 = (1.0 - _1034) / (_1034 + 1.0);
        float _3974 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1049 = ((((1.0 - _1040) * (_1035 + 2.0)) * exp2(log2(isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1035 + 1.0))) + _1040) * _1003;
        float _1050 = _971 * 0.5;
        float _1051 = _981 * 0.5;
        float _1052 = _991 * 0.5;
        float _1053 = dot(vec3(_1050, _1051, _1052), vec3(_1050, _1051, _1052));
        float _1058 = (_1053 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1053);
        float _1066 = (dot(vec3(_618, _619, _620), vec3(_1058 * _1050, _1058 * _1051, _1058 * _1052)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1075 = sqrt(((_1051 * _1051) + (_1050 * _1050)) + (_1052 * _1052)) / (_1004 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1077 = _1076 * 2.0;
        float _1081 = (1.0 - _1076) / (_1076 + 1.0);
        float _4007 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1091 = ((((1.0 - _1082) * (_1077 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1077 + 1.0))) + _1082) * _1004;
        float _1092 = _972 * 0.5;
        float _1093 = _982 * 0.5;
        float _1094 = _992 * 0.5;
        float _1095 = dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094));
        float _1100 = (_1095 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1095);
        float _1108 = (dot(vec3(_618, _619, _620), vec3(_1100 * _1092, _1100 * _1093, _1100 * _1094)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1117 = sqrt(((_1093 * _1093) + (_1092 * _1092)) + (_1094 * _1094)) / (_1005 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1119 = _1118 * 2.0;
        float _1123 = (1.0 - _1118) / (_1118 + 1.0);
        float _4040 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1133 = ((((1.0 - _1124) * (_1119 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1119 + 1.0))) + _1124) * _1005;
        _1141 = _972;
        _1143 = _971;
        _1144 = _970;
        _1145 = _982;
        _1146 = _981;
        _1147 = _980;
        _1148 = _992;
        _1149 = _991;
        _1150 = _990;
        _1151 = _1005;
        _1152 = _1004;
        _1153 = _1003;
        _1154 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0)));
        _1155 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0)));
        _1156 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0)));
    }
    else
    {
        _1141 = _1142;
        _1143 = _1142;
        _1144 = _1142;
        _1145 = _1142;
        _1146 = _1142;
        _1147 = _1142;
        _1148 = _1142;
        _1149 = _1142;
        _1150 = _1142;
        _1151 = _1142;
        _1152 = _1142;
        _1153 = _1142;
        _1154 = 0.0;
        _1155 = 0.0;
        _1156 = 0.0;
    }
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1182 = fma(_839, cbModelParam._m0[30u].z, fma(_835, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _831));
        float _1186 = fma(_839, cbModelParam._m0[31u].z, fma(_835, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _831));
        float _1190 = fma(_839, cbModelParam._m0[32u].z, fma(_835, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _831));
        float _1213 = _831 + _618;
        float _1214 = _835 + _619;
        float _1215 = _839 + _620;
        float _1225 = fma(_1215, cbModelParam._m0[30u].z, fma(_1214, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1213)) - _1182;
        float _1226 = fma(_1215, cbModelParam._m0[31u].z, fma(_1214, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1213)) - _1186;
        float _1227 = fma(_1215, cbModelParam._m0[32u].z, fma(_1214, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1213)) - _1190;
        float _1231 = inversesqrt(dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227)));
        float _1244 = ((_1231 * _1225) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1182 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1245 = ((_1231 * _1226) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1186 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1246 = ((_1231 * _1227) / cbModelParam._m0[35u].z) + ((((((_1190 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        float _1281 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1248.x + (-0.5));
        float _1283 = _1281 * (_1248.y + (-0.5));
        float _1284 = _1281 * (_1248.z + (-0.5));
        float _1291 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1292 = _1291 * (_1255.x + (-0.5));
        float _1293 = _1291 * (_1255.y + (-0.5));
        float _1294 = _1291 * (_1255.z + (-0.5));
        float _1301 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1302 = _1301 * (_1262.x + (-0.5));
        float _1303 = _1301 * (_1262.y + (-0.5));
        float _1304 = _1301 * (_1262.z + (-0.5));
        float _1311 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1269.x + (-0.5));
        float _1313 = _1311 * (_1269.y + (-0.5));
        float _1314 = _1311 * (_1269.z + (-0.5));
        float _1315 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1316 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1317 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1318 = _1282 * 0.5;
        float _1319 = _1292 * 0.5;
        float _1320 = _1302 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1334 = (dot(vec3(_618, _619, _620), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _4081 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1343 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1315 + 9.9999997473787516355514526367188e-06);
        float _4092 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1345 = _1344 * 2.0;
        float _1349 = (1.0 - _1344) / (_1344 + 1.0);
        float _4103 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1359 = ((((1.0 - _1350) * (_1345 + 2.0)) * exp2(log2(isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_1345 + 1.0))) + _1350) * _1315;
        float _1360 = _1283 * 0.5;
        float _1361 = _1293 * 0.5;
        float _1362 = _1303 * 0.5;
        float _1363 = dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362));
        float _1368 = (_1363 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1363);
        float _1376 = (dot(vec3(_618, _619, _620), vec3(_1368 * _1360, _1368 * _1361, _1368 * _1362)) + 1.0) * 0.5;
        float _4114 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1385 = sqrt(((_1361 * _1361) + (_1360 * _1360)) + (_1362 * _1362)) / (_1316 + 9.9999997473787516355514526367188e-06);
        float _4125 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1387 = _1386 * 2.0;
        float _1391 = (1.0 - _1386) / (_1386 + 1.0);
        float _4136 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1401 = ((((1.0 - _1392) * (_1387 + 2.0)) * exp2(log2(isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_1387 + 1.0))) + _1392) * _1316;
        float _1402 = _1284 * 0.5;
        float _1403 = _1294 * 0.5;
        float _1404 = _1304 * 0.5;
        float _1405 = dot(vec3(_1402, _1403, _1404), vec3(_1402, _1403, _1404));
        float _1410 = (_1405 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1405);
        float _1418 = (dot(vec3(_618, _619, _620), vec3(_1410 * _1402, _1410 * _1403, _1410 * _1404)) + 1.0) * 0.5;
        float _4147 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1427 = sqrt(((_1403 * _1403) + (_1402 * _1402)) + (_1404 * _1404)) / (_1317 + 9.9999997473787516355514526367188e-06);
        float _4158 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1429 = _1428 * 2.0;
        float _1433 = (1.0 - _1428) / (_1428 + 1.0);
        float _4169 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1443 = ((((1.0 - _1434) * (_1429 + 2.0)) * exp2(log2(isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_1429 + 1.0))) + _1434) * _1317;
        _1451 = _1284;
        _1452 = _1283;
        _1453 = _1282;
        _1454 = _1294;
        _1455 = _1293;
        _1456 = _1292;
        _1457 = _1304;
        _1458 = _1303;
        _1459 = _1302;
        _1460 = _1317;
        _1461 = _1316;
        _1462 = _1315;
        _1463 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
        _1464 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)));
        _1465 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)));
    }
    else
    {
        _1451 = _1142;
        _1452 = _1142;
        _1453 = _1142;
        _1454 = _1142;
        _1455 = _1142;
        _1456 = _1142;
        _1457 = _1142;
        _1458 = _1142;
        _1459 = _1142;
        _1460 = _1142;
        _1461 = _1142;
        _1462 = _1142;
        _1463 = 0.0;
        _1464 = 0.0;
        _1465 = 0.0;
    }
    float _1475 = (cbModelParam._m0[1u].x * (_1463 - _1154)) + _1154;
    float _1476 = (cbModelParam._m0[1u].x * (_1464 - _1155)) + _1155;
    float _1477 = (cbModelParam._m0[1u].x * (_1465 - _1156)) + _1156;
    float _1498 = fma(_1477, cbSceneParam._m0[89u].z, fma(_1476, cbSceneParam._m0[89u].y, _1475 * cbSceneParam._m0[89u].x));
    float _1501 = fma(_1477, cbSceneParam._m0[90u].z, fma(_1476, cbSceneParam._m0[90u].y, _1475 * cbSceneParam._m0[90u].x));
    float _1504 = fma(_1477, cbSceneParam._m0[91u].z, fma(_1476, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1475));
    float _1519 = _778 * 0.5;
    float _1520 = _779 * 0.5;
    float _1521 = _780 * 0.5;
    float _1522 = dot(vec4(_1519, _1520, _1521, 1.0), vec4(_1453, _1456, _1459, _1462));
    float _1525 = dot(vec4(_1519, _1520, _1521, 1.0), vec4(_1452, _1455, _1458, _1461));
    float _1528 = dot(vec4(_1519, _1520, _1521, 1.0), vec4(_1451, _1454, _1457, _1460));
    float _1562;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1535 = dot(vec4(_1519, _1520, _1521, 1.0), vec4(_1141, _1145, _1148, _1151));
        float _1539 = dot(vec4(_1519, _1520, _1521, 1.0), vec4(_1143, _1146, _1149, _1152));
        float _1543 = dot(vec4(_1519, _1520, _1521, 1.0), vec4(_1144, _1147, _1150, _1153));
        float _1550 = dot(vec4(cbModelParam._m0[39u]), vec4(_1519, _1520, _1521, 1.0));
        _1562 = dot(vec3(isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)), isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)), isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1550) ? 0.0 : (isnan(0.0) ? _1550 : max(0.0, _1550))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1562 = 1.0;
    }
    float _1573;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1564 = dot(vec4(cbModelParam._m0[40u]), vec4(_1519, _1520, _1521, 1.0));
        _1573 = dot(vec3(isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)), isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)), isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1564) ? 0.0 : (isnan(0.0) ? _1564 : max(0.0, _1564))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1573 = 1.0;
    }
    float _1577 = (_1573 * cbModelParam._m0[1u].x) + (_1562 * (1.0 - cbModelParam._m0[1u].x));
    float _1587 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _621);
    float _1588 = isnan(_1587) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1587 : min(cbModelParam._m0[25u].z, _1587));
    float _1668;
    float _1670;
    float _1672;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1635 = fma(_839, cbModelParam._m0[13u].z, fma(_835, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _831)) + cbModelParam._m0[13u].w;
        float _1639 = fma(_839, cbModelParam._m0[14u].z, fma(_835, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _831)) + cbModelParam._m0[14u].w;
        float _1643 = fma(_839, cbModelParam._m0[15u].z, fma(_835, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _831)) + cbModelParam._m0[15u].w;
        float _1646 = fma(_780, cbModelParam._m0[13u].z, fma(_779, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _778));
        float _1649 = fma(_780, cbModelParam._m0[14u].z, fma(_779, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _778));
        float _1652 = fma(_780, cbModelParam._m0[15u].z, fma(_779, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _778));
        float _1680;
        if (_1646 > 0.0)
        {
            _1680 = abs((1.0 - _1635) / _1646);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1646 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1635 + 1.0) / _1646);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1680 = frontier_phi_14_12_ladder;
        }
        float _1851;
        if (_1649 > 0.0)
        {
            _1851 = abs((1.0 - _1639) / _1649);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1649 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1639 + 1.0) / _1649);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1851 = frontier_phi_23_19_ladder;
        }
        float _2146;
        if (_1652 > 0.0)
        {
            _2146 = abs((1.0 - _1643) / _1652);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1652 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1643 + 1.0) / _1652);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2146 = frontier_phi_35_30_ladder;
        }
        float _2148 = isnan(_1851) ? _1680 : (isnan(_1680) ? _1851 : min(_1680, _1851));
        float _2149 = isnan(_2146) ? _2148 : (isnan(_2148) ? _2146 : min(_2148, _2146));
        float _2153 = (_2149 * _1646) + _1635;
        float _2154 = (_2149 * _1649) + _1639;
        float _2155 = (_2149 * _1652) + _1643;
        float _2156 = _2149 * 9.9999997473787516355514526367188e-05;
        float _2158 = (-1.0) - _2156;
        float _2160 = _2156 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2155 > _2160) || ((_2155 < _2158) || ((_2154 > _2160) || ((_2154 < _2158) || ((_2153 < _2158) || (_2153 > _2160))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2300 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2155, cbModelParam._m0[9u].z, fma(_2154, cbModelParam._m0[9u].y, _2153 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2155, cbModelParam._m0[10u].z, fma(_2154, cbModelParam._m0[10u].y, _2153 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2155, cbModelParam._m0[11u].z, fma(_2154, cbModelParam._m0[11u].y, _2153 * cbModelParam._m0[11u].x))), _1588);
            frontier_phi_13_35_ladder = _2300.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2300.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2300.x * cbModelParam._m0[1u].y;
        }
        _1668 = frontier_phi_13_35_ladder_2;
        _1670 = frontier_phi_13_35_ladder_1;
        _1672 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1656 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_778, _779, _780), _1588);
        _1668 = _1656.x * cbModelParam._m0[1u].y;
        _1670 = _1656.y * cbModelParam._m0[1u].y;
        _1672 = _1656.z * cbModelParam._m0[1u].y;
    }
    float _1676 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _621);
    float _1677 = isnan(_1676) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1676 : min(cbModelParam._m0[25u].w, _1676));
    float _1768;
    float _1770;
    float _1772;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1732 = fma(_839, cbModelParam._m0[21u].z, fma(_835, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _831)) + cbModelParam._m0[21u].w;
        float _1736 = fma(_839, cbModelParam._m0[22u].z, fma(_835, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _831)) + cbModelParam._m0[22u].w;
        float _1740 = fma(_839, cbModelParam._m0[23u].z, fma(_835, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _831)) + cbModelParam._m0[23u].w;
        float _1743 = fma(_780, cbModelParam._m0[21u].z, fma(_779, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _778));
        float _1746 = fma(_780, cbModelParam._m0[22u].z, fma(_779, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _778));
        float _1749 = fma(_780, cbModelParam._m0[23u].z, fma(_779, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _778));
        float _1856;
        if (_1743 > 0.0)
        {
            _1856 = abs((1.0 - _1732) / _1743);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1743 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1732 + 1.0) / _1743);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1856 = frontier_phi_25_21_ladder;
        }
        float _2173;
        if (_1746 > 0.0)
        {
            _2173 = abs((1.0 - _1736) / _1746);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1746 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1736 + 1.0) / _1746);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2173 = frontier_phi_37_32_ladder;
        }
        float _2500;
        if (_1749 > 0.0)
        {
            _2500 = abs((1.0 - _1740) / _1749);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1749 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1740 + 1.0) / _1749);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2500 = frontier_phi_47_44_ladder;
        }
        float _2502 = isnan(_2173) ? _1856 : (isnan(_1856) ? _2173 : min(_1856, _2173));
        float _2503 = isnan(_2500) ? _2502 : (isnan(_2502) ? _2500 : min(_2502, _2500));
        float _2507 = (_2503 * _1743) + _1732;
        float _2508 = (_2503 * _1746) + _1736;
        float _2509 = (_2503 * _1749) + _1740;
        float _2510 = _2503 * 9.9999997473787516355514526367188e-05;
        float _2511 = (-1.0) - _2510;
        float _2513 = _2510 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2509 > _2513) || ((_2509 < _2511) || ((_2508 > _2513) || ((_2508 < _2511) || ((_2507 < _2511) || (_2507 > _2513))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2627 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2509, cbModelParam._m0[17u].z, fma(_2508, cbModelParam._m0[17u].y, _2507 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2509, cbModelParam._m0[18u].z, fma(_2508, cbModelParam._m0[18u].y, _2507 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2509, cbModelParam._m0[19u].z, fma(_2508, cbModelParam._m0[19u].y, _2507 * cbModelParam._m0[19u].x))), _1677);
            frontier_phi_22_47_ladder = _2627.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2627.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2627.x * cbModelParam._m0[1u].z;
        }
        _1768 = frontier_phi_22_47_ladder_2;
        _1770 = frontier_phi_22_47_ladder_1;
        _1772 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1752 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_778, _779, _780), _1677);
        _1768 = _1752.x * cbModelParam._m0[1u].z;
        _1770 = _1752.y * cbModelParam._m0[1u].z;
        _1772 = _1752.z * cbModelParam._m0[1u].z;
    }
    float _1784 = ((((1.0 - _799) * ((_786 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_799 * _786)) * _770;
    float _1785 = _1784 * ((cbModelParam._m0[1u].w * (_1768 - _1668)) + _1668);
    float _1786 = _1784 * ((cbModelParam._m0[1u].w * (_1770 - _1670)) + _1670);
    float _1787 = _1784 * ((cbModelParam._m0[1u].w * (_1772 - _1672)) + _1672);
    float _1790 = fma(_1787, cbSceneParam._m0[89u].z, fma(_1786, cbSceneParam._m0[89u].y, _1785 * cbSceneParam._m0[89u].x));
    float _1793 = fma(_1787, cbSceneParam._m0[90u].z, fma(_1786, cbSceneParam._m0[90u].y, _1785 * cbSceneParam._m0[90u].x));
    float _1796 = fma(_1787, cbSceneParam._m0[91u].z, fma(_1786, cbSceneParam._m0[91u].y, _1785 * cbSceneParam._m0[91u].x));
    float _1830 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1834 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1838 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1842 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1843 = _1830 / _1842;
    float _1844 = _1834 / _1842;
    float _1845 = _1838 / _1842;
    float _1992;
    float _1993;
    float _1994;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1872 = ((uint(_1845 > cbSceneParam._m0[59u].y) + uint(_1845 > cbSceneParam._m0[59u].x)) + uint(_1845 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1873 = _1872 + 43u;
        uint _1881 = _1872 + 44u;
        uint _1889 = _1872 + 45u;
        uint _1897 = _1872 + 46u;
        float _1908 = fma(_1842, cbSceneParam._m0[_1873].w, fma(_1838, cbSceneParam._m0[_1873].z, fma(_1834, cbSceneParam._m0[_1873].y, _1830 * cbSceneParam._m0[_1873].x)));
        float _1912 = fma(_1842, cbSceneParam._m0[_1881].w, fma(_1838, cbSceneParam._m0[_1881].z, fma(_1834, cbSceneParam._m0[_1881].y, _1830 * cbSceneParam._m0[_1881].x)));
        float _1920 = fma(_1842, cbSceneParam._m0[_1897].w, fma(_1838, cbSceneParam._m0[_1897].z, fma(_1834, cbSceneParam._m0[_1897].y, _1830 * cbSceneParam._m0[_1897].x)));
        float _1925 = cbSceneParam._m0[33u].z * _1920;
        float _1927 = cbSceneParam._m0[33u].w * _1920;
        float _1930 = fma(_1842, cbSceneParam._m0[_1889].w, fma(_1838, cbSceneParam._m0[_1889].z, fma(_1834, cbSceneParam._m0[_1889].y, _1830 * cbSceneParam._m0[_1889].x))) / _1920;
        float _1978 = (cbSceneParam._m0[33u].x - sqrt(((_1844 * _1844) + (_1843 * _1843)) + (_1845 * _1845))) * cbSceneParam._m0[33u].y;
        float _4295 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
        float _1985 = (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1925 + _1908) / _1920, (_1927 + _1912) / _1920), _1930), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1927 + _1908) / _1920, (_1912 - _1925) / _1920), _1930), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1908 - _1925) / _1920, (_1912 - _1927) / _1920), _1930), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1908 - _1927) / _1920, (_1925 + _1912) / _1920), _1930), 0.0)).x), vec4(0.25)));
        _1992 = 1.0 - (_1985 * cbSceneParam._m0[34u].x);
        _1993 = 1.0 - (_1985 * cbSceneParam._m0[34u].y);
        _1994 = 1.0 - (_1985 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1992 = 1.0;
        _1993 = 1.0;
        _1994 = 1.0;
    }
    float _2058;
    float _2060;
    float _2062;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2046 = fma(_1842, cbSceneParam._m0[63u].w, fma(_1838, cbSceneParam._m0[63u].z, fma(_1834, cbSceneParam._m0[63u].y, _1830 * cbSceneParam._m0[63u].x)));
        float _2047 = fma(_1842, cbSceneParam._m0[60u].w, fma(_1838, cbSceneParam._m0[60u].z, fma(_1834, cbSceneParam._m0[60u].y, _1830 * cbSceneParam._m0[60u].x))) / _2046;
        float _2048 = fma(_1842, cbSceneParam._m0[61u].w, fma(_1838, cbSceneParam._m0[61u].z, fma(_1834, cbSceneParam._m0[61u].y, _1830 * cbSceneParam._m0[61u].x))) / _2046;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2047 >= cbSceneParam._m0[64u].x) && (_2048 >= cbSceneParam._m0[64u].y)) && (_2047 <= cbSceneParam._m0[64u].z)) && (_2048 <= cbSceneParam._m0[64u].w))
        {
            float _2186 = fma(_1842, cbSceneParam._m0[62u].w, fma(_1838, cbSceneParam._m0[62u].z, fma(_1834, cbSceneParam._m0[62u].y, _1830 * cbSceneParam._m0[62u].x))) / _2046;
            float _2190 = isnan(cbSceneParam._m0[41u].w) ? _2186 : (isnan(_2186) ? cbSceneParam._m0[41u].w : max(_2186, cbSceneParam._m0[41u].w));
            float _2233 = (cbSceneParam._m0[33u].x - sqrt(((_1844 * _1844) + (_1843 * _1843)) + (_1845 * _1845))) * cbSceneParam._m0[33u].y;
            float _4311 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
            float _2240 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2047, cbSceneParam._m0[33u].w + _2048), _2190), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2047, _2048 - cbSceneParam._m0[33u].z), _2190), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2047 - cbSceneParam._m0[33u].z, _2048 - cbSceneParam._m0[33u].w), _2190), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2047 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2048), _2190), 0.0)).x), vec4(0.25)));
            float _2244 = 1.0 - (_2240 * cbSceneParam._m0[34u].x);
            float _2245 = 1.0 - (_2240 * cbSceneParam._m0[34u].y);
            float _2246 = 1.0 - (_2240 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2246) ? _1994 : (isnan(_1994) ? _2246 : min(_1994, _2246));
            frontier_phi_34_33_ladder_1 = isnan(_2245) ? _1993 : (isnan(_1993) ? _2245 : min(_1993, _2245));
            frontier_phi_34_33_ladder_2 = isnan(_2244) ? _1992 : (isnan(_1992) ? _2244 : min(_1992, _2244));
        }
        else
        {
            frontier_phi_34_33_ladder = _1994;
            frontier_phi_34_33_ladder_1 = _1993;
            frontier_phi_34_33_ladder_2 = _1992;
        }
        _2058 = frontier_phi_34_33_ladder_2;
        _2060 = frontier_phi_34_33_ladder_1;
        _2062 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2058 = _1992;
        _2060 = _1993;
        _2062 = _1994;
    }
    uvec4 _2067 = floatBitsToUint(cbInstanceData._m0[_745 + 5u]);
    uint _2069 = _2067.x * 14u;
    uint _2070 = _2069 + 13u;
    float _2077 = _770 + (-1.0);
    float _2082 = (cbLight._m0[_2070].x * _2077) + 1.0;
    float _2083 = (cbLight._m0[_2070].y * _2077) + 1.0;
    float _2084 = (cbLight._m0[_2070].z * _2077) + 1.0;
    float _2085 = (cbLight._m0[_2070].w * _2077) + 1.0;
    uint _2086 = _2069 + 5u;
    float _2092 = isnan(1.0) ? _2083 : (isnan(_2083) ? 1.0 : min(_2083, 1.0));
    uint _2096 = _2069 + 4u;
    float _2105 = isnan(1.0) ? _2082 : (isnan(_2082) ? 1.0 : min(_2082, 1.0));
    uint _2109 = _2069 | 1u;
    float _2120 = dot(vec3(cbLight._m0[_2069].xyz), vec3(_618, _619, _620));
    float _2123 = dot(vec3(cbLight._m0[_2109].xyz), vec3(_618, _619, _620));
    float _4347 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _4358 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2128 = (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * 0.3183098733425140380859375;
    float _2130 = (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * 0.3183098733425140380859375;
    float _2137 = ((cbLight._m0[_2086].x * _2092) * _2130) + (((cbLight._m0[_2096].x * _2058) * _2105) * _2128);
    float _2138 = ((_2092 * cbLight._m0[_2086].y) * _2130) + (((cbLight._m0[_2096].y * _2060) * _2105) * _2128);
    float _2139 = ((_2092 * cbLight._m0[_2086].z) * _2130) + (((cbLight._m0[_2096].z * _2062) * _2105) * _2128);
    uvec4 _2143 = floatBitsToUint(cbLight._m0[_2069 + 12u]);
    bool _2145 = _2143.x == 0u;
    float _2247;
    float _2249;
    float _2251;
    if (_2145)
    {
        _2247 = _2137;
        _2249 = _2138;
        _2251 = _2139;
    }
    else
    {
        uint _2255 = _2069 + 6u;
        float _2271 = (dot(vec3(cbLight._m0[_2069 + 2u].xyz), vec3(_618, _619, _620)) * 0.5) + 0.5;
        float _2272 = _2271 * _2271;
        float _4369 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2273 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _2274 = isnan(1.0) ? _2084 : (isnan(_2084) ? 1.0 : min(_2084, 1.0));
        _2247 = (((cbLight._m0[_2255].x * 0.3183098733425140380859375) * _2273) * _2274) + _2137;
        _2249 = (((cbLight._m0[_2255].y * 0.3183098733425140380859375) * _2273) * _2274) + _2138;
        _2251 = (((cbLight._m0[_2255].z * 0.3183098733425140380859375) * _2273) * _2274) + _2139;
    }
    bool _2254 = _2143.y == 0u;
    float _2309;
    float _2311;
    float _2313;
    if (_2254)
    {
        _2309 = _2247;
        _2311 = _2249;
        _2313 = _2251;
    }
    else
    {
        uint _2471 = _2069 + 7u;
        float _2487 = (dot(vec3(cbLight._m0[_2069 + 3u].xyz), vec3(_618, _619, _620)) * 0.5) + 0.5;
        float _2488 = _2487 * _2487;
        float _4385 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2489 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _2490 = isnan(1.0) ? _2085 : (isnan(_2085) ? 1.0 : min(_2085, 1.0));
        _2309 = (((cbLight._m0[_2471].x * 0.3183098733425140380859375) * _2489) * _2490) + _2247;
        _2311 = (((cbLight._m0[_2471].y * 0.3183098733425140380859375) * _2489) * _2490) + _2249;
        _2313 = (((cbLight._m0[_2471].z * 0.3183098733425140380859375) * _2489) * _2490) + _2251;
    }
    uint _2316 = _2069 + 8u;
    float _2329 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2069].w)) * _621) * 0.949999988079071044921875);
    float _2330 = _2329 * _2329;
    float _2331 = cbLight._m0[_2069].x + _697;
    float _2332 = cbLight._m0[_2069].y + _698;
    float _2333 = cbLight._m0[_2069].z + _699;
    float _2337 = inversesqrt(dot(vec3(_2331, _2332, _2333), vec3(_2331, _2332, _2333)));
    float _2338 = _2337 * _2331;
    float _2339 = _2337 * _2332;
    float _2340 = _2337 * _2333;
    float _2341 = dot(vec3(_618, _619, _620), vec3(cbLight._m0[_2069].xyz));
    float _4401 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2344 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
    float _4412 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _2345 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
    float _2346 = dot(vec3(_618, _619, _620), vec3(_2338, _2339, _2340));
    float _4423 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2349 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
    float _2350 = dot(vec3(cbLight._m0[_2069].xyz), vec3(_2338, _2339, _2340));
    float _4434 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2354 = _2330 * _2330;
    float _2358 = ((_2349 * _2349) * (_2354 + (-1.0))) + 1.0;
    float _2369 = (exp2(log2(1.0 - (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2370 = 1.0 - _2330;
    float _2381 = (0.5 / (((_2345 * ((_2344 * _2370) + _2330)) + 9.9999999392252902907785028219223e-09) + (((_2345 * _2370) + _2330) * _2344))) * _2344;
    float _4445 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2383 = (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_2354 / ((_2358 * _2358) * 3.141590118408203125));
    uint _2397 = _2069 + 9u;
    float _2408 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2109].w)) * _621) * 0.949999988079071044921875);
    float _2409 = _2408 * _2408;
    float _2410 = cbLight._m0[_2109].x + _697;
    float _2411 = cbLight._m0[_2109].y + _698;
    float _2412 = cbLight._m0[_2109].z + _699;
    float _2416 = inversesqrt(dot(vec3(_2410, _2411, _2412), vec3(_2410, _2411, _2412)));
    float _2417 = _2416 * _2410;
    float _2418 = _2416 * _2411;
    float _2419 = _2416 * _2412;
    float _2420 = dot(vec3(_618, _619, _620), vec3(cbLight._m0[_2109].xyz));
    float _4456 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
    float _2423 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
    float _2424 = dot(vec3(_618, _619, _620), vec3(_2417, _2418, _2419));
    float _4467 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
    float _2427 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
    float _2428 = dot(vec3(cbLight._m0[_2109].xyz), vec3(_2417, _2418, _2419));
    float _4478 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
    float _2432 = _2409 * _2409;
    float _2436 = ((_2427 * _2427) * (_2432 + (-1.0))) + 1.0;
    float _2445 = (exp2(log2(1.0 - (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2446 = 1.0 - _2409;
    float _2456 = (0.5 / (((_2345 * ((_2423 * _2446) + _2409)) + 9.9999999392252902907785028219223e-09) + (((_2345 * _2446) + _2409) * _2423))) * _2423;
    float _4489 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
    float _2458 = (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (_2432 / ((_2436 * _2436) * 3.141590118408203125));
    float _2468 = (((_2445 * cbLight._m0[_2397].x) * _2458) * _2092) + ((((cbLight._m0[_2316].x * _2058) * _2369) * _2383) * _2105);
    float _2469 = (((_2445 * cbLight._m0[_2397].y) * _2458) * _2092) + ((((cbLight._m0[_2316].y * _2060) * _2369) * _2383) * _2105);
    float _2470 = (((_2445 * cbLight._m0[_2397].z) * _2458) * _2092) + ((((cbLight._m0[_2316].z * _2062) * _2369) * _2383) * _2105);
    float _2526;
    float _2528;
    float _2530;
    if (_2145)
    {
        _2526 = _2468;
        _2528 = _2469;
        _2530 = _2470;
    }
    else
    {
        uint _2532 = _2069 + 2u;
        uint _2536 = _2069 + 10u;
        float _2550 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2532].w)) * _621) * 0.949999988079071044921875);
        float _2551 = _2550 * _2550;
        float _2552 = cbLight._m0[_2532].x + _697;
        float _2553 = cbLight._m0[_2532].y + _698;
        float _2554 = cbLight._m0[_2532].z + _699;
        float _2558 = inversesqrt(dot(vec3(_2552, _2553, _2554), vec3(_2552, _2553, _2554)));
        float _2559 = _2558 * _2552;
        float _2560 = _2558 * _2553;
        float _2561 = _2558 * _2554;
        float _2562 = dot(vec3(_618, _619, _620), vec3(cbLight._m0[_2532].xyz));
        float _4500 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        float _2565 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _2566 = dot(vec3(_618, _619, _620), vec3(_2559, _2560, _2561));
        float _4511 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2569 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _2570 = dot(vec3(cbLight._m0[_2532].xyz), vec3(_2559, _2560, _2561));
        float _4522 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2574 = _2551 * _2551;
        float _2578 = ((_2569 * _2569) * (_2574 + (-1.0))) + 1.0;
        float _2587 = (exp2(log2(1.0 - (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2588 = 1.0 - _2551;
        float _2598 = (0.5 / (((_2345 * ((_2565 * _2588) + _2551)) + 9.9999999392252902907785028219223e-09) + (((_2345 * _2588) + _2551) * _2565))) * _2565;
        float _4533 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
        float _2600 = (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (_2574 / ((_2578 * _2578) * 3.141590118408203125));
        float _2601 = isnan(1.0) ? _2084 : (isnan(_2084) ? 1.0 : min(_2084, 1.0));
        _2526 = (((_2587 * cbLight._m0[_2536].x) * _2600) * _2601) + _2468;
        _2528 = (((_2587 * cbLight._m0[_2536].y) * _2600) * _2601) + _2469;
        _2530 = (((_2587 * cbLight._m0[_2536].z) * _2600) * _2601) + _2470;
    }
    float _2632;
    float _2634;
    float _2636;
    if (_2254)
    {
        _2632 = _2526;
        _2634 = _2528;
        _2636 = _2530;
    }
    else
    {
        uint _2643 = _2069 + 3u;
        uint _2647 = _2069 + 11u;
        float _2661 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2643].w)) * _621) * 0.949999988079071044921875);
        float _2662 = _2661 * _2661;
        float _2663 = cbLight._m0[_2643].x + _697;
        float _2664 = cbLight._m0[_2643].y + _698;
        float _2665 = cbLight._m0[_2643].z + _699;
        float _2669 = inversesqrt(dot(vec3(_2663, _2664, _2665), vec3(_2663, _2664, _2665)));
        float _2670 = _2669 * _2663;
        float _2671 = _2669 * _2664;
        float _2672 = _2669 * _2665;
        float _2673 = dot(vec3(_618, _619, _620), vec3(cbLight._m0[_2643].xyz));
        float _4549 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
        float _2676 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
        float _2677 = dot(vec3(_618, _619, _620), vec3(_2670, _2671, _2672));
        float _4560 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
        float _2680 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
        float _2681 = dot(vec3(cbLight._m0[_2643].xyz), vec3(_2670, _2671, _2672));
        float _4571 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        float _2685 = _2662 * _2662;
        float _2689 = ((_2680 * _2680) * (_2685 + (-1.0))) + 1.0;
        float _2698 = (exp2(log2(1.0 - (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2699 = 1.0 - _2662;
        float _2709 = (0.5 / (((_2345 * ((_2676 * _2699) + _2662)) + 9.9999999392252902907785028219223e-09) + (((_2345 * _2699) + _2662) * _2676))) * _2676;
        float _4582 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
        float _2711 = (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (_2685 / ((_2689 * _2689) * 3.141590118408203125));
        float _2712 = isnan(1.0) ? _2085 : (isnan(_2085) ? 1.0 : min(_2085, 1.0));
        _2632 = (((_2698 * cbLight._m0[_2647].x) * _2711) * _2712) + _2526;
        _2634 = (((_2698 * cbLight._m0[_2647].y) * _2711) * _2712) + _2528;
        _2636 = (((_2698 * cbLight._m0[_2647].z) * _2711) * _2712) + _2530;
    }
    float _2778;
    float _2780;
    float _2782;
    float _2784;
    float _2786;
    float _2788;
    if (_2067.y == 0u)
    {
        uvec4 _2733 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2734 = _2733.x;
        uint _2745 = uint((float(_2733.y) * floor(float(uint(cbSceneParam._m0[85u].y * _706) / _2734))) + floor(float(uint(cbSceneParam._m0[85u].x * _705) / _2734)));
        float _2755 = (log2(_1845 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2756 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
        uint _2759 = uint(isnan(14.0) ? _2756 : (isnan(_2756) ? 14.0 : min(_2756, 14.0)));
        uvec4 _2764 = texelFetch(g_lightClusterGridBuffer, int(((_2759 << 2u) + (_2745 << 6u)) >> 2u));
        uint _2765 = _2764.x;
        uint _2766 = _2733.z;
        float _2874;
        float _2876;
        float _2878;
        float _2880;
        float _2882;
        float _2884;
        if (((((1u << ((_2766 >> 4u) & 15u)) + 4294967295u) & _2765) == 0u) || ((_2766 & 240u) == 0u))
        {
            _2874 = 0.0;
            _2876 = 0.0;
            _2878 = 0.0;
            _2880 = 0.0;
            _2882 = 0.0;
            _2884 = 0.0;
        }
        else
        {
            float _2875;
            float _2877;
            float _2879;
            float _2881;
            float _2883;
            float _2885;
            float _3028 = 0.0;
            float _3029 = 0.0;
            float _3030 = 0.0;
            float _3031 = 0.0;
            float _3032 = 0.0;
            float _3033 = 0.0;
            uint _3034 = 0u;
            uint _3043;
            bool _3044;
            for (;;)
            {
                _3043 = texelFetch(g_lightClassification, int((((_2759 << 5u) + (_2745 << 9u)) + (_3034 << 2u)) >> 2u)).x;
                _3044 = _3043 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3044)
                {
                    frontier_phi_66_pred = _3033;
                    frontier_phi_66_pred_1 = _3032;
                    frontier_phi_66_pred_2 = _3031;
                    frontier_phi_66_pred_3 = _3030;
                    frontier_phi_66_pred_4 = _3029;
                    frontier_phi_66_pred_5 = _3028;
                }
                else
                {
                    float _3152;
                    float _3153;
                    float _3154;
                    float _3155;
                    float _3156;
                    float _3157;
                    uint _3158;
                    _3152 = _3028;
                    _3153 = _3029;
                    _3154 = _3030;
                    _3155 = _3031;
                    _3156 = _3032;
                    _3157 = _3033;
                    _3158 = _3043;
                    float _3084;
                    float _3085;
                    float _3086;
                    float _3087;
                    float _3088;
                    float _3089;
                    for (;;)
                    {
                        uint _3162 = uint(findLSB(_3158)) + (_3034 << 5u);
                        uint _3159 = (_3158 + 4294967295u) & _3158;
                        uint _3164 = _3162 * 48u;
                        vec4 _3178 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3164)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 3u)).x));
                        uint _3184 = (_3162 * 48u) + 4u;
                        vec4 _3197 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3184)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 3u)).x));
                        uint _3203 = (_3162 * 48u) + 8u;
                        vec3 _3214 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3203)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 2u)).x));
                        float _3218 = _3178.x - _1843;
                        float _3219 = _3178.y - _1844;
                        float _3220 = _3178.z - _1845;
                        float _3221 = dot(vec3(_3218, _3219, _3220), vec3(_3218, _3219, _3220));
                        float _3224 = inversesqrt(_3221);
                        float _3225 = _3224 * _3218;
                        float _3226 = _3224 * _3219;
                        float _3227 = _3224 * _3220;
                        float _3228 = dot(vec3(_726, _729, _732), vec3(_3225, _3226, _3227));
                        float _3233 = 1.0 - (_3221 * _3178.w);
                        float _4608 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                        float _3234 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
                        float _3235 = sqrt(_3221) * _3197.w;
                        float _3238 = 1.39999997615814208984375 / (_3235 + 1.39999997615814208984375);
                        float _3239 = _3238 * _3238;
                        float _3242 = ((1.0 - _3239) * _3228) + _3239;
                        float _3245 = _3235 * _3235;
                        float _3249 = ((isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0))) * _3234) / ((_3245 * 0.699999988079071044921875) + 1.0);
                        float _3253 = (-0.0) - _1843;
                        float _3254 = (-0.0) - _1844;
                        float _3255 = (-0.0) - _1845;
                        float _3259 = inversesqrt(dot(vec3(_3253, _3254, _3255), vec3(_3253, _3254, _3255)));
                        float _3260 = _3259 * _3253;
                        float _3261 = _3259 * _3254;
                        float _3262 = _3259 * _3255;
                        float _3269 = exp2(log2(1.0 / ((_3245 * 3.5) + 5.0)) * 0.25);
                        float _3270 = 1.0 - _786;
                        float _3277 = sqrt(1.0 - ((1.0 - (_3270 * _3270)) * (1.0 - (_3269 * _3269))));
                        float _3278 = _3277 * _3277;
                        float _3279 = _3278 * _3278;
                        float _3280 = _3260 + _3225;
                        float _3281 = _3261 + _3226;
                        float _3282 = _3262 + _3227;
                        float _3286 = inversesqrt(dot(vec3(_3280, _3281, _3282), vec3(_3280, _3281, _3282)));
                        float _3290 = dot(vec3(_726, _729, _732), vec3(_3260, _3261, _3262));
                        float _4624 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                        float _3293 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
                        float _3294 = dot(vec3(_726, _729, _732), vec3(_3286 * _3280, _3286 * _3281, _3286 * _3282));
                        float _4635 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                        float _3297 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
                        float _3301 = ((_3297 * _3297) * (_3279 + (-1.0))) + 1.0;
                        float _3302 = _3238 * _3278;
                        float _3303 = _3302 * _3302;
                        float _3306 = ((1.0 - _3303) * _3228) + _3303;
                        float _4646 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                        float _3307 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                        float _3308 = 1.0 - _3278;
                        float _3318 = (0.5 / (((_3307 * ((_3293 * _3308) + _3278)) + 9.9999999392252902907785028219223e-09) + (((_3307 * _3308) + _3278) * _3293))) * _3307;
                        float _4657 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                        float _3329 = (((_3279 * 3.1415927410125732421875) * (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0)))) / ((_3301 * _3301) * ((_3245 * 2.1991131305694580078125) + 3.141590118408203125))) * _3234;
                        _3087 = (_3249 * _3197.x) + _3155;
                        _3088 = (_3249 * _3197.y) + _3156;
                        _3089 = (_3249 * _3197.z) + _3157;
                        _3084 = (_3329 * _3214.x) + _3152;
                        _3085 = (_3329 * _3214.y) + _3153;
                        _3086 = (_3329 * _3214.z) + _3154;
                        if (_3159 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3152 = _3084;
                            _3153 = _3085;
                            _3154 = _3086;
                            _3155 = _3087;
                            _3156 = _3088;
                            _3157 = _3089;
                            _3158 = _3159;
                        }
                    }
                    frontier_phi_66_pred = _3089;
                    frontier_phi_66_pred_1 = _3088;
                    frontier_phi_66_pred_2 = _3087;
                    frontier_phi_66_pred_3 = _3086;
                    frontier_phi_66_pred_4 = _3085;
                    frontier_phi_66_pred_5 = _3084;
                }
                _2885 = frontier_phi_66_pred;
                _2883 = frontier_phi_66_pred_1;
                _2881 = frontier_phi_66_pred_2;
                _2879 = frontier_phi_66_pred_3;
                _2877 = frontier_phi_66_pred_4;
                _2875 = frontier_phi_66_pred_5;
                uint _3035 = _3034 + 1u;
                if (_3035 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3028 = _2875;
                    _3029 = _2877;
                    _3030 = _2879;
                    _3031 = _2881;
                    _3032 = _2883;
                    _3033 = _2885;
                    _3034 = _3035;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2874 = _2875;
            _2876 = _2877;
            _2878 = _2879;
            _2880 = _2881;
            _2882 = _2883;
            _2884 = _2885;
        }
        uvec4 _2888 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2889 = _2888.z;
        uint _2891 = (_2889 >> 8u) & 15u;
        float _2996;
        float _2998;
        float _3000;
        float _3002;
        float _3004;
        float _3006;
        if (((4294967295u << _2891) & _2765) == 0u)
        {
            _2996 = _2874;
            _2998 = _2876;
            _3000 = _2878;
            _3002 = _2880;
            _3004 = _2882;
            _3006 = _2884;
        }
        else
        {
            float _3021 = inversesqrt(dot(vec3(_1843, _1844, _1845), vec3(_1843, _1844, _1845)));
            float _3022 = _3021 * _1843;
            float _3023 = _3021 * _1844;
            float _3024 = _3021 * _1845;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2891 < ((_2889 >> 12u) & 15u))
            {
                float _2997;
                float _2999;
                float _3001;
                float _3003;
                float _3005;
                float _3007;
                float _3135 = _2874;
                float _3136 = _2876;
                float _3137 = _2878;
                float _3138 = _2880;
                float _3139 = _2882;
                float _3140 = _2884;
                uint _3141 = _2891;
                uint _3150;
                bool _3151;
                for (;;)
                {
                    _3150 = texelFetch(g_lightClassification, int((((_2759 << 5u) + (_2745 << 9u)) + (_3141 << 2u)) >> 2u)).x;
                    _3151 = _3150 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3151)
                    {
                        frontier_phi_72_pred = _3140;
                        frontier_phi_72_pred_1 = _3139;
                        frontier_phi_72_pred_2 = _3138;
                        frontier_phi_72_pred_3 = _3137;
                        frontier_phi_72_pred_4 = _3136;
                        frontier_phi_72_pred_5 = _3135;
                    }
                    else
                    {
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3629;
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3634;
                        float _3347 = _3135;
                        float _3348 = _3136;
                        float _3349 = _3137;
                        float _3350 = _3138;
                        float _3351 = _3139;
                        float _3352 = _3140;
                        uint _3353 = _3150;
                        uint _3354;
                        vec4 _3379;
                        float _3380;
                        vec4 _3395;
                        vec3 _3407;
                        vec4 _3422;
                        vec4 _3438;
                        float _3485;
                        bool _3486;
                        for (;;)
                        {
                            uint _3364 = ((_3141 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3353));
                            _3354 = (_3353 + 4294967295u) & _3353;
                            uint _3366 = _3364 * 40u;
                            _3379 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3366)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 3u)).x));
                            _3380 = _3379.w;
                            uint _3382 = (_3364 * 40u) + 4u;
                            _3395 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 3u)).x));
                            uint _3397 = (_3364 * 40u) + 8u;
                            _3407 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x));
                            uint _3409 = (_3364 * 40u) + 16u;
                            _3422 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3409)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 3u)).x));
                            uint _3425 = (_3364 * 40u) + 20u;
                            _3438 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3425)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 3u)).x));
                            uint _3441 = (_3364 * 40u) + 24u;
                            vec4 _3454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 3u)).x));
                            uint _3460 = (_3364 * 40u) + 28u;
                            vec4 _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            _3485 = fma(_1845, _3473.z, fma(_1844, _3473.y, _3473.x * _1843)) + _3473.w;
                            _3486 = !((fma(_1845, _3454.z, fma(_1844, _3454.y, _3454.x * _1843)) + _3454.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3486)
                            {
                                float _3513 = _3379.x - _1843;
                                float _3514 = _3379.y - _1844;
                                float _3515 = _3379.z - _1845;
                                float _3516 = dot(vec3(_3513, _3514, _3515), vec3(_3513, _3514, _3515));
                                float _3519 = inversesqrt(_3516);
                                float _3520 = _3519 * _3513;
                                float _3521 = _3519 * _3514;
                                float _3522 = _3519 * _3515;
                                float _3526 = 1.0 - (_3516 / (_3380 * _3380));
                                float _4668 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                                float _3527 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                                float _3531 = sqrt(_3516) * _3395.w;
                                float _3533 = 1.39999997615814208984375 / (_3531 + 1.39999997615814208984375);
                                float _3534 = _3533 * _3533;
                                float _3537 = ((1.0 - _3534) * dot(vec3(_3520, _3521, _3522), vec3(_726, _729, _732))) + _3534;
                                float _3540 = _3531 * _3531;
                                float _3544 = (fma(_1845, _3422.z, fma(_1844, _3422.y, _3422.x * _1843)) + _3422.w) / _3485;
                                float _3545 = (fma(_1845, _3438.z, fma(_1844, _3438.y, _3438.x * _1843)) + _3438.w) / _3485;
                                float _3549 = 1.0 - dot(vec2(_3544, _3545), vec2(_3544, _3545));
                                float _4684 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                                float _3550 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
                                float _3551 = _3550 * (((isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0))) * _3527) / ((_3540 * 0.699999988079071044921875) + 1.0));
                                float _3563 = exp2(log2(1.0 / ((_3540 * 3.5) + 5.0)) * 0.25);
                                float _3564 = 1.0 - _786;
                                float _3571 = sqrt(1.0 - ((1.0 - (_3564 * _3564)) * (1.0 - (_3563 * _3563))));
                                float _3572 = _3571 * _3571;
                                float _3573 = _3572 * _3572;
                                float _3574 = _3520 - _3022;
                                float _3575 = _3521 - _3023;
                                float _3576 = _3522 - _3024;
                                float _3580 = inversesqrt(dot(vec3(_3574, _3575, _3576), vec3(_3574, _3575, _3576)));
                                float _3584 = dot(vec3(_726, _729, _732), vec3((-0.0) - _3022, (-0.0) - _3023, (-0.0) - _3024));
                                float _4695 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                                float _3587 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
                                float _3588 = dot(vec3(_726, _729, _732), vec3(_3580 * _3574, _3580 * _3575, _3580 * _3576));
                                float _4706 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                                float _3591 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
                                float _3595 = ((_3591 * _3591) * (_3573 + (-1.0))) + 1.0;
                                float _3596 = _3533 * _3572;
                                float _3597 = _3596 * _3596;
                                float _3603 = ((1.0 - _3597) * dot(vec3(_726, _729, _732), vec3(_3520, _3521, _3522))) + _3597;
                                float _4717 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                                float _3604 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                                float _3605 = 1.0 - _3572;
                                float _3615 = (0.5 / (((_3604 * ((_3587 * _3605) + _3572)) + 9.9999999392252902907785028219223e-09) + (((_3604 * _3605) + _3572) * _3587))) * _3604;
                                float _4728 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                                float _3625 = (_3550 * _3527) * (((_3573 * 3.1415927410125732421875) * (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0)))) / ((_3595 * _3595) * ((_3540 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3551 * _3395.y;
                                frontier_phi_78_pred_1 = _3551 * _3395.x;
                                frontier_phi_78_pred_2 = _3625 * _3407.z;
                                frontier_phi_78_pred_3 = _3625 * _3407.y;
                                frontier_phi_78_pred_4 = _3625 * _3407.x;
                                frontier_phi_78_pred_5 = _3551 * _3395.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3633 = frontier_phi_78_pred;
                            _3632 = frontier_phi_78_pred_1;
                            _3631 = frontier_phi_78_pred_2;
                            _3630 = frontier_phi_78_pred_3;
                            _3629 = frontier_phi_78_pred_4;
                            _3634 = frontier_phi_78_pred_5;
                            _3337 = _3632 + _3350;
                            _3338 = _3633 + _3351;
                            _3339 = _3634 + _3352;
                            _3334 = _3629 + _3347;
                            _3335 = _3630 + _3348;
                            _3336 = _3631 + _3349;
                            if (_3354 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3347 = _3334;
                                _3348 = _3335;
                                _3349 = _3336;
                                _3350 = _3337;
                                _3351 = _3338;
                                _3352 = _3339;
                                _3353 = _3354;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3339;
                        frontier_phi_72_pred_1 = _3338;
                        frontier_phi_72_pred_2 = _3337;
                        frontier_phi_72_pred_3 = _3336;
                        frontier_phi_72_pred_4 = _3335;
                        frontier_phi_72_pred_5 = _3334;
                    }
                    _3007 = frontier_phi_72_pred;
                    _3005 = frontier_phi_72_pred_1;
                    _3003 = frontier_phi_72_pred_2;
                    _3001 = frontier_phi_72_pred_3;
                    _2999 = frontier_phi_72_pred_4;
                    _2997 = frontier_phi_72_pred_5;
                    uint _3142 = _3141 + 1u;
                    if (_3142 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3135 = _2997;
                        _3136 = _2999;
                        _3137 = _3001;
                        _3138 = _3003;
                        _3139 = _3005;
                        _3140 = _3007;
                        _3141 = _3142;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3007;
                frontier_phi_60_61_ladder_1 = _3005;
                frontier_phi_60_61_ladder_2 = _3001;
                frontier_phi_60_61_ladder_3 = _2999;
                frontier_phi_60_61_ladder_4 = _2997;
                frontier_phi_60_61_ladder_5 = _3003;
            }
            else
            {
                frontier_phi_60_61_ladder = _2884;
                frontier_phi_60_61_ladder_1 = _2882;
                frontier_phi_60_61_ladder_2 = _2878;
                frontier_phi_60_61_ladder_3 = _2876;
                frontier_phi_60_61_ladder_4 = _2874;
                frontier_phi_60_61_ladder_5 = _2880;
            }
            _2996 = frontier_phi_60_61_ladder_4;
            _2998 = frontier_phi_60_61_ladder_3;
            _3000 = frontier_phi_60_61_ladder_2;
            _3002 = frontier_phi_60_61_ladder_5;
            _3004 = frontier_phi_60_61_ladder_1;
            _3006 = frontier_phi_60_61_ladder;
        }
        float _3011 = isnan(1.0) ? _770 : (isnan(_770) ? 1.0 : min(_770, 1.0));
        _2778 = (_3011 * _3002) + _2309;
        _2780 = (_3011 * _3004) + _2311;
        _2782 = (_3011 * _3006) + _2313;
        _2784 = ((_2996 * 0.039999999105930328369140625) * _3011) + _2632;
        _2786 = ((_2998 * 0.039999999105930328369140625) * _3011) + _2634;
        _2788 = ((_3000 * 0.039999999105930328369140625) * _3011) + _2636;
    }
    else
    {
        _2778 = _2309;
        _2780 = _2311;
        _2782 = _2313;
        _2784 = _2632;
        _2786 = _2634;
        _2788 = _2636;
    }
    uint _2794 = _746 + uint(cbMatDynParam._m0[0u].w);
    float _2800 = cbInstanceData._m0[_2794].x * (_528 - (_544 * _528));
    float _2801 = cbInstanceData._m0[_2794].y * (_529 - (_544 * _529));
    float _2802 = cbInstanceData._m0[_2794].z * (_530 - (_544 * _530));
    float _4744 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _4755 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _4766 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _2819 = (((isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0))) * (_2778 + ((isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))) * _770))) + ((_2784 + ((isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))) * _1577)) * cbPerFrame._m0[3u].x)) + _2800;
    float _2821 = (_2801 + ((_2786 + ((isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))) * _1577)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0))) * (_2780 + ((isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))) * _770)));
    float _2823 = (_2802 + ((_2788 + ((isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))) * _1577)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0))) * (_2782 + ((isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))) * _770)));
    float _4792 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2836 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
    uint _2837 = _745 + 6u;
    float _2845 = _705 / cbSceneParam._m0[86u].x;
    float _2846 = _706 / cbSceneParam._m0[86u].y;
    vec4 _2860 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2845, _2846, (log2((isnan(cbSceneParam._m0[77u].w) ? _640 : (isnan(_640) ? cbSceneParam._m0[77u].w : min(_640, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2862 = _2860.x;
    float _2863 = _2860.y;
    float _2864 = _2860.z;
    float _2865 = _2860.w;
    float _2937;
    float _2939;
    float _2941;
    float _2943;
    if (_640 > cbSceneParam._m0[78u].w)
    {
        float _2899 = isnan(_640) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _640 : min(cbSceneParam._m0[80u].w, _640));
        float _2900 = _2899 / _640;
        float _2911 = _2900 * _690;
        float _2912 = _691 * _2900;
        float _2913 = (-0.0) - _2912;
        float _2915 = _2900 * _692;
        float _2917 = (cbSceneParam._m0[77u].w * _2913) / _2899;
        float _2918 = _2917 + cbSceneParam._m0[79u].w;
        float _2919 = cbSceneParam._m0[79u].w - _2912;
        float _2925 = sqrt(((_2911 * _2911) + (_2912 * _2912)) + (_2915 * _2915));
        float _2928 = (1.0 - (cbSceneParam._m0[77u].w / _2899)) * _2925;
        float _2933 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2935 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3097;
        if (abs((_2913 - _2917) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3097 = ((((_2918 > 0.0) ? exp2(_2933 * _2918) : (2.0 - exp2(_2935 * _2918))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2928;
        }
        else
        {
            float _3057 = 1.0 / cbSceneParam._m0[80u].x;
            float _3058 = isnan(_2919) ? _2918 : (isnan(_2918) ? _2919 : max(_2918, _2919));
            float _3059 = isnan(_2919) ? _2918 : (isnan(_2918) ? _2919 : min(_2918, _2919));
            float _3068 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : min(_3058, 0.0));
            float _3069 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : min(_3059, 0.0));
            _3097 = ((abs(_2925 / _2913) * cbSceneParam._m0[80u].y) * ((((_3068 - _3069) * 2.0) - ((exp2(_2933 * (isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0)))) - exp2(_2933 * (isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0))))) * _3057)) - ((exp2(_2935 * _3068) - exp2(_2935 * _3069)) * _3057))) + (_2928 * cbSceneParam._m0[80u].z);
        }
        vec4 _3099 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2845, _2846, 1.0), 0.0);
        float _3108 = exp2((_3097 * (-1.44269502162933349609375)) * (1.0 - _3099.w));
        float _3109 = log2(_3108);
        float _3125 = log2(_2865);
        _2937 = (exp2(_3125 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3109 * cbSceneParam._m0[78u].x)) * _3099.x) / cbSceneParam._m0[78u].x)) + _2862;
        _2939 = (exp2(_3125 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3109 * cbSceneParam._m0[78u].y)) * _3099.y) / cbSceneParam._m0[78u].y)) + _2863;
        _2941 = (exp2(_3125 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3109 * cbSceneParam._m0[78u].z)) * _3099.z) / cbSceneParam._m0[78u].z)) + _2864;
        _2943 = _3108 * _2865;
    }
    else
    {
        _2937 = _2862;
        _2939 = _2863;
        _2941 = _2864;
        _2943 = _2865;
    }
    float _2955 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2956 = _2955 == 3.0;
    float _2957 = log2(_2943);
    float _2961 = exp2(_2957 * cbSceneParam._m0[78u].x);
    float _2962 = exp2(_2957 * cbSceneParam._m0[78u].y);
    float _2963 = exp2(_2957 * cbSceneParam._m0[78u].z);
    float _2964 = _2961 * (isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0)));
    float _2965 = _2962 * (isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0)));
    float _2966 = _2963 * (isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0)));
    float _2975 = (_2955 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2975 * (_2956 ? _2964 : (_2964 + (cbSceneParam._m0[72u].w * _2937)));
    SV_Target.y = _2975 * (_2956 ? _2965 : (_2965 + (cbSceneParam._m0[72u].w * _2939)));
    SV_Target.z = _2975 * (_2956 ? _2966 : (_2966 + (cbSceneParam._m0[72u].w * _2941)));
    SV_Target.w = cbInstanceData._m0[_2837].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2800) * _2836) * _2961) * _2975;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2801) * _2836) * _2962) * _2975;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2802) * _2836) * _2963) * _2975;
    SV_Target_1.w = cbInstanceData._m0[_2837].w;
}


