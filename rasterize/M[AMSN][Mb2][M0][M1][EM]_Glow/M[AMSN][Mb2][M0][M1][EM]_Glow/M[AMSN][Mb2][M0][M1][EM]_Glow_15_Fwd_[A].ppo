#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1182;
float _3583;
float _3584;
float _3585;
float _3586;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _253 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _259 = _253.x * cbMtdParam._m0[9u].x;
    float _260 = _253.y * cbMtdParam._m0[9u].y;
    float _261 = _253.z * cbMtdParam._m0[9u].z;
    vec4 _299 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _315 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3595 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _316 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
    float _323 = (((_299.x * cbMtdParam._m0[10u].x) - _259) * _316) + _259;
    float _324 = (((_299.y * cbMtdParam._m0[10u].y) - _260) * _316) + _260;
    float _325 = (((_299.z * cbMtdParam._m0[10u].z) - _261) * _316) + _261;
    vec4 _345 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _364 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_345.x + 0.00999999977648258209228515625));
    float _366 = _364 * (cbMtdParam._m0[15u].x + 1.0);
    float _3606 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _367 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _375 = ((((cbMtdParam._m0[12u].x - _323) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _367) + _323;
    float _376 = ((((cbMtdParam._m0[12u].y - _324) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _367) + _324;
    float _377 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _325)) * _367) + _325;
    vec4 _390 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _398 = (_390.x * 2.0) + (-1.0);
    float _400 = (_390.y * 2.0) + (-1.0);
    float _401 = dot(vec2(_398, _400), vec2(_398, _400));
    float _3617 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    vec4 _418 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _422 = _418.z;
    float _425 = (_418.x * 2.0) + (-1.0);
    float _426 = (_418.y * 2.0) + (-1.0);
    float _427 = dot(vec2(_425, _426), vec2(_425, _426));
    float _3628 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _432 = sqrt(1.0 - (isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))));
    float _435 = (_316 * (_390.z - _422)) + _422;
    float _438 = _364 * (cbMtdParam._m0[14u].w + 1.0);
    float _3639 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _442 = ((cbMtdParam._m0[14u].y - _435) * (isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0)))) + _435;
    vec4 _469 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _484 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _526 = (TEXCOORD_6.x - ((cbMtdParam._m0[13u].w * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_5, SS_WrapLinear), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].x + 1.0);
    float _3650 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _527 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
    float _528 = ((_484.x + _469.x) * cbMtdParam._m0[11u].x) * _527;
    float _529 = ((_484.y + _469.y) * cbMtdParam._m0[11u].y) * _527;
    float _530 = ((_484.z + _469.z) * cbMtdParam._m0[11u].z) * _527;
    vec4 _542 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[9u].w));
    float _544 = _542.x;
    float _557 = (_316 * (_398 - _425)) + _425;
    float _558 = (_316 * (_400 - _426)) + _426;
    float _559 = (_316 * (sqrt(1.0 - (isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0)))) - _432)) + _432;
    vec4 _578 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _584 = (_578.x * 2.0) + (-1.0);
    float _585 = (_578.y * 2.0) + (-1.0);
    float _586 = dot(vec2(_584, _585), vec2(_584, _585));
    float _3661 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _602 = (_367 * (((_557 * cbMtdParam._m0[13u].z) - _557) + _584)) + _557;
    float _603 = (_367 * (((_558 * cbMtdParam._m0[13u].z) - _558) + _585)) + _558;
    float _604 = (_367 * (sqrt(1.0 - (isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0)))) - _559)) + _559;
    float _607 = fma(_604, _224 * NORMAL.x, fma(_603, _231 * TANGENT.x, (_217 * _209) * _602));
    float _610 = fma(_604, _224 * NORMAL.y, fma(_603, _231 * TANGENT.y, (_217 * _210) * _602));
    float _613 = fma(_604, _224 * NORMAL.z, fma(_603, _231 * TANGENT.z, (_217 * _211) * _602));
    float _617 = inversesqrt(dot(vec3(_607, _610, _613), vec3(_607, _610, _613)));
    float _618 = _617 * _607;
    float _619 = _617 * _610;
    float _620 = _617 * _613;
    float _3672 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _621 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
    float _3683 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _3694 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _3705 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _640 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _680 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _690 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _680);
    float _691 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _680);
    float _692 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _680);
    float _696 = inversesqrt(dot(vec3(_690, _691, _692), vec3(_690, _691, _692)));
    float _697 = _690 * _696;
    float _698 = _691 * _696;
    float _699 = _692 * _696;
    vec4 _704 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _706 = _704.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _862 = sqrt(((_690 * _690) + (_691 * _691)) + (_692 * _692));
        float _868 = (cbMatDynParam._m0[5u].x * _862) + cbMatDynParam._m0[5u].y;
        float _3716 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _869 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _873 = (cbMatDynParam._m0[5u].z * _862) + cbMatDynParam._m0[5u].w;
        float _3727 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) - _869)) + _869) < ((_706 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _718 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _719 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _738 = fma(_620, cbSceneParam._m0[5u].z, fma(_619, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _618));
    float _741 = fma(_620, cbSceneParam._m0[6u].z, fma(_619, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _618));
    float _744 = fma(_620, cbSceneParam._m0[7u].z, fma(_619, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _618));
    uint _757 = uint(roundEven(NORMAL.w)) * 13u;
    uint _758 = _757 + 9u;
    uint _759 = _758 + uint(cbMatDynParam._m0[0u].w);
    float _765 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0)))) * cbInstanceData._m0[_759].x;
    float _766 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0)))) * cbInstanceData._m0[_759].y;
    float _767 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0)))) * cbInstanceData._m0[_759].z;
    float _3738 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _768 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    float _3749 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _769 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
    float _3760 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _770 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    vec4 _779 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _718, cbSceneParam._m0[86u].y * _719));
    float _782 = _779.x * TEXCOORD_3.w;
    float _783 = dot(vec3(_618, _619, _620), vec3(_697, _698, _699));
    float _786 = _783 * 2.0;
    float _790 = (_786 * _618) - _697;
    float _791 = (_786 * _619) - _698;
    float _792 = (_786 * _620) - _699;
    float _796 = abs(dot(vec3(_697, _698, _699), vec3(_618, _619, _620)));
    float _3771 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _798 = sqrt(_621);
    float _811 = exp2((_798 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_798 * 3.0));
    float _843 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _847 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _851 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1181;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _906 = fma(_851, cbModelParam._m0[26u].z, fma(_847, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _843));
        float _910 = fma(_851, cbModelParam._m0[27u].z, fma(_847, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _843));
        float _914 = fma(_851, cbModelParam._m0[28u].z, fma(_847, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _843));
        float _939 = _843 + _618;
        float _940 = _847 + _619;
        float _941 = _851 + _620;
        float _951 = fma(_941, cbModelParam._m0[26u].z, fma(_940, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _939)) - _906;
        float _952 = fma(_941, cbModelParam._m0[27u].z, fma(_940, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _939)) - _910;
        float _953 = fma(_941, cbModelParam._m0[28u].z, fma(_940, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _939)) - _914;
        float _957 = inversesqrt(dot(vec3(_951, _952, _953), vec3(_951, _952, _953)));
        float _970 = ((_957 * _951) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_906 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _971 = ((_957 * _952) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_910 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _972 = ((_957 * _953) / cbModelParam._m0[34u].z) + ((((((_914 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        float _1009 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_975.x + (-0.5));
        float _1011 = _1009 * (_975.y + (-0.5));
        float _1012 = _1009 * (_975.z + (-0.5));
        float _1019 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_982.x + (-0.5));
        float _1021 = _1019 * (_982.y + (-0.5));
        float _1022 = _1019 * (_982.z + (-0.5));
        float _1029 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_989.x + (-0.5));
        float _1031 = _1029 * (_989.y + (-0.5));
        float _1032 = _1029 * (_989.z + (-0.5));
        float _1039 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = _1039 * (_996.x + (-0.5));
        float _1041 = _1039 * (_996.y + (-0.5));
        float _1042 = _1039 * (_996.z + (-0.5));
        float _1043 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1044 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1045 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1046 = _1010 * 0.5;
        float _1047 = _1020 * 0.5;
        float _1048 = _1030 * 0.5;
        float _1049 = dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048));
        float _1054 = (_1049 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1049);
        float _1063 = (dot(vec3(_618, _619, _620), vec3(_1054 * _1046, _1054 * _1047, _1054 * _1048)) + 1.0) * 0.5;
        float _3797 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1073 = sqrt(((_1047 * _1047) + (_1046 * _1046)) + (_1048 * _1048)) / (_1043 + 9.9999997473787516355514526367188e-06);
        float _3808 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1075 = _1074 * 2.0;
        float _1079 = (1.0 - _1074) / (_1074 + 1.0);
        float _3819 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1089 = ((((1.0 - _1080) * (_1075 + 2.0)) * exp2(log2(isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * (_1075 + 1.0))) + _1080) * _1043;
        float _1090 = _1011 * 0.5;
        float _1091 = _1021 * 0.5;
        float _1092 = _1031 * 0.5;
        float _1093 = dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092));
        float _1098 = (_1093 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1093);
        float _1106 = (dot(vec3(_618, _619, _620), vec3(_1098 * _1090, _1098 * _1091, _1098 * _1092)) + 1.0) * 0.5;
        float _3830 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1115 = sqrt(((_1091 * _1091) + (_1090 * _1090)) + (_1092 * _1092)) / (_1044 + 9.9999997473787516355514526367188e-06);
        float _3841 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1117 = _1116 * 2.0;
        float _1121 = (1.0 - _1116) / (_1116 + 1.0);
        float _3852 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1131 = ((((1.0 - _1122) * (_1117 + 2.0)) * exp2(log2(isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * (_1117 + 1.0))) + _1122) * _1044;
        float _1132 = _1012 * 0.5;
        float _1133 = _1022 * 0.5;
        float _1134 = _1032 * 0.5;
        float _1135 = dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134));
        float _1140 = (_1135 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1135);
        float _1148 = (dot(vec3(_618, _619, _620), vec3(_1140 * _1132, _1140 * _1133, _1140 * _1134)) + 1.0) * 0.5;
        float _3863 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1157 = sqrt(((_1133 * _1133) + (_1132 * _1132)) + (_1134 * _1134)) / (_1045 + 9.9999997473787516355514526367188e-06);
        float _3874 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1159 = _1158 * 2.0;
        float _1163 = (1.0 - _1158) / (_1158 + 1.0);
        float _3885 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1173 = ((((1.0 - _1164) * (_1159 + 2.0)) * exp2(log2(isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * (_1159 + 1.0))) + _1164) * _1045;
        _1181 = _1012;
        _1183 = _1011;
        _1184 = _1010;
        _1185 = _1022;
        _1186 = _1021;
        _1187 = _1020;
        _1188 = _1032;
        _1189 = _1031;
        _1190 = _1030;
        _1191 = _1045;
        _1192 = _1044;
        _1193 = _1043;
        _1194 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0)));
        _1195 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0)));
        _1196 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)));
    }
    else
    {
        _1181 = _1182;
        _1183 = _1182;
        _1184 = _1182;
        _1185 = _1182;
        _1186 = _1182;
        _1187 = _1182;
        _1188 = _1182;
        _1189 = _1182;
        _1190 = _1182;
        _1191 = _1182;
        _1192 = _1182;
        _1193 = _1182;
        _1194 = 0.0;
        _1195 = 0.0;
        _1196 = 0.0;
    }
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1225 = fma(_851, cbModelParam._m0[30u].z, fma(_847, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _843));
        float _1229 = fma(_851, cbModelParam._m0[31u].z, fma(_847, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _843));
        float _1233 = fma(_851, cbModelParam._m0[32u].z, fma(_847, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _843));
        float _1256 = _843 + _618;
        float _1257 = _847 + _619;
        float _1258 = _851 + _620;
        float _1268 = fma(_1258, cbModelParam._m0[30u].z, fma(_1257, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1256)) - _1225;
        float _1269 = fma(_1258, cbModelParam._m0[31u].z, fma(_1257, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1256)) - _1229;
        float _1270 = fma(_1258, cbModelParam._m0[32u].z, fma(_1257, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1256)) - _1233;
        float _1274 = inversesqrt(dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270)));
        float _1287 = ((_1274 * _1268) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1225 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1288 = ((_1274 * _1269) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1229 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1289 = ((_1274 * _1270) / cbModelParam._m0[35u].z) + ((((((_1233 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1291 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1298 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1305 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1312 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        float _1324 = exp2((_1291.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1291.x + (-0.5));
        float _1326 = _1324 * (_1291.y + (-0.5));
        float _1327 = _1324 * (_1291.z + (-0.5));
        float _1334 = exp2((_1298.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1298.x + (-0.5));
        float _1336 = _1334 * (_1298.y + (-0.5));
        float _1337 = _1334 * (_1298.z + (-0.5));
        float _1344 = exp2((_1305.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1305.x + (-0.5));
        float _1346 = _1344 * (_1305.y + (-0.5));
        float _1347 = _1344 * (_1305.z + (-0.5));
        float _1354 = exp2((_1312.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1312.x + (-0.5));
        float _1356 = _1354 * (_1312.y + (-0.5));
        float _1357 = _1354 * (_1312.z + (-0.5));
        float _1358 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1359 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1360 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1361 = _1325 * 0.5;
        float _1362 = _1335 * 0.5;
        float _1363 = _1345 * 0.5;
        float _1364 = dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363));
        float _1369 = (_1364 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1364);
        float _1377 = (dot(vec3(_618, _619, _620), vec3(_1369 * _1361, _1369 * _1362, _1369 * _1363)) + 1.0) * 0.5;
        float _3926 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1386 = sqrt(((_1362 * _1362) + (_1361 * _1361)) + (_1363 * _1363)) / (_1358 + 9.9999997473787516355514526367188e-06);
        float _3937 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1388 = _1387 * 2.0;
        float _1392 = (1.0 - _1387) / (_1387 + 1.0);
        float _3948 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1402 = ((((1.0 - _1393) * (_1388 + 2.0)) * exp2(log2(isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * (_1388 + 1.0))) + _1393) * _1358;
        float _1403 = _1326 * 0.5;
        float _1404 = _1336 * 0.5;
        float _1405 = _1346 * 0.5;
        float _1406 = dot(vec3(_1403, _1404, _1405), vec3(_1403, _1404, _1405));
        float _1411 = (_1406 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1406);
        float _1419 = (dot(vec3(_618, _619, _620), vec3(_1411 * _1403, _1411 * _1404, _1411 * _1405)) + 1.0) * 0.5;
        float _3959 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1428 = sqrt(((_1404 * _1404) + (_1403 * _1403)) + (_1405 * _1405)) / (_1359 + 9.9999997473787516355514526367188e-06);
        float _3970 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1430 = _1429 * 2.0;
        float _1434 = (1.0 - _1429) / (_1429 + 1.0);
        float _3981 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1444 = ((((1.0 - _1435) * (_1430 + 2.0)) * exp2(log2(isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * (_1430 + 1.0))) + _1435) * _1359;
        float _1445 = _1327 * 0.5;
        float _1446 = _1337 * 0.5;
        float _1447 = _1347 * 0.5;
        float _1448 = dot(vec3(_1445, _1446, _1447), vec3(_1445, _1446, _1447));
        float _1453 = (_1448 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1448);
        float _1461 = (dot(vec3(_618, _619, _620), vec3(_1453 * _1445, _1453 * _1446, _1453 * _1447)) + 1.0) * 0.5;
        float _3992 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1470 = sqrt(((_1446 * _1446) + (_1445 * _1445)) + (_1447 * _1447)) / (_1360 + 9.9999997473787516355514526367188e-06);
        float _4003 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1472 = _1471 * 2.0;
        float _1476 = (1.0 - _1471) / (_1471 + 1.0);
        float _4014 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1486 = ((((1.0 - _1477) * (_1472 + 2.0)) * exp2(log2(isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_1472 + 1.0))) + _1477) * _1360;
        _1494 = _1327;
        _1495 = _1326;
        _1496 = _1325;
        _1497 = _1337;
        _1498 = _1336;
        _1499 = _1335;
        _1500 = _1347;
        _1501 = _1346;
        _1502 = _1345;
        _1503 = _1360;
        _1504 = _1359;
        _1505 = _1358;
        _1506 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)));
        _1507 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)));
        _1508 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)));
    }
    else
    {
        _1494 = _1182;
        _1495 = _1182;
        _1496 = _1182;
        _1497 = _1182;
        _1498 = _1182;
        _1499 = _1182;
        _1500 = _1182;
        _1501 = _1182;
        _1502 = _1182;
        _1503 = _1182;
        _1504 = _1182;
        _1505 = _1182;
        _1506 = 0.0;
        _1507 = 0.0;
        _1508 = 0.0;
    }
    float _1518 = (cbModelParam._m0[1u].x * (_1506 - _1194)) + _1194;
    float _1519 = (cbModelParam._m0[1u].x * (_1507 - _1195)) + _1195;
    float _1520 = (cbModelParam._m0[1u].x * (_1508 - _1196)) + _1196;
    float _1541 = fma(_1520, cbSceneParam._m0[89u].z, fma(_1519, cbSceneParam._m0[89u].y, _1518 * cbSceneParam._m0[89u].x));
    float _1544 = fma(_1520, cbSceneParam._m0[90u].z, fma(_1519, cbSceneParam._m0[90u].y, _1518 * cbSceneParam._m0[90u].x));
    float _1547 = fma(_1520, cbSceneParam._m0[91u].z, fma(_1519, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1518));
    float _1562 = _790 * 0.5;
    float _1563 = _791 * 0.5;
    float _1564 = _792 * 0.5;
    float _1565 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1496, _1499, _1502, _1505));
    float _1568 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1495, _1498, _1501, _1504));
    float _1571 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1494, _1497, _1500, _1503));
    float _1605;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1578 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1181, _1185, _1188, _1191));
        float _1582 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1183, _1186, _1189, _1192));
        float _1586 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1184, _1187, _1190, _1193));
        float _1593 = dot(vec4(cbModelParam._m0[39u]), vec4(_1562, _1563, _1564, 1.0));
        _1605 = dot(vec3(isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)), isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)), isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1593) ? 0.0 : (isnan(0.0) ? _1593 : max(0.0, _1593))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1605 = 1.0;
    }
    float _1616;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1607 = dot(vec4(cbModelParam._m0[40u]), vec4(_1562, _1563, _1564, 1.0));
        _1616 = dot(vec3(isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)), isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)), isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1607) ? 0.0 : (isnan(0.0) ? _1607 : max(0.0, _1607))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1616 = 1.0;
    }
    float _1620 = (_1616 * cbModelParam._m0[1u].x) + (_1605 * (1.0 - cbModelParam._m0[1u].x));
    float _1630 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _621);
    float _1631 = isnan(_1630) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1630 : min(cbModelParam._m0[25u].z, _1630));
    float _1711;
    float _1713;
    float _1715;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1678 = fma(_851, cbModelParam._m0[13u].z, fma(_847, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _843)) + cbModelParam._m0[13u].w;
        float _1682 = fma(_851, cbModelParam._m0[14u].z, fma(_847, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _843)) + cbModelParam._m0[14u].w;
        float _1686 = fma(_851, cbModelParam._m0[15u].z, fma(_847, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _843)) + cbModelParam._m0[15u].w;
        float _1689 = fma(_792, cbModelParam._m0[13u].z, fma(_791, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _790));
        float _1692 = fma(_792, cbModelParam._m0[14u].z, fma(_791, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _790));
        float _1695 = fma(_792, cbModelParam._m0[15u].z, fma(_791, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _790));
        float _1723;
        if (_1689 > 0.0)
        {
            _1723 = abs((1.0 - _1678) / _1689);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1689 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1678 + 1.0) / _1689);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1723 = frontier_phi_17_15_ladder;
        }
        float _1925;
        if (_1692 > 0.0)
        {
            _1925 = abs((1.0 - _1682) / _1692);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1692 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1682 + 1.0) / _1692);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1925 = frontier_phi_26_22_ladder;
        }
        float _2168;
        if (_1695 > 0.0)
        {
            _2168 = abs((1.0 - _1686) / _1695);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1686 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2168 = frontier_phi_38_33_ladder;
        }
        float _2170 = isnan(_1925) ? _1723 : (isnan(_1723) ? _1925 : min(_1723, _1925));
        float _2171 = isnan(_2168) ? _2170 : (isnan(_2170) ? _2168 : min(_2170, _2168));
        float _2175 = (_2171 * _1689) + _1678;
        float _2176 = (_2171 * _1692) + _1682;
        float _2177 = (_2171 * _1695) + _1686;
        float _2178 = _2171 * 9.9999997473787516355514526367188e-05;
        float _2180 = (-1.0) - _2178;
        float _2182 = _2178 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2177 > _2182) || ((_2177 < _2180) || ((_2176 > _2182) || ((_2176 < _2180) || ((_2175 < _2180) || (_2175 > _2182))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2301 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2177, cbModelParam._m0[9u].z, fma(_2176, cbModelParam._m0[9u].y, _2175 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2177, cbModelParam._m0[10u].z, fma(_2176, cbModelParam._m0[10u].y, _2175 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2177, cbModelParam._m0[11u].z, fma(_2176, cbModelParam._m0[11u].y, _2175 * cbModelParam._m0[11u].x))), _1631);
            frontier_phi_16_38_ladder = _2301.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2301.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2301.x * cbModelParam._m0[1u].y;
        }
        _1711 = frontier_phi_16_38_ladder_2;
        _1713 = frontier_phi_16_38_ladder_1;
        _1715 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1699 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_790, _791, _792), _1631);
        _1711 = _1699.x * cbModelParam._m0[1u].y;
        _1713 = _1699.y * cbModelParam._m0[1u].y;
        _1715 = _1699.z * cbModelParam._m0[1u].y;
    }
    float _1719 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _621);
    float _1720 = isnan(_1719) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1719 : min(cbModelParam._m0[25u].w, _1719));
    float _1811;
    float _1813;
    float _1815;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1775 = fma(_851, cbModelParam._m0[21u].z, fma(_847, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _843)) + cbModelParam._m0[21u].w;
        float _1779 = fma(_851, cbModelParam._m0[22u].z, fma(_847, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _843)) + cbModelParam._m0[22u].w;
        float _1783 = fma(_851, cbModelParam._m0[23u].z, fma(_847, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _843)) + cbModelParam._m0[23u].w;
        float _1786 = fma(_792, cbModelParam._m0[21u].z, fma(_791, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _790));
        float _1789 = fma(_792, cbModelParam._m0[22u].z, fma(_791, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _790));
        float _1792 = fma(_792, cbModelParam._m0[23u].z, fma(_791, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _790));
        float _1930;
        if (_1786 > 0.0)
        {
            _1930 = abs((1.0 - _1775) / _1786);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1775 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1930 = frontier_phi_28_24_ladder;
        }
        float _2195;
        if (_1789 > 0.0)
        {
            _2195 = abs((1.0 - _1779) / _1789);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1779 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2195 = frontier_phi_40_35_ladder;
        }
        float _2400;
        if (_1792 > 0.0)
        {
            _2400 = abs((1.0 - _1783) / _1792);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1792 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1783 + 1.0) / _1792);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2400 = frontier_phi_49_46_ladder;
        }
        float _2402 = isnan(_2195) ? _1930 : (isnan(_1930) ? _2195 : min(_1930, _2195));
        float _2403 = isnan(_2400) ? _2402 : (isnan(_2402) ? _2400 : min(_2402, _2400));
        float _2407 = (_2403 * _1786) + _1775;
        float _2408 = (_2403 * _1789) + _1779;
        float _2409 = (_2403 * _1792) + _1783;
        float _2410 = _2403 * 9.9999997473787516355514526367188e-05;
        float _2411 = (-1.0) - _2410;
        float _2413 = _2410 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2409 > _2413) || ((_2409 < _2411) || ((_2408 > _2413) || ((_2408 < _2411) || ((_2407 < _2411) || (_2407 > _2413))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2637 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2409, cbModelParam._m0[17u].z, fma(_2408, cbModelParam._m0[17u].y, _2407 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2409, cbModelParam._m0[18u].z, fma(_2408, cbModelParam._m0[18u].y, _2407 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2409, cbModelParam._m0[19u].z, fma(_2408, cbModelParam._m0[19u].y, _2407 * cbModelParam._m0[19u].x))), _1720);
            frontier_phi_25_49_ladder = _2637.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2637.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2637.x * cbModelParam._m0[1u].z;
        }
        _1811 = frontier_phi_25_49_ladder_2;
        _1813 = frontier_phi_25_49_ladder_1;
        _1815 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1795 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_790, _791, _792), _1720);
        _1811 = _1795.x * cbModelParam._m0[1u].z;
        _1813 = _1795.y * cbModelParam._m0[1u].z;
        _1815 = _1795.z * cbModelParam._m0[1u].z;
    }
    float _1827 = ((((1.0 - _811) * ((_798 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_811 * _798)) * _782;
    float _1828 = _1827 * ((cbModelParam._m0[1u].w * (_1811 - _1711)) + _1711);
    float _1829 = _1827 * ((cbModelParam._m0[1u].w * (_1813 - _1713)) + _1713);
    float _1830 = _1827 * ((cbModelParam._m0[1u].w * (_1815 - _1715)) + _1715);
    float _1833 = fma(_1830, cbSceneParam._m0[89u].z, fma(_1829, cbSceneParam._m0[89u].y, _1828 * cbSceneParam._m0[89u].x));
    float _1836 = fma(_1830, cbSceneParam._m0[90u].z, fma(_1829, cbSceneParam._m0[90u].y, _1828 * cbSceneParam._m0[90u].x));
    float _1839 = fma(_1830, cbSceneParam._m0[91u].z, fma(_1829, cbSceneParam._m0[91u].y, _1828 * cbSceneParam._m0[91u].x));
    uvec4 _1849 = floatBitsToUint(cbInstanceData._m0[_757 + 5u]);
    uint _1851 = _1849.x * 14u;
    uint _1852 = _1851 + 13u;
    float _1859 = _782 + (-1.0);
    float _1864 = (cbLight._m0[_1852].x * _1859) + 1.0;
    float _1865 = (cbLight._m0[_1852].y * _1859) + 1.0;
    float _1866 = (cbLight._m0[_1852].z * _1859) + 1.0;
    float _1867 = (cbLight._m0[_1852].w * _1859) + 1.0;
    uint _1868 = _1851 + 5u;
    float _1874 = isnan(1.0) ? _1865 : (isnan(_1865) ? 1.0 : min(_1865, 1.0));
    uint _1878 = _1851 + 4u;
    float _1884 = isnan(1.0) ? _1864 : (isnan(_1864) ? 1.0 : min(_1864, 1.0));
    uint _1888 = _1851 | 1u;
    float _1899 = dot(vec3(cbLight._m0[_1851].xyz), vec3(_618, _619, _620));
    float _1902 = dot(vec3(cbLight._m0[_1888].xyz), vec3(_618, _619, _620));
    float _4150 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _4161 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1907 = (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * 0.3183098733425140380859375;
    float _1909 = (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * 0.3183098733425140380859375;
    float _1916 = ((cbLight._m0[_1868].x * _1874) * _1909) + ((cbLight._m0[_1878].x * _1884) * _1907);
    float _1917 = ((_1874 * cbLight._m0[_1868].y) * _1909) + ((_1884 * cbLight._m0[_1878].y) * _1907);
    float _1918 = ((_1874 * cbLight._m0[_1868].z) * _1909) + ((_1884 * cbLight._m0[_1878].z) * _1907);
    uvec4 _1922 = floatBitsToUint(cbLight._m0[_1851 + 12u]);
    bool _1924 = _1922.x == 0u;
    float _1935;
    float _1937;
    float _1939;
    if (_1924)
    {
        _1935 = _1916;
        _1937 = _1917;
        _1939 = _1918;
    }
    else
    {
        uint _1943 = _1851 + 6u;
        float _1959 = (dot(vec3(cbLight._m0[_1851 + 2u].xyz), vec3(_618, _619, _620)) * 0.5) + 0.5;
        float _1960 = _1959 * _1959;
        float _4172 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
        float _1961 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1962 = isnan(1.0) ? _1866 : (isnan(_1866) ? 1.0 : min(_1866, 1.0));
        _1935 = (((cbLight._m0[_1943].x * 0.3183098733425140380859375) * _1961) * _1962) + _1916;
        _1937 = (((cbLight._m0[_1943].y * 0.3183098733425140380859375) * _1961) * _1962) + _1917;
        _1939 = (((cbLight._m0[_1943].z * 0.3183098733425140380859375) * _1961) * _1962) + _1918;
    }
    bool _1942 = _1922.y == 0u;
    float _1980;
    float _1982;
    float _1984;
    if (_1942)
    {
        _1980 = _1935;
        _1982 = _1937;
        _1984 = _1939;
    }
    else
    {
        uint _2139 = _1851 + 7u;
        float _2155 = (dot(vec3(cbLight._m0[_1851 + 3u].xyz), vec3(_618, _619, _620)) * 0.5) + 0.5;
        float _2156 = _2155 * _2155;
        float _4188 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        float _2157 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _2158 = isnan(1.0) ? _1867 : (isnan(_1867) ? 1.0 : min(_1867, 1.0));
        _1980 = (((cbLight._m0[_2139].x * 0.3183098733425140380859375) * _2157) * _2158) + _1935;
        _1982 = (((cbLight._m0[_2139].y * 0.3183098733425140380859375) * _2157) * _2158) + _1937;
        _1984 = (((cbLight._m0[_2139].z * 0.3183098733425140380859375) * _2157) * _2158) + _1939;
    }
    uint _1987 = _1851 + 8u;
    float _2000 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1851].w)) * _621) * 0.949999988079071044921875);
    float _2001 = _2000 * _2000;
    float _2002 = cbLight._m0[_1851].x + _697;
    float _2003 = cbLight._m0[_1851].y + _698;
    float _2004 = cbLight._m0[_1851].z + _699;
    float _2008 = inversesqrt(dot(vec3(_2002, _2003, _2004), vec3(_2002, _2003, _2004)));
    float _2009 = _2008 * _2002;
    float _2010 = _2008 * _2003;
    float _2011 = _2008 * _2004;
    float _2012 = dot(vec3(_618, _619, _620), vec3(cbLight._m0[_1851].xyz));
    float _4204 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2015 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _4215 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _2016 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _2017 = dot(vec3(_618, _619, _620), vec3(_2009, _2010, _2011));
    float _4226 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2020 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _2021 = dot(vec3(cbLight._m0[_1851].xyz), vec3(_2009, _2010, _2011));
    float _4237 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2025 = _2001 * _2001;
    float _2029 = ((_2020 * _2020) * (_2025 + (-1.0))) + 1.0;
    float _2040 = (exp2(log2(1.0 - (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2041 = 1.0 - _2001;
    float _2052 = (0.5 / (((_2016 * ((_2015 * _2041) + _2001)) + 9.9999999392252902907785028219223e-09) + (((_2016 * _2041) + _2001) * _2015))) * _2015;
    float _4248 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _2054 = (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_2025 / ((_2029 * _2029) * 3.141590118408203125));
    uint _2065 = _1851 + 9u;
    float _2076 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1888].w)) * _621) * 0.949999988079071044921875);
    float _2077 = _2076 * _2076;
    float _2078 = cbLight._m0[_1888].x + _697;
    float _2079 = cbLight._m0[_1888].y + _698;
    float _2080 = cbLight._m0[_1888].z + _699;
    float _2084 = inversesqrt(dot(vec3(_2078, _2079, _2080), vec3(_2078, _2079, _2080)));
    float _2085 = _2084 * _2078;
    float _2086 = _2084 * _2079;
    float _2087 = _2084 * _2080;
    float _2088 = dot(vec3(_618, _619, _620), vec3(cbLight._m0[_1888].xyz));
    float _4259 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2091 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _2092 = dot(vec3(_618, _619, _620), vec3(_2085, _2086, _2087));
    float _4270 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2095 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    float _2096 = dot(vec3(cbLight._m0[_1888].xyz), vec3(_2085, _2086, _2087));
    float _4281 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2100 = _2077 * _2077;
    float _2104 = ((_2095 * _2095) * (_2100 + (-1.0))) + 1.0;
    float _2113 = (exp2(log2(1.0 - (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2114 = 1.0 - _2077;
    float _2124 = (0.5 / (((_2016 * ((_2091 * _2114) + _2077)) + 9.9999999392252902907785028219223e-09) + (((_2016 * _2114) + _2077) * _2091))) * _2091;
    float _4292 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2126 = (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_2100 / ((_2104 * _2104) * 3.141590118408203125));
    float _2136 = (((_2113 * cbLight._m0[_2065].x) * _2126) * _1874) + (((_2040 * cbLight._m0[_1987].x) * _2054) * _1884);
    float _2137 = (((_2113 * cbLight._m0[_2065].y) * _2126) * _1874) + (((_2040 * cbLight._m0[_1987].y) * _2054) * _1884);
    float _2138 = (((_2113 * cbLight._m0[_2065].z) * _2126) * _1874) + (((_2040 * cbLight._m0[_1987].z) * _2054) * _1884);
    float _2200;
    float _2202;
    float _2204;
    if (_1924)
    {
        _2200 = _2136;
        _2202 = _2137;
        _2204 = _2138;
    }
    else
    {
        uint _2206 = _1851 + 2u;
        uint _2210 = _1851 + 10u;
        float _2224 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2206].w)) * _621) * 0.949999988079071044921875);
        float _2225 = _2224 * _2224;
        float _2226 = cbLight._m0[_2206].x + _697;
        float _2227 = cbLight._m0[_2206].y + _698;
        float _2228 = cbLight._m0[_2206].z + _699;
        float _2232 = inversesqrt(dot(vec3(_2226, _2227, _2228), vec3(_2226, _2227, _2228)));
        float _2233 = _2232 * _2226;
        float _2234 = _2232 * _2227;
        float _2235 = _2232 * _2228;
        float _2236 = dot(vec3(_618, _619, _620), vec3(cbLight._m0[_2206].xyz));
        float _4303 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
        float _2239 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _2240 = dot(vec3(_618, _619, _620), vec3(_2233, _2234, _2235));
        float _4314 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2243 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _2244 = dot(vec3(cbLight._m0[_2206].xyz), vec3(_2233, _2234, _2235));
        float _4325 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2248 = _2225 * _2225;
        float _2252 = ((_2243 * _2243) * (_2248 + (-1.0))) + 1.0;
        float _2261 = (exp2(log2(1.0 - (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2262 = 1.0 - _2225;
        float _2272 = (0.5 / (((_2016 * ((_2239 * _2262) + _2225)) + 9.9999999392252902907785028219223e-09) + (((_2016 * _2262) + _2225) * _2239))) * _2239;
        float _4336 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2274 = (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_2248 / ((_2252 * _2252) * 3.141590118408203125));
        float _2275 = isnan(1.0) ? _1866 : (isnan(_1866) ? 1.0 : min(_1866, 1.0));
        _2200 = (((_2261 * cbLight._m0[_2210].x) * _2274) * _2275) + _2136;
        _2202 = (((_2261 * cbLight._m0[_2210].y) * _2274) * _2275) + _2137;
        _2204 = (((_2261 * cbLight._m0[_2210].z) * _2274) * _2275) + _2138;
    }
    float _2310;
    float _2312;
    float _2314;
    if (_1942)
    {
        _2310 = _2200;
        _2312 = _2202;
        _2314 = _2204;
    }
    else
    {
        uint _2321 = _1851 + 3u;
        uint _2325 = _1851 + 11u;
        float _2339 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2321].w)) * _621) * 0.949999988079071044921875);
        float _2340 = _2339 * _2339;
        float _2341 = cbLight._m0[_2321].x + _697;
        float _2342 = cbLight._m0[_2321].y + _698;
        float _2343 = cbLight._m0[_2321].z + _699;
        float _2347 = inversesqrt(dot(vec3(_2341, _2342, _2343), vec3(_2341, _2342, _2343)));
        float _2348 = _2347 * _2341;
        float _2349 = _2347 * _2342;
        float _2350 = _2347 * _2343;
        float _2351 = dot(vec3(_618, _619, _620), vec3(cbLight._m0[_2321].xyz));
        float _4352 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2354 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _2355 = dot(vec3(_618, _619, _620), vec3(_2348, _2349, _2350));
        float _4363 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2358 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _2359 = dot(vec3(cbLight._m0[_2321].xyz), vec3(_2348, _2349, _2350));
        float _4374 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2363 = _2340 * _2340;
        float _2367 = ((_2358 * _2358) * (_2363 + (-1.0))) + 1.0;
        float _2376 = (exp2(log2(1.0 - (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2377 = 1.0 - _2340;
        float _2387 = (0.5 / (((_2016 * ((_2354 * _2377) + _2340)) + 9.9999999392252902907785028219223e-09) + (((_2016 * _2377) + _2340) * _2354))) * _2354;
        float _4385 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        float _2389 = (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_2363 / ((_2367 * _2367) * 3.141590118408203125));
        float _2390 = isnan(1.0) ? _1867 : (isnan(_1867) ? 1.0 : min(_1867, 1.0));
        _2310 = (((_2376 * cbLight._m0[_2325].x) * _2389) * _2390) + _2200;
        _2312 = (((_2376 * cbLight._m0[_2325].y) * _2389) * _2390) + _2202;
        _2314 = (((_2376 * cbLight._m0[_2325].z) * _2389) * _2390) + _2204;
    }
    float _2525;
    float _2527;
    float _2529;
    float _2531;
    float _2533;
    float _2535;
    if (_1849.y == 0u)
    {
        float _2465 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2466 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2465;
        float _2467 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2465;
        float _2468 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2465;
        uvec4 _2480 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2481 = _2480.x;
        uint _2492 = uint((float(_2480.y) * floor(float(uint(cbSceneParam._m0[85u].y * _719) / _2481))) + floor(float(uint(cbSceneParam._m0[85u].x * _718) / _2481)));
        float _2502 = (log2(_2468 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2503 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        uint _2506 = uint(isnan(14.0) ? _2503 : (isnan(_2503) ? 14.0 : min(_2503, 14.0)));
        uvec4 _2511 = texelFetch(g_lightClusterGridBuffer, int(((_2506 << 2u) + (_2492 << 6u)) >> 2u));
        uint _2512 = _2511.x;
        uint _2513 = _2480.z;
        float _2642;
        float _2644;
        float _2646;
        float _2648;
        float _2650;
        float _2652;
        if (((((1u << ((_2513 >> 4u) & 15u)) + 4294967295u) & _2512) == 0u) || ((_2513 & 240u) == 0u))
        {
            _2642 = 0.0;
            _2644 = 0.0;
            _2646 = 0.0;
            _2648 = 0.0;
            _2650 = 0.0;
            _2652 = 0.0;
        }
        else
        {
            float _2643;
            float _2645;
            float _2647;
            float _2649;
            float _2651;
            float _2653;
            float _2804 = 0.0;
            float _2805 = 0.0;
            float _2806 = 0.0;
            float _2807 = 0.0;
            float _2808 = 0.0;
            float _2809 = 0.0;
            uint _2810 = 0u;
            uint _2819;
            bool _2820;
            for (;;)
            {
                _2819 = texelFetch(g_lightClassification, int((((_2506 << 5u) + (_2492 << 9u)) + (_2810 << 2u)) >> 2u)).x;
                _2820 = _2819 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2820)
                {
                    frontier_phi_66_pred = _2804;
                    frontier_phi_66_pred_1 = _2809;
                    frontier_phi_66_pred_2 = _2808;
                    frontier_phi_66_pred_3 = _2807;
                    frontier_phi_66_pred_4 = _2806;
                    frontier_phi_66_pred_5 = _2805;
                }
                else
                {
                    float _2949;
                    float _2950;
                    float _2951;
                    float _2952;
                    float _2953;
                    float _2954;
                    uint _2955;
                    _2949 = _2804;
                    _2950 = _2805;
                    _2951 = _2806;
                    _2952 = _2807;
                    _2953 = _2808;
                    _2954 = _2809;
                    _2955 = _2819;
                    float _2876;
                    float _2877;
                    float _2878;
                    float _2879;
                    float _2880;
                    float _2881;
                    for (;;)
                    {
                        uint _2959 = uint(findLSB(_2955)) + (_2810 << 5u);
                        uint _2956 = (_2955 + 4294967295u) & _2955;
                        uint _2961 = _2959 * 48u;
                        vec4 _2975 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2961)).x, texelFetch(g_PointLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2961 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2961 + 3u)).x));
                        uint _2981 = (_2959 * 48u) + 4u;
                        vec4 _2994 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2981)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 3u)).x));
                        uint _3000 = (_2959 * 48u) + 8u;
                        vec3 _3011 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3000)).x, texelFetch(g_PointLightRenderingBuffer, int(_3000 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3000 + 2u)).x));
                        float _3015 = _2975.x - _2466;
                        float _3016 = _2975.y - _2467;
                        float _3017 = _2975.z - _2468;
                        float _3018 = dot(vec3(_3015, _3016, _3017), vec3(_3015, _3016, _3017));
                        float _3021 = inversesqrt(_3018);
                        float _3022 = _3021 * _3015;
                        float _3023 = _3021 * _3016;
                        float _3024 = _3021 * _3017;
                        float _3025 = dot(vec3(_738, _741, _744), vec3(_3022, _3023, _3024));
                        float _3030 = 1.0 - (_3018 * _2975.w);
                        float _4411 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                        float _3031 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                        float _3032 = sqrt(_3018) * _2994.w;
                        float _3035 = 1.39999997615814208984375 / (_3032 + 1.39999997615814208984375);
                        float _3036 = _3035 * _3035;
                        float _3039 = ((1.0 - _3036) * _3025) + _3036;
                        float _3042 = _3032 * _3032;
                        float _3046 = ((isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0))) * _3031) / ((_3042 * 0.699999988079071044921875) + 1.0);
                        float _3050 = (-0.0) - _2466;
                        float _3051 = (-0.0) - _2467;
                        float _3052 = (-0.0) - _2468;
                        float _3056 = inversesqrt(dot(vec3(_3050, _3051, _3052), vec3(_3050, _3051, _3052)));
                        float _3057 = _3056 * _3050;
                        float _3058 = _3056 * _3051;
                        float _3059 = _3056 * _3052;
                        float _3067 = exp2(log2(1.0 / ((_3042 * 3.5) + 5.0)) * 0.25);
                        float _3068 = 1.0 - _798;
                        float _3075 = sqrt(1.0 - ((1.0 - (_3068 * _3068)) * (1.0 - (_3067 * _3067))));
                        float _3076 = _3075 * _3075;
                        float _3077 = _3076 * _3076;
                        float _3078 = _3057 + _3022;
                        float _3079 = _3058 + _3023;
                        float _3080 = _3059 + _3024;
                        float _3084 = inversesqrt(dot(vec3(_3078, _3079, _3080), vec3(_3078, _3079, _3080)));
                        float _3088 = dot(vec3(_738, _741, _744), vec3(_3057, _3058, _3059));
                        float _4427 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
                        float _3091 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
                        float _3092 = dot(vec3(_738, _741, _744), vec3(_3084 * _3078, _3084 * _3079, _3084 * _3080));
                        float _4438 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                        float _3095 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
                        float _3099 = ((_3095 * _3095) * (_3077 + (-1.0))) + 1.0;
                        float _3100 = _3035 * _3076;
                        float _3101 = _3100 * _3100;
                        float _3104 = ((1.0 - _3101) * _3025) + _3101;
                        float _4449 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                        float _3105 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
                        float _3106 = 1.0 - _3076;
                        float _3116 = (0.5 / (((_3105 * ((_3091 * _3106) + _3076)) + 9.9999999392252902907785028219223e-09) + (((_3105 * _3106) + _3076) * _3091))) * _3105;
                        float _4460 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                        float _3127 = (((_3077 * 3.1415927410125732421875) * (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)))) / ((_3099 * _3099) * ((_3042 * 2.1991131305694580078125) + 3.141590118408203125))) * _3031;
                        _2879 = (_3046 * _2994.x) + _2952;
                        _2880 = (_3046 * _2994.y) + _2953;
                        _2881 = (_3046 * _2994.z) + _2954;
                        _2876 = (_3127 * _3011.x) + _2949;
                        _2877 = (_3127 * _3011.y) + _2950;
                        _2878 = (_3127 * _3011.z) + _2951;
                        if (_2956 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2949 = _2876;
                            _2950 = _2877;
                            _2951 = _2878;
                            _2952 = _2879;
                            _2953 = _2880;
                            _2954 = _2881;
                            _2955 = _2956;
                        }
                    }
                    frontier_phi_66_pred = _2876;
                    frontier_phi_66_pred_1 = _2881;
                    frontier_phi_66_pred_2 = _2880;
                    frontier_phi_66_pred_3 = _2879;
                    frontier_phi_66_pred_4 = _2878;
                    frontier_phi_66_pred_5 = _2877;
                }
                _2643 = frontier_phi_66_pred;
                _2653 = frontier_phi_66_pred_1;
                _2651 = frontier_phi_66_pred_2;
                _2649 = frontier_phi_66_pred_3;
                _2647 = frontier_phi_66_pred_4;
                _2645 = frontier_phi_66_pred_5;
                uint _2811 = _2810 + 1u;
                if (_2811 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2804 = _2643;
                    _2805 = _2645;
                    _2806 = _2647;
                    _2807 = _2649;
                    _2808 = _2651;
                    _2809 = _2653;
                    _2810 = _2811;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2642 = _2643;
            _2644 = _2645;
            _2646 = _2647;
            _2648 = _2649;
            _2650 = _2651;
            _2652 = _2653;
        }
        uvec4 _2656 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2657 = _2656.z;
        uint _2659 = (_2657 >> 8u) & 15u;
        float _2772;
        float _2774;
        float _2776;
        float _2778;
        float _2780;
        float _2782;
        if (((4294967295u << _2659) & _2512) == 0u)
        {
            _2772 = _2642;
            _2774 = _2644;
            _2776 = _2646;
            _2778 = _2648;
            _2780 = _2650;
            _2782 = _2652;
        }
        else
        {
            float _2797 = inversesqrt(dot(vec3(_2466, _2467, _2468), vec3(_2466, _2467, _2468)));
            float _2798 = _2797 * _2466;
            float _2799 = _2797 * _2467;
            float _2800 = _2797 * _2468;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2659 < ((_2657 >> 12u) & 15u))
            {
                float _2773;
                float _2775;
                float _2777;
                float _2779;
                float _2781;
                float _2783;
                float _2932 = _2642;
                float _2933 = _2644;
                float _2934 = _2646;
                float _2935 = _2648;
                float _2936 = _2650;
                float _2937 = _2652;
                uint _2938 = _2659;
                uint _2947;
                bool _2948;
                for (;;)
                {
                    _2947 = texelFetch(g_lightClassification, int((((_2506 << 5u) + (_2492 << 9u)) + (_2938 << 2u)) >> 2u)).x;
                    _2948 = _2947 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2948)
                    {
                        frontier_phi_77_pred = _2937;
                        frontier_phi_77_pred_1 = _2936;
                        frontier_phi_77_pred_2 = _2935;
                        frontier_phi_77_pred_3 = _2934;
                        frontier_phi_77_pred_4 = _2933;
                        frontier_phi_77_pred_5 = _2932;
                    }
                    else
                    {
                        float _3141;
                        float _3142;
                        float _3143;
                        float _3144;
                        float _3145;
                        float _3146;
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3439;
                        float _3440;
                        float _3441;
                        float _3154 = _2932;
                        float _3155 = _2933;
                        float _3156 = _2934;
                        float _3157 = _2935;
                        float _3158 = _2936;
                        float _3159 = _2937;
                        uint _3160 = _2947;
                        uint _3161;
                        vec4 _3186;
                        float _3187;
                        vec4 _3202;
                        vec3 _3214;
                        vec4 _3229;
                        vec4 _3245;
                        float _3292;
                        bool _3293;
                        for (;;)
                        {
                            uint _3171 = ((_2938 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3160));
                            _3161 = (_3160 + 4294967295u) & _3160;
                            uint _3173 = _3171 * 40u;
                            _3186 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 3u)).x));
                            _3187 = _3186.w;
                            uint _3189 = (_3171 * 40u) + 4u;
                            _3202 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3189)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 3u)).x));
                            uint _3204 = (_3171 * 40u) + 8u;
                            _3214 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3204)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 2u)).x));
                            uint _3216 = (_3171 * 40u) + 16u;
                            _3229 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 3u)).x));
                            uint _3232 = (_3171 * 40u) + 20u;
                            _3245 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3232)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 3u)).x));
                            uint _3248 = (_3171 * 40u) + 24u;
                            vec4 _3261 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 3u)).x));
                            uint _3267 = (_3171 * 40u) + 28u;
                            vec4 _3280 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3267)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 3u)).x));
                            _3292 = fma(_2468, _3280.z, fma(_2467, _3280.y, _3280.x * _2466)) + _3280.w;
                            _3293 = !((fma(_2468, _3261.z, fma(_2467, _3261.y, _3261.x * _2466)) + _3261.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3293)
                            {
                                float _3320 = _3186.x - _2466;
                                float _3321 = _3186.y - _2467;
                                float _3322 = _3186.z - _2468;
                                float _3323 = dot(vec3(_3320, _3321, _3322), vec3(_3320, _3321, _3322));
                                float _3326 = inversesqrt(_3323);
                                float _3327 = _3326 * _3320;
                                float _3328 = _3326 * _3321;
                                float _3329 = _3326 * _3322;
                                float _3333 = 1.0 - (_3323 / (_3187 * _3187));
                                float _4471 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                                float _3334 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                                float _3338 = sqrt(_3323) * _3202.w;
                                float _3340 = 1.39999997615814208984375 / (_3338 + 1.39999997615814208984375);
                                float _3341 = _3340 * _3340;
                                float _3344 = ((1.0 - _3341) * dot(vec3(_3327, _3328, _3329), vec3(_738, _741, _744))) + _3341;
                                float _3347 = _3338 * _3338;
                                float _3351 = (fma(_2468, _3229.z, fma(_2467, _3229.y, _3229.x * _2466)) + _3229.w) / _3292;
                                float _3352 = (fma(_2468, _3245.z, fma(_2467, _3245.y, _3245.x * _2466)) + _3245.w) / _3292;
                                float _3356 = 1.0 - dot(vec2(_3351, _3352), vec2(_3351, _3352));
                                float _4487 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
                                float _3357 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                                float _3358 = _3357 * (((isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0))) * _3334) / ((_3347 * 0.699999988079071044921875) + 1.0));
                                float _3370 = exp2(log2(1.0 / ((_3347 * 3.5) + 5.0)) * 0.25);
                                float _3371 = 1.0 - _798;
                                float _3378 = sqrt(1.0 - ((1.0 - (_3371 * _3371)) * (1.0 - (_3370 * _3370))));
                                float _3379 = _3378 * _3378;
                                float _3380 = _3379 * _3379;
                                float _3381 = _3327 - _2798;
                                float _3382 = _3328 - _2799;
                                float _3383 = _3329 - _2800;
                                float _3387 = inversesqrt(dot(vec3(_3381, _3382, _3383), vec3(_3381, _3382, _3383)));
                                float _3391 = dot(vec3(_738, _741, _744), vec3((-0.0) - _2798, (-0.0) - _2799, (-0.0) - _2800));
                                float _4498 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                                float _3394 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                                float _3395 = dot(vec3(_738, _741, _744), vec3(_3387 * _3381, _3387 * _3382, _3387 * _3383));
                                float _4509 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                                float _3398 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                                float _3402 = ((_3398 * _3398) * (_3380 + (-1.0))) + 1.0;
                                float _3403 = _3340 * _3379;
                                float _3404 = _3403 * _3403;
                                float _3410 = ((1.0 - _3404) * dot(vec3(_738, _741, _744), vec3(_3327, _3328, _3329))) + _3404;
                                float _4520 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                                float _3411 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                                float _3412 = 1.0 - _3379;
                                float _3422 = (0.5 / (((_3411 * ((_3394 * _3412) + _3379)) + 9.9999999392252902907785028219223e-09) + (((_3411 * _3412) + _3379) * _3394))) * _3411;
                                float _4531 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                                float _3432 = (_3357 * _3334) * (((_3380 * 3.1415927410125732421875) * (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0)))) / ((_3402 * _3402) * ((_3347 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3358 * _3202.y;
                                frontier_phi_83_pred_1 = _3358 * _3202.x;
                                frontier_phi_83_pred_2 = _3432 * _3214.z;
                                frontier_phi_83_pred_3 = _3432 * _3214.y;
                                frontier_phi_83_pred_4 = _3432 * _3214.x;
                                frontier_phi_83_pred_5 = _3358 * _3202.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3440 = frontier_phi_83_pred;
                            _3439 = frontier_phi_83_pred_1;
                            _3438 = frontier_phi_83_pred_2;
                            _3437 = frontier_phi_83_pred_3;
                            _3436 = frontier_phi_83_pred_4;
                            _3441 = frontier_phi_83_pred_5;
                            _3144 = _3439 + _3157;
                            _3145 = _3440 + _3158;
                            _3146 = _3441 + _3159;
                            _3141 = _3436 + _3154;
                            _3142 = _3437 + _3155;
                            _3143 = _3438 + _3156;
                            if (_3161 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3154 = _3141;
                                _3155 = _3142;
                                _3156 = _3143;
                                _3157 = _3144;
                                _3158 = _3145;
                                _3159 = _3146;
                                _3160 = _3161;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3146;
                        frontier_phi_77_pred_1 = _3145;
                        frontier_phi_77_pred_2 = _3144;
                        frontier_phi_77_pred_3 = _3143;
                        frontier_phi_77_pred_4 = _3142;
                        frontier_phi_77_pred_5 = _3141;
                    }
                    _2783 = frontier_phi_77_pred;
                    _2781 = frontier_phi_77_pred_1;
                    _2779 = frontier_phi_77_pred_2;
                    _2777 = frontier_phi_77_pred_3;
                    _2775 = frontier_phi_77_pred_4;
                    _2773 = frontier_phi_77_pred_5;
                    uint _2939 = _2938 + 1u;
                    if (_2939 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2932 = _2773;
                        _2933 = _2775;
                        _2934 = _2777;
                        _2935 = _2779;
                        _2936 = _2781;
                        _2937 = _2783;
                        _2938 = _2939;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2777;
                frontier_phi_58_59_ladder_1 = _2783;
                frontier_phi_58_59_ladder_2 = _2781;
                frontier_phi_58_59_ladder_3 = _2779;
                frontier_phi_58_59_ladder_4 = _2775;
                frontier_phi_58_59_ladder_5 = _2773;
            }
            else
            {
                frontier_phi_58_59_ladder = _2646;
                frontier_phi_58_59_ladder_1 = _2652;
                frontier_phi_58_59_ladder_2 = _2650;
                frontier_phi_58_59_ladder_3 = _2648;
                frontier_phi_58_59_ladder_4 = _2644;
                frontier_phi_58_59_ladder_5 = _2642;
            }
            _2772 = frontier_phi_58_59_ladder_5;
            _2774 = frontier_phi_58_59_ladder_4;
            _2776 = frontier_phi_58_59_ladder;
            _2778 = frontier_phi_58_59_ladder_3;
            _2780 = frontier_phi_58_59_ladder_2;
            _2782 = frontier_phi_58_59_ladder_1;
        }
        float _2787 = isnan(1.0) ? _782 : (isnan(_782) ? 1.0 : min(_782, 1.0));
        _2525 = (_2787 * _2778) + _1980;
        _2527 = (_2787 * _2780) + _1982;
        _2529 = (_2787 * _2782) + _1984;
        _2531 = ((_2772 * 0.039999999105930328369140625) * _2787) + _2310;
        _2533 = ((_2774 * 0.039999999105930328369140625) * _2787) + _2312;
        _2535 = ((_2776 * 0.039999999105930328369140625) * _2787) + _2314;
    }
    else
    {
        _2525 = _1980;
        _2527 = _1982;
        _2529 = _1984;
        _2531 = _2310;
        _2533 = _2312;
        _2535 = _2314;
    }
    uint _2541 = _758 + uint(cbMatDynParam._m0[0u].w);
    float _2547 = cbInstanceData._m0[_2541].x * (_528 - (_544 * _528));
    float _2548 = cbInstanceData._m0[_2541].y * (_529 - (_544 * _529));
    float _2549 = cbInstanceData._m0[_2541].z * (_530 - (_544 * _530));
    float _4547 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _4558 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _4569 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _2566 = (((isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * (_2525 + ((isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))) * _782))) + ((_2531 + ((isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0))) * _1620)) * cbPerFrame._m0[3u].x)) + _2547;
    float _2568 = (_2548 + ((_2533 + ((isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))) * _1620)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * (_2527 + ((isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))) * _782)));
    float _2570 = (_2549 + ((_2535 + ((isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0))) * _1620)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_2529 + ((isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0))) * _782)));
    float _2571 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
    float _2572 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
    float _2573 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
    float _2579 = cbMtdParam._m0[2u].x * _2547;
    float _2580 = cbMtdParam._m0[2u].y * _2548;
    float _2581 = cbMtdParam._m0[2u].z * _2549;
    float _4595 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2583 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
    uint _2584 = _757 + 6u;
    float _2592 = _718 / cbSceneParam._m0[86u].x;
    float _2593 = _719 / cbSceneParam._m0[86u].y;
    vec4 _2607 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2592, _2593, (log2((isnan(cbSceneParam._m0[77u].w) ? _640 : (isnan(_640) ? cbSceneParam._m0[77u].w : min(_640, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2609 = _2607.x;
    float _2610 = _2607.y;
    float _2611 = _2607.z;
    float _2612 = _2607.w;
    float _2705;
    float _2707;
    float _2709;
    float _2711;
    if (_640 > cbSceneParam._m0[78u].w)
    {
        float _2667 = isnan(_640) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _640 : min(cbSceneParam._m0[80u].w, _640));
        float _2668 = _2667 / _640;
        float _2679 = _2668 * _690;
        float _2680 = _691 * _2668;
        float _2681 = (-0.0) - _2680;
        float _2683 = _2668 * _692;
        float _2685 = (cbSceneParam._m0[77u].w * _2681) / _2667;
        float _2686 = _2685 + cbSceneParam._m0[79u].w;
        float _2687 = cbSceneParam._m0[79u].w - _2680;
        float _2693 = sqrt(((_2679 * _2679) + (_2680 * _2680)) + (_2683 * _2683));
        float _2696 = (1.0 - (cbSceneParam._m0[77u].w / _2667)) * _2693;
        float _2701 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2703 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2889;
        if (abs((_2681 - _2685) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2889 = ((((_2686 > 0.0) ? exp2(_2701 * _2686) : (2.0 - exp2(_2703 * _2686))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2696;
        }
        else
        {
            float _2833 = 1.0 / cbSceneParam._m0[80u].x;
            float _2834 = isnan(_2687) ? _2686 : (isnan(_2686) ? _2687 : max(_2686, _2687));
            float _2835 = isnan(_2687) ? _2686 : (isnan(_2686) ? _2687 : min(_2686, _2687));
            float _2844 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : min(_2834, 0.0));
            float _2845 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : min(_2835, 0.0));
            _2889 = ((abs(_2693 / _2681) * cbSceneParam._m0[80u].y) * ((((_2844 - _2845) * 2.0) - ((exp2(_2701 * (isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0)))) - exp2(_2701 * (isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0))))) * _2833)) - ((exp2(_2703 * _2844) - exp2(_2703 * _2845)) * _2833))) + (_2696 * cbSceneParam._m0[80u].z);
        }
        vec4 _2891 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2592, _2593, 1.0), 0.0);
        float _2900 = exp2((_2889 * (-1.44269502162933349609375)) * (1.0 - _2891.w));
        float _2901 = log2(_2900);
        float _2917 = log2(_2612);
        _2705 = (exp2(_2917 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2901 * cbSceneParam._m0[78u].x)) * _2891.x) / cbSceneParam._m0[78u].x)) + _2609;
        _2707 = (exp2(_2917 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2901 * cbSceneParam._m0[78u].y)) * _2891.y) / cbSceneParam._m0[78u].y)) + _2610;
        _2709 = (exp2(_2917 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2901 * cbSceneParam._m0[78u].z)) * _2891.z) / cbSceneParam._m0[78u].z)) + _2611;
        _2711 = _2900 * _2612;
    }
    else
    {
        _2705 = _2609;
        _2707 = _2610;
        _2709 = _2611;
        _2711 = _2612;
    }
    bool _2927;
    vec4 _2721;
    vec4 _2743;
    float _2745;
    float _2749;
    float _2750;
    float _2751;
    float _2754;
    float _2757;
    float _2760;
    float _2761;
    bool _2771;
    for (;;)
    {
        _2721 = cbMatDynParam._m0[0u];
        float _2723 = roundEven(_2721.y);
        bool _2724 = _2723 == 3.0;
        float _2725 = log2(_2711);
        float _2729 = exp2(_2725 * cbSceneParam._m0[78u].x);
        float _2730 = exp2(_2725 * cbSceneParam._m0[78u].y);
        float _2731 = exp2(_2725 * cbSceneParam._m0[78u].z);
        float _2732 = _2729 * _2571;
        float _2733 = _2730 * _2572;
        float _2734 = _2731 * _2573;
        float _2741 = _706 + (-0.5);
        _2743 = cbMtdParam._m0[1u];
        _2745 = _2743.y * _2741;
        float _2748 = (_2723 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2749 = _2748 * (_2724 ? _2732 : (_2732 + (cbSceneParam._m0[72u].w * _2705)));
        _2750 = _2748 * (_2724 ? _2733 : (_2733 + (cbSceneParam._m0[72u].w * _2707)));
        _2751 = _2748 * (_2724 ? _2734 : (_2734 + (cbSceneParam._m0[72u].w * _2709)));
        _2754 = ((_2579 * _2583) * _2729) * _2748;
        _2757 = ((_2580 * _2583) * _2730) * _2748;
        _2760 = ((_2581 * _2583) * _2731) * _2748;
        _2761 = _2741 * 0.999000012874603271484375;
        _2771 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2771)
        {
            if ((cbInstanceData._m0[_757 + 7u].x + _2761) < 0.5)
            {
                _2927 = true;
                break;
            }
        }
        uint _2868 = _758 + uint(_2721.w);
        if ((cbInstanceData._m0[_2868].w < 1.0) && ((cbInstanceData._m0[_2868].w + _2761) < 0.5))
        {
            _2927 = true;
            break;
        }
        if ((_2745 + 1.0) < _2743.x)
        {
            _2927 = true;
            break;
        }
        _2927 = false;
        break;
    }
    float _3132;
    if (_2927)
    {
        discard_state = true;
        _3132 = 0.0;
    }
    else
    {
        _3132 = cbInstanceData._m0[_2584].w;
    }
    SV_Target.x = _2749;
    SV_Target.y = _2750;
    SV_Target.z = _2751;
    SV_Target.w = _3132;
    SV_Target_1.x = _2754;
    SV_Target_1.y = _2757;
    SV_Target_1.z = _2760;
    SV_Target_1.w = cbInstanceData._m0[_2584].w;
    discard_exit();
}


