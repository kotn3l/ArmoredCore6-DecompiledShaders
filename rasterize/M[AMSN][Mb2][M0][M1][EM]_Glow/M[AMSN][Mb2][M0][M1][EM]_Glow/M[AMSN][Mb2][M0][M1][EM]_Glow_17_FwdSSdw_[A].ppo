#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1115;
float _3562;
float _3563;
float _3564;
float _3565;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _249 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _255 = _249.x * cbMtdParam._m0[9u].x;
    float _256 = _249.y * cbMtdParam._m0[9u].y;
    float _257 = _249.z * cbMtdParam._m0[9u].z;
    vec4 _277 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _298 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_277.x + 0.00999999977648258209228515625));
    float _300 = _298 * (cbMtdParam._m0[15u].x + 1.0);
    float _3574 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _301 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
    float _309 = ((((cbMtdParam._m0[12u].x - _255) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _301) + _255;
    float _310 = ((((cbMtdParam._m0[12u].y - _256) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _301) + _256;
    float _311 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _257)) * _301) + _257;
    vec4 _324 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _326 = _324.x;
    vec4 _338 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _342 = _338.z;
    float _346 = (_338.x * 2.0) + (-1.0);
    float _348 = (_338.y * 2.0) + (-1.0);
    float _349 = dot(vec2(_346, _348), vec2(_346, _348));
    float _3585 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _354 = sqrt(1.0 - (isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))));
    float _357 = _298 * (cbMtdParam._m0[14u].w + 1.0);
    float _3596 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _361 = ((cbMtdParam._m0[14u].y - _342) * (isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0)))) + _342;
    vec4 _389 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _404 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _449 = (TEXCOORD_6.x - ((cbMtdParam._m0[13u].w * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_5, SS_WrapLinear), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].x + 1.0);
    float _3607 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _450 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
    float _451 = ((_404.x + _389.x) * cbMtdParam._m0[11u].x) * _450;
    float _452 = ((_404.y + _389.y) * cbMtdParam._m0[11u].y) * _450;
    float _453 = ((_404.z + _389.z) * cbMtdParam._m0[11u].z) * _450;
    vec4 _465 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[9u].w));
    float _467 = _465.x;
    vec4 _492 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _498 = (_492.x * 2.0) + (-1.0);
    float _499 = (_492.y * 2.0) + (-1.0);
    float _500 = dot(vec2(_498, _499), vec2(_498, _499));
    float _3618 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _516 = (_301 * (((cbMtdParam._m0[13u].z * _346) - _346) + _498)) + _346;
    float _517 = (_301 * (((cbMtdParam._m0[13u].z * _348) - _348) + _499)) + _348;
    float _518 = (_301 * (sqrt(1.0 - (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0)))) - _354)) + _354;
    float _521 = fma(_518, _220 * NORMAL.x, fma(_517, _227 * TANGENT.x, (_213 * _205) * _516));
    float _524 = fma(_518, _220 * NORMAL.y, fma(_517, _227 * TANGENT.y, (_213 * _206) * _516));
    float _527 = fma(_518, _220 * NORMAL.z, fma(_517, _227 * TANGENT.z, (_213 * _207) * _516));
    float _531 = inversesqrt(dot(vec3(_521, _524, _527), vec3(_521, _524, _527)));
    float _532 = _531 * _521;
    float _533 = _531 * _524;
    float _534 = _531 * _527;
    float _3629 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _535 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
    float _3640 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _3651 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _3662 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _3673 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _539 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    float _555 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _595 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _605 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _595);
    float _606 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _595);
    float _607 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _595);
    float _611 = inversesqrt(dot(vec3(_605, _606, _607), vec3(_605, _606, _607)));
    float _612 = _605 * _611;
    float _613 = _606 * _611;
    float _614 = _607 * _611;
    vec4 _619 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _621 = _619.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _795 = sqrt(((_605 * _605) + (_606 * _606)) + (_607 * _607));
        float _801 = (cbMatDynParam._m0[5u].x * _795) + cbMatDynParam._m0[5u].y;
        float _3684 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _802 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _806 = (cbMatDynParam._m0[5u].z * _795) + cbMatDynParam._m0[5u].w;
        float _3695 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) - _802)) + _802) < ((_621 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _632 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _633 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _653 = fma(_534, cbSceneParam._m0[5u].z, fma(_533, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _532));
    float _656 = fma(_534, cbSceneParam._m0[6u].z, fma(_533, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _532));
    float _659 = fma(_534, cbSceneParam._m0[7u].z, fma(_533, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _532));
    uint _672 = uint(roundEven(NORMAL.w)) * 13u;
    uint _673 = _672 + 9u;
    uint _674 = _673 + uint(cbMatDynParam._m0[0u].w);
    float _680 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0)))) * cbInstanceData._m0[_674].x;
    float _681 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0)))) * cbInstanceData._m0[_674].y;
    float _682 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0)))) * cbInstanceData._m0[_674].z;
    float _3706 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _683 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    float _3717 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _684 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _3728 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _685 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _686 = 1.0 - _539;
    float _687 = _683 * _686;
    float _688 = _684 * _686;
    float _689 = _685 * _686;
    float _694 = (_683 + (-0.039999999105930328369140625)) * _539;
    float _695 = (_684 + (-0.039999999105930328369140625)) * _539;
    float _696 = (_685 + (-0.039999999105930328369140625)) * _539;
    float _697 = _694 + 0.039999999105930328369140625;
    float _699 = _695 + 0.039999999105930328369140625;
    float _700 = _696 + 0.039999999105930328369140625;
    vec4 _709 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _632, cbSceneParam._m0[86u].y * _633));
    float _712 = _709.x * TEXCOORD_3.w;
    float _713 = dot(vec3(_532, _533, _534), vec3(_612, _613, _614));
    float _716 = _713 * 2.0;
    float _720 = (_716 * _532) - _612;
    float _721 = (_716 * _533) - _613;
    float _722 = (_716 * _534) - _614;
    float _726 = abs(dot(vec3(_612, _613, _614), vec3(_532, _533, _534)));
    float _3739 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _728 = sqrt(_535);
    float _741 = exp2((_728 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_728 * 3.0));
    float _747 = (1.0 - _741) * ((_728 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _748 = _741 * _728;
    float _776 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _780 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _784 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1114;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _839 = fma(_784, cbModelParam._m0[26u].z, fma(_780, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _776));
        float _843 = fma(_784, cbModelParam._m0[27u].z, fma(_780, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _776));
        float _847 = fma(_784, cbModelParam._m0[28u].z, fma(_780, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _776));
        float _872 = _776 + _532;
        float _873 = _780 + _533;
        float _874 = _784 + _534;
        float _884 = fma(_874, cbModelParam._m0[26u].z, fma(_873, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _872)) - _839;
        float _885 = fma(_874, cbModelParam._m0[27u].z, fma(_873, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _872)) - _843;
        float _886 = fma(_874, cbModelParam._m0[28u].z, fma(_873, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _872)) - _847;
        float _890 = inversesqrt(dot(vec3(_884, _885, _886), vec3(_884, _885, _886)));
        float _903 = ((_890 * _884) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_839 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _904 = ((_890 * _885) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_843 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _905 = ((_890 * _886) / cbModelParam._m0[34u].z) + ((((((_847 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _908 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _915 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _922 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        float _942 = exp2((_908.w + (-0.5)) * 20.0) * 2.0;
        float _943 = _942 * (_908.x + (-0.5));
        float _944 = _942 * (_908.y + (-0.5));
        float _945 = _942 * (_908.z + (-0.5));
        float _952 = exp2((_915.w + (-0.5)) * 20.0) * 2.0;
        float _953 = _952 * (_915.x + (-0.5));
        float _954 = _952 * (_915.y + (-0.5));
        float _955 = _952 * (_915.z + (-0.5));
        float _962 = exp2((_922.w + (-0.5)) * 20.0) * 2.0;
        float _963 = _962 * (_922.x + (-0.5));
        float _964 = _962 * (_922.y + (-0.5));
        float _965 = _962 * (_922.z + (-0.5));
        float _972 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _973 = _972 * (_929.x + (-0.5));
        float _974 = _972 * (_929.y + (-0.5));
        float _975 = _972 * (_929.z + (-0.5));
        float _976 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _977 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _978 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _979 = _943 * 0.5;
        float _980 = _953 * 0.5;
        float _981 = _963 * 0.5;
        float _982 = dot(vec3(_979, _980, _981), vec3(_979, _980, _981));
        float _987 = (_982 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_982);
        float _996 = (dot(vec3(_532, _533, _534), vec3(_987 * _979, _987 * _980, _987 * _981)) + 1.0) * 0.5;
        float _3765 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1006 = sqrt(((_980 * _980) + (_979 * _979)) + (_981 * _981)) / (_976 + 9.9999997473787516355514526367188e-06);
        float _3776 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1008 = _1007 * 2.0;
        float _1012 = (1.0 - _1007) / (_1007 + 1.0);
        float _3787 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1022 = ((((1.0 - _1013) * (_1008 + 2.0)) * exp2(log2(isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * (_1008 + 1.0))) + _1013) * _976;
        float _1023 = _944 * 0.5;
        float _1024 = _954 * 0.5;
        float _1025 = _964 * 0.5;
        float _1026 = dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025));
        float _1031 = (_1026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1026);
        float _1039 = (dot(vec3(_532, _533, _534), vec3(_1031 * _1023, _1031 * _1024, _1031 * _1025)) + 1.0) * 0.5;
        float _3798 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1048 = sqrt(((_1024 * _1024) + (_1023 * _1023)) + (_1025 * _1025)) / (_977 + 9.9999997473787516355514526367188e-06);
        float _3809 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1050 = _1049 * 2.0;
        float _1054 = (1.0 - _1049) / (_1049 + 1.0);
        float _3820 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1064 = ((((1.0 - _1055) * (_1050 + 2.0)) * exp2(log2(isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * (_1050 + 1.0))) + _1055) * _977;
        float _1065 = _945 * 0.5;
        float _1066 = _955 * 0.5;
        float _1067 = _965 * 0.5;
        float _1068 = dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067));
        float _1073 = (_1068 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1068);
        float _1081 = (dot(vec3(_532, _533, _534), vec3(_1073 * _1065, _1073 * _1066, _1073 * _1067)) + 1.0) * 0.5;
        float _3831 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1090 = sqrt(((_1066 * _1066) + (_1065 * _1065)) + (_1067 * _1067)) / (_978 + 9.9999997473787516355514526367188e-06);
        float _3842 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1092 = _1091 * 2.0;
        float _1096 = (1.0 - _1091) / (_1091 + 1.0);
        float _3853 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1106 = ((((1.0 - _1097) * (_1092 + 2.0)) * exp2(log2(isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * (_1092 + 1.0))) + _1097) * _978;
        _1114 = _945;
        _1116 = _944;
        _1117 = _943;
        _1118 = _955;
        _1119 = _954;
        _1120 = _953;
        _1121 = _965;
        _1122 = _964;
        _1123 = _963;
        _1124 = _978;
        _1125 = _977;
        _1126 = _976;
        _1127 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0)));
        _1128 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0)));
        _1129 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)));
    }
    else
    {
        _1114 = _1115;
        _1116 = _1115;
        _1117 = _1115;
        _1118 = _1115;
        _1119 = _1115;
        _1120 = _1115;
        _1121 = _1115;
        _1122 = _1115;
        _1123 = _1115;
        _1124 = _1115;
        _1125 = _1115;
        _1126 = _1115;
        _1127 = 0.0;
        _1128 = 0.0;
        _1129 = 0.0;
    }
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1158 = fma(_784, cbModelParam._m0[30u].z, fma(_780, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _776));
        float _1162 = fma(_784, cbModelParam._m0[31u].z, fma(_780, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _776));
        float _1166 = fma(_784, cbModelParam._m0[32u].z, fma(_780, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _776));
        float _1189 = _776 + _532;
        float _1190 = _780 + _533;
        float _1191 = _784 + _534;
        float _1201 = fma(_1191, cbModelParam._m0[30u].z, fma(_1190, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1189)) - _1158;
        float _1202 = fma(_1191, cbModelParam._m0[31u].z, fma(_1190, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1189)) - _1162;
        float _1203 = fma(_1191, cbModelParam._m0[32u].z, fma(_1190, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1189)) - _1166;
        float _1207 = inversesqrt(dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203)));
        float _1220 = ((_1207 * _1201) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1158 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1221 = ((_1207 * _1202) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1162 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1222 = ((_1207 * _1203) / cbModelParam._m0[35u].z) + ((((((_1166 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        float _1257 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1224.x + (-0.5));
        float _1259 = _1257 * (_1224.y + (-0.5));
        float _1260 = _1257 * (_1224.z + (-0.5));
        float _1267 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1231.x + (-0.5));
        float _1269 = _1267 * (_1231.y + (-0.5));
        float _1270 = _1267 * (_1231.z + (-0.5));
        float _1277 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1238.x + (-0.5));
        float _1279 = _1277 * (_1238.y + (-0.5));
        float _1280 = _1277 * (_1238.z + (-0.5));
        float _1287 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1245.x + (-0.5));
        float _1289 = _1287 * (_1245.y + (-0.5));
        float _1290 = _1287 * (_1245.z + (-0.5));
        float _1291 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = _1258 * 0.5;
        float _1295 = _1268 * 0.5;
        float _1296 = _1278 * 0.5;
        float _1297 = dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296));
        float _1302 = (_1297 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1297);
        float _1310 = (dot(vec3(_532, _533, _534), vec3(_1302 * _1294, _1302 * _1295, _1302 * _1296)) + 1.0) * 0.5;
        float _3894 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1319 = sqrt(((_1295 * _1295) + (_1294 * _1294)) + (_1296 * _1296)) / (_1291 + 9.9999997473787516355514526367188e-06);
        float _3905 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1321 = _1320 * 2.0;
        float _1325 = (1.0 - _1320) / (_1320 + 1.0);
        float _3916 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1335 = ((((1.0 - _1326) * (_1321 + 2.0)) * exp2(log2(isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_1321 + 1.0))) + _1326) * _1291;
        float _1336 = _1259 * 0.5;
        float _1337 = _1269 * 0.5;
        float _1338 = _1279 * 0.5;
        float _1339 = dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338));
        float _1344 = (_1339 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1339);
        float _1352 = (dot(vec3(_532, _533, _534), vec3(_1344 * _1336, _1344 * _1337, _1344 * _1338)) + 1.0) * 0.5;
        float _3927 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1361 = sqrt(((_1337 * _1337) + (_1336 * _1336)) + (_1338 * _1338)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _3938 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1363 = _1362 * 2.0;
        float _1367 = (1.0 - _1362) / (_1362 + 1.0);
        float _3949 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1377 = ((((1.0 - _1368) * (_1363 + 2.0)) * exp2(log2(isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * (_1363 + 1.0))) + _1368) * _1292;
        float _1378 = _1260 * 0.5;
        float _1379 = _1270 * 0.5;
        float _1380 = _1280 * 0.5;
        float _1381 = dot(vec3(_1378, _1379, _1380), vec3(_1378, _1379, _1380));
        float _1386 = (_1381 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1381);
        float _1394 = (dot(vec3(_532, _533, _534), vec3(_1386 * _1378, _1386 * _1379, _1386 * _1380)) + 1.0) * 0.5;
        float _3960 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1403 = sqrt(((_1379 * _1379) + (_1378 * _1378)) + (_1380 * _1380)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _3971 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1405 = _1404 * 2.0;
        float _1409 = (1.0 - _1404) / (_1404 + 1.0);
        float _3982 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1419 = ((((1.0 - _1410) * (_1405 + 2.0)) * exp2(log2(isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_1405 + 1.0))) + _1410) * _1293;
        _1427 = _1260;
        _1428 = _1259;
        _1429 = _1258;
        _1430 = _1270;
        _1431 = _1269;
        _1432 = _1268;
        _1433 = _1280;
        _1434 = _1279;
        _1435 = _1278;
        _1436 = _1293;
        _1437 = _1292;
        _1438 = _1291;
        _1439 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)));
        _1440 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)));
        _1441 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)));
    }
    else
    {
        _1427 = _1115;
        _1428 = _1115;
        _1429 = _1115;
        _1430 = _1115;
        _1431 = _1115;
        _1432 = _1115;
        _1433 = _1115;
        _1434 = _1115;
        _1435 = _1115;
        _1436 = _1115;
        _1437 = _1115;
        _1438 = _1115;
        _1439 = 0.0;
        _1440 = 0.0;
        _1441 = 0.0;
    }
    float _1451 = (cbModelParam._m0[1u].x * (_1439 - _1127)) + _1127;
    float _1452 = (cbModelParam._m0[1u].x * (_1440 - _1128)) + _1128;
    float _1453 = (cbModelParam._m0[1u].x * (_1441 - _1129)) + _1129;
    float _1474 = fma(_1453, cbSceneParam._m0[89u].z, fma(_1452, cbSceneParam._m0[89u].y, _1451 * cbSceneParam._m0[89u].x));
    float _1477 = fma(_1453, cbSceneParam._m0[90u].z, fma(_1452, cbSceneParam._m0[90u].y, _1451 * cbSceneParam._m0[90u].x));
    float _1480 = fma(_1453, cbSceneParam._m0[91u].z, fma(_1452, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1451));
    float _1495 = _720 * 0.5;
    float _1496 = _721 * 0.5;
    float _1497 = _722 * 0.5;
    float _1498 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1429, _1432, _1435, _1438));
    float _1501 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1428, _1431, _1434, _1437));
    float _1504 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1427, _1430, _1433, _1436));
    float _1538;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1511 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1114, _1118, _1121, _1124));
        float _1515 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1116, _1119, _1122, _1125));
        float _1519 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1117, _1120, _1123, _1126));
        float _1526 = dot(vec4(cbModelParam._m0[39u]), vec4(_1495, _1496, _1497, 1.0));
        _1538 = dot(vec3(isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)), isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)), isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1526) ? 0.0 : (isnan(0.0) ? _1526 : max(0.0, _1526))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1538 = 1.0;
    }
    float _1549;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1540 = dot(vec4(cbModelParam._m0[40u]), vec4(_1495, _1496, _1497, 1.0));
        _1549 = dot(vec3(isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)), isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)), isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1540) ? 0.0 : (isnan(0.0) ? _1540 : max(0.0, _1540))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1549 = 1.0;
    }
    float _1553 = (_1549 * cbModelParam._m0[1u].x) + (_1538 * (1.0 - cbModelParam._m0[1u].x));
    float _1563 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _535);
    float _1564 = isnan(_1563) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1563 : min(cbModelParam._m0[25u].z, _1563));
    float _1644;
    float _1646;
    float _1648;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1611 = fma(_784, cbModelParam._m0[13u].z, fma(_780, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _776)) + cbModelParam._m0[13u].w;
        float _1615 = fma(_784, cbModelParam._m0[14u].z, fma(_780, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _776)) + cbModelParam._m0[14u].w;
        float _1619 = fma(_784, cbModelParam._m0[15u].z, fma(_780, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _776)) + cbModelParam._m0[15u].w;
        float _1622 = fma(_722, cbModelParam._m0[13u].z, fma(_721, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _720));
        float _1625 = fma(_722, cbModelParam._m0[14u].z, fma(_721, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _720));
        float _1628 = fma(_722, cbModelParam._m0[15u].z, fma(_721, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _720));
        float _1656;
        if (_1622 > 0.0)
        {
            _1656 = abs((1.0 - _1611) / _1622);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1611 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1656 = frontier_phi_17_15_ladder;
        }
        float _1882;
        if (_1625 > 0.0)
        {
            _1882 = abs((1.0 - _1615) / _1625);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1615 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1882 = frontier_phi_26_22_ladder;
        }
        float _2139;
        if (_1628 > 0.0)
        {
            _2139 = abs((1.0 - _1619) / _1628);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1628 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1619 + 1.0) / _1628);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2139 = frontier_phi_38_33_ladder;
        }
        float _2141 = isnan(_1882) ? _1656 : (isnan(_1656) ? _1882 : min(_1656, _1882));
        float _2142 = isnan(_2139) ? _2141 : (isnan(_2141) ? _2139 : min(_2141, _2139));
        float _2146 = (_2142 * _1622) + _1611;
        float _2147 = (_2142 * _1625) + _1615;
        float _2148 = (_2142 * _1628) + _1619;
        float _2149 = _2142 * 9.9999997473787516355514526367188e-05;
        float _2151 = (-1.0) - _2149;
        float _2153 = _2149 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2148 > _2153) || ((_2148 < _2151) || ((_2147 > _2153) || ((_2147 < _2151) || ((_2146 < _2151) || (_2146 > _2153))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2276 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2148, cbModelParam._m0[9u].z, fma(_2147, cbModelParam._m0[9u].y, _2146 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2148, cbModelParam._m0[10u].z, fma(_2147, cbModelParam._m0[10u].y, _2146 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2148, cbModelParam._m0[11u].z, fma(_2147, cbModelParam._m0[11u].y, _2146 * cbModelParam._m0[11u].x))), _1564);
            frontier_phi_16_38_ladder = _2276.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2276.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2276.x * cbModelParam._m0[1u].y;
        }
        _1644 = frontier_phi_16_38_ladder_2;
        _1646 = frontier_phi_16_38_ladder_1;
        _1648 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1632 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_720, _721, _722), _1564);
        _1644 = _1632.x * cbModelParam._m0[1u].y;
        _1646 = _1632.y * cbModelParam._m0[1u].y;
        _1648 = _1632.z * cbModelParam._m0[1u].y;
    }
    float _1652 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _535);
    float _1653 = isnan(_1652) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1652 : min(cbModelParam._m0[25u].w, _1652));
    float _1744;
    float _1746;
    float _1748;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1708 = fma(_784, cbModelParam._m0[21u].z, fma(_780, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _776)) + cbModelParam._m0[21u].w;
        float _1712 = fma(_784, cbModelParam._m0[22u].z, fma(_780, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _776)) + cbModelParam._m0[22u].w;
        float _1716 = fma(_784, cbModelParam._m0[23u].z, fma(_780, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _776)) + cbModelParam._m0[23u].w;
        float _1719 = fma(_722, cbModelParam._m0[21u].z, fma(_721, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _720));
        float _1722 = fma(_722, cbModelParam._m0[22u].z, fma(_721, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _720));
        float _1725 = fma(_722, cbModelParam._m0[23u].z, fma(_721, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _720));
        float _1887;
        if (_1719 > 0.0)
        {
            _1887 = abs((1.0 - _1708) / _1719);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1719 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1708 + 1.0) / _1719);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1887 = frontier_phi_28_24_ladder;
        }
        float _2166;
        if (_1722 > 0.0)
        {
            _2166 = abs((1.0 - _1712) / _1722);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1722 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1712 + 1.0) / _1722);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2166 = frontier_phi_40_35_ladder;
        }
        float _2379;
        if (_1725 > 0.0)
        {
            _2379 = abs((1.0 - _1716) / _1725);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1725 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1716 + 1.0) / _1725);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2379 = frontier_phi_49_46_ladder;
        }
        float _2381 = isnan(_2166) ? _1887 : (isnan(_1887) ? _2166 : min(_1887, _2166));
        float _2382 = isnan(_2379) ? _2381 : (isnan(_2381) ? _2379 : min(_2381, _2379));
        float _2386 = (_2382 * _1719) + _1708;
        float _2387 = (_2382 * _1722) + _1712;
        float _2388 = (_2382 * _1725) + _1716;
        float _2389 = _2382 * 9.9999997473787516355514526367188e-05;
        float _2390 = (-1.0) - _2389;
        float _2392 = _2389 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2388 > _2392) || ((_2388 < _2390) || ((_2387 > _2392) || ((_2387 < _2390) || ((_2386 < _2390) || (_2386 > _2392))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2616 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2388, cbModelParam._m0[17u].z, fma(_2387, cbModelParam._m0[17u].y, _2386 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2388, cbModelParam._m0[18u].z, fma(_2387, cbModelParam._m0[18u].y, _2386 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2388, cbModelParam._m0[19u].z, fma(_2387, cbModelParam._m0[19u].y, _2386 * cbModelParam._m0[19u].x))), _1653);
            frontier_phi_25_49_ladder = _2616.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2616.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2616.x * cbModelParam._m0[1u].z;
        }
        _1744 = frontier_phi_25_49_ladder_2;
        _1746 = frontier_phi_25_49_ladder_1;
        _1748 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1728 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_720, _721, _722), _1653);
        _1744 = _1728.x * cbModelParam._m0[1u].z;
        _1746 = _1728.y * cbModelParam._m0[1u].z;
        _1748 = _1728.z * cbModelParam._m0[1u].z;
    }
    float _1761 = (((_747 * _697) + _748) * _712) * ((cbModelParam._m0[1u].w * (_1744 - _1644)) + _1644);
    float _1763 = (((_747 * _699) + _748) * _712) * ((cbModelParam._m0[1u].w * (_1746 - _1646)) + _1646);
    float _1765 = (((_747 * _700) + _748) * _712) * ((cbModelParam._m0[1u].w * (_1748 - _1648)) + _1648);
    float _1768 = fma(_1765, cbSceneParam._m0[89u].z, fma(_1763, cbSceneParam._m0[89u].y, _1761 * cbSceneParam._m0[89u].x));
    float _1771 = fma(_1765, cbSceneParam._m0[90u].z, fma(_1763, cbSceneParam._m0[90u].y, _1761 * cbSceneParam._m0[90u].x));
    float _1774 = fma(_1765, cbSceneParam._m0[91u].z, fma(_1763, cbSceneParam._m0[91u].y, _1761 * cbSceneParam._m0[91u].x));
    vec4 _1782 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_632, _633));
    float _1784 = _1782.w;
    float _1796 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1784);
    float _1797 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1784);
    float _1798 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1784);
    uvec4 _1802 = floatBitsToUint(cbInstanceData._m0[_672 + 5u]);
    uint _1804 = _1802.x * 14u;
    uint _1805 = _1804 + 13u;
    float _1812 = _712 + (-1.0);
    float _1817 = (cbLight._m0[_1805].x * _1812) + 1.0;
    float _1818 = (cbLight._m0[_1805].y * _1812) + 1.0;
    float _1819 = (cbLight._m0[_1805].z * _1812) + 1.0;
    float _1820 = (cbLight._m0[_1805].w * _1812) + 1.0;
    uint _1821 = _1804 + 5u;
    float _1827 = isnan(1.0) ? _1818 : (isnan(_1818) ? 1.0 : min(_1818, 1.0));
    uint _1831 = _1804 + 4u;
    float _1841 = isnan(1.0) ? _1817 : (isnan(_1817) ? 1.0 : min(_1817, 1.0));
    uint _1845 = _1804 | 1u;
    float _1856 = dot(vec3(cbLight._m0[_1804].xyz), vec3(_532, _533, _534));
    float _1859 = dot(vec3(cbLight._m0[_1845].xyz), vec3(_532, _533, _534));
    float _4118 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
    float _4129 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
    float _1864 = (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * 0.3183098733425140380859375;
    float _1866 = (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * 0.3183098733425140380859375;
    float _1873 = ((cbLight._m0[_1821].x * _1827) * _1866) + (((cbLight._m0[_1831].x * _1796) * _1841) * _1864);
    float _1874 = ((_1827 * cbLight._m0[_1821].y) * _1866) + (((cbLight._m0[_1831].y * _1797) * _1841) * _1864);
    float _1875 = ((_1827 * cbLight._m0[_1821].z) * _1866) + (((cbLight._m0[_1831].z * _1798) * _1841) * _1864);
    uvec4 _1879 = floatBitsToUint(cbLight._m0[_1804 + 12u]);
    bool _1881 = _1879.x == 0u;
    float _1892;
    float _1894;
    float _1896;
    if (_1881)
    {
        _1892 = _1873;
        _1894 = _1874;
        _1896 = _1875;
    }
    else
    {
        uint _1900 = _1804 + 6u;
        float _1916 = (dot(vec3(cbLight._m0[_1804 + 2u].xyz), vec3(_532, _533, _534)) * 0.5) + 0.5;
        float _1917 = _1916 * _1916;
        float _4140 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
        float _1918 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1919 = isnan(1.0) ? _1819 : (isnan(_1819) ? 1.0 : min(_1819, 1.0));
        _1892 = (((cbLight._m0[_1900].x * 0.3183098733425140380859375) * _1918) * _1919) + _1873;
        _1894 = (((cbLight._m0[_1900].y * 0.3183098733425140380859375) * _1918) * _1919) + _1874;
        _1896 = (((cbLight._m0[_1900].z * 0.3183098733425140380859375) * _1918) * _1919) + _1875;
    }
    bool _1899 = _1879.y == 0u;
    float _1937;
    float _1939;
    float _1941;
    if (_1899)
    {
        _1937 = _1892;
        _1939 = _1894;
        _1941 = _1896;
    }
    else
    {
        uint _2110 = _1804 + 7u;
        float _2126 = (dot(vec3(cbLight._m0[_1804 + 3u].xyz), vec3(_532, _533, _534)) * 0.5) + 0.5;
        float _2127 = _2126 * _2126;
        float _4156 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        float _2128 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _2129 = isnan(1.0) ? _1820 : (isnan(_1820) ? 1.0 : min(_1820, 1.0));
        _1937 = (((cbLight._m0[_2110].x * 0.3183098733425140380859375) * _2128) * _2129) + _1892;
        _1939 = (((cbLight._m0[_2110].y * 0.3183098733425140380859375) * _2128) * _2129) + _1894;
        _1941 = (((cbLight._m0[_2110].z * 0.3183098733425140380859375) * _2128) * _2129) + _1896;
    }
    uint _1944 = _1804 + 8u;
    float _1957 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1804].w)) * _535) * 0.949999988079071044921875);
    float _1958 = _1957 * _1957;
    float _1959 = cbLight._m0[_1804].x + _612;
    float _1960 = cbLight._m0[_1804].y + _613;
    float _1961 = cbLight._m0[_1804].z + _614;
    float _1965 = inversesqrt(dot(vec3(_1959, _1960, _1961), vec3(_1959, _1960, _1961)));
    float _1966 = _1965 * _1959;
    float _1967 = _1965 * _1960;
    float _1968 = _1965 * _1961;
    float _1969 = dot(vec3(_532, _533, _534), vec3(cbLight._m0[_1804].xyz));
    float _4172 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _1972 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _4183 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _1973 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _1974 = dot(vec3(_532, _533, _534), vec3(_1966, _1967, _1968));
    float _4194 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _1977 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
    float _1978 = dot(vec3(cbLight._m0[_1804].xyz), vec3(_1966, _1967, _1968));
    float _4205 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
    float _1982 = _1958 * _1958;
    float _1986 = ((_1977 * _1977) * (_1982 + (-1.0))) + 1.0;
    float _1994 = exp2(log2(1.0 - (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0)))) * 5.0);
    float _1995 = 0.959999978542327880859375 - _694;
    float _1997 = 0.959999978542327880859375 - _695;
    float _1998 = 0.959999978542327880859375 - _696;
    float _2005 = 1.0 - _1958;
    float _2016 = (0.5 / (((_1973 * ((_1972 * _2005) + _1958)) + 9.9999999392252902907785028219223e-09) + (((_1973 * _2005) + _1958) * _1972))) * _1972;
    float _4216 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2018 = (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_1982 / ((_1986 * _1986) * 3.141590118408203125));
    uint _2032 = _1804 + 9u;
    float _2043 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1845].w)) * _535) * 0.949999988079071044921875);
    float _2044 = _2043 * _2043;
    float _2045 = cbLight._m0[_1845].x + _612;
    float _2046 = cbLight._m0[_1845].y + _613;
    float _2047 = cbLight._m0[_1845].z + _614;
    float _2051 = inversesqrt(dot(vec3(_2045, _2046, _2047), vec3(_2045, _2046, _2047)));
    float _2052 = _2051 * _2045;
    float _2053 = _2051 * _2046;
    float _2054 = _2051 * _2047;
    float _2055 = dot(vec3(_532, _533, _534), vec3(cbLight._m0[_1845].xyz));
    float _4227 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2058 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _2059 = dot(vec3(_532, _533, _534), vec3(_2052, _2053, _2054));
    float _4238 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2062 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _2063 = dot(vec3(cbLight._m0[_1845].xyz), vec3(_2052, _2053, _2054));
    float _4249 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2067 = _2044 * _2044;
    float _2071 = ((_2062 * _2062) * (_2067 + (-1.0))) + 1.0;
    float _2078 = exp2(log2(1.0 - (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0)))) * 5.0);
    float _2085 = 1.0 - _2044;
    float _2095 = (0.5 / (((_1973 * ((_2058 * _2085) + _2044)) + 9.9999999392252902907785028219223e-09) + (((_1973 * _2085) + _2044) * _2058))) * _2058;
    float _4260 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2097 = (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_2067 / ((_2071 * _2071) * 3.141590118408203125));
    float _2107 = (((((_2078 * _1995) + _697) * cbLight._m0[_2032].x) * _2097) * _1827) + ((((cbLight._m0[_1944].x * _1796) * ((_1994 * _1995) + _697)) * _2018) * _1841);
    float _2108 = (((((_2078 * _1997) + _699) * cbLight._m0[_2032].y) * _2097) * _1827) + ((((cbLight._m0[_1944].y * _1797) * ((_1994 * _1997) + _699)) * _2018) * _1841);
    float _2109 = (((((_2078 * _1998) + _700) * cbLight._m0[_2032].z) * _2097) * _1827) + ((((cbLight._m0[_1944].z * _1798) * ((_1994 * _1998) + _700)) * _2018) * _1841);
    float _2171;
    float _2173;
    float _2175;
    if (_1881)
    {
        _2171 = _2107;
        _2173 = _2108;
        _2175 = _2109;
    }
    else
    {
        uint _2177 = _1804 + 2u;
        uint _2181 = _1804 + 10u;
        float _2195 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2177].w)) * _535) * 0.949999988079071044921875);
        float _2196 = _2195 * _2195;
        float _2197 = cbLight._m0[_2177].x + _612;
        float _2198 = cbLight._m0[_2177].y + _613;
        float _2199 = cbLight._m0[_2177].z + _614;
        float _2203 = inversesqrt(dot(vec3(_2197, _2198, _2199), vec3(_2197, _2198, _2199)));
        float _2204 = _2203 * _2197;
        float _2205 = _2203 * _2198;
        float _2206 = _2203 * _2199;
        float _2207 = dot(vec3(_532, _533, _534), vec3(cbLight._m0[_2177].xyz));
        float _4271 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2210 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _2211 = dot(vec3(_532, _533, _534), vec3(_2204, _2205, _2206));
        float _4282 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2214 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _2215 = dot(vec3(cbLight._m0[_2177].xyz), vec3(_2204, _2205, _2206));
        float _4293 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2219 = _2196 * _2196;
        float _2223 = ((_2214 * _2214) * (_2219 + (-1.0))) + 1.0;
        float _2230 = exp2(log2(1.0 - (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0)))) * 5.0);
        float _2237 = 1.0 - _2196;
        float _2247 = (0.5 / (((_1973 * ((_2210 * _2237) + _2196)) + 9.9999999392252902907785028219223e-09) + (((_1973 * _2237) + _2196) * _2210))) * _2210;
        float _4304 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2249 = (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_2219 / ((_2223 * _2223) * 3.141590118408203125));
        float _2250 = isnan(1.0) ? _1819 : (isnan(_1819) ? 1.0 : min(_1819, 1.0));
        _2171 = (((((_2230 * _1995) + _697) * cbLight._m0[_2181].x) * _2249) * _2250) + _2107;
        _2173 = (((((_2230 * _1997) + _699) * cbLight._m0[_2181].y) * _2249) * _2250) + _2108;
        _2175 = (((((_2230 * _1998) + _700) * cbLight._m0[_2181].z) * _2249) * _2250) + _2109;
    }
    float _2285;
    float _2287;
    float _2289;
    if (_1899)
    {
        _2285 = _2171;
        _2287 = _2173;
        _2289 = _2175;
    }
    else
    {
        uint _2296 = _1804 + 3u;
        uint _2300 = _1804 + 11u;
        float _2314 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2296].w)) * _535) * 0.949999988079071044921875);
        float _2315 = _2314 * _2314;
        float _2316 = cbLight._m0[_2296].x + _612;
        float _2317 = cbLight._m0[_2296].y + _613;
        float _2318 = cbLight._m0[_2296].z + _614;
        float _2322 = inversesqrt(dot(vec3(_2316, _2317, _2318), vec3(_2316, _2317, _2318)));
        float _2323 = _2322 * _2316;
        float _2324 = _2322 * _2317;
        float _2325 = _2322 * _2318;
        float _2326 = dot(vec3(_532, _533, _534), vec3(cbLight._m0[_2296].xyz));
        float _4320 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2329 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _2330 = dot(vec3(_532, _533, _534), vec3(_2323, _2324, _2325));
        float _4331 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2333 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _2334 = dot(vec3(cbLight._m0[_2296].xyz), vec3(_2323, _2324, _2325));
        float _4342 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2338 = _2315 * _2315;
        float _2342 = ((_2333 * _2333) * (_2338 + (-1.0))) + 1.0;
        float _2349 = exp2(log2(1.0 - (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0)))) * 5.0);
        float _2356 = 1.0 - _2315;
        float _2366 = (0.5 / (((_1973 * ((_2329 * _2356) + _2315)) + 9.9999999392252902907785028219223e-09) + (((_1973 * _2356) + _2315) * _2329))) * _2329;
        float _4353 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2368 = (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_2338 / ((_2342 * _2342) * 3.141590118408203125));
        float _2369 = isnan(1.0) ? _1820 : (isnan(_1820) ? 1.0 : min(_1820, 1.0));
        _2285 = (((((_2349 * _1995) + _697) * cbLight._m0[_2300].x) * _2368) * _2369) + _2171;
        _2287 = (((((_2349 * _1997) + _699) * cbLight._m0[_2300].y) * _2368) * _2369) + _2173;
        _2289 = (((((_2349 * _1998) + _700) * cbLight._m0[_2300].z) * _2368) * _2369) + _2175;
    }
    float _2504;
    float _2506;
    float _2508;
    float _2510;
    float _2512;
    float _2514;
    if (_1802.y == 0u)
    {
        float _2444 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2445 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2444;
        float _2446 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2444;
        float _2447 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2444;
        uvec4 _2459 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2460 = _2459.x;
        uint _2471 = uint((float(_2459.y) * floor(float(uint(cbSceneParam._m0[85u].y * _633) / _2460))) + floor(float(uint(cbSceneParam._m0[85u].x * _632) / _2460)));
        float _2481 = (log2(_2447 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2482 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        uint _2485 = uint(isnan(14.0) ? _2482 : (isnan(_2482) ? 14.0 : min(_2482, 14.0)));
        uvec4 _2490 = texelFetch(g_lightClusterGridBuffer, int(((_2485 << 2u) + (_2471 << 6u)) >> 2u));
        uint _2491 = _2490.x;
        uint _2492 = _2459.z;
        float _2621;
        float _2623;
        float _2625;
        float _2627;
        float _2629;
        float _2631;
        if (((((1u << ((_2492 >> 4u) & 15u)) + 4294967295u) & _2491) == 0u) || ((_2492 & 240u) == 0u))
        {
            _2621 = 0.0;
            _2623 = 0.0;
            _2625 = 0.0;
            _2627 = 0.0;
            _2629 = 0.0;
            _2631 = 0.0;
        }
        else
        {
            float _2622;
            float _2624;
            float _2626;
            float _2628;
            float _2630;
            float _2632;
            float _2783 = 0.0;
            float _2784 = 0.0;
            float _2785 = 0.0;
            float _2786 = 0.0;
            float _2787 = 0.0;
            float _2788 = 0.0;
            uint _2789 = 0u;
            uint _2798;
            bool _2799;
            for (;;)
            {
                _2798 = texelFetch(g_lightClassification, int((((_2485 << 5u) + (_2471 << 9u)) + (_2789 << 2u)) >> 2u)).x;
                _2799 = _2798 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2799)
                {
                    frontier_phi_66_pred = _2783;
                    frontier_phi_66_pred_1 = _2788;
                    frontier_phi_66_pred_2 = _2787;
                    frontier_phi_66_pred_3 = _2786;
                    frontier_phi_66_pred_4 = _2785;
                    frontier_phi_66_pred_5 = _2784;
                }
                else
                {
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    float _2932;
                    float _2933;
                    uint _2934;
                    _2928 = _2783;
                    _2929 = _2784;
                    _2930 = _2785;
                    _2931 = _2786;
                    _2932 = _2787;
                    _2933 = _2788;
                    _2934 = _2798;
                    float _2855;
                    float _2856;
                    float _2857;
                    float _2858;
                    float _2859;
                    float _2860;
                    for (;;)
                    {
                        uint _2938 = uint(findLSB(_2934)) + (_2789 << 5u);
                        uint _2935 = (_2934 + 4294967295u) & _2934;
                        uint _2940 = _2938 * 48u;
                        vec4 _2954 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2940)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 3u)).x));
                        uint _2960 = (_2938 * 48u) + 4u;
                        vec4 _2973 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2960)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 3u)).x));
                        uint _2979 = (_2938 * 48u) + 8u;
                        vec3 _2990 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2979)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 2u)).x));
                        float _2994 = _2954.x - _2445;
                        float _2995 = _2954.y - _2446;
                        float _2996 = _2954.z - _2447;
                        float _2997 = dot(vec3(_2994, _2995, _2996), vec3(_2994, _2995, _2996));
                        float _3000 = inversesqrt(_2997);
                        float _3001 = _3000 * _2994;
                        float _3002 = _3000 * _2995;
                        float _3003 = _3000 * _2996;
                        float _3004 = dot(vec3(_653, _656, _659), vec3(_3001, _3002, _3003));
                        float _3009 = 1.0 - (_2997 * _2954.w);
                        float _4379 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                        float _3010 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                        float _3011 = sqrt(_2997) * _2973.w;
                        float _3014 = 1.39999997615814208984375 / (_3011 + 1.39999997615814208984375);
                        float _3015 = _3014 * _3014;
                        float _3018 = ((1.0 - _3015) * _3004) + _3015;
                        float _3021 = _3011 * _3011;
                        float _3025 = ((isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0))) * _3010) / ((_3021 * 0.699999988079071044921875) + 1.0);
                        float _3029 = (-0.0) - _2445;
                        float _3030 = (-0.0) - _2446;
                        float _3031 = (-0.0) - _2447;
                        float _3035 = inversesqrt(dot(vec3(_3029, _3030, _3031), vec3(_3029, _3030, _3031)));
                        float _3036 = _3035 * _3029;
                        float _3037 = _3035 * _3030;
                        float _3038 = _3035 * _3031;
                        float _3046 = exp2(log2(1.0 / ((_3021 * 3.5) + 5.0)) * 0.25);
                        float _3047 = 1.0 - _728;
                        float _3054 = sqrt(1.0 - ((1.0 - (_3047 * _3047)) * (1.0 - (_3046 * _3046))));
                        float _3055 = _3054 * _3054;
                        float _3056 = _3055 * _3055;
                        float _3057 = _3036 + _3001;
                        float _3058 = _3037 + _3002;
                        float _3059 = _3038 + _3003;
                        float _3063 = inversesqrt(dot(vec3(_3057, _3058, _3059), vec3(_3057, _3058, _3059)));
                        float _3067 = dot(vec3(_653, _656, _659), vec3(_3036, _3037, _3038));
                        float _4395 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                        float _3070 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
                        float _3071 = dot(vec3(_653, _656, _659), vec3(_3063 * _3057, _3063 * _3058, _3063 * _3059));
                        float _4406 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                        float _3074 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
                        float _3078 = ((_3074 * _3074) * (_3056 + (-1.0))) + 1.0;
                        float _3079 = _3014 * _3055;
                        float _3080 = _3079 * _3079;
                        float _3083 = ((1.0 - _3080) * _3004) + _3080;
                        float _4417 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                        float _3084 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
                        float _3085 = 1.0 - _3055;
                        float _3095 = (0.5 / (((_3084 * ((_3070 * _3085) + _3055)) + 9.9999999392252902907785028219223e-09) + (((_3084 * _3085) + _3055) * _3070))) * _3084;
                        float _4428 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
                        float _3106 = (((_3056 * 3.1415927410125732421875) * (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0)))) / ((_3078 * _3078) * ((_3021 * 2.1991131305694580078125) + 3.141590118408203125))) * _3010;
                        _2858 = (_3025 * _2973.x) + _2931;
                        _2859 = (_3025 * _2973.y) + _2932;
                        _2860 = (_3025 * _2973.z) + _2933;
                        _2855 = (_3106 * _2990.x) + _2928;
                        _2856 = (_3106 * _2990.y) + _2929;
                        _2857 = (_3106 * _2990.z) + _2930;
                        if (_2935 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2928 = _2855;
                            _2929 = _2856;
                            _2930 = _2857;
                            _2931 = _2858;
                            _2932 = _2859;
                            _2933 = _2860;
                            _2934 = _2935;
                        }
                    }
                    frontier_phi_66_pred = _2855;
                    frontier_phi_66_pred_1 = _2860;
                    frontier_phi_66_pred_2 = _2859;
                    frontier_phi_66_pred_3 = _2858;
                    frontier_phi_66_pred_4 = _2857;
                    frontier_phi_66_pred_5 = _2856;
                }
                _2622 = frontier_phi_66_pred;
                _2632 = frontier_phi_66_pred_1;
                _2630 = frontier_phi_66_pred_2;
                _2628 = frontier_phi_66_pred_3;
                _2626 = frontier_phi_66_pred_4;
                _2624 = frontier_phi_66_pred_5;
                uint _2790 = _2789 + 1u;
                if (_2790 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2783 = _2622;
                    _2784 = _2624;
                    _2785 = _2626;
                    _2786 = _2628;
                    _2787 = _2630;
                    _2788 = _2632;
                    _2789 = _2790;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2621 = _2622;
            _2623 = _2624;
            _2625 = _2626;
            _2627 = _2628;
            _2629 = _2630;
            _2631 = _2632;
        }
        uvec4 _2635 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2636 = _2635.z;
        uint _2638 = (_2636 >> 8u) & 15u;
        float _2751;
        float _2753;
        float _2755;
        float _2757;
        float _2759;
        float _2761;
        if (((4294967295u << _2638) & _2491) == 0u)
        {
            _2751 = _2621;
            _2753 = _2623;
            _2755 = _2625;
            _2757 = _2627;
            _2759 = _2629;
            _2761 = _2631;
        }
        else
        {
            float _2776 = inversesqrt(dot(vec3(_2445, _2446, _2447), vec3(_2445, _2446, _2447)));
            float _2777 = _2776 * _2445;
            float _2778 = _2776 * _2446;
            float _2779 = _2776 * _2447;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2638 < ((_2636 >> 12u) & 15u))
            {
                float _2752;
                float _2754;
                float _2756;
                float _2758;
                float _2760;
                float _2762;
                float _2911 = _2621;
                float _2912 = _2623;
                float _2913 = _2625;
                float _2914 = _2627;
                float _2915 = _2629;
                float _2916 = _2631;
                uint _2917 = _2638;
                uint _2926;
                bool _2927;
                for (;;)
                {
                    _2926 = texelFetch(g_lightClassification, int((((_2485 << 5u) + (_2471 << 9u)) + (_2917 << 2u)) >> 2u)).x;
                    _2927 = _2926 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2927)
                    {
                        frontier_phi_77_pred = _2916;
                        frontier_phi_77_pred_1 = _2915;
                        frontier_phi_77_pred_2 = _2914;
                        frontier_phi_77_pred_3 = _2913;
                        frontier_phi_77_pred_4 = _2912;
                        frontier_phi_77_pred_5 = _2911;
                    }
                    else
                    {
                        float _3120;
                        float _3121;
                        float _3122;
                        float _3123;
                        float _3124;
                        float _3125;
                        float _3415;
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3133 = _2911;
                        float _3134 = _2912;
                        float _3135 = _2913;
                        float _3136 = _2914;
                        float _3137 = _2915;
                        float _3138 = _2916;
                        uint _3139 = _2926;
                        uint _3140;
                        vec4 _3165;
                        float _3166;
                        vec4 _3181;
                        vec3 _3193;
                        vec4 _3208;
                        vec4 _3224;
                        float _3271;
                        bool _3272;
                        for (;;)
                        {
                            uint _3150 = ((_2917 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3139));
                            _3140 = (_3139 + 4294967295u) & _3139;
                            uint _3152 = _3150 * 40u;
                            _3165 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3152)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 3u)).x));
                            _3166 = _3165.w;
                            uint _3168 = (_3150 * 40u) + 4u;
                            _3181 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3168)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 3u)).x));
                            uint _3183 = (_3150 * 40u) + 8u;
                            _3193 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3183)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 2u)).x));
                            uint _3195 = (_3150 * 40u) + 16u;
                            _3208 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3195)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 3u)).x));
                            uint _3211 = (_3150 * 40u) + 20u;
                            _3224 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3211)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 3u)).x));
                            uint _3227 = (_3150 * 40u) + 24u;
                            vec4 _3240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 3u)).x));
                            uint _3246 = (_3150 * 40u) + 28u;
                            vec4 _3259 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3246)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 3u)).x));
                            _3271 = fma(_2447, _3259.z, fma(_2446, _3259.y, _3259.x * _2445)) + _3259.w;
                            _3272 = !((fma(_2447, _3240.z, fma(_2446, _3240.y, _3240.x * _2445)) + _3240.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3272)
                            {
                                float _3299 = _3165.x - _2445;
                                float _3300 = _3165.y - _2446;
                                float _3301 = _3165.z - _2447;
                                float _3302 = dot(vec3(_3299, _3300, _3301), vec3(_3299, _3300, _3301));
                                float _3305 = inversesqrt(_3302);
                                float _3306 = _3305 * _3299;
                                float _3307 = _3305 * _3300;
                                float _3308 = _3305 * _3301;
                                float _3312 = 1.0 - (_3302 / (_3166 * _3166));
                                float _4439 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                                float _3313 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
                                float _3317 = sqrt(_3302) * _3181.w;
                                float _3319 = 1.39999997615814208984375 / (_3317 + 1.39999997615814208984375);
                                float _3320 = _3319 * _3319;
                                float _3323 = ((1.0 - _3320) * dot(vec3(_3306, _3307, _3308), vec3(_653, _656, _659))) + _3320;
                                float _3326 = _3317 * _3317;
                                float _3330 = (fma(_2447, _3208.z, fma(_2446, _3208.y, _3208.x * _2445)) + _3208.w) / _3271;
                                float _3331 = (fma(_2447, _3224.z, fma(_2446, _3224.y, _3224.x * _2445)) + _3224.w) / _3271;
                                float _3335 = 1.0 - dot(vec2(_3330, _3331), vec2(_3330, _3331));
                                float _4455 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                                float _3336 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
                                float _3337 = _3336 * (((isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0))) * _3313) / ((_3326 * 0.699999988079071044921875) + 1.0));
                                float _3349 = exp2(log2(1.0 / ((_3326 * 3.5) + 5.0)) * 0.25);
                                float _3350 = 1.0 - _728;
                                float _3357 = sqrt(1.0 - ((1.0 - (_3350 * _3350)) * (1.0 - (_3349 * _3349))));
                                float _3358 = _3357 * _3357;
                                float _3359 = _3358 * _3358;
                                float _3360 = _3306 - _2777;
                                float _3361 = _3307 - _2778;
                                float _3362 = _3308 - _2779;
                                float _3366 = inversesqrt(dot(vec3(_3360, _3361, _3362), vec3(_3360, _3361, _3362)));
                                float _3370 = dot(vec3(_653, _656, _659), vec3((-0.0) - _2777, (-0.0) - _2778, (-0.0) - _2779));
                                float _4466 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                                float _3373 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
                                float _3374 = dot(vec3(_653, _656, _659), vec3(_3366 * _3360, _3366 * _3361, _3366 * _3362));
                                float _4477 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                                float _3377 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
                                float _3381 = ((_3377 * _3377) * (_3359 + (-1.0))) + 1.0;
                                float _3382 = _3319 * _3358;
                                float _3383 = _3382 * _3382;
                                float _3389 = ((1.0 - _3383) * dot(vec3(_653, _656, _659), vec3(_3306, _3307, _3308))) + _3383;
                                float _4488 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                                float _3390 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
                                float _3391 = 1.0 - _3358;
                                float _3401 = (0.5 / (((_3390 * ((_3373 * _3391) + _3358)) + 9.9999999392252902907785028219223e-09) + (((_3390 * _3391) + _3358) * _3373))) * _3390;
                                float _4499 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                                float _3411 = (_3336 * _3313) * (((_3359 * 3.1415927410125732421875) * (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0)))) / ((_3381 * _3381) * ((_3326 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3337 * _3181.y;
                                frontier_phi_83_pred_1 = _3337 * _3181.x;
                                frontier_phi_83_pred_2 = _3411 * _3193.z;
                                frontier_phi_83_pred_3 = _3411 * _3193.y;
                                frontier_phi_83_pred_4 = _3411 * _3193.x;
                                frontier_phi_83_pred_5 = _3337 * _3181.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3419 = frontier_phi_83_pred;
                            _3418 = frontier_phi_83_pred_1;
                            _3417 = frontier_phi_83_pred_2;
                            _3416 = frontier_phi_83_pred_3;
                            _3415 = frontier_phi_83_pred_4;
                            _3420 = frontier_phi_83_pred_5;
                            _3123 = _3418 + _3136;
                            _3124 = _3419 + _3137;
                            _3125 = _3420 + _3138;
                            _3120 = _3415 + _3133;
                            _3121 = _3416 + _3134;
                            _3122 = _3417 + _3135;
                            if (_3140 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3133 = _3120;
                                _3134 = _3121;
                                _3135 = _3122;
                                _3136 = _3123;
                                _3137 = _3124;
                                _3138 = _3125;
                                _3139 = _3140;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3125;
                        frontier_phi_77_pred_1 = _3124;
                        frontier_phi_77_pred_2 = _3123;
                        frontier_phi_77_pred_3 = _3122;
                        frontier_phi_77_pred_4 = _3121;
                        frontier_phi_77_pred_5 = _3120;
                    }
                    _2762 = frontier_phi_77_pred;
                    _2760 = frontier_phi_77_pred_1;
                    _2758 = frontier_phi_77_pred_2;
                    _2756 = frontier_phi_77_pred_3;
                    _2754 = frontier_phi_77_pred_4;
                    _2752 = frontier_phi_77_pred_5;
                    uint _2918 = _2917 + 1u;
                    if (_2918 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2911 = _2752;
                        _2912 = _2754;
                        _2913 = _2756;
                        _2914 = _2758;
                        _2915 = _2760;
                        _2916 = _2762;
                        _2917 = _2918;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2756;
                frontier_phi_58_59_ladder_1 = _2762;
                frontier_phi_58_59_ladder_2 = _2760;
                frontier_phi_58_59_ladder_3 = _2758;
                frontier_phi_58_59_ladder_4 = _2754;
                frontier_phi_58_59_ladder_5 = _2752;
            }
            else
            {
                frontier_phi_58_59_ladder = _2625;
                frontier_phi_58_59_ladder_1 = _2631;
                frontier_phi_58_59_ladder_2 = _2629;
                frontier_phi_58_59_ladder_3 = _2627;
                frontier_phi_58_59_ladder_4 = _2623;
                frontier_phi_58_59_ladder_5 = _2621;
            }
            _2751 = frontier_phi_58_59_ladder_5;
            _2753 = frontier_phi_58_59_ladder_4;
            _2755 = frontier_phi_58_59_ladder;
            _2757 = frontier_phi_58_59_ladder_3;
            _2759 = frontier_phi_58_59_ladder_2;
            _2761 = frontier_phi_58_59_ladder_1;
        }
        float _2766 = isnan(1.0) ? _712 : (isnan(_712) ? 1.0 : min(_712, 1.0));
        _2504 = (_2766 * _2757) + _1937;
        _2506 = (_2766 * _2759) + _1939;
        _2508 = (_2766 * _2761) + _1941;
        _2510 = ((_2751 * _697) * _2766) + _2285;
        _2512 = ((_2753 * _699) * _2766) + _2287;
        _2514 = ((_2755 * _700) * _2766) + _2289;
    }
    else
    {
        _2504 = _1937;
        _2506 = _1939;
        _2508 = _1941;
        _2510 = _2285;
        _2512 = _2287;
        _2514 = _2289;
    }
    uint _2520 = _673 + uint(cbMatDynParam._m0[0u].w);
    float _2526 = cbInstanceData._m0[_2520].x * (_451 - (_467 * _451));
    float _2527 = cbInstanceData._m0[_2520].y * (_452 - (_467 * _452));
    float _2528 = cbInstanceData._m0[_2520].z * (_453 - (_467 * _453));
    float _4515 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _4526 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _4537 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _2545 = (((isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * (_2504 + ((isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))) * _712))) + ((_2510 + ((isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))) * _1553)) * cbPerFrame._m0[3u].x)) + _2526;
    float _2547 = (_2527 + ((_2512 + ((isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))) * _1553)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0))) * (_2506 + ((isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0))) * _712)));
    float _2549 = (_2528 + ((_2514 + ((isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))) * _1553)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * (_2508 + ((isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))) * _712)));
    float _2550 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
    float _2551 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
    float _2552 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
    float _2558 = cbMtdParam._m0[2u].x * _2526;
    float _2559 = cbMtdParam._m0[2u].y * _2527;
    float _2560 = cbMtdParam._m0[2u].z * _2528;
    float _4563 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2562 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
    uint _2563 = _672 + 6u;
    float _2571 = _632 / cbSceneParam._m0[86u].x;
    float _2572 = _633 / cbSceneParam._m0[86u].y;
    vec4 _2586 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2571, _2572, (log2((isnan(cbSceneParam._m0[77u].w) ? _555 : (isnan(_555) ? cbSceneParam._m0[77u].w : min(_555, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2588 = _2586.x;
    float _2589 = _2586.y;
    float _2590 = _2586.z;
    float _2591 = _2586.w;
    float _2684;
    float _2686;
    float _2688;
    float _2690;
    if (_555 > cbSceneParam._m0[78u].w)
    {
        float _2646 = isnan(_555) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _555 : min(cbSceneParam._m0[80u].w, _555));
        float _2647 = _2646 / _555;
        float _2658 = _2647 * _605;
        float _2659 = _606 * _2647;
        float _2660 = (-0.0) - _2659;
        float _2662 = _2647 * _607;
        float _2664 = (cbSceneParam._m0[77u].w * _2660) / _2646;
        float _2665 = _2664 + cbSceneParam._m0[79u].w;
        float _2666 = cbSceneParam._m0[79u].w - _2659;
        float _2672 = sqrt(((_2658 * _2658) + (_2659 * _2659)) + (_2662 * _2662));
        float _2675 = (1.0 - (cbSceneParam._m0[77u].w / _2646)) * _2672;
        float _2680 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2682 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2868;
        if (abs((_2660 - _2664) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2868 = ((((_2665 > 0.0) ? exp2(_2680 * _2665) : (2.0 - exp2(_2682 * _2665))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2675;
        }
        else
        {
            float _2812 = 1.0 / cbSceneParam._m0[80u].x;
            float _2813 = isnan(_2666) ? _2665 : (isnan(_2665) ? _2666 : max(_2665, _2666));
            float _2814 = isnan(_2666) ? _2665 : (isnan(_2665) ? _2666 : min(_2665, _2666));
            float _2823 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : min(_2813, 0.0));
            float _2824 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : min(_2814, 0.0));
            _2868 = ((abs(_2672 / _2660) * cbSceneParam._m0[80u].y) * ((((_2823 - _2824) * 2.0) - ((exp2(_2680 * (isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0)))) - exp2(_2680 * (isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0))))) * _2812)) - ((exp2(_2682 * _2823) - exp2(_2682 * _2824)) * _2812))) + (_2675 * cbSceneParam._m0[80u].z);
        }
        vec4 _2870 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2571, _2572, 1.0), 0.0);
        float _2879 = exp2((_2868 * (-1.44269502162933349609375)) * (1.0 - _2870.w));
        float _2880 = log2(_2879);
        float _2896 = log2(_2591);
        _2684 = (exp2(_2896 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2880 * cbSceneParam._m0[78u].x)) * _2870.x) / cbSceneParam._m0[78u].x)) + _2588;
        _2686 = (exp2(_2896 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2880 * cbSceneParam._m0[78u].y)) * _2870.y) / cbSceneParam._m0[78u].y)) + _2589;
        _2688 = (exp2(_2896 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2880 * cbSceneParam._m0[78u].z)) * _2870.z) / cbSceneParam._m0[78u].z)) + _2590;
        _2690 = _2879 * _2591;
    }
    else
    {
        _2684 = _2588;
        _2686 = _2589;
        _2688 = _2590;
        _2690 = _2591;
    }
    bool _2906;
    vec4 _2700;
    vec4 _2722;
    float _2724;
    float _2728;
    float _2729;
    float _2730;
    float _2733;
    float _2736;
    float _2739;
    float _2740;
    bool _2750;
    for (;;)
    {
        _2700 = cbMatDynParam._m0[0u];
        float _2702 = roundEven(_2700.y);
        bool _2703 = _2702 == 3.0;
        float _2704 = log2(_2690);
        float _2708 = exp2(_2704 * cbSceneParam._m0[78u].x);
        float _2709 = exp2(_2704 * cbSceneParam._m0[78u].y);
        float _2710 = exp2(_2704 * cbSceneParam._m0[78u].z);
        float _2711 = _2708 * _2550;
        float _2712 = _2709 * _2551;
        float _2713 = _2710 * _2552;
        float _2720 = _621 + (-0.5);
        _2722 = cbMtdParam._m0[1u];
        _2724 = _2722.y * _2720;
        float _2727 = (_2702 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2728 = _2727 * (_2703 ? _2711 : (_2711 + (cbSceneParam._m0[72u].w * _2684)));
        _2729 = _2727 * (_2703 ? _2712 : (_2712 + (cbSceneParam._m0[72u].w * _2686)));
        _2730 = _2727 * (_2703 ? _2713 : (_2713 + (cbSceneParam._m0[72u].w * _2688)));
        _2733 = ((_2558 * _2562) * _2708) * _2727;
        _2736 = ((_2559 * _2562) * _2709) * _2727;
        _2739 = ((_2560 * _2562) * _2710) * _2727;
        _2740 = _2720 * 0.999000012874603271484375;
        _2750 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2750)
        {
            if ((cbInstanceData._m0[_672 + 7u].x + _2740) < 0.5)
            {
                _2906 = true;
                break;
            }
        }
        uint _2847 = _673 + uint(_2700.w);
        if ((cbInstanceData._m0[_2847].w < 1.0) && ((cbInstanceData._m0[_2847].w + _2740) < 0.5))
        {
            _2906 = true;
            break;
        }
        if ((_2724 + 1.0) < _2722.x)
        {
            _2906 = true;
            break;
        }
        _2906 = false;
        break;
    }
    float _3111;
    if (_2906)
    {
        discard_state = true;
        _3111 = 0.0;
    }
    else
    {
        _3111 = cbInstanceData._m0[_2563].w;
    }
    SV_Target.x = _2728;
    SV_Target.y = _2729;
    SV_Target.z = _2730;
    SV_Target.w = _3111;
    SV_Target_1.x = _2733;
    SV_Target_1.y = _2736;
    SV_Target_1.z = _2739;
    SV_Target_1.w = cbInstanceData._m0[_2563].w;
    discard_exit();
}


