#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _974;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _239 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _245 = _239.x * cbMtdParam._m0[9u].x;
    float _246 = _239.y * cbMtdParam._m0[9u].y;
    float _247 = _239.z * cbMtdParam._m0[9u].z;
    vec4 _267 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _288 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_267.x + 0.00999999977648258209228515625));
    float _290 = _288 * (cbMtdParam._m0[15u].x + 1.0);
    float _3611 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _291 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
    float _299 = ((((cbMtdParam._m0[12u].x - _245) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _291) + _245;
    float _300 = ((((cbMtdParam._m0[12u].y - _246) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _291) + _246;
    float _301 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _247)) * _291) + _247;
    vec4 _313 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _317 = _313.z;
    float _321 = (_313.x * 2.0) + (-1.0);
    float _323 = (_313.y * 2.0) + (-1.0);
    float _324 = dot(vec2(_321, _323), vec2(_321, _323));
    float _3622 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _329 = sqrt(1.0 - (isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))));
    float _332 = _288 * (cbMtdParam._m0[14u].w + 1.0);
    float _3633 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _336 = ((cbMtdParam._m0[14u].y - _317) * (isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0)))) + _317;
    vec4 _364 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _379 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _408 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _414 = (_408.x * 2.0) + (-1.0);
    float _415 = (_408.y * 2.0) + (-1.0);
    float _416 = dot(vec2(_414, _415), vec2(_414, _415));
    float _3644 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _432 = (_291 * (((cbMtdParam._m0[13u].z * _321) - _321) + _414)) + _321;
    float _433 = (_291 * (((cbMtdParam._m0[13u].z * _323) - _323) + _415)) + _323;
    float _434 = (_291 * (sqrt(1.0 - (isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0)))) - _329)) + _329;
    float _437 = fma(_434, _210 * NORMAL.x, fma(_433, _217 * TANGENT.x, (_203 * _195) * _432));
    float _440 = fma(_434, _210 * NORMAL.y, fma(_433, _217 * TANGENT.y, (_203 * _196) * _432));
    float _443 = fma(_434, _210 * NORMAL.z, fma(_433, _217 * TANGENT.z, (_203 * _197) * _432));
    float _447 = inversesqrt(dot(vec3(_437, _440, _443), vec3(_437, _440, _443)));
    float _448 = _447 * _437;
    float _449 = _447 * _440;
    float _450 = _447 * _443;
    float _3655 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _451 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
    float _3666 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _3677 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _3688 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _470 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _511 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _521 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _511);
    float _522 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _511);
    float _523 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _511);
    float _527 = inversesqrt(dot(vec3(_521, _522, _523), vec3(_521, _522, _523)));
    float _528 = _521 * _527;
    float _529 = _522 * _527;
    float _530 = _523 * _527;
    float _536 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _537 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _558 = fma(_450, cbSceneParam._m0[5u].z, fma(_449, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _448));
    float _561 = fma(_450, cbSceneParam._m0[6u].z, fma(_449, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _448));
    float _564 = fma(_450, cbSceneParam._m0[7u].z, fma(_449, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _448));
    uint _577 = uint(roundEven(NORMAL.w)) * 13u;
    uint _578 = _577 + 9u;
    uint _579 = _578 + uint(cbMatDynParam._m0[0u].w);
    float _585 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0)))) * cbInstanceData._m0[_579].x;
    float _586 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0)))) * cbInstanceData._m0[_579].y;
    float _587 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0)))) * cbInstanceData._m0[_579].z;
    float _3699 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _588 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _3710 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _589 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _3721 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _590 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
    vec4 _599 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _536, cbSceneParam._m0[86u].y * _537));
    float _602 = _599.x * TEXCOORD_3.w;
    float _603 = dot(vec3(_448, _449, _450), vec3(_528, _529, _530));
    float _606 = _603 * 2.0;
    float _610 = (_606 * _448) - _528;
    float _611 = (_606 * _449) - _529;
    float _612 = (_606 * _450) - _530;
    float _616 = abs(dot(vec3(_528, _529, _530), vec3(_448, _449, _450)));
    float _3732 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _618 = sqrt(_451);
    float _631 = exp2((_618 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_618 * 3.0));
    float _663 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _667 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _671 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _973;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _698 = fma(_671, cbModelParam._m0[26u].z, fma(_667, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _663));
        float _702 = fma(_671, cbModelParam._m0[27u].z, fma(_667, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _663));
        float _706 = fma(_671, cbModelParam._m0[28u].z, fma(_667, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _663));
        float _731 = _663 + _448;
        float _732 = _667 + _449;
        float _733 = _671 + _450;
        float _743 = fma(_733, cbModelParam._m0[26u].z, fma(_732, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _731)) - _698;
        float _744 = fma(_733, cbModelParam._m0[27u].z, fma(_732, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _731)) - _702;
        float _745 = fma(_733, cbModelParam._m0[28u].z, fma(_732, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _731)) - _706;
        float _749 = inversesqrt(dot(vec3(_743, _744, _745), vec3(_743, _744, _745)));
        float _762 = ((_749 * _743) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_698 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _763 = ((_749 * _744) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_702 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _764 = ((_749 * _745) / cbModelParam._m0[34u].z) + ((((((_706 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _767 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_762, _763, _764), 0.0);
        vec4 _774 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_762, _763, _764), 0.0);
        vec4 _781 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_762, _763, _764), 0.0);
        vec4 _788 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_762, _763, _764), 0.0);
        float _801 = exp2((_767.w + (-0.5)) * 20.0) * 2.0;
        float _802 = _801 * (_767.x + (-0.5));
        float _803 = _801 * (_767.y + (-0.5));
        float _804 = _801 * (_767.z + (-0.5));
        float _811 = exp2((_774.w + (-0.5)) * 20.0) * 2.0;
        float _812 = _811 * (_774.x + (-0.5));
        float _813 = _811 * (_774.y + (-0.5));
        float _814 = _811 * (_774.z + (-0.5));
        float _821 = exp2((_781.w + (-0.5)) * 20.0) * 2.0;
        float _822 = _821 * (_781.x + (-0.5));
        float _823 = _821 * (_781.y + (-0.5));
        float _824 = _821 * (_781.z + (-0.5));
        float _831 = exp2((_788.w + (-0.5)) * 20.0) * 2.0;
        float _832 = _831 * (_788.x + (-0.5));
        float _833 = _831 * (_788.y + (-0.5));
        float _834 = _831 * (_788.z + (-0.5));
        float _835 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _836 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _837 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _838 = _802 * 0.5;
        float _839 = _812 * 0.5;
        float _840 = _822 * 0.5;
        float _841 = dot(vec3(_838, _839, _840), vec3(_838, _839, _840));
        float _846 = (_841 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_841);
        float _855 = (dot(vec3(_448, _449, _450), vec3(_846 * _838, _846 * _839, _846 * _840)) + 1.0) * 0.5;
        float _3758 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _865 = sqrt(((_839 * _839) + (_838 * _838)) + (_840 * _840)) / (_835 + 9.9999997473787516355514526367188e-06);
        float _3769 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _866 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _867 = _866 * 2.0;
        float _871 = (1.0 - _866) / (_866 + 1.0);
        float _3780 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _872 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _881 = ((((1.0 - _872) * (_867 + 2.0)) * exp2(log2(isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * (_867 + 1.0))) + _872) * _835;
        float _882 = _803 * 0.5;
        float _883 = _813 * 0.5;
        float _884 = _823 * 0.5;
        float _885 = dot(vec3(_882, _883, _884), vec3(_882, _883, _884));
        float _890 = (_885 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_885);
        float _898 = (dot(vec3(_448, _449, _450), vec3(_890 * _882, _890 * _883, _890 * _884)) + 1.0) * 0.5;
        float _3791 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _907 = sqrt(((_883 * _883) + (_882 * _882)) + (_884 * _884)) / (_836 + 9.9999997473787516355514526367188e-06);
        float _3802 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _909 = _908 * 2.0;
        float _913 = (1.0 - _908) / (_908 + 1.0);
        float _3813 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _923 = ((((1.0 - _914) * (_909 + 2.0)) * exp2(log2(isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * (_909 + 1.0))) + _914) * _836;
        float _924 = _804 * 0.5;
        float _925 = _814 * 0.5;
        float _926 = _824 * 0.5;
        float _927 = dot(vec3(_924, _925, _926), vec3(_924, _925, _926));
        float _932 = (_927 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_927);
        float _940 = (dot(vec3(_448, _449, _450), vec3(_932 * _924, _932 * _925, _932 * _926)) + 1.0) * 0.5;
        float _3824 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _949 = sqrt(((_925 * _925) + (_924 * _924)) + (_926 * _926)) / (_837 + 9.9999997473787516355514526367188e-06);
        float _3835 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _951 = _950 * 2.0;
        float _955 = (1.0 - _950) / (_950 + 1.0);
        float _3846 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _965 = ((((1.0 - _956) * (_951 + 2.0)) * exp2(log2(isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * (_951 + 1.0))) + _956) * _837;
        _973 = _804;
        _975 = _803;
        _976 = _802;
        _977 = _814;
        _978 = _813;
        _979 = _812;
        _980 = _824;
        _981 = _823;
        _982 = _822;
        _983 = _837;
        _984 = _836;
        _985 = _835;
        _986 = cbModelParam._m0[36u].z * (isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0)));
        _987 = cbModelParam._m0[36u].z * (isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0)));
        _988 = cbModelParam._m0[36u].z * (isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0)));
    }
    else
    {
        _973 = _974;
        _975 = _974;
        _976 = _974;
        _977 = _974;
        _978 = _974;
        _979 = _974;
        _980 = _974;
        _981 = _974;
        _982 = _974;
        _983 = _974;
        _984 = _974;
        _985 = _974;
        _986 = 0.0;
        _987 = 0.0;
        _988 = 0.0;
    }
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1014 = fma(_671, cbModelParam._m0[30u].z, fma(_667, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _663));
        float _1018 = fma(_671, cbModelParam._m0[31u].z, fma(_667, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _663));
        float _1022 = fma(_671, cbModelParam._m0[32u].z, fma(_667, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _663));
        float _1045 = _663 + _448;
        float _1046 = _667 + _449;
        float _1047 = _671 + _450;
        float _1057 = fma(_1047, cbModelParam._m0[30u].z, fma(_1046, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1045)) - _1014;
        float _1058 = fma(_1047, cbModelParam._m0[31u].z, fma(_1046, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1045)) - _1018;
        float _1059 = fma(_1047, cbModelParam._m0[32u].z, fma(_1046, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1045)) - _1022;
        float _1063 = inversesqrt(dot(vec3(_1057, _1058, _1059), vec3(_1057, _1058, _1059)));
        float _1076 = ((_1063 * _1057) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1014 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1077 = ((_1063 * _1058) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1018 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1078 = ((_1063 * _1059) / cbModelParam._m0[35u].z) + ((((((_1022 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1076, _1077, _1078), 0.0);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1076, _1077, _1078), 0.0);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1076, _1077, _1078), 0.0);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1076, _1077, _1078), 0.0);
        float _1113 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1080.x + (-0.5));
        float _1115 = _1113 * (_1080.y + (-0.5));
        float _1116 = _1113 * (_1080.z + (-0.5));
        float _1123 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1087.x + (-0.5));
        float _1125 = _1123 * (_1087.y + (-0.5));
        float _1126 = _1123 * (_1087.z + (-0.5));
        float _1133 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1094.x + (-0.5));
        float _1135 = _1133 * (_1094.y + (-0.5));
        float _1136 = _1133 * (_1094.z + (-0.5));
        float _1143 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1101.x + (-0.5));
        float _1145 = _1143 * (_1101.y + (-0.5));
        float _1146 = _1143 * (_1101.z + (-0.5));
        float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1148 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1149 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1150 = _1114 * 0.5;
        float _1151 = _1124 * 0.5;
        float _1152 = _1134 * 0.5;
        float _1153 = dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152));
        float _1158 = (_1153 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1153);
        float _1166 = (dot(vec3(_448, _449, _450), vec3(_1158 * _1150, _1158 * _1151, _1158 * _1152)) + 1.0) * 0.5;
        float _3887 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1175 = sqrt(((_1151 * _1151) + (_1150 * _1150)) + (_1152 * _1152)) / (_1147 + 9.9999997473787516355514526367188e-06);
        float _3898 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1177 = _1176 * 2.0;
        float _1181 = (1.0 - _1176) / (_1176 + 1.0);
        float _3909 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1191 = ((((1.0 - _1182) * (_1177 + 2.0)) * exp2(log2(isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * (_1177 + 1.0))) + _1182) * _1147;
        float _1192 = _1115 * 0.5;
        float _1193 = _1125 * 0.5;
        float _1194 = _1135 * 0.5;
        float _1195 = dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194));
        float _1200 = (_1195 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1195);
        float _1208 = (dot(vec3(_448, _449, _450), vec3(_1200 * _1192, _1200 * _1193, _1200 * _1194)) + 1.0) * 0.5;
        float _3920 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1217 = sqrt(((_1193 * _1193) + (_1192 * _1192)) + (_1194 * _1194)) / (_1148 + 9.9999997473787516355514526367188e-06);
        float _3931 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _3942 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * (_1219 + 1.0))) + _1224) * _1148;
        float _1234 = _1116 * 0.5;
        float _1235 = _1126 * 0.5;
        float _1236 = _1136 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1250 = (dot(vec3(_448, _449, _450), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _3953 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1259 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1149 + 9.9999997473787516355514526367188e-06);
        float _3964 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _3975 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * (_1261 + 1.0))) + _1266) * _1149;
        _1283 = _1116;
        _1284 = _1115;
        _1285 = _1114;
        _1286 = _1126;
        _1287 = _1125;
        _1288 = _1124;
        _1289 = _1136;
        _1290 = _1135;
        _1291 = _1134;
        _1292 = _1149;
        _1293 = _1148;
        _1294 = _1147;
        _1295 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)));
        _1296 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
        _1297 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
    }
    else
    {
        _1283 = _974;
        _1284 = _974;
        _1285 = _974;
        _1286 = _974;
        _1287 = _974;
        _1288 = _974;
        _1289 = _974;
        _1290 = _974;
        _1291 = _974;
        _1292 = _974;
        _1293 = _974;
        _1294 = _974;
        _1295 = 0.0;
        _1296 = 0.0;
        _1297 = 0.0;
    }
    float _1307 = (cbModelParam._m0[1u].x * (_1295 - _986)) + _986;
    float _1308 = (cbModelParam._m0[1u].x * (_1296 - _987)) + _987;
    float _1309 = (cbModelParam._m0[1u].x * (_1297 - _988)) + _988;
    float _1330 = fma(_1309, cbSceneParam._m0[89u].z, fma(_1308, cbSceneParam._m0[89u].y, _1307 * cbSceneParam._m0[89u].x));
    float _1333 = fma(_1309, cbSceneParam._m0[90u].z, fma(_1308, cbSceneParam._m0[90u].y, _1307 * cbSceneParam._m0[90u].x));
    float _1336 = fma(_1309, cbSceneParam._m0[91u].z, fma(_1308, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1307));
    float _1351 = _610 * 0.5;
    float _1352 = _611 * 0.5;
    float _1353 = _612 * 0.5;
    float _1354 = dot(vec4(_1351, _1352, _1353, 1.0), vec4(_1285, _1288, _1291, _1294));
    float _1357 = dot(vec4(_1351, _1352, _1353, 1.0), vec4(_1284, _1287, _1290, _1293));
    float _1360 = dot(vec4(_1351, _1352, _1353, 1.0), vec4(_1283, _1286, _1289, _1292));
    float _1394;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1367 = dot(vec4(_1351, _1352, _1353, 1.0), vec4(_973, _977, _980, _983));
        float _1371 = dot(vec4(_1351, _1352, _1353, 1.0), vec4(_975, _978, _981, _984));
        float _1375 = dot(vec4(_1351, _1352, _1353, 1.0), vec4(_976, _979, _982, _985));
        float _1382 = dot(vec4(cbModelParam._m0[39u]), vec4(_1351, _1352, _1353, 1.0));
        _1394 = dot(vec3(isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)), isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)), isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1382) ? 0.0 : (isnan(0.0) ? _1382 : max(0.0, _1382))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1394 = 1.0;
    }
    float _1405;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1396 = dot(vec4(cbModelParam._m0[40u]), vec4(_1351, _1352, _1353, 1.0));
        _1405 = dot(vec3(isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)), isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)), isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1396) ? 0.0 : (isnan(0.0) ? _1396 : max(0.0, _1396))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1405 = 1.0;
    }
    float _1409 = (_1405 * cbModelParam._m0[1u].x) + (_1394 * (1.0 - cbModelParam._m0[1u].x));
    float _1419 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _451);
    float _1420 = isnan(_1419) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1419 : min(cbModelParam._m0[25u].z, _1419));
    float _1500;
    float _1502;
    float _1504;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1467 = fma(_671, cbModelParam._m0[13u].z, fma(_667, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _663)) + cbModelParam._m0[13u].w;
        float _1471 = fma(_671, cbModelParam._m0[14u].z, fma(_667, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _663)) + cbModelParam._m0[14u].w;
        float _1475 = fma(_671, cbModelParam._m0[15u].z, fma(_667, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _663)) + cbModelParam._m0[15u].w;
        float _1478 = fma(_612, cbModelParam._m0[13u].z, fma(_611, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _610));
        float _1481 = fma(_612, cbModelParam._m0[14u].z, fma(_611, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _610));
        float _1484 = fma(_612, cbModelParam._m0[15u].z, fma(_611, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _610));
        float _1512;
        if (_1478 > 0.0)
        {
            _1512 = abs((1.0 - _1467) / _1478);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1478 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1467 + 1.0) / _1478);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1512 = frontier_phi_14_12_ladder;
        }
        float _1683;
        if (_1481 > 0.0)
        {
            _1683 = abs((1.0 - _1471) / _1481);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1481 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1471 + 1.0) / _1481);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1683 = frontier_phi_23_19_ladder;
        }
        float _1979;
        if (_1484 > 0.0)
        {
            _1979 = abs((1.0 - _1475) / _1484);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1484 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1475 + 1.0) / _1484);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1979 = frontier_phi_35_30_ladder;
        }
        float _1981 = isnan(_1683) ? _1512 : (isnan(_1512) ? _1683 : min(_1512, _1683));
        float _1982 = isnan(_1979) ? _1981 : (isnan(_1981) ? _1979 : min(_1981, _1979));
        float _1986 = (_1982 * _1478) + _1467;
        float _1987 = (_1982 * _1481) + _1471;
        float _1988 = (_1982 * _1484) + _1475;
        float _1989 = _1982 * 9.9999997473787516355514526367188e-05;
        float _1991 = (-1.0) - _1989;
        float _1993 = _1989 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1988 > _1993) || ((_1988 < _1991) || ((_1987 > _1993) || ((_1987 < _1991) || ((_1986 < _1991) || (_1986 > _1993))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2133 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1988, cbModelParam._m0[9u].z, fma(_1987, cbModelParam._m0[9u].y, _1986 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1988, cbModelParam._m0[10u].z, fma(_1987, cbModelParam._m0[10u].y, _1986 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1988, cbModelParam._m0[11u].z, fma(_1987, cbModelParam._m0[11u].y, _1986 * cbModelParam._m0[11u].x))), _1420);
            frontier_phi_13_35_ladder = _2133.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2133.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2133.x * cbModelParam._m0[1u].y;
        }
        _1500 = frontier_phi_13_35_ladder_2;
        _1502 = frontier_phi_13_35_ladder_1;
        _1504 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1488 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_610, _611, _612), _1420);
        _1500 = _1488.x * cbModelParam._m0[1u].y;
        _1502 = _1488.y * cbModelParam._m0[1u].y;
        _1504 = _1488.z * cbModelParam._m0[1u].y;
    }
    float _1508 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _451);
    float _1509 = isnan(_1508) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1508 : min(cbModelParam._m0[25u].w, _1508));
    float _1600;
    float _1602;
    float _1604;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1564 = fma(_671, cbModelParam._m0[21u].z, fma(_667, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _663)) + cbModelParam._m0[21u].w;
        float _1568 = fma(_671, cbModelParam._m0[22u].z, fma(_667, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _663)) + cbModelParam._m0[22u].w;
        float _1572 = fma(_671, cbModelParam._m0[23u].z, fma(_667, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _663)) + cbModelParam._m0[23u].w;
        float _1575 = fma(_612, cbModelParam._m0[21u].z, fma(_611, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _610));
        float _1578 = fma(_612, cbModelParam._m0[22u].z, fma(_611, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _610));
        float _1581 = fma(_612, cbModelParam._m0[23u].z, fma(_611, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _610));
        float _1688;
        if (_1575 > 0.0)
        {
            _1688 = abs((1.0 - _1564) / _1575);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1575 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1564 + 1.0) / _1575);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1688 = frontier_phi_25_21_ladder;
        }
        float _2006;
        if (_1578 > 0.0)
        {
            _2006 = abs((1.0 - _1568) / _1578);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1578 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1568 + 1.0) / _1578);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2006 = frontier_phi_37_32_ladder;
        }
        float _2333;
        if (_1581 > 0.0)
        {
            _2333 = abs((1.0 - _1572) / _1581);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1581 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1572 + 1.0) / _1581);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2333 = frontier_phi_47_44_ladder;
        }
        float _2335 = isnan(_2006) ? _1688 : (isnan(_1688) ? _2006 : min(_1688, _2006));
        float _2336 = isnan(_2333) ? _2335 : (isnan(_2335) ? _2333 : min(_2335, _2333));
        float _2340 = (_2336 * _1575) + _1564;
        float _2341 = (_2336 * _1578) + _1568;
        float _2342 = (_2336 * _1581) + _1572;
        float _2343 = _2336 * 9.9999997473787516355514526367188e-05;
        float _2344 = (-1.0) - _2343;
        float _2346 = _2343 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2342 > _2346) || ((_2342 < _2344) || ((_2341 > _2346) || ((_2341 < _2344) || ((_2340 < _2344) || (_2340 > _2346))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2460 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2342, cbModelParam._m0[17u].z, fma(_2341, cbModelParam._m0[17u].y, _2340 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2342, cbModelParam._m0[18u].z, fma(_2341, cbModelParam._m0[18u].y, _2340 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2342, cbModelParam._m0[19u].z, fma(_2341, cbModelParam._m0[19u].y, _2340 * cbModelParam._m0[19u].x))), _1509);
            frontier_phi_22_47_ladder = _2460.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2460.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2460.x * cbModelParam._m0[1u].z;
        }
        _1600 = frontier_phi_22_47_ladder_2;
        _1602 = frontier_phi_22_47_ladder_1;
        _1604 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1584 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_610, _611, _612), _1509);
        _1600 = _1584.x * cbModelParam._m0[1u].z;
        _1602 = _1584.y * cbModelParam._m0[1u].z;
        _1604 = _1584.z * cbModelParam._m0[1u].z;
    }
    float _1616 = ((((1.0 - _631) * ((_618 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_631 * _618)) * _602;
    float _1617 = _1616 * ((cbModelParam._m0[1u].w * (_1600 - _1500)) + _1500);
    float _1618 = _1616 * ((cbModelParam._m0[1u].w * (_1602 - _1502)) + _1502);
    float _1619 = _1616 * ((cbModelParam._m0[1u].w * (_1604 - _1504)) + _1504);
    float _1622 = fma(_1619, cbSceneParam._m0[89u].z, fma(_1618, cbSceneParam._m0[89u].y, _1617 * cbSceneParam._m0[89u].x));
    float _1625 = fma(_1619, cbSceneParam._m0[90u].z, fma(_1618, cbSceneParam._m0[90u].y, _1617 * cbSceneParam._m0[90u].x));
    float _1628 = fma(_1619, cbSceneParam._m0[91u].z, fma(_1618, cbSceneParam._m0[91u].y, _1617 * cbSceneParam._m0[91u].x));
    float _1662 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1666 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1670 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1674 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1675 = _1662 / _1674;
    float _1676 = _1666 / _1674;
    float _1677 = _1670 / _1674;
    float _1824;
    float _1825;
    float _1826;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1704 = ((uint(_1677 > cbSceneParam._m0[59u].y) + uint(_1677 > cbSceneParam._m0[59u].x)) + uint(_1677 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1705 = _1704 + 43u;
        uint _1713 = _1704 + 44u;
        uint _1721 = _1704 + 45u;
        uint _1729 = _1704 + 46u;
        float _1740 = fma(_1674, cbSceneParam._m0[_1705].w, fma(_1670, cbSceneParam._m0[_1705].z, fma(_1666, cbSceneParam._m0[_1705].y, _1662 * cbSceneParam._m0[_1705].x)));
        float _1744 = fma(_1674, cbSceneParam._m0[_1713].w, fma(_1670, cbSceneParam._m0[_1713].z, fma(_1666, cbSceneParam._m0[_1713].y, _1662 * cbSceneParam._m0[_1713].x)));
        float _1752 = fma(_1674, cbSceneParam._m0[_1729].w, fma(_1670, cbSceneParam._m0[_1729].z, fma(_1666, cbSceneParam._m0[_1729].y, _1662 * cbSceneParam._m0[_1729].x)));
        float _1757 = cbSceneParam._m0[33u].z * _1752;
        float _1759 = cbSceneParam._m0[33u].w * _1752;
        float _1762 = fma(_1674, cbSceneParam._m0[_1721].w, fma(_1670, cbSceneParam._m0[_1721].z, fma(_1666, cbSceneParam._m0[_1721].y, _1662 * cbSceneParam._m0[_1721].x))) / _1752;
        float _1810 = (cbSceneParam._m0[33u].x - sqrt(((_1676 * _1676) + (_1675 * _1675)) + (_1677 * _1677))) * cbSceneParam._m0[33u].y;
        float _4101 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
        float _1817 = (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1757 + _1740) / _1752, (_1759 + _1744) / _1752), _1762), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1759 + _1740) / _1752, (_1744 - _1757) / _1752), _1762), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1740 - _1757) / _1752, (_1744 - _1759) / _1752), _1762), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1740 - _1759) / _1752, (_1757 + _1744) / _1752), _1762), 0.0)).x), vec4(0.25)));
        _1824 = 1.0 - (_1817 * cbSceneParam._m0[34u].x);
        _1825 = 1.0 - (_1817 * cbSceneParam._m0[34u].y);
        _1826 = 1.0 - (_1817 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1824 = 1.0;
        _1825 = 1.0;
        _1826 = 1.0;
    }
    float _1890;
    float _1892;
    float _1894;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1878 = fma(_1674, cbSceneParam._m0[63u].w, fma(_1670, cbSceneParam._m0[63u].z, fma(_1666, cbSceneParam._m0[63u].y, _1662 * cbSceneParam._m0[63u].x)));
        float _1879 = fma(_1674, cbSceneParam._m0[60u].w, fma(_1670, cbSceneParam._m0[60u].z, fma(_1666, cbSceneParam._m0[60u].y, _1662 * cbSceneParam._m0[60u].x))) / _1878;
        float _1880 = fma(_1674, cbSceneParam._m0[61u].w, fma(_1670, cbSceneParam._m0[61u].z, fma(_1666, cbSceneParam._m0[61u].y, _1662 * cbSceneParam._m0[61u].x))) / _1878;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1879 >= cbSceneParam._m0[64u].x) && (_1880 >= cbSceneParam._m0[64u].y)) && (_1879 <= cbSceneParam._m0[64u].z)) && (_1880 <= cbSceneParam._m0[64u].w))
        {
            float _2019 = fma(_1674, cbSceneParam._m0[62u].w, fma(_1670, cbSceneParam._m0[62u].z, fma(_1666, cbSceneParam._m0[62u].y, _1662 * cbSceneParam._m0[62u].x))) / _1878;
            float _2023 = isnan(cbSceneParam._m0[41u].w) ? _2019 : (isnan(_2019) ? cbSceneParam._m0[41u].w : max(_2019, cbSceneParam._m0[41u].w));
            float _2066 = (cbSceneParam._m0[33u].x - sqrt(((_1676 * _1676) + (_1675 * _1675)) + (_1677 * _1677))) * cbSceneParam._m0[33u].y;
            float _4117 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
            float _2073 = (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1879, cbSceneParam._m0[33u].w + _1880), _2023), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1879, _1880 - cbSceneParam._m0[33u].z), _2023), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1879 - cbSceneParam._m0[33u].z, _1880 - cbSceneParam._m0[33u].w), _2023), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1879 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1880), _2023), 0.0)).x), vec4(0.25)));
            float _2077 = 1.0 - (_2073 * cbSceneParam._m0[34u].x);
            float _2078 = 1.0 - (_2073 * cbSceneParam._m0[34u].y);
            float _2079 = 1.0 - (_2073 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2079) ? _1826 : (isnan(_1826) ? _2079 : min(_1826, _2079));
            frontier_phi_34_33_ladder_1 = isnan(_2078) ? _1825 : (isnan(_1825) ? _2078 : min(_1825, _2078));
            frontier_phi_34_33_ladder_2 = isnan(_2077) ? _1824 : (isnan(_1824) ? _2077 : min(_1824, _2077));
        }
        else
        {
            frontier_phi_34_33_ladder = _1826;
            frontier_phi_34_33_ladder_1 = _1825;
            frontier_phi_34_33_ladder_2 = _1824;
        }
        _1890 = frontier_phi_34_33_ladder_2;
        _1892 = frontier_phi_34_33_ladder_1;
        _1894 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1890 = _1824;
        _1892 = _1825;
        _1894 = _1826;
    }
    uvec4 _1899 = floatBitsToUint(cbInstanceData._m0[_577 + 5u]);
    uint _1901 = _1899.x * 14u;
    uint _1902 = _1901 + 13u;
    float _1909 = _602 + (-1.0);
    float _1914 = (cbLight._m0[_1902].x * _1909) + 1.0;
    float _1915 = (cbLight._m0[_1902].y * _1909) + 1.0;
    float _1916 = (cbLight._m0[_1902].z * _1909) + 1.0;
    float _1917 = (cbLight._m0[_1902].w * _1909) + 1.0;
    uint _1918 = _1901 + 5u;
    float _1924 = isnan(1.0) ? _1915 : (isnan(_1915) ? 1.0 : min(_1915, 1.0));
    uint _1928 = _1901 + 4u;
    float _1938 = isnan(1.0) ? _1914 : (isnan(_1914) ? 1.0 : min(_1914, 1.0));
    uint _1942 = _1901 | 1u;
    float _1953 = dot(vec3(cbLight._m0[_1901].xyz), vec3(_448, _449, _450));
    float _1956 = dot(vec3(cbLight._m0[_1942].xyz), vec3(_448, _449, _450));
    float _4153 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _4164 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _1961 = (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * 0.3183098733425140380859375;
    float _1963 = (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * 0.3183098733425140380859375;
    float _1970 = ((cbLight._m0[_1918].x * _1924) * _1963) + (((cbLight._m0[_1928].x * _1890) * _1938) * _1961);
    float _1971 = ((_1924 * cbLight._m0[_1918].y) * _1963) + (((cbLight._m0[_1928].y * _1892) * _1938) * _1961);
    float _1972 = ((_1924 * cbLight._m0[_1918].z) * _1963) + (((cbLight._m0[_1928].z * _1894) * _1938) * _1961);
    uvec4 _1976 = floatBitsToUint(cbLight._m0[_1901 + 12u]);
    bool _1978 = _1976.x == 0u;
    float _2080;
    float _2082;
    float _2084;
    if (_1978)
    {
        _2080 = _1970;
        _2082 = _1971;
        _2084 = _1972;
    }
    else
    {
        uint _2088 = _1901 + 6u;
        float _2104 = (dot(vec3(cbLight._m0[_1901 + 2u].xyz), vec3(_448, _449, _450)) * 0.5) + 0.5;
        float _2105 = _2104 * _2104;
        float _4175 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2106 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _2107 = isnan(1.0) ? _1916 : (isnan(_1916) ? 1.0 : min(_1916, 1.0));
        _2080 = (((cbLight._m0[_2088].x * 0.3183098733425140380859375) * _2106) * _2107) + _1970;
        _2082 = (((cbLight._m0[_2088].y * 0.3183098733425140380859375) * _2106) * _2107) + _1971;
        _2084 = (((cbLight._m0[_2088].z * 0.3183098733425140380859375) * _2106) * _2107) + _1972;
    }
    bool _2087 = _1976.y == 0u;
    float _2142;
    float _2144;
    float _2146;
    if (_2087)
    {
        _2142 = _2080;
        _2144 = _2082;
        _2146 = _2084;
    }
    else
    {
        uint _2304 = _1901 + 7u;
        float _2320 = (dot(vec3(cbLight._m0[_1901 + 3u].xyz), vec3(_448, _449, _450)) * 0.5) + 0.5;
        float _2321 = _2320 * _2320;
        float _4191 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2322 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _2323 = isnan(1.0) ? _1917 : (isnan(_1917) ? 1.0 : min(_1917, 1.0));
        _2142 = (((cbLight._m0[_2304].x * 0.3183098733425140380859375) * _2322) * _2323) + _2080;
        _2144 = (((cbLight._m0[_2304].y * 0.3183098733425140380859375) * _2322) * _2323) + _2082;
        _2146 = (((cbLight._m0[_2304].z * 0.3183098733425140380859375) * _2322) * _2323) + _2084;
    }
    uint _2149 = _1901 + 8u;
    float _2162 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1901].w)) * _451) * 0.949999988079071044921875);
    float _2163 = _2162 * _2162;
    float _2164 = cbLight._m0[_1901].x + _528;
    float _2165 = cbLight._m0[_1901].y + _529;
    float _2166 = cbLight._m0[_1901].z + _530;
    float _2170 = inversesqrt(dot(vec3(_2164, _2165, _2166), vec3(_2164, _2165, _2166)));
    float _2171 = _2170 * _2164;
    float _2172 = _2170 * _2165;
    float _2173 = _2170 * _2166;
    float _2174 = dot(vec3(_448, _449, _450), vec3(cbLight._m0[_1901].xyz));
    float _4207 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2177 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
    float _4218 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _2178 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
    float _2179 = dot(vec3(_448, _449, _450), vec3(_2171, _2172, _2173));
    float _4229 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2182 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
    float _2183 = dot(vec3(cbLight._m0[_1901].xyz), vec3(_2171, _2172, _2173));
    float _4240 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2187 = _2163 * _2163;
    float _2191 = ((_2182 * _2182) * (_2187 + (-1.0))) + 1.0;
    float _2202 = (exp2(log2(1.0 - (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2203 = 1.0 - _2163;
    float _2214 = (0.5 / (((_2178 * ((_2177 * _2203) + _2163)) + 9.9999999392252902907785028219223e-09) + (((_2178 * _2203) + _2163) * _2177))) * _2177;
    float _4251 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2216 = (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_2187 / ((_2191 * _2191) * 3.141590118408203125));
    uint _2230 = _1901 + 9u;
    float _2241 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1942].w)) * _451) * 0.949999988079071044921875);
    float _2242 = _2241 * _2241;
    float _2243 = cbLight._m0[_1942].x + _528;
    float _2244 = cbLight._m0[_1942].y + _529;
    float _2245 = cbLight._m0[_1942].z + _530;
    float _2249 = inversesqrt(dot(vec3(_2243, _2244, _2245), vec3(_2243, _2244, _2245)));
    float _2250 = _2249 * _2243;
    float _2251 = _2249 * _2244;
    float _2252 = _2249 * _2245;
    float _2253 = dot(vec3(_448, _449, _450), vec3(cbLight._m0[_1942].xyz));
    float _4262 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
    float _2256 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
    float _2257 = dot(vec3(_448, _449, _450), vec3(_2250, _2251, _2252));
    float _4273 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _2260 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
    float _2261 = dot(vec3(cbLight._m0[_1942].xyz), vec3(_2250, _2251, _2252));
    float _4284 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _2265 = _2242 * _2242;
    float _2269 = ((_2260 * _2260) * (_2265 + (-1.0))) + 1.0;
    float _2278 = (exp2(log2(1.0 - (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2279 = 1.0 - _2242;
    float _2289 = (0.5 / (((_2178 * ((_2256 * _2279) + _2242)) + 9.9999999392252902907785028219223e-09) + (((_2178 * _2279) + _2242) * _2256))) * _2256;
    float _4295 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2291 = (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_2265 / ((_2269 * _2269) * 3.141590118408203125));
    float _2301 = (((_2278 * cbLight._m0[_2230].x) * _2291) * _1924) + ((((cbLight._m0[_2149].x * _1890) * _2202) * _2216) * _1938);
    float _2302 = (((_2278 * cbLight._m0[_2230].y) * _2291) * _1924) + ((((cbLight._m0[_2149].y * _1892) * _2202) * _2216) * _1938);
    float _2303 = (((_2278 * cbLight._m0[_2230].z) * _2291) * _1924) + ((((cbLight._m0[_2149].z * _1894) * _2202) * _2216) * _1938);
    float _2359;
    float _2361;
    float _2363;
    if (_1978)
    {
        _2359 = _2301;
        _2361 = _2302;
        _2363 = _2303;
    }
    else
    {
        uint _2365 = _1901 + 2u;
        uint _2369 = _1901 + 10u;
        float _2383 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2365].w)) * _451) * 0.949999988079071044921875);
        float _2384 = _2383 * _2383;
        float _2385 = cbLight._m0[_2365].x + _528;
        float _2386 = cbLight._m0[_2365].y + _529;
        float _2387 = cbLight._m0[_2365].z + _530;
        float _2391 = inversesqrt(dot(vec3(_2385, _2386, _2387), vec3(_2385, _2386, _2387)));
        float _2392 = _2391 * _2385;
        float _2393 = _2391 * _2386;
        float _2394 = _2391 * _2387;
        float _2395 = dot(vec3(_448, _449, _450), vec3(cbLight._m0[_2365].xyz));
        float _4306 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2398 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _2399 = dot(vec3(_448, _449, _450), vec3(_2392, _2393, _2394));
        float _4317 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
        float _2402 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _2403 = dot(vec3(cbLight._m0[_2365].xyz), vec3(_2392, _2393, _2394));
        float _4328 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2407 = _2384 * _2384;
        float _2411 = ((_2402 * _2402) * (_2407 + (-1.0))) + 1.0;
        float _2420 = (exp2(log2(1.0 - (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2421 = 1.0 - _2384;
        float _2431 = (0.5 / (((_2178 * ((_2398 * _2421) + _2384)) + 9.9999999392252902907785028219223e-09) + (((_2178 * _2421) + _2384) * _2398))) * _2398;
        float _4339 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2433 = (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_2407 / ((_2411 * _2411) * 3.141590118408203125));
        float _2434 = isnan(1.0) ? _1916 : (isnan(_1916) ? 1.0 : min(_1916, 1.0));
        _2359 = (((_2420 * cbLight._m0[_2369].x) * _2433) * _2434) + _2301;
        _2361 = (((_2420 * cbLight._m0[_2369].y) * _2433) * _2434) + _2302;
        _2363 = (((_2420 * cbLight._m0[_2369].z) * _2433) * _2434) + _2303;
    }
    float _2465;
    float _2467;
    float _2469;
    if (_2087)
    {
        _2465 = _2359;
        _2467 = _2361;
        _2469 = _2363;
    }
    else
    {
        uint _2476 = _1901 + 3u;
        uint _2480 = _1901 + 11u;
        float _2494 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2476].w)) * _451) * 0.949999988079071044921875);
        float _2495 = _2494 * _2494;
        float _2496 = cbLight._m0[_2476].x + _528;
        float _2497 = cbLight._m0[_2476].y + _529;
        float _2498 = cbLight._m0[_2476].z + _530;
        float _2502 = inversesqrt(dot(vec3(_2496, _2497, _2498), vec3(_2496, _2497, _2498)));
        float _2503 = _2502 * _2496;
        float _2504 = _2502 * _2497;
        float _2505 = _2502 * _2498;
        float _2506 = dot(vec3(_448, _449, _450), vec3(cbLight._m0[_2476].xyz));
        float _4355 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2509 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _2510 = dot(vec3(_448, _449, _450), vec3(_2503, _2504, _2505));
        float _4366 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
        float _2513 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _2514 = dot(vec3(cbLight._m0[_2476].xyz), vec3(_2503, _2504, _2505));
        float _4377 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2518 = _2495 * _2495;
        float _2522 = ((_2513 * _2513) * (_2518 + (-1.0))) + 1.0;
        float _2531 = (exp2(log2(1.0 - (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2532 = 1.0 - _2495;
        float _2542 = (0.5 / (((_2178 * ((_2509 * _2532) + _2495)) + 9.9999999392252902907785028219223e-09) + (((_2178 * _2532) + _2495) * _2509))) * _2509;
        float _4388 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2544 = (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_2518 / ((_2522 * _2522) * 3.141590118408203125));
        float _2545 = isnan(1.0) ? _1917 : (isnan(_1917) ? 1.0 : min(_1917, 1.0));
        _2465 = (((_2531 * cbLight._m0[_2480].x) * _2544) * _2545) + _2359;
        _2467 = (((_2531 * cbLight._m0[_2480].y) * _2544) * _2545) + _2361;
        _2469 = (((_2531 * cbLight._m0[_2480].z) * _2544) * _2545) + _2363;
    }
    float _2611;
    float _2613;
    float _2615;
    float _2617;
    float _2619;
    float _2621;
    if (_1899.y == 0u)
    {
        uvec4 _2566 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2567 = _2566.x;
        uint _2578 = uint((float(_2566.y) * floor(float(uint(cbSceneParam._m0[85u].y * _537) / _2567))) + floor(float(uint(cbSceneParam._m0[85u].x * _536) / _2567)));
        float _2588 = (log2(_1677 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2589 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        uint _2592 = uint(isnan(14.0) ? _2589 : (isnan(_2589) ? 14.0 : min(_2589, 14.0)));
        uvec4 _2597 = texelFetch(g_lightClusterGridBuffer, int(((_2592 << 2u) + (_2578 << 6u)) >> 2u));
        uint _2598 = _2597.x;
        uint _2599 = _2566.z;
        float _2713;
        float _2715;
        float _2717;
        float _2719;
        float _2721;
        float _2723;
        if (((((1u << ((_2599 >> 4u) & 15u)) + 4294967295u) & _2598) == 0u) || ((_2599 & 240u) == 0u))
        {
            _2713 = 0.0;
            _2715 = 0.0;
            _2717 = 0.0;
            _2719 = 0.0;
            _2721 = 0.0;
            _2723 = 0.0;
        }
        else
        {
            float _2714;
            float _2716;
            float _2718;
            float _2720;
            float _2722;
            float _2724;
            float _2867 = 0.0;
            float _2868 = 0.0;
            float _2869 = 0.0;
            float _2870 = 0.0;
            float _2871 = 0.0;
            float _2872 = 0.0;
            uint _2873 = 0u;
            uint _2882;
            bool _2883;
            for (;;)
            {
                _2882 = texelFetch(g_lightClassification, int((((_2592 << 5u) + (_2578 << 9u)) + (_2873 << 2u)) >> 2u)).x;
                _2883 = _2882 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2883)
                {
                    frontier_phi_66_pred = _2872;
                    frontier_phi_66_pred_1 = _2871;
                    frontier_phi_66_pred_2 = _2870;
                    frontier_phi_66_pred_3 = _2869;
                    frontier_phi_66_pred_4 = _2868;
                    frontier_phi_66_pred_5 = _2867;
                }
                else
                {
                    float _2991;
                    float _2992;
                    float _2993;
                    float _2994;
                    float _2995;
                    float _2996;
                    uint _2997;
                    _2991 = _2867;
                    _2992 = _2868;
                    _2993 = _2869;
                    _2994 = _2870;
                    _2995 = _2871;
                    _2996 = _2872;
                    _2997 = _2882;
                    float _2923;
                    float _2924;
                    float _2925;
                    float _2926;
                    float _2927;
                    float _2928;
                    for (;;)
                    {
                        uint _3001 = uint(findLSB(_2997)) + (_2873 << 5u);
                        uint _2998 = (_2997 + 4294967295u) & _2997;
                        uint _3003 = _3001 * 48u;
                        vec4 _3017 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3003)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 3u)).x));
                        uint _3023 = (_3001 * 48u) + 4u;
                        vec4 _3036 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3023)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 3u)).x));
                        uint _3042 = (_3001 * 48u) + 8u;
                        vec3 _3053 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3042)).x, texelFetch(g_PointLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3042 + 2u)).x));
                        float _3057 = _3017.x - _1675;
                        float _3058 = _3017.y - _1676;
                        float _3059 = _3017.z - _1677;
                        float _3060 = dot(vec3(_3057, _3058, _3059), vec3(_3057, _3058, _3059));
                        float _3063 = inversesqrt(_3060);
                        float _3064 = _3063 * _3057;
                        float _3065 = _3063 * _3058;
                        float _3066 = _3063 * _3059;
                        float _3067 = dot(vec3(_558, _561, _564), vec3(_3064, _3065, _3066));
                        float _3072 = 1.0 - (_3060 * _3017.w);
                        float _4414 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                        float _3073 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
                        float _3074 = sqrt(_3060) * _3036.w;
                        float _3077 = 1.39999997615814208984375 / (_3074 + 1.39999997615814208984375);
                        float _3078 = _3077 * _3077;
                        float _3081 = ((1.0 - _3078) * _3067) + _3078;
                        float _3084 = _3074 * _3074;
                        float _3088 = ((isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0))) * _3073) / ((_3084 * 0.699999988079071044921875) + 1.0);
                        float _3092 = (-0.0) - _1675;
                        float _3093 = (-0.0) - _1676;
                        float _3094 = (-0.0) - _1677;
                        float _3098 = inversesqrt(dot(vec3(_3092, _3093, _3094), vec3(_3092, _3093, _3094)));
                        float _3099 = _3098 * _3092;
                        float _3100 = _3098 * _3093;
                        float _3101 = _3098 * _3094;
                        float _3108 = exp2(log2(1.0 / ((_3084 * 3.5) + 5.0)) * 0.25);
                        float _3109 = 1.0 - _618;
                        float _3116 = sqrt(1.0 - ((1.0 - (_3109 * _3109)) * (1.0 - (_3108 * _3108))));
                        float _3117 = _3116 * _3116;
                        float _3118 = _3117 * _3117;
                        float _3119 = _3099 + _3064;
                        float _3120 = _3100 + _3065;
                        float _3121 = _3101 + _3066;
                        float _3125 = inversesqrt(dot(vec3(_3119, _3120, _3121), vec3(_3119, _3120, _3121)));
                        float _3129 = dot(vec3(_558, _561, _564), vec3(_3099, _3100, _3101));
                        float _4430 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                        float _3132 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                        float _3133 = dot(vec3(_558, _561, _564), vec3(_3125 * _3119, _3125 * _3120, _3125 * _3121));
                        float _4441 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                        float _3136 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
                        float _3140 = ((_3136 * _3136) * (_3118 + (-1.0))) + 1.0;
                        float _3141 = _3077 * _3117;
                        float _3142 = _3141 * _3141;
                        float _3145 = ((1.0 - _3142) * _3067) + _3142;
                        float _4452 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                        float _3146 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
                        float _3147 = 1.0 - _3117;
                        float _3157 = (0.5 / (((_3146 * ((_3132 * _3147) + _3117)) + 9.9999999392252902907785028219223e-09) + (((_3146 * _3147) + _3117) * _3132))) * _3146;
                        float _4463 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                        float _3168 = (((_3118 * 3.1415927410125732421875) * (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0)))) / ((_3140 * _3140) * ((_3084 * 2.1991131305694580078125) + 3.141590118408203125))) * _3073;
                        _2926 = (_3088 * _3036.x) + _2994;
                        _2927 = (_3088 * _3036.y) + _2995;
                        _2928 = (_3088 * _3036.z) + _2996;
                        _2923 = (_3168 * _3053.x) + _2991;
                        _2924 = (_3168 * _3053.y) + _2992;
                        _2925 = (_3168 * _3053.z) + _2993;
                        if (_2998 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2991 = _2923;
                            _2992 = _2924;
                            _2993 = _2925;
                            _2994 = _2926;
                            _2995 = _2927;
                            _2996 = _2928;
                            _2997 = _2998;
                        }
                    }
                    frontier_phi_66_pred = _2928;
                    frontier_phi_66_pred_1 = _2927;
                    frontier_phi_66_pred_2 = _2926;
                    frontier_phi_66_pred_3 = _2925;
                    frontier_phi_66_pred_4 = _2924;
                    frontier_phi_66_pred_5 = _2923;
                }
                _2724 = frontier_phi_66_pred;
                _2722 = frontier_phi_66_pred_1;
                _2720 = frontier_phi_66_pred_2;
                _2718 = frontier_phi_66_pred_3;
                _2716 = frontier_phi_66_pred_4;
                _2714 = frontier_phi_66_pred_5;
                uint _2874 = _2873 + 1u;
                if (_2874 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2867 = _2714;
                    _2868 = _2716;
                    _2869 = _2718;
                    _2870 = _2720;
                    _2871 = _2722;
                    _2872 = _2724;
                    _2873 = _2874;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2713 = _2714;
            _2715 = _2716;
            _2717 = _2718;
            _2719 = _2720;
            _2721 = _2722;
            _2723 = _2724;
        }
        uvec4 _2727 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2728 = _2727.z;
        uint _2730 = (_2728 >> 8u) & 15u;
        float _2835;
        float _2837;
        float _2839;
        float _2841;
        float _2843;
        float _2845;
        if (((4294967295u << _2730) & _2598) == 0u)
        {
            _2835 = _2713;
            _2837 = _2715;
            _2839 = _2717;
            _2841 = _2719;
            _2843 = _2721;
            _2845 = _2723;
        }
        else
        {
            float _2860 = inversesqrt(dot(vec3(_1675, _1676, _1677), vec3(_1675, _1676, _1677)));
            float _2861 = _2860 * _1675;
            float _2862 = _2860 * _1676;
            float _2863 = _2860 * _1677;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2730 < ((_2728 >> 12u) & 15u))
            {
                float _2836;
                float _2838;
                float _2840;
                float _2842;
                float _2844;
                float _2846;
                float _2974 = _2713;
                float _2975 = _2715;
                float _2976 = _2717;
                float _2977 = _2719;
                float _2978 = _2721;
                float _2979 = _2723;
                uint _2980 = _2730;
                uint _2989;
                bool _2990;
                for (;;)
                {
                    _2989 = texelFetch(g_lightClassification, int((((_2592 << 5u) + (_2578 << 9u)) + (_2980 << 2u)) >> 2u)).x;
                    _2990 = _2989 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2990)
                    {
                        frontier_phi_72_pred = _2979;
                        frontier_phi_72_pred_1 = _2978;
                        frontier_phi_72_pred_2 = _2977;
                        frontier_phi_72_pred_3 = _2976;
                        frontier_phi_72_pred_4 = _2975;
                        frontier_phi_72_pred_5 = _2974;
                    }
                    else
                    {
                        float _3173;
                        float _3174;
                        float _3175;
                        float _3176;
                        float _3177;
                        float _3178;
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3186 = _2974;
                        float _3187 = _2975;
                        float _3188 = _2976;
                        float _3189 = _2977;
                        float _3190 = _2978;
                        float _3191 = _2979;
                        uint _3192 = _2989;
                        uint _3193;
                        vec4 _3218;
                        float _3219;
                        vec4 _3234;
                        vec3 _3246;
                        vec4 _3261;
                        vec4 _3277;
                        float _3324;
                        bool _3325;
                        for (;;)
                        {
                            uint _3203 = ((_2980 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3192));
                            _3193 = (_3192 + 4294967295u) & _3192;
                            uint _3205 = _3203 * 40u;
                            _3218 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3205)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 3u)).x));
                            _3219 = _3218.w;
                            uint _3221 = (_3203 * 40u) + 4u;
                            _3234 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3221)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 3u)).x));
                            uint _3236 = (_3203 * 40u) + 8u;
                            _3246 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3236)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 2u)).x));
                            uint _3248 = (_3203 * 40u) + 16u;
                            _3261 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 3u)).x));
                            uint _3264 = (_3203 * 40u) + 20u;
                            _3277 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 3u)).x));
                            uint _3280 = (_3203 * 40u) + 24u;
                            vec4 _3293 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3280)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 3u)).x));
                            uint _3299 = (_3203 * 40u) + 28u;
                            vec4 _3312 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 3u)).x));
                            _3324 = fma(_1677, _3312.z, fma(_1676, _3312.y, _3312.x * _1675)) + _3312.w;
                            _3325 = !((fma(_1677, _3293.z, fma(_1676, _3293.y, _3293.x * _1675)) + _3293.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3325)
                            {
                                float _3352 = _3218.x - _1675;
                                float _3353 = _3218.y - _1676;
                                float _3354 = _3218.z - _1677;
                                float _3355 = dot(vec3(_3352, _3353, _3354), vec3(_3352, _3353, _3354));
                                float _3358 = inversesqrt(_3355);
                                float _3359 = _3358 * _3352;
                                float _3360 = _3358 * _3353;
                                float _3361 = _3358 * _3354;
                                float _3365 = 1.0 - (_3355 / (_3219 * _3219));
                                float _4474 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                                float _3366 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                                float _3370 = sqrt(_3355) * _3234.w;
                                float _3372 = 1.39999997615814208984375 / (_3370 + 1.39999997615814208984375);
                                float _3373 = _3372 * _3372;
                                float _3376 = ((1.0 - _3373) * dot(vec3(_3359, _3360, _3361), vec3(_558, _561, _564))) + _3373;
                                float _3379 = _3370 * _3370;
                                float _3383 = (fma(_1677, _3261.z, fma(_1676, _3261.y, _3261.x * _1675)) + _3261.w) / _3324;
                                float _3384 = (fma(_1677, _3277.z, fma(_1676, _3277.y, _3277.x * _1675)) + _3277.w) / _3324;
                                float _3388 = 1.0 - dot(vec2(_3383, _3384), vec2(_3383, _3384));
                                float _4490 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                                float _3389 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
                                float _3390 = _3389 * (((isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0))) * _3366) / ((_3379 * 0.699999988079071044921875) + 1.0));
                                float _3402 = exp2(log2(1.0 / ((_3379 * 3.5) + 5.0)) * 0.25);
                                float _3403 = 1.0 - _618;
                                float _3410 = sqrt(1.0 - ((1.0 - (_3403 * _3403)) * (1.0 - (_3402 * _3402))));
                                float _3411 = _3410 * _3410;
                                float _3412 = _3411 * _3411;
                                float _3413 = _3359 - _2861;
                                float _3414 = _3360 - _2862;
                                float _3415 = _3361 - _2863;
                                float _3419 = inversesqrt(dot(vec3(_3413, _3414, _3415), vec3(_3413, _3414, _3415)));
                                float _3423 = dot(vec3(_558, _561, _564), vec3((-0.0) - _2861, (-0.0) - _2862, (-0.0) - _2863));
                                float _4501 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                                float _3426 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
                                float _3427 = dot(vec3(_558, _561, _564), vec3(_3419 * _3413, _3419 * _3414, _3419 * _3415));
                                float _4512 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                                float _3430 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                                float _3434 = ((_3430 * _3430) * (_3412 + (-1.0))) + 1.0;
                                float _3435 = _3372 * _3411;
                                float _3436 = _3435 * _3435;
                                float _3442 = ((1.0 - _3436) * dot(vec3(_558, _561, _564), vec3(_3359, _3360, _3361))) + _3436;
                                float _4523 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                                float _3443 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                                float _3444 = 1.0 - _3411;
                                float _3454 = (0.5 / (((_3443 * ((_3426 * _3444) + _3411)) + 9.9999999392252902907785028219223e-09) + (((_3443 * _3444) + _3411) * _3426))) * _3443;
                                float _4534 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                                float _3464 = (_3389 * _3366) * (((_3412 * 3.1415927410125732421875) * (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0)))) / ((_3434 * _3434) * ((_3379 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3390 * _3234.y;
                                frontier_phi_78_pred_1 = _3390 * _3234.x;
                                frontier_phi_78_pred_2 = _3464 * _3246.z;
                                frontier_phi_78_pred_3 = _3464 * _3246.y;
                                frontier_phi_78_pred_4 = _3464 * _3246.x;
                                frontier_phi_78_pred_5 = _3390 * _3234.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3472 = frontier_phi_78_pred;
                            _3471 = frontier_phi_78_pred_1;
                            _3470 = frontier_phi_78_pred_2;
                            _3469 = frontier_phi_78_pred_3;
                            _3468 = frontier_phi_78_pred_4;
                            _3473 = frontier_phi_78_pred_5;
                            _3176 = _3471 + _3189;
                            _3177 = _3472 + _3190;
                            _3178 = _3473 + _3191;
                            _3173 = _3468 + _3186;
                            _3174 = _3469 + _3187;
                            _3175 = _3470 + _3188;
                            if (_3193 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3186 = _3173;
                                _3187 = _3174;
                                _3188 = _3175;
                                _3189 = _3176;
                                _3190 = _3177;
                                _3191 = _3178;
                                _3192 = _3193;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3178;
                        frontier_phi_72_pred_1 = _3177;
                        frontier_phi_72_pred_2 = _3176;
                        frontier_phi_72_pred_3 = _3175;
                        frontier_phi_72_pred_4 = _3174;
                        frontier_phi_72_pred_5 = _3173;
                    }
                    _2846 = frontier_phi_72_pred;
                    _2844 = frontier_phi_72_pred_1;
                    _2842 = frontier_phi_72_pred_2;
                    _2840 = frontier_phi_72_pred_3;
                    _2838 = frontier_phi_72_pred_4;
                    _2836 = frontier_phi_72_pred_5;
                    uint _2981 = _2980 + 1u;
                    if (_2981 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2974 = _2836;
                        _2975 = _2838;
                        _2976 = _2840;
                        _2977 = _2842;
                        _2978 = _2844;
                        _2979 = _2846;
                        _2980 = _2981;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2846;
                frontier_phi_60_61_ladder_1 = _2844;
                frontier_phi_60_61_ladder_2 = _2840;
                frontier_phi_60_61_ladder_3 = _2838;
                frontier_phi_60_61_ladder_4 = _2836;
                frontier_phi_60_61_ladder_5 = _2842;
            }
            else
            {
                frontier_phi_60_61_ladder = _2723;
                frontier_phi_60_61_ladder_1 = _2721;
                frontier_phi_60_61_ladder_2 = _2717;
                frontier_phi_60_61_ladder_3 = _2715;
                frontier_phi_60_61_ladder_4 = _2713;
                frontier_phi_60_61_ladder_5 = _2719;
            }
            _2835 = frontier_phi_60_61_ladder_4;
            _2837 = frontier_phi_60_61_ladder_3;
            _2839 = frontier_phi_60_61_ladder_2;
            _2841 = frontier_phi_60_61_ladder_5;
            _2843 = frontier_phi_60_61_ladder_1;
            _2845 = frontier_phi_60_61_ladder;
        }
        float _2850 = isnan(1.0) ? _602 : (isnan(_602) ? 1.0 : min(_602, 1.0));
        _2611 = (_2850 * _2841) + _2142;
        _2613 = (_2850 * _2843) + _2144;
        _2615 = (_2850 * _2845) + _2146;
        _2617 = ((_2835 * 0.039999999105930328369140625) * _2850) + _2465;
        _2619 = ((_2837 * 0.039999999105930328369140625) * _2850) + _2467;
        _2621 = ((_2839 * 0.039999999105930328369140625) * _2850) + _2469;
    }
    else
    {
        _2611 = _2142;
        _2613 = _2144;
        _2615 = _2146;
        _2617 = _2465;
        _2619 = _2467;
        _2621 = _2469;
    }
    uint _2627 = _578 + uint(cbMatDynParam._m0[0u].w);
    float _2635 = ((_291 * cbMtdParam._m0[11u].x) * (_379.x + _364.x)) * cbInstanceData._m0[_2627].x;
    float _2638 = ((_291 * cbMtdParam._m0[11u].y) * (_379.y + _364.y)) * cbInstanceData._m0[_2627].y;
    float _2641 = ((_291 * cbMtdParam._m0[11u].z) * (_379.z + _364.z)) * cbInstanceData._m0[_2627].z;
    float _4550 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _4561 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _4572 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _2658 = (((isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * (_2611 + ((isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0))) * _602))) + ((_2617 + ((isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))) * _1409)) * cbPerFrame._m0[3u].x)) + _2635;
    float _2660 = (_2638 + ((_2619 + ((isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))) * _1409)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * (_2613 + ((isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0))) * _602)));
    float _2662 = (_2641 + ((_2621 + ((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _1409)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * (_2615 + ((isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0))) * _602)));
    float _4598 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2675 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
    uint _2676 = _577 + 6u;
    float _2684 = _536 / cbSceneParam._m0[86u].x;
    float _2685 = _537 / cbSceneParam._m0[86u].y;
    vec4 _2699 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2684, _2685, (log2((isnan(cbSceneParam._m0[77u].w) ? _470 : (isnan(_470) ? cbSceneParam._m0[77u].w : min(_470, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2701 = _2699.x;
    float _2702 = _2699.y;
    float _2703 = _2699.z;
    float _2704 = _2699.w;
    float _2776;
    float _2778;
    float _2780;
    float _2782;
    if (_470 > cbSceneParam._m0[78u].w)
    {
        float _2738 = isnan(_470) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _470 : min(cbSceneParam._m0[80u].w, _470));
        float _2739 = _2738 / _470;
        float _2750 = _2739 * _521;
        float _2751 = _522 * _2739;
        float _2752 = (-0.0) - _2751;
        float _2754 = _2739 * _523;
        float _2756 = (cbSceneParam._m0[77u].w * _2752) / _2738;
        float _2757 = _2756 + cbSceneParam._m0[79u].w;
        float _2758 = cbSceneParam._m0[79u].w - _2751;
        float _2764 = sqrt(((_2750 * _2750) + (_2751 * _2751)) + (_2754 * _2754));
        float _2767 = (1.0 - (cbSceneParam._m0[77u].w / _2738)) * _2764;
        float _2772 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2774 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2936;
        if (abs((_2752 - _2756) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2936 = ((((_2757 > 0.0) ? exp2(_2772 * _2757) : (2.0 - exp2(_2774 * _2757))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2767;
        }
        else
        {
            float _2896 = 1.0 / cbSceneParam._m0[80u].x;
            float _2897 = isnan(_2758) ? _2757 : (isnan(_2757) ? _2758 : max(_2757, _2758));
            float _2898 = isnan(_2758) ? _2757 : (isnan(_2757) ? _2758 : min(_2757, _2758));
            float _2907 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : min(_2897, 0.0));
            float _2908 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : min(_2898, 0.0));
            _2936 = ((abs(_2764 / _2752) * cbSceneParam._m0[80u].y) * ((((_2907 - _2908) * 2.0) - ((exp2(_2772 * (isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0)))) - exp2(_2772 * (isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0))))) * _2896)) - ((exp2(_2774 * _2907) - exp2(_2774 * _2908)) * _2896))) + (_2767 * cbSceneParam._m0[80u].z);
        }
        vec4 _2938 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2684, _2685, 1.0), 0.0);
        float _2947 = exp2((_2936 * (-1.44269502162933349609375)) * (1.0 - _2938.w));
        float _2948 = log2(_2947);
        float _2964 = log2(_2704);
        _2776 = (exp2(_2964 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2948 * cbSceneParam._m0[78u].x)) * _2938.x) / cbSceneParam._m0[78u].x)) + _2701;
        _2778 = (exp2(_2964 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2948 * cbSceneParam._m0[78u].y)) * _2938.y) / cbSceneParam._m0[78u].y)) + _2702;
        _2780 = (exp2(_2964 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2948 * cbSceneParam._m0[78u].z)) * _2938.z) / cbSceneParam._m0[78u].z)) + _2703;
        _2782 = _2947 * _2704;
    }
    else
    {
        _2776 = _2701;
        _2778 = _2702;
        _2780 = _2703;
        _2782 = _2704;
    }
    float _2794 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2795 = _2794 == 3.0;
    float _2796 = log2(_2782);
    float _2800 = exp2(_2796 * cbSceneParam._m0[78u].x);
    float _2801 = exp2(_2796 * cbSceneParam._m0[78u].y);
    float _2802 = exp2(_2796 * cbSceneParam._m0[78u].z);
    float _2803 = _2800 * (isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0)));
    float _2804 = _2801 * (isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0)));
    float _2805 = _2802 * (isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0)));
    float _2814 = (_2794 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2814 * (_2795 ? _2803 : (_2803 + (cbSceneParam._m0[72u].w * _2776)));
    SV_Target.y = _2814 * (_2795 ? _2804 : (_2804 + (cbSceneParam._m0[72u].w * _2778)));
    SV_Target.z = _2814 * (_2795 ? _2805 : (_2805 + (cbSceneParam._m0[72u].w * _2780)));
    SV_Target.w = cbInstanceData._m0[_2676].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2635) * _2675) * _2800) * _2814;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2638) * _2675) * _2801) * _2814;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2641) * _2675) * _2802) * _2814;
    SV_Target_1.w = cbInstanceData._m0[_2676].w;
}


