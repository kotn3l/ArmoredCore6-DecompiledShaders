#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1016;
float _3448;
float _3449;
float _3450;
float _3451;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _241 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _247 = _241.x * cbMtdParam._m0[9u].x;
    float _248 = _241.y * cbMtdParam._m0[9u].y;
    float _249 = _241.z * cbMtdParam._m0[9u].z;
    vec4 _269 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _290 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_269.x + 0.00999999977648258209228515625));
    float _292 = _290 * (cbMtdParam._m0[15u].x + 1.0);
    float _3460 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _293 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
    float _301 = ((((cbMtdParam._m0[12u].x - _247) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _293) + _247;
    float _302 = ((((cbMtdParam._m0[12u].y - _248) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _293) + _248;
    float _303 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _249)) * _293) + _249;
    vec4 _315 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _319 = _315.z;
    float _323 = (_315.x * 2.0) + (-1.0);
    float _325 = (_315.y * 2.0) + (-1.0);
    float _326 = dot(vec2(_323, _325), vec2(_323, _325));
    float _3471 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _331 = sqrt(1.0 - (isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0))));
    float _334 = _290 * (cbMtdParam._m0[14u].w + 1.0);
    float _3482 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _338 = ((cbMtdParam._m0[14u].y - _319) * (isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0)))) + _319;
    vec4 _366 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _381 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _410 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _416 = (_410.x * 2.0) + (-1.0);
    float _417 = (_410.y * 2.0) + (-1.0);
    float _418 = dot(vec2(_416, _417), vec2(_416, _417));
    float _3493 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _434 = (_293 * (((cbMtdParam._m0[13u].z * _323) - _323) + _416)) + _323;
    float _435 = (_293 * (((cbMtdParam._m0[13u].z * _325) - _325) + _417)) + _325;
    float _436 = (_293 * (sqrt(1.0 - (isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0)))) - _331)) + _331;
    float _439 = fma(_436, _212 * NORMAL.x, fma(_435, _219 * TANGENT.x, (_205 * _197) * _434));
    float _442 = fma(_436, _212 * NORMAL.y, fma(_435, _219 * TANGENT.y, (_205 * _198) * _434));
    float _445 = fma(_436, _212 * NORMAL.z, fma(_435, _219 * TANGENT.z, (_205 * _199) * _434));
    float _449 = inversesqrt(dot(vec3(_439, _442, _445), vec3(_439, _442, _445)));
    float _450 = _449 * _439;
    float _451 = _449 * _442;
    float _452 = _449 * _445;
    float _3504 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _453 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
    float _3515 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3526 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _3537 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _472 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _513 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _523 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _513);
    float _524 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _513);
    float _525 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _513);
    float _529 = inversesqrt(dot(vec3(_523, _524, _525), vec3(_523, _524, _525)));
    float _530 = _523 * _529;
    float _531 = _524 * _529;
    float _532 = _525 * _529;
    vec4 _537 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _539 = _537.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _696 = sqrt(((_523 * _523) + (_524 * _524)) + (_525 * _525));
        float _702 = (cbMatDynParam._m0[5u].x * _696) + cbMatDynParam._m0[5u].y;
        float _3548 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
        float _703 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _707 = (cbMatDynParam._m0[5u].z * _696) + cbMatDynParam._m0[5u].w;
        float _3559 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0))) - _703)) + _703) < ((_539 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _551 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _552 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _572 = fma(_452, cbSceneParam._m0[5u].z, fma(_451, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _450));
    float _575 = fma(_452, cbSceneParam._m0[6u].z, fma(_451, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _450));
    float _578 = fma(_452, cbSceneParam._m0[7u].z, fma(_451, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _450));
    uint _591 = uint(roundEven(NORMAL.w)) * 13u;
    uint _592 = _591 + 9u;
    uint _593 = _592 + uint(cbMatDynParam._m0[0u].w);
    float _599 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0)))) * cbInstanceData._m0[_593].x;
    float _600 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0)))) * cbInstanceData._m0[_593].y;
    float _601 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0)))) * cbInstanceData._m0[_593].z;
    float _3570 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _602 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
    float _3581 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _603 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
    float _3592 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _604 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
    vec4 _613 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _551, cbSceneParam._m0[86u].y * _552));
    float _616 = _613.x * TEXCOORD_3.w;
    float _617 = dot(vec3(_450, _451, _452), vec3(_530, _531, _532));
    float _620 = _617 * 2.0;
    float _624 = (_620 * _450) - _530;
    float _625 = (_620 * _451) - _531;
    float _626 = (_620 * _452) - _532;
    float _630 = abs(dot(vec3(_530, _531, _532), vec3(_450, _451, _452)));
    float _3603 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _632 = sqrt(_453);
    float _645 = exp2((_632 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_632 * 3.0));
    float _677 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _681 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _685 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1015;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _740 = fma(_685, cbModelParam._m0[26u].z, fma(_681, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _677));
        float _744 = fma(_685, cbModelParam._m0[27u].z, fma(_681, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _677));
        float _748 = fma(_685, cbModelParam._m0[28u].z, fma(_681, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _677));
        float _773 = _677 + _450;
        float _774 = _681 + _451;
        float _775 = _685 + _452;
        float _785 = fma(_775, cbModelParam._m0[26u].z, fma(_774, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _773)) - _740;
        float _786 = fma(_775, cbModelParam._m0[27u].z, fma(_774, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _773)) - _744;
        float _787 = fma(_775, cbModelParam._m0[28u].z, fma(_774, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _773)) - _748;
        float _791 = inversesqrt(dot(vec3(_785, _786, _787), vec3(_785, _786, _787)));
        float _804 = ((_791 * _785) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_740 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _805 = ((_791 * _786) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_744 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _806 = ((_791 * _787) / cbModelParam._m0[34u].z) + ((((((_748 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _809 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        vec4 _816 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        vec4 _823 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        vec4 _830 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        float _843 = exp2((_809.w + (-0.5)) * 20.0) * 2.0;
        float _844 = _843 * (_809.x + (-0.5));
        float _845 = _843 * (_809.y + (-0.5));
        float _846 = _843 * (_809.z + (-0.5));
        float _853 = exp2((_816.w + (-0.5)) * 20.0) * 2.0;
        float _854 = _853 * (_816.x + (-0.5));
        float _855 = _853 * (_816.y + (-0.5));
        float _856 = _853 * (_816.z + (-0.5));
        float _863 = exp2((_823.w + (-0.5)) * 20.0) * 2.0;
        float _864 = _863 * (_823.x + (-0.5));
        float _865 = _863 * (_823.y + (-0.5));
        float _866 = _863 * (_823.z + (-0.5));
        float _873 = exp2((_830.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_830.x + (-0.5));
        float _875 = _873 * (_830.y + (-0.5));
        float _876 = _873 * (_830.z + (-0.5));
        float _877 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _878 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _879 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _880 = _844 * 0.5;
        float _881 = _854 * 0.5;
        float _882 = _864 * 0.5;
        float _883 = dot(vec3(_880, _881, _882), vec3(_880, _881, _882));
        float _888 = (_883 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_883);
        float _897 = (dot(vec3(_450, _451, _452), vec3(_888 * _880, _888 * _881, _888 * _882)) + 1.0) * 0.5;
        float _3629 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _907 = sqrt(((_881 * _881) + (_880 * _880)) + (_882 * _882)) / (_877 + 9.9999997473787516355514526367188e-06);
        float _3640 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _909 = _908 * 2.0;
        float _913 = (1.0 - _908) / (_908 + 1.0);
        float _3651 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _923 = ((((1.0 - _914) * (_909 + 2.0)) * exp2(log2(isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * (_909 + 1.0))) + _914) * _877;
        float _924 = _845 * 0.5;
        float _925 = _855 * 0.5;
        float _926 = _865 * 0.5;
        float _927 = dot(vec3(_924, _925, _926), vec3(_924, _925, _926));
        float _932 = (_927 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_927);
        float _940 = (dot(vec3(_450, _451, _452), vec3(_932 * _924, _932 * _925, _932 * _926)) + 1.0) * 0.5;
        float _3662 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _949 = sqrt(((_925 * _925) + (_924 * _924)) + (_926 * _926)) / (_878 + 9.9999997473787516355514526367188e-06);
        float _3673 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _951 = _950 * 2.0;
        float _955 = (1.0 - _950) / (_950 + 1.0);
        float _3684 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _965 = ((((1.0 - _956) * (_951 + 2.0)) * exp2(log2(isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * (_951 + 1.0))) + _956) * _878;
        float _966 = _846 * 0.5;
        float _967 = _856 * 0.5;
        float _968 = _866 * 0.5;
        float _969 = dot(vec3(_966, _967, _968), vec3(_966, _967, _968));
        float _974 = (_969 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_969);
        float _982 = (dot(vec3(_450, _451, _452), vec3(_974 * _966, _974 * _967, _974 * _968)) + 1.0) * 0.5;
        float _3695 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _991 = sqrt(((_967 * _967) + (_966 * _966)) + (_968 * _968)) / (_879 + 9.9999997473787516355514526367188e-06);
        float _3706 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _993 = _992 * 2.0;
        float _997 = (1.0 - _992) / (_992 + 1.0);
        float _3717 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1007 = ((((1.0 - _998) * (_993 + 2.0)) * exp2(log2(isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * (_993 + 1.0))) + _998) * _879;
        _1015 = _846;
        _1017 = _845;
        _1018 = _844;
        _1019 = _856;
        _1020 = _855;
        _1021 = _854;
        _1022 = _866;
        _1023 = _865;
        _1024 = _864;
        _1025 = _879;
        _1026 = _878;
        _1027 = _877;
        _1028 = cbModelParam._m0[36u].z * (isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0)));
        _1029 = cbModelParam._m0[36u].z * (isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0)));
        _1030 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0)));
    }
    else
    {
        _1015 = _1016;
        _1017 = _1016;
        _1018 = _1016;
        _1019 = _1016;
        _1020 = _1016;
        _1021 = _1016;
        _1022 = _1016;
        _1023 = _1016;
        _1024 = _1016;
        _1025 = _1016;
        _1026 = _1016;
        _1027 = _1016;
        _1028 = 0.0;
        _1029 = 0.0;
        _1030 = 0.0;
    }
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1059 = fma(_685, cbModelParam._m0[30u].z, fma(_681, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _677));
        float _1063 = fma(_685, cbModelParam._m0[31u].z, fma(_681, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _677));
        float _1067 = fma(_685, cbModelParam._m0[32u].z, fma(_681, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _677));
        float _1090 = _677 + _450;
        float _1091 = _681 + _451;
        float _1092 = _685 + _452;
        float _1102 = fma(_1092, cbModelParam._m0[30u].z, fma(_1091, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1090)) - _1059;
        float _1103 = fma(_1092, cbModelParam._m0[31u].z, fma(_1091, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1090)) - _1063;
        float _1104 = fma(_1092, cbModelParam._m0[32u].z, fma(_1091, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1090)) - _1067;
        float _1108 = inversesqrt(dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104)));
        float _1121 = ((_1108 * _1102) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1059 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1122 = ((_1108 * _1103) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1063 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1123 = ((_1108 * _1104) / cbModelParam._m0[35u].z) + ((((((_1067 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        float _1158 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1125.x + (-0.5));
        float _1160 = _1158 * (_1125.y + (-0.5));
        float _1161 = _1158 * (_1125.z + (-0.5));
        float _1168 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1132.x + (-0.5));
        float _1170 = _1168 * (_1132.y + (-0.5));
        float _1171 = _1168 * (_1132.z + (-0.5));
        float _1178 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1139.x + (-0.5));
        float _1180 = _1178 * (_1139.y + (-0.5));
        float _1181 = _1178 * (_1139.z + (-0.5));
        float _1188 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1146.x + (-0.5));
        float _1190 = _1188 * (_1146.y + (-0.5));
        float _1191 = _1188 * (_1146.z + (-0.5));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = _1159 * 0.5;
        float _1196 = _1169 * 0.5;
        float _1197 = _1179 * 0.5;
        float _1198 = dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197));
        float _1203 = (_1198 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1198);
        float _1211 = (dot(vec3(_450, _451, _452), vec3(_1203 * _1195, _1203 * _1196, _1203 * _1197)) + 1.0) * 0.5;
        float _3758 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1220 = sqrt(((_1196 * _1196) + (_1195 * _1195)) + (_1197 * _1197)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _3769 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1222 = _1221 * 2.0;
        float _1226 = (1.0 - _1221) / (_1221 + 1.0);
        float _3780 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1236 = ((((1.0 - _1227) * (_1222 + 2.0)) * exp2(log2(isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * (_1222 + 1.0))) + _1227) * _1192;
        float _1237 = _1160 * 0.5;
        float _1238 = _1170 * 0.5;
        float _1239 = _1180 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1253 = (dot(vec3(_450, _451, _452), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _3791 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1262 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _3802 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _3813 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * (_1264 + 1.0))) + _1269) * _1193;
        float _1279 = _1161 * 0.5;
        float _1280 = _1171 * 0.5;
        float _1281 = _1181 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1295 = (dot(vec3(_450, _451, _452), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _3824 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1304 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _3835 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _3846 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * (_1306 + 1.0))) + _1311) * _1194;
        _1328 = _1161;
        _1329 = _1160;
        _1330 = _1159;
        _1331 = _1171;
        _1332 = _1170;
        _1333 = _1169;
        _1334 = _1181;
        _1335 = _1180;
        _1336 = _1179;
        _1337 = _1194;
        _1338 = _1193;
        _1339 = _1192;
        _1340 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)));
        _1341 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
        _1342 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
    }
    else
    {
        _1328 = _1016;
        _1329 = _1016;
        _1330 = _1016;
        _1331 = _1016;
        _1332 = _1016;
        _1333 = _1016;
        _1334 = _1016;
        _1335 = _1016;
        _1336 = _1016;
        _1337 = _1016;
        _1338 = _1016;
        _1339 = _1016;
        _1340 = 0.0;
        _1341 = 0.0;
        _1342 = 0.0;
    }
    float _1352 = (cbModelParam._m0[1u].x * (_1340 - _1028)) + _1028;
    float _1353 = (cbModelParam._m0[1u].x * (_1341 - _1029)) + _1029;
    float _1354 = (cbModelParam._m0[1u].x * (_1342 - _1030)) + _1030;
    float _1375 = fma(_1354, cbSceneParam._m0[89u].z, fma(_1353, cbSceneParam._m0[89u].y, _1352 * cbSceneParam._m0[89u].x));
    float _1378 = fma(_1354, cbSceneParam._m0[90u].z, fma(_1353, cbSceneParam._m0[90u].y, _1352 * cbSceneParam._m0[90u].x));
    float _1381 = fma(_1354, cbSceneParam._m0[91u].z, fma(_1353, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1352));
    float _1396 = _624 * 0.5;
    float _1397 = _625 * 0.5;
    float _1398 = _626 * 0.5;
    float _1399 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1330, _1333, _1336, _1339));
    float _1402 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1329, _1332, _1335, _1338));
    float _1405 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1328, _1331, _1334, _1337));
    float _1439;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1412 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1015, _1019, _1022, _1025));
        float _1416 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1017, _1020, _1023, _1026));
        float _1420 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1018, _1021, _1024, _1027));
        float _1427 = dot(vec4(cbModelParam._m0[39u]), vec4(_1396, _1397, _1398, 1.0));
        _1439 = dot(vec3(isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)), isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)), isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1427) ? 0.0 : (isnan(0.0) ? _1427 : max(0.0, _1427))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1439 = 1.0;
    }
    float _1450;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1441 = dot(vec4(cbModelParam._m0[40u]), vec4(_1396, _1397, _1398, 1.0));
        _1450 = dot(vec3(isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)), isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)), isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1441) ? 0.0 : (isnan(0.0) ? _1441 : max(0.0, _1441))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1450 = 1.0;
    }
    float _1454 = (_1450 * cbModelParam._m0[1u].x) + (_1439 * (1.0 - cbModelParam._m0[1u].x));
    float _1464 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _453);
    float _1465 = isnan(_1464) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1464 : min(cbModelParam._m0[25u].z, _1464));
    float _1545;
    float _1547;
    float _1549;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1512 = fma(_685, cbModelParam._m0[13u].z, fma(_681, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _677)) + cbModelParam._m0[13u].w;
        float _1516 = fma(_685, cbModelParam._m0[14u].z, fma(_681, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _677)) + cbModelParam._m0[14u].w;
        float _1520 = fma(_685, cbModelParam._m0[15u].z, fma(_681, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _677)) + cbModelParam._m0[15u].w;
        float _1523 = fma(_626, cbModelParam._m0[13u].z, fma(_625, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _624));
        float _1526 = fma(_626, cbModelParam._m0[14u].z, fma(_625, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _624));
        float _1529 = fma(_626, cbModelParam._m0[15u].z, fma(_625, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _624));
        float _1557;
        if (_1523 > 0.0)
        {
            _1557 = abs((1.0 - _1512) / _1523);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1523 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1512 + 1.0) / _1523);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1557 = frontier_phi_17_15_ladder;
        }
        float _1781;
        if (_1526 > 0.0)
        {
            _1781 = abs((1.0 - _1516) / _1526);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1526 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1516 + 1.0) / _1526);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1781 = frontier_phi_26_22_ladder;
        }
        float _2027;
        if (_1529 > 0.0)
        {
            _2027 = abs((1.0 - _1520) / _1529);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1529 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1520 + 1.0) / _1529);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2027 = frontier_phi_38_33_ladder;
        }
        float _2029 = isnan(_1781) ? _1557 : (isnan(_1557) ? _1781 : min(_1557, _1781));
        float _2030 = isnan(_2027) ? _2029 : (isnan(_2029) ? _2027 : min(_2029, _2027));
        float _2034 = (_2030 * _1523) + _1512;
        float _2035 = (_2030 * _1526) + _1516;
        float _2036 = (_2030 * _1529) + _1520;
        float _2037 = _2030 * 9.9999997473787516355514526367188e-05;
        float _2039 = (-1.0) - _2037;
        float _2041 = _2037 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2036 > _2041) || ((_2036 < _2039) || ((_2035 > _2041) || ((_2035 < _2039) || ((_2034 < _2039) || (_2034 > _2041))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2160 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2036, cbModelParam._m0[9u].z, fma(_2035, cbModelParam._m0[9u].y, _2034 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2036, cbModelParam._m0[10u].z, fma(_2035, cbModelParam._m0[10u].y, _2034 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2036, cbModelParam._m0[11u].z, fma(_2035, cbModelParam._m0[11u].y, _2034 * cbModelParam._m0[11u].x))), _1465);
            frontier_phi_16_38_ladder = _2160.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2160.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2160.x * cbModelParam._m0[1u].y;
        }
        _1545 = frontier_phi_16_38_ladder_2;
        _1547 = frontier_phi_16_38_ladder_1;
        _1549 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1533 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_624, _625, _626), _1465);
        _1545 = _1533.x * cbModelParam._m0[1u].y;
        _1547 = _1533.y * cbModelParam._m0[1u].y;
        _1549 = _1533.z * cbModelParam._m0[1u].y;
    }
    float _1553 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _453);
    float _1554 = isnan(_1553) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1553 : min(cbModelParam._m0[25u].w, _1553));
    float _1645;
    float _1647;
    float _1649;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1609 = fma(_685, cbModelParam._m0[21u].z, fma(_681, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _677)) + cbModelParam._m0[21u].w;
        float _1613 = fma(_685, cbModelParam._m0[22u].z, fma(_681, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _677)) + cbModelParam._m0[22u].w;
        float _1617 = fma(_685, cbModelParam._m0[23u].z, fma(_681, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _677)) + cbModelParam._m0[23u].w;
        float _1620 = fma(_626, cbModelParam._m0[21u].z, fma(_625, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _624));
        float _1623 = fma(_626, cbModelParam._m0[22u].z, fma(_625, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _624));
        float _1626 = fma(_626, cbModelParam._m0[23u].z, fma(_625, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _624));
        float _1786;
        if (_1620 > 0.0)
        {
            _1786 = abs((1.0 - _1609) / _1620);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1620 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1609 + 1.0) / _1620);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1786 = frontier_phi_28_24_ladder;
        }
        float _2054;
        if (_1623 > 0.0)
        {
            _2054 = abs((1.0 - _1613) / _1623);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1623 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1613 + 1.0) / _1623);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2054 = frontier_phi_40_35_ladder;
        }
        float _2259;
        if (_1626 > 0.0)
        {
            _2259 = abs((1.0 - _1617) / _1626);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1626 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1617 + 1.0) / _1626);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2259 = frontier_phi_49_46_ladder;
        }
        float _2261 = isnan(_2054) ? _1786 : (isnan(_1786) ? _2054 : min(_1786, _2054));
        float _2262 = isnan(_2259) ? _2261 : (isnan(_2261) ? _2259 : min(_2261, _2259));
        float _2266 = (_2262 * _1620) + _1609;
        float _2267 = (_2262 * _1623) + _1613;
        float _2268 = (_2262 * _1626) + _1617;
        float _2269 = _2262 * 9.9999997473787516355514526367188e-05;
        float _2270 = (-1.0) - _2269;
        float _2272 = _2269 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2268 > _2272) || ((_2268 < _2270) || ((_2267 > _2272) || ((_2267 < _2270) || ((_2266 < _2270) || (_2266 > _2272))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2502 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2268, cbModelParam._m0[17u].z, fma(_2267, cbModelParam._m0[17u].y, _2266 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2268, cbModelParam._m0[18u].z, fma(_2267, cbModelParam._m0[18u].y, _2266 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2268, cbModelParam._m0[19u].z, fma(_2267, cbModelParam._m0[19u].y, _2266 * cbModelParam._m0[19u].x))), _1554);
            frontier_phi_25_49_ladder = _2502.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2502.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2502.x * cbModelParam._m0[1u].z;
        }
        _1645 = frontier_phi_25_49_ladder_2;
        _1647 = frontier_phi_25_49_ladder_1;
        _1649 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1629 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_624, _625, _626), _1554);
        _1645 = _1629.x * cbModelParam._m0[1u].z;
        _1647 = _1629.y * cbModelParam._m0[1u].z;
        _1649 = _1629.z * cbModelParam._m0[1u].z;
    }
    float _1661 = ((((1.0 - _645) * ((_632 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_645 * _632)) * _616;
    float _1662 = _1661 * ((cbModelParam._m0[1u].w * (_1645 - _1545)) + _1545);
    float _1663 = _1661 * ((cbModelParam._m0[1u].w * (_1647 - _1547)) + _1547);
    float _1664 = _1661 * ((cbModelParam._m0[1u].w * (_1649 - _1549)) + _1549);
    float _1667 = fma(_1664, cbSceneParam._m0[89u].z, fma(_1663, cbSceneParam._m0[89u].y, _1662 * cbSceneParam._m0[89u].x));
    float _1670 = fma(_1664, cbSceneParam._m0[90u].z, fma(_1663, cbSceneParam._m0[90u].y, _1662 * cbSceneParam._m0[90u].x));
    float _1673 = fma(_1664, cbSceneParam._m0[91u].z, fma(_1663, cbSceneParam._m0[91u].y, _1662 * cbSceneParam._m0[91u].x));
    vec4 _1681 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_551, _552));
    float _1683 = _1681.w;
    float _1695 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1683);
    float _1696 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1683);
    float _1697 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1683);
    uvec4 _1701 = floatBitsToUint(cbInstanceData._m0[_591 + 5u]);
    uint _1703 = _1701.x * 14u;
    uint _1704 = _1703 + 13u;
    float _1711 = _616 + (-1.0);
    float _1716 = (cbLight._m0[_1704].x * _1711) + 1.0;
    float _1717 = (cbLight._m0[_1704].y * _1711) + 1.0;
    float _1718 = (cbLight._m0[_1704].z * _1711) + 1.0;
    float _1719 = (cbLight._m0[_1704].w * _1711) + 1.0;
    uint _1720 = _1703 + 5u;
    float _1726 = isnan(1.0) ? _1717 : (isnan(_1717) ? 1.0 : min(_1717, 1.0));
    uint _1730 = _1703 + 4u;
    float _1740 = isnan(1.0) ? _1716 : (isnan(_1716) ? 1.0 : min(_1716, 1.0));
    uint _1744 = _1703 | 1u;
    float _1755 = dot(vec3(cbLight._m0[_1703].xyz), vec3(_450, _451, _452));
    float _1758 = dot(vec3(cbLight._m0[_1744].xyz), vec3(_450, _451, _452));
    float _3982 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
    float _3993 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
    float _1763 = (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * 0.3183098733425140380859375;
    float _1765 = (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * 0.3183098733425140380859375;
    float _1772 = ((cbLight._m0[_1720].x * _1726) * _1765) + (((cbLight._m0[_1730].x * _1695) * _1740) * _1763);
    float _1773 = ((_1726 * cbLight._m0[_1720].y) * _1765) + (((cbLight._m0[_1730].y * _1696) * _1740) * _1763);
    float _1774 = ((_1726 * cbLight._m0[_1720].z) * _1765) + (((cbLight._m0[_1730].z * _1697) * _1740) * _1763);
    uvec4 _1778 = floatBitsToUint(cbLight._m0[_1703 + 12u]);
    bool _1780 = _1778.x == 0u;
    float _1791;
    float _1793;
    float _1795;
    if (_1780)
    {
        _1791 = _1772;
        _1793 = _1773;
        _1795 = _1774;
    }
    else
    {
        uint _1799 = _1703 + 6u;
        float _1815 = (dot(vec3(cbLight._m0[_1703 + 2u].xyz), vec3(_450, _451, _452)) * 0.5) + 0.5;
        float _1816 = _1815 * _1815;
        float _4004 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
        float _1817 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1818 = isnan(1.0) ? _1718 : (isnan(_1718) ? 1.0 : min(_1718, 1.0));
        _1791 = (((cbLight._m0[_1799].x * 0.3183098733425140380859375) * _1817) * _1818) + _1772;
        _1793 = (((cbLight._m0[_1799].y * 0.3183098733425140380859375) * _1817) * _1818) + _1773;
        _1795 = (((cbLight._m0[_1799].z * 0.3183098733425140380859375) * _1817) * _1818) + _1774;
    }
    bool _1798 = _1778.y == 0u;
    float _1836;
    float _1838;
    float _1840;
    if (_1798)
    {
        _1836 = _1791;
        _1838 = _1793;
        _1840 = _1795;
    }
    else
    {
        uint _1998 = _1703 + 7u;
        float _2014 = (dot(vec3(cbLight._m0[_1703 + 3u].xyz), vec3(_450, _451, _452)) * 0.5) + 0.5;
        float _2015 = _2014 * _2014;
        float _4020 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
        float _2016 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _2017 = isnan(1.0) ? _1719 : (isnan(_1719) ? 1.0 : min(_1719, 1.0));
        _1836 = (((cbLight._m0[_1998].x * 0.3183098733425140380859375) * _2016) * _2017) + _1791;
        _1838 = (((cbLight._m0[_1998].y * 0.3183098733425140380859375) * _2016) * _2017) + _1793;
        _1840 = (((cbLight._m0[_1998].z * 0.3183098733425140380859375) * _2016) * _2017) + _1795;
    }
    uint _1843 = _1703 + 8u;
    float _1856 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1703].w)) * _453) * 0.949999988079071044921875);
    float _1857 = _1856 * _1856;
    float _1858 = cbLight._m0[_1703].x + _530;
    float _1859 = cbLight._m0[_1703].y + _531;
    float _1860 = cbLight._m0[_1703].z + _532;
    float _1864 = inversesqrt(dot(vec3(_1858, _1859, _1860), vec3(_1858, _1859, _1860)));
    float _1865 = _1864 * _1858;
    float _1866 = _1864 * _1859;
    float _1867 = _1864 * _1860;
    float _1868 = dot(vec3(_450, _451, _452), vec3(cbLight._m0[_1703].xyz));
    float _4036 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _1871 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _4047 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _1872 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    float _1873 = dot(vec3(_450, _451, _452), vec3(_1865, _1866, _1867));
    float _4058 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1876 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _1877 = dot(vec3(cbLight._m0[_1703].xyz), vec3(_1865, _1866, _1867));
    float _4069 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
    float _1881 = _1857 * _1857;
    float _1885 = ((_1876 * _1876) * (_1881 + (-1.0))) + 1.0;
    float _1896 = (exp2(log2(1.0 - (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1897 = 1.0 - _1857;
    float _1908 = (0.5 / (((_1872 * ((_1871 * _1897) + _1857)) + 9.9999999392252902907785028219223e-09) + (((_1872 * _1897) + _1857) * _1871))) * _1871;
    float _4080 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _1910 = (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_1881 / ((_1885 * _1885) * 3.141590118408203125));
    uint _1924 = _1703 + 9u;
    float _1935 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1744].w)) * _453) * 0.949999988079071044921875);
    float _1936 = _1935 * _1935;
    float _1937 = cbLight._m0[_1744].x + _530;
    float _1938 = cbLight._m0[_1744].y + _531;
    float _1939 = cbLight._m0[_1744].z + _532;
    float _1943 = inversesqrt(dot(vec3(_1937, _1938, _1939), vec3(_1937, _1938, _1939)));
    float _1944 = _1943 * _1937;
    float _1945 = _1943 * _1938;
    float _1946 = _1943 * _1939;
    float _1947 = dot(vec3(_450, _451, _452), vec3(cbLight._m0[_1744].xyz));
    float _4091 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _1950 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _1951 = dot(vec3(_450, _451, _452), vec3(_1944, _1945, _1946));
    float _4102 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _1954 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _1955 = dot(vec3(cbLight._m0[_1744].xyz), vec3(_1944, _1945, _1946));
    float _4113 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _1959 = _1936 * _1936;
    float _1963 = ((_1954 * _1954) * (_1959 + (-1.0))) + 1.0;
    float _1972 = (exp2(log2(1.0 - (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1973 = 1.0 - _1936;
    float _1983 = (0.5 / (((_1872 * ((_1950 * _1973) + _1936)) + 9.9999999392252902907785028219223e-09) + (((_1872 * _1973) + _1936) * _1950))) * _1950;
    float _4124 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _1985 = (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_1959 / ((_1963 * _1963) * 3.141590118408203125));
    float _1995 = (((_1972 * cbLight._m0[_1924].x) * _1985) * _1726) + ((((cbLight._m0[_1843].x * _1695) * _1896) * _1910) * _1740);
    float _1996 = (((_1972 * cbLight._m0[_1924].y) * _1985) * _1726) + ((((cbLight._m0[_1843].y * _1696) * _1896) * _1910) * _1740);
    float _1997 = (((_1972 * cbLight._m0[_1924].z) * _1985) * _1726) + ((((cbLight._m0[_1843].z * _1697) * _1896) * _1910) * _1740);
    float _2059;
    float _2061;
    float _2063;
    if (_1780)
    {
        _2059 = _1995;
        _2061 = _1996;
        _2063 = _1997;
    }
    else
    {
        uint _2065 = _1703 + 2u;
        uint _2069 = _1703 + 10u;
        float _2083 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2065].w)) * _453) * 0.949999988079071044921875);
        float _2084 = _2083 * _2083;
        float _2085 = cbLight._m0[_2065].x + _530;
        float _2086 = cbLight._m0[_2065].y + _531;
        float _2087 = cbLight._m0[_2065].z + _532;
        float _2091 = inversesqrt(dot(vec3(_2085, _2086, _2087), vec3(_2085, _2086, _2087)));
        float _2092 = _2091 * _2085;
        float _2093 = _2091 * _2086;
        float _2094 = _2091 * _2087;
        float _2095 = dot(vec3(_450, _451, _452), vec3(cbLight._m0[_2065].xyz));
        float _4135 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
        float _2098 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _2099 = dot(vec3(_450, _451, _452), vec3(_2092, _2093, _2094));
        float _4146 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2102 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _2103 = dot(vec3(cbLight._m0[_2065].xyz), vec3(_2092, _2093, _2094));
        float _4157 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2107 = _2084 * _2084;
        float _2111 = ((_2102 * _2102) * (_2107 + (-1.0))) + 1.0;
        float _2120 = (exp2(log2(1.0 - (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2121 = 1.0 - _2084;
        float _2131 = (0.5 / (((_1872 * ((_2098 * _2121) + _2084)) + 9.9999999392252902907785028219223e-09) + (((_1872 * _2121) + _2084) * _2098))) * _2098;
        float _4168 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
        float _2133 = (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (_2107 / ((_2111 * _2111) * 3.141590118408203125));
        float _2134 = isnan(1.0) ? _1718 : (isnan(_1718) ? 1.0 : min(_1718, 1.0));
        _2059 = (((_2120 * cbLight._m0[_2069].x) * _2133) * _2134) + _1995;
        _2061 = (((_2120 * cbLight._m0[_2069].y) * _2133) * _2134) + _1996;
        _2063 = (((_2120 * cbLight._m0[_2069].z) * _2133) * _2134) + _1997;
    }
    float _2169;
    float _2171;
    float _2173;
    if (_1798)
    {
        _2169 = _2059;
        _2171 = _2061;
        _2173 = _2063;
    }
    else
    {
        uint _2180 = _1703 + 3u;
        uint _2184 = _1703 + 11u;
        float _2198 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2180].w)) * _453) * 0.949999988079071044921875);
        float _2199 = _2198 * _2198;
        float _2200 = cbLight._m0[_2180].x + _530;
        float _2201 = cbLight._m0[_2180].y + _531;
        float _2202 = cbLight._m0[_2180].z + _532;
        float _2206 = inversesqrt(dot(vec3(_2200, _2201, _2202), vec3(_2200, _2201, _2202)));
        float _2207 = _2206 * _2200;
        float _2208 = _2206 * _2201;
        float _2209 = _2206 * _2202;
        float _2210 = dot(vec3(_450, _451, _452), vec3(cbLight._m0[_2180].xyz));
        float _4184 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
        float _2213 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _2214 = dot(vec3(_450, _451, _452), vec3(_2207, _2208, _2209));
        float _4195 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
        float _2217 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _2218 = dot(vec3(cbLight._m0[_2180].xyz), vec3(_2207, _2208, _2209));
        float _4206 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        float _2222 = _2199 * _2199;
        float _2226 = ((_2217 * _2217) * (_2222 + (-1.0))) + 1.0;
        float _2235 = (exp2(log2(1.0 - (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2236 = 1.0 - _2199;
        float _2246 = (0.5 / (((_1872 * ((_2213 * _2236) + _2199)) + 9.9999999392252902907785028219223e-09) + (((_1872 * _2236) + _2199) * _2213))) * _2213;
        float _4217 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2248 = (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_2222 / ((_2226 * _2226) * 3.141590118408203125));
        float _2249 = isnan(1.0) ? _1719 : (isnan(_1719) ? 1.0 : min(_1719, 1.0));
        _2169 = (((_2235 * cbLight._m0[_2184].x) * _2248) * _2249) + _2059;
        _2171 = (((_2235 * cbLight._m0[_2184].y) * _2248) * _2249) + _2061;
        _2173 = (((_2235 * cbLight._m0[_2184].z) * _2248) * _2249) + _2063;
    }
    float _2384;
    float _2386;
    float _2388;
    float _2390;
    float _2392;
    float _2394;
    if (_1701.y == 0u)
    {
        float _2324 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2325 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2324;
        float _2326 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2324;
        float _2327 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2324;
        uvec4 _2339 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2340 = _2339.x;
        uint _2351 = uint((float(_2339.y) * floor(float(uint(cbSceneParam._m0[85u].y * _552) / _2340))) + floor(float(uint(cbSceneParam._m0[85u].x * _551) / _2340)));
        float _2361 = (log2(_2327 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2362 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        uint _2365 = uint(isnan(14.0) ? _2362 : (isnan(_2362) ? 14.0 : min(_2362, 14.0)));
        uvec4 _2370 = texelFetch(g_lightClusterGridBuffer, int(((_2365 << 2u) + (_2351 << 6u)) >> 2u));
        uint _2371 = _2370.x;
        uint _2372 = _2339.z;
        float _2507;
        float _2509;
        float _2511;
        float _2513;
        float _2515;
        float _2517;
        if (((((1u << ((_2372 >> 4u) & 15u)) + 4294967295u) & _2371) == 0u) || ((_2372 & 240u) == 0u))
        {
            _2507 = 0.0;
            _2509 = 0.0;
            _2511 = 0.0;
            _2513 = 0.0;
            _2515 = 0.0;
            _2517 = 0.0;
        }
        else
        {
            float _2508;
            float _2510;
            float _2512;
            float _2514;
            float _2516;
            float _2518;
            float _2669 = 0.0;
            float _2670 = 0.0;
            float _2671 = 0.0;
            float _2672 = 0.0;
            float _2673 = 0.0;
            float _2674 = 0.0;
            uint _2675 = 0u;
            uint _2684;
            bool _2685;
            for (;;)
            {
                _2684 = texelFetch(g_lightClassification, int((((_2365 << 5u) + (_2351 << 9u)) + (_2675 << 2u)) >> 2u)).x;
                _2685 = _2684 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2685)
                {
                    frontier_phi_66_pred = _2669;
                    frontier_phi_66_pred_1 = _2674;
                    frontier_phi_66_pred_2 = _2673;
                    frontier_phi_66_pred_3 = _2672;
                    frontier_phi_66_pred_4 = _2671;
                    frontier_phi_66_pred_5 = _2670;
                }
                else
                {
                    float _2814;
                    float _2815;
                    float _2816;
                    float _2817;
                    float _2818;
                    float _2819;
                    uint _2820;
                    _2814 = _2669;
                    _2815 = _2670;
                    _2816 = _2671;
                    _2817 = _2672;
                    _2818 = _2673;
                    _2819 = _2674;
                    _2820 = _2684;
                    float _2741;
                    float _2742;
                    float _2743;
                    float _2744;
                    float _2745;
                    float _2746;
                    for (;;)
                    {
                        uint _2824 = uint(findLSB(_2820)) + (_2675 << 5u);
                        uint _2821 = (_2820 + 4294967295u) & _2820;
                        uint _2826 = _2824 * 48u;
                        vec4 _2840 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2826)).x, texelFetch(g_PointLightRenderingBuffer, int(_2826 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2826 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2826 + 3u)).x));
                        uint _2846 = (_2824 * 48u) + 4u;
                        vec4 _2859 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2846)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 3u)).x));
                        uint _2865 = (_2824 * 48u) + 8u;
                        vec3 _2876 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2865)).x, texelFetch(g_PointLightRenderingBuffer, int(_2865 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2865 + 2u)).x));
                        float _2880 = _2840.x - _2325;
                        float _2881 = _2840.y - _2326;
                        float _2882 = _2840.z - _2327;
                        float _2883 = dot(vec3(_2880, _2881, _2882), vec3(_2880, _2881, _2882));
                        float _2886 = inversesqrt(_2883);
                        float _2887 = _2886 * _2880;
                        float _2888 = _2886 * _2881;
                        float _2889 = _2886 * _2882;
                        float _2890 = dot(vec3(_572, _575, _578), vec3(_2887, _2888, _2889));
                        float _2895 = 1.0 - (_2883 * _2840.w);
                        float _4243 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
                        float _2896 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
                        float _2897 = sqrt(_2883) * _2859.w;
                        float _2900 = 1.39999997615814208984375 / (_2897 + 1.39999997615814208984375);
                        float _2901 = _2900 * _2900;
                        float _2904 = ((1.0 - _2901) * _2890) + _2901;
                        float _2907 = _2897 * _2897;
                        float _2911 = ((isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0))) * _2896) / ((_2907 * 0.699999988079071044921875) + 1.0);
                        float _2915 = (-0.0) - _2325;
                        float _2916 = (-0.0) - _2326;
                        float _2917 = (-0.0) - _2327;
                        float _2921 = inversesqrt(dot(vec3(_2915, _2916, _2917), vec3(_2915, _2916, _2917)));
                        float _2922 = _2921 * _2915;
                        float _2923 = _2921 * _2916;
                        float _2924 = _2921 * _2917;
                        float _2932 = exp2(log2(1.0 / ((_2907 * 3.5) + 5.0)) * 0.25);
                        float _2933 = 1.0 - _632;
                        float _2940 = sqrt(1.0 - ((1.0 - (_2933 * _2933)) * (1.0 - (_2932 * _2932))));
                        float _2941 = _2940 * _2940;
                        float _2942 = _2941 * _2941;
                        float _2943 = _2922 + _2887;
                        float _2944 = _2923 + _2888;
                        float _2945 = _2924 + _2889;
                        float _2949 = inversesqrt(dot(vec3(_2943, _2944, _2945), vec3(_2943, _2944, _2945)));
                        float _2953 = dot(vec3(_572, _575, _578), vec3(_2922, _2923, _2924));
                        float _4259 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
                        float _2956 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
                        float _2957 = dot(vec3(_572, _575, _578), vec3(_2949 * _2943, _2949 * _2944, _2949 * _2945));
                        float _4270 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
                        float _2960 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
                        float _2964 = ((_2960 * _2960) * (_2942 + (-1.0))) + 1.0;
                        float _2965 = _2900 * _2941;
                        float _2966 = _2965 * _2965;
                        float _2969 = ((1.0 - _2966) * _2890) + _2966;
                        float _4281 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
                        float _2970 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
                        float _2971 = 1.0 - _2941;
                        float _2981 = (0.5 / (((_2970 * ((_2956 * _2971) + _2941)) + 9.9999999392252902907785028219223e-09) + (((_2970 * _2971) + _2941) * _2956))) * _2970;
                        float _4292 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
                        float _2992 = (((_2942 * 3.1415927410125732421875) * (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0)))) / ((_2964 * _2964) * ((_2907 * 2.1991131305694580078125) + 3.141590118408203125))) * _2896;
                        _2744 = (_2911 * _2859.x) + _2817;
                        _2745 = (_2911 * _2859.y) + _2818;
                        _2746 = (_2911 * _2859.z) + _2819;
                        _2741 = (_2992 * _2876.x) + _2814;
                        _2742 = (_2992 * _2876.y) + _2815;
                        _2743 = (_2992 * _2876.z) + _2816;
                        if (_2821 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2814 = _2741;
                            _2815 = _2742;
                            _2816 = _2743;
                            _2817 = _2744;
                            _2818 = _2745;
                            _2819 = _2746;
                            _2820 = _2821;
                        }
                    }
                    frontier_phi_66_pred = _2741;
                    frontier_phi_66_pred_1 = _2746;
                    frontier_phi_66_pred_2 = _2745;
                    frontier_phi_66_pred_3 = _2744;
                    frontier_phi_66_pred_4 = _2743;
                    frontier_phi_66_pred_5 = _2742;
                }
                _2508 = frontier_phi_66_pred;
                _2518 = frontier_phi_66_pred_1;
                _2516 = frontier_phi_66_pred_2;
                _2514 = frontier_phi_66_pred_3;
                _2512 = frontier_phi_66_pred_4;
                _2510 = frontier_phi_66_pred_5;
                uint _2676 = _2675 + 1u;
                if (_2676 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2669 = _2508;
                    _2670 = _2510;
                    _2671 = _2512;
                    _2672 = _2514;
                    _2673 = _2516;
                    _2674 = _2518;
                    _2675 = _2676;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2507 = _2508;
            _2509 = _2510;
            _2511 = _2512;
            _2513 = _2514;
            _2515 = _2516;
            _2517 = _2518;
        }
        uvec4 _2521 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2522 = _2521.z;
        uint _2524 = (_2522 >> 8u) & 15u;
        float _2637;
        float _2639;
        float _2641;
        float _2643;
        float _2645;
        float _2647;
        if (((4294967295u << _2524) & _2371) == 0u)
        {
            _2637 = _2507;
            _2639 = _2509;
            _2641 = _2511;
            _2643 = _2513;
            _2645 = _2515;
            _2647 = _2517;
        }
        else
        {
            float _2662 = inversesqrt(dot(vec3(_2325, _2326, _2327), vec3(_2325, _2326, _2327)));
            float _2663 = _2662 * _2325;
            float _2664 = _2662 * _2326;
            float _2665 = _2662 * _2327;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2524 < ((_2522 >> 12u) & 15u))
            {
                float _2638;
                float _2640;
                float _2642;
                float _2644;
                float _2646;
                float _2648;
                float _2797 = _2507;
                float _2798 = _2509;
                float _2799 = _2511;
                float _2800 = _2513;
                float _2801 = _2515;
                float _2802 = _2517;
                uint _2803 = _2524;
                uint _2812;
                bool _2813;
                for (;;)
                {
                    _2812 = texelFetch(g_lightClassification, int((((_2365 << 5u) + (_2351 << 9u)) + (_2803 << 2u)) >> 2u)).x;
                    _2813 = _2812 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2813)
                    {
                        frontier_phi_77_pred = _2802;
                        frontier_phi_77_pred_1 = _2801;
                        frontier_phi_77_pred_2 = _2800;
                        frontier_phi_77_pred_3 = _2799;
                        frontier_phi_77_pred_4 = _2798;
                        frontier_phi_77_pred_5 = _2797;
                    }
                    else
                    {
                        float _3006;
                        float _3007;
                        float _3008;
                        float _3009;
                        float _3010;
                        float _3011;
                        float _3301;
                        float _3302;
                        float _3303;
                        float _3304;
                        float _3305;
                        float _3306;
                        float _3019 = _2797;
                        float _3020 = _2798;
                        float _3021 = _2799;
                        float _3022 = _2800;
                        float _3023 = _2801;
                        float _3024 = _2802;
                        uint _3025 = _2812;
                        uint _3026;
                        vec4 _3051;
                        float _3052;
                        vec4 _3067;
                        vec3 _3079;
                        vec4 _3094;
                        vec4 _3110;
                        float _3157;
                        bool _3158;
                        for (;;)
                        {
                            uint _3036 = ((_2803 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3025));
                            _3026 = (_3025 + 4294967295u) & _3025;
                            uint _3038 = _3036 * 40u;
                            _3051 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3038)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 3u)).x));
                            _3052 = _3051.w;
                            uint _3054 = (_3036 * 40u) + 4u;
                            _3067 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3054)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 3u)).x));
                            uint _3069 = (_3036 * 40u) + 8u;
                            _3079 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3069)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 2u)).x));
                            uint _3081 = (_3036 * 40u) + 16u;
                            _3094 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3081)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 3u)).x));
                            uint _3097 = (_3036 * 40u) + 20u;
                            _3110 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3097)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 3u)).x));
                            uint _3113 = (_3036 * 40u) + 24u;
                            vec4 _3126 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3113)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 3u)).x));
                            uint _3132 = (_3036 * 40u) + 28u;
                            vec4 _3145 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3132)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 3u)).x));
                            _3157 = fma(_2327, _3145.z, fma(_2326, _3145.y, _3145.x * _2325)) + _3145.w;
                            _3158 = !((fma(_2327, _3126.z, fma(_2326, _3126.y, _3126.x * _2325)) + _3126.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3158)
                            {
                                float _3185 = _3051.x - _2325;
                                float _3186 = _3051.y - _2326;
                                float _3187 = _3051.z - _2327;
                                float _3188 = dot(vec3(_3185, _3186, _3187), vec3(_3185, _3186, _3187));
                                float _3191 = inversesqrt(_3188);
                                float _3192 = _3191 * _3185;
                                float _3193 = _3191 * _3186;
                                float _3194 = _3191 * _3187;
                                float _3198 = 1.0 - (_3188 / (_3052 * _3052));
                                float _4303 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                                float _3199 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
                                float _3203 = sqrt(_3188) * _3067.w;
                                float _3205 = 1.39999997615814208984375 / (_3203 + 1.39999997615814208984375);
                                float _3206 = _3205 * _3205;
                                float _3209 = ((1.0 - _3206) * dot(vec3(_3192, _3193, _3194), vec3(_572, _575, _578))) + _3206;
                                float _3212 = _3203 * _3203;
                                float _3216 = (fma(_2327, _3094.z, fma(_2326, _3094.y, _3094.x * _2325)) + _3094.w) / _3157;
                                float _3217 = (fma(_2327, _3110.z, fma(_2326, _3110.y, _3110.x * _2325)) + _3110.w) / _3157;
                                float _3221 = 1.0 - dot(vec2(_3216, _3217), vec2(_3216, _3217));
                                float _4319 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                                float _3222 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                                float _3223 = _3222 * (((isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0))) * _3199) / ((_3212 * 0.699999988079071044921875) + 1.0));
                                float _3235 = exp2(log2(1.0 / ((_3212 * 3.5) + 5.0)) * 0.25);
                                float _3236 = 1.0 - _632;
                                float _3243 = sqrt(1.0 - ((1.0 - (_3236 * _3236)) * (1.0 - (_3235 * _3235))));
                                float _3244 = _3243 * _3243;
                                float _3245 = _3244 * _3244;
                                float _3246 = _3192 - _2663;
                                float _3247 = _3193 - _2664;
                                float _3248 = _3194 - _2665;
                                float _3252 = inversesqrt(dot(vec3(_3246, _3247, _3248), vec3(_3246, _3247, _3248)));
                                float _3256 = dot(vec3(_572, _575, _578), vec3((-0.0) - _2663, (-0.0) - _2664, (-0.0) - _2665));
                                float _4330 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                                float _3259 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
                                float _3260 = dot(vec3(_572, _575, _578), vec3(_3252 * _3246, _3252 * _3247, _3252 * _3248));
                                float _4341 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                                float _3263 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
                                float _3267 = ((_3263 * _3263) * (_3245 + (-1.0))) + 1.0;
                                float _3268 = _3205 * _3244;
                                float _3269 = _3268 * _3268;
                                float _3275 = ((1.0 - _3269) * dot(vec3(_572, _575, _578), vec3(_3192, _3193, _3194))) + _3269;
                                float _4352 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                                float _3276 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
                                float _3277 = 1.0 - _3244;
                                float _3287 = (0.5 / (((_3276 * ((_3259 * _3277) + _3244)) + 9.9999999392252902907785028219223e-09) + (((_3276 * _3277) + _3244) * _3259))) * _3276;
                                float _4363 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                                float _3297 = (_3222 * _3199) * (((_3245 * 3.1415927410125732421875) * (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0)))) / ((_3267 * _3267) * ((_3212 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3223 * _3067.y;
                                frontier_phi_83_pred_1 = _3223 * _3067.x;
                                frontier_phi_83_pred_2 = _3297 * _3079.z;
                                frontier_phi_83_pred_3 = _3297 * _3079.y;
                                frontier_phi_83_pred_4 = _3297 * _3079.x;
                                frontier_phi_83_pred_5 = _3223 * _3067.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3305 = frontier_phi_83_pred;
                            _3304 = frontier_phi_83_pred_1;
                            _3303 = frontier_phi_83_pred_2;
                            _3302 = frontier_phi_83_pred_3;
                            _3301 = frontier_phi_83_pred_4;
                            _3306 = frontier_phi_83_pred_5;
                            _3009 = _3304 + _3022;
                            _3010 = _3305 + _3023;
                            _3011 = _3306 + _3024;
                            _3006 = _3301 + _3019;
                            _3007 = _3302 + _3020;
                            _3008 = _3303 + _3021;
                            if (_3026 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3019 = _3006;
                                _3020 = _3007;
                                _3021 = _3008;
                                _3022 = _3009;
                                _3023 = _3010;
                                _3024 = _3011;
                                _3025 = _3026;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3011;
                        frontier_phi_77_pred_1 = _3010;
                        frontier_phi_77_pred_2 = _3009;
                        frontier_phi_77_pred_3 = _3008;
                        frontier_phi_77_pred_4 = _3007;
                        frontier_phi_77_pred_5 = _3006;
                    }
                    _2648 = frontier_phi_77_pred;
                    _2646 = frontier_phi_77_pred_1;
                    _2644 = frontier_phi_77_pred_2;
                    _2642 = frontier_phi_77_pred_3;
                    _2640 = frontier_phi_77_pred_4;
                    _2638 = frontier_phi_77_pred_5;
                    uint _2804 = _2803 + 1u;
                    if (_2804 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2797 = _2638;
                        _2798 = _2640;
                        _2799 = _2642;
                        _2800 = _2644;
                        _2801 = _2646;
                        _2802 = _2648;
                        _2803 = _2804;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2642;
                frontier_phi_58_59_ladder_1 = _2648;
                frontier_phi_58_59_ladder_2 = _2646;
                frontier_phi_58_59_ladder_3 = _2644;
                frontier_phi_58_59_ladder_4 = _2640;
                frontier_phi_58_59_ladder_5 = _2638;
            }
            else
            {
                frontier_phi_58_59_ladder = _2511;
                frontier_phi_58_59_ladder_1 = _2517;
                frontier_phi_58_59_ladder_2 = _2515;
                frontier_phi_58_59_ladder_3 = _2513;
                frontier_phi_58_59_ladder_4 = _2509;
                frontier_phi_58_59_ladder_5 = _2507;
            }
            _2637 = frontier_phi_58_59_ladder_5;
            _2639 = frontier_phi_58_59_ladder_4;
            _2641 = frontier_phi_58_59_ladder;
            _2643 = frontier_phi_58_59_ladder_3;
            _2645 = frontier_phi_58_59_ladder_2;
            _2647 = frontier_phi_58_59_ladder_1;
        }
        float _2652 = isnan(1.0) ? _616 : (isnan(_616) ? 1.0 : min(_616, 1.0));
        _2384 = (_2652 * _2643) + _1836;
        _2386 = (_2652 * _2645) + _1838;
        _2388 = (_2652 * _2647) + _1840;
        _2390 = ((_2637 * 0.039999999105930328369140625) * _2652) + _2169;
        _2392 = ((_2639 * 0.039999999105930328369140625) * _2652) + _2171;
        _2394 = ((_2641 * 0.039999999105930328369140625) * _2652) + _2173;
    }
    else
    {
        _2384 = _1836;
        _2386 = _1838;
        _2388 = _1840;
        _2390 = _2169;
        _2392 = _2171;
        _2394 = _2173;
    }
    uint _2400 = _592 + uint(cbMatDynParam._m0[0u].w);
    float _2408 = ((_293 * cbMtdParam._m0[11u].x) * (_381.x + _366.x)) * cbInstanceData._m0[_2400].x;
    float _2411 = ((_293 * cbMtdParam._m0[11u].y) * (_381.y + _366.y)) * cbInstanceData._m0[_2400].y;
    float _2414 = ((_293 * cbMtdParam._m0[11u].z) * (_381.z + _366.z)) * cbInstanceData._m0[_2400].z;
    float _4379 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _4390 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _4401 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _2431 = (((isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * (_2384 + ((isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0))) * _616))) + ((_2390 + ((isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))) * _1454)) * cbPerFrame._m0[3u].x)) + _2408;
    float _2433 = (_2411 + ((_2392 + ((isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))) * _1454)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * (_2386 + ((isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0))) * _616)));
    float _2435 = (_2414 + ((_2394 + ((isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))) * _1454)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (_2388 + ((isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0))) * _616)));
    float _2436 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
    float _2437 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    float _2438 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
    float _2444 = cbMtdParam._m0[2u].x * _2408;
    float _2445 = cbMtdParam._m0[2u].y * _2411;
    float _2446 = cbMtdParam._m0[2u].z * _2414;
    float _4427 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2448 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
    uint _2449 = _591 + 6u;
    float _2457 = _551 / cbSceneParam._m0[86u].x;
    float _2458 = _552 / cbSceneParam._m0[86u].y;
    vec4 _2472 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2457, _2458, (log2((isnan(cbSceneParam._m0[77u].w) ? _472 : (isnan(_472) ? cbSceneParam._m0[77u].w : min(_472, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2474 = _2472.x;
    float _2475 = _2472.y;
    float _2476 = _2472.z;
    float _2477 = _2472.w;
    float _2570;
    float _2572;
    float _2574;
    float _2576;
    if (_472 > cbSceneParam._m0[78u].w)
    {
        float _2532 = isnan(_472) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _472 : min(cbSceneParam._m0[80u].w, _472));
        float _2533 = _2532 / _472;
        float _2544 = _2533 * _523;
        float _2545 = _524 * _2533;
        float _2546 = (-0.0) - _2545;
        float _2548 = _2533 * _525;
        float _2550 = (cbSceneParam._m0[77u].w * _2546) / _2532;
        float _2551 = _2550 + cbSceneParam._m0[79u].w;
        float _2552 = cbSceneParam._m0[79u].w - _2545;
        float _2558 = sqrt(((_2544 * _2544) + (_2545 * _2545)) + (_2548 * _2548));
        float _2561 = (1.0 - (cbSceneParam._m0[77u].w / _2532)) * _2558;
        float _2566 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2568 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2754;
        if (abs((_2546 - _2550) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2754 = ((((_2551 > 0.0) ? exp2(_2566 * _2551) : (2.0 - exp2(_2568 * _2551))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2561;
        }
        else
        {
            float _2698 = 1.0 / cbSceneParam._m0[80u].x;
            float _2699 = isnan(_2552) ? _2551 : (isnan(_2551) ? _2552 : max(_2551, _2552));
            float _2700 = isnan(_2552) ? _2551 : (isnan(_2551) ? _2552 : min(_2551, _2552));
            float _2709 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : min(_2699, 0.0));
            float _2710 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : min(_2700, 0.0));
            _2754 = ((abs(_2558 / _2546) * cbSceneParam._m0[80u].y) * ((((_2709 - _2710) * 2.0) - ((exp2(_2566 * (isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0)))) - exp2(_2566 * (isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0))))) * _2698)) - ((exp2(_2568 * _2709) - exp2(_2568 * _2710)) * _2698))) + (_2561 * cbSceneParam._m0[80u].z);
        }
        vec4 _2756 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2457, _2458, 1.0), 0.0);
        float _2765 = exp2((_2754 * (-1.44269502162933349609375)) * (1.0 - _2756.w));
        float _2766 = log2(_2765);
        float _2782 = log2(_2477);
        _2570 = (exp2(_2782 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2766 * cbSceneParam._m0[78u].x)) * _2756.x) / cbSceneParam._m0[78u].x)) + _2474;
        _2572 = (exp2(_2782 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2766 * cbSceneParam._m0[78u].y)) * _2756.y) / cbSceneParam._m0[78u].y)) + _2475;
        _2574 = (exp2(_2782 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2766 * cbSceneParam._m0[78u].z)) * _2756.z) / cbSceneParam._m0[78u].z)) + _2476;
        _2576 = _2765 * _2477;
    }
    else
    {
        _2570 = _2474;
        _2572 = _2475;
        _2574 = _2476;
        _2576 = _2477;
    }
    bool _2792;
    vec4 _2586;
    vec4 _2608;
    float _2610;
    float _2614;
    float _2615;
    float _2616;
    float _2619;
    float _2622;
    float _2625;
    float _2626;
    bool _2636;
    for (;;)
    {
        _2586 = cbMatDynParam._m0[0u];
        float _2588 = roundEven(_2586.y);
        bool _2589 = _2588 == 3.0;
        float _2590 = log2(_2576);
        float _2594 = exp2(_2590 * cbSceneParam._m0[78u].x);
        float _2595 = exp2(_2590 * cbSceneParam._m0[78u].y);
        float _2596 = exp2(_2590 * cbSceneParam._m0[78u].z);
        float _2597 = _2594 * _2436;
        float _2598 = _2595 * _2437;
        float _2599 = _2596 * _2438;
        float _2606 = _539 + (-0.5);
        _2608 = cbMtdParam._m0[1u];
        _2610 = _2608.y * _2606;
        float _2613 = (_2588 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2614 = _2613 * (_2589 ? _2597 : (_2597 + (cbSceneParam._m0[72u].w * _2570)));
        _2615 = _2613 * (_2589 ? _2598 : (_2598 + (cbSceneParam._m0[72u].w * _2572)));
        _2616 = _2613 * (_2589 ? _2599 : (_2599 + (cbSceneParam._m0[72u].w * _2574)));
        _2619 = ((_2444 * _2448) * _2594) * _2613;
        _2622 = ((_2445 * _2448) * _2595) * _2613;
        _2625 = ((_2446 * _2448) * _2596) * _2613;
        _2626 = _2606 * 0.999000012874603271484375;
        _2636 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2636)
        {
            if ((cbInstanceData._m0[_591 + 7u].x + _2626) < 0.5)
            {
                _2792 = true;
                break;
            }
        }
        uint _2733 = _592 + uint(_2586.w);
        if ((cbInstanceData._m0[_2733].w < 1.0) && ((cbInstanceData._m0[_2733].w + _2626) < 0.5))
        {
            _2792 = true;
            break;
        }
        if ((_2610 + 1.0) < _2608.x)
        {
            _2792 = true;
            break;
        }
        _2792 = false;
        break;
    }
    float _2997;
    if (_2792)
    {
        discard_state = true;
        _2997 = 0.0;
    }
    else
    {
        _2997 = cbInstanceData._m0[_2449].w;
    }
    SV_Target.x = _2614;
    SV_Target.y = _2615;
    SV_Target.z = _2616;
    SV_Target.w = _2997;
    SV_Target_1.x = _2619;
    SV_Target_1.y = _2622;
    SV_Target_1.z = _2625;
    SV_Target_1.w = cbInstanceData._m0[_2449].w;
    discard_exit();
}


