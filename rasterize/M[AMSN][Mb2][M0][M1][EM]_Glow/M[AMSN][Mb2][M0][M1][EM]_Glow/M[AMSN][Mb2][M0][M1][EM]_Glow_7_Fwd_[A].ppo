#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _967;
float _3397;
float _3398;
float _3399;
float _3400;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _191 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _192 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _193 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_191, _192, _193), vec3(_191, _192, _193)));
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _235 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _241 = _235.x * cbMtdParam._m0[9u].x;
    float _242 = _235.y * cbMtdParam._m0[9u].y;
    float _243 = _235.z * cbMtdParam._m0[9u].z;
    vec4 _263 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _278 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _280 = _278.x;
    vec4 _292 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _296 = _292.z;
    float _300 = (_292.x * 2.0) + (-1.0);
    float _302 = (_292.y * 2.0) + (-1.0);
    float _303 = dot(vec2(_300, _302), vec2(_300, _302));
    float _3409 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _309 = sqrt(1.0 - (isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0))));
    vec4 _337 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _352 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _367 = (TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_263.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].x + 1.0);
    float _3420 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _368 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
    float _371 = fma(_309, _206 * NORMAL.x, fma(_302, _213 * TANGENT.x, (_199 * _191) * _300));
    float _374 = fma(_309, _206 * NORMAL.y, fma(_302, _213 * TANGENT.y, (_199 * _192) * _300));
    float _377 = fma(_309, _206 * NORMAL.z, fma(_302, _213 * TANGENT.z, (_199 * _193) * _300));
    float _381 = inversesqrt(dot(vec3(_371, _374, _377), vec3(_371, _374, _377)));
    float _382 = _381 * _371;
    float _383 = _381 * _374;
    float _384 = _381 * _377;
    float _3431 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _385 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
    float _3442 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3453 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3464 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3475 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _389 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
    float _405 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _446 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _456 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _446);
    float _457 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _446);
    float _458 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _446);
    float _462 = inversesqrt(dot(vec3(_456, _457, _458), vec3(_456, _457, _458)));
    float _463 = _456 * _462;
    float _464 = _457 * _462;
    float _465 = _458 * _462;
    vec4 _470 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _472 = _470.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _647 = sqrt(((_456 * _456) + (_457 * _457)) + (_458 * _458));
        float _653 = (cbMatDynParam._m0[5u].x * _647) + cbMatDynParam._m0[5u].y;
        float _3486 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
        float _654 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _658 = (cbMatDynParam._m0[5u].z * _647) + cbMatDynParam._m0[5u].w;
        float _3497 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0))) - _654)) + _654) < ((_472 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _483 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _484 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _504 = fma(_384, cbSceneParam._m0[5u].z, fma(_383, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _382));
    float _507 = fma(_384, cbSceneParam._m0[6u].z, fma(_383, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _382));
    float _510 = fma(_384, cbSceneParam._m0[7u].z, fma(_383, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _382));
    uint _523 = uint(roundEven(NORMAL.w)) * 13u;
    uint _525 = _523 + 9u;
    uint _526 = _525 + uint(cbMatDynParam._m0[0u].w);
    float _532 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0)))) * cbInstanceData._m0[_526].x;
    float _533 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0)))) * cbInstanceData._m0[_526].y;
    float _534 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0)))) * cbInstanceData._m0[_526].z;
    float _3508 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _535 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
    float _3519 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _536 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
    float _3530 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _537 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
    float _538 = 1.0 - _389;
    float _539 = _535 * _538;
    float _540 = _536 * _538;
    float _541 = _537 * _538;
    float _546 = (_535 + (-0.039999999105930328369140625)) * _389;
    float _547 = (_536 + (-0.039999999105930328369140625)) * _389;
    float _548 = (_537 + (-0.039999999105930328369140625)) * _389;
    float _549 = _546 + 0.039999999105930328369140625;
    float _551 = _547 + 0.039999999105930328369140625;
    float _552 = _548 + 0.039999999105930328369140625;
    vec4 _561 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _483, cbSceneParam._m0[86u].y * _484));
    float _564 = _561.x * TEXCOORD_3.w;
    float _565 = dot(vec3(_382, _383, _384), vec3(_463, _464, _465));
    float _568 = _565 * 2.0;
    float _572 = (_568 * _382) - _463;
    float _573 = (_568 * _383) - _464;
    float _574 = (_568 * _384) - _465;
    float _578 = abs(dot(vec3(_463, _464, _465), vec3(_382, _383, _384)));
    float _3541 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _580 = sqrt(_385);
    float _593 = exp2((_580 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_580 * 3.0));
    float _599 = (1.0 - _593) * ((_580 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _600 = _593 * _580;
    float _628 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _632 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _636 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _966;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _691 = fma(_636, cbModelParam._m0[26u].z, fma(_632, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _628));
        float _695 = fma(_636, cbModelParam._m0[27u].z, fma(_632, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _628));
        float _699 = fma(_636, cbModelParam._m0[28u].z, fma(_632, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _628));
        float _724 = _628 + _382;
        float _725 = _632 + _383;
        float _726 = _636 + _384;
        float _736 = fma(_726, cbModelParam._m0[26u].z, fma(_725, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _724)) - _691;
        float _737 = fma(_726, cbModelParam._m0[27u].z, fma(_725, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _724)) - _695;
        float _738 = fma(_726, cbModelParam._m0[28u].z, fma(_725, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _724)) - _699;
        float _742 = inversesqrt(dot(vec3(_736, _737, _738), vec3(_736, _737, _738)));
        float _755 = ((_742 * _736) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_691 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _756 = ((_742 * _737) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_695 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _757 = ((_742 * _738) / cbModelParam._m0[34u].z) + ((((((_699 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _760 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_755, _756, _757), 0.0);
        vec4 _767 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_755, _756, _757), 0.0);
        vec4 _774 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_755, _756, _757), 0.0);
        vec4 _781 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_755, _756, _757), 0.0);
        float _794 = exp2((_760.w + (-0.5)) * 20.0) * 2.0;
        float _795 = _794 * (_760.x + (-0.5));
        float _796 = _794 * (_760.y + (-0.5));
        float _797 = _794 * (_760.z + (-0.5));
        float _804 = exp2((_767.w + (-0.5)) * 20.0) * 2.0;
        float _805 = _804 * (_767.x + (-0.5));
        float _806 = _804 * (_767.y + (-0.5));
        float _807 = _804 * (_767.z + (-0.5));
        float _814 = exp2((_774.w + (-0.5)) * 20.0) * 2.0;
        float _815 = _814 * (_774.x + (-0.5));
        float _816 = _814 * (_774.y + (-0.5));
        float _817 = _814 * (_774.z + (-0.5));
        float _824 = exp2((_781.w + (-0.5)) * 20.0) * 2.0;
        float _825 = _824 * (_781.x + (-0.5));
        float _826 = _824 * (_781.y + (-0.5));
        float _827 = _824 * (_781.z + (-0.5));
        float _828 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _829 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _830 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _831 = _795 * 0.5;
        float _832 = _805 * 0.5;
        float _833 = _815 * 0.5;
        float _834 = dot(vec3(_831, _832, _833), vec3(_831, _832, _833));
        float _839 = (_834 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_834);
        float _848 = (dot(vec3(_382, _383, _384), vec3(_839 * _831, _839 * _832, _839 * _833)) + 1.0) * 0.5;
        float _3567 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _858 = sqrt(((_832 * _832) + (_831 * _831)) + (_833 * _833)) / (_828 + 9.9999997473787516355514526367188e-06);
        float _3578 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _859 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _860 = _859 * 2.0;
        float _864 = (1.0 - _859) / (_859 + 1.0);
        float _3589 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _865 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _874 = ((((1.0 - _865) * (_860 + 2.0)) * exp2(log2(isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0))) * (_860 + 1.0))) + _865) * _828;
        float _875 = _796 * 0.5;
        float _876 = _806 * 0.5;
        float _877 = _816 * 0.5;
        float _878 = dot(vec3(_875, _876, _877), vec3(_875, _876, _877));
        float _883 = (_878 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_878);
        float _891 = (dot(vec3(_382, _383, _384), vec3(_883 * _875, _883 * _876, _883 * _877)) + 1.0) * 0.5;
        float _3600 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _900 = sqrt(((_876 * _876) + (_875 * _875)) + (_877 * _877)) / (_829 + 9.9999997473787516355514526367188e-06);
        float _3611 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _901 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _902 = _901 * 2.0;
        float _906 = (1.0 - _901) / (_901 + 1.0);
        float _3622 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _907 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _916 = ((((1.0 - _907) * (_902 + 2.0)) * exp2(log2(isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * (_902 + 1.0))) + _907) * _829;
        float _917 = _797 * 0.5;
        float _918 = _807 * 0.5;
        float _919 = _817 * 0.5;
        float _920 = dot(vec3(_917, _918, _919), vec3(_917, _918, _919));
        float _925 = (_920 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_920);
        float _933 = (dot(vec3(_382, _383, _384), vec3(_925 * _917, _925 * _918, _925 * _919)) + 1.0) * 0.5;
        float _3633 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _942 = sqrt(((_918 * _918) + (_917 * _917)) + (_919 * _919)) / (_830 + 9.9999997473787516355514526367188e-06);
        float _3644 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _944 = _943 * 2.0;
        float _948 = (1.0 - _943) / (_943 + 1.0);
        float _3655 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _958 = ((((1.0 - _949) * (_944 + 2.0)) * exp2(log2(isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * (_944 + 1.0))) + _949) * _830;
        _966 = _797;
        _968 = _796;
        _969 = _795;
        _970 = _807;
        _971 = _806;
        _972 = _805;
        _973 = _817;
        _974 = _816;
        _975 = _815;
        _976 = _830;
        _977 = _829;
        _978 = _828;
        _979 = cbModelParam._m0[36u].z * (isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0)));
        _980 = cbModelParam._m0[36u].z * (isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0)));
        _981 = cbModelParam._m0[36u].z * (isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0)));
    }
    else
    {
        _966 = _967;
        _968 = _967;
        _969 = _967;
        _970 = _967;
        _971 = _967;
        _972 = _967;
        _973 = _967;
        _974 = _967;
        _975 = _967;
        _976 = _967;
        _977 = _967;
        _978 = _967;
        _979 = 0.0;
        _980 = 0.0;
        _981 = 0.0;
    }
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1010 = fma(_636, cbModelParam._m0[30u].z, fma(_632, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _628));
        float _1014 = fma(_636, cbModelParam._m0[31u].z, fma(_632, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _628));
        float _1018 = fma(_636, cbModelParam._m0[32u].z, fma(_632, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _628));
        float _1041 = _628 + _382;
        float _1042 = _632 + _383;
        float _1043 = _636 + _384;
        float _1053 = fma(_1043, cbModelParam._m0[30u].z, fma(_1042, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1041)) - _1010;
        float _1054 = fma(_1043, cbModelParam._m0[31u].z, fma(_1042, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1041)) - _1014;
        float _1055 = fma(_1043, cbModelParam._m0[32u].z, fma(_1042, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1041)) - _1018;
        float _1059 = inversesqrt(dot(vec3(_1053, _1054, _1055), vec3(_1053, _1054, _1055)));
        float _1072 = ((_1059 * _1053) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1010 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1073 = ((_1059 * _1054) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1014 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1074 = ((_1059 * _1055) / cbModelParam._m0[35u].z) + ((((((_1018 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        float _1109 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1076.x + (-0.5));
        float _1111 = _1109 * (_1076.y + (-0.5));
        float _1112 = _1109 * (_1076.z + (-0.5));
        float _1119 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1083.x + (-0.5));
        float _1121 = _1119 * (_1083.y + (-0.5));
        float _1122 = _1119 * (_1083.z + (-0.5));
        float _1129 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1090.x + (-0.5));
        float _1131 = _1129 * (_1090.y + (-0.5));
        float _1132 = _1129 * (_1090.z + (-0.5));
        float _1139 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1097.x + (-0.5));
        float _1141 = _1139 * (_1097.y + (-0.5));
        float _1142 = _1139 * (_1097.z + (-0.5));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = _1110 * 0.5;
        float _1147 = _1120 * 0.5;
        float _1148 = _1130 * 0.5;
        float _1149 = dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148));
        float _1154 = (_1149 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1149);
        float _1162 = (dot(vec3(_382, _383, _384), vec3(_1154 * _1146, _1154 * _1147, _1154 * _1148)) + 1.0) * 0.5;
        float _3696 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1171 = sqrt(((_1147 * _1147) + (_1146 * _1146)) + (_1148 * _1148)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _3707 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1173 = _1172 * 2.0;
        float _1177 = (1.0 - _1172) / (_1172 + 1.0);
        float _3718 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1187 = ((((1.0 - _1178) * (_1173 + 2.0)) * exp2(log2(isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * (_1173 + 1.0))) + _1178) * _1143;
        float _1188 = _1111 * 0.5;
        float _1189 = _1121 * 0.5;
        float _1190 = _1131 * 0.5;
        float _1191 = dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190));
        float _1196 = (_1191 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1191);
        float _1204 = (dot(vec3(_382, _383, _384), vec3(_1196 * _1188, _1196 * _1189, _1196 * _1190)) + 1.0) * 0.5;
        float _3729 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1213 = sqrt(((_1189 * _1189) + (_1188 * _1188)) + (_1190 * _1190)) / (_1144 + 9.9999997473787516355514526367188e-06);
        float _3740 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1215 = _1214 * 2.0;
        float _1219 = (1.0 - _1214) / (_1214 + 1.0);
        float _3751 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1229 = ((((1.0 - _1220) * (_1215 + 2.0)) * exp2(log2(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_1215 + 1.0))) + _1220) * _1144;
        float _1230 = _1112 * 0.5;
        float _1231 = _1122 * 0.5;
        float _1232 = _1132 * 0.5;
        float _1233 = dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232));
        float _1238 = (_1233 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1233);
        float _1246 = (dot(vec3(_382, _383, _384), vec3(_1238 * _1230, _1238 * _1231, _1238 * _1232)) + 1.0) * 0.5;
        float _3762 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1255 = sqrt(((_1231 * _1231) + (_1230 * _1230)) + (_1232 * _1232)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _3773 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1257 = _1256 * 2.0;
        float _1261 = (1.0 - _1256) / (_1256 + 1.0);
        float _3784 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1271 = ((((1.0 - _1262) * (_1257 + 2.0)) * exp2(log2(isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_1257 + 1.0))) + _1262) * _1145;
        _1279 = _1112;
        _1280 = _1111;
        _1281 = _1110;
        _1282 = _1122;
        _1283 = _1121;
        _1284 = _1120;
        _1285 = _1132;
        _1286 = _1131;
        _1287 = _1130;
        _1288 = _1145;
        _1289 = _1144;
        _1290 = _1143;
        _1291 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)));
        _1292 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)));
        _1293 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)));
    }
    else
    {
        _1279 = _967;
        _1280 = _967;
        _1281 = _967;
        _1282 = _967;
        _1283 = _967;
        _1284 = _967;
        _1285 = _967;
        _1286 = _967;
        _1287 = _967;
        _1288 = _967;
        _1289 = _967;
        _1290 = _967;
        _1291 = 0.0;
        _1292 = 0.0;
        _1293 = 0.0;
    }
    float _1303 = (cbModelParam._m0[1u].x * (_1291 - _979)) + _979;
    float _1304 = (cbModelParam._m0[1u].x * (_1292 - _980)) + _980;
    float _1305 = (cbModelParam._m0[1u].x * (_1293 - _981)) + _981;
    float _1326 = fma(_1305, cbSceneParam._m0[89u].z, fma(_1304, cbSceneParam._m0[89u].y, _1303 * cbSceneParam._m0[89u].x));
    float _1329 = fma(_1305, cbSceneParam._m0[90u].z, fma(_1304, cbSceneParam._m0[90u].y, _1303 * cbSceneParam._m0[90u].x));
    float _1332 = fma(_1305, cbSceneParam._m0[91u].z, fma(_1304, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1303));
    float _1347 = _572 * 0.5;
    float _1348 = _573 * 0.5;
    float _1349 = _574 * 0.5;
    float _1350 = dot(vec4(_1347, _1348, _1349, 1.0), vec4(_1281, _1284, _1287, _1290));
    float _1353 = dot(vec4(_1347, _1348, _1349, 1.0), vec4(_1280, _1283, _1286, _1289));
    float _1356 = dot(vec4(_1347, _1348, _1349, 1.0), vec4(_1279, _1282, _1285, _1288));
    float _1390;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1363 = dot(vec4(_1347, _1348, _1349, 1.0), vec4(_966, _970, _973, _976));
        float _1367 = dot(vec4(_1347, _1348, _1349, 1.0), vec4(_968, _971, _974, _977));
        float _1371 = dot(vec4(_1347, _1348, _1349, 1.0), vec4(_969, _972, _975, _978));
        float _1378 = dot(vec4(cbModelParam._m0[39u]), vec4(_1347, _1348, _1349, 1.0));
        _1390 = dot(vec3(isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)), isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)), isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1378) ? 0.0 : (isnan(0.0) ? _1378 : max(0.0, _1378))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1390 = 1.0;
    }
    float _1401;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1392 = dot(vec4(cbModelParam._m0[40u]), vec4(_1347, _1348, _1349, 1.0));
        _1401 = dot(vec3(isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)), isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)), isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1392) ? 0.0 : (isnan(0.0) ? _1392 : max(0.0, _1392))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1401 = 1.0;
    }
    float _1405 = (_1401 * cbModelParam._m0[1u].x) + (_1390 * (1.0 - cbModelParam._m0[1u].x));
    float _1415 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _385);
    float _1416 = isnan(_1415) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1415 : min(cbModelParam._m0[25u].z, _1415));
    float _1496;
    float _1498;
    float _1500;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1463 = fma(_636, cbModelParam._m0[13u].z, fma(_632, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _628)) + cbModelParam._m0[13u].w;
        float _1467 = fma(_636, cbModelParam._m0[14u].z, fma(_632, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _628)) + cbModelParam._m0[14u].w;
        float _1471 = fma(_636, cbModelParam._m0[15u].z, fma(_632, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _628)) + cbModelParam._m0[15u].w;
        float _1474 = fma(_574, cbModelParam._m0[13u].z, fma(_573, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _572));
        float _1477 = fma(_574, cbModelParam._m0[14u].z, fma(_573, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _572));
        float _1480 = fma(_574, cbModelParam._m0[15u].z, fma(_573, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _572));
        float _1508;
        if (_1474 > 0.0)
        {
            _1508 = abs((1.0 - _1463) / _1474);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1474 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1463 + 1.0) / _1474);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1508 = frontier_phi_17_15_ladder;
        }
        float _1714;
        if (_1477 > 0.0)
        {
            _1714 = abs((1.0 - _1467) / _1477);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1477 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1467 + 1.0) / _1477);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1714 = frontier_phi_26_22_ladder;
        }
        float _1968;
        if (_1480 > 0.0)
        {
            _1968 = abs((1.0 - _1471) / _1480);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1480 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1471 + 1.0) / _1480);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1968 = frontier_phi_38_33_ladder;
        }
        float _1970 = isnan(_1714) ? _1508 : (isnan(_1508) ? _1714 : min(_1508, _1714));
        float _1971 = isnan(_1968) ? _1970 : (isnan(_1970) ? _1968 : min(_1970, _1968));
        float _1975 = (_1971 * _1474) + _1463;
        float _1976 = (_1971 * _1477) + _1467;
        float _1977 = (_1971 * _1480) + _1471;
        float _1978 = _1971 * 9.9999997473787516355514526367188e-05;
        float _1980 = (-1.0) - _1978;
        float _1982 = _1978 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1977 > _1982) || ((_1977 < _1980) || ((_1976 > _1982) || ((_1976 < _1980) || ((_1975 < _1980) || (_1975 > _1982))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2105 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1977, cbModelParam._m0[9u].z, fma(_1976, cbModelParam._m0[9u].y, _1975 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1977, cbModelParam._m0[10u].z, fma(_1976, cbModelParam._m0[10u].y, _1975 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1977, cbModelParam._m0[11u].z, fma(_1976, cbModelParam._m0[11u].y, _1975 * cbModelParam._m0[11u].x))), _1416);
            frontier_phi_16_38_ladder = _2105.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2105.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2105.x * cbModelParam._m0[1u].y;
        }
        _1496 = frontier_phi_16_38_ladder_2;
        _1498 = frontier_phi_16_38_ladder_1;
        _1500 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1484 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_572, _573, _574), _1416);
        _1496 = _1484.x * cbModelParam._m0[1u].y;
        _1498 = _1484.y * cbModelParam._m0[1u].y;
        _1500 = _1484.z * cbModelParam._m0[1u].y;
    }
    float _1504 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _385);
    float _1505 = isnan(_1504) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1504 : min(cbModelParam._m0[25u].w, _1504));
    float _1596;
    float _1598;
    float _1600;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1560 = fma(_636, cbModelParam._m0[21u].z, fma(_632, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _628)) + cbModelParam._m0[21u].w;
        float _1564 = fma(_636, cbModelParam._m0[22u].z, fma(_632, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _628)) + cbModelParam._m0[22u].w;
        float _1568 = fma(_636, cbModelParam._m0[23u].z, fma(_632, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _628)) + cbModelParam._m0[23u].w;
        float _1571 = fma(_574, cbModelParam._m0[21u].z, fma(_573, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _572));
        float _1574 = fma(_574, cbModelParam._m0[22u].z, fma(_573, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _572));
        float _1577 = fma(_574, cbModelParam._m0[23u].z, fma(_573, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _572));
        float _1719;
        if (_1571 > 0.0)
        {
            _1719 = abs((1.0 - _1560) / _1571);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1571 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1560 + 1.0) / _1571);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1719 = frontier_phi_28_24_ladder;
        }
        float _1995;
        if (_1574 > 0.0)
        {
            _1995 = abs((1.0 - _1564) / _1574);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1574 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1564 + 1.0) / _1574);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1995 = frontier_phi_40_35_ladder;
        }
        float _2208;
        if (_1577 > 0.0)
        {
            _2208 = abs((1.0 - _1568) / _1577);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1577 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1568 + 1.0) / _1577);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2208 = frontier_phi_49_46_ladder;
        }
        float _2210 = isnan(_1995) ? _1719 : (isnan(_1719) ? _1995 : min(_1719, _1995));
        float _2211 = isnan(_2208) ? _2210 : (isnan(_2210) ? _2208 : min(_2210, _2208));
        float _2215 = (_2211 * _1571) + _1560;
        float _2216 = (_2211 * _1574) + _1564;
        float _2217 = (_2211 * _1577) + _1568;
        float _2218 = _2211 * 9.9999997473787516355514526367188e-05;
        float _2219 = (-1.0) - _2218;
        float _2221 = _2218 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2217 > _2221) || ((_2217 < _2219) || ((_2216 > _2221) || ((_2216 < _2219) || ((_2215 < _2219) || (_2215 > _2221))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2451 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2217, cbModelParam._m0[17u].z, fma(_2216, cbModelParam._m0[17u].y, _2215 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2217, cbModelParam._m0[18u].z, fma(_2216, cbModelParam._m0[18u].y, _2215 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2217, cbModelParam._m0[19u].z, fma(_2216, cbModelParam._m0[19u].y, _2215 * cbModelParam._m0[19u].x))), _1505);
            frontier_phi_25_49_ladder = _2451.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2451.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2451.x * cbModelParam._m0[1u].z;
        }
        _1596 = frontier_phi_25_49_ladder_2;
        _1598 = frontier_phi_25_49_ladder_1;
        _1600 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1580 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_572, _573, _574), _1505);
        _1596 = _1580.x * cbModelParam._m0[1u].z;
        _1598 = _1580.y * cbModelParam._m0[1u].z;
        _1600 = _1580.z * cbModelParam._m0[1u].z;
    }
    float _1613 = (((_599 * _549) + _600) * _564) * ((cbModelParam._m0[1u].w * (_1596 - _1496)) + _1496);
    float _1615 = (((_599 * _551) + _600) * _564) * ((cbModelParam._m0[1u].w * (_1598 - _1498)) + _1498);
    float _1617 = (((_599 * _552) + _600) * _564) * ((cbModelParam._m0[1u].w * (_1600 - _1500)) + _1500);
    float _1620 = fma(_1617, cbSceneParam._m0[89u].z, fma(_1615, cbSceneParam._m0[89u].y, _1613 * cbSceneParam._m0[89u].x));
    float _1623 = fma(_1617, cbSceneParam._m0[90u].z, fma(_1615, cbSceneParam._m0[90u].y, _1613 * cbSceneParam._m0[90u].x));
    float _1626 = fma(_1617, cbSceneParam._m0[91u].z, fma(_1615, cbSceneParam._m0[91u].y, _1613 * cbSceneParam._m0[91u].x));
    uvec4 _1636 = floatBitsToUint(cbInstanceData._m0[_523 + 5u]);
    uint _1638 = _1636.x * 14u;
    uint _1639 = _1638 + 13u;
    float _1646 = _564 + (-1.0);
    float _1651 = (cbLight._m0[_1639].x * _1646) + 1.0;
    float _1652 = (cbLight._m0[_1639].y * _1646) + 1.0;
    float _1653 = (cbLight._m0[_1639].z * _1646) + 1.0;
    float _1654 = (cbLight._m0[_1639].w * _1646) + 1.0;
    uint _1655 = _1638 + 5u;
    float _1661 = isnan(1.0) ? _1652 : (isnan(_1652) ? 1.0 : min(_1652, 1.0));
    uint _1665 = _1638 + 4u;
    float _1672 = isnan(1.0) ? _1651 : (isnan(_1651) ? 1.0 : min(_1651, 1.0));
    uint _1676 = _1638 | 1u;
    float _1687 = dot(vec3(cbLight._m0[_1638].xyz), vec3(_382, _383, _384));
    float _1690 = dot(vec3(cbLight._m0[_1676].xyz), vec3(_382, _383, _384));
    float _3920 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
    float _3931 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
    float _1695 = (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * 0.3183098733425140380859375;
    float _1697 = (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * 0.3183098733425140380859375;
    float _1704 = ((cbLight._m0[_1655].x * _1661) * _1697) + ((cbLight._m0[_1665].x * _1672) * _1695);
    float _1705 = ((_1661 * cbLight._m0[_1655].y) * _1697) + ((_1672 * cbLight._m0[_1665].y) * _1695);
    float _1706 = ((_1661 * cbLight._m0[_1655].z) * _1697) + ((_1672 * cbLight._m0[_1665].z) * _1695);
    uvec4 _1711 = floatBitsToUint(cbLight._m0[_1638 + 12u]);
    bool _1713 = _1711.x == 0u;
    float _1724;
    float _1726;
    float _1728;
    if (_1713)
    {
        _1724 = _1704;
        _1726 = _1705;
        _1728 = _1706;
    }
    else
    {
        uint _1732 = _1638 + 6u;
        float _1748 = (dot(vec3(cbLight._m0[_1638 + 2u].xyz), vec3(_382, _383, _384)) * 0.5) + 0.5;
        float _1749 = _1748 * _1748;
        float _3942 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1750 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1751 = isnan(1.0) ? _1653 : (isnan(_1653) ? 1.0 : min(_1653, 1.0));
        _1724 = (((cbLight._m0[_1732].x * 0.3183098733425140380859375) * _1750) * _1751) + _1704;
        _1726 = (((cbLight._m0[_1732].y * 0.3183098733425140380859375) * _1750) * _1751) + _1705;
        _1728 = (((cbLight._m0[_1732].z * 0.3183098733425140380859375) * _1750) * _1751) + _1706;
    }
    bool _1731 = _1711.y == 0u;
    float _1769;
    float _1771;
    float _1773;
    if (_1731)
    {
        _1769 = _1724;
        _1771 = _1726;
        _1773 = _1728;
    }
    else
    {
        uint _1939 = _1638 + 7u;
        float _1955 = (dot(vec3(cbLight._m0[_1638 + 3u].xyz), vec3(_382, _383, _384)) * 0.5) + 0.5;
        float _1956 = _1955 * _1955;
        float _3958 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
        float _1957 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1958 = isnan(1.0) ? _1654 : (isnan(_1654) ? 1.0 : min(_1654, 1.0));
        _1769 = (((cbLight._m0[_1939].x * 0.3183098733425140380859375) * _1957) * _1958) + _1724;
        _1771 = (((cbLight._m0[_1939].y * 0.3183098733425140380859375) * _1957) * _1958) + _1726;
        _1773 = (((cbLight._m0[_1939].z * 0.3183098733425140380859375) * _1957) * _1958) + _1728;
    }
    uint _1776 = _1638 + 8u;
    float _1789 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1638].w)) * _385) * 0.949999988079071044921875);
    float _1790 = _1789 * _1789;
    float _1791 = cbLight._m0[_1638].x + _463;
    float _1792 = cbLight._m0[_1638].y + _464;
    float _1793 = cbLight._m0[_1638].z + _465;
    float _1797 = inversesqrt(dot(vec3(_1791, _1792, _1793), vec3(_1791, _1792, _1793)));
    float _1798 = _1797 * _1791;
    float _1799 = _1797 * _1792;
    float _1800 = _1797 * _1793;
    float _1801 = dot(vec3(_382, _383, _384), vec3(cbLight._m0[_1638].xyz));
    float _3974 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _1804 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _3985 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _1805 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _1806 = dot(vec3(_382, _383, _384), vec3(_1798, _1799, _1800));
    float _3996 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
    float _1809 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _1810 = dot(vec3(cbLight._m0[_1638].xyz), vec3(_1798, _1799, _1800));
    float _4007 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _1814 = _1790 * _1790;
    float _1818 = ((_1809 * _1809) * (_1814 + (-1.0))) + 1.0;
    float _1826 = exp2(log2(1.0 - (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0)))) * 5.0);
    float _1827 = 0.959999978542327880859375 - _546;
    float _1829 = 0.959999978542327880859375 - _547;
    float _1830 = 0.959999978542327880859375 - _548;
    float _1837 = 1.0 - _1790;
    float _1848 = (0.5 / (((_1805 * ((_1804 * _1837) + _1790)) + 9.9999999392252902907785028219223e-09) + (((_1805 * _1837) + _1790) * _1804))) * _1804;
    float _4018 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _1850 = (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1814 / ((_1818 * _1818) * 3.141590118408203125));
    uint _1861 = _1638 + 9u;
    float _1872 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1676].w)) * _385) * 0.949999988079071044921875);
    float _1873 = _1872 * _1872;
    float _1874 = cbLight._m0[_1676].x + _463;
    float _1875 = cbLight._m0[_1676].y + _464;
    float _1876 = cbLight._m0[_1676].z + _465;
    float _1880 = inversesqrt(dot(vec3(_1874, _1875, _1876), vec3(_1874, _1875, _1876)));
    float _1881 = _1880 * _1874;
    float _1882 = _1880 * _1875;
    float _1883 = _1880 * _1876;
    float _1884 = dot(vec3(_382, _383, _384), vec3(cbLight._m0[_1676].xyz));
    float _4029 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _1887 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _1888 = dot(vec3(_382, _383, _384), vec3(_1881, _1882, _1883));
    float _4040 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _1891 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _1892 = dot(vec3(cbLight._m0[_1676].xyz), vec3(_1881, _1882, _1883));
    float _4051 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1896 = _1873 * _1873;
    float _1900 = ((_1891 * _1891) * (_1896 + (-1.0))) + 1.0;
    float _1907 = exp2(log2(1.0 - (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0)))) * 5.0);
    float _1914 = 1.0 - _1873;
    float _1924 = (0.5 / (((_1805 * ((_1887 * _1914) + _1873)) + 9.9999999392252902907785028219223e-09) + (((_1805 * _1914) + _1873) * _1887))) * _1887;
    float _4062 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1926 = (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * (_1896 / ((_1900 * _1900) * 3.141590118408203125));
    float _1936 = (((((_1907 * _1827) + _549) * cbLight._m0[_1861].x) * _1926) * _1661) + (((((_1826 * _1827) + _549) * cbLight._m0[_1776].x) * _1850) * _1672);
    float _1937 = (((((_1907 * _1829) + _551) * cbLight._m0[_1861].y) * _1926) * _1661) + (((((_1826 * _1829) + _551) * cbLight._m0[_1776].y) * _1850) * _1672);
    float _1938 = (((((_1907 * _1830) + _552) * cbLight._m0[_1861].z) * _1926) * _1661) + (((((_1826 * _1830) + _552) * cbLight._m0[_1776].z) * _1850) * _1672);
    float _2000;
    float _2002;
    float _2004;
    if (_1713)
    {
        _2000 = _1936;
        _2002 = _1937;
        _2004 = _1938;
    }
    else
    {
        uint _2006 = _1638 + 2u;
        uint _2010 = _1638 + 10u;
        float _2024 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2006].w)) * _385) * 0.949999988079071044921875);
        float _2025 = _2024 * _2024;
        float _2026 = cbLight._m0[_2006].x + _463;
        float _2027 = cbLight._m0[_2006].y + _464;
        float _2028 = cbLight._m0[_2006].z + _465;
        float _2032 = inversesqrt(dot(vec3(_2026, _2027, _2028), vec3(_2026, _2027, _2028)));
        float _2033 = _2032 * _2026;
        float _2034 = _2032 * _2027;
        float _2035 = _2032 * _2028;
        float _2036 = dot(vec3(_382, _383, _384), vec3(cbLight._m0[_2006].xyz));
        float _4073 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
        float _2039 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _2040 = dot(vec3(_382, _383, _384), vec3(_2033, _2034, _2035));
        float _4084 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
        float _2043 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _2044 = dot(vec3(cbLight._m0[_2006].xyz), vec3(_2033, _2034, _2035));
        float _4095 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
        float _2048 = _2025 * _2025;
        float _2052 = ((_2043 * _2043) * (_2048 + (-1.0))) + 1.0;
        float _2059 = exp2(log2(1.0 - (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0)))) * 5.0);
        float _2066 = 1.0 - _2025;
        float _2076 = (0.5 / (((_1805 * ((_2039 * _2066) + _2025)) + 9.9999999392252902907785028219223e-09) + (((_1805 * _2066) + _2025) * _2039))) * _2039;
        float _4106 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
        float _2078 = (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_2048 / ((_2052 * _2052) * 3.141590118408203125));
        float _2079 = isnan(1.0) ? _1653 : (isnan(_1653) ? 1.0 : min(_1653, 1.0));
        _2000 = (((((_2059 * _1827) + _549) * cbLight._m0[_2010].x) * _2078) * _2079) + _1936;
        _2002 = (((((_2059 * _1829) + _551) * cbLight._m0[_2010].y) * _2078) * _2079) + _1937;
        _2004 = (((((_2059 * _1830) + _552) * cbLight._m0[_2010].z) * _2078) * _2079) + _1938;
    }
    float _2114;
    float _2116;
    float _2118;
    if (_1731)
    {
        _2114 = _2000;
        _2116 = _2002;
        _2118 = _2004;
    }
    else
    {
        uint _2125 = _1638 + 3u;
        uint _2129 = _1638 + 11u;
        float _2143 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2125].w)) * _385) * 0.949999988079071044921875);
        float _2144 = _2143 * _2143;
        float _2145 = cbLight._m0[_2125].x + _463;
        float _2146 = cbLight._m0[_2125].y + _464;
        float _2147 = cbLight._m0[_2125].z + _465;
        float _2151 = inversesqrt(dot(vec3(_2145, _2146, _2147), vec3(_2145, _2146, _2147)));
        float _2152 = _2151 * _2145;
        float _2153 = _2151 * _2146;
        float _2154 = _2151 * _2147;
        float _2155 = dot(vec3(_382, _383, _384), vec3(cbLight._m0[_2125].xyz));
        float _4122 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2158 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _2159 = dot(vec3(_382, _383, _384), vec3(_2152, _2153, _2154));
        float _4133 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2162 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _2163 = dot(vec3(cbLight._m0[_2125].xyz), vec3(_2152, _2153, _2154));
        float _4144 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
        float _2167 = _2144 * _2144;
        float _2171 = ((_2162 * _2162) * (_2167 + (-1.0))) + 1.0;
        float _2178 = exp2(log2(1.0 - (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) * 5.0);
        float _2185 = 1.0 - _2144;
        float _2195 = (0.5 / (((_1805 * ((_2158 * _2185) + _2144)) + 9.9999999392252902907785028219223e-09) + (((_1805 * _2185) + _2144) * _2158))) * _2158;
        float _4155 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        float _2197 = (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_2167 / ((_2171 * _2171) * 3.141590118408203125));
        float _2198 = isnan(1.0) ? _1654 : (isnan(_1654) ? 1.0 : min(_1654, 1.0));
        _2114 = (((((_2178 * _1827) + _549) * cbLight._m0[_2129].x) * _2197) * _2198) + _2000;
        _2116 = (((((_2178 * _1829) + _551) * cbLight._m0[_2129].y) * _2197) * _2198) + _2002;
        _2118 = (((((_2178 * _1830) + _552) * cbLight._m0[_2129].z) * _2197) * _2198) + _2004;
    }
    float _2333;
    float _2335;
    float _2337;
    float _2339;
    float _2341;
    float _2343;
    if (_1636.y == 0u)
    {
        float _2273 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2274 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2273;
        float _2275 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2273;
        float _2276 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2273;
        uvec4 _2288 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2289 = _2288.x;
        uint _2300 = uint((float(_2288.y) * floor(float(uint(cbSceneParam._m0[85u].y * _484) / _2289))) + floor(float(uint(cbSceneParam._m0[85u].x * _483) / _2289)));
        float _2310 = (log2(_2276 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2311 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
        uint _2314 = uint(isnan(14.0) ? _2311 : (isnan(_2311) ? 14.0 : min(_2311, 14.0)));
        uvec4 _2319 = texelFetch(g_lightClusterGridBuffer, int(((_2314 << 2u) + (_2300 << 6u)) >> 2u));
        uint _2320 = _2319.x;
        uint _2321 = _2288.z;
        float _2456;
        float _2458;
        float _2460;
        float _2462;
        float _2464;
        float _2466;
        if (((((1u << ((_2321 >> 4u) & 15u)) + 4294967295u) & _2320) == 0u) || ((_2321 & 240u) == 0u))
        {
            _2456 = 0.0;
            _2458 = 0.0;
            _2460 = 0.0;
            _2462 = 0.0;
            _2464 = 0.0;
            _2466 = 0.0;
        }
        else
        {
            float _2457;
            float _2459;
            float _2461;
            float _2463;
            float _2465;
            float _2467;
            float _2618 = 0.0;
            float _2619 = 0.0;
            float _2620 = 0.0;
            float _2621 = 0.0;
            float _2622 = 0.0;
            float _2623 = 0.0;
            uint _2624 = 0u;
            uint _2633;
            bool _2634;
            for (;;)
            {
                _2633 = texelFetch(g_lightClassification, int((((_2314 << 5u) + (_2300 << 9u)) + (_2624 << 2u)) >> 2u)).x;
                _2634 = _2633 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2634)
                {
                    frontier_phi_66_pred = _2618;
                    frontier_phi_66_pred_1 = _2623;
                    frontier_phi_66_pred_2 = _2622;
                    frontier_phi_66_pred_3 = _2621;
                    frontier_phi_66_pred_4 = _2620;
                    frontier_phi_66_pred_5 = _2619;
                }
                else
                {
                    float _2763;
                    float _2764;
                    float _2765;
                    float _2766;
                    float _2767;
                    float _2768;
                    uint _2769;
                    _2763 = _2618;
                    _2764 = _2619;
                    _2765 = _2620;
                    _2766 = _2621;
                    _2767 = _2622;
                    _2768 = _2623;
                    _2769 = _2633;
                    float _2690;
                    float _2691;
                    float _2692;
                    float _2693;
                    float _2694;
                    float _2695;
                    for (;;)
                    {
                        uint _2773 = uint(findLSB(_2769)) + (_2624 << 5u);
                        uint _2770 = (_2769 + 4294967295u) & _2769;
                        uint _2775 = _2773 * 48u;
                        vec4 _2789 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2775)).x, texelFetch(g_PointLightRenderingBuffer, int(_2775 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2775 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2775 + 3u)).x));
                        uint _2795 = (_2773 * 48u) + 4u;
                        vec4 _2808 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2795)).x, texelFetch(g_PointLightRenderingBuffer, int(_2795 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2795 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2795 + 3u)).x));
                        uint _2814 = (_2773 * 48u) + 8u;
                        vec3 _2825 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2814)).x, texelFetch(g_PointLightRenderingBuffer, int(_2814 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2814 + 2u)).x));
                        float _2829 = _2789.x - _2274;
                        float _2830 = _2789.y - _2275;
                        float _2831 = _2789.z - _2276;
                        float _2832 = dot(vec3(_2829, _2830, _2831), vec3(_2829, _2830, _2831));
                        float _2835 = inversesqrt(_2832);
                        float _2836 = _2835 * _2829;
                        float _2837 = _2835 * _2830;
                        float _2838 = _2835 * _2831;
                        float _2839 = dot(vec3(_504, _507, _510), vec3(_2836, _2837, _2838));
                        float _2844 = 1.0 - (_2832 * _2789.w);
                        float _4181 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
                        float _2845 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
                        float _2846 = sqrt(_2832) * _2808.w;
                        float _2849 = 1.39999997615814208984375 / (_2846 + 1.39999997615814208984375);
                        float _2850 = _2849 * _2849;
                        float _2853 = ((1.0 - _2850) * _2839) + _2850;
                        float _2856 = _2846 * _2846;
                        float _2860 = ((isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0))) * _2845) / ((_2856 * 0.699999988079071044921875) + 1.0);
                        float _2864 = (-0.0) - _2274;
                        float _2865 = (-0.0) - _2275;
                        float _2866 = (-0.0) - _2276;
                        float _2870 = inversesqrt(dot(vec3(_2864, _2865, _2866), vec3(_2864, _2865, _2866)));
                        float _2871 = _2870 * _2864;
                        float _2872 = _2870 * _2865;
                        float _2873 = _2870 * _2866;
                        float _2881 = exp2(log2(1.0 / ((_2856 * 3.5) + 5.0)) * 0.25);
                        float _2882 = 1.0 - _580;
                        float _2889 = sqrt(1.0 - ((1.0 - (_2882 * _2882)) * (1.0 - (_2881 * _2881))));
                        float _2890 = _2889 * _2889;
                        float _2891 = _2890 * _2890;
                        float _2892 = _2871 + _2836;
                        float _2893 = _2872 + _2837;
                        float _2894 = _2873 + _2838;
                        float _2898 = inversesqrt(dot(vec3(_2892, _2893, _2894), vec3(_2892, _2893, _2894)));
                        float _2902 = dot(vec3(_504, _507, _510), vec3(_2871, _2872, _2873));
                        float _4197 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
                        float _2905 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
                        float _2906 = dot(vec3(_504, _507, _510), vec3(_2898 * _2892, _2898 * _2893, _2898 * _2894));
                        float _4208 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
                        float _2909 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                        float _2913 = ((_2909 * _2909) * (_2891 + (-1.0))) + 1.0;
                        float _2914 = _2849 * _2890;
                        float _2915 = _2914 * _2914;
                        float _2918 = ((1.0 - _2915) * _2839) + _2915;
                        float _4219 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
                        float _2919 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
                        float _2920 = 1.0 - _2890;
                        float _2930 = (0.5 / (((_2919 * ((_2905 * _2920) + _2890)) + 9.9999999392252902907785028219223e-09) + (((_2919 * _2920) + _2890) * _2905))) * _2919;
                        float _4230 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
                        float _2941 = (((_2891 * 3.1415927410125732421875) * (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0)))) / ((_2913 * _2913) * ((_2856 * 2.1991131305694580078125) + 3.141590118408203125))) * _2845;
                        _2693 = (_2860 * _2808.x) + _2766;
                        _2694 = (_2860 * _2808.y) + _2767;
                        _2695 = (_2860 * _2808.z) + _2768;
                        _2690 = (_2941 * _2825.x) + _2763;
                        _2691 = (_2941 * _2825.y) + _2764;
                        _2692 = (_2941 * _2825.z) + _2765;
                        if (_2770 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2763 = _2690;
                            _2764 = _2691;
                            _2765 = _2692;
                            _2766 = _2693;
                            _2767 = _2694;
                            _2768 = _2695;
                            _2769 = _2770;
                        }
                    }
                    frontier_phi_66_pred = _2690;
                    frontier_phi_66_pred_1 = _2695;
                    frontier_phi_66_pred_2 = _2694;
                    frontier_phi_66_pred_3 = _2693;
                    frontier_phi_66_pred_4 = _2692;
                    frontier_phi_66_pred_5 = _2691;
                }
                _2457 = frontier_phi_66_pred;
                _2467 = frontier_phi_66_pred_1;
                _2465 = frontier_phi_66_pred_2;
                _2463 = frontier_phi_66_pred_3;
                _2461 = frontier_phi_66_pred_4;
                _2459 = frontier_phi_66_pred_5;
                uint _2625 = _2624 + 1u;
                if (_2625 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2618 = _2457;
                    _2619 = _2459;
                    _2620 = _2461;
                    _2621 = _2463;
                    _2622 = _2465;
                    _2623 = _2467;
                    _2624 = _2625;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2456 = _2457;
            _2458 = _2459;
            _2460 = _2461;
            _2462 = _2463;
            _2464 = _2465;
            _2466 = _2467;
        }
        uvec4 _2470 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2471 = _2470.z;
        uint _2473 = (_2471 >> 8u) & 15u;
        float _2586;
        float _2588;
        float _2590;
        float _2592;
        float _2594;
        float _2596;
        if (((4294967295u << _2473) & _2320) == 0u)
        {
            _2586 = _2456;
            _2588 = _2458;
            _2590 = _2460;
            _2592 = _2462;
            _2594 = _2464;
            _2596 = _2466;
        }
        else
        {
            float _2611 = inversesqrt(dot(vec3(_2274, _2275, _2276), vec3(_2274, _2275, _2276)));
            float _2612 = _2611 * _2274;
            float _2613 = _2611 * _2275;
            float _2614 = _2611 * _2276;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2473 < ((_2471 >> 12u) & 15u))
            {
                float _2587;
                float _2589;
                float _2591;
                float _2593;
                float _2595;
                float _2597;
                float _2746 = _2456;
                float _2747 = _2458;
                float _2748 = _2460;
                float _2749 = _2462;
                float _2750 = _2464;
                float _2751 = _2466;
                uint _2752 = _2473;
                uint _2761;
                bool _2762;
                for (;;)
                {
                    _2761 = texelFetch(g_lightClassification, int((((_2314 << 5u) + (_2300 << 9u)) + (_2752 << 2u)) >> 2u)).x;
                    _2762 = _2761 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2762)
                    {
                        frontier_phi_77_pred = _2751;
                        frontier_phi_77_pred_1 = _2750;
                        frontier_phi_77_pred_2 = _2749;
                        frontier_phi_77_pred_3 = _2748;
                        frontier_phi_77_pred_4 = _2747;
                        frontier_phi_77_pred_5 = _2746;
                    }
                    else
                    {
                        float _2955;
                        float _2956;
                        float _2957;
                        float _2958;
                        float _2959;
                        float _2960;
                        float _3250;
                        float _3251;
                        float _3252;
                        float _3253;
                        float _3254;
                        float _3255;
                        float _2968 = _2746;
                        float _2969 = _2747;
                        float _2970 = _2748;
                        float _2971 = _2749;
                        float _2972 = _2750;
                        float _2973 = _2751;
                        uint _2974 = _2761;
                        uint _2975;
                        vec4 _3000;
                        float _3001;
                        vec4 _3016;
                        vec3 _3028;
                        vec4 _3043;
                        vec4 _3059;
                        float _3106;
                        bool _3107;
                        for (;;)
                        {
                            uint _2985 = ((_2752 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2974));
                            _2975 = (_2974 + 4294967295u) & _2974;
                            uint _2987 = _2985 * 40u;
                            _3000 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2987)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 3u)).x));
                            _3001 = _3000.w;
                            uint _3003 = (_2985 * 40u) + 4u;
                            _3016 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3003)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 3u)).x));
                            uint _3018 = (_2985 * 40u) + 8u;
                            _3028 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3018)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 2u)).x));
                            uint _3030 = (_2985 * 40u) + 16u;
                            _3043 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3030)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 3u)).x));
                            uint _3046 = (_2985 * 40u) + 20u;
                            _3059 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3046)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 3u)).x));
                            uint _3062 = (_2985 * 40u) + 24u;
                            vec4 _3075 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3062)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 3u)).x));
                            uint _3081 = (_2985 * 40u) + 28u;
                            vec4 _3094 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3081)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 3u)).x));
                            _3106 = fma(_2276, _3094.z, fma(_2275, _3094.y, _3094.x * _2274)) + _3094.w;
                            _3107 = !((fma(_2276, _3075.z, fma(_2275, _3075.y, _3075.x * _2274)) + _3075.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3107)
                            {
                                float _3134 = _3000.x - _2274;
                                float _3135 = _3000.y - _2275;
                                float _3136 = _3000.z - _2276;
                                float _3137 = dot(vec3(_3134, _3135, _3136), vec3(_3134, _3135, _3136));
                                float _3140 = inversesqrt(_3137);
                                float _3141 = _3140 * _3134;
                                float _3142 = _3140 * _3135;
                                float _3143 = _3140 * _3136;
                                float _3147 = 1.0 - (_3137 / (_3001 * _3001));
                                float _4241 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                                float _3148 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
                                float _3152 = sqrt(_3137) * _3016.w;
                                float _3154 = 1.39999997615814208984375 / (_3152 + 1.39999997615814208984375);
                                float _3155 = _3154 * _3154;
                                float _3158 = ((1.0 - _3155) * dot(vec3(_3141, _3142, _3143), vec3(_504, _507, _510))) + _3155;
                                float _3161 = _3152 * _3152;
                                float _3165 = (fma(_2276, _3043.z, fma(_2275, _3043.y, _3043.x * _2274)) + _3043.w) / _3106;
                                float _3166 = (fma(_2276, _3059.z, fma(_2275, _3059.y, _3059.x * _2274)) + _3059.w) / _3106;
                                float _3170 = 1.0 - dot(vec2(_3165, _3166), vec2(_3165, _3166));
                                float _4257 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                                float _3171 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
                                float _3172 = _3171 * (((isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0))) * _3148) / ((_3161 * 0.699999988079071044921875) + 1.0));
                                float _3184 = exp2(log2(1.0 / ((_3161 * 3.5) + 5.0)) * 0.25);
                                float _3185 = 1.0 - _580;
                                float _3192 = sqrt(1.0 - ((1.0 - (_3185 * _3185)) * (1.0 - (_3184 * _3184))));
                                float _3193 = _3192 * _3192;
                                float _3194 = _3193 * _3193;
                                float _3195 = _3141 - _2612;
                                float _3196 = _3142 - _2613;
                                float _3197 = _3143 - _2614;
                                float _3201 = inversesqrt(dot(vec3(_3195, _3196, _3197), vec3(_3195, _3196, _3197)));
                                float _3205 = dot(vec3(_504, _507, _510), vec3((-0.0) - _2612, (-0.0) - _2613, (-0.0) - _2614));
                                float _4268 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                                float _3208 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
                                float _3209 = dot(vec3(_504, _507, _510), vec3(_3201 * _3195, _3201 * _3196, _3201 * _3197));
                                float _4279 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                                float _3212 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
                                float _3216 = ((_3212 * _3212) * (_3194 + (-1.0))) + 1.0;
                                float _3217 = _3154 * _3193;
                                float _3218 = _3217 * _3217;
                                float _3224 = ((1.0 - _3218) * dot(vec3(_504, _507, _510), vec3(_3141, _3142, _3143))) + _3218;
                                float _4290 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                                float _3225 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                                float _3226 = 1.0 - _3193;
                                float _3236 = (0.5 / (((_3225 * ((_3208 * _3226) + _3193)) + 9.9999999392252902907785028219223e-09) + (((_3225 * _3226) + _3193) * _3208))) * _3225;
                                float _4301 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                                float _3246 = (_3171 * _3148) * (((_3194 * 3.1415927410125732421875) * (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0)))) / ((_3216 * _3216) * ((_3161 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3172 * _3016.y;
                                frontier_phi_83_pred_1 = _3172 * _3016.x;
                                frontier_phi_83_pred_2 = _3246 * _3028.z;
                                frontier_phi_83_pred_3 = _3246 * _3028.y;
                                frontier_phi_83_pred_4 = _3246 * _3028.x;
                                frontier_phi_83_pred_5 = _3172 * _3016.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3254 = frontier_phi_83_pred;
                            _3253 = frontier_phi_83_pred_1;
                            _3252 = frontier_phi_83_pred_2;
                            _3251 = frontier_phi_83_pred_3;
                            _3250 = frontier_phi_83_pred_4;
                            _3255 = frontier_phi_83_pred_5;
                            _2958 = _3253 + _2971;
                            _2959 = _3254 + _2972;
                            _2960 = _3255 + _2973;
                            _2955 = _3250 + _2968;
                            _2956 = _3251 + _2969;
                            _2957 = _3252 + _2970;
                            if (_2975 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2968 = _2955;
                                _2969 = _2956;
                                _2970 = _2957;
                                _2971 = _2958;
                                _2972 = _2959;
                                _2973 = _2960;
                                _2974 = _2975;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2960;
                        frontier_phi_77_pred_1 = _2959;
                        frontier_phi_77_pred_2 = _2958;
                        frontier_phi_77_pred_3 = _2957;
                        frontier_phi_77_pred_4 = _2956;
                        frontier_phi_77_pred_5 = _2955;
                    }
                    _2597 = frontier_phi_77_pred;
                    _2595 = frontier_phi_77_pred_1;
                    _2593 = frontier_phi_77_pred_2;
                    _2591 = frontier_phi_77_pred_3;
                    _2589 = frontier_phi_77_pred_4;
                    _2587 = frontier_phi_77_pred_5;
                    uint _2753 = _2752 + 1u;
                    if (_2753 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2746 = _2587;
                        _2747 = _2589;
                        _2748 = _2591;
                        _2749 = _2593;
                        _2750 = _2595;
                        _2751 = _2597;
                        _2752 = _2753;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2591;
                frontier_phi_58_59_ladder_1 = _2597;
                frontier_phi_58_59_ladder_2 = _2595;
                frontier_phi_58_59_ladder_3 = _2593;
                frontier_phi_58_59_ladder_4 = _2589;
                frontier_phi_58_59_ladder_5 = _2587;
            }
            else
            {
                frontier_phi_58_59_ladder = _2460;
                frontier_phi_58_59_ladder_1 = _2466;
                frontier_phi_58_59_ladder_2 = _2464;
                frontier_phi_58_59_ladder_3 = _2462;
                frontier_phi_58_59_ladder_4 = _2458;
                frontier_phi_58_59_ladder_5 = _2456;
            }
            _2586 = frontier_phi_58_59_ladder_5;
            _2588 = frontier_phi_58_59_ladder_4;
            _2590 = frontier_phi_58_59_ladder;
            _2592 = frontier_phi_58_59_ladder_3;
            _2594 = frontier_phi_58_59_ladder_2;
            _2596 = frontier_phi_58_59_ladder_1;
        }
        float _2601 = isnan(1.0) ? _564 : (isnan(_564) ? 1.0 : min(_564, 1.0));
        _2333 = (_2601 * _2592) + _1769;
        _2335 = (_2601 * _2594) + _1771;
        _2337 = (_2601 * _2596) + _1773;
        _2339 = ((_2586 * _549) * _2601) + _2114;
        _2341 = ((_2588 * _551) * _2601) + _2116;
        _2343 = ((_2590 * _552) * _2601) + _2118;
    }
    else
    {
        _2333 = _1769;
        _2335 = _1771;
        _2337 = _1773;
        _2339 = _2114;
        _2341 = _2116;
        _2343 = _2118;
    }
    uint _2349 = _525 + uint(cbMatDynParam._m0[0u].w);
    float _2357 = ((_368 * cbMtdParam._m0[11u].x) * (_352.x + _337.x)) * cbInstanceData._m0[_2349].x;
    float _2360 = ((_368 * cbMtdParam._m0[11u].y) * (_352.y + _337.y)) * cbInstanceData._m0[_2349].y;
    float _2363 = ((_368 * cbMtdParam._m0[11u].z) * (_352.z + _337.z)) * cbInstanceData._m0[_2349].z;
    float _4317 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _4328 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _4339 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _2380 = (((isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_2333 + ((isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0))) * _564))) + ((_2339 + ((isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))) * _1405)) * cbPerFrame._m0[3u].x)) + _2357;
    float _2382 = (_2360 + ((_2341 + ((isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))) * _1405)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_2335 + ((isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0))) * _564)));
    float _2384 = (_2363 + ((_2343 + ((isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))) * _1405)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_2337 + ((isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0))) * _564)));
    float _2385 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2386 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2387 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
    float _2393 = cbMtdParam._m0[2u].x * _2357;
    float _2394 = cbMtdParam._m0[2u].y * _2360;
    float _2395 = cbMtdParam._m0[2u].z * _2363;
    float _4365 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2397 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
    uint _2398 = _523 + 6u;
    float _2406 = _483 / cbSceneParam._m0[86u].x;
    float _2407 = _484 / cbSceneParam._m0[86u].y;
    vec4 _2421 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2406, _2407, (log2((isnan(cbSceneParam._m0[77u].w) ? _405 : (isnan(_405) ? cbSceneParam._m0[77u].w : min(_405, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2423 = _2421.x;
    float _2424 = _2421.y;
    float _2425 = _2421.z;
    float _2426 = _2421.w;
    float _2519;
    float _2521;
    float _2523;
    float _2525;
    if (_405 > cbSceneParam._m0[78u].w)
    {
        float _2481 = isnan(_405) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _405 : min(cbSceneParam._m0[80u].w, _405));
        float _2482 = _2481 / _405;
        float _2493 = _2482 * _456;
        float _2494 = _457 * _2482;
        float _2495 = (-0.0) - _2494;
        float _2497 = _2482 * _458;
        float _2499 = (cbSceneParam._m0[77u].w * _2495) / _2481;
        float _2500 = _2499 + cbSceneParam._m0[79u].w;
        float _2501 = cbSceneParam._m0[79u].w - _2494;
        float _2507 = sqrt(((_2493 * _2493) + (_2494 * _2494)) + (_2497 * _2497));
        float _2510 = (1.0 - (cbSceneParam._m0[77u].w / _2481)) * _2507;
        float _2515 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2517 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2703;
        if (abs((_2495 - _2499) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2703 = ((((_2500 > 0.0) ? exp2(_2515 * _2500) : (2.0 - exp2(_2517 * _2500))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2510;
        }
        else
        {
            float _2647 = 1.0 / cbSceneParam._m0[80u].x;
            float _2648 = isnan(_2501) ? _2500 : (isnan(_2500) ? _2501 : max(_2500, _2501));
            float _2649 = isnan(_2501) ? _2500 : (isnan(_2500) ? _2501 : min(_2500, _2501));
            float _2658 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : min(_2648, 0.0));
            float _2659 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : min(_2649, 0.0));
            _2703 = ((abs(_2507 / _2495) * cbSceneParam._m0[80u].y) * ((((_2658 - _2659) * 2.0) - ((exp2(_2515 * (isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0)))) - exp2(_2515 * (isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0))))) * _2647)) - ((exp2(_2517 * _2658) - exp2(_2517 * _2659)) * _2647))) + (_2510 * cbSceneParam._m0[80u].z);
        }
        vec4 _2705 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2406, _2407, 1.0), 0.0);
        float _2714 = exp2((_2703 * (-1.44269502162933349609375)) * (1.0 - _2705.w));
        float _2715 = log2(_2714);
        float _2731 = log2(_2426);
        _2519 = (exp2(_2731 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2715 * cbSceneParam._m0[78u].x)) * _2705.x) / cbSceneParam._m0[78u].x)) + _2423;
        _2521 = (exp2(_2731 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2715 * cbSceneParam._m0[78u].y)) * _2705.y) / cbSceneParam._m0[78u].y)) + _2424;
        _2523 = (exp2(_2731 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2715 * cbSceneParam._m0[78u].z)) * _2705.z) / cbSceneParam._m0[78u].z)) + _2425;
        _2525 = _2714 * _2426;
    }
    else
    {
        _2519 = _2423;
        _2521 = _2424;
        _2523 = _2425;
        _2525 = _2426;
    }
    bool _2741;
    vec4 _2535;
    vec4 _2557;
    float _2559;
    float _2563;
    float _2564;
    float _2565;
    float _2568;
    float _2571;
    float _2574;
    float _2575;
    bool _2585;
    for (;;)
    {
        _2535 = cbMatDynParam._m0[0u];
        float _2537 = roundEven(_2535.y);
        bool _2538 = _2537 == 3.0;
        float _2539 = log2(_2525);
        float _2543 = exp2(_2539 * cbSceneParam._m0[78u].x);
        float _2544 = exp2(_2539 * cbSceneParam._m0[78u].y);
        float _2545 = exp2(_2539 * cbSceneParam._m0[78u].z);
        float _2546 = _2543 * _2385;
        float _2547 = _2544 * _2386;
        float _2548 = _2545 * _2387;
        float _2555 = _472 + (-0.5);
        _2557 = cbMtdParam._m0[1u];
        _2559 = _2557.y * _2555;
        float _2562 = (_2537 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2563 = _2562 * (_2538 ? _2546 : (_2546 + (cbSceneParam._m0[72u].w * _2519)));
        _2564 = _2562 * (_2538 ? _2547 : (_2547 + (cbSceneParam._m0[72u].w * _2521)));
        _2565 = _2562 * (_2538 ? _2548 : (_2548 + (cbSceneParam._m0[72u].w * _2523)));
        _2568 = ((_2393 * _2397) * _2543) * _2562;
        _2571 = ((_2394 * _2397) * _2544) * _2562;
        _2574 = ((_2395 * _2397) * _2545) * _2562;
        _2575 = _2555 * 0.999000012874603271484375;
        _2585 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2585)
        {
            if ((cbInstanceData._m0[_523 + 7u].x + _2575) < 0.5)
            {
                _2741 = true;
                break;
            }
        }
        uint _2682 = _525 + uint(_2535.w);
        if ((cbInstanceData._m0[_2682].w < 1.0) && ((cbInstanceData._m0[_2682].w + _2575) < 0.5))
        {
            _2741 = true;
            break;
        }
        if ((_2559 + 1.0) < _2557.x)
        {
            _2741 = true;
            break;
        }
        _2741 = false;
        break;
    }
    float _2946;
    if (_2741)
    {
        discard_state = true;
        _2946 = 0.0;
    }
    else
    {
        _2946 = cbInstanceData._m0[_2398].w;
    }
    SV_Target.x = _2563;
    SV_Target.y = _2564;
    SV_Target.z = _2565;
    SV_Target.w = _2946;
    SV_Target_1.x = _2568;
    SV_Target_1.y = _2571;
    SV_Target_1.z = _2574;
    SV_Target_1.w = cbInstanceData._m0[_2398].w;
    discard_exit();
}


