#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1240;
float _3945;
float _3946;
float _3947;
float _3948;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _261 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _267 = _261.x * cbMtdParam._m0[9u].x;
    float _268 = _261.y * cbMtdParam._m0[9u].y;
    float _269 = _261.z * cbMtdParam._m0[9u].z;
    vec4 _307 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _323 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3957 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _324 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _331 = (((_307.x * cbMtdParam._m0[10u].x) - _267) * _324) + _267;
    float _332 = (((_307.y * cbMtdParam._m0[10u].y) - _268) * _324) + _268;
    float _333 = (((_307.z * cbMtdParam._m0[10u].z) - _269) * _324) + _269;
    vec4 _353 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _372 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_353.x + 0.00999999977648258209228515625));
    float _374 = _372 * (cbMtdParam._m0[15u].x + 1.0);
    float _3968 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _375 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _383 = ((((cbMtdParam._m0[12u].x - _331) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _375) + _331;
    float _384 = ((((cbMtdParam._m0[12u].y - _332) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _375) + _332;
    float _385 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _333)) * _375) + _333;
    vec4 _398 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _400 = _398.x;
    float _418 = ((texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[7u].w)).x - _400) * _324) + _400;
    vec4 _431 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _439 = (_431.x * 2.0) + (-1.0);
    float _441 = (_431.y * 2.0) + (-1.0);
    float _442 = dot(vec2(_439, _441), vec2(_439, _441));
    float _3979 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    vec4 _459 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _463 = _459.z;
    float _466 = (_459.x * 2.0) + (-1.0);
    float _467 = (_459.y * 2.0) + (-1.0);
    float _468 = dot(vec2(_466, _467), vec2(_466, _467));
    float _3990 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _473 = sqrt(1.0 - (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))));
    float _476 = (_324 * (_431.z - _463)) + _463;
    float _479 = _372 * (cbMtdParam._m0[14u].w + 1.0);
    float _4001 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _483 = ((cbMtdParam._m0[14u].y - _476) * (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0)))) + _476;
    vec4 _510 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _525 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _567 = (TEXCOORD_6.x - ((cbMtdParam._m0[13u].w * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_5, SS_WrapLinear), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].x + 1.0);
    float _4012 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _568 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _569 = ((_525.x + _510.x) * cbMtdParam._m0[11u].x) * _568;
    float _570 = ((_525.y + _510.y) * cbMtdParam._m0[11u].y) * _568;
    float _571 = ((_525.z + _510.z) * cbMtdParam._m0[11u].z) * _568;
    vec4 _583 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[9u].w));
    float _585 = _583.x;
    float _598 = (_324 * (_439 - _466)) + _466;
    float _599 = (_324 * (_441 - _467)) + _467;
    float _600 = (_324 * (sqrt(1.0 - (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0)))) - _473)) + _473;
    vec4 _619 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _625 = (_619.x * 2.0) + (-1.0);
    float _626 = (_619.y * 2.0) + (-1.0);
    float _627 = dot(vec2(_625, _626), vec2(_625, _626));
    float _4023 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _643 = (_375 * (((_598 * cbMtdParam._m0[13u].z) - _598) + _625)) + _598;
    float _644 = (_375 * (((_599 * cbMtdParam._m0[13u].z) - _599) + _626)) + _599;
    float _645 = (_375 * (sqrt(1.0 - (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) - _600)) + _600;
    float _648 = fma(_645, _232 * NORMAL.x, fma(_644, _239 * TANGENT.x, (_225 * _217) * _643));
    float _651 = fma(_645, _232 * NORMAL.y, fma(_644, _239 * TANGENT.y, (_225 * _218) * _643));
    float _654 = fma(_645, _232 * NORMAL.z, fma(_644, _239 * TANGENT.z, (_225 * _219) * _643));
    float _658 = inversesqrt(dot(vec3(_648, _651, _654), vec3(_648, _651, _654)));
    float _659 = _658 * _648;
    float _660 = _658 * _651;
    float _661 = _658 * _654;
    float _4034 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _662 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _4045 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _4056 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _4067 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _4078 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _666 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _682 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _722 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _732 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _722);
    float _733 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _722);
    float _734 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _722);
    float _738 = inversesqrt(dot(vec3(_732, _733, _734), vec3(_732, _733, _734)));
    float _739 = _732 * _738;
    float _740 = _733 * _738;
    float _741 = _734 * _738;
    vec4 _746 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _748 = _746.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _920 = sqrt(((_732 * _732) + (_733 * _733)) + (_734 * _734));
        float _926 = (cbMatDynParam._m0[5u].x * _920) + cbMatDynParam._m0[5u].y;
        float _4089 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _927 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _931 = (cbMatDynParam._m0[5u].z * _920) + cbMatDynParam._m0[5u].w;
        float _4100 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) - _927)) + _927) < ((_748 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _759 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _760 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _778 = fma(_661, cbSceneParam._m0[5u].z, fma(_660, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _659));
    float _781 = fma(_661, cbSceneParam._m0[6u].z, fma(_660, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _659));
    float _784 = fma(_661, cbSceneParam._m0[7u].z, fma(_660, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _659));
    uint _797 = uint(roundEven(NORMAL.w)) * 13u;
    uint _798 = _797 + 9u;
    uint _799 = _798 + uint(cbMatDynParam._m0[0u].w);
    float _805 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0)))) * cbInstanceData._m0[_799].x;
    float _806 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) * cbInstanceData._m0[_799].y;
    float _807 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0)))) * cbInstanceData._m0[_799].z;
    float _4111 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _808 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _4122 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _809 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _4133 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _810 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _811 = 1.0 - _666;
    float _812 = _808 * _811;
    float _813 = _809 * _811;
    float _814 = _810 * _811;
    float _819 = (_808 + (-0.039999999105930328369140625)) * _666;
    float _820 = (_809 + (-0.039999999105930328369140625)) * _666;
    float _821 = (_810 + (-0.039999999105930328369140625)) * _666;
    float _822 = _819 + 0.039999999105930328369140625;
    float _824 = _820 + 0.039999999105930328369140625;
    float _825 = _821 + 0.039999999105930328369140625;
    vec4 _834 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _759, cbSceneParam._m0[86u].y * _760));
    float _837 = _834.x * TEXCOORD_3.w;
    float _838 = dot(vec3(_659, _660, _661), vec3(_739, _740, _741));
    float _841 = _838 * 2.0;
    float _845 = (_841 * _659) - _739;
    float _846 = (_841 * _660) - _740;
    float _847 = (_841 * _661) - _741;
    float _851 = abs(dot(vec3(_739, _740, _741), vec3(_659, _660, _661)));
    float _4144 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _853 = sqrt(_662);
    float _866 = exp2((_853 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_853 * 3.0));
    float _872 = (1.0 - _866) * ((_853 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _873 = _866 * _853;
    float _901 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _905 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _909 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1239;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _964 = fma(_909, cbModelParam._m0[26u].z, fma(_905, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _901));
        float _968 = fma(_909, cbModelParam._m0[27u].z, fma(_905, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _901));
        float _972 = fma(_909, cbModelParam._m0[28u].z, fma(_905, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _901));
        float _997 = _901 + _659;
        float _998 = _905 + _660;
        float _999 = _909 + _661;
        float _1009 = fma(_999, cbModelParam._m0[26u].z, fma(_998, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _997)) - _964;
        float _1010 = fma(_999, cbModelParam._m0[27u].z, fma(_998, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _997)) - _968;
        float _1011 = fma(_999, cbModelParam._m0[28u].z, fma(_998, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _997)) - _972;
        float _1015 = inversesqrt(dot(vec3(_1009, _1010, _1011), vec3(_1009, _1010, _1011)));
        float _1028 = ((_1015 * _1009) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_964 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1029 = ((_1015 * _1010) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_968 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1030 = ((_1015 * _1011) / cbModelParam._m0[34u].z) + ((((((_972 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1028, _1029, _1030), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1028, _1029, _1030), 0.0);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1028, _1029, _1030), 0.0);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1028, _1029, _1030), 0.0);
        float _1067 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1033.x + (-0.5));
        float _1069 = _1067 * (_1033.y + (-0.5));
        float _1070 = _1067 * (_1033.z + (-0.5));
        float _1077 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1078 = _1077 * (_1040.x + (-0.5));
        float _1079 = _1077 * (_1040.y + (-0.5));
        float _1080 = _1077 * (_1040.z + (-0.5));
        float _1087 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1047.x + (-0.5));
        float _1089 = _1087 * (_1047.y + (-0.5));
        float _1090 = _1087 * (_1047.z + (-0.5));
        float _1097 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1054.x + (-0.5));
        float _1099 = _1097 * (_1054.y + (-0.5));
        float _1100 = _1097 * (_1054.z + (-0.5));
        float _1101 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1102 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1103 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1104 = _1068 * 0.5;
        float _1105 = _1078 * 0.5;
        float _1106 = _1088 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1121 = (dot(vec3(_659, _660, _661), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _4170 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1131 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1101 + 9.9999997473787516355514526367188e-06);
        float _4181 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1133 = _1132 * 2.0;
        float _1137 = (1.0 - _1132) / (_1132 + 1.0);
        float _4192 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1147 = ((((1.0 - _1138) * (_1133 + 2.0)) * exp2(log2(isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_1133 + 1.0))) + _1138) * _1101;
        float _1148 = _1069 * 0.5;
        float _1149 = _1079 * 0.5;
        float _1150 = _1089 * 0.5;
        float _1151 = dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150));
        float _1156 = (_1151 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1151);
        float _1164 = (dot(vec3(_659, _660, _661), vec3(_1156 * _1148, _1156 * _1149, _1156 * _1150)) + 1.0) * 0.5;
        float _4203 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1173 = sqrt(((_1149 * _1149) + (_1148 * _1148)) + (_1150 * _1150)) / (_1102 + 9.9999997473787516355514526367188e-06);
        float _4214 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1175 = _1174 * 2.0;
        float _1179 = (1.0 - _1174) / (_1174 + 1.0);
        float _4225 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1189 = ((((1.0 - _1180) * (_1175 + 2.0)) * exp2(log2(isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_1175 + 1.0))) + _1180) * _1102;
        float _1190 = _1070 * 0.5;
        float _1191 = _1080 * 0.5;
        float _1192 = _1090 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1206 = (dot(vec3(_659, _660, _661), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _4236 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1215 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1103 + 9.9999997473787516355514526367188e-06);
        float _4247 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1217 = _1216 * 2.0;
        float _1221 = (1.0 - _1216) / (_1216 + 1.0);
        float _4258 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1231 = ((((1.0 - _1222) * (_1217 + 2.0)) * exp2(log2(isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_1217 + 1.0))) + _1222) * _1103;
        _1239 = _1070;
        _1241 = _1069;
        _1242 = _1068;
        _1243 = _1080;
        _1244 = _1079;
        _1245 = _1078;
        _1246 = _1090;
        _1247 = _1089;
        _1248 = _1088;
        _1249 = _1103;
        _1250 = _1102;
        _1251 = _1101;
        _1252 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)));
        _1253 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)));
        _1254 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)));
    }
    else
    {
        _1239 = _1240;
        _1241 = _1240;
        _1242 = _1240;
        _1243 = _1240;
        _1244 = _1240;
        _1245 = _1240;
        _1246 = _1240;
        _1247 = _1240;
        _1248 = _1240;
        _1249 = _1240;
        _1250 = _1240;
        _1251 = _1240;
        _1252 = 0.0;
        _1253 = 0.0;
        _1254 = 0.0;
    }
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1283 = fma(_909, cbModelParam._m0[30u].z, fma(_905, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _901));
        float _1287 = fma(_909, cbModelParam._m0[31u].z, fma(_905, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _901));
        float _1291 = fma(_909, cbModelParam._m0[32u].z, fma(_905, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _901));
        float _1314 = _901 + _659;
        float _1315 = _905 + _660;
        float _1316 = _909 + _661;
        float _1326 = fma(_1316, cbModelParam._m0[30u].z, fma(_1315, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1314)) - _1283;
        float _1327 = fma(_1316, cbModelParam._m0[31u].z, fma(_1315, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1314)) - _1287;
        float _1328 = fma(_1316, cbModelParam._m0[32u].z, fma(_1315, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1314)) - _1291;
        float _1332 = inversesqrt(dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328)));
        float _1345 = ((_1332 * _1326) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1283 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1346 = ((_1332 * _1327) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1287 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1347 = ((_1332 * _1328) / cbModelParam._m0[35u].z) + ((((((_1291 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1349 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1345, _1346, _1347), 0.0);
        vec4 _1356 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1345, _1346, _1347), 0.0);
        vec4 _1363 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1345, _1346, _1347), 0.0);
        vec4 _1370 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1345, _1346, _1347), 0.0);
        float _1382 = exp2((_1349.w + (-0.5)) * 20.0) * 2.0;
        float _1383 = _1382 * (_1349.x + (-0.5));
        float _1384 = _1382 * (_1349.y + (-0.5));
        float _1385 = _1382 * (_1349.z + (-0.5));
        float _1392 = exp2((_1356.w + (-0.5)) * 20.0) * 2.0;
        float _1393 = _1392 * (_1356.x + (-0.5));
        float _1394 = _1392 * (_1356.y + (-0.5));
        float _1395 = _1392 * (_1356.z + (-0.5));
        float _1402 = exp2((_1363.w + (-0.5)) * 20.0) * 2.0;
        float _1403 = _1402 * (_1363.x + (-0.5));
        float _1404 = _1402 * (_1363.y + (-0.5));
        float _1405 = _1402 * (_1363.z + (-0.5));
        float _1412 = exp2((_1370.w + (-0.5)) * 20.0) * 2.0;
        float _1413 = _1412 * (_1370.x + (-0.5));
        float _1414 = _1412 * (_1370.y + (-0.5));
        float _1415 = _1412 * (_1370.z + (-0.5));
        float _1416 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1417 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1418 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1419 = _1383 * 0.5;
        float _1420 = _1393 * 0.5;
        float _1421 = _1403 * 0.5;
        float _1422 = dot(vec3(_1419, _1420, _1421), vec3(_1419, _1420, _1421));
        float _1427 = (_1422 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1422);
        float _1435 = (dot(vec3(_659, _660, _661), vec3(_1427 * _1419, _1427 * _1420, _1427 * _1421)) + 1.0) * 0.5;
        float _4299 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1444 = sqrt(((_1420 * _1420) + (_1419 * _1419)) + (_1421 * _1421)) / (_1416 + 9.9999997473787516355514526367188e-06);
        float _4310 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1446 = _1445 * 2.0;
        float _1450 = (1.0 - _1445) / (_1445 + 1.0);
        float _4321 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1460 = ((((1.0 - _1451) * (_1446 + 2.0)) * exp2(log2(isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_1446 + 1.0))) + _1451) * _1416;
        float _1461 = _1384 * 0.5;
        float _1462 = _1394 * 0.5;
        float _1463 = _1404 * 0.5;
        float _1464 = dot(vec3(_1461, _1462, _1463), vec3(_1461, _1462, _1463));
        float _1469 = (_1464 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1464);
        float _1477 = (dot(vec3(_659, _660, _661), vec3(_1469 * _1461, _1469 * _1462, _1469 * _1463)) + 1.0) * 0.5;
        float _4332 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1486 = sqrt(((_1462 * _1462) + (_1461 * _1461)) + (_1463 * _1463)) / (_1417 + 9.9999997473787516355514526367188e-06);
        float _4343 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1488 = _1487 * 2.0;
        float _1492 = (1.0 - _1487) / (_1487 + 1.0);
        float _4354 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1502 = ((((1.0 - _1493) * (_1488 + 2.0)) * exp2(log2(isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_1488 + 1.0))) + _1493) * _1417;
        float _1503 = _1385 * 0.5;
        float _1504 = _1395 * 0.5;
        float _1505 = _1405 * 0.5;
        float _1506 = dot(vec3(_1503, _1504, _1505), vec3(_1503, _1504, _1505));
        float _1511 = (_1506 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1506);
        float _1519 = (dot(vec3(_659, _660, _661), vec3(_1511 * _1503, _1511 * _1504, _1511 * _1505)) + 1.0) * 0.5;
        float _4365 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1528 = sqrt(((_1504 * _1504) + (_1503 * _1503)) + (_1505 * _1505)) / (_1418 + 9.9999997473787516355514526367188e-06);
        float _4376 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _1530 = _1529 * 2.0;
        float _1534 = (1.0 - _1529) / (_1529 + 1.0);
        float _4387 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _1544 = ((((1.0 - _1535) * (_1530 + 2.0)) * exp2(log2(isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_1530 + 1.0))) + _1535) * _1418;
        _1552 = _1385;
        _1553 = _1384;
        _1554 = _1383;
        _1555 = _1395;
        _1556 = _1394;
        _1557 = _1393;
        _1558 = _1405;
        _1559 = _1404;
        _1560 = _1403;
        _1561 = _1418;
        _1562 = _1417;
        _1563 = _1416;
        _1564 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)));
        _1565 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)));
        _1566 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)));
    }
    else
    {
        _1552 = _1240;
        _1553 = _1240;
        _1554 = _1240;
        _1555 = _1240;
        _1556 = _1240;
        _1557 = _1240;
        _1558 = _1240;
        _1559 = _1240;
        _1560 = _1240;
        _1561 = _1240;
        _1562 = _1240;
        _1563 = _1240;
        _1564 = 0.0;
        _1565 = 0.0;
        _1566 = 0.0;
    }
    float _1576 = (cbModelParam._m0[1u].x * (_1564 - _1252)) + _1252;
    float _1577 = (cbModelParam._m0[1u].x * (_1565 - _1253)) + _1253;
    float _1578 = (cbModelParam._m0[1u].x * (_1566 - _1254)) + _1254;
    float _1599 = fma(_1578, cbSceneParam._m0[89u].z, fma(_1577, cbSceneParam._m0[89u].y, _1576 * cbSceneParam._m0[89u].x));
    float _1602 = fma(_1578, cbSceneParam._m0[90u].z, fma(_1577, cbSceneParam._m0[90u].y, _1576 * cbSceneParam._m0[90u].x));
    float _1605 = fma(_1578, cbSceneParam._m0[91u].z, fma(_1577, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1576));
    float _1620 = _845 * 0.5;
    float _1621 = _846 * 0.5;
    float _1622 = _847 * 0.5;
    float _1623 = dot(vec4(_1620, _1621, _1622, 1.0), vec4(_1554, _1557, _1560, _1563));
    float _1626 = dot(vec4(_1620, _1621, _1622, 1.0), vec4(_1553, _1556, _1559, _1562));
    float _1629 = dot(vec4(_1620, _1621, _1622, 1.0), vec4(_1552, _1555, _1558, _1561));
    float _1663;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1636 = dot(vec4(_1620, _1621, _1622, 1.0), vec4(_1239, _1243, _1246, _1249));
        float _1640 = dot(vec4(_1620, _1621, _1622, 1.0), vec4(_1241, _1244, _1247, _1250));
        float _1644 = dot(vec4(_1620, _1621, _1622, 1.0), vec4(_1242, _1245, _1248, _1251));
        float _1651 = dot(vec4(cbModelParam._m0[39u]), vec4(_1620, _1621, _1622, 1.0));
        _1663 = dot(vec3(isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)), isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)), isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1651) ? 0.0 : (isnan(0.0) ? _1651 : max(0.0, _1651))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1663 = 1.0;
    }
    float _1674;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1665 = dot(vec4(cbModelParam._m0[40u]), vec4(_1620, _1621, _1622, 1.0));
        _1674 = dot(vec3(isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0)), isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)), isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1665) ? 0.0 : (isnan(0.0) ? _1665 : max(0.0, _1665))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1674 = 1.0;
    }
    float _1678 = (_1674 * cbModelParam._m0[1u].x) + (_1663 * (1.0 - cbModelParam._m0[1u].x));
    float _1688 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _662);
    float _1689 = isnan(_1688) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1688 : min(cbModelParam._m0[25u].z, _1688));
    float _1769;
    float _1771;
    float _1773;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1736 = fma(_909, cbModelParam._m0[13u].z, fma(_905, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _901)) + cbModelParam._m0[13u].w;
        float _1740 = fma(_909, cbModelParam._m0[14u].z, fma(_905, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _901)) + cbModelParam._m0[14u].w;
        float _1744 = fma(_909, cbModelParam._m0[15u].z, fma(_905, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _901)) + cbModelParam._m0[15u].w;
        float _1747 = fma(_847, cbModelParam._m0[13u].z, fma(_846, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _845));
        float _1750 = fma(_847, cbModelParam._m0[14u].z, fma(_846, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _845));
        float _1753 = fma(_847, cbModelParam._m0[15u].z, fma(_846, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _845));
        float _1781;
        if (_1747 > 0.0)
        {
            _1781 = abs((1.0 - _1736) / _1747);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1747 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1736 + 1.0) / _1747);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1781 = frontier_phi_17_15_ladder;
        }
        float _1954;
        if (_1750 > 0.0)
        {
            _1954 = abs((1.0 - _1740) / _1750);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1750 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1740 + 1.0) / _1750);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1954 = frontier_phi_26_22_ladder;
        }
        float _2249;
        if (_1753 > 0.0)
        {
            _2249 = abs((1.0 - _1744) / _1753);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1753 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1744 + 1.0) / _1753);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2249 = frontier_phi_38_33_ladder;
        }
        float _2251 = isnan(_1954) ? _1781 : (isnan(_1781) ? _1954 : min(_1781, _1954));
        float _2252 = isnan(_2249) ? _2251 : (isnan(_2251) ? _2249 : min(_2251, _2249));
        float _2256 = (_2252 * _1747) + _1736;
        float _2257 = (_2252 * _1750) + _1740;
        float _2258 = (_2252 * _1753) + _1744;
        float _2259 = _2252 * 9.9999997473787516355514526367188e-05;
        float _2261 = (-1.0) - _2259;
        float _2263 = _2259 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2258 > _2263) || ((_2258 < _2261) || ((_2257 > _2263) || ((_2257 < _2261) || ((_2256 < _2261) || (_2256 > _2263))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2403 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2258, cbModelParam._m0[9u].z, fma(_2257, cbModelParam._m0[9u].y, _2256 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2258, cbModelParam._m0[10u].z, fma(_2257, cbModelParam._m0[10u].y, _2256 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2258, cbModelParam._m0[11u].z, fma(_2257, cbModelParam._m0[11u].y, _2256 * cbModelParam._m0[11u].x))), _1689);
            frontier_phi_16_38_ladder = _2403.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2403.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2403.x * cbModelParam._m0[1u].y;
        }
        _1769 = frontier_phi_16_38_ladder_2;
        _1771 = frontier_phi_16_38_ladder_1;
        _1773 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1757 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_845, _846, _847), _1689);
        _1769 = _1757.x * cbModelParam._m0[1u].y;
        _1771 = _1757.y * cbModelParam._m0[1u].y;
        _1773 = _1757.z * cbModelParam._m0[1u].y;
    }
    float _1777 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _662);
    float _1778 = isnan(_1777) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1777 : min(cbModelParam._m0[25u].w, _1777));
    float _1869;
    float _1871;
    float _1873;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1833 = fma(_909, cbModelParam._m0[21u].z, fma(_905, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _901)) + cbModelParam._m0[21u].w;
        float _1837 = fma(_909, cbModelParam._m0[22u].z, fma(_905, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _901)) + cbModelParam._m0[22u].w;
        float _1841 = fma(_909, cbModelParam._m0[23u].z, fma(_905, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _901)) + cbModelParam._m0[23u].w;
        float _1844 = fma(_847, cbModelParam._m0[21u].z, fma(_846, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _845));
        float _1847 = fma(_847, cbModelParam._m0[22u].z, fma(_846, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _845));
        float _1850 = fma(_847, cbModelParam._m0[23u].z, fma(_846, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _845));
        float _1959;
        if (_1844 > 0.0)
        {
            _1959 = abs((1.0 - _1833) / _1844);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1833 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1959 = frontier_phi_28_24_ladder;
        }
        float _2276;
        if (_1847 > 0.0)
        {
            _2276 = abs((1.0 - _1837) / _1847);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1847 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1837 + 1.0) / _1847);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2276 = frontier_phi_40_35_ladder;
        }
        float _2614;
        if (_1850 > 0.0)
        {
            _2614 = abs((1.0 - _1841) / _1850);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1850 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1841 + 1.0) / _1850);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2614 = frontier_phi_50_47_ladder;
        }
        float _2616 = isnan(_2276) ? _1959 : (isnan(_1959) ? _2276 : min(_1959, _2276));
        float _2617 = isnan(_2614) ? _2616 : (isnan(_2616) ? _2614 : min(_2616, _2614));
        float _2621 = (_2617 * _1844) + _1833;
        float _2622 = (_2617 * _1847) + _1837;
        float _2623 = (_2617 * _1850) + _1841;
        float _2624 = _2617 * 9.9999997473787516355514526367188e-05;
        float _2625 = (-1.0) - _2624;
        float _2627 = _2624 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2623 > _2627) || ((_2623 < _2625) || ((_2622 > _2627) || ((_2622 < _2625) || ((_2621 < _2625) || (_2621 > _2627))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2745 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2623, cbModelParam._m0[17u].z, fma(_2622, cbModelParam._m0[17u].y, _2621 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2623, cbModelParam._m0[18u].z, fma(_2622, cbModelParam._m0[18u].y, _2621 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2623, cbModelParam._m0[19u].z, fma(_2622, cbModelParam._m0[19u].y, _2621 * cbModelParam._m0[19u].x))), _1778);
            frontier_phi_25_50_ladder = _2745.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2745.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2745.x * cbModelParam._m0[1u].z;
        }
        _1869 = frontier_phi_25_50_ladder_2;
        _1871 = frontier_phi_25_50_ladder_1;
        _1873 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1853 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_845, _846, _847), _1778);
        _1869 = _1853.x * cbModelParam._m0[1u].z;
        _1871 = _1853.y * cbModelParam._m0[1u].z;
        _1873 = _1853.z * cbModelParam._m0[1u].z;
    }
    float _1886 = (((_872 * _822) + _873) * _837) * ((cbModelParam._m0[1u].w * (_1869 - _1769)) + _1769);
    float _1888 = (((_872 * _824) + _873) * _837) * ((cbModelParam._m0[1u].w * (_1871 - _1771)) + _1771);
    float _1890 = (((_872 * _825) + _873) * _837) * ((cbModelParam._m0[1u].w * (_1873 - _1773)) + _1773);
    float _1893 = fma(_1890, cbSceneParam._m0[89u].z, fma(_1888, cbSceneParam._m0[89u].y, _1886 * cbSceneParam._m0[89u].x));
    float _1896 = fma(_1890, cbSceneParam._m0[90u].z, fma(_1888, cbSceneParam._m0[90u].y, _1886 * cbSceneParam._m0[90u].x));
    float _1899 = fma(_1890, cbSceneParam._m0[91u].z, fma(_1888, cbSceneParam._m0[91u].y, _1886 * cbSceneParam._m0[91u].x));
    float _1933 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1937 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1941 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1945 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1946 = _1933 / _1945;
    float _1947 = _1937 / _1945;
    float _1948 = _1941 / _1945;
    float _2095;
    float _2096;
    float _2097;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1975 = ((uint(_1948 > cbSceneParam._m0[59u].y) + uint(_1948 > cbSceneParam._m0[59u].x)) + uint(_1948 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1976 = _1975 + 43u;
        uint _1984 = _1975 + 44u;
        uint _1992 = _1975 + 45u;
        uint _2000 = _1975 + 46u;
        float _2011 = fma(_1945, cbSceneParam._m0[_1976].w, fma(_1941, cbSceneParam._m0[_1976].z, fma(_1937, cbSceneParam._m0[_1976].y, _1933 * cbSceneParam._m0[_1976].x)));
        float _2015 = fma(_1945, cbSceneParam._m0[_1984].w, fma(_1941, cbSceneParam._m0[_1984].z, fma(_1937, cbSceneParam._m0[_1984].y, _1933 * cbSceneParam._m0[_1984].x)));
        float _2023 = fma(_1945, cbSceneParam._m0[_2000].w, fma(_1941, cbSceneParam._m0[_2000].z, fma(_1937, cbSceneParam._m0[_2000].y, _1933 * cbSceneParam._m0[_2000].x)));
        float _2028 = cbSceneParam._m0[33u].z * _2023;
        float _2030 = cbSceneParam._m0[33u].w * _2023;
        float _2033 = fma(_1945, cbSceneParam._m0[_1992].w, fma(_1941, cbSceneParam._m0[_1992].z, fma(_1937, cbSceneParam._m0[_1992].y, _1933 * cbSceneParam._m0[_1992].x))) / _2023;
        float _2081 = (cbSceneParam._m0[33u].x - sqrt(((_1947 * _1947) + (_1946 * _1946)) + (_1948 * _1948))) * cbSceneParam._m0[33u].y;
        float _4513 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
        float _2088 = (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2028 + _2011) / _2023, (_2030 + _2015) / _2023), _2033), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2030 + _2011) / _2023, (_2015 - _2028) / _2023), _2033), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2011 - _2028) / _2023, (_2015 - _2030) / _2023), _2033), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2011 - _2030) / _2023, (_2028 + _2015) / _2023), _2033), 0.0)).x), vec4(0.25)));
        _2095 = 1.0 - (_2088 * cbSceneParam._m0[34u].x);
        _2096 = 1.0 - (_2088 * cbSceneParam._m0[34u].y);
        _2097 = 1.0 - (_2088 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2095 = 1.0;
        _2096 = 1.0;
        _2097 = 1.0;
    }
    float _2161;
    float _2163;
    float _2165;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2149 = fma(_1945, cbSceneParam._m0[63u].w, fma(_1941, cbSceneParam._m0[63u].z, fma(_1937, cbSceneParam._m0[63u].y, _1933 * cbSceneParam._m0[63u].x)));
        float _2150 = fma(_1945, cbSceneParam._m0[60u].w, fma(_1941, cbSceneParam._m0[60u].z, fma(_1937, cbSceneParam._m0[60u].y, _1933 * cbSceneParam._m0[60u].x))) / _2149;
        float _2151 = fma(_1945, cbSceneParam._m0[61u].w, fma(_1941, cbSceneParam._m0[61u].z, fma(_1937, cbSceneParam._m0[61u].y, _1933 * cbSceneParam._m0[61u].x))) / _2149;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2150 >= cbSceneParam._m0[64u].x) && (_2151 >= cbSceneParam._m0[64u].y)) && (_2150 <= cbSceneParam._m0[64u].z)) && (_2151 <= cbSceneParam._m0[64u].w))
        {
            float _2289 = fma(_1945, cbSceneParam._m0[62u].w, fma(_1941, cbSceneParam._m0[62u].z, fma(_1937, cbSceneParam._m0[62u].y, _1933 * cbSceneParam._m0[62u].x))) / _2149;
            float _2293 = isnan(cbSceneParam._m0[41u].w) ? _2289 : (isnan(_2289) ? cbSceneParam._m0[41u].w : max(_2289, cbSceneParam._m0[41u].w));
            float _2336 = (cbSceneParam._m0[33u].x - sqrt(((_1947 * _1947) + (_1946 * _1946)) + (_1948 * _1948))) * cbSceneParam._m0[33u].y;
            float _4529 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
            float _2343 = (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2150, cbSceneParam._m0[33u].w + _2151), _2293), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2150, _2151 - cbSceneParam._m0[33u].z), _2293), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2150 - cbSceneParam._m0[33u].z, _2151 - cbSceneParam._m0[33u].w), _2293), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2150 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2151), _2293), 0.0)).x), vec4(0.25)));
            float _2347 = 1.0 - (_2343 * cbSceneParam._m0[34u].x);
            float _2348 = 1.0 - (_2343 * cbSceneParam._m0[34u].y);
            float _2349 = 1.0 - (_2343 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2349) ? _2097 : (isnan(_2097) ? _2349 : min(_2097, _2349));
            frontier_phi_37_36_ladder_1 = isnan(_2348) ? _2096 : (isnan(_2096) ? _2348 : min(_2096, _2348));
            frontier_phi_37_36_ladder_2 = isnan(_2347) ? _2095 : (isnan(_2095) ? _2347 : min(_2095, _2347));
        }
        else
        {
            frontier_phi_37_36_ladder = _2097;
            frontier_phi_37_36_ladder_1 = _2096;
            frontier_phi_37_36_ladder_2 = _2095;
        }
        _2161 = frontier_phi_37_36_ladder_2;
        _2163 = frontier_phi_37_36_ladder_1;
        _2165 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2161 = _2095;
        _2163 = _2096;
        _2165 = _2097;
    }
    uvec4 _2170 = floatBitsToUint(cbInstanceData._m0[_797 + 5u]);
    uint _2172 = _2170.x * 14u;
    uint _2173 = _2172 + 13u;
    float _2180 = _837 + (-1.0);
    float _2185 = (cbLight._m0[_2173].x * _2180) + 1.0;
    float _2186 = (cbLight._m0[_2173].y * _2180) + 1.0;
    float _2187 = (cbLight._m0[_2173].z * _2180) + 1.0;
    float _2188 = (cbLight._m0[_2173].w * _2180) + 1.0;
    uint _2189 = _2172 + 5u;
    float _2195 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
    uint _2199 = _2172 + 4u;
    float _2208 = isnan(1.0) ? _2185 : (isnan(_2185) ? 1.0 : min(_2185, 1.0));
    uint _2212 = _2172 | 1u;
    float _2223 = dot(vec3(cbLight._m0[_2172].xyz), vec3(_659, _660, _661));
    float _2226 = dot(vec3(cbLight._m0[_2212].xyz), vec3(_659, _660, _661));
    float _4565 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _4576 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2231 = (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * 0.3183098733425140380859375;
    float _2233 = (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * 0.3183098733425140380859375;
    float _2240 = ((cbLight._m0[_2189].x * _2195) * _2233) + (((cbLight._m0[_2199].x * _2161) * _2208) * _2231);
    float _2241 = ((_2195 * cbLight._m0[_2189].y) * _2233) + (((cbLight._m0[_2199].y * _2163) * _2208) * _2231);
    float _2242 = ((_2195 * cbLight._m0[_2189].z) * _2233) + (((cbLight._m0[_2199].z * _2165) * _2208) * _2231);
    uvec4 _2246 = floatBitsToUint(cbLight._m0[_2172 + 12u]);
    bool _2248 = _2246.x == 0u;
    float _2350;
    float _2352;
    float _2354;
    if (_2248)
    {
        _2350 = _2240;
        _2352 = _2241;
        _2354 = _2242;
    }
    else
    {
        uint _2358 = _2172 + 6u;
        float _2374 = (dot(vec3(cbLight._m0[_2172 + 2u].xyz), vec3(_659, _660, _661)) * 0.5) + 0.5;
        float _2375 = _2374 * _2374;
        float _4587 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2376 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
        float _2377 = isnan(1.0) ? _2187 : (isnan(_2187) ? 1.0 : min(_2187, 1.0));
        _2350 = (((cbLight._m0[_2358].x * 0.3183098733425140380859375) * _2376) * _2377) + _2240;
        _2352 = (((cbLight._m0[_2358].y * 0.3183098733425140380859375) * _2376) * _2377) + _2241;
        _2354 = (((cbLight._m0[_2358].z * 0.3183098733425140380859375) * _2376) * _2377) + _2242;
    }
    bool _2357 = _2246.y == 0u;
    float _2412;
    float _2414;
    float _2416;
    if (_2357)
    {
        _2412 = _2350;
        _2414 = _2352;
        _2416 = _2354;
    }
    else
    {
        uint _2585 = _2172 + 7u;
        float _2601 = (dot(vec3(cbLight._m0[_2172 + 3u].xyz), vec3(_659, _660, _661)) * 0.5) + 0.5;
        float _2602 = _2601 * _2601;
        float _4603 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        float _2603 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _2604 = isnan(1.0) ? _2188 : (isnan(_2188) ? 1.0 : min(_2188, 1.0));
        _2412 = (((cbLight._m0[_2585].x * 0.3183098733425140380859375) * _2603) * _2604) + _2350;
        _2414 = (((cbLight._m0[_2585].y * 0.3183098733425140380859375) * _2603) * _2604) + _2352;
        _2416 = (((cbLight._m0[_2585].z * 0.3183098733425140380859375) * _2603) * _2604) + _2354;
    }
    uint _2419 = _2172 + 8u;
    float _2432 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2172].w)) * _662) * 0.949999988079071044921875);
    float _2433 = _2432 * _2432;
    float _2434 = cbLight._m0[_2172].x + _739;
    float _2435 = cbLight._m0[_2172].y + _740;
    float _2436 = cbLight._m0[_2172].z + _741;
    float _2440 = inversesqrt(dot(vec3(_2434, _2435, _2436), vec3(_2434, _2435, _2436)));
    float _2441 = _2440 * _2434;
    float _2442 = _2440 * _2435;
    float _2443 = _2440 * _2436;
    float _2444 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_2172].xyz));
    float _4619 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
    float _2447 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
    float _4630 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _2448 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
    float _2449 = dot(vec3(_659, _660, _661), vec3(_2441, _2442, _2443));
    float _4641 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
    float _2452 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
    float _2453 = dot(vec3(cbLight._m0[_2172].xyz), vec3(_2441, _2442, _2443));
    float _4652 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
    float _2457 = _2433 * _2433;
    float _2461 = ((_2452 * _2452) * (_2457 + (-1.0))) + 1.0;
    float _2469 = exp2(log2(1.0 - (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0)))) * 5.0);
    float _2470 = 0.959999978542327880859375 - _819;
    float _2472 = 0.959999978542327880859375 - _820;
    float _2473 = 0.959999978542327880859375 - _821;
    float _2480 = 1.0 - _2433;
    float _2491 = (0.5 / (((_2448 * ((_2447 * _2480) + _2433)) + 9.9999999392252902907785028219223e-09) + (((_2448 * _2480) + _2433) * _2447))) * _2447;
    float _4663 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
    float _2493 = (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * (_2457 / ((_2461 * _2461) * 3.141590118408203125));
    uint _2507 = _2172 + 9u;
    float _2518 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2212].w)) * _662) * 0.949999988079071044921875);
    float _2519 = _2518 * _2518;
    float _2520 = cbLight._m0[_2212].x + _739;
    float _2521 = cbLight._m0[_2212].y + _740;
    float _2522 = cbLight._m0[_2212].z + _741;
    float _2526 = inversesqrt(dot(vec3(_2520, _2521, _2522), vec3(_2520, _2521, _2522)));
    float _2527 = _2526 * _2520;
    float _2528 = _2526 * _2521;
    float _2529 = _2526 * _2522;
    float _2530 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_2212].xyz));
    float _4674 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
    float _2533 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
    float _2534 = dot(vec3(_659, _660, _661), vec3(_2527, _2528, _2529));
    float _4685 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
    float _2537 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
    float _2538 = dot(vec3(cbLight._m0[_2212].xyz), vec3(_2527, _2528, _2529));
    float _4696 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
    float _2542 = _2519 * _2519;
    float _2546 = ((_2537 * _2537) * (_2542 + (-1.0))) + 1.0;
    float _2553 = exp2(log2(1.0 - (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0)))) * 5.0);
    float _2560 = 1.0 - _2519;
    float _2570 = (0.5 / (((_2448 * ((_2533 * _2560) + _2519)) + 9.9999999392252902907785028219223e-09) + (((_2448 * _2560) + _2519) * _2533))) * _2533;
    float _4707 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
    float _2572 = (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * (_2542 / ((_2546 * _2546) * 3.141590118408203125));
    float _2582 = (((((_2553 * _2470) + _822) * cbLight._m0[_2507].x) * _2572) * _2195) + ((((cbLight._m0[_2419].x * _2161) * ((_2469 * _2470) + _822)) * _2493) * _2208);
    float _2583 = (((((_2553 * _2472) + _824) * cbLight._m0[_2507].y) * _2572) * _2195) + ((((cbLight._m0[_2419].y * _2163) * ((_2469 * _2472) + _824)) * _2493) * _2208);
    float _2584 = (((((_2553 * _2473) + _825) * cbLight._m0[_2507].z) * _2572) * _2195) + ((((cbLight._m0[_2419].z * _2165) * ((_2469 * _2473) + _825)) * _2493) * _2208);
    float _2640;
    float _2642;
    float _2644;
    if (_2248)
    {
        _2640 = _2582;
        _2642 = _2583;
        _2644 = _2584;
    }
    else
    {
        uint _2646 = _2172 + 2u;
        uint _2650 = _2172 + 10u;
        float _2664 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2646].w)) * _662) * 0.949999988079071044921875);
        float _2665 = _2664 * _2664;
        float _2666 = cbLight._m0[_2646].x + _739;
        float _2667 = cbLight._m0[_2646].y + _740;
        float _2668 = cbLight._m0[_2646].z + _741;
        float _2672 = inversesqrt(dot(vec3(_2666, _2667, _2668), vec3(_2666, _2667, _2668)));
        float _2673 = _2672 * _2666;
        float _2674 = _2672 * _2667;
        float _2675 = _2672 * _2668;
        float _2676 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_2646].xyz));
        float _4718 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
        float _2679 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
        float _2680 = dot(vec3(_659, _660, _661), vec3(_2673, _2674, _2675));
        float _4729 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
        float _2683 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
        float _2684 = dot(vec3(cbLight._m0[_2646].xyz), vec3(_2673, _2674, _2675));
        float _4740 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        float _2688 = _2665 * _2665;
        float _2692 = ((_2683 * _2683) * (_2688 + (-1.0))) + 1.0;
        float _2699 = exp2(log2(1.0 - (isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0)))) * 5.0);
        float _2706 = 1.0 - _2665;
        float _2716 = (0.5 / (((_2448 * ((_2679 * _2706) + _2665)) + 9.9999999392252902907785028219223e-09) + (((_2448 * _2706) + _2665) * _2679))) * _2679;
        float _4751 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
        float _2718 = (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0))) * (_2688 / ((_2692 * _2692) * 3.141590118408203125));
        float _2719 = isnan(1.0) ? _2187 : (isnan(_2187) ? 1.0 : min(_2187, 1.0));
        _2640 = (((((_2699 * _2470) + _822) * cbLight._m0[_2650].x) * _2718) * _2719) + _2582;
        _2642 = (((((_2699 * _2472) + _824) * cbLight._m0[_2650].y) * _2718) * _2719) + _2583;
        _2644 = (((((_2699 * _2473) + _825) * cbLight._m0[_2650].z) * _2718) * _2719) + _2584;
    }
    float _2750;
    float _2752;
    float _2754;
    if (_2357)
    {
        _2750 = _2640;
        _2752 = _2642;
        _2754 = _2644;
    }
    else
    {
        uint _2761 = _2172 + 3u;
        uint _2765 = _2172 + 11u;
        float _2779 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2761].w)) * _662) * 0.949999988079071044921875);
        float _2780 = _2779 * _2779;
        float _2781 = cbLight._m0[_2761].x + _739;
        float _2782 = cbLight._m0[_2761].y + _740;
        float _2783 = cbLight._m0[_2761].z + _741;
        float _2787 = inversesqrt(dot(vec3(_2781, _2782, _2783), vec3(_2781, _2782, _2783)));
        float _2788 = _2787 * _2781;
        float _2789 = _2787 * _2782;
        float _2790 = _2787 * _2783;
        float _2791 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_2761].xyz));
        float _4767 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
        float _2794 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
        float _2795 = dot(vec3(_659, _660, _661), vec3(_2788, _2789, _2790));
        float _4778 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
        float _2798 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
        float _2799 = dot(vec3(cbLight._m0[_2761].xyz), vec3(_2788, _2789, _2790));
        float _4789 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
        float _2803 = _2780 * _2780;
        float _2807 = ((_2798 * _2798) * (_2803 + (-1.0))) + 1.0;
        float _2814 = exp2(log2(1.0 - (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0)))) * 5.0);
        float _2821 = 1.0 - _2780;
        float _2831 = (0.5 / (((_2448 * ((_2794 * _2821) + _2780)) + 9.9999999392252902907785028219223e-09) + (((_2448 * _2821) + _2780) * _2794))) * _2794;
        float _4800 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
        float _2833 = (isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0))) * (_2803 / ((_2807 * _2807) * 3.141590118408203125));
        float _2834 = isnan(1.0) ? _2188 : (isnan(_2188) ? 1.0 : min(_2188, 1.0));
        _2750 = (((((_2814 * _2470) + _822) * cbLight._m0[_2765].x) * _2833) * _2834) + _2640;
        _2752 = (((((_2814 * _2472) + _824) * cbLight._m0[_2765].y) * _2833) * _2834) + _2642;
        _2754 = (((((_2814 * _2473) + _825) * cbLight._m0[_2765].z) * _2833) * _2834) + _2644;
    }
    float _2900;
    float _2902;
    float _2904;
    float _2906;
    float _2908;
    float _2910;
    if (_2170.y == 0u)
    {
        uvec4 _2855 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2856 = _2855.x;
        uint _2867 = uint((float(_2855.y) * floor(float(uint(cbSceneParam._m0[85u].y * _760) / _2856))) + floor(float(uint(cbSceneParam._m0[85u].x * _759) / _2856)));
        float _2877 = (log2(_1948 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2878 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
        uint _2881 = uint(isnan(14.0) ? _2878 : (isnan(_2878) ? 14.0 : min(_2878, 14.0)));
        uvec4 _2886 = texelFetch(g_lightClusterGridBuffer, int(((_2881 << 2u) + (_2867 << 6u)) >> 2u));
        uint _2887 = _2886.x;
        uint _2888 = _2855.z;
        float _2996;
        float _2998;
        float _3000;
        float _3002;
        float _3004;
        float _3006;
        if (((((1u << ((_2888 >> 4u) & 15u)) + 4294967295u) & _2887) == 0u) || ((_2888 & 240u) == 0u))
        {
            _2996 = 0.0;
            _2998 = 0.0;
            _3000 = 0.0;
            _3002 = 0.0;
            _3004 = 0.0;
            _3006 = 0.0;
        }
        else
        {
            float _2997;
            float _2999;
            float _3001;
            float _3003;
            float _3005;
            float _3007;
            float _3158 = 0.0;
            float _3159 = 0.0;
            float _3160 = 0.0;
            float _3161 = 0.0;
            float _3162 = 0.0;
            float _3163 = 0.0;
            uint _3164 = 0u;
            uint _3173;
            bool _3174;
            for (;;)
            {
                _3173 = texelFetch(g_lightClassification, int((((_2881 << 5u) + (_2867 << 9u)) + (_3164 << 2u)) >> 2u)).x;
                _3174 = _3173 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3174)
                {
                    frontier_phi_71_pred = _3163;
                    frontier_phi_71_pred_1 = _3162;
                    frontier_phi_71_pred_2 = _3161;
                    frontier_phi_71_pred_3 = _3160;
                    frontier_phi_71_pred_4 = _3159;
                    frontier_phi_71_pred_5 = _3158;
                }
                else
                {
                    float _3303;
                    float _3304;
                    float _3305;
                    float _3306;
                    float _3307;
                    float _3308;
                    uint _3309;
                    _3303 = _3158;
                    _3304 = _3159;
                    _3305 = _3160;
                    _3306 = _3161;
                    _3307 = _3162;
                    _3308 = _3163;
                    _3309 = _3173;
                    float _3230;
                    float _3231;
                    float _3232;
                    float _3233;
                    float _3234;
                    float _3235;
                    for (;;)
                    {
                        uint _3313 = uint(findLSB(_3309)) + (_3164 << 5u);
                        uint _3310 = (_3309 + 4294967295u) & _3309;
                        uint _3315 = _3313 * 48u;
                        vec4 _3329 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3315)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 3u)).x));
                        uint _3335 = (_3313 * 48u) + 4u;
                        vec4 _3348 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3335)).x, texelFetch(g_PointLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3335 + 3u)).x));
                        uint _3354 = (_3313 * 48u) + 8u;
                        vec3 _3365 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3354)).x, texelFetch(g_PointLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3354 + 2u)).x));
                        float _3369 = _3329.x - _1946;
                        float _3370 = _3329.y - _1947;
                        float _3371 = _3329.z - _1948;
                        float _3372 = dot(vec3(_3369, _3370, _3371), vec3(_3369, _3370, _3371));
                        float _3375 = inversesqrt(_3372);
                        float _3376 = _3375 * _3369;
                        float _3377 = _3375 * _3370;
                        float _3378 = _3375 * _3371;
                        float _3379 = dot(vec3(_778, _781, _784), vec3(_3376, _3377, _3378));
                        float _3384 = 1.0 - (_3372 * _3329.w);
                        float _4826 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                        float _3385 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
                        float _3386 = sqrt(_3372) * _3348.w;
                        float _3389 = 1.39999997615814208984375 / (_3386 + 1.39999997615814208984375);
                        float _3390 = _3389 * _3389;
                        float _3393 = ((1.0 - _3390) * _3379) + _3390;
                        float _3396 = _3386 * _3386;
                        float _3400 = ((isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0))) * _3385) / ((_3396 * 0.699999988079071044921875) + 1.0);
                        float _3404 = (-0.0) - _1946;
                        float _3405 = (-0.0) - _1947;
                        float _3406 = (-0.0) - _1948;
                        float _3410 = inversesqrt(dot(vec3(_3404, _3405, _3406), vec3(_3404, _3405, _3406)));
                        float _3411 = _3410 * _3404;
                        float _3412 = _3410 * _3405;
                        float _3413 = _3410 * _3406;
                        float _3420 = exp2(log2(1.0 / ((_3396 * 3.5) + 5.0)) * 0.25);
                        float _3421 = 1.0 - _853;
                        float _3428 = sqrt(1.0 - ((1.0 - (_3421 * _3421)) * (1.0 - (_3420 * _3420))));
                        float _3429 = _3428 * _3428;
                        float _3430 = _3429 * _3429;
                        float _3431 = _3411 + _3376;
                        float _3432 = _3412 + _3377;
                        float _3433 = _3413 + _3378;
                        float _3437 = inversesqrt(dot(vec3(_3431, _3432, _3433), vec3(_3431, _3432, _3433)));
                        float _3441 = dot(vec3(_778, _781, _784), vec3(_3411, _3412, _3413));
                        float _4842 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                        float _3444 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
                        float _3445 = dot(vec3(_778, _781, _784), vec3(_3437 * _3431, _3437 * _3432, _3437 * _3433));
                        float _4853 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                        float _3448 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
                        float _3452 = ((_3448 * _3448) * (_3430 + (-1.0))) + 1.0;
                        float _3453 = _3389 * _3429;
                        float _3454 = _3453 * _3453;
                        float _3457 = ((1.0 - _3454) * _3379) + _3454;
                        float _4864 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                        float _3458 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
                        float _3459 = 1.0 - _3429;
                        float _3469 = (0.5 / (((_3458 * ((_3444 * _3459) + _3429)) + 9.9999999392252902907785028219223e-09) + (((_3458 * _3459) + _3429) * _3444))) * _3458;
                        float _4875 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                        float _3480 = (((_3430 * 3.1415927410125732421875) * (isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0)))) / ((_3452 * _3452) * ((_3396 * 2.1991131305694580078125) + 3.141590118408203125))) * _3385;
                        _3233 = (_3400 * _3348.x) + _3306;
                        _3234 = (_3400 * _3348.y) + _3307;
                        _3235 = (_3400 * _3348.z) + _3308;
                        _3230 = (_3480 * _3365.x) + _3303;
                        _3231 = (_3480 * _3365.y) + _3304;
                        _3232 = (_3480 * _3365.z) + _3305;
                        if (_3310 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3303 = _3230;
                            _3304 = _3231;
                            _3305 = _3232;
                            _3306 = _3233;
                            _3307 = _3234;
                            _3308 = _3235;
                            _3309 = _3310;
                        }
                    }
                    frontier_phi_71_pred = _3235;
                    frontier_phi_71_pred_1 = _3234;
                    frontier_phi_71_pred_2 = _3233;
                    frontier_phi_71_pred_3 = _3232;
                    frontier_phi_71_pred_4 = _3231;
                    frontier_phi_71_pred_5 = _3230;
                }
                _3007 = frontier_phi_71_pred;
                _3005 = frontier_phi_71_pred_1;
                _3003 = frontier_phi_71_pred_2;
                _3001 = frontier_phi_71_pred_3;
                _2999 = frontier_phi_71_pred_4;
                _2997 = frontier_phi_71_pred_5;
                uint _3165 = _3164 + 1u;
                if (_3165 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3158 = _2997;
                    _3159 = _2999;
                    _3160 = _3001;
                    _3161 = _3003;
                    _3162 = _3005;
                    _3163 = _3007;
                    _3164 = _3165;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2996 = _2997;
            _2998 = _2999;
            _3000 = _3001;
            _3002 = _3003;
            _3004 = _3005;
            _3006 = _3007;
        }
        uvec4 _3010 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3011 = _3010.z;
        uint _3013 = (_3011 >> 8u) & 15u;
        float _3126;
        float _3128;
        float _3130;
        float _3132;
        float _3134;
        float _3136;
        if (((4294967295u << _3013) & _2887) == 0u)
        {
            _3126 = _2996;
            _3128 = _2998;
            _3130 = _3000;
            _3132 = _3002;
            _3134 = _3004;
            _3136 = _3006;
        }
        else
        {
            float _3151 = inversesqrt(dot(vec3(_1946, _1947, _1948), vec3(_1946, _1947, _1948)));
            float _3152 = _3151 * _1946;
            float _3153 = _3151 * _1947;
            float _3154 = _3151 * _1948;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3013 < ((_3011 >> 12u) & 15u))
            {
                float _3127;
                float _3129;
                float _3131;
                float _3133;
                float _3135;
                float _3137;
                float _3286 = _2996;
                float _3287 = _2998;
                float _3288 = _3000;
                float _3289 = _3002;
                float _3290 = _3004;
                float _3291 = _3006;
                uint _3292 = _3013;
                uint _3301;
                bool _3302;
                for (;;)
                {
                    _3301 = texelFetch(g_lightClassification, int((((_2881 << 5u) + (_2867 << 9u)) + (_3292 << 2u)) >> 2u)).x;
                    _3302 = _3301 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3302)
                    {
                        frontier_phi_82_pred = _3291;
                        frontier_phi_82_pred_1 = _3290;
                        frontier_phi_82_pred_2 = _3289;
                        frontier_phi_82_pred_3 = _3288;
                        frontier_phi_82_pred_4 = _3287;
                        frontier_phi_82_pred_5 = _3286;
                    }
                    else
                    {
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3498;
                        float _3499;
                        float _3789;
                        float _3790;
                        float _3791;
                        float _3792;
                        float _3793;
                        float _3794;
                        float _3507 = _3286;
                        float _3508 = _3287;
                        float _3509 = _3288;
                        float _3510 = _3289;
                        float _3511 = _3290;
                        float _3512 = _3291;
                        uint _3513 = _3301;
                        uint _3514;
                        vec4 _3539;
                        float _3540;
                        vec4 _3555;
                        vec3 _3567;
                        vec4 _3582;
                        vec4 _3598;
                        float _3645;
                        bool _3646;
                        for (;;)
                        {
                            uint _3524 = ((_3292 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3513));
                            _3514 = (_3513 + 4294967295u) & _3513;
                            uint _3526 = _3524 * 40u;
                            _3539 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3526)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 3u)).x));
                            _3540 = _3539.w;
                            uint _3542 = (_3524 * 40u) + 4u;
                            _3555 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3542)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 3u)).x));
                            uint _3557 = (_3524 * 40u) + 8u;
                            _3567 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3557)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 2u)).x));
                            uint _3569 = (_3524 * 40u) + 16u;
                            _3582 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 3u)).x));
                            uint _3585 = (_3524 * 40u) + 20u;
                            _3598 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3585)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 3u)).x));
                            uint _3601 = (_3524 * 40u) + 24u;
                            vec4 _3614 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3601)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 3u)).x));
                            uint _3620 = (_3524 * 40u) + 28u;
                            vec4 _3633 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3620)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 3u)).x));
                            _3645 = fma(_1948, _3633.z, fma(_1947, _3633.y, _3633.x * _1946)) + _3633.w;
                            _3646 = !((fma(_1948, _3614.z, fma(_1947, _3614.y, _3614.x * _1946)) + _3614.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3646)
                            {
                                float _3673 = _3539.x - _1946;
                                float _3674 = _3539.y - _1947;
                                float _3675 = _3539.z - _1948;
                                float _3676 = dot(vec3(_3673, _3674, _3675), vec3(_3673, _3674, _3675));
                                float _3679 = inversesqrt(_3676);
                                float _3680 = _3679 * _3673;
                                float _3681 = _3679 * _3674;
                                float _3682 = _3679 * _3675;
                                float _3686 = 1.0 - (_3676 / (_3540 * _3540));
                                float _4886 = isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0));
                                float _3687 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
                                float _3691 = sqrt(_3676) * _3555.w;
                                float _3693 = 1.39999997615814208984375 / (_3691 + 1.39999997615814208984375);
                                float _3694 = _3693 * _3693;
                                float _3697 = ((1.0 - _3694) * dot(vec3(_3680, _3681, _3682), vec3(_778, _781, _784))) + _3694;
                                float _3700 = _3691 * _3691;
                                float _3704 = (fma(_1948, _3582.z, fma(_1947, _3582.y, _3582.x * _1946)) + _3582.w) / _3645;
                                float _3705 = (fma(_1948, _3598.z, fma(_1947, _3598.y, _3598.x * _1946)) + _3598.w) / _3645;
                                float _3709 = 1.0 - dot(vec2(_3704, _3705), vec2(_3704, _3705));
                                float _4902 = isnan(0.0) ? _3709 : (isnan(_3709) ? 0.0 : max(_3709, 0.0));
                                float _3710 = isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0));
                                float _3711 = _3710 * (((isnan(0.0) ? _3697 : (isnan(_3697) ? 0.0 : max(_3697, 0.0))) * _3687) / ((_3700 * 0.699999988079071044921875) + 1.0));
                                float _3723 = exp2(log2(1.0 / ((_3700 * 3.5) + 5.0)) * 0.25);
                                float _3724 = 1.0 - _853;
                                float _3731 = sqrt(1.0 - ((1.0 - (_3724 * _3724)) * (1.0 - (_3723 * _3723))));
                                float _3732 = _3731 * _3731;
                                float _3733 = _3732 * _3732;
                                float _3734 = _3680 - _3152;
                                float _3735 = _3681 - _3153;
                                float _3736 = _3682 - _3154;
                                float _3740 = inversesqrt(dot(vec3(_3734, _3735, _3736), vec3(_3734, _3735, _3736)));
                                float _3744 = dot(vec3(_778, _781, _784), vec3((-0.0) - _3152, (-0.0) - _3153, (-0.0) - _3154));
                                float _4913 = isnan(0.0) ? _3744 : (isnan(_3744) ? 0.0 : max(_3744, 0.0));
                                float _3747 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
                                float _3748 = dot(vec3(_778, _781, _784), vec3(_3740 * _3734, _3740 * _3735, _3740 * _3736));
                                float _4924 = isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0));
                                float _3751 = isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0));
                                float _3755 = ((_3751 * _3751) * (_3733 + (-1.0))) + 1.0;
                                float _3756 = _3693 * _3732;
                                float _3757 = _3756 * _3756;
                                float _3763 = ((1.0 - _3757) * dot(vec3(_778, _781, _784), vec3(_3680, _3681, _3682))) + _3757;
                                float _4935 = isnan(0.0) ? _3763 : (isnan(_3763) ? 0.0 : max(_3763, 0.0));
                                float _3764 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
                                float _3765 = 1.0 - _3732;
                                float _3775 = (0.5 / (((_3764 * ((_3747 * _3765) + _3732)) + 9.9999999392252902907785028219223e-09) + (((_3764 * _3765) + _3732) * _3747))) * _3764;
                                float _4946 = isnan(0.0) ? _3775 : (isnan(_3775) ? 0.0 : max(_3775, 0.0));
                                float _3785 = (_3710 * _3687) * (((_3733 * 3.1415927410125732421875) * (isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0)))) / ((_3755 * _3755) * ((_3700 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3711 * _3555.z;
                                frontier_phi_88_pred_1 = _3711 * _3555.y;
                                frontier_phi_88_pred_2 = _3711 * _3555.x;
                                frontier_phi_88_pred_3 = _3785 * _3567.z;
                                frontier_phi_88_pred_4 = _3785 * _3567.y;
                                frontier_phi_88_pred_5 = _3785 * _3567.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3794 = frontier_phi_88_pred;
                            _3793 = frontier_phi_88_pred_1;
                            _3792 = frontier_phi_88_pred_2;
                            _3791 = frontier_phi_88_pred_3;
                            _3790 = frontier_phi_88_pred_4;
                            _3789 = frontier_phi_88_pred_5;
                            _3497 = _3792 + _3510;
                            _3498 = _3793 + _3511;
                            _3499 = _3794 + _3512;
                            _3494 = _3789 + _3507;
                            _3495 = _3790 + _3508;
                            _3496 = _3791 + _3509;
                            if (_3514 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3507 = _3494;
                                _3508 = _3495;
                                _3509 = _3496;
                                _3510 = _3497;
                                _3511 = _3498;
                                _3512 = _3499;
                                _3513 = _3514;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3499;
                        frontier_phi_82_pred_1 = _3498;
                        frontier_phi_82_pred_2 = _3497;
                        frontier_phi_82_pred_3 = _3496;
                        frontier_phi_82_pred_4 = _3495;
                        frontier_phi_82_pred_5 = _3494;
                    }
                    _3137 = frontier_phi_82_pred;
                    _3135 = frontier_phi_82_pred_1;
                    _3133 = frontier_phi_82_pred_2;
                    _3131 = frontier_phi_82_pred_3;
                    _3129 = frontier_phi_82_pred_4;
                    _3127 = frontier_phi_82_pred_5;
                    uint _3293 = _3292 + 1u;
                    if (_3293 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3286 = _3127;
                        _3287 = _3129;
                        _3288 = _3131;
                        _3289 = _3133;
                        _3290 = _3135;
                        _3291 = _3137;
                        _3292 = _3293;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3133;
                frontier_phi_63_64_ladder_1 = _3137;
                frontier_phi_63_64_ladder_2 = _3135;
                frontier_phi_63_64_ladder_3 = _3131;
                frontier_phi_63_64_ladder_4 = _3129;
                frontier_phi_63_64_ladder_5 = _3127;
            }
            else
            {
                frontier_phi_63_64_ladder = _3002;
                frontier_phi_63_64_ladder_1 = _3006;
                frontier_phi_63_64_ladder_2 = _3004;
                frontier_phi_63_64_ladder_3 = _3000;
                frontier_phi_63_64_ladder_4 = _2998;
                frontier_phi_63_64_ladder_5 = _2996;
            }
            _3126 = frontier_phi_63_64_ladder_5;
            _3128 = frontier_phi_63_64_ladder_4;
            _3130 = frontier_phi_63_64_ladder_3;
            _3132 = frontier_phi_63_64_ladder;
            _3134 = frontier_phi_63_64_ladder_2;
            _3136 = frontier_phi_63_64_ladder_1;
        }
        float _3141 = isnan(1.0) ? _837 : (isnan(_837) ? 1.0 : min(_837, 1.0));
        _2900 = (_3141 * _3132) + _2412;
        _2902 = (_3141 * _3134) + _2414;
        _2904 = (_3141 * _3136) + _2416;
        _2906 = ((_3126 * _822) * _3141) + _2750;
        _2908 = ((_3128 * _824) * _3141) + _2752;
        _2910 = ((_3130 * _825) * _3141) + _2754;
    }
    else
    {
        _2900 = _2412;
        _2902 = _2414;
        _2904 = _2416;
        _2906 = _2750;
        _2908 = _2752;
        _2910 = _2754;
    }
    uint _2916 = _798 + uint(cbMatDynParam._m0[0u].w);
    float _2922 = cbInstanceData._m0[_2916].x * (_569 - (_585 * _569));
    float _2923 = cbInstanceData._m0[_2916].y * (_570 - (_585 * _570));
    float _2924 = cbInstanceData._m0[_2916].z * (_571 - (_585 * _571));
    float _4962 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _4973 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _4984 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _2941 = (((isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0))) * (_2900 + ((isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))) * _837))) + ((_2906 + ((isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))) * _1678)) * cbPerFrame._m0[3u].x)) + _2922;
    float _2943 = (_2923 + ((_2908 + ((isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0))) * _1678)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0))) * (_2902 + ((isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))) * _837)));
    float _2945 = (_2924 + ((_2910 + ((isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0))) * _1678)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0))) * (_2904 + ((isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))) * _837)));
    float _2946 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
    float _2947 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
    float _2948 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
    float _2954 = cbMtdParam._m0[2u].x * _2922;
    float _2955 = cbMtdParam._m0[2u].y * _2923;
    float _2956 = cbMtdParam._m0[2u].z * _2924;
    float _5010 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2958 = isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0));
    uint _2959 = _797 + 6u;
    float _2967 = _759 / cbSceneParam._m0[86u].x;
    float _2968 = _760 / cbSceneParam._m0[86u].y;
    vec4 _2982 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2967, _2968, (log2((isnan(cbSceneParam._m0[77u].w) ? _682 : (isnan(_682) ? cbSceneParam._m0[77u].w : min(_682, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2984 = _2982.x;
    float _2985 = _2982.y;
    float _2986 = _2982.z;
    float _2987 = _2982.w;
    float _3059;
    float _3061;
    float _3063;
    float _3065;
    if (_682 > cbSceneParam._m0[78u].w)
    {
        float _3021 = isnan(_682) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _682 : min(cbSceneParam._m0[80u].w, _682));
        float _3022 = _3021 / _682;
        float _3033 = _3022 * _732;
        float _3034 = _733 * _3022;
        float _3035 = (-0.0) - _3034;
        float _3037 = _3022 * _734;
        float _3039 = (cbSceneParam._m0[77u].w * _3035) / _3021;
        float _3040 = _3039 + cbSceneParam._m0[79u].w;
        float _3041 = cbSceneParam._m0[79u].w - _3034;
        float _3047 = sqrt(((_3033 * _3033) + (_3034 * _3034)) + (_3037 * _3037));
        float _3050 = (1.0 - (cbSceneParam._m0[77u].w / _3021)) * _3047;
        float _3055 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3057 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3243;
        if (abs((_3035 - _3039) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3243 = ((((_3040 > 0.0) ? exp2(_3055 * _3040) : (2.0 - exp2(_3057 * _3040))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3050;
        }
        else
        {
            float _3187 = 1.0 / cbSceneParam._m0[80u].x;
            float _3188 = isnan(_3041) ? _3040 : (isnan(_3040) ? _3041 : max(_3040, _3041));
            float _3189 = isnan(_3041) ? _3040 : (isnan(_3040) ? _3041 : min(_3040, _3041));
            float _3198 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : min(_3188, 0.0));
            float _3199 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : min(_3189, 0.0));
            _3243 = ((abs(_3047 / _3035) * cbSceneParam._m0[80u].y) * ((((_3198 - _3199) * 2.0) - ((exp2(_3055 * (isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0)))) - exp2(_3055 * (isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0))))) * _3187)) - ((exp2(_3057 * _3198) - exp2(_3057 * _3199)) * _3187))) + (_3050 * cbSceneParam._m0[80u].z);
        }
        vec4 _3245 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2967, _2968, 1.0), 0.0);
        float _3254 = exp2((_3243 * (-1.44269502162933349609375)) * (1.0 - _3245.w));
        float _3255 = log2(_3254);
        float _3271 = log2(_2987);
        _3059 = (exp2(_3271 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3255 * cbSceneParam._m0[78u].x)) * _3245.x) / cbSceneParam._m0[78u].x)) + _2984;
        _3061 = (exp2(_3271 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3255 * cbSceneParam._m0[78u].y)) * _3245.y) / cbSceneParam._m0[78u].y)) + _2985;
        _3063 = (exp2(_3271 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3255 * cbSceneParam._m0[78u].z)) * _3245.z) / cbSceneParam._m0[78u].z)) + _2986;
        _3065 = _3254 * _2987;
    }
    else
    {
        _3059 = _2984;
        _3061 = _2985;
        _3063 = _2986;
        _3065 = _2987;
    }
    bool _3281;
    vec4 _3075;
    vec4 _3097;
    float _3099;
    float _3103;
    float _3104;
    float _3105;
    float _3108;
    float _3111;
    float _3114;
    float _3115;
    bool _3125;
    for (;;)
    {
        _3075 = cbMatDynParam._m0[0u];
        float _3077 = roundEven(_3075.y);
        bool _3078 = _3077 == 3.0;
        float _3079 = log2(_3065);
        float _3083 = exp2(_3079 * cbSceneParam._m0[78u].x);
        float _3084 = exp2(_3079 * cbSceneParam._m0[78u].y);
        float _3085 = exp2(_3079 * cbSceneParam._m0[78u].z);
        float _3086 = _3083 * _2946;
        float _3087 = _3084 * _2947;
        float _3088 = _3085 * _2948;
        float _3095 = _748 + (-0.5);
        _3097 = cbMtdParam._m0[1u];
        _3099 = _3097.y * _3095;
        float _3102 = (_3077 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3103 = _3102 * (_3078 ? _3086 : (_3086 + (cbSceneParam._m0[72u].w * _3059)));
        _3104 = _3102 * (_3078 ? _3087 : (_3087 + (cbSceneParam._m0[72u].w * _3061)));
        _3105 = _3102 * (_3078 ? _3088 : (_3088 + (cbSceneParam._m0[72u].w * _3063)));
        _3108 = ((_2954 * _2958) * _3083) * _3102;
        _3111 = ((_2955 * _2958) * _3084) * _3102;
        _3114 = ((_2956 * _2958) * _3085) * _3102;
        _3115 = _3095 * 0.999000012874603271484375;
        _3125 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3125)
        {
            if ((cbInstanceData._m0[_797 + 7u].x + _3115) < 0.5)
            {
                _3281 = true;
                break;
            }
        }
        uint _3222 = _798 + uint(_3075.w);
        if ((cbInstanceData._m0[_3222].w < 1.0) && ((cbInstanceData._m0[_3222].w + _3115) < 0.5))
        {
            _3281 = true;
            break;
        }
        if ((_3099 + 1.0) < _3097.x)
        {
            _3281 = true;
            break;
        }
        _3281 = false;
        break;
    }
    float _3485;
    if (_3281)
    {
        discard_state = true;
        _3485 = 0.0;
    }
    else
    {
        _3485 = cbInstanceData._m0[_2959].w;
    }
    SV_Target.x = _3103;
    SV_Target.y = _3104;
    SV_Target.z = _3105;
    SV_Target.w = _3485;
    SV_Target_1.x = _3108;
    SV_Target_1.y = _3111;
    SV_Target_1.z = _3114;
    SV_Target_1.w = cbInstanceData._m0[_2959].w;
    discard_exit();
}


