#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _799;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _174 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _175 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _176 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _182 = inversesqrt(dot(vec3(_174, _175, _176), vec3(_174, _175, _176)));
    float _189 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _196 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _219 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _225 = _219.x * cbMtdParam._m0[9u].x;
    float _226 = _219.y * cbMtdParam._m0[9u].y;
    float _227 = _219.z * cbMtdParam._m0[9u].z;
    vec4 _239 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _243 = _239.z;
    float _247 = (_239.x * 2.0) + (-1.0);
    float _249 = (_239.y * 2.0) + (-1.0);
    float _250 = dot(vec2(_247, _249), vec2(_247, _249));
    float _3117 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _256 = sqrt(1.0 - (isnan(1.0) ? _3117 : (isnan(_3117) ? 1.0 : min(_3117, 1.0))));
    float _259 = fma(_256, _189 * NORMAL.x, fma(_249, _196 * TANGENT.x, (_182 * _174) * _247));
    float _262 = fma(_256, _189 * NORMAL.y, fma(_249, _196 * TANGENT.y, (_182 * _175) * _247));
    float _265 = fma(_256, _189 * NORMAL.z, fma(_249, _196 * TANGENT.z, (_182 * _176) * _247));
    float _269 = inversesqrt(dot(vec3(_259, _262, _265), vec3(_259, _262, _265)));
    float _270 = _269 * _259;
    float _271 = _269 * _262;
    float _272 = _269 * _265;
    float _3128 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _273 = isnan(1.0) ? _3128 : (isnan(_3128) ? 1.0 : min(_3128, 1.0));
    float _3139 = isnan(0.0) ? _225 : (isnan(_225) ? 0.0 : max(_225, 0.0));
    float _3150 = isnan(0.0) ? _226 : (isnan(_226) ? 0.0 : max(_226, 0.0));
    float _3161 = isnan(0.0) ? _227 : (isnan(_227) ? 0.0 : max(_227, 0.0));
    float _292 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _335 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _345 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _335);
    float _346 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _335);
    float _347 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _335);
    float _351 = inversesqrt(dot(vec3(_345, _346, _347), vec3(_345, _346, _347)));
    float _352 = _345 * _351;
    float _353 = _346 * _351;
    float _354 = _347 * _351;
    float _360 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _361 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _382 = fma(_272, cbSceneParam._m0[5u].z, fma(_271, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _270));
    float _385 = fma(_272, cbSceneParam._m0[6u].z, fma(_271, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _270));
    float _388 = fma(_272, cbSceneParam._m0[7u].z, fma(_271, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _270));
    uint _401 = uint(roundEven(NORMAL.w)) * 13u;
    uint _404 = (_401 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _410 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3139 : (isnan(_3139) ? 1.0 : min(_3139, 1.0)))) * cbInstanceData._m0[_404].x;
    float _411 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3150 : (isnan(_3150) ? 1.0 : min(_3150, 1.0)))) * cbInstanceData._m0[_404].y;
    float _412 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3161 : (isnan(_3161) ? 1.0 : min(_3161, 1.0)))) * cbInstanceData._m0[_404].z;
    float _3172 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _413 = isnan(1.0) ? _3172 : (isnan(_3172) ? 1.0 : min(_3172, 1.0));
    float _3183 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _414 = isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0));
    float _3194 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _415 = isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0));
    vec4 _424 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _360, cbSceneParam._m0[86u].y * _361));
    float _427 = _424.x * TEXCOORD_3.w;
    float _428 = dot(vec3(_270, _271, _272), vec3(_352, _353, _354));
    float _431 = _428 * 2.0;
    float _435 = (_431 * _270) - _352;
    float _436 = (_431 * _271) - _353;
    float _437 = (_431 * _272) - _354;
    float _441 = abs(dot(vec3(_352, _353, _354), vec3(_270, _271, _272)));
    float _3205 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _443 = sqrt(_273);
    float _456 = exp2((_443 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3205 : (isnan(_3205) ? 1.0 : min(_3205, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_443 * 3.0));
    float _488 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _492 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _496 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _798;
    float _800;
    float _801;
    float _802;
    float _803;
    float _804;
    float _805;
    float _806;
    float _807;
    float _808;
    float _809;
    float _810;
    float _811;
    float _812;
    float _813;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _523 = fma(_496, cbModelParam._m0[26u].z, fma(_492, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _488));
        float _527 = fma(_496, cbModelParam._m0[27u].z, fma(_492, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _488));
        float _531 = fma(_496, cbModelParam._m0[28u].z, fma(_492, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _488));
        float _556 = _488 + _270;
        float _557 = _492 + _271;
        float _558 = _496 + _272;
        float _568 = fma(_558, cbModelParam._m0[26u].z, fma(_557, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _556)) - _523;
        float _569 = fma(_558, cbModelParam._m0[27u].z, fma(_557, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _556)) - _527;
        float _570 = fma(_558, cbModelParam._m0[28u].z, fma(_557, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _556)) - _531;
        float _574 = inversesqrt(dot(vec3(_568, _569, _570), vec3(_568, _569, _570)));
        float _587 = ((_574 * _568) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_523 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _588 = ((_574 * _569) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_527 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _589 = ((_574 * _570) / cbModelParam._m0[34u].z) + ((((((_531 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _592 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_587, _588, _589), 0.0);
        vec4 _599 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_587, _588, _589), 0.0);
        vec4 _606 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_587, _588, _589), 0.0);
        vec4 _613 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_587, _588, _589), 0.0);
        float _626 = exp2((_592.w + (-0.5)) * 20.0) * 2.0;
        float _627 = _626 * (_592.x + (-0.5));
        float _628 = _626 * (_592.y + (-0.5));
        float _629 = _626 * (_592.z + (-0.5));
        float _636 = exp2((_599.w + (-0.5)) * 20.0) * 2.0;
        float _637 = _636 * (_599.x + (-0.5));
        float _638 = _636 * (_599.y + (-0.5));
        float _639 = _636 * (_599.z + (-0.5));
        float _646 = exp2((_606.w + (-0.5)) * 20.0) * 2.0;
        float _647 = _646 * (_606.x + (-0.5));
        float _648 = _646 * (_606.y + (-0.5));
        float _649 = _646 * (_606.z + (-0.5));
        float _656 = exp2((_613.w + (-0.5)) * 20.0) * 2.0;
        float _657 = _656 * (_613.x + (-0.5));
        float _658 = _656 * (_613.y + (-0.5));
        float _659 = _656 * (_613.z + (-0.5));
        float _660 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
        float _661 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
        float _662 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
        float _663 = _627 * 0.5;
        float _664 = _637 * 0.5;
        float _665 = _647 * 0.5;
        float _666 = dot(vec3(_663, _664, _665), vec3(_663, _664, _665));
        float _671 = (_666 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_666);
        float _680 = (dot(vec3(_270, _271, _272), vec3(_671 * _663, _671 * _664, _671 * _665)) + 1.0) * 0.5;
        float _3231 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
        float _690 = sqrt(((_664 * _664) + (_663 * _663)) + (_665 * _665)) / (_660 + 9.9999997473787516355514526367188e-06);
        float _3242 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
        float _691 = isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0));
        float _692 = _691 * 2.0;
        float _696 = (1.0 - _691) / (_691 + 1.0);
        float _3253 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
        float _697 = isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0));
        float _706 = ((((1.0 - _697) * (_692 + 2.0)) * exp2(log2(isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0))) * (_692 + 1.0))) + _697) * _660;
        float _707 = _628 * 0.5;
        float _708 = _638 * 0.5;
        float _709 = _648 * 0.5;
        float _710 = dot(vec3(_707, _708, _709), vec3(_707, _708, _709));
        float _715 = (_710 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_710);
        float _723 = (dot(vec3(_270, _271, _272), vec3(_715 * _707, _715 * _708, _715 * _709)) + 1.0) * 0.5;
        float _3264 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _732 = sqrt(((_708 * _708) + (_707 * _707)) + (_709 * _709)) / (_661 + 9.9999997473787516355514526367188e-06);
        float _3275 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _733 = isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0));
        float _734 = _733 * 2.0;
        float _738 = (1.0 - _733) / (_733 + 1.0);
        float _3286 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _739 = isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0));
        float _748 = ((((1.0 - _739) * (_734 + 2.0)) * exp2(log2(isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0))) * (_734 + 1.0))) + _739) * _661;
        float _749 = _629 * 0.5;
        float _750 = _639 * 0.5;
        float _751 = _649 * 0.5;
        float _752 = dot(vec3(_749, _750, _751), vec3(_749, _750, _751));
        float _757 = (_752 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_752);
        float _765 = (dot(vec3(_270, _271, _272), vec3(_757 * _749, _757 * _750, _757 * _751)) + 1.0) * 0.5;
        float _3297 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _774 = sqrt(((_750 * _750) + (_749 * _749)) + (_751 * _751)) / (_662 + 9.9999997473787516355514526367188e-06);
        float _3308 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _775 = isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0));
        float _776 = _775 * 2.0;
        float _780 = (1.0 - _775) / (_775 + 1.0);
        float _3319 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _781 = isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0));
        float _790 = ((((1.0 - _781) * (_776 + 2.0)) * exp2(log2(isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0))) * (_776 + 1.0))) + _781) * _662;
        _798 = _629;
        _800 = _628;
        _801 = _627;
        _802 = _639;
        _803 = _638;
        _804 = _637;
        _805 = _649;
        _806 = _648;
        _807 = _647;
        _808 = _662;
        _809 = _661;
        _810 = _660;
        _811 = cbModelParam._m0[36u].z * (isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0)));
        _812 = cbModelParam._m0[36u].z * (isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0)));
        _813 = cbModelParam._m0[36u].z * (isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0)));
    }
    else
    {
        _798 = _799;
        _800 = _799;
        _801 = _799;
        _802 = _799;
        _803 = _799;
        _804 = _799;
        _805 = _799;
        _806 = _799;
        _807 = _799;
        _808 = _799;
        _809 = _799;
        _810 = _799;
        _811 = 0.0;
        _812 = 0.0;
        _813 = 0.0;
    }
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _839 = fma(_496, cbModelParam._m0[30u].z, fma(_492, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _488));
        float _843 = fma(_496, cbModelParam._m0[31u].z, fma(_492, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _488));
        float _847 = fma(_496, cbModelParam._m0[32u].z, fma(_492, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _488));
        float _870 = _488 + _270;
        float _871 = _492 + _271;
        float _872 = _496 + _272;
        float _882 = fma(_872, cbModelParam._m0[30u].z, fma(_871, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _870)) - _839;
        float _883 = fma(_872, cbModelParam._m0[31u].z, fma(_871, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _870)) - _843;
        float _884 = fma(_872, cbModelParam._m0[32u].z, fma(_871, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _870)) - _847;
        float _888 = inversesqrt(dot(vec3(_882, _883, _884), vec3(_882, _883, _884)));
        float _901 = ((_888 * _882) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_839 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _902 = ((_888 * _883) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_843 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _903 = ((_888 * _884) / cbModelParam._m0[35u].z) + ((((((_847 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _905 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        vec4 _912 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        vec4 _919 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        float _938 = exp2((_905.w + (-0.5)) * 20.0) * 2.0;
        float _939 = _938 * (_905.x + (-0.5));
        float _940 = _938 * (_905.y + (-0.5));
        float _941 = _938 * (_905.z + (-0.5));
        float _948 = exp2((_912.w + (-0.5)) * 20.0) * 2.0;
        float _949 = _948 * (_912.x + (-0.5));
        float _950 = _948 * (_912.y + (-0.5));
        float _951 = _948 * (_912.z + (-0.5));
        float _958 = exp2((_919.w + (-0.5)) * 20.0) * 2.0;
        float _959 = _958 * (_919.x + (-0.5));
        float _960 = _958 * (_919.y + (-0.5));
        float _961 = _958 * (_919.z + (-0.5));
        float _968 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _969 = _968 * (_926.x + (-0.5));
        float _970 = _968 * (_926.y + (-0.5));
        float _971 = _968 * (_926.z + (-0.5));
        float _972 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _973 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _974 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _975 = _939 * 0.5;
        float _976 = _949 * 0.5;
        float _977 = _959 * 0.5;
        float _978 = dot(vec3(_975, _976, _977), vec3(_975, _976, _977));
        float _983 = (_978 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_978);
        float _991 = (dot(vec3(_270, _271, _272), vec3(_983 * _975, _983 * _976, _983 * _977)) + 1.0) * 0.5;
        float _3360 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _1000 = sqrt(((_976 * _976) + (_975 * _975)) + (_977 * _977)) / (_972 + 9.9999997473787516355514526367188e-06);
        float _3371 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
        float _1002 = _1001 * 2.0;
        float _1006 = (1.0 - _1001) / (_1001 + 1.0);
        float _3382 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
        float _1016 = ((((1.0 - _1007) * (_1002 + 2.0)) * exp2(log2(isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0))) * (_1002 + 1.0))) + _1007) * _972;
        float _1017 = _940 * 0.5;
        float _1018 = _950 * 0.5;
        float _1019 = _960 * 0.5;
        float _1020 = dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019));
        float _1025 = (_1020 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1020);
        float _1033 = (dot(vec3(_270, _271, _272), vec3(_1025 * _1017, _1025 * _1018, _1025 * _1019)) + 1.0) * 0.5;
        float _3393 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1042 = sqrt(((_1018 * _1018) + (_1017 * _1017)) + (_1019 * _1019)) / (_973 + 9.9999997473787516355514526367188e-06);
        float _3404 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
        float _1044 = _1043 * 2.0;
        float _1048 = (1.0 - _1043) / (_1043 + 1.0);
        float _3415 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
        float _1058 = ((((1.0 - _1049) * (_1044 + 2.0)) * exp2(log2(isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0))) * (_1044 + 1.0))) + _1049) * _973;
        float _1059 = _941 * 0.5;
        float _1060 = _951 * 0.5;
        float _1061 = _961 * 0.5;
        float _1062 = dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061));
        float _1067 = (_1062 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1062);
        float _1075 = (dot(vec3(_270, _271, _272), vec3(_1067 * _1059, _1067 * _1060, _1067 * _1061)) + 1.0) * 0.5;
        float _3426 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1084 = sqrt(((_1060 * _1060) + (_1059 * _1059)) + (_1061 * _1061)) / (_974 + 9.9999997473787516355514526367188e-06);
        float _3437 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
        float _1086 = _1085 * 2.0;
        float _1090 = (1.0 - _1085) / (_1085 + 1.0);
        float _3448 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
        float _1100 = ((((1.0 - _1091) * (_1086 + 2.0)) * exp2(log2(isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0))) * (_1086 + 1.0))) + _1091) * _974;
        _1108 = _941;
        _1109 = _940;
        _1110 = _939;
        _1111 = _951;
        _1112 = _950;
        _1113 = _949;
        _1114 = _961;
        _1115 = _960;
        _1116 = _959;
        _1117 = _974;
        _1118 = _973;
        _1119 = _972;
        _1120 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0)));
        _1121 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0)));
        _1122 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0)));
    }
    else
    {
        _1108 = _799;
        _1109 = _799;
        _1110 = _799;
        _1111 = _799;
        _1112 = _799;
        _1113 = _799;
        _1114 = _799;
        _1115 = _799;
        _1116 = _799;
        _1117 = _799;
        _1118 = _799;
        _1119 = _799;
        _1120 = 0.0;
        _1121 = 0.0;
        _1122 = 0.0;
    }
    float _1132 = (cbModelParam._m0[1u].x * (_1120 - _811)) + _811;
    float _1133 = (cbModelParam._m0[1u].x * (_1121 - _812)) + _812;
    float _1134 = (cbModelParam._m0[1u].x * (_1122 - _813)) + _813;
    float _1155 = fma(_1134, cbSceneParam._m0[89u].z, fma(_1133, cbSceneParam._m0[89u].y, _1132 * cbSceneParam._m0[89u].x));
    float _1158 = fma(_1134, cbSceneParam._m0[90u].z, fma(_1133, cbSceneParam._m0[90u].y, _1132 * cbSceneParam._m0[90u].x));
    float _1161 = fma(_1134, cbSceneParam._m0[91u].z, fma(_1133, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1132));
    float _1176 = _435 * 0.5;
    float _1177 = _436 * 0.5;
    float _1178 = _437 * 0.5;
    float _1179 = dot(vec4(_1176, _1177, _1178, 1.0), vec4(_1110, _1113, _1116, _1119));
    float _1182 = dot(vec4(_1176, _1177, _1178, 1.0), vec4(_1109, _1112, _1115, _1118));
    float _1185 = dot(vec4(_1176, _1177, _1178, 1.0), vec4(_1108, _1111, _1114, _1117));
    float _1219;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1192 = dot(vec4(_1176, _1177, _1178, 1.0), vec4(_798, _802, _805, _808));
        float _1196 = dot(vec4(_1176, _1177, _1178, 1.0), vec4(_800, _803, _806, _809));
        float _1200 = dot(vec4(_1176, _1177, _1178, 1.0), vec4(_801, _804, _807, _810));
        float _1207 = dot(vec4(cbModelParam._m0[39u]), vec4(_1176, _1177, _1178, 1.0));
        _1219 = dot(vec3(isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)), isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0)), isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1207) ? 0.0 : (isnan(0.0) ? _1207 : max(0.0, _1207))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1219 = 1.0;
    }
    float _1230;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1221 = dot(vec4(cbModelParam._m0[40u]), vec4(_1176, _1177, _1178, 1.0));
        _1230 = dot(vec3(isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)), isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)), isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1221) ? 0.0 : (isnan(0.0) ? _1221 : max(0.0, _1221))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1230 = 1.0;
    }
    float _1234 = (_1230 * cbModelParam._m0[1u].x) + (_1219 * (1.0 - cbModelParam._m0[1u].x));
    float _1244 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _273);
    float _1245 = isnan(_1244) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1244 : min(cbModelParam._m0[25u].z, _1244));
    float _1327;
    float _1329;
    float _1331;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1294 = fma(_496, cbModelParam._m0[13u].z, fma(_492, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _488)) + cbModelParam._m0[13u].w;
        float _1298 = fma(_496, cbModelParam._m0[14u].z, fma(_492, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _488)) + cbModelParam._m0[14u].w;
        float _1302 = fma(_496, cbModelParam._m0[15u].z, fma(_492, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _488)) + cbModelParam._m0[15u].w;
        float _1305 = fma(_437, cbModelParam._m0[13u].z, fma(_436, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _435));
        float _1308 = fma(_437, cbModelParam._m0[14u].z, fma(_436, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _435));
        float _1311 = fma(_437, cbModelParam._m0[15u].z, fma(_436, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _435));
        float _1339;
        if (_1305 > 0.0)
        {
            _1339 = abs((1.0 - _1294) / _1305);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1305 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1294 + 1.0) / _1305);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1339 = frontier_phi_14_12_ladder;
        }
        float _1544;
        if (_1308 > 0.0)
        {
            _1544 = abs((1.0 - _1298) / _1308);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1308 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1298 + 1.0) / _1308);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1544 = frontier_phi_23_19_ladder;
        }
        float _1787;
        if (_1311 > 0.0)
        {
            _1787 = abs((1.0 - _1302) / _1311);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1311 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1302 + 1.0) / _1311);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1787 = frontier_phi_35_30_ladder;
        }
        float _1789 = isnan(_1544) ? _1339 : (isnan(_1339) ? _1544 : min(_1339, _1544));
        float _1790 = isnan(_1787) ? _1789 : (isnan(_1789) ? _1787 : min(_1789, _1787));
        float _1794 = (_1790 * _1305) + _1294;
        float _1795 = (_1790 * _1308) + _1298;
        float _1796 = (_1790 * _1311) + _1302;
        float _1797 = _1790 * 9.9999997473787516355514526367188e-05;
        float _1799 = (-1.0) - _1797;
        float _1801 = _1797 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1796 > _1801) || ((_1796 < _1799) || ((_1795 > _1801) || ((_1795 < _1799) || ((_1794 < _1799) || (_1794 > _1801))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1920 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1796, cbModelParam._m0[9u].z, fma(_1795, cbModelParam._m0[9u].y, _1794 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1796, cbModelParam._m0[10u].z, fma(_1795, cbModelParam._m0[10u].y, _1794 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1796, cbModelParam._m0[11u].z, fma(_1795, cbModelParam._m0[11u].y, _1794 * cbModelParam._m0[11u].x))), _1245);
            frontier_phi_13_35_ladder = _1920.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1920.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1920.x * cbModelParam._m0[1u].y;
        }
        _1327 = frontier_phi_13_35_ladder_2;
        _1329 = frontier_phi_13_35_ladder_1;
        _1331 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1315 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_435, _436, _437), _1245);
        _1327 = _1315.x * cbModelParam._m0[1u].y;
        _1329 = _1315.y * cbModelParam._m0[1u].y;
        _1331 = _1315.z * cbModelParam._m0[1u].y;
    }
    float _1335 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _273);
    float _1336 = isnan(_1335) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1335 : min(cbModelParam._m0[25u].w, _1335));
    float _1428;
    float _1430;
    float _1432;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1392 = fma(_496, cbModelParam._m0[21u].z, fma(_492, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _488)) + cbModelParam._m0[21u].w;
        float _1396 = fma(_496, cbModelParam._m0[22u].z, fma(_492, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _488)) + cbModelParam._m0[22u].w;
        float _1400 = fma(_496, cbModelParam._m0[23u].z, fma(_492, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _488)) + cbModelParam._m0[23u].w;
        float _1403 = fma(_437, cbModelParam._m0[21u].z, fma(_436, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _435));
        float _1406 = fma(_437, cbModelParam._m0[22u].z, fma(_436, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _435));
        float _1409 = fma(_437, cbModelParam._m0[23u].z, fma(_436, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _435));
        float _1549;
        if (_1403 > 0.0)
        {
            _1549 = abs((1.0 - _1392) / _1403);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1403 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1392 + 1.0) / _1403);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1549 = frontier_phi_25_21_ladder;
        }
        float _1814;
        if (_1406 > 0.0)
        {
            _1814 = abs((1.0 - _1396) / _1406);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1406 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1396 + 1.0) / _1406);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1814 = frontier_phi_37_32_ladder;
        }
        float _2019;
        if (_1409 > 0.0)
        {
            _2019 = abs((1.0 - _1400) / _1409);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1409 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1400 + 1.0) / _1409);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2019 = frontier_phi_46_43_ladder;
        }
        float _2021 = isnan(_1814) ? _1549 : (isnan(_1549) ? _1814 : min(_1549, _1814));
        float _2022 = isnan(_2019) ? _2021 : (isnan(_2021) ? _2019 : min(_2021, _2019));
        float _2026 = (_2022 * _1403) + _1392;
        float _2027 = (_2022 * _1406) + _1396;
        float _2028 = (_2022 * _1409) + _1400;
        float _2029 = _2022 * 9.9999997473787516355514526367188e-05;
        float _2030 = (-1.0) - _2029;
        float _2032 = _2029 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2028 > _2032) || ((_2028 < _2030) || ((_2027 > _2032) || ((_2027 < _2030) || ((_2026 < _2030) || (_2026 > _2032))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2230 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2028, cbModelParam._m0[17u].z, fma(_2027, cbModelParam._m0[17u].y, _2026 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2028, cbModelParam._m0[18u].z, fma(_2027, cbModelParam._m0[18u].y, _2026 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2028, cbModelParam._m0[19u].z, fma(_2027, cbModelParam._m0[19u].y, _2026 * cbModelParam._m0[19u].x))), _1336);
            frontier_phi_22_46_ladder = _2230.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2230.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2230.x * cbModelParam._m0[1u].z;
        }
        _1428 = frontier_phi_22_46_ladder_2;
        _1430 = frontier_phi_22_46_ladder_1;
        _1432 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1412 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_435, _436, _437), _1336);
        _1428 = _1412.x * cbModelParam._m0[1u].z;
        _1430 = _1412.y * cbModelParam._m0[1u].z;
        _1432 = _1412.z * cbModelParam._m0[1u].z;
    }
    float _1444 = ((((1.0 - _456) * ((_443 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_456 * _443)) * _427;
    float _1445 = _1444 * ((cbModelParam._m0[1u].w * (_1428 - _1327)) + _1327);
    float _1446 = _1444 * ((cbModelParam._m0[1u].w * (_1430 - _1329)) + _1329);
    float _1447 = _1444 * ((cbModelParam._m0[1u].w * (_1432 - _1331)) + _1331);
    float _1450 = fma(_1447, cbSceneParam._m0[89u].z, fma(_1446, cbSceneParam._m0[89u].y, _1445 * cbSceneParam._m0[89u].x));
    float _1453 = fma(_1447, cbSceneParam._m0[90u].z, fma(_1446, cbSceneParam._m0[90u].y, _1445 * cbSceneParam._m0[90u].x));
    float _1456 = fma(_1447, cbSceneParam._m0[91u].z, fma(_1446, cbSceneParam._m0[91u].y, _1445 * cbSceneParam._m0[91u].x));
    uvec4 _1466 = floatBitsToUint(cbInstanceData._m0[_401 + 5u]);
    uint _1468 = _1466.x * 14u;
    uint _1469 = _1468 + 13u;
    float _1476 = _427 + (-1.0);
    float _1481 = (cbLight._m0[_1469].x * _1476) + 1.0;
    float _1482 = (cbLight._m0[_1469].y * _1476) + 1.0;
    float _1483 = (cbLight._m0[_1469].z * _1476) + 1.0;
    float _1484 = (cbLight._m0[_1469].w * _1476) + 1.0;
    uint _1485 = _1468 + 5u;
    float _1491 = isnan(1.0) ? _1482 : (isnan(_1482) ? 1.0 : min(_1482, 1.0));
    uint _1495 = _1468 + 4u;
    float _1502 = isnan(1.0) ? _1481 : (isnan(_1481) ? 1.0 : min(_1481, 1.0));
    uint _1506 = _1468 | 1u;
    float _1517 = dot(vec3(cbLight._m0[_1468].xyz), vec3(_270, _271, _272));
    float _1520 = dot(vec3(cbLight._m0[_1506].xyz), vec3(_270, _271, _272));
    float _3584 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
    float _3595 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
    float _1525 = (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))) * 0.3183098733425140380859375;
    float _1527 = (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))) * 0.3183098733425140380859375;
    float _1534 = ((cbLight._m0[_1485].x * _1491) * _1527) + ((cbLight._m0[_1495].x * _1502) * _1525);
    float _1535 = ((_1491 * cbLight._m0[_1485].y) * _1527) + ((_1502 * cbLight._m0[_1495].y) * _1525);
    float _1536 = ((_1491 * cbLight._m0[_1485].z) * _1527) + ((_1502 * cbLight._m0[_1495].z) * _1525);
    uvec4 _1541 = floatBitsToUint(cbLight._m0[_1468 + 12u]);
    bool _1543 = _1541.x == 0u;
    float _1554;
    float _1556;
    float _1558;
    if (_1543)
    {
        _1554 = _1534;
        _1556 = _1535;
        _1558 = _1536;
    }
    else
    {
        uint _1562 = _1468 + 6u;
        float _1578 = (dot(vec3(cbLight._m0[_1468 + 2u].xyz), vec3(_270, _271, _272)) * 0.5) + 0.5;
        float _1579 = _1578 * _1578;
        float _3606 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _1581 = isnan(1.0) ? _1483 : (isnan(_1483) ? 1.0 : min(_1483, 1.0));
        _1554 = (((cbLight._m0[_1562].x * 0.3183098733425140380859375) * _1580) * _1581) + _1534;
        _1556 = (((cbLight._m0[_1562].y * 0.3183098733425140380859375) * _1580) * _1581) + _1535;
        _1558 = (((cbLight._m0[_1562].z * 0.3183098733425140380859375) * _1580) * _1581) + _1536;
    }
    bool _1561 = _1541.y == 0u;
    float _1599;
    float _1601;
    float _1603;
    if (_1561)
    {
        _1599 = _1554;
        _1601 = _1556;
        _1603 = _1558;
    }
    else
    {
        uint _1758 = _1468 + 7u;
        float _1774 = (dot(vec3(cbLight._m0[_1468 + 3u].xyz), vec3(_270, _271, _272)) * 0.5) + 0.5;
        float _1775 = _1774 * _1774;
        float _3622 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1776 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _1777 = isnan(1.0) ? _1484 : (isnan(_1484) ? 1.0 : min(_1484, 1.0));
        _1599 = (((cbLight._m0[_1758].x * 0.3183098733425140380859375) * _1776) * _1777) + _1554;
        _1601 = (((cbLight._m0[_1758].y * 0.3183098733425140380859375) * _1776) * _1777) + _1556;
        _1603 = (((cbLight._m0[_1758].z * 0.3183098733425140380859375) * _1776) * _1777) + _1558;
    }
    uint _1606 = _1468 + 8u;
    float _1619 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1468].w)) * _273) * 0.949999988079071044921875);
    float _1620 = _1619 * _1619;
    float _1621 = cbLight._m0[_1468].x + _352;
    float _1622 = cbLight._m0[_1468].y + _353;
    float _1623 = cbLight._m0[_1468].z + _354;
    float _1627 = inversesqrt(dot(vec3(_1621, _1622, _1623), vec3(_1621, _1622, _1623)));
    float _1628 = _1627 * _1621;
    float _1629 = _1627 * _1622;
    float _1630 = _1627 * _1623;
    float _1631 = dot(vec3(_270, _271, _272), vec3(cbLight._m0[_1468].xyz));
    float _3638 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
    float _1634 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
    float _3649 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _1635 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
    float _1636 = dot(vec3(_270, _271, _272), vec3(_1628, _1629, _1630));
    float _3660 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
    float _1639 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
    float _1640 = dot(vec3(cbLight._m0[_1468].xyz), vec3(_1628, _1629, _1630));
    float _3671 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
    float _1644 = _1620 * _1620;
    float _1648 = ((_1639 * _1639) * (_1644 + (-1.0))) + 1.0;
    float _1659 = (exp2(log2(1.0 - (isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1660 = 1.0 - _1620;
    float _1671 = (0.5 / (((_1635 * ((_1634 * _1660) + _1620)) + 9.9999999392252902907785028219223e-09) + (((_1635 * _1660) + _1620) * _1634))) * _1634;
    float _3682 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
    float _1673 = (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * (_1644 / ((_1648 * _1648) * 3.141590118408203125));
    uint _1684 = _1468 + 9u;
    float _1695 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1506].w)) * _273) * 0.949999988079071044921875);
    float _1696 = _1695 * _1695;
    float _1697 = cbLight._m0[_1506].x + _352;
    float _1698 = cbLight._m0[_1506].y + _353;
    float _1699 = cbLight._m0[_1506].z + _354;
    float _1703 = inversesqrt(dot(vec3(_1697, _1698, _1699), vec3(_1697, _1698, _1699)));
    float _1704 = _1703 * _1697;
    float _1705 = _1703 * _1698;
    float _1706 = _1703 * _1699;
    float _1707 = dot(vec3(_270, _271, _272), vec3(cbLight._m0[_1506].xyz));
    float _3693 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
    float _1710 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
    float _1711 = dot(vec3(_270, _271, _272), vec3(_1704, _1705, _1706));
    float _3704 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
    float _1714 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
    float _1715 = dot(vec3(cbLight._m0[_1506].xyz), vec3(_1704, _1705, _1706));
    float _3715 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
    float _1719 = _1696 * _1696;
    float _1723 = ((_1714 * _1714) * (_1719 + (-1.0))) + 1.0;
    float _1732 = (exp2(log2(1.0 - (isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1733 = 1.0 - _1696;
    float _1743 = (0.5 / (((_1635 * ((_1710 * _1733) + _1696)) + 9.9999999392252902907785028219223e-09) + (((_1635 * _1733) + _1696) * _1710))) * _1710;
    float _3726 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
    float _1745 = (isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))) * (_1719 / ((_1723 * _1723) * 3.141590118408203125));
    float _1755 = (((_1732 * cbLight._m0[_1684].x) * _1745) * _1491) + (((_1659 * cbLight._m0[_1606].x) * _1673) * _1502);
    float _1756 = (((_1732 * cbLight._m0[_1684].y) * _1745) * _1491) + (((_1659 * cbLight._m0[_1606].y) * _1673) * _1502);
    float _1757 = (((_1732 * cbLight._m0[_1684].z) * _1745) * _1491) + (((_1659 * cbLight._m0[_1606].z) * _1673) * _1502);
    float _1819;
    float _1821;
    float _1823;
    if (_1543)
    {
        _1819 = _1755;
        _1821 = _1756;
        _1823 = _1757;
    }
    else
    {
        uint _1825 = _1468 + 2u;
        uint _1829 = _1468 + 10u;
        float _1843 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1825].w)) * _273) * 0.949999988079071044921875);
        float _1844 = _1843 * _1843;
        float _1845 = cbLight._m0[_1825].x + _352;
        float _1846 = cbLight._m0[_1825].y + _353;
        float _1847 = cbLight._m0[_1825].z + _354;
        float _1851 = inversesqrt(dot(vec3(_1845, _1846, _1847), vec3(_1845, _1846, _1847)));
        float _1852 = _1851 * _1845;
        float _1853 = _1851 * _1846;
        float _1854 = _1851 * _1847;
        float _1855 = dot(vec3(_270, _271, _272), vec3(cbLight._m0[_1825].xyz));
        float _3737 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1858 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _1859 = dot(vec3(_270, _271, _272), vec3(_1852, _1853, _1854));
        float _3748 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
        float _1862 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1863 = dot(vec3(cbLight._m0[_1825].xyz), vec3(_1852, _1853, _1854));
        float _3759 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
        float _1867 = _1844 * _1844;
        float _1871 = ((_1862 * _1862) * (_1867 + (-1.0))) + 1.0;
        float _1880 = (exp2(log2(1.0 - (isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1881 = 1.0 - _1844;
        float _1891 = (0.5 / (((_1635 * ((_1858 * _1881) + _1844)) + 9.9999999392252902907785028219223e-09) + (((_1635 * _1881) + _1844) * _1858))) * _1858;
        float _3770 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
        float _1893 = (isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * (_1867 / ((_1871 * _1871) * 3.141590118408203125));
        float _1894 = isnan(1.0) ? _1483 : (isnan(_1483) ? 1.0 : min(_1483, 1.0));
        _1819 = (((_1880 * cbLight._m0[_1829].x) * _1893) * _1894) + _1755;
        _1821 = (((_1880 * cbLight._m0[_1829].y) * _1893) * _1894) + _1756;
        _1823 = (((_1880 * cbLight._m0[_1829].z) * _1893) * _1894) + _1757;
    }
    float _1929;
    float _1931;
    float _1933;
    if (_1561)
    {
        _1929 = _1819;
        _1931 = _1821;
        _1933 = _1823;
    }
    else
    {
        uint _1940 = _1468 + 3u;
        uint _1944 = _1468 + 11u;
        float _1958 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1940].w)) * _273) * 0.949999988079071044921875);
        float _1959 = _1958 * _1958;
        float _1960 = cbLight._m0[_1940].x + _352;
        float _1961 = cbLight._m0[_1940].y + _353;
        float _1962 = cbLight._m0[_1940].z + _354;
        float _1966 = inversesqrt(dot(vec3(_1960, _1961, _1962), vec3(_1960, _1961, _1962)));
        float _1967 = _1966 * _1960;
        float _1968 = _1966 * _1961;
        float _1969 = _1966 * _1962;
        float _1970 = dot(vec3(_270, _271, _272), vec3(cbLight._m0[_1940].xyz));
        float _3786 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1973 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1974 = dot(vec3(_270, _271, _272), vec3(_1967, _1968, _1969));
        float _3797 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
        float _1977 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1978 = dot(vec3(cbLight._m0[_1940].xyz), vec3(_1967, _1968, _1969));
        float _3808 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
        float _1982 = _1959 * _1959;
        float _1986 = ((_1977 * _1977) * (_1982 + (-1.0))) + 1.0;
        float _1995 = (exp2(log2(1.0 - (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1996 = 1.0 - _1959;
        float _2006 = (0.5 / (((_1635 * ((_1973 * _1996) + _1959)) + 9.9999999392252902907785028219223e-09) + (((_1635 * _1996) + _1959) * _1973))) * _1973;
        float _3819 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
        float _2008 = (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * (_1982 / ((_1986 * _1986) * 3.141590118408203125));
        float _2009 = isnan(1.0) ? _1484 : (isnan(_1484) ? 1.0 : min(_1484, 1.0));
        _1929 = (((_1995 * cbLight._m0[_1944].x) * _2008) * _2009) + _1819;
        _1931 = (((_1995 * cbLight._m0[_1944].y) * _2008) * _2009) + _1821;
        _1933 = (((_1995 * cbLight._m0[_1944].z) * _2008) * _2009) + _1823;
    }
    float _2144;
    float _2146;
    float _2148;
    float _2150;
    float _2152;
    float _2154;
    if (_1466.y == 0u)
    {
        float _2084 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2085 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2084;
        float _2086 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2084;
        float _2087 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2084;
        uvec4 _2099 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2100 = _2099.x;
        uint _2111 = uint((float(_2099.y) * floor(float(uint(cbSceneParam._m0[85u].y * _361) / _2100))) + floor(float(uint(cbSceneParam._m0[85u].x * _360) / _2100)));
        float _2121 = (log2(_2087 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2122 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        uint _2125 = uint(isnan(14.0) ? _2122 : (isnan(_2122) ? 14.0 : min(_2122, 14.0)));
        uvec4 _2130 = texelFetch(g_lightClusterGridBuffer, int(((_2125 << 2u) + (_2111 << 6u)) >> 2u));
        uint _2131 = _2130.x;
        uint _2132 = _2099.z;
        float _2235;
        float _2237;
        float _2239;
        float _2241;
        float _2243;
        float _2245;
        if (((((1u << ((_2132 >> 4u) & 15u)) + 4294967295u) & _2131) == 0u) || ((_2132 & 240u) == 0u))
        {
            _2235 = 0.0;
            _2237 = 0.0;
            _2239 = 0.0;
            _2241 = 0.0;
            _2243 = 0.0;
            _2245 = 0.0;
        }
        else
        {
            float _2236;
            float _2238;
            float _2240;
            float _2242;
            float _2244;
            float _2246;
            float _2380 = 0.0;
            float _2381 = 0.0;
            float _2382 = 0.0;
            float _2383 = 0.0;
            float _2384 = 0.0;
            float _2385 = 0.0;
            uint _2386 = 0u;
            uint _2395;
            bool _2396;
            for (;;)
            {
                _2395 = texelFetch(g_lightClassification, int((((_2125 << 5u) + (_2111 << 9u)) + (_2386 << 2u)) >> 2u)).x;
                _2396 = _2395 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2396)
                {
                    frontier_phi_61_pred = _2380;
                    frontier_phi_61_pred_1 = _2385;
                    frontier_phi_61_pred_2 = _2384;
                    frontier_phi_61_pred_3 = _2383;
                    frontier_phi_61_pred_4 = _2382;
                    frontier_phi_61_pred_5 = _2381;
                }
                else
                {
                    float _2504;
                    float _2505;
                    float _2506;
                    float _2507;
                    float _2508;
                    float _2509;
                    uint _2510;
                    _2504 = _2380;
                    _2505 = _2381;
                    _2506 = _2382;
                    _2507 = _2383;
                    _2508 = _2384;
                    _2509 = _2385;
                    _2510 = _2395;
                    float _2436;
                    float _2437;
                    float _2438;
                    float _2439;
                    float _2440;
                    float _2441;
                    for (;;)
                    {
                        uint _2514 = uint(findLSB(_2510)) + (_2386 << 5u);
                        uint _2511 = (_2510 + 4294967295u) & _2510;
                        uint _2516 = _2514 * 48u;
                        vec4 _2530 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2516)).x, texelFetch(g_PointLightRenderingBuffer, int(_2516 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2516 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2516 + 3u)).x));
                        uint _2536 = (_2514 * 48u) + 4u;
                        vec4 _2549 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2536)).x, texelFetch(g_PointLightRenderingBuffer, int(_2536 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2536 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2536 + 3u)).x));
                        uint _2555 = (_2514 * 48u) + 8u;
                        vec3 _2566 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2555)).x, texelFetch(g_PointLightRenderingBuffer, int(_2555 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2555 + 2u)).x));
                        float _2570 = _2530.x - _2085;
                        float _2571 = _2530.y - _2086;
                        float _2572 = _2530.z - _2087;
                        float _2573 = dot(vec3(_2570, _2571, _2572), vec3(_2570, _2571, _2572));
                        float _2576 = inversesqrt(_2573);
                        float _2577 = _2576 * _2570;
                        float _2578 = _2576 * _2571;
                        float _2579 = _2576 * _2572;
                        float _2580 = dot(vec3(_382, _385, _388), vec3(_2577, _2578, _2579));
                        float _2585 = 1.0 - (_2573 * _2530.w);
                        float _3845 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
                        float _2586 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
                        float _2587 = sqrt(_2573) * _2549.w;
                        float _2590 = 1.39999997615814208984375 / (_2587 + 1.39999997615814208984375);
                        float _2591 = _2590 * _2590;
                        float _2594 = ((1.0 - _2591) * _2580) + _2591;
                        float _2597 = _2587 * _2587;
                        float _2601 = ((isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0))) * _2586) / ((_2597 * 0.699999988079071044921875) + 1.0);
                        float _2605 = (-0.0) - _2085;
                        float _2606 = (-0.0) - _2086;
                        float _2607 = (-0.0) - _2087;
                        float _2611 = inversesqrt(dot(vec3(_2605, _2606, _2607), vec3(_2605, _2606, _2607)));
                        float _2612 = _2611 * _2605;
                        float _2613 = _2611 * _2606;
                        float _2614 = _2611 * _2607;
                        float _2622 = exp2(log2(1.0 / ((_2597 * 3.5) + 5.0)) * 0.25);
                        float _2623 = 1.0 - _443;
                        float _2630 = sqrt(1.0 - ((1.0 - (_2623 * _2623)) * (1.0 - (_2622 * _2622))));
                        float _2631 = _2630 * _2630;
                        float _2632 = _2631 * _2631;
                        float _2633 = _2612 + _2577;
                        float _2634 = _2613 + _2578;
                        float _2635 = _2614 + _2579;
                        float _2639 = inversesqrt(dot(vec3(_2633, _2634, _2635), vec3(_2633, _2634, _2635)));
                        float _2643 = dot(vec3(_382, _385, _388), vec3(_2612, _2613, _2614));
                        float _3861 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
                        float _2646 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
                        float _2647 = dot(vec3(_382, _385, _388), vec3(_2639 * _2633, _2639 * _2634, _2639 * _2635));
                        float _3872 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
                        float _2650 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
                        float _2654 = ((_2650 * _2650) * (_2632 + (-1.0))) + 1.0;
                        float _2655 = _2590 * _2631;
                        float _2656 = _2655 * _2655;
                        float _2659 = ((1.0 - _2656) * _2580) + _2656;
                        float _3883 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
                        float _2660 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
                        float _2661 = 1.0 - _2631;
                        float _2671 = (0.5 / (((_2660 * ((_2646 * _2661) + _2631)) + 9.9999999392252902907785028219223e-09) + (((_2660 * _2661) + _2631) * _2646))) * _2660;
                        float _3894 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
                        float _2682 = (((_2632 * 3.1415927410125732421875) * (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0)))) / ((_2654 * _2654) * ((_2597 * 2.1991131305694580078125) + 3.141590118408203125))) * _2586;
                        _2439 = (_2601 * _2549.x) + _2507;
                        _2440 = (_2601 * _2549.y) + _2508;
                        _2441 = (_2601 * _2549.z) + _2509;
                        _2436 = (_2682 * _2566.x) + _2504;
                        _2437 = (_2682 * _2566.y) + _2505;
                        _2438 = (_2682 * _2566.z) + _2506;
                        if (_2511 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2504 = _2436;
                            _2505 = _2437;
                            _2506 = _2438;
                            _2507 = _2439;
                            _2508 = _2440;
                            _2509 = _2441;
                            _2510 = _2511;
                        }
                    }
                    frontier_phi_61_pred = _2436;
                    frontier_phi_61_pred_1 = _2441;
                    frontier_phi_61_pred_2 = _2440;
                    frontier_phi_61_pred_3 = _2439;
                    frontier_phi_61_pred_4 = _2438;
                    frontier_phi_61_pred_5 = _2437;
                }
                _2236 = frontier_phi_61_pred;
                _2246 = frontier_phi_61_pred_1;
                _2244 = frontier_phi_61_pred_2;
                _2242 = frontier_phi_61_pred_3;
                _2240 = frontier_phi_61_pred_4;
                _2238 = frontier_phi_61_pred_5;
                uint _2387 = _2386 + 1u;
                if (_2387 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2380 = _2236;
                    _2381 = _2238;
                    _2382 = _2240;
                    _2383 = _2242;
                    _2384 = _2244;
                    _2385 = _2246;
                    _2386 = _2387;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2235 = _2236;
            _2237 = _2238;
            _2239 = _2240;
            _2241 = _2242;
            _2243 = _2244;
            _2245 = _2246;
        }
        uvec4 _2249 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2250 = _2249.z;
        uint _2252 = (_2250 >> 8u) & 15u;
        float _2348;
        float _2350;
        float _2352;
        float _2354;
        float _2356;
        float _2358;
        if (((4294967295u << _2252) & _2131) == 0u)
        {
            _2348 = _2235;
            _2350 = _2237;
            _2352 = _2239;
            _2354 = _2241;
            _2356 = _2243;
            _2358 = _2245;
        }
        else
        {
            float _2373 = inversesqrt(dot(vec3(_2085, _2086, _2087), vec3(_2085, _2086, _2087)));
            float _2374 = _2373 * _2085;
            float _2375 = _2373 * _2086;
            float _2376 = _2373 * _2087;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2252 < ((_2250 >> 12u) & 15u))
            {
                float _2349;
                float _2351;
                float _2353;
                float _2355;
                float _2357;
                float _2359;
                float _2487 = _2235;
                float _2488 = _2237;
                float _2489 = _2239;
                float _2490 = _2241;
                float _2491 = _2243;
                float _2492 = _2245;
                uint _2493 = _2252;
                uint _2502;
                bool _2503;
                for (;;)
                {
                    _2502 = texelFetch(g_lightClassification, int((((_2125 << 5u) + (_2111 << 9u)) + (_2493 << 2u)) >> 2u)).x;
                    _2503 = _2502 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2503)
                    {
                        frontier_phi_67_pred = _2490;
                        frontier_phi_67_pred_1 = _2491;
                        frontier_phi_67_pred_2 = _2492;
                        frontier_phi_67_pred_3 = _2489;
                        frontier_phi_67_pred_4 = _2488;
                        frontier_phi_67_pred_5 = _2487;
                    }
                    else
                    {
                        float _2687;
                        float _2688;
                        float _2689;
                        float _2690;
                        float _2691;
                        float _2692;
                        float _2983;
                        float _2984;
                        float _2985;
                        float _2986;
                        float _2987;
                        float _2988;
                        float _2700 = _2487;
                        float _2701 = _2488;
                        float _2702 = _2489;
                        float _2703 = _2490;
                        float _2704 = _2491;
                        float _2705 = _2492;
                        uint _2706 = _2502;
                        uint _2707;
                        vec4 _2732;
                        float _2733;
                        vec4 _2748;
                        vec3 _2760;
                        vec4 _2776;
                        vec4 _2792;
                        float _2839;
                        bool _2840;
                        for (;;)
                        {
                            uint _2717 = ((_2493 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2706));
                            _2707 = (_2706 + 4294967295u) & _2706;
                            uint _2719 = _2717 * 40u;
                            _2732 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2719)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2719 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2719 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2719 + 3u)).x));
                            _2733 = _2732.w;
                            uint _2735 = (_2717 * 40u) + 4u;
                            _2748 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2735)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2735 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2735 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2735 + 3u)).x));
                            uint _2750 = (_2717 * 40u) + 8u;
                            _2760 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2750)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2750 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2750 + 2u)).x));
                            uint _2763 = (_2717 * 40u) + 16u;
                            _2776 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2763)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2763 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2763 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2763 + 3u)).x));
                            uint _2779 = (_2717 * 40u) + 20u;
                            _2792 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2779)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2779 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2779 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2779 + 3u)).x));
                            uint _2795 = (_2717 * 40u) + 24u;
                            vec4 _2808 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2795)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2795 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2795 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2795 + 3u)).x));
                            uint _2814 = (_2717 * 40u) + 28u;
                            vec4 _2827 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2814)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 3u)).x));
                            _2839 = fma(_2087, _2827.z, fma(_2086, _2827.y, _2827.x * _2085)) + _2827.w;
                            _2840 = !((fma(_2087, _2808.z, fma(_2086, _2808.y, _2808.x * _2085)) + _2808.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2840)
                            {
                                float _2867 = _2732.x - _2085;
                                float _2868 = _2732.y - _2086;
                                float _2869 = _2732.z - _2087;
                                float _2870 = dot(vec3(_2867, _2868, _2869), vec3(_2867, _2868, _2869));
                                float _2873 = inversesqrt(_2870);
                                float _2874 = _2873 * _2867;
                                float _2875 = _2873 * _2868;
                                float _2876 = _2873 * _2869;
                                float _2880 = 1.0 - (_2870 / (_2733 * _2733));
                                float _3905 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
                                float _2881 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
                                float _2885 = sqrt(_2870) * _2748.w;
                                float _2887 = 1.39999997615814208984375 / (_2885 + 1.39999997615814208984375);
                                float _2888 = _2887 * _2887;
                                float _2891 = ((1.0 - _2888) * dot(vec3(_2874, _2875, _2876), vec3(_382, _385, _388))) + _2888;
                                float _2894 = _2885 * _2885;
                                float _2898 = (fma(_2087, _2776.z, fma(_2086, _2776.y, _2776.x * _2085)) + _2776.w) / _2839;
                                float _2899 = (fma(_2087, _2792.z, fma(_2086, _2792.y, _2792.x * _2085)) + _2792.w) / _2839;
                                float _2903 = 1.0 - dot(vec2(_2898, _2899), vec2(_2898, _2899));
                                float _3921 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
                                float _2904 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
                                float _2905 = _2904 * (((isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0))) * _2881) / ((_2894 * 0.699999988079071044921875) + 1.0));
                                float _2917 = exp2(log2(1.0 / ((_2894 * 3.5) + 5.0)) * 0.25);
                                float _2918 = 1.0 - _443;
                                float _2925 = sqrt(1.0 - ((1.0 - (_2918 * _2918)) * (1.0 - (_2917 * _2917))));
                                float _2926 = _2925 * _2925;
                                float _2927 = _2926 * _2926;
                                float _2928 = _2874 - _2374;
                                float _2929 = _2875 - _2375;
                                float _2930 = _2876 - _2376;
                                float _2934 = inversesqrt(dot(vec3(_2928, _2929, _2930), vec3(_2928, _2929, _2930)));
                                float _2938 = dot(vec3(_382, _385, _388), vec3((-0.0) - _2374, (-0.0) - _2375, (-0.0) - _2376));
                                float _3932 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
                                float _2941 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
                                float _2942 = dot(vec3(_382, _385, _388), vec3(_2934 * _2928, _2934 * _2929, _2934 * _2930));
                                float _3943 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
                                float _2945 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
                                float _2949 = ((_2945 * _2945) * (_2927 + (-1.0))) + 1.0;
                                float _2950 = _2887 * _2926;
                                float _2951 = _2950 * _2950;
                                float _2957 = ((1.0 - _2951) * dot(vec3(_382, _385, _388), vec3(_2874, _2875, _2876))) + _2951;
                                float _3954 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
                                float _2958 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
                                float _2959 = 1.0 - _2926;
                                float _2969 = (0.5 / (((_2958 * ((_2941 * _2959) + _2926)) + 9.9999999392252902907785028219223e-09) + (((_2958 * _2959) + _2926) * _2941))) * _2958;
                                float _3965 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
                                float _2979 = (_2904 * _2881) * (((_2927 * 3.1415927410125732421875) * (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0)))) / ((_2949 * _2949) * ((_2894 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _2979 * _2760.x;
                                frontier_phi_73_pred_1 = _2979 * _2760.y;
                                frontier_phi_73_pred_2 = _2905 * _2748.z;
                                frontier_phi_73_pred_3 = _2905 * _2748.y;
                                frontier_phi_73_pred_4 = _2905 * _2748.x;
                                frontier_phi_73_pred_5 = _2979 * _2760.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2983 = frontier_phi_73_pred;
                            _2984 = frontier_phi_73_pred_1;
                            _2988 = frontier_phi_73_pred_2;
                            _2987 = frontier_phi_73_pred_3;
                            _2986 = frontier_phi_73_pred_4;
                            _2985 = frontier_phi_73_pred_5;
                            _2690 = _2986 + _2703;
                            _2691 = _2987 + _2704;
                            _2692 = _2988 + _2705;
                            _2687 = _2983 + _2700;
                            _2688 = _2984 + _2701;
                            _2689 = _2985 + _2702;
                            if (_2707 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2700 = _2687;
                                _2701 = _2688;
                                _2702 = _2689;
                                _2703 = _2690;
                                _2704 = _2691;
                                _2705 = _2692;
                                _2706 = _2707;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2690;
                        frontier_phi_67_pred_1 = _2691;
                        frontier_phi_67_pred_2 = _2692;
                        frontier_phi_67_pred_3 = _2689;
                        frontier_phi_67_pred_4 = _2688;
                        frontier_phi_67_pred_5 = _2687;
                    }
                    _2355 = frontier_phi_67_pred;
                    _2357 = frontier_phi_67_pred_1;
                    _2359 = frontier_phi_67_pred_2;
                    _2353 = frontier_phi_67_pred_3;
                    _2351 = frontier_phi_67_pred_4;
                    _2349 = frontier_phi_67_pred_5;
                    uint _2494 = _2493 + 1u;
                    if (_2494 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2487 = _2349;
                        _2488 = _2351;
                        _2489 = _2353;
                        _2490 = _2355;
                        _2491 = _2357;
                        _2492 = _2359;
                        _2493 = _2494;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2357;
                frontier_phi_55_56_ladder_1 = _2359;
                frontier_phi_55_56_ladder_2 = _2355;
                frontier_phi_55_56_ladder_3 = _2353;
                frontier_phi_55_56_ladder_4 = _2351;
                frontier_phi_55_56_ladder_5 = _2349;
            }
            else
            {
                frontier_phi_55_56_ladder = _2243;
                frontier_phi_55_56_ladder_1 = _2245;
                frontier_phi_55_56_ladder_2 = _2241;
                frontier_phi_55_56_ladder_3 = _2239;
                frontier_phi_55_56_ladder_4 = _2237;
                frontier_phi_55_56_ladder_5 = _2235;
            }
            _2348 = frontier_phi_55_56_ladder_5;
            _2350 = frontier_phi_55_56_ladder_4;
            _2352 = frontier_phi_55_56_ladder_3;
            _2354 = frontier_phi_55_56_ladder_2;
            _2356 = frontier_phi_55_56_ladder;
            _2358 = frontier_phi_55_56_ladder_1;
        }
        float _2363 = isnan(1.0) ? _427 : (isnan(_427) ? 1.0 : min(_427, 1.0));
        _2144 = (_2363 * _2354) + _1599;
        _2146 = (_2363 * _2356) + _1601;
        _2148 = (_2363 * _2358) + _1603;
        _2150 = ((_2348 * 0.039999999105930328369140625) * _2363) + _1929;
        _2152 = ((_2350 * 0.039999999105930328369140625) * _2363) + _1931;
        _2154 = ((_2352 * 0.039999999105930328369140625) * _2363) + _1933;
    }
    else
    {
        _2144 = _1599;
        _2146 = _1601;
        _2148 = _1603;
        _2150 = _1929;
        _2152 = _1931;
        _2154 = _1933;
    }
    float _3981 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _3992 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _4003 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _2171 = ((isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_2144 + ((isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0))) * _427))) + ((_2150 + ((isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))) * _1234)) * cbPerFrame._m0[3u].x);
    float _2172 = ((isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_2146 + ((isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0))) * _427))) + ((_2152 + ((isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0))) * _1234)) * cbPerFrame._m0[3u].x);
    float _2173 = ((isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_2148 + ((isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0))) * _427))) + ((_2154 + ((isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))) * _1234)) * cbPerFrame._m0[3u].x);
    uint _2177 = _401 + 6u;
    float _2185 = _360 / cbSceneParam._m0[86u].x;
    float _2186 = _361 / cbSceneParam._m0[86u].y;
    vec4 _2200 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2185, _2186, (log2((isnan(cbSceneParam._m0[77u].w) ? _292 : (isnan(_292) ? cbSceneParam._m0[77u].w : min(_292, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2202 = _2200.x;
    float _2203 = _2200.y;
    float _2204 = _2200.z;
    float _2205 = _2200.w;
    float _2298;
    float _2300;
    float _2302;
    float _2304;
    if (_292 > cbSceneParam._m0[78u].w)
    {
        float _2260 = isnan(_292) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _292 : min(cbSceneParam._m0[80u].w, _292));
        float _2261 = _2260 / _292;
        float _2272 = _2261 * _345;
        float _2273 = _346 * _2261;
        float _2274 = (-0.0) - _2273;
        float _2276 = _2261 * _347;
        float _2278 = (cbSceneParam._m0[77u].w * _2274) / _2260;
        float _2279 = _2278 + cbSceneParam._m0[79u].w;
        float _2280 = cbSceneParam._m0[79u].w - _2273;
        float _2286 = sqrt(((_2272 * _2272) + (_2273 * _2273)) + (_2276 * _2276));
        float _2289 = (1.0 - (cbSceneParam._m0[77u].w / _2260)) * _2286;
        float _2294 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2296 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2449;
        if (abs((_2274 - _2278) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2449 = ((((_2279 > 0.0) ? exp2(_2294 * _2279) : (2.0 - exp2(_2296 * _2279))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2289;
        }
        else
        {
            float _2409 = 1.0 / cbSceneParam._m0[80u].x;
            float _2410 = isnan(_2280) ? _2279 : (isnan(_2279) ? _2280 : max(_2279, _2280));
            float _2411 = isnan(_2280) ? _2279 : (isnan(_2279) ? _2280 : min(_2279, _2280));
            float _2420 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : min(_2410, 0.0));
            float _2421 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : min(_2411, 0.0));
            _2449 = ((abs(_2286 / _2274) * cbSceneParam._m0[80u].y) * ((((_2420 - _2421) * 2.0) - ((exp2(_2294 * (isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0)))) - exp2(_2294 * (isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0))))) * _2409)) - ((exp2(_2296 * _2420) - exp2(_2296 * _2421)) * _2409))) + (_2289 * cbSceneParam._m0[80u].z);
        }
        vec4 _2451 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2185, _2186, 1.0), 0.0);
        float _2460 = exp2((_2449 * (-1.44269502162933349609375)) * (1.0 - _2451.w));
        float _2461 = log2(_2460);
        float _2477 = log2(_2205);
        _2298 = (exp2(_2477 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2461 * cbSceneParam._m0[78u].x)) * _2451.x) / cbSceneParam._m0[78u].x)) + _2202;
        _2300 = (exp2(_2477 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2461 * cbSceneParam._m0[78u].y)) * _2451.y) / cbSceneParam._m0[78u].y)) + _2203;
        _2302 = (exp2(_2477 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2461 * cbSceneParam._m0[78u].z)) * _2451.z) / cbSceneParam._m0[78u].z)) + _2204;
        _2304 = _2460 * _2205;
    }
    else
    {
        _2298 = _2202;
        _2300 = _2203;
        _2302 = _2204;
        _2304 = _2205;
    }
    float _2316 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2317 = _2316 == 3.0;
    float _2318 = log2(_2304);
    float _2325 = exp2(_2318 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0)));
    float _2326 = exp2(_2318 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0)));
    float _2327 = exp2(_2318 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0)));
    float _2336 = (_2316 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2336 * (_2317 ? _2325 : (_2325 + (cbSceneParam._m0[72u].w * _2298)));
    SV_Target.y = _2336 * (_2317 ? _2326 : (_2326 + (cbSceneParam._m0[72u].w * _2300)));
    SV_Target.z = _2336 * (_2317 ? _2327 : (_2327 + (cbSceneParam._m0[72u].w * _2302)));
    SV_Target.w = cbInstanceData._m0[_2177].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2177].w;
}


