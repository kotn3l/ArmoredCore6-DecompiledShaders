#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1049;
float _3478;
float _3479;
float _3480;
float _3481;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _241 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _247 = _241.x * cbMtdParam._m0[9u].x;
    float _248 = _241.y * cbMtdParam._m0[9u].y;
    float _249 = _241.z * cbMtdParam._m0[9u].z;
    vec4 _269 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _290 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_269.x + 0.00999999977648258209228515625));
    float _292 = _290 * (cbMtdParam._m0[15u].x + 1.0);
    float _3490 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _293 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
    float _301 = ((((cbMtdParam._m0[12u].x - _247) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _293) + _247;
    float _302 = ((((cbMtdParam._m0[12u].y - _248) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _293) + _248;
    float _303 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _249)) * _293) + _249;
    vec4 _316 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _318 = _316.x;
    vec4 _330 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _334 = _330.z;
    float _338 = (_330.x * 2.0) + (-1.0);
    float _340 = (_330.y * 2.0) + (-1.0);
    float _341 = dot(vec2(_338, _340), vec2(_338, _340));
    float _3501 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _346 = sqrt(1.0 - (isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0))));
    float _349 = _290 * (cbMtdParam._m0[14u].w + 1.0);
    float _3512 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _353 = ((cbMtdParam._m0[14u].y - _334) * (isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0)))) + _334;
    vec4 _381 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _396 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _425 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _431 = (_425.x * 2.0) + (-1.0);
    float _432 = (_425.y * 2.0) + (-1.0);
    float _433 = dot(vec2(_431, _432), vec2(_431, _432));
    float _3523 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _449 = (_293 * (((cbMtdParam._m0[13u].z * _338) - _338) + _431)) + _338;
    float _450 = (_293 * (((cbMtdParam._m0[13u].z * _340) - _340) + _432)) + _340;
    float _451 = (_293 * (sqrt(1.0 - (isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0)))) - _346)) + _346;
    float _454 = fma(_451, _212 * NORMAL.x, fma(_450, _219 * TANGENT.x, (_205 * _197) * _449));
    float _457 = fma(_451, _212 * NORMAL.y, fma(_450, _219 * TANGENT.y, (_205 * _198) * _449));
    float _460 = fma(_451, _212 * NORMAL.z, fma(_450, _219 * TANGENT.z, (_205 * _199) * _449));
    float _464 = inversesqrt(dot(vec3(_454, _457, _460), vec3(_454, _457, _460)));
    float _465 = _464 * _454;
    float _466 = _464 * _457;
    float _467 = _464 * _460;
    float _3534 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _468 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
    float _3545 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3556 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _3567 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3578 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _472 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
    float _488 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _529 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _539 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _529);
    float _540 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _529);
    float _541 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _529);
    float _545 = inversesqrt(dot(vec3(_539, _540, _541), vec3(_539, _540, _541)));
    float _546 = _539 * _545;
    float _547 = _540 * _545;
    float _548 = _541 * _545;
    vec4 _553 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _555 = _553.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _729 = sqrt(((_539 * _539) + (_540 * _540)) + (_541 * _541));
        float _735 = (cbMatDynParam._m0[5u].x * _729) + cbMatDynParam._m0[5u].y;
        float _3589 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _736 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _740 = (cbMatDynParam._m0[5u].z * _729) + cbMatDynParam._m0[5u].w;
        float _3600 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) - _736)) + _736) < ((_555 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _566 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _567 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _587 = fma(_467, cbSceneParam._m0[5u].z, fma(_466, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _465));
    float _590 = fma(_467, cbSceneParam._m0[6u].z, fma(_466, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _465));
    float _593 = fma(_467, cbSceneParam._m0[7u].z, fma(_466, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _465));
    uint _606 = uint(roundEven(NORMAL.w)) * 13u;
    uint _607 = _606 + 9u;
    uint _608 = _607 + uint(cbMatDynParam._m0[0u].w);
    float _614 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0)))) * cbInstanceData._m0[_608].x;
    float _615 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0)))) * cbInstanceData._m0[_608].y;
    float _616 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0)))) * cbInstanceData._m0[_608].z;
    float _3611 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _617 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
    float _3622 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _618 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
    float _3633 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _619 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
    float _620 = 1.0 - _472;
    float _621 = _617 * _620;
    float _622 = _618 * _620;
    float _623 = _619 * _620;
    float _628 = (_617 + (-0.039999999105930328369140625)) * _472;
    float _629 = (_618 + (-0.039999999105930328369140625)) * _472;
    float _630 = (_619 + (-0.039999999105930328369140625)) * _472;
    float _631 = _628 + 0.039999999105930328369140625;
    float _633 = _629 + 0.039999999105930328369140625;
    float _634 = _630 + 0.039999999105930328369140625;
    vec4 _643 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _566, cbSceneParam._m0[86u].y * _567));
    float _646 = _643.x * TEXCOORD_3.w;
    float _647 = dot(vec3(_465, _466, _467), vec3(_546, _547, _548));
    float _650 = _647 * 2.0;
    float _654 = (_650 * _465) - _546;
    float _655 = (_650 * _466) - _547;
    float _656 = (_650 * _467) - _548;
    float _660 = abs(dot(vec3(_546, _547, _548), vec3(_465, _466, _467)));
    float _3644 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _662 = sqrt(_468);
    float _675 = exp2((_662 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_662 * 3.0));
    float _681 = (1.0 - _675) * ((_662 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _682 = _675 * _662;
    float _710 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _714 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _718 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1048;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _773 = fma(_718, cbModelParam._m0[26u].z, fma(_714, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _710));
        float _777 = fma(_718, cbModelParam._m0[27u].z, fma(_714, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _710));
        float _781 = fma(_718, cbModelParam._m0[28u].z, fma(_714, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _710));
        float _806 = _710 + _465;
        float _807 = _714 + _466;
        float _808 = _718 + _467;
        float _818 = fma(_808, cbModelParam._m0[26u].z, fma(_807, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _806)) - _773;
        float _819 = fma(_808, cbModelParam._m0[27u].z, fma(_807, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _806)) - _777;
        float _820 = fma(_808, cbModelParam._m0[28u].z, fma(_807, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _806)) - _781;
        float _824 = inversesqrt(dot(vec3(_818, _819, _820), vec3(_818, _819, _820)));
        float _837 = ((_824 * _818) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_773 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _838 = ((_824 * _819) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_777 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _839 = ((_824 * _820) / cbModelParam._m0[34u].z) + ((((((_781 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _842 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_837, _838, _839), 0.0);
        vec4 _849 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_837, _838, _839), 0.0);
        vec4 _856 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_837, _838, _839), 0.0);
        vec4 _863 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_837, _838, _839), 0.0);
        float _876 = exp2((_842.w + (-0.5)) * 20.0) * 2.0;
        float _877 = _876 * (_842.x + (-0.5));
        float _878 = _876 * (_842.y + (-0.5));
        float _879 = _876 * (_842.z + (-0.5));
        float _886 = exp2((_849.w + (-0.5)) * 20.0) * 2.0;
        float _887 = _886 * (_849.x + (-0.5));
        float _888 = _886 * (_849.y + (-0.5));
        float _889 = _886 * (_849.z + (-0.5));
        float _896 = exp2((_856.w + (-0.5)) * 20.0) * 2.0;
        float _897 = _896 * (_856.x + (-0.5));
        float _898 = _896 * (_856.y + (-0.5));
        float _899 = _896 * (_856.z + (-0.5));
        float _906 = exp2((_863.w + (-0.5)) * 20.0) * 2.0;
        float _907 = _906 * (_863.x + (-0.5));
        float _908 = _906 * (_863.y + (-0.5));
        float _909 = _906 * (_863.z + (-0.5));
        float _910 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _911 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _912 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _913 = _877 * 0.5;
        float _914 = _887 * 0.5;
        float _915 = _897 * 0.5;
        float _916 = dot(vec3(_913, _914, _915), vec3(_913, _914, _915));
        float _921 = (_916 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_916);
        float _930 = (dot(vec3(_465, _466, _467), vec3(_921 * _913, _921 * _914, _921 * _915)) + 1.0) * 0.5;
        float _3670 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _940 = sqrt(((_914 * _914) + (_913 * _913)) + (_915 * _915)) / (_910 + 9.9999997473787516355514526367188e-06);
        float _3681 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _942 = _941 * 2.0;
        float _946 = (1.0 - _941) / (_941 + 1.0);
        float _3692 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _947 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _956 = ((((1.0 - _947) * (_942 + 2.0)) * exp2(log2(isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * (_942 + 1.0))) + _947) * _910;
        float _957 = _878 * 0.5;
        float _958 = _888 * 0.5;
        float _959 = _898 * 0.5;
        float _960 = dot(vec3(_957, _958, _959), vec3(_957, _958, _959));
        float _965 = (_960 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_960);
        float _973 = (dot(vec3(_465, _466, _467), vec3(_965 * _957, _965 * _958, _965 * _959)) + 1.0) * 0.5;
        float _3703 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _982 = sqrt(((_958 * _958) + (_957 * _957)) + (_959 * _959)) / (_911 + 9.9999997473787516355514526367188e-06);
        float _3714 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _984 = _983 * 2.0;
        float _988 = (1.0 - _983) / (_983 + 1.0);
        float _3725 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _998 = ((((1.0 - _989) * (_984 + 2.0)) * exp2(log2(isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * (_984 + 1.0))) + _989) * _911;
        float _999 = _879 * 0.5;
        float _1000 = _889 * 0.5;
        float _1001 = _899 * 0.5;
        float _1002 = dot(vec3(_999, _1000, _1001), vec3(_999, _1000, _1001));
        float _1007 = (_1002 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1002);
        float _1015 = (dot(vec3(_465, _466, _467), vec3(_1007 * _999, _1007 * _1000, _1007 * _1001)) + 1.0) * 0.5;
        float _3736 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1024 = sqrt(((_1000 * _1000) + (_999 * _999)) + (_1001 * _1001)) / (_912 + 9.9999997473787516355514526367188e-06);
        float _3747 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1026 = _1025 * 2.0;
        float _1030 = (1.0 - _1025) / (_1025 + 1.0);
        float _3758 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1040 = ((((1.0 - _1031) * (_1026 + 2.0)) * exp2(log2(isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * (_1026 + 1.0))) + _1031) * _912;
        _1048 = _879;
        _1050 = _878;
        _1051 = _877;
        _1052 = _889;
        _1053 = _888;
        _1054 = _887;
        _1055 = _899;
        _1056 = _898;
        _1057 = _897;
        _1058 = _912;
        _1059 = _911;
        _1060 = _910;
        _1061 = cbModelParam._m0[36u].z * (isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0)));
        _1062 = cbModelParam._m0[36u].z * (isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0)));
        _1063 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0)));
    }
    else
    {
        _1048 = _1049;
        _1050 = _1049;
        _1051 = _1049;
        _1052 = _1049;
        _1053 = _1049;
        _1054 = _1049;
        _1055 = _1049;
        _1056 = _1049;
        _1057 = _1049;
        _1058 = _1049;
        _1059 = _1049;
        _1060 = _1049;
        _1061 = 0.0;
        _1062 = 0.0;
        _1063 = 0.0;
    }
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1092 = fma(_718, cbModelParam._m0[30u].z, fma(_714, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _710));
        float _1096 = fma(_718, cbModelParam._m0[31u].z, fma(_714, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _710));
        float _1100 = fma(_718, cbModelParam._m0[32u].z, fma(_714, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _710));
        float _1123 = _710 + _465;
        float _1124 = _714 + _466;
        float _1125 = _718 + _467;
        float _1135 = fma(_1125, cbModelParam._m0[30u].z, fma(_1124, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1123)) - _1092;
        float _1136 = fma(_1125, cbModelParam._m0[31u].z, fma(_1124, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1123)) - _1096;
        float _1137 = fma(_1125, cbModelParam._m0[32u].z, fma(_1124, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1123)) - _1100;
        float _1141 = inversesqrt(dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137)));
        float _1154 = ((_1141 * _1135) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1092 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1155 = ((_1141 * _1136) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1096 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1156 = ((_1141 * _1137) / cbModelParam._m0[35u].z) + ((((((_1100 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        float _1191 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1158.x + (-0.5));
        float _1193 = _1191 * (_1158.y + (-0.5));
        float _1194 = _1191 * (_1158.z + (-0.5));
        float _1201 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1165.x + (-0.5));
        float _1203 = _1201 * (_1165.y + (-0.5));
        float _1204 = _1201 * (_1165.z + (-0.5));
        float _1211 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1172.x + (-0.5));
        float _1213 = _1211 * (_1172.y + (-0.5));
        float _1214 = _1211 * (_1172.z + (-0.5));
        float _1221 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1179.x + (-0.5));
        float _1223 = _1221 * (_1179.y + (-0.5));
        float _1224 = _1221 * (_1179.z + (-0.5));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = _1192 * 0.5;
        float _1229 = _1202 * 0.5;
        float _1230 = _1212 * 0.5;
        float _1231 = dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230));
        float _1236 = (_1231 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1231);
        float _1244 = (dot(vec3(_465, _466, _467), vec3(_1236 * _1228, _1236 * _1229, _1236 * _1230)) + 1.0) * 0.5;
        float _3799 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1253 = sqrt(((_1229 * _1229) + (_1228 * _1228)) + (_1230 * _1230)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _3810 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1255 = _1254 * 2.0;
        float _1259 = (1.0 - _1254) / (_1254 + 1.0);
        float _3821 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1269 = ((((1.0 - _1260) * (_1255 + 2.0)) * exp2(log2(isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * (_1255 + 1.0))) + _1260) * _1225;
        float _1270 = _1193 * 0.5;
        float _1271 = _1203 * 0.5;
        float _1272 = _1213 * 0.5;
        float _1273 = dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272));
        float _1278 = (_1273 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1273);
        float _1286 = (dot(vec3(_465, _466, _467), vec3(_1278 * _1270, _1278 * _1271, _1278 * _1272)) + 1.0) * 0.5;
        float _3832 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1295 = sqrt(((_1271 * _1271) + (_1270 * _1270)) + (_1272 * _1272)) / (_1226 + 9.9999997473787516355514526367188e-06);
        float _3843 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1297 = _1296 * 2.0;
        float _1301 = (1.0 - _1296) / (_1296 + 1.0);
        float _3854 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1311 = ((((1.0 - _1302) * (_1297 + 2.0)) * exp2(log2(isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * (_1297 + 1.0))) + _1302) * _1226;
        float _1312 = _1194 * 0.5;
        float _1313 = _1204 * 0.5;
        float _1314 = _1214 * 0.5;
        float _1315 = dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314));
        float _1320 = (_1315 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1315);
        float _1328 = (dot(vec3(_465, _466, _467), vec3(_1320 * _1312, _1320 * _1313, _1320 * _1314)) + 1.0) * 0.5;
        float _3865 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1337 = sqrt(((_1313 * _1313) + (_1312 * _1312)) + (_1314 * _1314)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _3876 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1339 = _1338 * 2.0;
        float _1343 = (1.0 - _1338) / (_1338 + 1.0);
        float _3887 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1353 = ((((1.0 - _1344) * (_1339 + 2.0)) * exp2(log2(isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * (_1339 + 1.0))) + _1344) * _1227;
        _1361 = _1194;
        _1362 = _1193;
        _1363 = _1192;
        _1364 = _1204;
        _1365 = _1203;
        _1366 = _1202;
        _1367 = _1214;
        _1368 = _1213;
        _1369 = _1212;
        _1370 = _1227;
        _1371 = _1226;
        _1372 = _1225;
        _1373 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)));
        _1374 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)));
        _1375 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)));
    }
    else
    {
        _1361 = _1049;
        _1362 = _1049;
        _1363 = _1049;
        _1364 = _1049;
        _1365 = _1049;
        _1366 = _1049;
        _1367 = _1049;
        _1368 = _1049;
        _1369 = _1049;
        _1370 = _1049;
        _1371 = _1049;
        _1372 = _1049;
        _1373 = 0.0;
        _1374 = 0.0;
        _1375 = 0.0;
    }
    float _1385 = (cbModelParam._m0[1u].x * (_1373 - _1061)) + _1061;
    float _1386 = (cbModelParam._m0[1u].x * (_1374 - _1062)) + _1062;
    float _1387 = (cbModelParam._m0[1u].x * (_1375 - _1063)) + _1063;
    float _1408 = fma(_1387, cbSceneParam._m0[89u].z, fma(_1386, cbSceneParam._m0[89u].y, _1385 * cbSceneParam._m0[89u].x));
    float _1411 = fma(_1387, cbSceneParam._m0[90u].z, fma(_1386, cbSceneParam._m0[90u].y, _1385 * cbSceneParam._m0[90u].x));
    float _1414 = fma(_1387, cbSceneParam._m0[91u].z, fma(_1386, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1385));
    float _1429 = _654 * 0.5;
    float _1430 = _655 * 0.5;
    float _1431 = _656 * 0.5;
    float _1432 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1363, _1366, _1369, _1372));
    float _1435 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1362, _1365, _1368, _1371));
    float _1438 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1361, _1364, _1367, _1370));
    float _1472;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1445 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1048, _1052, _1055, _1058));
        float _1449 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1050, _1053, _1056, _1059));
        float _1453 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1051, _1054, _1057, _1060));
        float _1460 = dot(vec4(cbModelParam._m0[39u]), vec4(_1429, _1430, _1431, 1.0));
        _1472 = dot(vec3(isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)), isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)), isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1460) ? 0.0 : (isnan(0.0) ? _1460 : max(0.0, _1460))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1472 = 1.0;
    }
    float _1483;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1474 = dot(vec4(cbModelParam._m0[40u]), vec4(_1429, _1430, _1431, 1.0));
        _1483 = dot(vec3(isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)), isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)), isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1474) ? 0.0 : (isnan(0.0) ? _1474 : max(0.0, _1474))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1483 = 1.0;
    }
    float _1487 = (_1483 * cbModelParam._m0[1u].x) + (_1472 * (1.0 - cbModelParam._m0[1u].x));
    float _1497 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _468);
    float _1498 = isnan(_1497) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1497 : min(cbModelParam._m0[25u].z, _1497));
    float _1578;
    float _1580;
    float _1582;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1545 = fma(_718, cbModelParam._m0[13u].z, fma(_714, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _710)) + cbModelParam._m0[13u].w;
        float _1549 = fma(_718, cbModelParam._m0[14u].z, fma(_714, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _710)) + cbModelParam._m0[14u].w;
        float _1553 = fma(_718, cbModelParam._m0[15u].z, fma(_714, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _710)) + cbModelParam._m0[15u].w;
        float _1556 = fma(_656, cbModelParam._m0[13u].z, fma(_655, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _654));
        float _1559 = fma(_656, cbModelParam._m0[14u].z, fma(_655, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _654));
        float _1562 = fma(_656, cbModelParam._m0[15u].z, fma(_655, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _654));
        float _1590;
        if (_1556 > 0.0)
        {
            _1590 = abs((1.0 - _1545) / _1556);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1556 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1545 + 1.0) / _1556);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1590 = frontier_phi_17_15_ladder;
        }
        float _1795;
        if (_1559 > 0.0)
        {
            _1795 = abs((1.0 - _1549) / _1559);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1559 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1549 + 1.0) / _1559);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1795 = frontier_phi_26_22_ladder;
        }
        float _2049;
        if (_1562 > 0.0)
        {
            _2049 = abs((1.0 - _1553) / _1562);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1562 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1553 + 1.0) / _1562);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2049 = frontier_phi_38_33_ladder;
        }
        float _2051 = isnan(_1795) ? _1590 : (isnan(_1590) ? _1795 : min(_1590, _1795));
        float _2052 = isnan(_2049) ? _2051 : (isnan(_2051) ? _2049 : min(_2051, _2049));
        float _2056 = (_2052 * _1556) + _1545;
        float _2057 = (_2052 * _1559) + _1549;
        float _2058 = (_2052 * _1562) + _1553;
        float _2059 = _2052 * 9.9999997473787516355514526367188e-05;
        float _2061 = (-1.0) - _2059;
        float _2063 = _2059 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2058 > _2063) || ((_2058 < _2061) || ((_2057 > _2063) || ((_2057 < _2061) || ((_2056 < _2061) || (_2056 > _2063))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2186 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2058, cbModelParam._m0[9u].z, fma(_2057, cbModelParam._m0[9u].y, _2056 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2058, cbModelParam._m0[10u].z, fma(_2057, cbModelParam._m0[10u].y, _2056 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2058, cbModelParam._m0[11u].z, fma(_2057, cbModelParam._m0[11u].y, _2056 * cbModelParam._m0[11u].x))), _1498);
            frontier_phi_16_38_ladder = _2186.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2186.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2186.x * cbModelParam._m0[1u].y;
        }
        _1578 = frontier_phi_16_38_ladder_2;
        _1580 = frontier_phi_16_38_ladder_1;
        _1582 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1566 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_654, _655, _656), _1498);
        _1578 = _1566.x * cbModelParam._m0[1u].y;
        _1580 = _1566.y * cbModelParam._m0[1u].y;
        _1582 = _1566.z * cbModelParam._m0[1u].y;
    }
    float _1586 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _468);
    float _1587 = isnan(_1586) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1586 : min(cbModelParam._m0[25u].w, _1586));
    float _1678;
    float _1680;
    float _1682;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1642 = fma(_718, cbModelParam._m0[21u].z, fma(_714, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _710)) + cbModelParam._m0[21u].w;
        float _1646 = fma(_718, cbModelParam._m0[22u].z, fma(_714, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _710)) + cbModelParam._m0[22u].w;
        float _1650 = fma(_718, cbModelParam._m0[23u].z, fma(_714, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _710)) + cbModelParam._m0[23u].w;
        float _1653 = fma(_656, cbModelParam._m0[21u].z, fma(_655, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _654));
        float _1656 = fma(_656, cbModelParam._m0[22u].z, fma(_655, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _654));
        float _1659 = fma(_656, cbModelParam._m0[23u].z, fma(_655, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _654));
        float _1800;
        if (_1653 > 0.0)
        {
            _1800 = abs((1.0 - _1642) / _1653);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1642 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1800 = frontier_phi_28_24_ladder;
        }
        float _2076;
        if (_1656 > 0.0)
        {
            _2076 = abs((1.0 - _1646) / _1656);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1656 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1646 + 1.0) / _1656);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2076 = frontier_phi_40_35_ladder;
        }
        float _2289;
        if (_1659 > 0.0)
        {
            _2289 = abs((1.0 - _1650) / _1659);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1659 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1650 + 1.0) / _1659);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2289 = frontier_phi_49_46_ladder;
        }
        float _2291 = isnan(_2076) ? _1800 : (isnan(_1800) ? _2076 : min(_1800, _2076));
        float _2292 = isnan(_2289) ? _2291 : (isnan(_2291) ? _2289 : min(_2291, _2289));
        float _2296 = (_2292 * _1653) + _1642;
        float _2297 = (_2292 * _1656) + _1646;
        float _2298 = (_2292 * _1659) + _1650;
        float _2299 = _2292 * 9.9999997473787516355514526367188e-05;
        float _2300 = (-1.0) - _2299;
        float _2302 = _2299 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2298 > _2302) || ((_2298 < _2300) || ((_2297 > _2302) || ((_2297 < _2300) || ((_2296 < _2300) || (_2296 > _2302))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2532 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2298, cbModelParam._m0[17u].z, fma(_2297, cbModelParam._m0[17u].y, _2296 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2298, cbModelParam._m0[18u].z, fma(_2297, cbModelParam._m0[18u].y, _2296 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2298, cbModelParam._m0[19u].z, fma(_2297, cbModelParam._m0[19u].y, _2296 * cbModelParam._m0[19u].x))), _1587);
            frontier_phi_25_49_ladder = _2532.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2532.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2532.x * cbModelParam._m0[1u].z;
        }
        _1678 = frontier_phi_25_49_ladder_2;
        _1680 = frontier_phi_25_49_ladder_1;
        _1682 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1662 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_654, _655, _656), _1587);
        _1678 = _1662.x * cbModelParam._m0[1u].z;
        _1680 = _1662.y * cbModelParam._m0[1u].z;
        _1682 = _1662.z * cbModelParam._m0[1u].z;
    }
    float _1695 = (((_681 * _631) + _682) * _646) * ((cbModelParam._m0[1u].w * (_1678 - _1578)) + _1578);
    float _1697 = (((_681 * _633) + _682) * _646) * ((cbModelParam._m0[1u].w * (_1680 - _1580)) + _1580);
    float _1699 = (((_681 * _634) + _682) * _646) * ((cbModelParam._m0[1u].w * (_1682 - _1582)) + _1582);
    float _1702 = fma(_1699, cbSceneParam._m0[89u].z, fma(_1697, cbSceneParam._m0[89u].y, _1695 * cbSceneParam._m0[89u].x));
    float _1705 = fma(_1699, cbSceneParam._m0[90u].z, fma(_1697, cbSceneParam._m0[90u].y, _1695 * cbSceneParam._m0[90u].x));
    float _1708 = fma(_1699, cbSceneParam._m0[91u].z, fma(_1697, cbSceneParam._m0[91u].y, _1695 * cbSceneParam._m0[91u].x));
    uvec4 _1718 = floatBitsToUint(cbInstanceData._m0[_606 + 5u]);
    uint _1720 = _1718.x * 14u;
    uint _1721 = _1720 + 13u;
    float _1728 = _646 + (-1.0);
    float _1733 = (cbLight._m0[_1721].x * _1728) + 1.0;
    float _1734 = (cbLight._m0[_1721].y * _1728) + 1.0;
    float _1735 = (cbLight._m0[_1721].z * _1728) + 1.0;
    float _1736 = (cbLight._m0[_1721].w * _1728) + 1.0;
    uint _1737 = _1720 + 5u;
    float _1743 = isnan(1.0) ? _1734 : (isnan(_1734) ? 1.0 : min(_1734, 1.0));
    uint _1747 = _1720 + 4u;
    float _1754 = isnan(1.0) ? _1733 : (isnan(_1733) ? 1.0 : min(_1733, 1.0));
    uint _1758 = _1720 | 1u;
    float _1769 = dot(vec3(cbLight._m0[_1720].xyz), vec3(_465, _466, _467));
    float _1772 = dot(vec3(cbLight._m0[_1758].xyz), vec3(_465, _466, _467));
    float _4023 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _4034 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    float _1777 = (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * 0.3183098733425140380859375;
    float _1779 = (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * 0.3183098733425140380859375;
    float _1786 = ((cbLight._m0[_1737].x * _1743) * _1779) + ((cbLight._m0[_1747].x * _1754) * _1777);
    float _1787 = ((_1743 * cbLight._m0[_1737].y) * _1779) + ((_1754 * cbLight._m0[_1747].y) * _1777);
    float _1788 = ((_1743 * cbLight._m0[_1737].z) * _1779) + ((_1754 * cbLight._m0[_1747].z) * _1777);
    uvec4 _1792 = floatBitsToUint(cbLight._m0[_1720 + 12u]);
    bool _1794 = _1792.x == 0u;
    float _1805;
    float _1807;
    float _1809;
    if (_1794)
    {
        _1805 = _1786;
        _1807 = _1787;
        _1809 = _1788;
    }
    else
    {
        uint _1813 = _1720 + 6u;
        float _1829 = (dot(vec3(cbLight._m0[_1720 + 2u].xyz), vec3(_465, _466, _467)) * 0.5) + 0.5;
        float _1830 = _1829 * _1829;
        float _4045 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
        float _1831 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1832 = isnan(1.0) ? _1735 : (isnan(_1735) ? 1.0 : min(_1735, 1.0));
        _1805 = (((cbLight._m0[_1813].x * 0.3183098733425140380859375) * _1831) * _1832) + _1786;
        _1807 = (((cbLight._m0[_1813].y * 0.3183098733425140380859375) * _1831) * _1832) + _1787;
        _1809 = (((cbLight._m0[_1813].z * 0.3183098733425140380859375) * _1831) * _1832) + _1788;
    }
    bool _1812 = _1792.y == 0u;
    float _1850;
    float _1852;
    float _1854;
    if (_1812)
    {
        _1850 = _1805;
        _1852 = _1807;
        _1854 = _1809;
    }
    else
    {
        uint _2020 = _1720 + 7u;
        float _2036 = (dot(vec3(cbLight._m0[_1720 + 3u].xyz), vec3(_465, _466, _467)) * 0.5) + 0.5;
        float _2037 = _2036 * _2036;
        float _4061 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        float _2038 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _2039 = isnan(1.0) ? _1736 : (isnan(_1736) ? 1.0 : min(_1736, 1.0));
        _1850 = (((cbLight._m0[_2020].x * 0.3183098733425140380859375) * _2038) * _2039) + _1805;
        _1852 = (((cbLight._m0[_2020].y * 0.3183098733425140380859375) * _2038) * _2039) + _1807;
        _1854 = (((cbLight._m0[_2020].z * 0.3183098733425140380859375) * _2038) * _2039) + _1809;
    }
    uint _1857 = _1720 + 8u;
    float _1870 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1720].w)) * _468) * 0.949999988079071044921875);
    float _1871 = _1870 * _1870;
    float _1872 = cbLight._m0[_1720].x + _546;
    float _1873 = cbLight._m0[_1720].y + _547;
    float _1874 = cbLight._m0[_1720].z + _548;
    float _1878 = inversesqrt(dot(vec3(_1872, _1873, _1874), vec3(_1872, _1873, _1874)));
    float _1879 = _1878 * _1872;
    float _1880 = _1878 * _1873;
    float _1881 = _1878 * _1874;
    float _1882 = dot(vec3(_465, _466, _467), vec3(cbLight._m0[_1720].xyz));
    float _4077 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _1885 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _4088 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _1886 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _1887 = dot(vec3(_465, _466, _467), vec3(_1879, _1880, _1881));
    float _4099 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _1890 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _1891 = dot(vec3(cbLight._m0[_1720].xyz), vec3(_1879, _1880, _1881));
    float _4110 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1895 = _1871 * _1871;
    float _1899 = ((_1890 * _1890) * (_1895 + (-1.0))) + 1.0;
    float _1907 = exp2(log2(1.0 - (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0)))) * 5.0);
    float _1908 = 0.959999978542327880859375 - _628;
    float _1910 = 0.959999978542327880859375 - _629;
    float _1911 = 0.959999978542327880859375 - _630;
    float _1918 = 1.0 - _1871;
    float _1929 = (0.5 / (((_1886 * ((_1885 * _1918) + _1871)) + 9.9999999392252902907785028219223e-09) + (((_1886 * _1918) + _1871) * _1885))) * _1885;
    float _4121 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
    float _1931 = (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_1895 / ((_1899 * _1899) * 3.141590118408203125));
    uint _1942 = _1720 + 9u;
    float _1953 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1758].w)) * _468) * 0.949999988079071044921875);
    float _1954 = _1953 * _1953;
    float _1955 = cbLight._m0[_1758].x + _546;
    float _1956 = cbLight._m0[_1758].y + _547;
    float _1957 = cbLight._m0[_1758].z + _548;
    float _1961 = inversesqrt(dot(vec3(_1955, _1956, _1957), vec3(_1955, _1956, _1957)));
    float _1962 = _1961 * _1955;
    float _1963 = _1961 * _1956;
    float _1964 = _1961 * _1957;
    float _1965 = dot(vec3(_465, _466, _467), vec3(cbLight._m0[_1758].xyz));
    float _4132 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _1968 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _1969 = dot(vec3(_465, _466, _467), vec3(_1962, _1963, _1964));
    float _4143 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _1972 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _1973 = dot(vec3(cbLight._m0[_1758].xyz), vec3(_1962, _1963, _1964));
    float _4154 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
    float _1977 = _1954 * _1954;
    float _1981 = ((_1972 * _1972) * (_1977 + (-1.0))) + 1.0;
    float _1988 = exp2(log2(1.0 - (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) * 5.0);
    float _1995 = 1.0 - _1954;
    float _2005 = (0.5 / (((_1886 * ((_1968 * _1995) + _1954)) + 9.9999999392252902907785028219223e-09) + (((_1886 * _1995) + _1954) * _1968))) * _1968;
    float _4165 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2007 = (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_1977 / ((_1981 * _1981) * 3.141590118408203125));
    float _2017 = (((((_1988 * _1908) + _631) * cbLight._m0[_1942].x) * _2007) * _1743) + (((((_1907 * _1908) + _631) * cbLight._m0[_1857].x) * _1931) * _1754);
    float _2018 = (((((_1988 * _1910) + _633) * cbLight._m0[_1942].y) * _2007) * _1743) + (((((_1907 * _1910) + _633) * cbLight._m0[_1857].y) * _1931) * _1754);
    float _2019 = (((((_1988 * _1911) + _634) * cbLight._m0[_1942].z) * _2007) * _1743) + (((((_1907 * _1911) + _634) * cbLight._m0[_1857].z) * _1931) * _1754);
    float _2081;
    float _2083;
    float _2085;
    if (_1794)
    {
        _2081 = _2017;
        _2083 = _2018;
        _2085 = _2019;
    }
    else
    {
        uint _2087 = _1720 + 2u;
        uint _2091 = _1720 + 10u;
        float _2105 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2087].w)) * _468) * 0.949999988079071044921875);
        float _2106 = _2105 * _2105;
        float _2107 = cbLight._m0[_2087].x + _546;
        float _2108 = cbLight._m0[_2087].y + _547;
        float _2109 = cbLight._m0[_2087].z + _548;
        float _2113 = inversesqrt(dot(vec3(_2107, _2108, _2109), vec3(_2107, _2108, _2109)));
        float _2114 = _2113 * _2107;
        float _2115 = _2113 * _2108;
        float _2116 = _2113 * _2109;
        float _2117 = dot(vec3(_465, _466, _467), vec3(cbLight._m0[_2087].xyz));
        float _4176 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        float _2120 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _2121 = dot(vec3(_465, _466, _467), vec3(_2114, _2115, _2116));
        float _4187 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        float _2124 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _2125 = dot(vec3(cbLight._m0[_2087].xyz), vec3(_2114, _2115, _2116));
        float _4198 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2129 = _2106 * _2106;
        float _2133 = ((_2124 * _2124) * (_2129 + (-1.0))) + 1.0;
        float _2140 = exp2(log2(1.0 - (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0)))) * 5.0);
        float _2147 = 1.0 - _2106;
        float _2157 = (0.5 / (((_1886 * ((_2120 * _2147) + _2106)) + 9.9999999392252902907785028219223e-09) + (((_1886 * _2147) + _2106) * _2120))) * _2120;
        float _4209 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
        float _2159 = (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_2129 / ((_2133 * _2133) * 3.141590118408203125));
        float _2160 = isnan(1.0) ? _1735 : (isnan(_1735) ? 1.0 : min(_1735, 1.0));
        _2081 = (((((_2140 * _1908) + _631) * cbLight._m0[_2091].x) * _2159) * _2160) + _2017;
        _2083 = (((((_2140 * _1910) + _633) * cbLight._m0[_2091].y) * _2159) * _2160) + _2018;
        _2085 = (((((_2140 * _1911) + _634) * cbLight._m0[_2091].z) * _2159) * _2160) + _2019;
    }
    float _2195;
    float _2197;
    float _2199;
    if (_1812)
    {
        _2195 = _2081;
        _2197 = _2083;
        _2199 = _2085;
    }
    else
    {
        uint _2206 = _1720 + 3u;
        uint _2210 = _1720 + 11u;
        float _2224 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2206].w)) * _468) * 0.949999988079071044921875);
        float _2225 = _2224 * _2224;
        float _2226 = cbLight._m0[_2206].x + _546;
        float _2227 = cbLight._m0[_2206].y + _547;
        float _2228 = cbLight._m0[_2206].z + _548;
        float _2232 = inversesqrt(dot(vec3(_2226, _2227, _2228), vec3(_2226, _2227, _2228)));
        float _2233 = _2232 * _2226;
        float _2234 = _2232 * _2227;
        float _2235 = _2232 * _2228;
        float _2236 = dot(vec3(_465, _466, _467), vec3(cbLight._m0[_2206].xyz));
        float _4225 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
        float _2239 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _2240 = dot(vec3(_465, _466, _467), vec3(_2233, _2234, _2235));
        float _4236 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2243 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _2244 = dot(vec3(cbLight._m0[_2206].xyz), vec3(_2233, _2234, _2235));
        float _4247 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2248 = _2225 * _2225;
        float _2252 = ((_2243 * _2243) * (_2248 + (-1.0))) + 1.0;
        float _2259 = exp2(log2(1.0 - (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0)))) * 5.0);
        float _2266 = 1.0 - _2225;
        float _2276 = (0.5 / (((_1886 * ((_2239 * _2266) + _2225)) + 9.9999999392252902907785028219223e-09) + (((_1886 * _2266) + _2225) * _2239))) * _2239;
        float _4258 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2278 = (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_2248 / ((_2252 * _2252) * 3.141590118408203125));
        float _2279 = isnan(1.0) ? _1736 : (isnan(_1736) ? 1.0 : min(_1736, 1.0));
        _2195 = (((((_2259 * _1908) + _631) * cbLight._m0[_2210].x) * _2278) * _2279) + _2081;
        _2197 = (((((_2259 * _1910) + _633) * cbLight._m0[_2210].y) * _2278) * _2279) + _2083;
        _2199 = (((((_2259 * _1911) + _634) * cbLight._m0[_2210].z) * _2278) * _2279) + _2085;
    }
    float _2414;
    float _2416;
    float _2418;
    float _2420;
    float _2422;
    float _2424;
    if (_1718.y == 0u)
    {
        float _2354 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2355 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2354;
        float _2356 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2354;
        float _2357 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2354;
        uvec4 _2369 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2370 = _2369.x;
        uint _2381 = uint((float(_2369.y) * floor(float(uint(cbSceneParam._m0[85u].y * _567) / _2370))) + floor(float(uint(cbSceneParam._m0[85u].x * _566) / _2370)));
        float _2391 = (log2(_2357 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2392 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        uint _2395 = uint(isnan(14.0) ? _2392 : (isnan(_2392) ? 14.0 : min(_2392, 14.0)));
        uvec4 _2400 = texelFetch(g_lightClusterGridBuffer, int(((_2395 << 2u) + (_2381 << 6u)) >> 2u));
        uint _2401 = _2400.x;
        uint _2402 = _2369.z;
        float _2537;
        float _2539;
        float _2541;
        float _2543;
        float _2545;
        float _2547;
        if (((((1u << ((_2402 >> 4u) & 15u)) + 4294967295u) & _2401) == 0u) || ((_2402 & 240u) == 0u))
        {
            _2537 = 0.0;
            _2539 = 0.0;
            _2541 = 0.0;
            _2543 = 0.0;
            _2545 = 0.0;
            _2547 = 0.0;
        }
        else
        {
            float _2538;
            float _2540;
            float _2542;
            float _2544;
            float _2546;
            float _2548;
            float _2699 = 0.0;
            float _2700 = 0.0;
            float _2701 = 0.0;
            float _2702 = 0.0;
            float _2703 = 0.0;
            float _2704 = 0.0;
            uint _2705 = 0u;
            uint _2714;
            bool _2715;
            for (;;)
            {
                _2714 = texelFetch(g_lightClassification, int((((_2395 << 5u) + (_2381 << 9u)) + (_2705 << 2u)) >> 2u)).x;
                _2715 = _2714 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2715)
                {
                    frontier_phi_66_pred = _2699;
                    frontier_phi_66_pred_1 = _2704;
                    frontier_phi_66_pred_2 = _2703;
                    frontier_phi_66_pred_3 = _2702;
                    frontier_phi_66_pred_4 = _2701;
                    frontier_phi_66_pred_5 = _2700;
                }
                else
                {
                    float _2844;
                    float _2845;
                    float _2846;
                    float _2847;
                    float _2848;
                    float _2849;
                    uint _2850;
                    _2844 = _2699;
                    _2845 = _2700;
                    _2846 = _2701;
                    _2847 = _2702;
                    _2848 = _2703;
                    _2849 = _2704;
                    _2850 = _2714;
                    float _2771;
                    float _2772;
                    float _2773;
                    float _2774;
                    float _2775;
                    float _2776;
                    for (;;)
                    {
                        uint _2854 = uint(findLSB(_2850)) + (_2705 << 5u);
                        uint _2851 = (_2850 + 4294967295u) & _2850;
                        uint _2856 = _2854 * 48u;
                        vec4 _2870 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2856)).x, texelFetch(g_PointLightRenderingBuffer, int(_2856 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2856 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2856 + 3u)).x));
                        uint _2876 = (_2854 * 48u) + 4u;
                        vec4 _2889 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2876)).x, texelFetch(g_PointLightRenderingBuffer, int(_2876 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2876 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2876 + 3u)).x));
                        uint _2895 = (_2854 * 48u) + 8u;
                        vec3 _2906 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2895)).x, texelFetch(g_PointLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2895 + 2u)).x));
                        float _2910 = _2870.x - _2355;
                        float _2911 = _2870.y - _2356;
                        float _2912 = _2870.z - _2357;
                        float _2913 = dot(vec3(_2910, _2911, _2912), vec3(_2910, _2911, _2912));
                        float _2916 = inversesqrt(_2913);
                        float _2917 = _2916 * _2910;
                        float _2918 = _2916 * _2911;
                        float _2919 = _2916 * _2912;
                        float _2920 = dot(vec3(_587, _590, _593), vec3(_2917, _2918, _2919));
                        float _2925 = 1.0 - (_2913 * _2870.w);
                        float _4284 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
                        float _2926 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
                        float _2927 = sqrt(_2913) * _2889.w;
                        float _2930 = 1.39999997615814208984375 / (_2927 + 1.39999997615814208984375);
                        float _2931 = _2930 * _2930;
                        float _2934 = ((1.0 - _2931) * _2920) + _2931;
                        float _2937 = _2927 * _2927;
                        float _2941 = ((isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0))) * _2926) / ((_2937 * 0.699999988079071044921875) + 1.0);
                        float _2945 = (-0.0) - _2355;
                        float _2946 = (-0.0) - _2356;
                        float _2947 = (-0.0) - _2357;
                        float _2951 = inversesqrt(dot(vec3(_2945, _2946, _2947), vec3(_2945, _2946, _2947)));
                        float _2952 = _2951 * _2945;
                        float _2953 = _2951 * _2946;
                        float _2954 = _2951 * _2947;
                        float _2962 = exp2(log2(1.0 / ((_2937 * 3.5) + 5.0)) * 0.25);
                        float _2963 = 1.0 - _662;
                        float _2970 = sqrt(1.0 - ((1.0 - (_2963 * _2963)) * (1.0 - (_2962 * _2962))));
                        float _2971 = _2970 * _2970;
                        float _2972 = _2971 * _2971;
                        float _2973 = _2952 + _2917;
                        float _2974 = _2953 + _2918;
                        float _2975 = _2954 + _2919;
                        float _2979 = inversesqrt(dot(vec3(_2973, _2974, _2975), vec3(_2973, _2974, _2975)));
                        float _2983 = dot(vec3(_587, _590, _593), vec3(_2952, _2953, _2954));
                        float _4300 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
                        float _2986 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
                        float _2987 = dot(vec3(_587, _590, _593), vec3(_2979 * _2973, _2979 * _2974, _2979 * _2975));
                        float _4311 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
                        float _2990 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
                        float _2994 = ((_2990 * _2990) * (_2972 + (-1.0))) + 1.0;
                        float _2995 = _2930 * _2971;
                        float _2996 = _2995 * _2995;
                        float _2999 = ((1.0 - _2996) * _2920) + _2996;
                        float _4322 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
                        float _3000 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
                        float _3001 = 1.0 - _2971;
                        float _3011 = (0.5 / (((_3000 * ((_2986 * _3001) + _2971)) + 9.9999999392252902907785028219223e-09) + (((_3000 * _3001) + _2971) * _2986))) * _3000;
                        float _4333 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                        float _3022 = (((_2972 * 3.1415927410125732421875) * (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0)))) / ((_2994 * _2994) * ((_2937 * 2.1991131305694580078125) + 3.141590118408203125))) * _2926;
                        _2774 = (_2941 * _2889.x) + _2847;
                        _2775 = (_2941 * _2889.y) + _2848;
                        _2776 = (_2941 * _2889.z) + _2849;
                        _2771 = (_3022 * _2906.x) + _2844;
                        _2772 = (_3022 * _2906.y) + _2845;
                        _2773 = (_3022 * _2906.z) + _2846;
                        if (_2851 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2844 = _2771;
                            _2845 = _2772;
                            _2846 = _2773;
                            _2847 = _2774;
                            _2848 = _2775;
                            _2849 = _2776;
                            _2850 = _2851;
                        }
                    }
                    frontier_phi_66_pred = _2771;
                    frontier_phi_66_pred_1 = _2776;
                    frontier_phi_66_pred_2 = _2775;
                    frontier_phi_66_pred_3 = _2774;
                    frontier_phi_66_pred_4 = _2773;
                    frontier_phi_66_pred_5 = _2772;
                }
                _2538 = frontier_phi_66_pred;
                _2548 = frontier_phi_66_pred_1;
                _2546 = frontier_phi_66_pred_2;
                _2544 = frontier_phi_66_pred_3;
                _2542 = frontier_phi_66_pred_4;
                _2540 = frontier_phi_66_pred_5;
                uint _2706 = _2705 + 1u;
                if (_2706 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2699 = _2538;
                    _2700 = _2540;
                    _2701 = _2542;
                    _2702 = _2544;
                    _2703 = _2546;
                    _2704 = _2548;
                    _2705 = _2706;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2537 = _2538;
            _2539 = _2540;
            _2541 = _2542;
            _2543 = _2544;
            _2545 = _2546;
            _2547 = _2548;
        }
        uvec4 _2551 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2552 = _2551.z;
        uint _2554 = (_2552 >> 8u) & 15u;
        float _2667;
        float _2669;
        float _2671;
        float _2673;
        float _2675;
        float _2677;
        if (((4294967295u << _2554) & _2401) == 0u)
        {
            _2667 = _2537;
            _2669 = _2539;
            _2671 = _2541;
            _2673 = _2543;
            _2675 = _2545;
            _2677 = _2547;
        }
        else
        {
            float _2692 = inversesqrt(dot(vec3(_2355, _2356, _2357), vec3(_2355, _2356, _2357)));
            float _2693 = _2692 * _2355;
            float _2694 = _2692 * _2356;
            float _2695 = _2692 * _2357;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2554 < ((_2552 >> 12u) & 15u))
            {
                float _2668;
                float _2670;
                float _2672;
                float _2674;
                float _2676;
                float _2678;
                float _2827 = _2537;
                float _2828 = _2539;
                float _2829 = _2541;
                float _2830 = _2543;
                float _2831 = _2545;
                float _2832 = _2547;
                uint _2833 = _2554;
                uint _2842;
                bool _2843;
                for (;;)
                {
                    _2842 = texelFetch(g_lightClassification, int((((_2395 << 5u) + (_2381 << 9u)) + (_2833 << 2u)) >> 2u)).x;
                    _2843 = _2842 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2843)
                    {
                        frontier_phi_77_pred = _2832;
                        frontier_phi_77_pred_1 = _2831;
                        frontier_phi_77_pred_2 = _2830;
                        frontier_phi_77_pred_3 = _2829;
                        frontier_phi_77_pred_4 = _2828;
                        frontier_phi_77_pred_5 = _2827;
                    }
                    else
                    {
                        float _3036;
                        float _3037;
                        float _3038;
                        float _3039;
                        float _3040;
                        float _3041;
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3049 = _2827;
                        float _3050 = _2828;
                        float _3051 = _2829;
                        float _3052 = _2830;
                        float _3053 = _2831;
                        float _3054 = _2832;
                        uint _3055 = _2842;
                        uint _3056;
                        vec4 _3081;
                        float _3082;
                        vec4 _3097;
                        vec3 _3109;
                        vec4 _3124;
                        vec4 _3140;
                        float _3187;
                        bool _3188;
                        for (;;)
                        {
                            uint _3066 = ((_2833 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3055));
                            _3056 = (_3055 + 4294967295u) & _3055;
                            uint _3068 = _3066 * 40u;
                            _3081 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3068)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 3u)).x));
                            _3082 = _3081.w;
                            uint _3084 = (_3066 * 40u) + 4u;
                            _3097 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3084)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 3u)).x));
                            uint _3099 = (_3066 * 40u) + 8u;
                            _3109 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3099)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 2u)).x));
                            uint _3111 = (_3066 * 40u) + 16u;
                            _3124 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3111)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 3u)).x));
                            uint _3127 = (_3066 * 40u) + 20u;
                            _3140 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3127)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 3u)).x));
                            uint _3143 = (_3066 * 40u) + 24u;
                            vec4 _3156 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3143)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 3u)).x));
                            uint _3162 = (_3066 * 40u) + 28u;
                            vec4 _3175 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3162)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 3u)).x));
                            _3187 = fma(_2357, _3175.z, fma(_2356, _3175.y, _3175.x * _2355)) + _3175.w;
                            _3188 = !((fma(_2357, _3156.z, fma(_2356, _3156.y, _3156.x * _2355)) + _3156.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3188)
                            {
                                float _3215 = _3081.x - _2355;
                                float _3216 = _3081.y - _2356;
                                float _3217 = _3081.z - _2357;
                                float _3218 = dot(vec3(_3215, _3216, _3217), vec3(_3215, _3216, _3217));
                                float _3221 = inversesqrt(_3218);
                                float _3222 = _3221 * _3215;
                                float _3223 = _3221 * _3216;
                                float _3224 = _3221 * _3217;
                                float _3228 = 1.0 - (_3218 / (_3082 * _3082));
                                float _4344 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                                float _3229 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
                                float _3233 = sqrt(_3218) * _3097.w;
                                float _3235 = 1.39999997615814208984375 / (_3233 + 1.39999997615814208984375);
                                float _3236 = _3235 * _3235;
                                float _3239 = ((1.0 - _3236) * dot(vec3(_3222, _3223, _3224), vec3(_587, _590, _593))) + _3236;
                                float _3242 = _3233 * _3233;
                                float _3246 = (fma(_2357, _3124.z, fma(_2356, _3124.y, _3124.x * _2355)) + _3124.w) / _3187;
                                float _3247 = (fma(_2357, _3140.z, fma(_2356, _3140.y, _3140.x * _2355)) + _3140.w) / _3187;
                                float _3251 = 1.0 - dot(vec2(_3246, _3247), vec2(_3246, _3247));
                                float _4360 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
                                float _3252 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
                                float _3253 = _3252 * (((isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0))) * _3229) / ((_3242 * 0.699999988079071044921875) + 1.0));
                                float _3265 = exp2(log2(1.0 / ((_3242 * 3.5) + 5.0)) * 0.25);
                                float _3266 = 1.0 - _662;
                                float _3273 = sqrt(1.0 - ((1.0 - (_3266 * _3266)) * (1.0 - (_3265 * _3265))));
                                float _3274 = _3273 * _3273;
                                float _3275 = _3274 * _3274;
                                float _3276 = _3222 - _2693;
                                float _3277 = _3223 - _2694;
                                float _3278 = _3224 - _2695;
                                float _3282 = inversesqrt(dot(vec3(_3276, _3277, _3278), vec3(_3276, _3277, _3278)));
                                float _3286 = dot(vec3(_587, _590, _593), vec3((-0.0) - _2693, (-0.0) - _2694, (-0.0) - _2695));
                                float _4371 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                                float _3289 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
                                float _3290 = dot(vec3(_587, _590, _593), vec3(_3282 * _3276, _3282 * _3277, _3282 * _3278));
                                float _4382 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                                float _3293 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
                                float _3297 = ((_3293 * _3293) * (_3275 + (-1.0))) + 1.0;
                                float _3298 = _3235 * _3274;
                                float _3299 = _3298 * _3298;
                                float _3305 = ((1.0 - _3299) * dot(vec3(_587, _590, _593), vec3(_3222, _3223, _3224))) + _3299;
                                float _4393 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                                float _3306 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
                                float _3307 = 1.0 - _3274;
                                float _3317 = (0.5 / (((_3306 * ((_3289 * _3307) + _3274)) + 9.9999999392252902907785028219223e-09) + (((_3306 * _3307) + _3274) * _3289))) * _3306;
                                float _4404 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                                float _3327 = (_3252 * _3229) * (((_3275 * 3.1415927410125732421875) * (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0)))) / ((_3297 * _3297) * ((_3242 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3253 * _3097.y;
                                frontier_phi_83_pred_1 = _3253 * _3097.x;
                                frontier_phi_83_pred_2 = _3327 * _3109.z;
                                frontier_phi_83_pred_3 = _3327 * _3109.y;
                                frontier_phi_83_pred_4 = _3327 * _3109.x;
                                frontier_phi_83_pred_5 = _3253 * _3097.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3335 = frontier_phi_83_pred;
                            _3334 = frontier_phi_83_pred_1;
                            _3333 = frontier_phi_83_pred_2;
                            _3332 = frontier_phi_83_pred_3;
                            _3331 = frontier_phi_83_pred_4;
                            _3336 = frontier_phi_83_pred_5;
                            _3039 = _3334 + _3052;
                            _3040 = _3335 + _3053;
                            _3041 = _3336 + _3054;
                            _3036 = _3331 + _3049;
                            _3037 = _3332 + _3050;
                            _3038 = _3333 + _3051;
                            if (_3056 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3049 = _3036;
                                _3050 = _3037;
                                _3051 = _3038;
                                _3052 = _3039;
                                _3053 = _3040;
                                _3054 = _3041;
                                _3055 = _3056;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3041;
                        frontier_phi_77_pred_1 = _3040;
                        frontier_phi_77_pred_2 = _3039;
                        frontier_phi_77_pred_3 = _3038;
                        frontier_phi_77_pred_4 = _3037;
                        frontier_phi_77_pred_5 = _3036;
                    }
                    _2678 = frontier_phi_77_pred;
                    _2676 = frontier_phi_77_pred_1;
                    _2674 = frontier_phi_77_pred_2;
                    _2672 = frontier_phi_77_pred_3;
                    _2670 = frontier_phi_77_pred_4;
                    _2668 = frontier_phi_77_pred_5;
                    uint _2834 = _2833 + 1u;
                    if (_2834 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2827 = _2668;
                        _2828 = _2670;
                        _2829 = _2672;
                        _2830 = _2674;
                        _2831 = _2676;
                        _2832 = _2678;
                        _2833 = _2834;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2672;
                frontier_phi_58_59_ladder_1 = _2678;
                frontier_phi_58_59_ladder_2 = _2676;
                frontier_phi_58_59_ladder_3 = _2674;
                frontier_phi_58_59_ladder_4 = _2670;
                frontier_phi_58_59_ladder_5 = _2668;
            }
            else
            {
                frontier_phi_58_59_ladder = _2541;
                frontier_phi_58_59_ladder_1 = _2547;
                frontier_phi_58_59_ladder_2 = _2545;
                frontier_phi_58_59_ladder_3 = _2543;
                frontier_phi_58_59_ladder_4 = _2539;
                frontier_phi_58_59_ladder_5 = _2537;
            }
            _2667 = frontier_phi_58_59_ladder_5;
            _2669 = frontier_phi_58_59_ladder_4;
            _2671 = frontier_phi_58_59_ladder;
            _2673 = frontier_phi_58_59_ladder_3;
            _2675 = frontier_phi_58_59_ladder_2;
            _2677 = frontier_phi_58_59_ladder_1;
        }
        float _2682 = isnan(1.0) ? _646 : (isnan(_646) ? 1.0 : min(_646, 1.0));
        _2414 = (_2682 * _2673) + _1850;
        _2416 = (_2682 * _2675) + _1852;
        _2418 = (_2682 * _2677) + _1854;
        _2420 = ((_2667 * _631) * _2682) + _2195;
        _2422 = ((_2669 * _633) * _2682) + _2197;
        _2424 = ((_2671 * _634) * _2682) + _2199;
    }
    else
    {
        _2414 = _1850;
        _2416 = _1852;
        _2418 = _1854;
        _2420 = _2195;
        _2422 = _2197;
        _2424 = _2199;
    }
    uint _2430 = _607 + uint(cbMatDynParam._m0[0u].w);
    float _2438 = ((_293 * cbMtdParam._m0[11u].x) * (_396.x + _381.x)) * cbInstanceData._m0[_2430].x;
    float _2441 = ((_293 * cbMtdParam._m0[11u].y) * (_396.y + _381.y)) * cbInstanceData._m0[_2430].y;
    float _2444 = ((_293 * cbMtdParam._m0[11u].z) * (_396.z + _381.z)) * cbInstanceData._m0[_2430].z;
    float _4420 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _4431 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _4442 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _2461 = (((isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_2414 + ((isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0))) * _646))) + ((_2420 + ((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _1487)) * cbPerFrame._m0[3u].x)) + _2438;
    float _2463 = (_2441 + ((_2422 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _1487)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_2416 + ((isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0))) * _646)));
    float _2465 = (_2444 + ((_2424 + ((isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))) * _1487)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_2418 + ((isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0))) * _646)));
    float _2466 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2467 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
    float _2468 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _2474 = cbMtdParam._m0[2u].x * _2438;
    float _2475 = cbMtdParam._m0[2u].y * _2441;
    float _2476 = cbMtdParam._m0[2u].z * _2444;
    float _4468 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2478 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
    uint _2479 = _606 + 6u;
    float _2487 = _566 / cbSceneParam._m0[86u].x;
    float _2488 = _567 / cbSceneParam._m0[86u].y;
    vec4 _2502 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2487, _2488, (log2((isnan(cbSceneParam._m0[77u].w) ? _488 : (isnan(_488) ? cbSceneParam._m0[77u].w : min(_488, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2504 = _2502.x;
    float _2505 = _2502.y;
    float _2506 = _2502.z;
    float _2507 = _2502.w;
    float _2600;
    float _2602;
    float _2604;
    float _2606;
    if (_488 > cbSceneParam._m0[78u].w)
    {
        float _2562 = isnan(_488) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _488 : min(cbSceneParam._m0[80u].w, _488));
        float _2563 = _2562 / _488;
        float _2574 = _2563 * _539;
        float _2575 = _540 * _2563;
        float _2576 = (-0.0) - _2575;
        float _2578 = _2563 * _541;
        float _2580 = (cbSceneParam._m0[77u].w * _2576) / _2562;
        float _2581 = _2580 + cbSceneParam._m0[79u].w;
        float _2582 = cbSceneParam._m0[79u].w - _2575;
        float _2588 = sqrt(((_2574 * _2574) + (_2575 * _2575)) + (_2578 * _2578));
        float _2591 = (1.0 - (cbSceneParam._m0[77u].w / _2562)) * _2588;
        float _2596 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2598 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2784;
        if (abs((_2576 - _2580) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2784 = ((((_2581 > 0.0) ? exp2(_2596 * _2581) : (2.0 - exp2(_2598 * _2581))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2591;
        }
        else
        {
            float _2728 = 1.0 / cbSceneParam._m0[80u].x;
            float _2729 = isnan(_2582) ? _2581 : (isnan(_2581) ? _2582 : max(_2581, _2582));
            float _2730 = isnan(_2582) ? _2581 : (isnan(_2581) ? _2582 : min(_2581, _2582));
            float _2739 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : min(_2729, 0.0));
            float _2740 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : min(_2730, 0.0));
            _2784 = ((abs(_2588 / _2576) * cbSceneParam._m0[80u].y) * ((((_2739 - _2740) * 2.0) - ((exp2(_2596 * (isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0)))) - exp2(_2596 * (isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0))))) * _2728)) - ((exp2(_2598 * _2739) - exp2(_2598 * _2740)) * _2728))) + (_2591 * cbSceneParam._m0[80u].z);
        }
        vec4 _2786 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2487, _2488, 1.0), 0.0);
        float _2795 = exp2((_2784 * (-1.44269502162933349609375)) * (1.0 - _2786.w));
        float _2796 = log2(_2795);
        float _2812 = log2(_2507);
        _2600 = (exp2(_2812 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2796 * cbSceneParam._m0[78u].x)) * _2786.x) / cbSceneParam._m0[78u].x)) + _2504;
        _2602 = (exp2(_2812 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2796 * cbSceneParam._m0[78u].y)) * _2786.y) / cbSceneParam._m0[78u].y)) + _2505;
        _2604 = (exp2(_2812 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2796 * cbSceneParam._m0[78u].z)) * _2786.z) / cbSceneParam._m0[78u].z)) + _2506;
        _2606 = _2795 * _2507;
    }
    else
    {
        _2600 = _2504;
        _2602 = _2505;
        _2604 = _2506;
        _2606 = _2507;
    }
    bool _2822;
    vec4 _2616;
    vec4 _2638;
    float _2640;
    float _2644;
    float _2645;
    float _2646;
    float _2649;
    float _2652;
    float _2655;
    float _2656;
    bool _2666;
    for (;;)
    {
        _2616 = cbMatDynParam._m0[0u];
        float _2618 = roundEven(_2616.y);
        bool _2619 = _2618 == 3.0;
        float _2620 = log2(_2606);
        float _2624 = exp2(_2620 * cbSceneParam._m0[78u].x);
        float _2625 = exp2(_2620 * cbSceneParam._m0[78u].y);
        float _2626 = exp2(_2620 * cbSceneParam._m0[78u].z);
        float _2627 = _2624 * _2466;
        float _2628 = _2625 * _2467;
        float _2629 = _2626 * _2468;
        float _2636 = _555 + (-0.5);
        _2638 = cbMtdParam._m0[1u];
        _2640 = _2638.y * _2636;
        float _2643 = (_2618 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2644 = _2643 * (_2619 ? _2627 : (_2627 + (cbSceneParam._m0[72u].w * _2600)));
        _2645 = _2643 * (_2619 ? _2628 : (_2628 + (cbSceneParam._m0[72u].w * _2602)));
        _2646 = _2643 * (_2619 ? _2629 : (_2629 + (cbSceneParam._m0[72u].w * _2604)));
        _2649 = ((_2474 * _2478) * _2624) * _2643;
        _2652 = ((_2475 * _2478) * _2625) * _2643;
        _2655 = ((_2476 * _2478) * _2626) * _2643;
        _2656 = _2636 * 0.999000012874603271484375;
        _2666 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2666)
        {
            if ((cbInstanceData._m0[_606 + 7u].x + _2656) < 0.5)
            {
                _2822 = true;
                break;
            }
        }
        uint _2763 = _607 + uint(_2616.w);
        if ((cbInstanceData._m0[_2763].w < 1.0) && ((cbInstanceData._m0[_2763].w + _2656) < 0.5))
        {
            _2822 = true;
            break;
        }
        if ((_2640 + 1.0) < _2638.x)
        {
            _2822 = true;
            break;
        }
        _2822 = false;
        break;
    }
    float _3027;
    if (_2822)
    {
        discard_state = true;
        _3027 = 0.0;
    }
    else
    {
        _3027 = cbInstanceData._m0[_2479].w;
    }
    SV_Target.x = _2644;
    SV_Target.y = _2645;
    SV_Target.z = _2646;
    SV_Target.w = _3027;
    SV_Target_1.x = _2649;
    SV_Target_1.y = _2652;
    SV_Target_1.z = _2655;
    SV_Target_1.w = cbInstanceData._m0[_2479].w;
    discard_exit();
}


