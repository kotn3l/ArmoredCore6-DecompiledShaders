#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1050;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _243 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _249 = _243.x * cbMtdParam._m0[9u].x;
    float _250 = _243.y * cbMtdParam._m0[9u].y;
    float _251 = _243.z * cbMtdParam._m0[9u].z;
    vec4 _289 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _305 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3449 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _306 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
    float _313 = (((_289.x * cbMtdParam._m0[10u].x) - _249) * _306) + _249;
    float _314 = (((_289.y * cbMtdParam._m0[10u].y) - _250) * _306) + _250;
    float _315 = (((_289.z * cbMtdParam._m0[10u].z) - _251) * _306) + _251;
    vec4 _335 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _350 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _352 = _350.x;
    float _370 = ((texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[7u].w)).x - _352) * _306) + _352;
    vec4 _383 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _391 = (_383.x * 2.0) + (-1.0);
    float _393 = (_383.y * 2.0) + (-1.0);
    float _394 = dot(vec2(_391, _393), vec2(_391, _393));
    float _3460 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    vec4 _411 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _415 = _411.z;
    float _418 = (_411.x * 2.0) + (-1.0);
    float _419 = (_411.y * 2.0) + (-1.0);
    float _420 = dot(vec2(_418, _419), vec2(_418, _419));
    float _3471 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _425 = sqrt(1.0 - (isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0))));
    float _428 = (_306 * (_383.z - _415)) + _415;
    vec4 _455 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _470 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _484 = (TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_335.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].x + 1.0);
    float _3482 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _485 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
    float _492 = (_306 * (_391 - _418)) + _418;
    float _493 = (_306 * (_393 - _419)) + _419;
    float _494 = (_306 * (sqrt(1.0 - (isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0)))) - _425)) + _425;
    float _497 = fma(_494, _214 * NORMAL.x, fma(_493, _221 * TANGENT.x, (_207 * _199) * _492));
    float _500 = fma(_494, _214 * NORMAL.y, fma(_493, _221 * TANGENT.y, (_207 * _200) * _492));
    float _503 = fma(_494, _214 * NORMAL.z, fma(_493, _221 * TANGENT.z, (_207 * _201) * _492));
    float _507 = inversesqrt(dot(vec3(_497, _500, _503), vec3(_497, _500, _503)));
    float _508 = _507 * _497;
    float _509 = _507 * _500;
    float _510 = _507 * _503;
    float _3493 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _511 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
    float _3504 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _3515 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _3526 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _3537 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _515 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
    float _531 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _572 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _582 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _572);
    float _583 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _572);
    float _584 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _572);
    float _588 = inversesqrt(dot(vec3(_582, _583, _584), vec3(_582, _583, _584)));
    float _589 = _582 * _588;
    float _590 = _583 * _588;
    float _591 = _584 * _588;
    float _597 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _598 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _616 = fma(_510, cbSceneParam._m0[5u].z, fma(_509, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _508));
    float _619 = fma(_510, cbSceneParam._m0[6u].z, fma(_509, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _508));
    float _622 = fma(_510, cbSceneParam._m0[7u].z, fma(_509, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _508));
    uint _635 = uint(roundEven(NORMAL.w)) * 13u;
    uint _636 = _635 + 9u;
    uint _637 = _636 + uint(cbMatDynParam._m0[0u].w);
    float _643 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0)))) * cbInstanceData._m0[_637].x;
    float _644 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0)))) * cbInstanceData._m0[_637].y;
    float _645 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0)))) * cbInstanceData._m0[_637].z;
    float _3548 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _646 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
    float _3559 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _647 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
    float _3570 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _648 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
    float _649 = 1.0 - _515;
    float _650 = _646 * _649;
    float _651 = _647 * _649;
    float _652 = _648 * _649;
    float _657 = (_646 + (-0.039999999105930328369140625)) * _515;
    float _658 = (_647 + (-0.039999999105930328369140625)) * _515;
    float _659 = (_648 + (-0.039999999105930328369140625)) * _515;
    float _660 = _657 + 0.039999999105930328369140625;
    float _662 = _658 + 0.039999999105930328369140625;
    float _663 = _659 + 0.039999999105930328369140625;
    vec4 _672 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _597, cbSceneParam._m0[86u].y * _598));
    float _675 = _672.x * TEXCOORD_3.w;
    float _676 = dot(vec3(_508, _509, _510), vec3(_589, _590, _591));
    float _679 = _676 * 2.0;
    float _683 = (_679 * _508) - _589;
    float _684 = (_679 * _509) - _590;
    float _685 = (_679 * _510) - _591;
    float _689 = abs(dot(vec3(_589, _590, _591), vec3(_508, _509, _510)));
    float _3581 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _691 = sqrt(_511);
    float _704 = exp2((_691 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_691 * 3.0));
    float _710 = (1.0 - _704) * ((_691 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _711 = _704 * _691;
    float _739 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _743 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _747 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1049;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _774 = fma(_747, cbModelParam._m0[26u].z, fma(_743, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _739));
        float _778 = fma(_747, cbModelParam._m0[27u].z, fma(_743, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _739));
        float _782 = fma(_747, cbModelParam._m0[28u].z, fma(_743, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _739));
        float _807 = _739 + _508;
        float _808 = _743 + _509;
        float _809 = _747 + _510;
        float _819 = fma(_809, cbModelParam._m0[26u].z, fma(_808, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _807)) - _774;
        float _820 = fma(_809, cbModelParam._m0[27u].z, fma(_808, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _807)) - _778;
        float _821 = fma(_809, cbModelParam._m0[28u].z, fma(_808, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _807)) - _782;
        float _825 = inversesqrt(dot(vec3(_819, _820, _821), vec3(_819, _820, _821)));
        float _838 = ((_825 * _819) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_774 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _839 = ((_825 * _820) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_778 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _840 = ((_825 * _821) / cbModelParam._m0[34u].z) + ((((((_782 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _843 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_838, _839, _840), 0.0);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_838, _839, _840), 0.0);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_838, _839, _840), 0.0);
        vec4 _864 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_838, _839, _840), 0.0);
        float _877 = exp2((_843.w + (-0.5)) * 20.0) * 2.0;
        float _878 = _877 * (_843.x + (-0.5));
        float _879 = _877 * (_843.y + (-0.5));
        float _880 = _877 * (_843.z + (-0.5));
        float _887 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _888 = _887 * (_850.x + (-0.5));
        float _889 = _887 * (_850.y + (-0.5));
        float _890 = _887 * (_850.z + (-0.5));
        float _897 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _898 = _897 * (_857.x + (-0.5));
        float _899 = _897 * (_857.y + (-0.5));
        float _900 = _897 * (_857.z + (-0.5));
        float _907 = exp2((_864.w + (-0.5)) * 20.0) * 2.0;
        float _908 = _907 * (_864.x + (-0.5));
        float _909 = _907 * (_864.y + (-0.5));
        float _910 = _907 * (_864.z + (-0.5));
        float _911 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _912 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _913 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _914 = _878 * 0.5;
        float _915 = _888 * 0.5;
        float _916 = _898 * 0.5;
        float _917 = dot(vec3(_914, _915, _916), vec3(_914, _915, _916));
        float _922 = (_917 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_917);
        float _931 = (dot(vec3(_508, _509, _510), vec3(_922 * _914, _922 * _915, _922 * _916)) + 1.0) * 0.5;
        float _3607 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _941 = sqrt(((_915 * _915) + (_914 * _914)) + (_916 * _916)) / (_911 + 9.9999997473787516355514526367188e-06);
        float _3618 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _943 = _942 * 2.0;
        float _947 = (1.0 - _942) / (_942 + 1.0);
        float _3629 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _957 = ((((1.0 - _948) * (_943 + 2.0)) * exp2(log2(isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * (_943 + 1.0))) + _948) * _911;
        float _958 = _879 * 0.5;
        float _959 = _889 * 0.5;
        float _960 = _899 * 0.5;
        float _961 = dot(vec3(_958, _959, _960), vec3(_958, _959, _960));
        float _966 = (_961 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_961);
        float _974 = (dot(vec3(_508, _509, _510), vec3(_966 * _958, _966 * _959, _966 * _960)) + 1.0) * 0.5;
        float _3640 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _983 = sqrt(((_959 * _959) + (_958 * _958)) + (_960 * _960)) / (_912 + 9.9999997473787516355514526367188e-06);
        float _3651 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _985 = _984 * 2.0;
        float _989 = (1.0 - _984) / (_984 + 1.0);
        float _3662 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _999 = ((((1.0 - _990) * (_985 + 2.0)) * exp2(log2(isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) * (_985 + 1.0))) + _990) * _912;
        float _1000 = _880 * 0.5;
        float _1001 = _890 * 0.5;
        float _1002 = _900 * 0.5;
        float _1003 = dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002));
        float _1008 = (_1003 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1003);
        float _1016 = (dot(vec3(_508, _509, _510), vec3(_1008 * _1000, _1008 * _1001, _1008 * _1002)) + 1.0) * 0.5;
        float _3673 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1025 = sqrt(((_1001 * _1001) + (_1000 * _1000)) + (_1002 * _1002)) / (_913 + 9.9999997473787516355514526367188e-06);
        float _3684 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1027 = _1026 * 2.0;
        float _1031 = (1.0 - _1026) / (_1026 + 1.0);
        float _3695 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1041 = ((((1.0 - _1032) * (_1027 + 2.0)) * exp2(log2(isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) * (_1027 + 1.0))) + _1032) * _913;
        _1049 = _880;
        _1051 = _879;
        _1052 = _878;
        _1053 = _890;
        _1054 = _889;
        _1055 = _888;
        _1056 = _900;
        _1057 = _899;
        _1058 = _898;
        _1059 = _913;
        _1060 = _912;
        _1061 = _911;
        _1062 = cbModelParam._m0[36u].z * (isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0)));
        _1063 = cbModelParam._m0[36u].z * (isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0)));
        _1064 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0)));
    }
    else
    {
        _1049 = _1050;
        _1051 = _1050;
        _1052 = _1050;
        _1053 = _1050;
        _1054 = _1050;
        _1055 = _1050;
        _1056 = _1050;
        _1057 = _1050;
        _1058 = _1050;
        _1059 = _1050;
        _1060 = _1050;
        _1061 = _1050;
        _1062 = 0.0;
        _1063 = 0.0;
        _1064 = 0.0;
    }
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1090 = fma(_747, cbModelParam._m0[30u].z, fma(_743, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _739));
        float _1094 = fma(_747, cbModelParam._m0[31u].z, fma(_743, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _739));
        float _1098 = fma(_747, cbModelParam._m0[32u].z, fma(_743, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _739));
        float _1121 = _739 + _508;
        float _1122 = _743 + _509;
        float _1123 = _747 + _510;
        float _1133 = fma(_1123, cbModelParam._m0[30u].z, fma(_1122, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1121)) - _1090;
        float _1134 = fma(_1123, cbModelParam._m0[31u].z, fma(_1122, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1121)) - _1094;
        float _1135 = fma(_1123, cbModelParam._m0[32u].z, fma(_1122, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1121)) - _1098;
        float _1139 = inversesqrt(dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135)));
        float _1152 = ((_1139 * _1133) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1090 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1153 = ((_1139 * _1134) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1094 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1154 = ((_1139 * _1135) / cbModelParam._m0[35u].z) + ((((((_1098 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        float _1189 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1156.x + (-0.5));
        float _1191 = _1189 * (_1156.y + (-0.5));
        float _1192 = _1189 * (_1156.z + (-0.5));
        float _1199 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1163.x + (-0.5));
        float _1201 = _1199 * (_1163.y + (-0.5));
        float _1202 = _1199 * (_1163.z + (-0.5));
        float _1209 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1170.x + (-0.5));
        float _1211 = _1209 * (_1170.y + (-0.5));
        float _1212 = _1209 * (_1170.z + (-0.5));
        float _1219 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1177.x + (-0.5));
        float _1221 = _1219 * (_1177.y + (-0.5));
        float _1222 = _1219 * (_1177.z + (-0.5));
        float _1223 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1224 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = _1190 * 0.5;
        float _1227 = _1200 * 0.5;
        float _1228 = _1210 * 0.5;
        float _1229 = dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228));
        float _1234 = (_1229 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1229);
        float _1242 = (dot(vec3(_508, _509, _510), vec3(_1234 * _1226, _1234 * _1227, _1234 * _1228)) + 1.0) * 0.5;
        float _3736 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1251 = sqrt(((_1227 * _1227) + (_1226 * _1226)) + (_1228 * _1228)) / (_1223 + 9.9999997473787516355514526367188e-06);
        float _3747 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _3758 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * (_1253 + 1.0))) + _1258) * _1223;
        float _1268 = _1191 * 0.5;
        float _1269 = _1201 * 0.5;
        float _1270 = _1211 * 0.5;
        float _1271 = dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270));
        float _1276 = (_1271 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1271);
        float _1284 = (dot(vec3(_508, _509, _510), vec3(_1276 * _1268, _1276 * _1269, _1276 * _1270)) + 1.0) * 0.5;
        float _3769 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1293 = sqrt(((_1269 * _1269) + (_1268 * _1268)) + (_1270 * _1270)) / (_1224 + 9.9999997473787516355514526367188e-06);
        float _3780 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1295 = _1294 * 2.0;
        float _1299 = (1.0 - _1294) / (_1294 + 1.0);
        float _3791 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1309 = ((((1.0 - _1300) * (_1295 + 2.0)) * exp2(log2(isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * (_1295 + 1.0))) + _1300) * _1224;
        float _1310 = _1192 * 0.5;
        float _1311 = _1202 * 0.5;
        float _1312 = _1212 * 0.5;
        float _1313 = dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312));
        float _1318 = (_1313 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1313);
        float _1326 = (dot(vec3(_508, _509, _510), vec3(_1318 * _1310, _1318 * _1311, _1318 * _1312)) + 1.0) * 0.5;
        float _3802 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1335 = sqrt(((_1311 * _1311) + (_1310 * _1310)) + (_1312 * _1312)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _3813 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1337 = _1336 * 2.0;
        float _1341 = (1.0 - _1336) / (_1336 + 1.0);
        float _3824 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1351 = ((((1.0 - _1342) * (_1337 + 2.0)) * exp2(log2(isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * (_1337 + 1.0))) + _1342) * _1225;
        _1359 = _1192;
        _1360 = _1191;
        _1361 = _1190;
        _1362 = _1202;
        _1363 = _1201;
        _1364 = _1200;
        _1365 = _1212;
        _1366 = _1211;
        _1367 = _1210;
        _1368 = _1225;
        _1369 = _1224;
        _1370 = _1223;
        _1371 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
        _1372 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)));
        _1373 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)));
    }
    else
    {
        _1359 = _1050;
        _1360 = _1050;
        _1361 = _1050;
        _1362 = _1050;
        _1363 = _1050;
        _1364 = _1050;
        _1365 = _1050;
        _1366 = _1050;
        _1367 = _1050;
        _1368 = _1050;
        _1369 = _1050;
        _1370 = _1050;
        _1371 = 0.0;
        _1372 = 0.0;
        _1373 = 0.0;
    }
    float _1383 = (cbModelParam._m0[1u].x * (_1371 - _1062)) + _1062;
    float _1384 = (cbModelParam._m0[1u].x * (_1372 - _1063)) + _1063;
    float _1385 = (cbModelParam._m0[1u].x * (_1373 - _1064)) + _1064;
    float _1406 = fma(_1385, cbSceneParam._m0[89u].z, fma(_1384, cbSceneParam._m0[89u].y, _1383 * cbSceneParam._m0[89u].x));
    float _1409 = fma(_1385, cbSceneParam._m0[90u].z, fma(_1384, cbSceneParam._m0[90u].y, _1383 * cbSceneParam._m0[90u].x));
    float _1412 = fma(_1385, cbSceneParam._m0[91u].z, fma(_1384, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1383));
    float _1427 = _683 * 0.5;
    float _1428 = _684 * 0.5;
    float _1429 = _685 * 0.5;
    float _1430 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1361, _1364, _1367, _1370));
    float _1433 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1360, _1363, _1366, _1369));
    float _1436 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1359, _1362, _1365, _1368));
    float _1470;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1443 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1049, _1053, _1056, _1059));
        float _1447 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1051, _1054, _1057, _1060));
        float _1451 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1052, _1055, _1058, _1061));
        float _1458 = dot(vec4(cbModelParam._m0[39u]), vec4(_1427, _1428, _1429, 1.0));
        _1470 = dot(vec3(isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)), isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)), isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1458) ? 0.0 : (isnan(0.0) ? _1458 : max(0.0, _1458))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1470 = 1.0;
    }
    float _1481;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1472 = dot(vec4(cbModelParam._m0[40u]), vec4(_1427, _1428, _1429, 1.0));
        _1481 = dot(vec3(isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)), isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)), isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1472) ? 0.0 : (isnan(0.0) ? _1472 : max(0.0, _1472))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1481 = 1.0;
    }
    float _1485 = (_1481 * cbModelParam._m0[1u].x) + (_1470 * (1.0 - cbModelParam._m0[1u].x));
    float _1495 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _511);
    float _1496 = isnan(_1495) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1495 : min(cbModelParam._m0[25u].z, _1495));
    float _1576;
    float _1578;
    float _1580;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1543 = fma(_747, cbModelParam._m0[13u].z, fma(_743, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _739)) + cbModelParam._m0[13u].w;
        float _1547 = fma(_747, cbModelParam._m0[14u].z, fma(_743, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _739)) + cbModelParam._m0[14u].w;
        float _1551 = fma(_747, cbModelParam._m0[15u].z, fma(_743, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _739)) + cbModelParam._m0[15u].w;
        float _1554 = fma(_685, cbModelParam._m0[13u].z, fma(_684, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _683));
        float _1557 = fma(_685, cbModelParam._m0[14u].z, fma(_684, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _683));
        float _1560 = fma(_685, cbModelParam._m0[15u].z, fma(_684, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _683));
        float _1588;
        if (_1554 > 0.0)
        {
            _1588 = abs((1.0 - _1543) / _1554);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1554 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1543 + 1.0) / _1554);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1588 = frontier_phi_14_12_ladder;
        }
        float _1814;
        if (_1557 > 0.0)
        {
            _1814 = abs((1.0 - _1547) / _1557);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1557 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1547 + 1.0) / _1557);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1814 = frontier_phi_23_19_ladder;
        }
        float _2071;
        if (_1560 > 0.0)
        {
            _2071 = abs((1.0 - _1551) / _1560);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1560 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1551 + 1.0) / _1560);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2071 = frontier_phi_35_30_ladder;
        }
        float _2073 = isnan(_1814) ? _1588 : (isnan(_1588) ? _1814 : min(_1588, _1814));
        float _2074 = isnan(_2071) ? _2073 : (isnan(_2073) ? _2071 : min(_2073, _2071));
        float _2078 = (_2074 * _1554) + _1543;
        float _2079 = (_2074 * _1557) + _1547;
        float _2080 = (_2074 * _1560) + _1551;
        float _2081 = _2074 * 9.9999997473787516355514526367188e-05;
        float _2083 = (-1.0) - _2081;
        float _2085 = _2081 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2080 > _2085) || ((_2080 < _2083) || ((_2079 > _2085) || ((_2079 < _2083) || ((_2078 < _2083) || (_2078 > _2085))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2208 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2080, cbModelParam._m0[9u].z, fma(_2079, cbModelParam._m0[9u].y, _2078 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2080, cbModelParam._m0[10u].z, fma(_2079, cbModelParam._m0[10u].y, _2078 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2080, cbModelParam._m0[11u].z, fma(_2079, cbModelParam._m0[11u].y, _2078 * cbModelParam._m0[11u].x))), _1496);
            frontier_phi_13_35_ladder = _2208.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2208.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2208.x * cbModelParam._m0[1u].y;
        }
        _1576 = frontier_phi_13_35_ladder_2;
        _1578 = frontier_phi_13_35_ladder_1;
        _1580 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1564 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_683, _684, _685), _1496);
        _1576 = _1564.x * cbModelParam._m0[1u].y;
        _1578 = _1564.y * cbModelParam._m0[1u].y;
        _1580 = _1564.z * cbModelParam._m0[1u].y;
    }
    float _1584 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _511);
    float _1585 = isnan(_1584) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1584 : min(cbModelParam._m0[25u].w, _1584));
    float _1676;
    float _1678;
    float _1680;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1640 = fma(_747, cbModelParam._m0[21u].z, fma(_743, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _739)) + cbModelParam._m0[21u].w;
        float _1644 = fma(_747, cbModelParam._m0[22u].z, fma(_743, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _739)) + cbModelParam._m0[22u].w;
        float _1648 = fma(_747, cbModelParam._m0[23u].z, fma(_743, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _739)) + cbModelParam._m0[23u].w;
        float _1651 = fma(_685, cbModelParam._m0[21u].z, fma(_684, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _683));
        float _1654 = fma(_685, cbModelParam._m0[22u].z, fma(_684, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _683));
        float _1657 = fma(_685, cbModelParam._m0[23u].z, fma(_684, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _683));
        float _1819;
        if (_1651 > 0.0)
        {
            _1819 = abs((1.0 - _1640) / _1651);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1651 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1640 + 1.0) / _1651);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1819 = frontier_phi_25_21_ladder;
        }
        float _2098;
        if (_1654 > 0.0)
        {
            _2098 = abs((1.0 - _1644) / _1654);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1654 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1644 + 1.0) / _1654);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2098 = frontier_phi_37_32_ladder;
        }
        float _2311;
        if (_1657 > 0.0)
        {
            _2311 = abs((1.0 - _1648) / _1657);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1657 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1648 + 1.0) / _1657);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2311 = frontier_phi_46_43_ladder;
        }
        float _2313 = isnan(_2098) ? _1819 : (isnan(_1819) ? _2098 : min(_1819, _2098));
        float _2314 = isnan(_2311) ? _2313 : (isnan(_2313) ? _2311 : min(_2313, _2311));
        float _2318 = (_2314 * _1651) + _1640;
        float _2319 = (_2314 * _1654) + _1644;
        float _2320 = (_2314 * _1657) + _1648;
        float _2321 = _2314 * 9.9999997473787516355514526367188e-05;
        float _2322 = (-1.0) - _2321;
        float _2324 = _2321 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2320 > _2324) || ((_2320 < _2322) || ((_2319 > _2324) || ((_2319 < _2322) || ((_2318 < _2322) || (_2318 > _2324))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2554 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2320, cbModelParam._m0[17u].z, fma(_2319, cbModelParam._m0[17u].y, _2318 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2320, cbModelParam._m0[18u].z, fma(_2319, cbModelParam._m0[18u].y, _2318 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2320, cbModelParam._m0[19u].z, fma(_2319, cbModelParam._m0[19u].y, _2318 * cbModelParam._m0[19u].x))), _1585);
            frontier_phi_22_46_ladder = _2554.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2554.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2554.x * cbModelParam._m0[1u].z;
        }
        _1676 = frontier_phi_22_46_ladder_2;
        _1678 = frontier_phi_22_46_ladder_1;
        _1680 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1660 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_683, _684, _685), _1585);
        _1676 = _1660.x * cbModelParam._m0[1u].z;
        _1678 = _1660.y * cbModelParam._m0[1u].z;
        _1680 = _1660.z * cbModelParam._m0[1u].z;
    }
    float _1693 = (((_710 * _660) + _711) * _675) * ((cbModelParam._m0[1u].w * (_1676 - _1576)) + _1576);
    float _1695 = (((_710 * _662) + _711) * _675) * ((cbModelParam._m0[1u].w * (_1678 - _1578)) + _1578);
    float _1697 = (((_710 * _663) + _711) * _675) * ((cbModelParam._m0[1u].w * (_1680 - _1580)) + _1580);
    float _1700 = fma(_1697, cbSceneParam._m0[89u].z, fma(_1695, cbSceneParam._m0[89u].y, _1693 * cbSceneParam._m0[89u].x));
    float _1703 = fma(_1697, cbSceneParam._m0[90u].z, fma(_1695, cbSceneParam._m0[90u].y, _1693 * cbSceneParam._m0[90u].x));
    float _1706 = fma(_1697, cbSceneParam._m0[91u].z, fma(_1695, cbSceneParam._m0[91u].y, _1693 * cbSceneParam._m0[91u].x));
    vec4 _1714 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_597, _598));
    float _1716 = _1714.w;
    float _1728 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1716);
    float _1729 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1716);
    float _1730 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1716);
    uvec4 _1734 = floatBitsToUint(cbInstanceData._m0[_635 + 5u]);
    uint _1736 = _1734.x * 14u;
    uint _1737 = _1736 + 13u;
    float _1744 = _675 + (-1.0);
    float _1749 = (cbLight._m0[_1737].x * _1744) + 1.0;
    float _1750 = (cbLight._m0[_1737].y * _1744) + 1.0;
    float _1751 = (cbLight._m0[_1737].z * _1744) + 1.0;
    float _1752 = (cbLight._m0[_1737].w * _1744) + 1.0;
    uint _1753 = _1736 + 5u;
    float _1759 = isnan(1.0) ? _1750 : (isnan(_1750) ? 1.0 : min(_1750, 1.0));
    uint _1763 = _1736 + 4u;
    float _1772 = isnan(1.0) ? _1749 : (isnan(_1749) ? 1.0 : min(_1749, 1.0));
    uint _1776 = _1736 | 1u;
    float _1787 = dot(vec3(cbLight._m0[_1736].xyz), vec3(_508, _509, _510));
    float _1790 = dot(vec3(cbLight._m0[_1776].xyz), vec3(_508, _509, _510));
    float _3960 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
    float _3971 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
    float _1795 = (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * 0.3183098733425140380859375;
    float _1797 = (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * 0.3183098733425140380859375;
    float _1804 = ((cbLight._m0[_1753].x * _1759) * _1797) + (((cbLight._m0[_1763].x * _1728) * _1772) * _1795);
    float _1805 = ((_1759 * cbLight._m0[_1753].y) * _1797) + (((cbLight._m0[_1763].y * _1729) * _1772) * _1795);
    float _1806 = ((_1759 * cbLight._m0[_1753].z) * _1797) + (((cbLight._m0[_1763].z * _1730) * _1772) * _1795);
    uvec4 _1811 = floatBitsToUint(cbLight._m0[_1736 + 12u]);
    bool _1813 = _1811.x == 0u;
    float _1824;
    float _1826;
    float _1828;
    if (_1813)
    {
        _1824 = _1804;
        _1826 = _1805;
        _1828 = _1806;
    }
    else
    {
        uint _1832 = _1736 + 6u;
        float _1848 = (dot(vec3(cbLight._m0[_1736 + 2u].xyz), vec3(_508, _509, _510)) * 0.5) + 0.5;
        float _1849 = _1848 * _1848;
        float _3982 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
        float _1850 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1851 = isnan(1.0) ? _1751 : (isnan(_1751) ? 1.0 : min(_1751, 1.0));
        _1824 = (((cbLight._m0[_1832].x * 0.3183098733425140380859375) * _1850) * _1851) + _1804;
        _1826 = (((cbLight._m0[_1832].y * 0.3183098733425140380859375) * _1850) * _1851) + _1805;
        _1828 = (((cbLight._m0[_1832].z * 0.3183098733425140380859375) * _1850) * _1851) + _1806;
    }
    bool _1831 = _1811.y == 0u;
    float _1869;
    float _1871;
    float _1873;
    if (_1831)
    {
        _1869 = _1824;
        _1871 = _1826;
        _1873 = _1828;
    }
    else
    {
        uint _2042 = _1736 + 7u;
        float _2058 = (dot(vec3(cbLight._m0[_1736 + 3u].xyz), vec3(_508, _509, _510)) * 0.5) + 0.5;
        float _2059 = _2058 * _2058;
        float _3998 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
        float _2060 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _2061 = isnan(1.0) ? _1752 : (isnan(_1752) ? 1.0 : min(_1752, 1.0));
        _1869 = (((cbLight._m0[_2042].x * 0.3183098733425140380859375) * _2060) * _2061) + _1824;
        _1871 = (((cbLight._m0[_2042].y * 0.3183098733425140380859375) * _2060) * _2061) + _1826;
        _1873 = (((cbLight._m0[_2042].z * 0.3183098733425140380859375) * _2060) * _2061) + _1828;
    }
    uint _1876 = _1736 + 8u;
    float _1889 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1736].w)) * _511) * 0.949999988079071044921875);
    float _1890 = _1889 * _1889;
    float _1891 = cbLight._m0[_1736].x + _589;
    float _1892 = cbLight._m0[_1736].y + _590;
    float _1893 = cbLight._m0[_1736].z + _591;
    float _1897 = inversesqrt(dot(vec3(_1891, _1892, _1893), vec3(_1891, _1892, _1893)));
    float _1898 = _1897 * _1891;
    float _1899 = _1897 * _1892;
    float _1900 = _1897 * _1893;
    float _1901 = dot(vec3(_508, _509, _510), vec3(cbLight._m0[_1736].xyz));
    float _4014 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1904 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _4025 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _1905 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _1906 = dot(vec3(_508, _509, _510), vec3(_1898, _1899, _1900));
    float _4036 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _1909 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _1910 = dot(vec3(cbLight._m0[_1736].xyz), vec3(_1898, _1899, _1900));
    float _4047 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _1914 = _1890 * _1890;
    float _1918 = ((_1909 * _1909) * (_1914 + (-1.0))) + 1.0;
    float _1926 = exp2(log2(1.0 - (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0)))) * 5.0);
    float _1927 = 0.959999978542327880859375 - _657;
    float _1929 = 0.959999978542327880859375 - _658;
    float _1930 = 0.959999978542327880859375 - _659;
    float _1937 = 1.0 - _1890;
    float _1948 = (0.5 / (((_1905 * ((_1904 * _1937) + _1890)) + 9.9999999392252902907785028219223e-09) + (((_1905 * _1937) + _1890) * _1904))) * _1904;
    float _4058 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1950 = (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1914 / ((_1918 * _1918) * 3.141590118408203125));
    uint _1964 = _1736 + 9u;
    float _1975 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1776].w)) * _511) * 0.949999988079071044921875);
    float _1976 = _1975 * _1975;
    float _1977 = cbLight._m0[_1776].x + _589;
    float _1978 = cbLight._m0[_1776].y + _590;
    float _1979 = cbLight._m0[_1776].z + _591;
    float _1983 = inversesqrt(dot(vec3(_1977, _1978, _1979), vec3(_1977, _1978, _1979)));
    float _1984 = _1983 * _1977;
    float _1985 = _1983 * _1978;
    float _1986 = _1983 * _1979;
    float _1987 = dot(vec3(_508, _509, _510), vec3(cbLight._m0[_1776].xyz));
    float _4069 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    float _1990 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _1991 = dot(vec3(_508, _509, _510), vec3(_1984, _1985, _1986));
    float _4080 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _1994 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _1995 = dot(vec3(cbLight._m0[_1776].xyz), vec3(_1984, _1985, _1986));
    float _4091 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _1999 = _1976 * _1976;
    float _2003 = ((_1994 * _1994) * (_1999 + (-1.0))) + 1.0;
    float _2010 = exp2(log2(1.0 - (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0)))) * 5.0);
    float _2017 = 1.0 - _1976;
    float _2027 = (0.5 / (((_1905 * ((_1990 * _2017) + _1976)) + 9.9999999392252902907785028219223e-09) + (((_1905 * _2017) + _1976) * _1990))) * _1990;
    float _4102 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2029 = (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_1999 / ((_2003 * _2003) * 3.141590118408203125));
    float _2039 = (((((_2010 * _1927) + _660) * cbLight._m0[_1964].x) * _2029) * _1759) + ((((cbLight._m0[_1876].x * _1728) * ((_1926 * _1927) + _660)) * _1950) * _1772);
    float _2040 = (((((_2010 * _1929) + _662) * cbLight._m0[_1964].y) * _2029) * _1759) + ((((cbLight._m0[_1876].y * _1729) * ((_1926 * _1929) + _662)) * _1950) * _1772);
    float _2041 = (((((_2010 * _1930) + _663) * cbLight._m0[_1964].z) * _2029) * _1759) + ((((cbLight._m0[_1876].z * _1730) * ((_1926 * _1930) + _663)) * _1950) * _1772);
    float _2103;
    float _2105;
    float _2107;
    if (_1813)
    {
        _2103 = _2039;
        _2105 = _2040;
        _2107 = _2041;
    }
    else
    {
        uint _2109 = _1736 + 2u;
        uint _2113 = _1736 + 10u;
        float _2127 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2109].w)) * _511) * 0.949999988079071044921875);
        float _2128 = _2127 * _2127;
        float _2129 = cbLight._m0[_2109].x + _589;
        float _2130 = cbLight._m0[_2109].y + _590;
        float _2131 = cbLight._m0[_2109].z + _591;
        float _2135 = inversesqrt(dot(vec3(_2129, _2130, _2131), vec3(_2129, _2130, _2131)));
        float _2136 = _2135 * _2129;
        float _2137 = _2135 * _2130;
        float _2138 = _2135 * _2131;
        float _2139 = dot(vec3(_508, _509, _510), vec3(cbLight._m0[_2109].xyz));
        float _4113 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        float _2142 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _2143 = dot(vec3(_508, _509, _510), vec3(_2136, _2137, _2138));
        float _4124 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
        float _2146 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _2147 = dot(vec3(cbLight._m0[_2109].xyz), vec3(_2136, _2137, _2138));
        float _4135 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
        float _2151 = _2128 * _2128;
        float _2155 = ((_2146 * _2146) * (_2151 + (-1.0))) + 1.0;
        float _2162 = exp2(log2(1.0 - (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0)))) * 5.0);
        float _2169 = 1.0 - _2128;
        float _2179 = (0.5 / (((_1905 * ((_2142 * _2169) + _2128)) + 9.9999999392252902907785028219223e-09) + (((_1905 * _2169) + _2128) * _2142))) * _2142;
        float _4146 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        float _2181 = (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_2151 / ((_2155 * _2155) * 3.141590118408203125));
        float _2182 = isnan(1.0) ? _1751 : (isnan(_1751) ? 1.0 : min(_1751, 1.0));
        _2103 = (((((_2162 * _1927) + _660) * cbLight._m0[_2113].x) * _2181) * _2182) + _2039;
        _2105 = (((((_2162 * _1929) + _662) * cbLight._m0[_2113].y) * _2181) * _2182) + _2040;
        _2107 = (((((_2162 * _1930) + _663) * cbLight._m0[_2113].z) * _2181) * _2182) + _2041;
    }
    float _2217;
    float _2219;
    float _2221;
    if (_1831)
    {
        _2217 = _2103;
        _2219 = _2105;
        _2221 = _2107;
    }
    else
    {
        uint _2228 = _1736 + 3u;
        uint _2232 = _1736 + 11u;
        float _2246 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2228].w)) * _511) * 0.949999988079071044921875);
        float _2247 = _2246 * _2246;
        float _2248 = cbLight._m0[_2228].x + _589;
        float _2249 = cbLight._m0[_2228].y + _590;
        float _2250 = cbLight._m0[_2228].z + _591;
        float _2254 = inversesqrt(dot(vec3(_2248, _2249, _2250), vec3(_2248, _2249, _2250)));
        float _2255 = _2254 * _2248;
        float _2256 = _2254 * _2249;
        float _2257 = _2254 * _2250;
        float _2258 = dot(vec3(_508, _509, _510), vec3(cbLight._m0[_2228].xyz));
        float _4162 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        float _2261 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _2262 = dot(vec3(_508, _509, _510), vec3(_2255, _2256, _2257));
        float _4173 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        float _2265 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _2266 = dot(vec3(cbLight._m0[_2228].xyz), vec3(_2255, _2256, _2257));
        float _4184 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2270 = _2247 * _2247;
        float _2274 = ((_2265 * _2265) * (_2270 + (-1.0))) + 1.0;
        float _2281 = exp2(log2(1.0 - (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0)))) * 5.0);
        float _2288 = 1.0 - _2247;
        float _2298 = (0.5 / (((_1905 * ((_2261 * _2288) + _2247)) + 9.9999999392252902907785028219223e-09) + (((_1905 * _2288) + _2247) * _2261))) * _2261;
        float _4195 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2300 = (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_2270 / ((_2274 * _2274) * 3.141590118408203125));
        float _2301 = isnan(1.0) ? _1752 : (isnan(_1752) ? 1.0 : min(_1752, 1.0));
        _2217 = (((((_2281 * _1927) + _660) * cbLight._m0[_2232].x) * _2300) * _2301) + _2103;
        _2219 = (((((_2281 * _1929) + _662) * cbLight._m0[_2232].y) * _2300) * _2301) + _2105;
        _2221 = (((((_2281 * _1930) + _663) * cbLight._m0[_2232].z) * _2300) * _2301) + _2107;
    }
    float _2436;
    float _2438;
    float _2440;
    float _2442;
    float _2444;
    float _2446;
    if (_1734.y == 0u)
    {
        float _2376 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2377 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2376;
        float _2378 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2376;
        float _2379 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2376;
        uvec4 _2391 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2392 = _2391.x;
        uint _2403 = uint((float(_2391.y) * floor(float(uint(cbSceneParam._m0[85u].y * _598) / _2392))) + floor(float(uint(cbSceneParam._m0[85u].x * _597) / _2392)));
        float _2413 = (log2(_2379 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2414 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        uint _2417 = uint(isnan(14.0) ? _2414 : (isnan(_2414) ? 14.0 : min(_2414, 14.0)));
        uvec4 _2422 = texelFetch(g_lightClusterGridBuffer, int(((_2417 << 2u) + (_2403 << 6u)) >> 2u));
        uint _2423 = _2422.x;
        uint _2424 = _2391.z;
        float _2559;
        float _2561;
        float _2563;
        float _2565;
        float _2567;
        float _2569;
        if (((((1u << ((_2424 >> 4u) & 15u)) + 4294967295u) & _2423) == 0u) || ((_2424 & 240u) == 0u))
        {
            _2559 = 0.0;
            _2561 = 0.0;
            _2563 = 0.0;
            _2565 = 0.0;
            _2567 = 0.0;
            _2569 = 0.0;
        }
        else
        {
            float _2560;
            float _2562;
            float _2564;
            float _2566;
            float _2568;
            float _2570;
            float _2713 = 0.0;
            float _2714 = 0.0;
            float _2715 = 0.0;
            float _2716 = 0.0;
            float _2717 = 0.0;
            float _2718 = 0.0;
            uint _2719 = 0u;
            uint _2728;
            bool _2729;
            for (;;)
            {
                _2728 = texelFetch(g_lightClassification, int((((_2417 << 5u) + (_2403 << 9u)) + (_2719 << 2u)) >> 2u)).x;
                _2729 = _2728 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2729)
                {
                    frontier_phi_61_pred = _2713;
                    frontier_phi_61_pred_1 = _2718;
                    frontier_phi_61_pred_2 = _2717;
                    frontier_phi_61_pred_3 = _2716;
                    frontier_phi_61_pred_4 = _2715;
                    frontier_phi_61_pred_5 = _2714;
                }
                else
                {
                    float _2837;
                    float _2838;
                    float _2839;
                    float _2840;
                    float _2841;
                    float _2842;
                    uint _2843;
                    _2837 = _2713;
                    _2838 = _2714;
                    _2839 = _2715;
                    _2840 = _2716;
                    _2841 = _2717;
                    _2842 = _2718;
                    _2843 = _2728;
                    float _2769;
                    float _2770;
                    float _2771;
                    float _2772;
                    float _2773;
                    float _2774;
                    for (;;)
                    {
                        uint _2847 = uint(findLSB(_2843)) + (_2719 << 5u);
                        uint _2844 = (_2843 + 4294967295u) & _2843;
                        uint _2849 = _2847 * 48u;
                        vec4 _2863 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2849)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 3u)).x));
                        uint _2869 = (_2847 * 48u) + 4u;
                        vec4 _2882 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2869)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 3u)).x));
                        uint _2888 = (_2847 * 48u) + 8u;
                        vec3 _2899 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2888)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 2u)).x));
                        float _2903 = _2863.x - _2377;
                        float _2904 = _2863.y - _2378;
                        float _2905 = _2863.z - _2379;
                        float _2906 = dot(vec3(_2903, _2904, _2905), vec3(_2903, _2904, _2905));
                        float _2909 = inversesqrt(_2906);
                        float _2910 = _2909 * _2903;
                        float _2911 = _2909 * _2904;
                        float _2912 = _2909 * _2905;
                        float _2913 = dot(vec3(_616, _619, _622), vec3(_2910, _2911, _2912));
                        float _2918 = 1.0 - (_2906 * _2863.w);
                        float _4221 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
                        float _2919 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
                        float _2920 = sqrt(_2906) * _2882.w;
                        float _2923 = 1.39999997615814208984375 / (_2920 + 1.39999997615814208984375);
                        float _2924 = _2923 * _2923;
                        float _2927 = ((1.0 - _2924) * _2913) + _2924;
                        float _2930 = _2920 * _2920;
                        float _2934 = ((isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0))) * _2919) / ((_2930 * 0.699999988079071044921875) + 1.0);
                        float _2938 = (-0.0) - _2377;
                        float _2939 = (-0.0) - _2378;
                        float _2940 = (-0.0) - _2379;
                        float _2944 = inversesqrt(dot(vec3(_2938, _2939, _2940), vec3(_2938, _2939, _2940)));
                        float _2945 = _2944 * _2938;
                        float _2946 = _2944 * _2939;
                        float _2947 = _2944 * _2940;
                        float _2955 = exp2(log2(1.0 / ((_2930 * 3.5) + 5.0)) * 0.25);
                        float _2956 = 1.0 - _691;
                        float _2963 = sqrt(1.0 - ((1.0 - (_2956 * _2956)) * (1.0 - (_2955 * _2955))));
                        float _2964 = _2963 * _2963;
                        float _2965 = _2964 * _2964;
                        float _2966 = _2945 + _2910;
                        float _2967 = _2946 + _2911;
                        float _2968 = _2947 + _2912;
                        float _2972 = inversesqrt(dot(vec3(_2966, _2967, _2968), vec3(_2966, _2967, _2968)));
                        float _2976 = dot(vec3(_616, _619, _622), vec3(_2945, _2946, _2947));
                        float _4237 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
                        float _2979 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
                        float _2980 = dot(vec3(_616, _619, _622), vec3(_2972 * _2966, _2972 * _2967, _2972 * _2968));
                        float _4248 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
                        float _2983 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
                        float _2987 = ((_2983 * _2983) * (_2965 + (-1.0))) + 1.0;
                        float _2988 = _2923 * _2964;
                        float _2989 = _2988 * _2988;
                        float _2992 = ((1.0 - _2989) * _2913) + _2989;
                        float _4259 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
                        float _2993 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
                        float _2994 = 1.0 - _2964;
                        float _3004 = (0.5 / (((_2993 * ((_2979 * _2994) + _2964)) + 9.9999999392252902907785028219223e-09) + (((_2993 * _2994) + _2964) * _2979))) * _2993;
                        float _4270 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                        float _3015 = (((_2965 * 3.1415927410125732421875) * (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0)))) / ((_2987 * _2987) * ((_2930 * 2.1991131305694580078125) + 3.141590118408203125))) * _2919;
                        _2772 = (_2934 * _2882.x) + _2840;
                        _2773 = (_2934 * _2882.y) + _2841;
                        _2774 = (_2934 * _2882.z) + _2842;
                        _2769 = (_3015 * _2899.x) + _2837;
                        _2770 = (_3015 * _2899.y) + _2838;
                        _2771 = (_3015 * _2899.z) + _2839;
                        if (_2844 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2837 = _2769;
                            _2838 = _2770;
                            _2839 = _2771;
                            _2840 = _2772;
                            _2841 = _2773;
                            _2842 = _2774;
                            _2843 = _2844;
                        }
                    }
                    frontier_phi_61_pred = _2769;
                    frontier_phi_61_pred_1 = _2774;
                    frontier_phi_61_pred_2 = _2773;
                    frontier_phi_61_pred_3 = _2772;
                    frontier_phi_61_pred_4 = _2771;
                    frontier_phi_61_pred_5 = _2770;
                }
                _2560 = frontier_phi_61_pred;
                _2570 = frontier_phi_61_pred_1;
                _2568 = frontier_phi_61_pred_2;
                _2566 = frontier_phi_61_pred_3;
                _2564 = frontier_phi_61_pred_4;
                _2562 = frontier_phi_61_pred_5;
                uint _2720 = _2719 + 1u;
                if (_2720 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2713 = _2560;
                    _2714 = _2562;
                    _2715 = _2564;
                    _2716 = _2566;
                    _2717 = _2568;
                    _2718 = _2570;
                    _2719 = _2720;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2559 = _2560;
            _2561 = _2562;
            _2563 = _2564;
            _2565 = _2566;
            _2567 = _2568;
            _2569 = _2570;
        }
        uvec4 _2573 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2574 = _2573.z;
        uint _2576 = (_2574 >> 8u) & 15u;
        float _2681;
        float _2683;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        if (((4294967295u << _2576) & _2423) == 0u)
        {
            _2681 = _2559;
            _2683 = _2561;
            _2685 = _2563;
            _2687 = _2565;
            _2689 = _2567;
            _2691 = _2569;
        }
        else
        {
            float _2706 = inversesqrt(dot(vec3(_2377, _2378, _2379), vec3(_2377, _2378, _2379)));
            float _2707 = _2706 * _2377;
            float _2708 = _2706 * _2378;
            float _2709 = _2706 * _2379;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2576 < ((_2574 >> 12u) & 15u))
            {
                float _2682;
                float _2684;
                float _2686;
                float _2688;
                float _2690;
                float _2692;
                float _2820 = _2559;
                float _2821 = _2561;
                float _2822 = _2563;
                float _2823 = _2565;
                float _2824 = _2567;
                float _2825 = _2569;
                uint _2826 = _2576;
                uint _2835;
                bool _2836;
                for (;;)
                {
                    _2835 = texelFetch(g_lightClassification, int((((_2417 << 5u) + (_2403 << 9u)) + (_2826 << 2u)) >> 2u)).x;
                    _2836 = _2835 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2836)
                    {
                        frontier_phi_67_pred = _2823;
                        frontier_phi_67_pred_1 = _2824;
                        frontier_phi_67_pred_2 = _2825;
                        frontier_phi_67_pred_3 = _2822;
                        frontier_phi_67_pred_4 = _2821;
                        frontier_phi_67_pred_5 = _2820;
                    }
                    else
                    {
                        float _3020;
                        float _3021;
                        float _3022;
                        float _3023;
                        float _3024;
                        float _3025;
                        float _3315;
                        float _3316;
                        float _3317;
                        float _3318;
                        float _3319;
                        float _3320;
                        float _3033 = _2820;
                        float _3034 = _2821;
                        float _3035 = _2822;
                        float _3036 = _2823;
                        float _3037 = _2824;
                        float _3038 = _2825;
                        uint _3039 = _2835;
                        uint _3040;
                        vec4 _3065;
                        float _3066;
                        vec4 _3081;
                        vec3 _3093;
                        vec4 _3108;
                        vec4 _3124;
                        float _3171;
                        bool _3172;
                        for (;;)
                        {
                            uint _3050 = ((_2826 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3039));
                            _3040 = (_3039 + 4294967295u) & _3039;
                            uint _3052 = _3050 * 40u;
                            _3065 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3052)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 3u)).x));
                            _3066 = _3065.w;
                            uint _3068 = (_3050 * 40u) + 4u;
                            _3081 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3068)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 3u)).x));
                            uint _3083 = (_3050 * 40u) + 8u;
                            _3093 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3083)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 2u)).x));
                            uint _3095 = (_3050 * 40u) + 16u;
                            _3108 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3095)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 3u)).x));
                            uint _3111 = (_3050 * 40u) + 20u;
                            _3124 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3111)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 3u)).x));
                            uint _3127 = (_3050 * 40u) + 24u;
                            vec4 _3140 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3127)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 3u)).x));
                            uint _3146 = (_3050 * 40u) + 28u;
                            vec4 _3159 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3146)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 3u)).x));
                            _3171 = fma(_2379, _3159.z, fma(_2378, _3159.y, _3159.x * _2377)) + _3159.w;
                            _3172 = !((fma(_2379, _3140.z, fma(_2378, _3140.y, _3140.x * _2377)) + _3140.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3172)
                            {
                                float _3199 = _3065.x - _2377;
                                float _3200 = _3065.y - _2378;
                                float _3201 = _3065.z - _2379;
                                float _3202 = dot(vec3(_3199, _3200, _3201), vec3(_3199, _3200, _3201));
                                float _3205 = inversesqrt(_3202);
                                float _3206 = _3205 * _3199;
                                float _3207 = _3205 * _3200;
                                float _3208 = _3205 * _3201;
                                float _3212 = 1.0 - (_3202 / (_3066 * _3066));
                                float _4281 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                                float _3213 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
                                float _3217 = sqrt(_3202) * _3081.w;
                                float _3219 = 1.39999997615814208984375 / (_3217 + 1.39999997615814208984375);
                                float _3220 = _3219 * _3219;
                                float _3223 = ((1.0 - _3220) * dot(vec3(_3206, _3207, _3208), vec3(_616, _619, _622))) + _3220;
                                float _3226 = _3217 * _3217;
                                float _3230 = (fma(_2379, _3108.z, fma(_2378, _3108.y, _3108.x * _2377)) + _3108.w) / _3171;
                                float _3231 = (fma(_2379, _3124.z, fma(_2378, _3124.y, _3124.x * _2377)) + _3124.w) / _3171;
                                float _3235 = 1.0 - dot(vec2(_3230, _3231), vec2(_3230, _3231));
                                float _4297 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                                float _3236 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
                                float _3237 = _3236 * (((isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0))) * _3213) / ((_3226 * 0.699999988079071044921875) + 1.0));
                                float _3249 = exp2(log2(1.0 / ((_3226 * 3.5) + 5.0)) * 0.25);
                                float _3250 = 1.0 - _691;
                                float _3257 = sqrt(1.0 - ((1.0 - (_3250 * _3250)) * (1.0 - (_3249 * _3249))));
                                float _3258 = _3257 * _3257;
                                float _3259 = _3258 * _3258;
                                float _3260 = _3206 - _2707;
                                float _3261 = _3207 - _2708;
                                float _3262 = _3208 - _2709;
                                float _3266 = inversesqrt(dot(vec3(_3260, _3261, _3262), vec3(_3260, _3261, _3262)));
                                float _3270 = dot(vec3(_616, _619, _622), vec3((-0.0) - _2707, (-0.0) - _2708, (-0.0) - _2709));
                                float _4308 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                                float _3273 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
                                float _3274 = dot(vec3(_616, _619, _622), vec3(_3266 * _3260, _3266 * _3261, _3266 * _3262));
                                float _4319 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                                float _3277 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                                float _3281 = ((_3277 * _3277) * (_3259 + (-1.0))) + 1.0;
                                float _3282 = _3219 * _3258;
                                float _3283 = _3282 * _3282;
                                float _3289 = ((1.0 - _3283) * dot(vec3(_616, _619, _622), vec3(_3206, _3207, _3208))) + _3283;
                                float _4330 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                                float _3290 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
                                float _3291 = 1.0 - _3258;
                                float _3301 = (0.5 / (((_3290 * ((_3273 * _3291) + _3258)) + 9.9999999392252902907785028219223e-09) + (((_3290 * _3291) + _3258) * _3273))) * _3290;
                                float _4341 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                                float _3311 = (_3236 * _3213) * (((_3259 * 3.1415927410125732421875) * (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0)))) / ((_3281 * _3281) * ((_3226 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3311 * _3093.x;
                                frontier_phi_73_pred_1 = _3311 * _3093.y;
                                frontier_phi_73_pred_2 = _3237 * _3081.z;
                                frontier_phi_73_pred_3 = _3237 * _3081.y;
                                frontier_phi_73_pred_4 = _3237 * _3081.x;
                                frontier_phi_73_pred_5 = _3311 * _3093.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3315 = frontier_phi_73_pred;
                            _3316 = frontier_phi_73_pred_1;
                            _3320 = frontier_phi_73_pred_2;
                            _3319 = frontier_phi_73_pred_3;
                            _3318 = frontier_phi_73_pred_4;
                            _3317 = frontier_phi_73_pred_5;
                            _3023 = _3318 + _3036;
                            _3024 = _3319 + _3037;
                            _3025 = _3320 + _3038;
                            _3020 = _3315 + _3033;
                            _3021 = _3316 + _3034;
                            _3022 = _3317 + _3035;
                            if (_3040 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3033 = _3020;
                                _3034 = _3021;
                                _3035 = _3022;
                                _3036 = _3023;
                                _3037 = _3024;
                                _3038 = _3025;
                                _3039 = _3040;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3023;
                        frontier_phi_67_pred_1 = _3024;
                        frontier_phi_67_pred_2 = _3025;
                        frontier_phi_67_pred_3 = _3022;
                        frontier_phi_67_pred_4 = _3021;
                        frontier_phi_67_pred_5 = _3020;
                    }
                    _2688 = frontier_phi_67_pred;
                    _2690 = frontier_phi_67_pred_1;
                    _2692 = frontier_phi_67_pred_2;
                    _2686 = frontier_phi_67_pred_3;
                    _2684 = frontier_phi_67_pred_4;
                    _2682 = frontier_phi_67_pred_5;
                    uint _2827 = _2826 + 1u;
                    if (_2827 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2820 = _2682;
                        _2821 = _2684;
                        _2822 = _2686;
                        _2823 = _2688;
                        _2824 = _2690;
                        _2825 = _2692;
                        _2826 = _2827;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2690;
                frontier_phi_55_56_ladder_1 = _2692;
                frontier_phi_55_56_ladder_2 = _2688;
                frontier_phi_55_56_ladder_3 = _2686;
                frontier_phi_55_56_ladder_4 = _2684;
                frontier_phi_55_56_ladder_5 = _2682;
            }
            else
            {
                frontier_phi_55_56_ladder = _2567;
                frontier_phi_55_56_ladder_1 = _2569;
                frontier_phi_55_56_ladder_2 = _2565;
                frontier_phi_55_56_ladder_3 = _2563;
                frontier_phi_55_56_ladder_4 = _2561;
                frontier_phi_55_56_ladder_5 = _2559;
            }
            _2681 = frontier_phi_55_56_ladder_5;
            _2683 = frontier_phi_55_56_ladder_4;
            _2685 = frontier_phi_55_56_ladder_3;
            _2687 = frontier_phi_55_56_ladder_2;
            _2689 = frontier_phi_55_56_ladder;
            _2691 = frontier_phi_55_56_ladder_1;
        }
        float _2696 = isnan(1.0) ? _675 : (isnan(_675) ? 1.0 : min(_675, 1.0));
        _2436 = (_2696 * _2687) + _1869;
        _2438 = (_2696 * _2689) + _1871;
        _2440 = (_2696 * _2691) + _1873;
        _2442 = ((_2681 * _660) * _2696) + _2217;
        _2444 = ((_2683 * _662) * _2696) + _2219;
        _2446 = ((_2685 * _663) * _2696) + _2221;
    }
    else
    {
        _2436 = _1869;
        _2438 = _1871;
        _2440 = _1873;
        _2442 = _2217;
        _2444 = _2219;
        _2446 = _2221;
    }
    uint _2452 = _636 + uint(cbMatDynParam._m0[0u].w);
    float _2460 = ((_485 * cbMtdParam._m0[11u].x) * (_470.x + _455.x)) * cbInstanceData._m0[_2452].x;
    float _2463 = ((_485 * cbMtdParam._m0[11u].y) * (_470.y + _455.y)) * cbInstanceData._m0[_2452].y;
    float _2466 = ((_485 * cbMtdParam._m0[11u].z) * (_470.z + _455.z)) * cbInstanceData._m0[_2452].z;
    float _4357 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _4368 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _4379 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _2483 = (((isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_2436 + ((isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))) * _675))) + ((_2442 + ((isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))) * _1485)) * cbPerFrame._m0[3u].x)) + _2460;
    float _2485 = (_2463 + ((_2444 + ((isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))) * _1485)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_2438 + ((isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0))) * _675)));
    float _2487 = (_2466 + ((_2446 + ((isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))) * _1485)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * (_2440 + ((isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0))) * _675)));
    float _4405 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2500 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
    uint _2501 = _635 + 6u;
    float _2509 = _597 / cbSceneParam._m0[86u].x;
    float _2510 = _598 / cbSceneParam._m0[86u].y;
    vec4 _2524 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2509, _2510, (log2((isnan(cbSceneParam._m0[77u].w) ? _531 : (isnan(_531) ? cbSceneParam._m0[77u].w : min(_531, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2526 = _2524.x;
    float _2527 = _2524.y;
    float _2528 = _2524.z;
    float _2529 = _2524.w;
    float _2622;
    float _2624;
    float _2626;
    float _2628;
    if (_531 > cbSceneParam._m0[78u].w)
    {
        float _2584 = isnan(_531) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _531 : min(cbSceneParam._m0[80u].w, _531));
        float _2585 = _2584 / _531;
        float _2596 = _2585 * _582;
        float _2597 = _583 * _2585;
        float _2598 = (-0.0) - _2597;
        float _2600 = _2585 * _584;
        float _2602 = (cbSceneParam._m0[77u].w * _2598) / _2584;
        float _2603 = _2602 + cbSceneParam._m0[79u].w;
        float _2604 = cbSceneParam._m0[79u].w - _2597;
        float _2610 = sqrt(((_2596 * _2596) + (_2597 * _2597)) + (_2600 * _2600));
        float _2613 = (1.0 - (cbSceneParam._m0[77u].w / _2584)) * _2610;
        float _2618 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2620 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2782;
        if (abs((_2598 - _2602) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2782 = ((((_2603 > 0.0) ? exp2(_2618 * _2603) : (2.0 - exp2(_2620 * _2603))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2613;
        }
        else
        {
            float _2742 = 1.0 / cbSceneParam._m0[80u].x;
            float _2743 = isnan(_2604) ? _2603 : (isnan(_2603) ? _2604 : max(_2603, _2604));
            float _2744 = isnan(_2604) ? _2603 : (isnan(_2603) ? _2604 : min(_2603, _2604));
            float _2753 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : min(_2743, 0.0));
            float _2754 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : min(_2744, 0.0));
            _2782 = ((abs(_2610 / _2598) * cbSceneParam._m0[80u].y) * ((((_2753 - _2754) * 2.0) - ((exp2(_2618 * (isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0)))) - exp2(_2618 * (isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0))))) * _2742)) - ((exp2(_2620 * _2753) - exp2(_2620 * _2754)) * _2742))) + (_2613 * cbSceneParam._m0[80u].z);
        }
        vec4 _2784 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2509, _2510, 1.0), 0.0);
        float _2793 = exp2((_2782 * (-1.44269502162933349609375)) * (1.0 - _2784.w));
        float _2794 = log2(_2793);
        float _2810 = log2(_2529);
        _2622 = (exp2(_2810 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2794 * cbSceneParam._m0[78u].x)) * _2784.x) / cbSceneParam._m0[78u].x)) + _2526;
        _2624 = (exp2(_2810 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2794 * cbSceneParam._m0[78u].y)) * _2784.y) / cbSceneParam._m0[78u].y)) + _2527;
        _2626 = (exp2(_2810 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2794 * cbSceneParam._m0[78u].z)) * _2784.z) / cbSceneParam._m0[78u].z)) + _2528;
        _2628 = _2793 * _2529;
    }
    else
    {
        _2622 = _2526;
        _2624 = _2527;
        _2626 = _2528;
        _2628 = _2529;
    }
    float _2640 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2641 = _2640 == 3.0;
    float _2642 = log2(_2628);
    float _2646 = exp2(_2642 * cbSceneParam._m0[78u].x);
    float _2647 = exp2(_2642 * cbSceneParam._m0[78u].y);
    float _2648 = exp2(_2642 * cbSceneParam._m0[78u].z);
    float _2649 = _2646 * (isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0)));
    float _2650 = _2647 * (isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0)));
    float _2651 = _2648 * (isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0)));
    float _2660 = (_2640 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2660 * (_2641 ? _2649 : (_2649 + (cbSceneParam._m0[72u].w * _2622)));
    SV_Target.y = _2660 * (_2641 ? _2650 : (_2650 + (cbSceneParam._m0[72u].w * _2624)));
    SV_Target.z = _2660 * (_2641 ? _2651 : (_2651 + (cbSceneParam._m0[72u].w * _2626)));
    SV_Target.w = cbInstanceData._m0[_2501].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2460) * _2500) * _2646) * _2660;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2463) * _2500) * _2647) * _2660;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2466) * _2500) * _2648) * _2660;
    SV_Target_1.w = cbInstanceData._m0[_2501].w;
}


