#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1184;
float _3609;
float _3610;
float _3611;
float _3612;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _255 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _261 = _255.x * cbMtdParam._m0[9u].x;
    float _262 = _255.y * cbMtdParam._m0[9u].y;
    float _263 = _255.z * cbMtdParam._m0[9u].z;
    vec4 _301 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _317 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3621 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _318 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    float _325 = (((_301.x * cbMtdParam._m0[10u].x) - _261) * _318) + _261;
    float _326 = (((_301.y * cbMtdParam._m0[10u].y) - _262) * _318) + _262;
    float _327 = (((_301.z * cbMtdParam._m0[10u].z) - _263) * _318) + _263;
    vec4 _347 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _366 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_347.x + 0.00999999977648258209228515625));
    float _368 = _366 * (cbMtdParam._m0[15u].x + 1.0);
    float _3632 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _369 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    float _377 = ((((cbMtdParam._m0[12u].x - _325) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _369) + _325;
    float _378 = ((((cbMtdParam._m0[12u].y - _326) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _369) + _326;
    float _379 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _327)) * _369) + _327;
    vec4 _392 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _400 = (_392.x * 2.0) + (-1.0);
    float _402 = (_392.y * 2.0) + (-1.0);
    float _403 = dot(vec2(_400, _402), vec2(_400, _402));
    float _3643 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    vec4 _420 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _424 = _420.z;
    float _427 = (_420.x * 2.0) + (-1.0);
    float _428 = (_420.y * 2.0) + (-1.0);
    float _429 = dot(vec2(_427, _428), vec2(_427, _428));
    float _3654 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _434 = sqrt(1.0 - (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))));
    float _437 = (_318 * (_392.z - _424)) + _424;
    float _440 = _366 * (cbMtdParam._m0[14u].w + 1.0);
    float _3665 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _444 = ((cbMtdParam._m0[14u].y - _437) * (isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0)))) + _437;
    vec4 _471 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _486 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _528 = (TEXCOORD_6.x - ((cbMtdParam._m0[13u].w * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_5, SS_WrapLinear), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].x + 1.0);
    float _3676 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _529 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
    float _530 = ((_486.x + _471.x) * cbMtdParam._m0[11u].x) * _529;
    float _531 = ((_486.y + _471.y) * cbMtdParam._m0[11u].y) * _529;
    float _532 = ((_486.z + _471.z) * cbMtdParam._m0[11u].z) * _529;
    vec4 _544 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[9u].w));
    float _546 = _544.x;
    float _559 = (_318 * (_400 - _427)) + _427;
    float _560 = (_318 * (_402 - _428)) + _428;
    float _561 = (_318 * (sqrt(1.0 - (isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0)))) - _434)) + _434;
    vec4 _580 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _586 = (_580.x * 2.0) + (-1.0);
    float _587 = (_580.y * 2.0) + (-1.0);
    float _588 = dot(vec2(_586, _587), vec2(_586, _587));
    float _3687 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _604 = (_369 * (((_559 * cbMtdParam._m0[13u].z) - _559) + _586)) + _559;
    float _605 = (_369 * (((_560 * cbMtdParam._m0[13u].z) - _560) + _587)) + _560;
    float _606 = (_369 * (sqrt(1.0 - (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0)))) - _561)) + _561;
    float _609 = fma(_606, _226 * NORMAL.x, fma(_605, _233 * TANGENT.x, (_219 * _211) * _604));
    float _612 = fma(_606, _226 * NORMAL.y, fma(_605, _233 * TANGENT.y, (_219 * _212) * _604));
    float _615 = fma(_606, _226 * NORMAL.z, fma(_605, _233 * TANGENT.z, (_219 * _213) * _604));
    float _619 = inversesqrt(dot(vec3(_609, _612, _615), vec3(_609, _612, _615)));
    float _620 = _619 * _609;
    float _621 = _619 * _612;
    float _622 = _619 * _615;
    float _3698 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _623 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
    float _3709 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _3720 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _3731 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _642 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _682 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _692 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _682);
    float _693 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _682);
    float _694 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _682);
    float _698 = inversesqrt(dot(vec3(_692, _693, _694), vec3(_692, _693, _694)));
    float _699 = _692 * _698;
    float _700 = _693 * _698;
    float _701 = _694 * _698;
    vec4 _706 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _708 = _706.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _864 = sqrt(((_692 * _692) + (_693 * _693)) + (_694 * _694));
        float _870 = (cbMatDynParam._m0[5u].x * _864) + cbMatDynParam._m0[5u].y;
        float _3742 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _871 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _875 = (cbMatDynParam._m0[5u].z * _864) + cbMatDynParam._m0[5u].w;
        float _3753 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) - _871)) + _871) < ((_708 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _720 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _721 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _740 = fma(_622, cbSceneParam._m0[5u].z, fma(_621, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _620));
    float _743 = fma(_622, cbSceneParam._m0[6u].z, fma(_621, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _620));
    float _746 = fma(_622, cbSceneParam._m0[7u].z, fma(_621, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _620));
    uint _759 = uint(roundEven(NORMAL.w)) * 13u;
    uint _760 = _759 + 9u;
    uint _761 = _760 + uint(cbMatDynParam._m0[0u].w);
    float _767 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0)))) * cbInstanceData._m0[_761].x;
    float _768 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0)))) * cbInstanceData._m0[_761].y;
    float _769 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0)))) * cbInstanceData._m0[_761].z;
    float _3764 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _770 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
    float _3775 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _771 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _3786 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _772 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    vec4 _781 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _720, cbSceneParam._m0[86u].y * _721));
    float _784 = _781.x * TEXCOORD_3.w;
    float _785 = dot(vec3(_620, _621, _622), vec3(_699, _700, _701));
    float _788 = _785 * 2.0;
    float _792 = (_788 * _620) - _699;
    float _793 = (_788 * _621) - _700;
    float _794 = (_788 * _622) - _701;
    float _798 = abs(dot(vec3(_699, _700, _701), vec3(_620, _621, _622)));
    float _3797 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _800 = sqrt(_623);
    float _813 = exp2((_800 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_800 * 3.0));
    float _845 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _849 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _853 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1183;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _908 = fma(_853, cbModelParam._m0[26u].z, fma(_849, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _845));
        float _912 = fma(_853, cbModelParam._m0[27u].z, fma(_849, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _845));
        float _916 = fma(_853, cbModelParam._m0[28u].z, fma(_849, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _845));
        float _941 = _845 + _620;
        float _942 = _849 + _621;
        float _943 = _853 + _622;
        float _953 = fma(_943, cbModelParam._m0[26u].z, fma(_942, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _941)) - _908;
        float _954 = fma(_943, cbModelParam._m0[27u].z, fma(_942, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _941)) - _912;
        float _955 = fma(_943, cbModelParam._m0[28u].z, fma(_942, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _941)) - _916;
        float _959 = inversesqrt(dot(vec3(_953, _954, _955), vec3(_953, _954, _955)));
        float _972 = ((_959 * _953) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_908 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _973 = ((_959 * _954) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_912 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _974 = ((_959 * _955) / cbModelParam._m0[34u].z) + ((((((_916 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_972, _973, _974), 0.0);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_972, _973, _974), 0.0);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_972, _973, _974), 0.0);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_972, _973, _974), 0.0);
        float _1011 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_977.x + (-0.5));
        float _1013 = _1011 * (_977.y + (-0.5));
        float _1014 = _1011 * (_977.z + (-0.5));
        float _1021 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_984.x + (-0.5));
        float _1023 = _1021 * (_984.y + (-0.5));
        float _1024 = _1021 * (_984.z + (-0.5));
        float _1031 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_991.x + (-0.5));
        float _1033 = _1031 * (_991.y + (-0.5));
        float _1034 = _1031 * (_991.z + (-0.5));
        float _1041 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_998.x + (-0.5));
        float _1043 = _1041 * (_998.y + (-0.5));
        float _1044 = _1041 * (_998.z + (-0.5));
        float _1045 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1046 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1047 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1048 = _1012 * 0.5;
        float _1049 = _1022 * 0.5;
        float _1050 = _1032 * 0.5;
        float _1051 = dot(vec3(_1048, _1049, _1050), vec3(_1048, _1049, _1050));
        float _1056 = (_1051 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1051);
        float _1065 = (dot(vec3(_620, _621, _622), vec3(_1056 * _1048, _1056 * _1049, _1056 * _1050)) + 1.0) * 0.5;
        float _3823 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1075 = sqrt(((_1049 * _1049) + (_1048 * _1048)) + (_1050 * _1050)) / (_1045 + 9.9999997473787516355514526367188e-06);
        float _3834 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1077 = _1076 * 2.0;
        float _1081 = (1.0 - _1076) / (_1076 + 1.0);
        float _3845 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1091 = ((((1.0 - _1082) * (_1077 + 2.0)) * exp2(log2(isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * (_1077 + 1.0))) + _1082) * _1045;
        float _1092 = _1013 * 0.5;
        float _1093 = _1023 * 0.5;
        float _1094 = _1033 * 0.5;
        float _1095 = dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094));
        float _1100 = (_1095 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1095);
        float _1108 = (dot(vec3(_620, _621, _622), vec3(_1100 * _1092, _1100 * _1093, _1100 * _1094)) + 1.0) * 0.5;
        float _3856 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1117 = sqrt(((_1093 * _1093) + (_1092 * _1092)) + (_1094 * _1094)) / (_1046 + 9.9999997473787516355514526367188e-06);
        float _3867 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1119 = _1118 * 2.0;
        float _1123 = (1.0 - _1118) / (_1118 + 1.0);
        float _3878 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1133 = ((((1.0 - _1124) * (_1119 + 2.0)) * exp2(log2(isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (_1119 + 1.0))) + _1124) * _1046;
        float _1134 = _1014 * 0.5;
        float _1135 = _1024 * 0.5;
        float _1136 = _1034 * 0.5;
        float _1137 = dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136));
        float _1142 = (_1137 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1137);
        float _1150 = (dot(vec3(_620, _621, _622), vec3(_1142 * _1134, _1142 * _1135, _1142 * _1136)) + 1.0) * 0.5;
        float _3889 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1159 = sqrt(((_1135 * _1135) + (_1134 * _1134)) + (_1136 * _1136)) / (_1047 + 9.9999997473787516355514526367188e-06);
        float _3900 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1161 = _1160 * 2.0;
        float _1165 = (1.0 - _1160) / (_1160 + 1.0);
        float _3911 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1175 = ((((1.0 - _1166) * (_1161 + 2.0)) * exp2(log2(isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_1161 + 1.0))) + _1166) * _1047;
        _1183 = _1014;
        _1185 = _1013;
        _1186 = _1012;
        _1187 = _1024;
        _1188 = _1023;
        _1189 = _1022;
        _1190 = _1034;
        _1191 = _1033;
        _1192 = _1032;
        _1193 = _1047;
        _1194 = _1046;
        _1195 = _1045;
        _1196 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0)));
        _1197 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0)));
        _1198 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)));
    }
    else
    {
        _1183 = _1184;
        _1185 = _1184;
        _1186 = _1184;
        _1187 = _1184;
        _1188 = _1184;
        _1189 = _1184;
        _1190 = _1184;
        _1191 = _1184;
        _1192 = _1184;
        _1193 = _1184;
        _1194 = _1184;
        _1195 = _1184;
        _1196 = 0.0;
        _1197 = 0.0;
        _1198 = 0.0;
    }
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1227 = fma(_853, cbModelParam._m0[30u].z, fma(_849, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _845));
        float _1231 = fma(_853, cbModelParam._m0[31u].z, fma(_849, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _845));
        float _1235 = fma(_853, cbModelParam._m0[32u].z, fma(_849, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _845));
        float _1258 = _845 + _620;
        float _1259 = _849 + _621;
        float _1260 = _853 + _622;
        float _1270 = fma(_1260, cbModelParam._m0[30u].z, fma(_1259, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1258)) - _1227;
        float _1271 = fma(_1260, cbModelParam._m0[31u].z, fma(_1259, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1258)) - _1231;
        float _1272 = fma(_1260, cbModelParam._m0[32u].z, fma(_1259, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1258)) - _1235;
        float _1276 = inversesqrt(dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272)));
        float _1289 = ((_1276 * _1270) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1227 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1290 = ((_1276 * _1271) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1231 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1291 = ((_1276 * _1272) / cbModelParam._m0[35u].z) + ((((((_1235 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        vec4 _1300 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        vec4 _1307 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        vec4 _1314 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        float _1326 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1293.x + (-0.5));
        float _1328 = _1326 * (_1293.y + (-0.5));
        float _1329 = _1326 * (_1293.z + (-0.5));
        float _1336 = exp2((_1300.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1300.x + (-0.5));
        float _1338 = _1336 * (_1300.y + (-0.5));
        float _1339 = _1336 * (_1300.z + (-0.5));
        float _1346 = exp2((_1307.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1307.x + (-0.5));
        float _1348 = _1346 * (_1307.y + (-0.5));
        float _1349 = _1346 * (_1307.z + (-0.5));
        float _1356 = exp2((_1314.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1314.x + (-0.5));
        float _1358 = _1356 * (_1314.y + (-0.5));
        float _1359 = _1356 * (_1314.z + (-0.5));
        float _1360 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1361 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1362 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1363 = _1327 * 0.5;
        float _1364 = _1337 * 0.5;
        float _1365 = _1347 * 0.5;
        float _1366 = dot(vec3(_1363, _1364, _1365), vec3(_1363, _1364, _1365));
        float _1371 = (_1366 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1366);
        float _1379 = (dot(vec3(_620, _621, _622), vec3(_1371 * _1363, _1371 * _1364, _1371 * _1365)) + 1.0) * 0.5;
        float _3952 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1388 = sqrt(((_1364 * _1364) + (_1363 * _1363)) + (_1365 * _1365)) / (_1360 + 9.9999997473787516355514526367188e-06);
        float _3963 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1390 = _1389 * 2.0;
        float _1394 = (1.0 - _1389) / (_1389 + 1.0);
        float _3974 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1404 = ((((1.0 - _1395) * (_1390 + 2.0)) * exp2(log2(isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1390 + 1.0))) + _1395) * _1360;
        float _1405 = _1328 * 0.5;
        float _1406 = _1338 * 0.5;
        float _1407 = _1348 * 0.5;
        float _1408 = dot(vec3(_1405, _1406, _1407), vec3(_1405, _1406, _1407));
        float _1413 = (_1408 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1408);
        float _1421 = (dot(vec3(_620, _621, _622), vec3(_1413 * _1405, _1413 * _1406, _1413 * _1407)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1430 = sqrt(((_1406 * _1406) + (_1405 * _1405)) + (_1407 * _1407)) / (_1361 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1432 = _1431 * 2.0;
        float _1436 = (1.0 - _1431) / (_1431 + 1.0);
        float _4007 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1446 = ((((1.0 - _1437) * (_1432 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1432 + 1.0))) + _1437) * _1361;
        float _1447 = _1329 * 0.5;
        float _1448 = _1339 * 0.5;
        float _1449 = _1349 * 0.5;
        float _1450 = dot(vec3(_1447, _1448, _1449), vec3(_1447, _1448, _1449));
        float _1455 = (_1450 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1450);
        float _1463 = (dot(vec3(_620, _621, _622), vec3(_1455 * _1447, _1455 * _1448, _1455 * _1449)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1472 = sqrt(((_1448 * _1448) + (_1447 * _1447)) + (_1449 * _1449)) / (_1362 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1474 = _1473 * 2.0;
        float _1478 = (1.0 - _1473) / (_1473 + 1.0);
        float _4040 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1488 = ((((1.0 - _1479) * (_1474 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1474 + 1.0))) + _1479) * _1362;
        _1496 = _1329;
        _1497 = _1328;
        _1498 = _1327;
        _1499 = _1339;
        _1500 = _1338;
        _1501 = _1337;
        _1502 = _1349;
        _1503 = _1348;
        _1504 = _1347;
        _1505 = _1362;
        _1506 = _1361;
        _1507 = _1360;
        _1508 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)));
        _1509 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)));
        _1510 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)));
    }
    else
    {
        _1496 = _1184;
        _1497 = _1184;
        _1498 = _1184;
        _1499 = _1184;
        _1500 = _1184;
        _1501 = _1184;
        _1502 = _1184;
        _1503 = _1184;
        _1504 = _1184;
        _1505 = _1184;
        _1506 = _1184;
        _1507 = _1184;
        _1508 = 0.0;
        _1509 = 0.0;
        _1510 = 0.0;
    }
    float _1520 = (cbModelParam._m0[1u].x * (_1508 - _1196)) + _1196;
    float _1521 = (cbModelParam._m0[1u].x * (_1509 - _1197)) + _1197;
    float _1522 = (cbModelParam._m0[1u].x * (_1510 - _1198)) + _1198;
    float _1543 = fma(_1522, cbSceneParam._m0[89u].z, fma(_1521, cbSceneParam._m0[89u].y, _1520 * cbSceneParam._m0[89u].x));
    float _1546 = fma(_1522, cbSceneParam._m0[90u].z, fma(_1521, cbSceneParam._m0[90u].y, _1520 * cbSceneParam._m0[90u].x));
    float _1549 = fma(_1522, cbSceneParam._m0[91u].z, fma(_1521, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1520));
    float _1564 = _792 * 0.5;
    float _1565 = _793 * 0.5;
    float _1566 = _794 * 0.5;
    float _1567 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1498, _1501, _1504, _1507));
    float _1570 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1497, _1500, _1503, _1506));
    float _1573 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1496, _1499, _1502, _1505));
    float _1607;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1580 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1183, _1187, _1190, _1193));
        float _1584 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1185, _1188, _1191, _1194));
        float _1588 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1186, _1189, _1192, _1195));
        float _1595 = dot(vec4(cbModelParam._m0[39u]), vec4(_1564, _1565, _1566, 1.0));
        _1607 = dot(vec3(isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0)), isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)), isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1595) ? 0.0 : (isnan(0.0) ? _1595 : max(0.0, _1595))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1607 = 1.0;
    }
    float _1618;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1609 = dot(vec4(cbModelParam._m0[40u]), vec4(_1564, _1565, _1566, 1.0));
        _1618 = dot(vec3(isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)), isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)), isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1609) ? 0.0 : (isnan(0.0) ? _1609 : max(0.0, _1609))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1618 = 1.0;
    }
    float _1622 = (_1618 * cbModelParam._m0[1u].x) + (_1607 * (1.0 - cbModelParam._m0[1u].x));
    float _1632 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _623);
    float _1633 = isnan(_1632) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1632 : min(cbModelParam._m0[25u].z, _1632));
    float _1713;
    float _1715;
    float _1717;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1680 = fma(_853, cbModelParam._m0[13u].z, fma(_849, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _845)) + cbModelParam._m0[13u].w;
        float _1684 = fma(_853, cbModelParam._m0[14u].z, fma(_849, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _845)) + cbModelParam._m0[14u].w;
        float _1688 = fma(_853, cbModelParam._m0[15u].z, fma(_849, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _845)) + cbModelParam._m0[15u].w;
        float _1691 = fma(_794, cbModelParam._m0[13u].z, fma(_793, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _792));
        float _1694 = fma(_794, cbModelParam._m0[14u].z, fma(_793, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _792));
        float _1697 = fma(_794, cbModelParam._m0[15u].z, fma(_793, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _792));
        float _1725;
        if (_1691 > 0.0)
        {
            _1725 = abs((1.0 - _1680) / _1691);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1691 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1680 + 1.0) / _1691);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1725 = frontier_phi_17_15_ladder;
        }
        float _1948;
        if (_1694 > 0.0)
        {
            _1948 = abs((1.0 - _1684) / _1694);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1694 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1684 + 1.0) / _1694);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1948 = frontier_phi_26_22_ladder;
        }
        float _2194;
        if (_1697 > 0.0)
        {
            _2194 = abs((1.0 - _1688) / _1697);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1697 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1688 + 1.0) / _1697);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2194 = frontier_phi_38_33_ladder;
        }
        float _2196 = isnan(_1948) ? _1725 : (isnan(_1725) ? _1948 : min(_1725, _1948));
        float _2197 = isnan(_2194) ? _2196 : (isnan(_2196) ? _2194 : min(_2196, _2194));
        float _2201 = (_2197 * _1691) + _1680;
        float _2202 = (_2197 * _1694) + _1684;
        float _2203 = (_2197 * _1697) + _1688;
        float _2204 = _2197 * 9.9999997473787516355514526367188e-05;
        float _2206 = (-1.0) - _2204;
        float _2208 = _2204 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2203 > _2208) || ((_2203 < _2206) || ((_2202 > _2208) || ((_2202 < _2206) || ((_2201 < _2206) || (_2201 > _2208))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2327 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2203, cbModelParam._m0[9u].z, fma(_2202, cbModelParam._m0[9u].y, _2201 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2203, cbModelParam._m0[10u].z, fma(_2202, cbModelParam._m0[10u].y, _2201 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2203, cbModelParam._m0[11u].z, fma(_2202, cbModelParam._m0[11u].y, _2201 * cbModelParam._m0[11u].x))), _1633);
            frontier_phi_16_38_ladder = _2327.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2327.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2327.x * cbModelParam._m0[1u].y;
        }
        _1713 = frontier_phi_16_38_ladder_2;
        _1715 = frontier_phi_16_38_ladder_1;
        _1717 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1701 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_792, _793, _794), _1633);
        _1713 = _1701.x * cbModelParam._m0[1u].y;
        _1715 = _1701.y * cbModelParam._m0[1u].y;
        _1717 = _1701.z * cbModelParam._m0[1u].y;
    }
    float _1721 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _623);
    float _1722 = isnan(_1721) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1721 : min(cbModelParam._m0[25u].w, _1721));
    float _1813;
    float _1815;
    float _1817;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1777 = fma(_853, cbModelParam._m0[21u].z, fma(_849, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _845)) + cbModelParam._m0[21u].w;
        float _1781 = fma(_853, cbModelParam._m0[22u].z, fma(_849, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _845)) + cbModelParam._m0[22u].w;
        float _1785 = fma(_853, cbModelParam._m0[23u].z, fma(_849, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _845)) + cbModelParam._m0[23u].w;
        float _1788 = fma(_794, cbModelParam._m0[21u].z, fma(_793, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _792));
        float _1791 = fma(_794, cbModelParam._m0[22u].z, fma(_793, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _792));
        float _1794 = fma(_794, cbModelParam._m0[23u].z, fma(_793, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _792));
        float _1953;
        if (_1788 > 0.0)
        {
            _1953 = abs((1.0 - _1777) / _1788);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1788 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1777 + 1.0) / _1788);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1953 = frontier_phi_28_24_ladder;
        }
        float _2221;
        if (_1791 > 0.0)
        {
            _2221 = abs((1.0 - _1781) / _1791);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1791 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1781 + 1.0) / _1791);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2221 = frontier_phi_40_35_ladder;
        }
        float _2426;
        if (_1794 > 0.0)
        {
            _2426 = abs((1.0 - _1785) / _1794);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1794 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1785 + 1.0) / _1794);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2426 = frontier_phi_49_46_ladder;
        }
        float _2428 = isnan(_2221) ? _1953 : (isnan(_1953) ? _2221 : min(_1953, _2221));
        float _2429 = isnan(_2426) ? _2428 : (isnan(_2428) ? _2426 : min(_2428, _2426));
        float _2433 = (_2429 * _1788) + _1777;
        float _2434 = (_2429 * _1791) + _1781;
        float _2435 = (_2429 * _1794) + _1785;
        float _2436 = _2429 * 9.9999997473787516355514526367188e-05;
        float _2437 = (-1.0) - _2436;
        float _2439 = _2436 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2435 > _2439) || ((_2435 < _2437) || ((_2434 > _2439) || ((_2434 < _2437) || ((_2433 < _2437) || (_2433 > _2439))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2663 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2435, cbModelParam._m0[17u].z, fma(_2434, cbModelParam._m0[17u].y, _2433 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2435, cbModelParam._m0[18u].z, fma(_2434, cbModelParam._m0[18u].y, _2433 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2435, cbModelParam._m0[19u].z, fma(_2434, cbModelParam._m0[19u].y, _2433 * cbModelParam._m0[19u].x))), _1722);
            frontier_phi_25_49_ladder = _2663.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2663.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2663.x * cbModelParam._m0[1u].z;
        }
        _1813 = frontier_phi_25_49_ladder_2;
        _1815 = frontier_phi_25_49_ladder_1;
        _1817 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1797 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_792, _793, _794), _1722);
        _1813 = _1797.x * cbModelParam._m0[1u].z;
        _1815 = _1797.y * cbModelParam._m0[1u].z;
        _1817 = _1797.z * cbModelParam._m0[1u].z;
    }
    float _1829 = ((((1.0 - _813) * ((_800 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_813 * _800)) * _784;
    float _1830 = _1829 * ((cbModelParam._m0[1u].w * (_1813 - _1713)) + _1713);
    float _1831 = _1829 * ((cbModelParam._m0[1u].w * (_1815 - _1715)) + _1715);
    float _1832 = _1829 * ((cbModelParam._m0[1u].w * (_1817 - _1717)) + _1717);
    float _1835 = fma(_1832, cbSceneParam._m0[89u].z, fma(_1831, cbSceneParam._m0[89u].y, _1830 * cbSceneParam._m0[89u].x));
    float _1838 = fma(_1832, cbSceneParam._m0[90u].z, fma(_1831, cbSceneParam._m0[90u].y, _1830 * cbSceneParam._m0[90u].x));
    float _1841 = fma(_1832, cbSceneParam._m0[91u].z, fma(_1831, cbSceneParam._m0[91u].y, _1830 * cbSceneParam._m0[91u].x));
    vec4 _1849 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_720, _721));
    float _1851 = _1849.w;
    float _1863 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1851);
    float _1864 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1851);
    float _1865 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1851);
    uvec4 _1869 = floatBitsToUint(cbInstanceData._m0[_759 + 5u]);
    uint _1871 = _1869.x * 14u;
    uint _1872 = _1871 + 13u;
    float _1879 = _784 + (-1.0);
    float _1884 = (cbLight._m0[_1872].x * _1879) + 1.0;
    float _1885 = (cbLight._m0[_1872].y * _1879) + 1.0;
    float _1886 = (cbLight._m0[_1872].z * _1879) + 1.0;
    float _1887 = (cbLight._m0[_1872].w * _1879) + 1.0;
    uint _1888 = _1871 + 5u;
    float _1894 = isnan(1.0) ? _1885 : (isnan(_1885) ? 1.0 : min(_1885, 1.0));
    uint _1898 = _1871 + 4u;
    float _1907 = isnan(1.0) ? _1884 : (isnan(_1884) ? 1.0 : min(_1884, 1.0));
    uint _1911 = _1871 | 1u;
    float _1922 = dot(vec3(cbLight._m0[_1871].xyz), vec3(_620, _621, _622));
    float _1925 = dot(vec3(cbLight._m0[_1911].xyz), vec3(_620, _621, _622));
    float _4176 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
    float _4187 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _1930 = (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * 0.3183098733425140380859375;
    float _1932 = (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * 0.3183098733425140380859375;
    float _1939 = ((cbLight._m0[_1888].x * _1894) * _1932) + (((cbLight._m0[_1898].x * _1863) * _1907) * _1930);
    float _1940 = ((_1894 * cbLight._m0[_1888].y) * _1932) + (((cbLight._m0[_1898].y * _1864) * _1907) * _1930);
    float _1941 = ((_1894 * cbLight._m0[_1888].z) * _1932) + (((cbLight._m0[_1898].z * _1865) * _1907) * _1930);
    uvec4 _1945 = floatBitsToUint(cbLight._m0[_1871 + 12u]);
    bool _1947 = _1945.x == 0u;
    float _1958;
    float _1960;
    float _1962;
    if (_1947)
    {
        _1958 = _1939;
        _1960 = _1940;
        _1962 = _1941;
    }
    else
    {
        uint _1966 = _1871 + 6u;
        float _1982 = (dot(vec3(cbLight._m0[_1871 + 2u].xyz), vec3(_620, _621, _622)) * 0.5) + 0.5;
        float _1983 = _1982 * _1982;
        float _4198 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
        float _1984 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1985 = isnan(1.0) ? _1886 : (isnan(_1886) ? 1.0 : min(_1886, 1.0));
        _1958 = (((cbLight._m0[_1966].x * 0.3183098733425140380859375) * _1984) * _1985) + _1939;
        _1960 = (((cbLight._m0[_1966].y * 0.3183098733425140380859375) * _1984) * _1985) + _1940;
        _1962 = (((cbLight._m0[_1966].z * 0.3183098733425140380859375) * _1984) * _1985) + _1941;
    }
    bool _1965 = _1945.y == 0u;
    float _2003;
    float _2005;
    float _2007;
    if (_1965)
    {
        _2003 = _1958;
        _2005 = _1960;
        _2007 = _1962;
    }
    else
    {
        uint _2165 = _1871 + 7u;
        float _2181 = (dot(vec3(cbLight._m0[_1871 + 3u].xyz), vec3(_620, _621, _622)) * 0.5) + 0.5;
        float _2182 = _2181 * _2181;
        float _4214 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2183 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _2184 = isnan(1.0) ? _1887 : (isnan(_1887) ? 1.0 : min(_1887, 1.0));
        _2003 = (((cbLight._m0[_2165].x * 0.3183098733425140380859375) * _2183) * _2184) + _1958;
        _2005 = (((cbLight._m0[_2165].y * 0.3183098733425140380859375) * _2183) * _2184) + _1960;
        _2007 = (((cbLight._m0[_2165].z * 0.3183098733425140380859375) * _2183) * _2184) + _1962;
    }
    uint _2010 = _1871 + 8u;
    float _2023 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1871].w)) * _623) * 0.949999988079071044921875);
    float _2024 = _2023 * _2023;
    float _2025 = cbLight._m0[_1871].x + _699;
    float _2026 = cbLight._m0[_1871].y + _700;
    float _2027 = cbLight._m0[_1871].z + _701;
    float _2031 = inversesqrt(dot(vec3(_2025, _2026, _2027), vec3(_2025, _2026, _2027)));
    float _2032 = _2031 * _2025;
    float _2033 = _2031 * _2026;
    float _2034 = _2031 * _2027;
    float _2035 = dot(vec3(_620, _621, _622), vec3(cbLight._m0[_1871].xyz));
    float _4230 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
    float _2038 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
    float _4241 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _2039 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    float _2040 = dot(vec3(_620, _621, _622), vec3(_2032, _2033, _2034));
    float _4252 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2043 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    float _2044 = dot(vec3(cbLight._m0[_1871].xyz), vec3(_2032, _2033, _2034));
    float _4263 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2048 = _2024 * _2024;
    float _2052 = ((_2043 * _2043) * (_2048 + (-1.0))) + 1.0;
    float _2063 = (exp2(log2(1.0 - (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2064 = 1.0 - _2024;
    float _2075 = (0.5 / (((_2039 * ((_2038 * _2064) + _2024)) + 9.9999999392252902907785028219223e-09) + (((_2039 * _2064) + _2024) * _2038))) * _2038;
    float _4274 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2077 = (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_2048 / ((_2052 * _2052) * 3.141590118408203125));
    uint _2091 = _1871 + 9u;
    float _2102 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1911].w)) * _623) * 0.949999988079071044921875);
    float _2103 = _2102 * _2102;
    float _2104 = cbLight._m0[_1911].x + _699;
    float _2105 = cbLight._m0[_1911].y + _700;
    float _2106 = cbLight._m0[_1911].z + _701;
    float _2110 = inversesqrt(dot(vec3(_2104, _2105, _2106), vec3(_2104, _2105, _2106)));
    float _2111 = _2110 * _2104;
    float _2112 = _2110 * _2105;
    float _2113 = _2110 * _2106;
    float _2114 = dot(vec3(_620, _621, _622), vec3(cbLight._m0[_1911].xyz));
    float _4285 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2117 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
    float _2118 = dot(vec3(_620, _621, _622), vec3(_2111, _2112, _2113));
    float _4296 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2121 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
    float _2122 = dot(vec3(cbLight._m0[_1911].xyz), vec3(_2111, _2112, _2113));
    float _4307 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2126 = _2103 * _2103;
    float _2130 = ((_2121 * _2121) * (_2126 + (-1.0))) + 1.0;
    float _2139 = (exp2(log2(1.0 - (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2140 = 1.0 - _2103;
    float _2150 = (0.5 / (((_2039 * ((_2117 * _2140) + _2103)) + 9.9999999392252902907785028219223e-09) + (((_2039 * _2140) + _2103) * _2117))) * _2117;
    float _4318 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2152 = (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_2126 / ((_2130 * _2130) * 3.141590118408203125));
    float _2162 = (((_2139 * cbLight._m0[_2091].x) * _2152) * _1894) + ((((cbLight._m0[_2010].x * _1863) * _2063) * _2077) * _1907);
    float _2163 = (((_2139 * cbLight._m0[_2091].y) * _2152) * _1894) + ((((cbLight._m0[_2010].y * _1864) * _2063) * _2077) * _1907);
    float _2164 = (((_2139 * cbLight._m0[_2091].z) * _2152) * _1894) + ((((cbLight._m0[_2010].z * _1865) * _2063) * _2077) * _1907);
    float _2226;
    float _2228;
    float _2230;
    if (_1947)
    {
        _2226 = _2162;
        _2228 = _2163;
        _2230 = _2164;
    }
    else
    {
        uint _2232 = _1871 + 2u;
        uint _2236 = _1871 + 10u;
        float _2250 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2232].w)) * _623) * 0.949999988079071044921875);
        float _2251 = _2250 * _2250;
        float _2252 = cbLight._m0[_2232].x + _699;
        float _2253 = cbLight._m0[_2232].y + _700;
        float _2254 = cbLight._m0[_2232].z + _701;
        float _2258 = inversesqrt(dot(vec3(_2252, _2253, _2254), vec3(_2252, _2253, _2254)));
        float _2259 = _2258 * _2252;
        float _2260 = _2258 * _2253;
        float _2261 = _2258 * _2254;
        float _2262 = dot(vec3(_620, _621, _622), vec3(cbLight._m0[_2232].xyz));
        float _4329 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        float _2265 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _2266 = dot(vec3(_620, _621, _622), vec3(_2259, _2260, _2261));
        float _4340 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2269 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _2270 = dot(vec3(cbLight._m0[_2232].xyz), vec3(_2259, _2260, _2261));
        float _4351 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2274 = _2251 * _2251;
        float _2278 = ((_2269 * _2269) * (_2274 + (-1.0))) + 1.0;
        float _2287 = (exp2(log2(1.0 - (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2288 = 1.0 - _2251;
        float _2298 = (0.5 / (((_2039 * ((_2265 * _2288) + _2251)) + 9.9999999392252902907785028219223e-09) + (((_2039 * _2288) + _2251) * _2265))) * _2265;
        float _4362 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2300 = (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_2274 / ((_2278 * _2278) * 3.141590118408203125));
        float _2301 = isnan(1.0) ? _1886 : (isnan(_1886) ? 1.0 : min(_1886, 1.0));
        _2226 = (((_2287 * cbLight._m0[_2236].x) * _2300) * _2301) + _2162;
        _2228 = (((_2287 * cbLight._m0[_2236].y) * _2300) * _2301) + _2163;
        _2230 = (((_2287 * cbLight._m0[_2236].z) * _2300) * _2301) + _2164;
    }
    float _2336;
    float _2338;
    float _2340;
    if (_1965)
    {
        _2336 = _2226;
        _2338 = _2228;
        _2340 = _2230;
    }
    else
    {
        uint _2347 = _1871 + 3u;
        uint _2351 = _1871 + 11u;
        float _2365 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2347].w)) * _623) * 0.949999988079071044921875);
        float _2366 = _2365 * _2365;
        float _2367 = cbLight._m0[_2347].x + _699;
        float _2368 = cbLight._m0[_2347].y + _700;
        float _2369 = cbLight._m0[_2347].z + _701;
        float _2373 = inversesqrt(dot(vec3(_2367, _2368, _2369), vec3(_2367, _2368, _2369)));
        float _2374 = _2373 * _2367;
        float _2375 = _2373 * _2368;
        float _2376 = _2373 * _2369;
        float _2377 = dot(vec3(_620, _621, _622), vec3(cbLight._m0[_2347].xyz));
        float _4378 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2380 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _2381 = dot(vec3(_620, _621, _622), vec3(_2374, _2375, _2376));
        float _4389 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
        float _2384 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _2385 = dot(vec3(cbLight._m0[_2347].xyz), vec3(_2374, _2375, _2376));
        float _4400 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        float _2389 = _2366 * _2366;
        float _2393 = ((_2384 * _2384) * (_2389 + (-1.0))) + 1.0;
        float _2402 = (exp2(log2(1.0 - (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2403 = 1.0 - _2366;
        float _2413 = (0.5 / (((_2039 * ((_2380 * _2403) + _2366)) + 9.9999999392252902907785028219223e-09) + (((_2039 * _2403) + _2366) * _2380))) * _2380;
        float _4411 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2415 = (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_2389 / ((_2393 * _2393) * 3.141590118408203125));
        float _2416 = isnan(1.0) ? _1887 : (isnan(_1887) ? 1.0 : min(_1887, 1.0));
        _2336 = (((_2402 * cbLight._m0[_2351].x) * _2415) * _2416) + _2226;
        _2338 = (((_2402 * cbLight._m0[_2351].y) * _2415) * _2416) + _2228;
        _2340 = (((_2402 * cbLight._m0[_2351].z) * _2415) * _2416) + _2230;
    }
    float _2551;
    float _2553;
    float _2555;
    float _2557;
    float _2559;
    float _2561;
    if (_1869.y == 0u)
    {
        float _2491 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2492 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2491;
        float _2493 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2491;
        float _2494 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2491;
        uvec4 _2506 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2507 = _2506.x;
        uint _2518 = uint((float(_2506.y) * floor(float(uint(cbSceneParam._m0[85u].y * _721) / _2507))) + floor(float(uint(cbSceneParam._m0[85u].x * _720) / _2507)));
        float _2528 = (log2(_2494 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2529 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        uint _2532 = uint(isnan(14.0) ? _2529 : (isnan(_2529) ? 14.0 : min(_2529, 14.0)));
        uvec4 _2537 = texelFetch(g_lightClusterGridBuffer, int(((_2532 << 2u) + (_2518 << 6u)) >> 2u));
        uint _2538 = _2537.x;
        uint _2539 = _2506.z;
        float _2668;
        float _2670;
        float _2672;
        float _2674;
        float _2676;
        float _2678;
        if (((((1u << ((_2539 >> 4u) & 15u)) + 4294967295u) & _2538) == 0u) || ((_2539 & 240u) == 0u))
        {
            _2668 = 0.0;
            _2670 = 0.0;
            _2672 = 0.0;
            _2674 = 0.0;
            _2676 = 0.0;
            _2678 = 0.0;
        }
        else
        {
            float _2669;
            float _2671;
            float _2673;
            float _2675;
            float _2677;
            float _2679;
            float _2830 = 0.0;
            float _2831 = 0.0;
            float _2832 = 0.0;
            float _2833 = 0.0;
            float _2834 = 0.0;
            float _2835 = 0.0;
            uint _2836 = 0u;
            uint _2845;
            bool _2846;
            for (;;)
            {
                _2845 = texelFetch(g_lightClassification, int((((_2532 << 5u) + (_2518 << 9u)) + (_2836 << 2u)) >> 2u)).x;
                _2846 = _2845 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2846)
                {
                    frontier_phi_66_pred = _2830;
                    frontier_phi_66_pred_1 = _2835;
                    frontier_phi_66_pred_2 = _2834;
                    frontier_phi_66_pred_3 = _2833;
                    frontier_phi_66_pred_4 = _2832;
                    frontier_phi_66_pred_5 = _2831;
                }
                else
                {
                    float _2975;
                    float _2976;
                    float _2977;
                    float _2978;
                    float _2979;
                    float _2980;
                    uint _2981;
                    _2975 = _2830;
                    _2976 = _2831;
                    _2977 = _2832;
                    _2978 = _2833;
                    _2979 = _2834;
                    _2980 = _2835;
                    _2981 = _2845;
                    float _2902;
                    float _2903;
                    float _2904;
                    float _2905;
                    float _2906;
                    float _2907;
                    for (;;)
                    {
                        uint _2985 = uint(findLSB(_2981)) + (_2836 << 5u);
                        uint _2982 = (_2981 + 4294967295u) & _2981;
                        uint _2987 = _2985 * 48u;
                        vec4 _3001 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2987)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 3u)).x));
                        uint _3007 = (_2985 * 48u) + 4u;
                        vec4 _3020 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3007)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 3u)).x));
                        uint _3026 = (_2985 * 48u) + 8u;
                        vec3 _3037 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3026)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 2u)).x));
                        float _3041 = _3001.x - _2492;
                        float _3042 = _3001.y - _2493;
                        float _3043 = _3001.z - _2494;
                        float _3044 = dot(vec3(_3041, _3042, _3043), vec3(_3041, _3042, _3043));
                        float _3047 = inversesqrt(_3044);
                        float _3048 = _3047 * _3041;
                        float _3049 = _3047 * _3042;
                        float _3050 = _3047 * _3043;
                        float _3051 = dot(vec3(_740, _743, _746), vec3(_3048, _3049, _3050));
                        float _3056 = 1.0 - (_3044 * _3001.w);
                        float _4437 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                        float _3057 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                        float _3058 = sqrt(_3044) * _3020.w;
                        float _3061 = 1.39999997615814208984375 / (_3058 + 1.39999997615814208984375);
                        float _3062 = _3061 * _3061;
                        float _3065 = ((1.0 - _3062) * _3051) + _3062;
                        float _3068 = _3058 * _3058;
                        float _3072 = ((isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0))) * _3057) / ((_3068 * 0.699999988079071044921875) + 1.0);
                        float _3076 = (-0.0) - _2492;
                        float _3077 = (-0.0) - _2493;
                        float _3078 = (-0.0) - _2494;
                        float _3082 = inversesqrt(dot(vec3(_3076, _3077, _3078), vec3(_3076, _3077, _3078)));
                        float _3083 = _3082 * _3076;
                        float _3084 = _3082 * _3077;
                        float _3085 = _3082 * _3078;
                        float _3093 = exp2(log2(1.0 / ((_3068 * 3.5) + 5.0)) * 0.25);
                        float _3094 = 1.0 - _800;
                        float _3101 = sqrt(1.0 - ((1.0 - (_3094 * _3094)) * (1.0 - (_3093 * _3093))));
                        float _3102 = _3101 * _3101;
                        float _3103 = _3102 * _3102;
                        float _3104 = _3083 + _3048;
                        float _3105 = _3084 + _3049;
                        float _3106 = _3085 + _3050;
                        float _3110 = inversesqrt(dot(vec3(_3104, _3105, _3106), vec3(_3104, _3105, _3106)));
                        float _3114 = dot(vec3(_740, _743, _746), vec3(_3083, _3084, _3085));
                        float _4453 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                        float _3117 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
                        float _3118 = dot(vec3(_740, _743, _746), vec3(_3110 * _3104, _3110 * _3105, _3110 * _3106));
                        float _4464 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                        float _3121 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
                        float _3125 = ((_3121 * _3121) * (_3103 + (-1.0))) + 1.0;
                        float _3126 = _3061 * _3102;
                        float _3127 = _3126 * _3126;
                        float _3130 = ((1.0 - _3127) * _3051) + _3127;
                        float _4475 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                        float _3131 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
                        float _3132 = 1.0 - _3102;
                        float _3142 = (0.5 / (((_3131 * ((_3117 * _3132) + _3102)) + 9.9999999392252902907785028219223e-09) + (((_3131 * _3132) + _3102) * _3117))) * _3131;
                        float _4486 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
                        float _3153 = (((_3103 * 3.1415927410125732421875) * (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0)))) / ((_3125 * _3125) * ((_3068 * 2.1991131305694580078125) + 3.141590118408203125))) * _3057;
                        _2905 = (_3072 * _3020.x) + _2978;
                        _2906 = (_3072 * _3020.y) + _2979;
                        _2907 = (_3072 * _3020.z) + _2980;
                        _2902 = (_3153 * _3037.x) + _2975;
                        _2903 = (_3153 * _3037.y) + _2976;
                        _2904 = (_3153 * _3037.z) + _2977;
                        if (_2982 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2975 = _2902;
                            _2976 = _2903;
                            _2977 = _2904;
                            _2978 = _2905;
                            _2979 = _2906;
                            _2980 = _2907;
                            _2981 = _2982;
                        }
                    }
                    frontier_phi_66_pred = _2902;
                    frontier_phi_66_pred_1 = _2907;
                    frontier_phi_66_pred_2 = _2906;
                    frontier_phi_66_pred_3 = _2905;
                    frontier_phi_66_pred_4 = _2904;
                    frontier_phi_66_pred_5 = _2903;
                }
                _2669 = frontier_phi_66_pred;
                _2679 = frontier_phi_66_pred_1;
                _2677 = frontier_phi_66_pred_2;
                _2675 = frontier_phi_66_pred_3;
                _2673 = frontier_phi_66_pred_4;
                _2671 = frontier_phi_66_pred_5;
                uint _2837 = _2836 + 1u;
                if (_2837 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2830 = _2669;
                    _2831 = _2671;
                    _2832 = _2673;
                    _2833 = _2675;
                    _2834 = _2677;
                    _2835 = _2679;
                    _2836 = _2837;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2668 = _2669;
            _2670 = _2671;
            _2672 = _2673;
            _2674 = _2675;
            _2676 = _2677;
            _2678 = _2679;
        }
        uvec4 _2682 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2683 = _2682.z;
        uint _2685 = (_2683 >> 8u) & 15u;
        float _2798;
        float _2800;
        float _2802;
        float _2804;
        float _2806;
        float _2808;
        if (((4294967295u << _2685) & _2538) == 0u)
        {
            _2798 = _2668;
            _2800 = _2670;
            _2802 = _2672;
            _2804 = _2674;
            _2806 = _2676;
            _2808 = _2678;
        }
        else
        {
            float _2823 = inversesqrt(dot(vec3(_2492, _2493, _2494), vec3(_2492, _2493, _2494)));
            float _2824 = _2823 * _2492;
            float _2825 = _2823 * _2493;
            float _2826 = _2823 * _2494;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2685 < ((_2683 >> 12u) & 15u))
            {
                float _2799;
                float _2801;
                float _2803;
                float _2805;
                float _2807;
                float _2809;
                float _2958 = _2668;
                float _2959 = _2670;
                float _2960 = _2672;
                float _2961 = _2674;
                float _2962 = _2676;
                float _2963 = _2678;
                uint _2964 = _2685;
                uint _2973;
                bool _2974;
                for (;;)
                {
                    _2973 = texelFetch(g_lightClassification, int((((_2532 << 5u) + (_2518 << 9u)) + (_2964 << 2u)) >> 2u)).x;
                    _2974 = _2973 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2974)
                    {
                        frontier_phi_77_pred = _2963;
                        frontier_phi_77_pred_1 = _2962;
                        frontier_phi_77_pred_2 = _2961;
                        frontier_phi_77_pred_3 = _2960;
                        frontier_phi_77_pred_4 = _2959;
                        frontier_phi_77_pred_5 = _2958;
                    }
                    else
                    {
                        float _3167;
                        float _3168;
                        float _3169;
                        float _3170;
                        float _3171;
                        float _3172;
                        float _3462;
                        float _3463;
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3467;
                        float _3180 = _2958;
                        float _3181 = _2959;
                        float _3182 = _2960;
                        float _3183 = _2961;
                        float _3184 = _2962;
                        float _3185 = _2963;
                        uint _3186 = _2973;
                        uint _3187;
                        vec4 _3212;
                        float _3213;
                        vec4 _3228;
                        vec3 _3240;
                        vec4 _3255;
                        vec4 _3271;
                        float _3318;
                        bool _3319;
                        for (;;)
                        {
                            uint _3197 = ((_2964 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3186));
                            _3187 = (_3186 + 4294967295u) & _3186;
                            uint _3199 = _3197 * 40u;
                            _3212 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3199)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 3u)).x));
                            _3213 = _3212.w;
                            uint _3215 = (_3197 * 40u) + 4u;
                            _3228 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3215)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 3u)).x));
                            uint _3230 = (_3197 * 40u) + 8u;
                            _3240 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3230)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 2u)).x));
                            uint _3242 = (_3197 * 40u) + 16u;
                            _3255 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 3u)).x));
                            uint _3258 = (_3197 * 40u) + 20u;
                            _3271 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3258)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 3u)).x));
                            uint _3274 = (_3197 * 40u) + 24u;
                            vec4 _3287 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3274)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 3u)).x));
                            uint _3293 = (_3197 * 40u) + 28u;
                            vec4 _3306 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3293)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 3u)).x));
                            _3318 = fma(_2494, _3306.z, fma(_2493, _3306.y, _3306.x * _2492)) + _3306.w;
                            _3319 = !((fma(_2494, _3287.z, fma(_2493, _3287.y, _3287.x * _2492)) + _3287.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3319)
                            {
                                float _3346 = _3212.x - _2492;
                                float _3347 = _3212.y - _2493;
                                float _3348 = _3212.z - _2494;
                                float _3349 = dot(vec3(_3346, _3347, _3348), vec3(_3346, _3347, _3348));
                                float _3352 = inversesqrt(_3349);
                                float _3353 = _3352 * _3346;
                                float _3354 = _3352 * _3347;
                                float _3355 = _3352 * _3348;
                                float _3359 = 1.0 - (_3349 / (_3213 * _3213));
                                float _4497 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                                float _3360 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                                float _3364 = sqrt(_3349) * _3228.w;
                                float _3366 = 1.39999997615814208984375 / (_3364 + 1.39999997615814208984375);
                                float _3367 = _3366 * _3366;
                                float _3370 = ((1.0 - _3367) * dot(vec3(_3353, _3354, _3355), vec3(_740, _743, _746))) + _3367;
                                float _3373 = _3364 * _3364;
                                float _3377 = (fma(_2494, _3255.z, fma(_2493, _3255.y, _3255.x * _2492)) + _3255.w) / _3318;
                                float _3378 = (fma(_2494, _3271.z, fma(_2493, _3271.y, _3271.x * _2492)) + _3271.w) / _3318;
                                float _3382 = 1.0 - dot(vec2(_3377, _3378), vec2(_3377, _3378));
                                float _4513 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                                float _3383 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                                float _3384 = _3383 * (((isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0))) * _3360) / ((_3373 * 0.699999988079071044921875) + 1.0));
                                float _3396 = exp2(log2(1.0 / ((_3373 * 3.5) + 5.0)) * 0.25);
                                float _3397 = 1.0 - _800;
                                float _3404 = sqrt(1.0 - ((1.0 - (_3397 * _3397)) * (1.0 - (_3396 * _3396))));
                                float _3405 = _3404 * _3404;
                                float _3406 = _3405 * _3405;
                                float _3407 = _3353 - _2824;
                                float _3408 = _3354 - _2825;
                                float _3409 = _3355 - _2826;
                                float _3413 = inversesqrt(dot(vec3(_3407, _3408, _3409), vec3(_3407, _3408, _3409)));
                                float _3417 = dot(vec3(_740, _743, _746), vec3((-0.0) - _2824, (-0.0) - _2825, (-0.0) - _2826));
                                float _4524 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                                float _3420 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                                float _3421 = dot(vec3(_740, _743, _746), vec3(_3413 * _3407, _3413 * _3408, _3413 * _3409));
                                float _4535 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                                float _3424 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                                float _3428 = ((_3424 * _3424) * (_3406 + (-1.0))) + 1.0;
                                float _3429 = _3366 * _3405;
                                float _3430 = _3429 * _3429;
                                float _3436 = ((1.0 - _3430) * dot(vec3(_740, _743, _746), vec3(_3353, _3354, _3355))) + _3430;
                                float _4546 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                                float _3437 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                                float _3438 = 1.0 - _3405;
                                float _3448 = (0.5 / (((_3437 * ((_3420 * _3438) + _3405)) + 9.9999999392252902907785028219223e-09) + (((_3437 * _3438) + _3405) * _3420))) * _3437;
                                float _4557 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                                float _3458 = (_3383 * _3360) * (((_3406 * 3.1415927410125732421875) * (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0)))) / ((_3428 * _3428) * ((_3373 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3384 * _3228.y;
                                frontier_phi_83_pred_1 = _3384 * _3228.x;
                                frontier_phi_83_pred_2 = _3458 * _3240.z;
                                frontier_phi_83_pred_3 = _3458 * _3240.y;
                                frontier_phi_83_pred_4 = _3458 * _3240.x;
                                frontier_phi_83_pred_5 = _3384 * _3228.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3466 = frontier_phi_83_pred;
                            _3465 = frontier_phi_83_pred_1;
                            _3464 = frontier_phi_83_pred_2;
                            _3463 = frontier_phi_83_pred_3;
                            _3462 = frontier_phi_83_pred_4;
                            _3467 = frontier_phi_83_pred_5;
                            _3170 = _3465 + _3183;
                            _3171 = _3466 + _3184;
                            _3172 = _3467 + _3185;
                            _3167 = _3462 + _3180;
                            _3168 = _3463 + _3181;
                            _3169 = _3464 + _3182;
                            if (_3187 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3180 = _3167;
                                _3181 = _3168;
                                _3182 = _3169;
                                _3183 = _3170;
                                _3184 = _3171;
                                _3185 = _3172;
                                _3186 = _3187;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3172;
                        frontier_phi_77_pred_1 = _3171;
                        frontier_phi_77_pred_2 = _3170;
                        frontier_phi_77_pred_3 = _3169;
                        frontier_phi_77_pred_4 = _3168;
                        frontier_phi_77_pred_5 = _3167;
                    }
                    _2809 = frontier_phi_77_pred;
                    _2807 = frontier_phi_77_pred_1;
                    _2805 = frontier_phi_77_pred_2;
                    _2803 = frontier_phi_77_pred_3;
                    _2801 = frontier_phi_77_pred_4;
                    _2799 = frontier_phi_77_pred_5;
                    uint _2965 = _2964 + 1u;
                    if (_2965 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2958 = _2799;
                        _2959 = _2801;
                        _2960 = _2803;
                        _2961 = _2805;
                        _2962 = _2807;
                        _2963 = _2809;
                        _2964 = _2965;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2803;
                frontier_phi_58_59_ladder_1 = _2809;
                frontier_phi_58_59_ladder_2 = _2807;
                frontier_phi_58_59_ladder_3 = _2805;
                frontier_phi_58_59_ladder_4 = _2801;
                frontier_phi_58_59_ladder_5 = _2799;
            }
            else
            {
                frontier_phi_58_59_ladder = _2672;
                frontier_phi_58_59_ladder_1 = _2678;
                frontier_phi_58_59_ladder_2 = _2676;
                frontier_phi_58_59_ladder_3 = _2674;
                frontier_phi_58_59_ladder_4 = _2670;
                frontier_phi_58_59_ladder_5 = _2668;
            }
            _2798 = frontier_phi_58_59_ladder_5;
            _2800 = frontier_phi_58_59_ladder_4;
            _2802 = frontier_phi_58_59_ladder;
            _2804 = frontier_phi_58_59_ladder_3;
            _2806 = frontier_phi_58_59_ladder_2;
            _2808 = frontier_phi_58_59_ladder_1;
        }
        float _2813 = isnan(1.0) ? _784 : (isnan(_784) ? 1.0 : min(_784, 1.0));
        _2551 = (_2813 * _2804) + _2003;
        _2553 = (_2813 * _2806) + _2005;
        _2555 = (_2813 * _2808) + _2007;
        _2557 = ((_2798 * 0.039999999105930328369140625) * _2813) + _2336;
        _2559 = ((_2800 * 0.039999999105930328369140625) * _2813) + _2338;
        _2561 = ((_2802 * 0.039999999105930328369140625) * _2813) + _2340;
    }
    else
    {
        _2551 = _2003;
        _2553 = _2005;
        _2555 = _2007;
        _2557 = _2336;
        _2559 = _2338;
        _2561 = _2340;
    }
    uint _2567 = _760 + uint(cbMatDynParam._m0[0u].w);
    float _2573 = cbInstanceData._m0[_2567].x * (_530 - (_546 * _530));
    float _2574 = cbInstanceData._m0[_2567].y * (_531 - (_546 * _531));
    float _2575 = cbInstanceData._m0[_2567].z * (_532 - (_546 * _532));
    float _4573 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _4584 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _4595 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _2592 = (((isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (_2551 + ((isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))) * _784))) + ((_2557 + ((isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0))) * _1622)) * cbPerFrame._m0[3u].x)) + _2573;
    float _2594 = (_2574 + ((_2559 + ((isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0))) * _1622)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (_2553 + ((isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))) * _784)));
    float _2596 = (_2575 + ((_2561 + ((isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0))) * _1622)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_2555 + ((isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))) * _784)));
    float _2597 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
    float _2598 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
    float _2599 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
    float _2605 = cbMtdParam._m0[2u].x * _2573;
    float _2606 = cbMtdParam._m0[2u].y * _2574;
    float _2607 = cbMtdParam._m0[2u].z * _2575;
    float _4621 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2609 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
    uint _2610 = _759 + 6u;
    float _2618 = _720 / cbSceneParam._m0[86u].x;
    float _2619 = _721 / cbSceneParam._m0[86u].y;
    vec4 _2633 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2618, _2619, (log2((isnan(cbSceneParam._m0[77u].w) ? _642 : (isnan(_642) ? cbSceneParam._m0[77u].w : min(_642, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2635 = _2633.x;
    float _2636 = _2633.y;
    float _2637 = _2633.z;
    float _2638 = _2633.w;
    float _2731;
    float _2733;
    float _2735;
    float _2737;
    if (_642 > cbSceneParam._m0[78u].w)
    {
        float _2693 = isnan(_642) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _642 : min(cbSceneParam._m0[80u].w, _642));
        float _2694 = _2693 / _642;
        float _2705 = _2694 * _692;
        float _2706 = _693 * _2694;
        float _2707 = (-0.0) - _2706;
        float _2709 = _2694 * _694;
        float _2711 = (cbSceneParam._m0[77u].w * _2707) / _2693;
        float _2712 = _2711 + cbSceneParam._m0[79u].w;
        float _2713 = cbSceneParam._m0[79u].w - _2706;
        float _2719 = sqrt(((_2705 * _2705) + (_2706 * _2706)) + (_2709 * _2709));
        float _2722 = (1.0 - (cbSceneParam._m0[77u].w / _2693)) * _2719;
        float _2727 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2729 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2915;
        if (abs((_2707 - _2711) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2915 = ((((_2712 > 0.0) ? exp2(_2727 * _2712) : (2.0 - exp2(_2729 * _2712))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2722;
        }
        else
        {
            float _2859 = 1.0 / cbSceneParam._m0[80u].x;
            float _2860 = isnan(_2713) ? _2712 : (isnan(_2712) ? _2713 : max(_2712, _2713));
            float _2861 = isnan(_2713) ? _2712 : (isnan(_2712) ? _2713 : min(_2712, _2713));
            float _2870 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : min(_2860, 0.0));
            float _2871 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : min(_2861, 0.0));
            _2915 = ((abs(_2719 / _2707) * cbSceneParam._m0[80u].y) * ((((_2870 - _2871) * 2.0) - ((exp2(_2727 * (isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0)))) - exp2(_2727 * (isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0))))) * _2859)) - ((exp2(_2729 * _2870) - exp2(_2729 * _2871)) * _2859))) + (_2722 * cbSceneParam._m0[80u].z);
        }
        vec4 _2917 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2618, _2619, 1.0), 0.0);
        float _2926 = exp2((_2915 * (-1.44269502162933349609375)) * (1.0 - _2917.w));
        float _2927 = log2(_2926);
        float _2943 = log2(_2638);
        _2731 = (exp2(_2943 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2927 * cbSceneParam._m0[78u].x)) * _2917.x) / cbSceneParam._m0[78u].x)) + _2635;
        _2733 = (exp2(_2943 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2927 * cbSceneParam._m0[78u].y)) * _2917.y) / cbSceneParam._m0[78u].y)) + _2636;
        _2735 = (exp2(_2943 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2927 * cbSceneParam._m0[78u].z)) * _2917.z) / cbSceneParam._m0[78u].z)) + _2637;
        _2737 = _2926 * _2638;
    }
    else
    {
        _2731 = _2635;
        _2733 = _2636;
        _2735 = _2637;
        _2737 = _2638;
    }
    bool _2953;
    vec4 _2747;
    vec4 _2769;
    float _2771;
    float _2775;
    float _2776;
    float _2777;
    float _2780;
    float _2783;
    float _2786;
    float _2787;
    bool _2797;
    for (;;)
    {
        _2747 = cbMatDynParam._m0[0u];
        float _2749 = roundEven(_2747.y);
        bool _2750 = _2749 == 3.0;
        float _2751 = log2(_2737);
        float _2755 = exp2(_2751 * cbSceneParam._m0[78u].x);
        float _2756 = exp2(_2751 * cbSceneParam._m0[78u].y);
        float _2757 = exp2(_2751 * cbSceneParam._m0[78u].z);
        float _2758 = _2755 * _2597;
        float _2759 = _2756 * _2598;
        float _2760 = _2757 * _2599;
        float _2767 = _708 + (-0.5);
        _2769 = cbMtdParam._m0[1u];
        _2771 = _2769.y * _2767;
        float _2774 = (_2749 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2775 = _2774 * (_2750 ? _2758 : (_2758 + (cbSceneParam._m0[72u].w * _2731)));
        _2776 = _2774 * (_2750 ? _2759 : (_2759 + (cbSceneParam._m0[72u].w * _2733)));
        _2777 = _2774 * (_2750 ? _2760 : (_2760 + (cbSceneParam._m0[72u].w * _2735)));
        _2780 = ((_2605 * _2609) * _2755) * _2774;
        _2783 = ((_2606 * _2609) * _2756) * _2774;
        _2786 = ((_2607 * _2609) * _2757) * _2774;
        _2787 = _2767 * 0.999000012874603271484375;
        _2797 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2797)
        {
            if ((cbInstanceData._m0[_759 + 7u].x + _2787) < 0.5)
            {
                _2953 = true;
                break;
            }
        }
        uint _2894 = _760 + uint(_2747.w);
        if ((cbInstanceData._m0[_2894].w < 1.0) && ((cbInstanceData._m0[_2894].w + _2787) < 0.5))
        {
            _2953 = true;
            break;
        }
        if ((_2771 + 1.0) < _2769.x)
        {
            _2953 = true;
            break;
        }
        _2953 = false;
        break;
    }
    float _3158;
    if (_2953)
    {
        discard_state = true;
        _3158 = 0.0;
    }
    else
    {
        _3158 = cbInstanceData._m0[_2610].w;
    }
    SV_Target.x = _2775;
    SV_Target.y = _2776;
    SV_Target.z = _2777;
    SV_Target.w = _3158;
    SV_Target_1.x = _2780;
    SV_Target_1.y = _2783;
    SV_Target_1.z = _2786;
    SV_Target_1.w = cbInstanceData._m0[_2610].w;
    discard_exit();
}


