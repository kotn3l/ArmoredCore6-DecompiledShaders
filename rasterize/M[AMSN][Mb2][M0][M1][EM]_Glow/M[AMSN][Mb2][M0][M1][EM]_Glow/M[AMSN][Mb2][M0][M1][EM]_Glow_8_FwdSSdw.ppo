#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1007;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _239 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _245 = _239.x * cbMtdParam._m0[9u].x;
    float _246 = _239.y * cbMtdParam._m0[9u].y;
    float _247 = _239.z * cbMtdParam._m0[9u].z;
    vec4 _267 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _288 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_267.x + 0.00999999977648258209228515625));
    float _290 = _288 * (cbMtdParam._m0[15u].x + 1.0);
    float _3406 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _291 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
    float _299 = ((((cbMtdParam._m0[12u].x - _245) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _291) + _245;
    float _300 = ((((cbMtdParam._m0[12u].y - _246) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _291) + _246;
    float _301 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _247)) * _291) + _247;
    vec4 _314 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _316 = _314.x;
    vec4 _328 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _332 = _328.z;
    float _336 = (_328.x * 2.0) + (-1.0);
    float _338 = (_328.y * 2.0) + (-1.0);
    float _339 = dot(vec2(_336, _338), vec2(_336, _338));
    float _3417 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _344 = sqrt(1.0 - (isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0))));
    float _347 = _288 * (cbMtdParam._m0[14u].w + 1.0);
    float _3428 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _351 = ((cbMtdParam._m0[14u].y - _332) * (isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0)))) + _332;
    vec4 _379 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _394 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _423 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _429 = (_423.x * 2.0) + (-1.0);
    float _430 = (_423.y * 2.0) + (-1.0);
    float _431 = dot(vec2(_429, _430), vec2(_429, _430));
    float _3439 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _447 = (_291 * (((cbMtdParam._m0[13u].z * _336) - _336) + _429)) + _336;
    float _448 = (_291 * (((cbMtdParam._m0[13u].z * _338) - _338) + _430)) + _338;
    float _449 = (_291 * (sqrt(1.0 - (isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0)))) - _344)) + _344;
    float _452 = fma(_449, _210 * NORMAL.x, fma(_448, _217 * TANGENT.x, (_203 * _195) * _447));
    float _455 = fma(_449, _210 * NORMAL.y, fma(_448, _217 * TANGENT.y, (_203 * _196) * _447));
    float _458 = fma(_449, _210 * NORMAL.z, fma(_448, _217 * TANGENT.z, (_203 * _197) * _447));
    float _462 = inversesqrt(dot(vec3(_452, _455, _458), vec3(_452, _455, _458)));
    float _463 = _462 * _452;
    float _464 = _462 * _455;
    float _465 = _462 * _458;
    float _3450 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _466 = isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0));
    float _3461 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _3472 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _3483 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3494 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _470 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
    float _486 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _527 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _537 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _527);
    float _538 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _527);
    float _539 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _527);
    float _543 = inversesqrt(dot(vec3(_537, _538, _539), vec3(_537, _538, _539)));
    float _544 = _537 * _543;
    float _545 = _538 * _543;
    float _546 = _539 * _543;
    float _552 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _553 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _573 = fma(_465, cbSceneParam._m0[5u].z, fma(_464, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _463));
    float _576 = fma(_465, cbSceneParam._m0[6u].z, fma(_464, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _463));
    float _579 = fma(_465, cbSceneParam._m0[7u].z, fma(_464, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _463));
    uint _592 = uint(roundEven(NORMAL.w)) * 13u;
    uint _593 = _592 + 9u;
    uint _594 = _593 + uint(cbMatDynParam._m0[0u].w);
    float _600 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0)))) * cbInstanceData._m0[_594].x;
    float _601 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0)))) * cbInstanceData._m0[_594].y;
    float _602 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0)))) * cbInstanceData._m0[_594].z;
    float _3505 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _603 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
    float _3516 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _604 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
    float _3527 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _605 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
    float _606 = 1.0 - _470;
    float _607 = _603 * _606;
    float _608 = _604 * _606;
    float _609 = _605 * _606;
    float _614 = (_603 + (-0.039999999105930328369140625)) * _470;
    float _615 = (_604 + (-0.039999999105930328369140625)) * _470;
    float _616 = (_605 + (-0.039999999105930328369140625)) * _470;
    float _617 = _614 + 0.039999999105930328369140625;
    float _619 = _615 + 0.039999999105930328369140625;
    float _620 = _616 + 0.039999999105930328369140625;
    vec4 _629 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _552, cbSceneParam._m0[86u].y * _553));
    float _632 = _629.x * TEXCOORD_3.w;
    float _633 = dot(vec3(_463, _464, _465), vec3(_544, _545, _546));
    float _636 = _633 * 2.0;
    float _640 = (_636 * _463) - _544;
    float _641 = (_636 * _464) - _545;
    float _642 = (_636 * _465) - _546;
    float _646 = abs(dot(vec3(_544, _545, _546), vec3(_463, _464, _465)));
    float _3538 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _648 = sqrt(_466);
    float _661 = exp2((_648 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_648 * 3.0));
    float _667 = (1.0 - _661) * ((_648 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _668 = _661 * _648;
    float _696 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _700 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _704 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1006;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _731 = fma(_704, cbModelParam._m0[26u].z, fma(_700, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _696));
        float _735 = fma(_704, cbModelParam._m0[27u].z, fma(_700, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _696));
        float _739 = fma(_704, cbModelParam._m0[28u].z, fma(_700, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _696));
        float _764 = _696 + _463;
        float _765 = _700 + _464;
        float _766 = _704 + _465;
        float _776 = fma(_766, cbModelParam._m0[26u].z, fma(_765, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _764)) - _731;
        float _777 = fma(_766, cbModelParam._m0[27u].z, fma(_765, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _764)) - _735;
        float _778 = fma(_766, cbModelParam._m0[28u].z, fma(_765, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _764)) - _739;
        float _782 = inversesqrt(dot(vec3(_776, _777, _778), vec3(_776, _777, _778)));
        float _795 = ((_782 * _776) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_731 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _796 = ((_782 * _777) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_735 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _797 = ((_782 * _778) / cbModelParam._m0[34u].z) + ((((((_739 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _800 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_795, _796, _797), 0.0);
        vec4 _807 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_795, _796, _797), 0.0);
        vec4 _814 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_795, _796, _797), 0.0);
        vec4 _821 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_795, _796, _797), 0.0);
        float _834 = exp2((_800.w + (-0.5)) * 20.0) * 2.0;
        float _835 = _834 * (_800.x + (-0.5));
        float _836 = _834 * (_800.y + (-0.5));
        float _837 = _834 * (_800.z + (-0.5));
        float _844 = exp2((_807.w + (-0.5)) * 20.0) * 2.0;
        float _845 = _844 * (_807.x + (-0.5));
        float _846 = _844 * (_807.y + (-0.5));
        float _847 = _844 * (_807.z + (-0.5));
        float _854 = exp2((_814.w + (-0.5)) * 20.0) * 2.0;
        float _855 = _854 * (_814.x + (-0.5));
        float _856 = _854 * (_814.y + (-0.5));
        float _857 = _854 * (_814.z + (-0.5));
        float _864 = exp2((_821.w + (-0.5)) * 20.0) * 2.0;
        float _865 = _864 * (_821.x + (-0.5));
        float _866 = _864 * (_821.y + (-0.5));
        float _867 = _864 * (_821.z + (-0.5));
        float _868 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _869 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _870 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _871 = _835 * 0.5;
        float _872 = _845 * 0.5;
        float _873 = _855 * 0.5;
        float _874 = dot(vec3(_871, _872, _873), vec3(_871, _872, _873));
        float _879 = (_874 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_874);
        float _888 = (dot(vec3(_463, _464, _465), vec3(_879 * _871, _879 * _872, _879 * _873)) + 1.0) * 0.5;
        float _3564 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _898 = sqrt(((_872 * _872) + (_871 * _871)) + (_873 * _873)) / (_868 + 9.9999997473787516355514526367188e-06);
        float _3575 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _899 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
        float _900 = _899 * 2.0;
        float _904 = (1.0 - _899) / (_899 + 1.0);
        float _3586 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _905 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
        float _914 = ((((1.0 - _905) * (_900 + 2.0)) * exp2(log2(isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0))) * (_900 + 1.0))) + _905) * _868;
        float _915 = _836 * 0.5;
        float _916 = _846 * 0.5;
        float _917 = _856 * 0.5;
        float _918 = dot(vec3(_915, _916, _917), vec3(_915, _916, _917));
        float _923 = (_918 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_918);
        float _931 = (dot(vec3(_463, _464, _465), vec3(_923 * _915, _923 * _916, _923 * _917)) + 1.0) * 0.5;
        float _3597 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _940 = sqrt(((_916 * _916) + (_915 * _915)) + (_917 * _917)) / (_869 + 9.9999997473787516355514526367188e-06);
        float _3608 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _942 = _941 * 2.0;
        float _946 = (1.0 - _941) / (_941 + 1.0);
        float _3619 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _947 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _956 = ((((1.0 - _947) * (_942 + 2.0)) * exp2(log2(isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0))) * (_942 + 1.0))) + _947) * _869;
        float _957 = _837 * 0.5;
        float _958 = _847 * 0.5;
        float _959 = _857 * 0.5;
        float _960 = dot(vec3(_957, _958, _959), vec3(_957, _958, _959));
        float _965 = (_960 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_960);
        float _973 = (dot(vec3(_463, _464, _465), vec3(_965 * _957, _965 * _958, _965 * _959)) + 1.0) * 0.5;
        float _3630 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _982 = sqrt(((_958 * _958) + (_957 * _957)) + (_959 * _959)) / (_870 + 9.9999997473787516355514526367188e-06);
        float _3641 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
        float _984 = _983 * 2.0;
        float _988 = (1.0 - _983) / (_983 + 1.0);
        float _3652 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _998 = ((((1.0 - _989) * (_984 + 2.0)) * exp2(log2(isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))) * (_984 + 1.0))) + _989) * _870;
        _1006 = _837;
        _1008 = _836;
        _1009 = _835;
        _1010 = _847;
        _1011 = _846;
        _1012 = _845;
        _1013 = _857;
        _1014 = _856;
        _1015 = _855;
        _1016 = _870;
        _1017 = _869;
        _1018 = _868;
        _1019 = cbModelParam._m0[36u].z * (isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0)));
        _1020 = cbModelParam._m0[36u].z * (isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0)));
        _1021 = cbModelParam._m0[36u].z * (isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0)));
    }
    else
    {
        _1006 = _1007;
        _1008 = _1007;
        _1009 = _1007;
        _1010 = _1007;
        _1011 = _1007;
        _1012 = _1007;
        _1013 = _1007;
        _1014 = _1007;
        _1015 = _1007;
        _1016 = _1007;
        _1017 = _1007;
        _1018 = _1007;
        _1019 = 0.0;
        _1020 = 0.0;
        _1021 = 0.0;
    }
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1047 = fma(_704, cbModelParam._m0[30u].z, fma(_700, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _696));
        float _1051 = fma(_704, cbModelParam._m0[31u].z, fma(_700, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _696));
        float _1055 = fma(_704, cbModelParam._m0[32u].z, fma(_700, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _696));
        float _1078 = _696 + _463;
        float _1079 = _700 + _464;
        float _1080 = _704 + _465;
        float _1090 = fma(_1080, cbModelParam._m0[30u].z, fma(_1079, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1078)) - _1047;
        float _1091 = fma(_1080, cbModelParam._m0[31u].z, fma(_1079, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1078)) - _1051;
        float _1092 = fma(_1080, cbModelParam._m0[32u].z, fma(_1079, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1078)) - _1055;
        float _1096 = inversesqrt(dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092)));
        float _1109 = ((_1096 * _1090) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1047 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1110 = ((_1096 * _1091) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1051 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1111 = ((_1096 * _1092) / cbModelParam._m0[35u].z) + ((((((_1055 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        float _1146 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1113.x + (-0.5));
        float _1148 = _1146 * (_1113.y + (-0.5));
        float _1149 = _1146 * (_1113.z + (-0.5));
        float _1156 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1120.x + (-0.5));
        float _1158 = _1156 * (_1120.y + (-0.5));
        float _1159 = _1156 * (_1120.z + (-0.5));
        float _1166 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1127.x + (-0.5));
        float _1168 = _1166 * (_1127.y + (-0.5));
        float _1169 = _1166 * (_1127.z + (-0.5));
        float _1176 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1134.x + (-0.5));
        float _1178 = _1176 * (_1134.y + (-0.5));
        float _1179 = _1176 * (_1134.z + (-0.5));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = _1147 * 0.5;
        float _1184 = _1157 * 0.5;
        float _1185 = _1167 * 0.5;
        float _1186 = dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185));
        float _1191 = (_1186 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1186);
        float _1199 = (dot(vec3(_463, _464, _465), vec3(_1191 * _1183, _1191 * _1184, _1191 * _1185)) + 1.0) * 0.5;
        float _3693 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1208 = sqrt(((_1184 * _1184) + (_1183 * _1183)) + (_1185 * _1185)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _3704 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
        float _1210 = _1209 * 2.0;
        float _1214 = (1.0 - _1209) / (_1209 + 1.0);
        float _3715 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _1224 = ((((1.0 - _1215) * (_1210 + 2.0)) * exp2(log2(isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0))) * (_1210 + 1.0))) + _1215) * _1180;
        float _1225 = _1148 * 0.5;
        float _1226 = _1158 * 0.5;
        float _1227 = _1168 * 0.5;
        float _1228 = dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227));
        float _1233 = (_1228 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1228);
        float _1241 = (dot(vec3(_463, _464, _465), vec3(_1233 * _1225, _1233 * _1226, _1233 * _1227)) + 1.0) * 0.5;
        float _3726 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1250 = sqrt(((_1226 * _1226) + (_1225 * _1225)) + (_1227 * _1227)) / (_1181 + 9.9999997473787516355514526367188e-06);
        float _3737 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _1252 = _1251 * 2.0;
        float _1256 = (1.0 - _1251) / (_1251 + 1.0);
        float _3748 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1266 = ((((1.0 - _1257) * (_1252 + 2.0)) * exp2(log2(isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))) * (_1252 + 1.0))) + _1257) * _1181;
        float _1267 = _1149 * 0.5;
        float _1268 = _1159 * 0.5;
        float _1269 = _1169 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1283 = (dot(vec3(_463, _464, _465), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _3759 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1292 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _3770 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _3781 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * (_1294 + 1.0))) + _1299) * _1182;
        _1316 = _1149;
        _1317 = _1148;
        _1318 = _1147;
        _1319 = _1159;
        _1320 = _1158;
        _1321 = _1157;
        _1322 = _1169;
        _1323 = _1168;
        _1324 = _1167;
        _1325 = _1182;
        _1326 = _1181;
        _1327 = _1180;
        _1328 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)));
        _1329 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)));
        _1330 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
    }
    else
    {
        _1316 = _1007;
        _1317 = _1007;
        _1318 = _1007;
        _1319 = _1007;
        _1320 = _1007;
        _1321 = _1007;
        _1322 = _1007;
        _1323 = _1007;
        _1324 = _1007;
        _1325 = _1007;
        _1326 = _1007;
        _1327 = _1007;
        _1328 = 0.0;
        _1329 = 0.0;
        _1330 = 0.0;
    }
    float _1340 = (cbModelParam._m0[1u].x * (_1328 - _1019)) + _1019;
    float _1341 = (cbModelParam._m0[1u].x * (_1329 - _1020)) + _1020;
    float _1342 = (cbModelParam._m0[1u].x * (_1330 - _1021)) + _1021;
    float _1363 = fma(_1342, cbSceneParam._m0[89u].z, fma(_1341, cbSceneParam._m0[89u].y, _1340 * cbSceneParam._m0[89u].x));
    float _1366 = fma(_1342, cbSceneParam._m0[90u].z, fma(_1341, cbSceneParam._m0[90u].y, _1340 * cbSceneParam._m0[90u].x));
    float _1369 = fma(_1342, cbSceneParam._m0[91u].z, fma(_1341, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1340));
    float _1384 = _640 * 0.5;
    float _1385 = _641 * 0.5;
    float _1386 = _642 * 0.5;
    float _1387 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1318, _1321, _1324, _1327));
    float _1390 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1317, _1320, _1323, _1326));
    float _1393 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1316, _1319, _1322, _1325));
    float _1427;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1400 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1006, _1010, _1013, _1016));
        float _1404 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1008, _1011, _1014, _1017));
        float _1408 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1009, _1012, _1015, _1018));
        float _1415 = dot(vec4(cbModelParam._m0[39u]), vec4(_1384, _1385, _1386, 1.0));
        _1427 = dot(vec3(isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)), isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)), isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1415) ? 0.0 : (isnan(0.0) ? _1415 : max(0.0, _1415))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1427 = 1.0;
    }
    float _1438;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1429 = dot(vec4(cbModelParam._m0[40u]), vec4(_1384, _1385, _1386, 1.0));
        _1438 = dot(vec3(isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)), isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)), isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1429) ? 0.0 : (isnan(0.0) ? _1429 : max(0.0, _1429))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1438 = 1.0;
    }
    float _1442 = (_1438 * cbModelParam._m0[1u].x) + (_1427 * (1.0 - cbModelParam._m0[1u].x));
    float _1452 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _466);
    float _1453 = isnan(_1452) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1452 : min(cbModelParam._m0[25u].z, _1452));
    float _1533;
    float _1535;
    float _1537;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1500 = fma(_704, cbModelParam._m0[13u].z, fma(_700, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _696)) + cbModelParam._m0[13u].w;
        float _1504 = fma(_704, cbModelParam._m0[14u].z, fma(_700, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _696)) + cbModelParam._m0[14u].w;
        float _1508 = fma(_704, cbModelParam._m0[15u].z, fma(_700, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _696)) + cbModelParam._m0[15u].w;
        float _1511 = fma(_642, cbModelParam._m0[13u].z, fma(_641, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _640));
        float _1514 = fma(_642, cbModelParam._m0[14u].z, fma(_641, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _640));
        float _1517 = fma(_642, cbModelParam._m0[15u].z, fma(_641, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _640));
        float _1545;
        if (_1511 > 0.0)
        {
            _1545 = abs((1.0 - _1500) / _1511);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1511 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1500 + 1.0) / _1511);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1545 = frontier_phi_14_12_ladder;
        }
        float _1771;
        if (_1514 > 0.0)
        {
            _1771 = abs((1.0 - _1504) / _1514);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1514 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1504 + 1.0) / _1514);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1771 = frontier_phi_23_19_ladder;
        }
        float _2028;
        if (_1517 > 0.0)
        {
            _2028 = abs((1.0 - _1508) / _1517);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1517 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1508 + 1.0) / _1517);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2028 = frontier_phi_35_30_ladder;
        }
        float _2030 = isnan(_1771) ? _1545 : (isnan(_1545) ? _1771 : min(_1545, _1771));
        float _2031 = isnan(_2028) ? _2030 : (isnan(_2030) ? _2028 : min(_2030, _2028));
        float _2035 = (_2031 * _1511) + _1500;
        float _2036 = (_2031 * _1514) + _1504;
        float _2037 = (_2031 * _1517) + _1508;
        float _2038 = _2031 * 9.9999997473787516355514526367188e-05;
        float _2040 = (-1.0) - _2038;
        float _2042 = _2038 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2037 > _2042) || ((_2037 < _2040) || ((_2036 > _2042) || ((_2036 < _2040) || ((_2035 < _2040) || (_2035 > _2042))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2165 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2037, cbModelParam._m0[9u].z, fma(_2036, cbModelParam._m0[9u].y, _2035 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2037, cbModelParam._m0[10u].z, fma(_2036, cbModelParam._m0[10u].y, _2035 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2037, cbModelParam._m0[11u].z, fma(_2036, cbModelParam._m0[11u].y, _2035 * cbModelParam._m0[11u].x))), _1453);
            frontier_phi_13_35_ladder = _2165.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2165.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2165.x * cbModelParam._m0[1u].y;
        }
        _1533 = frontier_phi_13_35_ladder_2;
        _1535 = frontier_phi_13_35_ladder_1;
        _1537 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1521 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_640, _641, _642), _1453);
        _1533 = _1521.x * cbModelParam._m0[1u].y;
        _1535 = _1521.y * cbModelParam._m0[1u].y;
        _1537 = _1521.z * cbModelParam._m0[1u].y;
    }
    float _1541 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _466);
    float _1542 = isnan(_1541) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1541 : min(cbModelParam._m0[25u].w, _1541));
    float _1633;
    float _1635;
    float _1637;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1597 = fma(_704, cbModelParam._m0[21u].z, fma(_700, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _696)) + cbModelParam._m0[21u].w;
        float _1601 = fma(_704, cbModelParam._m0[22u].z, fma(_700, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _696)) + cbModelParam._m0[22u].w;
        float _1605 = fma(_704, cbModelParam._m0[23u].z, fma(_700, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _696)) + cbModelParam._m0[23u].w;
        float _1608 = fma(_642, cbModelParam._m0[21u].z, fma(_641, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _640));
        float _1611 = fma(_642, cbModelParam._m0[22u].z, fma(_641, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _640));
        float _1614 = fma(_642, cbModelParam._m0[23u].z, fma(_641, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _640));
        float _1776;
        if (_1608 > 0.0)
        {
            _1776 = abs((1.0 - _1597) / _1608);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1608 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1597 + 1.0) / _1608);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1776 = frontier_phi_25_21_ladder;
        }
        float _2055;
        if (_1611 > 0.0)
        {
            _2055 = abs((1.0 - _1601) / _1611);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1611 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1601 + 1.0) / _1611);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2055 = frontier_phi_37_32_ladder;
        }
        float _2268;
        if (_1614 > 0.0)
        {
            _2268 = abs((1.0 - _1605) / _1614);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1614 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1605 + 1.0) / _1614);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2268 = frontier_phi_46_43_ladder;
        }
        float _2270 = isnan(_2055) ? _1776 : (isnan(_1776) ? _2055 : min(_1776, _2055));
        float _2271 = isnan(_2268) ? _2270 : (isnan(_2270) ? _2268 : min(_2270, _2268));
        float _2275 = (_2271 * _1608) + _1597;
        float _2276 = (_2271 * _1611) + _1601;
        float _2277 = (_2271 * _1614) + _1605;
        float _2278 = _2271 * 9.9999997473787516355514526367188e-05;
        float _2279 = (-1.0) - _2278;
        float _2281 = _2278 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2277 > _2281) || ((_2277 < _2279) || ((_2276 > _2281) || ((_2276 < _2279) || ((_2275 < _2279) || (_2275 > _2281))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2511 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2277, cbModelParam._m0[17u].z, fma(_2276, cbModelParam._m0[17u].y, _2275 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2277, cbModelParam._m0[18u].z, fma(_2276, cbModelParam._m0[18u].y, _2275 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2277, cbModelParam._m0[19u].z, fma(_2276, cbModelParam._m0[19u].y, _2275 * cbModelParam._m0[19u].x))), _1542);
            frontier_phi_22_46_ladder = _2511.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2511.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2511.x * cbModelParam._m0[1u].z;
        }
        _1633 = frontier_phi_22_46_ladder_2;
        _1635 = frontier_phi_22_46_ladder_1;
        _1637 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1617 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_640, _641, _642), _1542);
        _1633 = _1617.x * cbModelParam._m0[1u].z;
        _1635 = _1617.y * cbModelParam._m0[1u].z;
        _1637 = _1617.z * cbModelParam._m0[1u].z;
    }
    float _1650 = (((_667 * _617) + _668) * _632) * ((cbModelParam._m0[1u].w * (_1633 - _1533)) + _1533);
    float _1652 = (((_667 * _619) + _668) * _632) * ((cbModelParam._m0[1u].w * (_1635 - _1535)) + _1535);
    float _1654 = (((_667 * _620) + _668) * _632) * ((cbModelParam._m0[1u].w * (_1637 - _1537)) + _1537);
    float _1657 = fma(_1654, cbSceneParam._m0[89u].z, fma(_1652, cbSceneParam._m0[89u].y, _1650 * cbSceneParam._m0[89u].x));
    float _1660 = fma(_1654, cbSceneParam._m0[90u].z, fma(_1652, cbSceneParam._m0[90u].y, _1650 * cbSceneParam._m0[90u].x));
    float _1663 = fma(_1654, cbSceneParam._m0[91u].z, fma(_1652, cbSceneParam._m0[91u].y, _1650 * cbSceneParam._m0[91u].x));
    vec4 _1671 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_552, _553));
    float _1673 = _1671.w;
    float _1685 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1673);
    float _1686 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1673);
    float _1687 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1673);
    uvec4 _1691 = floatBitsToUint(cbInstanceData._m0[_592 + 5u]);
    uint _1693 = _1691.x * 14u;
    uint _1694 = _1693 + 13u;
    float _1701 = _632 + (-1.0);
    float _1706 = (cbLight._m0[_1694].x * _1701) + 1.0;
    float _1707 = (cbLight._m0[_1694].y * _1701) + 1.0;
    float _1708 = (cbLight._m0[_1694].z * _1701) + 1.0;
    float _1709 = (cbLight._m0[_1694].w * _1701) + 1.0;
    uint _1710 = _1693 + 5u;
    float _1716 = isnan(1.0) ? _1707 : (isnan(_1707) ? 1.0 : min(_1707, 1.0));
    uint _1720 = _1693 + 4u;
    float _1730 = isnan(1.0) ? _1706 : (isnan(_1706) ? 1.0 : min(_1706, 1.0));
    uint _1734 = _1693 | 1u;
    float _1745 = dot(vec3(cbLight._m0[_1693].xyz), vec3(_463, _464, _465));
    float _1748 = dot(vec3(cbLight._m0[_1734].xyz), vec3(_463, _464, _465));
    float _3917 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
    float _3928 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
    float _1753 = (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * 0.3183098733425140380859375;
    float _1755 = (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * 0.3183098733425140380859375;
    float _1762 = ((cbLight._m0[_1710].x * _1716) * _1755) + (((cbLight._m0[_1720].x * _1685) * _1730) * _1753);
    float _1763 = ((_1716 * cbLight._m0[_1710].y) * _1755) + (((cbLight._m0[_1720].y * _1686) * _1730) * _1753);
    float _1764 = ((_1716 * cbLight._m0[_1710].z) * _1755) + (((cbLight._m0[_1720].z * _1687) * _1730) * _1753);
    uvec4 _1768 = floatBitsToUint(cbLight._m0[_1693 + 12u]);
    bool _1770 = _1768.x == 0u;
    float _1781;
    float _1783;
    float _1785;
    if (_1770)
    {
        _1781 = _1762;
        _1783 = _1763;
        _1785 = _1764;
    }
    else
    {
        uint _1789 = _1693 + 6u;
        float _1805 = (dot(vec3(cbLight._m0[_1693 + 2u].xyz), vec3(_463, _464, _465)) * 0.5) + 0.5;
        float _1806 = _1805 * _1805;
        float _3939 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1807 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1808 = isnan(1.0) ? _1708 : (isnan(_1708) ? 1.0 : min(_1708, 1.0));
        _1781 = (((cbLight._m0[_1789].x * 0.3183098733425140380859375) * _1807) * _1808) + _1762;
        _1783 = (((cbLight._m0[_1789].y * 0.3183098733425140380859375) * _1807) * _1808) + _1763;
        _1785 = (((cbLight._m0[_1789].z * 0.3183098733425140380859375) * _1807) * _1808) + _1764;
    }
    bool _1788 = _1768.y == 0u;
    float _1826;
    float _1828;
    float _1830;
    if (_1788)
    {
        _1826 = _1781;
        _1828 = _1783;
        _1830 = _1785;
    }
    else
    {
        uint _1999 = _1693 + 7u;
        float _2015 = (dot(vec3(cbLight._m0[_1693 + 3u].xyz), vec3(_463, _464, _465)) * 0.5) + 0.5;
        float _2016 = _2015 * _2015;
        float _3955 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
        float _2017 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _2018 = isnan(1.0) ? _1709 : (isnan(_1709) ? 1.0 : min(_1709, 1.0));
        _1826 = (((cbLight._m0[_1999].x * 0.3183098733425140380859375) * _2017) * _2018) + _1781;
        _1828 = (((cbLight._m0[_1999].y * 0.3183098733425140380859375) * _2017) * _2018) + _1783;
        _1830 = (((cbLight._m0[_1999].z * 0.3183098733425140380859375) * _2017) * _2018) + _1785;
    }
    uint _1833 = _1693 + 8u;
    float _1846 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1693].w)) * _466) * 0.949999988079071044921875);
    float _1847 = _1846 * _1846;
    float _1848 = cbLight._m0[_1693].x + _544;
    float _1849 = cbLight._m0[_1693].y + _545;
    float _1850 = cbLight._m0[_1693].z + _546;
    float _1854 = inversesqrt(dot(vec3(_1848, _1849, _1850), vec3(_1848, _1849, _1850)));
    float _1855 = _1854 * _1848;
    float _1856 = _1854 * _1849;
    float _1857 = _1854 * _1850;
    float _1858 = dot(vec3(_463, _464, _465), vec3(cbLight._m0[_1693].xyz));
    float _3971 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1861 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _3982 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _1862 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _1863 = dot(vec3(_463, _464, _465), vec3(_1855, _1856, _1857));
    float _3993 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _1866 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _1867 = dot(vec3(cbLight._m0[_1693].xyz), vec3(_1855, _1856, _1857));
    float _4004 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1871 = _1847 * _1847;
    float _1875 = ((_1866 * _1866) * (_1871 + (-1.0))) + 1.0;
    float _1883 = exp2(log2(1.0 - (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0)))) * 5.0);
    float _1884 = 0.959999978542327880859375 - _614;
    float _1886 = 0.959999978542327880859375 - _615;
    float _1887 = 0.959999978542327880859375 - _616;
    float _1894 = 1.0 - _1847;
    float _1905 = (0.5 / (((_1862 * ((_1861 * _1894) + _1847)) + 9.9999999392252902907785028219223e-09) + (((_1862 * _1894) + _1847) * _1861))) * _1861;
    float _4015 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1907 = (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1871 / ((_1875 * _1875) * 3.141590118408203125));
    uint _1921 = _1693 + 9u;
    float _1932 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1734].w)) * _466) * 0.949999988079071044921875);
    float _1933 = _1932 * _1932;
    float _1934 = cbLight._m0[_1734].x + _544;
    float _1935 = cbLight._m0[_1734].y + _545;
    float _1936 = cbLight._m0[_1734].z + _546;
    float _1940 = inversesqrt(dot(vec3(_1934, _1935, _1936), vec3(_1934, _1935, _1936)));
    float _1941 = _1940 * _1934;
    float _1942 = _1940 * _1935;
    float _1943 = _1940 * _1936;
    float _1944 = dot(vec3(_463, _464, _465), vec3(cbLight._m0[_1734].xyz));
    float _4026 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1947 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _1948 = dot(vec3(_463, _464, _465), vec3(_1941, _1942, _1943));
    float _4037 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1951 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _1952 = dot(vec3(cbLight._m0[_1734].xyz), vec3(_1941, _1942, _1943));
    float _4048 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _1956 = _1933 * _1933;
    float _1960 = ((_1951 * _1951) * (_1956 + (-1.0))) + 1.0;
    float _1967 = exp2(log2(1.0 - (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) * 5.0);
    float _1974 = 1.0 - _1933;
    float _1984 = (0.5 / (((_1862 * ((_1947 * _1974) + _1933)) + 9.9999999392252902907785028219223e-09) + (((_1862 * _1974) + _1933) * _1947))) * _1947;
    float _4059 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1986 = (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_1956 / ((_1960 * _1960) * 3.141590118408203125));
    float _1996 = (((((_1967 * _1884) + _617) * cbLight._m0[_1921].x) * _1986) * _1716) + ((((cbLight._m0[_1833].x * _1685) * ((_1883 * _1884) + _617)) * _1907) * _1730);
    float _1997 = (((((_1967 * _1886) + _619) * cbLight._m0[_1921].y) * _1986) * _1716) + ((((cbLight._m0[_1833].y * _1686) * ((_1883 * _1886) + _619)) * _1907) * _1730);
    float _1998 = (((((_1967 * _1887) + _620) * cbLight._m0[_1921].z) * _1986) * _1716) + ((((cbLight._m0[_1833].z * _1687) * ((_1883 * _1887) + _620)) * _1907) * _1730);
    float _2060;
    float _2062;
    float _2064;
    if (_1770)
    {
        _2060 = _1996;
        _2062 = _1997;
        _2064 = _1998;
    }
    else
    {
        uint _2066 = _1693 + 2u;
        uint _2070 = _1693 + 10u;
        float _2084 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2066].w)) * _466) * 0.949999988079071044921875);
        float _2085 = _2084 * _2084;
        float _2086 = cbLight._m0[_2066].x + _544;
        float _2087 = cbLight._m0[_2066].y + _545;
        float _2088 = cbLight._m0[_2066].z + _546;
        float _2092 = inversesqrt(dot(vec3(_2086, _2087, _2088), vec3(_2086, _2087, _2088)));
        float _2093 = _2092 * _2086;
        float _2094 = _2092 * _2087;
        float _2095 = _2092 * _2088;
        float _2096 = dot(vec3(_463, _464, _465), vec3(cbLight._m0[_2066].xyz));
        float _4070 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2099 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _2100 = dot(vec3(_463, _464, _465), vec3(_2093, _2094, _2095));
        float _4081 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2103 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _2104 = dot(vec3(cbLight._m0[_2066].xyz), vec3(_2093, _2094, _2095));
        float _4092 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
        float _2108 = _2085 * _2085;
        float _2112 = ((_2103 * _2103) * (_2108 + (-1.0))) + 1.0;
        float _2119 = exp2(log2(1.0 - (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0)))) * 5.0);
        float _2126 = 1.0 - _2085;
        float _2136 = (0.5 / (((_1862 * ((_2099 * _2126) + _2085)) + 9.9999999392252902907785028219223e-09) + (((_1862 * _2126) + _2085) * _2099))) * _2099;
        float _4103 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
        float _2138 = (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_2108 / ((_2112 * _2112) * 3.141590118408203125));
        float _2139 = isnan(1.0) ? _1708 : (isnan(_1708) ? 1.0 : min(_1708, 1.0));
        _2060 = (((((_2119 * _1884) + _617) * cbLight._m0[_2070].x) * _2138) * _2139) + _1996;
        _2062 = (((((_2119 * _1886) + _619) * cbLight._m0[_2070].y) * _2138) * _2139) + _1997;
        _2064 = (((((_2119 * _1887) + _620) * cbLight._m0[_2070].z) * _2138) * _2139) + _1998;
    }
    float _2174;
    float _2176;
    float _2178;
    if (_1788)
    {
        _2174 = _2060;
        _2176 = _2062;
        _2178 = _2064;
    }
    else
    {
        uint _2185 = _1693 + 3u;
        uint _2189 = _1693 + 11u;
        float _2203 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2185].w)) * _466) * 0.949999988079071044921875);
        float _2204 = _2203 * _2203;
        float _2205 = cbLight._m0[_2185].x + _544;
        float _2206 = cbLight._m0[_2185].y + _545;
        float _2207 = cbLight._m0[_2185].z + _546;
        float _2211 = inversesqrt(dot(vec3(_2205, _2206, _2207), vec3(_2205, _2206, _2207)));
        float _2212 = _2211 * _2205;
        float _2213 = _2211 * _2206;
        float _2214 = _2211 * _2207;
        float _2215 = dot(vec3(_463, _464, _465), vec3(cbLight._m0[_2185].xyz));
        float _4119 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2218 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _2219 = dot(vec3(_463, _464, _465), vec3(_2212, _2213, _2214));
        float _4130 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2222 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _2223 = dot(vec3(cbLight._m0[_2185].xyz), vec3(_2212, _2213, _2214));
        float _4141 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2227 = _2204 * _2204;
        float _2231 = ((_2222 * _2222) * (_2227 + (-1.0))) + 1.0;
        float _2238 = exp2(log2(1.0 - (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0)))) * 5.0);
        float _2245 = 1.0 - _2204;
        float _2255 = (0.5 / (((_1862 * ((_2218 * _2245) + _2204)) + 9.9999999392252902907785028219223e-09) + (((_1862 * _2245) + _2204) * _2218))) * _2218;
        float _4152 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        float _2257 = (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_2227 / ((_2231 * _2231) * 3.141590118408203125));
        float _2258 = isnan(1.0) ? _1709 : (isnan(_1709) ? 1.0 : min(_1709, 1.0));
        _2174 = (((((_2238 * _1884) + _617) * cbLight._m0[_2189].x) * _2257) * _2258) + _2060;
        _2176 = (((((_2238 * _1886) + _619) * cbLight._m0[_2189].y) * _2257) * _2258) + _2062;
        _2178 = (((((_2238 * _1887) + _620) * cbLight._m0[_2189].z) * _2257) * _2258) + _2064;
    }
    float _2393;
    float _2395;
    float _2397;
    float _2399;
    float _2401;
    float _2403;
    if (_1691.y == 0u)
    {
        float _2333 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2334 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2333;
        float _2335 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2333;
        float _2336 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2333;
        uvec4 _2348 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2349 = _2348.x;
        uint _2360 = uint((float(_2348.y) * floor(float(uint(cbSceneParam._m0[85u].y * _553) / _2349))) + floor(float(uint(cbSceneParam._m0[85u].x * _552) / _2349)));
        float _2370 = (log2(_2336 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2371 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        uint _2374 = uint(isnan(14.0) ? _2371 : (isnan(_2371) ? 14.0 : min(_2371, 14.0)));
        uvec4 _2379 = texelFetch(g_lightClusterGridBuffer, int(((_2374 << 2u) + (_2360 << 6u)) >> 2u));
        uint _2380 = _2379.x;
        uint _2381 = _2348.z;
        float _2516;
        float _2518;
        float _2520;
        float _2522;
        float _2524;
        float _2526;
        if (((((1u << ((_2381 >> 4u) & 15u)) + 4294967295u) & _2380) == 0u) || ((_2381 & 240u) == 0u))
        {
            _2516 = 0.0;
            _2518 = 0.0;
            _2520 = 0.0;
            _2522 = 0.0;
            _2524 = 0.0;
            _2526 = 0.0;
        }
        else
        {
            float _2517;
            float _2519;
            float _2521;
            float _2523;
            float _2525;
            float _2527;
            float _2670 = 0.0;
            float _2671 = 0.0;
            float _2672 = 0.0;
            float _2673 = 0.0;
            float _2674 = 0.0;
            float _2675 = 0.0;
            uint _2676 = 0u;
            uint _2685;
            bool _2686;
            for (;;)
            {
                _2685 = texelFetch(g_lightClassification, int((((_2374 << 5u) + (_2360 << 9u)) + (_2676 << 2u)) >> 2u)).x;
                _2686 = _2685 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2686)
                {
                    frontier_phi_61_pred = _2670;
                    frontier_phi_61_pred_1 = _2675;
                    frontier_phi_61_pred_2 = _2674;
                    frontier_phi_61_pred_3 = _2673;
                    frontier_phi_61_pred_4 = _2672;
                    frontier_phi_61_pred_5 = _2671;
                }
                else
                {
                    float _2794;
                    float _2795;
                    float _2796;
                    float _2797;
                    float _2798;
                    float _2799;
                    uint _2800;
                    _2794 = _2670;
                    _2795 = _2671;
                    _2796 = _2672;
                    _2797 = _2673;
                    _2798 = _2674;
                    _2799 = _2675;
                    _2800 = _2685;
                    float _2726;
                    float _2727;
                    float _2728;
                    float _2729;
                    float _2730;
                    float _2731;
                    for (;;)
                    {
                        uint _2804 = uint(findLSB(_2800)) + (_2676 << 5u);
                        uint _2801 = (_2800 + 4294967295u) & _2800;
                        uint _2806 = _2804 * 48u;
                        vec4 _2820 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2806)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 3u)).x));
                        uint _2826 = (_2804 * 48u) + 4u;
                        vec4 _2839 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2826)).x, texelFetch(g_PointLightRenderingBuffer, int(_2826 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2826 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2826 + 3u)).x));
                        uint _2845 = (_2804 * 48u) + 8u;
                        vec3 _2856 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2845)).x, texelFetch(g_PointLightRenderingBuffer, int(_2845 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2845 + 2u)).x));
                        float _2860 = _2820.x - _2334;
                        float _2861 = _2820.y - _2335;
                        float _2862 = _2820.z - _2336;
                        float _2863 = dot(vec3(_2860, _2861, _2862), vec3(_2860, _2861, _2862));
                        float _2866 = inversesqrt(_2863);
                        float _2867 = _2866 * _2860;
                        float _2868 = _2866 * _2861;
                        float _2869 = _2866 * _2862;
                        float _2870 = dot(vec3(_573, _576, _579), vec3(_2867, _2868, _2869));
                        float _2875 = 1.0 - (_2863 * _2820.w);
                        float _4178 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
                        float _2876 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
                        float _2877 = sqrt(_2863) * _2839.w;
                        float _2880 = 1.39999997615814208984375 / (_2877 + 1.39999997615814208984375);
                        float _2881 = _2880 * _2880;
                        float _2884 = ((1.0 - _2881) * _2870) + _2881;
                        float _2887 = _2877 * _2877;
                        float _2891 = ((isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0))) * _2876) / ((_2887 * 0.699999988079071044921875) + 1.0);
                        float _2895 = (-0.0) - _2334;
                        float _2896 = (-0.0) - _2335;
                        float _2897 = (-0.0) - _2336;
                        float _2901 = inversesqrt(dot(vec3(_2895, _2896, _2897), vec3(_2895, _2896, _2897)));
                        float _2902 = _2901 * _2895;
                        float _2903 = _2901 * _2896;
                        float _2904 = _2901 * _2897;
                        float _2912 = exp2(log2(1.0 / ((_2887 * 3.5) + 5.0)) * 0.25);
                        float _2913 = 1.0 - _648;
                        float _2920 = sqrt(1.0 - ((1.0 - (_2913 * _2913)) * (1.0 - (_2912 * _2912))));
                        float _2921 = _2920 * _2920;
                        float _2922 = _2921 * _2921;
                        float _2923 = _2902 + _2867;
                        float _2924 = _2903 + _2868;
                        float _2925 = _2904 + _2869;
                        float _2929 = inversesqrt(dot(vec3(_2923, _2924, _2925), vec3(_2923, _2924, _2925)));
                        float _2933 = dot(vec3(_573, _576, _579), vec3(_2902, _2903, _2904));
                        float _4194 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
                        float _2936 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
                        float _2937 = dot(vec3(_573, _576, _579), vec3(_2929 * _2923, _2929 * _2924, _2929 * _2925));
                        float _4205 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
                        float _2940 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
                        float _2944 = ((_2940 * _2940) * (_2922 + (-1.0))) + 1.0;
                        float _2945 = _2880 * _2921;
                        float _2946 = _2945 * _2945;
                        float _2949 = ((1.0 - _2946) * _2870) + _2946;
                        float _4216 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
                        float _2950 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
                        float _2951 = 1.0 - _2921;
                        float _2961 = (0.5 / (((_2950 * ((_2936 * _2951) + _2921)) + 9.9999999392252902907785028219223e-09) + (((_2950 * _2951) + _2921) * _2936))) * _2950;
                        float _4227 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
                        float _2972 = (((_2922 * 3.1415927410125732421875) * (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0)))) / ((_2944 * _2944) * ((_2887 * 2.1991131305694580078125) + 3.141590118408203125))) * _2876;
                        _2729 = (_2891 * _2839.x) + _2797;
                        _2730 = (_2891 * _2839.y) + _2798;
                        _2731 = (_2891 * _2839.z) + _2799;
                        _2726 = (_2972 * _2856.x) + _2794;
                        _2727 = (_2972 * _2856.y) + _2795;
                        _2728 = (_2972 * _2856.z) + _2796;
                        if (_2801 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2794 = _2726;
                            _2795 = _2727;
                            _2796 = _2728;
                            _2797 = _2729;
                            _2798 = _2730;
                            _2799 = _2731;
                            _2800 = _2801;
                        }
                    }
                    frontier_phi_61_pred = _2726;
                    frontier_phi_61_pred_1 = _2731;
                    frontier_phi_61_pred_2 = _2730;
                    frontier_phi_61_pred_3 = _2729;
                    frontier_phi_61_pred_4 = _2728;
                    frontier_phi_61_pred_5 = _2727;
                }
                _2517 = frontier_phi_61_pred;
                _2527 = frontier_phi_61_pred_1;
                _2525 = frontier_phi_61_pred_2;
                _2523 = frontier_phi_61_pred_3;
                _2521 = frontier_phi_61_pred_4;
                _2519 = frontier_phi_61_pred_5;
                uint _2677 = _2676 + 1u;
                if (_2677 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2670 = _2517;
                    _2671 = _2519;
                    _2672 = _2521;
                    _2673 = _2523;
                    _2674 = _2525;
                    _2675 = _2527;
                    _2676 = _2677;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2516 = _2517;
            _2518 = _2519;
            _2520 = _2521;
            _2522 = _2523;
            _2524 = _2525;
            _2526 = _2527;
        }
        uvec4 _2530 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2531 = _2530.z;
        uint _2533 = (_2531 >> 8u) & 15u;
        float _2638;
        float _2640;
        float _2642;
        float _2644;
        float _2646;
        float _2648;
        if (((4294967295u << _2533) & _2380) == 0u)
        {
            _2638 = _2516;
            _2640 = _2518;
            _2642 = _2520;
            _2644 = _2522;
            _2646 = _2524;
            _2648 = _2526;
        }
        else
        {
            float _2663 = inversesqrt(dot(vec3(_2334, _2335, _2336), vec3(_2334, _2335, _2336)));
            float _2664 = _2663 * _2334;
            float _2665 = _2663 * _2335;
            float _2666 = _2663 * _2336;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2533 < ((_2531 >> 12u) & 15u))
            {
                float _2639;
                float _2641;
                float _2643;
                float _2645;
                float _2647;
                float _2649;
                float _2777 = _2516;
                float _2778 = _2518;
                float _2779 = _2520;
                float _2780 = _2522;
                float _2781 = _2524;
                float _2782 = _2526;
                uint _2783 = _2533;
                uint _2792;
                bool _2793;
                for (;;)
                {
                    _2792 = texelFetch(g_lightClassification, int((((_2374 << 5u) + (_2360 << 9u)) + (_2783 << 2u)) >> 2u)).x;
                    _2793 = _2792 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2793)
                    {
                        frontier_phi_67_pred = _2780;
                        frontier_phi_67_pred_1 = _2781;
                        frontier_phi_67_pred_2 = _2782;
                        frontier_phi_67_pred_3 = _2779;
                        frontier_phi_67_pred_4 = _2778;
                        frontier_phi_67_pred_5 = _2777;
                    }
                    else
                    {
                        float _2977;
                        float _2978;
                        float _2979;
                        float _2980;
                        float _2981;
                        float _2982;
                        float _3272;
                        float _3273;
                        float _3274;
                        float _3275;
                        float _3276;
                        float _3277;
                        float _2990 = _2777;
                        float _2991 = _2778;
                        float _2992 = _2779;
                        float _2993 = _2780;
                        float _2994 = _2781;
                        float _2995 = _2782;
                        uint _2996 = _2792;
                        uint _2997;
                        vec4 _3022;
                        float _3023;
                        vec4 _3038;
                        vec3 _3050;
                        vec4 _3065;
                        vec4 _3081;
                        float _3128;
                        bool _3129;
                        for (;;)
                        {
                            uint _3007 = ((_2783 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2996));
                            _2997 = (_2996 + 4294967295u) & _2996;
                            uint _3009 = _3007 * 40u;
                            _3022 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3009)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 3u)).x));
                            _3023 = _3022.w;
                            uint _3025 = (_3007 * 40u) + 4u;
                            _3038 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3025)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 3u)).x));
                            uint _3040 = (_3007 * 40u) + 8u;
                            _3050 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3040)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 2u)).x));
                            uint _3052 = (_3007 * 40u) + 16u;
                            _3065 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3052)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 3u)).x));
                            uint _3068 = (_3007 * 40u) + 20u;
                            _3081 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3068)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 3u)).x));
                            uint _3084 = (_3007 * 40u) + 24u;
                            vec4 _3097 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3084)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 3u)).x));
                            uint _3103 = (_3007 * 40u) + 28u;
                            vec4 _3116 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3103)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 3u)).x));
                            _3128 = fma(_2336, _3116.z, fma(_2335, _3116.y, _3116.x * _2334)) + _3116.w;
                            _3129 = !((fma(_2336, _3097.z, fma(_2335, _3097.y, _3097.x * _2334)) + _3097.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3129)
                            {
                                float _3156 = _3022.x - _2334;
                                float _3157 = _3022.y - _2335;
                                float _3158 = _3022.z - _2336;
                                float _3159 = dot(vec3(_3156, _3157, _3158), vec3(_3156, _3157, _3158));
                                float _3162 = inversesqrt(_3159);
                                float _3163 = _3162 * _3156;
                                float _3164 = _3162 * _3157;
                                float _3165 = _3162 * _3158;
                                float _3169 = 1.0 - (_3159 / (_3023 * _3023));
                                float _4238 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                                float _3170 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
                                float _3174 = sqrt(_3159) * _3038.w;
                                float _3176 = 1.39999997615814208984375 / (_3174 + 1.39999997615814208984375);
                                float _3177 = _3176 * _3176;
                                float _3180 = ((1.0 - _3177) * dot(vec3(_3163, _3164, _3165), vec3(_573, _576, _579))) + _3177;
                                float _3183 = _3174 * _3174;
                                float _3187 = (fma(_2336, _3065.z, fma(_2335, _3065.y, _3065.x * _2334)) + _3065.w) / _3128;
                                float _3188 = (fma(_2336, _3081.z, fma(_2335, _3081.y, _3081.x * _2334)) + _3081.w) / _3128;
                                float _3192 = 1.0 - dot(vec2(_3187, _3188), vec2(_3187, _3188));
                                float _4254 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                                float _3193 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
                                float _3194 = _3193 * (((isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0))) * _3170) / ((_3183 * 0.699999988079071044921875) + 1.0));
                                float _3206 = exp2(log2(1.0 / ((_3183 * 3.5) + 5.0)) * 0.25);
                                float _3207 = 1.0 - _648;
                                float _3214 = sqrt(1.0 - ((1.0 - (_3207 * _3207)) * (1.0 - (_3206 * _3206))));
                                float _3215 = _3214 * _3214;
                                float _3216 = _3215 * _3215;
                                float _3217 = _3163 - _2664;
                                float _3218 = _3164 - _2665;
                                float _3219 = _3165 - _2666;
                                float _3223 = inversesqrt(dot(vec3(_3217, _3218, _3219), vec3(_3217, _3218, _3219)));
                                float _3227 = dot(vec3(_573, _576, _579), vec3((-0.0) - _2664, (-0.0) - _2665, (-0.0) - _2666));
                                float _4265 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                                float _3230 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
                                float _3231 = dot(vec3(_573, _576, _579), vec3(_3223 * _3217, _3223 * _3218, _3223 * _3219));
                                float _4276 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                                float _3234 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
                                float _3238 = ((_3234 * _3234) * (_3216 + (-1.0))) + 1.0;
                                float _3239 = _3176 * _3215;
                                float _3240 = _3239 * _3239;
                                float _3246 = ((1.0 - _3240) * dot(vec3(_573, _576, _579), vec3(_3163, _3164, _3165))) + _3240;
                                float _4287 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                                float _3247 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
                                float _3248 = 1.0 - _3215;
                                float _3258 = (0.5 / (((_3247 * ((_3230 * _3248) + _3215)) + 9.9999999392252902907785028219223e-09) + (((_3247 * _3248) + _3215) * _3230))) * _3247;
                                float _4298 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                                float _3268 = (_3193 * _3170) * (((_3216 * 3.1415927410125732421875) * (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0)))) / ((_3238 * _3238) * ((_3183 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3268 * _3050.x;
                                frontier_phi_73_pred_1 = _3268 * _3050.y;
                                frontier_phi_73_pred_2 = _3194 * _3038.z;
                                frontier_phi_73_pred_3 = _3194 * _3038.y;
                                frontier_phi_73_pred_4 = _3194 * _3038.x;
                                frontier_phi_73_pred_5 = _3268 * _3050.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3272 = frontier_phi_73_pred;
                            _3273 = frontier_phi_73_pred_1;
                            _3277 = frontier_phi_73_pred_2;
                            _3276 = frontier_phi_73_pred_3;
                            _3275 = frontier_phi_73_pred_4;
                            _3274 = frontier_phi_73_pred_5;
                            _2980 = _3275 + _2993;
                            _2981 = _3276 + _2994;
                            _2982 = _3277 + _2995;
                            _2977 = _3272 + _2990;
                            _2978 = _3273 + _2991;
                            _2979 = _3274 + _2992;
                            if (_2997 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2990 = _2977;
                                _2991 = _2978;
                                _2992 = _2979;
                                _2993 = _2980;
                                _2994 = _2981;
                                _2995 = _2982;
                                _2996 = _2997;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2980;
                        frontier_phi_67_pred_1 = _2981;
                        frontier_phi_67_pred_2 = _2982;
                        frontier_phi_67_pred_3 = _2979;
                        frontier_phi_67_pred_4 = _2978;
                        frontier_phi_67_pred_5 = _2977;
                    }
                    _2645 = frontier_phi_67_pred;
                    _2647 = frontier_phi_67_pred_1;
                    _2649 = frontier_phi_67_pred_2;
                    _2643 = frontier_phi_67_pred_3;
                    _2641 = frontier_phi_67_pred_4;
                    _2639 = frontier_phi_67_pred_5;
                    uint _2784 = _2783 + 1u;
                    if (_2784 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2777 = _2639;
                        _2778 = _2641;
                        _2779 = _2643;
                        _2780 = _2645;
                        _2781 = _2647;
                        _2782 = _2649;
                        _2783 = _2784;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2647;
                frontier_phi_55_56_ladder_1 = _2649;
                frontier_phi_55_56_ladder_2 = _2645;
                frontier_phi_55_56_ladder_3 = _2643;
                frontier_phi_55_56_ladder_4 = _2641;
                frontier_phi_55_56_ladder_5 = _2639;
            }
            else
            {
                frontier_phi_55_56_ladder = _2524;
                frontier_phi_55_56_ladder_1 = _2526;
                frontier_phi_55_56_ladder_2 = _2522;
                frontier_phi_55_56_ladder_3 = _2520;
                frontier_phi_55_56_ladder_4 = _2518;
                frontier_phi_55_56_ladder_5 = _2516;
            }
            _2638 = frontier_phi_55_56_ladder_5;
            _2640 = frontier_phi_55_56_ladder_4;
            _2642 = frontier_phi_55_56_ladder_3;
            _2644 = frontier_phi_55_56_ladder_2;
            _2646 = frontier_phi_55_56_ladder;
            _2648 = frontier_phi_55_56_ladder_1;
        }
        float _2653 = isnan(1.0) ? _632 : (isnan(_632) ? 1.0 : min(_632, 1.0));
        _2393 = (_2653 * _2644) + _1826;
        _2395 = (_2653 * _2646) + _1828;
        _2397 = (_2653 * _2648) + _1830;
        _2399 = ((_2638 * _617) * _2653) + _2174;
        _2401 = ((_2640 * _619) * _2653) + _2176;
        _2403 = ((_2642 * _620) * _2653) + _2178;
    }
    else
    {
        _2393 = _1826;
        _2395 = _1828;
        _2397 = _1830;
        _2399 = _2174;
        _2401 = _2176;
        _2403 = _2178;
    }
    uint _2409 = _593 + uint(cbMatDynParam._m0[0u].w);
    float _2417 = ((_291 * cbMtdParam._m0[11u].x) * (_394.x + _379.x)) * cbInstanceData._m0[_2409].x;
    float _2420 = ((_291 * cbMtdParam._m0[11u].y) * (_394.y + _379.y)) * cbInstanceData._m0[_2409].y;
    float _2423 = ((_291 * cbMtdParam._m0[11u].z) * (_394.z + _379.z)) * cbInstanceData._m0[_2409].z;
    float _4314 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _4325 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _4336 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _2440 = (((isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_2393 + ((isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0))) * _632))) + ((_2399 + ((isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))) * _1442)) * cbPerFrame._m0[3u].x)) + _2417;
    float _2442 = (_2420 + ((_2401 + ((isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))) * _1442)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * (_2395 + ((isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0))) * _632)));
    float _2444 = (_2423 + ((_2403 + ((isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))) * _1442)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_2397 + ((isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0))) * _632)));
    float _4362 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2457 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
    uint _2458 = _592 + 6u;
    float _2466 = _552 / cbSceneParam._m0[86u].x;
    float _2467 = _553 / cbSceneParam._m0[86u].y;
    vec4 _2481 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2466, _2467, (log2((isnan(cbSceneParam._m0[77u].w) ? _486 : (isnan(_486) ? cbSceneParam._m0[77u].w : min(_486, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2483 = _2481.x;
    float _2484 = _2481.y;
    float _2485 = _2481.z;
    float _2486 = _2481.w;
    float _2579;
    float _2581;
    float _2583;
    float _2585;
    if (_486 > cbSceneParam._m0[78u].w)
    {
        float _2541 = isnan(_486) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _486 : min(cbSceneParam._m0[80u].w, _486));
        float _2542 = _2541 / _486;
        float _2553 = _2542 * _537;
        float _2554 = _538 * _2542;
        float _2555 = (-0.0) - _2554;
        float _2557 = _2542 * _539;
        float _2559 = (cbSceneParam._m0[77u].w * _2555) / _2541;
        float _2560 = _2559 + cbSceneParam._m0[79u].w;
        float _2561 = cbSceneParam._m0[79u].w - _2554;
        float _2567 = sqrt(((_2553 * _2553) + (_2554 * _2554)) + (_2557 * _2557));
        float _2570 = (1.0 - (cbSceneParam._m0[77u].w / _2541)) * _2567;
        float _2575 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2577 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2739;
        if (abs((_2555 - _2559) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2739 = ((((_2560 > 0.0) ? exp2(_2575 * _2560) : (2.0 - exp2(_2577 * _2560))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2570;
        }
        else
        {
            float _2699 = 1.0 / cbSceneParam._m0[80u].x;
            float _2700 = isnan(_2561) ? _2560 : (isnan(_2560) ? _2561 : max(_2560, _2561));
            float _2701 = isnan(_2561) ? _2560 : (isnan(_2560) ? _2561 : min(_2560, _2561));
            float _2710 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : min(_2700, 0.0));
            float _2711 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : min(_2701, 0.0));
            _2739 = ((abs(_2567 / _2555) * cbSceneParam._m0[80u].y) * ((((_2710 - _2711) * 2.0) - ((exp2(_2575 * (isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0)))) - exp2(_2575 * (isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0))))) * _2699)) - ((exp2(_2577 * _2710) - exp2(_2577 * _2711)) * _2699))) + (_2570 * cbSceneParam._m0[80u].z);
        }
        vec4 _2741 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2466, _2467, 1.0), 0.0);
        float _2750 = exp2((_2739 * (-1.44269502162933349609375)) * (1.0 - _2741.w));
        float _2751 = log2(_2750);
        float _2767 = log2(_2486);
        _2579 = (exp2(_2767 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2751 * cbSceneParam._m0[78u].x)) * _2741.x) / cbSceneParam._m0[78u].x)) + _2483;
        _2581 = (exp2(_2767 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2751 * cbSceneParam._m0[78u].y)) * _2741.y) / cbSceneParam._m0[78u].y)) + _2484;
        _2583 = (exp2(_2767 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2751 * cbSceneParam._m0[78u].z)) * _2741.z) / cbSceneParam._m0[78u].z)) + _2485;
        _2585 = _2750 * _2486;
    }
    else
    {
        _2579 = _2483;
        _2581 = _2484;
        _2583 = _2485;
        _2585 = _2486;
    }
    float _2597 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2598 = _2597 == 3.0;
    float _2599 = log2(_2585);
    float _2603 = exp2(_2599 * cbSceneParam._m0[78u].x);
    float _2604 = exp2(_2599 * cbSceneParam._m0[78u].y);
    float _2605 = exp2(_2599 * cbSceneParam._m0[78u].z);
    float _2606 = _2603 * (isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0)));
    float _2607 = _2604 * (isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0)));
    float _2608 = _2605 * (isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0)));
    float _2617 = (_2597 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2617 * (_2598 ? _2606 : (_2606 + (cbSceneParam._m0[72u].w * _2579)));
    SV_Target.y = _2617 * (_2598 ? _2607 : (_2607 + (cbSceneParam._m0[72u].w * _2581)));
    SV_Target.z = _2617 * (_2598 ? _2608 : (_2608 + (cbSceneParam._m0[72u].w * _2583)));
    SV_Target.w = cbInstanceData._m0[_2458].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2417) * _2457) * _2603) * _2617;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2420) * _2457) * _2604) * _2617;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2423) * _2457) * _2605) * _2617;
    SV_Target_1.w = cbInstanceData._m0[_2458].w;
}


