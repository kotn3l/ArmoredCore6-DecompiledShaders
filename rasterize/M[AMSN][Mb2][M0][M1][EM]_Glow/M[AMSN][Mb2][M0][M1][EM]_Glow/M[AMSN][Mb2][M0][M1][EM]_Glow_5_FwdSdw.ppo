#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1078;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _247 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _253 = _247.x * cbMtdParam._m0[9u].x;
    float _254 = _247.y * cbMtdParam._m0[9u].y;
    float _255 = _247.z * cbMtdParam._m0[9u].z;
    vec4 _293 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _309 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3714 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _310 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    float _317 = (((_293.x * cbMtdParam._m0[10u].x) - _253) * _310) + _253;
    float _318 = (((_293.y * cbMtdParam._m0[10u].y) - _254) * _310) + _254;
    float _319 = (((_293.z * cbMtdParam._m0[10u].z) - _255) * _310) + _255;
    vec4 _339 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _358 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_339.x + 0.00999999977648258209228515625));
    float _360 = _358 * (cbMtdParam._m0[15u].x + 1.0);
    float _3725 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _361 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _369 = ((((cbMtdParam._m0[12u].x - _317) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _361) + _317;
    float _370 = ((((cbMtdParam._m0[12u].y - _318) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _361) + _318;
    float _371 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _319)) * _361) + _319;
    vec4 _384 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _392 = (_384.x * 2.0) + (-1.0);
    float _394 = (_384.y * 2.0) + (-1.0);
    float _395 = dot(vec2(_392, _394), vec2(_392, _394));
    float _3736 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    vec4 _412 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _416 = _412.z;
    float _419 = (_412.x * 2.0) + (-1.0);
    float _420 = (_412.y * 2.0) + (-1.0);
    float _421 = dot(vec2(_419, _420), vec2(_419, _420));
    float _3747 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _426 = sqrt(1.0 - (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))));
    float _429 = (_310 * (_384.z - _416)) + _416;
    float _432 = _358 * (cbMtdParam._m0[14u].w + 1.0);
    float _3758 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _436 = ((cbMtdParam._m0[14u].y - _429) * (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0)))) + _429;
    vec4 _463 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _478 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _492 = (_310 * (_392 - _419)) + _419;
    float _493 = (_310 * (_394 - _420)) + _420;
    float _494 = (_310 * (sqrt(1.0 - (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0)))) - _426)) + _426;
    vec4 _513 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _519 = (_513.x * 2.0) + (-1.0);
    float _520 = (_513.y * 2.0) + (-1.0);
    float _521 = dot(vec2(_519, _520), vec2(_519, _520));
    float _3769 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _537 = (_361 * (((_492 * cbMtdParam._m0[13u].z) - _492) + _519)) + _492;
    float _538 = (_361 * (((_493 * cbMtdParam._m0[13u].z) - _493) + _520)) + _493;
    float _539 = (_361 * (sqrt(1.0 - (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0)))) - _494)) + _494;
    float _542 = fma(_539, _218 * NORMAL.x, fma(_538, _225 * TANGENT.x, (_211 * _203) * _537));
    float _545 = fma(_539, _218 * NORMAL.y, fma(_538, _225 * TANGENT.y, (_211 * _204) * _537));
    float _548 = fma(_539, _218 * NORMAL.z, fma(_538, _225 * TANGENT.z, (_211 * _205) * _537));
    float _552 = inversesqrt(dot(vec3(_542, _545, _548), vec3(_542, _545, _548)));
    float _553 = _552 * _542;
    float _554 = _552 * _545;
    float _555 = _552 * _548;
    float _3780 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _556 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _3791 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _3802 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _3813 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _575 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _616 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _626 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _616);
    float _627 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _616);
    float _628 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _616);
    float _632 = inversesqrt(dot(vec3(_626, _627, _628), vec3(_626, _627, _628)));
    float _633 = _626 * _632;
    float _634 = _627 * _632;
    float _635 = _628 * _632;
    float _641 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _642 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _662 = fma(_555, cbSceneParam._m0[5u].z, fma(_554, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _553));
    float _665 = fma(_555, cbSceneParam._m0[6u].z, fma(_554, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _553));
    float _668 = fma(_555, cbSceneParam._m0[7u].z, fma(_554, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _553));
    uint _681 = uint(roundEven(NORMAL.w)) * 13u;
    uint _682 = _681 + 9u;
    uint _683 = _682 + uint(cbMatDynParam._m0[0u].w);
    float _689 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0)))) * cbInstanceData._m0[_683].x;
    float _690 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0)))) * cbInstanceData._m0[_683].y;
    float _691 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0)))) * cbInstanceData._m0[_683].z;
    float _3824 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _692 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _3835 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _693 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _3846 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _694 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    vec4 _703 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _641, cbSceneParam._m0[86u].y * _642));
    float _706 = _703.x * TEXCOORD_3.w;
    float _707 = dot(vec3(_553, _554, _555), vec3(_633, _634, _635));
    float _710 = _707 * 2.0;
    float _714 = (_710 * _553) - _633;
    float _715 = (_710 * _554) - _634;
    float _716 = (_710 * _555) - _635;
    float _720 = abs(dot(vec3(_633, _634, _635), vec3(_553, _554, _555)));
    float _3857 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _722 = sqrt(_556);
    float _735 = exp2((_722 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_722 * 3.0));
    float _767 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _771 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _775 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1077;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _802 = fma(_775, cbModelParam._m0[26u].z, fma(_771, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _767));
        float _806 = fma(_775, cbModelParam._m0[27u].z, fma(_771, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _767));
        float _810 = fma(_775, cbModelParam._m0[28u].z, fma(_771, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _767));
        float _835 = _767 + _553;
        float _836 = _771 + _554;
        float _837 = _775 + _555;
        float _847 = fma(_837, cbModelParam._m0[26u].z, fma(_836, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _835)) - _802;
        float _848 = fma(_837, cbModelParam._m0[27u].z, fma(_836, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _835)) - _806;
        float _849 = fma(_837, cbModelParam._m0[28u].z, fma(_836, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _835)) - _810;
        float _853 = inversesqrt(dot(vec3(_847, _848, _849), vec3(_847, _848, _849)));
        float _866 = ((_853 * _847) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_802 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _867 = ((_853 * _848) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_806 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _868 = ((_853 * _849) / cbModelParam._m0[34u].z) + ((((((_810 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _871 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        vec4 _878 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        vec4 _885 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        vec4 _892 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        float _905 = exp2((_871.w + (-0.5)) * 20.0) * 2.0;
        float _906 = _905 * (_871.x + (-0.5));
        float _907 = _905 * (_871.y + (-0.5));
        float _908 = _905 * (_871.z + (-0.5));
        float _915 = exp2((_878.w + (-0.5)) * 20.0) * 2.0;
        float _916 = _915 * (_878.x + (-0.5));
        float _917 = _915 * (_878.y + (-0.5));
        float _918 = _915 * (_878.z + (-0.5));
        float _925 = exp2((_885.w + (-0.5)) * 20.0) * 2.0;
        float _926 = _925 * (_885.x + (-0.5));
        float _927 = _925 * (_885.y + (-0.5));
        float _928 = _925 * (_885.z + (-0.5));
        float _935 = exp2((_892.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_892.x + (-0.5));
        float _937 = _935 * (_892.y + (-0.5));
        float _938 = _935 * (_892.z + (-0.5));
        float _939 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _940 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _941 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _942 = _906 * 0.5;
        float _943 = _916 * 0.5;
        float _944 = _926 * 0.5;
        float _945 = dot(vec3(_942, _943, _944), vec3(_942, _943, _944));
        float _950 = (_945 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_945);
        float _959 = (dot(vec3(_553, _554, _555), vec3(_950 * _942, _950 * _943, _950 * _944)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _969 = sqrt(((_943 * _943) + (_942 * _942)) + (_944 * _944)) / (_939 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _971 = _970 * 2.0;
        float _975 = (1.0 - _970) / (_970 + 1.0);
        float _3905 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _985 = ((((1.0 - _976) * (_971 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_971 + 1.0))) + _976) * _939;
        float _986 = _907 * 0.5;
        float _987 = _917 * 0.5;
        float _988 = _927 * 0.5;
        float _989 = dot(vec3(_986, _987, _988), vec3(_986, _987, _988));
        float _994 = (_989 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_989);
        float _1002 = (dot(vec3(_553, _554, _555), vec3(_994 * _986, _994 * _987, _994 * _988)) + 1.0) * 0.5;
        float _3916 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1011 = sqrt(((_987 * _987) + (_986 * _986)) + (_988 * _988)) / (_940 + 9.9999997473787516355514526367188e-06);
        float _3927 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1013 = _1012 * 2.0;
        float _1017 = (1.0 - _1012) / (_1012 + 1.0);
        float _3938 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1027 = ((((1.0 - _1018) * (_1013 + 2.0)) * exp2(log2(isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1013 + 1.0))) + _1018) * _940;
        float _1028 = _908 * 0.5;
        float _1029 = _918 * 0.5;
        float _1030 = _928 * 0.5;
        float _1031 = dot(vec3(_1028, _1029, _1030), vec3(_1028, _1029, _1030));
        float _1036 = (_1031 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1031);
        float _1044 = (dot(vec3(_553, _554, _555), vec3(_1036 * _1028, _1036 * _1029, _1036 * _1030)) + 1.0) * 0.5;
        float _3949 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1053 = sqrt(((_1029 * _1029) + (_1028 * _1028)) + (_1030 * _1030)) / (_941 + 9.9999997473787516355514526367188e-06);
        float _3960 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1055 = _1054 * 2.0;
        float _1059 = (1.0 - _1054) / (_1054 + 1.0);
        float _3971 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1069 = ((((1.0 - _1060) * (_1055 + 2.0)) * exp2(log2(isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_1055 + 1.0))) + _1060) * _941;
        _1077 = _908;
        _1079 = _907;
        _1080 = _906;
        _1081 = _918;
        _1082 = _917;
        _1083 = _916;
        _1084 = _928;
        _1085 = _927;
        _1086 = _926;
        _1087 = _941;
        _1088 = _940;
        _1089 = _939;
        _1090 = cbModelParam._m0[36u].z * (isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0)));
        _1091 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0)));
        _1092 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0)));
    }
    else
    {
        _1077 = _1078;
        _1079 = _1078;
        _1080 = _1078;
        _1081 = _1078;
        _1082 = _1078;
        _1083 = _1078;
        _1084 = _1078;
        _1085 = _1078;
        _1086 = _1078;
        _1087 = _1078;
        _1088 = _1078;
        _1089 = _1078;
        _1090 = 0.0;
        _1091 = 0.0;
        _1092 = 0.0;
    }
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1118 = fma(_775, cbModelParam._m0[30u].z, fma(_771, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _767));
        float _1122 = fma(_775, cbModelParam._m0[31u].z, fma(_771, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _767));
        float _1126 = fma(_775, cbModelParam._m0[32u].z, fma(_771, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _767));
        float _1149 = _767 + _553;
        float _1150 = _771 + _554;
        float _1151 = _775 + _555;
        float _1161 = fma(_1151, cbModelParam._m0[30u].z, fma(_1150, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1149)) - _1118;
        float _1162 = fma(_1151, cbModelParam._m0[31u].z, fma(_1150, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1149)) - _1122;
        float _1163 = fma(_1151, cbModelParam._m0[32u].z, fma(_1150, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1149)) - _1126;
        float _1167 = inversesqrt(dot(vec3(_1161, _1162, _1163), vec3(_1161, _1162, _1163)));
        float _1180 = ((_1167 * _1161) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1118 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1181 = ((_1167 * _1162) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1122 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1182 = ((_1167 * _1163) / cbModelParam._m0[35u].z) + ((((((_1126 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1180, _1181, _1182), 0.0);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1180, _1181, _1182), 0.0);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1180, _1181, _1182), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1180, _1181, _1182), 0.0);
        float _1217 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1184.x + (-0.5));
        float _1219 = _1217 * (_1184.y + (-0.5));
        float _1220 = _1217 * (_1184.z + (-0.5));
        float _1227 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1191.x + (-0.5));
        float _1229 = _1227 * (_1191.y + (-0.5));
        float _1230 = _1227 * (_1191.z + (-0.5));
        float _1237 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1198.x + (-0.5));
        float _1239 = _1237 * (_1198.y + (-0.5));
        float _1240 = _1237 * (_1198.z + (-0.5));
        float _1247 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1205.x + (-0.5));
        float _1249 = _1247 * (_1205.y + (-0.5));
        float _1250 = _1247 * (_1205.z + (-0.5));
        float _1251 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1252 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1253 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1254 = _1218 * 0.5;
        float _1255 = _1228 * 0.5;
        float _1256 = _1238 * 0.5;
        float _1257 = dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256));
        float _1262 = (_1257 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1257);
        float _1270 = (dot(vec3(_553, _554, _555), vec3(_1262 * _1254, _1262 * _1255, _1262 * _1256)) + 1.0) * 0.5;
        float _4012 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1279 = sqrt(((_1255 * _1255) + (_1254 * _1254)) + (_1256 * _1256)) / (_1251 + 9.9999997473787516355514526367188e-06);
        float _4023 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1281 = _1280 * 2.0;
        float _1285 = (1.0 - _1280) / (_1280 + 1.0);
        float _4034 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1295 = ((((1.0 - _1286) * (_1281 + 2.0)) * exp2(log2(isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_1281 + 1.0))) + _1286) * _1251;
        float _1296 = _1219 * 0.5;
        float _1297 = _1229 * 0.5;
        float _1298 = _1239 * 0.5;
        float _1299 = dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298));
        float _1304 = (_1299 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1299);
        float _1312 = (dot(vec3(_553, _554, _555), vec3(_1304 * _1296, _1304 * _1297, _1304 * _1298)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1321 = sqrt(((_1297 * _1297) + (_1296 * _1296)) + (_1298 * _1298)) / (_1252 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1323 = _1322 * 2.0;
        float _1327 = (1.0 - _1322) / (_1322 + 1.0);
        float _4067 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1337 = ((((1.0 - _1328) * (_1323 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1323 + 1.0))) + _1328) * _1252;
        float _1338 = _1220 * 0.5;
        float _1339 = _1230 * 0.5;
        float _1340 = _1240 * 0.5;
        float _1341 = dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340));
        float _1346 = (_1341 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1341);
        float _1354 = (dot(vec3(_553, _554, _555), vec3(_1346 * _1338, _1346 * _1339, _1346 * _1340)) + 1.0) * 0.5;
        float _4078 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1363 = sqrt(((_1339 * _1339) + (_1338 * _1338)) + (_1340 * _1340)) / (_1253 + 9.9999997473787516355514526367188e-06);
        float _4089 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1365 = _1364 * 2.0;
        float _1369 = (1.0 - _1364) / (_1364 + 1.0);
        float _4100 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1379 = ((((1.0 - _1370) * (_1365 + 2.0)) * exp2(log2(isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_1365 + 1.0))) + _1370) * _1253;
        _1387 = _1220;
        _1388 = _1219;
        _1389 = _1218;
        _1390 = _1230;
        _1391 = _1229;
        _1392 = _1228;
        _1393 = _1240;
        _1394 = _1239;
        _1395 = _1238;
        _1396 = _1253;
        _1397 = _1252;
        _1398 = _1251;
        _1399 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)));
        _1400 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)));
        _1401 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)));
    }
    else
    {
        _1387 = _1078;
        _1388 = _1078;
        _1389 = _1078;
        _1390 = _1078;
        _1391 = _1078;
        _1392 = _1078;
        _1393 = _1078;
        _1394 = _1078;
        _1395 = _1078;
        _1396 = _1078;
        _1397 = _1078;
        _1398 = _1078;
        _1399 = 0.0;
        _1400 = 0.0;
        _1401 = 0.0;
    }
    float _1411 = (cbModelParam._m0[1u].x * (_1399 - _1090)) + _1090;
    float _1412 = (cbModelParam._m0[1u].x * (_1400 - _1091)) + _1091;
    float _1413 = (cbModelParam._m0[1u].x * (_1401 - _1092)) + _1092;
    float _1434 = fma(_1413, cbSceneParam._m0[89u].z, fma(_1412, cbSceneParam._m0[89u].y, _1411 * cbSceneParam._m0[89u].x));
    float _1437 = fma(_1413, cbSceneParam._m0[90u].z, fma(_1412, cbSceneParam._m0[90u].y, _1411 * cbSceneParam._m0[90u].x));
    float _1440 = fma(_1413, cbSceneParam._m0[91u].z, fma(_1412, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1411));
    float _1455 = _714 * 0.5;
    float _1456 = _715 * 0.5;
    float _1457 = _716 * 0.5;
    float _1458 = dot(vec4(_1455, _1456, _1457, 1.0), vec4(_1389, _1392, _1395, _1398));
    float _1461 = dot(vec4(_1455, _1456, _1457, 1.0), vec4(_1388, _1391, _1394, _1397));
    float _1464 = dot(vec4(_1455, _1456, _1457, 1.0), vec4(_1387, _1390, _1393, _1396));
    float _1498;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1471 = dot(vec4(_1455, _1456, _1457, 1.0), vec4(_1077, _1081, _1084, _1087));
        float _1475 = dot(vec4(_1455, _1456, _1457, 1.0), vec4(_1079, _1082, _1085, _1088));
        float _1479 = dot(vec4(_1455, _1456, _1457, 1.0), vec4(_1080, _1083, _1086, _1089));
        float _1486 = dot(vec4(cbModelParam._m0[39u]), vec4(_1455, _1456, _1457, 1.0));
        _1498 = dot(vec3(isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)), isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)), isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1486) ? 0.0 : (isnan(0.0) ? _1486 : max(0.0, _1486))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1498 = 1.0;
    }
    float _1509;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1500 = dot(vec4(cbModelParam._m0[40u]), vec4(_1455, _1456, _1457, 1.0));
        _1509 = dot(vec3(isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)), isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)), isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1500) ? 0.0 : (isnan(0.0) ? _1500 : max(0.0, _1500))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1509 = 1.0;
    }
    float _1513 = (_1509 * cbModelParam._m0[1u].x) + (_1498 * (1.0 - cbModelParam._m0[1u].x));
    float _1523 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _556);
    float _1524 = isnan(_1523) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1523 : min(cbModelParam._m0[25u].z, _1523));
    float _1604;
    float _1606;
    float _1608;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1571 = fma(_775, cbModelParam._m0[13u].z, fma(_771, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _767)) + cbModelParam._m0[13u].w;
        float _1575 = fma(_775, cbModelParam._m0[14u].z, fma(_771, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _767)) + cbModelParam._m0[14u].w;
        float _1579 = fma(_775, cbModelParam._m0[15u].z, fma(_771, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _767)) + cbModelParam._m0[15u].w;
        float _1582 = fma(_716, cbModelParam._m0[13u].z, fma(_715, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _714));
        float _1585 = fma(_716, cbModelParam._m0[14u].z, fma(_715, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _714));
        float _1588 = fma(_716, cbModelParam._m0[15u].z, fma(_715, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _714));
        float _1616;
        if (_1582 > 0.0)
        {
            _1616 = abs((1.0 - _1571) / _1582);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1582 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1571 + 1.0) / _1582);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1616 = frontier_phi_14_12_ladder;
        }
        float _1787;
        if (_1585 > 0.0)
        {
            _1787 = abs((1.0 - _1575) / _1585);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1585 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1575 + 1.0) / _1585);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1787 = frontier_phi_23_19_ladder;
        }
        float _2082;
        if (_1588 > 0.0)
        {
            _2082 = abs((1.0 - _1579) / _1588);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1588 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1579 + 1.0) / _1588);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2082 = frontier_phi_35_30_ladder;
        }
        float _2084 = isnan(_1787) ? _1616 : (isnan(_1616) ? _1787 : min(_1616, _1787));
        float _2085 = isnan(_2082) ? _2084 : (isnan(_2084) ? _2082 : min(_2084, _2082));
        float _2089 = (_2085 * _1582) + _1571;
        float _2090 = (_2085 * _1585) + _1575;
        float _2091 = (_2085 * _1588) + _1579;
        float _2092 = _2085 * 9.9999997473787516355514526367188e-05;
        float _2094 = (-1.0) - _2092;
        float _2096 = _2092 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2091 > _2096) || ((_2091 < _2094) || ((_2090 > _2096) || ((_2090 < _2094) || ((_2089 < _2094) || (_2089 > _2096))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2236 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2091, cbModelParam._m0[9u].z, fma(_2090, cbModelParam._m0[9u].y, _2089 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2091, cbModelParam._m0[10u].z, fma(_2090, cbModelParam._m0[10u].y, _2089 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2091, cbModelParam._m0[11u].z, fma(_2090, cbModelParam._m0[11u].y, _2089 * cbModelParam._m0[11u].x))), _1524);
            frontier_phi_13_35_ladder = _2236.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2236.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2236.x * cbModelParam._m0[1u].y;
        }
        _1604 = frontier_phi_13_35_ladder_2;
        _1606 = frontier_phi_13_35_ladder_1;
        _1608 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1592 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_714, _715, _716), _1524);
        _1604 = _1592.x * cbModelParam._m0[1u].y;
        _1606 = _1592.y * cbModelParam._m0[1u].y;
        _1608 = _1592.z * cbModelParam._m0[1u].y;
    }
    float _1612 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _556);
    float _1613 = isnan(_1612) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1612 : min(cbModelParam._m0[25u].w, _1612));
    float _1704;
    float _1706;
    float _1708;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1668 = fma(_775, cbModelParam._m0[21u].z, fma(_771, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _767)) + cbModelParam._m0[21u].w;
        float _1672 = fma(_775, cbModelParam._m0[22u].z, fma(_771, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _767)) + cbModelParam._m0[22u].w;
        float _1676 = fma(_775, cbModelParam._m0[23u].z, fma(_771, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _767)) + cbModelParam._m0[23u].w;
        float _1679 = fma(_716, cbModelParam._m0[21u].z, fma(_715, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _714));
        float _1682 = fma(_716, cbModelParam._m0[22u].z, fma(_715, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _714));
        float _1685 = fma(_716, cbModelParam._m0[23u].z, fma(_715, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _714));
        float _1792;
        if (_1679 > 0.0)
        {
            _1792 = abs((1.0 - _1668) / _1679);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1668 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1792 = frontier_phi_25_21_ladder;
        }
        float _2109;
        if (_1682 > 0.0)
        {
            _2109 = abs((1.0 - _1672) / _1682);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1672 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2109 = frontier_phi_37_32_ladder;
        }
        float _2436;
        if (_1685 > 0.0)
        {
            _2436 = abs((1.0 - _1676) / _1685);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1685 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1676 + 1.0) / _1685);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2436 = frontier_phi_47_44_ladder;
        }
        float _2438 = isnan(_2109) ? _1792 : (isnan(_1792) ? _2109 : min(_1792, _2109));
        float _2439 = isnan(_2436) ? _2438 : (isnan(_2438) ? _2436 : min(_2438, _2436));
        float _2443 = (_2439 * _1679) + _1668;
        float _2444 = (_2439 * _1682) + _1672;
        float _2445 = (_2439 * _1685) + _1676;
        float _2446 = _2439 * 9.9999997473787516355514526367188e-05;
        float _2447 = (-1.0) - _2446;
        float _2449 = _2446 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2445 > _2449) || ((_2445 < _2447) || ((_2444 > _2449) || ((_2444 < _2447) || ((_2443 < _2447) || (_2443 > _2449))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2563 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2445, cbModelParam._m0[17u].z, fma(_2444, cbModelParam._m0[17u].y, _2443 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2445, cbModelParam._m0[18u].z, fma(_2444, cbModelParam._m0[18u].y, _2443 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2445, cbModelParam._m0[19u].z, fma(_2444, cbModelParam._m0[19u].y, _2443 * cbModelParam._m0[19u].x))), _1613);
            frontier_phi_22_47_ladder = _2563.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2563.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2563.x * cbModelParam._m0[1u].z;
        }
        _1704 = frontier_phi_22_47_ladder_2;
        _1706 = frontier_phi_22_47_ladder_1;
        _1708 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1688 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_714, _715, _716), _1613);
        _1704 = _1688.x * cbModelParam._m0[1u].z;
        _1706 = _1688.y * cbModelParam._m0[1u].z;
        _1708 = _1688.z * cbModelParam._m0[1u].z;
    }
    float _1720 = ((((1.0 - _735) * ((_722 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_735 * _722)) * _706;
    float _1721 = _1720 * ((cbModelParam._m0[1u].w * (_1704 - _1604)) + _1604);
    float _1722 = _1720 * ((cbModelParam._m0[1u].w * (_1706 - _1606)) + _1606);
    float _1723 = _1720 * ((cbModelParam._m0[1u].w * (_1708 - _1608)) + _1608);
    float _1726 = fma(_1723, cbSceneParam._m0[89u].z, fma(_1722, cbSceneParam._m0[89u].y, _1721 * cbSceneParam._m0[89u].x));
    float _1729 = fma(_1723, cbSceneParam._m0[90u].z, fma(_1722, cbSceneParam._m0[90u].y, _1721 * cbSceneParam._m0[90u].x));
    float _1732 = fma(_1723, cbSceneParam._m0[91u].z, fma(_1722, cbSceneParam._m0[91u].y, _1721 * cbSceneParam._m0[91u].x));
    float _1766 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1770 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1774 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1778 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1779 = _1766 / _1778;
    float _1780 = _1770 / _1778;
    float _1781 = _1774 / _1778;
    float _1928;
    float _1929;
    float _1930;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1808 = ((uint(_1781 > cbSceneParam._m0[59u].y) + uint(_1781 > cbSceneParam._m0[59u].x)) + uint(_1781 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1809 = _1808 + 43u;
        uint _1817 = _1808 + 44u;
        uint _1825 = _1808 + 45u;
        uint _1833 = _1808 + 46u;
        float _1844 = fma(_1778, cbSceneParam._m0[_1809].w, fma(_1774, cbSceneParam._m0[_1809].z, fma(_1770, cbSceneParam._m0[_1809].y, _1766 * cbSceneParam._m0[_1809].x)));
        float _1848 = fma(_1778, cbSceneParam._m0[_1817].w, fma(_1774, cbSceneParam._m0[_1817].z, fma(_1770, cbSceneParam._m0[_1817].y, _1766 * cbSceneParam._m0[_1817].x)));
        float _1856 = fma(_1778, cbSceneParam._m0[_1833].w, fma(_1774, cbSceneParam._m0[_1833].z, fma(_1770, cbSceneParam._m0[_1833].y, _1766 * cbSceneParam._m0[_1833].x)));
        float _1861 = cbSceneParam._m0[33u].z * _1856;
        float _1863 = cbSceneParam._m0[33u].w * _1856;
        float _1866 = fma(_1778, cbSceneParam._m0[_1825].w, fma(_1774, cbSceneParam._m0[_1825].z, fma(_1770, cbSceneParam._m0[_1825].y, _1766 * cbSceneParam._m0[_1825].x))) / _1856;
        float _1914 = (cbSceneParam._m0[33u].x - sqrt(((_1780 * _1780) + (_1779 * _1779)) + (_1781 * _1781))) * cbSceneParam._m0[33u].y;
        float _4226 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
        float _1921 = (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1861 + _1844) / _1856, (_1863 + _1848) / _1856), _1866), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1863 + _1844) / _1856, (_1848 - _1861) / _1856), _1866), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1844 - _1861) / _1856, (_1848 - _1863) / _1856), _1866), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1844 - _1863) / _1856, (_1861 + _1848) / _1856), _1866), 0.0)).x), vec4(0.25)));
        _1928 = 1.0 - (_1921 * cbSceneParam._m0[34u].x);
        _1929 = 1.0 - (_1921 * cbSceneParam._m0[34u].y);
        _1930 = 1.0 - (_1921 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1928 = 1.0;
        _1929 = 1.0;
        _1930 = 1.0;
    }
    float _1994;
    float _1996;
    float _1998;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1982 = fma(_1778, cbSceneParam._m0[63u].w, fma(_1774, cbSceneParam._m0[63u].z, fma(_1770, cbSceneParam._m0[63u].y, _1766 * cbSceneParam._m0[63u].x)));
        float _1983 = fma(_1778, cbSceneParam._m0[60u].w, fma(_1774, cbSceneParam._m0[60u].z, fma(_1770, cbSceneParam._m0[60u].y, _1766 * cbSceneParam._m0[60u].x))) / _1982;
        float _1984 = fma(_1778, cbSceneParam._m0[61u].w, fma(_1774, cbSceneParam._m0[61u].z, fma(_1770, cbSceneParam._m0[61u].y, _1766 * cbSceneParam._m0[61u].x))) / _1982;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1983 >= cbSceneParam._m0[64u].x) && (_1984 >= cbSceneParam._m0[64u].y)) && (_1983 <= cbSceneParam._m0[64u].z)) && (_1984 <= cbSceneParam._m0[64u].w))
        {
            float _2122 = fma(_1778, cbSceneParam._m0[62u].w, fma(_1774, cbSceneParam._m0[62u].z, fma(_1770, cbSceneParam._m0[62u].y, _1766 * cbSceneParam._m0[62u].x))) / _1982;
            float _2126 = isnan(cbSceneParam._m0[41u].w) ? _2122 : (isnan(_2122) ? cbSceneParam._m0[41u].w : max(_2122, cbSceneParam._m0[41u].w));
            float _2169 = (cbSceneParam._m0[33u].x - sqrt(((_1780 * _1780) + (_1779 * _1779)) + (_1781 * _1781))) * cbSceneParam._m0[33u].y;
            float _4242 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
            float _2176 = (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1983, cbSceneParam._m0[33u].w + _1984), _2126), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1983, _1984 - cbSceneParam._m0[33u].z), _2126), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1983 - cbSceneParam._m0[33u].z, _1984 - cbSceneParam._m0[33u].w), _2126), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1983 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1984), _2126), 0.0)).x), vec4(0.25)));
            float _2180 = 1.0 - (_2176 * cbSceneParam._m0[34u].x);
            float _2181 = 1.0 - (_2176 * cbSceneParam._m0[34u].y);
            float _2182 = 1.0 - (_2176 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2182) ? _1930 : (isnan(_1930) ? _2182 : min(_1930, _2182));
            frontier_phi_34_33_ladder_1 = isnan(_2181) ? _1929 : (isnan(_1929) ? _2181 : min(_1929, _2181));
            frontier_phi_34_33_ladder_2 = isnan(_2180) ? _1928 : (isnan(_1928) ? _2180 : min(_1928, _2180));
        }
        else
        {
            frontier_phi_34_33_ladder = _1930;
            frontier_phi_34_33_ladder_1 = _1929;
            frontier_phi_34_33_ladder_2 = _1928;
        }
        _1994 = frontier_phi_34_33_ladder_2;
        _1996 = frontier_phi_34_33_ladder_1;
        _1998 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1994 = _1928;
        _1996 = _1929;
        _1998 = _1930;
    }
    uvec4 _2003 = floatBitsToUint(cbInstanceData._m0[_681 + 5u]);
    uint _2005 = _2003.x * 14u;
    uint _2006 = _2005 + 13u;
    float _2013 = _706 + (-1.0);
    float _2018 = (cbLight._m0[_2006].x * _2013) + 1.0;
    float _2019 = (cbLight._m0[_2006].y * _2013) + 1.0;
    float _2020 = (cbLight._m0[_2006].z * _2013) + 1.0;
    float _2021 = (cbLight._m0[_2006].w * _2013) + 1.0;
    uint _2022 = _2005 + 5u;
    float _2028 = isnan(1.0) ? _2019 : (isnan(_2019) ? 1.0 : min(_2019, 1.0));
    uint _2032 = _2005 + 4u;
    float _2041 = isnan(1.0) ? _2018 : (isnan(_2018) ? 1.0 : min(_2018, 1.0));
    uint _2045 = _2005 | 1u;
    float _2056 = dot(vec3(cbLight._m0[_2005].xyz), vec3(_553, _554, _555));
    float _2059 = dot(vec3(cbLight._m0[_2045].xyz), vec3(_553, _554, _555));
    float _4278 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _4289 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2064 = (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * 0.3183098733425140380859375;
    float _2066 = (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * 0.3183098733425140380859375;
    float _2073 = ((cbLight._m0[_2022].x * _2028) * _2066) + (((cbLight._m0[_2032].x * _1994) * _2041) * _2064);
    float _2074 = ((_2028 * cbLight._m0[_2022].y) * _2066) + (((cbLight._m0[_2032].y * _1996) * _2041) * _2064);
    float _2075 = ((_2028 * cbLight._m0[_2022].z) * _2066) + (((cbLight._m0[_2032].z * _1998) * _2041) * _2064);
    uvec4 _2079 = floatBitsToUint(cbLight._m0[_2005 + 12u]);
    bool _2081 = _2079.x == 0u;
    float _2183;
    float _2185;
    float _2187;
    if (_2081)
    {
        _2183 = _2073;
        _2185 = _2074;
        _2187 = _2075;
    }
    else
    {
        uint _2191 = _2005 + 6u;
        float _2207 = (dot(vec3(cbLight._m0[_2005 + 2u].xyz), vec3(_553, _554, _555)) * 0.5) + 0.5;
        float _2208 = _2207 * _2207;
        float _4300 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2209 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _2210 = isnan(1.0) ? _2020 : (isnan(_2020) ? 1.0 : min(_2020, 1.0));
        _2183 = (((cbLight._m0[_2191].x * 0.3183098733425140380859375) * _2209) * _2210) + _2073;
        _2185 = (((cbLight._m0[_2191].y * 0.3183098733425140380859375) * _2209) * _2210) + _2074;
        _2187 = (((cbLight._m0[_2191].z * 0.3183098733425140380859375) * _2209) * _2210) + _2075;
    }
    bool _2190 = _2079.y == 0u;
    float _2245;
    float _2247;
    float _2249;
    if (_2190)
    {
        _2245 = _2183;
        _2247 = _2185;
        _2249 = _2187;
    }
    else
    {
        uint _2407 = _2005 + 7u;
        float _2423 = (dot(vec3(cbLight._m0[_2005 + 3u].xyz), vec3(_553, _554, _555)) * 0.5) + 0.5;
        float _2424 = _2423 * _2423;
        float _4316 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2425 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _2426 = isnan(1.0) ? _2021 : (isnan(_2021) ? 1.0 : min(_2021, 1.0));
        _2245 = (((cbLight._m0[_2407].x * 0.3183098733425140380859375) * _2425) * _2426) + _2183;
        _2247 = (((cbLight._m0[_2407].y * 0.3183098733425140380859375) * _2425) * _2426) + _2185;
        _2249 = (((cbLight._m0[_2407].z * 0.3183098733425140380859375) * _2425) * _2426) + _2187;
    }
    uint _2252 = _2005 + 8u;
    float _2265 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2005].w)) * _556) * 0.949999988079071044921875);
    float _2266 = _2265 * _2265;
    float _2267 = cbLight._m0[_2005].x + _633;
    float _2268 = cbLight._m0[_2005].y + _634;
    float _2269 = cbLight._m0[_2005].z + _635;
    float _2273 = inversesqrt(dot(vec3(_2267, _2268, _2269), vec3(_2267, _2268, _2269)));
    float _2274 = _2273 * _2267;
    float _2275 = _2273 * _2268;
    float _2276 = _2273 * _2269;
    float _2277 = dot(vec3(_553, _554, _555), vec3(cbLight._m0[_2005].xyz));
    float _4332 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2280 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
    float _4343 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _2281 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
    float _2282 = dot(vec3(_553, _554, _555), vec3(_2274, _2275, _2276));
    float _4354 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2285 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
    float _2286 = dot(vec3(cbLight._m0[_2005].xyz), vec3(_2274, _2275, _2276));
    float _4365 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2290 = _2266 * _2266;
    float _2294 = ((_2285 * _2285) * (_2290 + (-1.0))) + 1.0;
    float _2305 = (exp2(log2(1.0 - (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2306 = 1.0 - _2266;
    float _2317 = (0.5 / (((_2281 * ((_2280 * _2306) + _2266)) + 9.9999999392252902907785028219223e-09) + (((_2281 * _2306) + _2266) * _2280))) * _2280;
    float _4376 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2319 = (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_2290 / ((_2294 * _2294) * 3.141590118408203125));
    uint _2333 = _2005 + 9u;
    float _2344 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2045].w)) * _556) * 0.949999988079071044921875);
    float _2345 = _2344 * _2344;
    float _2346 = cbLight._m0[_2045].x + _633;
    float _2347 = cbLight._m0[_2045].y + _634;
    float _2348 = cbLight._m0[_2045].z + _635;
    float _2352 = inversesqrt(dot(vec3(_2346, _2347, _2348), vec3(_2346, _2347, _2348)));
    float _2353 = _2352 * _2346;
    float _2354 = _2352 * _2347;
    float _2355 = _2352 * _2348;
    float _2356 = dot(vec3(_553, _554, _555), vec3(cbLight._m0[_2045].xyz));
    float _4387 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2359 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
    float _2360 = dot(vec3(_553, _554, _555), vec3(_2353, _2354, _2355));
    float _4398 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2363 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
    float _2364 = dot(vec3(cbLight._m0[_2045].xyz), vec3(_2353, _2354, _2355));
    float _4409 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2368 = _2345 * _2345;
    float _2372 = ((_2363 * _2363) * (_2368 + (-1.0))) + 1.0;
    float _2381 = (exp2(log2(1.0 - (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2382 = 1.0 - _2345;
    float _2392 = (0.5 / (((_2281 * ((_2359 * _2382) + _2345)) + 9.9999999392252902907785028219223e-09) + (((_2281 * _2382) + _2345) * _2359))) * _2359;
    float _4420 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _2394 = (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_2368 / ((_2372 * _2372) * 3.141590118408203125));
    float _2404 = (((_2381 * cbLight._m0[_2333].x) * _2394) * _2028) + ((((cbLight._m0[_2252].x * _1994) * _2305) * _2319) * _2041);
    float _2405 = (((_2381 * cbLight._m0[_2333].y) * _2394) * _2028) + ((((cbLight._m0[_2252].y * _1996) * _2305) * _2319) * _2041);
    float _2406 = (((_2381 * cbLight._m0[_2333].z) * _2394) * _2028) + ((((cbLight._m0[_2252].z * _1998) * _2305) * _2319) * _2041);
    float _2462;
    float _2464;
    float _2466;
    if (_2081)
    {
        _2462 = _2404;
        _2464 = _2405;
        _2466 = _2406;
    }
    else
    {
        uint _2468 = _2005 + 2u;
        uint _2472 = _2005 + 10u;
        float _2486 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2468].w)) * _556) * 0.949999988079071044921875);
        float _2487 = _2486 * _2486;
        float _2488 = cbLight._m0[_2468].x + _633;
        float _2489 = cbLight._m0[_2468].y + _634;
        float _2490 = cbLight._m0[_2468].z + _635;
        float _2494 = inversesqrt(dot(vec3(_2488, _2489, _2490), vec3(_2488, _2489, _2490)));
        float _2495 = _2494 * _2488;
        float _2496 = _2494 * _2489;
        float _2497 = _2494 * _2490;
        float _2498 = dot(vec3(_553, _554, _555), vec3(cbLight._m0[_2468].xyz));
        float _4431 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2501 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _2502 = dot(vec3(_553, _554, _555), vec3(_2495, _2496, _2497));
        float _4442 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2505 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _2506 = dot(vec3(cbLight._m0[_2468].xyz), vec3(_2495, _2496, _2497));
        float _4453 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2510 = _2487 * _2487;
        float _2514 = ((_2505 * _2505) * (_2510 + (-1.0))) + 1.0;
        float _2523 = (exp2(log2(1.0 - (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2524 = 1.0 - _2487;
        float _2534 = (0.5 / (((_2281 * ((_2501 * _2524) + _2487)) + 9.9999999392252902907785028219223e-09) + (((_2281 * _2524) + _2487) * _2501))) * _2501;
        float _4464 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2536 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2510 / ((_2514 * _2514) * 3.141590118408203125));
        float _2537 = isnan(1.0) ? _2020 : (isnan(_2020) ? 1.0 : min(_2020, 1.0));
        _2462 = (((_2523 * cbLight._m0[_2472].x) * _2536) * _2537) + _2404;
        _2464 = (((_2523 * cbLight._m0[_2472].y) * _2536) * _2537) + _2405;
        _2466 = (((_2523 * cbLight._m0[_2472].z) * _2536) * _2537) + _2406;
    }
    float _2568;
    float _2570;
    float _2572;
    if (_2190)
    {
        _2568 = _2462;
        _2570 = _2464;
        _2572 = _2466;
    }
    else
    {
        uint _2579 = _2005 + 3u;
        uint _2583 = _2005 + 11u;
        float _2597 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2579].w)) * _556) * 0.949999988079071044921875);
        float _2598 = _2597 * _2597;
        float _2599 = cbLight._m0[_2579].x + _633;
        float _2600 = cbLight._m0[_2579].y + _634;
        float _2601 = cbLight._m0[_2579].z + _635;
        float _2605 = inversesqrt(dot(vec3(_2599, _2600, _2601), vec3(_2599, _2600, _2601)));
        float _2606 = _2605 * _2599;
        float _2607 = _2605 * _2600;
        float _2608 = _2605 * _2601;
        float _2609 = dot(vec3(_553, _554, _555), vec3(cbLight._m0[_2579].xyz));
        float _4480 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2612 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _2613 = dot(vec3(_553, _554, _555), vec3(_2606, _2607, _2608));
        float _4491 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2616 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _2617 = dot(vec3(cbLight._m0[_2579].xyz), vec3(_2606, _2607, _2608));
        float _4502 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2621 = _2598 * _2598;
        float _2625 = ((_2616 * _2616) * (_2621 + (-1.0))) + 1.0;
        float _2634 = (exp2(log2(1.0 - (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2635 = 1.0 - _2598;
        float _2645 = (0.5 / (((_2281 * ((_2612 * _2635) + _2598)) + 9.9999999392252902907785028219223e-09) + (((_2281 * _2635) + _2598) * _2612))) * _2612;
        float _4513 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2647 = (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (_2621 / ((_2625 * _2625) * 3.141590118408203125));
        float _2648 = isnan(1.0) ? _2021 : (isnan(_2021) ? 1.0 : min(_2021, 1.0));
        _2568 = (((_2634 * cbLight._m0[_2583].x) * _2647) * _2648) + _2462;
        _2570 = (((_2634 * cbLight._m0[_2583].y) * _2647) * _2648) + _2464;
        _2572 = (((_2634 * cbLight._m0[_2583].z) * _2647) * _2648) + _2466;
    }
    float _2714;
    float _2716;
    float _2718;
    float _2720;
    float _2722;
    float _2724;
    if (_2003.y == 0u)
    {
        uvec4 _2669 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2670 = _2669.x;
        uint _2681 = uint((float(_2669.y) * floor(float(uint(cbSceneParam._m0[85u].y * _642) / _2670))) + floor(float(uint(cbSceneParam._m0[85u].x * _641) / _2670)));
        float _2691 = (log2(_1781 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2692 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        uint _2695 = uint(isnan(14.0) ? _2692 : (isnan(_2692) ? 14.0 : min(_2692, 14.0)));
        uvec4 _2700 = texelFetch(g_lightClusterGridBuffer, int(((_2695 << 2u) + (_2681 << 6u)) >> 2u));
        uint _2701 = _2700.x;
        uint _2702 = _2669.z;
        float _2816;
        float _2818;
        float _2820;
        float _2822;
        float _2824;
        float _2826;
        if (((((1u << ((_2702 >> 4u) & 15u)) + 4294967295u) & _2701) == 0u) || ((_2702 & 240u) == 0u))
        {
            _2816 = 0.0;
            _2818 = 0.0;
            _2820 = 0.0;
            _2822 = 0.0;
            _2824 = 0.0;
            _2826 = 0.0;
        }
        else
        {
            float _2817;
            float _2819;
            float _2821;
            float _2823;
            float _2825;
            float _2827;
            float _2970 = 0.0;
            float _2971 = 0.0;
            float _2972 = 0.0;
            float _2973 = 0.0;
            float _2974 = 0.0;
            float _2975 = 0.0;
            uint _2976 = 0u;
            uint _2985;
            bool _2986;
            for (;;)
            {
                _2985 = texelFetch(g_lightClassification, int((((_2695 << 5u) + (_2681 << 9u)) + (_2976 << 2u)) >> 2u)).x;
                _2986 = _2985 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2986)
                {
                    frontier_phi_66_pred = _2975;
                    frontier_phi_66_pred_1 = _2974;
                    frontier_phi_66_pred_2 = _2973;
                    frontier_phi_66_pred_3 = _2972;
                    frontier_phi_66_pred_4 = _2971;
                    frontier_phi_66_pred_5 = _2970;
                }
                else
                {
                    float _3094;
                    float _3095;
                    float _3096;
                    float _3097;
                    float _3098;
                    float _3099;
                    uint _3100;
                    _3094 = _2970;
                    _3095 = _2971;
                    _3096 = _2972;
                    _3097 = _2973;
                    _3098 = _2974;
                    _3099 = _2975;
                    _3100 = _2985;
                    float _3026;
                    float _3027;
                    float _3028;
                    float _3029;
                    float _3030;
                    float _3031;
                    for (;;)
                    {
                        uint _3104 = uint(findLSB(_3100)) + (_2976 << 5u);
                        uint _3101 = (_3100 + 4294967295u) & _3100;
                        uint _3106 = _3104 * 48u;
                        vec4 _3120 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3106)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 3u)).x));
                        uint _3126 = (_3104 * 48u) + 4u;
                        vec4 _3139 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3126)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 3u)).x));
                        uint _3145 = (_3104 * 48u) + 8u;
                        vec3 _3156 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3145)).x, texelFetch(g_PointLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3145 + 2u)).x));
                        float _3160 = _3120.x - _1779;
                        float _3161 = _3120.y - _1780;
                        float _3162 = _3120.z - _1781;
                        float _3163 = dot(vec3(_3160, _3161, _3162), vec3(_3160, _3161, _3162));
                        float _3166 = inversesqrt(_3163);
                        float _3167 = _3166 * _3160;
                        float _3168 = _3166 * _3161;
                        float _3169 = _3166 * _3162;
                        float _3170 = dot(vec3(_662, _665, _668), vec3(_3167, _3168, _3169));
                        float _3175 = 1.0 - (_3163 * _3120.w);
                        float _4539 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                        float _3176 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                        float _3177 = sqrt(_3163) * _3139.w;
                        float _3180 = 1.39999997615814208984375 / (_3177 + 1.39999997615814208984375);
                        float _3181 = _3180 * _3180;
                        float _3184 = ((1.0 - _3181) * _3170) + _3181;
                        float _3187 = _3177 * _3177;
                        float _3191 = ((isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0))) * _3176) / ((_3187 * 0.699999988079071044921875) + 1.0);
                        float _3195 = (-0.0) - _1779;
                        float _3196 = (-0.0) - _1780;
                        float _3197 = (-0.0) - _1781;
                        float _3201 = inversesqrt(dot(vec3(_3195, _3196, _3197), vec3(_3195, _3196, _3197)));
                        float _3202 = _3201 * _3195;
                        float _3203 = _3201 * _3196;
                        float _3204 = _3201 * _3197;
                        float _3211 = exp2(log2(1.0 / ((_3187 * 3.5) + 5.0)) * 0.25);
                        float _3212 = 1.0 - _722;
                        float _3219 = sqrt(1.0 - ((1.0 - (_3212 * _3212)) * (1.0 - (_3211 * _3211))));
                        float _3220 = _3219 * _3219;
                        float _3221 = _3220 * _3220;
                        float _3222 = _3202 + _3167;
                        float _3223 = _3203 + _3168;
                        float _3224 = _3204 + _3169;
                        float _3228 = inversesqrt(dot(vec3(_3222, _3223, _3224), vec3(_3222, _3223, _3224)));
                        float _3232 = dot(vec3(_662, _665, _668), vec3(_3202, _3203, _3204));
                        float _4555 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                        float _3235 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                        float _3236 = dot(vec3(_662, _665, _668), vec3(_3228 * _3222, _3228 * _3223, _3228 * _3224));
                        float _4566 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                        float _3239 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                        float _3243 = ((_3239 * _3239) * (_3221 + (-1.0))) + 1.0;
                        float _3244 = _3180 * _3220;
                        float _3245 = _3244 * _3244;
                        float _3248 = ((1.0 - _3245) * _3170) + _3245;
                        float _4577 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                        float _3249 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                        float _3250 = 1.0 - _3220;
                        float _3260 = (0.5 / (((_3249 * ((_3235 * _3250) + _3220)) + 9.9999999392252902907785028219223e-09) + (((_3249 * _3250) + _3220) * _3235))) * _3249;
                        float _4588 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                        float _3271 = (((_3221 * 3.1415927410125732421875) * (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0)))) / ((_3243 * _3243) * ((_3187 * 2.1991131305694580078125) + 3.141590118408203125))) * _3176;
                        _3029 = (_3191 * _3139.x) + _3097;
                        _3030 = (_3191 * _3139.y) + _3098;
                        _3031 = (_3191 * _3139.z) + _3099;
                        _3026 = (_3271 * _3156.x) + _3094;
                        _3027 = (_3271 * _3156.y) + _3095;
                        _3028 = (_3271 * _3156.z) + _3096;
                        if (_3101 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3094 = _3026;
                            _3095 = _3027;
                            _3096 = _3028;
                            _3097 = _3029;
                            _3098 = _3030;
                            _3099 = _3031;
                            _3100 = _3101;
                        }
                    }
                    frontier_phi_66_pred = _3031;
                    frontier_phi_66_pred_1 = _3030;
                    frontier_phi_66_pred_2 = _3029;
                    frontier_phi_66_pred_3 = _3028;
                    frontier_phi_66_pred_4 = _3027;
                    frontier_phi_66_pred_5 = _3026;
                }
                _2827 = frontier_phi_66_pred;
                _2825 = frontier_phi_66_pred_1;
                _2823 = frontier_phi_66_pred_2;
                _2821 = frontier_phi_66_pred_3;
                _2819 = frontier_phi_66_pred_4;
                _2817 = frontier_phi_66_pred_5;
                uint _2977 = _2976 + 1u;
                if (_2977 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2970 = _2817;
                    _2971 = _2819;
                    _2972 = _2821;
                    _2973 = _2823;
                    _2974 = _2825;
                    _2975 = _2827;
                    _2976 = _2977;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2816 = _2817;
            _2818 = _2819;
            _2820 = _2821;
            _2822 = _2823;
            _2824 = _2825;
            _2826 = _2827;
        }
        uvec4 _2830 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2831 = _2830.z;
        uint _2833 = (_2831 >> 8u) & 15u;
        float _2938;
        float _2940;
        float _2942;
        float _2944;
        float _2946;
        float _2948;
        if (((4294967295u << _2833) & _2701) == 0u)
        {
            _2938 = _2816;
            _2940 = _2818;
            _2942 = _2820;
            _2944 = _2822;
            _2946 = _2824;
            _2948 = _2826;
        }
        else
        {
            float _2963 = inversesqrt(dot(vec3(_1779, _1780, _1781), vec3(_1779, _1780, _1781)));
            float _2964 = _2963 * _1779;
            float _2965 = _2963 * _1780;
            float _2966 = _2963 * _1781;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2833 < ((_2831 >> 12u) & 15u))
            {
                float _2939;
                float _2941;
                float _2943;
                float _2945;
                float _2947;
                float _2949;
                float _3077 = _2816;
                float _3078 = _2818;
                float _3079 = _2820;
                float _3080 = _2822;
                float _3081 = _2824;
                float _3082 = _2826;
                uint _3083 = _2833;
                uint _3092;
                bool _3093;
                for (;;)
                {
                    _3092 = texelFetch(g_lightClassification, int((((_2695 << 5u) + (_2681 << 9u)) + (_3083 << 2u)) >> 2u)).x;
                    _3093 = _3092 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3093)
                    {
                        frontier_phi_72_pred = _3082;
                        frontier_phi_72_pred_1 = _3081;
                        frontier_phi_72_pred_2 = _3080;
                        frontier_phi_72_pred_3 = _3079;
                        frontier_phi_72_pred_4 = _3078;
                        frontier_phi_72_pred_5 = _3077;
                    }
                    else
                    {
                        float _3276;
                        float _3277;
                        float _3278;
                        float _3279;
                        float _3280;
                        float _3281;
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3574;
                        float _3575;
                        float _3576;
                        float _3289 = _3077;
                        float _3290 = _3078;
                        float _3291 = _3079;
                        float _3292 = _3080;
                        float _3293 = _3081;
                        float _3294 = _3082;
                        uint _3295 = _3092;
                        uint _3296;
                        vec4 _3321;
                        float _3322;
                        vec4 _3337;
                        vec3 _3349;
                        vec4 _3364;
                        vec4 _3380;
                        float _3427;
                        bool _3428;
                        for (;;)
                        {
                            uint _3306 = ((_3083 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3295));
                            _3296 = (_3295 + 4294967295u) & _3295;
                            uint _3308 = _3306 * 40u;
                            _3321 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3308)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 3u)).x));
                            _3322 = _3321.w;
                            uint _3324 = (_3306 * 40u) + 4u;
                            _3337 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3324)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 3u)).x));
                            uint _3339 = (_3306 * 40u) + 8u;
                            _3349 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3339)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 2u)).x));
                            uint _3351 = (_3306 * 40u) + 16u;
                            _3364 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3351)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 3u)).x));
                            uint _3367 = (_3306 * 40u) + 20u;
                            _3380 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3367)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 3u)).x));
                            uint _3383 = (_3306 * 40u) + 24u;
                            vec4 _3396 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 3u)).x));
                            uint _3402 = (_3306 * 40u) + 28u;
                            vec4 _3415 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3402)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 3u)).x));
                            _3427 = fma(_1781, _3415.z, fma(_1780, _3415.y, _3415.x * _1779)) + _3415.w;
                            _3428 = !((fma(_1781, _3396.z, fma(_1780, _3396.y, _3396.x * _1779)) + _3396.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3428)
                            {
                                float _3455 = _3321.x - _1779;
                                float _3456 = _3321.y - _1780;
                                float _3457 = _3321.z - _1781;
                                float _3458 = dot(vec3(_3455, _3456, _3457), vec3(_3455, _3456, _3457));
                                float _3461 = inversesqrt(_3458);
                                float _3462 = _3461 * _3455;
                                float _3463 = _3461 * _3456;
                                float _3464 = _3461 * _3457;
                                float _3468 = 1.0 - (_3458 / (_3322 * _3322));
                                float _4599 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                                float _3469 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                                float _3473 = sqrt(_3458) * _3337.w;
                                float _3475 = 1.39999997615814208984375 / (_3473 + 1.39999997615814208984375);
                                float _3476 = _3475 * _3475;
                                float _3479 = ((1.0 - _3476) * dot(vec3(_3462, _3463, _3464), vec3(_662, _665, _668))) + _3476;
                                float _3482 = _3473 * _3473;
                                float _3486 = (fma(_1781, _3364.z, fma(_1780, _3364.y, _3364.x * _1779)) + _3364.w) / _3427;
                                float _3487 = (fma(_1781, _3380.z, fma(_1780, _3380.y, _3380.x * _1779)) + _3380.w) / _3427;
                                float _3491 = 1.0 - dot(vec2(_3486, _3487), vec2(_3486, _3487));
                                float _4615 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                                float _3492 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
                                float _3493 = _3492 * (((isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0))) * _3469) / ((_3482 * 0.699999988079071044921875) + 1.0));
                                float _3505 = exp2(log2(1.0 / ((_3482 * 3.5) + 5.0)) * 0.25);
                                float _3506 = 1.0 - _722;
                                float _3513 = sqrt(1.0 - ((1.0 - (_3506 * _3506)) * (1.0 - (_3505 * _3505))));
                                float _3514 = _3513 * _3513;
                                float _3515 = _3514 * _3514;
                                float _3516 = _3462 - _2964;
                                float _3517 = _3463 - _2965;
                                float _3518 = _3464 - _2966;
                                float _3522 = inversesqrt(dot(vec3(_3516, _3517, _3518), vec3(_3516, _3517, _3518)));
                                float _3526 = dot(vec3(_662, _665, _668), vec3((-0.0) - _2964, (-0.0) - _2965, (-0.0) - _2966));
                                float _4626 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                                float _3529 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                                float _3530 = dot(vec3(_662, _665, _668), vec3(_3522 * _3516, _3522 * _3517, _3522 * _3518));
                                float _4637 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                                float _3533 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                                float _3537 = ((_3533 * _3533) * (_3515 + (-1.0))) + 1.0;
                                float _3538 = _3475 * _3514;
                                float _3539 = _3538 * _3538;
                                float _3545 = ((1.0 - _3539) * dot(vec3(_662, _665, _668), vec3(_3462, _3463, _3464))) + _3539;
                                float _4648 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                                float _3546 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                                float _3547 = 1.0 - _3514;
                                float _3557 = (0.5 / (((_3546 * ((_3529 * _3547) + _3514)) + 9.9999999392252902907785028219223e-09) + (((_3546 * _3547) + _3514) * _3529))) * _3546;
                                float _4659 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                                float _3567 = (_3492 * _3469) * (((_3515 * 3.1415927410125732421875) * (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0)))) / ((_3537 * _3537) * ((_3482 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3493 * _3337.y;
                                frontier_phi_78_pred_1 = _3493 * _3337.x;
                                frontier_phi_78_pred_2 = _3567 * _3349.z;
                                frontier_phi_78_pred_3 = _3567 * _3349.y;
                                frontier_phi_78_pred_4 = _3567 * _3349.x;
                                frontier_phi_78_pred_5 = _3493 * _3337.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3575 = frontier_phi_78_pred;
                            _3574 = frontier_phi_78_pred_1;
                            _3573 = frontier_phi_78_pred_2;
                            _3572 = frontier_phi_78_pred_3;
                            _3571 = frontier_phi_78_pred_4;
                            _3576 = frontier_phi_78_pred_5;
                            _3279 = _3574 + _3292;
                            _3280 = _3575 + _3293;
                            _3281 = _3576 + _3294;
                            _3276 = _3571 + _3289;
                            _3277 = _3572 + _3290;
                            _3278 = _3573 + _3291;
                            if (_3296 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3289 = _3276;
                                _3290 = _3277;
                                _3291 = _3278;
                                _3292 = _3279;
                                _3293 = _3280;
                                _3294 = _3281;
                                _3295 = _3296;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3281;
                        frontier_phi_72_pred_1 = _3280;
                        frontier_phi_72_pred_2 = _3279;
                        frontier_phi_72_pred_3 = _3278;
                        frontier_phi_72_pred_4 = _3277;
                        frontier_phi_72_pred_5 = _3276;
                    }
                    _2949 = frontier_phi_72_pred;
                    _2947 = frontier_phi_72_pred_1;
                    _2945 = frontier_phi_72_pred_2;
                    _2943 = frontier_phi_72_pred_3;
                    _2941 = frontier_phi_72_pred_4;
                    _2939 = frontier_phi_72_pred_5;
                    uint _3084 = _3083 + 1u;
                    if (_3084 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3077 = _2939;
                        _3078 = _2941;
                        _3079 = _2943;
                        _3080 = _2945;
                        _3081 = _2947;
                        _3082 = _2949;
                        _3083 = _3084;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2949;
                frontier_phi_60_61_ladder_1 = _2947;
                frontier_phi_60_61_ladder_2 = _2943;
                frontier_phi_60_61_ladder_3 = _2941;
                frontier_phi_60_61_ladder_4 = _2939;
                frontier_phi_60_61_ladder_5 = _2945;
            }
            else
            {
                frontier_phi_60_61_ladder = _2826;
                frontier_phi_60_61_ladder_1 = _2824;
                frontier_phi_60_61_ladder_2 = _2820;
                frontier_phi_60_61_ladder_3 = _2818;
                frontier_phi_60_61_ladder_4 = _2816;
                frontier_phi_60_61_ladder_5 = _2822;
            }
            _2938 = frontier_phi_60_61_ladder_4;
            _2940 = frontier_phi_60_61_ladder_3;
            _2942 = frontier_phi_60_61_ladder_2;
            _2944 = frontier_phi_60_61_ladder_5;
            _2946 = frontier_phi_60_61_ladder_1;
            _2948 = frontier_phi_60_61_ladder;
        }
        float _2953 = isnan(1.0) ? _706 : (isnan(_706) ? 1.0 : min(_706, 1.0));
        _2714 = (_2953 * _2944) + _2245;
        _2716 = (_2953 * _2946) + _2247;
        _2718 = (_2953 * _2948) + _2249;
        _2720 = ((_2938 * 0.039999999105930328369140625) * _2953) + _2568;
        _2722 = ((_2940 * 0.039999999105930328369140625) * _2953) + _2570;
        _2724 = ((_2942 * 0.039999999105930328369140625) * _2953) + _2572;
    }
    else
    {
        _2714 = _2245;
        _2716 = _2247;
        _2718 = _2249;
        _2720 = _2568;
        _2722 = _2570;
        _2724 = _2572;
    }
    uint _2730 = _682 + uint(cbMatDynParam._m0[0u].w);
    float _2738 = ((_361 * cbMtdParam._m0[11u].x) * (_478.x + _463.x)) * cbInstanceData._m0[_2730].x;
    float _2741 = ((_361 * cbMtdParam._m0[11u].y) * (_478.y + _463.y)) * cbInstanceData._m0[_2730].y;
    float _2744 = ((_361 * cbMtdParam._m0[11u].z) * (_478.z + _463.z)) * cbInstanceData._m0[_2730].z;
    float _4675 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _4686 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _4697 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _2761 = (((isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * (_2714 + ((isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0))) * _706))) + ((_2720 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _1513)) * cbPerFrame._m0[3u].x)) + _2738;
    float _2763 = (_2741 + ((_2722 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _1513)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (_2716 + ((isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0))) * _706)));
    float _2765 = (_2744 + ((_2724 + ((isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))) * _1513)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0))) * (_2718 + ((isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))) * _706)));
    float _4723 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2778 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
    uint _2779 = _681 + 6u;
    float _2787 = _641 / cbSceneParam._m0[86u].x;
    float _2788 = _642 / cbSceneParam._m0[86u].y;
    vec4 _2802 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2787, _2788, (log2((isnan(cbSceneParam._m0[77u].w) ? _575 : (isnan(_575) ? cbSceneParam._m0[77u].w : min(_575, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2804 = _2802.x;
    float _2805 = _2802.y;
    float _2806 = _2802.z;
    float _2807 = _2802.w;
    float _2879;
    float _2881;
    float _2883;
    float _2885;
    if (_575 > cbSceneParam._m0[78u].w)
    {
        float _2841 = isnan(_575) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _575 : min(cbSceneParam._m0[80u].w, _575));
        float _2842 = _2841 / _575;
        float _2853 = _2842 * _626;
        float _2854 = _627 * _2842;
        float _2855 = (-0.0) - _2854;
        float _2857 = _2842 * _628;
        float _2859 = (cbSceneParam._m0[77u].w * _2855) / _2841;
        float _2860 = _2859 + cbSceneParam._m0[79u].w;
        float _2861 = cbSceneParam._m0[79u].w - _2854;
        float _2867 = sqrt(((_2853 * _2853) + (_2854 * _2854)) + (_2857 * _2857));
        float _2870 = (1.0 - (cbSceneParam._m0[77u].w / _2841)) * _2867;
        float _2875 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2877 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3039;
        if (abs((_2855 - _2859) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3039 = ((((_2860 > 0.0) ? exp2(_2875 * _2860) : (2.0 - exp2(_2877 * _2860))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2870;
        }
        else
        {
            float _2999 = 1.0 / cbSceneParam._m0[80u].x;
            float _3000 = isnan(_2861) ? _2860 : (isnan(_2860) ? _2861 : max(_2860, _2861));
            float _3001 = isnan(_2861) ? _2860 : (isnan(_2860) ? _2861 : min(_2860, _2861));
            float _3010 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : min(_3000, 0.0));
            float _3011 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : min(_3001, 0.0));
            _3039 = ((abs(_2867 / _2855) * cbSceneParam._m0[80u].y) * ((((_3010 - _3011) * 2.0) - ((exp2(_2875 * (isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0)))) - exp2(_2875 * (isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0))))) * _2999)) - ((exp2(_2877 * _3010) - exp2(_2877 * _3011)) * _2999))) + (_2870 * cbSceneParam._m0[80u].z);
        }
        vec4 _3041 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2787, _2788, 1.0), 0.0);
        float _3050 = exp2((_3039 * (-1.44269502162933349609375)) * (1.0 - _3041.w));
        float _3051 = log2(_3050);
        float _3067 = log2(_2807);
        _2879 = (exp2(_3067 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3051 * cbSceneParam._m0[78u].x)) * _3041.x) / cbSceneParam._m0[78u].x)) + _2804;
        _2881 = (exp2(_3067 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3051 * cbSceneParam._m0[78u].y)) * _3041.y) / cbSceneParam._m0[78u].y)) + _2805;
        _2883 = (exp2(_3067 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3051 * cbSceneParam._m0[78u].z)) * _3041.z) / cbSceneParam._m0[78u].z)) + _2806;
        _2885 = _3050 * _2807;
    }
    else
    {
        _2879 = _2804;
        _2881 = _2805;
        _2883 = _2806;
        _2885 = _2807;
    }
    float _2897 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2898 = _2897 == 3.0;
    float _2899 = log2(_2885);
    float _2903 = exp2(_2899 * cbSceneParam._m0[78u].x);
    float _2904 = exp2(_2899 * cbSceneParam._m0[78u].y);
    float _2905 = exp2(_2899 * cbSceneParam._m0[78u].z);
    float _2906 = _2903 * (isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0)));
    float _2907 = _2904 * (isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0)));
    float _2908 = _2905 * (isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0)));
    float _2917 = (_2897 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2917 * (_2898 ? _2906 : (_2906 + (cbSceneParam._m0[72u].w * _2879)));
    SV_Target.y = _2917 * (_2898 ? _2907 : (_2907 + (cbSceneParam._m0[72u].w * _2881)));
    SV_Target.z = _2917 * (_2898 ? _2908 : (_2908 + (cbSceneParam._m0[72u].w * _2883)));
    SV_Target.w = cbInstanceData._m0[_2779].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2738) * _2778) * _2903) * _2917;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2741) * _2778) * _2904) * _2917;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2744) * _2778) * _2905) * _2917;
    SV_Target_1.w = cbInstanceData._m0[_2779].w;
}


