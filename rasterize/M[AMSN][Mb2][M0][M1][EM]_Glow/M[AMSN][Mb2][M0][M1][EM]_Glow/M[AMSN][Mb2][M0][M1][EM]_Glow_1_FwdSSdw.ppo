#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _890;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _187 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _188 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _189 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_187, _188, _189), vec3(_187, _188, _189)));
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _231 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _237 = _231.x * cbMtdParam._m0[9u].x;
    float _238 = _231.y * cbMtdParam._m0[9u].y;
    float _239 = _231.z * cbMtdParam._m0[9u].z;
    vec4 _259 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _273 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _277 = _273.z;
    float _281 = (_273.x * 2.0) + (-1.0);
    float _283 = (_273.y * 2.0) + (-1.0);
    float _284 = dot(vec2(_281, _283), vec2(_281, _283));
    float _3269 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _290 = sqrt(1.0 - (isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0))));
    vec4 _318 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _333 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _348 = (TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_259.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].x + 1.0);
    float _3280 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _349 = isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0));
    float _352 = fma(_290, _202 * NORMAL.x, fma(_283, _209 * TANGENT.x, (_195 * _187) * _281));
    float _355 = fma(_290, _202 * NORMAL.y, fma(_283, _209 * TANGENT.y, (_195 * _188) * _281));
    float _358 = fma(_290, _202 * NORMAL.z, fma(_283, _209 * TANGENT.z, (_195 * _189) * _281));
    float _362 = inversesqrt(dot(vec3(_352, _355, _358), vec3(_352, _355, _358)));
    float _363 = _362 * _352;
    float _364 = _362 * _355;
    float _365 = _362 * _358;
    float _3291 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _366 = isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0));
    float _3302 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3313 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3324 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _385 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _426 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _436 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _426);
    float _437 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _426);
    float _438 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _426);
    float _442 = inversesqrt(dot(vec3(_436, _437, _438), vec3(_436, _437, _438)));
    float _443 = _436 * _442;
    float _444 = _437 * _442;
    float _445 = _438 * _442;
    float _451 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _452 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _473 = fma(_365, cbSceneParam._m0[5u].z, fma(_364, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _363));
    float _476 = fma(_365, cbSceneParam._m0[6u].z, fma(_364, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _363));
    float _479 = fma(_365, cbSceneParam._m0[7u].z, fma(_364, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _363));
    uint _492 = uint(roundEven(NORMAL.w)) * 13u;
    uint _494 = _492 + 9u;
    uint _495 = _494 + uint(cbMatDynParam._m0[0u].w);
    float _501 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0)))) * cbInstanceData._m0[_495].x;
    float _502 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0)))) * cbInstanceData._m0[_495].y;
    float _503 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0)))) * cbInstanceData._m0[_495].z;
    float _3335 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _504 = isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0));
    float _3346 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _505 = isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0));
    float _3357 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _506 = isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0));
    vec4 _515 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _451, cbSceneParam._m0[86u].y * _452));
    float _518 = _515.x * TEXCOORD_3.w;
    float _519 = dot(vec3(_363, _364, _365), vec3(_443, _444, _445));
    float _522 = _519 * 2.0;
    float _526 = (_522 * _363) - _443;
    float _527 = (_522 * _364) - _444;
    float _528 = (_522 * _365) - _445;
    float _532 = abs(dot(vec3(_443, _444, _445), vec3(_363, _364, _365)));
    float _3368 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _534 = sqrt(_366);
    float _547 = exp2((_534 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_534 * 3.0));
    float _579 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _583 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _587 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _889;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _614 = fma(_587, cbModelParam._m0[26u].z, fma(_583, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _579));
        float _618 = fma(_587, cbModelParam._m0[27u].z, fma(_583, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _579));
        float _622 = fma(_587, cbModelParam._m0[28u].z, fma(_583, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _579));
        float _647 = _579 + _363;
        float _648 = _583 + _364;
        float _649 = _587 + _365;
        float _659 = fma(_649, cbModelParam._m0[26u].z, fma(_648, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _647)) - _614;
        float _660 = fma(_649, cbModelParam._m0[27u].z, fma(_648, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _647)) - _618;
        float _661 = fma(_649, cbModelParam._m0[28u].z, fma(_648, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _647)) - _622;
        float _665 = inversesqrt(dot(vec3(_659, _660, _661), vec3(_659, _660, _661)));
        float _678 = ((_665 * _659) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_614 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _679 = ((_665 * _660) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_618 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _680 = ((_665 * _661) / cbModelParam._m0[34u].z) + ((((((_622 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _683 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_678, _679, _680), 0.0);
        vec4 _690 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_678, _679, _680), 0.0);
        vec4 _697 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_678, _679, _680), 0.0);
        vec4 _704 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_678, _679, _680), 0.0);
        float _717 = exp2((_683.w + (-0.5)) * 20.0) * 2.0;
        float _718 = _717 * (_683.x + (-0.5));
        float _719 = _717 * (_683.y + (-0.5));
        float _720 = _717 * (_683.z + (-0.5));
        float _727 = exp2((_690.w + (-0.5)) * 20.0) * 2.0;
        float _728 = _727 * (_690.x + (-0.5));
        float _729 = _727 * (_690.y + (-0.5));
        float _730 = _727 * (_690.z + (-0.5));
        float _737 = exp2((_697.w + (-0.5)) * 20.0) * 2.0;
        float _738 = _737 * (_697.x + (-0.5));
        float _739 = _737 * (_697.y + (-0.5));
        float _740 = _737 * (_697.z + (-0.5));
        float _747 = exp2((_704.w + (-0.5)) * 20.0) * 2.0;
        float _748 = _747 * (_704.x + (-0.5));
        float _749 = _747 * (_704.y + (-0.5));
        float _750 = _747 * (_704.z + (-0.5));
        float _751 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _752 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _753 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _754 = _718 * 0.5;
        float _755 = _728 * 0.5;
        float _756 = _738 * 0.5;
        float _757 = dot(vec3(_754, _755, _756), vec3(_754, _755, _756));
        float _762 = (_757 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_757);
        float _771 = (dot(vec3(_363, _364, _365), vec3(_762 * _754, _762 * _755, _762 * _756)) + 1.0) * 0.5;
        float _3394 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _781 = sqrt(((_755 * _755) + (_754 * _754)) + (_756 * _756)) / (_751 + 9.9999997473787516355514526367188e-06);
        float _3405 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _782 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
        float _783 = _782 * 2.0;
        float _787 = (1.0 - _782) / (_782 + 1.0);
        float _3416 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _788 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
        float _797 = ((((1.0 - _788) * (_783 + 2.0)) * exp2(log2(isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0))) * (_783 + 1.0))) + _788) * _751;
        float _798 = _719 * 0.5;
        float _799 = _729 * 0.5;
        float _800 = _739 * 0.5;
        float _801 = dot(vec3(_798, _799, _800), vec3(_798, _799, _800));
        float _806 = (_801 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_801);
        float _814 = (dot(vec3(_363, _364, _365), vec3(_806 * _798, _806 * _799, _806 * _800)) + 1.0) * 0.5;
        float _3427 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _823 = sqrt(((_799 * _799) + (_798 * _798)) + (_800 * _800)) / (_752 + 9.9999997473787516355514526367188e-06);
        float _3438 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _824 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
        float _825 = _824 * 2.0;
        float _829 = (1.0 - _824) / (_824 + 1.0);
        float _3449 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
        float _839 = ((((1.0 - _830) * (_825 + 2.0)) * exp2(log2(isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0))) * (_825 + 1.0))) + _830) * _752;
        float _840 = _720 * 0.5;
        float _841 = _730 * 0.5;
        float _842 = _740 * 0.5;
        float _843 = dot(vec3(_840, _841, _842), vec3(_840, _841, _842));
        float _848 = (_843 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_843);
        float _856 = (dot(vec3(_363, _364, _365), vec3(_848 * _840, _848 * _841, _848 * _842)) + 1.0) * 0.5;
        float _3460 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _865 = sqrt(((_841 * _841) + (_840 * _840)) + (_842 * _842)) / (_753 + 9.9999997473787516355514526367188e-06);
        float _3471 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _866 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
        float _867 = _866 * 2.0;
        float _871 = (1.0 - _866) / (_866 + 1.0);
        float _3482 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _872 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
        float _881 = ((((1.0 - _872) * (_867 + 2.0)) * exp2(log2(isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0))) * (_867 + 1.0))) + _872) * _753;
        _889 = _720;
        _891 = _719;
        _892 = _718;
        _893 = _730;
        _894 = _729;
        _895 = _728;
        _896 = _740;
        _897 = _739;
        _898 = _738;
        _899 = _753;
        _900 = _752;
        _901 = _751;
        _902 = cbModelParam._m0[36u].z * (isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0)));
        _903 = cbModelParam._m0[36u].z * (isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0)));
        _904 = cbModelParam._m0[36u].z * (isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0)));
    }
    else
    {
        _889 = _890;
        _891 = _890;
        _892 = _890;
        _893 = _890;
        _894 = _890;
        _895 = _890;
        _896 = _890;
        _897 = _890;
        _898 = _890;
        _899 = _890;
        _900 = _890;
        _901 = _890;
        _902 = 0.0;
        _903 = 0.0;
        _904 = 0.0;
    }
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _930 = fma(_587, cbModelParam._m0[30u].z, fma(_583, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _579));
        float _934 = fma(_587, cbModelParam._m0[31u].z, fma(_583, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _579));
        float _938 = fma(_587, cbModelParam._m0[32u].z, fma(_583, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _579));
        float _961 = _579 + _363;
        float _962 = _583 + _364;
        float _963 = _587 + _365;
        float _973 = fma(_963, cbModelParam._m0[30u].z, fma(_962, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _961)) - _930;
        float _974 = fma(_963, cbModelParam._m0[31u].z, fma(_962, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _961)) - _934;
        float _975 = fma(_963, cbModelParam._m0[32u].z, fma(_962, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _961)) - _938;
        float _979 = inversesqrt(dot(vec3(_973, _974, _975), vec3(_973, _974, _975)));
        float _992 = ((_979 * _973) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_930 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _993 = ((_979 * _974) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_934 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _994 = ((_979 * _975) / cbModelParam._m0[35u].z) + ((((((_938 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        float _1029 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_996.x + (-0.5));
        float _1031 = _1029 * (_996.y + (-0.5));
        float _1032 = _1029 * (_996.z + (-0.5));
        float _1039 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = _1039 * (_1003.x + (-0.5));
        float _1041 = _1039 * (_1003.y + (-0.5));
        float _1042 = _1039 * (_1003.z + (-0.5));
        float _1049 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1050 = _1049 * (_1010.x + (-0.5));
        float _1051 = _1049 * (_1010.y + (-0.5));
        float _1052 = _1049 * (_1010.z + (-0.5));
        float _1059 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1060 = _1059 * (_1017.x + (-0.5));
        float _1061 = _1059 * (_1017.y + (-0.5));
        float _1062 = _1059 * (_1017.z + (-0.5));
        float _1063 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1064 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1065 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1066 = _1030 * 0.5;
        float _1067 = _1040 * 0.5;
        float _1068 = _1050 * 0.5;
        float _1069 = dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068));
        float _1074 = (_1069 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1069);
        float _1082 = (dot(vec3(_363, _364, _365), vec3(_1074 * _1066, _1074 * _1067, _1074 * _1068)) + 1.0) * 0.5;
        float _3523 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1091 = sqrt(((_1067 * _1067) + (_1066 * _1066)) + (_1068 * _1068)) / (_1063 + 9.9999997473787516355514526367188e-06);
        float _3534 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
        float _1093 = _1092 * 2.0;
        float _1097 = (1.0 - _1092) / (_1092 + 1.0);
        float _3545 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _1107 = ((((1.0 - _1098) * (_1093 + 2.0)) * exp2(log2(isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0))) * (_1093 + 1.0))) + _1098) * _1063;
        float _1108 = _1031 * 0.5;
        float _1109 = _1041 * 0.5;
        float _1110 = _1051 * 0.5;
        float _1111 = dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110));
        float _1116 = (_1111 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1111);
        float _1124 = (dot(vec3(_363, _364, _365), vec3(_1116 * _1108, _1116 * _1109, _1116 * _1110)) + 1.0) * 0.5;
        float _3556 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1133 = sqrt(((_1109 * _1109) + (_1108 * _1108)) + (_1110 * _1110)) / (_1064 + 9.9999997473787516355514526367188e-06);
        float _3567 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _1135 = _1134 * 2.0;
        float _1139 = (1.0 - _1134) / (_1134 + 1.0);
        float _3578 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _1149 = ((((1.0 - _1140) * (_1135 + 2.0)) * exp2(log2(isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))) * (_1135 + 1.0))) + _1140) * _1064;
        float _1150 = _1032 * 0.5;
        float _1151 = _1042 * 0.5;
        float _1152 = _1052 * 0.5;
        float _1153 = dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152));
        float _1158 = (_1153 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1153);
        float _1166 = (dot(vec3(_363, _364, _365), vec3(_1158 * _1150, _1158 * _1151, _1158 * _1152)) + 1.0) * 0.5;
        float _3589 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1175 = sqrt(((_1151 * _1151) + (_1150 * _1150)) + (_1152 * _1152)) / (_1065 + 9.9999997473787516355514526367188e-06);
        float _3600 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _1177 = _1176 * 2.0;
        float _1181 = (1.0 - _1176) / (_1176 + 1.0);
        float _3611 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _1191 = ((((1.0 - _1182) * (_1177 + 2.0)) * exp2(log2(isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * (_1177 + 1.0))) + _1182) * _1065;
        _1199 = _1032;
        _1200 = _1031;
        _1201 = _1030;
        _1202 = _1042;
        _1203 = _1041;
        _1204 = _1040;
        _1205 = _1052;
        _1206 = _1051;
        _1207 = _1050;
        _1208 = _1065;
        _1209 = _1064;
        _1210 = _1063;
        _1211 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0)));
        _1212 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)));
        _1213 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)));
    }
    else
    {
        _1199 = _890;
        _1200 = _890;
        _1201 = _890;
        _1202 = _890;
        _1203 = _890;
        _1204 = _890;
        _1205 = _890;
        _1206 = _890;
        _1207 = _890;
        _1208 = _890;
        _1209 = _890;
        _1210 = _890;
        _1211 = 0.0;
        _1212 = 0.0;
        _1213 = 0.0;
    }
    float _1223 = (cbModelParam._m0[1u].x * (_1211 - _902)) + _902;
    float _1224 = (cbModelParam._m0[1u].x * (_1212 - _903)) + _903;
    float _1225 = (cbModelParam._m0[1u].x * (_1213 - _904)) + _904;
    float _1246 = fma(_1225, cbSceneParam._m0[89u].z, fma(_1224, cbSceneParam._m0[89u].y, _1223 * cbSceneParam._m0[89u].x));
    float _1249 = fma(_1225, cbSceneParam._m0[90u].z, fma(_1224, cbSceneParam._m0[90u].y, _1223 * cbSceneParam._m0[90u].x));
    float _1252 = fma(_1225, cbSceneParam._m0[91u].z, fma(_1224, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1223));
    float _1267 = _526 * 0.5;
    float _1268 = _527 * 0.5;
    float _1269 = _528 * 0.5;
    float _1270 = dot(vec4(_1267, _1268, _1269, 1.0), vec4(_1201, _1204, _1207, _1210));
    float _1273 = dot(vec4(_1267, _1268, _1269, 1.0), vec4(_1200, _1203, _1206, _1209));
    float _1276 = dot(vec4(_1267, _1268, _1269, 1.0), vec4(_1199, _1202, _1205, _1208));
    float _1310;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1283 = dot(vec4(_1267, _1268, _1269, 1.0), vec4(_889, _893, _896, _899));
        float _1287 = dot(vec4(_1267, _1268, _1269, 1.0), vec4(_891, _894, _897, _900));
        float _1291 = dot(vec4(_1267, _1268, _1269, 1.0), vec4(_892, _895, _898, _901));
        float _1298 = dot(vec4(cbModelParam._m0[39u]), vec4(_1267, _1268, _1269, 1.0));
        _1310 = dot(vec3(isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)), isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)), isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1298) ? 0.0 : (isnan(0.0) ? _1298 : max(0.0, _1298))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1310 = 1.0;
    }
    float _1321;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1312 = dot(vec4(cbModelParam._m0[40u]), vec4(_1267, _1268, _1269, 1.0));
        _1321 = dot(vec3(isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)), isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)), isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1312) ? 0.0 : (isnan(0.0) ? _1312 : max(0.0, _1312))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1321 = 1.0;
    }
    float _1325 = (_1321 * cbModelParam._m0[1u].x) + (_1310 * (1.0 - cbModelParam._m0[1u].x));
    float _1335 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _366);
    float _1336 = isnan(_1335) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1335 : min(cbModelParam._m0[25u].z, _1335));
    float _1416;
    float _1418;
    float _1420;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1383 = fma(_587, cbModelParam._m0[13u].z, fma(_583, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _579)) + cbModelParam._m0[13u].w;
        float _1387 = fma(_587, cbModelParam._m0[14u].z, fma(_583, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _579)) + cbModelParam._m0[14u].w;
        float _1391 = fma(_587, cbModelParam._m0[15u].z, fma(_583, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _579)) + cbModelParam._m0[15u].w;
        float _1394 = fma(_528, cbModelParam._m0[13u].z, fma(_527, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _526));
        float _1397 = fma(_528, cbModelParam._m0[14u].z, fma(_527, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _526));
        float _1400 = fma(_528, cbModelParam._m0[15u].z, fma(_527, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _526));
        float _1428;
        if (_1394 > 0.0)
        {
            _1428 = abs((1.0 - _1383) / _1394);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1394 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1383 + 1.0) / _1394);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1428 = frontier_phi_14_12_ladder;
        }
        float _1653;
        if (_1397 > 0.0)
        {
            _1653 = abs((1.0 - _1387) / _1397);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1397 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1387 + 1.0) / _1397);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1653 = frontier_phi_23_19_ladder;
        }
        float _1899;
        if (_1400 > 0.0)
        {
            _1899 = abs((1.0 - _1391) / _1400);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1400 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1391 + 1.0) / _1400);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1899 = frontier_phi_35_30_ladder;
        }
        float _1901 = isnan(_1653) ? _1428 : (isnan(_1428) ? _1653 : min(_1428, _1653));
        float _1902 = isnan(_1899) ? _1901 : (isnan(_1901) ? _1899 : min(_1901, _1899));
        float _1906 = (_1902 * _1394) + _1383;
        float _1907 = (_1902 * _1397) + _1387;
        float _1908 = (_1902 * _1400) + _1391;
        float _1909 = _1902 * 9.9999997473787516355514526367188e-05;
        float _1911 = (-1.0) - _1909;
        float _1913 = _1909 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1908 > _1913) || ((_1908 < _1911) || ((_1907 > _1913) || ((_1907 < _1911) || ((_1906 < _1911) || (_1906 > _1913))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2032 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1908, cbModelParam._m0[9u].z, fma(_1907, cbModelParam._m0[9u].y, _1906 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1908, cbModelParam._m0[10u].z, fma(_1907, cbModelParam._m0[10u].y, _1906 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1908, cbModelParam._m0[11u].z, fma(_1907, cbModelParam._m0[11u].y, _1906 * cbModelParam._m0[11u].x))), _1336);
            frontier_phi_13_35_ladder = _2032.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2032.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2032.x * cbModelParam._m0[1u].y;
        }
        _1416 = frontier_phi_13_35_ladder_2;
        _1418 = frontier_phi_13_35_ladder_1;
        _1420 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1404 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_526, _527, _528), _1336);
        _1416 = _1404.x * cbModelParam._m0[1u].y;
        _1418 = _1404.y * cbModelParam._m0[1u].y;
        _1420 = _1404.z * cbModelParam._m0[1u].y;
    }
    float _1424 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _366);
    float _1425 = isnan(_1424) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1424 : min(cbModelParam._m0[25u].w, _1424));
    float _1516;
    float _1518;
    float _1520;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1480 = fma(_587, cbModelParam._m0[21u].z, fma(_583, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _579)) + cbModelParam._m0[21u].w;
        float _1484 = fma(_587, cbModelParam._m0[22u].z, fma(_583, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _579)) + cbModelParam._m0[22u].w;
        float _1488 = fma(_587, cbModelParam._m0[23u].z, fma(_583, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _579)) + cbModelParam._m0[23u].w;
        float _1491 = fma(_528, cbModelParam._m0[21u].z, fma(_527, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _526));
        float _1494 = fma(_528, cbModelParam._m0[22u].z, fma(_527, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _526));
        float _1497 = fma(_528, cbModelParam._m0[23u].z, fma(_527, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _526));
        float _1658;
        if (_1491 > 0.0)
        {
            _1658 = abs((1.0 - _1480) / _1491);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1491 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1480 + 1.0) / _1491);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1658 = frontier_phi_25_21_ladder;
        }
        float _1926;
        if (_1494 > 0.0)
        {
            _1926 = abs((1.0 - _1484) / _1494);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1494 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1484 + 1.0) / _1494);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1926 = frontier_phi_37_32_ladder;
        }
        float _2131;
        if (_1497 > 0.0)
        {
            _2131 = abs((1.0 - _1488) / _1497);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1497 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1488 + 1.0) / _1497);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2131 = frontier_phi_46_43_ladder;
        }
        float _2133 = isnan(_1926) ? _1658 : (isnan(_1658) ? _1926 : min(_1658, _1926));
        float _2134 = isnan(_2131) ? _2133 : (isnan(_2133) ? _2131 : min(_2133, _2131));
        float _2138 = (_2134 * _1491) + _1480;
        float _2139 = (_2134 * _1494) + _1484;
        float _2140 = (_2134 * _1497) + _1488;
        float _2141 = _2134 * 9.9999997473787516355514526367188e-05;
        float _2142 = (-1.0) - _2141;
        float _2144 = _2141 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2140 > _2144) || ((_2140 < _2142) || ((_2139 > _2144) || ((_2139 < _2142) || ((_2138 < _2142) || (_2138 > _2144))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2374 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2140, cbModelParam._m0[17u].z, fma(_2139, cbModelParam._m0[17u].y, _2138 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2140, cbModelParam._m0[18u].z, fma(_2139, cbModelParam._m0[18u].y, _2138 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2140, cbModelParam._m0[19u].z, fma(_2139, cbModelParam._m0[19u].y, _2138 * cbModelParam._m0[19u].x))), _1425);
            frontier_phi_22_46_ladder = _2374.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2374.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2374.x * cbModelParam._m0[1u].z;
        }
        _1516 = frontier_phi_22_46_ladder_2;
        _1518 = frontier_phi_22_46_ladder_1;
        _1520 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1500 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_526, _527, _528), _1425);
        _1516 = _1500.x * cbModelParam._m0[1u].z;
        _1518 = _1500.y * cbModelParam._m0[1u].z;
        _1520 = _1500.z * cbModelParam._m0[1u].z;
    }
    float _1532 = ((((1.0 - _547) * ((_534 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_547 * _534)) * _518;
    float _1533 = _1532 * ((cbModelParam._m0[1u].w * (_1516 - _1416)) + _1416);
    float _1534 = _1532 * ((cbModelParam._m0[1u].w * (_1518 - _1418)) + _1418);
    float _1535 = _1532 * ((cbModelParam._m0[1u].w * (_1520 - _1420)) + _1420);
    float _1538 = fma(_1535, cbSceneParam._m0[89u].z, fma(_1534, cbSceneParam._m0[89u].y, _1533 * cbSceneParam._m0[89u].x));
    float _1541 = fma(_1535, cbSceneParam._m0[90u].z, fma(_1534, cbSceneParam._m0[90u].y, _1533 * cbSceneParam._m0[90u].x));
    float _1544 = fma(_1535, cbSceneParam._m0[91u].z, fma(_1534, cbSceneParam._m0[91u].y, _1533 * cbSceneParam._m0[91u].x));
    vec4 _1552 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_451, _452));
    float _1554 = _1552.w;
    float _1566 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1554);
    float _1567 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1554);
    float _1568 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1554);
    uvec4 _1572 = floatBitsToUint(cbInstanceData._m0[_492 + 5u]);
    uint _1574 = _1572.x * 14u;
    uint _1575 = _1574 + 13u;
    float _1582 = _518 + (-1.0);
    float _1587 = (cbLight._m0[_1575].x * _1582) + 1.0;
    float _1588 = (cbLight._m0[_1575].y * _1582) + 1.0;
    float _1589 = (cbLight._m0[_1575].z * _1582) + 1.0;
    float _1590 = (cbLight._m0[_1575].w * _1582) + 1.0;
    uint _1591 = _1574 + 5u;
    float _1597 = isnan(1.0) ? _1588 : (isnan(_1588) ? 1.0 : min(_1588, 1.0));
    uint _1601 = _1574 + 4u;
    float _1611 = isnan(1.0) ? _1587 : (isnan(_1587) ? 1.0 : min(_1587, 1.0));
    uint _1615 = _1574 | 1u;
    float _1626 = dot(vec3(cbLight._m0[_1574].xyz), vec3(_363, _364, _365));
    float _1629 = dot(vec3(cbLight._m0[_1615].xyz), vec3(_363, _364, _365));
    float _3747 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
    float _3758 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
    float _1634 = (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * 0.3183098733425140380859375;
    float _1636 = (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * 0.3183098733425140380859375;
    float _1643 = ((cbLight._m0[_1591].x * _1597) * _1636) + (((cbLight._m0[_1601].x * _1566) * _1611) * _1634);
    float _1644 = ((_1597 * cbLight._m0[_1591].y) * _1636) + (((cbLight._m0[_1601].y * _1567) * _1611) * _1634);
    float _1645 = ((_1597 * cbLight._m0[_1591].z) * _1636) + (((cbLight._m0[_1601].z * _1568) * _1611) * _1634);
    uvec4 _1650 = floatBitsToUint(cbLight._m0[_1574 + 12u]);
    bool _1652 = _1650.x == 0u;
    float _1663;
    float _1665;
    float _1667;
    if (_1652)
    {
        _1663 = _1643;
        _1665 = _1644;
        _1667 = _1645;
    }
    else
    {
        uint _1671 = _1574 + 6u;
        float _1687 = (dot(vec3(cbLight._m0[_1574 + 2u].xyz), vec3(_363, _364, _365)) * 0.5) + 0.5;
        float _1688 = _1687 * _1687;
        float _3769 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1689 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1690 = isnan(1.0) ? _1589 : (isnan(_1589) ? 1.0 : min(_1589, 1.0));
        _1663 = (((cbLight._m0[_1671].x * 0.3183098733425140380859375) * _1689) * _1690) + _1643;
        _1665 = (((cbLight._m0[_1671].y * 0.3183098733425140380859375) * _1689) * _1690) + _1644;
        _1667 = (((cbLight._m0[_1671].z * 0.3183098733425140380859375) * _1689) * _1690) + _1645;
    }
    bool _1670 = _1650.y == 0u;
    float _1708;
    float _1710;
    float _1712;
    if (_1670)
    {
        _1708 = _1663;
        _1710 = _1665;
        _1712 = _1667;
    }
    else
    {
        uint _1870 = _1574 + 7u;
        float _1886 = (dot(vec3(cbLight._m0[_1574 + 3u].xyz), vec3(_363, _364, _365)) * 0.5) + 0.5;
        float _1887 = _1886 * _1886;
        float _3785 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
        float _1888 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1889 = isnan(1.0) ? _1590 : (isnan(_1590) ? 1.0 : min(_1590, 1.0));
        _1708 = (((cbLight._m0[_1870].x * 0.3183098733425140380859375) * _1888) * _1889) + _1663;
        _1710 = (((cbLight._m0[_1870].y * 0.3183098733425140380859375) * _1888) * _1889) + _1665;
        _1712 = (((cbLight._m0[_1870].z * 0.3183098733425140380859375) * _1888) * _1889) + _1667;
    }
    uint _1715 = _1574 + 8u;
    float _1728 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1574].w)) * _366) * 0.949999988079071044921875);
    float _1729 = _1728 * _1728;
    float _1730 = cbLight._m0[_1574].x + _443;
    float _1731 = cbLight._m0[_1574].y + _444;
    float _1732 = cbLight._m0[_1574].z + _445;
    float _1736 = inversesqrt(dot(vec3(_1730, _1731, _1732), vec3(_1730, _1731, _1732)));
    float _1737 = _1736 * _1730;
    float _1738 = _1736 * _1731;
    float _1739 = _1736 * _1732;
    float _1740 = dot(vec3(_363, _364, _365), vec3(cbLight._m0[_1574].xyz));
    float _3801 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
    float _1743 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _3812 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _1744 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _1745 = dot(vec3(_363, _364, _365), vec3(_1737, _1738, _1739));
    float _3823 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
    float _1748 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _1749 = dot(vec3(cbLight._m0[_1574].xyz), vec3(_1737, _1738, _1739));
    float _3834 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
    float _1753 = _1729 * _1729;
    float _1757 = ((_1748 * _1748) * (_1753 + (-1.0))) + 1.0;
    float _1768 = (exp2(log2(1.0 - (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1769 = 1.0 - _1729;
    float _1780 = (0.5 / (((_1744 * ((_1743 * _1769) + _1729)) + 9.9999999392252902907785028219223e-09) + (((_1744 * _1769) + _1729) * _1743))) * _1743;
    float _3845 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1782 = (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (_1753 / ((_1757 * _1757) * 3.141590118408203125));
    uint _1796 = _1574 + 9u;
    float _1807 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1615].w)) * _366) * 0.949999988079071044921875);
    float _1808 = _1807 * _1807;
    float _1809 = cbLight._m0[_1615].x + _443;
    float _1810 = cbLight._m0[_1615].y + _444;
    float _1811 = cbLight._m0[_1615].z + _445;
    float _1815 = inversesqrt(dot(vec3(_1809, _1810, _1811), vec3(_1809, _1810, _1811)));
    float _1816 = _1815 * _1809;
    float _1817 = _1815 * _1810;
    float _1818 = _1815 * _1811;
    float _1819 = dot(vec3(_363, _364, _365), vec3(cbLight._m0[_1615].xyz));
    float _3856 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
    float _1822 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _1823 = dot(vec3(_363, _364, _365), vec3(_1816, _1817, _1818));
    float _3867 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _1826 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _1827 = dot(vec3(cbLight._m0[_1615].xyz), vec3(_1816, _1817, _1818));
    float _3878 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _1831 = _1808 * _1808;
    float _1835 = ((_1826 * _1826) * (_1831 + (-1.0))) + 1.0;
    float _1844 = (exp2(log2(1.0 - (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1845 = 1.0 - _1808;
    float _1855 = (0.5 / (((_1744 * ((_1822 * _1845) + _1808)) + 9.9999999392252902907785028219223e-09) + (((_1744 * _1845) + _1808) * _1822))) * _1822;
    float _3889 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1857 = (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_1831 / ((_1835 * _1835) * 3.141590118408203125));
    float _1867 = (((_1844 * cbLight._m0[_1796].x) * _1857) * _1597) + ((((cbLight._m0[_1715].x * _1566) * _1768) * _1782) * _1611);
    float _1868 = (((_1844 * cbLight._m0[_1796].y) * _1857) * _1597) + ((((cbLight._m0[_1715].y * _1567) * _1768) * _1782) * _1611);
    float _1869 = (((_1844 * cbLight._m0[_1796].z) * _1857) * _1597) + ((((cbLight._m0[_1715].z * _1568) * _1768) * _1782) * _1611);
    float _1931;
    float _1933;
    float _1935;
    if (_1652)
    {
        _1931 = _1867;
        _1933 = _1868;
        _1935 = _1869;
    }
    else
    {
        uint _1937 = _1574 + 2u;
        uint _1941 = _1574 + 10u;
        float _1955 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1937].w)) * _366) * 0.949999988079071044921875);
        float _1956 = _1955 * _1955;
        float _1957 = cbLight._m0[_1937].x + _443;
        float _1958 = cbLight._m0[_1937].y + _444;
        float _1959 = cbLight._m0[_1937].z + _445;
        float _1963 = inversesqrt(dot(vec3(_1957, _1958, _1959), vec3(_1957, _1958, _1959)));
        float _1964 = _1963 * _1957;
        float _1965 = _1963 * _1958;
        float _1966 = _1963 * _1959;
        float _1967 = dot(vec3(_363, _364, _365), vec3(cbLight._m0[_1937].xyz));
        float _3900 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
        float _1970 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1971 = dot(vec3(_363, _364, _365), vec3(_1964, _1965, _1966));
        float _3911 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
        float _1974 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1975 = dot(vec3(cbLight._m0[_1937].xyz), vec3(_1964, _1965, _1966));
        float _3922 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
        float _1979 = _1956 * _1956;
        float _1983 = ((_1974 * _1974) * (_1979 + (-1.0))) + 1.0;
        float _1992 = (exp2(log2(1.0 - (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1993 = 1.0 - _1956;
        float _2003 = (0.5 / (((_1744 * ((_1970 * _1993) + _1956)) + 9.9999999392252902907785028219223e-09) + (((_1744 * _1993) + _1956) * _1970))) * _1970;
        float _3933 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
        float _2005 = (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_1979 / ((_1983 * _1983) * 3.141590118408203125));
        float _2006 = isnan(1.0) ? _1589 : (isnan(_1589) ? 1.0 : min(_1589, 1.0));
        _1931 = (((_1992 * cbLight._m0[_1941].x) * _2005) * _2006) + _1867;
        _1933 = (((_1992 * cbLight._m0[_1941].y) * _2005) * _2006) + _1868;
        _1935 = (((_1992 * cbLight._m0[_1941].z) * _2005) * _2006) + _1869;
    }
    float _2041;
    float _2043;
    float _2045;
    if (_1670)
    {
        _2041 = _1931;
        _2043 = _1933;
        _2045 = _1935;
    }
    else
    {
        uint _2052 = _1574 + 3u;
        uint _2056 = _1574 + 11u;
        float _2070 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2052].w)) * _366) * 0.949999988079071044921875);
        float _2071 = _2070 * _2070;
        float _2072 = cbLight._m0[_2052].x + _443;
        float _2073 = cbLight._m0[_2052].y + _444;
        float _2074 = cbLight._m0[_2052].z + _445;
        float _2078 = inversesqrt(dot(vec3(_2072, _2073, _2074), vec3(_2072, _2073, _2074)));
        float _2079 = _2078 * _2072;
        float _2080 = _2078 * _2073;
        float _2081 = _2078 * _2074;
        float _2082 = dot(vec3(_363, _364, _365), vec3(cbLight._m0[_2052].xyz));
        float _3949 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
        float _2085 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _2086 = dot(vec3(_363, _364, _365), vec3(_2079, _2080, _2081));
        float _3960 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
        float _2089 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _2090 = dot(vec3(cbLight._m0[_2052].xyz), vec3(_2079, _2080, _2081));
        float _3971 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
        float _2094 = _2071 * _2071;
        float _2098 = ((_2089 * _2089) * (_2094 + (-1.0))) + 1.0;
        float _2107 = (exp2(log2(1.0 - (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2108 = 1.0 - _2071;
        float _2118 = (0.5 / (((_1744 * ((_2085 * _2108) + _2071)) + 9.9999999392252902907785028219223e-09) + (((_1744 * _2108) + _2071) * _2085))) * _2085;
        float _3982 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        float _2120 = (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_2094 / ((_2098 * _2098) * 3.141590118408203125));
        float _2121 = isnan(1.0) ? _1590 : (isnan(_1590) ? 1.0 : min(_1590, 1.0));
        _2041 = (((_2107 * cbLight._m0[_2056].x) * _2120) * _2121) + _1931;
        _2043 = (((_2107 * cbLight._m0[_2056].y) * _2120) * _2121) + _1933;
        _2045 = (((_2107 * cbLight._m0[_2056].z) * _2120) * _2121) + _1935;
    }
    float _2256;
    float _2258;
    float _2260;
    float _2262;
    float _2264;
    float _2266;
    if (_1572.y == 0u)
    {
        float _2196 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2197 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2196;
        float _2198 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2196;
        float _2199 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2196;
        uvec4 _2211 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2212 = _2211.x;
        uint _2223 = uint((float(_2211.y) * floor(float(uint(cbSceneParam._m0[85u].y * _452) / _2212))) + floor(float(uint(cbSceneParam._m0[85u].x * _451) / _2212)));
        float _2233 = (log2(_2199 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2234 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        uint _2237 = uint(isnan(14.0) ? _2234 : (isnan(_2234) ? 14.0 : min(_2234, 14.0)));
        uvec4 _2242 = texelFetch(g_lightClusterGridBuffer, int(((_2237 << 2u) + (_2223 << 6u)) >> 2u));
        uint _2243 = _2242.x;
        uint _2244 = _2211.z;
        float _2379;
        float _2381;
        float _2383;
        float _2385;
        float _2387;
        float _2389;
        if (((((1u << ((_2244 >> 4u) & 15u)) + 4294967295u) & _2243) == 0u) || ((_2244 & 240u) == 0u))
        {
            _2379 = 0.0;
            _2381 = 0.0;
            _2383 = 0.0;
            _2385 = 0.0;
            _2387 = 0.0;
            _2389 = 0.0;
        }
        else
        {
            float _2380;
            float _2382;
            float _2384;
            float _2386;
            float _2388;
            float _2390;
            float _2533 = 0.0;
            float _2534 = 0.0;
            float _2535 = 0.0;
            float _2536 = 0.0;
            float _2537 = 0.0;
            float _2538 = 0.0;
            uint _2539 = 0u;
            uint _2548;
            bool _2549;
            for (;;)
            {
                _2548 = texelFetch(g_lightClassification, int((((_2237 << 5u) + (_2223 << 9u)) + (_2539 << 2u)) >> 2u)).x;
                _2549 = _2548 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2549)
                {
                    frontier_phi_61_pred = _2533;
                    frontier_phi_61_pred_1 = _2538;
                    frontier_phi_61_pred_2 = _2537;
                    frontier_phi_61_pred_3 = _2536;
                    frontier_phi_61_pred_4 = _2535;
                    frontier_phi_61_pred_5 = _2534;
                }
                else
                {
                    float _2657;
                    float _2658;
                    float _2659;
                    float _2660;
                    float _2661;
                    float _2662;
                    uint _2663;
                    _2657 = _2533;
                    _2658 = _2534;
                    _2659 = _2535;
                    _2660 = _2536;
                    _2661 = _2537;
                    _2662 = _2538;
                    _2663 = _2548;
                    float _2589;
                    float _2590;
                    float _2591;
                    float _2592;
                    float _2593;
                    float _2594;
                    for (;;)
                    {
                        uint _2667 = uint(findLSB(_2663)) + (_2539 << 5u);
                        uint _2664 = (_2663 + 4294967295u) & _2663;
                        uint _2669 = _2667 * 48u;
                        vec4 _2683 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2669)).x, texelFetch(g_PointLightRenderingBuffer, int(_2669 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2669 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2669 + 3u)).x));
                        uint _2689 = (_2667 * 48u) + 4u;
                        vec4 _2702 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2689)).x, texelFetch(g_PointLightRenderingBuffer, int(_2689 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2689 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2689 + 3u)).x));
                        uint _2708 = (_2667 * 48u) + 8u;
                        vec3 _2719 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2708)).x, texelFetch(g_PointLightRenderingBuffer, int(_2708 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2708 + 2u)).x));
                        float _2723 = _2683.x - _2197;
                        float _2724 = _2683.y - _2198;
                        float _2725 = _2683.z - _2199;
                        float _2726 = dot(vec3(_2723, _2724, _2725), vec3(_2723, _2724, _2725));
                        float _2729 = inversesqrt(_2726);
                        float _2730 = _2729 * _2723;
                        float _2731 = _2729 * _2724;
                        float _2732 = _2729 * _2725;
                        float _2733 = dot(vec3(_473, _476, _479), vec3(_2730, _2731, _2732));
                        float _2738 = 1.0 - (_2726 * _2683.w);
                        float _4008 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
                        float _2739 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
                        float _2740 = sqrt(_2726) * _2702.w;
                        float _2743 = 1.39999997615814208984375 / (_2740 + 1.39999997615814208984375);
                        float _2744 = _2743 * _2743;
                        float _2747 = ((1.0 - _2744) * _2733) + _2744;
                        float _2750 = _2740 * _2740;
                        float _2754 = ((isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0))) * _2739) / ((_2750 * 0.699999988079071044921875) + 1.0);
                        float _2758 = (-0.0) - _2197;
                        float _2759 = (-0.0) - _2198;
                        float _2760 = (-0.0) - _2199;
                        float _2764 = inversesqrt(dot(vec3(_2758, _2759, _2760), vec3(_2758, _2759, _2760)));
                        float _2765 = _2764 * _2758;
                        float _2766 = _2764 * _2759;
                        float _2767 = _2764 * _2760;
                        float _2775 = exp2(log2(1.0 / ((_2750 * 3.5) + 5.0)) * 0.25);
                        float _2776 = 1.0 - _534;
                        float _2783 = sqrt(1.0 - ((1.0 - (_2776 * _2776)) * (1.0 - (_2775 * _2775))));
                        float _2784 = _2783 * _2783;
                        float _2785 = _2784 * _2784;
                        float _2786 = _2765 + _2730;
                        float _2787 = _2766 + _2731;
                        float _2788 = _2767 + _2732;
                        float _2792 = inversesqrt(dot(vec3(_2786, _2787, _2788), vec3(_2786, _2787, _2788)));
                        float _2796 = dot(vec3(_473, _476, _479), vec3(_2765, _2766, _2767));
                        float _4024 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
                        float _2799 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
                        float _2800 = dot(vec3(_473, _476, _479), vec3(_2792 * _2786, _2792 * _2787, _2792 * _2788));
                        float _4035 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
                        float _2803 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
                        float _2807 = ((_2803 * _2803) * (_2785 + (-1.0))) + 1.0;
                        float _2808 = _2743 * _2784;
                        float _2809 = _2808 * _2808;
                        float _2812 = ((1.0 - _2809) * _2733) + _2809;
                        float _4046 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
                        float _2813 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
                        float _2814 = 1.0 - _2784;
                        float _2824 = (0.5 / (((_2813 * ((_2799 * _2814) + _2784)) + 9.9999999392252902907785028219223e-09) + (((_2813 * _2814) + _2784) * _2799))) * _2813;
                        float _4057 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
                        float _2835 = (((_2785 * 3.1415927410125732421875) * (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) / ((_2807 * _2807) * ((_2750 * 2.1991131305694580078125) + 3.141590118408203125))) * _2739;
                        _2592 = (_2754 * _2702.x) + _2660;
                        _2593 = (_2754 * _2702.y) + _2661;
                        _2594 = (_2754 * _2702.z) + _2662;
                        _2589 = (_2835 * _2719.x) + _2657;
                        _2590 = (_2835 * _2719.y) + _2658;
                        _2591 = (_2835 * _2719.z) + _2659;
                        if (_2664 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2657 = _2589;
                            _2658 = _2590;
                            _2659 = _2591;
                            _2660 = _2592;
                            _2661 = _2593;
                            _2662 = _2594;
                            _2663 = _2664;
                        }
                    }
                    frontier_phi_61_pred = _2589;
                    frontier_phi_61_pred_1 = _2594;
                    frontier_phi_61_pred_2 = _2593;
                    frontier_phi_61_pred_3 = _2592;
                    frontier_phi_61_pred_4 = _2591;
                    frontier_phi_61_pred_5 = _2590;
                }
                _2380 = frontier_phi_61_pred;
                _2390 = frontier_phi_61_pred_1;
                _2388 = frontier_phi_61_pred_2;
                _2386 = frontier_phi_61_pred_3;
                _2384 = frontier_phi_61_pred_4;
                _2382 = frontier_phi_61_pred_5;
                uint _2540 = _2539 + 1u;
                if (_2540 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2533 = _2380;
                    _2534 = _2382;
                    _2535 = _2384;
                    _2536 = _2386;
                    _2537 = _2388;
                    _2538 = _2390;
                    _2539 = _2540;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2379 = _2380;
            _2381 = _2382;
            _2383 = _2384;
            _2385 = _2386;
            _2387 = _2388;
            _2389 = _2390;
        }
        uvec4 _2393 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2394 = _2393.z;
        uint _2396 = (_2394 >> 8u) & 15u;
        float _2501;
        float _2503;
        float _2505;
        float _2507;
        float _2509;
        float _2511;
        if (((4294967295u << _2396) & _2243) == 0u)
        {
            _2501 = _2379;
            _2503 = _2381;
            _2505 = _2383;
            _2507 = _2385;
            _2509 = _2387;
            _2511 = _2389;
        }
        else
        {
            float _2526 = inversesqrt(dot(vec3(_2197, _2198, _2199), vec3(_2197, _2198, _2199)));
            float _2527 = _2526 * _2197;
            float _2528 = _2526 * _2198;
            float _2529 = _2526 * _2199;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2396 < ((_2394 >> 12u) & 15u))
            {
                float _2502;
                float _2504;
                float _2506;
                float _2508;
                float _2510;
                float _2512;
                float _2640 = _2379;
                float _2641 = _2381;
                float _2642 = _2383;
                float _2643 = _2385;
                float _2644 = _2387;
                float _2645 = _2389;
                uint _2646 = _2396;
                uint _2655;
                bool _2656;
                for (;;)
                {
                    _2655 = texelFetch(g_lightClassification, int((((_2237 << 5u) + (_2223 << 9u)) + (_2646 << 2u)) >> 2u)).x;
                    _2656 = _2655 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2656)
                    {
                        frontier_phi_67_pred = _2643;
                        frontier_phi_67_pred_1 = _2644;
                        frontier_phi_67_pred_2 = _2645;
                        frontier_phi_67_pred_3 = _2642;
                        frontier_phi_67_pred_4 = _2641;
                        frontier_phi_67_pred_5 = _2640;
                    }
                    else
                    {
                        float _2840;
                        float _2841;
                        float _2842;
                        float _2843;
                        float _2844;
                        float _2845;
                        float _3135;
                        float _3136;
                        float _3137;
                        float _3138;
                        float _3139;
                        float _3140;
                        float _2853 = _2640;
                        float _2854 = _2641;
                        float _2855 = _2642;
                        float _2856 = _2643;
                        float _2857 = _2644;
                        float _2858 = _2645;
                        uint _2859 = _2655;
                        uint _2860;
                        vec4 _2885;
                        float _2886;
                        vec4 _2901;
                        vec3 _2913;
                        vec4 _2928;
                        vec4 _2944;
                        float _2991;
                        bool _2992;
                        for (;;)
                        {
                            uint _2870 = ((_2646 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2859));
                            _2860 = (_2859 + 4294967295u) & _2859;
                            uint _2872 = _2870 * 40u;
                            _2885 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2872)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 3u)).x));
                            _2886 = _2885.w;
                            uint _2888 = (_2870 * 40u) + 4u;
                            _2901 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2888)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 3u)).x));
                            uint _2903 = (_2870 * 40u) + 8u;
                            _2913 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2903)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 2u)).x));
                            uint _2915 = (_2870 * 40u) + 16u;
                            _2928 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2915)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 3u)).x));
                            uint _2931 = (_2870 * 40u) + 20u;
                            _2944 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2931)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 3u)).x));
                            uint _2947 = (_2870 * 40u) + 24u;
                            vec4 _2960 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2947)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 3u)).x));
                            uint _2966 = (_2870 * 40u) + 28u;
                            vec4 _2979 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2966)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 3u)).x));
                            _2991 = fma(_2199, _2979.z, fma(_2198, _2979.y, _2979.x * _2197)) + _2979.w;
                            _2992 = !((fma(_2199, _2960.z, fma(_2198, _2960.y, _2960.x * _2197)) + _2960.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2992)
                            {
                                float _3019 = _2885.x - _2197;
                                float _3020 = _2885.y - _2198;
                                float _3021 = _2885.z - _2199;
                                float _3022 = dot(vec3(_3019, _3020, _3021), vec3(_3019, _3020, _3021));
                                float _3025 = inversesqrt(_3022);
                                float _3026 = _3025 * _3019;
                                float _3027 = _3025 * _3020;
                                float _3028 = _3025 * _3021;
                                float _3032 = 1.0 - (_3022 / (_2886 * _2886));
                                float _4068 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                                float _3033 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
                                float _3037 = sqrt(_3022) * _2901.w;
                                float _3039 = 1.39999997615814208984375 / (_3037 + 1.39999997615814208984375);
                                float _3040 = _3039 * _3039;
                                float _3043 = ((1.0 - _3040) * dot(vec3(_3026, _3027, _3028), vec3(_473, _476, _479))) + _3040;
                                float _3046 = _3037 * _3037;
                                float _3050 = (fma(_2199, _2928.z, fma(_2198, _2928.y, _2928.x * _2197)) + _2928.w) / _2991;
                                float _3051 = (fma(_2199, _2944.z, fma(_2198, _2944.y, _2944.x * _2197)) + _2944.w) / _2991;
                                float _3055 = 1.0 - dot(vec2(_3050, _3051), vec2(_3050, _3051));
                                float _4084 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                                float _3056 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
                                float _3057 = _3056 * (((isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0))) * _3033) / ((_3046 * 0.699999988079071044921875) + 1.0));
                                float _3069 = exp2(log2(1.0 / ((_3046 * 3.5) + 5.0)) * 0.25);
                                float _3070 = 1.0 - _534;
                                float _3077 = sqrt(1.0 - ((1.0 - (_3070 * _3070)) * (1.0 - (_3069 * _3069))));
                                float _3078 = _3077 * _3077;
                                float _3079 = _3078 * _3078;
                                float _3080 = _3026 - _2527;
                                float _3081 = _3027 - _2528;
                                float _3082 = _3028 - _2529;
                                float _3086 = inversesqrt(dot(vec3(_3080, _3081, _3082), vec3(_3080, _3081, _3082)));
                                float _3090 = dot(vec3(_473, _476, _479), vec3((-0.0) - _2527, (-0.0) - _2528, (-0.0) - _2529));
                                float _4095 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                                float _3093 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
                                float _3094 = dot(vec3(_473, _476, _479), vec3(_3086 * _3080, _3086 * _3081, _3086 * _3082));
                                float _4106 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                                float _3097 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
                                float _3101 = ((_3097 * _3097) * (_3079 + (-1.0))) + 1.0;
                                float _3102 = _3039 * _3078;
                                float _3103 = _3102 * _3102;
                                float _3109 = ((1.0 - _3103) * dot(vec3(_473, _476, _479), vec3(_3026, _3027, _3028))) + _3103;
                                float _4117 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                                float _3110 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
                                float _3111 = 1.0 - _3078;
                                float _3121 = (0.5 / (((_3110 * ((_3093 * _3111) + _3078)) + 9.9999999392252902907785028219223e-09) + (((_3110 * _3111) + _3078) * _3093))) * _3110;
                                float _4128 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                                float _3131 = (_3056 * _3033) * (((_3079 * 3.1415927410125732421875) * (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) / ((_3101 * _3101) * ((_3046 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3131 * _2913.x;
                                frontier_phi_73_pred_1 = _3131 * _2913.y;
                                frontier_phi_73_pred_2 = _3057 * _2901.z;
                                frontier_phi_73_pred_3 = _3057 * _2901.y;
                                frontier_phi_73_pred_4 = _3057 * _2901.x;
                                frontier_phi_73_pred_5 = _3131 * _2913.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3135 = frontier_phi_73_pred;
                            _3136 = frontier_phi_73_pred_1;
                            _3140 = frontier_phi_73_pred_2;
                            _3139 = frontier_phi_73_pred_3;
                            _3138 = frontier_phi_73_pred_4;
                            _3137 = frontier_phi_73_pred_5;
                            _2843 = _3138 + _2856;
                            _2844 = _3139 + _2857;
                            _2845 = _3140 + _2858;
                            _2840 = _3135 + _2853;
                            _2841 = _3136 + _2854;
                            _2842 = _3137 + _2855;
                            if (_2860 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2853 = _2840;
                                _2854 = _2841;
                                _2855 = _2842;
                                _2856 = _2843;
                                _2857 = _2844;
                                _2858 = _2845;
                                _2859 = _2860;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2843;
                        frontier_phi_67_pred_1 = _2844;
                        frontier_phi_67_pred_2 = _2845;
                        frontier_phi_67_pred_3 = _2842;
                        frontier_phi_67_pred_4 = _2841;
                        frontier_phi_67_pred_5 = _2840;
                    }
                    _2508 = frontier_phi_67_pred;
                    _2510 = frontier_phi_67_pred_1;
                    _2512 = frontier_phi_67_pred_2;
                    _2506 = frontier_phi_67_pred_3;
                    _2504 = frontier_phi_67_pred_4;
                    _2502 = frontier_phi_67_pred_5;
                    uint _2647 = _2646 + 1u;
                    if (_2647 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2640 = _2502;
                        _2641 = _2504;
                        _2642 = _2506;
                        _2643 = _2508;
                        _2644 = _2510;
                        _2645 = _2512;
                        _2646 = _2647;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2510;
                frontier_phi_55_56_ladder_1 = _2512;
                frontier_phi_55_56_ladder_2 = _2508;
                frontier_phi_55_56_ladder_3 = _2506;
                frontier_phi_55_56_ladder_4 = _2504;
                frontier_phi_55_56_ladder_5 = _2502;
            }
            else
            {
                frontier_phi_55_56_ladder = _2387;
                frontier_phi_55_56_ladder_1 = _2389;
                frontier_phi_55_56_ladder_2 = _2385;
                frontier_phi_55_56_ladder_3 = _2383;
                frontier_phi_55_56_ladder_4 = _2381;
                frontier_phi_55_56_ladder_5 = _2379;
            }
            _2501 = frontier_phi_55_56_ladder_5;
            _2503 = frontier_phi_55_56_ladder_4;
            _2505 = frontier_phi_55_56_ladder_3;
            _2507 = frontier_phi_55_56_ladder_2;
            _2509 = frontier_phi_55_56_ladder;
            _2511 = frontier_phi_55_56_ladder_1;
        }
        float _2516 = isnan(1.0) ? _518 : (isnan(_518) ? 1.0 : min(_518, 1.0));
        _2256 = (_2516 * _2507) + _1708;
        _2258 = (_2516 * _2509) + _1710;
        _2260 = (_2516 * _2511) + _1712;
        _2262 = ((_2501 * 0.039999999105930328369140625) * _2516) + _2041;
        _2264 = ((_2503 * 0.039999999105930328369140625) * _2516) + _2043;
        _2266 = ((_2505 * 0.039999999105930328369140625) * _2516) + _2045;
    }
    else
    {
        _2256 = _1708;
        _2258 = _1710;
        _2260 = _1712;
        _2262 = _2041;
        _2264 = _2043;
        _2266 = _2045;
    }
    uint _2272 = _494 + uint(cbMatDynParam._m0[0u].w);
    float _2280 = ((_349 * cbMtdParam._m0[11u].x) * (_333.x + _318.x)) * cbInstanceData._m0[_2272].x;
    float _2283 = ((_349 * cbMtdParam._m0[11u].y) * (_333.y + _318.y)) * cbInstanceData._m0[_2272].y;
    float _2286 = ((_349 * cbMtdParam._m0[11u].z) * (_333.z + _318.z)) * cbInstanceData._m0[_2272].z;
    float _4144 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _4155 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _4166 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _2303 = (((isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_2256 + ((isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0))) * _518))) + ((_2262 + ((isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))) * _1325)) * cbPerFrame._m0[3u].x)) + _2280;
    float _2305 = (_2283 + ((_2264 + ((isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))) * _1325)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_2258 + ((isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0))) * _518)));
    float _2307 = (_2286 + ((_2266 + ((isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))) * _1325)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_2260 + ((isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0))) * _518)));
    float _4192 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2320 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
    uint _2321 = _492 + 6u;
    float _2329 = _451 / cbSceneParam._m0[86u].x;
    float _2330 = _452 / cbSceneParam._m0[86u].y;
    vec4 _2344 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2329, _2330, (log2((isnan(cbSceneParam._m0[77u].w) ? _385 : (isnan(_385) ? cbSceneParam._m0[77u].w : min(_385, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2346 = _2344.x;
    float _2347 = _2344.y;
    float _2348 = _2344.z;
    float _2349 = _2344.w;
    float _2442;
    float _2444;
    float _2446;
    float _2448;
    if (_385 > cbSceneParam._m0[78u].w)
    {
        float _2404 = isnan(_385) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _385 : min(cbSceneParam._m0[80u].w, _385));
        float _2405 = _2404 / _385;
        float _2416 = _2405 * _436;
        float _2417 = _437 * _2405;
        float _2418 = (-0.0) - _2417;
        float _2420 = _2405 * _438;
        float _2422 = (cbSceneParam._m0[77u].w * _2418) / _2404;
        float _2423 = _2422 + cbSceneParam._m0[79u].w;
        float _2424 = cbSceneParam._m0[79u].w - _2417;
        float _2430 = sqrt(((_2416 * _2416) + (_2417 * _2417)) + (_2420 * _2420));
        float _2433 = (1.0 - (cbSceneParam._m0[77u].w / _2404)) * _2430;
        float _2438 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2440 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2602;
        if (abs((_2418 - _2422) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2602 = ((((_2423 > 0.0) ? exp2(_2438 * _2423) : (2.0 - exp2(_2440 * _2423))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2433;
        }
        else
        {
            float _2562 = 1.0 / cbSceneParam._m0[80u].x;
            float _2563 = isnan(_2424) ? _2423 : (isnan(_2423) ? _2424 : max(_2423, _2424));
            float _2564 = isnan(_2424) ? _2423 : (isnan(_2423) ? _2424 : min(_2423, _2424));
            float _2573 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : min(_2563, 0.0));
            float _2574 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : min(_2564, 0.0));
            _2602 = ((abs(_2430 / _2418) * cbSceneParam._m0[80u].y) * ((((_2573 - _2574) * 2.0) - ((exp2(_2438 * (isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0)))) - exp2(_2438 * (isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0))))) * _2562)) - ((exp2(_2440 * _2573) - exp2(_2440 * _2574)) * _2562))) + (_2433 * cbSceneParam._m0[80u].z);
        }
        vec4 _2604 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2329, _2330, 1.0), 0.0);
        float _2613 = exp2((_2602 * (-1.44269502162933349609375)) * (1.0 - _2604.w));
        float _2614 = log2(_2613);
        float _2630 = log2(_2349);
        _2442 = (exp2(_2630 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2614 * cbSceneParam._m0[78u].x)) * _2604.x) / cbSceneParam._m0[78u].x)) + _2346;
        _2444 = (exp2(_2630 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2614 * cbSceneParam._m0[78u].y)) * _2604.y) / cbSceneParam._m0[78u].y)) + _2347;
        _2446 = (exp2(_2630 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2614 * cbSceneParam._m0[78u].z)) * _2604.z) / cbSceneParam._m0[78u].z)) + _2348;
        _2448 = _2613 * _2349;
    }
    else
    {
        _2442 = _2346;
        _2444 = _2347;
        _2446 = _2348;
        _2448 = _2349;
    }
    float _2460 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2461 = _2460 == 3.0;
    float _2462 = log2(_2448);
    float _2466 = exp2(_2462 * cbSceneParam._m0[78u].x);
    float _2467 = exp2(_2462 * cbSceneParam._m0[78u].y);
    float _2468 = exp2(_2462 * cbSceneParam._m0[78u].z);
    float _2469 = _2466 * (isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0)));
    float _2470 = _2467 * (isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0)));
    float _2471 = _2468 * (isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0)));
    float _2480 = (_2460 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2480 * (_2461 ? _2469 : (_2469 + (cbSceneParam._m0[72u].w * _2442)));
    SV_Target.y = _2480 * (_2461 ? _2470 : (_2470 + (cbSceneParam._m0[72u].w * _2444)));
    SV_Target.z = _2480 * (_2461 ? _2471 : (_2471 + (cbSceneParam._m0[72u].w * _2446)));
    SV_Target.w = cbInstanceData._m0[_2321].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2280) * _2320) * _2466) * _2480;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2283) * _2320) * _2467) * _2480;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2286) * _2320) * _2468) * _2480;
    SV_Target_1.w = cbInstanceData._m0[_2321].w;
}


