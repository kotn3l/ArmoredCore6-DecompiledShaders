#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _996;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _239 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _245 = _239.x * cbMtdParam._m0[9u].x;
    float _246 = _239.y * cbMtdParam._m0[9u].y;
    float _247 = _239.z * cbMtdParam._m0[9u].z;
    vec4 _285 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _301 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3374 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _302 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
    float _309 = (((_285.x * cbMtdParam._m0[10u].x) - _245) * _302) + _245;
    float _310 = (((_285.y * cbMtdParam._m0[10u].y) - _246) * _302) + _246;
    float _311 = (((_285.z * cbMtdParam._m0[10u].z) - _247) * _302) + _247;
    vec4 _331 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _346 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _354 = (_346.x * 2.0) + (-1.0);
    float _356 = (_346.y * 2.0) + (-1.0);
    float _357 = dot(vec2(_354, _356), vec2(_354, _356));
    float _3385 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    vec4 _374 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _378 = _374.z;
    float _381 = (_374.x * 2.0) + (-1.0);
    float _382 = (_374.y * 2.0) + (-1.0);
    float _383 = dot(vec2(_381, _382), vec2(_381, _382));
    float _3396 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _388 = sqrt(1.0 - (isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0))));
    float _391 = (_302 * (_346.z - _378)) + _378;
    vec4 _418 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _433 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _447 = (TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_331.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].x + 1.0);
    float _3407 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _448 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
    float _455 = (_302 * (_354 - _381)) + _381;
    float _456 = (_302 * (_356 - _382)) + _382;
    float _457 = (_302 * (sqrt(1.0 - (isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0)))) - _388)) + _388;
    float _460 = fma(_457, _210 * NORMAL.x, fma(_456, _217 * TANGENT.x, (_203 * _195) * _455));
    float _463 = fma(_457, _210 * NORMAL.y, fma(_456, _217 * TANGENT.y, (_203 * _196) * _455));
    float _466 = fma(_457, _210 * NORMAL.z, fma(_456, _217 * TANGENT.z, (_203 * _197) * _455));
    float _470 = inversesqrt(dot(vec3(_460, _463, _466), vec3(_460, _463, _466)));
    float _471 = _470 * _460;
    float _472 = _470 * _463;
    float _473 = _470 * _466;
    float _3418 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _474 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
    float _3429 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _3440 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _3451 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _493 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _534 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _544 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _534);
    float _545 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _534);
    float _546 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _534);
    float _550 = inversesqrt(dot(vec3(_544, _545, _546), vec3(_544, _545, _546)));
    float _551 = _544 * _550;
    float _552 = _545 * _550;
    float _553 = _546 * _550;
    float _559 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _560 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _580 = fma(_473, cbSceneParam._m0[5u].z, fma(_472, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _471));
    float _583 = fma(_473, cbSceneParam._m0[6u].z, fma(_472, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _471));
    float _586 = fma(_473, cbSceneParam._m0[7u].z, fma(_472, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _471));
    uint _599 = uint(roundEven(NORMAL.w)) * 13u;
    uint _600 = _599 + 9u;
    uint _601 = _600 + uint(cbMatDynParam._m0[0u].w);
    float _607 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0)))) * cbInstanceData._m0[_601].x;
    float _608 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0)))) * cbInstanceData._m0[_601].y;
    float _609 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0)))) * cbInstanceData._m0[_601].z;
    float _3462 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _610 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
    float _3473 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _611 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
    float _3484 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _612 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
    vec4 _621 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _559, cbSceneParam._m0[86u].y * _560));
    float _624 = _621.x * TEXCOORD_3.w;
    float _625 = dot(vec3(_471, _472, _473), vec3(_551, _552, _553));
    float _628 = _625 * 2.0;
    float _632 = (_628 * _471) - _551;
    float _633 = (_628 * _472) - _552;
    float _634 = (_628 * _473) - _553;
    float _638 = abs(dot(vec3(_551, _552, _553), vec3(_471, _472, _473)));
    float _3495 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _640 = sqrt(_474);
    float _653 = exp2((_640 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_640 * 3.0));
    float _685 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _689 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _693 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _995;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _720 = fma(_693, cbModelParam._m0[26u].z, fma(_689, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _685));
        float _724 = fma(_693, cbModelParam._m0[27u].z, fma(_689, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _685));
        float _728 = fma(_693, cbModelParam._m0[28u].z, fma(_689, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _685));
        float _753 = _685 + _471;
        float _754 = _689 + _472;
        float _755 = _693 + _473;
        float _765 = fma(_755, cbModelParam._m0[26u].z, fma(_754, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _753)) - _720;
        float _766 = fma(_755, cbModelParam._m0[27u].z, fma(_754, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _753)) - _724;
        float _767 = fma(_755, cbModelParam._m0[28u].z, fma(_754, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _753)) - _728;
        float _771 = inversesqrt(dot(vec3(_765, _766, _767), vec3(_765, _766, _767)));
        float _784 = ((_771 * _765) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_720 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _785 = ((_771 * _766) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_724 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _786 = ((_771 * _767) / cbModelParam._m0[34u].z) + ((((((_728 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _789 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_784, _785, _786), 0.0);
        vec4 _796 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_784, _785, _786), 0.0);
        vec4 _803 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_784, _785, _786), 0.0);
        vec4 _810 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_784, _785, _786), 0.0);
        float _823 = exp2((_789.w + (-0.5)) * 20.0) * 2.0;
        float _824 = _823 * (_789.x + (-0.5));
        float _825 = _823 * (_789.y + (-0.5));
        float _826 = _823 * (_789.z + (-0.5));
        float _833 = exp2((_796.w + (-0.5)) * 20.0) * 2.0;
        float _834 = _833 * (_796.x + (-0.5));
        float _835 = _833 * (_796.y + (-0.5));
        float _836 = _833 * (_796.z + (-0.5));
        float _843 = exp2((_803.w + (-0.5)) * 20.0) * 2.0;
        float _844 = _843 * (_803.x + (-0.5));
        float _845 = _843 * (_803.y + (-0.5));
        float _846 = _843 * (_803.z + (-0.5));
        float _853 = exp2((_810.w + (-0.5)) * 20.0) * 2.0;
        float _854 = _853 * (_810.x + (-0.5));
        float _855 = _853 * (_810.y + (-0.5));
        float _856 = _853 * (_810.z + (-0.5));
        float _857 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _858 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _859 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _860 = _824 * 0.5;
        float _861 = _834 * 0.5;
        float _862 = _844 * 0.5;
        float _863 = dot(vec3(_860, _861, _862), vec3(_860, _861, _862));
        float _868 = (_863 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_863);
        float _877 = (dot(vec3(_471, _472, _473), vec3(_868 * _860, _868 * _861, _868 * _862)) + 1.0) * 0.5;
        float _3521 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _887 = sqrt(((_861 * _861) + (_860 * _860)) + (_862 * _862)) / (_857 + 9.9999997473787516355514526367188e-06);
        float _3532 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _888 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
        float _889 = _888 * 2.0;
        float _893 = (1.0 - _888) / (_888 + 1.0);
        float _3543 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _894 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _903 = ((((1.0 - _894) * (_889 + 2.0)) * exp2(log2(isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0))) * (_889 + 1.0))) + _894) * _857;
        float _904 = _825 * 0.5;
        float _905 = _835 * 0.5;
        float _906 = _845 * 0.5;
        float _907 = dot(vec3(_904, _905, _906), vec3(_904, _905, _906));
        float _912 = (_907 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_907);
        float _920 = (dot(vec3(_471, _472, _473), vec3(_912 * _904, _912 * _905, _912 * _906)) + 1.0) * 0.5;
        float _3554 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _929 = sqrt(((_905 * _905) + (_904 * _904)) + (_906 * _906)) / (_858 + 9.9999997473787516355514526367188e-06);
        float _3565 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _931 = _930 * 2.0;
        float _935 = (1.0 - _930) / (_930 + 1.0);
        float _3576 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _945 = ((((1.0 - _936) * (_931 + 2.0)) * exp2(log2(isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0))) * (_931 + 1.0))) + _936) * _858;
        float _946 = _826 * 0.5;
        float _947 = _836 * 0.5;
        float _948 = _846 * 0.5;
        float _949 = dot(vec3(_946, _947, _948), vec3(_946, _947, _948));
        float _954 = (_949 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_949);
        float _962 = (dot(vec3(_471, _472, _473), vec3(_954 * _946, _954 * _947, _954 * _948)) + 1.0) * 0.5;
        float _3587 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _971 = sqrt(((_947 * _947) + (_946 * _946)) + (_948 * _948)) / (_859 + 9.9999997473787516355514526367188e-06);
        float _3598 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
        float _973 = _972 * 2.0;
        float _977 = (1.0 - _972) / (_972 + 1.0);
        float _3609 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _987 = ((((1.0 - _978) * (_973 + 2.0)) * exp2(log2(isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))) * (_973 + 1.0))) + _978) * _859;
        _995 = _826;
        _997 = _825;
        _998 = _824;
        _999 = _836;
        _1000 = _835;
        _1001 = _834;
        _1002 = _846;
        _1003 = _845;
        _1004 = _844;
        _1005 = _859;
        _1006 = _858;
        _1007 = _857;
        _1008 = cbModelParam._m0[36u].z * (isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0)));
        _1009 = cbModelParam._m0[36u].z * (isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0)));
        _1010 = cbModelParam._m0[36u].z * (isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0)));
    }
    else
    {
        _995 = _996;
        _997 = _996;
        _998 = _996;
        _999 = _996;
        _1000 = _996;
        _1001 = _996;
        _1002 = _996;
        _1003 = _996;
        _1004 = _996;
        _1005 = _996;
        _1006 = _996;
        _1007 = _996;
        _1008 = 0.0;
        _1009 = 0.0;
        _1010 = 0.0;
    }
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1036 = fma(_693, cbModelParam._m0[30u].z, fma(_689, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _685));
        float _1040 = fma(_693, cbModelParam._m0[31u].z, fma(_689, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _685));
        float _1044 = fma(_693, cbModelParam._m0[32u].z, fma(_689, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _685));
        float _1067 = _685 + _471;
        float _1068 = _689 + _472;
        float _1069 = _693 + _473;
        float _1079 = fma(_1069, cbModelParam._m0[30u].z, fma(_1068, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1067)) - _1036;
        float _1080 = fma(_1069, cbModelParam._m0[31u].z, fma(_1068, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1067)) - _1040;
        float _1081 = fma(_1069, cbModelParam._m0[32u].z, fma(_1068, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1067)) - _1044;
        float _1085 = inversesqrt(dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081)));
        float _1098 = ((_1085 * _1079) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1036 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1099 = ((_1085 * _1080) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1040 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1100 = ((_1085 * _1081) / cbModelParam._m0[35u].z) + ((((((_1044 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        vec4 _1116 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        float _1135 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1102.x + (-0.5));
        float _1137 = _1135 * (_1102.y + (-0.5));
        float _1138 = _1135 * (_1102.z + (-0.5));
        float _1145 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1109.x + (-0.5));
        float _1147 = _1145 * (_1109.y + (-0.5));
        float _1148 = _1145 * (_1109.z + (-0.5));
        float _1155 = exp2((_1116.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1116.x + (-0.5));
        float _1157 = _1155 * (_1116.y + (-0.5));
        float _1158 = _1155 * (_1116.z + (-0.5));
        float _1165 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1123.x + (-0.5));
        float _1167 = _1165 * (_1123.y + (-0.5));
        float _1168 = _1165 * (_1123.z + (-0.5));
        float _1169 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1170 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1171 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1172 = _1136 * 0.5;
        float _1173 = _1146 * 0.5;
        float _1174 = _1156 * 0.5;
        float _1175 = dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174));
        float _1180 = (_1175 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1175);
        float _1188 = (dot(vec3(_471, _472, _473), vec3(_1180 * _1172, _1180 * _1173, _1180 * _1174)) + 1.0) * 0.5;
        float _3650 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1197 = sqrt(((_1173 * _1173) + (_1172 * _1172)) + (_1174 * _1174)) / (_1169 + 9.9999997473787516355514526367188e-06);
        float _3661 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1199 = _1198 * 2.0;
        float _1203 = (1.0 - _1198) / (_1198 + 1.0);
        float _3672 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _1213 = ((((1.0 - _1204) * (_1199 + 2.0)) * exp2(log2(isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) * (_1199 + 1.0))) + _1204) * _1169;
        float _1214 = _1137 * 0.5;
        float _1215 = _1147 * 0.5;
        float _1216 = _1157 * 0.5;
        float _1217 = dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216));
        float _1222 = (_1217 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1217);
        float _1230 = (dot(vec3(_471, _472, _473), vec3(_1222 * _1214, _1222 * _1215, _1222 * _1216)) + 1.0) * 0.5;
        float _3683 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1239 = sqrt(((_1215 * _1215) + (_1214 * _1214)) + (_1216 * _1216)) / (_1170 + 9.9999997473787516355514526367188e-06);
        float _3694 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1241 = _1240 * 2.0;
        float _1245 = (1.0 - _1240) / (_1240 + 1.0);
        float _3705 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _1255 = ((((1.0 - _1246) * (_1241 + 2.0)) * exp2(log2(isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * (_1241 + 1.0))) + _1246) * _1170;
        float _1256 = _1138 * 0.5;
        float _1257 = _1148 * 0.5;
        float _1258 = _1158 * 0.5;
        float _1259 = dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258));
        float _1264 = (_1259 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1259);
        float _1272 = (dot(vec3(_471, _472, _473), vec3(_1264 * _1256, _1264 * _1257, _1264 * _1258)) + 1.0) * 0.5;
        float _3716 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1281 = sqrt(((_1257 * _1257) + (_1256 * _1256)) + (_1258 * _1258)) / (_1171 + 9.9999997473787516355514526367188e-06);
        float _3727 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1283 = _1282 * 2.0;
        float _1287 = (1.0 - _1282) / (_1282 + 1.0);
        float _3738 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1297 = ((((1.0 - _1288) * (_1283 + 2.0)) * exp2(log2(isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0))) * (_1283 + 1.0))) + _1288) * _1171;
        _1305 = _1138;
        _1306 = _1137;
        _1307 = _1136;
        _1308 = _1148;
        _1309 = _1147;
        _1310 = _1146;
        _1311 = _1158;
        _1312 = _1157;
        _1313 = _1156;
        _1314 = _1171;
        _1315 = _1170;
        _1316 = _1169;
        _1317 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)));
        _1318 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)));
        _1319 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)));
    }
    else
    {
        _1305 = _996;
        _1306 = _996;
        _1307 = _996;
        _1308 = _996;
        _1309 = _996;
        _1310 = _996;
        _1311 = _996;
        _1312 = _996;
        _1313 = _996;
        _1314 = _996;
        _1315 = _996;
        _1316 = _996;
        _1317 = 0.0;
        _1318 = 0.0;
        _1319 = 0.0;
    }
    float _1329 = (cbModelParam._m0[1u].x * (_1317 - _1008)) + _1008;
    float _1330 = (cbModelParam._m0[1u].x * (_1318 - _1009)) + _1009;
    float _1331 = (cbModelParam._m0[1u].x * (_1319 - _1010)) + _1010;
    float _1352 = fma(_1331, cbSceneParam._m0[89u].z, fma(_1330, cbSceneParam._m0[89u].y, _1329 * cbSceneParam._m0[89u].x));
    float _1355 = fma(_1331, cbSceneParam._m0[90u].z, fma(_1330, cbSceneParam._m0[90u].y, _1329 * cbSceneParam._m0[90u].x));
    float _1358 = fma(_1331, cbSceneParam._m0[91u].z, fma(_1330, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1329));
    float _1373 = _632 * 0.5;
    float _1374 = _633 * 0.5;
    float _1375 = _634 * 0.5;
    float _1376 = dot(vec4(_1373, _1374, _1375, 1.0), vec4(_1307, _1310, _1313, _1316));
    float _1379 = dot(vec4(_1373, _1374, _1375, 1.0), vec4(_1306, _1309, _1312, _1315));
    float _1382 = dot(vec4(_1373, _1374, _1375, 1.0), vec4(_1305, _1308, _1311, _1314));
    float _1416;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1389 = dot(vec4(_1373, _1374, _1375, 1.0), vec4(_995, _999, _1002, _1005));
        float _1393 = dot(vec4(_1373, _1374, _1375, 1.0), vec4(_997, _1000, _1003, _1006));
        float _1397 = dot(vec4(_1373, _1374, _1375, 1.0), vec4(_998, _1001, _1004, _1007));
        float _1404 = dot(vec4(cbModelParam._m0[39u]), vec4(_1373, _1374, _1375, 1.0));
        _1416 = dot(vec3(isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)), isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)), isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1404) ? 0.0 : (isnan(0.0) ? _1404 : max(0.0, _1404))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1416 = 1.0;
    }
    float _1427;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1418 = dot(vec4(cbModelParam._m0[40u]), vec4(_1373, _1374, _1375, 1.0));
        _1427 = dot(vec3(isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)), isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)), isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1418) ? 0.0 : (isnan(0.0) ? _1418 : max(0.0, _1418))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1427 = 1.0;
    }
    float _1431 = (_1427 * cbModelParam._m0[1u].x) + (_1416 * (1.0 - cbModelParam._m0[1u].x));
    float _1441 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _474);
    float _1442 = isnan(_1441) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1441 : min(cbModelParam._m0[25u].z, _1441));
    float _1522;
    float _1524;
    float _1526;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1489 = fma(_693, cbModelParam._m0[13u].z, fma(_689, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _685)) + cbModelParam._m0[13u].w;
        float _1493 = fma(_693, cbModelParam._m0[14u].z, fma(_689, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _685)) + cbModelParam._m0[14u].w;
        float _1497 = fma(_693, cbModelParam._m0[15u].z, fma(_689, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _685)) + cbModelParam._m0[15u].w;
        float _1500 = fma(_634, cbModelParam._m0[13u].z, fma(_633, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _632));
        float _1503 = fma(_634, cbModelParam._m0[14u].z, fma(_633, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _632));
        float _1506 = fma(_634, cbModelParam._m0[15u].z, fma(_633, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _632));
        float _1534;
        if (_1500 > 0.0)
        {
            _1534 = abs((1.0 - _1489) / _1500);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1500 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1489 + 1.0) / _1500);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1534 = frontier_phi_14_12_ladder;
        }
        float _1758;
        if (_1503 > 0.0)
        {
            _1758 = abs((1.0 - _1493) / _1503);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1503 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1493 + 1.0) / _1503);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1758 = frontier_phi_23_19_ladder;
        }
        float _2004;
        if (_1506 > 0.0)
        {
            _2004 = abs((1.0 - _1497) / _1506);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1506 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1497 + 1.0) / _1506);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2004 = frontier_phi_35_30_ladder;
        }
        float _2006 = isnan(_1758) ? _1534 : (isnan(_1534) ? _1758 : min(_1534, _1758));
        float _2007 = isnan(_2004) ? _2006 : (isnan(_2006) ? _2004 : min(_2006, _2004));
        float _2011 = (_2007 * _1500) + _1489;
        float _2012 = (_2007 * _1503) + _1493;
        float _2013 = (_2007 * _1506) + _1497;
        float _2014 = _2007 * 9.9999997473787516355514526367188e-05;
        float _2016 = (-1.0) - _2014;
        float _2018 = _2014 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2013 > _2018) || ((_2013 < _2016) || ((_2012 > _2018) || ((_2012 < _2016) || ((_2011 < _2016) || (_2011 > _2018))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2137 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2013, cbModelParam._m0[9u].z, fma(_2012, cbModelParam._m0[9u].y, _2011 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2013, cbModelParam._m0[10u].z, fma(_2012, cbModelParam._m0[10u].y, _2011 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2013, cbModelParam._m0[11u].z, fma(_2012, cbModelParam._m0[11u].y, _2011 * cbModelParam._m0[11u].x))), _1442);
            frontier_phi_13_35_ladder = _2137.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2137.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2137.x * cbModelParam._m0[1u].y;
        }
        _1522 = frontier_phi_13_35_ladder_2;
        _1524 = frontier_phi_13_35_ladder_1;
        _1526 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1510 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_632, _633, _634), _1442);
        _1522 = _1510.x * cbModelParam._m0[1u].y;
        _1524 = _1510.y * cbModelParam._m0[1u].y;
        _1526 = _1510.z * cbModelParam._m0[1u].y;
    }
    float _1530 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _474);
    float _1531 = isnan(_1530) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1530 : min(cbModelParam._m0[25u].w, _1530));
    float _1622;
    float _1624;
    float _1626;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1586 = fma(_693, cbModelParam._m0[21u].z, fma(_689, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _685)) + cbModelParam._m0[21u].w;
        float _1590 = fma(_693, cbModelParam._m0[22u].z, fma(_689, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _685)) + cbModelParam._m0[22u].w;
        float _1594 = fma(_693, cbModelParam._m0[23u].z, fma(_689, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _685)) + cbModelParam._m0[23u].w;
        float _1597 = fma(_634, cbModelParam._m0[21u].z, fma(_633, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _632));
        float _1600 = fma(_634, cbModelParam._m0[22u].z, fma(_633, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _632));
        float _1603 = fma(_634, cbModelParam._m0[23u].z, fma(_633, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _632));
        float _1763;
        if (_1597 > 0.0)
        {
            _1763 = abs((1.0 - _1586) / _1597);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1597 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1586 + 1.0) / _1597);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1763 = frontier_phi_25_21_ladder;
        }
        float _2031;
        if (_1600 > 0.0)
        {
            _2031 = abs((1.0 - _1590) / _1600);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1600 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1590 + 1.0) / _1600);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2031 = frontier_phi_37_32_ladder;
        }
        float _2236;
        if (_1603 > 0.0)
        {
            _2236 = abs((1.0 - _1594) / _1603);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1603 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1594 + 1.0) / _1603);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2236 = frontier_phi_46_43_ladder;
        }
        float _2238 = isnan(_2031) ? _1763 : (isnan(_1763) ? _2031 : min(_1763, _2031));
        float _2239 = isnan(_2236) ? _2238 : (isnan(_2238) ? _2236 : min(_2238, _2236));
        float _2243 = (_2239 * _1597) + _1586;
        float _2244 = (_2239 * _1600) + _1590;
        float _2245 = (_2239 * _1603) + _1594;
        float _2246 = _2239 * 9.9999997473787516355514526367188e-05;
        float _2247 = (-1.0) - _2246;
        float _2249 = _2246 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2245 > _2249) || ((_2245 < _2247) || ((_2244 > _2249) || ((_2244 < _2247) || ((_2243 < _2247) || (_2243 > _2249))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2479 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2245, cbModelParam._m0[17u].z, fma(_2244, cbModelParam._m0[17u].y, _2243 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2245, cbModelParam._m0[18u].z, fma(_2244, cbModelParam._m0[18u].y, _2243 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2245, cbModelParam._m0[19u].z, fma(_2244, cbModelParam._m0[19u].y, _2243 * cbModelParam._m0[19u].x))), _1531);
            frontier_phi_22_46_ladder = _2479.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2479.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2479.x * cbModelParam._m0[1u].z;
        }
        _1622 = frontier_phi_22_46_ladder_2;
        _1624 = frontier_phi_22_46_ladder_1;
        _1626 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1606 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_632, _633, _634), _1531);
        _1622 = _1606.x * cbModelParam._m0[1u].z;
        _1624 = _1606.y * cbModelParam._m0[1u].z;
        _1626 = _1606.z * cbModelParam._m0[1u].z;
    }
    float _1638 = ((((1.0 - _653) * ((_640 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_653 * _640)) * _624;
    float _1639 = _1638 * ((cbModelParam._m0[1u].w * (_1622 - _1522)) + _1522);
    float _1640 = _1638 * ((cbModelParam._m0[1u].w * (_1624 - _1524)) + _1524);
    float _1641 = _1638 * ((cbModelParam._m0[1u].w * (_1626 - _1526)) + _1526);
    float _1644 = fma(_1641, cbSceneParam._m0[89u].z, fma(_1640, cbSceneParam._m0[89u].y, _1639 * cbSceneParam._m0[89u].x));
    float _1647 = fma(_1641, cbSceneParam._m0[90u].z, fma(_1640, cbSceneParam._m0[90u].y, _1639 * cbSceneParam._m0[90u].x));
    float _1650 = fma(_1641, cbSceneParam._m0[91u].z, fma(_1640, cbSceneParam._m0[91u].y, _1639 * cbSceneParam._m0[91u].x));
    vec4 _1658 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_559, _560));
    float _1660 = _1658.w;
    float _1672 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1660);
    float _1673 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1660);
    float _1674 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1660);
    uvec4 _1678 = floatBitsToUint(cbInstanceData._m0[_599 + 5u]);
    uint _1680 = _1678.x * 14u;
    uint _1681 = _1680 + 13u;
    float _1688 = _624 + (-1.0);
    float _1693 = (cbLight._m0[_1681].x * _1688) + 1.0;
    float _1694 = (cbLight._m0[_1681].y * _1688) + 1.0;
    float _1695 = (cbLight._m0[_1681].z * _1688) + 1.0;
    float _1696 = (cbLight._m0[_1681].w * _1688) + 1.0;
    uint _1697 = _1680 + 5u;
    float _1703 = isnan(1.0) ? _1694 : (isnan(_1694) ? 1.0 : min(_1694, 1.0));
    uint _1707 = _1680 + 4u;
    float _1716 = isnan(1.0) ? _1693 : (isnan(_1693) ? 1.0 : min(_1693, 1.0));
    uint _1720 = _1680 | 1u;
    float _1731 = dot(vec3(cbLight._m0[_1680].xyz), vec3(_471, _472, _473));
    float _1734 = dot(vec3(cbLight._m0[_1720].xyz), vec3(_471, _472, _473));
    float _3874 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
    float _3885 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
    float _1739 = (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * 0.3183098733425140380859375;
    float _1741 = (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * 0.3183098733425140380859375;
    float _1748 = ((cbLight._m0[_1697].x * _1703) * _1741) + (((cbLight._m0[_1707].x * _1672) * _1716) * _1739);
    float _1749 = ((_1703 * cbLight._m0[_1697].y) * _1741) + (((cbLight._m0[_1707].y * _1673) * _1716) * _1739);
    float _1750 = ((_1703 * cbLight._m0[_1697].z) * _1741) + (((cbLight._m0[_1707].z * _1674) * _1716) * _1739);
    uvec4 _1755 = floatBitsToUint(cbLight._m0[_1680 + 12u]);
    bool _1757 = _1755.x == 0u;
    float _1768;
    float _1770;
    float _1772;
    if (_1757)
    {
        _1768 = _1748;
        _1770 = _1749;
        _1772 = _1750;
    }
    else
    {
        uint _1776 = _1680 + 6u;
        float _1792 = (dot(vec3(cbLight._m0[_1680 + 2u].xyz), vec3(_471, _472, _473)) * 0.5) + 0.5;
        float _1793 = _1792 * _1792;
        float _3896 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1794 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1795 = isnan(1.0) ? _1695 : (isnan(_1695) ? 1.0 : min(_1695, 1.0));
        _1768 = (((cbLight._m0[_1776].x * 0.3183098733425140380859375) * _1794) * _1795) + _1748;
        _1770 = (((cbLight._m0[_1776].y * 0.3183098733425140380859375) * _1794) * _1795) + _1749;
        _1772 = (((cbLight._m0[_1776].z * 0.3183098733425140380859375) * _1794) * _1795) + _1750;
    }
    bool _1775 = _1755.y == 0u;
    float _1813;
    float _1815;
    float _1817;
    if (_1775)
    {
        _1813 = _1768;
        _1815 = _1770;
        _1817 = _1772;
    }
    else
    {
        uint _1975 = _1680 + 7u;
        float _1991 = (dot(vec3(cbLight._m0[_1680 + 3u].xyz), vec3(_471, _472, _473)) * 0.5) + 0.5;
        float _1992 = _1991 * _1991;
        float _3912 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
        float _1993 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1994 = isnan(1.0) ? _1696 : (isnan(_1696) ? 1.0 : min(_1696, 1.0));
        _1813 = (((cbLight._m0[_1975].x * 0.3183098733425140380859375) * _1993) * _1994) + _1768;
        _1815 = (((cbLight._m0[_1975].y * 0.3183098733425140380859375) * _1993) * _1994) + _1770;
        _1817 = (((cbLight._m0[_1975].z * 0.3183098733425140380859375) * _1993) * _1994) + _1772;
    }
    uint _1820 = _1680 + 8u;
    float _1833 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1680].w)) * _474) * 0.949999988079071044921875);
    float _1834 = _1833 * _1833;
    float _1835 = cbLight._m0[_1680].x + _551;
    float _1836 = cbLight._m0[_1680].y + _552;
    float _1837 = cbLight._m0[_1680].z + _553;
    float _1841 = inversesqrt(dot(vec3(_1835, _1836, _1837), vec3(_1835, _1836, _1837)));
    float _1842 = _1841 * _1835;
    float _1843 = _1841 * _1836;
    float _1844 = _1841 * _1837;
    float _1845 = dot(vec3(_471, _472, _473), vec3(cbLight._m0[_1680].xyz));
    float _3928 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _1848 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _3939 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _1849 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _1850 = dot(vec3(_471, _472, _473), vec3(_1842, _1843, _1844));
    float _3950 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
    float _1853 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _1854 = dot(vec3(cbLight._m0[_1680].xyz), vec3(_1842, _1843, _1844));
    float _3961 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1858 = _1834 * _1834;
    float _1862 = ((_1853 * _1853) * (_1858 + (-1.0))) + 1.0;
    float _1873 = (exp2(log2(1.0 - (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1874 = 1.0 - _1834;
    float _1885 = (0.5 / (((_1849 * ((_1848 * _1874) + _1834)) + 9.9999999392252902907785028219223e-09) + (((_1849 * _1874) + _1834) * _1848))) * _1848;
    float _3972 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1887 = (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) * (_1858 / ((_1862 * _1862) * 3.141590118408203125));
    uint _1901 = _1680 + 9u;
    float _1912 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1720].w)) * _474) * 0.949999988079071044921875);
    float _1913 = _1912 * _1912;
    float _1914 = cbLight._m0[_1720].x + _551;
    float _1915 = cbLight._m0[_1720].y + _552;
    float _1916 = cbLight._m0[_1720].z + _553;
    float _1920 = inversesqrt(dot(vec3(_1914, _1915, _1916), vec3(_1914, _1915, _1916)));
    float _1921 = _1920 * _1914;
    float _1922 = _1920 * _1915;
    float _1923 = _1920 * _1916;
    float _1924 = dot(vec3(_471, _472, _473), vec3(cbLight._m0[_1720].xyz));
    float _3983 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1927 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _1928 = dot(vec3(_471, _472, _473), vec3(_1921, _1922, _1923));
    float _3994 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1931 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _1932 = dot(vec3(cbLight._m0[_1720].xyz), vec3(_1921, _1922, _1923));
    float _4005 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _1936 = _1913 * _1913;
    float _1940 = ((_1931 * _1931) * (_1936 + (-1.0))) + 1.0;
    float _1949 = (exp2(log2(1.0 - (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1950 = 1.0 - _1913;
    float _1960 = (0.5 / (((_1849 * ((_1927 * _1950) + _1913)) + 9.9999999392252902907785028219223e-09) + (((_1849 * _1950) + _1913) * _1927))) * _1927;
    float _4016 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
    float _1962 = (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1936 / ((_1940 * _1940) * 3.141590118408203125));
    float _1972 = (((_1949 * cbLight._m0[_1901].x) * _1962) * _1703) + ((((cbLight._m0[_1820].x * _1672) * _1873) * _1887) * _1716);
    float _1973 = (((_1949 * cbLight._m0[_1901].y) * _1962) * _1703) + ((((cbLight._m0[_1820].y * _1673) * _1873) * _1887) * _1716);
    float _1974 = (((_1949 * cbLight._m0[_1901].z) * _1962) * _1703) + ((((cbLight._m0[_1820].z * _1674) * _1873) * _1887) * _1716);
    float _2036;
    float _2038;
    float _2040;
    if (_1757)
    {
        _2036 = _1972;
        _2038 = _1973;
        _2040 = _1974;
    }
    else
    {
        uint _2042 = _1680 + 2u;
        uint _2046 = _1680 + 10u;
        float _2060 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2042].w)) * _474) * 0.949999988079071044921875);
        float _2061 = _2060 * _2060;
        float _2062 = cbLight._m0[_2042].x + _551;
        float _2063 = cbLight._m0[_2042].y + _552;
        float _2064 = cbLight._m0[_2042].z + _553;
        float _2068 = inversesqrt(dot(vec3(_2062, _2063, _2064), vec3(_2062, _2063, _2064)));
        float _2069 = _2068 * _2062;
        float _2070 = _2068 * _2063;
        float _2071 = _2068 * _2064;
        float _2072 = dot(vec3(_471, _472, _473), vec3(cbLight._m0[_2042].xyz));
        float _4027 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
        float _2075 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _2076 = dot(vec3(_471, _472, _473), vec3(_2069, _2070, _2071));
        float _4038 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
        float _2079 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _2080 = dot(vec3(cbLight._m0[_2042].xyz), vec3(_2069, _2070, _2071));
        float _4049 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2084 = _2061 * _2061;
        float _2088 = ((_2079 * _2079) * (_2084 + (-1.0))) + 1.0;
        float _2097 = (exp2(log2(1.0 - (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2098 = 1.0 - _2061;
        float _2108 = (0.5 / (((_1849 * ((_2075 * _2098) + _2061)) + 9.9999999392252902907785028219223e-09) + (((_1849 * _2098) + _2061) * _2075))) * _2075;
        float _4060 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
        float _2110 = (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_2084 / ((_2088 * _2088) * 3.141590118408203125));
        float _2111 = isnan(1.0) ? _1695 : (isnan(_1695) ? 1.0 : min(_1695, 1.0));
        _2036 = (((_2097 * cbLight._m0[_2046].x) * _2110) * _2111) + _1972;
        _2038 = (((_2097 * cbLight._m0[_2046].y) * _2110) * _2111) + _1973;
        _2040 = (((_2097 * cbLight._m0[_2046].z) * _2110) * _2111) + _1974;
    }
    float _2146;
    float _2148;
    float _2150;
    if (_1775)
    {
        _2146 = _2036;
        _2148 = _2038;
        _2150 = _2040;
    }
    else
    {
        uint _2157 = _1680 + 3u;
        uint _2161 = _1680 + 11u;
        float _2175 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2157].w)) * _474) * 0.949999988079071044921875);
        float _2176 = _2175 * _2175;
        float _2177 = cbLight._m0[_2157].x + _551;
        float _2178 = cbLight._m0[_2157].y + _552;
        float _2179 = cbLight._m0[_2157].z + _553;
        float _2183 = inversesqrt(dot(vec3(_2177, _2178, _2179), vec3(_2177, _2178, _2179)));
        float _2184 = _2183 * _2177;
        float _2185 = _2183 * _2178;
        float _2186 = _2183 * _2179;
        float _2187 = dot(vec3(_471, _472, _473), vec3(cbLight._m0[_2157].xyz));
        float _4076 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        float _2190 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _2191 = dot(vec3(_471, _472, _473), vec3(_2184, _2185, _2186));
        float _4087 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2194 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _2195 = dot(vec3(cbLight._m0[_2157].xyz), vec3(_2184, _2185, _2186));
        float _4098 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        float _2199 = _2176 * _2176;
        float _2203 = ((_2194 * _2194) * (_2199 + (-1.0))) + 1.0;
        float _2212 = (exp2(log2(1.0 - (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2213 = 1.0 - _2176;
        float _2223 = (0.5 / (((_1849 * ((_2190 * _2213) + _2176)) + 9.9999999392252902907785028219223e-09) + (((_1849 * _2213) + _2176) * _2190))) * _2190;
        float _4109 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2225 = (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_2199 / ((_2203 * _2203) * 3.141590118408203125));
        float _2226 = isnan(1.0) ? _1696 : (isnan(_1696) ? 1.0 : min(_1696, 1.0));
        _2146 = (((_2212 * cbLight._m0[_2161].x) * _2225) * _2226) + _2036;
        _2148 = (((_2212 * cbLight._m0[_2161].y) * _2225) * _2226) + _2038;
        _2150 = (((_2212 * cbLight._m0[_2161].z) * _2225) * _2226) + _2040;
    }
    float _2361;
    float _2363;
    float _2365;
    float _2367;
    float _2369;
    float _2371;
    if (_1678.y == 0u)
    {
        float _2301 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2302 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2301;
        float _2303 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2301;
        float _2304 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2301;
        uvec4 _2316 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2317 = _2316.x;
        uint _2328 = uint((float(_2316.y) * floor(float(uint(cbSceneParam._m0[85u].y * _560) / _2317))) + floor(float(uint(cbSceneParam._m0[85u].x * _559) / _2317)));
        float _2338 = (log2(_2304 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2339 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        uint _2342 = uint(isnan(14.0) ? _2339 : (isnan(_2339) ? 14.0 : min(_2339, 14.0)));
        uvec4 _2347 = texelFetch(g_lightClusterGridBuffer, int(((_2342 << 2u) + (_2328 << 6u)) >> 2u));
        uint _2348 = _2347.x;
        uint _2349 = _2316.z;
        float _2484;
        float _2486;
        float _2488;
        float _2490;
        float _2492;
        float _2494;
        if (((((1u << ((_2349 >> 4u) & 15u)) + 4294967295u) & _2348) == 0u) || ((_2349 & 240u) == 0u))
        {
            _2484 = 0.0;
            _2486 = 0.0;
            _2488 = 0.0;
            _2490 = 0.0;
            _2492 = 0.0;
            _2494 = 0.0;
        }
        else
        {
            float _2485;
            float _2487;
            float _2489;
            float _2491;
            float _2493;
            float _2495;
            float _2638 = 0.0;
            float _2639 = 0.0;
            float _2640 = 0.0;
            float _2641 = 0.0;
            float _2642 = 0.0;
            float _2643 = 0.0;
            uint _2644 = 0u;
            uint _2653;
            bool _2654;
            for (;;)
            {
                _2653 = texelFetch(g_lightClassification, int((((_2342 << 5u) + (_2328 << 9u)) + (_2644 << 2u)) >> 2u)).x;
                _2654 = _2653 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2654)
                {
                    frontier_phi_61_pred = _2638;
                    frontier_phi_61_pred_1 = _2643;
                    frontier_phi_61_pred_2 = _2642;
                    frontier_phi_61_pred_3 = _2641;
                    frontier_phi_61_pred_4 = _2640;
                    frontier_phi_61_pred_5 = _2639;
                }
                else
                {
                    float _2762;
                    float _2763;
                    float _2764;
                    float _2765;
                    float _2766;
                    float _2767;
                    uint _2768;
                    _2762 = _2638;
                    _2763 = _2639;
                    _2764 = _2640;
                    _2765 = _2641;
                    _2766 = _2642;
                    _2767 = _2643;
                    _2768 = _2653;
                    float _2694;
                    float _2695;
                    float _2696;
                    float _2697;
                    float _2698;
                    float _2699;
                    for (;;)
                    {
                        uint _2772 = uint(findLSB(_2768)) + (_2644 << 5u);
                        uint _2769 = (_2768 + 4294967295u) & _2768;
                        uint _2774 = _2772 * 48u;
                        vec4 _2788 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2774)).x, texelFetch(g_PointLightRenderingBuffer, int(_2774 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2774 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2774 + 3u)).x));
                        uint _2794 = (_2772 * 48u) + 4u;
                        vec4 _2807 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2794)).x, texelFetch(g_PointLightRenderingBuffer, int(_2794 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2794 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2794 + 3u)).x));
                        uint _2813 = (_2772 * 48u) + 8u;
                        vec3 _2824 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2813)).x, texelFetch(g_PointLightRenderingBuffer, int(_2813 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2813 + 2u)).x));
                        float _2828 = _2788.x - _2302;
                        float _2829 = _2788.y - _2303;
                        float _2830 = _2788.z - _2304;
                        float _2831 = dot(vec3(_2828, _2829, _2830), vec3(_2828, _2829, _2830));
                        float _2834 = inversesqrt(_2831);
                        float _2835 = _2834 * _2828;
                        float _2836 = _2834 * _2829;
                        float _2837 = _2834 * _2830;
                        float _2838 = dot(vec3(_580, _583, _586), vec3(_2835, _2836, _2837));
                        float _2843 = 1.0 - (_2831 * _2788.w);
                        float _4135 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
                        float _2844 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
                        float _2845 = sqrt(_2831) * _2807.w;
                        float _2848 = 1.39999997615814208984375 / (_2845 + 1.39999997615814208984375);
                        float _2849 = _2848 * _2848;
                        float _2852 = ((1.0 - _2849) * _2838) + _2849;
                        float _2855 = _2845 * _2845;
                        float _2859 = ((isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0))) * _2844) / ((_2855 * 0.699999988079071044921875) + 1.0);
                        float _2863 = (-0.0) - _2302;
                        float _2864 = (-0.0) - _2303;
                        float _2865 = (-0.0) - _2304;
                        float _2869 = inversesqrt(dot(vec3(_2863, _2864, _2865), vec3(_2863, _2864, _2865)));
                        float _2870 = _2869 * _2863;
                        float _2871 = _2869 * _2864;
                        float _2872 = _2869 * _2865;
                        float _2880 = exp2(log2(1.0 / ((_2855 * 3.5) + 5.0)) * 0.25);
                        float _2881 = 1.0 - _640;
                        float _2888 = sqrt(1.0 - ((1.0 - (_2881 * _2881)) * (1.0 - (_2880 * _2880))));
                        float _2889 = _2888 * _2888;
                        float _2890 = _2889 * _2889;
                        float _2891 = _2870 + _2835;
                        float _2892 = _2871 + _2836;
                        float _2893 = _2872 + _2837;
                        float _2897 = inversesqrt(dot(vec3(_2891, _2892, _2893), vec3(_2891, _2892, _2893)));
                        float _2901 = dot(vec3(_580, _583, _586), vec3(_2870, _2871, _2872));
                        float _4151 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
                        float _2904 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
                        float _2905 = dot(vec3(_580, _583, _586), vec3(_2897 * _2891, _2897 * _2892, _2897 * _2893));
                        float _4162 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
                        float _2908 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
                        float _2912 = ((_2908 * _2908) * (_2890 + (-1.0))) + 1.0;
                        float _2913 = _2848 * _2889;
                        float _2914 = _2913 * _2913;
                        float _2917 = ((1.0 - _2914) * _2838) + _2914;
                        float _4173 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
                        float _2918 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
                        float _2919 = 1.0 - _2889;
                        float _2929 = (0.5 / (((_2918 * ((_2904 * _2919) + _2889)) + 9.9999999392252902907785028219223e-09) + (((_2918 * _2919) + _2889) * _2904))) * _2918;
                        float _4184 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
                        float _2940 = (((_2890 * 3.1415927410125732421875) * (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0)))) / ((_2912 * _2912) * ((_2855 * 2.1991131305694580078125) + 3.141590118408203125))) * _2844;
                        _2697 = (_2859 * _2807.x) + _2765;
                        _2698 = (_2859 * _2807.y) + _2766;
                        _2699 = (_2859 * _2807.z) + _2767;
                        _2694 = (_2940 * _2824.x) + _2762;
                        _2695 = (_2940 * _2824.y) + _2763;
                        _2696 = (_2940 * _2824.z) + _2764;
                        if (_2769 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2762 = _2694;
                            _2763 = _2695;
                            _2764 = _2696;
                            _2765 = _2697;
                            _2766 = _2698;
                            _2767 = _2699;
                            _2768 = _2769;
                        }
                    }
                    frontier_phi_61_pred = _2694;
                    frontier_phi_61_pred_1 = _2699;
                    frontier_phi_61_pred_2 = _2698;
                    frontier_phi_61_pred_3 = _2697;
                    frontier_phi_61_pred_4 = _2696;
                    frontier_phi_61_pred_5 = _2695;
                }
                _2485 = frontier_phi_61_pred;
                _2495 = frontier_phi_61_pred_1;
                _2493 = frontier_phi_61_pred_2;
                _2491 = frontier_phi_61_pred_3;
                _2489 = frontier_phi_61_pred_4;
                _2487 = frontier_phi_61_pred_5;
                uint _2645 = _2644 + 1u;
                if (_2645 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2638 = _2485;
                    _2639 = _2487;
                    _2640 = _2489;
                    _2641 = _2491;
                    _2642 = _2493;
                    _2643 = _2495;
                    _2644 = _2645;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2484 = _2485;
            _2486 = _2487;
            _2488 = _2489;
            _2490 = _2491;
            _2492 = _2493;
            _2494 = _2495;
        }
        uvec4 _2498 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2499 = _2498.z;
        uint _2501 = (_2499 >> 8u) & 15u;
        float _2606;
        float _2608;
        float _2610;
        float _2612;
        float _2614;
        float _2616;
        if (((4294967295u << _2501) & _2348) == 0u)
        {
            _2606 = _2484;
            _2608 = _2486;
            _2610 = _2488;
            _2612 = _2490;
            _2614 = _2492;
            _2616 = _2494;
        }
        else
        {
            float _2631 = inversesqrt(dot(vec3(_2302, _2303, _2304), vec3(_2302, _2303, _2304)));
            float _2632 = _2631 * _2302;
            float _2633 = _2631 * _2303;
            float _2634 = _2631 * _2304;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2501 < ((_2499 >> 12u) & 15u))
            {
                float _2607;
                float _2609;
                float _2611;
                float _2613;
                float _2615;
                float _2617;
                float _2745 = _2484;
                float _2746 = _2486;
                float _2747 = _2488;
                float _2748 = _2490;
                float _2749 = _2492;
                float _2750 = _2494;
                uint _2751 = _2501;
                uint _2760;
                bool _2761;
                for (;;)
                {
                    _2760 = texelFetch(g_lightClassification, int((((_2342 << 5u) + (_2328 << 9u)) + (_2751 << 2u)) >> 2u)).x;
                    _2761 = _2760 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2761)
                    {
                        frontier_phi_67_pred = _2748;
                        frontier_phi_67_pred_1 = _2749;
                        frontier_phi_67_pred_2 = _2750;
                        frontier_phi_67_pred_3 = _2747;
                        frontier_phi_67_pred_4 = _2746;
                        frontier_phi_67_pred_5 = _2745;
                    }
                    else
                    {
                        float _2945;
                        float _2946;
                        float _2947;
                        float _2948;
                        float _2949;
                        float _2950;
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3243;
                        float _3244;
                        float _3245;
                        float _2958 = _2745;
                        float _2959 = _2746;
                        float _2960 = _2747;
                        float _2961 = _2748;
                        float _2962 = _2749;
                        float _2963 = _2750;
                        uint _2964 = _2760;
                        uint _2965;
                        vec4 _2990;
                        float _2991;
                        vec4 _3006;
                        vec3 _3018;
                        vec4 _3033;
                        vec4 _3049;
                        float _3096;
                        bool _3097;
                        for (;;)
                        {
                            uint _2975 = ((_2751 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2964));
                            _2965 = (_2964 + 4294967295u) & _2964;
                            uint _2977 = _2975 * 40u;
                            _2990 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2977)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 3u)).x));
                            _2991 = _2990.w;
                            uint _2993 = (_2975 * 40u) + 4u;
                            _3006 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2993)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 3u)).x));
                            uint _3008 = (_2975 * 40u) + 8u;
                            _3018 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3008)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 2u)).x));
                            uint _3020 = (_2975 * 40u) + 16u;
                            _3033 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3020)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 3u)).x));
                            uint _3036 = (_2975 * 40u) + 20u;
                            _3049 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3036)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 3u)).x));
                            uint _3052 = (_2975 * 40u) + 24u;
                            vec4 _3065 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3052)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 3u)).x));
                            uint _3071 = (_2975 * 40u) + 28u;
                            vec4 _3084 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 3u)).x));
                            _3096 = fma(_2304, _3084.z, fma(_2303, _3084.y, _3084.x * _2302)) + _3084.w;
                            _3097 = !((fma(_2304, _3065.z, fma(_2303, _3065.y, _3065.x * _2302)) + _3065.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3097)
                            {
                                float _3124 = _2990.x - _2302;
                                float _3125 = _2990.y - _2303;
                                float _3126 = _2990.z - _2304;
                                float _3127 = dot(vec3(_3124, _3125, _3126), vec3(_3124, _3125, _3126));
                                float _3130 = inversesqrt(_3127);
                                float _3131 = _3130 * _3124;
                                float _3132 = _3130 * _3125;
                                float _3133 = _3130 * _3126;
                                float _3137 = 1.0 - (_3127 / (_2991 * _2991));
                                float _4195 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                                float _3138 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
                                float _3142 = sqrt(_3127) * _3006.w;
                                float _3144 = 1.39999997615814208984375 / (_3142 + 1.39999997615814208984375);
                                float _3145 = _3144 * _3144;
                                float _3148 = ((1.0 - _3145) * dot(vec3(_3131, _3132, _3133), vec3(_580, _583, _586))) + _3145;
                                float _3151 = _3142 * _3142;
                                float _3155 = (fma(_2304, _3033.z, fma(_2303, _3033.y, _3033.x * _2302)) + _3033.w) / _3096;
                                float _3156 = (fma(_2304, _3049.z, fma(_2303, _3049.y, _3049.x * _2302)) + _3049.w) / _3096;
                                float _3160 = 1.0 - dot(vec2(_3155, _3156), vec2(_3155, _3156));
                                float _4211 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                                float _3161 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
                                float _3162 = _3161 * (((isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0))) * _3138) / ((_3151 * 0.699999988079071044921875) + 1.0));
                                float _3174 = exp2(log2(1.0 / ((_3151 * 3.5) + 5.0)) * 0.25);
                                float _3175 = 1.0 - _640;
                                float _3182 = sqrt(1.0 - ((1.0 - (_3175 * _3175)) * (1.0 - (_3174 * _3174))));
                                float _3183 = _3182 * _3182;
                                float _3184 = _3183 * _3183;
                                float _3185 = _3131 - _2632;
                                float _3186 = _3132 - _2633;
                                float _3187 = _3133 - _2634;
                                float _3191 = inversesqrt(dot(vec3(_3185, _3186, _3187), vec3(_3185, _3186, _3187)));
                                float _3195 = dot(vec3(_580, _583, _586), vec3((-0.0) - _2632, (-0.0) - _2633, (-0.0) - _2634));
                                float _4222 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                                float _3198 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
                                float _3199 = dot(vec3(_580, _583, _586), vec3(_3191 * _3185, _3191 * _3186, _3191 * _3187));
                                float _4233 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                                float _3202 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
                                float _3206 = ((_3202 * _3202) * (_3184 + (-1.0))) + 1.0;
                                float _3207 = _3144 * _3183;
                                float _3208 = _3207 * _3207;
                                float _3214 = ((1.0 - _3208) * dot(vec3(_580, _583, _586), vec3(_3131, _3132, _3133))) + _3208;
                                float _4244 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                                float _3215 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
                                float _3216 = 1.0 - _3183;
                                float _3226 = (0.5 / (((_3215 * ((_3198 * _3216) + _3183)) + 9.9999999392252902907785028219223e-09) + (((_3215 * _3216) + _3183) * _3198))) * _3215;
                                float _4255 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                                float _3236 = (_3161 * _3138) * (((_3184 * 3.1415927410125732421875) * (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0)))) / ((_3206 * _3206) * ((_3151 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3236 * _3018.x;
                                frontier_phi_73_pred_1 = _3236 * _3018.y;
                                frontier_phi_73_pred_2 = _3162 * _3006.z;
                                frontier_phi_73_pred_3 = _3162 * _3006.y;
                                frontier_phi_73_pred_4 = _3162 * _3006.x;
                                frontier_phi_73_pred_5 = _3236 * _3018.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3240 = frontier_phi_73_pred;
                            _3241 = frontier_phi_73_pred_1;
                            _3245 = frontier_phi_73_pred_2;
                            _3244 = frontier_phi_73_pred_3;
                            _3243 = frontier_phi_73_pred_4;
                            _3242 = frontier_phi_73_pred_5;
                            _2948 = _3243 + _2961;
                            _2949 = _3244 + _2962;
                            _2950 = _3245 + _2963;
                            _2945 = _3240 + _2958;
                            _2946 = _3241 + _2959;
                            _2947 = _3242 + _2960;
                            if (_2965 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2958 = _2945;
                                _2959 = _2946;
                                _2960 = _2947;
                                _2961 = _2948;
                                _2962 = _2949;
                                _2963 = _2950;
                                _2964 = _2965;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2948;
                        frontier_phi_67_pred_1 = _2949;
                        frontier_phi_67_pred_2 = _2950;
                        frontier_phi_67_pred_3 = _2947;
                        frontier_phi_67_pred_4 = _2946;
                        frontier_phi_67_pred_5 = _2945;
                    }
                    _2613 = frontier_phi_67_pred;
                    _2615 = frontier_phi_67_pred_1;
                    _2617 = frontier_phi_67_pred_2;
                    _2611 = frontier_phi_67_pred_3;
                    _2609 = frontier_phi_67_pred_4;
                    _2607 = frontier_phi_67_pred_5;
                    uint _2752 = _2751 + 1u;
                    if (_2752 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2745 = _2607;
                        _2746 = _2609;
                        _2747 = _2611;
                        _2748 = _2613;
                        _2749 = _2615;
                        _2750 = _2617;
                        _2751 = _2752;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2615;
                frontier_phi_55_56_ladder_1 = _2617;
                frontier_phi_55_56_ladder_2 = _2613;
                frontier_phi_55_56_ladder_3 = _2611;
                frontier_phi_55_56_ladder_4 = _2609;
                frontier_phi_55_56_ladder_5 = _2607;
            }
            else
            {
                frontier_phi_55_56_ladder = _2492;
                frontier_phi_55_56_ladder_1 = _2494;
                frontier_phi_55_56_ladder_2 = _2490;
                frontier_phi_55_56_ladder_3 = _2488;
                frontier_phi_55_56_ladder_4 = _2486;
                frontier_phi_55_56_ladder_5 = _2484;
            }
            _2606 = frontier_phi_55_56_ladder_5;
            _2608 = frontier_phi_55_56_ladder_4;
            _2610 = frontier_phi_55_56_ladder_3;
            _2612 = frontier_phi_55_56_ladder_2;
            _2614 = frontier_phi_55_56_ladder;
            _2616 = frontier_phi_55_56_ladder_1;
        }
        float _2621 = isnan(1.0) ? _624 : (isnan(_624) ? 1.0 : min(_624, 1.0));
        _2361 = (_2621 * _2612) + _1813;
        _2363 = (_2621 * _2614) + _1815;
        _2365 = (_2621 * _2616) + _1817;
        _2367 = ((_2606 * 0.039999999105930328369140625) * _2621) + _2146;
        _2369 = ((_2608 * 0.039999999105930328369140625) * _2621) + _2148;
        _2371 = ((_2610 * 0.039999999105930328369140625) * _2621) + _2150;
    }
    else
    {
        _2361 = _1813;
        _2363 = _1815;
        _2365 = _1817;
        _2367 = _2146;
        _2369 = _2148;
        _2371 = _2150;
    }
    uint _2377 = _600 + uint(cbMatDynParam._m0[0u].w);
    float _2385 = ((_448 * cbMtdParam._m0[11u].x) * (_433.x + _418.x)) * cbInstanceData._m0[_2377].x;
    float _2388 = ((_448 * cbMtdParam._m0[11u].y) * (_433.y + _418.y)) * cbInstanceData._m0[_2377].y;
    float _2391 = ((_448 * cbMtdParam._m0[11u].z) * (_433.z + _418.z)) * cbInstanceData._m0[_2377].z;
    float _4271 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _4282 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _4293 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _2408 = (((isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_2361 + ((isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0))) * _624))) + ((_2367 + ((isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))) * _1431)) * cbPerFrame._m0[3u].x)) + _2385;
    float _2410 = (_2388 + ((_2369 + ((isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0))) * _1431)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_2363 + ((isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0))) * _624)));
    float _2412 = (_2391 + ((_2371 + ((isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))) * _1431)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_2365 + ((isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0))) * _624)));
    float _4319 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2425 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
    uint _2426 = _599 + 6u;
    float _2434 = _559 / cbSceneParam._m0[86u].x;
    float _2435 = _560 / cbSceneParam._m0[86u].y;
    vec4 _2449 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2434, _2435, (log2((isnan(cbSceneParam._m0[77u].w) ? _493 : (isnan(_493) ? cbSceneParam._m0[77u].w : min(_493, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2451 = _2449.x;
    float _2452 = _2449.y;
    float _2453 = _2449.z;
    float _2454 = _2449.w;
    float _2547;
    float _2549;
    float _2551;
    float _2553;
    if (_493 > cbSceneParam._m0[78u].w)
    {
        float _2509 = isnan(_493) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _493 : min(cbSceneParam._m0[80u].w, _493));
        float _2510 = _2509 / _493;
        float _2521 = _2510 * _544;
        float _2522 = _545 * _2510;
        float _2523 = (-0.0) - _2522;
        float _2525 = _2510 * _546;
        float _2527 = (cbSceneParam._m0[77u].w * _2523) / _2509;
        float _2528 = _2527 + cbSceneParam._m0[79u].w;
        float _2529 = cbSceneParam._m0[79u].w - _2522;
        float _2535 = sqrt(((_2521 * _2521) + (_2522 * _2522)) + (_2525 * _2525));
        float _2538 = (1.0 - (cbSceneParam._m0[77u].w / _2509)) * _2535;
        float _2543 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2545 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2707;
        if (abs((_2523 - _2527) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2707 = ((((_2528 > 0.0) ? exp2(_2543 * _2528) : (2.0 - exp2(_2545 * _2528))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2538;
        }
        else
        {
            float _2667 = 1.0 / cbSceneParam._m0[80u].x;
            float _2668 = isnan(_2529) ? _2528 : (isnan(_2528) ? _2529 : max(_2528, _2529));
            float _2669 = isnan(_2529) ? _2528 : (isnan(_2528) ? _2529 : min(_2528, _2529));
            float _2678 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : min(_2668, 0.0));
            float _2679 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : min(_2669, 0.0));
            _2707 = ((abs(_2535 / _2523) * cbSceneParam._m0[80u].y) * ((((_2678 - _2679) * 2.0) - ((exp2(_2543 * (isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0)))) - exp2(_2543 * (isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0))))) * _2667)) - ((exp2(_2545 * _2678) - exp2(_2545 * _2679)) * _2667))) + (_2538 * cbSceneParam._m0[80u].z);
        }
        vec4 _2709 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2434, _2435, 1.0), 0.0);
        float _2718 = exp2((_2707 * (-1.44269502162933349609375)) * (1.0 - _2709.w));
        float _2719 = log2(_2718);
        float _2735 = log2(_2454);
        _2547 = (exp2(_2735 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2719 * cbSceneParam._m0[78u].x)) * _2709.x) / cbSceneParam._m0[78u].x)) + _2451;
        _2549 = (exp2(_2735 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2719 * cbSceneParam._m0[78u].y)) * _2709.y) / cbSceneParam._m0[78u].y)) + _2452;
        _2551 = (exp2(_2735 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2719 * cbSceneParam._m0[78u].z)) * _2709.z) / cbSceneParam._m0[78u].z)) + _2453;
        _2553 = _2718 * _2454;
    }
    else
    {
        _2547 = _2451;
        _2549 = _2452;
        _2551 = _2453;
        _2553 = _2454;
    }
    float _2565 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2566 = _2565 == 3.0;
    float _2567 = log2(_2553);
    float _2571 = exp2(_2567 * cbSceneParam._m0[78u].x);
    float _2572 = exp2(_2567 * cbSceneParam._m0[78u].y);
    float _2573 = exp2(_2567 * cbSceneParam._m0[78u].z);
    float _2574 = _2571 * (isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0)));
    float _2575 = _2572 * (isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0)));
    float _2576 = _2573 * (isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0)));
    float _2585 = (_2565 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2585 * (_2566 ? _2574 : (_2574 + (cbSceneParam._m0[72u].w * _2547)));
    SV_Target.y = _2585 * (_2566 ? _2575 : (_2575 + (cbSceneParam._m0[72u].w * _2549)));
    SV_Target.z = _2585 * (_2566 ? _2576 : (_2576 + (cbSceneParam._m0[72u].w * _2551)));
    SV_Target.w = cbInstanceData._m0[_2426].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2385) * _2425) * _2571) * _2585;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2388) * _2425) * _2572) * _2585;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2391) * _2425) * _2573) * _2585;
    SV_Target_1.w = cbInstanceData._m0[_2426].w;
}


