#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1117;
float _3823;
float _3824;
float _3825;
float _3826;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _251 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _257 = _251.x * cbMtdParam._m0[9u].x;
    float _258 = _251.y * cbMtdParam._m0[9u].y;
    float _259 = _251.z * cbMtdParam._m0[9u].z;
    vec4 _279 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _300 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_279.x + 0.00999999977648258209228515625));
    float _302 = _300 * (cbMtdParam._m0[15u].x + 1.0);
    float _3835 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _303 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _311 = ((((cbMtdParam._m0[12u].x - _257) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _303) + _257;
    float _312 = ((((cbMtdParam._m0[12u].y - _258) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _303) + _258;
    float _313 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _259)) * _303) + _259;
    vec4 _326 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _328 = _326.x;
    vec4 _340 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _344 = _340.z;
    float _348 = (_340.x * 2.0) + (-1.0);
    float _350 = (_340.y * 2.0) + (-1.0);
    float _351 = dot(vec2(_348, _350), vec2(_348, _350));
    float _3846 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _356 = sqrt(1.0 - (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))));
    float _359 = _300 * (cbMtdParam._m0[14u].w + 1.0);
    float _3857 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _363 = ((cbMtdParam._m0[14u].y - _344) * (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0)))) + _344;
    vec4 _391 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _406 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _451 = (TEXCOORD_6.x - ((cbMtdParam._m0[13u].w * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_5, SS_WrapLinear), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].x + 1.0);
    float _3868 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _452 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _453 = ((_406.x + _391.x) * cbMtdParam._m0[11u].x) * _452;
    float _454 = ((_406.y + _391.y) * cbMtdParam._m0[11u].y) * _452;
    float _455 = ((_406.z + _391.z) * cbMtdParam._m0[11u].z) * _452;
    vec4 _467 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[9u].w));
    float _469 = _467.x;
    vec4 _494 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _500 = (_494.x * 2.0) + (-1.0);
    float _501 = (_494.y * 2.0) + (-1.0);
    float _502 = dot(vec2(_500, _501), vec2(_500, _501));
    float _3879 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _518 = (_303 * (((cbMtdParam._m0[13u].z * _348) - _348) + _500)) + _348;
    float _519 = (_303 * (((cbMtdParam._m0[13u].z * _350) - _350) + _501)) + _350;
    float _520 = (_303 * (sqrt(1.0 - (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0)))) - _356)) + _356;
    float _523 = fma(_520, _222 * NORMAL.x, fma(_519, _229 * TANGENT.x, (_215 * _207) * _518));
    float _526 = fma(_520, _222 * NORMAL.y, fma(_519, _229 * TANGENT.y, (_215 * _208) * _518));
    float _529 = fma(_520, _222 * NORMAL.z, fma(_519, _229 * TANGENT.z, (_215 * _209) * _518));
    float _533 = inversesqrt(dot(vec3(_523, _526, _529), vec3(_523, _526, _529)));
    float _534 = _533 * _523;
    float _535 = _533 * _526;
    float _536 = _533 * _529;
    float _3890 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _537 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _3901 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _3912 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _3923 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _3934 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _541 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _557 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _597 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _607 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _597);
    float _608 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _597);
    float _609 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _597);
    float _613 = inversesqrt(dot(vec3(_607, _608, _609), vec3(_607, _608, _609)));
    float _614 = _607 * _613;
    float _615 = _608 * _613;
    float _616 = _609 * _613;
    vec4 _621 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _623 = _621.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _797 = sqrt(((_607 * _607) + (_608 * _608)) + (_609 * _609));
        float _803 = (cbMatDynParam._m0[5u].x * _797) + cbMatDynParam._m0[5u].y;
        float _3945 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _804 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _808 = (cbMatDynParam._m0[5u].z * _797) + cbMatDynParam._m0[5u].w;
        float _3956 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) - _804)) + _804) < ((_623 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _634 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _635 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _655 = fma(_536, cbSceneParam._m0[5u].z, fma(_535, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _534));
    float _658 = fma(_536, cbSceneParam._m0[6u].z, fma(_535, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _534));
    float _661 = fma(_536, cbSceneParam._m0[7u].z, fma(_535, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _534));
    uint _674 = uint(roundEven(NORMAL.w)) * 13u;
    uint _675 = _674 + 9u;
    uint _676 = _675 + uint(cbMatDynParam._m0[0u].w);
    float _682 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) * cbInstanceData._m0[_676].x;
    float _683 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0)))) * cbInstanceData._m0[_676].y;
    float _684 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0)))) * cbInstanceData._m0[_676].z;
    float _3967 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _685 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _3978 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _686 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _3989 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _687 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _688 = 1.0 - _541;
    float _689 = _685 * _688;
    float _690 = _686 * _688;
    float _691 = _687 * _688;
    float _696 = (_685 + (-0.039999999105930328369140625)) * _541;
    float _697 = (_686 + (-0.039999999105930328369140625)) * _541;
    float _698 = (_687 + (-0.039999999105930328369140625)) * _541;
    float _699 = _696 + 0.039999999105930328369140625;
    float _701 = _697 + 0.039999999105930328369140625;
    float _702 = _698 + 0.039999999105930328369140625;
    vec4 _711 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _634, cbSceneParam._m0[86u].y * _635));
    float _714 = _711.x * TEXCOORD_3.w;
    float _715 = dot(vec3(_534, _535, _536), vec3(_614, _615, _616));
    float _718 = _715 * 2.0;
    float _722 = (_718 * _534) - _614;
    float _723 = (_718 * _535) - _615;
    float _724 = (_718 * _536) - _616;
    float _728 = abs(dot(vec3(_614, _615, _616), vec3(_534, _535, _536)));
    float _4000 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _730 = sqrt(_537);
    float _743 = exp2((_730 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_730 * 3.0));
    float _749 = (1.0 - _743) * ((_730 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _750 = _743 * _730;
    float _778 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _782 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _786 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1116;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _841 = fma(_786, cbModelParam._m0[26u].z, fma(_782, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _778));
        float _845 = fma(_786, cbModelParam._m0[27u].z, fma(_782, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _778));
        float _849 = fma(_786, cbModelParam._m0[28u].z, fma(_782, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _778));
        float _874 = _778 + _534;
        float _875 = _782 + _535;
        float _876 = _786 + _536;
        float _886 = fma(_876, cbModelParam._m0[26u].z, fma(_875, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _874)) - _841;
        float _887 = fma(_876, cbModelParam._m0[27u].z, fma(_875, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _874)) - _845;
        float _888 = fma(_876, cbModelParam._m0[28u].z, fma(_875, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _874)) - _849;
        float _892 = inversesqrt(dot(vec3(_886, _887, _888), vec3(_886, _887, _888)));
        float _905 = ((_892 * _886) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_841 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _906 = ((_892 * _887) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_845 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _907 = ((_892 * _888) / cbModelParam._m0[34u].z) + ((((((_849 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _910 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        vec4 _917 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        vec4 _931 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        float _944 = exp2((_910.w + (-0.5)) * 20.0) * 2.0;
        float _945 = _944 * (_910.x + (-0.5));
        float _946 = _944 * (_910.y + (-0.5));
        float _947 = _944 * (_910.z + (-0.5));
        float _954 = exp2((_917.w + (-0.5)) * 20.0) * 2.0;
        float _955 = _954 * (_917.x + (-0.5));
        float _956 = _954 * (_917.y + (-0.5));
        float _957 = _954 * (_917.z + (-0.5));
        float _964 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _965 = _964 * (_924.x + (-0.5));
        float _966 = _964 * (_924.y + (-0.5));
        float _967 = _964 * (_924.z + (-0.5));
        float _974 = exp2((_931.w + (-0.5)) * 20.0) * 2.0;
        float _975 = _974 * (_931.x + (-0.5));
        float _976 = _974 * (_931.y + (-0.5));
        float _977 = _974 * (_931.z + (-0.5));
        float _978 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _979 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _980 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _981 = _945 * 0.5;
        float _982 = _955 * 0.5;
        float _983 = _965 * 0.5;
        float _984 = dot(vec3(_981, _982, _983), vec3(_981, _982, _983));
        float _989 = (_984 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_984);
        float _998 = (dot(vec3(_534, _535, _536), vec3(_989 * _981, _989 * _982, _989 * _983)) + 1.0) * 0.5;
        float _4026 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1008 = sqrt(((_982 * _982) + (_981 * _981)) + (_983 * _983)) / (_978 + 9.9999997473787516355514526367188e-06);
        float _4037 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1010 = _1009 * 2.0;
        float _1014 = (1.0 - _1009) / (_1009 + 1.0);
        float _4048 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1024 = ((((1.0 - _1015) * (_1010 + 2.0)) * exp2(log2(isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_1010 + 1.0))) + _1015) * _978;
        float _1025 = _946 * 0.5;
        float _1026 = _956 * 0.5;
        float _1027 = _966 * 0.5;
        float _1028 = dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027));
        float _1033 = (_1028 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1028);
        float _1041 = (dot(vec3(_534, _535, _536), vec3(_1033 * _1025, _1033 * _1026, _1033 * _1027)) + 1.0) * 0.5;
        float _4059 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1050 = sqrt(((_1026 * _1026) + (_1025 * _1025)) + (_1027 * _1027)) / (_979 + 9.9999997473787516355514526367188e-06);
        float _4070 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1052 = _1051 * 2.0;
        float _1056 = (1.0 - _1051) / (_1051 + 1.0);
        float _4081 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1066 = ((((1.0 - _1057) * (_1052 + 2.0)) * exp2(log2(isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_1052 + 1.0))) + _1057) * _979;
        float _1067 = _947 * 0.5;
        float _1068 = _957 * 0.5;
        float _1069 = _967 * 0.5;
        float _1070 = dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069));
        float _1075 = (_1070 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1070);
        float _1083 = (dot(vec3(_534, _535, _536), vec3(_1075 * _1067, _1075 * _1068, _1075 * _1069)) + 1.0) * 0.5;
        float _4092 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1092 = sqrt(((_1068 * _1068) + (_1067 * _1067)) + (_1069 * _1069)) / (_980 + 9.9999997473787516355514526367188e-06);
        float _4103 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1094 = _1093 * 2.0;
        float _1098 = (1.0 - _1093) / (_1093 + 1.0);
        float _4114 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1108 = ((((1.0 - _1099) * (_1094 + 2.0)) * exp2(log2(isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (_1094 + 1.0))) + _1099) * _980;
        _1116 = _947;
        _1118 = _946;
        _1119 = _945;
        _1120 = _957;
        _1121 = _956;
        _1122 = _955;
        _1123 = _967;
        _1124 = _966;
        _1125 = _965;
        _1126 = _980;
        _1127 = _979;
        _1128 = _978;
        _1129 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0)));
        _1130 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0)));
        _1131 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)));
    }
    else
    {
        _1116 = _1117;
        _1118 = _1117;
        _1119 = _1117;
        _1120 = _1117;
        _1121 = _1117;
        _1122 = _1117;
        _1123 = _1117;
        _1124 = _1117;
        _1125 = _1117;
        _1126 = _1117;
        _1127 = _1117;
        _1128 = _1117;
        _1129 = 0.0;
        _1130 = 0.0;
        _1131 = 0.0;
    }
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1160 = fma(_786, cbModelParam._m0[30u].z, fma(_782, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _778));
        float _1164 = fma(_786, cbModelParam._m0[31u].z, fma(_782, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _778));
        float _1168 = fma(_786, cbModelParam._m0[32u].z, fma(_782, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _778));
        float _1191 = _778 + _534;
        float _1192 = _782 + _535;
        float _1193 = _786 + _536;
        float _1203 = fma(_1193, cbModelParam._m0[30u].z, fma(_1192, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1191)) - _1160;
        float _1204 = fma(_1193, cbModelParam._m0[31u].z, fma(_1192, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1191)) - _1164;
        float _1205 = fma(_1193, cbModelParam._m0[32u].z, fma(_1192, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1191)) - _1168;
        float _1209 = inversesqrt(dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205)));
        float _1222 = ((_1209 * _1203) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1160 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1223 = ((_1209 * _1204) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1164 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1224 = ((_1209 * _1205) / cbModelParam._m0[35u].z) + ((((((_1168 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        float _1259 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1226.x + (-0.5));
        float _1261 = _1259 * (_1226.y + (-0.5));
        float _1262 = _1259 * (_1226.z + (-0.5));
        float _1269 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1233.x + (-0.5));
        float _1271 = _1269 * (_1233.y + (-0.5));
        float _1272 = _1269 * (_1233.z + (-0.5));
        float _1279 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1240.x + (-0.5));
        float _1281 = _1279 * (_1240.y + (-0.5));
        float _1282 = _1279 * (_1240.z + (-0.5));
        float _1289 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1247.x + (-0.5));
        float _1291 = _1289 * (_1247.y + (-0.5));
        float _1292 = _1289 * (_1247.z + (-0.5));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1296 = _1260 * 0.5;
        float _1297 = _1270 * 0.5;
        float _1298 = _1280 * 0.5;
        float _1299 = dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298));
        float _1304 = (_1299 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1299);
        float _1312 = (dot(vec3(_534, _535, _536), vec3(_1304 * _1296, _1304 * _1297, _1304 * _1298)) + 1.0) * 0.5;
        float _4155 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1321 = sqrt(((_1297 * _1297) + (_1296 * _1296)) + (_1298 * _1298)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _4166 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1323 = _1322 * 2.0;
        float _1327 = (1.0 - _1322) / (_1322 + 1.0);
        float _4177 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1337 = ((((1.0 - _1328) * (_1323 + 2.0)) * exp2(log2(isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_1323 + 1.0))) + _1328) * _1293;
        float _1338 = _1261 * 0.5;
        float _1339 = _1271 * 0.5;
        float _1340 = _1281 * 0.5;
        float _1341 = dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340));
        float _1346 = (_1341 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1341);
        float _1354 = (dot(vec3(_534, _535, _536), vec3(_1346 * _1338, _1346 * _1339, _1346 * _1340)) + 1.0) * 0.5;
        float _4188 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1363 = sqrt(((_1339 * _1339) + (_1338 * _1338)) + (_1340 * _1340)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _4199 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1365 = _1364 * 2.0;
        float _1369 = (1.0 - _1364) / (_1364 + 1.0);
        float _4210 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1379 = ((((1.0 - _1370) * (_1365 + 2.0)) * exp2(log2(isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_1365 + 1.0))) + _1370) * _1294;
        float _1380 = _1262 * 0.5;
        float _1381 = _1272 * 0.5;
        float _1382 = _1282 * 0.5;
        float _1383 = dot(vec3(_1380, _1381, _1382), vec3(_1380, _1381, _1382));
        float _1388 = (_1383 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1383);
        float _1396 = (dot(vec3(_534, _535, _536), vec3(_1388 * _1380, _1388 * _1381, _1388 * _1382)) + 1.0) * 0.5;
        float _4221 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1405 = sqrt(((_1381 * _1381) + (_1380 * _1380)) + (_1382 * _1382)) / (_1295 + 9.9999997473787516355514526367188e-06);
        float _4232 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1407 = _1406 * 2.0;
        float _1411 = (1.0 - _1406) / (_1406 + 1.0);
        float _4243 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1421 = ((((1.0 - _1412) * (_1407 + 2.0)) * exp2(log2(isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_1407 + 1.0))) + _1412) * _1295;
        _1429 = _1262;
        _1430 = _1261;
        _1431 = _1260;
        _1432 = _1272;
        _1433 = _1271;
        _1434 = _1270;
        _1435 = _1282;
        _1436 = _1281;
        _1437 = _1280;
        _1438 = _1295;
        _1439 = _1294;
        _1440 = _1293;
        _1441 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)));
        _1442 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)));
        _1443 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)));
    }
    else
    {
        _1429 = _1117;
        _1430 = _1117;
        _1431 = _1117;
        _1432 = _1117;
        _1433 = _1117;
        _1434 = _1117;
        _1435 = _1117;
        _1436 = _1117;
        _1437 = _1117;
        _1438 = _1117;
        _1439 = _1117;
        _1440 = _1117;
        _1441 = 0.0;
        _1442 = 0.0;
        _1443 = 0.0;
    }
    float _1453 = (cbModelParam._m0[1u].x * (_1441 - _1129)) + _1129;
    float _1454 = (cbModelParam._m0[1u].x * (_1442 - _1130)) + _1130;
    float _1455 = (cbModelParam._m0[1u].x * (_1443 - _1131)) + _1131;
    float _1476 = fma(_1455, cbSceneParam._m0[89u].z, fma(_1454, cbSceneParam._m0[89u].y, _1453 * cbSceneParam._m0[89u].x));
    float _1479 = fma(_1455, cbSceneParam._m0[90u].z, fma(_1454, cbSceneParam._m0[90u].y, _1453 * cbSceneParam._m0[90u].x));
    float _1482 = fma(_1455, cbSceneParam._m0[91u].z, fma(_1454, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1453));
    float _1497 = _722 * 0.5;
    float _1498 = _723 * 0.5;
    float _1499 = _724 * 0.5;
    float _1500 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1431, _1434, _1437, _1440));
    float _1503 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1430, _1433, _1436, _1439));
    float _1506 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1429, _1432, _1435, _1438));
    float _1540;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1513 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1116, _1120, _1123, _1126));
        float _1517 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1118, _1121, _1124, _1127));
        float _1521 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1119, _1122, _1125, _1128));
        float _1528 = dot(vec4(cbModelParam._m0[39u]), vec4(_1497, _1498, _1499, 1.0));
        _1540 = dot(vec3(isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)), isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)), isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1528) ? 0.0 : (isnan(0.0) ? _1528 : max(0.0, _1528))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1540 = 1.0;
    }
    float _1551;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1542 = dot(vec4(cbModelParam._m0[40u]), vec4(_1497, _1498, _1499, 1.0));
        _1551 = dot(vec3(isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)), isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)), isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1542) ? 0.0 : (isnan(0.0) ? _1542 : max(0.0, _1542))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1551 = 1.0;
    }
    float _1555 = (_1551 * cbModelParam._m0[1u].x) + (_1540 * (1.0 - cbModelParam._m0[1u].x));
    float _1565 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _537);
    float _1566 = isnan(_1565) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1565 : min(cbModelParam._m0[25u].z, _1565));
    float _1646;
    float _1648;
    float _1650;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1613 = fma(_786, cbModelParam._m0[13u].z, fma(_782, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _778)) + cbModelParam._m0[13u].w;
        float _1617 = fma(_786, cbModelParam._m0[14u].z, fma(_782, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _778)) + cbModelParam._m0[14u].w;
        float _1621 = fma(_786, cbModelParam._m0[15u].z, fma(_782, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _778)) + cbModelParam._m0[15u].w;
        float _1624 = fma(_724, cbModelParam._m0[13u].z, fma(_723, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _722));
        float _1627 = fma(_724, cbModelParam._m0[14u].z, fma(_723, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _722));
        float _1630 = fma(_724, cbModelParam._m0[15u].z, fma(_723, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _722));
        float _1658;
        if (_1624 > 0.0)
        {
            _1658 = abs((1.0 - _1613) / _1624);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1624 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1613 + 1.0) / _1624);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1658 = frontier_phi_17_15_ladder;
        }
        float _1831;
        if (_1627 > 0.0)
        {
            _1831 = abs((1.0 - _1617) / _1627);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1627 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1617 + 1.0) / _1627);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1831 = frontier_phi_26_22_ladder;
        }
        float _2127;
        if (_1630 > 0.0)
        {
            _2127 = abs((1.0 - _1621) / _1630);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1630 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1621 + 1.0) / _1630);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2127 = frontier_phi_38_33_ladder;
        }
        float _2129 = isnan(_1831) ? _1658 : (isnan(_1658) ? _1831 : min(_1658, _1831));
        float _2130 = isnan(_2127) ? _2129 : (isnan(_2129) ? _2127 : min(_2129, _2127));
        float _2134 = (_2130 * _1624) + _1613;
        float _2135 = (_2130 * _1627) + _1617;
        float _2136 = (_2130 * _1630) + _1621;
        float _2137 = _2130 * 9.9999997473787516355514526367188e-05;
        float _2139 = (-1.0) - _2137;
        float _2141 = _2137 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2136 > _2141) || ((_2136 < _2139) || ((_2135 > _2141) || ((_2135 < _2139) || ((_2134 < _2139) || (_2134 > _2141))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2281 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2136, cbModelParam._m0[9u].z, fma(_2135, cbModelParam._m0[9u].y, _2134 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2136, cbModelParam._m0[10u].z, fma(_2135, cbModelParam._m0[10u].y, _2134 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2136, cbModelParam._m0[11u].z, fma(_2135, cbModelParam._m0[11u].y, _2134 * cbModelParam._m0[11u].x))), _1566);
            frontier_phi_16_38_ladder = _2281.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2281.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2281.x * cbModelParam._m0[1u].y;
        }
        _1646 = frontier_phi_16_38_ladder_2;
        _1648 = frontier_phi_16_38_ladder_1;
        _1650 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1634 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_722, _723, _724), _1566);
        _1646 = _1634.x * cbModelParam._m0[1u].y;
        _1648 = _1634.y * cbModelParam._m0[1u].y;
        _1650 = _1634.z * cbModelParam._m0[1u].y;
    }
    float _1654 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _537);
    float _1655 = isnan(_1654) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1654 : min(cbModelParam._m0[25u].w, _1654));
    float _1746;
    float _1748;
    float _1750;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1710 = fma(_786, cbModelParam._m0[21u].z, fma(_782, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _778)) + cbModelParam._m0[21u].w;
        float _1714 = fma(_786, cbModelParam._m0[22u].z, fma(_782, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _778)) + cbModelParam._m0[22u].w;
        float _1718 = fma(_786, cbModelParam._m0[23u].z, fma(_782, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _778)) + cbModelParam._m0[23u].w;
        float _1721 = fma(_724, cbModelParam._m0[21u].z, fma(_723, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _722));
        float _1724 = fma(_724, cbModelParam._m0[22u].z, fma(_723, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _722));
        float _1727 = fma(_724, cbModelParam._m0[23u].z, fma(_723, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _722));
        float _1836;
        if (_1721 > 0.0)
        {
            _1836 = abs((1.0 - _1710) / _1721);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1721 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1710 + 1.0) / _1721);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1836 = frontier_phi_28_24_ladder;
        }
        float _2154;
        if (_1724 > 0.0)
        {
            _2154 = abs((1.0 - _1714) / _1724);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1714 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2154 = frontier_phi_40_35_ladder;
        }
        float _2492;
        if (_1727 > 0.0)
        {
            _2492 = abs((1.0 - _1718) / _1727);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1718 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2492 = frontier_phi_50_47_ladder;
        }
        float _2494 = isnan(_2154) ? _1836 : (isnan(_1836) ? _2154 : min(_1836, _2154));
        float _2495 = isnan(_2492) ? _2494 : (isnan(_2494) ? _2492 : min(_2494, _2492));
        float _2499 = (_2495 * _1721) + _1710;
        float _2500 = (_2495 * _1724) + _1714;
        float _2501 = (_2495 * _1727) + _1718;
        float _2502 = _2495 * 9.9999997473787516355514526367188e-05;
        float _2503 = (-1.0) - _2502;
        float _2505 = _2502 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2501 > _2505) || ((_2501 < _2503) || ((_2500 > _2505) || ((_2500 < _2503) || ((_2499 < _2503) || (_2499 > _2505))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2623 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2501, cbModelParam._m0[17u].z, fma(_2500, cbModelParam._m0[17u].y, _2499 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2501, cbModelParam._m0[18u].z, fma(_2500, cbModelParam._m0[18u].y, _2499 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2501, cbModelParam._m0[19u].z, fma(_2500, cbModelParam._m0[19u].y, _2499 * cbModelParam._m0[19u].x))), _1655);
            frontier_phi_25_50_ladder = _2623.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2623.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2623.x * cbModelParam._m0[1u].z;
        }
        _1746 = frontier_phi_25_50_ladder_2;
        _1748 = frontier_phi_25_50_ladder_1;
        _1750 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1730 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_722, _723, _724), _1655);
        _1746 = _1730.x * cbModelParam._m0[1u].z;
        _1748 = _1730.y * cbModelParam._m0[1u].z;
        _1750 = _1730.z * cbModelParam._m0[1u].z;
    }
    float _1763 = (((_749 * _699) + _750) * _714) * ((cbModelParam._m0[1u].w * (_1746 - _1646)) + _1646);
    float _1765 = (((_749 * _701) + _750) * _714) * ((cbModelParam._m0[1u].w * (_1748 - _1648)) + _1648);
    float _1767 = (((_749 * _702) + _750) * _714) * ((cbModelParam._m0[1u].w * (_1750 - _1650)) + _1650);
    float _1770 = fma(_1767, cbSceneParam._m0[89u].z, fma(_1765, cbSceneParam._m0[89u].y, _1763 * cbSceneParam._m0[89u].x));
    float _1773 = fma(_1767, cbSceneParam._m0[90u].z, fma(_1765, cbSceneParam._m0[90u].y, _1763 * cbSceneParam._m0[90u].x));
    float _1776 = fma(_1767, cbSceneParam._m0[91u].z, fma(_1765, cbSceneParam._m0[91u].y, _1763 * cbSceneParam._m0[91u].x));
    float _1810 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1814 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1818 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1822 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1823 = _1810 / _1822;
    float _1824 = _1814 / _1822;
    float _1825 = _1818 / _1822;
    float _1972;
    float _1973;
    float _1974;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1852 = ((uint(_1825 > cbSceneParam._m0[59u].y) + uint(_1825 > cbSceneParam._m0[59u].x)) + uint(_1825 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1853 = _1852 + 43u;
        uint _1861 = _1852 + 44u;
        uint _1869 = _1852 + 45u;
        uint _1877 = _1852 + 46u;
        float _1888 = fma(_1822, cbSceneParam._m0[_1853].w, fma(_1818, cbSceneParam._m0[_1853].z, fma(_1814, cbSceneParam._m0[_1853].y, _1810 * cbSceneParam._m0[_1853].x)));
        float _1892 = fma(_1822, cbSceneParam._m0[_1861].w, fma(_1818, cbSceneParam._m0[_1861].z, fma(_1814, cbSceneParam._m0[_1861].y, _1810 * cbSceneParam._m0[_1861].x)));
        float _1900 = fma(_1822, cbSceneParam._m0[_1877].w, fma(_1818, cbSceneParam._m0[_1877].z, fma(_1814, cbSceneParam._m0[_1877].y, _1810 * cbSceneParam._m0[_1877].x)));
        float _1905 = cbSceneParam._m0[33u].z * _1900;
        float _1907 = cbSceneParam._m0[33u].w * _1900;
        float _1910 = fma(_1822, cbSceneParam._m0[_1869].w, fma(_1818, cbSceneParam._m0[_1869].z, fma(_1814, cbSceneParam._m0[_1869].y, _1810 * cbSceneParam._m0[_1869].x))) / _1900;
        float _1958 = (cbSceneParam._m0[33u].x - sqrt(((_1824 * _1824) + (_1823 * _1823)) + (_1825 * _1825))) * cbSceneParam._m0[33u].y;
        float _4369 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
        float _1965 = (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1905 + _1888) / _1900, (_1907 + _1892) / _1900), _1910), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1907 + _1888) / _1900, (_1892 - _1905) / _1900), _1910), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1888 - _1905) / _1900, (_1892 - _1907) / _1900), _1910), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1888 - _1907) / _1900, (_1905 + _1892) / _1900), _1910), 0.0)).x), vec4(0.25)));
        _1972 = 1.0 - (_1965 * cbSceneParam._m0[34u].x);
        _1973 = 1.0 - (_1965 * cbSceneParam._m0[34u].y);
        _1974 = 1.0 - (_1965 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1972 = 1.0;
        _1973 = 1.0;
        _1974 = 1.0;
    }
    float _2038;
    float _2040;
    float _2042;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2026 = fma(_1822, cbSceneParam._m0[63u].w, fma(_1818, cbSceneParam._m0[63u].z, fma(_1814, cbSceneParam._m0[63u].y, _1810 * cbSceneParam._m0[63u].x)));
        float _2027 = fma(_1822, cbSceneParam._m0[60u].w, fma(_1818, cbSceneParam._m0[60u].z, fma(_1814, cbSceneParam._m0[60u].y, _1810 * cbSceneParam._m0[60u].x))) / _2026;
        float _2028 = fma(_1822, cbSceneParam._m0[61u].w, fma(_1818, cbSceneParam._m0[61u].z, fma(_1814, cbSceneParam._m0[61u].y, _1810 * cbSceneParam._m0[61u].x))) / _2026;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2027 >= cbSceneParam._m0[64u].x) && (_2028 >= cbSceneParam._m0[64u].y)) && (_2027 <= cbSceneParam._m0[64u].z)) && (_2028 <= cbSceneParam._m0[64u].w))
        {
            float _2167 = fma(_1822, cbSceneParam._m0[62u].w, fma(_1818, cbSceneParam._m0[62u].z, fma(_1814, cbSceneParam._m0[62u].y, _1810 * cbSceneParam._m0[62u].x))) / _2026;
            float _2171 = isnan(cbSceneParam._m0[41u].w) ? _2167 : (isnan(_2167) ? cbSceneParam._m0[41u].w : max(_2167, cbSceneParam._m0[41u].w));
            float _2214 = (cbSceneParam._m0[33u].x - sqrt(((_1824 * _1824) + (_1823 * _1823)) + (_1825 * _1825))) * cbSceneParam._m0[33u].y;
            float _4385 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
            float _2221 = (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2027, cbSceneParam._m0[33u].w + _2028), _2171), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2027, _2028 - cbSceneParam._m0[33u].z), _2171), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2027 - cbSceneParam._m0[33u].z, _2028 - cbSceneParam._m0[33u].w), _2171), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2027 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2028), _2171), 0.0)).x), vec4(0.25)));
            float _2225 = 1.0 - (_2221 * cbSceneParam._m0[34u].x);
            float _2226 = 1.0 - (_2221 * cbSceneParam._m0[34u].y);
            float _2227 = 1.0 - (_2221 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2227) ? _1974 : (isnan(_1974) ? _2227 : min(_1974, _2227));
            frontier_phi_37_36_ladder_1 = isnan(_2226) ? _1973 : (isnan(_1973) ? _2226 : min(_1973, _2226));
            frontier_phi_37_36_ladder_2 = isnan(_2225) ? _1972 : (isnan(_1972) ? _2225 : min(_1972, _2225));
        }
        else
        {
            frontier_phi_37_36_ladder = _1974;
            frontier_phi_37_36_ladder_1 = _1973;
            frontier_phi_37_36_ladder_2 = _1972;
        }
        _2038 = frontier_phi_37_36_ladder_2;
        _2040 = frontier_phi_37_36_ladder_1;
        _2042 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2038 = _1972;
        _2040 = _1973;
        _2042 = _1974;
    }
    uvec4 _2047 = floatBitsToUint(cbInstanceData._m0[_674 + 5u]);
    uint _2049 = _2047.x * 14u;
    uint _2050 = _2049 + 13u;
    float _2057 = _714 + (-1.0);
    float _2062 = (cbLight._m0[_2050].x * _2057) + 1.0;
    float _2063 = (cbLight._m0[_2050].y * _2057) + 1.0;
    float _2064 = (cbLight._m0[_2050].z * _2057) + 1.0;
    float _2065 = (cbLight._m0[_2050].w * _2057) + 1.0;
    uint _2066 = _2049 + 5u;
    float _2072 = isnan(1.0) ? _2063 : (isnan(_2063) ? 1.0 : min(_2063, 1.0));
    uint _2076 = _2049 + 4u;
    float _2086 = isnan(1.0) ? _2062 : (isnan(_2062) ? 1.0 : min(_2062, 1.0));
    uint _2090 = _2049 | 1u;
    float _2101 = dot(vec3(cbLight._m0[_2049].xyz), vec3(_534, _535, _536));
    float _2104 = dot(vec3(cbLight._m0[_2090].xyz), vec3(_534, _535, _536));
    float _4421 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _4432 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2109 = (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * 0.3183098733425140380859375;
    float _2111 = (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * 0.3183098733425140380859375;
    float _2118 = ((cbLight._m0[_2066].x * _2072) * _2111) + (((cbLight._m0[_2076].x * _2038) * _2086) * _2109);
    float _2119 = ((_2072 * cbLight._m0[_2066].y) * _2111) + (((cbLight._m0[_2076].y * _2040) * _2086) * _2109);
    float _2120 = ((_2072 * cbLight._m0[_2066].z) * _2111) + (((cbLight._m0[_2076].z * _2042) * _2086) * _2109);
    uvec4 _2124 = floatBitsToUint(cbLight._m0[_2049 + 12u]);
    bool _2126 = _2124.x == 0u;
    float _2228;
    float _2230;
    float _2232;
    if (_2126)
    {
        _2228 = _2118;
        _2230 = _2119;
        _2232 = _2120;
    }
    else
    {
        uint _2236 = _2049 + 6u;
        float _2252 = (dot(vec3(cbLight._m0[_2049 + 2u].xyz), vec3(_534, _535, _536)) * 0.5) + 0.5;
        float _2253 = _2252 * _2252;
        float _4443 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2254 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _2255 = isnan(1.0) ? _2064 : (isnan(_2064) ? 1.0 : min(_2064, 1.0));
        _2228 = (((cbLight._m0[_2236].x * 0.3183098733425140380859375) * _2254) * _2255) + _2118;
        _2230 = (((cbLight._m0[_2236].y * 0.3183098733425140380859375) * _2254) * _2255) + _2119;
        _2232 = (((cbLight._m0[_2236].z * 0.3183098733425140380859375) * _2254) * _2255) + _2120;
    }
    bool _2235 = _2124.y == 0u;
    float _2290;
    float _2292;
    float _2294;
    if (_2235)
    {
        _2290 = _2228;
        _2292 = _2230;
        _2294 = _2232;
    }
    else
    {
        uint _2463 = _2049 + 7u;
        float _2479 = (dot(vec3(cbLight._m0[_2049 + 3u].xyz), vec3(_534, _535, _536)) * 0.5) + 0.5;
        float _2480 = _2479 * _2479;
        float _4459 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2481 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _2482 = isnan(1.0) ? _2065 : (isnan(_2065) ? 1.0 : min(_2065, 1.0));
        _2290 = (((cbLight._m0[_2463].x * 0.3183098733425140380859375) * _2481) * _2482) + _2228;
        _2292 = (((cbLight._m0[_2463].y * 0.3183098733425140380859375) * _2481) * _2482) + _2230;
        _2294 = (((cbLight._m0[_2463].z * 0.3183098733425140380859375) * _2481) * _2482) + _2232;
    }
    uint _2297 = _2049 + 8u;
    float _2310 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2049].w)) * _537) * 0.949999988079071044921875);
    float _2311 = _2310 * _2310;
    float _2312 = cbLight._m0[_2049].x + _614;
    float _2313 = cbLight._m0[_2049].y + _615;
    float _2314 = cbLight._m0[_2049].z + _616;
    float _2318 = inversesqrt(dot(vec3(_2312, _2313, _2314), vec3(_2312, _2313, _2314)));
    float _2319 = _2318 * _2312;
    float _2320 = _2318 * _2313;
    float _2321 = _2318 * _2314;
    float _2322 = dot(vec3(_534, _535, _536), vec3(cbLight._m0[_2049].xyz));
    float _4475 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2325 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
    float _4486 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _2326 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
    float _2327 = dot(vec3(_534, _535, _536), vec3(_2319, _2320, _2321));
    float _4497 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _2330 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
    float _2331 = dot(vec3(cbLight._m0[_2049].xyz), vec3(_2319, _2320, _2321));
    float _4508 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _2335 = _2311 * _2311;
    float _2339 = ((_2330 * _2330) * (_2335 + (-1.0))) + 1.0;
    float _2347 = exp2(log2(1.0 - (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0)))) * 5.0);
    float _2348 = 0.959999978542327880859375 - _696;
    float _2350 = 0.959999978542327880859375 - _697;
    float _2351 = 0.959999978542327880859375 - _698;
    float _2358 = 1.0 - _2311;
    float _2369 = (0.5 / (((_2326 * ((_2325 * _2358) + _2311)) + 9.9999999392252902907785028219223e-09) + (((_2326 * _2358) + _2311) * _2325))) * _2325;
    float _4519 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2371 = (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * (_2335 / ((_2339 * _2339) * 3.141590118408203125));
    uint _2385 = _2049 + 9u;
    float _2396 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2090].w)) * _537) * 0.949999988079071044921875);
    float _2397 = _2396 * _2396;
    float _2398 = cbLight._m0[_2090].x + _614;
    float _2399 = cbLight._m0[_2090].y + _615;
    float _2400 = cbLight._m0[_2090].z + _616;
    float _2404 = inversesqrt(dot(vec3(_2398, _2399, _2400), vec3(_2398, _2399, _2400)));
    float _2405 = _2404 * _2398;
    float _2406 = _2404 * _2399;
    float _2407 = _2404 * _2400;
    float _2408 = dot(vec3(_534, _535, _536), vec3(cbLight._m0[_2090].xyz));
    float _4530 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _2411 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
    float _2412 = dot(vec3(_534, _535, _536), vec3(_2405, _2406, _2407));
    float _4541 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2415 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
    float _2416 = dot(vec3(cbLight._m0[_2090].xyz), vec3(_2405, _2406, _2407));
    float _4552 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
    float _2420 = _2397 * _2397;
    float _2424 = ((_2415 * _2415) * (_2420 + (-1.0))) + 1.0;
    float _2431 = exp2(log2(1.0 - (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0)))) * 5.0);
    float _2438 = 1.0 - _2397;
    float _2448 = (0.5 / (((_2326 * ((_2411 * _2438) + _2397)) + 9.9999999392252902907785028219223e-09) + (((_2326 * _2438) + _2397) * _2411))) * _2411;
    float _4563 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
    float _2450 = (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0))) * (_2420 / ((_2424 * _2424) * 3.141590118408203125));
    float _2460 = (((((_2431 * _2348) + _699) * cbLight._m0[_2385].x) * _2450) * _2072) + ((((cbLight._m0[_2297].x * _2038) * ((_2347 * _2348) + _699)) * _2371) * _2086);
    float _2461 = (((((_2431 * _2350) + _701) * cbLight._m0[_2385].y) * _2450) * _2072) + ((((cbLight._m0[_2297].y * _2040) * ((_2347 * _2350) + _701)) * _2371) * _2086);
    float _2462 = (((((_2431 * _2351) + _702) * cbLight._m0[_2385].z) * _2450) * _2072) + ((((cbLight._m0[_2297].z * _2042) * ((_2347 * _2351) + _702)) * _2371) * _2086);
    float _2518;
    float _2520;
    float _2522;
    if (_2126)
    {
        _2518 = _2460;
        _2520 = _2461;
        _2522 = _2462;
    }
    else
    {
        uint _2524 = _2049 + 2u;
        uint _2528 = _2049 + 10u;
        float _2542 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2524].w)) * _537) * 0.949999988079071044921875);
        float _2543 = _2542 * _2542;
        float _2544 = cbLight._m0[_2524].x + _614;
        float _2545 = cbLight._m0[_2524].y + _615;
        float _2546 = cbLight._m0[_2524].z + _616;
        float _2550 = inversesqrt(dot(vec3(_2544, _2545, _2546), vec3(_2544, _2545, _2546)));
        float _2551 = _2550 * _2544;
        float _2552 = _2550 * _2545;
        float _2553 = _2550 * _2546;
        float _2554 = dot(vec3(_534, _535, _536), vec3(cbLight._m0[_2524].xyz));
        float _4574 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        float _2557 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
        float _2558 = dot(vec3(_534, _535, _536), vec3(_2551, _2552, _2553));
        float _4585 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2561 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
        float _2562 = dot(vec3(cbLight._m0[_2524].xyz), vec3(_2551, _2552, _2553));
        float _4596 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        float _2566 = _2543 * _2543;
        float _2570 = ((_2561 * _2561) * (_2566 + (-1.0))) + 1.0;
        float _2577 = exp2(log2(1.0 - (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0)))) * 5.0);
        float _2584 = 1.0 - _2543;
        float _2594 = (0.5 / (((_2326 * ((_2557 * _2584) + _2543)) + 9.9999999392252902907785028219223e-09) + (((_2326 * _2584) + _2543) * _2557))) * _2557;
        float _4607 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        float _2596 = (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * (_2566 / ((_2570 * _2570) * 3.141590118408203125));
        float _2597 = isnan(1.0) ? _2064 : (isnan(_2064) ? 1.0 : min(_2064, 1.0));
        _2518 = (((((_2577 * _2348) + _699) * cbLight._m0[_2528].x) * _2596) * _2597) + _2460;
        _2520 = (((((_2577 * _2350) + _701) * cbLight._m0[_2528].y) * _2596) * _2597) + _2461;
        _2522 = (((((_2577 * _2351) + _702) * cbLight._m0[_2528].z) * _2596) * _2597) + _2462;
    }
    float _2628;
    float _2630;
    float _2632;
    if (_2235)
    {
        _2628 = _2518;
        _2630 = _2520;
        _2632 = _2522;
    }
    else
    {
        uint _2639 = _2049 + 3u;
        uint _2643 = _2049 + 11u;
        float _2657 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2639].w)) * _537) * 0.949999988079071044921875);
        float _2658 = _2657 * _2657;
        float _2659 = cbLight._m0[_2639].x + _614;
        float _2660 = cbLight._m0[_2639].y + _615;
        float _2661 = cbLight._m0[_2639].z + _616;
        float _2665 = inversesqrt(dot(vec3(_2659, _2660, _2661), vec3(_2659, _2660, _2661)));
        float _2666 = _2665 * _2659;
        float _2667 = _2665 * _2660;
        float _2668 = _2665 * _2661;
        float _2669 = dot(vec3(_534, _535, _536), vec3(cbLight._m0[_2639].xyz));
        float _4623 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
        float _2672 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
        float _2673 = dot(vec3(_534, _535, _536), vec3(_2666, _2667, _2668));
        float _4634 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
        float _2676 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
        float _2677 = dot(vec3(cbLight._m0[_2639].xyz), vec3(_2666, _2667, _2668));
        float _4645 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
        float _2681 = _2658 * _2658;
        float _2685 = ((_2676 * _2676) * (_2681 + (-1.0))) + 1.0;
        float _2692 = exp2(log2(1.0 - (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0)))) * 5.0);
        float _2699 = 1.0 - _2658;
        float _2709 = (0.5 / (((_2326 * ((_2672 * _2699) + _2658)) + 9.9999999392252902907785028219223e-09) + (((_2326 * _2699) + _2658) * _2672))) * _2672;
        float _4656 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
        float _2711 = (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * (_2681 / ((_2685 * _2685) * 3.141590118408203125));
        float _2712 = isnan(1.0) ? _2065 : (isnan(_2065) ? 1.0 : min(_2065, 1.0));
        _2628 = (((((_2692 * _2348) + _699) * cbLight._m0[_2643].x) * _2711) * _2712) + _2518;
        _2630 = (((((_2692 * _2350) + _701) * cbLight._m0[_2643].y) * _2711) * _2712) + _2520;
        _2632 = (((((_2692 * _2351) + _702) * cbLight._m0[_2643].z) * _2711) * _2712) + _2522;
    }
    float _2778;
    float _2780;
    float _2782;
    float _2784;
    float _2786;
    float _2788;
    if (_2047.y == 0u)
    {
        uvec4 _2733 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2734 = _2733.x;
        uint _2745 = uint((float(_2733.y) * floor(float(uint(cbSceneParam._m0[85u].y * _635) / _2734))) + floor(float(uint(cbSceneParam._m0[85u].x * _634) / _2734)));
        float _2755 = (log2(_1825 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2756 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
        uint _2759 = uint(isnan(14.0) ? _2756 : (isnan(_2756) ? 14.0 : min(_2756, 14.0)));
        uvec4 _2764 = texelFetch(g_lightClusterGridBuffer, int(((_2759 << 2u) + (_2745 << 6u)) >> 2u));
        uint _2765 = _2764.x;
        uint _2766 = _2733.z;
        float _2874;
        float _2876;
        float _2878;
        float _2880;
        float _2882;
        float _2884;
        if (((((1u << ((_2766 >> 4u) & 15u)) + 4294967295u) & _2765) == 0u) || ((_2766 & 240u) == 0u))
        {
            _2874 = 0.0;
            _2876 = 0.0;
            _2878 = 0.0;
            _2880 = 0.0;
            _2882 = 0.0;
            _2884 = 0.0;
        }
        else
        {
            float _2875;
            float _2877;
            float _2879;
            float _2881;
            float _2883;
            float _2885;
            float _3036 = 0.0;
            float _3037 = 0.0;
            float _3038 = 0.0;
            float _3039 = 0.0;
            float _3040 = 0.0;
            float _3041 = 0.0;
            uint _3042 = 0u;
            uint _3051;
            bool _3052;
            for (;;)
            {
                _3051 = texelFetch(g_lightClassification, int((((_2759 << 5u) + (_2745 << 9u)) + (_3042 << 2u)) >> 2u)).x;
                _3052 = _3051 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3052)
                {
                    frontier_phi_71_pred = _3041;
                    frontier_phi_71_pred_1 = _3040;
                    frontier_phi_71_pred_2 = _3039;
                    frontier_phi_71_pred_3 = _3038;
                    frontier_phi_71_pred_4 = _3037;
                    frontier_phi_71_pred_5 = _3036;
                }
                else
                {
                    float _3181;
                    float _3182;
                    float _3183;
                    float _3184;
                    float _3185;
                    float _3186;
                    uint _3187;
                    _3181 = _3036;
                    _3182 = _3037;
                    _3183 = _3038;
                    _3184 = _3039;
                    _3185 = _3040;
                    _3186 = _3041;
                    _3187 = _3051;
                    float _3108;
                    float _3109;
                    float _3110;
                    float _3111;
                    float _3112;
                    float _3113;
                    for (;;)
                    {
                        uint _3191 = uint(findLSB(_3187)) + (_3042 << 5u);
                        uint _3188 = (_3187 + 4294967295u) & _3187;
                        uint _3193 = _3191 * 48u;
                        vec4 _3207 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3193)).x, texelFetch(g_PointLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3193 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3193 + 3u)).x));
                        uint _3213 = (_3191 * 48u) + 4u;
                        vec4 _3226 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3213)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 3u)).x));
                        uint _3232 = (_3191 * 48u) + 8u;
                        vec3 _3243 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3232)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 2u)).x));
                        float _3247 = _3207.x - _1823;
                        float _3248 = _3207.y - _1824;
                        float _3249 = _3207.z - _1825;
                        float _3250 = dot(vec3(_3247, _3248, _3249), vec3(_3247, _3248, _3249));
                        float _3253 = inversesqrt(_3250);
                        float _3254 = _3253 * _3247;
                        float _3255 = _3253 * _3248;
                        float _3256 = _3253 * _3249;
                        float _3257 = dot(vec3(_655, _658, _661), vec3(_3254, _3255, _3256));
                        float _3262 = 1.0 - (_3250 * _3207.w);
                        float _4682 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                        float _3263 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                        float _3264 = sqrt(_3250) * _3226.w;
                        float _3267 = 1.39999997615814208984375 / (_3264 + 1.39999997615814208984375);
                        float _3268 = _3267 * _3267;
                        float _3271 = ((1.0 - _3268) * _3257) + _3268;
                        float _3274 = _3264 * _3264;
                        float _3278 = ((isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0))) * _3263) / ((_3274 * 0.699999988079071044921875) + 1.0);
                        float _3282 = (-0.0) - _1823;
                        float _3283 = (-0.0) - _1824;
                        float _3284 = (-0.0) - _1825;
                        float _3288 = inversesqrt(dot(vec3(_3282, _3283, _3284), vec3(_3282, _3283, _3284)));
                        float _3289 = _3288 * _3282;
                        float _3290 = _3288 * _3283;
                        float _3291 = _3288 * _3284;
                        float _3298 = exp2(log2(1.0 / ((_3274 * 3.5) + 5.0)) * 0.25);
                        float _3299 = 1.0 - _730;
                        float _3306 = sqrt(1.0 - ((1.0 - (_3299 * _3299)) * (1.0 - (_3298 * _3298))));
                        float _3307 = _3306 * _3306;
                        float _3308 = _3307 * _3307;
                        float _3309 = _3289 + _3254;
                        float _3310 = _3290 + _3255;
                        float _3311 = _3291 + _3256;
                        float _3315 = inversesqrt(dot(vec3(_3309, _3310, _3311), vec3(_3309, _3310, _3311)));
                        float _3319 = dot(vec3(_655, _658, _661), vec3(_3289, _3290, _3291));
                        float _4698 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                        float _3322 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                        float _3323 = dot(vec3(_655, _658, _661), vec3(_3315 * _3309, _3315 * _3310, _3315 * _3311));
                        float _4709 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                        float _3326 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                        float _3330 = ((_3326 * _3326) * (_3308 + (-1.0))) + 1.0;
                        float _3331 = _3267 * _3307;
                        float _3332 = _3331 * _3331;
                        float _3335 = ((1.0 - _3332) * _3257) + _3332;
                        float _4720 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                        float _3336 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                        float _3337 = 1.0 - _3307;
                        float _3347 = (0.5 / (((_3336 * ((_3322 * _3337) + _3307)) + 9.9999999392252902907785028219223e-09) + (((_3336 * _3337) + _3307) * _3322))) * _3336;
                        float _4731 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                        float _3358 = (((_3308 * 3.1415927410125732421875) * (isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0)))) / ((_3330 * _3330) * ((_3274 * 2.1991131305694580078125) + 3.141590118408203125))) * _3263;
                        _3111 = (_3278 * _3226.x) + _3184;
                        _3112 = (_3278 * _3226.y) + _3185;
                        _3113 = (_3278 * _3226.z) + _3186;
                        _3108 = (_3358 * _3243.x) + _3181;
                        _3109 = (_3358 * _3243.y) + _3182;
                        _3110 = (_3358 * _3243.z) + _3183;
                        if (_3188 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3181 = _3108;
                            _3182 = _3109;
                            _3183 = _3110;
                            _3184 = _3111;
                            _3185 = _3112;
                            _3186 = _3113;
                            _3187 = _3188;
                        }
                    }
                    frontier_phi_71_pred = _3113;
                    frontier_phi_71_pred_1 = _3112;
                    frontier_phi_71_pred_2 = _3111;
                    frontier_phi_71_pred_3 = _3110;
                    frontier_phi_71_pred_4 = _3109;
                    frontier_phi_71_pred_5 = _3108;
                }
                _2885 = frontier_phi_71_pred;
                _2883 = frontier_phi_71_pred_1;
                _2881 = frontier_phi_71_pred_2;
                _2879 = frontier_phi_71_pred_3;
                _2877 = frontier_phi_71_pred_4;
                _2875 = frontier_phi_71_pred_5;
                uint _3043 = _3042 + 1u;
                if (_3043 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3036 = _2875;
                    _3037 = _2877;
                    _3038 = _2879;
                    _3039 = _2881;
                    _3040 = _2883;
                    _3041 = _2885;
                    _3042 = _3043;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2874 = _2875;
            _2876 = _2877;
            _2878 = _2879;
            _2880 = _2881;
            _2882 = _2883;
            _2884 = _2885;
        }
        uvec4 _2888 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2889 = _2888.z;
        uint _2891 = (_2889 >> 8u) & 15u;
        float _3004;
        float _3006;
        float _3008;
        float _3010;
        float _3012;
        float _3014;
        if (((4294967295u << _2891) & _2765) == 0u)
        {
            _3004 = _2874;
            _3006 = _2876;
            _3008 = _2878;
            _3010 = _2880;
            _3012 = _2882;
            _3014 = _2884;
        }
        else
        {
            float _3029 = inversesqrt(dot(vec3(_1823, _1824, _1825), vec3(_1823, _1824, _1825)));
            float _3030 = _3029 * _1823;
            float _3031 = _3029 * _1824;
            float _3032 = _3029 * _1825;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2891 < ((_2889 >> 12u) & 15u))
            {
                float _3005;
                float _3007;
                float _3009;
                float _3011;
                float _3013;
                float _3015;
                float _3164 = _2874;
                float _3165 = _2876;
                float _3166 = _2878;
                float _3167 = _2880;
                float _3168 = _2882;
                float _3169 = _2884;
                uint _3170 = _2891;
                uint _3179;
                bool _3180;
                for (;;)
                {
                    _3179 = texelFetch(g_lightClassification, int((((_2759 << 5u) + (_2745 << 9u)) + (_3170 << 2u)) >> 2u)).x;
                    _3180 = _3179 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3180)
                    {
                        frontier_phi_82_pred = _3169;
                        frontier_phi_82_pred_1 = _3168;
                        frontier_phi_82_pred_2 = _3167;
                        frontier_phi_82_pred_3 = _3166;
                        frontier_phi_82_pred_4 = _3165;
                        frontier_phi_82_pred_5 = _3164;
                    }
                    else
                    {
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3667;
                        float _3668;
                        float _3669;
                        float _3670;
                        float _3671;
                        float _3672;
                        float _3385 = _3164;
                        float _3386 = _3165;
                        float _3387 = _3166;
                        float _3388 = _3167;
                        float _3389 = _3168;
                        float _3390 = _3169;
                        uint _3391 = _3179;
                        uint _3392;
                        vec4 _3417;
                        float _3418;
                        vec4 _3433;
                        vec3 _3445;
                        vec4 _3460;
                        vec4 _3476;
                        float _3523;
                        bool _3524;
                        for (;;)
                        {
                            uint _3402 = ((_3170 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3391));
                            _3392 = (_3391 + 4294967295u) & _3391;
                            uint _3404 = _3402 * 40u;
                            _3417 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3404)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 3u)).x));
                            _3418 = _3417.w;
                            uint _3420 = (_3402 * 40u) + 4u;
                            _3433 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3420)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 3u)).x));
                            uint _3435 = (_3402 * 40u) + 8u;
                            _3445 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3435)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 2u)).x));
                            uint _3447 = (_3402 * 40u) + 16u;
                            _3460 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3447)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 3u)).x));
                            uint _3463 = (_3402 * 40u) + 20u;
                            _3476 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3463)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 3u)).x));
                            uint _3479 = (_3402 * 40u) + 24u;
                            vec4 _3492 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 3u)).x));
                            uint _3498 = (_3402 * 40u) + 28u;
                            vec4 _3511 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3498)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 3u)).x));
                            _3523 = fma(_1825, _3511.z, fma(_1824, _3511.y, _3511.x * _1823)) + _3511.w;
                            _3524 = !((fma(_1825, _3492.z, fma(_1824, _3492.y, _3492.x * _1823)) + _3492.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3524)
                            {
                                float _3551 = _3417.x - _1823;
                                float _3552 = _3417.y - _1824;
                                float _3553 = _3417.z - _1825;
                                float _3554 = dot(vec3(_3551, _3552, _3553), vec3(_3551, _3552, _3553));
                                float _3557 = inversesqrt(_3554);
                                float _3558 = _3557 * _3551;
                                float _3559 = _3557 * _3552;
                                float _3560 = _3557 * _3553;
                                float _3564 = 1.0 - (_3554 / (_3418 * _3418));
                                float _4742 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                                float _3565 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
                                float _3569 = sqrt(_3554) * _3433.w;
                                float _3571 = 1.39999997615814208984375 / (_3569 + 1.39999997615814208984375);
                                float _3572 = _3571 * _3571;
                                float _3575 = ((1.0 - _3572) * dot(vec3(_3558, _3559, _3560), vec3(_655, _658, _661))) + _3572;
                                float _3578 = _3569 * _3569;
                                float _3582 = (fma(_1825, _3460.z, fma(_1824, _3460.y, _3460.x * _1823)) + _3460.w) / _3523;
                                float _3583 = (fma(_1825, _3476.z, fma(_1824, _3476.y, _3476.x * _1823)) + _3476.w) / _3523;
                                float _3587 = 1.0 - dot(vec2(_3582, _3583), vec2(_3582, _3583));
                                float _4758 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                                float _3588 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
                                float _3589 = _3588 * (((isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0))) * _3565) / ((_3578 * 0.699999988079071044921875) + 1.0));
                                float _3601 = exp2(log2(1.0 / ((_3578 * 3.5) + 5.0)) * 0.25);
                                float _3602 = 1.0 - _730;
                                float _3609 = sqrt(1.0 - ((1.0 - (_3602 * _3602)) * (1.0 - (_3601 * _3601))));
                                float _3610 = _3609 * _3609;
                                float _3611 = _3610 * _3610;
                                float _3612 = _3558 - _3030;
                                float _3613 = _3559 - _3031;
                                float _3614 = _3560 - _3032;
                                float _3618 = inversesqrt(dot(vec3(_3612, _3613, _3614), vec3(_3612, _3613, _3614)));
                                float _3622 = dot(vec3(_655, _658, _661), vec3((-0.0) - _3030, (-0.0) - _3031, (-0.0) - _3032));
                                float _4769 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                                float _3625 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
                                float _3626 = dot(vec3(_655, _658, _661), vec3(_3618 * _3612, _3618 * _3613, _3618 * _3614));
                                float _4780 = isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0));
                                float _3629 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
                                float _3633 = ((_3629 * _3629) * (_3611 + (-1.0))) + 1.0;
                                float _3634 = _3571 * _3610;
                                float _3635 = _3634 * _3634;
                                float _3641 = ((1.0 - _3635) * dot(vec3(_655, _658, _661), vec3(_3558, _3559, _3560))) + _3635;
                                float _4791 = isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0));
                                float _3642 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
                                float _3643 = 1.0 - _3610;
                                float _3653 = (0.5 / (((_3642 * ((_3625 * _3643) + _3610)) + 9.9999999392252902907785028219223e-09) + (((_3642 * _3643) + _3610) * _3625))) * _3642;
                                float _4802 = isnan(0.0) ? _3653 : (isnan(_3653) ? 0.0 : max(_3653, 0.0));
                                float _3663 = (_3588 * _3565) * (((_3611 * 3.1415927410125732421875) * (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0)))) / ((_3633 * _3633) * ((_3578 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3589 * _3433.z;
                                frontier_phi_88_pred_1 = _3589 * _3433.y;
                                frontier_phi_88_pred_2 = _3589 * _3433.x;
                                frontier_phi_88_pred_3 = _3663 * _3445.z;
                                frontier_phi_88_pred_4 = _3663 * _3445.y;
                                frontier_phi_88_pred_5 = _3663 * _3445.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3672 = frontier_phi_88_pred;
                            _3671 = frontier_phi_88_pred_1;
                            _3670 = frontier_phi_88_pred_2;
                            _3669 = frontier_phi_88_pred_3;
                            _3668 = frontier_phi_88_pred_4;
                            _3667 = frontier_phi_88_pred_5;
                            _3375 = _3670 + _3388;
                            _3376 = _3671 + _3389;
                            _3377 = _3672 + _3390;
                            _3372 = _3667 + _3385;
                            _3373 = _3668 + _3386;
                            _3374 = _3669 + _3387;
                            if (_3392 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3385 = _3372;
                                _3386 = _3373;
                                _3387 = _3374;
                                _3388 = _3375;
                                _3389 = _3376;
                                _3390 = _3377;
                                _3391 = _3392;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3377;
                        frontier_phi_82_pred_1 = _3376;
                        frontier_phi_82_pred_2 = _3375;
                        frontier_phi_82_pred_3 = _3374;
                        frontier_phi_82_pred_4 = _3373;
                        frontier_phi_82_pred_5 = _3372;
                    }
                    _3015 = frontier_phi_82_pred;
                    _3013 = frontier_phi_82_pred_1;
                    _3011 = frontier_phi_82_pred_2;
                    _3009 = frontier_phi_82_pred_3;
                    _3007 = frontier_phi_82_pred_4;
                    _3005 = frontier_phi_82_pred_5;
                    uint _3171 = _3170 + 1u;
                    if (_3171 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3164 = _3005;
                        _3165 = _3007;
                        _3166 = _3009;
                        _3167 = _3011;
                        _3168 = _3013;
                        _3169 = _3015;
                        _3170 = _3171;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3011;
                frontier_phi_63_64_ladder_1 = _3015;
                frontier_phi_63_64_ladder_2 = _3013;
                frontier_phi_63_64_ladder_3 = _3009;
                frontier_phi_63_64_ladder_4 = _3007;
                frontier_phi_63_64_ladder_5 = _3005;
            }
            else
            {
                frontier_phi_63_64_ladder = _2880;
                frontier_phi_63_64_ladder_1 = _2884;
                frontier_phi_63_64_ladder_2 = _2882;
                frontier_phi_63_64_ladder_3 = _2878;
                frontier_phi_63_64_ladder_4 = _2876;
                frontier_phi_63_64_ladder_5 = _2874;
            }
            _3004 = frontier_phi_63_64_ladder_5;
            _3006 = frontier_phi_63_64_ladder_4;
            _3008 = frontier_phi_63_64_ladder_3;
            _3010 = frontier_phi_63_64_ladder;
            _3012 = frontier_phi_63_64_ladder_2;
            _3014 = frontier_phi_63_64_ladder_1;
        }
        float _3019 = isnan(1.0) ? _714 : (isnan(_714) ? 1.0 : min(_714, 1.0));
        _2778 = (_3019 * _3010) + _2290;
        _2780 = (_3019 * _3012) + _2292;
        _2782 = (_3019 * _3014) + _2294;
        _2784 = ((_3004 * _699) * _3019) + _2628;
        _2786 = ((_3006 * _701) * _3019) + _2630;
        _2788 = ((_3008 * _702) * _3019) + _2632;
    }
    else
    {
        _2778 = _2290;
        _2780 = _2292;
        _2782 = _2294;
        _2784 = _2628;
        _2786 = _2630;
        _2788 = _2632;
    }
    uint _2794 = _675 + uint(cbMatDynParam._m0[0u].w);
    float _2800 = cbInstanceData._m0[_2794].x * (_453 - (_469 * _453));
    float _2801 = cbInstanceData._m0[_2794].y * (_454 - (_469 * _454));
    float _2802 = cbInstanceData._m0[_2794].z * (_455 - (_469 * _455));
    float _4818 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _4829 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _4840 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _2819 = (((isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0))) * (_2778 + ((isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0))) * _714))) + ((_2784 + ((isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))) * _1555)) * cbPerFrame._m0[3u].x)) + _2800;
    float _2821 = (_2801 + ((_2786 + ((isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))) * _1555)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0))) * (_2780 + ((isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0))) * _714)));
    float _2823 = (_2802 + ((_2788 + ((isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))) * _1555)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0))) * (_2782 + ((isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0))) * _714)));
    float _2824 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
    float _2825 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
    float _2826 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
    float _2832 = cbMtdParam._m0[2u].x * _2800;
    float _2833 = cbMtdParam._m0[2u].y * _2801;
    float _2834 = cbMtdParam._m0[2u].z * _2802;
    float _4866 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2836 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
    uint _2837 = _674 + 6u;
    float _2845 = _634 / cbSceneParam._m0[86u].x;
    float _2846 = _635 / cbSceneParam._m0[86u].y;
    vec4 _2860 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2845, _2846, (log2((isnan(cbSceneParam._m0[77u].w) ? _557 : (isnan(_557) ? cbSceneParam._m0[77u].w : min(_557, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2862 = _2860.x;
    float _2863 = _2860.y;
    float _2864 = _2860.z;
    float _2865 = _2860.w;
    float _2937;
    float _2939;
    float _2941;
    float _2943;
    if (_557 > cbSceneParam._m0[78u].w)
    {
        float _2899 = isnan(_557) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _557 : min(cbSceneParam._m0[80u].w, _557));
        float _2900 = _2899 / _557;
        float _2911 = _2900 * _607;
        float _2912 = _608 * _2900;
        float _2913 = (-0.0) - _2912;
        float _2915 = _2900 * _609;
        float _2917 = (cbSceneParam._m0[77u].w * _2913) / _2899;
        float _2918 = _2917 + cbSceneParam._m0[79u].w;
        float _2919 = cbSceneParam._m0[79u].w - _2912;
        float _2925 = sqrt(((_2911 * _2911) + (_2912 * _2912)) + (_2915 * _2915));
        float _2928 = (1.0 - (cbSceneParam._m0[77u].w / _2899)) * _2925;
        float _2933 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2935 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3121;
        if (abs((_2913 - _2917) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3121 = ((((_2918 > 0.0) ? exp2(_2933 * _2918) : (2.0 - exp2(_2935 * _2918))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2928;
        }
        else
        {
            float _3065 = 1.0 / cbSceneParam._m0[80u].x;
            float _3066 = isnan(_2919) ? _2918 : (isnan(_2918) ? _2919 : max(_2918, _2919));
            float _3067 = isnan(_2919) ? _2918 : (isnan(_2918) ? _2919 : min(_2918, _2919));
            float _3076 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : min(_3066, 0.0));
            float _3077 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : min(_3067, 0.0));
            _3121 = ((abs(_2925 / _2913) * cbSceneParam._m0[80u].y) * ((((_3076 - _3077) * 2.0) - ((exp2(_2933 * (isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0)))) - exp2(_2933 * (isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0))))) * _3065)) - ((exp2(_2935 * _3076) - exp2(_2935 * _3077)) * _3065))) + (_2928 * cbSceneParam._m0[80u].z);
        }
        vec4 _3123 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2845, _2846, 1.0), 0.0);
        float _3132 = exp2((_3121 * (-1.44269502162933349609375)) * (1.0 - _3123.w));
        float _3133 = log2(_3132);
        float _3149 = log2(_2865);
        _2937 = (exp2(_3149 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3133 * cbSceneParam._m0[78u].x)) * _3123.x) / cbSceneParam._m0[78u].x)) + _2862;
        _2939 = (exp2(_3149 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3133 * cbSceneParam._m0[78u].y)) * _3123.y) / cbSceneParam._m0[78u].y)) + _2863;
        _2941 = (exp2(_3149 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3133 * cbSceneParam._m0[78u].z)) * _3123.z) / cbSceneParam._m0[78u].z)) + _2864;
        _2943 = _3132 * _2865;
    }
    else
    {
        _2937 = _2862;
        _2939 = _2863;
        _2941 = _2864;
        _2943 = _2865;
    }
    bool _3159;
    vec4 _2953;
    vec4 _2975;
    float _2977;
    float _2981;
    float _2982;
    float _2983;
    float _2986;
    float _2989;
    float _2992;
    float _2993;
    bool _3003;
    for (;;)
    {
        _2953 = cbMatDynParam._m0[0u];
        float _2955 = roundEven(_2953.y);
        bool _2956 = _2955 == 3.0;
        float _2957 = log2(_2943);
        float _2961 = exp2(_2957 * cbSceneParam._m0[78u].x);
        float _2962 = exp2(_2957 * cbSceneParam._m0[78u].y);
        float _2963 = exp2(_2957 * cbSceneParam._m0[78u].z);
        float _2964 = _2961 * _2824;
        float _2965 = _2962 * _2825;
        float _2966 = _2963 * _2826;
        float _2973 = _623 + (-0.5);
        _2975 = cbMtdParam._m0[1u];
        _2977 = _2975.y * _2973;
        float _2980 = (_2955 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2981 = _2980 * (_2956 ? _2964 : (_2964 + (cbSceneParam._m0[72u].w * _2937)));
        _2982 = _2980 * (_2956 ? _2965 : (_2965 + (cbSceneParam._m0[72u].w * _2939)));
        _2983 = _2980 * (_2956 ? _2966 : (_2966 + (cbSceneParam._m0[72u].w * _2941)));
        _2986 = ((_2832 * _2836) * _2961) * _2980;
        _2989 = ((_2833 * _2836) * _2962) * _2980;
        _2992 = ((_2834 * _2836) * _2963) * _2980;
        _2993 = _2973 * 0.999000012874603271484375;
        _3003 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3003)
        {
            if ((cbInstanceData._m0[_674 + 7u].x + _2993) < 0.5)
            {
                _3159 = true;
                break;
            }
        }
        uint _3100 = _675 + uint(_2953.w);
        if ((cbInstanceData._m0[_3100].w < 1.0) && ((cbInstanceData._m0[_3100].w + _2993) < 0.5))
        {
            _3159 = true;
            break;
        }
        if ((_2977 + 1.0) < _2975.x)
        {
            _3159 = true;
            break;
        }
        _3159 = false;
        break;
    }
    float _3363;
    if (_3159)
    {
        discard_state = true;
        _3363 = 0.0;
    }
    else
    {
        _3363 = cbInstanceData._m0[_2837].w;
    }
    SV_Target.x = _2981;
    SV_Target.y = _2982;
    SV_Target.z = _2983;
    SV_Target.w = _3363;
    SV_Target_1.x = _2986;
    SV_Target_1.y = _2989;
    SV_Target_1.z = _2992;
    SV_Target_1.w = cbInstanceData._m0[_2837].w;
    discard_exit();
}


