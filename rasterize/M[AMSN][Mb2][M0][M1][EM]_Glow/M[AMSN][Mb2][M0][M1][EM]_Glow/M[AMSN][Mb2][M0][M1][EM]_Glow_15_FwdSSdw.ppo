#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1140;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _251 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _257 = _251.x * cbMtdParam._m0[9u].x;
    float _258 = _251.y * cbMtdParam._m0[9u].y;
    float _259 = _251.z * cbMtdParam._m0[9u].z;
    vec4 _297 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _313 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3511 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _314 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
    float _321 = (((_297.x * cbMtdParam._m0[10u].x) - _257) * _314) + _257;
    float _322 = (((_297.y * cbMtdParam._m0[10u].y) - _258) * _314) + _258;
    float _323 = (((_297.z * cbMtdParam._m0[10u].z) - _259) * _314) + _259;
    vec4 _343 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _362 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_343.x + 0.00999999977648258209228515625));
    float _364 = _362 * (cbMtdParam._m0[15u].x + 1.0);
    float _3522 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _365 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
    float _373 = ((((cbMtdParam._m0[12u].x - _321) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _365) + _321;
    float _374 = ((((cbMtdParam._m0[12u].y - _322) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _365) + _322;
    float _375 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _323)) * _365) + _323;
    vec4 _388 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _396 = (_388.x * 2.0) + (-1.0);
    float _398 = (_388.y * 2.0) + (-1.0);
    float _399 = dot(vec2(_396, _398), vec2(_396, _398));
    float _3533 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    vec4 _416 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _420 = _416.z;
    float _423 = (_416.x * 2.0) + (-1.0);
    float _424 = (_416.y * 2.0) + (-1.0);
    float _425 = dot(vec2(_423, _424), vec2(_423, _424));
    float _3544 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _430 = sqrt(1.0 - (isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))));
    float _433 = (_314 * (_388.z - _420)) + _420;
    float _436 = _362 * (cbMtdParam._m0[14u].w + 1.0);
    float _3555 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _440 = ((cbMtdParam._m0[14u].y - _433) * (isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0)))) + _433;
    vec4 _467 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _482 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _524 = (TEXCOORD_6.x - ((cbMtdParam._m0[13u].w * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_5, SS_WrapLinear), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].x + 1.0);
    float _3566 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _525 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
    float _526 = ((_482.x + _467.x) * cbMtdParam._m0[11u].x) * _525;
    float _527 = ((_482.y + _467.y) * cbMtdParam._m0[11u].y) * _525;
    float _528 = ((_482.z + _467.z) * cbMtdParam._m0[11u].z) * _525;
    vec4 _540 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[9u].w));
    float _542 = _540.x;
    float _555 = (_314 * (_396 - _423)) + _423;
    float _556 = (_314 * (_398 - _424)) + _424;
    float _557 = (_314 * (sqrt(1.0 - (isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0)))) - _430)) + _430;
    vec4 _576 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _582 = (_576.x * 2.0) + (-1.0);
    float _583 = (_576.y * 2.0) + (-1.0);
    float _584 = dot(vec2(_582, _583), vec2(_582, _583));
    float _3577 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _600 = (_365 * (((_555 * cbMtdParam._m0[13u].z) - _555) + _582)) + _555;
    float _601 = (_365 * (((_556 * cbMtdParam._m0[13u].z) - _556) + _583)) + _556;
    float _602 = (_365 * (sqrt(1.0 - (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0)))) - _557)) + _557;
    float _605 = fma(_602, _222 * NORMAL.x, fma(_601, _229 * TANGENT.x, (_215 * _207) * _600));
    float _608 = fma(_602, _222 * NORMAL.y, fma(_601, _229 * TANGENT.y, (_215 * _208) * _600));
    float _611 = fma(_602, _222 * NORMAL.z, fma(_601, _229 * TANGENT.z, (_215 * _209) * _600));
    float _615 = inversesqrt(dot(vec3(_605, _608, _611), vec3(_605, _608, _611)));
    float _616 = _615 * _605;
    float _617 = _615 * _608;
    float _618 = _615 * _611;
    float _3588 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _619 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
    float _3599 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _3610 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _3621 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _638 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _678 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _688 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _678);
    float _689 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _678);
    float _690 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _678);
    float _694 = inversesqrt(dot(vec3(_688, _689, _690), vec3(_688, _689, _690)));
    float _695 = _688 * _694;
    float _696 = _689 * _694;
    float _697 = _690 * _694;
    float _703 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _704 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _724 = fma(_618, cbSceneParam._m0[5u].z, fma(_617, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _616));
    float _727 = fma(_618, cbSceneParam._m0[6u].z, fma(_617, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _616));
    float _730 = fma(_618, cbSceneParam._m0[7u].z, fma(_617, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _616));
    uint _743 = uint(roundEven(NORMAL.w)) * 13u;
    uint _744 = _743 + 9u;
    uint _745 = _744 + uint(cbMatDynParam._m0[0u].w);
    float _751 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0)))) * cbInstanceData._m0[_745].x;
    float _752 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0)))) * cbInstanceData._m0[_745].y;
    float _753 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0)))) * cbInstanceData._m0[_745].z;
    float _3632 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _754 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    float _3643 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _755 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _3654 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _756 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    vec4 _765 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _703, cbSceneParam._m0[86u].y * _704));
    float _768 = _765.x * TEXCOORD_3.w;
    float _769 = dot(vec3(_616, _617, _618), vec3(_695, _696, _697));
    float _772 = _769 * 2.0;
    float _776 = (_772 * _616) - _695;
    float _777 = (_772 * _617) - _696;
    float _778 = (_772 * _618) - _697;
    float _782 = abs(dot(vec3(_695, _696, _697), vec3(_616, _617, _618)));
    float _3665 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _784 = sqrt(_619);
    float _797 = exp2((_784 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_784 * 3.0));
    float _829 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _833 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _837 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1139;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _864 = fma(_837, cbModelParam._m0[26u].z, fma(_833, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _829));
        float _868 = fma(_837, cbModelParam._m0[27u].z, fma(_833, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _829));
        float _872 = fma(_837, cbModelParam._m0[28u].z, fma(_833, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _829));
        float _897 = _829 + _616;
        float _898 = _833 + _617;
        float _899 = _837 + _618;
        float _909 = fma(_899, cbModelParam._m0[26u].z, fma(_898, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _897)) - _864;
        float _910 = fma(_899, cbModelParam._m0[27u].z, fma(_898, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _897)) - _868;
        float _911 = fma(_899, cbModelParam._m0[28u].z, fma(_898, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _897)) - _872;
        float _915 = inversesqrt(dot(vec3(_909, _910, _911), vec3(_909, _910, _911)));
        float _928 = ((_915 * _909) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_864 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _929 = ((_915 * _910) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_868 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _930 = ((_915 * _911) / cbModelParam._m0[34u].z) + ((((((_872 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _933 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        vec4 _940 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        vec4 _947 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        float _967 = exp2((_933.w + (-0.5)) * 20.0) * 2.0;
        float _968 = _967 * (_933.x + (-0.5));
        float _969 = _967 * (_933.y + (-0.5));
        float _970 = _967 * (_933.z + (-0.5));
        float _977 = exp2((_940.w + (-0.5)) * 20.0) * 2.0;
        float _978 = _977 * (_940.x + (-0.5));
        float _979 = _977 * (_940.y + (-0.5));
        float _980 = _977 * (_940.z + (-0.5));
        float _987 = exp2((_947.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_947.x + (-0.5));
        float _989 = _987 * (_947.y + (-0.5));
        float _990 = _987 * (_947.z + (-0.5));
        float _997 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_954.x + (-0.5));
        float _999 = _997 * (_954.y + (-0.5));
        float _1000 = _997 * (_954.z + (-0.5));
        float _1001 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1002 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1003 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1004 = _968 * 0.5;
        float _1005 = _978 * 0.5;
        float _1006 = _988 * 0.5;
        float _1007 = dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006));
        float _1012 = (_1007 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1007);
        float _1021 = (dot(vec3(_616, _617, _618), vec3(_1012 * _1004, _1012 * _1005, _1012 * _1006)) + 1.0) * 0.5;
        float _3691 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1031 = sqrt(((_1005 * _1005) + (_1004 * _1004)) + (_1006 * _1006)) / (_1001 + 9.9999997473787516355514526367188e-06);
        float _3702 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1033 = _1032 * 2.0;
        float _1037 = (1.0 - _1032) / (_1032 + 1.0);
        float _3713 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1047 = ((((1.0 - _1038) * (_1033 + 2.0)) * exp2(log2(isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * (_1033 + 1.0))) + _1038) * _1001;
        float _1048 = _969 * 0.5;
        float _1049 = _979 * 0.5;
        float _1050 = _989 * 0.5;
        float _1051 = dot(vec3(_1048, _1049, _1050), vec3(_1048, _1049, _1050));
        float _1056 = (_1051 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1051);
        float _1064 = (dot(vec3(_616, _617, _618), vec3(_1056 * _1048, _1056 * _1049, _1056 * _1050)) + 1.0) * 0.5;
        float _3724 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1073 = sqrt(((_1049 * _1049) + (_1048 * _1048)) + (_1050 * _1050)) / (_1002 + 9.9999997473787516355514526367188e-06);
        float _3735 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1075 = _1074 * 2.0;
        float _1079 = (1.0 - _1074) / (_1074 + 1.0);
        float _3746 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1089 = ((((1.0 - _1080) * (_1075 + 2.0)) * exp2(log2(isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * (_1075 + 1.0))) + _1080) * _1002;
        float _1090 = _970 * 0.5;
        float _1091 = _980 * 0.5;
        float _1092 = _990 * 0.5;
        float _1093 = dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092));
        float _1098 = (_1093 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1093);
        float _1106 = (dot(vec3(_616, _617, _618), vec3(_1098 * _1090, _1098 * _1091, _1098 * _1092)) + 1.0) * 0.5;
        float _3757 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1115 = sqrt(((_1091 * _1091) + (_1090 * _1090)) + (_1092 * _1092)) / (_1003 + 9.9999997473787516355514526367188e-06);
        float _3768 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1117 = _1116 * 2.0;
        float _1121 = (1.0 - _1116) / (_1116 + 1.0);
        float _3779 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1131 = ((((1.0 - _1122) * (_1117 + 2.0)) * exp2(log2(isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * (_1117 + 1.0))) + _1122) * _1003;
        _1139 = _970;
        _1141 = _969;
        _1142 = _968;
        _1143 = _980;
        _1144 = _979;
        _1145 = _978;
        _1146 = _990;
        _1147 = _989;
        _1148 = _988;
        _1149 = _1003;
        _1150 = _1002;
        _1151 = _1001;
        _1152 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0)));
        _1153 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0)));
        _1154 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0)));
    }
    else
    {
        _1139 = _1140;
        _1141 = _1140;
        _1142 = _1140;
        _1143 = _1140;
        _1144 = _1140;
        _1145 = _1140;
        _1146 = _1140;
        _1147 = _1140;
        _1148 = _1140;
        _1149 = _1140;
        _1150 = _1140;
        _1151 = _1140;
        _1152 = 0.0;
        _1153 = 0.0;
        _1154 = 0.0;
    }
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1180 = fma(_837, cbModelParam._m0[30u].z, fma(_833, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _829));
        float _1184 = fma(_837, cbModelParam._m0[31u].z, fma(_833, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _829));
        float _1188 = fma(_837, cbModelParam._m0[32u].z, fma(_833, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _829));
        float _1211 = _829 + _616;
        float _1212 = _833 + _617;
        float _1213 = _837 + _618;
        float _1223 = fma(_1213, cbModelParam._m0[30u].z, fma(_1212, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1211)) - _1180;
        float _1224 = fma(_1213, cbModelParam._m0[31u].z, fma(_1212, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1211)) - _1184;
        float _1225 = fma(_1213, cbModelParam._m0[32u].z, fma(_1212, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1211)) - _1188;
        float _1229 = inversesqrt(dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225)));
        float _1242 = ((_1229 * _1223) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1180 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1243 = ((_1229 * _1224) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1184 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1244 = ((_1229 * _1225) / cbModelParam._m0[35u].z) + ((((((_1188 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1246 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        vec4 _1253 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        vec4 _1260 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        vec4 _1267 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        float _1279 = exp2((_1246.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1246.x + (-0.5));
        float _1281 = _1279 * (_1246.y + (-0.5));
        float _1282 = _1279 * (_1246.z + (-0.5));
        float _1289 = exp2((_1253.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1253.x + (-0.5));
        float _1291 = _1289 * (_1253.y + (-0.5));
        float _1292 = _1289 * (_1253.z + (-0.5));
        float _1299 = exp2((_1260.w + (-0.5)) * 20.0) * 2.0;
        float _1300 = _1299 * (_1260.x + (-0.5));
        float _1301 = _1299 * (_1260.y + (-0.5));
        float _1302 = _1299 * (_1260.z + (-0.5));
        float _1309 = exp2((_1267.w + (-0.5)) * 20.0) * 2.0;
        float _1310 = _1309 * (_1267.x + (-0.5));
        float _1311 = _1309 * (_1267.y + (-0.5));
        float _1312 = _1309 * (_1267.z + (-0.5));
        float _1313 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1314 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1315 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1316 = _1280 * 0.5;
        float _1317 = _1290 * 0.5;
        float _1318 = _1300 * 0.5;
        float _1319 = dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318));
        float _1324 = (_1319 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1319);
        float _1332 = (dot(vec3(_616, _617, _618), vec3(_1324 * _1316, _1324 * _1317, _1324 * _1318)) + 1.0) * 0.5;
        float _3820 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1341 = sqrt(((_1317 * _1317) + (_1316 * _1316)) + (_1318 * _1318)) / (_1313 + 9.9999997473787516355514526367188e-06);
        float _3831 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1343 = _1342 * 2.0;
        float _1347 = (1.0 - _1342) / (_1342 + 1.0);
        float _3842 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1357 = ((((1.0 - _1348) * (_1343 + 2.0)) * exp2(log2(isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * (_1343 + 1.0))) + _1348) * _1313;
        float _1358 = _1281 * 0.5;
        float _1359 = _1291 * 0.5;
        float _1360 = _1301 * 0.5;
        float _1361 = dot(vec3(_1358, _1359, _1360), vec3(_1358, _1359, _1360));
        float _1366 = (_1361 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1361);
        float _1374 = (dot(vec3(_616, _617, _618), vec3(_1366 * _1358, _1366 * _1359, _1366 * _1360)) + 1.0) * 0.5;
        float _3853 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1383 = sqrt(((_1359 * _1359) + (_1358 * _1358)) + (_1360 * _1360)) / (_1314 + 9.9999997473787516355514526367188e-06);
        float _3864 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1385 = _1384 * 2.0;
        float _1389 = (1.0 - _1384) / (_1384 + 1.0);
        float _3875 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1399 = ((((1.0 - _1390) * (_1385 + 2.0)) * exp2(log2(isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_1385 + 1.0))) + _1390) * _1314;
        float _1400 = _1282 * 0.5;
        float _1401 = _1292 * 0.5;
        float _1402 = _1302 * 0.5;
        float _1403 = dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402));
        float _1408 = (_1403 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1403);
        float _1416 = (dot(vec3(_616, _617, _618), vec3(_1408 * _1400, _1408 * _1401, _1408 * _1402)) + 1.0) * 0.5;
        float _3886 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1425 = sqrt(((_1401 * _1401) + (_1400 * _1400)) + (_1402 * _1402)) / (_1315 + 9.9999997473787516355514526367188e-06);
        float _3897 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1427 = _1426 * 2.0;
        float _1431 = (1.0 - _1426) / (_1426 + 1.0);
        float _3908 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1441 = ((((1.0 - _1432) * (_1427 + 2.0)) * exp2(log2(isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1427 + 1.0))) + _1432) * _1315;
        _1449 = _1282;
        _1450 = _1281;
        _1451 = _1280;
        _1452 = _1292;
        _1453 = _1291;
        _1454 = _1290;
        _1455 = _1302;
        _1456 = _1301;
        _1457 = _1300;
        _1458 = _1315;
        _1459 = _1314;
        _1460 = _1313;
        _1461 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)));
        _1462 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)));
        _1463 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)));
    }
    else
    {
        _1449 = _1140;
        _1450 = _1140;
        _1451 = _1140;
        _1452 = _1140;
        _1453 = _1140;
        _1454 = _1140;
        _1455 = _1140;
        _1456 = _1140;
        _1457 = _1140;
        _1458 = _1140;
        _1459 = _1140;
        _1460 = _1140;
        _1461 = 0.0;
        _1462 = 0.0;
        _1463 = 0.0;
    }
    float _1473 = (cbModelParam._m0[1u].x * (_1461 - _1152)) + _1152;
    float _1474 = (cbModelParam._m0[1u].x * (_1462 - _1153)) + _1153;
    float _1475 = (cbModelParam._m0[1u].x * (_1463 - _1154)) + _1154;
    float _1496 = fma(_1475, cbSceneParam._m0[89u].z, fma(_1474, cbSceneParam._m0[89u].y, _1473 * cbSceneParam._m0[89u].x));
    float _1499 = fma(_1475, cbSceneParam._m0[90u].z, fma(_1474, cbSceneParam._m0[90u].y, _1473 * cbSceneParam._m0[90u].x));
    float _1502 = fma(_1475, cbSceneParam._m0[91u].z, fma(_1474, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1473));
    float _1517 = _776 * 0.5;
    float _1518 = _777 * 0.5;
    float _1519 = _778 * 0.5;
    float _1520 = dot(vec4(_1517, _1518, _1519, 1.0), vec4(_1451, _1454, _1457, _1460));
    float _1523 = dot(vec4(_1517, _1518, _1519, 1.0), vec4(_1450, _1453, _1456, _1459));
    float _1526 = dot(vec4(_1517, _1518, _1519, 1.0), vec4(_1449, _1452, _1455, _1458));
    float _1560;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1533 = dot(vec4(_1517, _1518, _1519, 1.0), vec4(_1139, _1143, _1146, _1149));
        float _1537 = dot(vec4(_1517, _1518, _1519, 1.0), vec4(_1141, _1144, _1147, _1150));
        float _1541 = dot(vec4(_1517, _1518, _1519, 1.0), vec4(_1142, _1145, _1148, _1151));
        float _1548 = dot(vec4(cbModelParam._m0[39u]), vec4(_1517, _1518, _1519, 1.0));
        _1560 = dot(vec3(isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)), isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)), isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1548) ? 0.0 : (isnan(0.0) ? _1548 : max(0.0, _1548))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1560 = 1.0;
    }
    float _1571;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1562 = dot(vec4(cbModelParam._m0[40u]), vec4(_1517, _1518, _1519, 1.0));
        _1571 = dot(vec3(isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)), isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)), isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1562) ? 0.0 : (isnan(0.0) ? _1562 : max(0.0, _1562))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1571 = 1.0;
    }
    float _1575 = (_1571 * cbModelParam._m0[1u].x) + (_1560 * (1.0 - cbModelParam._m0[1u].x));
    float _1585 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _619);
    float _1586 = isnan(_1585) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1585 : min(cbModelParam._m0[25u].z, _1585));
    float _1666;
    float _1668;
    float _1670;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1633 = fma(_837, cbModelParam._m0[13u].z, fma(_833, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _829)) + cbModelParam._m0[13u].w;
        float _1637 = fma(_837, cbModelParam._m0[14u].z, fma(_833, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _829)) + cbModelParam._m0[14u].w;
        float _1641 = fma(_837, cbModelParam._m0[15u].z, fma(_833, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _829)) + cbModelParam._m0[15u].w;
        float _1644 = fma(_778, cbModelParam._m0[13u].z, fma(_777, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _776));
        float _1647 = fma(_778, cbModelParam._m0[14u].z, fma(_777, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _776));
        float _1650 = fma(_778, cbModelParam._m0[15u].z, fma(_777, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _776));
        float _1678;
        if (_1644 > 0.0)
        {
            _1678 = abs((1.0 - _1633) / _1644);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1644 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1633 + 1.0) / _1644);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1678 = frontier_phi_14_12_ladder;
        }
        float _1901;
        if (_1647 > 0.0)
        {
            _1901 = abs((1.0 - _1637) / _1647);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1637 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1901 = frontier_phi_23_19_ladder;
        }
        float _2147;
        if (_1650 > 0.0)
        {
            _2147 = abs((1.0 - _1641) / _1650);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1641 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2147 = frontier_phi_35_30_ladder;
        }
        float _2149 = isnan(_1901) ? _1678 : (isnan(_1678) ? _1901 : min(_1678, _1901));
        float _2150 = isnan(_2147) ? _2149 : (isnan(_2149) ? _2147 : min(_2149, _2147));
        float _2154 = (_2150 * _1644) + _1633;
        float _2155 = (_2150 * _1647) + _1637;
        float _2156 = (_2150 * _1650) + _1641;
        float _2157 = _2150 * 9.9999997473787516355514526367188e-05;
        float _2159 = (-1.0) - _2157;
        float _2161 = _2157 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2156 > _2161) || ((_2156 < _2159) || ((_2155 > _2161) || ((_2155 < _2159) || ((_2154 < _2159) || (_2154 > _2161))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2280 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2156, cbModelParam._m0[9u].z, fma(_2155, cbModelParam._m0[9u].y, _2154 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2156, cbModelParam._m0[10u].z, fma(_2155, cbModelParam._m0[10u].y, _2154 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2156, cbModelParam._m0[11u].z, fma(_2155, cbModelParam._m0[11u].y, _2154 * cbModelParam._m0[11u].x))), _1586);
            frontier_phi_13_35_ladder = _2280.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2280.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2280.x * cbModelParam._m0[1u].y;
        }
        _1666 = frontier_phi_13_35_ladder_2;
        _1668 = frontier_phi_13_35_ladder_1;
        _1670 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1654 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_776, _777, _778), _1586);
        _1666 = _1654.x * cbModelParam._m0[1u].y;
        _1668 = _1654.y * cbModelParam._m0[1u].y;
        _1670 = _1654.z * cbModelParam._m0[1u].y;
    }
    float _1674 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _619);
    float _1675 = isnan(_1674) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1674 : min(cbModelParam._m0[25u].w, _1674));
    float _1766;
    float _1768;
    float _1770;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1730 = fma(_837, cbModelParam._m0[21u].z, fma(_833, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _829)) + cbModelParam._m0[21u].w;
        float _1734 = fma(_837, cbModelParam._m0[22u].z, fma(_833, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _829)) + cbModelParam._m0[22u].w;
        float _1738 = fma(_837, cbModelParam._m0[23u].z, fma(_833, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _829)) + cbModelParam._m0[23u].w;
        float _1741 = fma(_778, cbModelParam._m0[21u].z, fma(_777, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _776));
        float _1744 = fma(_778, cbModelParam._m0[22u].z, fma(_777, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _776));
        float _1747 = fma(_778, cbModelParam._m0[23u].z, fma(_777, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _776));
        float _1906;
        if (_1741 > 0.0)
        {
            _1906 = abs((1.0 - _1730) / _1741);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1741 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1730 + 1.0) / _1741);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1906 = frontier_phi_25_21_ladder;
        }
        float _2174;
        if (_1744 > 0.0)
        {
            _2174 = abs((1.0 - _1734) / _1744);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1744 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1734 + 1.0) / _1744);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2174 = frontier_phi_37_32_ladder;
        }
        float _2379;
        if (_1747 > 0.0)
        {
            _2379 = abs((1.0 - _1738) / _1747);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1747 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1738 + 1.0) / _1747);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2379 = frontier_phi_46_43_ladder;
        }
        float _2381 = isnan(_2174) ? _1906 : (isnan(_1906) ? _2174 : min(_1906, _2174));
        float _2382 = isnan(_2379) ? _2381 : (isnan(_2381) ? _2379 : min(_2381, _2379));
        float _2386 = (_2382 * _1741) + _1730;
        float _2387 = (_2382 * _1744) + _1734;
        float _2388 = (_2382 * _1747) + _1738;
        float _2389 = _2382 * 9.9999997473787516355514526367188e-05;
        float _2390 = (-1.0) - _2389;
        float _2392 = _2389 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2388 > _2392) || ((_2388 < _2390) || ((_2387 > _2392) || ((_2387 < _2390) || ((_2386 < _2390) || (_2386 > _2392))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2616 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2388, cbModelParam._m0[17u].z, fma(_2387, cbModelParam._m0[17u].y, _2386 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2388, cbModelParam._m0[18u].z, fma(_2387, cbModelParam._m0[18u].y, _2386 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2388, cbModelParam._m0[19u].z, fma(_2387, cbModelParam._m0[19u].y, _2386 * cbModelParam._m0[19u].x))), _1675);
            frontier_phi_22_46_ladder = _2616.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2616.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2616.x * cbModelParam._m0[1u].z;
        }
        _1766 = frontier_phi_22_46_ladder_2;
        _1768 = frontier_phi_22_46_ladder_1;
        _1770 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1750 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_776, _777, _778), _1675);
        _1766 = _1750.x * cbModelParam._m0[1u].z;
        _1768 = _1750.y * cbModelParam._m0[1u].z;
        _1770 = _1750.z * cbModelParam._m0[1u].z;
    }
    float _1782 = ((((1.0 - _797) * ((_784 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_797 * _784)) * _768;
    float _1783 = _1782 * ((cbModelParam._m0[1u].w * (_1766 - _1666)) + _1666);
    float _1784 = _1782 * ((cbModelParam._m0[1u].w * (_1768 - _1668)) + _1668);
    float _1785 = _1782 * ((cbModelParam._m0[1u].w * (_1770 - _1670)) + _1670);
    float _1788 = fma(_1785, cbSceneParam._m0[89u].z, fma(_1784, cbSceneParam._m0[89u].y, _1783 * cbSceneParam._m0[89u].x));
    float _1791 = fma(_1785, cbSceneParam._m0[90u].z, fma(_1784, cbSceneParam._m0[90u].y, _1783 * cbSceneParam._m0[90u].x));
    float _1794 = fma(_1785, cbSceneParam._m0[91u].z, fma(_1784, cbSceneParam._m0[91u].y, _1783 * cbSceneParam._m0[91u].x));
    vec4 _1802 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_703, _704));
    float _1804 = _1802.w;
    float _1816 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1804);
    float _1817 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1804);
    float _1818 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1804);
    uvec4 _1822 = floatBitsToUint(cbInstanceData._m0[_743 + 5u]);
    uint _1824 = _1822.x * 14u;
    uint _1825 = _1824 + 13u;
    float _1832 = _768 + (-1.0);
    float _1837 = (cbLight._m0[_1825].x * _1832) + 1.0;
    float _1838 = (cbLight._m0[_1825].y * _1832) + 1.0;
    float _1839 = (cbLight._m0[_1825].z * _1832) + 1.0;
    float _1840 = (cbLight._m0[_1825].w * _1832) + 1.0;
    uint _1841 = _1824 + 5u;
    float _1847 = isnan(1.0) ? _1838 : (isnan(_1838) ? 1.0 : min(_1838, 1.0));
    uint _1851 = _1824 + 4u;
    float _1860 = isnan(1.0) ? _1837 : (isnan(_1837) ? 1.0 : min(_1837, 1.0));
    uint _1864 = _1824 | 1u;
    float _1875 = dot(vec3(cbLight._m0[_1824].xyz), vec3(_616, _617, _618));
    float _1878 = dot(vec3(cbLight._m0[_1864].xyz), vec3(_616, _617, _618));
    float _4044 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _4055 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _1883 = (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * 0.3183098733425140380859375;
    float _1885 = (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * 0.3183098733425140380859375;
    float _1892 = ((cbLight._m0[_1841].x * _1847) * _1885) + (((cbLight._m0[_1851].x * _1816) * _1860) * _1883);
    float _1893 = ((_1847 * cbLight._m0[_1841].y) * _1885) + (((cbLight._m0[_1851].y * _1817) * _1860) * _1883);
    float _1894 = ((_1847 * cbLight._m0[_1841].z) * _1885) + (((cbLight._m0[_1851].z * _1818) * _1860) * _1883);
    uvec4 _1898 = floatBitsToUint(cbLight._m0[_1824 + 12u]);
    bool _1900 = _1898.x == 0u;
    float _1911;
    float _1913;
    float _1915;
    if (_1900)
    {
        _1911 = _1892;
        _1913 = _1893;
        _1915 = _1894;
    }
    else
    {
        uint _1919 = _1824 + 6u;
        float _1935 = (dot(vec3(cbLight._m0[_1824 + 2u].xyz), vec3(_616, _617, _618)) * 0.5) + 0.5;
        float _1936 = _1935 * _1935;
        float _4066 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
        float _1937 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1938 = isnan(1.0) ? _1839 : (isnan(_1839) ? 1.0 : min(_1839, 1.0));
        _1911 = (((cbLight._m0[_1919].x * 0.3183098733425140380859375) * _1937) * _1938) + _1892;
        _1913 = (((cbLight._m0[_1919].y * 0.3183098733425140380859375) * _1937) * _1938) + _1893;
        _1915 = (((cbLight._m0[_1919].z * 0.3183098733425140380859375) * _1937) * _1938) + _1894;
    }
    bool _1918 = _1898.y == 0u;
    float _1956;
    float _1958;
    float _1960;
    if (_1918)
    {
        _1956 = _1911;
        _1958 = _1913;
        _1960 = _1915;
    }
    else
    {
        uint _2118 = _1824 + 7u;
        float _2134 = (dot(vec3(cbLight._m0[_1824 + 3u].xyz), vec3(_616, _617, _618)) * 0.5) + 0.5;
        float _2135 = _2134 * _2134;
        float _4082 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2136 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _2137 = isnan(1.0) ? _1840 : (isnan(_1840) ? 1.0 : min(_1840, 1.0));
        _1956 = (((cbLight._m0[_2118].x * 0.3183098733425140380859375) * _2136) * _2137) + _1911;
        _1958 = (((cbLight._m0[_2118].y * 0.3183098733425140380859375) * _2136) * _2137) + _1913;
        _1960 = (((cbLight._m0[_2118].z * 0.3183098733425140380859375) * _2136) * _2137) + _1915;
    }
    uint _1963 = _1824 + 8u;
    float _1976 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1824].w)) * _619) * 0.949999988079071044921875);
    float _1977 = _1976 * _1976;
    float _1978 = cbLight._m0[_1824].x + _695;
    float _1979 = cbLight._m0[_1824].y + _696;
    float _1980 = cbLight._m0[_1824].z + _697;
    float _1984 = inversesqrt(dot(vec3(_1978, _1979, _1980), vec3(_1978, _1979, _1980)));
    float _1985 = _1984 * _1978;
    float _1986 = _1984 * _1979;
    float _1987 = _1984 * _1980;
    float _1988 = dot(vec3(_616, _617, _618), vec3(cbLight._m0[_1824].xyz));
    float _4098 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _1991 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
    float _4109 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _1992 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _1993 = dot(vec3(_616, _617, _618), vec3(_1985, _1986, _1987));
    float _4120 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1996 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _1997 = dot(vec3(cbLight._m0[_1824].xyz), vec3(_1985, _1986, _1987));
    float _4131 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _2001 = _1977 * _1977;
    float _2005 = ((_1996 * _1996) * (_2001 + (-1.0))) + 1.0;
    float _2016 = (exp2(log2(1.0 - (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2017 = 1.0 - _1977;
    float _2028 = (0.5 / (((_1992 * ((_1991 * _2017) + _1977)) + 9.9999999392252902907785028219223e-09) + (((_1992 * _2017) + _1977) * _1991))) * _1991;
    float _4142 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2030 = (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_2001 / ((_2005 * _2005) * 3.141590118408203125));
    uint _2044 = _1824 + 9u;
    float _2055 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1864].w)) * _619) * 0.949999988079071044921875);
    float _2056 = _2055 * _2055;
    float _2057 = cbLight._m0[_1864].x + _695;
    float _2058 = cbLight._m0[_1864].y + _696;
    float _2059 = cbLight._m0[_1864].z + _697;
    float _2063 = inversesqrt(dot(vec3(_2057, _2058, _2059), vec3(_2057, _2058, _2059)));
    float _2064 = _2063 * _2057;
    float _2065 = _2063 * _2058;
    float _2066 = _2063 * _2059;
    float _2067 = dot(vec3(_616, _617, _618), vec3(cbLight._m0[_1864].xyz));
    float _4153 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2070 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    float _2071 = dot(vec3(_616, _617, _618), vec3(_2064, _2065, _2066));
    float _4164 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2074 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _2075 = dot(vec3(cbLight._m0[_1864].xyz), vec3(_2064, _2065, _2066));
    float _4175 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2079 = _2056 * _2056;
    float _2083 = ((_2074 * _2074) * (_2079 + (-1.0))) + 1.0;
    float _2092 = (exp2(log2(1.0 - (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2093 = 1.0 - _2056;
    float _2103 = (0.5 / (((_1992 * ((_2070 * _2093) + _2056)) + 9.9999999392252902907785028219223e-09) + (((_1992 * _2093) + _2056) * _2070))) * _2070;
    float _4186 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2105 = (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_2079 / ((_2083 * _2083) * 3.141590118408203125));
    float _2115 = (((_2092 * cbLight._m0[_2044].x) * _2105) * _1847) + ((((cbLight._m0[_1963].x * _1816) * _2016) * _2030) * _1860);
    float _2116 = (((_2092 * cbLight._m0[_2044].y) * _2105) * _1847) + ((((cbLight._m0[_1963].y * _1817) * _2016) * _2030) * _1860);
    float _2117 = (((_2092 * cbLight._m0[_2044].z) * _2105) * _1847) + ((((cbLight._m0[_1963].z * _1818) * _2016) * _2030) * _1860);
    float _2179;
    float _2181;
    float _2183;
    if (_1900)
    {
        _2179 = _2115;
        _2181 = _2116;
        _2183 = _2117;
    }
    else
    {
        uint _2185 = _1824 + 2u;
        uint _2189 = _1824 + 10u;
        float _2203 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2185].w)) * _619) * 0.949999988079071044921875);
        float _2204 = _2203 * _2203;
        float _2205 = cbLight._m0[_2185].x + _695;
        float _2206 = cbLight._m0[_2185].y + _696;
        float _2207 = cbLight._m0[_2185].z + _697;
        float _2211 = inversesqrt(dot(vec3(_2205, _2206, _2207), vec3(_2205, _2206, _2207)));
        float _2212 = _2211 * _2205;
        float _2213 = _2211 * _2206;
        float _2214 = _2211 * _2207;
        float _2215 = dot(vec3(_616, _617, _618), vec3(cbLight._m0[_2185].xyz));
        float _4197 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2218 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _2219 = dot(vec3(_616, _617, _618), vec3(_2212, _2213, _2214));
        float _4208 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2222 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _2223 = dot(vec3(cbLight._m0[_2185].xyz), vec3(_2212, _2213, _2214));
        float _4219 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2227 = _2204 * _2204;
        float _2231 = ((_2222 * _2222) * (_2227 + (-1.0))) + 1.0;
        float _2240 = (exp2(log2(1.0 - (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2241 = 1.0 - _2204;
        float _2251 = (0.5 / (((_1992 * ((_2218 * _2241) + _2204)) + 9.9999999392252902907785028219223e-09) + (((_1992 * _2241) + _2204) * _2218))) * _2218;
        float _4230 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        float _2253 = (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (_2227 / ((_2231 * _2231) * 3.141590118408203125));
        float _2254 = isnan(1.0) ? _1839 : (isnan(_1839) ? 1.0 : min(_1839, 1.0));
        _2179 = (((_2240 * cbLight._m0[_2189].x) * _2253) * _2254) + _2115;
        _2181 = (((_2240 * cbLight._m0[_2189].y) * _2253) * _2254) + _2116;
        _2183 = (((_2240 * cbLight._m0[_2189].z) * _2253) * _2254) + _2117;
    }
    float _2289;
    float _2291;
    float _2293;
    if (_1918)
    {
        _2289 = _2179;
        _2291 = _2181;
        _2293 = _2183;
    }
    else
    {
        uint _2300 = _1824 + 3u;
        uint _2304 = _1824 + 11u;
        float _2318 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2300].w)) * _619) * 0.949999988079071044921875);
        float _2319 = _2318 * _2318;
        float _2320 = cbLight._m0[_2300].x + _695;
        float _2321 = cbLight._m0[_2300].y + _696;
        float _2322 = cbLight._m0[_2300].z + _697;
        float _2326 = inversesqrt(dot(vec3(_2320, _2321, _2322), vec3(_2320, _2321, _2322)));
        float _2327 = _2326 * _2320;
        float _2328 = _2326 * _2321;
        float _2329 = _2326 * _2322;
        float _2330 = dot(vec3(_616, _617, _618), vec3(cbLight._m0[_2300].xyz));
        float _4246 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2333 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _2334 = dot(vec3(_616, _617, _618), vec3(_2327, _2328, _2329));
        float _4257 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2337 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _2338 = dot(vec3(cbLight._m0[_2300].xyz), vec3(_2327, _2328, _2329));
        float _4268 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2342 = _2319 * _2319;
        float _2346 = ((_2337 * _2337) * (_2342 + (-1.0))) + 1.0;
        float _2355 = (exp2(log2(1.0 - (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2356 = 1.0 - _2319;
        float _2366 = (0.5 / (((_1992 * ((_2333 * _2356) + _2319)) + 9.9999999392252902907785028219223e-09) + (((_1992 * _2356) + _2319) * _2333))) * _2333;
        float _4279 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2368 = (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_2342 / ((_2346 * _2346) * 3.141590118408203125));
        float _2369 = isnan(1.0) ? _1840 : (isnan(_1840) ? 1.0 : min(_1840, 1.0));
        _2289 = (((_2355 * cbLight._m0[_2304].x) * _2368) * _2369) + _2179;
        _2291 = (((_2355 * cbLight._m0[_2304].y) * _2368) * _2369) + _2181;
        _2293 = (((_2355 * cbLight._m0[_2304].z) * _2368) * _2369) + _2183;
    }
    float _2504;
    float _2506;
    float _2508;
    float _2510;
    float _2512;
    float _2514;
    if (_1822.y == 0u)
    {
        float _2444 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2445 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2444;
        float _2446 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2444;
        float _2447 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2444;
        uvec4 _2459 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2460 = _2459.x;
        uint _2471 = uint((float(_2459.y) * floor(float(uint(cbSceneParam._m0[85u].y * _704) / _2460))) + floor(float(uint(cbSceneParam._m0[85u].x * _703) / _2460)));
        float _2481 = (log2(_2447 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2482 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        uint _2485 = uint(isnan(14.0) ? _2482 : (isnan(_2482) ? 14.0 : min(_2482, 14.0)));
        uvec4 _2490 = texelFetch(g_lightClusterGridBuffer, int(((_2485 << 2u) + (_2471 << 6u)) >> 2u));
        uint _2491 = _2490.x;
        uint _2492 = _2459.z;
        float _2621;
        float _2623;
        float _2625;
        float _2627;
        float _2629;
        float _2631;
        if (((((1u << ((_2492 >> 4u) & 15u)) + 4294967295u) & _2491) == 0u) || ((_2492 & 240u) == 0u))
        {
            _2621 = 0.0;
            _2623 = 0.0;
            _2625 = 0.0;
            _2627 = 0.0;
            _2629 = 0.0;
            _2631 = 0.0;
        }
        else
        {
            float _2622;
            float _2624;
            float _2626;
            float _2628;
            float _2630;
            float _2632;
            float _2775 = 0.0;
            float _2776 = 0.0;
            float _2777 = 0.0;
            float _2778 = 0.0;
            float _2779 = 0.0;
            float _2780 = 0.0;
            uint _2781 = 0u;
            uint _2790;
            bool _2791;
            for (;;)
            {
                _2790 = texelFetch(g_lightClassification, int((((_2485 << 5u) + (_2471 << 9u)) + (_2781 << 2u)) >> 2u)).x;
                _2791 = _2790 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2791)
                {
                    frontier_phi_61_pred = _2775;
                    frontier_phi_61_pred_1 = _2780;
                    frontier_phi_61_pred_2 = _2779;
                    frontier_phi_61_pred_3 = _2778;
                    frontier_phi_61_pred_4 = _2777;
                    frontier_phi_61_pred_5 = _2776;
                }
                else
                {
                    float _2899;
                    float _2900;
                    float _2901;
                    float _2902;
                    float _2903;
                    float _2904;
                    uint _2905;
                    _2899 = _2775;
                    _2900 = _2776;
                    _2901 = _2777;
                    _2902 = _2778;
                    _2903 = _2779;
                    _2904 = _2780;
                    _2905 = _2790;
                    float _2831;
                    float _2832;
                    float _2833;
                    float _2834;
                    float _2835;
                    float _2836;
                    for (;;)
                    {
                        uint _2909 = uint(findLSB(_2905)) + (_2781 << 5u);
                        uint _2906 = (_2905 + 4294967295u) & _2905;
                        uint _2911 = _2909 * 48u;
                        vec4 _2925 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2911)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 3u)).x));
                        uint _2931 = (_2909 * 48u) + 4u;
                        vec4 _2944 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2931)).x, texelFetch(g_PointLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2931 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2931 + 3u)).x));
                        uint _2950 = (_2909 * 48u) + 8u;
                        vec3 _2961 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2950)).x, texelFetch(g_PointLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2950 + 2u)).x));
                        float _2965 = _2925.x - _2445;
                        float _2966 = _2925.y - _2446;
                        float _2967 = _2925.z - _2447;
                        float _2968 = dot(vec3(_2965, _2966, _2967), vec3(_2965, _2966, _2967));
                        float _2971 = inversesqrt(_2968);
                        float _2972 = _2971 * _2965;
                        float _2973 = _2971 * _2966;
                        float _2974 = _2971 * _2967;
                        float _2975 = dot(vec3(_724, _727, _730), vec3(_2972, _2973, _2974));
                        float _2980 = 1.0 - (_2968 * _2925.w);
                        float _4305 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
                        float _2981 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
                        float _2982 = sqrt(_2968) * _2944.w;
                        float _2985 = 1.39999997615814208984375 / (_2982 + 1.39999997615814208984375);
                        float _2986 = _2985 * _2985;
                        float _2989 = ((1.0 - _2986) * _2975) + _2986;
                        float _2992 = _2982 * _2982;
                        float _2996 = ((isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0))) * _2981) / ((_2992 * 0.699999988079071044921875) + 1.0);
                        float _3000 = (-0.0) - _2445;
                        float _3001 = (-0.0) - _2446;
                        float _3002 = (-0.0) - _2447;
                        float _3006 = inversesqrt(dot(vec3(_3000, _3001, _3002), vec3(_3000, _3001, _3002)));
                        float _3007 = _3006 * _3000;
                        float _3008 = _3006 * _3001;
                        float _3009 = _3006 * _3002;
                        float _3017 = exp2(log2(1.0 / ((_2992 * 3.5) + 5.0)) * 0.25);
                        float _3018 = 1.0 - _784;
                        float _3025 = sqrt(1.0 - ((1.0 - (_3018 * _3018)) * (1.0 - (_3017 * _3017))));
                        float _3026 = _3025 * _3025;
                        float _3027 = _3026 * _3026;
                        float _3028 = _3007 + _2972;
                        float _3029 = _3008 + _2973;
                        float _3030 = _3009 + _2974;
                        float _3034 = inversesqrt(dot(vec3(_3028, _3029, _3030), vec3(_3028, _3029, _3030)));
                        float _3038 = dot(vec3(_724, _727, _730), vec3(_3007, _3008, _3009));
                        float _4321 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                        float _3041 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
                        float _3042 = dot(vec3(_724, _727, _730), vec3(_3034 * _3028, _3034 * _3029, _3034 * _3030));
                        float _4332 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                        float _3045 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
                        float _3049 = ((_3045 * _3045) * (_3027 + (-1.0))) + 1.0;
                        float _3050 = _2985 * _3026;
                        float _3051 = _3050 * _3050;
                        float _3054 = ((1.0 - _3051) * _2975) + _3051;
                        float _4343 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
                        float _3055 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
                        float _3056 = 1.0 - _3026;
                        float _3066 = (0.5 / (((_3055 * ((_3041 * _3056) + _3026)) + 9.9999999392252902907785028219223e-09) + (((_3055 * _3056) + _3026) * _3041))) * _3055;
                        float _4354 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                        float _3077 = (((_3027 * 3.1415927410125732421875) * (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0)))) / ((_3049 * _3049) * ((_2992 * 2.1991131305694580078125) + 3.141590118408203125))) * _2981;
                        _2834 = (_2996 * _2944.x) + _2902;
                        _2835 = (_2996 * _2944.y) + _2903;
                        _2836 = (_2996 * _2944.z) + _2904;
                        _2831 = (_3077 * _2961.x) + _2899;
                        _2832 = (_3077 * _2961.y) + _2900;
                        _2833 = (_3077 * _2961.z) + _2901;
                        if (_2906 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2899 = _2831;
                            _2900 = _2832;
                            _2901 = _2833;
                            _2902 = _2834;
                            _2903 = _2835;
                            _2904 = _2836;
                            _2905 = _2906;
                        }
                    }
                    frontier_phi_61_pred = _2831;
                    frontier_phi_61_pred_1 = _2836;
                    frontier_phi_61_pred_2 = _2835;
                    frontier_phi_61_pred_3 = _2834;
                    frontier_phi_61_pred_4 = _2833;
                    frontier_phi_61_pred_5 = _2832;
                }
                _2622 = frontier_phi_61_pred;
                _2632 = frontier_phi_61_pred_1;
                _2630 = frontier_phi_61_pred_2;
                _2628 = frontier_phi_61_pred_3;
                _2626 = frontier_phi_61_pred_4;
                _2624 = frontier_phi_61_pred_5;
                uint _2782 = _2781 + 1u;
                if (_2782 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2775 = _2622;
                    _2776 = _2624;
                    _2777 = _2626;
                    _2778 = _2628;
                    _2779 = _2630;
                    _2780 = _2632;
                    _2781 = _2782;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2621 = _2622;
            _2623 = _2624;
            _2625 = _2626;
            _2627 = _2628;
            _2629 = _2630;
            _2631 = _2632;
        }
        uvec4 _2635 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2636 = _2635.z;
        uint _2638 = (_2636 >> 8u) & 15u;
        float _2743;
        float _2745;
        float _2747;
        float _2749;
        float _2751;
        float _2753;
        if (((4294967295u << _2638) & _2491) == 0u)
        {
            _2743 = _2621;
            _2745 = _2623;
            _2747 = _2625;
            _2749 = _2627;
            _2751 = _2629;
            _2753 = _2631;
        }
        else
        {
            float _2768 = inversesqrt(dot(vec3(_2445, _2446, _2447), vec3(_2445, _2446, _2447)));
            float _2769 = _2768 * _2445;
            float _2770 = _2768 * _2446;
            float _2771 = _2768 * _2447;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2638 < ((_2636 >> 12u) & 15u))
            {
                float _2744;
                float _2746;
                float _2748;
                float _2750;
                float _2752;
                float _2754;
                float _2882 = _2621;
                float _2883 = _2623;
                float _2884 = _2625;
                float _2885 = _2627;
                float _2886 = _2629;
                float _2887 = _2631;
                uint _2888 = _2638;
                uint _2897;
                bool _2898;
                for (;;)
                {
                    _2897 = texelFetch(g_lightClassification, int((((_2485 << 5u) + (_2471 << 9u)) + (_2888 << 2u)) >> 2u)).x;
                    _2898 = _2897 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2898)
                    {
                        frontier_phi_67_pred = _2885;
                        frontier_phi_67_pred_1 = _2886;
                        frontier_phi_67_pred_2 = _2887;
                        frontier_phi_67_pred_3 = _2884;
                        frontier_phi_67_pred_4 = _2883;
                        frontier_phi_67_pred_5 = _2882;
                    }
                    else
                    {
                        float _3082;
                        float _3083;
                        float _3084;
                        float _3085;
                        float _3086;
                        float _3087;
                        float _3377;
                        float _3378;
                        float _3379;
                        float _3380;
                        float _3381;
                        float _3382;
                        float _3095 = _2882;
                        float _3096 = _2883;
                        float _3097 = _2884;
                        float _3098 = _2885;
                        float _3099 = _2886;
                        float _3100 = _2887;
                        uint _3101 = _2897;
                        uint _3102;
                        vec4 _3127;
                        float _3128;
                        vec4 _3143;
                        vec3 _3155;
                        vec4 _3170;
                        vec4 _3186;
                        float _3233;
                        bool _3234;
                        for (;;)
                        {
                            uint _3112 = ((_2888 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3101));
                            _3102 = (_3101 + 4294967295u) & _3101;
                            uint _3114 = _3112 * 40u;
                            _3127 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3114)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 3u)).x));
                            _3128 = _3127.w;
                            uint _3130 = (_3112 * 40u) + 4u;
                            _3143 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3130)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 3u)).x));
                            uint _3145 = (_3112 * 40u) + 8u;
                            _3155 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3145)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 2u)).x));
                            uint _3157 = (_3112 * 40u) + 16u;
                            _3170 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3157)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 3u)).x));
                            uint _3173 = (_3112 * 40u) + 20u;
                            _3186 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 3u)).x));
                            uint _3189 = (_3112 * 40u) + 24u;
                            vec4 _3202 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3189)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 3u)).x));
                            uint _3208 = (_3112 * 40u) + 28u;
                            vec4 _3221 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3208)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 3u)).x));
                            _3233 = fma(_2447, _3221.z, fma(_2446, _3221.y, _3221.x * _2445)) + _3221.w;
                            _3234 = !((fma(_2447, _3202.z, fma(_2446, _3202.y, _3202.x * _2445)) + _3202.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3234)
                            {
                                float _3261 = _3127.x - _2445;
                                float _3262 = _3127.y - _2446;
                                float _3263 = _3127.z - _2447;
                                float _3264 = dot(vec3(_3261, _3262, _3263), vec3(_3261, _3262, _3263));
                                float _3267 = inversesqrt(_3264);
                                float _3268 = _3267 * _3261;
                                float _3269 = _3267 * _3262;
                                float _3270 = _3267 * _3263;
                                float _3274 = 1.0 - (_3264 / (_3128 * _3128));
                                float _4365 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                                float _3275 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                                float _3279 = sqrt(_3264) * _3143.w;
                                float _3281 = 1.39999997615814208984375 / (_3279 + 1.39999997615814208984375);
                                float _3282 = _3281 * _3281;
                                float _3285 = ((1.0 - _3282) * dot(vec3(_3268, _3269, _3270), vec3(_724, _727, _730))) + _3282;
                                float _3288 = _3279 * _3279;
                                float _3292 = (fma(_2447, _3170.z, fma(_2446, _3170.y, _3170.x * _2445)) + _3170.w) / _3233;
                                float _3293 = (fma(_2447, _3186.z, fma(_2446, _3186.y, _3186.x * _2445)) + _3186.w) / _3233;
                                float _3297 = 1.0 - dot(vec2(_3292, _3293), vec2(_3292, _3293));
                                float _4381 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                                float _3298 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                                float _3299 = _3298 * (((isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0))) * _3275) / ((_3288 * 0.699999988079071044921875) + 1.0));
                                float _3311 = exp2(log2(1.0 / ((_3288 * 3.5) + 5.0)) * 0.25);
                                float _3312 = 1.0 - _784;
                                float _3319 = sqrt(1.0 - ((1.0 - (_3312 * _3312)) * (1.0 - (_3311 * _3311))));
                                float _3320 = _3319 * _3319;
                                float _3321 = _3320 * _3320;
                                float _3322 = _3268 - _2769;
                                float _3323 = _3269 - _2770;
                                float _3324 = _3270 - _2771;
                                float _3328 = inversesqrt(dot(vec3(_3322, _3323, _3324), vec3(_3322, _3323, _3324)));
                                float _3332 = dot(vec3(_724, _727, _730), vec3((-0.0) - _2769, (-0.0) - _2770, (-0.0) - _2771));
                                float _4392 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                                float _3335 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
                                float _3336 = dot(vec3(_724, _727, _730), vec3(_3328 * _3322, _3328 * _3323, _3328 * _3324));
                                float _4403 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                                float _3339 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
                                float _3343 = ((_3339 * _3339) * (_3321 + (-1.0))) + 1.0;
                                float _3344 = _3281 * _3320;
                                float _3345 = _3344 * _3344;
                                float _3351 = ((1.0 - _3345) * dot(vec3(_724, _727, _730), vec3(_3268, _3269, _3270))) + _3345;
                                float _4414 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                                float _3352 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
                                float _3353 = 1.0 - _3320;
                                float _3363 = (0.5 / (((_3352 * ((_3335 * _3353) + _3320)) + 9.9999999392252902907785028219223e-09) + (((_3352 * _3353) + _3320) * _3335))) * _3352;
                                float _4425 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                                float _3373 = (_3298 * _3275) * (((_3321 * 3.1415927410125732421875) * (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0)))) / ((_3343 * _3343) * ((_3288 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3373 * _3155.x;
                                frontier_phi_73_pred_1 = _3373 * _3155.y;
                                frontier_phi_73_pred_2 = _3299 * _3143.z;
                                frontier_phi_73_pred_3 = _3299 * _3143.y;
                                frontier_phi_73_pred_4 = _3299 * _3143.x;
                                frontier_phi_73_pred_5 = _3373 * _3155.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3377 = frontier_phi_73_pred;
                            _3378 = frontier_phi_73_pred_1;
                            _3382 = frontier_phi_73_pred_2;
                            _3381 = frontier_phi_73_pred_3;
                            _3380 = frontier_phi_73_pred_4;
                            _3379 = frontier_phi_73_pred_5;
                            _3085 = _3380 + _3098;
                            _3086 = _3381 + _3099;
                            _3087 = _3382 + _3100;
                            _3082 = _3377 + _3095;
                            _3083 = _3378 + _3096;
                            _3084 = _3379 + _3097;
                            if (_3102 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3095 = _3082;
                                _3096 = _3083;
                                _3097 = _3084;
                                _3098 = _3085;
                                _3099 = _3086;
                                _3100 = _3087;
                                _3101 = _3102;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3085;
                        frontier_phi_67_pred_1 = _3086;
                        frontier_phi_67_pred_2 = _3087;
                        frontier_phi_67_pred_3 = _3084;
                        frontier_phi_67_pred_4 = _3083;
                        frontier_phi_67_pred_5 = _3082;
                    }
                    _2750 = frontier_phi_67_pred;
                    _2752 = frontier_phi_67_pred_1;
                    _2754 = frontier_phi_67_pred_2;
                    _2748 = frontier_phi_67_pred_3;
                    _2746 = frontier_phi_67_pred_4;
                    _2744 = frontier_phi_67_pred_5;
                    uint _2889 = _2888 + 1u;
                    if (_2889 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2882 = _2744;
                        _2883 = _2746;
                        _2884 = _2748;
                        _2885 = _2750;
                        _2886 = _2752;
                        _2887 = _2754;
                        _2888 = _2889;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2752;
                frontier_phi_55_56_ladder_1 = _2754;
                frontier_phi_55_56_ladder_2 = _2750;
                frontier_phi_55_56_ladder_3 = _2748;
                frontier_phi_55_56_ladder_4 = _2746;
                frontier_phi_55_56_ladder_5 = _2744;
            }
            else
            {
                frontier_phi_55_56_ladder = _2629;
                frontier_phi_55_56_ladder_1 = _2631;
                frontier_phi_55_56_ladder_2 = _2627;
                frontier_phi_55_56_ladder_3 = _2625;
                frontier_phi_55_56_ladder_4 = _2623;
                frontier_phi_55_56_ladder_5 = _2621;
            }
            _2743 = frontier_phi_55_56_ladder_5;
            _2745 = frontier_phi_55_56_ladder_4;
            _2747 = frontier_phi_55_56_ladder_3;
            _2749 = frontier_phi_55_56_ladder_2;
            _2751 = frontier_phi_55_56_ladder;
            _2753 = frontier_phi_55_56_ladder_1;
        }
        float _2758 = isnan(1.0) ? _768 : (isnan(_768) ? 1.0 : min(_768, 1.0));
        _2504 = (_2758 * _2749) + _1956;
        _2506 = (_2758 * _2751) + _1958;
        _2508 = (_2758 * _2753) + _1960;
        _2510 = ((_2743 * 0.039999999105930328369140625) * _2758) + _2289;
        _2512 = ((_2745 * 0.039999999105930328369140625) * _2758) + _2291;
        _2514 = ((_2747 * 0.039999999105930328369140625) * _2758) + _2293;
    }
    else
    {
        _2504 = _1956;
        _2506 = _1958;
        _2508 = _1960;
        _2510 = _2289;
        _2512 = _2291;
        _2514 = _2293;
    }
    uint _2520 = _744 + uint(cbMatDynParam._m0[0u].w);
    float _2526 = cbInstanceData._m0[_2520].x * (_526 - (_542 * _526));
    float _2527 = cbInstanceData._m0[_2520].y * (_527 - (_542 * _527));
    float _2528 = cbInstanceData._m0[_2520].z * (_528 - (_542 * _528));
    float _4441 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _4452 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _4463 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _2545 = (((isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_2504 + ((isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0))) * _768))) + ((_2510 + ((isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))) * _1575)) * cbPerFrame._m0[3u].x)) + _2526;
    float _2547 = (_2527 + ((_2512 + ((isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))) * _1575)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * (_2506 + ((isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0))) * _768)));
    float _2549 = (_2528 + ((_2514 + ((isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0))) * _1575)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_2508 + ((isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))) * _768)));
    float _4489 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2562 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
    uint _2563 = _743 + 6u;
    float _2571 = _703 / cbSceneParam._m0[86u].x;
    float _2572 = _704 / cbSceneParam._m0[86u].y;
    vec4 _2586 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2571, _2572, (log2((isnan(cbSceneParam._m0[77u].w) ? _638 : (isnan(_638) ? cbSceneParam._m0[77u].w : min(_638, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2588 = _2586.x;
    float _2589 = _2586.y;
    float _2590 = _2586.z;
    float _2591 = _2586.w;
    float _2684;
    float _2686;
    float _2688;
    float _2690;
    if (_638 > cbSceneParam._m0[78u].w)
    {
        float _2646 = isnan(_638) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _638 : min(cbSceneParam._m0[80u].w, _638));
        float _2647 = _2646 / _638;
        float _2658 = _2647 * _688;
        float _2659 = _689 * _2647;
        float _2660 = (-0.0) - _2659;
        float _2662 = _2647 * _690;
        float _2664 = (cbSceneParam._m0[77u].w * _2660) / _2646;
        float _2665 = _2664 + cbSceneParam._m0[79u].w;
        float _2666 = cbSceneParam._m0[79u].w - _2659;
        float _2672 = sqrt(((_2658 * _2658) + (_2659 * _2659)) + (_2662 * _2662));
        float _2675 = (1.0 - (cbSceneParam._m0[77u].w / _2646)) * _2672;
        float _2680 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2682 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2844;
        if (abs((_2660 - _2664) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2844 = ((((_2665 > 0.0) ? exp2(_2680 * _2665) : (2.0 - exp2(_2682 * _2665))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2675;
        }
        else
        {
            float _2804 = 1.0 / cbSceneParam._m0[80u].x;
            float _2805 = isnan(_2666) ? _2665 : (isnan(_2665) ? _2666 : max(_2665, _2666));
            float _2806 = isnan(_2666) ? _2665 : (isnan(_2665) ? _2666 : min(_2665, _2666));
            float _2815 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : min(_2805, 0.0));
            float _2816 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : min(_2806, 0.0));
            _2844 = ((abs(_2672 / _2660) * cbSceneParam._m0[80u].y) * ((((_2815 - _2816) * 2.0) - ((exp2(_2680 * (isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0)))) - exp2(_2680 * (isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0))))) * _2804)) - ((exp2(_2682 * _2815) - exp2(_2682 * _2816)) * _2804))) + (_2675 * cbSceneParam._m0[80u].z);
        }
        vec4 _2846 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2571, _2572, 1.0), 0.0);
        float _2855 = exp2((_2844 * (-1.44269502162933349609375)) * (1.0 - _2846.w));
        float _2856 = log2(_2855);
        float _2872 = log2(_2591);
        _2684 = (exp2(_2872 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2856 * cbSceneParam._m0[78u].x)) * _2846.x) / cbSceneParam._m0[78u].x)) + _2588;
        _2686 = (exp2(_2872 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2856 * cbSceneParam._m0[78u].y)) * _2846.y) / cbSceneParam._m0[78u].y)) + _2589;
        _2688 = (exp2(_2872 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2856 * cbSceneParam._m0[78u].z)) * _2846.z) / cbSceneParam._m0[78u].z)) + _2590;
        _2690 = _2855 * _2591;
    }
    else
    {
        _2684 = _2588;
        _2686 = _2589;
        _2688 = _2590;
        _2690 = _2591;
    }
    float _2702 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2703 = _2702 == 3.0;
    float _2704 = log2(_2690);
    float _2708 = exp2(_2704 * cbSceneParam._m0[78u].x);
    float _2709 = exp2(_2704 * cbSceneParam._m0[78u].y);
    float _2710 = exp2(_2704 * cbSceneParam._m0[78u].z);
    float _2711 = _2708 * (isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0)));
    float _2712 = _2709 * (isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0)));
    float _2713 = _2710 * (isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0)));
    float _2722 = (_2702 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2722 * (_2703 ? _2711 : (_2711 + (cbSceneParam._m0[72u].w * _2684)));
    SV_Target.y = _2722 * (_2703 ? _2712 : (_2712 + (cbSceneParam._m0[72u].w * _2686)));
    SV_Target.z = _2722 * (_2703 ? _2713 : (_2713 + (cbSceneParam._m0[72u].w * _2688)));
    SV_Target.w = cbInstanceData._m0[_2563].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2526) * _2562) * _2708) * _2722;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2527) * _2562) * _2709) * _2722;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2528) * _2562) * _2710) * _2722;
    SV_Target_1.w = cbInstanceData._m0[_2563].w;
}


