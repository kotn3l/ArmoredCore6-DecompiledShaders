#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1236;
float _3658;
float _3659;
float _3660;
float _3661;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _257 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _263 = _257.x * cbMtdParam._m0[9u].x;
    float _264 = _257.y * cbMtdParam._m0[9u].y;
    float _265 = _257.z * cbMtdParam._m0[9u].z;
    vec4 _303 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _319 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3670 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _320 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
    float _327 = (((_303.x * cbMtdParam._m0[10u].x) - _263) * _320) + _263;
    float _328 = (((_303.y * cbMtdParam._m0[10u].y) - _264) * _320) + _264;
    float _329 = (((_303.z * cbMtdParam._m0[10u].z) - _265) * _320) + _265;
    vec4 _349 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _368 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_349.x + 0.00999999977648258209228515625));
    float _370 = _368 * (cbMtdParam._m0[15u].x + 1.0);
    float _3681 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _371 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
    float _379 = ((((cbMtdParam._m0[12u].x - _327) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _371) + _327;
    float _380 = ((((cbMtdParam._m0[12u].y - _328) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _371) + _328;
    float _381 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _329)) * _371) + _329;
    vec4 _394 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _396 = _394.x;
    float _414 = ((texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[7u].w)).x - _396) * _320) + _396;
    vec4 _427 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _435 = (_427.x * 2.0) + (-1.0);
    float _437 = (_427.y * 2.0) + (-1.0);
    float _438 = dot(vec2(_435, _437), vec2(_435, _437));
    float _3692 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    vec4 _455 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _459 = _455.z;
    float _462 = (_455.x * 2.0) + (-1.0);
    float _463 = (_455.y * 2.0) + (-1.0);
    float _464 = dot(vec2(_462, _463), vec2(_462, _463));
    float _3703 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _469 = sqrt(1.0 - (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))));
    float _472 = (_320 * (_427.z - _459)) + _459;
    float _475 = _368 * (cbMtdParam._m0[14u].w + 1.0);
    float _3714 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _479 = ((cbMtdParam._m0[14u].y - _472) * (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0)))) + _472;
    vec4 _506 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _521 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _563 = (TEXCOORD_6.x - ((cbMtdParam._m0[13u].w * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_5, SS_WrapLinear), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].x + 1.0);
    float _3725 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _564 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _565 = ((_521.x + _506.x) * cbMtdParam._m0[11u].x) * _564;
    float _566 = ((_521.y + _506.y) * cbMtdParam._m0[11u].y) * _564;
    float _567 = ((_521.z + _506.z) * cbMtdParam._m0[11u].z) * _564;
    vec4 _579 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[9u].w));
    float _581 = _579.x;
    float _594 = (_320 * (_435 - _462)) + _462;
    float _595 = (_320 * (_437 - _463)) + _463;
    float _596 = (_320 * (sqrt(1.0 - (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0)))) - _469)) + _469;
    vec4 _615 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _621 = (_615.x * 2.0) + (-1.0);
    float _622 = (_615.y * 2.0) + (-1.0);
    float _623 = dot(vec2(_621, _622), vec2(_621, _622));
    float _3736 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _639 = (_371 * (((_594 * cbMtdParam._m0[13u].z) - _594) + _621)) + _594;
    float _640 = (_371 * (((_595 * cbMtdParam._m0[13u].z) - _595) + _622)) + _595;
    float _641 = (_371 * (sqrt(1.0 - (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0)))) - _596)) + _596;
    float _644 = fma(_641, _228 * NORMAL.x, fma(_640, _235 * TANGENT.x, (_221 * _213) * _639));
    float _647 = fma(_641, _228 * NORMAL.y, fma(_640, _235 * TANGENT.y, (_221 * _214) * _639));
    float _650 = fma(_641, _228 * NORMAL.z, fma(_640, _235 * TANGENT.z, (_221 * _215) * _639));
    float _654 = inversesqrt(dot(vec3(_644, _647, _650), vec3(_644, _647, _650)));
    float _655 = _654 * _644;
    float _656 = _654 * _647;
    float _657 = _654 * _650;
    float _3747 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _658 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _3758 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _3769 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _3780 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _3791 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _662 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _678 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _718 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _728 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _718);
    float _729 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _718);
    float _730 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _718);
    float _734 = inversesqrt(dot(vec3(_728, _729, _730), vec3(_728, _729, _730)));
    float _735 = _728 * _734;
    float _736 = _729 * _734;
    float _737 = _730 * _734;
    vec4 _742 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _744 = _742.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _916 = sqrt(((_728 * _728) + (_729 * _729)) + (_730 * _730));
        float _922 = (cbMatDynParam._m0[5u].x * _916) + cbMatDynParam._m0[5u].y;
        float _3802 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _923 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _927 = (cbMatDynParam._m0[5u].z * _916) + cbMatDynParam._m0[5u].w;
        float _3813 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) - _923)) + _923) < ((_744 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _755 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _756 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _774 = fma(_657, cbSceneParam._m0[5u].z, fma(_656, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _655));
    float _777 = fma(_657, cbSceneParam._m0[6u].z, fma(_656, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _655));
    float _780 = fma(_657, cbSceneParam._m0[7u].z, fma(_656, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _655));
    uint _793 = uint(roundEven(NORMAL.w)) * 13u;
    uint _794 = _793 + 9u;
    uint _795 = _794 + uint(cbMatDynParam._m0[0u].w);
    float _801 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0)))) * cbInstanceData._m0[_795].x;
    float _802 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0)))) * cbInstanceData._m0[_795].y;
    float _803 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0)))) * cbInstanceData._m0[_795].z;
    float _3824 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _804 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _3835 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _805 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _3846 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _806 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _807 = 1.0 - _662;
    float _808 = _804 * _807;
    float _809 = _805 * _807;
    float _810 = _806 * _807;
    float _815 = (_804 + (-0.039999999105930328369140625)) * _662;
    float _816 = (_805 + (-0.039999999105930328369140625)) * _662;
    float _817 = (_806 + (-0.039999999105930328369140625)) * _662;
    float _818 = _815 + 0.039999999105930328369140625;
    float _820 = _816 + 0.039999999105930328369140625;
    float _821 = _817 + 0.039999999105930328369140625;
    vec4 _830 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _755, cbSceneParam._m0[86u].y * _756));
    float _833 = _830.x * TEXCOORD_3.w;
    float _834 = dot(vec3(_655, _656, _657), vec3(_735, _736, _737));
    float _837 = _834 * 2.0;
    float _841 = (_837 * _655) - _735;
    float _842 = (_837 * _656) - _736;
    float _843 = (_837 * _657) - _737;
    float _847 = abs(dot(vec3(_735, _736, _737), vec3(_655, _656, _657)));
    float _3857 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _849 = sqrt(_658);
    float _862 = exp2((_849 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_849 * 3.0));
    float _868 = (1.0 - _862) * ((_849 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _869 = _862 * _849;
    float _897 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _901 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _905 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1235;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _960 = fma(_905, cbModelParam._m0[26u].z, fma(_901, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _897));
        float _964 = fma(_905, cbModelParam._m0[27u].z, fma(_901, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _897));
        float _968 = fma(_905, cbModelParam._m0[28u].z, fma(_901, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _897));
        float _993 = _897 + _655;
        float _994 = _901 + _656;
        float _995 = _905 + _657;
        float _1005 = fma(_995, cbModelParam._m0[26u].z, fma(_994, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _993)) - _960;
        float _1006 = fma(_995, cbModelParam._m0[27u].z, fma(_994, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _993)) - _964;
        float _1007 = fma(_995, cbModelParam._m0[28u].z, fma(_994, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _993)) - _968;
        float _1011 = inversesqrt(dot(vec3(_1005, _1006, _1007), vec3(_1005, _1006, _1007)));
        float _1024 = ((_1011 * _1005) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_960 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1025 = ((_1011 * _1006) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_964 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1026 = ((_1011 * _1007) / cbModelParam._m0[34u].z) + ((((((_968 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        vec4 _1043 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        float _1063 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1029.x + (-0.5));
        float _1065 = _1063 * (_1029.y + (-0.5));
        float _1066 = _1063 * (_1029.z + (-0.5));
        float _1073 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1036.x + (-0.5));
        float _1075 = _1073 * (_1036.y + (-0.5));
        float _1076 = _1073 * (_1036.z + (-0.5));
        float _1083 = exp2((_1043.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1043.x + (-0.5));
        float _1085 = _1083 * (_1043.y + (-0.5));
        float _1086 = _1083 * (_1043.z + (-0.5));
        float _1093 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1050.x + (-0.5));
        float _1095 = _1093 * (_1050.y + (-0.5));
        float _1096 = _1093 * (_1050.z + (-0.5));
        float _1097 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1098 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1099 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1100 = _1064 * 0.5;
        float _1101 = _1074 * 0.5;
        float _1102 = _1084 * 0.5;
        float _1103 = dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102));
        float _1108 = (_1103 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1103);
        float _1117 = (dot(vec3(_655, _656, _657), vec3(_1108 * _1100, _1108 * _1101, _1108 * _1102)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1127 = sqrt(((_1101 * _1101) + (_1100 * _1100)) + (_1102 * _1102)) / (_1097 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1129 = _1128 * 2.0;
        float _1133 = (1.0 - _1128) / (_1128 + 1.0);
        float _3905 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1143 = ((((1.0 - _1134) * (_1129 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1129 + 1.0))) + _1134) * _1097;
        float _1144 = _1065 * 0.5;
        float _1145 = _1075 * 0.5;
        float _1146 = _1085 * 0.5;
        float _1147 = dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146));
        float _1152 = (_1147 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1147);
        float _1160 = (dot(vec3(_655, _656, _657), vec3(_1152 * _1144, _1152 * _1145, _1152 * _1146)) + 1.0) * 0.5;
        float _3916 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1169 = sqrt(((_1145 * _1145) + (_1144 * _1144)) + (_1146 * _1146)) / (_1098 + 9.9999997473787516355514526367188e-06);
        float _3927 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1171 = _1170 * 2.0;
        float _1175 = (1.0 - _1170) / (_1170 + 1.0);
        float _3938 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1185 = ((((1.0 - _1176) * (_1171 + 2.0)) * exp2(log2(isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1171 + 1.0))) + _1176) * _1098;
        float _1186 = _1066 * 0.5;
        float _1187 = _1076 * 0.5;
        float _1188 = _1086 * 0.5;
        float _1189 = dot(vec3(_1186, _1187, _1188), vec3(_1186, _1187, _1188));
        float _1194 = (_1189 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1189);
        float _1202 = (dot(vec3(_655, _656, _657), vec3(_1194 * _1186, _1194 * _1187, _1194 * _1188)) + 1.0) * 0.5;
        float _3949 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1211 = sqrt(((_1187 * _1187) + (_1186 * _1186)) + (_1188 * _1188)) / (_1099 + 9.9999997473787516355514526367188e-06);
        float _3960 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1213 = _1212 * 2.0;
        float _1217 = (1.0 - _1212) / (_1212 + 1.0);
        float _3971 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1227 = ((((1.0 - _1218) * (_1213 + 2.0)) * exp2(log2(isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_1213 + 1.0))) + _1218) * _1099;
        _1235 = _1066;
        _1237 = _1065;
        _1238 = _1064;
        _1239 = _1076;
        _1240 = _1075;
        _1241 = _1074;
        _1242 = _1086;
        _1243 = _1085;
        _1244 = _1084;
        _1245 = _1099;
        _1246 = _1098;
        _1247 = _1097;
        _1248 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0)));
        _1249 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)));
        _1250 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)));
    }
    else
    {
        _1235 = _1236;
        _1237 = _1236;
        _1238 = _1236;
        _1239 = _1236;
        _1240 = _1236;
        _1241 = _1236;
        _1242 = _1236;
        _1243 = _1236;
        _1244 = _1236;
        _1245 = _1236;
        _1246 = _1236;
        _1247 = _1236;
        _1248 = 0.0;
        _1249 = 0.0;
        _1250 = 0.0;
    }
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1279 = fma(_905, cbModelParam._m0[30u].z, fma(_901, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _897));
        float _1283 = fma(_905, cbModelParam._m0[31u].z, fma(_901, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _897));
        float _1287 = fma(_905, cbModelParam._m0[32u].z, fma(_901, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _897));
        float _1310 = _897 + _655;
        float _1311 = _901 + _656;
        float _1312 = _905 + _657;
        float _1322 = fma(_1312, cbModelParam._m0[30u].z, fma(_1311, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1310)) - _1279;
        float _1323 = fma(_1312, cbModelParam._m0[31u].z, fma(_1311, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1310)) - _1283;
        float _1324 = fma(_1312, cbModelParam._m0[32u].z, fma(_1311, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1310)) - _1287;
        float _1328 = inversesqrt(dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324)));
        float _1341 = ((_1328 * _1322) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1279 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1342 = ((_1328 * _1323) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1283 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1343 = ((_1328 * _1324) / cbModelParam._m0[35u].z) + ((((((_1287 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        float _1378 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1379 = _1378 * (_1345.x + (-0.5));
        float _1380 = _1378 * (_1345.y + (-0.5));
        float _1381 = _1378 * (_1345.z + (-0.5));
        float _1388 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1389 = _1388 * (_1352.x + (-0.5));
        float _1390 = _1388 * (_1352.y + (-0.5));
        float _1391 = _1388 * (_1352.z + (-0.5));
        float _1398 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1399 = _1398 * (_1359.x + (-0.5));
        float _1400 = _1398 * (_1359.y + (-0.5));
        float _1401 = _1398 * (_1359.z + (-0.5));
        float _1408 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1409 = _1408 * (_1366.x + (-0.5));
        float _1410 = _1408 * (_1366.y + (-0.5));
        float _1411 = _1408 * (_1366.z + (-0.5));
        float _1412 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1413 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1414 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1415 = _1379 * 0.5;
        float _1416 = _1389 * 0.5;
        float _1417 = _1399 * 0.5;
        float _1418 = dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417));
        float _1423 = (_1418 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1418);
        float _1431 = (dot(vec3(_655, _656, _657), vec3(_1423 * _1415, _1423 * _1416, _1423 * _1417)) + 1.0) * 0.5;
        float _4012 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1440 = sqrt(((_1416 * _1416) + (_1415 * _1415)) + (_1417 * _1417)) / (_1412 + 9.9999997473787516355514526367188e-06);
        float _4023 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1442 = _1441 * 2.0;
        float _1446 = (1.0 - _1441) / (_1441 + 1.0);
        float _4034 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1456 = ((((1.0 - _1447) * (_1442 + 2.0)) * exp2(log2(isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_1442 + 1.0))) + _1447) * _1412;
        float _1457 = _1380 * 0.5;
        float _1458 = _1390 * 0.5;
        float _1459 = _1400 * 0.5;
        float _1460 = dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459));
        float _1465 = (_1460 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1460);
        float _1473 = (dot(vec3(_655, _656, _657), vec3(_1465 * _1457, _1465 * _1458, _1465 * _1459)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1482 = sqrt(((_1458 * _1458) + (_1457 * _1457)) + (_1459 * _1459)) / (_1413 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1484 = _1483 * 2.0;
        float _1488 = (1.0 - _1483) / (_1483 + 1.0);
        float _4067 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1498 = ((((1.0 - _1489) * (_1484 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1484 + 1.0))) + _1489) * _1413;
        float _1499 = _1381 * 0.5;
        float _1500 = _1391 * 0.5;
        float _1501 = _1401 * 0.5;
        float _1502 = dot(vec3(_1499, _1500, _1501), vec3(_1499, _1500, _1501));
        float _1507 = (_1502 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1502);
        float _1515 = (dot(vec3(_655, _656, _657), vec3(_1507 * _1499, _1507 * _1500, _1507 * _1501)) + 1.0) * 0.5;
        float _4078 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1524 = sqrt(((_1500 * _1500) + (_1499 * _1499)) + (_1501 * _1501)) / (_1414 + 9.9999997473787516355514526367188e-06);
        float _4089 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1526 = _1525 * 2.0;
        float _1530 = (1.0 - _1525) / (_1525 + 1.0);
        float _4100 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1540 = ((((1.0 - _1531) * (_1526 + 2.0)) * exp2(log2(isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_1526 + 1.0))) + _1531) * _1414;
        _1548 = _1381;
        _1549 = _1380;
        _1550 = _1379;
        _1551 = _1391;
        _1552 = _1390;
        _1553 = _1389;
        _1554 = _1401;
        _1555 = _1400;
        _1556 = _1399;
        _1557 = _1414;
        _1558 = _1413;
        _1559 = _1412;
        _1560 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)));
        _1561 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)));
        _1562 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)));
    }
    else
    {
        _1548 = _1236;
        _1549 = _1236;
        _1550 = _1236;
        _1551 = _1236;
        _1552 = _1236;
        _1553 = _1236;
        _1554 = _1236;
        _1555 = _1236;
        _1556 = _1236;
        _1557 = _1236;
        _1558 = _1236;
        _1559 = _1236;
        _1560 = 0.0;
        _1561 = 0.0;
        _1562 = 0.0;
    }
    float _1572 = (cbModelParam._m0[1u].x * (_1560 - _1248)) + _1248;
    float _1573 = (cbModelParam._m0[1u].x * (_1561 - _1249)) + _1249;
    float _1574 = (cbModelParam._m0[1u].x * (_1562 - _1250)) + _1250;
    float _1595 = fma(_1574, cbSceneParam._m0[89u].z, fma(_1573, cbSceneParam._m0[89u].y, _1572 * cbSceneParam._m0[89u].x));
    float _1598 = fma(_1574, cbSceneParam._m0[90u].z, fma(_1573, cbSceneParam._m0[90u].y, _1572 * cbSceneParam._m0[90u].x));
    float _1601 = fma(_1574, cbSceneParam._m0[91u].z, fma(_1573, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1572));
    float _1616 = _841 * 0.5;
    float _1617 = _842 * 0.5;
    float _1618 = _843 * 0.5;
    float _1619 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1550, _1553, _1556, _1559));
    float _1622 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1549, _1552, _1555, _1558));
    float _1625 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1548, _1551, _1554, _1557));
    float _1659;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1632 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1235, _1239, _1242, _1245));
        float _1636 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1237, _1240, _1243, _1246));
        float _1640 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1238, _1241, _1244, _1247));
        float _1647 = dot(vec4(cbModelParam._m0[39u]), vec4(_1616, _1617, _1618, 1.0));
        _1659 = dot(vec3(isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)), isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)), isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1647) ? 0.0 : (isnan(0.0) ? _1647 : max(0.0, _1647))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1659 = 1.0;
    }
    float _1670;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1661 = dot(vec4(cbModelParam._m0[40u]), vec4(_1616, _1617, _1618, 1.0));
        _1670 = dot(vec3(isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)), isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)), isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1661) ? 0.0 : (isnan(0.0) ? _1661 : max(0.0, _1661))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1670 = 1.0;
    }
    float _1674 = (_1670 * cbModelParam._m0[1u].x) + (_1659 * (1.0 - cbModelParam._m0[1u].x));
    float _1684 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _658);
    float _1685 = isnan(_1684) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1684 : min(cbModelParam._m0[25u].z, _1684));
    float _1765;
    float _1767;
    float _1769;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1732 = fma(_905, cbModelParam._m0[13u].z, fma(_901, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _897)) + cbModelParam._m0[13u].w;
        float _1736 = fma(_905, cbModelParam._m0[14u].z, fma(_901, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _897)) + cbModelParam._m0[14u].w;
        float _1740 = fma(_905, cbModelParam._m0[15u].z, fma(_901, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _897)) + cbModelParam._m0[15u].w;
        float _1743 = fma(_843, cbModelParam._m0[13u].z, fma(_842, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _841));
        float _1746 = fma(_843, cbModelParam._m0[14u].z, fma(_842, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _841));
        float _1749 = fma(_843, cbModelParam._m0[15u].z, fma(_842, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _841));
        float _1777;
        if (_1743 > 0.0)
        {
            _1777 = abs((1.0 - _1732) / _1743);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1743 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1732 + 1.0) / _1743);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1777 = frontier_phi_17_15_ladder;
        }
        float _1981;
        if (_1746 > 0.0)
        {
            _1981 = abs((1.0 - _1736) / _1746);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1746 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1736 + 1.0) / _1746);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1981 = frontier_phi_26_22_ladder;
        }
        float _2235;
        if (_1749 > 0.0)
        {
            _2235 = abs((1.0 - _1740) / _1749);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1749 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1740 + 1.0) / _1749);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2235 = frontier_phi_38_33_ladder;
        }
        float _2237 = isnan(_1981) ? _1777 : (isnan(_1777) ? _1981 : min(_1777, _1981));
        float _2238 = isnan(_2235) ? _2237 : (isnan(_2237) ? _2235 : min(_2237, _2235));
        float _2242 = (_2238 * _1743) + _1732;
        float _2243 = (_2238 * _1746) + _1736;
        float _2244 = (_2238 * _1749) + _1740;
        float _2245 = _2238 * 9.9999997473787516355514526367188e-05;
        float _2247 = (-1.0) - _2245;
        float _2249 = _2245 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2244 > _2249) || ((_2244 < _2247) || ((_2243 > _2249) || ((_2243 < _2247) || ((_2242 < _2247) || (_2242 > _2249))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2372 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2244, cbModelParam._m0[9u].z, fma(_2243, cbModelParam._m0[9u].y, _2242 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2244, cbModelParam._m0[10u].z, fma(_2243, cbModelParam._m0[10u].y, _2242 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2244, cbModelParam._m0[11u].z, fma(_2243, cbModelParam._m0[11u].y, _2242 * cbModelParam._m0[11u].x))), _1685);
            frontier_phi_16_38_ladder = _2372.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2372.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2372.x * cbModelParam._m0[1u].y;
        }
        _1765 = frontier_phi_16_38_ladder_2;
        _1767 = frontier_phi_16_38_ladder_1;
        _1769 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1753 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_841, _842, _843), _1685);
        _1765 = _1753.x * cbModelParam._m0[1u].y;
        _1767 = _1753.y * cbModelParam._m0[1u].y;
        _1769 = _1753.z * cbModelParam._m0[1u].y;
    }
    float _1773 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _658);
    float _1774 = isnan(_1773) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1773 : min(cbModelParam._m0[25u].w, _1773));
    float _1865;
    float _1867;
    float _1869;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1829 = fma(_905, cbModelParam._m0[21u].z, fma(_901, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _897)) + cbModelParam._m0[21u].w;
        float _1833 = fma(_905, cbModelParam._m0[22u].z, fma(_901, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _897)) + cbModelParam._m0[22u].w;
        float _1837 = fma(_905, cbModelParam._m0[23u].z, fma(_901, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _897)) + cbModelParam._m0[23u].w;
        float _1840 = fma(_843, cbModelParam._m0[21u].z, fma(_842, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _841));
        float _1843 = fma(_843, cbModelParam._m0[22u].z, fma(_842, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _841));
        float _1846 = fma(_843, cbModelParam._m0[23u].z, fma(_842, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _841));
        float _1986;
        if (_1840 > 0.0)
        {
            _1986 = abs((1.0 - _1829) / _1840);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1829 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1986 = frontier_phi_28_24_ladder;
        }
        float _2262;
        if (_1843 > 0.0)
        {
            _2262 = abs((1.0 - _1833) / _1843);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1833 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2262 = frontier_phi_40_35_ladder;
        }
        float _2475;
        if (_1846 > 0.0)
        {
            _2475 = abs((1.0 - _1837) / _1846);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1846 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1837 + 1.0) / _1846);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2475 = frontier_phi_49_46_ladder;
        }
        float _2477 = isnan(_2262) ? _1986 : (isnan(_1986) ? _2262 : min(_1986, _2262));
        float _2478 = isnan(_2475) ? _2477 : (isnan(_2477) ? _2475 : min(_2477, _2475));
        float _2482 = (_2478 * _1840) + _1829;
        float _2483 = (_2478 * _1843) + _1833;
        float _2484 = (_2478 * _1846) + _1837;
        float _2485 = _2478 * 9.9999997473787516355514526367188e-05;
        float _2486 = (-1.0) - _2485;
        float _2488 = _2485 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2484 > _2488) || ((_2484 < _2486) || ((_2483 > _2488) || ((_2483 < _2486) || ((_2482 < _2486) || (_2482 > _2488))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2712 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2484, cbModelParam._m0[17u].z, fma(_2483, cbModelParam._m0[17u].y, _2482 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2484, cbModelParam._m0[18u].z, fma(_2483, cbModelParam._m0[18u].y, _2482 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2484, cbModelParam._m0[19u].z, fma(_2483, cbModelParam._m0[19u].y, _2482 * cbModelParam._m0[19u].x))), _1774);
            frontier_phi_25_49_ladder = _2712.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2712.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2712.x * cbModelParam._m0[1u].z;
        }
        _1865 = frontier_phi_25_49_ladder_2;
        _1867 = frontier_phi_25_49_ladder_1;
        _1869 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1849 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_841, _842, _843), _1774);
        _1865 = _1849.x * cbModelParam._m0[1u].z;
        _1867 = _1849.y * cbModelParam._m0[1u].z;
        _1869 = _1849.z * cbModelParam._m0[1u].z;
    }
    float _1882 = (((_868 * _818) + _869) * _833) * ((cbModelParam._m0[1u].w * (_1865 - _1765)) + _1765);
    float _1884 = (((_868 * _820) + _869) * _833) * ((cbModelParam._m0[1u].w * (_1867 - _1767)) + _1767);
    float _1886 = (((_868 * _821) + _869) * _833) * ((cbModelParam._m0[1u].w * (_1869 - _1769)) + _1769);
    float _1889 = fma(_1886, cbSceneParam._m0[89u].z, fma(_1884, cbSceneParam._m0[89u].y, _1882 * cbSceneParam._m0[89u].x));
    float _1892 = fma(_1886, cbSceneParam._m0[90u].z, fma(_1884, cbSceneParam._m0[90u].y, _1882 * cbSceneParam._m0[90u].x));
    float _1895 = fma(_1886, cbSceneParam._m0[91u].z, fma(_1884, cbSceneParam._m0[91u].y, _1882 * cbSceneParam._m0[91u].x));
    uvec4 _1905 = floatBitsToUint(cbInstanceData._m0[_793 + 5u]);
    uint _1907 = _1905.x * 14u;
    uint _1908 = _1907 + 13u;
    float _1915 = _833 + (-1.0);
    float _1920 = (cbLight._m0[_1908].x * _1915) + 1.0;
    float _1921 = (cbLight._m0[_1908].y * _1915) + 1.0;
    float _1922 = (cbLight._m0[_1908].z * _1915) + 1.0;
    float _1923 = (cbLight._m0[_1908].w * _1915) + 1.0;
    uint _1924 = _1907 + 5u;
    float _1930 = isnan(1.0) ? _1921 : (isnan(_1921) ? 1.0 : min(_1921, 1.0));
    uint _1934 = _1907 + 4u;
    float _1940 = isnan(1.0) ? _1920 : (isnan(_1920) ? 1.0 : min(_1920, 1.0));
    uint _1944 = _1907 | 1u;
    float _1955 = dot(vec3(cbLight._m0[_1907].xyz), vec3(_655, _656, _657));
    float _1958 = dot(vec3(cbLight._m0[_1944].xyz), vec3(_655, _656, _657));
    float _4236 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _4247 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _1963 = (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * 0.3183098733425140380859375;
    float _1965 = (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * 0.3183098733425140380859375;
    float _1972 = ((cbLight._m0[_1924].x * _1930) * _1965) + ((cbLight._m0[_1934].x * _1940) * _1963);
    float _1973 = ((_1930 * cbLight._m0[_1924].y) * _1965) + ((_1940 * cbLight._m0[_1934].y) * _1963);
    float _1974 = ((_1930 * cbLight._m0[_1924].z) * _1965) + ((_1940 * cbLight._m0[_1934].z) * _1963);
    uvec4 _1978 = floatBitsToUint(cbLight._m0[_1907 + 12u]);
    bool _1980 = _1978.x == 0u;
    float _1991;
    float _1993;
    float _1995;
    if (_1980)
    {
        _1991 = _1972;
        _1993 = _1973;
        _1995 = _1974;
    }
    else
    {
        uint _1999 = _1907 + 6u;
        float _2015 = (dot(vec3(cbLight._m0[_1907 + 2u].xyz), vec3(_655, _656, _657)) * 0.5) + 0.5;
        float _2016 = _2015 * _2015;
        float _4258 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
        float _2017 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _2018 = isnan(1.0) ? _1922 : (isnan(_1922) ? 1.0 : min(_1922, 1.0));
        _1991 = (((cbLight._m0[_1999].x * 0.3183098733425140380859375) * _2017) * _2018) + _1972;
        _1993 = (((cbLight._m0[_1999].y * 0.3183098733425140380859375) * _2017) * _2018) + _1973;
        _1995 = (((cbLight._m0[_1999].z * 0.3183098733425140380859375) * _2017) * _2018) + _1974;
    }
    bool _1998 = _1978.y == 0u;
    float _2036;
    float _2038;
    float _2040;
    if (_1998)
    {
        _2036 = _1991;
        _2038 = _1993;
        _2040 = _1995;
    }
    else
    {
        uint _2206 = _1907 + 7u;
        float _2222 = (dot(vec3(cbLight._m0[_1907 + 3u].xyz), vec3(_655, _656, _657)) * 0.5) + 0.5;
        float _2223 = _2222 * _2222;
        float _4274 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2224 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _2225 = isnan(1.0) ? _1923 : (isnan(_1923) ? 1.0 : min(_1923, 1.0));
        _2036 = (((cbLight._m0[_2206].x * 0.3183098733425140380859375) * _2224) * _2225) + _1991;
        _2038 = (((cbLight._m0[_2206].y * 0.3183098733425140380859375) * _2224) * _2225) + _1993;
        _2040 = (((cbLight._m0[_2206].z * 0.3183098733425140380859375) * _2224) * _2225) + _1995;
    }
    uint _2043 = _1907 + 8u;
    float _2056 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1907].w)) * _658) * 0.949999988079071044921875);
    float _2057 = _2056 * _2056;
    float _2058 = cbLight._m0[_1907].x + _735;
    float _2059 = cbLight._m0[_1907].y + _736;
    float _2060 = cbLight._m0[_1907].z + _737;
    float _2064 = inversesqrt(dot(vec3(_2058, _2059, _2060), vec3(_2058, _2059, _2060)));
    float _2065 = _2064 * _2058;
    float _2066 = _2064 * _2059;
    float _2067 = _2064 * _2060;
    float _2068 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_1907].xyz));
    float _4290 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2071 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
    float _4301 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _2072 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
    float _2073 = dot(vec3(_655, _656, _657), vec3(_2065, _2066, _2067));
    float _4312 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2076 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
    float _2077 = dot(vec3(cbLight._m0[_1907].xyz), vec3(_2065, _2066, _2067));
    float _4323 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2081 = _2057 * _2057;
    float _2085 = ((_2076 * _2076) * (_2081 + (-1.0))) + 1.0;
    float _2093 = exp2(log2(1.0 - (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0)))) * 5.0);
    float _2094 = 0.959999978542327880859375 - _815;
    float _2096 = 0.959999978542327880859375 - _816;
    float _2097 = 0.959999978542327880859375 - _817;
    float _2104 = 1.0 - _2057;
    float _2115 = (0.5 / (((_2072 * ((_2071 * _2104) + _2057)) + 9.9999999392252902907785028219223e-09) + (((_2072 * _2104) + _2057) * _2071))) * _2071;
    float _4334 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2117 = (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_2081 / ((_2085 * _2085) * 3.141590118408203125));
    uint _2128 = _1907 + 9u;
    float _2139 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1944].w)) * _658) * 0.949999988079071044921875);
    float _2140 = _2139 * _2139;
    float _2141 = cbLight._m0[_1944].x + _735;
    float _2142 = cbLight._m0[_1944].y + _736;
    float _2143 = cbLight._m0[_1944].z + _737;
    float _2147 = inversesqrt(dot(vec3(_2141, _2142, _2143), vec3(_2141, _2142, _2143)));
    float _2148 = _2147 * _2141;
    float _2149 = _2147 * _2142;
    float _2150 = _2147 * _2143;
    float _2151 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_1944].xyz));
    float _4345 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _2154 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
    float _2155 = dot(vec3(_655, _656, _657), vec3(_2148, _2149, _2150));
    float _4356 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2158 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
    float _2159 = dot(vec3(cbLight._m0[_1944].xyz), vec3(_2148, _2149, _2150));
    float _4367 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _2163 = _2140 * _2140;
    float _2167 = ((_2158 * _2158) * (_2163 + (-1.0))) + 1.0;
    float _2174 = exp2(log2(1.0 - (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0)))) * 5.0);
    float _2181 = 1.0 - _2140;
    float _2191 = (0.5 / (((_2072 * ((_2154 * _2181) + _2140)) + 9.9999999392252902907785028219223e-09) + (((_2072 * _2181) + _2140) * _2154))) * _2154;
    float _4378 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2193 = (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_2163 / ((_2167 * _2167) * 3.141590118408203125));
    float _2203 = (((((_2174 * _2094) + _818) * cbLight._m0[_2128].x) * _2193) * _1930) + (((((_2093 * _2094) + _818) * cbLight._m0[_2043].x) * _2117) * _1940);
    float _2204 = (((((_2174 * _2096) + _820) * cbLight._m0[_2128].y) * _2193) * _1930) + (((((_2093 * _2096) + _820) * cbLight._m0[_2043].y) * _2117) * _1940);
    float _2205 = (((((_2174 * _2097) + _821) * cbLight._m0[_2128].z) * _2193) * _1930) + (((((_2093 * _2097) + _821) * cbLight._m0[_2043].z) * _2117) * _1940);
    float _2267;
    float _2269;
    float _2271;
    if (_1980)
    {
        _2267 = _2203;
        _2269 = _2204;
        _2271 = _2205;
    }
    else
    {
        uint _2273 = _1907 + 2u;
        uint _2277 = _1907 + 10u;
        float _2291 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2273].w)) * _658) * 0.949999988079071044921875);
        float _2292 = _2291 * _2291;
        float _2293 = cbLight._m0[_2273].x + _735;
        float _2294 = cbLight._m0[_2273].y + _736;
        float _2295 = cbLight._m0[_2273].z + _737;
        float _2299 = inversesqrt(dot(vec3(_2293, _2294, _2295), vec3(_2293, _2294, _2295)));
        float _2300 = _2299 * _2293;
        float _2301 = _2299 * _2294;
        float _2302 = _2299 * _2295;
        float _2303 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_2273].xyz));
        float _4389 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2306 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _2307 = dot(vec3(_655, _656, _657), vec3(_2300, _2301, _2302));
        float _4400 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        float _2310 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _2311 = dot(vec3(cbLight._m0[_2273].xyz), vec3(_2300, _2301, _2302));
        float _4411 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2315 = _2292 * _2292;
        float _2319 = ((_2310 * _2310) * (_2315 + (-1.0))) + 1.0;
        float _2326 = exp2(log2(1.0 - (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0)))) * 5.0);
        float _2333 = 1.0 - _2292;
        float _2343 = (0.5 / (((_2072 * ((_2306 * _2333) + _2292)) + 9.9999999392252902907785028219223e-09) + (((_2072 * _2333) + _2292) * _2306))) * _2306;
        float _4422 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2345 = (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_2315 / ((_2319 * _2319) * 3.141590118408203125));
        float _2346 = isnan(1.0) ? _1922 : (isnan(_1922) ? 1.0 : min(_1922, 1.0));
        _2267 = (((((_2326 * _2094) + _818) * cbLight._m0[_2277].x) * _2345) * _2346) + _2203;
        _2269 = (((((_2326 * _2096) + _820) * cbLight._m0[_2277].y) * _2345) * _2346) + _2204;
        _2271 = (((((_2326 * _2097) + _821) * cbLight._m0[_2277].z) * _2345) * _2346) + _2205;
    }
    float _2381;
    float _2383;
    float _2385;
    if (_1998)
    {
        _2381 = _2267;
        _2383 = _2269;
        _2385 = _2271;
    }
    else
    {
        uint _2392 = _1907 + 3u;
        uint _2396 = _1907 + 11u;
        float _2410 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2392].w)) * _658) * 0.949999988079071044921875);
        float _2411 = _2410 * _2410;
        float _2412 = cbLight._m0[_2392].x + _735;
        float _2413 = cbLight._m0[_2392].y + _736;
        float _2414 = cbLight._m0[_2392].z + _737;
        float _2418 = inversesqrt(dot(vec3(_2412, _2413, _2414), vec3(_2412, _2413, _2414)));
        float _2419 = _2418 * _2412;
        float _2420 = _2418 * _2413;
        float _2421 = _2418 * _2414;
        float _2422 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_2392].xyz));
        float _4438 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2425 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _2426 = dot(vec3(_655, _656, _657), vec3(_2419, _2420, _2421));
        float _4449 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2429 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _2430 = dot(vec3(cbLight._m0[_2392].xyz), vec3(_2419, _2420, _2421));
        float _4460 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2434 = _2411 * _2411;
        float _2438 = ((_2429 * _2429) * (_2434 + (-1.0))) + 1.0;
        float _2445 = exp2(log2(1.0 - (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)))) * 5.0);
        float _2452 = 1.0 - _2411;
        float _2462 = (0.5 / (((_2072 * ((_2425 * _2452) + _2411)) + 9.9999999392252902907785028219223e-09) + (((_2072 * _2452) + _2411) * _2425))) * _2425;
        float _4471 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2464 = (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_2434 / ((_2438 * _2438) * 3.141590118408203125));
        float _2465 = isnan(1.0) ? _1923 : (isnan(_1923) ? 1.0 : min(_1923, 1.0));
        _2381 = (((((_2445 * _2094) + _818) * cbLight._m0[_2396].x) * _2464) * _2465) + _2267;
        _2383 = (((((_2445 * _2096) + _820) * cbLight._m0[_2396].y) * _2464) * _2465) + _2269;
        _2385 = (((((_2445 * _2097) + _821) * cbLight._m0[_2396].z) * _2464) * _2465) + _2271;
    }
    float _2600;
    float _2602;
    float _2604;
    float _2606;
    float _2608;
    float _2610;
    if (_1905.y == 0u)
    {
        float _2540 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2541 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2540;
        float _2542 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2540;
        float _2543 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2540;
        uvec4 _2555 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2556 = _2555.x;
        uint _2567 = uint((float(_2555.y) * floor(float(uint(cbSceneParam._m0[85u].y * _756) / _2556))) + floor(float(uint(cbSceneParam._m0[85u].x * _755) / _2556)));
        float _2577 = (log2(_2543 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2578 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
        uint _2581 = uint(isnan(14.0) ? _2578 : (isnan(_2578) ? 14.0 : min(_2578, 14.0)));
        uvec4 _2586 = texelFetch(g_lightClusterGridBuffer, int(((_2581 << 2u) + (_2567 << 6u)) >> 2u));
        uint _2587 = _2586.x;
        uint _2588 = _2555.z;
        float _2717;
        float _2719;
        float _2721;
        float _2723;
        float _2725;
        float _2727;
        if (((((1u << ((_2588 >> 4u) & 15u)) + 4294967295u) & _2587) == 0u) || ((_2588 & 240u) == 0u))
        {
            _2717 = 0.0;
            _2719 = 0.0;
            _2721 = 0.0;
            _2723 = 0.0;
            _2725 = 0.0;
            _2727 = 0.0;
        }
        else
        {
            float _2718;
            float _2720;
            float _2722;
            float _2724;
            float _2726;
            float _2728;
            float _2879 = 0.0;
            float _2880 = 0.0;
            float _2881 = 0.0;
            float _2882 = 0.0;
            float _2883 = 0.0;
            float _2884 = 0.0;
            uint _2885 = 0u;
            uint _2894;
            bool _2895;
            for (;;)
            {
                _2894 = texelFetch(g_lightClassification, int((((_2581 << 5u) + (_2567 << 9u)) + (_2885 << 2u)) >> 2u)).x;
                _2895 = _2894 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2895)
                {
                    frontier_phi_66_pred = _2879;
                    frontier_phi_66_pred_1 = _2884;
                    frontier_phi_66_pred_2 = _2883;
                    frontier_phi_66_pred_3 = _2882;
                    frontier_phi_66_pred_4 = _2881;
                    frontier_phi_66_pred_5 = _2880;
                }
                else
                {
                    float _3024;
                    float _3025;
                    float _3026;
                    float _3027;
                    float _3028;
                    float _3029;
                    uint _3030;
                    _3024 = _2879;
                    _3025 = _2880;
                    _3026 = _2881;
                    _3027 = _2882;
                    _3028 = _2883;
                    _3029 = _2884;
                    _3030 = _2894;
                    float _2951;
                    float _2952;
                    float _2953;
                    float _2954;
                    float _2955;
                    float _2956;
                    for (;;)
                    {
                        uint _3034 = uint(findLSB(_3030)) + (_2885 << 5u);
                        uint _3031 = (_3030 + 4294967295u) & _3030;
                        uint _3036 = _3034 * 48u;
                        vec4 _3050 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3036)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 3u)).x));
                        uint _3056 = (_3034 * 48u) + 4u;
                        vec4 _3069 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3056)).x, texelFetch(g_PointLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3056 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3056 + 3u)).x));
                        uint _3075 = (_3034 * 48u) + 8u;
                        vec3 _3086 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3075)).x, texelFetch(g_PointLightRenderingBuffer, int(_3075 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3075 + 2u)).x));
                        float _3090 = _3050.x - _2541;
                        float _3091 = _3050.y - _2542;
                        float _3092 = _3050.z - _2543;
                        float _3093 = dot(vec3(_3090, _3091, _3092), vec3(_3090, _3091, _3092));
                        float _3096 = inversesqrt(_3093);
                        float _3097 = _3096 * _3090;
                        float _3098 = _3096 * _3091;
                        float _3099 = _3096 * _3092;
                        float _3100 = dot(vec3(_774, _777, _780), vec3(_3097, _3098, _3099));
                        float _3105 = 1.0 - (_3093 * _3050.w);
                        float _4497 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                        float _3106 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                        float _3107 = sqrt(_3093) * _3069.w;
                        float _3110 = 1.39999997615814208984375 / (_3107 + 1.39999997615814208984375);
                        float _3111 = _3110 * _3110;
                        float _3114 = ((1.0 - _3111) * _3100) + _3111;
                        float _3117 = _3107 * _3107;
                        float _3121 = ((isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0))) * _3106) / ((_3117 * 0.699999988079071044921875) + 1.0);
                        float _3125 = (-0.0) - _2541;
                        float _3126 = (-0.0) - _2542;
                        float _3127 = (-0.0) - _2543;
                        float _3131 = inversesqrt(dot(vec3(_3125, _3126, _3127), vec3(_3125, _3126, _3127)));
                        float _3132 = _3131 * _3125;
                        float _3133 = _3131 * _3126;
                        float _3134 = _3131 * _3127;
                        float _3142 = exp2(log2(1.0 / ((_3117 * 3.5) + 5.0)) * 0.25);
                        float _3143 = 1.0 - _849;
                        float _3150 = sqrt(1.0 - ((1.0 - (_3143 * _3143)) * (1.0 - (_3142 * _3142))));
                        float _3151 = _3150 * _3150;
                        float _3152 = _3151 * _3151;
                        float _3153 = _3132 + _3097;
                        float _3154 = _3133 + _3098;
                        float _3155 = _3134 + _3099;
                        float _3159 = inversesqrt(dot(vec3(_3153, _3154, _3155), vec3(_3153, _3154, _3155)));
                        float _3163 = dot(vec3(_774, _777, _780), vec3(_3132, _3133, _3134));
                        float _4513 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                        float _3166 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                        float _3167 = dot(vec3(_774, _777, _780), vec3(_3159 * _3153, _3159 * _3154, _3159 * _3155));
                        float _4524 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                        float _3170 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                        float _3174 = ((_3170 * _3170) * (_3152 + (-1.0))) + 1.0;
                        float _3175 = _3110 * _3151;
                        float _3176 = _3175 * _3175;
                        float _3179 = ((1.0 - _3176) * _3100) + _3176;
                        float _4535 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                        float _3180 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                        float _3181 = 1.0 - _3151;
                        float _3191 = (0.5 / (((_3180 * ((_3166 * _3181) + _3151)) + 9.9999999392252902907785028219223e-09) + (((_3180 * _3181) + _3151) * _3166))) * _3180;
                        float _4546 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                        float _3202 = (((_3152 * 3.1415927410125732421875) * (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0)))) / ((_3174 * _3174) * ((_3117 * 2.1991131305694580078125) + 3.141590118408203125))) * _3106;
                        _2954 = (_3121 * _3069.x) + _3027;
                        _2955 = (_3121 * _3069.y) + _3028;
                        _2956 = (_3121 * _3069.z) + _3029;
                        _2951 = (_3202 * _3086.x) + _3024;
                        _2952 = (_3202 * _3086.y) + _3025;
                        _2953 = (_3202 * _3086.z) + _3026;
                        if (_3031 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3024 = _2951;
                            _3025 = _2952;
                            _3026 = _2953;
                            _3027 = _2954;
                            _3028 = _2955;
                            _3029 = _2956;
                            _3030 = _3031;
                        }
                    }
                    frontier_phi_66_pred = _2951;
                    frontier_phi_66_pred_1 = _2956;
                    frontier_phi_66_pred_2 = _2955;
                    frontier_phi_66_pred_3 = _2954;
                    frontier_phi_66_pred_4 = _2953;
                    frontier_phi_66_pred_5 = _2952;
                }
                _2718 = frontier_phi_66_pred;
                _2728 = frontier_phi_66_pred_1;
                _2726 = frontier_phi_66_pred_2;
                _2724 = frontier_phi_66_pred_3;
                _2722 = frontier_phi_66_pred_4;
                _2720 = frontier_phi_66_pred_5;
                uint _2886 = _2885 + 1u;
                if (_2886 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2879 = _2718;
                    _2880 = _2720;
                    _2881 = _2722;
                    _2882 = _2724;
                    _2883 = _2726;
                    _2884 = _2728;
                    _2885 = _2886;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2717 = _2718;
            _2719 = _2720;
            _2721 = _2722;
            _2723 = _2724;
            _2725 = _2726;
            _2727 = _2728;
        }
        uvec4 _2731 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2732 = _2731.z;
        uint _2734 = (_2732 >> 8u) & 15u;
        float _2847;
        float _2849;
        float _2851;
        float _2853;
        float _2855;
        float _2857;
        if (((4294967295u << _2734) & _2587) == 0u)
        {
            _2847 = _2717;
            _2849 = _2719;
            _2851 = _2721;
            _2853 = _2723;
            _2855 = _2725;
            _2857 = _2727;
        }
        else
        {
            float _2872 = inversesqrt(dot(vec3(_2541, _2542, _2543), vec3(_2541, _2542, _2543)));
            float _2873 = _2872 * _2541;
            float _2874 = _2872 * _2542;
            float _2875 = _2872 * _2543;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2734 < ((_2732 >> 12u) & 15u))
            {
                float _2848;
                float _2850;
                float _2852;
                float _2854;
                float _2856;
                float _2858;
                float _3007 = _2717;
                float _3008 = _2719;
                float _3009 = _2721;
                float _3010 = _2723;
                float _3011 = _2725;
                float _3012 = _2727;
                uint _3013 = _2734;
                uint _3022;
                bool _3023;
                for (;;)
                {
                    _3022 = texelFetch(g_lightClassification, int((((_2581 << 5u) + (_2567 << 9u)) + (_3013 << 2u)) >> 2u)).x;
                    _3023 = _3022 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3023)
                    {
                        frontier_phi_77_pred = _3012;
                        frontier_phi_77_pred_1 = _3011;
                        frontier_phi_77_pred_2 = _3010;
                        frontier_phi_77_pred_3 = _3009;
                        frontier_phi_77_pred_4 = _3008;
                        frontier_phi_77_pred_5 = _3007;
                    }
                    else
                    {
                        float _3216;
                        float _3217;
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _3511;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3516;
                        float _3229 = _3007;
                        float _3230 = _3008;
                        float _3231 = _3009;
                        float _3232 = _3010;
                        float _3233 = _3011;
                        float _3234 = _3012;
                        uint _3235 = _3022;
                        uint _3236;
                        vec4 _3261;
                        float _3262;
                        vec4 _3277;
                        vec3 _3289;
                        vec4 _3304;
                        vec4 _3320;
                        float _3367;
                        bool _3368;
                        for (;;)
                        {
                            uint _3246 = ((_3013 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3235));
                            _3236 = (_3235 + 4294967295u) & _3235;
                            uint _3248 = _3246 * 40u;
                            _3261 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 3u)).x));
                            _3262 = _3261.w;
                            uint _3264 = (_3246 * 40u) + 4u;
                            _3277 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 3u)).x));
                            uint _3279 = (_3246 * 40u) + 8u;
                            _3289 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x));
                            uint _3291 = (_3246 * 40u) + 16u;
                            _3304 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 3u)).x));
                            uint _3307 = (_3246 * 40u) + 20u;
                            _3320 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 3u)).x));
                            uint _3323 = (_3246 * 40u) + 24u;
                            vec4 _3336 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 3u)).x));
                            uint _3342 = (_3246 * 40u) + 28u;
                            vec4 _3355 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3342)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 3u)).x));
                            _3367 = fma(_2543, _3355.z, fma(_2542, _3355.y, _3355.x * _2541)) + _3355.w;
                            _3368 = !((fma(_2543, _3336.z, fma(_2542, _3336.y, _3336.x * _2541)) + _3336.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3368)
                            {
                                float _3395 = _3261.x - _2541;
                                float _3396 = _3261.y - _2542;
                                float _3397 = _3261.z - _2543;
                                float _3398 = dot(vec3(_3395, _3396, _3397), vec3(_3395, _3396, _3397));
                                float _3401 = inversesqrt(_3398);
                                float _3402 = _3401 * _3395;
                                float _3403 = _3401 * _3396;
                                float _3404 = _3401 * _3397;
                                float _3408 = 1.0 - (_3398 / (_3262 * _3262));
                                float _4557 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                                float _3409 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                                float _3413 = sqrt(_3398) * _3277.w;
                                float _3415 = 1.39999997615814208984375 / (_3413 + 1.39999997615814208984375);
                                float _3416 = _3415 * _3415;
                                float _3419 = ((1.0 - _3416) * dot(vec3(_3402, _3403, _3404), vec3(_774, _777, _780))) + _3416;
                                float _3422 = _3413 * _3413;
                                float _3426 = (fma(_2543, _3304.z, fma(_2542, _3304.y, _3304.x * _2541)) + _3304.w) / _3367;
                                float _3427 = (fma(_2543, _3320.z, fma(_2542, _3320.y, _3320.x * _2541)) + _3320.w) / _3367;
                                float _3431 = 1.0 - dot(vec2(_3426, _3427), vec2(_3426, _3427));
                                float _4573 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                                float _3432 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
                                float _3433 = _3432 * (((isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0))) * _3409) / ((_3422 * 0.699999988079071044921875) + 1.0));
                                float _3445 = exp2(log2(1.0 / ((_3422 * 3.5) + 5.0)) * 0.25);
                                float _3446 = 1.0 - _849;
                                float _3453 = sqrt(1.0 - ((1.0 - (_3446 * _3446)) * (1.0 - (_3445 * _3445))));
                                float _3454 = _3453 * _3453;
                                float _3455 = _3454 * _3454;
                                float _3456 = _3402 - _2873;
                                float _3457 = _3403 - _2874;
                                float _3458 = _3404 - _2875;
                                float _3462 = inversesqrt(dot(vec3(_3456, _3457, _3458), vec3(_3456, _3457, _3458)));
                                float _3466 = dot(vec3(_774, _777, _780), vec3((-0.0) - _2873, (-0.0) - _2874, (-0.0) - _2875));
                                float _4584 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                                float _3469 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
                                float _3470 = dot(vec3(_774, _777, _780), vec3(_3462 * _3456, _3462 * _3457, _3462 * _3458));
                                float _4595 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                                float _3473 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                                float _3477 = ((_3473 * _3473) * (_3455 + (-1.0))) + 1.0;
                                float _3478 = _3415 * _3454;
                                float _3479 = _3478 * _3478;
                                float _3485 = ((1.0 - _3479) * dot(vec3(_774, _777, _780), vec3(_3402, _3403, _3404))) + _3479;
                                float _4606 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                                float _3486 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                                float _3487 = 1.0 - _3454;
                                float _3497 = (0.5 / (((_3486 * ((_3469 * _3487) + _3454)) + 9.9999999392252902907785028219223e-09) + (((_3486 * _3487) + _3454) * _3469))) * _3486;
                                float _4617 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                                float _3507 = (_3432 * _3409) * (((_3455 * 3.1415927410125732421875) * (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0)))) / ((_3477 * _3477) * ((_3422 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3433 * _3277.y;
                                frontier_phi_83_pred_1 = _3433 * _3277.x;
                                frontier_phi_83_pred_2 = _3507 * _3289.z;
                                frontier_phi_83_pred_3 = _3507 * _3289.y;
                                frontier_phi_83_pred_4 = _3507 * _3289.x;
                                frontier_phi_83_pred_5 = _3433 * _3277.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3515 = frontier_phi_83_pred;
                            _3514 = frontier_phi_83_pred_1;
                            _3513 = frontier_phi_83_pred_2;
                            _3512 = frontier_phi_83_pred_3;
                            _3511 = frontier_phi_83_pred_4;
                            _3516 = frontier_phi_83_pred_5;
                            _3219 = _3514 + _3232;
                            _3220 = _3515 + _3233;
                            _3221 = _3516 + _3234;
                            _3216 = _3511 + _3229;
                            _3217 = _3512 + _3230;
                            _3218 = _3513 + _3231;
                            if (_3236 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3229 = _3216;
                                _3230 = _3217;
                                _3231 = _3218;
                                _3232 = _3219;
                                _3233 = _3220;
                                _3234 = _3221;
                                _3235 = _3236;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3221;
                        frontier_phi_77_pred_1 = _3220;
                        frontier_phi_77_pred_2 = _3219;
                        frontier_phi_77_pred_3 = _3218;
                        frontier_phi_77_pred_4 = _3217;
                        frontier_phi_77_pred_5 = _3216;
                    }
                    _2858 = frontier_phi_77_pred;
                    _2856 = frontier_phi_77_pred_1;
                    _2854 = frontier_phi_77_pred_2;
                    _2852 = frontier_phi_77_pred_3;
                    _2850 = frontier_phi_77_pred_4;
                    _2848 = frontier_phi_77_pred_5;
                    uint _3014 = _3013 + 1u;
                    if (_3014 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3007 = _2848;
                        _3008 = _2850;
                        _3009 = _2852;
                        _3010 = _2854;
                        _3011 = _2856;
                        _3012 = _2858;
                        _3013 = _3014;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2852;
                frontier_phi_58_59_ladder_1 = _2858;
                frontier_phi_58_59_ladder_2 = _2856;
                frontier_phi_58_59_ladder_3 = _2854;
                frontier_phi_58_59_ladder_4 = _2850;
                frontier_phi_58_59_ladder_5 = _2848;
            }
            else
            {
                frontier_phi_58_59_ladder = _2721;
                frontier_phi_58_59_ladder_1 = _2727;
                frontier_phi_58_59_ladder_2 = _2725;
                frontier_phi_58_59_ladder_3 = _2723;
                frontier_phi_58_59_ladder_4 = _2719;
                frontier_phi_58_59_ladder_5 = _2717;
            }
            _2847 = frontier_phi_58_59_ladder_5;
            _2849 = frontier_phi_58_59_ladder_4;
            _2851 = frontier_phi_58_59_ladder;
            _2853 = frontier_phi_58_59_ladder_3;
            _2855 = frontier_phi_58_59_ladder_2;
            _2857 = frontier_phi_58_59_ladder_1;
        }
        float _2862 = isnan(1.0) ? _833 : (isnan(_833) ? 1.0 : min(_833, 1.0));
        _2600 = (_2862 * _2853) + _2036;
        _2602 = (_2862 * _2855) + _2038;
        _2604 = (_2862 * _2857) + _2040;
        _2606 = ((_2847 * _818) * _2862) + _2381;
        _2608 = ((_2849 * _820) * _2862) + _2383;
        _2610 = ((_2851 * _821) * _2862) + _2385;
    }
    else
    {
        _2600 = _2036;
        _2602 = _2038;
        _2604 = _2040;
        _2606 = _2381;
        _2608 = _2383;
        _2610 = _2385;
    }
    uint _2616 = _794 + uint(cbMatDynParam._m0[0u].w);
    float _2622 = cbInstanceData._m0[_2616].x * (_565 - (_581 * _565));
    float _2623 = cbInstanceData._m0[_2616].y * (_566 - (_581 * _566));
    float _2624 = cbInstanceData._m0[_2616].z * (_567 - (_581 * _567));
    float _4633 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _4644 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _4655 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _2641 = (((isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (_2600 + ((isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))) * _833))) + ((_2606 + ((isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))) * _1674)) * cbPerFrame._m0[3u].x)) + _2622;
    float _2643 = (_2623 + ((_2608 + ((isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))) * _1674)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (_2602 + ((isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0))) * _833)));
    float _2645 = (_2624 + ((_2610 + ((isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))) * _1674)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0))) * (_2604 + ((isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))) * _833)));
    float _2646 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
    float _2647 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
    float _2648 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
    float _2654 = cbMtdParam._m0[2u].x * _2622;
    float _2655 = cbMtdParam._m0[2u].y * _2623;
    float _2656 = cbMtdParam._m0[2u].z * _2624;
    float _4681 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2658 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
    uint _2659 = _793 + 6u;
    float _2667 = _755 / cbSceneParam._m0[86u].x;
    float _2668 = _756 / cbSceneParam._m0[86u].y;
    vec4 _2682 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2667, _2668, (log2((isnan(cbSceneParam._m0[77u].w) ? _678 : (isnan(_678) ? cbSceneParam._m0[77u].w : min(_678, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2684 = _2682.x;
    float _2685 = _2682.y;
    float _2686 = _2682.z;
    float _2687 = _2682.w;
    float _2780;
    float _2782;
    float _2784;
    float _2786;
    if (_678 > cbSceneParam._m0[78u].w)
    {
        float _2742 = isnan(_678) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _678 : min(cbSceneParam._m0[80u].w, _678));
        float _2743 = _2742 / _678;
        float _2754 = _2743 * _728;
        float _2755 = _729 * _2743;
        float _2756 = (-0.0) - _2755;
        float _2758 = _2743 * _730;
        float _2760 = (cbSceneParam._m0[77u].w * _2756) / _2742;
        float _2761 = _2760 + cbSceneParam._m0[79u].w;
        float _2762 = cbSceneParam._m0[79u].w - _2755;
        float _2768 = sqrt(((_2754 * _2754) + (_2755 * _2755)) + (_2758 * _2758));
        float _2771 = (1.0 - (cbSceneParam._m0[77u].w / _2742)) * _2768;
        float _2776 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2778 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2964;
        if (abs((_2756 - _2760) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2964 = ((((_2761 > 0.0) ? exp2(_2776 * _2761) : (2.0 - exp2(_2778 * _2761))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2771;
        }
        else
        {
            float _2908 = 1.0 / cbSceneParam._m0[80u].x;
            float _2909 = isnan(_2762) ? _2761 : (isnan(_2761) ? _2762 : max(_2761, _2762));
            float _2910 = isnan(_2762) ? _2761 : (isnan(_2761) ? _2762 : min(_2761, _2762));
            float _2919 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : min(_2909, 0.0));
            float _2920 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : min(_2910, 0.0));
            _2964 = ((abs(_2768 / _2756) * cbSceneParam._m0[80u].y) * ((((_2919 - _2920) * 2.0) - ((exp2(_2776 * (isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0)))) - exp2(_2776 * (isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0))))) * _2908)) - ((exp2(_2778 * _2919) - exp2(_2778 * _2920)) * _2908))) + (_2771 * cbSceneParam._m0[80u].z);
        }
        vec4 _2966 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2667, _2668, 1.0), 0.0);
        float _2975 = exp2((_2964 * (-1.44269502162933349609375)) * (1.0 - _2966.w));
        float _2976 = log2(_2975);
        float _2992 = log2(_2687);
        _2780 = (exp2(_2992 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2976 * cbSceneParam._m0[78u].x)) * _2966.x) / cbSceneParam._m0[78u].x)) + _2684;
        _2782 = (exp2(_2992 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2976 * cbSceneParam._m0[78u].y)) * _2966.y) / cbSceneParam._m0[78u].y)) + _2685;
        _2784 = (exp2(_2992 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2976 * cbSceneParam._m0[78u].z)) * _2966.z) / cbSceneParam._m0[78u].z)) + _2686;
        _2786 = _2975 * _2687;
    }
    else
    {
        _2780 = _2684;
        _2782 = _2685;
        _2784 = _2686;
        _2786 = _2687;
    }
    bool _3002;
    vec4 _2796;
    vec4 _2818;
    float _2820;
    float _2824;
    float _2825;
    float _2826;
    float _2829;
    float _2832;
    float _2835;
    float _2836;
    bool _2846;
    for (;;)
    {
        _2796 = cbMatDynParam._m0[0u];
        float _2798 = roundEven(_2796.y);
        bool _2799 = _2798 == 3.0;
        float _2800 = log2(_2786);
        float _2804 = exp2(_2800 * cbSceneParam._m0[78u].x);
        float _2805 = exp2(_2800 * cbSceneParam._m0[78u].y);
        float _2806 = exp2(_2800 * cbSceneParam._m0[78u].z);
        float _2807 = _2804 * _2646;
        float _2808 = _2805 * _2647;
        float _2809 = _2806 * _2648;
        float _2816 = _744 + (-0.5);
        _2818 = cbMtdParam._m0[1u];
        _2820 = _2818.y * _2816;
        float _2823 = (_2798 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2824 = _2823 * (_2799 ? _2807 : (_2807 + (cbSceneParam._m0[72u].w * _2780)));
        _2825 = _2823 * (_2799 ? _2808 : (_2808 + (cbSceneParam._m0[72u].w * _2782)));
        _2826 = _2823 * (_2799 ? _2809 : (_2809 + (cbSceneParam._m0[72u].w * _2784)));
        _2829 = ((_2654 * _2658) * _2804) * _2823;
        _2832 = ((_2655 * _2658) * _2805) * _2823;
        _2835 = ((_2656 * _2658) * _2806) * _2823;
        _2836 = _2816 * 0.999000012874603271484375;
        _2846 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2846)
        {
            if ((cbInstanceData._m0[_793 + 7u].x + _2836) < 0.5)
            {
                _3002 = true;
                break;
            }
        }
        uint _2943 = _794 + uint(_2796.w);
        if ((cbInstanceData._m0[_2943].w < 1.0) && ((cbInstanceData._m0[_2943].w + _2836) < 0.5))
        {
            _3002 = true;
            break;
        }
        if ((_2820 + 1.0) < _2818.x)
        {
            _3002 = true;
            break;
        }
        _3002 = false;
        break;
    }
    float _3207;
    if (_3002)
    {
        discard_state = true;
        _3207 = 0.0;
    }
    else
    {
        _3207 = cbInstanceData._m0[_2659].w;
    }
    SV_Target.x = _2824;
    SV_Target.y = _2825;
    SV_Target.z = _2826;
    SV_Target.w = _3207;
    SV_Target_1.x = _2829;
    SV_Target_1.y = _2832;
    SV_Target_1.z = _2835;
    SV_Target_1.w = cbInstanceData._m0[_2659].w;
    discard_exit();
}


