#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _970;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _191 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _192 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _193 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_191, _192, _193), vec3(_191, _192, _193)));
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _235 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _241 = _235.x * cbMtdParam._m0[9u].x;
    float _242 = _235.y * cbMtdParam._m0[9u].y;
    float _243 = _235.z * cbMtdParam._m0[9u].z;
    vec4 _263 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _284 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_263.x + 0.00999999977648258209228515625));
    float _286 = _284 * (cbMtdParam._m0[15u].x + 1.0);
    float _3324 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _287 = isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0));
    float _295 = ((((cbMtdParam._m0[12u].x - _241) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _287) + _241;
    float _296 = ((((cbMtdParam._m0[12u].y - _242) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _287) + _242;
    float _297 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _243)) * _287) + _243;
    vec4 _309 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _313 = _309.z;
    float _317 = (_309.x * 2.0) + (-1.0);
    float _319 = (_309.y * 2.0) + (-1.0);
    float _320 = dot(vec2(_317, _319), vec2(_317, _319));
    float _3335 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _325 = sqrt(1.0 - (isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0))));
    float _328 = _284 * (cbMtdParam._m0[14u].w + 1.0);
    float _3346 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _332 = ((cbMtdParam._m0[14u].y - _313) * (isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0)))) + _313;
    vec4 _360 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _375 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _404 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _410 = (_404.x * 2.0) + (-1.0);
    float _411 = (_404.y * 2.0) + (-1.0);
    float _412 = dot(vec2(_410, _411), vec2(_410, _411));
    float _3357 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _428 = (_287 * (((cbMtdParam._m0[13u].z * _317) - _317) + _410)) + _317;
    float _429 = (_287 * (((cbMtdParam._m0[13u].z * _319) - _319) + _411)) + _319;
    float _430 = (_287 * (sqrt(1.0 - (isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0)))) - _325)) + _325;
    float _433 = fma(_430, _206 * NORMAL.x, fma(_429, _213 * TANGENT.x, (_199 * _191) * _428));
    float _436 = fma(_430, _206 * NORMAL.y, fma(_429, _213 * TANGENT.y, (_199 * _192) * _428));
    float _439 = fma(_430, _206 * NORMAL.z, fma(_429, _213 * TANGENT.z, (_199 * _193) * _428));
    float _443 = inversesqrt(dot(vec3(_433, _436, _439), vec3(_433, _436, _439)));
    float _444 = _443 * _433;
    float _445 = _443 * _436;
    float _446 = _443 * _439;
    float _3368 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _447 = isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0));
    float _3379 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _3390 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _3401 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _466 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _507 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _517 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _507);
    float _518 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _507);
    float _519 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _507);
    float _523 = inversesqrt(dot(vec3(_517, _518, _519), vec3(_517, _518, _519)));
    float _524 = _517 * _523;
    float _525 = _518 * _523;
    float _526 = _519 * _523;
    float _532 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _533 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _554 = fma(_446, cbSceneParam._m0[5u].z, fma(_445, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _444));
    float _557 = fma(_446, cbSceneParam._m0[6u].z, fma(_445, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _444));
    float _560 = fma(_446, cbSceneParam._m0[7u].z, fma(_445, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _444));
    uint _573 = uint(roundEven(NORMAL.w)) * 13u;
    uint _574 = _573 + 9u;
    uint _575 = _574 + uint(cbMatDynParam._m0[0u].w);
    float _581 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0)))) * cbInstanceData._m0[_575].x;
    float _582 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0)))) * cbInstanceData._m0[_575].y;
    float _583 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0)))) * cbInstanceData._m0[_575].z;
    float _3412 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _584 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
    float _3423 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _585 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
    float _3434 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _586 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
    vec4 _595 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _532, cbSceneParam._m0[86u].y * _533));
    float _598 = _595.x * TEXCOORD_3.w;
    float _599 = dot(vec3(_444, _445, _446), vec3(_524, _525, _526));
    float _602 = _599 * 2.0;
    float _606 = (_602 * _444) - _524;
    float _607 = (_602 * _445) - _525;
    float _608 = (_602 * _446) - _526;
    float _612 = abs(dot(vec3(_524, _525, _526), vec3(_444, _445, _446)));
    float _3445 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _614 = sqrt(_447);
    float _627 = exp2((_614 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_614 * 3.0));
    float _659 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _663 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _667 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _969;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _694 = fma(_667, cbModelParam._m0[26u].z, fma(_663, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _659));
        float _698 = fma(_667, cbModelParam._m0[27u].z, fma(_663, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _659));
        float _702 = fma(_667, cbModelParam._m0[28u].z, fma(_663, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _659));
        float _727 = _659 + _444;
        float _728 = _663 + _445;
        float _729 = _667 + _446;
        float _739 = fma(_729, cbModelParam._m0[26u].z, fma(_728, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _727)) - _694;
        float _740 = fma(_729, cbModelParam._m0[27u].z, fma(_728, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _727)) - _698;
        float _741 = fma(_729, cbModelParam._m0[28u].z, fma(_728, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _727)) - _702;
        float _745 = inversesqrt(dot(vec3(_739, _740, _741), vec3(_739, _740, _741)));
        float _758 = ((_745 * _739) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_694 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _759 = ((_745 * _740) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_698 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _760 = ((_745 * _741) / cbModelParam._m0[34u].z) + ((((((_702 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _763 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_758, _759, _760), 0.0);
        vec4 _770 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_758, _759, _760), 0.0);
        vec4 _777 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_758, _759, _760), 0.0);
        vec4 _784 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_758, _759, _760), 0.0);
        float _797 = exp2((_763.w + (-0.5)) * 20.0) * 2.0;
        float _798 = _797 * (_763.x + (-0.5));
        float _799 = _797 * (_763.y + (-0.5));
        float _800 = _797 * (_763.z + (-0.5));
        float _807 = exp2((_770.w + (-0.5)) * 20.0) * 2.0;
        float _808 = _807 * (_770.x + (-0.5));
        float _809 = _807 * (_770.y + (-0.5));
        float _810 = _807 * (_770.z + (-0.5));
        float _817 = exp2((_777.w + (-0.5)) * 20.0) * 2.0;
        float _818 = _817 * (_777.x + (-0.5));
        float _819 = _817 * (_777.y + (-0.5));
        float _820 = _817 * (_777.z + (-0.5));
        float _827 = exp2((_784.w + (-0.5)) * 20.0) * 2.0;
        float _828 = _827 * (_784.x + (-0.5));
        float _829 = _827 * (_784.y + (-0.5));
        float _830 = _827 * (_784.z + (-0.5));
        float _831 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _832 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _833 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _834 = _798 * 0.5;
        float _835 = _808 * 0.5;
        float _836 = _818 * 0.5;
        float _837 = dot(vec3(_834, _835, _836), vec3(_834, _835, _836));
        float _842 = (_837 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_837);
        float _851 = (dot(vec3(_444, _445, _446), vec3(_842 * _834, _842 * _835, _842 * _836)) + 1.0) * 0.5;
        float _3471 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _861 = sqrt(((_835 * _835) + (_834 * _834)) + (_836 * _836)) / (_831 + 9.9999997473787516355514526367188e-06);
        float _3482 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _862 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
        float _863 = _862 * 2.0;
        float _867 = (1.0 - _862) / (_862 + 1.0);
        float _3493 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _868 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
        float _877 = ((((1.0 - _868) * (_863 + 2.0)) * exp2(log2(isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0))) * (_863 + 1.0))) + _868) * _831;
        float _878 = _799 * 0.5;
        float _879 = _809 * 0.5;
        float _880 = _819 * 0.5;
        float _881 = dot(vec3(_878, _879, _880), vec3(_878, _879, _880));
        float _886 = (_881 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_881);
        float _894 = (dot(vec3(_444, _445, _446), vec3(_886 * _878, _886 * _879, _886 * _880)) + 1.0) * 0.5;
        float _3504 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _903 = sqrt(((_879 * _879) + (_878 * _878)) + (_880 * _880)) / (_832 + 9.9999997473787516355514526367188e-06);
        float _3515 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _904 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _905 = _904 * 2.0;
        float _909 = (1.0 - _904) / (_904 + 1.0);
        float _3526 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
        float _919 = ((((1.0 - _910) * (_905 + 2.0)) * exp2(log2(isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0))) * (_905 + 1.0))) + _910) * _832;
        float _920 = _800 * 0.5;
        float _921 = _810 * 0.5;
        float _922 = _820 * 0.5;
        float _923 = dot(vec3(_920, _921, _922), vec3(_920, _921, _922));
        float _928 = (_923 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_923);
        float _936 = (dot(vec3(_444, _445, _446), vec3(_928 * _920, _928 * _921, _928 * _922)) + 1.0) * 0.5;
        float _3537 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _945 = sqrt(((_921 * _921) + (_920 * _920)) + (_922 * _922)) / (_833 + 9.9999997473787516355514526367188e-06);
        float _3548 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _946 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _947 = _946 * 2.0;
        float _951 = (1.0 - _946) / (_946 + 1.0);
        float _3559 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _961 = ((((1.0 - _952) * (_947 + 2.0)) * exp2(log2(isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0))) * (_947 + 1.0))) + _952) * _833;
        _969 = _800;
        _971 = _799;
        _972 = _798;
        _973 = _810;
        _974 = _809;
        _975 = _808;
        _976 = _820;
        _977 = _819;
        _978 = _818;
        _979 = _833;
        _980 = _832;
        _981 = _831;
        _982 = cbModelParam._m0[36u].z * (isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0)));
        _983 = cbModelParam._m0[36u].z * (isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0)));
        _984 = cbModelParam._m0[36u].z * (isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0)));
    }
    else
    {
        _969 = _970;
        _971 = _970;
        _972 = _970;
        _973 = _970;
        _974 = _970;
        _975 = _970;
        _976 = _970;
        _977 = _970;
        _978 = _970;
        _979 = _970;
        _980 = _970;
        _981 = _970;
        _982 = 0.0;
        _983 = 0.0;
        _984 = 0.0;
    }
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1010 = fma(_667, cbModelParam._m0[30u].z, fma(_663, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _659));
        float _1014 = fma(_667, cbModelParam._m0[31u].z, fma(_663, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _659));
        float _1018 = fma(_667, cbModelParam._m0[32u].z, fma(_663, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _659));
        float _1041 = _659 + _444;
        float _1042 = _663 + _445;
        float _1043 = _667 + _446;
        float _1053 = fma(_1043, cbModelParam._m0[30u].z, fma(_1042, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1041)) - _1010;
        float _1054 = fma(_1043, cbModelParam._m0[31u].z, fma(_1042, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1041)) - _1014;
        float _1055 = fma(_1043, cbModelParam._m0[32u].z, fma(_1042, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1041)) - _1018;
        float _1059 = inversesqrt(dot(vec3(_1053, _1054, _1055), vec3(_1053, _1054, _1055)));
        float _1072 = ((_1059 * _1053) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1010 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1073 = ((_1059 * _1054) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1014 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1074 = ((_1059 * _1055) / cbModelParam._m0[35u].z) + ((((((_1018 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        float _1109 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1076.x + (-0.5));
        float _1111 = _1109 * (_1076.y + (-0.5));
        float _1112 = _1109 * (_1076.z + (-0.5));
        float _1119 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1083.x + (-0.5));
        float _1121 = _1119 * (_1083.y + (-0.5));
        float _1122 = _1119 * (_1083.z + (-0.5));
        float _1129 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1090.x + (-0.5));
        float _1131 = _1129 * (_1090.y + (-0.5));
        float _1132 = _1129 * (_1090.z + (-0.5));
        float _1139 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1097.x + (-0.5));
        float _1141 = _1139 * (_1097.y + (-0.5));
        float _1142 = _1139 * (_1097.z + (-0.5));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = _1110 * 0.5;
        float _1147 = _1120 * 0.5;
        float _1148 = _1130 * 0.5;
        float _1149 = dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148));
        float _1154 = (_1149 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1149);
        float _1162 = (dot(vec3(_444, _445, _446), vec3(_1154 * _1146, _1154 * _1147, _1154 * _1148)) + 1.0) * 0.5;
        float _3600 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1171 = sqrt(((_1147 * _1147) + (_1146 * _1146)) + (_1148 * _1148)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _3611 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _1173 = _1172 * 2.0;
        float _1177 = (1.0 - _1172) / (_1172 + 1.0);
        float _3622 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _1187 = ((((1.0 - _1178) * (_1173 + 2.0)) * exp2(log2(isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * (_1173 + 1.0))) + _1178) * _1143;
        float _1188 = _1111 * 0.5;
        float _1189 = _1121 * 0.5;
        float _1190 = _1131 * 0.5;
        float _1191 = dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190));
        float _1196 = (_1191 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1191);
        float _1204 = (dot(vec3(_444, _445, _446), vec3(_1196 * _1188, _1196 * _1189, _1196 * _1190)) + 1.0) * 0.5;
        float _3633 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1213 = sqrt(((_1189 * _1189) + (_1188 * _1188)) + (_1190 * _1190)) / (_1144 + 9.9999997473787516355514526367188e-06);
        float _3644 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _1215 = _1214 * 2.0;
        float _1219 = (1.0 - _1214) / (_1214 + 1.0);
        float _3655 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _1229 = ((((1.0 - _1220) * (_1215 + 2.0)) * exp2(log2(isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * (_1215 + 1.0))) + _1220) * _1144;
        float _1230 = _1112 * 0.5;
        float _1231 = _1122 * 0.5;
        float _1232 = _1132 * 0.5;
        float _1233 = dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232));
        float _1238 = (_1233 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1233);
        float _1246 = (dot(vec3(_444, _445, _446), vec3(_1238 * _1230, _1238 * _1231, _1238 * _1232)) + 1.0) * 0.5;
        float _3666 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1255 = sqrt(((_1231 * _1231) + (_1230 * _1230)) + (_1232 * _1232)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _3677 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1257 = _1256 * 2.0;
        float _1261 = (1.0 - _1256) / (_1256 + 1.0);
        float _3688 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1271 = ((((1.0 - _1262) * (_1257 + 2.0)) * exp2(log2(isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * (_1257 + 1.0))) + _1262) * _1145;
        _1279 = _1112;
        _1280 = _1111;
        _1281 = _1110;
        _1282 = _1122;
        _1283 = _1121;
        _1284 = _1120;
        _1285 = _1132;
        _1286 = _1131;
        _1287 = _1130;
        _1288 = _1145;
        _1289 = _1144;
        _1290 = _1143;
        _1291 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)));
        _1292 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)));
        _1293 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)));
    }
    else
    {
        _1279 = _970;
        _1280 = _970;
        _1281 = _970;
        _1282 = _970;
        _1283 = _970;
        _1284 = _970;
        _1285 = _970;
        _1286 = _970;
        _1287 = _970;
        _1288 = _970;
        _1289 = _970;
        _1290 = _970;
        _1291 = 0.0;
        _1292 = 0.0;
        _1293 = 0.0;
    }
    float _1303 = (cbModelParam._m0[1u].x * (_1291 - _982)) + _982;
    float _1304 = (cbModelParam._m0[1u].x * (_1292 - _983)) + _983;
    float _1305 = (cbModelParam._m0[1u].x * (_1293 - _984)) + _984;
    float _1326 = fma(_1305, cbSceneParam._m0[89u].z, fma(_1304, cbSceneParam._m0[89u].y, _1303 * cbSceneParam._m0[89u].x));
    float _1329 = fma(_1305, cbSceneParam._m0[90u].z, fma(_1304, cbSceneParam._m0[90u].y, _1303 * cbSceneParam._m0[90u].x));
    float _1332 = fma(_1305, cbSceneParam._m0[91u].z, fma(_1304, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1303));
    float _1347 = _606 * 0.5;
    float _1348 = _607 * 0.5;
    float _1349 = _608 * 0.5;
    float _1350 = dot(vec4(_1347, _1348, _1349, 1.0), vec4(_1281, _1284, _1287, _1290));
    float _1353 = dot(vec4(_1347, _1348, _1349, 1.0), vec4(_1280, _1283, _1286, _1289));
    float _1356 = dot(vec4(_1347, _1348, _1349, 1.0), vec4(_1279, _1282, _1285, _1288));
    float _1390;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1363 = dot(vec4(_1347, _1348, _1349, 1.0), vec4(_969, _973, _976, _979));
        float _1367 = dot(vec4(_1347, _1348, _1349, 1.0), vec4(_971, _974, _977, _980));
        float _1371 = dot(vec4(_1347, _1348, _1349, 1.0), vec4(_972, _975, _978, _981));
        float _1378 = dot(vec4(cbModelParam._m0[39u]), vec4(_1347, _1348, _1349, 1.0));
        _1390 = dot(vec3(isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)), isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)), isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1378) ? 0.0 : (isnan(0.0) ? _1378 : max(0.0, _1378))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1390 = 1.0;
    }
    float _1401;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1392 = dot(vec4(cbModelParam._m0[40u]), vec4(_1347, _1348, _1349, 1.0));
        _1401 = dot(vec3(isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)), isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)), isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1392) ? 0.0 : (isnan(0.0) ? _1392 : max(0.0, _1392))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1401 = 1.0;
    }
    float _1405 = (_1401 * cbModelParam._m0[1u].x) + (_1390 * (1.0 - cbModelParam._m0[1u].x));
    float _1415 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _447);
    float _1416 = isnan(_1415) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1415 : min(cbModelParam._m0[25u].z, _1415));
    float _1496;
    float _1498;
    float _1500;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1463 = fma(_667, cbModelParam._m0[13u].z, fma(_663, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _659)) + cbModelParam._m0[13u].w;
        float _1467 = fma(_667, cbModelParam._m0[14u].z, fma(_663, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _659)) + cbModelParam._m0[14u].w;
        float _1471 = fma(_667, cbModelParam._m0[15u].z, fma(_663, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _659)) + cbModelParam._m0[15u].w;
        float _1474 = fma(_608, cbModelParam._m0[13u].z, fma(_607, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _606));
        float _1477 = fma(_608, cbModelParam._m0[14u].z, fma(_607, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _606));
        float _1480 = fma(_608, cbModelParam._m0[15u].z, fma(_607, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _606));
        float _1508;
        if (_1474 > 0.0)
        {
            _1508 = abs((1.0 - _1463) / _1474);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1474 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1463 + 1.0) / _1474);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1508 = frontier_phi_14_12_ladder;
        }
        float _1711;
        if (_1477 > 0.0)
        {
            _1711 = abs((1.0 - _1467) / _1477);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1477 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1467 + 1.0) / _1477);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1711 = frontier_phi_23_19_ladder;
        }
        float _1954;
        if (_1480 > 0.0)
        {
            _1954 = abs((1.0 - _1471) / _1480);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1480 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1471 + 1.0) / _1480);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1954 = frontier_phi_35_30_ladder;
        }
        float _1956 = isnan(_1711) ? _1508 : (isnan(_1508) ? _1711 : min(_1508, _1711));
        float _1957 = isnan(_1954) ? _1956 : (isnan(_1956) ? _1954 : min(_1956, _1954));
        float _1961 = (_1957 * _1474) + _1463;
        float _1962 = (_1957 * _1477) + _1467;
        float _1963 = (_1957 * _1480) + _1471;
        float _1964 = _1957 * 9.9999997473787516355514526367188e-05;
        float _1966 = (-1.0) - _1964;
        float _1968 = _1964 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1963 > _1968) || ((_1963 < _1966) || ((_1962 > _1968) || ((_1962 < _1966) || ((_1961 < _1966) || (_1961 > _1968))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2087 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1963, cbModelParam._m0[9u].z, fma(_1962, cbModelParam._m0[9u].y, _1961 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1963, cbModelParam._m0[10u].z, fma(_1962, cbModelParam._m0[10u].y, _1961 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1963, cbModelParam._m0[11u].z, fma(_1962, cbModelParam._m0[11u].y, _1961 * cbModelParam._m0[11u].x))), _1416);
            frontier_phi_13_35_ladder = _2087.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2087.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2087.x * cbModelParam._m0[1u].y;
        }
        _1496 = frontier_phi_13_35_ladder_2;
        _1498 = frontier_phi_13_35_ladder_1;
        _1500 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1484 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_606, _607, _608), _1416);
        _1496 = _1484.x * cbModelParam._m0[1u].y;
        _1498 = _1484.y * cbModelParam._m0[1u].y;
        _1500 = _1484.z * cbModelParam._m0[1u].y;
    }
    float _1504 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _447);
    float _1505 = isnan(_1504) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1504 : min(cbModelParam._m0[25u].w, _1504));
    float _1596;
    float _1598;
    float _1600;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1560 = fma(_667, cbModelParam._m0[21u].z, fma(_663, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _659)) + cbModelParam._m0[21u].w;
        float _1564 = fma(_667, cbModelParam._m0[22u].z, fma(_663, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _659)) + cbModelParam._m0[22u].w;
        float _1568 = fma(_667, cbModelParam._m0[23u].z, fma(_663, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _659)) + cbModelParam._m0[23u].w;
        float _1571 = fma(_608, cbModelParam._m0[21u].z, fma(_607, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _606));
        float _1574 = fma(_608, cbModelParam._m0[22u].z, fma(_607, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _606));
        float _1577 = fma(_608, cbModelParam._m0[23u].z, fma(_607, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _606));
        float _1716;
        if (_1571 > 0.0)
        {
            _1716 = abs((1.0 - _1560) / _1571);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1571 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1560 + 1.0) / _1571);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1716 = frontier_phi_25_21_ladder;
        }
        float _1981;
        if (_1574 > 0.0)
        {
            _1981 = abs((1.0 - _1564) / _1574);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1574 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1564 + 1.0) / _1574);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1981 = frontier_phi_37_32_ladder;
        }
        float _2186;
        if (_1577 > 0.0)
        {
            _2186 = abs((1.0 - _1568) / _1577);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1577 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1568 + 1.0) / _1577);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2186 = frontier_phi_46_43_ladder;
        }
        float _2188 = isnan(_1981) ? _1716 : (isnan(_1716) ? _1981 : min(_1716, _1981));
        float _2189 = isnan(_2186) ? _2188 : (isnan(_2188) ? _2186 : min(_2188, _2186));
        float _2193 = (_2189 * _1571) + _1560;
        float _2194 = (_2189 * _1574) + _1564;
        float _2195 = (_2189 * _1577) + _1568;
        float _2196 = _2189 * 9.9999997473787516355514526367188e-05;
        float _2197 = (-1.0) - _2196;
        float _2199 = _2196 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2195 > _2199) || ((_2195 < _2197) || ((_2194 > _2199) || ((_2194 < _2197) || ((_2193 < _2197) || (_2193 > _2199))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2429 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2195, cbModelParam._m0[17u].z, fma(_2194, cbModelParam._m0[17u].y, _2193 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2195, cbModelParam._m0[18u].z, fma(_2194, cbModelParam._m0[18u].y, _2193 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2195, cbModelParam._m0[19u].z, fma(_2194, cbModelParam._m0[19u].y, _2193 * cbModelParam._m0[19u].x))), _1505);
            frontier_phi_22_46_ladder = _2429.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2429.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2429.x * cbModelParam._m0[1u].z;
        }
        _1596 = frontier_phi_22_46_ladder_2;
        _1598 = frontier_phi_22_46_ladder_1;
        _1600 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1580 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_606, _607, _608), _1505);
        _1596 = _1580.x * cbModelParam._m0[1u].z;
        _1598 = _1580.y * cbModelParam._m0[1u].z;
        _1600 = _1580.z * cbModelParam._m0[1u].z;
    }
    float _1612 = ((((1.0 - _627) * ((_614 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_627 * _614)) * _598;
    float _1613 = _1612 * ((cbModelParam._m0[1u].w * (_1596 - _1496)) + _1496);
    float _1614 = _1612 * ((cbModelParam._m0[1u].w * (_1598 - _1498)) + _1498);
    float _1615 = _1612 * ((cbModelParam._m0[1u].w * (_1600 - _1500)) + _1500);
    float _1618 = fma(_1615, cbSceneParam._m0[89u].z, fma(_1614, cbSceneParam._m0[89u].y, _1613 * cbSceneParam._m0[89u].x));
    float _1621 = fma(_1615, cbSceneParam._m0[90u].z, fma(_1614, cbSceneParam._m0[90u].y, _1613 * cbSceneParam._m0[90u].x));
    float _1624 = fma(_1615, cbSceneParam._m0[91u].z, fma(_1614, cbSceneParam._m0[91u].y, _1613 * cbSceneParam._m0[91u].x));
    uvec4 _1634 = floatBitsToUint(cbInstanceData._m0[_573 + 5u]);
    uint _1636 = _1634.x * 14u;
    uint _1637 = _1636 + 13u;
    float _1644 = _598 + (-1.0);
    float _1649 = (cbLight._m0[_1637].x * _1644) + 1.0;
    float _1650 = (cbLight._m0[_1637].y * _1644) + 1.0;
    float _1651 = (cbLight._m0[_1637].z * _1644) + 1.0;
    float _1652 = (cbLight._m0[_1637].w * _1644) + 1.0;
    uint _1653 = _1636 + 5u;
    float _1659 = isnan(1.0) ? _1650 : (isnan(_1650) ? 1.0 : min(_1650, 1.0));
    uint _1663 = _1636 + 4u;
    float _1670 = isnan(1.0) ? _1649 : (isnan(_1649) ? 1.0 : min(_1649, 1.0));
    uint _1674 = _1636 | 1u;
    float _1685 = dot(vec3(cbLight._m0[_1636].xyz), vec3(_444, _445, _446));
    float _1688 = dot(vec3(cbLight._m0[_1674].xyz), vec3(_444, _445, _446));
    float _3824 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
    float _3835 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
    float _1693 = (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * 0.3183098733425140380859375;
    float _1695 = (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * 0.3183098733425140380859375;
    float _1702 = ((cbLight._m0[_1653].x * _1659) * _1695) + ((cbLight._m0[_1663].x * _1670) * _1693);
    float _1703 = ((_1659 * cbLight._m0[_1653].y) * _1695) + ((_1670 * cbLight._m0[_1663].y) * _1693);
    float _1704 = ((_1659 * cbLight._m0[_1653].z) * _1695) + ((_1670 * cbLight._m0[_1663].z) * _1693);
    uvec4 _1708 = floatBitsToUint(cbLight._m0[_1636 + 12u]);
    bool _1710 = _1708.x == 0u;
    float _1721;
    float _1723;
    float _1725;
    if (_1710)
    {
        _1721 = _1702;
        _1723 = _1703;
        _1725 = _1704;
    }
    else
    {
        uint _1729 = _1636 + 6u;
        float _1745 = (dot(vec3(cbLight._m0[_1636 + 2u].xyz), vec3(_444, _445, _446)) * 0.5) + 0.5;
        float _1746 = _1745 * _1745;
        float _3846 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1747 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1748 = isnan(1.0) ? _1651 : (isnan(_1651) ? 1.0 : min(_1651, 1.0));
        _1721 = (((cbLight._m0[_1729].x * 0.3183098733425140380859375) * _1747) * _1748) + _1702;
        _1723 = (((cbLight._m0[_1729].y * 0.3183098733425140380859375) * _1747) * _1748) + _1703;
        _1725 = (((cbLight._m0[_1729].z * 0.3183098733425140380859375) * _1747) * _1748) + _1704;
    }
    bool _1728 = _1708.y == 0u;
    float _1766;
    float _1768;
    float _1770;
    if (_1728)
    {
        _1766 = _1721;
        _1768 = _1723;
        _1770 = _1725;
    }
    else
    {
        uint _1925 = _1636 + 7u;
        float _1941 = (dot(vec3(cbLight._m0[_1636 + 3u].xyz), vec3(_444, _445, _446)) * 0.5) + 0.5;
        float _1942 = _1941 * _1941;
        float _3862 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
        float _1943 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1944 = isnan(1.0) ? _1652 : (isnan(_1652) ? 1.0 : min(_1652, 1.0));
        _1766 = (((cbLight._m0[_1925].x * 0.3183098733425140380859375) * _1943) * _1944) + _1721;
        _1768 = (((cbLight._m0[_1925].y * 0.3183098733425140380859375) * _1943) * _1944) + _1723;
        _1770 = (((cbLight._m0[_1925].z * 0.3183098733425140380859375) * _1943) * _1944) + _1725;
    }
    uint _1773 = _1636 + 8u;
    float _1786 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1636].w)) * _447) * 0.949999988079071044921875);
    float _1787 = _1786 * _1786;
    float _1788 = cbLight._m0[_1636].x + _524;
    float _1789 = cbLight._m0[_1636].y + _525;
    float _1790 = cbLight._m0[_1636].z + _526;
    float _1794 = inversesqrt(dot(vec3(_1788, _1789, _1790), vec3(_1788, _1789, _1790)));
    float _1795 = _1794 * _1788;
    float _1796 = _1794 * _1789;
    float _1797 = _1794 * _1790;
    float _1798 = dot(vec3(_444, _445, _446), vec3(cbLight._m0[_1636].xyz));
    float _3878 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
    float _1801 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _3889 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _1802 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _1803 = dot(vec3(_444, _445, _446), vec3(_1795, _1796, _1797));
    float _3900 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
    float _1806 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _1807 = dot(vec3(cbLight._m0[_1636].xyz), vec3(_1795, _1796, _1797));
    float _3911 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
    float _1811 = _1787 * _1787;
    float _1815 = ((_1806 * _1806) * (_1811 + (-1.0))) + 1.0;
    float _1826 = (exp2(log2(1.0 - (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1827 = 1.0 - _1787;
    float _1838 = (0.5 / (((_1802 * ((_1801 * _1827) + _1787)) + 9.9999999392252902907785028219223e-09) + (((_1802 * _1827) + _1787) * _1801))) * _1801;
    float _3922 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
    float _1840 = (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_1811 / ((_1815 * _1815) * 3.141590118408203125));
    uint _1851 = _1636 + 9u;
    float _1862 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1674].w)) * _447) * 0.949999988079071044921875);
    float _1863 = _1862 * _1862;
    float _1864 = cbLight._m0[_1674].x + _524;
    float _1865 = cbLight._m0[_1674].y + _525;
    float _1866 = cbLight._m0[_1674].z + _526;
    float _1870 = inversesqrt(dot(vec3(_1864, _1865, _1866), vec3(_1864, _1865, _1866)));
    float _1871 = _1870 * _1864;
    float _1872 = _1870 * _1865;
    float _1873 = _1870 * _1866;
    float _1874 = dot(vec3(_444, _445, _446), vec3(cbLight._m0[_1674].xyz));
    float _3933 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _1877 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _1878 = dot(vec3(_444, _445, _446), vec3(_1871, _1872, _1873));
    float _3944 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _1881 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _1882 = dot(vec3(cbLight._m0[_1674].xyz), vec3(_1871, _1872, _1873));
    float _3955 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _1886 = _1863 * _1863;
    float _1890 = ((_1881 * _1881) * (_1886 + (-1.0))) + 1.0;
    float _1899 = (exp2(log2(1.0 - (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1900 = 1.0 - _1863;
    float _1910 = (0.5 / (((_1802 * ((_1877 * _1900) + _1863)) + 9.9999999392252902907785028219223e-09) + (((_1802 * _1900) + _1863) * _1877))) * _1877;
    float _3966 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _1912 = (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_1886 / ((_1890 * _1890) * 3.141590118408203125));
    float _1922 = (((_1899 * cbLight._m0[_1851].x) * _1912) * _1659) + (((_1826 * cbLight._m0[_1773].x) * _1840) * _1670);
    float _1923 = (((_1899 * cbLight._m0[_1851].y) * _1912) * _1659) + (((_1826 * cbLight._m0[_1773].y) * _1840) * _1670);
    float _1924 = (((_1899 * cbLight._m0[_1851].z) * _1912) * _1659) + (((_1826 * cbLight._m0[_1773].z) * _1840) * _1670);
    float _1986;
    float _1988;
    float _1990;
    if (_1710)
    {
        _1986 = _1922;
        _1988 = _1923;
        _1990 = _1924;
    }
    else
    {
        uint _1992 = _1636 + 2u;
        uint _1996 = _1636 + 10u;
        float _2010 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1992].w)) * _447) * 0.949999988079071044921875);
        float _2011 = _2010 * _2010;
        float _2012 = cbLight._m0[_1992].x + _524;
        float _2013 = cbLight._m0[_1992].y + _525;
        float _2014 = cbLight._m0[_1992].z + _526;
        float _2018 = inversesqrt(dot(vec3(_2012, _2013, _2014), vec3(_2012, _2013, _2014)));
        float _2019 = _2018 * _2012;
        float _2020 = _2018 * _2013;
        float _2021 = _2018 * _2014;
        float _2022 = dot(vec3(_444, _445, _446), vec3(cbLight._m0[_1992].xyz));
        float _3977 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
        float _2025 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _2026 = dot(vec3(_444, _445, _446), vec3(_2019, _2020, _2021));
        float _3988 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
        float _2029 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _2030 = dot(vec3(cbLight._m0[_1992].xyz), vec3(_2019, _2020, _2021));
        float _3999 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
        float _2034 = _2011 * _2011;
        float _2038 = ((_2029 * _2029) * (_2034 + (-1.0))) + 1.0;
        float _2047 = (exp2(log2(1.0 - (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2048 = 1.0 - _2011;
        float _2058 = (0.5 / (((_1802 * ((_2025 * _2048) + _2011)) + 9.9999999392252902907785028219223e-09) + (((_1802 * _2048) + _2011) * _2025))) * _2025;
        float _4010 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        float _2060 = (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (_2034 / ((_2038 * _2038) * 3.141590118408203125));
        float _2061 = isnan(1.0) ? _1651 : (isnan(_1651) ? 1.0 : min(_1651, 1.0));
        _1986 = (((_2047 * cbLight._m0[_1996].x) * _2060) * _2061) + _1922;
        _1988 = (((_2047 * cbLight._m0[_1996].y) * _2060) * _2061) + _1923;
        _1990 = (((_2047 * cbLight._m0[_1996].z) * _2060) * _2061) + _1924;
    }
    float _2096;
    float _2098;
    float _2100;
    if (_1728)
    {
        _2096 = _1986;
        _2098 = _1988;
        _2100 = _1990;
    }
    else
    {
        uint _2107 = _1636 + 3u;
        uint _2111 = _1636 + 11u;
        float _2125 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2107].w)) * _447) * 0.949999988079071044921875);
        float _2126 = _2125 * _2125;
        float _2127 = cbLight._m0[_2107].x + _524;
        float _2128 = cbLight._m0[_2107].y + _525;
        float _2129 = cbLight._m0[_2107].z + _526;
        float _2133 = inversesqrt(dot(vec3(_2127, _2128, _2129), vec3(_2127, _2128, _2129)));
        float _2134 = _2133 * _2127;
        float _2135 = _2133 * _2128;
        float _2136 = _2133 * _2129;
        float _2137 = dot(vec3(_444, _445, _446), vec3(cbLight._m0[_2107].xyz));
        float _4026 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2140 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _2141 = dot(vec3(_444, _445, _446), vec3(_2134, _2135, _2136));
        float _4037 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
        float _2144 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _2145 = dot(vec3(cbLight._m0[_2107].xyz), vec3(_2134, _2135, _2136));
        float _4048 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
        float _2149 = _2126 * _2126;
        float _2153 = ((_2144 * _2144) * (_2149 + (-1.0))) + 1.0;
        float _2162 = (exp2(log2(1.0 - (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2163 = 1.0 - _2126;
        float _2173 = (0.5 / (((_1802 * ((_2140 * _2163) + _2126)) + 9.9999999392252902907785028219223e-09) + (((_1802 * _2163) + _2126) * _2140))) * _2140;
        float _4059 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
        float _2175 = (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_2149 / ((_2153 * _2153) * 3.141590118408203125));
        float _2176 = isnan(1.0) ? _1652 : (isnan(_1652) ? 1.0 : min(_1652, 1.0));
        _2096 = (((_2162 * cbLight._m0[_2111].x) * _2175) * _2176) + _1986;
        _2098 = (((_2162 * cbLight._m0[_2111].y) * _2175) * _2176) + _1988;
        _2100 = (((_2162 * cbLight._m0[_2111].z) * _2175) * _2176) + _1990;
    }
    float _2311;
    float _2313;
    float _2315;
    float _2317;
    float _2319;
    float _2321;
    if (_1634.y == 0u)
    {
        float _2251 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2252 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2251;
        float _2253 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2251;
        float _2254 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2251;
        uvec4 _2266 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2267 = _2266.x;
        uint _2278 = uint((float(_2266.y) * floor(float(uint(cbSceneParam._m0[85u].y * _533) / _2267))) + floor(float(uint(cbSceneParam._m0[85u].x * _532) / _2267)));
        float _2288 = (log2(_2254 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2289 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
        uint _2292 = uint(isnan(14.0) ? _2289 : (isnan(_2289) ? 14.0 : min(_2289, 14.0)));
        uvec4 _2297 = texelFetch(g_lightClusterGridBuffer, int(((_2292 << 2u) + (_2278 << 6u)) >> 2u));
        uint _2298 = _2297.x;
        uint _2299 = _2266.z;
        float _2434;
        float _2436;
        float _2438;
        float _2440;
        float _2442;
        float _2444;
        if (((((1u << ((_2299 >> 4u) & 15u)) + 4294967295u) & _2298) == 0u) || ((_2299 & 240u) == 0u))
        {
            _2434 = 0.0;
            _2436 = 0.0;
            _2438 = 0.0;
            _2440 = 0.0;
            _2442 = 0.0;
            _2444 = 0.0;
        }
        else
        {
            float _2435;
            float _2437;
            float _2439;
            float _2441;
            float _2443;
            float _2445;
            float _2588 = 0.0;
            float _2589 = 0.0;
            float _2590 = 0.0;
            float _2591 = 0.0;
            float _2592 = 0.0;
            float _2593 = 0.0;
            uint _2594 = 0u;
            uint _2603;
            bool _2604;
            for (;;)
            {
                _2603 = texelFetch(g_lightClassification, int((((_2292 << 5u) + (_2278 << 9u)) + (_2594 << 2u)) >> 2u)).x;
                _2604 = _2603 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2604)
                {
                    frontier_phi_61_pred = _2588;
                    frontier_phi_61_pred_1 = _2593;
                    frontier_phi_61_pred_2 = _2592;
                    frontier_phi_61_pred_3 = _2591;
                    frontier_phi_61_pred_4 = _2590;
                    frontier_phi_61_pred_5 = _2589;
                }
                else
                {
                    float _2712;
                    float _2713;
                    float _2714;
                    float _2715;
                    float _2716;
                    float _2717;
                    uint _2718;
                    _2712 = _2588;
                    _2713 = _2589;
                    _2714 = _2590;
                    _2715 = _2591;
                    _2716 = _2592;
                    _2717 = _2593;
                    _2718 = _2603;
                    float _2644;
                    float _2645;
                    float _2646;
                    float _2647;
                    float _2648;
                    float _2649;
                    for (;;)
                    {
                        uint _2722 = uint(findLSB(_2718)) + (_2594 << 5u);
                        uint _2719 = (_2718 + 4294967295u) & _2718;
                        uint _2724 = _2722 * 48u;
                        vec4 _2738 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2724)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 3u)).x));
                        uint _2744 = (_2722 * 48u) + 4u;
                        vec4 _2757 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2744)).x, texelFetch(g_PointLightRenderingBuffer, int(_2744 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2744 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2744 + 3u)).x));
                        uint _2763 = (_2722 * 48u) + 8u;
                        vec3 _2774 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2763)).x, texelFetch(g_PointLightRenderingBuffer, int(_2763 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2763 + 2u)).x));
                        float _2778 = _2738.x - _2252;
                        float _2779 = _2738.y - _2253;
                        float _2780 = _2738.z - _2254;
                        float _2781 = dot(vec3(_2778, _2779, _2780), vec3(_2778, _2779, _2780));
                        float _2784 = inversesqrt(_2781);
                        float _2785 = _2784 * _2778;
                        float _2786 = _2784 * _2779;
                        float _2787 = _2784 * _2780;
                        float _2788 = dot(vec3(_554, _557, _560), vec3(_2785, _2786, _2787));
                        float _2793 = 1.0 - (_2781 * _2738.w);
                        float _4085 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
                        float _2794 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
                        float _2795 = sqrt(_2781) * _2757.w;
                        float _2798 = 1.39999997615814208984375 / (_2795 + 1.39999997615814208984375);
                        float _2799 = _2798 * _2798;
                        float _2802 = ((1.0 - _2799) * _2788) + _2799;
                        float _2805 = _2795 * _2795;
                        float _2809 = ((isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0))) * _2794) / ((_2805 * 0.699999988079071044921875) + 1.0);
                        float _2813 = (-0.0) - _2252;
                        float _2814 = (-0.0) - _2253;
                        float _2815 = (-0.0) - _2254;
                        float _2819 = inversesqrt(dot(vec3(_2813, _2814, _2815), vec3(_2813, _2814, _2815)));
                        float _2820 = _2819 * _2813;
                        float _2821 = _2819 * _2814;
                        float _2822 = _2819 * _2815;
                        float _2830 = exp2(log2(1.0 / ((_2805 * 3.5) + 5.0)) * 0.25);
                        float _2831 = 1.0 - _614;
                        float _2838 = sqrt(1.0 - ((1.0 - (_2831 * _2831)) * (1.0 - (_2830 * _2830))));
                        float _2839 = _2838 * _2838;
                        float _2840 = _2839 * _2839;
                        float _2841 = _2820 + _2785;
                        float _2842 = _2821 + _2786;
                        float _2843 = _2822 + _2787;
                        float _2847 = inversesqrt(dot(vec3(_2841, _2842, _2843), vec3(_2841, _2842, _2843)));
                        float _2851 = dot(vec3(_554, _557, _560), vec3(_2820, _2821, _2822));
                        float _4101 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
                        float _2854 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
                        float _2855 = dot(vec3(_554, _557, _560), vec3(_2847 * _2841, _2847 * _2842, _2847 * _2843));
                        float _4112 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
                        float _2858 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
                        float _2862 = ((_2858 * _2858) * (_2840 + (-1.0))) + 1.0;
                        float _2863 = _2798 * _2839;
                        float _2864 = _2863 * _2863;
                        float _2867 = ((1.0 - _2864) * _2788) + _2864;
                        float _4123 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
                        float _2868 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
                        float _2869 = 1.0 - _2839;
                        float _2879 = (0.5 / (((_2868 * ((_2854 * _2869) + _2839)) + 9.9999999392252902907785028219223e-09) + (((_2868 * _2869) + _2839) * _2854))) * _2868;
                        float _4134 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
                        float _2890 = (((_2840 * 3.1415927410125732421875) * (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0)))) / ((_2862 * _2862) * ((_2805 * 2.1991131305694580078125) + 3.141590118408203125))) * _2794;
                        _2647 = (_2809 * _2757.x) + _2715;
                        _2648 = (_2809 * _2757.y) + _2716;
                        _2649 = (_2809 * _2757.z) + _2717;
                        _2644 = (_2890 * _2774.x) + _2712;
                        _2645 = (_2890 * _2774.y) + _2713;
                        _2646 = (_2890 * _2774.z) + _2714;
                        if (_2719 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2712 = _2644;
                            _2713 = _2645;
                            _2714 = _2646;
                            _2715 = _2647;
                            _2716 = _2648;
                            _2717 = _2649;
                            _2718 = _2719;
                        }
                    }
                    frontier_phi_61_pred = _2644;
                    frontier_phi_61_pred_1 = _2649;
                    frontier_phi_61_pred_2 = _2648;
                    frontier_phi_61_pred_3 = _2647;
                    frontier_phi_61_pred_4 = _2646;
                    frontier_phi_61_pred_5 = _2645;
                }
                _2435 = frontier_phi_61_pred;
                _2445 = frontier_phi_61_pred_1;
                _2443 = frontier_phi_61_pred_2;
                _2441 = frontier_phi_61_pred_3;
                _2439 = frontier_phi_61_pred_4;
                _2437 = frontier_phi_61_pred_5;
                uint _2595 = _2594 + 1u;
                if (_2595 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2588 = _2435;
                    _2589 = _2437;
                    _2590 = _2439;
                    _2591 = _2441;
                    _2592 = _2443;
                    _2593 = _2445;
                    _2594 = _2595;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2434 = _2435;
            _2436 = _2437;
            _2438 = _2439;
            _2440 = _2441;
            _2442 = _2443;
            _2444 = _2445;
        }
        uvec4 _2448 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2449 = _2448.z;
        uint _2451 = (_2449 >> 8u) & 15u;
        float _2556;
        float _2558;
        float _2560;
        float _2562;
        float _2564;
        float _2566;
        if (((4294967295u << _2451) & _2298) == 0u)
        {
            _2556 = _2434;
            _2558 = _2436;
            _2560 = _2438;
            _2562 = _2440;
            _2564 = _2442;
            _2566 = _2444;
        }
        else
        {
            float _2581 = inversesqrt(dot(vec3(_2252, _2253, _2254), vec3(_2252, _2253, _2254)));
            float _2582 = _2581 * _2252;
            float _2583 = _2581 * _2253;
            float _2584 = _2581 * _2254;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2451 < ((_2449 >> 12u) & 15u))
            {
                float _2557;
                float _2559;
                float _2561;
                float _2563;
                float _2565;
                float _2567;
                float _2695 = _2434;
                float _2696 = _2436;
                float _2697 = _2438;
                float _2698 = _2440;
                float _2699 = _2442;
                float _2700 = _2444;
                uint _2701 = _2451;
                uint _2710;
                bool _2711;
                for (;;)
                {
                    _2710 = texelFetch(g_lightClassification, int((((_2292 << 5u) + (_2278 << 9u)) + (_2701 << 2u)) >> 2u)).x;
                    _2711 = _2710 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2711)
                    {
                        frontier_phi_67_pred = _2698;
                        frontier_phi_67_pred_1 = _2699;
                        frontier_phi_67_pred_2 = _2700;
                        frontier_phi_67_pred_3 = _2697;
                        frontier_phi_67_pred_4 = _2696;
                        frontier_phi_67_pred_5 = _2695;
                    }
                    else
                    {
                        float _2895;
                        float _2896;
                        float _2897;
                        float _2898;
                        float _2899;
                        float _2900;
                        float _3190;
                        float _3191;
                        float _3192;
                        float _3193;
                        float _3194;
                        float _3195;
                        float _2908 = _2695;
                        float _2909 = _2696;
                        float _2910 = _2697;
                        float _2911 = _2698;
                        float _2912 = _2699;
                        float _2913 = _2700;
                        uint _2914 = _2710;
                        uint _2915;
                        vec4 _2940;
                        float _2941;
                        vec4 _2956;
                        vec3 _2968;
                        vec4 _2983;
                        vec4 _2999;
                        float _3046;
                        bool _3047;
                        for (;;)
                        {
                            uint _2925 = ((_2701 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2914));
                            _2915 = (_2914 + 4294967295u) & _2914;
                            uint _2927 = _2925 * 40u;
                            _2940 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2927)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 3u)).x));
                            _2941 = _2940.w;
                            uint _2943 = (_2925 * 40u) + 4u;
                            _2956 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2943)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 3u)).x));
                            uint _2958 = (_2925 * 40u) + 8u;
                            _2968 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2958)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 2u)).x));
                            uint _2970 = (_2925 * 40u) + 16u;
                            _2983 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2970)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 3u)).x));
                            uint _2986 = (_2925 * 40u) + 20u;
                            _2999 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2986)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 3u)).x));
                            uint _3002 = (_2925 * 40u) + 24u;
                            vec4 _3015 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3002)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 3u)).x));
                            uint _3021 = (_2925 * 40u) + 28u;
                            vec4 _3034 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3021)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 3u)).x));
                            _3046 = fma(_2254, _3034.z, fma(_2253, _3034.y, _3034.x * _2252)) + _3034.w;
                            _3047 = !((fma(_2254, _3015.z, fma(_2253, _3015.y, _3015.x * _2252)) + _3015.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3047)
                            {
                                float _3074 = _2940.x - _2252;
                                float _3075 = _2940.y - _2253;
                                float _3076 = _2940.z - _2254;
                                float _3077 = dot(vec3(_3074, _3075, _3076), vec3(_3074, _3075, _3076));
                                float _3080 = inversesqrt(_3077);
                                float _3081 = _3080 * _3074;
                                float _3082 = _3080 * _3075;
                                float _3083 = _3080 * _3076;
                                float _3087 = 1.0 - (_3077 / (_2941 * _2941));
                                float _4145 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                                float _3088 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
                                float _3092 = sqrt(_3077) * _2956.w;
                                float _3094 = 1.39999997615814208984375 / (_3092 + 1.39999997615814208984375);
                                float _3095 = _3094 * _3094;
                                float _3098 = ((1.0 - _3095) * dot(vec3(_3081, _3082, _3083), vec3(_554, _557, _560))) + _3095;
                                float _3101 = _3092 * _3092;
                                float _3105 = (fma(_2254, _2983.z, fma(_2253, _2983.y, _2983.x * _2252)) + _2983.w) / _3046;
                                float _3106 = (fma(_2254, _2999.z, fma(_2253, _2999.y, _2999.x * _2252)) + _2999.w) / _3046;
                                float _3110 = 1.0 - dot(vec2(_3105, _3106), vec2(_3105, _3106));
                                float _4161 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                                float _3111 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
                                float _3112 = _3111 * (((isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0))) * _3088) / ((_3101 * 0.699999988079071044921875) + 1.0));
                                float _3124 = exp2(log2(1.0 / ((_3101 * 3.5) + 5.0)) * 0.25);
                                float _3125 = 1.0 - _614;
                                float _3132 = sqrt(1.0 - ((1.0 - (_3125 * _3125)) * (1.0 - (_3124 * _3124))));
                                float _3133 = _3132 * _3132;
                                float _3134 = _3133 * _3133;
                                float _3135 = _3081 - _2582;
                                float _3136 = _3082 - _2583;
                                float _3137 = _3083 - _2584;
                                float _3141 = inversesqrt(dot(vec3(_3135, _3136, _3137), vec3(_3135, _3136, _3137)));
                                float _3145 = dot(vec3(_554, _557, _560), vec3((-0.0) - _2582, (-0.0) - _2583, (-0.0) - _2584));
                                float _4172 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                                float _3148 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
                                float _3149 = dot(vec3(_554, _557, _560), vec3(_3141 * _3135, _3141 * _3136, _3141 * _3137));
                                float _4183 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                                float _3152 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
                                float _3156 = ((_3152 * _3152) * (_3134 + (-1.0))) + 1.0;
                                float _3157 = _3094 * _3133;
                                float _3158 = _3157 * _3157;
                                float _3164 = ((1.0 - _3158) * dot(vec3(_554, _557, _560), vec3(_3081, _3082, _3083))) + _3158;
                                float _4194 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                                float _3165 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
                                float _3166 = 1.0 - _3133;
                                float _3176 = (0.5 / (((_3165 * ((_3148 * _3166) + _3133)) + 9.9999999392252902907785028219223e-09) + (((_3165 * _3166) + _3133) * _3148))) * _3165;
                                float _4205 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                                float _3186 = (_3111 * _3088) * (((_3134 * 3.1415927410125732421875) * (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0)))) / ((_3156 * _3156) * ((_3101 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3186 * _2968.x;
                                frontier_phi_73_pred_1 = _3186 * _2968.y;
                                frontier_phi_73_pred_2 = _3112 * _2956.z;
                                frontier_phi_73_pred_3 = _3112 * _2956.y;
                                frontier_phi_73_pred_4 = _3112 * _2956.x;
                                frontier_phi_73_pred_5 = _3186 * _2968.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3190 = frontier_phi_73_pred;
                            _3191 = frontier_phi_73_pred_1;
                            _3195 = frontier_phi_73_pred_2;
                            _3194 = frontier_phi_73_pred_3;
                            _3193 = frontier_phi_73_pred_4;
                            _3192 = frontier_phi_73_pred_5;
                            _2898 = _3193 + _2911;
                            _2899 = _3194 + _2912;
                            _2900 = _3195 + _2913;
                            _2895 = _3190 + _2908;
                            _2896 = _3191 + _2909;
                            _2897 = _3192 + _2910;
                            if (_2915 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2908 = _2895;
                                _2909 = _2896;
                                _2910 = _2897;
                                _2911 = _2898;
                                _2912 = _2899;
                                _2913 = _2900;
                                _2914 = _2915;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2898;
                        frontier_phi_67_pred_1 = _2899;
                        frontier_phi_67_pred_2 = _2900;
                        frontier_phi_67_pred_3 = _2897;
                        frontier_phi_67_pred_4 = _2896;
                        frontier_phi_67_pred_5 = _2895;
                    }
                    _2563 = frontier_phi_67_pred;
                    _2565 = frontier_phi_67_pred_1;
                    _2567 = frontier_phi_67_pred_2;
                    _2561 = frontier_phi_67_pred_3;
                    _2559 = frontier_phi_67_pred_4;
                    _2557 = frontier_phi_67_pred_5;
                    uint _2702 = _2701 + 1u;
                    if (_2702 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2695 = _2557;
                        _2696 = _2559;
                        _2697 = _2561;
                        _2698 = _2563;
                        _2699 = _2565;
                        _2700 = _2567;
                        _2701 = _2702;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2565;
                frontier_phi_55_56_ladder_1 = _2567;
                frontier_phi_55_56_ladder_2 = _2563;
                frontier_phi_55_56_ladder_3 = _2561;
                frontier_phi_55_56_ladder_4 = _2559;
                frontier_phi_55_56_ladder_5 = _2557;
            }
            else
            {
                frontier_phi_55_56_ladder = _2442;
                frontier_phi_55_56_ladder_1 = _2444;
                frontier_phi_55_56_ladder_2 = _2440;
                frontier_phi_55_56_ladder_3 = _2438;
                frontier_phi_55_56_ladder_4 = _2436;
                frontier_phi_55_56_ladder_5 = _2434;
            }
            _2556 = frontier_phi_55_56_ladder_5;
            _2558 = frontier_phi_55_56_ladder_4;
            _2560 = frontier_phi_55_56_ladder_3;
            _2562 = frontier_phi_55_56_ladder_2;
            _2564 = frontier_phi_55_56_ladder;
            _2566 = frontier_phi_55_56_ladder_1;
        }
        float _2571 = isnan(1.0) ? _598 : (isnan(_598) ? 1.0 : min(_598, 1.0));
        _2311 = (_2571 * _2562) + _1766;
        _2313 = (_2571 * _2564) + _1768;
        _2315 = (_2571 * _2566) + _1770;
        _2317 = ((_2556 * 0.039999999105930328369140625) * _2571) + _2096;
        _2319 = ((_2558 * 0.039999999105930328369140625) * _2571) + _2098;
        _2321 = ((_2560 * 0.039999999105930328369140625) * _2571) + _2100;
    }
    else
    {
        _2311 = _1766;
        _2313 = _1768;
        _2315 = _1770;
        _2317 = _2096;
        _2319 = _2098;
        _2321 = _2100;
    }
    uint _2327 = _574 + uint(cbMatDynParam._m0[0u].w);
    float _2335 = ((_287 * cbMtdParam._m0[11u].x) * (_375.x + _360.x)) * cbInstanceData._m0[_2327].x;
    float _2338 = ((_287 * cbMtdParam._m0[11u].y) * (_375.y + _360.y)) * cbInstanceData._m0[_2327].y;
    float _2341 = ((_287 * cbMtdParam._m0[11u].z) * (_375.z + _360.z)) * cbInstanceData._m0[_2327].z;
    float _4221 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _4232 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _4243 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _2358 = (((isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_2311 + ((isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0))) * _598))) + ((_2317 + ((isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))) * _1405)) * cbPerFrame._m0[3u].x)) + _2335;
    float _2360 = (_2338 + ((_2319 + ((isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0))) * _1405)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_2313 + ((isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0))) * _598)));
    float _2362 = (_2341 + ((_2321 + ((isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))) * _1405)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_2315 + ((isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0))) * _598)));
    float _4269 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2375 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
    uint _2376 = _573 + 6u;
    float _2384 = _532 / cbSceneParam._m0[86u].x;
    float _2385 = _533 / cbSceneParam._m0[86u].y;
    vec4 _2399 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2384, _2385, (log2((isnan(cbSceneParam._m0[77u].w) ? _466 : (isnan(_466) ? cbSceneParam._m0[77u].w : min(_466, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2401 = _2399.x;
    float _2402 = _2399.y;
    float _2403 = _2399.z;
    float _2404 = _2399.w;
    float _2497;
    float _2499;
    float _2501;
    float _2503;
    if (_466 > cbSceneParam._m0[78u].w)
    {
        float _2459 = isnan(_466) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _466 : min(cbSceneParam._m0[80u].w, _466));
        float _2460 = _2459 / _466;
        float _2471 = _2460 * _517;
        float _2472 = _518 * _2460;
        float _2473 = (-0.0) - _2472;
        float _2475 = _2460 * _519;
        float _2477 = (cbSceneParam._m0[77u].w * _2473) / _2459;
        float _2478 = _2477 + cbSceneParam._m0[79u].w;
        float _2479 = cbSceneParam._m0[79u].w - _2472;
        float _2485 = sqrt(((_2471 * _2471) + (_2472 * _2472)) + (_2475 * _2475));
        float _2488 = (1.0 - (cbSceneParam._m0[77u].w / _2459)) * _2485;
        float _2493 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2495 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2657;
        if (abs((_2473 - _2477) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2657 = ((((_2478 > 0.0) ? exp2(_2493 * _2478) : (2.0 - exp2(_2495 * _2478))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2488;
        }
        else
        {
            float _2617 = 1.0 / cbSceneParam._m0[80u].x;
            float _2618 = isnan(_2479) ? _2478 : (isnan(_2478) ? _2479 : max(_2478, _2479));
            float _2619 = isnan(_2479) ? _2478 : (isnan(_2478) ? _2479 : min(_2478, _2479));
            float _2628 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : min(_2618, 0.0));
            float _2629 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : min(_2619, 0.0));
            _2657 = ((abs(_2485 / _2473) * cbSceneParam._m0[80u].y) * ((((_2628 - _2629) * 2.0) - ((exp2(_2493 * (isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0)))) - exp2(_2493 * (isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0))))) * _2617)) - ((exp2(_2495 * _2628) - exp2(_2495 * _2629)) * _2617))) + (_2488 * cbSceneParam._m0[80u].z);
        }
        vec4 _2659 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2384, _2385, 1.0), 0.0);
        float _2668 = exp2((_2657 * (-1.44269502162933349609375)) * (1.0 - _2659.w));
        float _2669 = log2(_2668);
        float _2685 = log2(_2404);
        _2497 = (exp2(_2685 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2669 * cbSceneParam._m0[78u].x)) * _2659.x) / cbSceneParam._m0[78u].x)) + _2401;
        _2499 = (exp2(_2685 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2669 * cbSceneParam._m0[78u].y)) * _2659.y) / cbSceneParam._m0[78u].y)) + _2402;
        _2501 = (exp2(_2685 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2669 * cbSceneParam._m0[78u].z)) * _2659.z) / cbSceneParam._m0[78u].z)) + _2403;
        _2503 = _2668 * _2404;
    }
    else
    {
        _2497 = _2401;
        _2499 = _2402;
        _2501 = _2403;
        _2503 = _2404;
    }
    float _2515 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2516 = _2515 == 3.0;
    float _2517 = log2(_2503);
    float _2521 = exp2(_2517 * cbSceneParam._m0[78u].x);
    float _2522 = exp2(_2517 * cbSceneParam._m0[78u].y);
    float _2523 = exp2(_2517 * cbSceneParam._m0[78u].z);
    float _2524 = _2521 * (isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0)));
    float _2525 = _2522 * (isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0)));
    float _2526 = _2523 * (isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0)));
    float _2535 = (_2515 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2535 * (_2516 ? _2524 : (_2524 + (cbSceneParam._m0[72u].w * _2497)));
    SV_Target.y = _2535 * (_2516 ? _2525 : (_2525 + (cbSceneParam._m0[72u].w * _2499)));
    SV_Target.z = _2535 * (_2516 ? _2526 : (_2526 + (cbSceneParam._m0[72u].w * _2501)));
    SV_Target.w = cbInstanceData._m0[_2376].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2335) * _2375) * _2521) * _2535;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2338) * _2375) * _2522) * _2535;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2341) * _2375) * _2523) * _2535;
    SV_Target_1.w = cbInstanceData._m0[_2376].w;
}


