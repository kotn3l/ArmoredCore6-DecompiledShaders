#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _927;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _191 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _192 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _193 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_191, _192, _193), vec3(_191, _192, _193)));
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _235 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _241 = _235.x * cbMtdParam._m0[9u].x;
    float _242 = _235.y * cbMtdParam._m0[9u].y;
    float _243 = _235.z * cbMtdParam._m0[9u].z;
    vec4 _263 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _278 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _280 = _278.x;
    vec4 _292 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _296 = _292.z;
    float _300 = (_292.x * 2.0) + (-1.0);
    float _302 = (_292.y * 2.0) + (-1.0);
    float _303 = dot(vec2(_300, _302), vec2(_300, _302));
    float _3586 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _309 = sqrt(1.0 - (isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0))));
    vec4 _337 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _352 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _367 = (TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_263.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].x + 1.0);
    float _3597 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _368 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
    float _371 = fma(_309, _206 * NORMAL.x, fma(_302, _213 * TANGENT.x, (_199 * _191) * _300));
    float _374 = fma(_309, _206 * NORMAL.y, fma(_302, _213 * TANGENT.y, (_199 * _192) * _300));
    float _377 = fma(_309, _206 * NORMAL.z, fma(_302, _213 * TANGENT.z, (_199 * _193) * _300));
    float _381 = inversesqrt(dot(vec3(_371, _374, _377), vec3(_371, _374, _377)));
    float _382 = _381 * _371;
    float _383 = _381 * _374;
    float _384 = _381 * _377;
    float _3608 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _385 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
    float _3619 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3630 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3641 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3652 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _389 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
    float _405 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _446 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _456 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _446);
    float _457 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _446);
    float _458 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _446);
    float _462 = inversesqrt(dot(vec3(_456, _457, _458), vec3(_456, _457, _458)));
    float _463 = _456 * _462;
    float _464 = _457 * _462;
    float _465 = _458 * _462;
    float _471 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _472 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _492 = fma(_384, cbSceneParam._m0[5u].z, fma(_383, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _382));
    float _495 = fma(_384, cbSceneParam._m0[6u].z, fma(_383, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _382));
    float _498 = fma(_384, cbSceneParam._m0[7u].z, fma(_383, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _382));
    uint _511 = uint(roundEven(NORMAL.w)) * 13u;
    uint _513 = _511 + 9u;
    uint _514 = _513 + uint(cbMatDynParam._m0[0u].w);
    float _520 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0)))) * cbInstanceData._m0[_514].x;
    float _521 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0)))) * cbInstanceData._m0[_514].y;
    float _522 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0)))) * cbInstanceData._m0[_514].z;
    float _3663 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _523 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    float _3674 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _524 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
    float _3685 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _525 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _526 = 1.0 - _389;
    float _527 = _523 * _526;
    float _528 = _524 * _526;
    float _529 = _525 * _526;
    float _534 = (_523 + (-0.039999999105930328369140625)) * _389;
    float _535 = (_524 + (-0.039999999105930328369140625)) * _389;
    float _536 = (_525 + (-0.039999999105930328369140625)) * _389;
    float _537 = _534 + 0.039999999105930328369140625;
    float _539 = _535 + 0.039999999105930328369140625;
    float _540 = _536 + 0.039999999105930328369140625;
    vec4 _549 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _471, cbSceneParam._m0[86u].y * _472));
    float _552 = _549.x * TEXCOORD_3.w;
    float _553 = dot(vec3(_382, _383, _384), vec3(_463, _464, _465));
    float _556 = _553 * 2.0;
    float _560 = (_556 * _382) - _463;
    float _561 = (_556 * _383) - _464;
    float _562 = (_556 * _384) - _465;
    float _566 = abs(dot(vec3(_463, _464, _465), vec3(_382, _383, _384)));
    float _3696 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _568 = sqrt(_385);
    float _581 = exp2((_568 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_568 * 3.0));
    float _587 = (1.0 - _581) * ((_568 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _588 = _581 * _568;
    float _616 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _620 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _624 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _926;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _651 = fma(_624, cbModelParam._m0[26u].z, fma(_620, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _616));
        float _655 = fma(_624, cbModelParam._m0[27u].z, fma(_620, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _616));
        float _659 = fma(_624, cbModelParam._m0[28u].z, fma(_620, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _616));
        float _684 = _616 + _382;
        float _685 = _620 + _383;
        float _686 = _624 + _384;
        float _696 = fma(_686, cbModelParam._m0[26u].z, fma(_685, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _684)) - _651;
        float _697 = fma(_686, cbModelParam._m0[27u].z, fma(_685, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _684)) - _655;
        float _698 = fma(_686, cbModelParam._m0[28u].z, fma(_685, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _684)) - _659;
        float _702 = inversesqrt(dot(vec3(_696, _697, _698), vec3(_696, _697, _698)));
        float _715 = ((_702 * _696) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_651 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _716 = ((_702 * _697) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_655 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _717 = ((_702 * _698) / cbModelParam._m0[34u].z) + ((((((_659 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _720 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_715, _716, _717), 0.0);
        vec4 _727 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_715, _716, _717), 0.0);
        vec4 _734 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_715, _716, _717), 0.0);
        vec4 _741 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_715, _716, _717), 0.0);
        float _754 = exp2((_720.w + (-0.5)) * 20.0) * 2.0;
        float _755 = _754 * (_720.x + (-0.5));
        float _756 = _754 * (_720.y + (-0.5));
        float _757 = _754 * (_720.z + (-0.5));
        float _764 = exp2((_727.w + (-0.5)) * 20.0) * 2.0;
        float _765 = _764 * (_727.x + (-0.5));
        float _766 = _764 * (_727.y + (-0.5));
        float _767 = _764 * (_727.z + (-0.5));
        float _774 = exp2((_734.w + (-0.5)) * 20.0) * 2.0;
        float _775 = _774 * (_734.x + (-0.5));
        float _776 = _774 * (_734.y + (-0.5));
        float _777 = _774 * (_734.z + (-0.5));
        float _784 = exp2((_741.w + (-0.5)) * 20.0) * 2.0;
        float _785 = _784 * (_741.x + (-0.5));
        float _786 = _784 * (_741.y + (-0.5));
        float _787 = _784 * (_741.z + (-0.5));
        float _788 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _789 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _790 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _791 = _755 * 0.5;
        float _792 = _765 * 0.5;
        float _793 = _775 * 0.5;
        float _794 = dot(vec3(_791, _792, _793), vec3(_791, _792, _793));
        float _799 = (_794 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_794);
        float _808 = (dot(vec3(_382, _383, _384), vec3(_799 * _791, _799 * _792, _799 * _793)) + 1.0) * 0.5;
        float _3722 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _818 = sqrt(((_792 * _792) + (_791 * _791)) + (_793 * _793)) / (_788 + 9.9999997473787516355514526367188e-06);
        float _3733 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _819 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _820 = _819 * 2.0;
        float _824 = (1.0 - _819) / (_819 + 1.0);
        float _3744 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _825 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _834 = ((((1.0 - _825) * (_820 + 2.0)) * exp2(log2(isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * (_820 + 1.0))) + _825) * _788;
        float _835 = _756 * 0.5;
        float _836 = _766 * 0.5;
        float _837 = _776 * 0.5;
        float _838 = dot(vec3(_835, _836, _837), vec3(_835, _836, _837));
        float _843 = (_838 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_838);
        float _851 = (dot(vec3(_382, _383, _384), vec3(_843 * _835, _843 * _836, _843 * _837)) + 1.0) * 0.5;
        float _3755 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _860 = sqrt(((_836 * _836) + (_835 * _835)) + (_837 * _837)) / (_789 + 9.9999997473787516355514526367188e-06);
        float _3766 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _861 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _862 = _861 * 2.0;
        float _866 = (1.0 - _861) / (_861 + 1.0);
        float _3777 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _867 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _876 = ((((1.0 - _867) * (_862 + 2.0)) * exp2(log2(isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_862 + 1.0))) + _867) * _789;
        float _877 = _757 * 0.5;
        float _878 = _767 * 0.5;
        float _879 = _777 * 0.5;
        float _880 = dot(vec3(_877, _878, _879), vec3(_877, _878, _879));
        float _885 = (_880 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_880);
        float _893 = (dot(vec3(_382, _383, _384), vec3(_885 * _877, _885 * _878, _885 * _879)) + 1.0) * 0.5;
        float _3788 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _902 = sqrt(((_878 * _878) + (_877 * _877)) + (_879 * _879)) / (_790 + 9.9999997473787516355514526367188e-06);
        float _3799 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _903 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _904 = _903 * 2.0;
        float _908 = (1.0 - _903) / (_903 + 1.0);
        float _3810 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _909 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _918 = ((((1.0 - _909) * (_904 + 2.0)) * exp2(log2(isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * (_904 + 1.0))) + _909) * _790;
        _926 = _757;
        _928 = _756;
        _929 = _755;
        _930 = _767;
        _931 = _766;
        _932 = _765;
        _933 = _777;
        _934 = _776;
        _935 = _775;
        _936 = _790;
        _937 = _789;
        _938 = _788;
        _939 = cbModelParam._m0[36u].z * (isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0)));
        _940 = cbModelParam._m0[36u].z * (isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0)));
        _941 = cbModelParam._m0[36u].z * (isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0)));
    }
    else
    {
        _926 = _927;
        _928 = _927;
        _929 = _927;
        _930 = _927;
        _931 = _927;
        _932 = _927;
        _933 = _927;
        _934 = _927;
        _935 = _927;
        _936 = _927;
        _937 = _927;
        _938 = _927;
        _939 = 0.0;
        _940 = 0.0;
        _941 = 0.0;
    }
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _967 = fma(_624, cbModelParam._m0[30u].z, fma(_620, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _616));
        float _971 = fma(_624, cbModelParam._m0[31u].z, fma(_620, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _616));
        float _975 = fma(_624, cbModelParam._m0[32u].z, fma(_620, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _616));
        float _998 = _616 + _382;
        float _999 = _620 + _383;
        float _1000 = _624 + _384;
        float _1010 = fma(_1000, cbModelParam._m0[30u].z, fma(_999, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _998)) - _967;
        float _1011 = fma(_1000, cbModelParam._m0[31u].z, fma(_999, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _998)) - _971;
        float _1012 = fma(_1000, cbModelParam._m0[32u].z, fma(_999, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _998)) - _975;
        float _1016 = inversesqrt(dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012)));
        float _1029 = ((_1016 * _1010) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_967 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1030 = ((_1016 * _1011) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_971 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1031 = ((_1016 * _1012) / cbModelParam._m0[35u].z) + ((((((_975 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        float _1066 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1033.x + (-0.5));
        float _1068 = _1066 * (_1033.y + (-0.5));
        float _1069 = _1066 * (_1033.z + (-0.5));
        float _1076 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1040.x + (-0.5));
        float _1078 = _1076 * (_1040.y + (-0.5));
        float _1079 = _1076 * (_1040.z + (-0.5));
        float _1086 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1047.x + (-0.5));
        float _1088 = _1086 * (_1047.y + (-0.5));
        float _1089 = _1086 * (_1047.z + (-0.5));
        float _1096 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1054.x + (-0.5));
        float _1098 = _1096 * (_1054.y + (-0.5));
        float _1099 = _1096 * (_1054.z + (-0.5));
        float _1100 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1101 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1102 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1103 = _1067 * 0.5;
        float _1104 = _1077 * 0.5;
        float _1105 = _1087 * 0.5;
        float _1106 = dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105));
        float _1111 = (_1106 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1106);
        float _1119 = (dot(vec3(_382, _383, _384), vec3(_1111 * _1103, _1111 * _1104, _1111 * _1105)) + 1.0) * 0.5;
        float _3851 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1128 = sqrt(((_1104 * _1104) + (_1103 * _1103)) + (_1105 * _1105)) / (_1100 + 9.9999997473787516355514526367188e-06);
        float _3862 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1130 = _1129 * 2.0;
        float _1134 = (1.0 - _1129) / (_1129 + 1.0);
        float _3873 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1144 = ((((1.0 - _1135) * (_1130 + 2.0)) * exp2(log2(isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * (_1130 + 1.0))) + _1135) * _1100;
        float _1145 = _1068 * 0.5;
        float _1146 = _1078 * 0.5;
        float _1147 = _1088 * 0.5;
        float _1148 = dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147));
        float _1153 = (_1148 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1148);
        float _1161 = (dot(vec3(_382, _383, _384), vec3(_1153 * _1145, _1153 * _1146, _1153 * _1147)) + 1.0) * 0.5;
        float _3884 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1170 = sqrt(((_1146 * _1146) + (_1145 * _1145)) + (_1147 * _1147)) / (_1101 + 9.9999997473787516355514526367188e-06);
        float _3895 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1172 = _1171 * 2.0;
        float _1176 = (1.0 - _1171) / (_1171 + 1.0);
        float _3906 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1186 = ((((1.0 - _1177) * (_1172 + 2.0)) * exp2(log2(isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (_1172 + 1.0))) + _1177) * _1101;
        float _1187 = _1069 * 0.5;
        float _1188 = _1079 * 0.5;
        float _1189 = _1089 * 0.5;
        float _1190 = dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189));
        float _1195 = (_1190 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1190);
        float _1203 = (dot(vec3(_382, _383, _384), vec3(_1195 * _1187, _1195 * _1188, _1195 * _1189)) + 1.0) * 0.5;
        float _3917 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1212 = sqrt(((_1188 * _1188) + (_1187 * _1187)) + (_1189 * _1189)) / (_1102 + 9.9999997473787516355514526367188e-06);
        float _3928 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1214 = _1213 * 2.0;
        float _1218 = (1.0 - _1213) / (_1213 + 1.0);
        float _3939 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1228 = ((((1.0 - _1219) * (_1214 + 2.0)) * exp2(log2(isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1214 + 1.0))) + _1219) * _1102;
        _1236 = _1069;
        _1237 = _1068;
        _1238 = _1067;
        _1239 = _1079;
        _1240 = _1078;
        _1241 = _1077;
        _1242 = _1089;
        _1243 = _1088;
        _1244 = _1087;
        _1245 = _1102;
        _1246 = _1101;
        _1247 = _1100;
        _1248 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0)));
        _1249 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)));
        _1250 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)));
    }
    else
    {
        _1236 = _927;
        _1237 = _927;
        _1238 = _927;
        _1239 = _927;
        _1240 = _927;
        _1241 = _927;
        _1242 = _927;
        _1243 = _927;
        _1244 = _927;
        _1245 = _927;
        _1246 = _927;
        _1247 = _927;
        _1248 = 0.0;
        _1249 = 0.0;
        _1250 = 0.0;
    }
    float _1260 = (cbModelParam._m0[1u].x * (_1248 - _939)) + _939;
    float _1261 = (cbModelParam._m0[1u].x * (_1249 - _940)) + _940;
    float _1262 = (cbModelParam._m0[1u].x * (_1250 - _941)) + _941;
    float _1283 = fma(_1262, cbSceneParam._m0[89u].z, fma(_1261, cbSceneParam._m0[89u].y, _1260 * cbSceneParam._m0[89u].x));
    float _1286 = fma(_1262, cbSceneParam._m0[90u].z, fma(_1261, cbSceneParam._m0[90u].y, _1260 * cbSceneParam._m0[90u].x));
    float _1289 = fma(_1262, cbSceneParam._m0[91u].z, fma(_1261, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1260));
    float _1304 = _560 * 0.5;
    float _1305 = _561 * 0.5;
    float _1306 = _562 * 0.5;
    float _1307 = dot(vec4(_1304, _1305, _1306, 1.0), vec4(_1238, _1241, _1244, _1247));
    float _1310 = dot(vec4(_1304, _1305, _1306, 1.0), vec4(_1237, _1240, _1243, _1246));
    float _1313 = dot(vec4(_1304, _1305, _1306, 1.0), vec4(_1236, _1239, _1242, _1245));
    float _1347;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1320 = dot(vec4(_1304, _1305, _1306, 1.0), vec4(_926, _930, _933, _936));
        float _1324 = dot(vec4(_1304, _1305, _1306, 1.0), vec4(_928, _931, _934, _937));
        float _1328 = dot(vec4(_1304, _1305, _1306, 1.0), vec4(_929, _932, _935, _938));
        float _1335 = dot(vec4(cbModelParam._m0[39u]), vec4(_1304, _1305, _1306, 1.0));
        _1347 = dot(vec3(isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)), isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)), isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1335) ? 0.0 : (isnan(0.0) ? _1335 : max(0.0, _1335))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1347 = 1.0;
    }
    float _1358;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1349 = dot(vec4(cbModelParam._m0[40u]), vec4(_1304, _1305, _1306, 1.0));
        _1358 = dot(vec3(isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)), isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)), isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1349) ? 0.0 : (isnan(0.0) ? _1349 : max(0.0, _1349))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1358 = 1.0;
    }
    float _1362 = (_1358 * cbModelParam._m0[1u].x) + (_1347 * (1.0 - cbModelParam._m0[1u].x));
    float _1372 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _385);
    float _1373 = isnan(_1372) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1372 : min(cbModelParam._m0[25u].z, _1372));
    float _1453;
    float _1455;
    float _1457;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1420 = fma(_624, cbModelParam._m0[13u].z, fma(_620, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _616)) + cbModelParam._m0[13u].w;
        float _1424 = fma(_624, cbModelParam._m0[14u].z, fma(_620, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _616)) + cbModelParam._m0[14u].w;
        float _1428 = fma(_624, cbModelParam._m0[15u].z, fma(_620, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _616)) + cbModelParam._m0[15u].w;
        float _1431 = fma(_562, cbModelParam._m0[13u].z, fma(_561, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _560));
        float _1434 = fma(_562, cbModelParam._m0[14u].z, fma(_561, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _560));
        float _1437 = fma(_562, cbModelParam._m0[15u].z, fma(_561, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _560));
        float _1465;
        if (_1431 > 0.0)
        {
            _1465 = abs((1.0 - _1420) / _1431);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1431 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1420 + 1.0) / _1431);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1465 = frontier_phi_14_12_ladder;
        }
        float _1639;
        if (_1434 > 0.0)
        {
            _1639 = abs((1.0 - _1424) / _1434);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1434 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1424 + 1.0) / _1434);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1639 = frontier_phi_23_19_ladder;
        }
        float _1935;
        if (_1437 > 0.0)
        {
            _1935 = abs((1.0 - _1428) / _1437);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1437 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1428 + 1.0) / _1437);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1935 = frontier_phi_35_30_ladder;
        }
        float _1937 = isnan(_1639) ? _1465 : (isnan(_1465) ? _1639 : min(_1465, _1639));
        float _1938 = isnan(_1935) ? _1937 : (isnan(_1937) ? _1935 : min(_1937, _1935));
        float _1942 = (_1938 * _1431) + _1420;
        float _1943 = (_1938 * _1434) + _1424;
        float _1944 = (_1938 * _1437) + _1428;
        float _1945 = _1938 * 9.9999997473787516355514526367188e-05;
        float _1947 = (-1.0) - _1945;
        float _1949 = _1945 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1944 > _1949) || ((_1944 < _1947) || ((_1943 > _1949) || ((_1943 < _1947) || ((_1942 < _1947) || (_1942 > _1949))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2089 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1944, cbModelParam._m0[9u].z, fma(_1943, cbModelParam._m0[9u].y, _1942 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1944, cbModelParam._m0[10u].z, fma(_1943, cbModelParam._m0[10u].y, _1942 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1944, cbModelParam._m0[11u].z, fma(_1943, cbModelParam._m0[11u].y, _1942 * cbModelParam._m0[11u].x))), _1373);
            frontier_phi_13_35_ladder = _2089.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2089.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2089.x * cbModelParam._m0[1u].y;
        }
        _1453 = frontier_phi_13_35_ladder_2;
        _1455 = frontier_phi_13_35_ladder_1;
        _1457 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1441 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_560, _561, _562), _1373);
        _1453 = _1441.x * cbModelParam._m0[1u].y;
        _1455 = _1441.y * cbModelParam._m0[1u].y;
        _1457 = _1441.z * cbModelParam._m0[1u].y;
    }
    float _1461 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _385);
    float _1462 = isnan(_1461) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1461 : min(cbModelParam._m0[25u].w, _1461));
    float _1553;
    float _1555;
    float _1557;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1517 = fma(_624, cbModelParam._m0[21u].z, fma(_620, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _616)) + cbModelParam._m0[21u].w;
        float _1521 = fma(_624, cbModelParam._m0[22u].z, fma(_620, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _616)) + cbModelParam._m0[22u].w;
        float _1525 = fma(_624, cbModelParam._m0[23u].z, fma(_620, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _616)) + cbModelParam._m0[23u].w;
        float _1528 = fma(_562, cbModelParam._m0[21u].z, fma(_561, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _560));
        float _1531 = fma(_562, cbModelParam._m0[22u].z, fma(_561, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _560));
        float _1534 = fma(_562, cbModelParam._m0[23u].z, fma(_561, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _560));
        float _1644;
        if (_1528 > 0.0)
        {
            _1644 = abs((1.0 - _1517) / _1528);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1528 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1517 + 1.0) / _1528);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1644 = frontier_phi_25_21_ladder;
        }
        float _1962;
        if (_1531 > 0.0)
        {
            _1962 = abs((1.0 - _1521) / _1531);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1531 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1521 + 1.0) / _1531);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1962 = frontier_phi_37_32_ladder;
        }
        float _2300;
        if (_1534 > 0.0)
        {
            _2300 = abs((1.0 - _1525) / _1534);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1534 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1525 + 1.0) / _1534);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2300 = frontier_phi_47_44_ladder;
        }
        float _2302 = isnan(_1962) ? _1644 : (isnan(_1644) ? _1962 : min(_1644, _1962));
        float _2303 = isnan(_2300) ? _2302 : (isnan(_2302) ? _2300 : min(_2302, _2300));
        float _2307 = (_2303 * _1528) + _1517;
        float _2308 = (_2303 * _1531) + _1521;
        float _2309 = (_2303 * _1534) + _1525;
        float _2310 = _2303 * 9.9999997473787516355514526367188e-05;
        float _2311 = (-1.0) - _2310;
        float _2313 = _2310 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2309 > _2313) || ((_2309 < _2311) || ((_2308 > _2313) || ((_2308 < _2311) || ((_2307 < _2311) || (_2307 > _2313))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2431 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2309, cbModelParam._m0[17u].z, fma(_2308, cbModelParam._m0[17u].y, _2307 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2309, cbModelParam._m0[18u].z, fma(_2308, cbModelParam._m0[18u].y, _2307 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2309, cbModelParam._m0[19u].z, fma(_2308, cbModelParam._m0[19u].y, _2307 * cbModelParam._m0[19u].x))), _1462);
            frontier_phi_22_47_ladder = _2431.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2431.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2431.x * cbModelParam._m0[1u].z;
        }
        _1553 = frontier_phi_22_47_ladder_2;
        _1555 = frontier_phi_22_47_ladder_1;
        _1557 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1537 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_560, _561, _562), _1462);
        _1553 = _1537.x * cbModelParam._m0[1u].z;
        _1555 = _1537.y * cbModelParam._m0[1u].z;
        _1557 = _1537.z * cbModelParam._m0[1u].z;
    }
    float _1570 = (((_587 * _537) + _588) * _552) * ((cbModelParam._m0[1u].w * (_1553 - _1453)) + _1453);
    float _1572 = (((_587 * _539) + _588) * _552) * ((cbModelParam._m0[1u].w * (_1555 - _1455)) + _1455);
    float _1574 = (((_587 * _540) + _588) * _552) * ((cbModelParam._m0[1u].w * (_1557 - _1457)) + _1457);
    float _1577 = fma(_1574, cbSceneParam._m0[89u].z, fma(_1572, cbSceneParam._m0[89u].y, _1570 * cbSceneParam._m0[89u].x));
    float _1580 = fma(_1574, cbSceneParam._m0[90u].z, fma(_1572, cbSceneParam._m0[90u].y, _1570 * cbSceneParam._m0[90u].x));
    float _1583 = fma(_1574, cbSceneParam._m0[91u].z, fma(_1572, cbSceneParam._m0[91u].y, _1570 * cbSceneParam._m0[91u].x));
    float _1618 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1622 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1626 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1630 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1631 = _1618 / _1630;
    float _1632 = _1622 / _1630;
    float _1633 = _1626 / _1630;
    float _1780;
    float _1781;
    float _1782;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1660 = ((uint(_1633 > cbSceneParam._m0[59u].y) + uint(_1633 > cbSceneParam._m0[59u].x)) + uint(_1633 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1661 = _1660 + 43u;
        uint _1669 = _1660 + 44u;
        uint _1677 = _1660 + 45u;
        uint _1685 = _1660 + 46u;
        float _1696 = fma(_1630, cbSceneParam._m0[_1661].w, fma(_1626, cbSceneParam._m0[_1661].z, fma(_1622, cbSceneParam._m0[_1661].y, _1618 * cbSceneParam._m0[_1661].x)));
        float _1700 = fma(_1630, cbSceneParam._m0[_1669].w, fma(_1626, cbSceneParam._m0[_1669].z, fma(_1622, cbSceneParam._m0[_1669].y, _1618 * cbSceneParam._m0[_1669].x)));
        float _1708 = fma(_1630, cbSceneParam._m0[_1685].w, fma(_1626, cbSceneParam._m0[_1685].z, fma(_1622, cbSceneParam._m0[_1685].y, _1618 * cbSceneParam._m0[_1685].x)));
        float _1713 = cbSceneParam._m0[33u].z * _1708;
        float _1715 = cbSceneParam._m0[33u].w * _1708;
        float _1718 = fma(_1630, cbSceneParam._m0[_1677].w, fma(_1626, cbSceneParam._m0[_1677].z, fma(_1622, cbSceneParam._m0[_1677].y, _1618 * cbSceneParam._m0[_1677].x))) / _1708;
        float _1766 = (cbSceneParam._m0[33u].x - sqrt(((_1632 * _1632) + (_1631 * _1631)) + (_1633 * _1633))) * cbSceneParam._m0[33u].y;
        float _4065 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1773 = (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1713 + _1696) / _1708, (_1715 + _1700) / _1708), _1718), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1715 + _1696) / _1708, (_1700 - _1713) / _1708), _1718), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1696 - _1713) / _1708, (_1700 - _1715) / _1708), _1718), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1696 - _1715) / _1708, (_1713 + _1700) / _1708), _1718), 0.0)).x), vec4(0.25)));
        _1780 = 1.0 - (_1773 * cbSceneParam._m0[34u].x);
        _1781 = 1.0 - (_1773 * cbSceneParam._m0[34u].y);
        _1782 = 1.0 - (_1773 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1780 = 1.0;
        _1781 = 1.0;
        _1782 = 1.0;
    }
    float _1846;
    float _1848;
    float _1850;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1834 = fma(_1630, cbSceneParam._m0[63u].w, fma(_1626, cbSceneParam._m0[63u].z, fma(_1622, cbSceneParam._m0[63u].y, _1618 * cbSceneParam._m0[63u].x)));
        float _1835 = fma(_1630, cbSceneParam._m0[60u].w, fma(_1626, cbSceneParam._m0[60u].z, fma(_1622, cbSceneParam._m0[60u].y, _1618 * cbSceneParam._m0[60u].x))) / _1834;
        float _1836 = fma(_1630, cbSceneParam._m0[61u].w, fma(_1626, cbSceneParam._m0[61u].z, fma(_1622, cbSceneParam._m0[61u].y, _1618 * cbSceneParam._m0[61u].x))) / _1834;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1835 >= cbSceneParam._m0[64u].x) && (_1836 >= cbSceneParam._m0[64u].y)) && (_1835 <= cbSceneParam._m0[64u].z)) && (_1836 <= cbSceneParam._m0[64u].w))
        {
            float _1975 = fma(_1630, cbSceneParam._m0[62u].w, fma(_1626, cbSceneParam._m0[62u].z, fma(_1622, cbSceneParam._m0[62u].y, _1618 * cbSceneParam._m0[62u].x))) / _1834;
            float _1979 = isnan(cbSceneParam._m0[41u].w) ? _1975 : (isnan(_1975) ? cbSceneParam._m0[41u].w : max(_1975, cbSceneParam._m0[41u].w));
            float _2022 = (cbSceneParam._m0[33u].x - sqrt(((_1632 * _1632) + (_1631 * _1631)) + (_1633 * _1633))) * cbSceneParam._m0[33u].y;
            float _4081 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
            float _2029 = (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1835, cbSceneParam._m0[33u].w + _1836), _1979), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1835, _1836 - cbSceneParam._m0[33u].z), _1979), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1835 - cbSceneParam._m0[33u].z, _1836 - cbSceneParam._m0[33u].w), _1979), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1835 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1836), _1979), 0.0)).x), vec4(0.25)));
            float _2033 = 1.0 - (_2029 * cbSceneParam._m0[34u].x);
            float _2034 = 1.0 - (_2029 * cbSceneParam._m0[34u].y);
            float _2035 = 1.0 - (_2029 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2035) ? _1782 : (isnan(_1782) ? _2035 : min(_1782, _2035));
            frontier_phi_34_33_ladder_1 = isnan(_2034) ? _1781 : (isnan(_1781) ? _2034 : min(_1781, _2034));
            frontier_phi_34_33_ladder_2 = isnan(_2033) ? _1780 : (isnan(_1780) ? _2033 : min(_1780, _2033));
        }
        else
        {
            frontier_phi_34_33_ladder = _1782;
            frontier_phi_34_33_ladder_1 = _1781;
            frontier_phi_34_33_ladder_2 = _1780;
        }
        _1846 = frontier_phi_34_33_ladder_2;
        _1848 = frontier_phi_34_33_ladder_1;
        _1850 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1846 = _1780;
        _1848 = _1781;
        _1850 = _1782;
    }
    uvec4 _1855 = floatBitsToUint(cbInstanceData._m0[_511 + 5u]);
    uint _1857 = _1855.x * 14u;
    uint _1858 = _1857 + 13u;
    float _1865 = _552 + (-1.0);
    float _1870 = (cbLight._m0[_1858].x * _1865) + 1.0;
    float _1871 = (cbLight._m0[_1858].y * _1865) + 1.0;
    float _1872 = (cbLight._m0[_1858].z * _1865) + 1.0;
    float _1873 = (cbLight._m0[_1858].w * _1865) + 1.0;
    uint _1874 = _1857 + 5u;
    float _1880 = isnan(1.0) ? _1871 : (isnan(_1871) ? 1.0 : min(_1871, 1.0));
    uint _1884 = _1857 + 4u;
    float _1894 = isnan(1.0) ? _1870 : (isnan(_1870) ? 1.0 : min(_1870, 1.0));
    uint _1898 = _1857 | 1u;
    float _1909 = dot(vec3(cbLight._m0[_1857].xyz), vec3(_382, _383, _384));
    float _1912 = dot(vec3(cbLight._m0[_1898].xyz), vec3(_382, _383, _384));
    float _4117 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _4128 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _1917 = (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * 0.3183098733425140380859375;
    float _1919 = (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * 0.3183098733425140380859375;
    float _1926 = ((cbLight._m0[_1874].x * _1880) * _1919) + (((cbLight._m0[_1884].x * _1846) * _1894) * _1917);
    float _1927 = ((_1880 * cbLight._m0[_1874].y) * _1919) + (((cbLight._m0[_1884].y * _1848) * _1894) * _1917);
    float _1928 = ((_1880 * cbLight._m0[_1874].z) * _1919) + (((cbLight._m0[_1884].z * _1850) * _1894) * _1917);
    uvec4 _1932 = floatBitsToUint(cbLight._m0[_1857 + 12u]);
    bool _1934 = _1932.x == 0u;
    float _2036;
    float _2038;
    float _2040;
    if (_1934)
    {
        _2036 = _1926;
        _2038 = _1927;
        _2040 = _1928;
    }
    else
    {
        uint _2044 = _1857 + 6u;
        float _2060 = (dot(vec3(cbLight._m0[_1857 + 2u].xyz), vec3(_382, _383, _384)) * 0.5) + 0.5;
        float _2061 = _2060 * _2060;
        float _4139 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
        float _2062 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _2063 = isnan(1.0) ? _1872 : (isnan(_1872) ? 1.0 : min(_1872, 1.0));
        _2036 = (((cbLight._m0[_2044].x * 0.3183098733425140380859375) * _2062) * _2063) + _1926;
        _2038 = (((cbLight._m0[_2044].y * 0.3183098733425140380859375) * _2062) * _2063) + _1927;
        _2040 = (((cbLight._m0[_2044].z * 0.3183098733425140380859375) * _2062) * _2063) + _1928;
    }
    bool _2043 = _1932.y == 0u;
    float _2098;
    float _2100;
    float _2102;
    if (_2043)
    {
        _2098 = _2036;
        _2100 = _2038;
        _2102 = _2040;
    }
    else
    {
        uint _2271 = _1857 + 7u;
        float _2287 = (dot(vec3(cbLight._m0[_1857 + 3u].xyz), vec3(_382, _383, _384)) * 0.5) + 0.5;
        float _2288 = _2287 * _2287;
        float _4155 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
        float _2289 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _2290 = isnan(1.0) ? _1873 : (isnan(_1873) ? 1.0 : min(_1873, 1.0));
        _2098 = (((cbLight._m0[_2271].x * 0.3183098733425140380859375) * _2289) * _2290) + _2036;
        _2100 = (((cbLight._m0[_2271].y * 0.3183098733425140380859375) * _2289) * _2290) + _2038;
        _2102 = (((cbLight._m0[_2271].z * 0.3183098733425140380859375) * _2289) * _2290) + _2040;
    }
    uint _2105 = _1857 + 8u;
    float _2118 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1857].w)) * _385) * 0.949999988079071044921875);
    float _2119 = _2118 * _2118;
    float _2120 = cbLight._m0[_1857].x + _463;
    float _2121 = cbLight._m0[_1857].y + _464;
    float _2122 = cbLight._m0[_1857].z + _465;
    float _2126 = inversesqrt(dot(vec3(_2120, _2121, _2122), vec3(_2120, _2121, _2122)));
    float _2127 = _2126 * _2120;
    float _2128 = _2126 * _2121;
    float _2129 = _2126 * _2122;
    float _2130 = dot(vec3(_382, _383, _384), vec3(cbLight._m0[_1857].xyz));
    float _4171 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2133 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _4182 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _2134 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _2135 = dot(vec3(_382, _383, _384), vec3(_2127, _2128, _2129));
    float _4193 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2138 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _2139 = dot(vec3(cbLight._m0[_1857].xyz), vec3(_2127, _2128, _2129));
    float _4204 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2143 = _2119 * _2119;
    float _2147 = ((_2138 * _2138) * (_2143 + (-1.0))) + 1.0;
    float _2155 = exp2(log2(1.0 - (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0)))) * 5.0);
    float _2156 = 0.959999978542327880859375 - _534;
    float _2158 = 0.959999978542327880859375 - _535;
    float _2159 = 0.959999978542327880859375 - _536;
    float _2166 = 1.0 - _2119;
    float _2177 = (0.5 / (((_2134 * ((_2133 * _2166) + _2119)) + 9.9999999392252902907785028219223e-09) + (((_2134 * _2166) + _2119) * _2133))) * _2133;
    float _4215 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2179 = (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_2143 / ((_2147 * _2147) * 3.141590118408203125));
    uint _2193 = _1857 + 9u;
    float _2204 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1898].w)) * _385) * 0.949999988079071044921875);
    float _2205 = _2204 * _2204;
    float _2206 = cbLight._m0[_1898].x + _463;
    float _2207 = cbLight._m0[_1898].y + _464;
    float _2208 = cbLight._m0[_1898].z + _465;
    float _2212 = inversesqrt(dot(vec3(_2206, _2207, _2208), vec3(_2206, _2207, _2208)));
    float _2213 = _2212 * _2206;
    float _2214 = _2212 * _2207;
    float _2215 = _2212 * _2208;
    float _2216 = dot(vec3(_382, _383, _384), vec3(cbLight._m0[_1898].xyz));
    float _4226 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _2219 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _2220 = dot(vec3(_382, _383, _384), vec3(_2213, _2214, _2215));
    float _4237 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2223 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
    float _2224 = dot(vec3(cbLight._m0[_1898].xyz), vec3(_2213, _2214, _2215));
    float _4248 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2228 = _2205 * _2205;
    float _2232 = ((_2223 * _2223) * (_2228 + (-1.0))) + 1.0;
    float _2239 = exp2(log2(1.0 - (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0)))) * 5.0);
    float _2246 = 1.0 - _2205;
    float _2256 = (0.5 / (((_2134 * ((_2219 * _2246) + _2205)) + 9.9999999392252902907785028219223e-09) + (((_2134 * _2246) + _2205) * _2219))) * _2219;
    float _4259 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2258 = (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * (_2228 / ((_2232 * _2232) * 3.141590118408203125));
    float _2268 = (((((_2239 * _2156) + _537) * cbLight._m0[_2193].x) * _2258) * _1880) + ((((cbLight._m0[_2105].x * _1846) * ((_2155 * _2156) + _537)) * _2179) * _1894);
    float _2269 = (((((_2239 * _2158) + _539) * cbLight._m0[_2193].y) * _2258) * _1880) + ((((cbLight._m0[_2105].y * _1848) * ((_2155 * _2158) + _539)) * _2179) * _1894);
    float _2270 = (((((_2239 * _2159) + _540) * cbLight._m0[_2193].z) * _2258) * _1880) + ((((cbLight._m0[_2105].z * _1850) * ((_2155 * _2159) + _540)) * _2179) * _1894);
    float _2326;
    float _2328;
    float _2330;
    if (_1934)
    {
        _2326 = _2268;
        _2328 = _2269;
        _2330 = _2270;
    }
    else
    {
        uint _2332 = _1857 + 2u;
        uint _2336 = _1857 + 10u;
        float _2350 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2332].w)) * _385) * 0.949999988079071044921875);
        float _2351 = _2350 * _2350;
        float _2352 = cbLight._m0[_2332].x + _463;
        float _2353 = cbLight._m0[_2332].y + _464;
        float _2354 = cbLight._m0[_2332].z + _465;
        float _2358 = inversesqrt(dot(vec3(_2352, _2353, _2354), vec3(_2352, _2353, _2354)));
        float _2359 = _2358 * _2352;
        float _2360 = _2358 * _2353;
        float _2361 = _2358 * _2354;
        float _2362 = dot(vec3(_382, _383, _384), vec3(cbLight._m0[_2332].xyz));
        float _4270 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2365 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _2366 = dot(vec3(_382, _383, _384), vec3(_2359, _2360, _2361));
        float _4281 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2369 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _2370 = dot(vec3(cbLight._m0[_2332].xyz), vec3(_2359, _2360, _2361));
        float _4292 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2374 = _2351 * _2351;
        float _2378 = ((_2369 * _2369) * (_2374 + (-1.0))) + 1.0;
        float _2385 = exp2(log2(1.0 - (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0)))) * 5.0);
        float _2392 = 1.0 - _2351;
        float _2402 = (0.5 / (((_2134 * ((_2365 * _2392) + _2351)) + 9.9999999392252902907785028219223e-09) + (((_2134 * _2392) + _2351) * _2365))) * _2365;
        float _4303 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2404 = (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_2374 / ((_2378 * _2378) * 3.141590118408203125));
        float _2405 = isnan(1.0) ? _1872 : (isnan(_1872) ? 1.0 : min(_1872, 1.0));
        _2326 = (((((_2385 * _2156) + _537) * cbLight._m0[_2336].x) * _2404) * _2405) + _2268;
        _2328 = (((((_2385 * _2158) + _539) * cbLight._m0[_2336].y) * _2404) * _2405) + _2269;
        _2330 = (((((_2385 * _2159) + _540) * cbLight._m0[_2336].z) * _2404) * _2405) + _2270;
    }
    float _2436;
    float _2438;
    float _2440;
    if (_2043)
    {
        _2436 = _2326;
        _2438 = _2328;
        _2440 = _2330;
    }
    else
    {
        uint _2447 = _1857 + 3u;
        uint _2451 = _1857 + 11u;
        float _2465 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2447].w)) * _385) * 0.949999988079071044921875);
        float _2466 = _2465 * _2465;
        float _2467 = cbLight._m0[_2447].x + _463;
        float _2468 = cbLight._m0[_2447].y + _464;
        float _2469 = cbLight._m0[_2447].z + _465;
        float _2473 = inversesqrt(dot(vec3(_2467, _2468, _2469), vec3(_2467, _2468, _2469)));
        float _2474 = _2473 * _2467;
        float _2475 = _2473 * _2468;
        float _2476 = _2473 * _2469;
        float _2477 = dot(vec3(_382, _383, _384), vec3(cbLight._m0[_2447].xyz));
        float _4319 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2480 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _2481 = dot(vec3(_382, _383, _384), vec3(_2474, _2475, _2476));
        float _4330 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2484 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _2485 = dot(vec3(cbLight._m0[_2447].xyz), vec3(_2474, _2475, _2476));
        float _4341 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2489 = _2466 * _2466;
        float _2493 = ((_2484 * _2484) * (_2489 + (-1.0))) + 1.0;
        float _2500 = exp2(log2(1.0 - (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0)))) * 5.0);
        float _2507 = 1.0 - _2466;
        float _2517 = (0.5 / (((_2134 * ((_2480 * _2507) + _2466)) + 9.9999999392252902907785028219223e-09) + (((_2134 * _2507) + _2466) * _2480))) * _2480;
        float _4352 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2519 = (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_2489 / ((_2493 * _2493) * 3.141590118408203125));
        float _2520 = isnan(1.0) ? _1873 : (isnan(_1873) ? 1.0 : min(_1873, 1.0));
        _2436 = (((((_2500 * _2156) + _537) * cbLight._m0[_2451].x) * _2519) * _2520) + _2326;
        _2438 = (((((_2500 * _2158) + _539) * cbLight._m0[_2451].y) * _2519) * _2520) + _2328;
        _2440 = (((((_2500 * _2159) + _540) * cbLight._m0[_2451].z) * _2519) * _2520) + _2330;
    }
    float _2586;
    float _2588;
    float _2590;
    float _2592;
    float _2594;
    float _2596;
    if (_1855.y == 0u)
    {
        uvec4 _2541 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2542 = _2541.x;
        uint _2553 = uint((float(_2541.y) * floor(float(uint(cbSceneParam._m0[85u].y * _472) / _2542))) + floor(float(uint(cbSceneParam._m0[85u].x * _471) / _2542)));
        float _2563 = (log2(_1633 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2564 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        uint _2567 = uint(isnan(14.0) ? _2564 : (isnan(_2564) ? 14.0 : min(_2564, 14.0)));
        uvec4 _2572 = texelFetch(g_lightClusterGridBuffer, int(((_2567 << 2u) + (_2553 << 6u)) >> 2u));
        uint _2573 = _2572.x;
        uint _2574 = _2541.z;
        float _2688;
        float _2690;
        float _2692;
        float _2694;
        float _2696;
        float _2698;
        if (((((1u << ((_2574 >> 4u) & 15u)) + 4294967295u) & _2573) == 0u) || ((_2574 & 240u) == 0u))
        {
            _2688 = 0.0;
            _2690 = 0.0;
            _2692 = 0.0;
            _2694 = 0.0;
            _2696 = 0.0;
            _2698 = 0.0;
        }
        else
        {
            float _2689;
            float _2691;
            float _2693;
            float _2695;
            float _2697;
            float _2699;
            float _2842 = 0.0;
            float _2843 = 0.0;
            float _2844 = 0.0;
            float _2845 = 0.0;
            float _2846 = 0.0;
            float _2847 = 0.0;
            uint _2848 = 0u;
            uint _2857;
            bool _2858;
            for (;;)
            {
                _2857 = texelFetch(g_lightClassification, int((((_2567 << 5u) + (_2553 << 9u)) + (_2848 << 2u)) >> 2u)).x;
                _2858 = _2857 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2858)
                {
                    frontier_phi_66_pred = _2847;
                    frontier_phi_66_pred_1 = _2846;
                    frontier_phi_66_pred_2 = _2845;
                    frontier_phi_66_pred_3 = _2844;
                    frontier_phi_66_pred_4 = _2843;
                    frontier_phi_66_pred_5 = _2842;
                }
                else
                {
                    float _2966;
                    float _2967;
                    float _2968;
                    float _2969;
                    float _2970;
                    float _2971;
                    uint _2972;
                    _2966 = _2842;
                    _2967 = _2843;
                    _2968 = _2844;
                    _2969 = _2845;
                    _2970 = _2846;
                    _2971 = _2847;
                    _2972 = _2857;
                    float _2898;
                    float _2899;
                    float _2900;
                    float _2901;
                    float _2902;
                    float _2903;
                    for (;;)
                    {
                        uint _2976 = uint(findLSB(_2972)) + (_2848 << 5u);
                        uint _2973 = (_2972 + 4294967295u) & _2972;
                        uint _2978 = _2976 * 48u;
                        vec4 _2992 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2978)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 3u)).x));
                        uint _2998 = (_2976 * 48u) + 4u;
                        vec4 _3011 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2998)).x, texelFetch(g_PointLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2998 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2998 + 3u)).x));
                        uint _3017 = (_2976 * 48u) + 8u;
                        vec3 _3028 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3017)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 2u)).x));
                        float _3032 = _2992.x - _1631;
                        float _3033 = _2992.y - _1632;
                        float _3034 = _2992.z - _1633;
                        float _3035 = dot(vec3(_3032, _3033, _3034), vec3(_3032, _3033, _3034));
                        float _3038 = inversesqrt(_3035);
                        float _3039 = _3038 * _3032;
                        float _3040 = _3038 * _3033;
                        float _3041 = _3038 * _3034;
                        float _3042 = dot(vec3(_492, _495, _498), vec3(_3039, _3040, _3041));
                        float _3047 = 1.0 - (_3035 * _2992.w);
                        float _4378 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
                        float _3048 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                        float _3049 = sqrt(_3035) * _3011.w;
                        float _3052 = 1.39999997615814208984375 / (_3049 + 1.39999997615814208984375);
                        float _3053 = _3052 * _3052;
                        float _3056 = ((1.0 - _3053) * _3042) + _3053;
                        float _3059 = _3049 * _3049;
                        float _3063 = ((isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0))) * _3048) / ((_3059 * 0.699999988079071044921875) + 1.0);
                        float _3067 = (-0.0) - _1631;
                        float _3068 = (-0.0) - _1632;
                        float _3069 = (-0.0) - _1633;
                        float _3073 = inversesqrt(dot(vec3(_3067, _3068, _3069), vec3(_3067, _3068, _3069)));
                        float _3074 = _3073 * _3067;
                        float _3075 = _3073 * _3068;
                        float _3076 = _3073 * _3069;
                        float _3083 = exp2(log2(1.0 / ((_3059 * 3.5) + 5.0)) * 0.25);
                        float _3084 = 1.0 - _568;
                        float _3091 = sqrt(1.0 - ((1.0 - (_3084 * _3084)) * (1.0 - (_3083 * _3083))));
                        float _3092 = _3091 * _3091;
                        float _3093 = _3092 * _3092;
                        float _3094 = _3074 + _3039;
                        float _3095 = _3075 + _3040;
                        float _3096 = _3076 + _3041;
                        float _3100 = inversesqrt(dot(vec3(_3094, _3095, _3096), vec3(_3094, _3095, _3096)));
                        float _3104 = dot(vec3(_492, _495, _498), vec3(_3074, _3075, _3076));
                        float _4394 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                        float _3107 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
                        float _3108 = dot(vec3(_492, _495, _498), vec3(_3100 * _3094, _3100 * _3095, _3100 * _3096));
                        float _4405 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                        float _3111 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
                        float _3115 = ((_3111 * _3111) * (_3093 + (-1.0))) + 1.0;
                        float _3116 = _3052 * _3092;
                        float _3117 = _3116 * _3116;
                        float _3120 = ((1.0 - _3117) * _3042) + _3117;
                        float _4416 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                        float _3121 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
                        float _3122 = 1.0 - _3092;
                        float _3132 = (0.5 / (((_3121 * ((_3107 * _3122) + _3092)) + 9.9999999392252902907785028219223e-09) + (((_3121 * _3122) + _3092) * _3107))) * _3121;
                        float _4427 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                        float _3143 = (((_3093 * 3.1415927410125732421875) * (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0)))) / ((_3115 * _3115) * ((_3059 * 2.1991131305694580078125) + 3.141590118408203125))) * _3048;
                        _2901 = (_3063 * _3011.x) + _2969;
                        _2902 = (_3063 * _3011.y) + _2970;
                        _2903 = (_3063 * _3011.z) + _2971;
                        _2898 = (_3143 * _3028.x) + _2966;
                        _2899 = (_3143 * _3028.y) + _2967;
                        _2900 = (_3143 * _3028.z) + _2968;
                        if (_2973 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2966 = _2898;
                            _2967 = _2899;
                            _2968 = _2900;
                            _2969 = _2901;
                            _2970 = _2902;
                            _2971 = _2903;
                            _2972 = _2973;
                        }
                    }
                    frontier_phi_66_pred = _2903;
                    frontier_phi_66_pred_1 = _2902;
                    frontier_phi_66_pred_2 = _2901;
                    frontier_phi_66_pred_3 = _2900;
                    frontier_phi_66_pred_4 = _2899;
                    frontier_phi_66_pred_5 = _2898;
                }
                _2699 = frontier_phi_66_pred;
                _2697 = frontier_phi_66_pred_1;
                _2695 = frontier_phi_66_pred_2;
                _2693 = frontier_phi_66_pred_3;
                _2691 = frontier_phi_66_pred_4;
                _2689 = frontier_phi_66_pred_5;
                uint _2849 = _2848 + 1u;
                if (_2849 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2842 = _2689;
                    _2843 = _2691;
                    _2844 = _2693;
                    _2845 = _2695;
                    _2846 = _2697;
                    _2847 = _2699;
                    _2848 = _2849;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2688 = _2689;
            _2690 = _2691;
            _2692 = _2693;
            _2694 = _2695;
            _2696 = _2697;
            _2698 = _2699;
        }
        uvec4 _2702 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2703 = _2702.z;
        uint _2705 = (_2703 >> 8u) & 15u;
        float _2810;
        float _2812;
        float _2814;
        float _2816;
        float _2818;
        float _2820;
        if (((4294967295u << _2705) & _2573) == 0u)
        {
            _2810 = _2688;
            _2812 = _2690;
            _2814 = _2692;
            _2816 = _2694;
            _2818 = _2696;
            _2820 = _2698;
        }
        else
        {
            float _2835 = inversesqrt(dot(vec3(_1631, _1632, _1633), vec3(_1631, _1632, _1633)));
            float _2836 = _2835 * _1631;
            float _2837 = _2835 * _1632;
            float _2838 = _2835 * _1633;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2705 < ((_2703 >> 12u) & 15u))
            {
                float _2811;
                float _2813;
                float _2815;
                float _2817;
                float _2819;
                float _2821;
                float _2949 = _2688;
                float _2950 = _2690;
                float _2951 = _2692;
                float _2952 = _2694;
                float _2953 = _2696;
                float _2954 = _2698;
                uint _2955 = _2705;
                uint _2964;
                bool _2965;
                for (;;)
                {
                    _2964 = texelFetch(g_lightClassification, int((((_2567 << 5u) + (_2553 << 9u)) + (_2955 << 2u)) >> 2u)).x;
                    _2965 = _2964 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2965)
                    {
                        frontier_phi_72_pred = _2954;
                        frontier_phi_72_pred_1 = _2953;
                        frontier_phi_72_pred_2 = _2952;
                        frontier_phi_72_pred_3 = _2951;
                        frontier_phi_72_pred_4 = _2950;
                        frontier_phi_72_pred_5 = _2949;
                    }
                    else
                    {
                        float _3148;
                        float _3149;
                        float _3150;
                        float _3151;
                        float _3152;
                        float _3153;
                        float _3443;
                        float _3444;
                        float _3445;
                        float _3446;
                        float _3447;
                        float _3448;
                        float _3161 = _2949;
                        float _3162 = _2950;
                        float _3163 = _2951;
                        float _3164 = _2952;
                        float _3165 = _2953;
                        float _3166 = _2954;
                        uint _3167 = _2964;
                        uint _3168;
                        vec4 _3193;
                        float _3194;
                        vec4 _3209;
                        vec3 _3221;
                        vec4 _3236;
                        vec4 _3252;
                        float _3299;
                        bool _3300;
                        for (;;)
                        {
                            uint _3178 = ((_2955 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3167));
                            _3168 = (_3167 + 4294967295u) & _3167;
                            uint _3180 = _3178 * 40u;
                            _3193 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3180)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 3u)).x));
                            _3194 = _3193.w;
                            uint _3196 = (_3178 * 40u) + 4u;
                            _3209 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3196)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 3u)).x));
                            uint _3211 = (_3178 * 40u) + 8u;
                            _3221 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3211)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 2u)).x));
                            uint _3223 = (_3178 * 40u) + 16u;
                            _3236 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3223)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 3u)).x));
                            uint _3239 = (_3178 * 40u) + 20u;
                            _3252 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3239)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 3u)).x));
                            uint _3255 = (_3178 * 40u) + 24u;
                            vec4 _3268 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3255)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 3u)).x));
                            uint _3274 = (_3178 * 40u) + 28u;
                            vec4 _3287 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3274)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 3u)).x));
                            _3299 = fma(_1633, _3287.z, fma(_1632, _3287.y, _3287.x * _1631)) + _3287.w;
                            _3300 = !((fma(_1633, _3268.z, fma(_1632, _3268.y, _3268.x * _1631)) + _3268.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3300)
                            {
                                float _3327 = _3193.x - _1631;
                                float _3328 = _3193.y - _1632;
                                float _3329 = _3193.z - _1633;
                                float _3330 = dot(vec3(_3327, _3328, _3329), vec3(_3327, _3328, _3329));
                                float _3333 = inversesqrt(_3330);
                                float _3334 = _3333 * _3327;
                                float _3335 = _3333 * _3328;
                                float _3336 = _3333 * _3329;
                                float _3340 = 1.0 - (_3330 / (_3194 * _3194));
                                float _4438 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                                float _3341 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
                                float _3345 = sqrt(_3330) * _3209.w;
                                float _3347 = 1.39999997615814208984375 / (_3345 + 1.39999997615814208984375);
                                float _3348 = _3347 * _3347;
                                float _3351 = ((1.0 - _3348) * dot(vec3(_3334, _3335, _3336), vec3(_492, _495, _498))) + _3348;
                                float _3354 = _3345 * _3345;
                                float _3358 = (fma(_1633, _3236.z, fma(_1632, _3236.y, _3236.x * _1631)) + _3236.w) / _3299;
                                float _3359 = (fma(_1633, _3252.z, fma(_1632, _3252.y, _3252.x * _1631)) + _3252.w) / _3299;
                                float _3363 = 1.0 - dot(vec2(_3358, _3359), vec2(_3358, _3359));
                                float _4454 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                                float _3364 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
                                float _3365 = _3364 * (((isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0))) * _3341) / ((_3354 * 0.699999988079071044921875) + 1.0));
                                float _3377 = exp2(log2(1.0 / ((_3354 * 3.5) + 5.0)) * 0.25);
                                float _3378 = 1.0 - _568;
                                float _3385 = sqrt(1.0 - ((1.0 - (_3378 * _3378)) * (1.0 - (_3377 * _3377))));
                                float _3386 = _3385 * _3385;
                                float _3387 = _3386 * _3386;
                                float _3388 = _3334 - _2836;
                                float _3389 = _3335 - _2837;
                                float _3390 = _3336 - _2838;
                                float _3394 = inversesqrt(dot(vec3(_3388, _3389, _3390), vec3(_3388, _3389, _3390)));
                                float _3398 = dot(vec3(_492, _495, _498), vec3((-0.0) - _2836, (-0.0) - _2837, (-0.0) - _2838));
                                float _4465 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                                float _3401 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
                                float _3402 = dot(vec3(_492, _495, _498), vec3(_3394 * _3388, _3394 * _3389, _3394 * _3390));
                                float _4476 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                                float _3405 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
                                float _3409 = ((_3405 * _3405) * (_3387 + (-1.0))) + 1.0;
                                float _3410 = _3347 * _3386;
                                float _3411 = _3410 * _3410;
                                float _3417 = ((1.0 - _3411) * dot(vec3(_492, _495, _498), vec3(_3334, _3335, _3336))) + _3411;
                                float _4487 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                                float _3418 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                                float _3419 = 1.0 - _3386;
                                float _3429 = (0.5 / (((_3418 * ((_3401 * _3419) + _3386)) + 9.9999999392252902907785028219223e-09) + (((_3418 * _3419) + _3386) * _3401))) * _3418;
                                float _4498 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                                float _3439 = (_3364 * _3341) * (((_3387 * 3.1415927410125732421875) * (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0)))) / ((_3409 * _3409) * ((_3354 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3365 * _3209.y;
                                frontier_phi_78_pred_1 = _3365 * _3209.x;
                                frontier_phi_78_pred_2 = _3439 * _3221.z;
                                frontier_phi_78_pred_3 = _3439 * _3221.y;
                                frontier_phi_78_pred_4 = _3439 * _3221.x;
                                frontier_phi_78_pred_5 = _3365 * _3209.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3447 = frontier_phi_78_pred;
                            _3446 = frontier_phi_78_pred_1;
                            _3445 = frontier_phi_78_pred_2;
                            _3444 = frontier_phi_78_pred_3;
                            _3443 = frontier_phi_78_pred_4;
                            _3448 = frontier_phi_78_pred_5;
                            _3151 = _3446 + _3164;
                            _3152 = _3447 + _3165;
                            _3153 = _3448 + _3166;
                            _3148 = _3443 + _3161;
                            _3149 = _3444 + _3162;
                            _3150 = _3445 + _3163;
                            if (_3168 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3161 = _3148;
                                _3162 = _3149;
                                _3163 = _3150;
                                _3164 = _3151;
                                _3165 = _3152;
                                _3166 = _3153;
                                _3167 = _3168;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3153;
                        frontier_phi_72_pred_1 = _3152;
                        frontier_phi_72_pred_2 = _3151;
                        frontier_phi_72_pred_3 = _3150;
                        frontier_phi_72_pred_4 = _3149;
                        frontier_phi_72_pred_5 = _3148;
                    }
                    _2821 = frontier_phi_72_pred;
                    _2819 = frontier_phi_72_pred_1;
                    _2817 = frontier_phi_72_pred_2;
                    _2815 = frontier_phi_72_pred_3;
                    _2813 = frontier_phi_72_pred_4;
                    _2811 = frontier_phi_72_pred_5;
                    uint _2956 = _2955 + 1u;
                    if (_2956 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2949 = _2811;
                        _2950 = _2813;
                        _2951 = _2815;
                        _2952 = _2817;
                        _2953 = _2819;
                        _2954 = _2821;
                        _2955 = _2956;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2821;
                frontier_phi_60_61_ladder_1 = _2819;
                frontier_phi_60_61_ladder_2 = _2815;
                frontier_phi_60_61_ladder_3 = _2813;
                frontier_phi_60_61_ladder_4 = _2811;
                frontier_phi_60_61_ladder_5 = _2817;
            }
            else
            {
                frontier_phi_60_61_ladder = _2698;
                frontier_phi_60_61_ladder_1 = _2696;
                frontier_phi_60_61_ladder_2 = _2692;
                frontier_phi_60_61_ladder_3 = _2690;
                frontier_phi_60_61_ladder_4 = _2688;
                frontier_phi_60_61_ladder_5 = _2694;
            }
            _2810 = frontier_phi_60_61_ladder_4;
            _2812 = frontier_phi_60_61_ladder_3;
            _2814 = frontier_phi_60_61_ladder_2;
            _2816 = frontier_phi_60_61_ladder_5;
            _2818 = frontier_phi_60_61_ladder_1;
            _2820 = frontier_phi_60_61_ladder;
        }
        float _2825 = isnan(1.0) ? _552 : (isnan(_552) ? 1.0 : min(_552, 1.0));
        _2586 = (_2825 * _2816) + _2098;
        _2588 = (_2825 * _2818) + _2100;
        _2590 = (_2825 * _2820) + _2102;
        _2592 = ((_2810 * _537) * _2825) + _2436;
        _2594 = ((_2812 * _539) * _2825) + _2438;
        _2596 = ((_2814 * _540) * _2825) + _2440;
    }
    else
    {
        _2586 = _2098;
        _2588 = _2100;
        _2590 = _2102;
        _2592 = _2436;
        _2594 = _2438;
        _2596 = _2440;
    }
    uint _2602 = _513 + uint(cbMatDynParam._m0[0u].w);
    float _2610 = ((_368 * cbMtdParam._m0[11u].x) * (_352.x + _337.x)) * cbInstanceData._m0[_2602].x;
    float _2613 = ((_368 * cbMtdParam._m0[11u].y) * (_352.y + _337.y)) * cbInstanceData._m0[_2602].y;
    float _2616 = ((_368 * cbMtdParam._m0[11u].z) * (_352.z + _337.z)) * cbInstanceData._m0[_2602].z;
    float _4514 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _4525 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _4536 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _2633 = (((isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * (_2586 + ((isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0))) * _552))) + ((_2592 + ((isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0))) * _1362)) * cbPerFrame._m0[3u].x)) + _2610;
    float _2635 = (_2613 + ((_2594 + ((isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))) * _1362)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_2588 + ((isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0))) * _552)));
    float _2637 = (_2616 + ((_2596 + ((isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))) * _1362)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * (_2590 + ((isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0))) * _552)));
    float _4562 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2650 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
    uint _2651 = _511 + 6u;
    float _2659 = _471 / cbSceneParam._m0[86u].x;
    float _2660 = _472 / cbSceneParam._m0[86u].y;
    vec4 _2674 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2659, _2660, (log2((isnan(cbSceneParam._m0[77u].w) ? _405 : (isnan(_405) ? cbSceneParam._m0[77u].w : min(_405, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2676 = _2674.x;
    float _2677 = _2674.y;
    float _2678 = _2674.z;
    float _2679 = _2674.w;
    float _2751;
    float _2753;
    float _2755;
    float _2757;
    if (_405 > cbSceneParam._m0[78u].w)
    {
        float _2713 = isnan(_405) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _405 : min(cbSceneParam._m0[80u].w, _405));
        float _2714 = _2713 / _405;
        float _2725 = _2714 * _456;
        float _2726 = _457 * _2714;
        float _2727 = (-0.0) - _2726;
        float _2729 = _2714 * _458;
        float _2731 = (cbSceneParam._m0[77u].w * _2727) / _2713;
        float _2732 = _2731 + cbSceneParam._m0[79u].w;
        float _2733 = cbSceneParam._m0[79u].w - _2726;
        float _2739 = sqrt(((_2725 * _2725) + (_2726 * _2726)) + (_2729 * _2729));
        float _2742 = (1.0 - (cbSceneParam._m0[77u].w / _2713)) * _2739;
        float _2747 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2749 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2911;
        if (abs((_2727 - _2731) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2911 = ((((_2732 > 0.0) ? exp2(_2747 * _2732) : (2.0 - exp2(_2749 * _2732))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2742;
        }
        else
        {
            float _2871 = 1.0 / cbSceneParam._m0[80u].x;
            float _2872 = isnan(_2733) ? _2732 : (isnan(_2732) ? _2733 : max(_2732, _2733));
            float _2873 = isnan(_2733) ? _2732 : (isnan(_2732) ? _2733 : min(_2732, _2733));
            float _2882 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : min(_2872, 0.0));
            float _2883 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : min(_2873, 0.0));
            _2911 = ((abs(_2739 / _2727) * cbSceneParam._m0[80u].y) * ((((_2882 - _2883) * 2.0) - ((exp2(_2747 * (isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0)))) - exp2(_2747 * (isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0))))) * _2871)) - ((exp2(_2749 * _2882) - exp2(_2749 * _2883)) * _2871))) + (_2742 * cbSceneParam._m0[80u].z);
        }
        vec4 _2913 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2659, _2660, 1.0), 0.0);
        float _2922 = exp2((_2911 * (-1.44269502162933349609375)) * (1.0 - _2913.w));
        float _2923 = log2(_2922);
        float _2939 = log2(_2679);
        _2751 = (exp2(_2939 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2923 * cbSceneParam._m0[78u].x)) * _2913.x) / cbSceneParam._m0[78u].x)) + _2676;
        _2753 = (exp2(_2939 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2923 * cbSceneParam._m0[78u].y)) * _2913.y) / cbSceneParam._m0[78u].y)) + _2677;
        _2755 = (exp2(_2939 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2923 * cbSceneParam._m0[78u].z)) * _2913.z) / cbSceneParam._m0[78u].z)) + _2678;
        _2757 = _2922 * _2679;
    }
    else
    {
        _2751 = _2676;
        _2753 = _2677;
        _2755 = _2678;
        _2757 = _2679;
    }
    float _2769 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2770 = _2769 == 3.0;
    float _2771 = log2(_2757);
    float _2775 = exp2(_2771 * cbSceneParam._m0[78u].x);
    float _2776 = exp2(_2771 * cbSceneParam._m0[78u].y);
    float _2777 = exp2(_2771 * cbSceneParam._m0[78u].z);
    float _2778 = _2775 * (isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0)));
    float _2779 = _2776 * (isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0)));
    float _2780 = _2777 * (isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0)));
    float _2789 = (_2769 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2789 * (_2770 ? _2778 : (_2778 + (cbSceneParam._m0[72u].w * _2751)));
    SV_Target.y = _2789 * (_2770 ? _2779 : (_2779 + (cbSceneParam._m0[72u].w * _2753)));
    SV_Target.z = _2789 * (_2770 ? _2780 : (_2780 + (cbSceneParam._m0[72u].w * _2755)));
    SV_Target.w = cbInstanceData._m0[_2651].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2610) * _2650) * _2775) * _2789;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2613) * _2650) * _2776) * _2789;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2616) * _2650) * _2777) * _2789;
    SV_Target_1.w = cbInstanceData._m0[_2651].w;
}


