#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1040;
float _3472;
float _3473;
float _3474;
float _3475;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _243 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _249 = _243.x * cbMtdParam._m0[9u].x;
    float _250 = _243.y * cbMtdParam._m0[9u].y;
    float _251 = _243.z * cbMtdParam._m0[9u].z;
    vec4 _289 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _305 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3484 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _306 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
    float _313 = (((_289.x * cbMtdParam._m0[10u].x) - _249) * _306) + _249;
    float _314 = (((_289.y * cbMtdParam._m0[10u].y) - _250) * _306) + _250;
    float _315 = (((_289.z * cbMtdParam._m0[10u].z) - _251) * _306) + _251;
    vec4 _335 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _350 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _358 = (_350.x * 2.0) + (-1.0);
    float _360 = (_350.y * 2.0) + (-1.0);
    float _361 = dot(vec2(_358, _360), vec2(_358, _360));
    float _3495 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    vec4 _378 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _382 = _378.z;
    float _385 = (_378.x * 2.0) + (-1.0);
    float _386 = (_378.y * 2.0) + (-1.0);
    float _387 = dot(vec2(_385, _386), vec2(_385, _386));
    float _3506 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _392 = sqrt(1.0 - (isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))));
    float _395 = (_306 * (_350.z - _382)) + _382;
    vec4 _422 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _437 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _451 = (TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_335.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].x + 1.0);
    float _3517 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _452 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
    float _459 = (_306 * (_358 - _385)) + _385;
    float _460 = (_306 * (_360 - _386)) + _386;
    float _461 = (_306 * (sqrt(1.0 - (isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0)))) - _392)) + _392;
    float _464 = fma(_461, _214 * NORMAL.x, fma(_460, _221 * TANGENT.x, (_207 * _199) * _459));
    float _467 = fma(_461, _214 * NORMAL.y, fma(_460, _221 * TANGENT.y, (_207 * _200) * _459));
    float _470 = fma(_461, _214 * NORMAL.z, fma(_460, _221 * TANGENT.z, (_207 * _201) * _459));
    float _474 = inversesqrt(dot(vec3(_464, _467, _470), vec3(_464, _467, _470)));
    float _475 = _474 * _464;
    float _476 = _474 * _467;
    float _477 = _474 * _470;
    float _3528 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _478 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
    float _3539 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _3550 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _3561 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _497 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _538 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _548 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _538);
    float _549 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _538);
    float _550 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _538);
    float _554 = inversesqrt(dot(vec3(_548, _549, _550), vec3(_548, _549, _550)));
    float _555 = _548 * _554;
    float _556 = _549 * _554;
    float _557 = _550 * _554;
    vec4 _562 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _564 = _562.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _720 = sqrt(((_548 * _548) + (_549 * _549)) + (_550 * _550));
        float _726 = (cbMatDynParam._m0[5u].x * _720) + cbMatDynParam._m0[5u].y;
        float _3572 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _727 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
        float _731 = (cbMatDynParam._m0[5u].z * _720) + cbMatDynParam._m0[5u].w;
        float _3583 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0))) - _727)) + _727) < ((_564 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _576 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _577 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _596 = fma(_477, cbSceneParam._m0[5u].z, fma(_476, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _475));
    float _599 = fma(_477, cbSceneParam._m0[6u].z, fma(_476, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _475));
    float _602 = fma(_477, cbSceneParam._m0[7u].z, fma(_476, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _475));
    uint _615 = uint(roundEven(NORMAL.w)) * 13u;
    uint _616 = _615 + 9u;
    uint _617 = _616 + uint(cbMatDynParam._m0[0u].w);
    float _623 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0)))) * cbInstanceData._m0[_617].x;
    float _624 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0)))) * cbInstanceData._m0[_617].y;
    float _625 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0)))) * cbInstanceData._m0[_617].z;
    float _3594 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _626 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
    float _3605 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _627 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
    float _3616 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _628 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
    vec4 _637 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _576, cbSceneParam._m0[86u].y * _577));
    float _640 = _637.x * TEXCOORD_3.w;
    float _641 = dot(vec3(_475, _476, _477), vec3(_555, _556, _557));
    float _644 = _641 * 2.0;
    float _648 = (_644 * _475) - _555;
    float _649 = (_644 * _476) - _556;
    float _650 = (_644 * _477) - _557;
    float _654 = abs(dot(vec3(_555, _556, _557), vec3(_475, _476, _477)));
    float _3627 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _656 = sqrt(_478);
    float _669 = exp2((_656 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_656 * 3.0));
    float _701 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _705 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _709 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1039;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _764 = fma(_709, cbModelParam._m0[26u].z, fma(_705, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _701));
        float _768 = fma(_709, cbModelParam._m0[27u].z, fma(_705, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _701));
        float _772 = fma(_709, cbModelParam._m0[28u].z, fma(_705, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _701));
        float _797 = _701 + _475;
        float _798 = _705 + _476;
        float _799 = _709 + _477;
        float _809 = fma(_799, cbModelParam._m0[26u].z, fma(_798, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _797)) - _764;
        float _810 = fma(_799, cbModelParam._m0[27u].z, fma(_798, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _797)) - _768;
        float _811 = fma(_799, cbModelParam._m0[28u].z, fma(_798, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _797)) - _772;
        float _815 = inversesqrt(dot(vec3(_809, _810, _811), vec3(_809, _810, _811)));
        float _828 = ((_815 * _809) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_764 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _829 = ((_815 * _810) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_768 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _830 = ((_815 * _811) / cbModelParam._m0[34u].z) + ((((((_772 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _833 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_828, _829, _830), 0.0);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_828, _829, _830), 0.0);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_828, _829, _830), 0.0);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_828, _829, _830), 0.0);
        float _867 = exp2((_833.w + (-0.5)) * 20.0) * 2.0;
        float _868 = _867 * (_833.x + (-0.5));
        float _869 = _867 * (_833.y + (-0.5));
        float _870 = _867 * (_833.z + (-0.5));
        float _877 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _878 = _877 * (_840.x + (-0.5));
        float _879 = _877 * (_840.y + (-0.5));
        float _880 = _877 * (_840.z + (-0.5));
        float _887 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _888 = _887 * (_847.x + (-0.5));
        float _889 = _887 * (_847.y + (-0.5));
        float _890 = _887 * (_847.z + (-0.5));
        float _897 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _898 = _897 * (_854.x + (-0.5));
        float _899 = _897 * (_854.y + (-0.5));
        float _900 = _897 * (_854.z + (-0.5));
        float _901 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _902 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _903 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _904 = _868 * 0.5;
        float _905 = _878 * 0.5;
        float _906 = _888 * 0.5;
        float _907 = dot(vec3(_904, _905, _906), vec3(_904, _905, _906));
        float _912 = (_907 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_907);
        float _921 = (dot(vec3(_475, _476, _477), vec3(_912 * _904, _912 * _905, _912 * _906)) + 1.0) * 0.5;
        float _3653 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _931 = sqrt(((_905 * _905) + (_904 * _904)) + (_906 * _906)) / (_901 + 9.9999997473787516355514526367188e-06);
        float _3664 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _933 = _932 * 2.0;
        float _937 = (1.0 - _932) / (_932 + 1.0);
        float _3675 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _947 = ((((1.0 - _938) * (_933 + 2.0)) * exp2(log2(isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))) * (_933 + 1.0))) + _938) * _901;
        float _948 = _869 * 0.5;
        float _949 = _879 * 0.5;
        float _950 = _889 * 0.5;
        float _951 = dot(vec3(_948, _949, _950), vec3(_948, _949, _950));
        float _956 = (_951 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_951);
        float _964 = (dot(vec3(_475, _476, _477), vec3(_956 * _948, _956 * _949, _956 * _950)) + 1.0) * 0.5;
        float _3686 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _973 = sqrt(((_949 * _949) + (_948 * _948)) + (_950 * _950)) / (_902 + 9.9999997473787516355514526367188e-06);
        float _3697 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _975 = _974 * 2.0;
        float _979 = (1.0 - _974) / (_974 + 1.0);
        float _3708 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _989 = ((((1.0 - _980) * (_975 + 2.0)) * exp2(log2(isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * (_975 + 1.0))) + _980) * _902;
        float _990 = _870 * 0.5;
        float _991 = _880 * 0.5;
        float _992 = _890 * 0.5;
        float _993 = dot(vec3(_990, _991, _992), vec3(_990, _991, _992));
        float _998 = (_993 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_993);
        float _1006 = (dot(vec3(_475, _476, _477), vec3(_998 * _990, _998 * _991, _998 * _992)) + 1.0) * 0.5;
        float _3719 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1015 = sqrt(((_991 * _991) + (_990 * _990)) + (_992 * _992)) / (_903 + 9.9999997473787516355514526367188e-06);
        float _3730 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _1017 = _1016 * 2.0;
        float _1021 = (1.0 - _1016) / (_1016 + 1.0);
        float _3741 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1031 = ((((1.0 - _1022) * (_1017 + 2.0)) * exp2(log2(isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0))) * (_1017 + 1.0))) + _1022) * _903;
        _1039 = _870;
        _1041 = _869;
        _1042 = _868;
        _1043 = _880;
        _1044 = _879;
        _1045 = _878;
        _1046 = _890;
        _1047 = _889;
        _1048 = _888;
        _1049 = _903;
        _1050 = _902;
        _1051 = _901;
        _1052 = cbModelParam._m0[36u].z * (isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0)));
        _1053 = cbModelParam._m0[36u].z * (isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0)));
        _1054 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0)));
    }
    else
    {
        _1039 = _1040;
        _1041 = _1040;
        _1042 = _1040;
        _1043 = _1040;
        _1044 = _1040;
        _1045 = _1040;
        _1046 = _1040;
        _1047 = _1040;
        _1048 = _1040;
        _1049 = _1040;
        _1050 = _1040;
        _1051 = _1040;
        _1052 = 0.0;
        _1053 = 0.0;
        _1054 = 0.0;
    }
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1083 = fma(_709, cbModelParam._m0[30u].z, fma(_705, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _701));
        float _1087 = fma(_709, cbModelParam._m0[31u].z, fma(_705, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _701));
        float _1091 = fma(_709, cbModelParam._m0[32u].z, fma(_705, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _701));
        float _1114 = _701 + _475;
        float _1115 = _705 + _476;
        float _1116 = _709 + _477;
        float _1126 = fma(_1116, cbModelParam._m0[30u].z, fma(_1115, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1114)) - _1083;
        float _1127 = fma(_1116, cbModelParam._m0[31u].z, fma(_1115, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1114)) - _1087;
        float _1128 = fma(_1116, cbModelParam._m0[32u].z, fma(_1115, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1114)) - _1091;
        float _1132 = inversesqrt(dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128)));
        float _1145 = ((_1132 * _1126) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1083 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1146 = ((_1132 * _1127) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1087 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1147 = ((_1132 * _1128) / cbModelParam._m0[35u].z) + ((((((_1091 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        float _1182 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1149.x + (-0.5));
        float _1184 = _1182 * (_1149.y + (-0.5));
        float _1185 = _1182 * (_1149.z + (-0.5));
        float _1192 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1156.x + (-0.5));
        float _1194 = _1192 * (_1156.y + (-0.5));
        float _1195 = _1192 * (_1156.z + (-0.5));
        float _1202 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1163.x + (-0.5));
        float _1204 = _1202 * (_1163.y + (-0.5));
        float _1205 = _1202 * (_1163.z + (-0.5));
        float _1212 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1170.x + (-0.5));
        float _1214 = _1212 * (_1170.y + (-0.5));
        float _1215 = _1212 * (_1170.z + (-0.5));
        float _1216 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1217 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = _1183 * 0.5;
        float _1220 = _1193 * 0.5;
        float _1221 = _1203 * 0.5;
        float _1222 = dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221));
        float _1227 = (_1222 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1222);
        float _1235 = (dot(vec3(_475, _476, _477), vec3(_1227 * _1219, _1227 * _1220, _1227 * _1221)) + 1.0) * 0.5;
        float _3782 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1244 = sqrt(((_1220 * _1220) + (_1219 * _1219)) + (_1221 * _1221)) / (_1216 + 9.9999997473787516355514526367188e-06);
        float _3793 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1246 = _1245 * 2.0;
        float _1250 = (1.0 - _1245) / (_1245 + 1.0);
        float _3804 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1260 = ((((1.0 - _1251) * (_1246 + 2.0)) * exp2(log2(isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) * (_1246 + 1.0))) + _1251) * _1216;
        float _1261 = _1184 * 0.5;
        float _1262 = _1194 * 0.5;
        float _1263 = _1204 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1277 = (dot(vec3(_475, _476, _477), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _3815 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1286 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1217 + 9.9999997473787516355514526367188e-06);
        float _3826 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1288 = _1287 * 2.0;
        float _1292 = (1.0 - _1287) / (_1287 + 1.0);
        float _3837 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1302 = ((((1.0 - _1293) * (_1288 + 2.0)) * exp2(log2(isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * (_1288 + 1.0))) + _1293) * _1217;
        float _1303 = _1185 * 0.5;
        float _1304 = _1195 * 0.5;
        float _1305 = _1205 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1319 = (dot(vec3(_475, _476, _477), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _3848 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1328 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _3859 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _3870 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * (_1330 + 1.0))) + _1335) * _1218;
        _1352 = _1185;
        _1353 = _1184;
        _1354 = _1183;
        _1355 = _1195;
        _1356 = _1194;
        _1357 = _1193;
        _1358 = _1205;
        _1359 = _1204;
        _1360 = _1203;
        _1361 = _1218;
        _1362 = _1217;
        _1363 = _1216;
        _1364 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)));
        _1365 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)));
        _1366 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
    }
    else
    {
        _1352 = _1040;
        _1353 = _1040;
        _1354 = _1040;
        _1355 = _1040;
        _1356 = _1040;
        _1357 = _1040;
        _1358 = _1040;
        _1359 = _1040;
        _1360 = _1040;
        _1361 = _1040;
        _1362 = _1040;
        _1363 = _1040;
        _1364 = 0.0;
        _1365 = 0.0;
        _1366 = 0.0;
    }
    float _1376 = (cbModelParam._m0[1u].x * (_1364 - _1052)) + _1052;
    float _1377 = (cbModelParam._m0[1u].x * (_1365 - _1053)) + _1053;
    float _1378 = (cbModelParam._m0[1u].x * (_1366 - _1054)) + _1054;
    float _1399 = fma(_1378, cbSceneParam._m0[89u].z, fma(_1377, cbSceneParam._m0[89u].y, _1376 * cbSceneParam._m0[89u].x));
    float _1402 = fma(_1378, cbSceneParam._m0[90u].z, fma(_1377, cbSceneParam._m0[90u].y, _1376 * cbSceneParam._m0[90u].x));
    float _1405 = fma(_1378, cbSceneParam._m0[91u].z, fma(_1377, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1376));
    float _1420 = _648 * 0.5;
    float _1421 = _649 * 0.5;
    float _1422 = _650 * 0.5;
    float _1423 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1354, _1357, _1360, _1363));
    float _1426 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1353, _1356, _1359, _1362));
    float _1429 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1352, _1355, _1358, _1361));
    float _1463;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1436 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1039, _1043, _1046, _1049));
        float _1440 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1041, _1044, _1047, _1050));
        float _1444 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1042, _1045, _1048, _1051));
        float _1451 = dot(vec4(cbModelParam._m0[39u]), vec4(_1420, _1421, _1422, 1.0));
        _1463 = dot(vec3(isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)), isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)), isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1451) ? 0.0 : (isnan(0.0) ? _1451 : max(0.0, _1451))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1463 = 1.0;
    }
    float _1474;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1465 = dot(vec4(cbModelParam._m0[40u]), vec4(_1420, _1421, _1422, 1.0));
        _1474 = dot(vec3(isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)), isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)), isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1465) ? 0.0 : (isnan(0.0) ? _1465 : max(0.0, _1465))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1474 = 1.0;
    }
    float _1478 = (_1474 * cbModelParam._m0[1u].x) + (_1463 * (1.0 - cbModelParam._m0[1u].x));
    float _1488 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _478);
    float _1489 = isnan(_1488) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1488 : min(cbModelParam._m0[25u].z, _1488));
    float _1569;
    float _1571;
    float _1573;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1536 = fma(_709, cbModelParam._m0[13u].z, fma(_705, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _701)) + cbModelParam._m0[13u].w;
        float _1540 = fma(_709, cbModelParam._m0[14u].z, fma(_705, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _701)) + cbModelParam._m0[14u].w;
        float _1544 = fma(_709, cbModelParam._m0[15u].z, fma(_705, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _701)) + cbModelParam._m0[15u].w;
        float _1547 = fma(_650, cbModelParam._m0[13u].z, fma(_649, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _648));
        float _1550 = fma(_650, cbModelParam._m0[14u].z, fma(_649, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _648));
        float _1553 = fma(_650, cbModelParam._m0[15u].z, fma(_649, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _648));
        float _1581;
        if (_1547 > 0.0)
        {
            _1581 = abs((1.0 - _1536) / _1547);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1547 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1536 + 1.0) / _1547);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1581 = frontier_phi_17_15_ladder;
        }
        float _1805;
        if (_1550 > 0.0)
        {
            _1805 = abs((1.0 - _1540) / _1550);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1550 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1540 + 1.0) / _1550);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1805 = frontier_phi_26_22_ladder;
        }
        float _2051;
        if (_1553 > 0.0)
        {
            _2051 = abs((1.0 - _1544) / _1553);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1553 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1544 + 1.0) / _1553);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2051 = frontier_phi_38_33_ladder;
        }
        float _2053 = isnan(_1805) ? _1581 : (isnan(_1581) ? _1805 : min(_1581, _1805));
        float _2054 = isnan(_2051) ? _2053 : (isnan(_2053) ? _2051 : min(_2053, _2051));
        float _2058 = (_2054 * _1547) + _1536;
        float _2059 = (_2054 * _1550) + _1540;
        float _2060 = (_2054 * _1553) + _1544;
        float _2061 = _2054 * 9.9999997473787516355514526367188e-05;
        float _2063 = (-1.0) - _2061;
        float _2065 = _2061 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2060 > _2065) || ((_2060 < _2063) || ((_2059 > _2065) || ((_2059 < _2063) || ((_2058 < _2063) || (_2058 > _2065))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2184 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2060, cbModelParam._m0[9u].z, fma(_2059, cbModelParam._m0[9u].y, _2058 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2060, cbModelParam._m0[10u].z, fma(_2059, cbModelParam._m0[10u].y, _2058 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2060, cbModelParam._m0[11u].z, fma(_2059, cbModelParam._m0[11u].y, _2058 * cbModelParam._m0[11u].x))), _1489);
            frontier_phi_16_38_ladder = _2184.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2184.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2184.x * cbModelParam._m0[1u].y;
        }
        _1569 = frontier_phi_16_38_ladder_2;
        _1571 = frontier_phi_16_38_ladder_1;
        _1573 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1557 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_648, _649, _650), _1489);
        _1569 = _1557.x * cbModelParam._m0[1u].y;
        _1571 = _1557.y * cbModelParam._m0[1u].y;
        _1573 = _1557.z * cbModelParam._m0[1u].y;
    }
    float _1577 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _478);
    float _1578 = isnan(_1577) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1577 : min(cbModelParam._m0[25u].w, _1577));
    float _1669;
    float _1671;
    float _1673;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1633 = fma(_709, cbModelParam._m0[21u].z, fma(_705, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _701)) + cbModelParam._m0[21u].w;
        float _1637 = fma(_709, cbModelParam._m0[22u].z, fma(_705, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _701)) + cbModelParam._m0[22u].w;
        float _1641 = fma(_709, cbModelParam._m0[23u].z, fma(_705, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _701)) + cbModelParam._m0[23u].w;
        float _1644 = fma(_650, cbModelParam._m0[21u].z, fma(_649, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _648));
        float _1647 = fma(_650, cbModelParam._m0[22u].z, fma(_649, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _648));
        float _1650 = fma(_650, cbModelParam._m0[23u].z, fma(_649, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _648));
        float _1810;
        if (_1644 > 0.0)
        {
            _1810 = abs((1.0 - _1633) / _1644);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1644 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1633 + 1.0) / _1644);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1810 = frontier_phi_28_24_ladder;
        }
        float _2078;
        if (_1647 > 0.0)
        {
            _2078 = abs((1.0 - _1637) / _1647);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1637 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2078 = frontier_phi_40_35_ladder;
        }
        float _2283;
        if (_1650 > 0.0)
        {
            _2283 = abs((1.0 - _1641) / _1650);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1641 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2283 = frontier_phi_49_46_ladder;
        }
        float _2285 = isnan(_2078) ? _1810 : (isnan(_1810) ? _2078 : min(_1810, _2078));
        float _2286 = isnan(_2283) ? _2285 : (isnan(_2285) ? _2283 : min(_2285, _2283));
        float _2290 = (_2286 * _1644) + _1633;
        float _2291 = (_2286 * _1647) + _1637;
        float _2292 = (_2286 * _1650) + _1641;
        float _2293 = _2286 * 9.9999997473787516355514526367188e-05;
        float _2294 = (-1.0) - _2293;
        float _2296 = _2293 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2292 > _2296) || ((_2292 < _2294) || ((_2291 > _2296) || ((_2291 < _2294) || ((_2290 < _2294) || (_2290 > _2296))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2526 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2292, cbModelParam._m0[17u].z, fma(_2291, cbModelParam._m0[17u].y, _2290 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2292, cbModelParam._m0[18u].z, fma(_2291, cbModelParam._m0[18u].y, _2290 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2292, cbModelParam._m0[19u].z, fma(_2291, cbModelParam._m0[19u].y, _2290 * cbModelParam._m0[19u].x))), _1578);
            frontier_phi_25_49_ladder = _2526.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2526.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2526.x * cbModelParam._m0[1u].z;
        }
        _1669 = frontier_phi_25_49_ladder_2;
        _1671 = frontier_phi_25_49_ladder_1;
        _1673 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1653 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_648, _649, _650), _1578);
        _1669 = _1653.x * cbModelParam._m0[1u].z;
        _1671 = _1653.y * cbModelParam._m0[1u].z;
        _1673 = _1653.z * cbModelParam._m0[1u].z;
    }
    float _1685 = ((((1.0 - _669) * ((_656 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_669 * _656)) * _640;
    float _1686 = _1685 * ((cbModelParam._m0[1u].w * (_1669 - _1569)) + _1569);
    float _1687 = _1685 * ((cbModelParam._m0[1u].w * (_1671 - _1571)) + _1571);
    float _1688 = _1685 * ((cbModelParam._m0[1u].w * (_1673 - _1573)) + _1573);
    float _1691 = fma(_1688, cbSceneParam._m0[89u].z, fma(_1687, cbSceneParam._m0[89u].y, _1686 * cbSceneParam._m0[89u].x));
    float _1694 = fma(_1688, cbSceneParam._m0[90u].z, fma(_1687, cbSceneParam._m0[90u].y, _1686 * cbSceneParam._m0[90u].x));
    float _1697 = fma(_1688, cbSceneParam._m0[91u].z, fma(_1687, cbSceneParam._m0[91u].y, _1686 * cbSceneParam._m0[91u].x));
    vec4 _1705 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_576, _577));
    float _1707 = _1705.w;
    float _1719 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1707);
    float _1720 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1707);
    float _1721 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1707);
    uvec4 _1725 = floatBitsToUint(cbInstanceData._m0[_615 + 5u]);
    uint _1727 = _1725.x * 14u;
    uint _1728 = _1727 + 13u;
    float _1735 = _640 + (-1.0);
    float _1740 = (cbLight._m0[_1728].x * _1735) + 1.0;
    float _1741 = (cbLight._m0[_1728].y * _1735) + 1.0;
    float _1742 = (cbLight._m0[_1728].z * _1735) + 1.0;
    float _1743 = (cbLight._m0[_1728].w * _1735) + 1.0;
    uint _1744 = _1727 + 5u;
    float _1750 = isnan(1.0) ? _1741 : (isnan(_1741) ? 1.0 : min(_1741, 1.0));
    uint _1754 = _1727 + 4u;
    float _1763 = isnan(1.0) ? _1740 : (isnan(_1740) ? 1.0 : min(_1740, 1.0));
    uint _1767 = _1727 | 1u;
    float _1778 = dot(vec3(cbLight._m0[_1727].xyz), vec3(_475, _476, _477));
    float _1781 = dot(vec3(cbLight._m0[_1767].xyz), vec3(_475, _476, _477));
    float _4006 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
    float _4017 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
    float _1786 = (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * 0.3183098733425140380859375;
    float _1788 = (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * 0.3183098733425140380859375;
    float _1795 = ((cbLight._m0[_1744].x * _1750) * _1788) + (((cbLight._m0[_1754].x * _1719) * _1763) * _1786);
    float _1796 = ((_1750 * cbLight._m0[_1744].y) * _1788) + (((cbLight._m0[_1754].y * _1720) * _1763) * _1786);
    float _1797 = ((_1750 * cbLight._m0[_1744].z) * _1788) + (((cbLight._m0[_1754].z * _1721) * _1763) * _1786);
    uvec4 _1802 = floatBitsToUint(cbLight._m0[_1727 + 12u]);
    bool _1804 = _1802.x == 0u;
    float _1815;
    float _1817;
    float _1819;
    if (_1804)
    {
        _1815 = _1795;
        _1817 = _1796;
        _1819 = _1797;
    }
    else
    {
        uint _1823 = _1727 + 6u;
        float _1839 = (dot(vec3(cbLight._m0[_1727 + 2u].xyz), vec3(_475, _476, _477)) * 0.5) + 0.5;
        float _1840 = _1839 * _1839;
        float _4028 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
        float _1841 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1842 = isnan(1.0) ? _1742 : (isnan(_1742) ? 1.0 : min(_1742, 1.0));
        _1815 = (((cbLight._m0[_1823].x * 0.3183098733425140380859375) * _1841) * _1842) + _1795;
        _1817 = (((cbLight._m0[_1823].y * 0.3183098733425140380859375) * _1841) * _1842) + _1796;
        _1819 = (((cbLight._m0[_1823].z * 0.3183098733425140380859375) * _1841) * _1842) + _1797;
    }
    bool _1822 = _1802.y == 0u;
    float _1860;
    float _1862;
    float _1864;
    if (_1822)
    {
        _1860 = _1815;
        _1862 = _1817;
        _1864 = _1819;
    }
    else
    {
        uint _2022 = _1727 + 7u;
        float _2038 = (dot(vec3(cbLight._m0[_1727 + 3u].xyz), vec3(_475, _476, _477)) * 0.5) + 0.5;
        float _2039 = _2038 * _2038;
        float _4044 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2040 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _2041 = isnan(1.0) ? _1743 : (isnan(_1743) ? 1.0 : min(_1743, 1.0));
        _1860 = (((cbLight._m0[_2022].x * 0.3183098733425140380859375) * _2040) * _2041) + _1815;
        _1862 = (((cbLight._m0[_2022].y * 0.3183098733425140380859375) * _2040) * _2041) + _1817;
        _1864 = (((cbLight._m0[_2022].z * 0.3183098733425140380859375) * _2040) * _2041) + _1819;
    }
    uint _1867 = _1727 + 8u;
    float _1880 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1727].w)) * _478) * 0.949999988079071044921875);
    float _1881 = _1880 * _1880;
    float _1882 = cbLight._m0[_1727].x + _555;
    float _1883 = cbLight._m0[_1727].y + _556;
    float _1884 = cbLight._m0[_1727].z + _557;
    float _1888 = inversesqrt(dot(vec3(_1882, _1883, _1884), vec3(_1882, _1883, _1884)));
    float _1889 = _1888 * _1882;
    float _1890 = _1888 * _1883;
    float _1891 = _1888 * _1884;
    float _1892 = dot(vec3(_475, _476, _477), vec3(cbLight._m0[_1727].xyz));
    float _4060 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1895 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _4071 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _1896 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _1897 = dot(vec3(_475, _476, _477), vec3(_1889, _1890, _1891));
    float _4082 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1900 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _1901 = dot(vec3(cbLight._m0[_1727].xyz), vec3(_1889, _1890, _1891));
    float _4093 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1905 = _1881 * _1881;
    float _1909 = ((_1900 * _1900) * (_1905 + (-1.0))) + 1.0;
    float _1920 = (exp2(log2(1.0 - (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1921 = 1.0 - _1881;
    float _1932 = (0.5 / (((_1896 * ((_1895 * _1921) + _1881)) + 9.9999999392252902907785028219223e-09) + (((_1896 * _1921) + _1881) * _1895))) * _1895;
    float _4104 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _1934 = (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_1905 / ((_1909 * _1909) * 3.141590118408203125));
    uint _1948 = _1727 + 9u;
    float _1959 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1767].w)) * _478) * 0.949999988079071044921875);
    float _1960 = _1959 * _1959;
    float _1961 = cbLight._m0[_1767].x + _555;
    float _1962 = cbLight._m0[_1767].y + _556;
    float _1963 = cbLight._m0[_1767].z + _557;
    float _1967 = inversesqrt(dot(vec3(_1961, _1962, _1963), vec3(_1961, _1962, _1963)));
    float _1968 = _1967 * _1961;
    float _1969 = _1967 * _1962;
    float _1970 = _1967 * _1963;
    float _1971 = dot(vec3(_475, _476, _477), vec3(cbLight._m0[_1767].xyz));
    float _4115 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _1974 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _1975 = dot(vec3(_475, _476, _477), vec3(_1968, _1969, _1970));
    float _4126 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1978 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _1979 = dot(vec3(cbLight._m0[_1767].xyz), vec3(_1968, _1969, _1970));
    float _4137 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1983 = _1960 * _1960;
    float _1987 = ((_1978 * _1978) * (_1983 + (-1.0))) + 1.0;
    float _1996 = (exp2(log2(1.0 - (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1997 = 1.0 - _1960;
    float _2007 = (0.5 / (((_1896 * ((_1974 * _1997) + _1960)) + 9.9999999392252902907785028219223e-09) + (((_1896 * _1997) + _1960) * _1974))) * _1974;
    float _4148 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2009 = (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_1983 / ((_1987 * _1987) * 3.141590118408203125));
    float _2019 = (((_1996 * cbLight._m0[_1948].x) * _2009) * _1750) + ((((cbLight._m0[_1867].x * _1719) * _1920) * _1934) * _1763);
    float _2020 = (((_1996 * cbLight._m0[_1948].y) * _2009) * _1750) + ((((cbLight._m0[_1867].y * _1720) * _1920) * _1934) * _1763);
    float _2021 = (((_1996 * cbLight._m0[_1948].z) * _2009) * _1750) + ((((cbLight._m0[_1867].z * _1721) * _1920) * _1934) * _1763);
    float _2083;
    float _2085;
    float _2087;
    if (_1804)
    {
        _2083 = _2019;
        _2085 = _2020;
        _2087 = _2021;
    }
    else
    {
        uint _2089 = _1727 + 2u;
        uint _2093 = _1727 + 10u;
        float _2107 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2089].w)) * _478) * 0.949999988079071044921875);
        float _2108 = _2107 * _2107;
        float _2109 = cbLight._m0[_2089].x + _555;
        float _2110 = cbLight._m0[_2089].y + _556;
        float _2111 = cbLight._m0[_2089].z + _557;
        float _2115 = inversesqrt(dot(vec3(_2109, _2110, _2111), vec3(_2109, _2110, _2111)));
        float _2116 = _2115 * _2109;
        float _2117 = _2115 * _2110;
        float _2118 = _2115 * _2111;
        float _2119 = dot(vec3(_475, _476, _477), vec3(cbLight._m0[_2089].xyz));
        float _4159 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
        float _2122 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _2123 = dot(vec3(_475, _476, _477), vec3(_2116, _2117, _2118));
        float _4170 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
        float _2126 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _2127 = dot(vec3(cbLight._m0[_2089].xyz), vec3(_2116, _2117, _2118));
        float _4181 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        float _2131 = _2108 * _2108;
        float _2135 = ((_2126 * _2126) * (_2131 + (-1.0))) + 1.0;
        float _2144 = (exp2(log2(1.0 - (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2145 = 1.0 - _2108;
        float _2155 = (0.5 / (((_1896 * ((_2122 * _2145) + _2108)) + 9.9999999392252902907785028219223e-09) + (((_1896 * _2145) + _2108) * _2122))) * _2122;
        float _4192 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2157 = (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_2131 / ((_2135 * _2135) * 3.141590118408203125));
        float _2158 = isnan(1.0) ? _1742 : (isnan(_1742) ? 1.0 : min(_1742, 1.0));
        _2083 = (((_2144 * cbLight._m0[_2093].x) * _2157) * _2158) + _2019;
        _2085 = (((_2144 * cbLight._m0[_2093].y) * _2157) * _2158) + _2020;
        _2087 = (((_2144 * cbLight._m0[_2093].z) * _2157) * _2158) + _2021;
    }
    float _2193;
    float _2195;
    float _2197;
    if (_1822)
    {
        _2193 = _2083;
        _2195 = _2085;
        _2197 = _2087;
    }
    else
    {
        uint _2204 = _1727 + 3u;
        uint _2208 = _1727 + 11u;
        float _2222 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2204].w)) * _478) * 0.949999988079071044921875);
        float _2223 = _2222 * _2222;
        float _2224 = cbLight._m0[_2204].x + _555;
        float _2225 = cbLight._m0[_2204].y + _556;
        float _2226 = cbLight._m0[_2204].z + _557;
        float _2230 = inversesqrt(dot(vec3(_2224, _2225, _2226), vec3(_2224, _2225, _2226)));
        float _2231 = _2230 * _2224;
        float _2232 = _2230 * _2225;
        float _2233 = _2230 * _2226;
        float _2234 = dot(vec3(_475, _476, _477), vec3(cbLight._m0[_2204].xyz));
        float _4208 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2237 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _2238 = dot(vec3(_475, _476, _477), vec3(_2231, _2232, _2233));
        float _4219 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2241 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _2242 = dot(vec3(cbLight._m0[_2204].xyz), vec3(_2231, _2232, _2233));
        float _4230 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
        float _2246 = _2223 * _2223;
        float _2250 = ((_2241 * _2241) * (_2246 + (-1.0))) + 1.0;
        float _2259 = (exp2(log2(1.0 - (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2260 = 1.0 - _2223;
        float _2270 = (0.5 / (((_1896 * ((_2237 * _2260) + _2223)) + 9.9999999392252902907785028219223e-09) + (((_1896 * _2260) + _2223) * _2237))) * _2237;
        float _4241 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2272 = (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_2246 / ((_2250 * _2250) * 3.141590118408203125));
        float _2273 = isnan(1.0) ? _1743 : (isnan(_1743) ? 1.0 : min(_1743, 1.0));
        _2193 = (((_2259 * cbLight._m0[_2208].x) * _2272) * _2273) + _2083;
        _2195 = (((_2259 * cbLight._m0[_2208].y) * _2272) * _2273) + _2085;
        _2197 = (((_2259 * cbLight._m0[_2208].z) * _2272) * _2273) + _2087;
    }
    float _2408;
    float _2410;
    float _2412;
    float _2414;
    float _2416;
    float _2418;
    if (_1725.y == 0u)
    {
        float _2348 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2349 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2348;
        float _2350 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2348;
        float _2351 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2348;
        uvec4 _2363 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2364 = _2363.x;
        uint _2375 = uint((float(_2363.y) * floor(float(uint(cbSceneParam._m0[85u].y * _577) / _2364))) + floor(float(uint(cbSceneParam._m0[85u].x * _576) / _2364)));
        float _2385 = (log2(_2351 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2386 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        uint _2389 = uint(isnan(14.0) ? _2386 : (isnan(_2386) ? 14.0 : min(_2386, 14.0)));
        uvec4 _2394 = texelFetch(g_lightClusterGridBuffer, int(((_2389 << 2u) + (_2375 << 6u)) >> 2u));
        uint _2395 = _2394.x;
        uint _2396 = _2363.z;
        float _2531;
        float _2533;
        float _2535;
        float _2537;
        float _2539;
        float _2541;
        if (((((1u << ((_2396 >> 4u) & 15u)) + 4294967295u) & _2395) == 0u) || ((_2396 & 240u) == 0u))
        {
            _2531 = 0.0;
            _2533 = 0.0;
            _2535 = 0.0;
            _2537 = 0.0;
            _2539 = 0.0;
            _2541 = 0.0;
        }
        else
        {
            float _2532;
            float _2534;
            float _2536;
            float _2538;
            float _2540;
            float _2542;
            float _2693 = 0.0;
            float _2694 = 0.0;
            float _2695 = 0.0;
            float _2696 = 0.0;
            float _2697 = 0.0;
            float _2698 = 0.0;
            uint _2699 = 0u;
            uint _2708;
            bool _2709;
            for (;;)
            {
                _2708 = texelFetch(g_lightClassification, int((((_2389 << 5u) + (_2375 << 9u)) + (_2699 << 2u)) >> 2u)).x;
                _2709 = _2708 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2709)
                {
                    frontier_phi_66_pred = _2693;
                    frontier_phi_66_pred_1 = _2698;
                    frontier_phi_66_pred_2 = _2697;
                    frontier_phi_66_pred_3 = _2696;
                    frontier_phi_66_pred_4 = _2695;
                    frontier_phi_66_pred_5 = _2694;
                }
                else
                {
                    float _2838;
                    float _2839;
                    float _2840;
                    float _2841;
                    float _2842;
                    float _2843;
                    uint _2844;
                    _2838 = _2693;
                    _2839 = _2694;
                    _2840 = _2695;
                    _2841 = _2696;
                    _2842 = _2697;
                    _2843 = _2698;
                    _2844 = _2708;
                    float _2765;
                    float _2766;
                    float _2767;
                    float _2768;
                    float _2769;
                    float _2770;
                    for (;;)
                    {
                        uint _2848 = uint(findLSB(_2844)) + (_2699 << 5u);
                        uint _2845 = (_2844 + 4294967295u) & _2844;
                        uint _2850 = _2848 * 48u;
                        vec4 _2864 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2850)).x, texelFetch(g_PointLightRenderingBuffer, int(_2850 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2850 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2850 + 3u)).x));
                        uint _2870 = (_2848 * 48u) + 4u;
                        vec4 _2883 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2870)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 3u)).x));
                        uint _2889 = (_2848 * 48u) + 8u;
                        vec3 _2900 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2889)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 2u)).x));
                        float _2904 = _2864.x - _2349;
                        float _2905 = _2864.y - _2350;
                        float _2906 = _2864.z - _2351;
                        float _2907 = dot(vec3(_2904, _2905, _2906), vec3(_2904, _2905, _2906));
                        float _2910 = inversesqrt(_2907);
                        float _2911 = _2910 * _2904;
                        float _2912 = _2910 * _2905;
                        float _2913 = _2910 * _2906;
                        float _2914 = dot(vec3(_596, _599, _602), vec3(_2911, _2912, _2913));
                        float _2919 = 1.0 - (_2907 * _2864.w);
                        float _4267 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
                        float _2920 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                        float _2921 = sqrt(_2907) * _2883.w;
                        float _2924 = 1.39999997615814208984375 / (_2921 + 1.39999997615814208984375);
                        float _2925 = _2924 * _2924;
                        float _2928 = ((1.0 - _2925) * _2914) + _2925;
                        float _2931 = _2921 * _2921;
                        float _2935 = ((isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0))) * _2920) / ((_2931 * 0.699999988079071044921875) + 1.0);
                        float _2939 = (-0.0) - _2349;
                        float _2940 = (-0.0) - _2350;
                        float _2941 = (-0.0) - _2351;
                        float _2945 = inversesqrt(dot(vec3(_2939, _2940, _2941), vec3(_2939, _2940, _2941)));
                        float _2946 = _2945 * _2939;
                        float _2947 = _2945 * _2940;
                        float _2948 = _2945 * _2941;
                        float _2956 = exp2(log2(1.0 / ((_2931 * 3.5) + 5.0)) * 0.25);
                        float _2957 = 1.0 - _656;
                        float _2964 = sqrt(1.0 - ((1.0 - (_2957 * _2957)) * (1.0 - (_2956 * _2956))));
                        float _2965 = _2964 * _2964;
                        float _2966 = _2965 * _2965;
                        float _2967 = _2946 + _2911;
                        float _2968 = _2947 + _2912;
                        float _2969 = _2948 + _2913;
                        float _2973 = inversesqrt(dot(vec3(_2967, _2968, _2969), vec3(_2967, _2968, _2969)));
                        float _2977 = dot(vec3(_596, _599, _602), vec3(_2946, _2947, _2948));
                        float _4283 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                        float _2980 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
                        float _2981 = dot(vec3(_596, _599, _602), vec3(_2973 * _2967, _2973 * _2968, _2973 * _2969));
                        float _4294 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
                        float _2984 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
                        float _2988 = ((_2984 * _2984) * (_2966 + (-1.0))) + 1.0;
                        float _2989 = _2924 * _2965;
                        float _2990 = _2989 * _2989;
                        float _2993 = ((1.0 - _2990) * _2914) + _2990;
                        float _4305 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
                        float _2994 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
                        float _2995 = 1.0 - _2965;
                        float _3005 = (0.5 / (((_2994 * ((_2980 * _2995) + _2965)) + 9.9999999392252902907785028219223e-09) + (((_2994 * _2995) + _2965) * _2980))) * _2994;
                        float _4316 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
                        float _3016 = (((_2966 * 3.1415927410125732421875) * (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0)))) / ((_2988 * _2988) * ((_2931 * 2.1991131305694580078125) + 3.141590118408203125))) * _2920;
                        _2768 = (_2935 * _2883.x) + _2841;
                        _2769 = (_2935 * _2883.y) + _2842;
                        _2770 = (_2935 * _2883.z) + _2843;
                        _2765 = (_3016 * _2900.x) + _2838;
                        _2766 = (_3016 * _2900.y) + _2839;
                        _2767 = (_3016 * _2900.z) + _2840;
                        if (_2845 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2838 = _2765;
                            _2839 = _2766;
                            _2840 = _2767;
                            _2841 = _2768;
                            _2842 = _2769;
                            _2843 = _2770;
                            _2844 = _2845;
                        }
                    }
                    frontier_phi_66_pred = _2765;
                    frontier_phi_66_pred_1 = _2770;
                    frontier_phi_66_pred_2 = _2769;
                    frontier_phi_66_pred_3 = _2768;
                    frontier_phi_66_pred_4 = _2767;
                    frontier_phi_66_pred_5 = _2766;
                }
                _2532 = frontier_phi_66_pred;
                _2542 = frontier_phi_66_pred_1;
                _2540 = frontier_phi_66_pred_2;
                _2538 = frontier_phi_66_pred_3;
                _2536 = frontier_phi_66_pred_4;
                _2534 = frontier_phi_66_pred_5;
                uint _2700 = _2699 + 1u;
                if (_2700 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2693 = _2532;
                    _2694 = _2534;
                    _2695 = _2536;
                    _2696 = _2538;
                    _2697 = _2540;
                    _2698 = _2542;
                    _2699 = _2700;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2531 = _2532;
            _2533 = _2534;
            _2535 = _2536;
            _2537 = _2538;
            _2539 = _2540;
            _2541 = _2542;
        }
        uvec4 _2545 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2546 = _2545.z;
        uint _2548 = (_2546 >> 8u) & 15u;
        float _2661;
        float _2663;
        float _2665;
        float _2667;
        float _2669;
        float _2671;
        if (((4294967295u << _2548) & _2395) == 0u)
        {
            _2661 = _2531;
            _2663 = _2533;
            _2665 = _2535;
            _2667 = _2537;
            _2669 = _2539;
            _2671 = _2541;
        }
        else
        {
            float _2686 = inversesqrt(dot(vec3(_2349, _2350, _2351), vec3(_2349, _2350, _2351)));
            float _2687 = _2686 * _2349;
            float _2688 = _2686 * _2350;
            float _2689 = _2686 * _2351;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2548 < ((_2546 >> 12u) & 15u))
            {
                float _2662;
                float _2664;
                float _2666;
                float _2668;
                float _2670;
                float _2672;
                float _2821 = _2531;
                float _2822 = _2533;
                float _2823 = _2535;
                float _2824 = _2537;
                float _2825 = _2539;
                float _2826 = _2541;
                uint _2827 = _2548;
                uint _2836;
                bool _2837;
                for (;;)
                {
                    _2836 = texelFetch(g_lightClassification, int((((_2389 << 5u) + (_2375 << 9u)) + (_2827 << 2u)) >> 2u)).x;
                    _2837 = _2836 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2837)
                    {
                        frontier_phi_77_pred = _2826;
                        frontier_phi_77_pred_1 = _2825;
                        frontier_phi_77_pred_2 = _2824;
                        frontier_phi_77_pred_3 = _2823;
                        frontier_phi_77_pred_4 = _2822;
                        frontier_phi_77_pred_5 = _2821;
                    }
                    else
                    {
                        float _3030;
                        float _3031;
                        float _3032;
                        float _3033;
                        float _3034;
                        float _3035;
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3043 = _2821;
                        float _3044 = _2822;
                        float _3045 = _2823;
                        float _3046 = _2824;
                        float _3047 = _2825;
                        float _3048 = _2826;
                        uint _3049 = _2836;
                        uint _3050;
                        vec4 _3075;
                        float _3076;
                        vec4 _3091;
                        vec3 _3103;
                        vec4 _3118;
                        vec4 _3134;
                        float _3181;
                        bool _3182;
                        for (;;)
                        {
                            uint _3060 = ((_2827 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3049));
                            _3050 = (_3049 + 4294967295u) & _3049;
                            uint _3062 = _3060 * 40u;
                            _3075 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3062)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 3u)).x));
                            _3076 = _3075.w;
                            uint _3078 = (_3060 * 40u) + 4u;
                            _3091 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3078)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 3u)).x));
                            uint _3093 = (_3060 * 40u) + 8u;
                            _3103 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3093)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 2u)).x));
                            uint _3105 = (_3060 * 40u) + 16u;
                            _3118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 3u)).x));
                            uint _3121 = (_3060 * 40u) + 20u;
                            _3134 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3121)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 3u)).x));
                            uint _3137 = (_3060 * 40u) + 24u;
                            vec4 _3150 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3137)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 3u)).x));
                            uint _3156 = (_3060 * 40u) + 28u;
                            vec4 _3169 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 3u)).x));
                            _3181 = fma(_2351, _3169.z, fma(_2350, _3169.y, _3169.x * _2349)) + _3169.w;
                            _3182 = !((fma(_2351, _3150.z, fma(_2350, _3150.y, _3150.x * _2349)) + _3150.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3182)
                            {
                                float _3209 = _3075.x - _2349;
                                float _3210 = _3075.y - _2350;
                                float _3211 = _3075.z - _2351;
                                float _3212 = dot(vec3(_3209, _3210, _3211), vec3(_3209, _3210, _3211));
                                float _3215 = inversesqrt(_3212);
                                float _3216 = _3215 * _3209;
                                float _3217 = _3215 * _3210;
                                float _3218 = _3215 * _3211;
                                float _3222 = 1.0 - (_3212 / (_3076 * _3076));
                                float _4327 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                                float _3223 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
                                float _3227 = sqrt(_3212) * _3091.w;
                                float _3229 = 1.39999997615814208984375 / (_3227 + 1.39999997615814208984375);
                                float _3230 = _3229 * _3229;
                                float _3233 = ((1.0 - _3230) * dot(vec3(_3216, _3217, _3218), vec3(_596, _599, _602))) + _3230;
                                float _3236 = _3227 * _3227;
                                float _3240 = (fma(_2351, _3118.z, fma(_2350, _3118.y, _3118.x * _2349)) + _3118.w) / _3181;
                                float _3241 = (fma(_2351, _3134.z, fma(_2350, _3134.y, _3134.x * _2349)) + _3134.w) / _3181;
                                float _3245 = 1.0 - dot(vec2(_3240, _3241), vec2(_3240, _3241));
                                float _4343 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                                float _3246 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
                                float _3247 = _3246 * (((isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0))) * _3223) / ((_3236 * 0.699999988079071044921875) + 1.0));
                                float _3259 = exp2(log2(1.0 / ((_3236 * 3.5) + 5.0)) * 0.25);
                                float _3260 = 1.0 - _656;
                                float _3267 = sqrt(1.0 - ((1.0 - (_3260 * _3260)) * (1.0 - (_3259 * _3259))));
                                float _3268 = _3267 * _3267;
                                float _3269 = _3268 * _3268;
                                float _3270 = _3216 - _2687;
                                float _3271 = _3217 - _2688;
                                float _3272 = _3218 - _2689;
                                float _3276 = inversesqrt(dot(vec3(_3270, _3271, _3272), vec3(_3270, _3271, _3272)));
                                float _3280 = dot(vec3(_596, _599, _602), vec3((-0.0) - _2687, (-0.0) - _2688, (-0.0) - _2689));
                                float _4354 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                                float _3283 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
                                float _3284 = dot(vec3(_596, _599, _602), vec3(_3276 * _3270, _3276 * _3271, _3276 * _3272));
                                float _4365 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                                float _3287 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                                float _3291 = ((_3287 * _3287) * (_3269 + (-1.0))) + 1.0;
                                float _3292 = _3229 * _3268;
                                float _3293 = _3292 * _3292;
                                float _3299 = ((1.0 - _3293) * dot(vec3(_596, _599, _602), vec3(_3216, _3217, _3218))) + _3293;
                                float _4376 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                                float _3300 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
                                float _3301 = 1.0 - _3268;
                                float _3311 = (0.5 / (((_3300 * ((_3283 * _3301) + _3268)) + 9.9999999392252902907785028219223e-09) + (((_3300 * _3301) + _3268) * _3283))) * _3300;
                                float _4387 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                                float _3321 = (_3246 * _3223) * (((_3269 * 3.1415927410125732421875) * (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0)))) / ((_3291 * _3291) * ((_3236 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3247 * _3091.y;
                                frontier_phi_83_pred_1 = _3247 * _3091.x;
                                frontier_phi_83_pred_2 = _3321 * _3103.z;
                                frontier_phi_83_pred_3 = _3321 * _3103.y;
                                frontier_phi_83_pred_4 = _3321 * _3103.x;
                                frontier_phi_83_pred_5 = _3247 * _3091.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3329 = frontier_phi_83_pred;
                            _3328 = frontier_phi_83_pred_1;
                            _3327 = frontier_phi_83_pred_2;
                            _3326 = frontier_phi_83_pred_3;
                            _3325 = frontier_phi_83_pred_4;
                            _3330 = frontier_phi_83_pred_5;
                            _3033 = _3328 + _3046;
                            _3034 = _3329 + _3047;
                            _3035 = _3330 + _3048;
                            _3030 = _3325 + _3043;
                            _3031 = _3326 + _3044;
                            _3032 = _3327 + _3045;
                            if (_3050 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3043 = _3030;
                                _3044 = _3031;
                                _3045 = _3032;
                                _3046 = _3033;
                                _3047 = _3034;
                                _3048 = _3035;
                                _3049 = _3050;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3035;
                        frontier_phi_77_pred_1 = _3034;
                        frontier_phi_77_pred_2 = _3033;
                        frontier_phi_77_pred_3 = _3032;
                        frontier_phi_77_pred_4 = _3031;
                        frontier_phi_77_pred_5 = _3030;
                    }
                    _2672 = frontier_phi_77_pred;
                    _2670 = frontier_phi_77_pred_1;
                    _2668 = frontier_phi_77_pred_2;
                    _2666 = frontier_phi_77_pred_3;
                    _2664 = frontier_phi_77_pred_4;
                    _2662 = frontier_phi_77_pred_5;
                    uint _2828 = _2827 + 1u;
                    if (_2828 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2821 = _2662;
                        _2822 = _2664;
                        _2823 = _2666;
                        _2824 = _2668;
                        _2825 = _2670;
                        _2826 = _2672;
                        _2827 = _2828;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2666;
                frontier_phi_58_59_ladder_1 = _2672;
                frontier_phi_58_59_ladder_2 = _2670;
                frontier_phi_58_59_ladder_3 = _2668;
                frontier_phi_58_59_ladder_4 = _2664;
                frontier_phi_58_59_ladder_5 = _2662;
            }
            else
            {
                frontier_phi_58_59_ladder = _2535;
                frontier_phi_58_59_ladder_1 = _2541;
                frontier_phi_58_59_ladder_2 = _2539;
                frontier_phi_58_59_ladder_3 = _2537;
                frontier_phi_58_59_ladder_4 = _2533;
                frontier_phi_58_59_ladder_5 = _2531;
            }
            _2661 = frontier_phi_58_59_ladder_5;
            _2663 = frontier_phi_58_59_ladder_4;
            _2665 = frontier_phi_58_59_ladder;
            _2667 = frontier_phi_58_59_ladder_3;
            _2669 = frontier_phi_58_59_ladder_2;
            _2671 = frontier_phi_58_59_ladder_1;
        }
        float _2676 = isnan(1.0) ? _640 : (isnan(_640) ? 1.0 : min(_640, 1.0));
        _2408 = (_2676 * _2667) + _1860;
        _2410 = (_2676 * _2669) + _1862;
        _2412 = (_2676 * _2671) + _1864;
        _2414 = ((_2661 * 0.039999999105930328369140625) * _2676) + _2193;
        _2416 = ((_2663 * 0.039999999105930328369140625) * _2676) + _2195;
        _2418 = ((_2665 * 0.039999999105930328369140625) * _2676) + _2197;
    }
    else
    {
        _2408 = _1860;
        _2410 = _1862;
        _2412 = _1864;
        _2414 = _2193;
        _2416 = _2195;
        _2418 = _2197;
    }
    uint _2424 = _616 + uint(cbMatDynParam._m0[0u].w);
    float _2432 = ((_452 * cbMtdParam._m0[11u].x) * (_437.x + _422.x)) * cbInstanceData._m0[_2424].x;
    float _2435 = ((_452 * cbMtdParam._m0[11u].y) * (_437.y + _422.y)) * cbInstanceData._m0[_2424].y;
    float _2438 = ((_452 * cbMtdParam._m0[11u].z) * (_437.z + _422.z)) * cbInstanceData._m0[_2424].z;
    float _4403 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _4414 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _4425 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _2455 = (((isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (_2408 + ((isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0))) * _640))) + ((_2414 + ((isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))) * _1478)) * cbPerFrame._m0[3u].x)) + _2432;
    float _2457 = (_2435 + ((_2416 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _1478)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_2410 + ((isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0))) * _640)));
    float _2459 = (_2438 + ((_2418 + ((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _1478)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (_2412 + ((isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0))) * _640)));
    float _2460 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _2461 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
    float _2462 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
    float _2468 = cbMtdParam._m0[2u].x * _2432;
    float _2469 = cbMtdParam._m0[2u].y * _2435;
    float _2470 = cbMtdParam._m0[2u].z * _2438;
    float _4451 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2472 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
    uint _2473 = _615 + 6u;
    float _2481 = _576 / cbSceneParam._m0[86u].x;
    float _2482 = _577 / cbSceneParam._m0[86u].y;
    vec4 _2496 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2481, _2482, (log2((isnan(cbSceneParam._m0[77u].w) ? _497 : (isnan(_497) ? cbSceneParam._m0[77u].w : min(_497, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2498 = _2496.x;
    float _2499 = _2496.y;
    float _2500 = _2496.z;
    float _2501 = _2496.w;
    float _2594;
    float _2596;
    float _2598;
    float _2600;
    if (_497 > cbSceneParam._m0[78u].w)
    {
        float _2556 = isnan(_497) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _497 : min(cbSceneParam._m0[80u].w, _497));
        float _2557 = _2556 / _497;
        float _2568 = _2557 * _548;
        float _2569 = _549 * _2557;
        float _2570 = (-0.0) - _2569;
        float _2572 = _2557 * _550;
        float _2574 = (cbSceneParam._m0[77u].w * _2570) / _2556;
        float _2575 = _2574 + cbSceneParam._m0[79u].w;
        float _2576 = cbSceneParam._m0[79u].w - _2569;
        float _2582 = sqrt(((_2568 * _2568) + (_2569 * _2569)) + (_2572 * _2572));
        float _2585 = (1.0 - (cbSceneParam._m0[77u].w / _2556)) * _2582;
        float _2590 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2592 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2778;
        if (abs((_2570 - _2574) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2778 = ((((_2575 > 0.0) ? exp2(_2590 * _2575) : (2.0 - exp2(_2592 * _2575))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2585;
        }
        else
        {
            float _2722 = 1.0 / cbSceneParam._m0[80u].x;
            float _2723 = isnan(_2576) ? _2575 : (isnan(_2575) ? _2576 : max(_2575, _2576));
            float _2724 = isnan(_2576) ? _2575 : (isnan(_2575) ? _2576 : min(_2575, _2576));
            float _2733 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : min(_2723, 0.0));
            float _2734 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : min(_2724, 0.0));
            _2778 = ((abs(_2582 / _2570) * cbSceneParam._m0[80u].y) * ((((_2733 - _2734) * 2.0) - ((exp2(_2590 * (isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0)))) - exp2(_2590 * (isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0))))) * _2722)) - ((exp2(_2592 * _2733) - exp2(_2592 * _2734)) * _2722))) + (_2585 * cbSceneParam._m0[80u].z);
        }
        vec4 _2780 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2481, _2482, 1.0), 0.0);
        float _2789 = exp2((_2778 * (-1.44269502162933349609375)) * (1.0 - _2780.w));
        float _2790 = log2(_2789);
        float _2806 = log2(_2501);
        _2594 = (exp2(_2806 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2790 * cbSceneParam._m0[78u].x)) * _2780.x) / cbSceneParam._m0[78u].x)) + _2498;
        _2596 = (exp2(_2806 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2790 * cbSceneParam._m0[78u].y)) * _2780.y) / cbSceneParam._m0[78u].y)) + _2499;
        _2598 = (exp2(_2806 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2790 * cbSceneParam._m0[78u].z)) * _2780.z) / cbSceneParam._m0[78u].z)) + _2500;
        _2600 = _2789 * _2501;
    }
    else
    {
        _2594 = _2498;
        _2596 = _2499;
        _2598 = _2500;
        _2600 = _2501;
    }
    bool _2816;
    vec4 _2610;
    vec4 _2632;
    float _2634;
    float _2638;
    float _2639;
    float _2640;
    float _2643;
    float _2646;
    float _2649;
    float _2650;
    bool _2660;
    for (;;)
    {
        _2610 = cbMatDynParam._m0[0u];
        float _2612 = roundEven(_2610.y);
        bool _2613 = _2612 == 3.0;
        float _2614 = log2(_2600);
        float _2618 = exp2(_2614 * cbSceneParam._m0[78u].x);
        float _2619 = exp2(_2614 * cbSceneParam._m0[78u].y);
        float _2620 = exp2(_2614 * cbSceneParam._m0[78u].z);
        float _2621 = _2618 * _2460;
        float _2622 = _2619 * _2461;
        float _2623 = _2620 * _2462;
        float _2630 = _564 + (-0.5);
        _2632 = cbMtdParam._m0[1u];
        _2634 = _2632.y * _2630;
        float _2637 = (_2612 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2638 = _2637 * (_2613 ? _2621 : (_2621 + (cbSceneParam._m0[72u].w * _2594)));
        _2639 = _2637 * (_2613 ? _2622 : (_2622 + (cbSceneParam._m0[72u].w * _2596)));
        _2640 = _2637 * (_2613 ? _2623 : (_2623 + (cbSceneParam._m0[72u].w * _2598)));
        _2643 = ((_2468 * _2472) * _2618) * _2637;
        _2646 = ((_2469 * _2472) * _2619) * _2637;
        _2649 = ((_2470 * _2472) * _2620) * _2637;
        _2650 = _2630 * 0.999000012874603271484375;
        _2660 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2660)
        {
            if ((cbInstanceData._m0[_615 + 7u].x + _2650) < 0.5)
            {
                _2816 = true;
                break;
            }
        }
        uint _2757 = _616 + uint(_2610.w);
        if ((cbInstanceData._m0[_2757].w < 1.0) && ((cbInstanceData._m0[_2757].w + _2650) < 0.5))
        {
            _2816 = true;
            break;
        }
        if ((_2634 + 1.0) < _2632.x)
        {
            _2816 = true;
            break;
        }
        _2816 = false;
        break;
    }
    float _3021;
    if (_2816)
    {
        discard_state = true;
        _3021 = 0.0;
    }
    else
    {
        _3021 = cbInstanceData._m0[_2473].w;
    }
    SV_Target.x = _2638;
    SV_Target.y = _2639;
    SV_Target.z = _2640;
    SV_Target.w = _3021;
    SV_Target_1.x = _2643;
    SV_Target_1.y = _2646;
    SV_Target_1.z = _2649;
    SV_Target_1.w = cbInstanceData._m0[_2473].w;
    discard_exit();
}


