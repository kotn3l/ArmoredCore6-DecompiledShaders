#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1005;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _193 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _194 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _195 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_193, _194, _195), vec3(_193, _194, _195)));
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _215 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _237 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _243 = _237.x * cbMtdParam._m0[9u].x;
    float _244 = _237.y * cbMtdParam._m0[9u].y;
    float _245 = _237.z * cbMtdParam._m0[9u].z;
    vec4 _265 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _286 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_265.x + 0.00999999977648258209228515625));
    float _288 = _286 * (cbMtdParam._m0[15u].x + 1.0);
    float _3380 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _289 = isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0));
    float _297 = ((((cbMtdParam._m0[12u].x - _243) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _289) + _243;
    float _298 = ((((cbMtdParam._m0[12u].y - _244) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _289) + _244;
    float _299 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _245)) * _289) + _245;
    vec4 _312 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _314 = _312.x;
    vec4 _326 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _330 = _326.z;
    float _334 = (_326.x * 2.0) + (-1.0);
    float _336 = (_326.y * 2.0) + (-1.0);
    float _337 = dot(vec2(_334, _336), vec2(_334, _336));
    float _3391 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _342 = sqrt(1.0 - (isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0))));
    float _345 = _286 * (cbMtdParam._m0[14u].w + 1.0);
    float _3402 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _349 = ((cbMtdParam._m0[14u].y - _330) * (isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0)))) + _330;
    vec4 _377 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _392 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _421 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _427 = (_421.x * 2.0) + (-1.0);
    float _428 = (_421.y * 2.0) + (-1.0);
    float _429 = dot(vec2(_427, _428), vec2(_427, _428));
    float _3413 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _445 = (_289 * (((cbMtdParam._m0[13u].z * _334) - _334) + _427)) + _334;
    float _446 = (_289 * (((cbMtdParam._m0[13u].z * _336) - _336) + _428)) + _336;
    float _447 = (_289 * (sqrt(1.0 - (isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0)))) - _342)) + _342;
    float _450 = fma(_447, _208 * NORMAL.x, fma(_446, _215 * TANGENT.x, (_201 * _193) * _445));
    float _453 = fma(_447, _208 * NORMAL.y, fma(_446, _215 * TANGENT.y, (_201 * _194) * _445));
    float _456 = fma(_447, _208 * NORMAL.z, fma(_446, _215 * TANGENT.z, (_201 * _195) * _445));
    float _460 = inversesqrt(dot(vec3(_450, _453, _456), vec3(_450, _453, _456)));
    float _461 = _460 * _450;
    float _462 = _460 * _453;
    float _463 = _460 * _456;
    float _3424 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _464 = isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0));
    float _3435 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _3446 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _3457 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _3468 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _468 = isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0));
    float _484 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _525 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _535 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _525);
    float _536 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _525);
    float _537 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _525);
    float _541 = inversesqrt(dot(vec3(_535, _536, _537), vec3(_535, _536, _537)));
    float _542 = _535 * _541;
    float _543 = _536 * _541;
    float _544 = _537 * _541;
    float _550 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _551 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _571 = fma(_463, cbSceneParam._m0[5u].z, fma(_462, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _461));
    float _574 = fma(_463, cbSceneParam._m0[6u].z, fma(_462, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _461));
    float _577 = fma(_463, cbSceneParam._m0[7u].z, fma(_462, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _461));
    uint _590 = uint(roundEven(NORMAL.w)) * 13u;
    uint _591 = _590 + 9u;
    uint _592 = _591 + uint(cbMatDynParam._m0[0u].w);
    float _598 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0)))) * cbInstanceData._m0[_592].x;
    float _599 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0)))) * cbInstanceData._m0[_592].y;
    float _600 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0)))) * cbInstanceData._m0[_592].z;
    float _3479 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _601 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
    float _3490 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _602 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
    float _3501 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _603 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
    float _604 = 1.0 - _468;
    float _605 = _601 * _604;
    float _606 = _602 * _604;
    float _607 = _603 * _604;
    float _612 = (_601 + (-0.039999999105930328369140625)) * _468;
    float _613 = (_602 + (-0.039999999105930328369140625)) * _468;
    float _614 = (_603 + (-0.039999999105930328369140625)) * _468;
    float _615 = _612 + 0.039999999105930328369140625;
    float _617 = _613 + 0.039999999105930328369140625;
    float _618 = _614 + 0.039999999105930328369140625;
    vec4 _627 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _550, cbSceneParam._m0[86u].y * _551));
    float _630 = _627.x * TEXCOORD_3.w;
    float _631 = dot(vec3(_461, _462, _463), vec3(_542, _543, _544));
    float _634 = _631 * 2.0;
    float _638 = (_634 * _461) - _542;
    float _639 = (_634 * _462) - _543;
    float _640 = (_634 * _463) - _544;
    float _644 = abs(dot(vec3(_542, _543, _544), vec3(_461, _462, _463)));
    float _3512 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _646 = sqrt(_464);
    float _659 = exp2((_646 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_646 * 3.0));
    float _665 = (1.0 - _659) * ((_646 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _666 = _659 * _646;
    float _694 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _698 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _702 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1004;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _729 = fma(_702, cbModelParam._m0[26u].z, fma(_698, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _694));
        float _733 = fma(_702, cbModelParam._m0[27u].z, fma(_698, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _694));
        float _737 = fma(_702, cbModelParam._m0[28u].z, fma(_698, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _694));
        float _762 = _694 + _461;
        float _763 = _698 + _462;
        float _764 = _702 + _463;
        float _774 = fma(_764, cbModelParam._m0[26u].z, fma(_763, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _762)) - _729;
        float _775 = fma(_764, cbModelParam._m0[27u].z, fma(_763, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _762)) - _733;
        float _776 = fma(_764, cbModelParam._m0[28u].z, fma(_763, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _762)) - _737;
        float _780 = inversesqrt(dot(vec3(_774, _775, _776), vec3(_774, _775, _776)));
        float _793 = ((_780 * _774) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_729 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _794 = ((_780 * _775) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_733 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _795 = ((_780 * _776) / cbModelParam._m0[34u].z) + ((((((_737 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _798 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_793, _794, _795), 0.0);
        vec4 _805 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_793, _794, _795), 0.0);
        vec4 _812 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_793, _794, _795), 0.0);
        vec4 _819 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_793, _794, _795), 0.0);
        float _832 = exp2((_798.w + (-0.5)) * 20.0) * 2.0;
        float _833 = _832 * (_798.x + (-0.5));
        float _834 = _832 * (_798.y + (-0.5));
        float _835 = _832 * (_798.z + (-0.5));
        float _842 = exp2((_805.w + (-0.5)) * 20.0) * 2.0;
        float _843 = _842 * (_805.x + (-0.5));
        float _844 = _842 * (_805.y + (-0.5));
        float _845 = _842 * (_805.z + (-0.5));
        float _852 = exp2((_812.w + (-0.5)) * 20.0) * 2.0;
        float _853 = _852 * (_812.x + (-0.5));
        float _854 = _852 * (_812.y + (-0.5));
        float _855 = _852 * (_812.z + (-0.5));
        float _862 = exp2((_819.w + (-0.5)) * 20.0) * 2.0;
        float _863 = _862 * (_819.x + (-0.5));
        float _864 = _862 * (_819.y + (-0.5));
        float _865 = _862 * (_819.z + (-0.5));
        float _866 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _867 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _868 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _869 = _833 * 0.5;
        float _870 = _843 * 0.5;
        float _871 = _853 * 0.5;
        float _872 = dot(vec3(_869, _870, _871), vec3(_869, _870, _871));
        float _877 = (_872 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_872);
        float _886 = (dot(vec3(_461, _462, _463), vec3(_877 * _869, _877 * _870, _877 * _871)) + 1.0) * 0.5;
        float _3538 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _896 = sqrt(((_870 * _870) + (_869 * _869)) + (_871 * _871)) / (_866 + 9.9999997473787516355514526367188e-06);
        float _3549 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _897 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _898 = _897 * 2.0;
        float _902 = (1.0 - _897) / (_897 + 1.0);
        float _3560 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _903 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
        float _912 = ((((1.0 - _903) * (_898 + 2.0)) * exp2(log2(isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))) * (_898 + 1.0))) + _903) * _866;
        float _913 = _834 * 0.5;
        float _914 = _844 * 0.5;
        float _915 = _854 * 0.5;
        float _916 = dot(vec3(_913, _914, _915), vec3(_913, _914, _915));
        float _921 = (_916 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_916);
        float _929 = (dot(vec3(_461, _462, _463), vec3(_921 * _913, _921 * _914, _921 * _915)) + 1.0) * 0.5;
        float _3571 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _938 = sqrt(((_914 * _914) + (_913 * _913)) + (_915 * _915)) / (_867 + 9.9999997473787516355514526367188e-06);
        float _3582 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _940 = _939 * 2.0;
        float _944 = (1.0 - _939) / (_939 + 1.0);
        float _3593 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
        float _954 = ((((1.0 - _945) * (_940 + 2.0)) * exp2(log2(isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0))) * (_940 + 1.0))) + _945) * _867;
        float _955 = _835 * 0.5;
        float _956 = _845 * 0.5;
        float _957 = _855 * 0.5;
        float _958 = dot(vec3(_955, _956, _957), vec3(_955, _956, _957));
        float _963 = (_958 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_958);
        float _971 = (dot(vec3(_461, _462, _463), vec3(_963 * _955, _963 * _956, _963 * _957)) + 1.0) * 0.5;
        float _3604 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _980 = sqrt(((_956 * _956) + (_955 * _955)) + (_957 * _957)) / (_868 + 9.9999997473787516355514526367188e-06);
        float _3615 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _982 = _981 * 2.0;
        float _986 = (1.0 - _981) / (_981 + 1.0);
        float _3626 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
        float _996 = ((((1.0 - _987) * (_982 + 2.0)) * exp2(log2(isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0))) * (_982 + 1.0))) + _987) * _868;
        _1004 = _835;
        _1006 = _834;
        _1007 = _833;
        _1008 = _845;
        _1009 = _844;
        _1010 = _843;
        _1011 = _855;
        _1012 = _854;
        _1013 = _853;
        _1014 = _868;
        _1015 = _867;
        _1016 = _866;
        _1017 = cbModelParam._m0[36u].z * (isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0)));
        _1018 = cbModelParam._m0[36u].z * (isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0)));
        _1019 = cbModelParam._m0[36u].z * (isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0)));
    }
    else
    {
        _1004 = _1005;
        _1006 = _1005;
        _1007 = _1005;
        _1008 = _1005;
        _1009 = _1005;
        _1010 = _1005;
        _1011 = _1005;
        _1012 = _1005;
        _1013 = _1005;
        _1014 = _1005;
        _1015 = _1005;
        _1016 = _1005;
        _1017 = 0.0;
        _1018 = 0.0;
        _1019 = 0.0;
    }
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1045 = fma(_702, cbModelParam._m0[30u].z, fma(_698, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _694));
        float _1049 = fma(_702, cbModelParam._m0[31u].z, fma(_698, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _694));
        float _1053 = fma(_702, cbModelParam._m0[32u].z, fma(_698, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _694));
        float _1076 = _694 + _461;
        float _1077 = _698 + _462;
        float _1078 = _702 + _463;
        float _1088 = fma(_1078, cbModelParam._m0[30u].z, fma(_1077, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1076)) - _1045;
        float _1089 = fma(_1078, cbModelParam._m0[31u].z, fma(_1077, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1076)) - _1049;
        float _1090 = fma(_1078, cbModelParam._m0[32u].z, fma(_1077, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1076)) - _1053;
        float _1094 = inversesqrt(dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090)));
        float _1107 = ((_1094 * _1088) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1045 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1108 = ((_1094 * _1089) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1049 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1109 = ((_1094 * _1090) / cbModelParam._m0[35u].z) + ((((((_1053 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        float _1144 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1111.x + (-0.5));
        float _1146 = _1144 * (_1111.y + (-0.5));
        float _1147 = _1144 * (_1111.z + (-0.5));
        float _1154 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1118.x + (-0.5));
        float _1156 = _1154 * (_1118.y + (-0.5));
        float _1157 = _1154 * (_1118.z + (-0.5));
        float _1164 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1125.x + (-0.5));
        float _1166 = _1164 * (_1125.y + (-0.5));
        float _1167 = _1164 * (_1125.z + (-0.5));
        float _1174 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1132.x + (-0.5));
        float _1176 = _1174 * (_1132.y + (-0.5));
        float _1177 = _1174 * (_1132.z + (-0.5));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = _1145 * 0.5;
        float _1182 = _1155 * 0.5;
        float _1183 = _1165 * 0.5;
        float _1184 = dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183));
        float _1189 = (_1184 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1184);
        float _1197 = (dot(vec3(_461, _462, _463), vec3(_1189 * _1181, _1189 * _1182, _1189 * _1183)) + 1.0) * 0.5;
        float _3667 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1206 = sqrt(((_1182 * _1182) + (_1181 * _1181)) + (_1183 * _1183)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _3678 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _1208 = _1207 * 2.0;
        float _1212 = (1.0 - _1207) / (_1207 + 1.0);
        float _3689 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _1222 = ((((1.0 - _1213) * (_1208 + 2.0)) * exp2(log2(isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * (_1208 + 1.0))) + _1213) * _1178;
        float _1223 = _1146 * 0.5;
        float _1224 = _1156 * 0.5;
        float _1225 = _1166 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1239 = (dot(vec3(_461, _462, _463), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _3700 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1248 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1179 + 9.9999997473787516355514526367188e-06);
        float _3711 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _3722 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * (_1250 + 1.0))) + _1255) * _1179;
        float _1265 = _1147 * 0.5;
        float _1266 = _1157 * 0.5;
        float _1267 = _1167 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_461, _462, _463), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _3733 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _3744 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _3755 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * (_1292 + 1.0))) + _1297) * _1180;
        _1314 = _1147;
        _1315 = _1146;
        _1316 = _1145;
        _1317 = _1157;
        _1318 = _1156;
        _1319 = _1155;
        _1320 = _1167;
        _1321 = _1166;
        _1322 = _1165;
        _1323 = _1180;
        _1324 = _1179;
        _1325 = _1178;
        _1326 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)));
        _1327 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
        _1328 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
    }
    else
    {
        _1314 = _1005;
        _1315 = _1005;
        _1316 = _1005;
        _1317 = _1005;
        _1318 = _1005;
        _1319 = _1005;
        _1320 = _1005;
        _1321 = _1005;
        _1322 = _1005;
        _1323 = _1005;
        _1324 = _1005;
        _1325 = _1005;
        _1326 = 0.0;
        _1327 = 0.0;
        _1328 = 0.0;
    }
    float _1338 = (cbModelParam._m0[1u].x * (_1326 - _1017)) + _1017;
    float _1339 = (cbModelParam._m0[1u].x * (_1327 - _1018)) + _1018;
    float _1340 = (cbModelParam._m0[1u].x * (_1328 - _1019)) + _1019;
    float _1361 = fma(_1340, cbSceneParam._m0[89u].z, fma(_1339, cbSceneParam._m0[89u].y, _1338 * cbSceneParam._m0[89u].x));
    float _1364 = fma(_1340, cbSceneParam._m0[90u].z, fma(_1339, cbSceneParam._m0[90u].y, _1338 * cbSceneParam._m0[90u].x));
    float _1367 = fma(_1340, cbSceneParam._m0[91u].z, fma(_1339, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1338));
    float _1382 = _638 * 0.5;
    float _1383 = _639 * 0.5;
    float _1384 = _640 * 0.5;
    float _1385 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1316, _1319, _1322, _1325));
    float _1388 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1315, _1318, _1321, _1324));
    float _1391 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1314, _1317, _1320, _1323));
    float _1425;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1398 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1004, _1008, _1011, _1014));
        float _1402 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1006, _1009, _1012, _1015));
        float _1406 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1007, _1010, _1013, _1016));
        float _1413 = dot(vec4(cbModelParam._m0[39u]), vec4(_1382, _1383, _1384, 1.0));
        _1425 = dot(vec3(isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)), isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)), isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1413) ? 0.0 : (isnan(0.0) ? _1413 : max(0.0, _1413))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1425 = 1.0;
    }
    float _1436;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1427 = dot(vec4(cbModelParam._m0[40u]), vec4(_1382, _1383, _1384, 1.0));
        _1436 = dot(vec3(isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)), isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)), isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1427) ? 0.0 : (isnan(0.0) ? _1427 : max(0.0, _1427))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1436 = 1.0;
    }
    float _1440 = (_1436 * cbModelParam._m0[1u].x) + (_1425 * (1.0 - cbModelParam._m0[1u].x));
    float _1450 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _464);
    float _1451 = isnan(_1450) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1450 : min(cbModelParam._m0[25u].z, _1450));
    float _1531;
    float _1533;
    float _1535;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1498 = fma(_702, cbModelParam._m0[13u].z, fma(_698, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _694)) + cbModelParam._m0[13u].w;
        float _1502 = fma(_702, cbModelParam._m0[14u].z, fma(_698, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _694)) + cbModelParam._m0[14u].w;
        float _1506 = fma(_702, cbModelParam._m0[15u].z, fma(_698, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _694)) + cbModelParam._m0[15u].w;
        float _1509 = fma(_640, cbModelParam._m0[13u].z, fma(_639, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _638));
        float _1512 = fma(_640, cbModelParam._m0[14u].z, fma(_639, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _638));
        float _1515 = fma(_640, cbModelParam._m0[15u].z, fma(_639, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _638));
        float _1543;
        if (_1509 > 0.0)
        {
            _1543 = abs((1.0 - _1498) / _1509);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1509 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1498 + 1.0) / _1509);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1543 = frontier_phi_14_12_ladder;
        }
        float _1748;
        if (_1512 > 0.0)
        {
            _1748 = abs((1.0 - _1502) / _1512);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1512 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1502 + 1.0) / _1512);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1748 = frontier_phi_23_19_ladder;
        }
        float _2002;
        if (_1515 > 0.0)
        {
            _2002 = abs((1.0 - _1506) / _1515);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1515 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1506 + 1.0) / _1515);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2002 = frontier_phi_35_30_ladder;
        }
        float _2004 = isnan(_1748) ? _1543 : (isnan(_1543) ? _1748 : min(_1543, _1748));
        float _2005 = isnan(_2002) ? _2004 : (isnan(_2004) ? _2002 : min(_2004, _2002));
        float _2009 = (_2005 * _1509) + _1498;
        float _2010 = (_2005 * _1512) + _1502;
        float _2011 = (_2005 * _1515) + _1506;
        float _2012 = _2005 * 9.9999997473787516355514526367188e-05;
        float _2014 = (-1.0) - _2012;
        float _2016 = _2012 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2011 > _2016) || ((_2011 < _2014) || ((_2010 > _2016) || ((_2010 < _2014) || ((_2009 < _2014) || (_2009 > _2016))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2139 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2011, cbModelParam._m0[9u].z, fma(_2010, cbModelParam._m0[9u].y, _2009 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2011, cbModelParam._m0[10u].z, fma(_2010, cbModelParam._m0[10u].y, _2009 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2011, cbModelParam._m0[11u].z, fma(_2010, cbModelParam._m0[11u].y, _2009 * cbModelParam._m0[11u].x))), _1451);
            frontier_phi_13_35_ladder = _2139.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2139.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2139.x * cbModelParam._m0[1u].y;
        }
        _1531 = frontier_phi_13_35_ladder_2;
        _1533 = frontier_phi_13_35_ladder_1;
        _1535 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1519 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_638, _639, _640), _1451);
        _1531 = _1519.x * cbModelParam._m0[1u].y;
        _1533 = _1519.y * cbModelParam._m0[1u].y;
        _1535 = _1519.z * cbModelParam._m0[1u].y;
    }
    float _1539 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _464);
    float _1540 = isnan(_1539) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1539 : min(cbModelParam._m0[25u].w, _1539));
    float _1631;
    float _1633;
    float _1635;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1595 = fma(_702, cbModelParam._m0[21u].z, fma(_698, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _694)) + cbModelParam._m0[21u].w;
        float _1599 = fma(_702, cbModelParam._m0[22u].z, fma(_698, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _694)) + cbModelParam._m0[22u].w;
        float _1603 = fma(_702, cbModelParam._m0[23u].z, fma(_698, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _694)) + cbModelParam._m0[23u].w;
        float _1606 = fma(_640, cbModelParam._m0[21u].z, fma(_639, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _638));
        float _1609 = fma(_640, cbModelParam._m0[22u].z, fma(_639, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _638));
        float _1612 = fma(_640, cbModelParam._m0[23u].z, fma(_639, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _638));
        float _1753;
        if (_1606 > 0.0)
        {
            _1753 = abs((1.0 - _1595) / _1606);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1606 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1595 + 1.0) / _1606);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1753 = frontier_phi_25_21_ladder;
        }
        float _2029;
        if (_1609 > 0.0)
        {
            _2029 = abs((1.0 - _1599) / _1609);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1609 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1599 + 1.0) / _1609);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2029 = frontier_phi_37_32_ladder;
        }
        float _2242;
        if (_1612 > 0.0)
        {
            _2242 = abs((1.0 - _1603) / _1612);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1612 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1603 + 1.0) / _1612);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2242 = frontier_phi_46_43_ladder;
        }
        float _2244 = isnan(_2029) ? _1753 : (isnan(_1753) ? _2029 : min(_1753, _2029));
        float _2245 = isnan(_2242) ? _2244 : (isnan(_2244) ? _2242 : min(_2244, _2242));
        float _2249 = (_2245 * _1606) + _1595;
        float _2250 = (_2245 * _1609) + _1599;
        float _2251 = (_2245 * _1612) + _1603;
        float _2252 = _2245 * 9.9999997473787516355514526367188e-05;
        float _2253 = (-1.0) - _2252;
        float _2255 = _2252 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2251 > _2255) || ((_2251 < _2253) || ((_2250 > _2255) || ((_2250 < _2253) || ((_2249 < _2253) || (_2249 > _2255))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2485 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2251, cbModelParam._m0[17u].z, fma(_2250, cbModelParam._m0[17u].y, _2249 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2251, cbModelParam._m0[18u].z, fma(_2250, cbModelParam._m0[18u].y, _2249 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2251, cbModelParam._m0[19u].z, fma(_2250, cbModelParam._m0[19u].y, _2249 * cbModelParam._m0[19u].x))), _1540);
            frontier_phi_22_46_ladder = _2485.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2485.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2485.x * cbModelParam._m0[1u].z;
        }
        _1631 = frontier_phi_22_46_ladder_2;
        _1633 = frontier_phi_22_46_ladder_1;
        _1635 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1615 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_638, _639, _640), _1540);
        _1631 = _1615.x * cbModelParam._m0[1u].z;
        _1633 = _1615.y * cbModelParam._m0[1u].z;
        _1635 = _1615.z * cbModelParam._m0[1u].z;
    }
    float _1648 = (((_665 * _615) + _666) * _630) * ((cbModelParam._m0[1u].w * (_1631 - _1531)) + _1531);
    float _1650 = (((_665 * _617) + _666) * _630) * ((cbModelParam._m0[1u].w * (_1633 - _1533)) + _1533);
    float _1652 = (((_665 * _618) + _666) * _630) * ((cbModelParam._m0[1u].w * (_1635 - _1535)) + _1535);
    float _1655 = fma(_1652, cbSceneParam._m0[89u].z, fma(_1650, cbSceneParam._m0[89u].y, _1648 * cbSceneParam._m0[89u].x));
    float _1658 = fma(_1652, cbSceneParam._m0[90u].z, fma(_1650, cbSceneParam._m0[90u].y, _1648 * cbSceneParam._m0[90u].x));
    float _1661 = fma(_1652, cbSceneParam._m0[91u].z, fma(_1650, cbSceneParam._m0[91u].y, _1648 * cbSceneParam._m0[91u].x));
    uvec4 _1671 = floatBitsToUint(cbInstanceData._m0[_590 + 5u]);
    uint _1673 = _1671.x * 14u;
    uint _1674 = _1673 + 13u;
    float _1681 = _630 + (-1.0);
    float _1686 = (cbLight._m0[_1674].x * _1681) + 1.0;
    float _1687 = (cbLight._m0[_1674].y * _1681) + 1.0;
    float _1688 = (cbLight._m0[_1674].z * _1681) + 1.0;
    float _1689 = (cbLight._m0[_1674].w * _1681) + 1.0;
    uint _1690 = _1673 + 5u;
    float _1696 = isnan(1.0) ? _1687 : (isnan(_1687) ? 1.0 : min(_1687, 1.0));
    uint _1700 = _1673 + 4u;
    float _1707 = isnan(1.0) ? _1686 : (isnan(_1686) ? 1.0 : min(_1686, 1.0));
    uint _1711 = _1673 | 1u;
    float _1722 = dot(vec3(cbLight._m0[_1673].xyz), vec3(_461, _462, _463));
    float _1725 = dot(vec3(cbLight._m0[_1711].xyz), vec3(_461, _462, _463));
    float _3891 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
    float _3902 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
    float _1730 = (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * 0.3183098733425140380859375;
    float _1732 = (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * 0.3183098733425140380859375;
    float _1739 = ((cbLight._m0[_1690].x * _1696) * _1732) + ((cbLight._m0[_1700].x * _1707) * _1730);
    float _1740 = ((_1696 * cbLight._m0[_1690].y) * _1732) + ((_1707 * cbLight._m0[_1700].y) * _1730);
    float _1741 = ((_1696 * cbLight._m0[_1690].z) * _1732) + ((_1707 * cbLight._m0[_1700].z) * _1730);
    uvec4 _1745 = floatBitsToUint(cbLight._m0[_1673 + 12u]);
    bool _1747 = _1745.x == 0u;
    float _1758;
    float _1760;
    float _1762;
    if (_1747)
    {
        _1758 = _1739;
        _1760 = _1740;
        _1762 = _1741;
    }
    else
    {
        uint _1766 = _1673 + 6u;
        float _1782 = (dot(vec3(cbLight._m0[_1673 + 2u].xyz), vec3(_461, _462, _463)) * 0.5) + 0.5;
        float _1783 = _1782 * _1782;
        float _3913 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1784 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1785 = isnan(1.0) ? _1688 : (isnan(_1688) ? 1.0 : min(_1688, 1.0));
        _1758 = (((cbLight._m0[_1766].x * 0.3183098733425140380859375) * _1784) * _1785) + _1739;
        _1760 = (((cbLight._m0[_1766].y * 0.3183098733425140380859375) * _1784) * _1785) + _1740;
        _1762 = (((cbLight._m0[_1766].z * 0.3183098733425140380859375) * _1784) * _1785) + _1741;
    }
    bool _1765 = _1745.y == 0u;
    float _1803;
    float _1805;
    float _1807;
    if (_1765)
    {
        _1803 = _1758;
        _1805 = _1760;
        _1807 = _1762;
    }
    else
    {
        uint _1973 = _1673 + 7u;
        float _1989 = (dot(vec3(cbLight._m0[_1673 + 3u].xyz), vec3(_461, _462, _463)) * 0.5) + 0.5;
        float _1990 = _1989 * _1989;
        float _3929 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
        float _1991 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1992 = isnan(1.0) ? _1689 : (isnan(_1689) ? 1.0 : min(_1689, 1.0));
        _1803 = (((cbLight._m0[_1973].x * 0.3183098733425140380859375) * _1991) * _1992) + _1758;
        _1805 = (((cbLight._m0[_1973].y * 0.3183098733425140380859375) * _1991) * _1992) + _1760;
        _1807 = (((cbLight._m0[_1973].z * 0.3183098733425140380859375) * _1991) * _1992) + _1762;
    }
    uint _1810 = _1673 + 8u;
    float _1823 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1673].w)) * _464) * 0.949999988079071044921875);
    float _1824 = _1823 * _1823;
    float _1825 = cbLight._m0[_1673].x + _542;
    float _1826 = cbLight._m0[_1673].y + _543;
    float _1827 = cbLight._m0[_1673].z + _544;
    float _1831 = inversesqrt(dot(vec3(_1825, _1826, _1827), vec3(_1825, _1826, _1827)));
    float _1832 = _1831 * _1825;
    float _1833 = _1831 * _1826;
    float _1834 = _1831 * _1827;
    float _1835 = dot(vec3(_461, _462, _463), vec3(cbLight._m0[_1673].xyz));
    float _3945 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _1838 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _3956 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _1839 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _1840 = dot(vec3(_461, _462, _463), vec3(_1832, _1833, _1834));
    float _3967 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1843 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _1844 = dot(vec3(cbLight._m0[_1673].xyz), vec3(_1832, _1833, _1834));
    float _3978 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _1848 = _1824 * _1824;
    float _1852 = ((_1843 * _1843) * (_1848 + (-1.0))) + 1.0;
    float _1860 = exp2(log2(1.0 - (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0)))) * 5.0);
    float _1861 = 0.959999978542327880859375 - _612;
    float _1863 = 0.959999978542327880859375 - _613;
    float _1864 = 0.959999978542327880859375 - _614;
    float _1871 = 1.0 - _1824;
    float _1882 = (0.5 / (((_1839 * ((_1838 * _1871) + _1824)) + 9.9999999392252902907785028219223e-09) + (((_1839 * _1871) + _1824) * _1838))) * _1838;
    float _3989 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _1884 = (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_1848 / ((_1852 * _1852) * 3.141590118408203125));
    uint _1895 = _1673 + 9u;
    float _1906 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1711].w)) * _464) * 0.949999988079071044921875);
    float _1907 = _1906 * _1906;
    float _1908 = cbLight._m0[_1711].x + _542;
    float _1909 = cbLight._m0[_1711].y + _543;
    float _1910 = cbLight._m0[_1711].z + _544;
    float _1914 = inversesqrt(dot(vec3(_1908, _1909, _1910), vec3(_1908, _1909, _1910)));
    float _1915 = _1914 * _1908;
    float _1916 = _1914 * _1909;
    float _1917 = _1914 * _1910;
    float _1918 = dot(vec3(_461, _462, _463), vec3(cbLight._m0[_1711].xyz));
    float _4000 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1921 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _1922 = dot(vec3(_461, _462, _463), vec3(_1915, _1916, _1917));
    float _4011 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
    float _1925 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
    float _1926 = dot(vec3(cbLight._m0[_1711].xyz), vec3(_1915, _1916, _1917));
    float _4022 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
    float _1930 = _1907 * _1907;
    float _1934 = ((_1925 * _1925) * (_1930 + (-1.0))) + 1.0;
    float _1941 = exp2(log2(1.0 - (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) * 5.0);
    float _1948 = 1.0 - _1907;
    float _1958 = (0.5 / (((_1839 * ((_1921 * _1948) + _1907)) + 9.9999999392252902907785028219223e-09) + (((_1839 * _1948) + _1907) * _1921))) * _1921;
    float _4033 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _1960 = (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_1930 / ((_1934 * _1934) * 3.141590118408203125));
    float _1970 = (((((_1941 * _1861) + _615) * cbLight._m0[_1895].x) * _1960) * _1696) + (((((_1860 * _1861) + _615) * cbLight._m0[_1810].x) * _1884) * _1707);
    float _1971 = (((((_1941 * _1863) + _617) * cbLight._m0[_1895].y) * _1960) * _1696) + (((((_1860 * _1863) + _617) * cbLight._m0[_1810].y) * _1884) * _1707);
    float _1972 = (((((_1941 * _1864) + _618) * cbLight._m0[_1895].z) * _1960) * _1696) + (((((_1860 * _1864) + _618) * cbLight._m0[_1810].z) * _1884) * _1707);
    float _2034;
    float _2036;
    float _2038;
    if (_1747)
    {
        _2034 = _1970;
        _2036 = _1971;
        _2038 = _1972;
    }
    else
    {
        uint _2040 = _1673 + 2u;
        uint _2044 = _1673 + 10u;
        float _2058 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2040].w)) * _464) * 0.949999988079071044921875);
        float _2059 = _2058 * _2058;
        float _2060 = cbLight._m0[_2040].x + _542;
        float _2061 = cbLight._m0[_2040].y + _543;
        float _2062 = cbLight._m0[_2040].z + _544;
        float _2066 = inversesqrt(dot(vec3(_2060, _2061, _2062), vec3(_2060, _2061, _2062)));
        float _2067 = _2066 * _2060;
        float _2068 = _2066 * _2061;
        float _2069 = _2066 * _2062;
        float _2070 = dot(vec3(_461, _462, _463), vec3(cbLight._m0[_2040].xyz));
        float _4044 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
        float _2073 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _2074 = dot(vec3(_461, _462, _463), vec3(_2067, _2068, _2069));
        float _4055 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
        float _2077 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _2078 = dot(vec3(cbLight._m0[_2040].xyz), vec3(_2067, _2068, _2069));
        float _4066 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
        float _2082 = _2059 * _2059;
        float _2086 = ((_2077 * _2077) * (_2082 + (-1.0))) + 1.0;
        float _2093 = exp2(log2(1.0 - (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) * 5.0);
        float _2100 = 1.0 - _2059;
        float _2110 = (0.5 / (((_1839 * ((_2073 * _2100) + _2059)) + 9.9999999392252902907785028219223e-09) + (((_1839 * _2100) + _2059) * _2073))) * _2073;
        float _4077 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2112 = (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_2082 / ((_2086 * _2086) * 3.141590118408203125));
        float _2113 = isnan(1.0) ? _1688 : (isnan(_1688) ? 1.0 : min(_1688, 1.0));
        _2034 = (((((_2093 * _1861) + _615) * cbLight._m0[_2044].x) * _2112) * _2113) + _1970;
        _2036 = (((((_2093 * _1863) + _617) * cbLight._m0[_2044].y) * _2112) * _2113) + _1971;
        _2038 = (((((_2093 * _1864) + _618) * cbLight._m0[_2044].z) * _2112) * _2113) + _1972;
    }
    float _2148;
    float _2150;
    float _2152;
    if (_1765)
    {
        _2148 = _2034;
        _2150 = _2036;
        _2152 = _2038;
    }
    else
    {
        uint _2159 = _1673 + 3u;
        uint _2163 = _1673 + 11u;
        float _2177 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2159].w)) * _464) * 0.949999988079071044921875);
        float _2178 = _2177 * _2177;
        float _2179 = cbLight._m0[_2159].x + _542;
        float _2180 = cbLight._m0[_2159].y + _543;
        float _2181 = cbLight._m0[_2159].z + _544;
        float _2185 = inversesqrt(dot(vec3(_2179, _2180, _2181), vec3(_2179, _2180, _2181)));
        float _2186 = _2185 * _2179;
        float _2187 = _2185 * _2180;
        float _2188 = _2185 * _2181;
        float _2189 = dot(vec3(_461, _462, _463), vec3(cbLight._m0[_2159].xyz));
        float _4093 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        float _2192 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _2193 = dot(vec3(_461, _462, _463), vec3(_2186, _2187, _2188));
        float _4104 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2196 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _2197 = dot(vec3(cbLight._m0[_2159].xyz), vec3(_2186, _2187, _2188));
        float _4115 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
        float _2201 = _2178 * _2178;
        float _2205 = ((_2196 * _2196) * (_2201 + (-1.0))) + 1.0;
        float _2212 = exp2(log2(1.0 - (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0)))) * 5.0);
        float _2219 = 1.0 - _2178;
        float _2229 = (0.5 / (((_1839 * ((_2192 * _2219) + _2178)) + 9.9999999392252902907785028219223e-09) + (((_1839 * _2219) + _2178) * _2192))) * _2192;
        float _4126 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2231 = (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_2201 / ((_2205 * _2205) * 3.141590118408203125));
        float _2232 = isnan(1.0) ? _1689 : (isnan(_1689) ? 1.0 : min(_1689, 1.0));
        _2148 = (((((_2212 * _1861) + _615) * cbLight._m0[_2163].x) * _2231) * _2232) + _2034;
        _2150 = (((((_2212 * _1863) + _617) * cbLight._m0[_2163].y) * _2231) * _2232) + _2036;
        _2152 = (((((_2212 * _1864) + _618) * cbLight._m0[_2163].z) * _2231) * _2232) + _2038;
    }
    float _2367;
    float _2369;
    float _2371;
    float _2373;
    float _2375;
    float _2377;
    if (_1671.y == 0u)
    {
        float _2307 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2308 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2307;
        float _2309 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2307;
        float _2310 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2307;
        uvec4 _2322 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2323 = _2322.x;
        uint _2334 = uint((float(_2322.y) * floor(float(uint(cbSceneParam._m0[85u].y * _551) / _2323))) + floor(float(uint(cbSceneParam._m0[85u].x * _550) / _2323)));
        float _2344 = (log2(_2310 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2345 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        uint _2348 = uint(isnan(14.0) ? _2345 : (isnan(_2345) ? 14.0 : min(_2345, 14.0)));
        uvec4 _2353 = texelFetch(g_lightClusterGridBuffer, int(((_2348 << 2u) + (_2334 << 6u)) >> 2u));
        uint _2354 = _2353.x;
        uint _2355 = _2322.z;
        float _2490;
        float _2492;
        float _2494;
        float _2496;
        float _2498;
        float _2500;
        if (((((1u << ((_2355 >> 4u) & 15u)) + 4294967295u) & _2354) == 0u) || ((_2355 & 240u) == 0u))
        {
            _2490 = 0.0;
            _2492 = 0.0;
            _2494 = 0.0;
            _2496 = 0.0;
            _2498 = 0.0;
            _2500 = 0.0;
        }
        else
        {
            float _2491;
            float _2493;
            float _2495;
            float _2497;
            float _2499;
            float _2501;
            float _2644 = 0.0;
            float _2645 = 0.0;
            float _2646 = 0.0;
            float _2647 = 0.0;
            float _2648 = 0.0;
            float _2649 = 0.0;
            uint _2650 = 0u;
            uint _2659;
            bool _2660;
            for (;;)
            {
                _2659 = texelFetch(g_lightClassification, int((((_2348 << 5u) + (_2334 << 9u)) + (_2650 << 2u)) >> 2u)).x;
                _2660 = _2659 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2660)
                {
                    frontier_phi_61_pred = _2644;
                    frontier_phi_61_pred_1 = _2649;
                    frontier_phi_61_pred_2 = _2648;
                    frontier_phi_61_pred_3 = _2647;
                    frontier_phi_61_pred_4 = _2646;
                    frontier_phi_61_pred_5 = _2645;
                }
                else
                {
                    float _2768;
                    float _2769;
                    float _2770;
                    float _2771;
                    float _2772;
                    float _2773;
                    uint _2774;
                    _2768 = _2644;
                    _2769 = _2645;
                    _2770 = _2646;
                    _2771 = _2647;
                    _2772 = _2648;
                    _2773 = _2649;
                    _2774 = _2659;
                    float _2700;
                    float _2701;
                    float _2702;
                    float _2703;
                    float _2704;
                    float _2705;
                    for (;;)
                    {
                        uint _2778 = uint(findLSB(_2774)) + (_2650 << 5u);
                        uint _2775 = (_2774 + 4294967295u) & _2774;
                        uint _2780 = _2778 * 48u;
                        vec4 _2794 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2780)).x, texelFetch(g_PointLightRenderingBuffer, int(_2780 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2780 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2780 + 3u)).x));
                        uint _2800 = (_2778 * 48u) + 4u;
                        vec4 _2813 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2800)).x, texelFetch(g_PointLightRenderingBuffer, int(_2800 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2800 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2800 + 3u)).x));
                        uint _2819 = (_2778 * 48u) + 8u;
                        vec3 _2830 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2819)).x, texelFetch(g_PointLightRenderingBuffer, int(_2819 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2819 + 2u)).x));
                        float _2834 = _2794.x - _2308;
                        float _2835 = _2794.y - _2309;
                        float _2836 = _2794.z - _2310;
                        float _2837 = dot(vec3(_2834, _2835, _2836), vec3(_2834, _2835, _2836));
                        float _2840 = inversesqrt(_2837);
                        float _2841 = _2840 * _2834;
                        float _2842 = _2840 * _2835;
                        float _2843 = _2840 * _2836;
                        float _2844 = dot(vec3(_571, _574, _577), vec3(_2841, _2842, _2843));
                        float _2849 = 1.0 - (_2837 * _2794.w);
                        float _4152 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
                        float _2850 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
                        float _2851 = sqrt(_2837) * _2813.w;
                        float _2854 = 1.39999997615814208984375 / (_2851 + 1.39999997615814208984375);
                        float _2855 = _2854 * _2854;
                        float _2858 = ((1.0 - _2855) * _2844) + _2855;
                        float _2861 = _2851 * _2851;
                        float _2865 = ((isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0))) * _2850) / ((_2861 * 0.699999988079071044921875) + 1.0);
                        float _2869 = (-0.0) - _2308;
                        float _2870 = (-0.0) - _2309;
                        float _2871 = (-0.0) - _2310;
                        float _2875 = inversesqrt(dot(vec3(_2869, _2870, _2871), vec3(_2869, _2870, _2871)));
                        float _2876 = _2875 * _2869;
                        float _2877 = _2875 * _2870;
                        float _2878 = _2875 * _2871;
                        float _2886 = exp2(log2(1.0 / ((_2861 * 3.5) + 5.0)) * 0.25);
                        float _2887 = 1.0 - _646;
                        float _2894 = sqrt(1.0 - ((1.0 - (_2887 * _2887)) * (1.0 - (_2886 * _2886))));
                        float _2895 = _2894 * _2894;
                        float _2896 = _2895 * _2895;
                        float _2897 = _2876 + _2841;
                        float _2898 = _2877 + _2842;
                        float _2899 = _2878 + _2843;
                        float _2903 = inversesqrt(dot(vec3(_2897, _2898, _2899), vec3(_2897, _2898, _2899)));
                        float _2907 = dot(vec3(_571, _574, _577), vec3(_2876, _2877, _2878));
                        float _4168 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
                        float _2910 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
                        float _2911 = dot(vec3(_571, _574, _577), vec3(_2903 * _2897, _2903 * _2898, _2903 * _2899));
                        float _4179 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
                        float _2914 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
                        float _2918 = ((_2914 * _2914) * (_2896 + (-1.0))) + 1.0;
                        float _2919 = _2854 * _2895;
                        float _2920 = _2919 * _2919;
                        float _2923 = ((1.0 - _2920) * _2844) + _2920;
                        float _4190 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
                        float _2924 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
                        float _2925 = 1.0 - _2895;
                        float _2935 = (0.5 / (((_2924 * ((_2910 * _2925) + _2895)) + 9.9999999392252902907785028219223e-09) + (((_2924 * _2925) + _2895) * _2910))) * _2924;
                        float _4201 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
                        float _2946 = (((_2896 * 3.1415927410125732421875) * (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) / ((_2918 * _2918) * ((_2861 * 2.1991131305694580078125) + 3.141590118408203125))) * _2850;
                        _2703 = (_2865 * _2813.x) + _2771;
                        _2704 = (_2865 * _2813.y) + _2772;
                        _2705 = (_2865 * _2813.z) + _2773;
                        _2700 = (_2946 * _2830.x) + _2768;
                        _2701 = (_2946 * _2830.y) + _2769;
                        _2702 = (_2946 * _2830.z) + _2770;
                        if (_2775 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2768 = _2700;
                            _2769 = _2701;
                            _2770 = _2702;
                            _2771 = _2703;
                            _2772 = _2704;
                            _2773 = _2705;
                            _2774 = _2775;
                        }
                    }
                    frontier_phi_61_pred = _2700;
                    frontier_phi_61_pred_1 = _2705;
                    frontier_phi_61_pred_2 = _2704;
                    frontier_phi_61_pred_3 = _2703;
                    frontier_phi_61_pred_4 = _2702;
                    frontier_phi_61_pred_5 = _2701;
                }
                _2491 = frontier_phi_61_pred;
                _2501 = frontier_phi_61_pred_1;
                _2499 = frontier_phi_61_pred_2;
                _2497 = frontier_phi_61_pred_3;
                _2495 = frontier_phi_61_pred_4;
                _2493 = frontier_phi_61_pred_5;
                uint _2651 = _2650 + 1u;
                if (_2651 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2644 = _2491;
                    _2645 = _2493;
                    _2646 = _2495;
                    _2647 = _2497;
                    _2648 = _2499;
                    _2649 = _2501;
                    _2650 = _2651;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2490 = _2491;
            _2492 = _2493;
            _2494 = _2495;
            _2496 = _2497;
            _2498 = _2499;
            _2500 = _2501;
        }
        uvec4 _2504 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2505 = _2504.z;
        uint _2507 = (_2505 >> 8u) & 15u;
        float _2612;
        float _2614;
        float _2616;
        float _2618;
        float _2620;
        float _2622;
        if (((4294967295u << _2507) & _2354) == 0u)
        {
            _2612 = _2490;
            _2614 = _2492;
            _2616 = _2494;
            _2618 = _2496;
            _2620 = _2498;
            _2622 = _2500;
        }
        else
        {
            float _2637 = inversesqrt(dot(vec3(_2308, _2309, _2310), vec3(_2308, _2309, _2310)));
            float _2638 = _2637 * _2308;
            float _2639 = _2637 * _2309;
            float _2640 = _2637 * _2310;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2507 < ((_2505 >> 12u) & 15u))
            {
                float _2613;
                float _2615;
                float _2617;
                float _2619;
                float _2621;
                float _2623;
                float _2751 = _2490;
                float _2752 = _2492;
                float _2753 = _2494;
                float _2754 = _2496;
                float _2755 = _2498;
                float _2756 = _2500;
                uint _2757 = _2507;
                uint _2766;
                bool _2767;
                for (;;)
                {
                    _2766 = texelFetch(g_lightClassification, int((((_2348 << 5u) + (_2334 << 9u)) + (_2757 << 2u)) >> 2u)).x;
                    _2767 = _2766 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2767)
                    {
                        frontier_phi_67_pred = _2754;
                        frontier_phi_67_pred_1 = _2755;
                        frontier_phi_67_pred_2 = _2756;
                        frontier_phi_67_pred_3 = _2753;
                        frontier_phi_67_pred_4 = _2752;
                        frontier_phi_67_pred_5 = _2751;
                    }
                    else
                    {
                        float _2951;
                        float _2952;
                        float _2953;
                        float _2954;
                        float _2955;
                        float _2956;
                        float _3246;
                        float _3247;
                        float _3248;
                        float _3249;
                        float _3250;
                        float _3251;
                        float _2964 = _2751;
                        float _2965 = _2752;
                        float _2966 = _2753;
                        float _2967 = _2754;
                        float _2968 = _2755;
                        float _2969 = _2756;
                        uint _2970 = _2766;
                        uint _2971;
                        vec4 _2996;
                        float _2997;
                        vec4 _3012;
                        vec3 _3024;
                        vec4 _3039;
                        vec4 _3055;
                        float _3102;
                        bool _3103;
                        for (;;)
                        {
                            uint _2981 = ((_2757 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2970));
                            _2971 = (_2970 + 4294967295u) & _2970;
                            uint _2983 = _2981 * 40u;
                            _2996 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2983)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 3u)).x));
                            _2997 = _2996.w;
                            uint _2999 = (_2981 * 40u) + 4u;
                            _3012 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2999)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 3u)).x));
                            uint _3014 = (_2981 * 40u) + 8u;
                            _3024 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3014)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 2u)).x));
                            uint _3026 = (_2981 * 40u) + 16u;
                            _3039 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3026)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 3u)).x));
                            uint _3042 = (_2981 * 40u) + 20u;
                            _3055 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3042)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 3u)).x));
                            uint _3058 = (_2981 * 40u) + 24u;
                            vec4 _3071 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3058)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 3u)).x));
                            uint _3077 = (_2981 * 40u) + 28u;
                            vec4 _3090 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3077)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 3u)).x));
                            _3102 = fma(_2310, _3090.z, fma(_2309, _3090.y, _3090.x * _2308)) + _3090.w;
                            _3103 = !((fma(_2310, _3071.z, fma(_2309, _3071.y, _3071.x * _2308)) + _3071.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3103)
                            {
                                float _3130 = _2996.x - _2308;
                                float _3131 = _2996.y - _2309;
                                float _3132 = _2996.z - _2310;
                                float _3133 = dot(vec3(_3130, _3131, _3132), vec3(_3130, _3131, _3132));
                                float _3136 = inversesqrt(_3133);
                                float _3137 = _3136 * _3130;
                                float _3138 = _3136 * _3131;
                                float _3139 = _3136 * _3132;
                                float _3143 = 1.0 - (_3133 / (_2997 * _2997));
                                float _4212 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                                float _3144 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
                                float _3148 = sqrt(_3133) * _3012.w;
                                float _3150 = 1.39999997615814208984375 / (_3148 + 1.39999997615814208984375);
                                float _3151 = _3150 * _3150;
                                float _3154 = ((1.0 - _3151) * dot(vec3(_3137, _3138, _3139), vec3(_571, _574, _577))) + _3151;
                                float _3157 = _3148 * _3148;
                                float _3161 = (fma(_2310, _3039.z, fma(_2309, _3039.y, _3039.x * _2308)) + _3039.w) / _3102;
                                float _3162 = (fma(_2310, _3055.z, fma(_2309, _3055.y, _3055.x * _2308)) + _3055.w) / _3102;
                                float _3166 = 1.0 - dot(vec2(_3161, _3162), vec2(_3161, _3162));
                                float _4228 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                                float _3167 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
                                float _3168 = _3167 * (((isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0))) * _3144) / ((_3157 * 0.699999988079071044921875) + 1.0));
                                float _3180 = exp2(log2(1.0 / ((_3157 * 3.5) + 5.0)) * 0.25);
                                float _3181 = 1.0 - _646;
                                float _3188 = sqrt(1.0 - ((1.0 - (_3181 * _3181)) * (1.0 - (_3180 * _3180))));
                                float _3189 = _3188 * _3188;
                                float _3190 = _3189 * _3189;
                                float _3191 = _3137 - _2638;
                                float _3192 = _3138 - _2639;
                                float _3193 = _3139 - _2640;
                                float _3197 = inversesqrt(dot(vec3(_3191, _3192, _3193), vec3(_3191, _3192, _3193)));
                                float _3201 = dot(vec3(_571, _574, _577), vec3((-0.0) - _2638, (-0.0) - _2639, (-0.0) - _2640));
                                float _4239 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                                float _3204 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
                                float _3205 = dot(vec3(_571, _574, _577), vec3(_3197 * _3191, _3197 * _3192, _3197 * _3193));
                                float _4250 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                                float _3208 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
                                float _3212 = ((_3208 * _3208) * (_3190 + (-1.0))) + 1.0;
                                float _3213 = _3150 * _3189;
                                float _3214 = _3213 * _3213;
                                float _3220 = ((1.0 - _3214) * dot(vec3(_571, _574, _577), vec3(_3137, _3138, _3139))) + _3214;
                                float _4261 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                                float _3221 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
                                float _3222 = 1.0 - _3189;
                                float _3232 = (0.5 / (((_3221 * ((_3204 * _3222) + _3189)) + 9.9999999392252902907785028219223e-09) + (((_3221 * _3222) + _3189) * _3204))) * _3221;
                                float _4272 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                                float _3242 = (_3167 * _3144) * (((_3190 * 3.1415927410125732421875) * (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0)))) / ((_3212 * _3212) * ((_3157 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3242 * _3024.x;
                                frontier_phi_73_pred_1 = _3242 * _3024.y;
                                frontier_phi_73_pred_2 = _3168 * _3012.z;
                                frontier_phi_73_pred_3 = _3168 * _3012.y;
                                frontier_phi_73_pred_4 = _3168 * _3012.x;
                                frontier_phi_73_pred_5 = _3242 * _3024.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3246 = frontier_phi_73_pred;
                            _3247 = frontier_phi_73_pred_1;
                            _3251 = frontier_phi_73_pred_2;
                            _3250 = frontier_phi_73_pred_3;
                            _3249 = frontier_phi_73_pred_4;
                            _3248 = frontier_phi_73_pred_5;
                            _2954 = _3249 + _2967;
                            _2955 = _3250 + _2968;
                            _2956 = _3251 + _2969;
                            _2951 = _3246 + _2964;
                            _2952 = _3247 + _2965;
                            _2953 = _3248 + _2966;
                            if (_2971 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2964 = _2951;
                                _2965 = _2952;
                                _2966 = _2953;
                                _2967 = _2954;
                                _2968 = _2955;
                                _2969 = _2956;
                                _2970 = _2971;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2954;
                        frontier_phi_67_pred_1 = _2955;
                        frontier_phi_67_pred_2 = _2956;
                        frontier_phi_67_pred_3 = _2953;
                        frontier_phi_67_pred_4 = _2952;
                        frontier_phi_67_pred_5 = _2951;
                    }
                    _2619 = frontier_phi_67_pred;
                    _2621 = frontier_phi_67_pred_1;
                    _2623 = frontier_phi_67_pred_2;
                    _2617 = frontier_phi_67_pred_3;
                    _2615 = frontier_phi_67_pred_4;
                    _2613 = frontier_phi_67_pred_5;
                    uint _2758 = _2757 + 1u;
                    if (_2758 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2751 = _2613;
                        _2752 = _2615;
                        _2753 = _2617;
                        _2754 = _2619;
                        _2755 = _2621;
                        _2756 = _2623;
                        _2757 = _2758;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2621;
                frontier_phi_55_56_ladder_1 = _2623;
                frontier_phi_55_56_ladder_2 = _2619;
                frontier_phi_55_56_ladder_3 = _2617;
                frontier_phi_55_56_ladder_4 = _2615;
                frontier_phi_55_56_ladder_5 = _2613;
            }
            else
            {
                frontier_phi_55_56_ladder = _2498;
                frontier_phi_55_56_ladder_1 = _2500;
                frontier_phi_55_56_ladder_2 = _2496;
                frontier_phi_55_56_ladder_3 = _2494;
                frontier_phi_55_56_ladder_4 = _2492;
                frontier_phi_55_56_ladder_5 = _2490;
            }
            _2612 = frontier_phi_55_56_ladder_5;
            _2614 = frontier_phi_55_56_ladder_4;
            _2616 = frontier_phi_55_56_ladder_3;
            _2618 = frontier_phi_55_56_ladder_2;
            _2620 = frontier_phi_55_56_ladder;
            _2622 = frontier_phi_55_56_ladder_1;
        }
        float _2627 = isnan(1.0) ? _630 : (isnan(_630) ? 1.0 : min(_630, 1.0));
        _2367 = (_2627 * _2618) + _1803;
        _2369 = (_2627 * _2620) + _1805;
        _2371 = (_2627 * _2622) + _1807;
        _2373 = ((_2612 * _615) * _2627) + _2148;
        _2375 = ((_2614 * _617) * _2627) + _2150;
        _2377 = ((_2616 * _618) * _2627) + _2152;
    }
    else
    {
        _2367 = _1803;
        _2369 = _1805;
        _2371 = _1807;
        _2373 = _2148;
        _2375 = _2150;
        _2377 = _2152;
    }
    uint _2383 = _591 + uint(cbMatDynParam._m0[0u].w);
    float _2391 = ((_289 * cbMtdParam._m0[11u].x) * (_392.x + _377.x)) * cbInstanceData._m0[_2383].x;
    float _2394 = ((_289 * cbMtdParam._m0[11u].y) * (_392.y + _377.y)) * cbInstanceData._m0[_2383].y;
    float _2397 = ((_289 * cbMtdParam._m0[11u].z) * (_392.z + _377.z)) * cbInstanceData._m0[_2383].z;
    float _4288 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _4299 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _4310 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _2414 = (((isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_2367 + ((isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0))) * _630))) + ((_2373 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _1440)) * cbPerFrame._m0[3u].x)) + _2391;
    float _2416 = (_2394 + ((_2375 + ((isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))) * _1440)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_2369 + ((isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0))) * _630)));
    float _2418 = (_2397 + ((_2377 + ((isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))) * _1440)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_2371 + ((isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0))) * _630)));
    float _4336 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2431 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
    uint _2432 = _590 + 6u;
    float _2440 = _550 / cbSceneParam._m0[86u].x;
    float _2441 = _551 / cbSceneParam._m0[86u].y;
    vec4 _2455 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2440, _2441, (log2((isnan(cbSceneParam._m0[77u].w) ? _484 : (isnan(_484) ? cbSceneParam._m0[77u].w : min(_484, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2457 = _2455.x;
    float _2458 = _2455.y;
    float _2459 = _2455.z;
    float _2460 = _2455.w;
    float _2553;
    float _2555;
    float _2557;
    float _2559;
    if (_484 > cbSceneParam._m0[78u].w)
    {
        float _2515 = isnan(_484) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _484 : min(cbSceneParam._m0[80u].w, _484));
        float _2516 = _2515 / _484;
        float _2527 = _2516 * _535;
        float _2528 = _536 * _2516;
        float _2529 = (-0.0) - _2528;
        float _2531 = _2516 * _537;
        float _2533 = (cbSceneParam._m0[77u].w * _2529) / _2515;
        float _2534 = _2533 + cbSceneParam._m0[79u].w;
        float _2535 = cbSceneParam._m0[79u].w - _2528;
        float _2541 = sqrt(((_2527 * _2527) + (_2528 * _2528)) + (_2531 * _2531));
        float _2544 = (1.0 - (cbSceneParam._m0[77u].w / _2515)) * _2541;
        float _2549 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2551 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2713;
        if (abs((_2529 - _2533) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2713 = ((((_2534 > 0.0) ? exp2(_2549 * _2534) : (2.0 - exp2(_2551 * _2534))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2544;
        }
        else
        {
            float _2673 = 1.0 / cbSceneParam._m0[80u].x;
            float _2674 = isnan(_2535) ? _2534 : (isnan(_2534) ? _2535 : max(_2534, _2535));
            float _2675 = isnan(_2535) ? _2534 : (isnan(_2534) ? _2535 : min(_2534, _2535));
            float _2684 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : min(_2674, 0.0));
            float _2685 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : min(_2675, 0.0));
            _2713 = ((abs(_2541 / _2529) * cbSceneParam._m0[80u].y) * ((((_2684 - _2685) * 2.0) - ((exp2(_2549 * (isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0)))) - exp2(_2549 * (isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0))))) * _2673)) - ((exp2(_2551 * _2684) - exp2(_2551 * _2685)) * _2673))) + (_2544 * cbSceneParam._m0[80u].z);
        }
        vec4 _2715 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2440, _2441, 1.0), 0.0);
        float _2724 = exp2((_2713 * (-1.44269502162933349609375)) * (1.0 - _2715.w));
        float _2725 = log2(_2724);
        float _2741 = log2(_2460);
        _2553 = (exp2(_2741 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2725 * cbSceneParam._m0[78u].x)) * _2715.x) / cbSceneParam._m0[78u].x)) + _2457;
        _2555 = (exp2(_2741 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2725 * cbSceneParam._m0[78u].y)) * _2715.y) / cbSceneParam._m0[78u].y)) + _2458;
        _2557 = (exp2(_2741 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2725 * cbSceneParam._m0[78u].z)) * _2715.z) / cbSceneParam._m0[78u].z)) + _2459;
        _2559 = _2724 * _2460;
    }
    else
    {
        _2553 = _2457;
        _2555 = _2458;
        _2557 = _2459;
        _2559 = _2460;
    }
    float _2571 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2572 = _2571 == 3.0;
    float _2573 = log2(_2559);
    float _2577 = exp2(_2573 * cbSceneParam._m0[78u].x);
    float _2578 = exp2(_2573 * cbSceneParam._m0[78u].y);
    float _2579 = exp2(_2573 * cbSceneParam._m0[78u].z);
    float _2580 = _2577 * (isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0)));
    float _2581 = _2578 * (isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0)));
    float _2582 = _2579 * (isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0)));
    float _2591 = (_2571 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2591 * (_2572 ? _2580 : (_2580 + (cbSceneParam._m0[72u].w * _2553)));
    SV_Target.y = _2591 * (_2572 ? _2581 : (_2581 + (cbSceneParam._m0[72u].w * _2555)));
    SV_Target.z = _2591 * (_2572 ? _2582 : (_2582 + (cbSceneParam._m0[72u].w * _2557)));
    SV_Target.w = cbInstanceData._m0[_2432].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2391) * _2431) * _2577) * _2591;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2394) * _2431) * _2578) * _2591;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2397) * _2431) * _2579) * _2591;
    SV_Target_1.w = cbInstanceData._m0[_2432].w;
}


