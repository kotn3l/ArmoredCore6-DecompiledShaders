#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1052;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _245 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _251 = _245.x * cbMtdParam._m0[9u].x;
    float _252 = _245.y * cbMtdParam._m0[9u].y;
    float _253 = _245.z * cbMtdParam._m0[9u].z;
    vec4 _291 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _307 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3710 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _308 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _315 = (((_291.x * cbMtdParam._m0[10u].x) - _251) * _308) + _251;
    float _316 = (((_291.y * cbMtdParam._m0[10u].y) - _252) * _308) + _252;
    float _317 = (((_291.z * cbMtdParam._m0[10u].z) - _253) * _308) + _253;
    vec4 _337 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _352 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _354 = _352.x;
    float _372 = ((texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[7u].w)).x - _354) * _308) + _354;
    vec4 _385 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _393 = (_385.x * 2.0) + (-1.0);
    float _395 = (_385.y * 2.0) + (-1.0);
    float _396 = dot(vec2(_393, _395), vec2(_393, _395));
    float _3721 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    vec4 _413 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _417 = _413.z;
    float _420 = (_413.x * 2.0) + (-1.0);
    float _421 = (_413.y * 2.0) + (-1.0);
    float _422 = dot(vec2(_420, _421), vec2(_420, _421));
    float _3732 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _427 = sqrt(1.0 - (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))));
    float _430 = (_308 * (_385.z - _417)) + _417;
    vec4 _457 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _472 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _486 = (TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_337.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].x + 1.0);
    float _3743 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _487 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
    float _494 = (_308 * (_393 - _420)) + _420;
    float _495 = (_308 * (_395 - _421)) + _421;
    float _496 = (_308 * (sqrt(1.0 - (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0)))) - _427)) + _427;
    float _499 = fma(_496, _216 * NORMAL.x, fma(_495, _223 * TANGENT.x, (_209 * _201) * _494));
    float _502 = fma(_496, _216 * NORMAL.y, fma(_495, _223 * TANGENT.y, (_209 * _202) * _494));
    float _505 = fma(_496, _216 * NORMAL.z, fma(_495, _223 * TANGENT.z, (_209 * _203) * _494));
    float _509 = inversesqrt(dot(vec3(_499, _502, _505), vec3(_499, _502, _505)));
    float _510 = _509 * _499;
    float _511 = _509 * _502;
    float _512 = _509 * _505;
    float _3754 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _513 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
    float _3765 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _3776 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3787 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _3798 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _517 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _533 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _574 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _584 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _574);
    float _585 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _574);
    float _586 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _574);
    float _590 = inversesqrt(dot(vec3(_584, _585, _586), vec3(_584, _585, _586)));
    float _591 = _584 * _590;
    float _592 = _585 * _590;
    float _593 = _586 * _590;
    float _599 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _600 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _618 = fma(_512, cbSceneParam._m0[5u].z, fma(_511, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _510));
    float _621 = fma(_512, cbSceneParam._m0[6u].z, fma(_511, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _510));
    float _624 = fma(_512, cbSceneParam._m0[7u].z, fma(_511, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _510));
    uint _637 = uint(roundEven(NORMAL.w)) * 13u;
    uint _638 = _637 + 9u;
    uint _639 = _638 + uint(cbMatDynParam._m0[0u].w);
    float _645 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0)))) * cbInstanceData._m0[_639].x;
    float _646 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0)))) * cbInstanceData._m0[_639].y;
    float _647 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0)))) * cbInstanceData._m0[_639].z;
    float _3809 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _648 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _3820 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _649 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _3831 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _650 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _651 = 1.0 - _517;
    float _652 = _648 * _651;
    float _653 = _649 * _651;
    float _654 = _650 * _651;
    float _659 = (_648 + (-0.039999999105930328369140625)) * _517;
    float _660 = (_649 + (-0.039999999105930328369140625)) * _517;
    float _661 = (_650 + (-0.039999999105930328369140625)) * _517;
    float _662 = _659 + 0.039999999105930328369140625;
    float _664 = _660 + 0.039999999105930328369140625;
    float _665 = _661 + 0.039999999105930328369140625;
    vec4 _674 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _599, cbSceneParam._m0[86u].y * _600));
    float _677 = _674.x * TEXCOORD_3.w;
    float _678 = dot(vec3(_510, _511, _512), vec3(_591, _592, _593));
    float _681 = _678 * 2.0;
    float _685 = (_681 * _510) - _591;
    float _686 = (_681 * _511) - _592;
    float _687 = (_681 * _512) - _593;
    float _691 = abs(dot(vec3(_591, _592, _593), vec3(_510, _511, _512)));
    float _3842 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _693 = sqrt(_513);
    float _706 = exp2((_693 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_693 * 3.0));
    float _712 = (1.0 - _706) * ((_693 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _713 = _706 * _693;
    float _741 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _745 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _749 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1051;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _776 = fma(_749, cbModelParam._m0[26u].z, fma(_745, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _741));
        float _780 = fma(_749, cbModelParam._m0[27u].z, fma(_745, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _741));
        float _784 = fma(_749, cbModelParam._m0[28u].z, fma(_745, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _741));
        float _809 = _741 + _510;
        float _810 = _745 + _511;
        float _811 = _749 + _512;
        float _821 = fma(_811, cbModelParam._m0[26u].z, fma(_810, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _809)) - _776;
        float _822 = fma(_811, cbModelParam._m0[27u].z, fma(_810, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _809)) - _780;
        float _823 = fma(_811, cbModelParam._m0[28u].z, fma(_810, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _809)) - _784;
        float _827 = inversesqrt(dot(vec3(_821, _822, _823), vec3(_821, _822, _823)));
        float _840 = ((_827 * _821) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_776 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _841 = ((_827 * _822) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_780 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _842 = ((_827 * _823) / cbModelParam._m0[34u].z) + ((((((_784 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_840, _841, _842), 0.0);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_840, _841, _842), 0.0);
        vec4 _859 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_840, _841, _842), 0.0);
        vec4 _866 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_840, _841, _842), 0.0);
        float _879 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _880 = _879 * (_845.x + (-0.5));
        float _881 = _879 * (_845.y + (-0.5));
        float _882 = _879 * (_845.z + (-0.5));
        float _889 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _890 = _889 * (_852.x + (-0.5));
        float _891 = _889 * (_852.y + (-0.5));
        float _892 = _889 * (_852.z + (-0.5));
        float _899 = exp2((_859.w + (-0.5)) * 20.0) * 2.0;
        float _900 = _899 * (_859.x + (-0.5));
        float _901 = _899 * (_859.y + (-0.5));
        float _902 = _899 * (_859.z + (-0.5));
        float _909 = exp2((_866.w + (-0.5)) * 20.0) * 2.0;
        float _910 = _909 * (_866.x + (-0.5));
        float _911 = _909 * (_866.y + (-0.5));
        float _912 = _909 * (_866.z + (-0.5));
        float _913 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _914 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _915 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _916 = _880 * 0.5;
        float _917 = _890 * 0.5;
        float _918 = _900 * 0.5;
        float _919 = dot(vec3(_916, _917, _918), vec3(_916, _917, _918));
        float _924 = (_919 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_919);
        float _933 = (dot(vec3(_510, _511, _512), vec3(_924 * _916, _924 * _917, _924 * _918)) + 1.0) * 0.5;
        float _3868 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _943 = sqrt(((_917 * _917) + (_916 * _916)) + (_918 * _918)) / (_913 + 9.9999997473787516355514526367188e-06);
        float _3879 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _944 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _945 = _944 * 2.0;
        float _949 = (1.0 - _944) / (_944 + 1.0);
        float _3890 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _959 = ((((1.0 - _950) * (_945 + 2.0)) * exp2(log2(isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * (_945 + 1.0))) + _950) * _913;
        float _960 = _881 * 0.5;
        float _961 = _891 * 0.5;
        float _962 = _901 * 0.5;
        float _963 = dot(vec3(_960, _961, _962), vec3(_960, _961, _962));
        float _968 = (_963 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_963);
        float _976 = (dot(vec3(_510, _511, _512), vec3(_968 * _960, _968 * _961, _968 * _962)) + 1.0) * 0.5;
        float _3901 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _985 = sqrt(((_961 * _961) + (_960 * _960)) + (_962 * _962)) / (_914 + 9.9999997473787516355514526367188e-06);
        float _3912 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _987 = _986 * 2.0;
        float _991 = (1.0 - _986) / (_986 + 1.0);
        float _3923 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1001 = ((((1.0 - _992) * (_987 + 2.0)) * exp2(log2(isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * (_987 + 1.0))) + _992) * _914;
        float _1002 = _882 * 0.5;
        float _1003 = _892 * 0.5;
        float _1004 = _902 * 0.5;
        float _1005 = dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004));
        float _1010 = (_1005 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1005);
        float _1018 = (dot(vec3(_510, _511, _512), vec3(_1010 * _1002, _1010 * _1003, _1010 * _1004)) + 1.0) * 0.5;
        float _3934 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1027 = sqrt(((_1003 * _1003) + (_1002 * _1002)) + (_1004 * _1004)) / (_915 + 9.9999997473787516355514526367188e-06);
        float _3945 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1029 = _1028 * 2.0;
        float _1033 = (1.0 - _1028) / (_1028 + 1.0);
        float _3956 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1043 = ((((1.0 - _1034) * (_1029 + 2.0)) * exp2(log2(isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (_1029 + 1.0))) + _1034) * _915;
        _1051 = _882;
        _1053 = _881;
        _1054 = _880;
        _1055 = _892;
        _1056 = _891;
        _1057 = _890;
        _1058 = _902;
        _1059 = _901;
        _1060 = _900;
        _1061 = _915;
        _1062 = _914;
        _1063 = _913;
        _1064 = cbModelParam._m0[36u].z * (isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0)));
        _1065 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0)));
        _1066 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0)));
    }
    else
    {
        _1051 = _1052;
        _1053 = _1052;
        _1054 = _1052;
        _1055 = _1052;
        _1056 = _1052;
        _1057 = _1052;
        _1058 = _1052;
        _1059 = _1052;
        _1060 = _1052;
        _1061 = _1052;
        _1062 = _1052;
        _1063 = _1052;
        _1064 = 0.0;
        _1065 = 0.0;
        _1066 = 0.0;
    }
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1092 = fma(_749, cbModelParam._m0[30u].z, fma(_745, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _741));
        float _1096 = fma(_749, cbModelParam._m0[31u].z, fma(_745, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _741));
        float _1100 = fma(_749, cbModelParam._m0[32u].z, fma(_745, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _741));
        float _1123 = _741 + _510;
        float _1124 = _745 + _511;
        float _1125 = _749 + _512;
        float _1135 = fma(_1125, cbModelParam._m0[30u].z, fma(_1124, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1123)) - _1092;
        float _1136 = fma(_1125, cbModelParam._m0[31u].z, fma(_1124, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1123)) - _1096;
        float _1137 = fma(_1125, cbModelParam._m0[32u].z, fma(_1124, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1123)) - _1100;
        float _1141 = inversesqrt(dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137)));
        float _1154 = ((_1141 * _1135) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1092 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1155 = ((_1141 * _1136) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1096 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1156 = ((_1141 * _1137) / cbModelParam._m0[35u].z) + ((((((_1100 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        float _1191 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1158.x + (-0.5));
        float _1193 = _1191 * (_1158.y + (-0.5));
        float _1194 = _1191 * (_1158.z + (-0.5));
        float _1201 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1165.x + (-0.5));
        float _1203 = _1201 * (_1165.y + (-0.5));
        float _1204 = _1201 * (_1165.z + (-0.5));
        float _1211 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1172.x + (-0.5));
        float _1213 = _1211 * (_1172.y + (-0.5));
        float _1214 = _1211 * (_1172.z + (-0.5));
        float _1221 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1179.x + (-0.5));
        float _1223 = _1221 * (_1179.y + (-0.5));
        float _1224 = _1221 * (_1179.z + (-0.5));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = _1192 * 0.5;
        float _1229 = _1202 * 0.5;
        float _1230 = _1212 * 0.5;
        float _1231 = dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230));
        float _1236 = (_1231 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1231);
        float _1244 = (dot(vec3(_510, _511, _512), vec3(_1236 * _1228, _1236 * _1229, _1236 * _1230)) + 1.0) * 0.5;
        float _3997 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1253 = sqrt(((_1229 * _1229) + (_1228 * _1228)) + (_1230 * _1230)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _4008 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1255 = _1254 * 2.0;
        float _1259 = (1.0 - _1254) / (_1254 + 1.0);
        float _4019 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1269 = ((((1.0 - _1260) * (_1255 + 2.0)) * exp2(log2(isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (_1255 + 1.0))) + _1260) * _1225;
        float _1270 = _1193 * 0.5;
        float _1271 = _1203 * 0.5;
        float _1272 = _1213 * 0.5;
        float _1273 = dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272));
        float _1278 = (_1273 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1273);
        float _1286 = (dot(vec3(_510, _511, _512), vec3(_1278 * _1270, _1278 * _1271, _1278 * _1272)) + 1.0) * 0.5;
        float _4030 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1295 = sqrt(((_1271 * _1271) + (_1270 * _1270)) + (_1272 * _1272)) / (_1226 + 9.9999997473787516355514526367188e-06);
        float _4041 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1297 = _1296 * 2.0;
        float _1301 = (1.0 - _1296) / (_1296 + 1.0);
        float _4052 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1311 = ((((1.0 - _1302) * (_1297 + 2.0)) * exp2(log2(isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (_1297 + 1.0))) + _1302) * _1226;
        float _1312 = _1194 * 0.5;
        float _1313 = _1204 * 0.5;
        float _1314 = _1214 * 0.5;
        float _1315 = dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314));
        float _1320 = (_1315 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1315);
        float _1328 = (dot(vec3(_510, _511, _512), vec3(_1320 * _1312, _1320 * _1313, _1320 * _1314)) + 1.0) * 0.5;
        float _4063 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1337 = sqrt(((_1313 * _1313) + (_1312 * _1312)) + (_1314 * _1314)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _4074 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1339 = _1338 * 2.0;
        float _1343 = (1.0 - _1338) / (_1338 + 1.0);
        float _4085 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1353 = ((((1.0 - _1344) * (_1339 + 2.0)) * exp2(log2(isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_1339 + 1.0))) + _1344) * _1227;
        _1361 = _1194;
        _1362 = _1193;
        _1363 = _1192;
        _1364 = _1204;
        _1365 = _1203;
        _1366 = _1202;
        _1367 = _1214;
        _1368 = _1213;
        _1369 = _1212;
        _1370 = _1227;
        _1371 = _1226;
        _1372 = _1225;
        _1373 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)));
        _1374 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)));
        _1375 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)));
    }
    else
    {
        _1361 = _1052;
        _1362 = _1052;
        _1363 = _1052;
        _1364 = _1052;
        _1365 = _1052;
        _1366 = _1052;
        _1367 = _1052;
        _1368 = _1052;
        _1369 = _1052;
        _1370 = _1052;
        _1371 = _1052;
        _1372 = _1052;
        _1373 = 0.0;
        _1374 = 0.0;
        _1375 = 0.0;
    }
    float _1385 = (cbModelParam._m0[1u].x * (_1373 - _1064)) + _1064;
    float _1386 = (cbModelParam._m0[1u].x * (_1374 - _1065)) + _1065;
    float _1387 = (cbModelParam._m0[1u].x * (_1375 - _1066)) + _1066;
    float _1408 = fma(_1387, cbSceneParam._m0[89u].z, fma(_1386, cbSceneParam._m0[89u].y, _1385 * cbSceneParam._m0[89u].x));
    float _1411 = fma(_1387, cbSceneParam._m0[90u].z, fma(_1386, cbSceneParam._m0[90u].y, _1385 * cbSceneParam._m0[90u].x));
    float _1414 = fma(_1387, cbSceneParam._m0[91u].z, fma(_1386, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1385));
    float _1429 = _685 * 0.5;
    float _1430 = _686 * 0.5;
    float _1431 = _687 * 0.5;
    float _1432 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1363, _1366, _1369, _1372));
    float _1435 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1362, _1365, _1368, _1371));
    float _1438 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1361, _1364, _1367, _1370));
    float _1472;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1445 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1051, _1055, _1058, _1061));
        float _1449 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1053, _1056, _1059, _1062));
        float _1453 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1054, _1057, _1060, _1063));
        float _1460 = dot(vec4(cbModelParam._m0[39u]), vec4(_1429, _1430, _1431, 1.0));
        _1472 = dot(vec3(isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)), isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)), isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1460) ? 0.0 : (isnan(0.0) ? _1460 : max(0.0, _1460))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1472 = 1.0;
    }
    float _1483;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1474 = dot(vec4(cbModelParam._m0[40u]), vec4(_1429, _1430, _1431, 1.0));
        _1483 = dot(vec3(isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)), isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)), isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1474) ? 0.0 : (isnan(0.0) ? _1474 : max(0.0, _1474))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1483 = 1.0;
    }
    float _1487 = (_1483 * cbModelParam._m0[1u].x) + (_1472 * (1.0 - cbModelParam._m0[1u].x));
    float _1497 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _513);
    float _1498 = isnan(_1497) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1497 : min(cbModelParam._m0[25u].z, _1497));
    float _1578;
    float _1580;
    float _1582;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1545 = fma(_749, cbModelParam._m0[13u].z, fma(_745, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _741)) + cbModelParam._m0[13u].w;
        float _1549 = fma(_749, cbModelParam._m0[14u].z, fma(_745, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _741)) + cbModelParam._m0[14u].w;
        float _1553 = fma(_749, cbModelParam._m0[15u].z, fma(_745, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _741)) + cbModelParam._m0[15u].w;
        float _1556 = fma(_687, cbModelParam._m0[13u].z, fma(_686, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _685));
        float _1559 = fma(_687, cbModelParam._m0[14u].z, fma(_686, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _685));
        float _1562 = fma(_687, cbModelParam._m0[15u].z, fma(_686, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _685));
        float _1590;
        if (_1556 > 0.0)
        {
            _1590 = abs((1.0 - _1545) / _1556);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1556 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1545 + 1.0) / _1556);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1590 = frontier_phi_14_12_ladder;
        }
        float _1764;
        if (_1559 > 0.0)
        {
            _1764 = abs((1.0 - _1549) / _1559);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1559 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1549 + 1.0) / _1559);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1764 = frontier_phi_23_19_ladder;
        }
        float _2059;
        if (_1562 > 0.0)
        {
            _2059 = abs((1.0 - _1553) / _1562);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1562 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1553 + 1.0) / _1562);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2059 = frontier_phi_35_30_ladder;
        }
        float _2061 = isnan(_1764) ? _1590 : (isnan(_1590) ? _1764 : min(_1590, _1764));
        float _2062 = isnan(_2059) ? _2061 : (isnan(_2061) ? _2059 : min(_2061, _2059));
        float _2066 = (_2062 * _1556) + _1545;
        float _2067 = (_2062 * _1559) + _1549;
        float _2068 = (_2062 * _1562) + _1553;
        float _2069 = _2062 * 9.9999997473787516355514526367188e-05;
        float _2071 = (-1.0) - _2069;
        float _2073 = _2069 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2068 > _2073) || ((_2068 < _2071) || ((_2067 > _2073) || ((_2067 < _2071) || ((_2066 < _2071) || (_2066 > _2073))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2213 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2068, cbModelParam._m0[9u].z, fma(_2067, cbModelParam._m0[9u].y, _2066 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2068, cbModelParam._m0[10u].z, fma(_2067, cbModelParam._m0[10u].y, _2066 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2068, cbModelParam._m0[11u].z, fma(_2067, cbModelParam._m0[11u].y, _2066 * cbModelParam._m0[11u].x))), _1498);
            frontier_phi_13_35_ladder = _2213.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2213.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2213.x * cbModelParam._m0[1u].y;
        }
        _1578 = frontier_phi_13_35_ladder_2;
        _1580 = frontier_phi_13_35_ladder_1;
        _1582 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1566 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_685, _686, _687), _1498);
        _1578 = _1566.x * cbModelParam._m0[1u].y;
        _1580 = _1566.y * cbModelParam._m0[1u].y;
        _1582 = _1566.z * cbModelParam._m0[1u].y;
    }
    float _1586 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _513);
    float _1587 = isnan(_1586) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1586 : min(cbModelParam._m0[25u].w, _1586));
    float _1678;
    float _1680;
    float _1682;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1642 = fma(_749, cbModelParam._m0[21u].z, fma(_745, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _741)) + cbModelParam._m0[21u].w;
        float _1646 = fma(_749, cbModelParam._m0[22u].z, fma(_745, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _741)) + cbModelParam._m0[22u].w;
        float _1650 = fma(_749, cbModelParam._m0[23u].z, fma(_745, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _741)) + cbModelParam._m0[23u].w;
        float _1653 = fma(_687, cbModelParam._m0[21u].z, fma(_686, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _685));
        float _1656 = fma(_687, cbModelParam._m0[22u].z, fma(_686, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _685));
        float _1659 = fma(_687, cbModelParam._m0[23u].z, fma(_686, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _685));
        float _1769;
        if (_1653 > 0.0)
        {
            _1769 = abs((1.0 - _1642) / _1653);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1642 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1769 = frontier_phi_25_21_ladder;
        }
        float _2086;
        if (_1656 > 0.0)
        {
            _2086 = abs((1.0 - _1646) / _1656);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1656 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1646 + 1.0) / _1656);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2086 = frontier_phi_37_32_ladder;
        }
        float _2424;
        if (_1659 > 0.0)
        {
            _2424 = abs((1.0 - _1650) / _1659);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1659 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1650 + 1.0) / _1659);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2424 = frontier_phi_47_44_ladder;
        }
        float _2426 = isnan(_2086) ? _1769 : (isnan(_1769) ? _2086 : min(_1769, _2086));
        float _2427 = isnan(_2424) ? _2426 : (isnan(_2426) ? _2424 : min(_2426, _2424));
        float _2431 = (_2427 * _1653) + _1642;
        float _2432 = (_2427 * _1656) + _1646;
        float _2433 = (_2427 * _1659) + _1650;
        float _2434 = _2427 * 9.9999997473787516355514526367188e-05;
        float _2435 = (-1.0) - _2434;
        float _2437 = _2434 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2433 > _2437) || ((_2433 < _2435) || ((_2432 > _2437) || ((_2432 < _2435) || ((_2431 < _2435) || (_2431 > _2437))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2555 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2433, cbModelParam._m0[17u].z, fma(_2432, cbModelParam._m0[17u].y, _2431 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2433, cbModelParam._m0[18u].z, fma(_2432, cbModelParam._m0[18u].y, _2431 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2433, cbModelParam._m0[19u].z, fma(_2432, cbModelParam._m0[19u].y, _2431 * cbModelParam._m0[19u].x))), _1587);
            frontier_phi_22_47_ladder = _2555.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2555.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2555.x * cbModelParam._m0[1u].z;
        }
        _1678 = frontier_phi_22_47_ladder_2;
        _1680 = frontier_phi_22_47_ladder_1;
        _1682 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1662 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_685, _686, _687), _1587);
        _1678 = _1662.x * cbModelParam._m0[1u].z;
        _1680 = _1662.y * cbModelParam._m0[1u].z;
        _1682 = _1662.z * cbModelParam._m0[1u].z;
    }
    float _1695 = (((_712 * _662) + _713) * _677) * ((cbModelParam._m0[1u].w * (_1678 - _1578)) + _1578);
    float _1697 = (((_712 * _664) + _713) * _677) * ((cbModelParam._m0[1u].w * (_1680 - _1580)) + _1580);
    float _1699 = (((_712 * _665) + _713) * _677) * ((cbModelParam._m0[1u].w * (_1682 - _1582)) + _1582);
    float _1702 = fma(_1699, cbSceneParam._m0[89u].z, fma(_1697, cbSceneParam._m0[89u].y, _1695 * cbSceneParam._m0[89u].x));
    float _1705 = fma(_1699, cbSceneParam._m0[90u].z, fma(_1697, cbSceneParam._m0[90u].y, _1695 * cbSceneParam._m0[90u].x));
    float _1708 = fma(_1699, cbSceneParam._m0[91u].z, fma(_1697, cbSceneParam._m0[91u].y, _1695 * cbSceneParam._m0[91u].x));
    float _1743 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1747 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1751 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1755 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1756 = _1743 / _1755;
    float _1757 = _1747 / _1755;
    float _1758 = _1751 / _1755;
    float _1905;
    float _1906;
    float _1907;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1785 = ((uint(_1758 > cbSceneParam._m0[59u].y) + uint(_1758 > cbSceneParam._m0[59u].x)) + uint(_1758 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1786 = _1785 + 43u;
        uint _1794 = _1785 + 44u;
        uint _1802 = _1785 + 45u;
        uint _1810 = _1785 + 46u;
        float _1821 = fma(_1755, cbSceneParam._m0[_1786].w, fma(_1751, cbSceneParam._m0[_1786].z, fma(_1747, cbSceneParam._m0[_1786].y, _1743 * cbSceneParam._m0[_1786].x)));
        float _1825 = fma(_1755, cbSceneParam._m0[_1794].w, fma(_1751, cbSceneParam._m0[_1794].z, fma(_1747, cbSceneParam._m0[_1794].y, _1743 * cbSceneParam._m0[_1794].x)));
        float _1833 = fma(_1755, cbSceneParam._m0[_1810].w, fma(_1751, cbSceneParam._m0[_1810].z, fma(_1747, cbSceneParam._m0[_1810].y, _1743 * cbSceneParam._m0[_1810].x)));
        float _1838 = cbSceneParam._m0[33u].z * _1833;
        float _1840 = cbSceneParam._m0[33u].w * _1833;
        float _1843 = fma(_1755, cbSceneParam._m0[_1802].w, fma(_1751, cbSceneParam._m0[_1802].z, fma(_1747, cbSceneParam._m0[_1802].y, _1743 * cbSceneParam._m0[_1802].x))) / _1833;
        float _1891 = (cbSceneParam._m0[33u].x - sqrt(((_1757 * _1757) + (_1756 * _1756)) + (_1758 * _1758))) * cbSceneParam._m0[33u].y;
        float _4211 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
        float _1898 = (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1838 + _1821) / _1833, (_1840 + _1825) / _1833), _1843), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1840 + _1821) / _1833, (_1825 - _1838) / _1833), _1843), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1821 - _1838) / _1833, (_1825 - _1840) / _1833), _1843), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1821 - _1840) / _1833, (_1838 + _1825) / _1833), _1843), 0.0)).x), vec4(0.25)));
        _1905 = 1.0 - (_1898 * cbSceneParam._m0[34u].x);
        _1906 = 1.0 - (_1898 * cbSceneParam._m0[34u].y);
        _1907 = 1.0 - (_1898 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1905 = 1.0;
        _1906 = 1.0;
        _1907 = 1.0;
    }
    float _1971;
    float _1973;
    float _1975;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1959 = fma(_1755, cbSceneParam._m0[63u].w, fma(_1751, cbSceneParam._m0[63u].z, fma(_1747, cbSceneParam._m0[63u].y, _1743 * cbSceneParam._m0[63u].x)));
        float _1960 = fma(_1755, cbSceneParam._m0[60u].w, fma(_1751, cbSceneParam._m0[60u].z, fma(_1747, cbSceneParam._m0[60u].y, _1743 * cbSceneParam._m0[60u].x))) / _1959;
        float _1961 = fma(_1755, cbSceneParam._m0[61u].w, fma(_1751, cbSceneParam._m0[61u].z, fma(_1747, cbSceneParam._m0[61u].y, _1743 * cbSceneParam._m0[61u].x))) / _1959;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1960 >= cbSceneParam._m0[64u].x) && (_1961 >= cbSceneParam._m0[64u].y)) && (_1960 <= cbSceneParam._m0[64u].z)) && (_1961 <= cbSceneParam._m0[64u].w))
        {
            float _2099 = fma(_1755, cbSceneParam._m0[62u].w, fma(_1751, cbSceneParam._m0[62u].z, fma(_1747, cbSceneParam._m0[62u].y, _1743 * cbSceneParam._m0[62u].x))) / _1959;
            float _2103 = isnan(cbSceneParam._m0[41u].w) ? _2099 : (isnan(_2099) ? cbSceneParam._m0[41u].w : max(_2099, cbSceneParam._m0[41u].w));
            float _2146 = (cbSceneParam._m0[33u].x - sqrt(((_1757 * _1757) + (_1756 * _1756)) + (_1758 * _1758))) * cbSceneParam._m0[33u].y;
            float _4227 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
            float _2153 = (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1960, cbSceneParam._m0[33u].w + _1961), _2103), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1960, _1961 - cbSceneParam._m0[33u].z), _2103), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1960 - cbSceneParam._m0[33u].z, _1961 - cbSceneParam._m0[33u].w), _2103), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1960 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1961), _2103), 0.0)).x), vec4(0.25)));
            float _2157 = 1.0 - (_2153 * cbSceneParam._m0[34u].x);
            float _2158 = 1.0 - (_2153 * cbSceneParam._m0[34u].y);
            float _2159 = 1.0 - (_2153 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2159) ? _1907 : (isnan(_1907) ? _2159 : min(_1907, _2159));
            frontier_phi_34_33_ladder_1 = isnan(_2158) ? _1906 : (isnan(_1906) ? _2158 : min(_1906, _2158));
            frontier_phi_34_33_ladder_2 = isnan(_2157) ? _1905 : (isnan(_1905) ? _2157 : min(_1905, _2157));
        }
        else
        {
            frontier_phi_34_33_ladder = _1907;
            frontier_phi_34_33_ladder_1 = _1906;
            frontier_phi_34_33_ladder_2 = _1905;
        }
        _1971 = frontier_phi_34_33_ladder_2;
        _1973 = frontier_phi_34_33_ladder_1;
        _1975 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1971 = _1905;
        _1973 = _1906;
        _1975 = _1907;
    }
    uvec4 _1980 = floatBitsToUint(cbInstanceData._m0[_637 + 5u]);
    uint _1982 = _1980.x * 14u;
    uint _1983 = _1982 + 13u;
    float _1990 = _677 + (-1.0);
    float _1995 = (cbLight._m0[_1983].x * _1990) + 1.0;
    float _1996 = (cbLight._m0[_1983].y * _1990) + 1.0;
    float _1997 = (cbLight._m0[_1983].z * _1990) + 1.0;
    float _1998 = (cbLight._m0[_1983].w * _1990) + 1.0;
    uint _1999 = _1982 + 5u;
    float _2005 = isnan(1.0) ? _1996 : (isnan(_1996) ? 1.0 : min(_1996, 1.0));
    uint _2009 = _1982 + 4u;
    float _2018 = isnan(1.0) ? _1995 : (isnan(_1995) ? 1.0 : min(_1995, 1.0));
    uint _2022 = _1982 | 1u;
    float _2033 = dot(vec3(cbLight._m0[_1982].xyz), vec3(_510, _511, _512));
    float _2036 = dot(vec3(cbLight._m0[_2022].xyz), vec3(_510, _511, _512));
    float _4263 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _4274 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2041 = (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * 0.3183098733425140380859375;
    float _2043 = (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * 0.3183098733425140380859375;
    float _2050 = ((cbLight._m0[_1999].x * _2005) * _2043) + (((cbLight._m0[_2009].x * _1971) * _2018) * _2041);
    float _2051 = ((_2005 * cbLight._m0[_1999].y) * _2043) + (((cbLight._m0[_2009].y * _1973) * _2018) * _2041);
    float _2052 = ((_2005 * cbLight._m0[_1999].z) * _2043) + (((cbLight._m0[_2009].z * _1975) * _2018) * _2041);
    uvec4 _2056 = floatBitsToUint(cbLight._m0[_1982 + 12u]);
    bool _2058 = _2056.x == 0u;
    float _2160;
    float _2162;
    float _2164;
    if (_2058)
    {
        _2160 = _2050;
        _2162 = _2051;
        _2164 = _2052;
    }
    else
    {
        uint _2168 = _1982 + 6u;
        float _2184 = (dot(vec3(cbLight._m0[_1982 + 2u].xyz), vec3(_510, _511, _512)) * 0.5) + 0.5;
        float _2185 = _2184 * _2184;
        float _4285 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
        float _2186 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _2187 = isnan(1.0) ? _1997 : (isnan(_1997) ? 1.0 : min(_1997, 1.0));
        _2160 = (((cbLight._m0[_2168].x * 0.3183098733425140380859375) * _2186) * _2187) + _2050;
        _2162 = (((cbLight._m0[_2168].y * 0.3183098733425140380859375) * _2186) * _2187) + _2051;
        _2164 = (((cbLight._m0[_2168].z * 0.3183098733425140380859375) * _2186) * _2187) + _2052;
    }
    bool _2167 = _2056.y == 0u;
    float _2222;
    float _2224;
    float _2226;
    if (_2167)
    {
        _2222 = _2160;
        _2224 = _2162;
        _2226 = _2164;
    }
    else
    {
        uint _2395 = _1982 + 7u;
        float _2411 = (dot(vec3(cbLight._m0[_1982 + 3u].xyz), vec3(_510, _511, _512)) * 0.5) + 0.5;
        float _2412 = _2411 * _2411;
        float _4301 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2413 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _2414 = isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0));
        _2222 = (((cbLight._m0[_2395].x * 0.3183098733425140380859375) * _2413) * _2414) + _2160;
        _2224 = (((cbLight._m0[_2395].y * 0.3183098733425140380859375) * _2413) * _2414) + _2162;
        _2226 = (((cbLight._m0[_2395].z * 0.3183098733425140380859375) * _2413) * _2414) + _2164;
    }
    uint _2229 = _1982 + 8u;
    float _2242 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1982].w)) * _513) * 0.949999988079071044921875);
    float _2243 = _2242 * _2242;
    float _2244 = cbLight._m0[_1982].x + _591;
    float _2245 = cbLight._m0[_1982].y + _592;
    float _2246 = cbLight._m0[_1982].z + _593;
    float _2250 = inversesqrt(dot(vec3(_2244, _2245, _2246), vec3(_2244, _2245, _2246)));
    float _2251 = _2250 * _2244;
    float _2252 = _2250 * _2245;
    float _2253 = _2250 * _2246;
    float _2254 = dot(vec3(_510, _511, _512), vec3(cbLight._m0[_1982].xyz));
    float _4317 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2257 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
    float _4328 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _2258 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
    float _2259 = dot(vec3(_510, _511, _512), vec3(_2251, _2252, _2253));
    float _4339 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2262 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
    float _2263 = dot(vec3(cbLight._m0[_1982].xyz), vec3(_2251, _2252, _2253));
    float _4350 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2267 = _2243 * _2243;
    float _2271 = ((_2262 * _2262) * (_2267 + (-1.0))) + 1.0;
    float _2279 = exp2(log2(1.0 - (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0)))) * 5.0);
    float _2280 = 0.959999978542327880859375 - _659;
    float _2282 = 0.959999978542327880859375 - _660;
    float _2283 = 0.959999978542327880859375 - _661;
    float _2290 = 1.0 - _2243;
    float _2301 = (0.5 / (((_2258 * ((_2257 * _2290) + _2243)) + 9.9999999392252902907785028219223e-09) + (((_2258 * _2290) + _2243) * _2257))) * _2257;
    float _4361 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2303 = (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * (_2267 / ((_2271 * _2271) * 3.141590118408203125));
    uint _2317 = _1982 + 9u;
    float _2328 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2022].w)) * _513) * 0.949999988079071044921875);
    float _2329 = _2328 * _2328;
    float _2330 = cbLight._m0[_2022].x + _591;
    float _2331 = cbLight._m0[_2022].y + _592;
    float _2332 = cbLight._m0[_2022].z + _593;
    float _2336 = inversesqrt(dot(vec3(_2330, _2331, _2332), vec3(_2330, _2331, _2332)));
    float _2337 = _2336 * _2330;
    float _2338 = _2336 * _2331;
    float _2339 = _2336 * _2332;
    float _2340 = dot(vec3(_510, _511, _512), vec3(cbLight._m0[_2022].xyz));
    float _4372 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2343 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
    float _2344 = dot(vec3(_510, _511, _512), vec3(_2337, _2338, _2339));
    float _4383 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2347 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
    float _2348 = dot(vec3(cbLight._m0[_2022].xyz), vec3(_2337, _2338, _2339));
    float _4394 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2352 = _2329 * _2329;
    float _2356 = ((_2347 * _2347) * (_2352 + (-1.0))) + 1.0;
    float _2363 = exp2(log2(1.0 - (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0)))) * 5.0);
    float _2370 = 1.0 - _2329;
    float _2380 = (0.5 / (((_2258 * ((_2343 * _2370) + _2329)) + 9.9999999392252902907785028219223e-09) + (((_2258 * _2370) + _2329) * _2343))) * _2343;
    float _4405 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2382 = (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * (_2352 / ((_2356 * _2356) * 3.141590118408203125));
    float _2392 = (((((_2363 * _2280) + _662) * cbLight._m0[_2317].x) * _2382) * _2005) + ((((cbLight._m0[_2229].x * _1971) * ((_2279 * _2280) + _662)) * _2303) * _2018);
    float _2393 = (((((_2363 * _2282) + _664) * cbLight._m0[_2317].y) * _2382) * _2005) + ((((cbLight._m0[_2229].y * _1973) * ((_2279 * _2282) + _664)) * _2303) * _2018);
    float _2394 = (((((_2363 * _2283) + _665) * cbLight._m0[_2317].z) * _2382) * _2005) + ((((cbLight._m0[_2229].z * _1975) * ((_2279 * _2283) + _665)) * _2303) * _2018);
    float _2450;
    float _2452;
    float _2454;
    if (_2058)
    {
        _2450 = _2392;
        _2452 = _2393;
        _2454 = _2394;
    }
    else
    {
        uint _2456 = _1982 + 2u;
        uint _2460 = _1982 + 10u;
        float _2474 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2456].w)) * _513) * 0.949999988079071044921875);
        float _2475 = _2474 * _2474;
        float _2476 = cbLight._m0[_2456].x + _591;
        float _2477 = cbLight._m0[_2456].y + _592;
        float _2478 = cbLight._m0[_2456].z + _593;
        float _2482 = inversesqrt(dot(vec3(_2476, _2477, _2478), vec3(_2476, _2477, _2478)));
        float _2483 = _2482 * _2476;
        float _2484 = _2482 * _2477;
        float _2485 = _2482 * _2478;
        float _2486 = dot(vec3(_510, _511, _512), vec3(cbLight._m0[_2456].xyz));
        float _4416 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2489 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _2490 = dot(vec3(_510, _511, _512), vec3(_2483, _2484, _2485));
        float _4427 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2493 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _2494 = dot(vec3(cbLight._m0[_2456].xyz), vec3(_2483, _2484, _2485));
        float _4438 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2498 = _2475 * _2475;
        float _2502 = ((_2493 * _2493) * (_2498 + (-1.0))) + 1.0;
        float _2509 = exp2(log2(1.0 - (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0)))) * 5.0);
        float _2516 = 1.0 - _2475;
        float _2526 = (0.5 / (((_2258 * ((_2489 * _2516) + _2475)) + 9.9999999392252902907785028219223e-09) + (((_2258 * _2516) + _2475) * _2489))) * _2489;
        float _4449 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2528 = (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_2498 / ((_2502 * _2502) * 3.141590118408203125));
        float _2529 = isnan(1.0) ? _1997 : (isnan(_1997) ? 1.0 : min(_1997, 1.0));
        _2450 = (((((_2509 * _2280) + _662) * cbLight._m0[_2460].x) * _2528) * _2529) + _2392;
        _2452 = (((((_2509 * _2282) + _664) * cbLight._m0[_2460].y) * _2528) * _2529) + _2393;
        _2454 = (((((_2509 * _2283) + _665) * cbLight._m0[_2460].z) * _2528) * _2529) + _2394;
    }
    float _2560;
    float _2562;
    float _2564;
    if (_2167)
    {
        _2560 = _2450;
        _2562 = _2452;
        _2564 = _2454;
    }
    else
    {
        uint _2571 = _1982 + 3u;
        uint _2575 = _1982 + 11u;
        float _2589 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2571].w)) * _513) * 0.949999988079071044921875);
        float _2590 = _2589 * _2589;
        float _2591 = cbLight._m0[_2571].x + _591;
        float _2592 = cbLight._m0[_2571].y + _592;
        float _2593 = cbLight._m0[_2571].z + _593;
        float _2597 = inversesqrt(dot(vec3(_2591, _2592, _2593), vec3(_2591, _2592, _2593)));
        float _2598 = _2597 * _2591;
        float _2599 = _2597 * _2592;
        float _2600 = _2597 * _2593;
        float _2601 = dot(vec3(_510, _511, _512), vec3(cbLight._m0[_2571].xyz));
        float _4465 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
        float _2604 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
        float _2605 = dot(vec3(_510, _511, _512), vec3(_2598, _2599, _2600));
        float _4476 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2608 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
        float _2609 = dot(vec3(cbLight._m0[_2571].xyz), vec3(_2598, _2599, _2600));
        float _4487 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2613 = _2590 * _2590;
        float _2617 = ((_2608 * _2608) * (_2613 + (-1.0))) + 1.0;
        float _2624 = exp2(log2(1.0 - (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0)))) * 5.0);
        float _2631 = 1.0 - _2590;
        float _2641 = (0.5 / (((_2258 * ((_2604 * _2631) + _2590)) + 9.9999999392252902907785028219223e-09) + (((_2258 * _2631) + _2590) * _2604))) * _2604;
        float _4498 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
        float _2643 = (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * (_2613 / ((_2617 * _2617) * 3.141590118408203125));
        float _2644 = isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0));
        _2560 = (((((_2624 * _2280) + _662) * cbLight._m0[_2575].x) * _2643) * _2644) + _2450;
        _2562 = (((((_2624 * _2282) + _664) * cbLight._m0[_2575].y) * _2643) * _2644) + _2452;
        _2564 = (((((_2624 * _2283) + _665) * cbLight._m0[_2575].z) * _2643) * _2644) + _2454;
    }
    float _2710;
    float _2712;
    float _2714;
    float _2716;
    float _2718;
    float _2720;
    if (_1980.y == 0u)
    {
        uvec4 _2665 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2666 = _2665.x;
        uint _2677 = uint((float(_2665.y) * floor(float(uint(cbSceneParam._m0[85u].y * _600) / _2666))) + floor(float(uint(cbSceneParam._m0[85u].x * _599) / _2666)));
        float _2687 = (log2(_1758 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2688 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
        uint _2691 = uint(isnan(14.0) ? _2688 : (isnan(_2688) ? 14.0 : min(_2688, 14.0)));
        uvec4 _2696 = texelFetch(g_lightClusterGridBuffer, int(((_2691 << 2u) + (_2677 << 6u)) >> 2u));
        uint _2697 = _2696.x;
        uint _2698 = _2665.z;
        float _2812;
        float _2814;
        float _2816;
        float _2818;
        float _2820;
        float _2822;
        if (((((1u << ((_2698 >> 4u) & 15u)) + 4294967295u) & _2697) == 0u) || ((_2698 & 240u) == 0u))
        {
            _2812 = 0.0;
            _2814 = 0.0;
            _2816 = 0.0;
            _2818 = 0.0;
            _2820 = 0.0;
            _2822 = 0.0;
        }
        else
        {
            float _2813;
            float _2815;
            float _2817;
            float _2819;
            float _2821;
            float _2823;
            float _2966 = 0.0;
            float _2967 = 0.0;
            float _2968 = 0.0;
            float _2969 = 0.0;
            float _2970 = 0.0;
            float _2971 = 0.0;
            uint _2972 = 0u;
            uint _2981;
            bool _2982;
            for (;;)
            {
                _2981 = texelFetch(g_lightClassification, int((((_2691 << 5u) + (_2677 << 9u)) + (_2972 << 2u)) >> 2u)).x;
                _2982 = _2981 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2982)
                {
                    frontier_phi_66_pred = _2971;
                    frontier_phi_66_pred_1 = _2970;
                    frontier_phi_66_pred_2 = _2969;
                    frontier_phi_66_pred_3 = _2968;
                    frontier_phi_66_pred_4 = _2967;
                    frontier_phi_66_pred_5 = _2966;
                }
                else
                {
                    float _3090;
                    float _3091;
                    float _3092;
                    float _3093;
                    float _3094;
                    float _3095;
                    uint _3096;
                    _3090 = _2966;
                    _3091 = _2967;
                    _3092 = _2968;
                    _3093 = _2969;
                    _3094 = _2970;
                    _3095 = _2971;
                    _3096 = _2981;
                    float _3022;
                    float _3023;
                    float _3024;
                    float _3025;
                    float _3026;
                    float _3027;
                    for (;;)
                    {
                        uint _3100 = uint(findLSB(_3096)) + (_2972 << 5u);
                        uint _3097 = (_3096 + 4294967295u) & _3096;
                        uint _3102 = _3100 * 48u;
                        vec4 _3116 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3102)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 3u)).x));
                        uint _3122 = (_3100 * 48u) + 4u;
                        vec4 _3135 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3122)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 3u)).x));
                        uint _3141 = (_3100 * 48u) + 8u;
                        vec3 _3152 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3141)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 2u)).x));
                        float _3156 = _3116.x - _1756;
                        float _3157 = _3116.y - _1757;
                        float _3158 = _3116.z - _1758;
                        float _3159 = dot(vec3(_3156, _3157, _3158), vec3(_3156, _3157, _3158));
                        float _3162 = inversesqrt(_3159);
                        float _3163 = _3162 * _3156;
                        float _3164 = _3162 * _3157;
                        float _3165 = _3162 * _3158;
                        float _3166 = dot(vec3(_618, _621, _624), vec3(_3163, _3164, _3165));
                        float _3171 = 1.0 - (_3159 * _3116.w);
                        float _4524 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                        float _3172 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                        float _3173 = sqrt(_3159) * _3135.w;
                        float _3176 = 1.39999997615814208984375 / (_3173 + 1.39999997615814208984375);
                        float _3177 = _3176 * _3176;
                        float _3180 = ((1.0 - _3177) * _3166) + _3177;
                        float _3183 = _3173 * _3173;
                        float _3187 = ((isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0))) * _3172) / ((_3183 * 0.699999988079071044921875) + 1.0);
                        float _3191 = (-0.0) - _1756;
                        float _3192 = (-0.0) - _1757;
                        float _3193 = (-0.0) - _1758;
                        float _3197 = inversesqrt(dot(vec3(_3191, _3192, _3193), vec3(_3191, _3192, _3193)));
                        float _3198 = _3197 * _3191;
                        float _3199 = _3197 * _3192;
                        float _3200 = _3197 * _3193;
                        float _3207 = exp2(log2(1.0 / ((_3183 * 3.5) + 5.0)) * 0.25);
                        float _3208 = 1.0 - _693;
                        float _3215 = sqrt(1.0 - ((1.0 - (_3208 * _3208)) * (1.0 - (_3207 * _3207))));
                        float _3216 = _3215 * _3215;
                        float _3217 = _3216 * _3216;
                        float _3218 = _3198 + _3163;
                        float _3219 = _3199 + _3164;
                        float _3220 = _3200 + _3165;
                        float _3224 = inversesqrt(dot(vec3(_3218, _3219, _3220), vec3(_3218, _3219, _3220)));
                        float _3228 = dot(vec3(_618, _621, _624), vec3(_3198, _3199, _3200));
                        float _4540 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                        float _3231 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
                        float _3232 = dot(vec3(_618, _621, _624), vec3(_3224 * _3218, _3224 * _3219, _3224 * _3220));
                        float _4551 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                        float _3235 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
                        float _3239 = ((_3235 * _3235) * (_3217 + (-1.0))) + 1.0;
                        float _3240 = _3176 * _3216;
                        float _3241 = _3240 * _3240;
                        float _3244 = ((1.0 - _3241) * _3166) + _3241;
                        float _4562 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                        float _3245 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
                        float _3246 = 1.0 - _3216;
                        float _3256 = (0.5 / (((_3245 * ((_3231 * _3246) + _3216)) + 9.9999999392252902907785028219223e-09) + (((_3245 * _3246) + _3216) * _3231))) * _3245;
                        float _4573 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                        float _3267 = (((_3217 * 3.1415927410125732421875) * (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0)))) / ((_3239 * _3239) * ((_3183 * 2.1991131305694580078125) + 3.141590118408203125))) * _3172;
                        _3025 = (_3187 * _3135.x) + _3093;
                        _3026 = (_3187 * _3135.y) + _3094;
                        _3027 = (_3187 * _3135.z) + _3095;
                        _3022 = (_3267 * _3152.x) + _3090;
                        _3023 = (_3267 * _3152.y) + _3091;
                        _3024 = (_3267 * _3152.z) + _3092;
                        if (_3097 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3090 = _3022;
                            _3091 = _3023;
                            _3092 = _3024;
                            _3093 = _3025;
                            _3094 = _3026;
                            _3095 = _3027;
                            _3096 = _3097;
                        }
                    }
                    frontier_phi_66_pred = _3027;
                    frontier_phi_66_pred_1 = _3026;
                    frontier_phi_66_pred_2 = _3025;
                    frontier_phi_66_pred_3 = _3024;
                    frontier_phi_66_pred_4 = _3023;
                    frontier_phi_66_pred_5 = _3022;
                }
                _2823 = frontier_phi_66_pred;
                _2821 = frontier_phi_66_pred_1;
                _2819 = frontier_phi_66_pred_2;
                _2817 = frontier_phi_66_pred_3;
                _2815 = frontier_phi_66_pred_4;
                _2813 = frontier_phi_66_pred_5;
                uint _2973 = _2972 + 1u;
                if (_2973 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2966 = _2813;
                    _2967 = _2815;
                    _2968 = _2817;
                    _2969 = _2819;
                    _2970 = _2821;
                    _2971 = _2823;
                    _2972 = _2973;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2812 = _2813;
            _2814 = _2815;
            _2816 = _2817;
            _2818 = _2819;
            _2820 = _2821;
            _2822 = _2823;
        }
        uvec4 _2826 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2827 = _2826.z;
        uint _2829 = (_2827 >> 8u) & 15u;
        float _2934;
        float _2936;
        float _2938;
        float _2940;
        float _2942;
        float _2944;
        if (((4294967295u << _2829) & _2697) == 0u)
        {
            _2934 = _2812;
            _2936 = _2814;
            _2938 = _2816;
            _2940 = _2818;
            _2942 = _2820;
            _2944 = _2822;
        }
        else
        {
            float _2959 = inversesqrt(dot(vec3(_1756, _1757, _1758), vec3(_1756, _1757, _1758)));
            float _2960 = _2959 * _1756;
            float _2961 = _2959 * _1757;
            float _2962 = _2959 * _1758;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2829 < ((_2827 >> 12u) & 15u))
            {
                float _2935;
                float _2937;
                float _2939;
                float _2941;
                float _2943;
                float _2945;
                float _3073 = _2812;
                float _3074 = _2814;
                float _3075 = _2816;
                float _3076 = _2818;
                float _3077 = _2820;
                float _3078 = _2822;
                uint _3079 = _2829;
                uint _3088;
                bool _3089;
                for (;;)
                {
                    _3088 = texelFetch(g_lightClassification, int((((_2691 << 5u) + (_2677 << 9u)) + (_3079 << 2u)) >> 2u)).x;
                    _3089 = _3088 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3089)
                    {
                        frontier_phi_72_pred = _3078;
                        frontier_phi_72_pred_1 = _3077;
                        frontier_phi_72_pred_2 = _3076;
                        frontier_phi_72_pred_3 = _3075;
                        frontier_phi_72_pred_4 = _3074;
                        frontier_phi_72_pred_5 = _3073;
                    }
                    else
                    {
                        float _3272;
                        float _3273;
                        float _3274;
                        float _3275;
                        float _3276;
                        float _3277;
                        float _3567;
                        float _3568;
                        float _3569;
                        float _3570;
                        float _3571;
                        float _3572;
                        float _3285 = _3073;
                        float _3286 = _3074;
                        float _3287 = _3075;
                        float _3288 = _3076;
                        float _3289 = _3077;
                        float _3290 = _3078;
                        uint _3291 = _3088;
                        uint _3292;
                        vec4 _3317;
                        float _3318;
                        vec4 _3333;
                        vec3 _3345;
                        vec4 _3360;
                        vec4 _3376;
                        float _3423;
                        bool _3424;
                        for (;;)
                        {
                            uint _3302 = ((_3079 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3291));
                            _3292 = (_3291 + 4294967295u) & _3291;
                            uint _3304 = _3302 * 40u;
                            _3317 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3304)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 3u)).x));
                            _3318 = _3317.w;
                            uint _3320 = (_3302 * 40u) + 4u;
                            _3333 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3320)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 3u)).x));
                            uint _3335 = (_3302 * 40u) + 8u;
                            _3345 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x));
                            uint _3347 = (_3302 * 40u) + 16u;
                            _3360 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3347)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 3u)).x));
                            uint _3363 = (_3302 * 40u) + 20u;
                            _3376 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3363)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 3u)).x));
                            uint _3379 = (_3302 * 40u) + 24u;
                            vec4 _3392 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3379)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 3u)).x));
                            uint _3398 = (_3302 * 40u) + 28u;
                            vec4 _3411 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3398)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 3u)).x));
                            _3423 = fma(_1758, _3411.z, fma(_1757, _3411.y, _3411.x * _1756)) + _3411.w;
                            _3424 = !((fma(_1758, _3392.z, fma(_1757, _3392.y, _3392.x * _1756)) + _3392.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3424)
                            {
                                float _3451 = _3317.x - _1756;
                                float _3452 = _3317.y - _1757;
                                float _3453 = _3317.z - _1758;
                                float _3454 = dot(vec3(_3451, _3452, _3453), vec3(_3451, _3452, _3453));
                                float _3457 = inversesqrt(_3454);
                                float _3458 = _3457 * _3451;
                                float _3459 = _3457 * _3452;
                                float _3460 = _3457 * _3453;
                                float _3464 = 1.0 - (_3454 / (_3318 * _3318));
                                float _4584 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                                float _3465 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
                                float _3469 = sqrt(_3454) * _3333.w;
                                float _3471 = 1.39999997615814208984375 / (_3469 + 1.39999997615814208984375);
                                float _3472 = _3471 * _3471;
                                float _3475 = ((1.0 - _3472) * dot(vec3(_3458, _3459, _3460), vec3(_618, _621, _624))) + _3472;
                                float _3478 = _3469 * _3469;
                                float _3482 = (fma(_1758, _3360.z, fma(_1757, _3360.y, _3360.x * _1756)) + _3360.w) / _3423;
                                float _3483 = (fma(_1758, _3376.z, fma(_1757, _3376.y, _3376.x * _1756)) + _3376.w) / _3423;
                                float _3487 = 1.0 - dot(vec2(_3482, _3483), vec2(_3482, _3483));
                                float _4600 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                                float _3488 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
                                float _3489 = _3488 * (((isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0))) * _3465) / ((_3478 * 0.699999988079071044921875) + 1.0));
                                float _3501 = exp2(log2(1.0 / ((_3478 * 3.5) + 5.0)) * 0.25);
                                float _3502 = 1.0 - _693;
                                float _3509 = sqrt(1.0 - ((1.0 - (_3502 * _3502)) * (1.0 - (_3501 * _3501))));
                                float _3510 = _3509 * _3509;
                                float _3511 = _3510 * _3510;
                                float _3512 = _3458 - _2960;
                                float _3513 = _3459 - _2961;
                                float _3514 = _3460 - _2962;
                                float _3518 = inversesqrt(dot(vec3(_3512, _3513, _3514), vec3(_3512, _3513, _3514)));
                                float _3522 = dot(vec3(_618, _621, _624), vec3((-0.0) - _2960, (-0.0) - _2961, (-0.0) - _2962));
                                float _4611 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                                float _3525 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
                                float _3526 = dot(vec3(_618, _621, _624), vec3(_3518 * _3512, _3518 * _3513, _3518 * _3514));
                                float _4622 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                                float _3529 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                                float _3533 = ((_3529 * _3529) * (_3511 + (-1.0))) + 1.0;
                                float _3534 = _3471 * _3510;
                                float _3535 = _3534 * _3534;
                                float _3541 = ((1.0 - _3535) * dot(vec3(_618, _621, _624), vec3(_3458, _3459, _3460))) + _3535;
                                float _4633 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                                float _3542 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                                float _3543 = 1.0 - _3510;
                                float _3553 = (0.5 / (((_3542 * ((_3525 * _3543) + _3510)) + 9.9999999392252902907785028219223e-09) + (((_3542 * _3543) + _3510) * _3525))) * _3542;
                                float _4644 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                                float _3563 = (_3488 * _3465) * (((_3511 * 3.1415927410125732421875) * (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0)))) / ((_3533 * _3533) * ((_3478 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3489 * _3333.y;
                                frontier_phi_78_pred_1 = _3489 * _3333.x;
                                frontier_phi_78_pred_2 = _3563 * _3345.z;
                                frontier_phi_78_pred_3 = _3563 * _3345.y;
                                frontier_phi_78_pred_4 = _3563 * _3345.x;
                                frontier_phi_78_pred_5 = _3489 * _3333.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3571 = frontier_phi_78_pred;
                            _3570 = frontier_phi_78_pred_1;
                            _3569 = frontier_phi_78_pred_2;
                            _3568 = frontier_phi_78_pred_3;
                            _3567 = frontier_phi_78_pred_4;
                            _3572 = frontier_phi_78_pred_5;
                            _3275 = _3570 + _3288;
                            _3276 = _3571 + _3289;
                            _3277 = _3572 + _3290;
                            _3272 = _3567 + _3285;
                            _3273 = _3568 + _3286;
                            _3274 = _3569 + _3287;
                            if (_3292 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3285 = _3272;
                                _3286 = _3273;
                                _3287 = _3274;
                                _3288 = _3275;
                                _3289 = _3276;
                                _3290 = _3277;
                                _3291 = _3292;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3277;
                        frontier_phi_72_pred_1 = _3276;
                        frontier_phi_72_pred_2 = _3275;
                        frontier_phi_72_pred_3 = _3274;
                        frontier_phi_72_pred_4 = _3273;
                        frontier_phi_72_pred_5 = _3272;
                    }
                    _2945 = frontier_phi_72_pred;
                    _2943 = frontier_phi_72_pred_1;
                    _2941 = frontier_phi_72_pred_2;
                    _2939 = frontier_phi_72_pred_3;
                    _2937 = frontier_phi_72_pred_4;
                    _2935 = frontier_phi_72_pred_5;
                    uint _3080 = _3079 + 1u;
                    if (_3080 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3073 = _2935;
                        _3074 = _2937;
                        _3075 = _2939;
                        _3076 = _2941;
                        _3077 = _2943;
                        _3078 = _2945;
                        _3079 = _3080;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2945;
                frontier_phi_60_61_ladder_1 = _2943;
                frontier_phi_60_61_ladder_2 = _2939;
                frontier_phi_60_61_ladder_3 = _2937;
                frontier_phi_60_61_ladder_4 = _2935;
                frontier_phi_60_61_ladder_5 = _2941;
            }
            else
            {
                frontier_phi_60_61_ladder = _2822;
                frontier_phi_60_61_ladder_1 = _2820;
                frontier_phi_60_61_ladder_2 = _2816;
                frontier_phi_60_61_ladder_3 = _2814;
                frontier_phi_60_61_ladder_4 = _2812;
                frontier_phi_60_61_ladder_5 = _2818;
            }
            _2934 = frontier_phi_60_61_ladder_4;
            _2936 = frontier_phi_60_61_ladder_3;
            _2938 = frontier_phi_60_61_ladder_2;
            _2940 = frontier_phi_60_61_ladder_5;
            _2942 = frontier_phi_60_61_ladder_1;
            _2944 = frontier_phi_60_61_ladder;
        }
        float _2949 = isnan(1.0) ? _677 : (isnan(_677) ? 1.0 : min(_677, 1.0));
        _2710 = (_2949 * _2940) + _2222;
        _2712 = (_2949 * _2942) + _2224;
        _2714 = (_2949 * _2944) + _2226;
        _2716 = ((_2934 * _662) * _2949) + _2560;
        _2718 = ((_2936 * _664) * _2949) + _2562;
        _2720 = ((_2938 * _665) * _2949) + _2564;
    }
    else
    {
        _2710 = _2222;
        _2712 = _2224;
        _2714 = _2226;
        _2716 = _2560;
        _2718 = _2562;
        _2720 = _2564;
    }
    uint _2726 = _638 + uint(cbMatDynParam._m0[0u].w);
    float _2734 = ((_487 * cbMtdParam._m0[11u].x) * (_472.x + _457.x)) * cbInstanceData._m0[_2726].x;
    float _2737 = ((_487 * cbMtdParam._m0[11u].y) * (_472.y + _457.y)) * cbInstanceData._m0[_2726].y;
    float _2740 = ((_487 * cbMtdParam._m0[11u].z) * (_472.z + _457.z)) * cbInstanceData._m0[_2726].z;
    float _4660 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _4671 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _4682 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _2757 = (((isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0))) * (_2710 + ((isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0))) * _677))) + ((_2716 + ((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _1487)) * cbPerFrame._m0[3u].x)) + _2734;
    float _2759 = (_2737 + ((_2718 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _1487)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0))) * (_2712 + ((isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0))) * _677)));
    float _2761 = (_2740 + ((_2720 + ((isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))) * _1487)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0))) * (_2714 + ((isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0))) * _677)));
    float _4708 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2774 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
    uint _2775 = _637 + 6u;
    float _2783 = _599 / cbSceneParam._m0[86u].x;
    float _2784 = _600 / cbSceneParam._m0[86u].y;
    vec4 _2798 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2783, _2784, (log2((isnan(cbSceneParam._m0[77u].w) ? _533 : (isnan(_533) ? cbSceneParam._m0[77u].w : min(_533, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2800 = _2798.x;
    float _2801 = _2798.y;
    float _2802 = _2798.z;
    float _2803 = _2798.w;
    float _2875;
    float _2877;
    float _2879;
    float _2881;
    if (_533 > cbSceneParam._m0[78u].w)
    {
        float _2837 = isnan(_533) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _533 : min(cbSceneParam._m0[80u].w, _533));
        float _2838 = _2837 / _533;
        float _2849 = _2838 * _584;
        float _2850 = _585 * _2838;
        float _2851 = (-0.0) - _2850;
        float _2853 = _2838 * _586;
        float _2855 = (cbSceneParam._m0[77u].w * _2851) / _2837;
        float _2856 = _2855 + cbSceneParam._m0[79u].w;
        float _2857 = cbSceneParam._m0[79u].w - _2850;
        float _2863 = sqrt(((_2849 * _2849) + (_2850 * _2850)) + (_2853 * _2853));
        float _2866 = (1.0 - (cbSceneParam._m0[77u].w / _2837)) * _2863;
        float _2871 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2873 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3035;
        if (abs((_2851 - _2855) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3035 = ((((_2856 > 0.0) ? exp2(_2871 * _2856) : (2.0 - exp2(_2873 * _2856))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2866;
        }
        else
        {
            float _2995 = 1.0 / cbSceneParam._m0[80u].x;
            float _2996 = isnan(_2857) ? _2856 : (isnan(_2856) ? _2857 : max(_2856, _2857));
            float _2997 = isnan(_2857) ? _2856 : (isnan(_2856) ? _2857 : min(_2856, _2857));
            float _3006 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : min(_2996, 0.0));
            float _3007 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : min(_2997, 0.0));
            _3035 = ((abs(_2863 / _2851) * cbSceneParam._m0[80u].y) * ((((_3006 - _3007) * 2.0) - ((exp2(_2871 * (isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0)))) - exp2(_2871 * (isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0))))) * _2995)) - ((exp2(_2873 * _3006) - exp2(_2873 * _3007)) * _2995))) + (_2866 * cbSceneParam._m0[80u].z);
        }
        vec4 _3037 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2783, _2784, 1.0), 0.0);
        float _3046 = exp2((_3035 * (-1.44269502162933349609375)) * (1.0 - _3037.w));
        float _3047 = log2(_3046);
        float _3063 = log2(_2803);
        _2875 = (exp2(_3063 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3047 * cbSceneParam._m0[78u].x)) * _3037.x) / cbSceneParam._m0[78u].x)) + _2800;
        _2877 = (exp2(_3063 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3047 * cbSceneParam._m0[78u].y)) * _3037.y) / cbSceneParam._m0[78u].y)) + _2801;
        _2879 = (exp2(_3063 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3047 * cbSceneParam._m0[78u].z)) * _3037.z) / cbSceneParam._m0[78u].z)) + _2802;
        _2881 = _3046 * _2803;
    }
    else
    {
        _2875 = _2800;
        _2877 = _2801;
        _2879 = _2802;
        _2881 = _2803;
    }
    float _2893 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2894 = _2893 == 3.0;
    float _2895 = log2(_2881);
    float _2899 = exp2(_2895 * cbSceneParam._m0[78u].x);
    float _2900 = exp2(_2895 * cbSceneParam._m0[78u].y);
    float _2901 = exp2(_2895 * cbSceneParam._m0[78u].z);
    float _2902 = _2899 * (isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0)));
    float _2903 = _2900 * (isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0)));
    float _2904 = _2901 * (isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0)));
    float _2913 = (_2893 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2913 * (_2894 ? _2902 : (_2902 + (cbSceneParam._m0[72u].w * _2875)));
    SV_Target.y = _2913 * (_2894 ? _2903 : (_2903 + (cbSceneParam._m0[72u].w * _2877)));
    SV_Target.z = _2913 * (_2894 ? _2904 : (_2904 + (cbSceneParam._m0[72u].w * _2879)));
    SV_Target.w = cbInstanceData._m0[_2775].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2734) * _2774) * _2899) * _2913;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2737) * _2774) * _2900) * _2913;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2740) * _2774) * _2901) * _2913;
    SV_Target_1.w = cbInstanceData._m0[_2775].w;
}


