#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1069;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _243 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _249 = _243.x * cbMtdParam._m0[9u].x;
    float _250 = _243.y * cbMtdParam._m0[9u].y;
    float _251 = _243.z * cbMtdParam._m0[9u].z;
    vec4 _271 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _292 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_271.x + 0.00999999977648258209228515625));
    float _294 = _292 * (cbMtdParam._m0[15u].x + 1.0);
    float _3438 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _295 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
    float _303 = ((((cbMtdParam._m0[12u].x - _249) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _295) + _249;
    float _304 = ((((cbMtdParam._m0[12u].y - _250) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _295) + _250;
    float _305 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _251)) * _295) + _251;
    vec4 _318 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _320 = _318.x;
    vec4 _332 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _336 = _332.z;
    float _340 = (_332.x * 2.0) + (-1.0);
    float _342 = (_332.y * 2.0) + (-1.0);
    float _343 = dot(vec2(_340, _342), vec2(_340, _342));
    float _3449 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _348 = sqrt(1.0 - (isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0))));
    float _351 = _292 * (cbMtdParam._m0[14u].w + 1.0);
    float _3460 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _355 = ((cbMtdParam._m0[14u].y - _336) * (isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0)))) + _336;
    vec4 _383 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _398 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _443 = (TEXCOORD_6.x - ((cbMtdParam._m0[13u].w * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_5, SS_WrapLinear), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].x + 1.0);
    float _3471 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _444 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
    float _445 = ((_398.x + _383.x) * cbMtdParam._m0[11u].x) * _444;
    float _446 = ((_398.y + _383.y) * cbMtdParam._m0[11u].y) * _444;
    float _447 = ((_398.z + _383.z) * cbMtdParam._m0[11u].z) * _444;
    vec4 _459 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[9u].w));
    float _461 = _459.x;
    vec4 _486 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _492 = (_486.x * 2.0) + (-1.0);
    float _493 = (_486.y * 2.0) + (-1.0);
    float _494 = dot(vec2(_492, _493), vec2(_492, _493));
    float _3482 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _510 = (_295 * (((cbMtdParam._m0[13u].z * _340) - _340) + _492)) + _340;
    float _511 = (_295 * (((cbMtdParam._m0[13u].z * _342) - _342) + _493)) + _342;
    float _512 = (_295 * (sqrt(1.0 - (isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0)))) - _348)) + _348;
    float _515 = fma(_512, _214 * NORMAL.x, fma(_511, _221 * TANGENT.x, (_207 * _199) * _510));
    float _518 = fma(_512, _214 * NORMAL.y, fma(_511, _221 * TANGENT.y, (_207 * _200) * _510));
    float _521 = fma(_512, _214 * NORMAL.z, fma(_511, _221 * TANGENT.z, (_207 * _201) * _510));
    float _525 = inversesqrt(dot(vec3(_515, _518, _521), vec3(_515, _518, _521)));
    float _526 = _525 * _515;
    float _527 = _525 * _518;
    float _528 = _525 * _521;
    float _3493 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _529 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
    float _3504 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3515 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _3526 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3537 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _533 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
    float _549 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _589 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _599 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _589);
    float _600 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _589);
    float _601 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _589);
    float _605 = inversesqrt(dot(vec3(_599, _600, _601), vec3(_599, _600, _601)));
    float _606 = _599 * _605;
    float _607 = _600 * _605;
    float _608 = _601 * _605;
    float _614 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _615 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _635 = fma(_528, cbSceneParam._m0[5u].z, fma(_527, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _526));
    float _638 = fma(_528, cbSceneParam._m0[6u].z, fma(_527, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _526));
    float _641 = fma(_528, cbSceneParam._m0[7u].z, fma(_527, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _526));
    uint _654 = uint(roundEven(NORMAL.w)) * 13u;
    uint _655 = _654 + 9u;
    uint _656 = _655 + uint(cbMatDynParam._m0[0u].w);
    float _662 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0)))) * cbInstanceData._m0[_656].x;
    float _663 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0)))) * cbInstanceData._m0[_656].y;
    float _664 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0)))) * cbInstanceData._m0[_656].z;
    float _3548 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _665 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
    float _3559 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _666 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
    float _3570 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _667 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
    float _668 = 1.0 - _533;
    float _669 = _665 * _668;
    float _670 = _666 * _668;
    float _671 = _667 * _668;
    float _676 = (_665 + (-0.039999999105930328369140625)) * _533;
    float _677 = (_666 + (-0.039999999105930328369140625)) * _533;
    float _678 = (_667 + (-0.039999999105930328369140625)) * _533;
    float _679 = _676 + 0.039999999105930328369140625;
    float _681 = _677 + 0.039999999105930328369140625;
    float _682 = _678 + 0.039999999105930328369140625;
    vec4 _691 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _614, cbSceneParam._m0[86u].y * _615));
    float _694 = _691.x * TEXCOORD_3.w;
    float _695 = dot(vec3(_526, _527, _528), vec3(_606, _607, _608));
    float _698 = _695 * 2.0;
    float _702 = (_698 * _526) - _606;
    float _703 = (_698 * _527) - _607;
    float _704 = (_698 * _528) - _608;
    float _708 = abs(dot(vec3(_606, _607, _608), vec3(_526, _527, _528)));
    float _3581 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _710 = sqrt(_529);
    float _723 = exp2((_710 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_710 * 3.0));
    float _729 = (1.0 - _723) * ((_710 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _730 = _723 * _710;
    float _758 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _762 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _766 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1068;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _793 = fma(_766, cbModelParam._m0[26u].z, fma(_762, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _758));
        float _797 = fma(_766, cbModelParam._m0[27u].z, fma(_762, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _758));
        float _801 = fma(_766, cbModelParam._m0[28u].z, fma(_762, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _758));
        float _826 = _758 + _526;
        float _827 = _762 + _527;
        float _828 = _766 + _528;
        float _838 = fma(_828, cbModelParam._m0[26u].z, fma(_827, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _826)) - _793;
        float _839 = fma(_828, cbModelParam._m0[27u].z, fma(_827, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _826)) - _797;
        float _840 = fma(_828, cbModelParam._m0[28u].z, fma(_827, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _826)) - _801;
        float _844 = inversesqrt(dot(vec3(_838, _839, _840), vec3(_838, _839, _840)));
        float _857 = ((_844 * _838) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_793 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _858 = ((_844 * _839) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_797 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _859 = ((_844 * _840) / cbModelParam._m0[34u].z) + ((((((_801 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _862 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_857, _858, _859), 0.0);
        vec4 _869 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_857, _858, _859), 0.0);
        vec4 _876 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_857, _858, _859), 0.0);
        vec4 _883 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_857, _858, _859), 0.0);
        float _896 = exp2((_862.w + (-0.5)) * 20.0) * 2.0;
        float _897 = _896 * (_862.x + (-0.5));
        float _898 = _896 * (_862.y + (-0.5));
        float _899 = _896 * (_862.z + (-0.5));
        float _906 = exp2((_869.w + (-0.5)) * 20.0) * 2.0;
        float _907 = _906 * (_869.x + (-0.5));
        float _908 = _906 * (_869.y + (-0.5));
        float _909 = _906 * (_869.z + (-0.5));
        float _916 = exp2((_876.w + (-0.5)) * 20.0) * 2.0;
        float _917 = _916 * (_876.x + (-0.5));
        float _918 = _916 * (_876.y + (-0.5));
        float _919 = _916 * (_876.z + (-0.5));
        float _926 = exp2((_883.w + (-0.5)) * 20.0) * 2.0;
        float _927 = _926 * (_883.x + (-0.5));
        float _928 = _926 * (_883.y + (-0.5));
        float _929 = _926 * (_883.z + (-0.5));
        float _930 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _931 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _932 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _933 = _897 * 0.5;
        float _934 = _907 * 0.5;
        float _935 = _917 * 0.5;
        float _936 = dot(vec3(_933, _934, _935), vec3(_933, _934, _935));
        float _941 = (_936 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_936);
        float _950 = (dot(vec3(_526, _527, _528), vec3(_941 * _933, _941 * _934, _941 * _935)) + 1.0) * 0.5;
        float _3607 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _960 = sqrt(((_934 * _934) + (_933 * _933)) + (_935 * _935)) / (_930 + 9.9999997473787516355514526367188e-06);
        float _3618 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _961 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _962 = _961 * 2.0;
        float _966 = (1.0 - _961) / (_961 + 1.0);
        float _3629 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _976 = ((((1.0 - _967) * (_962 + 2.0)) * exp2(log2(isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * (_962 + 1.0))) + _967) * _930;
        float _977 = _898 * 0.5;
        float _978 = _908 * 0.5;
        float _979 = _918 * 0.5;
        float _980 = dot(vec3(_977, _978, _979), vec3(_977, _978, _979));
        float _985 = (_980 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_980);
        float _993 = (dot(vec3(_526, _527, _528), vec3(_985 * _977, _985 * _978, _985 * _979)) + 1.0) * 0.5;
        float _3640 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _1002 = sqrt(((_978 * _978) + (_977 * _977)) + (_979 * _979)) / (_931 + 9.9999997473787516355514526367188e-06);
        float _3651 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1004 = _1003 * 2.0;
        float _1008 = (1.0 - _1003) / (_1003 + 1.0);
        float _3662 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _1018 = ((((1.0 - _1009) * (_1004 + 2.0)) * exp2(log2(isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) * (_1004 + 1.0))) + _1009) * _931;
        float _1019 = _899 * 0.5;
        float _1020 = _909 * 0.5;
        float _1021 = _919 * 0.5;
        float _1022 = dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021));
        float _1027 = (_1022 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1022);
        float _1035 = (dot(vec3(_526, _527, _528), vec3(_1027 * _1019, _1027 * _1020, _1027 * _1021)) + 1.0) * 0.5;
        float _3673 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1044 = sqrt(((_1020 * _1020) + (_1019 * _1019)) + (_1021 * _1021)) / (_932 + 9.9999997473787516355514526367188e-06);
        float _3684 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1046 = _1045 * 2.0;
        float _1050 = (1.0 - _1045) / (_1045 + 1.0);
        float _3695 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1060 = ((((1.0 - _1051) * (_1046 + 2.0)) * exp2(log2(isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) * (_1046 + 1.0))) + _1051) * _932;
        _1068 = _899;
        _1070 = _898;
        _1071 = _897;
        _1072 = _909;
        _1073 = _908;
        _1074 = _907;
        _1075 = _919;
        _1076 = _918;
        _1077 = _917;
        _1078 = _932;
        _1079 = _931;
        _1080 = _930;
        _1081 = cbModelParam._m0[36u].z * (isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0)));
        _1082 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0)));
        _1083 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0)));
    }
    else
    {
        _1068 = _1069;
        _1070 = _1069;
        _1071 = _1069;
        _1072 = _1069;
        _1073 = _1069;
        _1074 = _1069;
        _1075 = _1069;
        _1076 = _1069;
        _1077 = _1069;
        _1078 = _1069;
        _1079 = _1069;
        _1080 = _1069;
        _1081 = 0.0;
        _1082 = 0.0;
        _1083 = 0.0;
    }
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1109 = fma(_766, cbModelParam._m0[30u].z, fma(_762, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _758));
        float _1113 = fma(_766, cbModelParam._m0[31u].z, fma(_762, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _758));
        float _1117 = fma(_766, cbModelParam._m0[32u].z, fma(_762, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _758));
        float _1140 = _758 + _526;
        float _1141 = _762 + _527;
        float _1142 = _766 + _528;
        float _1152 = fma(_1142, cbModelParam._m0[30u].z, fma(_1141, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1140)) - _1109;
        float _1153 = fma(_1142, cbModelParam._m0[31u].z, fma(_1141, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1140)) - _1113;
        float _1154 = fma(_1142, cbModelParam._m0[32u].z, fma(_1141, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1140)) - _1117;
        float _1158 = inversesqrt(dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154)));
        float _1171 = ((_1158 * _1152) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1109 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1172 = ((_1158 * _1153) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1113 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1173 = ((_1158 * _1154) / cbModelParam._m0[35u].z) + ((((((_1117 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        float _1208 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1175.x + (-0.5));
        float _1210 = _1208 * (_1175.y + (-0.5));
        float _1211 = _1208 * (_1175.z + (-0.5));
        float _1218 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1182.x + (-0.5));
        float _1220 = _1218 * (_1182.y + (-0.5));
        float _1221 = _1218 * (_1182.z + (-0.5));
        float _1228 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1189.x + (-0.5));
        float _1230 = _1228 * (_1189.y + (-0.5));
        float _1231 = _1228 * (_1189.z + (-0.5));
        float _1238 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1196.x + (-0.5));
        float _1240 = _1238 * (_1196.y + (-0.5));
        float _1241 = _1238 * (_1196.z + (-0.5));
        float _1242 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1245 = _1209 * 0.5;
        float _1246 = _1219 * 0.5;
        float _1247 = _1229 * 0.5;
        float _1248 = dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247));
        float _1253 = (_1248 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1248);
        float _1261 = (dot(vec3(_526, _527, _528), vec3(_1253 * _1245, _1253 * _1246, _1253 * _1247)) + 1.0) * 0.5;
        float _3736 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1270 = sqrt(((_1246 * _1246) + (_1245 * _1245)) + (_1247 * _1247)) / (_1242 + 9.9999997473787516355514526367188e-06);
        float _3747 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1272 = _1271 * 2.0;
        float _1276 = (1.0 - _1271) / (_1271 + 1.0);
        float _3758 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1286 = ((((1.0 - _1277) * (_1272 + 2.0)) * exp2(log2(isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * (_1272 + 1.0))) + _1277) * _1242;
        float _1287 = _1210 * 0.5;
        float _1288 = _1220 * 0.5;
        float _1289 = _1230 * 0.5;
        float _1290 = dot(vec3(_1287, _1288, _1289), vec3(_1287, _1288, _1289));
        float _1295 = (_1290 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1290);
        float _1303 = (dot(vec3(_526, _527, _528), vec3(_1295 * _1287, _1295 * _1288, _1295 * _1289)) + 1.0) * 0.5;
        float _3769 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1312 = sqrt(((_1288 * _1288) + (_1287 * _1287)) + (_1289 * _1289)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _3780 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1314 = _1313 * 2.0;
        float _1318 = (1.0 - _1313) / (_1313 + 1.0);
        float _3791 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1328 = ((((1.0 - _1319) * (_1314 + 2.0)) * exp2(log2(isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * (_1314 + 1.0))) + _1319) * _1243;
        float _1329 = _1211 * 0.5;
        float _1330 = _1221 * 0.5;
        float _1331 = _1231 * 0.5;
        float _1332 = dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331));
        float _1337 = (_1332 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1332);
        float _1345 = (dot(vec3(_526, _527, _528), vec3(_1337 * _1329, _1337 * _1330, _1337 * _1331)) + 1.0) * 0.5;
        float _3802 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1354 = sqrt(((_1330 * _1330) + (_1329 * _1329)) + (_1331 * _1331)) / (_1244 + 9.9999997473787516355514526367188e-06);
        float _3813 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1356 = _1355 * 2.0;
        float _1360 = (1.0 - _1355) / (_1355 + 1.0);
        float _3824 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1370 = ((((1.0 - _1361) * (_1356 + 2.0)) * exp2(log2(isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * (_1356 + 1.0))) + _1361) * _1244;
        _1378 = _1211;
        _1379 = _1210;
        _1380 = _1209;
        _1381 = _1221;
        _1382 = _1220;
        _1383 = _1219;
        _1384 = _1231;
        _1385 = _1230;
        _1386 = _1229;
        _1387 = _1244;
        _1388 = _1243;
        _1389 = _1242;
        _1390 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)));
        _1391 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)));
        _1392 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)));
    }
    else
    {
        _1378 = _1069;
        _1379 = _1069;
        _1380 = _1069;
        _1381 = _1069;
        _1382 = _1069;
        _1383 = _1069;
        _1384 = _1069;
        _1385 = _1069;
        _1386 = _1069;
        _1387 = _1069;
        _1388 = _1069;
        _1389 = _1069;
        _1390 = 0.0;
        _1391 = 0.0;
        _1392 = 0.0;
    }
    float _1402 = (cbModelParam._m0[1u].x * (_1390 - _1081)) + _1081;
    float _1403 = (cbModelParam._m0[1u].x * (_1391 - _1082)) + _1082;
    float _1404 = (cbModelParam._m0[1u].x * (_1392 - _1083)) + _1083;
    float _1425 = fma(_1404, cbSceneParam._m0[89u].z, fma(_1403, cbSceneParam._m0[89u].y, _1402 * cbSceneParam._m0[89u].x));
    float _1428 = fma(_1404, cbSceneParam._m0[90u].z, fma(_1403, cbSceneParam._m0[90u].y, _1402 * cbSceneParam._m0[90u].x));
    float _1431 = fma(_1404, cbSceneParam._m0[91u].z, fma(_1403, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1402));
    float _1446 = _702 * 0.5;
    float _1447 = _703 * 0.5;
    float _1448 = _704 * 0.5;
    float _1449 = dot(vec4(_1446, _1447, _1448, 1.0), vec4(_1380, _1383, _1386, _1389));
    float _1452 = dot(vec4(_1446, _1447, _1448, 1.0), vec4(_1379, _1382, _1385, _1388));
    float _1455 = dot(vec4(_1446, _1447, _1448, 1.0), vec4(_1378, _1381, _1384, _1387));
    float _1489;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1462 = dot(vec4(_1446, _1447, _1448, 1.0), vec4(_1068, _1072, _1075, _1078));
        float _1466 = dot(vec4(_1446, _1447, _1448, 1.0), vec4(_1070, _1073, _1076, _1079));
        float _1470 = dot(vec4(_1446, _1447, _1448, 1.0), vec4(_1071, _1074, _1077, _1080));
        float _1477 = dot(vec4(cbModelParam._m0[39u]), vec4(_1446, _1447, _1448, 1.0));
        _1489 = dot(vec3(isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)), isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)), isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1477) ? 0.0 : (isnan(0.0) ? _1477 : max(0.0, _1477))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1489 = 1.0;
    }
    float _1500;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1491 = dot(vec4(cbModelParam._m0[40u]), vec4(_1446, _1447, _1448, 1.0));
        _1500 = dot(vec3(isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)), isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)), isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1491) ? 0.0 : (isnan(0.0) ? _1491 : max(0.0, _1491))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1500 = 1.0;
    }
    float _1504 = (_1500 * cbModelParam._m0[1u].x) + (_1489 * (1.0 - cbModelParam._m0[1u].x));
    float _1514 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _529);
    float _1515 = isnan(_1514) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1514 : min(cbModelParam._m0[25u].z, _1514));
    float _1595;
    float _1597;
    float _1599;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1562 = fma(_766, cbModelParam._m0[13u].z, fma(_762, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _758)) + cbModelParam._m0[13u].w;
        float _1566 = fma(_766, cbModelParam._m0[14u].z, fma(_762, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _758)) + cbModelParam._m0[14u].w;
        float _1570 = fma(_766, cbModelParam._m0[15u].z, fma(_762, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _758)) + cbModelParam._m0[15u].w;
        float _1573 = fma(_704, cbModelParam._m0[13u].z, fma(_703, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _702));
        float _1576 = fma(_704, cbModelParam._m0[14u].z, fma(_703, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _702));
        float _1579 = fma(_704, cbModelParam._m0[15u].z, fma(_703, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _702));
        float _1607;
        if (_1573 > 0.0)
        {
            _1607 = abs((1.0 - _1562) / _1573);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1573 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1562 + 1.0) / _1573);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1607 = frontier_phi_14_12_ladder;
        }
        float _1812;
        if (_1576 > 0.0)
        {
            _1812 = abs((1.0 - _1566) / _1576);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1576 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1566 + 1.0) / _1576);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1812 = frontier_phi_23_19_ladder;
        }
        float _2066;
        if (_1579 > 0.0)
        {
            _2066 = abs((1.0 - _1570) / _1579);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1579 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1570 + 1.0) / _1579);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2066 = frontier_phi_35_30_ladder;
        }
        float _2068 = isnan(_1812) ? _1607 : (isnan(_1607) ? _1812 : min(_1607, _1812));
        float _2069 = isnan(_2066) ? _2068 : (isnan(_2068) ? _2066 : min(_2068, _2066));
        float _2073 = (_2069 * _1573) + _1562;
        float _2074 = (_2069 * _1576) + _1566;
        float _2075 = (_2069 * _1579) + _1570;
        float _2076 = _2069 * 9.9999997473787516355514526367188e-05;
        float _2078 = (-1.0) - _2076;
        float _2080 = _2076 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2075 > _2080) || ((_2075 < _2078) || ((_2074 > _2080) || ((_2074 < _2078) || ((_2073 < _2078) || (_2073 > _2080))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2203 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2075, cbModelParam._m0[9u].z, fma(_2074, cbModelParam._m0[9u].y, _2073 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2075, cbModelParam._m0[10u].z, fma(_2074, cbModelParam._m0[10u].y, _2073 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2075, cbModelParam._m0[11u].z, fma(_2074, cbModelParam._m0[11u].y, _2073 * cbModelParam._m0[11u].x))), _1515);
            frontier_phi_13_35_ladder = _2203.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2203.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2203.x * cbModelParam._m0[1u].y;
        }
        _1595 = frontier_phi_13_35_ladder_2;
        _1597 = frontier_phi_13_35_ladder_1;
        _1599 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1583 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_702, _703, _704), _1515);
        _1595 = _1583.x * cbModelParam._m0[1u].y;
        _1597 = _1583.y * cbModelParam._m0[1u].y;
        _1599 = _1583.z * cbModelParam._m0[1u].y;
    }
    float _1603 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _529);
    float _1604 = isnan(_1603) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1603 : min(cbModelParam._m0[25u].w, _1603));
    float _1695;
    float _1697;
    float _1699;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1659 = fma(_766, cbModelParam._m0[21u].z, fma(_762, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _758)) + cbModelParam._m0[21u].w;
        float _1663 = fma(_766, cbModelParam._m0[22u].z, fma(_762, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _758)) + cbModelParam._m0[22u].w;
        float _1667 = fma(_766, cbModelParam._m0[23u].z, fma(_762, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _758)) + cbModelParam._m0[23u].w;
        float _1670 = fma(_704, cbModelParam._m0[21u].z, fma(_703, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _702));
        float _1673 = fma(_704, cbModelParam._m0[22u].z, fma(_703, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _702));
        float _1676 = fma(_704, cbModelParam._m0[23u].z, fma(_703, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _702));
        float _1817;
        if (_1670 > 0.0)
        {
            _1817 = abs((1.0 - _1659) / _1670);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1670 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1659 + 1.0) / _1670);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1817 = frontier_phi_25_21_ladder;
        }
        float _2093;
        if (_1673 > 0.0)
        {
            _2093 = abs((1.0 - _1663) / _1673);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1673 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1663 + 1.0) / _1673);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2093 = frontier_phi_37_32_ladder;
        }
        float _2306;
        if (_1676 > 0.0)
        {
            _2306 = abs((1.0 - _1667) / _1676);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1667 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2306 = frontier_phi_46_43_ladder;
        }
        float _2308 = isnan(_2093) ? _1817 : (isnan(_1817) ? _2093 : min(_1817, _2093));
        float _2309 = isnan(_2306) ? _2308 : (isnan(_2308) ? _2306 : min(_2308, _2306));
        float _2313 = (_2309 * _1670) + _1659;
        float _2314 = (_2309 * _1673) + _1663;
        float _2315 = (_2309 * _1676) + _1667;
        float _2316 = _2309 * 9.9999997473787516355514526367188e-05;
        float _2317 = (-1.0) - _2316;
        float _2319 = _2316 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2315 > _2319) || ((_2315 < _2317) || ((_2314 > _2319) || ((_2314 < _2317) || ((_2313 < _2317) || (_2313 > _2319))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2543 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2315, cbModelParam._m0[17u].z, fma(_2314, cbModelParam._m0[17u].y, _2313 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2315, cbModelParam._m0[18u].z, fma(_2314, cbModelParam._m0[18u].y, _2313 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2315, cbModelParam._m0[19u].z, fma(_2314, cbModelParam._m0[19u].y, _2313 * cbModelParam._m0[19u].x))), _1604);
            frontier_phi_22_46_ladder = _2543.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2543.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2543.x * cbModelParam._m0[1u].z;
        }
        _1695 = frontier_phi_22_46_ladder_2;
        _1697 = frontier_phi_22_46_ladder_1;
        _1699 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1679 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_702, _703, _704), _1604);
        _1695 = _1679.x * cbModelParam._m0[1u].z;
        _1697 = _1679.y * cbModelParam._m0[1u].z;
        _1699 = _1679.z * cbModelParam._m0[1u].z;
    }
    float _1712 = (((_729 * _679) + _730) * _694) * ((cbModelParam._m0[1u].w * (_1695 - _1595)) + _1595);
    float _1714 = (((_729 * _681) + _730) * _694) * ((cbModelParam._m0[1u].w * (_1697 - _1597)) + _1597);
    float _1716 = (((_729 * _682) + _730) * _694) * ((cbModelParam._m0[1u].w * (_1699 - _1599)) + _1599);
    float _1719 = fma(_1716, cbSceneParam._m0[89u].z, fma(_1714, cbSceneParam._m0[89u].y, _1712 * cbSceneParam._m0[89u].x));
    float _1722 = fma(_1716, cbSceneParam._m0[90u].z, fma(_1714, cbSceneParam._m0[90u].y, _1712 * cbSceneParam._m0[90u].x));
    float _1725 = fma(_1716, cbSceneParam._m0[91u].z, fma(_1714, cbSceneParam._m0[91u].y, _1712 * cbSceneParam._m0[91u].x));
    uvec4 _1735 = floatBitsToUint(cbInstanceData._m0[_654 + 5u]);
    uint _1737 = _1735.x * 14u;
    uint _1738 = _1737 + 13u;
    float _1745 = _694 + (-1.0);
    float _1750 = (cbLight._m0[_1738].x * _1745) + 1.0;
    float _1751 = (cbLight._m0[_1738].y * _1745) + 1.0;
    float _1752 = (cbLight._m0[_1738].z * _1745) + 1.0;
    float _1753 = (cbLight._m0[_1738].w * _1745) + 1.0;
    uint _1754 = _1737 + 5u;
    float _1760 = isnan(1.0) ? _1751 : (isnan(_1751) ? 1.0 : min(_1751, 1.0));
    uint _1764 = _1737 + 4u;
    float _1771 = isnan(1.0) ? _1750 : (isnan(_1750) ? 1.0 : min(_1750, 1.0));
    uint _1775 = _1737 | 1u;
    float _1786 = dot(vec3(cbLight._m0[_1737].xyz), vec3(_526, _527, _528));
    float _1789 = dot(vec3(cbLight._m0[_1775].xyz), vec3(_526, _527, _528));
    float _3960 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
    float _3971 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1794 = (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * 0.3183098733425140380859375;
    float _1796 = (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * 0.3183098733425140380859375;
    float _1803 = ((cbLight._m0[_1754].x * _1760) * _1796) + ((cbLight._m0[_1764].x * _1771) * _1794);
    float _1804 = ((_1760 * cbLight._m0[_1754].y) * _1796) + ((_1771 * cbLight._m0[_1764].y) * _1794);
    float _1805 = ((_1760 * cbLight._m0[_1754].z) * _1796) + ((_1771 * cbLight._m0[_1764].z) * _1794);
    uvec4 _1809 = floatBitsToUint(cbLight._m0[_1737 + 12u]);
    bool _1811 = _1809.x == 0u;
    float _1822;
    float _1824;
    float _1826;
    if (_1811)
    {
        _1822 = _1803;
        _1824 = _1804;
        _1826 = _1805;
    }
    else
    {
        uint _1830 = _1737 + 6u;
        float _1846 = (dot(vec3(cbLight._m0[_1737 + 2u].xyz), vec3(_526, _527, _528)) * 0.5) + 0.5;
        float _1847 = _1846 * _1846;
        float _3982 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
        float _1848 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1849 = isnan(1.0) ? _1752 : (isnan(_1752) ? 1.0 : min(_1752, 1.0));
        _1822 = (((cbLight._m0[_1830].x * 0.3183098733425140380859375) * _1848) * _1849) + _1803;
        _1824 = (((cbLight._m0[_1830].y * 0.3183098733425140380859375) * _1848) * _1849) + _1804;
        _1826 = (((cbLight._m0[_1830].z * 0.3183098733425140380859375) * _1848) * _1849) + _1805;
    }
    bool _1829 = _1809.y == 0u;
    float _1867;
    float _1869;
    float _1871;
    if (_1829)
    {
        _1867 = _1822;
        _1869 = _1824;
        _1871 = _1826;
    }
    else
    {
        uint _2037 = _1737 + 7u;
        float _2053 = (dot(vec3(cbLight._m0[_1737 + 3u].xyz), vec3(_526, _527, _528)) * 0.5) + 0.5;
        float _2054 = _2053 * _2053;
        float _3998 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2055 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _2056 = isnan(1.0) ? _1753 : (isnan(_1753) ? 1.0 : min(_1753, 1.0));
        _1867 = (((cbLight._m0[_2037].x * 0.3183098733425140380859375) * _2055) * _2056) + _1822;
        _1869 = (((cbLight._m0[_2037].y * 0.3183098733425140380859375) * _2055) * _2056) + _1824;
        _1871 = (((cbLight._m0[_2037].z * 0.3183098733425140380859375) * _2055) * _2056) + _1826;
    }
    uint _1874 = _1737 + 8u;
    float _1887 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1737].w)) * _529) * 0.949999988079071044921875);
    float _1888 = _1887 * _1887;
    float _1889 = cbLight._m0[_1737].x + _606;
    float _1890 = cbLight._m0[_1737].y + _607;
    float _1891 = cbLight._m0[_1737].z + _608;
    float _1895 = inversesqrt(dot(vec3(_1889, _1890, _1891), vec3(_1889, _1890, _1891)));
    float _1896 = _1895 * _1889;
    float _1897 = _1895 * _1890;
    float _1898 = _1895 * _1891;
    float _1899 = dot(vec3(_526, _527, _528), vec3(cbLight._m0[_1737].xyz));
    float _4014 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1902 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _4025 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _1903 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _1904 = dot(vec3(_526, _527, _528), vec3(_1896, _1897, _1898));
    float _4036 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
    float _1907 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _1908 = dot(vec3(cbLight._m0[_1737].xyz), vec3(_1896, _1897, _1898));
    float _4047 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _1912 = _1888 * _1888;
    float _1916 = ((_1907 * _1907) * (_1912 + (-1.0))) + 1.0;
    float _1924 = exp2(log2(1.0 - (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0)))) * 5.0);
    float _1925 = 0.959999978542327880859375 - _676;
    float _1927 = 0.959999978542327880859375 - _677;
    float _1928 = 0.959999978542327880859375 - _678;
    float _1935 = 1.0 - _1888;
    float _1946 = (0.5 / (((_1903 * ((_1902 * _1935) + _1888)) + 9.9999999392252902907785028219223e-09) + (((_1903 * _1935) + _1888) * _1902))) * _1902;
    float _4058 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _1948 = (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1912 / ((_1916 * _1916) * 3.141590118408203125));
    uint _1959 = _1737 + 9u;
    float _1970 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1775].w)) * _529) * 0.949999988079071044921875);
    float _1971 = _1970 * _1970;
    float _1972 = cbLight._m0[_1775].x + _606;
    float _1973 = cbLight._m0[_1775].y + _607;
    float _1974 = cbLight._m0[_1775].z + _608;
    float _1978 = inversesqrt(dot(vec3(_1972, _1973, _1974), vec3(_1972, _1973, _1974)));
    float _1979 = _1978 * _1972;
    float _1980 = _1978 * _1973;
    float _1981 = _1978 * _1974;
    float _1982 = dot(vec3(_526, _527, _528), vec3(cbLight._m0[_1775].xyz));
    float _4069 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _1985 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _1986 = dot(vec3(_526, _527, _528), vec3(_1979, _1980, _1981));
    float _4080 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1989 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _1990 = dot(vec3(cbLight._m0[_1775].xyz), vec3(_1979, _1980, _1981));
    float _4091 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _1994 = _1971 * _1971;
    float _1998 = ((_1989 * _1989) * (_1994 + (-1.0))) + 1.0;
    float _2005 = exp2(log2(1.0 - (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0)))) * 5.0);
    float _2012 = 1.0 - _1971;
    float _2022 = (0.5 / (((_1903 * ((_1985 * _2012) + _1971)) + 9.9999999392252902907785028219223e-09) + (((_1903 * _2012) + _1971) * _1985))) * _1985;
    float _4102 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2024 = (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_1994 / ((_1998 * _1998) * 3.141590118408203125));
    float _2034 = (((((_2005 * _1925) + _679) * cbLight._m0[_1959].x) * _2024) * _1760) + (((((_1924 * _1925) + _679) * cbLight._m0[_1874].x) * _1948) * _1771);
    float _2035 = (((((_2005 * _1927) + _681) * cbLight._m0[_1959].y) * _2024) * _1760) + (((((_1924 * _1927) + _681) * cbLight._m0[_1874].y) * _1948) * _1771);
    float _2036 = (((((_2005 * _1928) + _682) * cbLight._m0[_1959].z) * _2024) * _1760) + (((((_1924 * _1928) + _682) * cbLight._m0[_1874].z) * _1948) * _1771);
    float _2098;
    float _2100;
    float _2102;
    if (_1811)
    {
        _2098 = _2034;
        _2100 = _2035;
        _2102 = _2036;
    }
    else
    {
        uint _2104 = _1737 + 2u;
        uint _2108 = _1737 + 10u;
        float _2122 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2104].w)) * _529) * 0.949999988079071044921875);
        float _2123 = _2122 * _2122;
        float _2124 = cbLight._m0[_2104].x + _606;
        float _2125 = cbLight._m0[_2104].y + _607;
        float _2126 = cbLight._m0[_2104].z + _608;
        float _2130 = inversesqrt(dot(vec3(_2124, _2125, _2126), vec3(_2124, _2125, _2126)));
        float _2131 = _2130 * _2124;
        float _2132 = _2130 * _2125;
        float _2133 = _2130 * _2126;
        float _2134 = dot(vec3(_526, _527, _528), vec3(cbLight._m0[_2104].xyz));
        float _4113 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        float _2137 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _2138 = dot(vec3(_526, _527, _528), vec3(_2131, _2132, _2133));
        float _4124 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
        float _2141 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _2142 = dot(vec3(cbLight._m0[_2104].xyz), vec3(_2131, _2132, _2133));
        float _4135 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2146 = _2123 * _2123;
        float _2150 = ((_2141 * _2141) * (_2146 + (-1.0))) + 1.0;
        float _2157 = exp2(log2(1.0 - (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0)))) * 5.0);
        float _2164 = 1.0 - _2123;
        float _2174 = (0.5 / (((_1903 * ((_2137 * _2164) + _2123)) + 9.9999999392252902907785028219223e-09) + (((_1903 * _2164) + _2123) * _2137))) * _2137;
        float _4146 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2176 = (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_2146 / ((_2150 * _2150) * 3.141590118408203125));
        float _2177 = isnan(1.0) ? _1752 : (isnan(_1752) ? 1.0 : min(_1752, 1.0));
        _2098 = (((((_2157 * _1925) + _679) * cbLight._m0[_2108].x) * _2176) * _2177) + _2034;
        _2100 = (((((_2157 * _1927) + _681) * cbLight._m0[_2108].y) * _2176) * _2177) + _2035;
        _2102 = (((((_2157 * _1928) + _682) * cbLight._m0[_2108].z) * _2176) * _2177) + _2036;
    }
    float _2212;
    float _2214;
    float _2216;
    if (_1829)
    {
        _2212 = _2098;
        _2214 = _2100;
        _2216 = _2102;
    }
    else
    {
        uint _2223 = _1737 + 3u;
        uint _2227 = _1737 + 11u;
        float _2241 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2223].w)) * _529) * 0.949999988079071044921875);
        float _2242 = _2241 * _2241;
        float _2243 = cbLight._m0[_2223].x + _606;
        float _2244 = cbLight._m0[_2223].y + _607;
        float _2245 = cbLight._m0[_2223].z + _608;
        float _2249 = inversesqrt(dot(vec3(_2243, _2244, _2245), vec3(_2243, _2244, _2245)));
        float _2250 = _2249 * _2243;
        float _2251 = _2249 * _2244;
        float _2252 = _2249 * _2245;
        float _2253 = dot(vec3(_526, _527, _528), vec3(cbLight._m0[_2223].xyz));
        float _4162 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2256 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _2257 = dot(vec3(_526, _527, _528), vec3(_2250, _2251, _2252));
        float _4173 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        float _2260 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _2261 = dot(vec3(cbLight._m0[_2223].xyz), vec3(_2250, _2251, _2252));
        float _4184 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2265 = _2242 * _2242;
        float _2269 = ((_2260 * _2260) * (_2265 + (-1.0))) + 1.0;
        float _2276 = exp2(log2(1.0 - (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0)))) * 5.0);
        float _2283 = 1.0 - _2242;
        float _2293 = (0.5 / (((_1903 * ((_2256 * _2283) + _2242)) + 9.9999999392252902907785028219223e-09) + (((_1903 * _2283) + _2242) * _2256))) * _2256;
        float _4195 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2295 = (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_2265 / ((_2269 * _2269) * 3.141590118408203125));
        float _2296 = isnan(1.0) ? _1753 : (isnan(_1753) ? 1.0 : min(_1753, 1.0));
        _2212 = (((((_2276 * _1925) + _679) * cbLight._m0[_2227].x) * _2295) * _2296) + _2098;
        _2214 = (((((_2276 * _1927) + _681) * cbLight._m0[_2227].y) * _2295) * _2296) + _2100;
        _2216 = (((((_2276 * _1928) + _682) * cbLight._m0[_2227].z) * _2295) * _2296) + _2102;
    }
    float _2431;
    float _2433;
    float _2435;
    float _2437;
    float _2439;
    float _2441;
    if (_1735.y == 0u)
    {
        float _2371 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2372 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2371;
        float _2373 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2371;
        float _2374 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2371;
        uvec4 _2386 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2387 = _2386.x;
        uint _2398 = uint((float(_2386.y) * floor(float(uint(cbSceneParam._m0[85u].y * _615) / _2387))) + floor(float(uint(cbSceneParam._m0[85u].x * _614) / _2387)));
        float _2408 = (log2(_2374 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2409 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        uint _2412 = uint(isnan(14.0) ? _2409 : (isnan(_2409) ? 14.0 : min(_2409, 14.0)));
        uvec4 _2417 = texelFetch(g_lightClusterGridBuffer, int(((_2412 << 2u) + (_2398 << 6u)) >> 2u));
        uint _2418 = _2417.x;
        uint _2419 = _2386.z;
        float _2548;
        float _2550;
        float _2552;
        float _2554;
        float _2556;
        float _2558;
        if (((((1u << ((_2419 >> 4u) & 15u)) + 4294967295u) & _2418) == 0u) || ((_2419 & 240u) == 0u))
        {
            _2548 = 0.0;
            _2550 = 0.0;
            _2552 = 0.0;
            _2554 = 0.0;
            _2556 = 0.0;
            _2558 = 0.0;
        }
        else
        {
            float _2549;
            float _2551;
            float _2553;
            float _2555;
            float _2557;
            float _2559;
            float _2702 = 0.0;
            float _2703 = 0.0;
            float _2704 = 0.0;
            float _2705 = 0.0;
            float _2706 = 0.0;
            float _2707 = 0.0;
            uint _2708 = 0u;
            uint _2717;
            bool _2718;
            for (;;)
            {
                _2717 = texelFetch(g_lightClassification, int((((_2412 << 5u) + (_2398 << 9u)) + (_2708 << 2u)) >> 2u)).x;
                _2718 = _2717 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2718)
                {
                    frontier_phi_61_pred = _2702;
                    frontier_phi_61_pred_1 = _2707;
                    frontier_phi_61_pred_2 = _2706;
                    frontier_phi_61_pred_3 = _2705;
                    frontier_phi_61_pred_4 = _2704;
                    frontier_phi_61_pred_5 = _2703;
                }
                else
                {
                    float _2826;
                    float _2827;
                    float _2828;
                    float _2829;
                    float _2830;
                    float _2831;
                    uint _2832;
                    _2826 = _2702;
                    _2827 = _2703;
                    _2828 = _2704;
                    _2829 = _2705;
                    _2830 = _2706;
                    _2831 = _2707;
                    _2832 = _2717;
                    float _2758;
                    float _2759;
                    float _2760;
                    float _2761;
                    float _2762;
                    float _2763;
                    for (;;)
                    {
                        uint _2836 = uint(findLSB(_2832)) + (_2708 << 5u);
                        uint _2833 = (_2832 + 4294967295u) & _2832;
                        uint _2838 = _2836 * 48u;
                        vec4 _2852 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2838)).x, texelFetch(g_PointLightRenderingBuffer, int(_2838 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2838 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2838 + 3u)).x));
                        uint _2858 = (_2836 * 48u) + 4u;
                        vec4 _2871 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2858)).x, texelFetch(g_PointLightRenderingBuffer, int(_2858 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2858 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2858 + 3u)).x));
                        uint _2877 = (_2836 * 48u) + 8u;
                        vec3 _2888 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2877)).x, texelFetch(g_PointLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2877 + 2u)).x));
                        float _2892 = _2852.x - _2372;
                        float _2893 = _2852.y - _2373;
                        float _2894 = _2852.z - _2374;
                        float _2895 = dot(vec3(_2892, _2893, _2894), vec3(_2892, _2893, _2894));
                        float _2898 = inversesqrt(_2895);
                        float _2899 = _2898 * _2892;
                        float _2900 = _2898 * _2893;
                        float _2901 = _2898 * _2894;
                        float _2902 = dot(vec3(_635, _638, _641), vec3(_2899, _2900, _2901));
                        float _2907 = 1.0 - (_2895 * _2852.w);
                        float _4221 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
                        float _2908 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
                        float _2909 = sqrt(_2895) * _2871.w;
                        float _2912 = 1.39999997615814208984375 / (_2909 + 1.39999997615814208984375);
                        float _2913 = _2912 * _2912;
                        float _2916 = ((1.0 - _2913) * _2902) + _2913;
                        float _2919 = _2909 * _2909;
                        float _2923 = ((isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0))) * _2908) / ((_2919 * 0.699999988079071044921875) + 1.0);
                        float _2927 = (-0.0) - _2372;
                        float _2928 = (-0.0) - _2373;
                        float _2929 = (-0.0) - _2374;
                        float _2933 = inversesqrt(dot(vec3(_2927, _2928, _2929), vec3(_2927, _2928, _2929)));
                        float _2934 = _2933 * _2927;
                        float _2935 = _2933 * _2928;
                        float _2936 = _2933 * _2929;
                        float _2944 = exp2(log2(1.0 / ((_2919 * 3.5) + 5.0)) * 0.25);
                        float _2945 = 1.0 - _710;
                        float _2952 = sqrt(1.0 - ((1.0 - (_2945 * _2945)) * (1.0 - (_2944 * _2944))));
                        float _2953 = _2952 * _2952;
                        float _2954 = _2953 * _2953;
                        float _2955 = _2934 + _2899;
                        float _2956 = _2935 + _2900;
                        float _2957 = _2936 + _2901;
                        float _2961 = inversesqrt(dot(vec3(_2955, _2956, _2957), vec3(_2955, _2956, _2957)));
                        float _2965 = dot(vec3(_635, _638, _641), vec3(_2934, _2935, _2936));
                        float _4237 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
                        float _2968 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
                        float _2969 = dot(vec3(_635, _638, _641), vec3(_2961 * _2955, _2961 * _2956, _2961 * _2957));
                        float _4248 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
                        float _2972 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
                        float _2976 = ((_2972 * _2972) * (_2954 + (-1.0))) + 1.0;
                        float _2977 = _2912 * _2953;
                        float _2978 = _2977 * _2977;
                        float _2981 = ((1.0 - _2978) * _2902) + _2978;
                        float _4259 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
                        float _2982 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
                        float _2983 = 1.0 - _2953;
                        float _2993 = (0.5 / (((_2982 * ((_2968 * _2983) + _2953)) + 9.9999999392252902907785028219223e-09) + (((_2982 * _2983) + _2953) * _2968))) * _2982;
                        float _4270 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
                        float _3004 = (((_2954 * 3.1415927410125732421875) * (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0)))) / ((_2976 * _2976) * ((_2919 * 2.1991131305694580078125) + 3.141590118408203125))) * _2908;
                        _2761 = (_2923 * _2871.x) + _2829;
                        _2762 = (_2923 * _2871.y) + _2830;
                        _2763 = (_2923 * _2871.z) + _2831;
                        _2758 = (_3004 * _2888.x) + _2826;
                        _2759 = (_3004 * _2888.y) + _2827;
                        _2760 = (_3004 * _2888.z) + _2828;
                        if (_2833 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2826 = _2758;
                            _2827 = _2759;
                            _2828 = _2760;
                            _2829 = _2761;
                            _2830 = _2762;
                            _2831 = _2763;
                            _2832 = _2833;
                        }
                    }
                    frontier_phi_61_pred = _2758;
                    frontier_phi_61_pred_1 = _2763;
                    frontier_phi_61_pred_2 = _2762;
                    frontier_phi_61_pred_3 = _2761;
                    frontier_phi_61_pred_4 = _2760;
                    frontier_phi_61_pred_5 = _2759;
                }
                _2549 = frontier_phi_61_pred;
                _2559 = frontier_phi_61_pred_1;
                _2557 = frontier_phi_61_pred_2;
                _2555 = frontier_phi_61_pred_3;
                _2553 = frontier_phi_61_pred_4;
                _2551 = frontier_phi_61_pred_5;
                uint _2709 = _2708 + 1u;
                if (_2709 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2702 = _2549;
                    _2703 = _2551;
                    _2704 = _2553;
                    _2705 = _2555;
                    _2706 = _2557;
                    _2707 = _2559;
                    _2708 = _2709;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2548 = _2549;
            _2550 = _2551;
            _2552 = _2553;
            _2554 = _2555;
            _2556 = _2557;
            _2558 = _2559;
        }
        uvec4 _2562 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2563 = _2562.z;
        uint _2565 = (_2563 >> 8u) & 15u;
        float _2670;
        float _2672;
        float _2674;
        float _2676;
        float _2678;
        float _2680;
        if (((4294967295u << _2565) & _2418) == 0u)
        {
            _2670 = _2548;
            _2672 = _2550;
            _2674 = _2552;
            _2676 = _2554;
            _2678 = _2556;
            _2680 = _2558;
        }
        else
        {
            float _2695 = inversesqrt(dot(vec3(_2372, _2373, _2374), vec3(_2372, _2373, _2374)));
            float _2696 = _2695 * _2372;
            float _2697 = _2695 * _2373;
            float _2698 = _2695 * _2374;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2565 < ((_2563 >> 12u) & 15u))
            {
                float _2671;
                float _2673;
                float _2675;
                float _2677;
                float _2679;
                float _2681;
                float _2809 = _2548;
                float _2810 = _2550;
                float _2811 = _2552;
                float _2812 = _2554;
                float _2813 = _2556;
                float _2814 = _2558;
                uint _2815 = _2565;
                uint _2824;
                bool _2825;
                for (;;)
                {
                    _2824 = texelFetch(g_lightClassification, int((((_2412 << 5u) + (_2398 << 9u)) + (_2815 << 2u)) >> 2u)).x;
                    _2825 = _2824 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2825)
                    {
                        frontier_phi_67_pred = _2812;
                        frontier_phi_67_pred_1 = _2813;
                        frontier_phi_67_pred_2 = _2814;
                        frontier_phi_67_pred_3 = _2811;
                        frontier_phi_67_pred_4 = _2810;
                        frontier_phi_67_pred_5 = _2809;
                    }
                    else
                    {
                        float _3009;
                        float _3010;
                        float _3011;
                        float _3012;
                        float _3013;
                        float _3014;
                        float _3304;
                        float _3305;
                        float _3306;
                        float _3307;
                        float _3308;
                        float _3309;
                        float _3022 = _2809;
                        float _3023 = _2810;
                        float _3024 = _2811;
                        float _3025 = _2812;
                        float _3026 = _2813;
                        float _3027 = _2814;
                        uint _3028 = _2824;
                        uint _3029;
                        vec4 _3054;
                        float _3055;
                        vec4 _3070;
                        vec3 _3082;
                        vec4 _3097;
                        vec4 _3113;
                        float _3160;
                        bool _3161;
                        for (;;)
                        {
                            uint _3039 = ((_2815 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3028));
                            _3029 = (_3028 + 4294967295u) & _3028;
                            uint _3041 = _3039 * 40u;
                            _3054 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3041)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 3u)).x));
                            _3055 = _3054.w;
                            uint _3057 = (_3039 * 40u) + 4u;
                            _3070 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3057)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 3u)).x));
                            uint _3072 = (_3039 * 40u) + 8u;
                            _3082 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 2u)).x));
                            uint _3084 = (_3039 * 40u) + 16u;
                            _3097 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3084)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 3u)).x));
                            uint _3100 = (_3039 * 40u) + 20u;
                            _3113 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 3u)).x));
                            uint _3116 = (_3039 * 40u) + 24u;
                            vec4 _3129 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 3u)).x));
                            uint _3135 = (_3039 * 40u) + 28u;
                            vec4 _3148 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3135)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 3u)).x));
                            _3160 = fma(_2374, _3148.z, fma(_2373, _3148.y, _3148.x * _2372)) + _3148.w;
                            _3161 = !((fma(_2374, _3129.z, fma(_2373, _3129.y, _3129.x * _2372)) + _3129.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3161)
                            {
                                float _3188 = _3054.x - _2372;
                                float _3189 = _3054.y - _2373;
                                float _3190 = _3054.z - _2374;
                                float _3191 = dot(vec3(_3188, _3189, _3190), vec3(_3188, _3189, _3190));
                                float _3194 = inversesqrt(_3191);
                                float _3195 = _3194 * _3188;
                                float _3196 = _3194 * _3189;
                                float _3197 = _3194 * _3190;
                                float _3201 = 1.0 - (_3191 / (_3055 * _3055));
                                float _4281 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                                float _3202 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
                                float _3206 = sqrt(_3191) * _3070.w;
                                float _3208 = 1.39999997615814208984375 / (_3206 + 1.39999997615814208984375);
                                float _3209 = _3208 * _3208;
                                float _3212 = ((1.0 - _3209) * dot(vec3(_3195, _3196, _3197), vec3(_635, _638, _641))) + _3209;
                                float _3215 = _3206 * _3206;
                                float _3219 = (fma(_2374, _3097.z, fma(_2373, _3097.y, _3097.x * _2372)) + _3097.w) / _3160;
                                float _3220 = (fma(_2374, _3113.z, fma(_2373, _3113.y, _3113.x * _2372)) + _3113.w) / _3160;
                                float _3224 = 1.0 - dot(vec2(_3219, _3220), vec2(_3219, _3220));
                                float _4297 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                                float _3225 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
                                float _3226 = _3225 * (((isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0))) * _3202) / ((_3215 * 0.699999988079071044921875) + 1.0));
                                float _3238 = exp2(log2(1.0 / ((_3215 * 3.5) + 5.0)) * 0.25);
                                float _3239 = 1.0 - _710;
                                float _3246 = sqrt(1.0 - ((1.0 - (_3239 * _3239)) * (1.0 - (_3238 * _3238))));
                                float _3247 = _3246 * _3246;
                                float _3248 = _3247 * _3247;
                                float _3249 = _3195 - _2696;
                                float _3250 = _3196 - _2697;
                                float _3251 = _3197 - _2698;
                                float _3255 = inversesqrt(dot(vec3(_3249, _3250, _3251), vec3(_3249, _3250, _3251)));
                                float _3259 = dot(vec3(_635, _638, _641), vec3((-0.0) - _2696, (-0.0) - _2697, (-0.0) - _2698));
                                float _4308 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                                float _3262 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
                                float _3263 = dot(vec3(_635, _638, _641), vec3(_3255 * _3249, _3255 * _3250, _3255 * _3251));
                                float _4319 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                                float _3266 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                                float _3270 = ((_3266 * _3266) * (_3248 + (-1.0))) + 1.0;
                                float _3271 = _3208 * _3247;
                                float _3272 = _3271 * _3271;
                                float _3278 = ((1.0 - _3272) * dot(vec3(_635, _638, _641), vec3(_3195, _3196, _3197))) + _3272;
                                float _4330 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                                float _3279 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
                                float _3280 = 1.0 - _3247;
                                float _3290 = (0.5 / (((_3279 * ((_3262 * _3280) + _3247)) + 9.9999999392252902907785028219223e-09) + (((_3279 * _3280) + _3247) * _3262))) * _3279;
                                float _4341 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                                float _3300 = (_3225 * _3202) * (((_3248 * 3.1415927410125732421875) * (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0)))) / ((_3270 * _3270) * ((_3215 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3300 * _3082.x;
                                frontier_phi_73_pred_1 = _3300 * _3082.y;
                                frontier_phi_73_pred_2 = _3226 * _3070.z;
                                frontier_phi_73_pred_3 = _3226 * _3070.y;
                                frontier_phi_73_pred_4 = _3226 * _3070.x;
                                frontier_phi_73_pred_5 = _3300 * _3082.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3304 = frontier_phi_73_pred;
                            _3305 = frontier_phi_73_pred_1;
                            _3309 = frontier_phi_73_pred_2;
                            _3308 = frontier_phi_73_pred_3;
                            _3307 = frontier_phi_73_pred_4;
                            _3306 = frontier_phi_73_pred_5;
                            _3012 = _3307 + _3025;
                            _3013 = _3308 + _3026;
                            _3014 = _3309 + _3027;
                            _3009 = _3304 + _3022;
                            _3010 = _3305 + _3023;
                            _3011 = _3306 + _3024;
                            if (_3029 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3022 = _3009;
                                _3023 = _3010;
                                _3024 = _3011;
                                _3025 = _3012;
                                _3026 = _3013;
                                _3027 = _3014;
                                _3028 = _3029;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3012;
                        frontier_phi_67_pred_1 = _3013;
                        frontier_phi_67_pred_2 = _3014;
                        frontier_phi_67_pred_3 = _3011;
                        frontier_phi_67_pred_4 = _3010;
                        frontier_phi_67_pred_5 = _3009;
                    }
                    _2677 = frontier_phi_67_pred;
                    _2679 = frontier_phi_67_pred_1;
                    _2681 = frontier_phi_67_pred_2;
                    _2675 = frontier_phi_67_pred_3;
                    _2673 = frontier_phi_67_pred_4;
                    _2671 = frontier_phi_67_pred_5;
                    uint _2816 = _2815 + 1u;
                    if (_2816 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2809 = _2671;
                        _2810 = _2673;
                        _2811 = _2675;
                        _2812 = _2677;
                        _2813 = _2679;
                        _2814 = _2681;
                        _2815 = _2816;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2679;
                frontier_phi_55_56_ladder_1 = _2681;
                frontier_phi_55_56_ladder_2 = _2677;
                frontier_phi_55_56_ladder_3 = _2675;
                frontier_phi_55_56_ladder_4 = _2673;
                frontier_phi_55_56_ladder_5 = _2671;
            }
            else
            {
                frontier_phi_55_56_ladder = _2556;
                frontier_phi_55_56_ladder_1 = _2558;
                frontier_phi_55_56_ladder_2 = _2554;
                frontier_phi_55_56_ladder_3 = _2552;
                frontier_phi_55_56_ladder_4 = _2550;
                frontier_phi_55_56_ladder_5 = _2548;
            }
            _2670 = frontier_phi_55_56_ladder_5;
            _2672 = frontier_phi_55_56_ladder_4;
            _2674 = frontier_phi_55_56_ladder_3;
            _2676 = frontier_phi_55_56_ladder_2;
            _2678 = frontier_phi_55_56_ladder;
            _2680 = frontier_phi_55_56_ladder_1;
        }
        float _2685 = isnan(1.0) ? _694 : (isnan(_694) ? 1.0 : min(_694, 1.0));
        _2431 = (_2685 * _2676) + _1867;
        _2433 = (_2685 * _2678) + _1869;
        _2435 = (_2685 * _2680) + _1871;
        _2437 = ((_2670 * _679) * _2685) + _2212;
        _2439 = ((_2672 * _681) * _2685) + _2214;
        _2441 = ((_2674 * _682) * _2685) + _2216;
    }
    else
    {
        _2431 = _1867;
        _2433 = _1869;
        _2435 = _1871;
        _2437 = _2212;
        _2439 = _2214;
        _2441 = _2216;
    }
    uint _2447 = _655 + uint(cbMatDynParam._m0[0u].w);
    float _2453 = cbInstanceData._m0[_2447].x * (_445 - (_461 * _445));
    float _2454 = cbInstanceData._m0[_2447].y * (_446 - (_461 * _446));
    float _2455 = cbInstanceData._m0[_2447].z * (_447 - (_461 * _447));
    float _4357 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _4368 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _4379 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _2472 = (((isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_2431 + ((isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0))) * _694))) + ((_2437 + ((isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))) * _1504)) * cbPerFrame._m0[3u].x)) + _2453;
    float _2474 = (_2454 + ((_2439 + ((isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))) * _1504)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_2433 + ((isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0))) * _694)));
    float _2476 = (_2455 + ((_2441 + ((isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))) * _1504)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * (_2435 + ((isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))) * _694)));
    float _4405 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2489 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
    uint _2490 = _654 + 6u;
    float _2498 = _614 / cbSceneParam._m0[86u].x;
    float _2499 = _615 / cbSceneParam._m0[86u].y;
    vec4 _2513 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2498, _2499, (log2((isnan(cbSceneParam._m0[77u].w) ? _549 : (isnan(_549) ? cbSceneParam._m0[77u].w : min(_549, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2515 = _2513.x;
    float _2516 = _2513.y;
    float _2517 = _2513.z;
    float _2518 = _2513.w;
    float _2611;
    float _2613;
    float _2615;
    float _2617;
    if (_549 > cbSceneParam._m0[78u].w)
    {
        float _2573 = isnan(_549) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _549 : min(cbSceneParam._m0[80u].w, _549));
        float _2574 = _2573 / _549;
        float _2585 = _2574 * _599;
        float _2586 = _600 * _2574;
        float _2587 = (-0.0) - _2586;
        float _2589 = _2574 * _601;
        float _2591 = (cbSceneParam._m0[77u].w * _2587) / _2573;
        float _2592 = _2591 + cbSceneParam._m0[79u].w;
        float _2593 = cbSceneParam._m0[79u].w - _2586;
        float _2599 = sqrt(((_2585 * _2585) + (_2586 * _2586)) + (_2589 * _2589));
        float _2602 = (1.0 - (cbSceneParam._m0[77u].w / _2573)) * _2599;
        float _2607 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2609 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2771;
        if (abs((_2587 - _2591) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2771 = ((((_2592 > 0.0) ? exp2(_2607 * _2592) : (2.0 - exp2(_2609 * _2592))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2602;
        }
        else
        {
            float _2731 = 1.0 / cbSceneParam._m0[80u].x;
            float _2732 = isnan(_2593) ? _2592 : (isnan(_2592) ? _2593 : max(_2592, _2593));
            float _2733 = isnan(_2593) ? _2592 : (isnan(_2592) ? _2593 : min(_2592, _2593));
            float _2742 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : min(_2732, 0.0));
            float _2743 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : min(_2733, 0.0));
            _2771 = ((abs(_2599 / _2587) * cbSceneParam._m0[80u].y) * ((((_2742 - _2743) * 2.0) - ((exp2(_2607 * (isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0)))) - exp2(_2607 * (isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0))))) * _2731)) - ((exp2(_2609 * _2742) - exp2(_2609 * _2743)) * _2731))) + (_2602 * cbSceneParam._m0[80u].z);
        }
        vec4 _2773 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2498, _2499, 1.0), 0.0);
        float _2782 = exp2((_2771 * (-1.44269502162933349609375)) * (1.0 - _2773.w));
        float _2783 = log2(_2782);
        float _2799 = log2(_2518);
        _2611 = (exp2(_2799 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2783 * cbSceneParam._m0[78u].x)) * _2773.x) / cbSceneParam._m0[78u].x)) + _2515;
        _2613 = (exp2(_2799 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2783 * cbSceneParam._m0[78u].y)) * _2773.y) / cbSceneParam._m0[78u].y)) + _2516;
        _2615 = (exp2(_2799 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2783 * cbSceneParam._m0[78u].z)) * _2773.z) / cbSceneParam._m0[78u].z)) + _2517;
        _2617 = _2782 * _2518;
    }
    else
    {
        _2611 = _2515;
        _2613 = _2516;
        _2615 = _2517;
        _2617 = _2518;
    }
    float _2629 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2630 = _2629 == 3.0;
    float _2631 = log2(_2617);
    float _2635 = exp2(_2631 * cbSceneParam._m0[78u].x);
    float _2636 = exp2(_2631 * cbSceneParam._m0[78u].y);
    float _2637 = exp2(_2631 * cbSceneParam._m0[78u].z);
    float _2638 = _2635 * (isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0)));
    float _2639 = _2636 * (isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0)));
    float _2640 = _2637 * (isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0)));
    float _2649 = (_2629 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2649 * (_2630 ? _2638 : (_2638 + (cbSceneParam._m0[72u].w * _2611)));
    SV_Target.y = _2649 * (_2630 ? _2639 : (_2639 + (cbSceneParam._m0[72u].w * _2613)));
    SV_Target.z = _2649 * (_2630 ? _2640 : (_2640 + (cbSceneParam._m0[72u].w * _2615)));
    SV_Target.w = cbInstanceData._m0[_2490].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2453) * _2489) * _2635) * _2649;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2454) * _2489) * _2636) * _2649;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2455) * _2489) * _2637) * _2649;
    SV_Target_1.w = cbInstanceData._m0[_2490].w;
}


