#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1186;
float _3870;
float _3871;
float _3872;
float _3873;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _257 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _263 = _257.x * cbMtdParam._m0[9u].x;
    float _264 = _257.y * cbMtdParam._m0[9u].y;
    float _265 = _257.z * cbMtdParam._m0[9u].z;
    vec4 _303 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _319 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3882 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _320 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _327 = (((_303.x * cbMtdParam._m0[10u].x) - _263) * _320) + _263;
    float _328 = (((_303.y * cbMtdParam._m0[10u].y) - _264) * _320) + _264;
    float _329 = (((_303.z * cbMtdParam._m0[10u].z) - _265) * _320) + _265;
    vec4 _349 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _368 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_349.x + 0.00999999977648258209228515625));
    float _370 = _368 * (cbMtdParam._m0[15u].x + 1.0);
    float _3893 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _371 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _379 = ((((cbMtdParam._m0[12u].x - _327) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _371) + _327;
    float _380 = ((((cbMtdParam._m0[12u].y - _328) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _371) + _328;
    float _381 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _329)) * _371) + _329;
    vec4 _394 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _402 = (_394.x * 2.0) + (-1.0);
    float _404 = (_394.y * 2.0) + (-1.0);
    float _405 = dot(vec2(_402, _404), vec2(_402, _404));
    float _3904 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    vec4 _422 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _426 = _422.z;
    float _429 = (_422.x * 2.0) + (-1.0);
    float _430 = (_422.y * 2.0) + (-1.0);
    float _431 = dot(vec2(_429, _430), vec2(_429, _430));
    float _3915 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _436 = sqrt(1.0 - (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))));
    float _439 = (_320 * (_394.z - _426)) + _426;
    float _442 = _368 * (cbMtdParam._m0[14u].w + 1.0);
    float _3926 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _446 = ((cbMtdParam._m0[14u].y - _439) * (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0)))) + _439;
    vec4 _473 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _488 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _530 = (TEXCOORD_6.x - ((cbMtdParam._m0[13u].w * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_5, SS_WrapLinear), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].x + 1.0);
    float _3937 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _531 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _532 = ((_488.x + _473.x) * cbMtdParam._m0[11u].x) * _531;
    float _533 = ((_488.y + _473.y) * cbMtdParam._m0[11u].y) * _531;
    float _534 = ((_488.z + _473.z) * cbMtdParam._m0[11u].z) * _531;
    vec4 _546 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[9u].w));
    float _548 = _546.x;
    float _561 = (_320 * (_402 - _429)) + _429;
    float _562 = (_320 * (_404 - _430)) + _430;
    float _563 = (_320 * (sqrt(1.0 - (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) - _436)) + _436;
    vec4 _582 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _588 = (_582.x * 2.0) + (-1.0);
    float _589 = (_582.y * 2.0) + (-1.0);
    float _590 = dot(vec2(_588, _589), vec2(_588, _589));
    float _3948 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _606 = (_371 * (((_561 * cbMtdParam._m0[13u].z) - _561) + _588)) + _561;
    float _607 = (_371 * (((_562 * cbMtdParam._m0[13u].z) - _562) + _589)) + _562;
    float _608 = (_371 * (sqrt(1.0 - (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0)))) - _563)) + _563;
    float _611 = fma(_608, _228 * NORMAL.x, fma(_607, _235 * TANGENT.x, (_221 * _213) * _606));
    float _614 = fma(_608, _228 * NORMAL.y, fma(_607, _235 * TANGENT.y, (_221 * _214) * _606));
    float _617 = fma(_608, _228 * NORMAL.z, fma(_607, _235 * TANGENT.z, (_221 * _215) * _606));
    float _621 = inversesqrt(dot(vec3(_611, _614, _617), vec3(_611, _614, _617)));
    float _622 = _621 * _611;
    float _623 = _621 * _614;
    float _624 = _621 * _617;
    float _3959 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _625 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _3970 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _3981 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _3992 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _644 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _684 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _694 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _684);
    float _695 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _684);
    float _696 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _684);
    float _700 = inversesqrt(dot(vec3(_694, _695, _696), vec3(_694, _695, _696)));
    float _701 = _694 * _700;
    float _702 = _695 * _700;
    float _703 = _696 * _700;
    vec4 _708 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _710 = _708.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _866 = sqrt(((_694 * _694) + (_695 * _695)) + (_696 * _696));
        float _872 = (cbMatDynParam._m0[5u].x * _866) + cbMatDynParam._m0[5u].y;
        float _4003 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _873 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _877 = (cbMatDynParam._m0[5u].z * _866) + cbMatDynParam._m0[5u].w;
        float _4014 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) - _873)) + _873) < ((_710 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _722 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _723 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _742 = fma(_624, cbSceneParam._m0[5u].z, fma(_623, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _622));
    float _745 = fma(_624, cbSceneParam._m0[6u].z, fma(_623, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _622));
    float _748 = fma(_624, cbSceneParam._m0[7u].z, fma(_623, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _622));
    uint _761 = uint(roundEven(NORMAL.w)) * 13u;
    uint _762 = _761 + 9u;
    uint _763 = _762 + uint(cbMatDynParam._m0[0u].w);
    float _769 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0)))) * cbInstanceData._m0[_763].x;
    float _770 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0)))) * cbInstanceData._m0[_763].y;
    float _771 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) * cbInstanceData._m0[_763].z;
    float _4025 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _772 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _4036 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _773 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _4047 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _774 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    vec4 _783 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _722, cbSceneParam._m0[86u].y * _723));
    float _786 = _783.x * TEXCOORD_3.w;
    float _787 = dot(vec3(_622, _623, _624), vec3(_701, _702, _703));
    float _790 = _787 * 2.0;
    float _794 = (_790 * _622) - _701;
    float _795 = (_790 * _623) - _702;
    float _796 = (_790 * _624) - _703;
    float _800 = abs(dot(vec3(_701, _702, _703), vec3(_622, _623, _624)));
    float _4058 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _802 = sqrt(_625);
    float _815 = exp2((_802 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_802 * 3.0));
    float _847 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _851 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _855 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1185;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _910 = fma(_855, cbModelParam._m0[26u].z, fma(_851, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _847));
        float _914 = fma(_855, cbModelParam._m0[27u].z, fma(_851, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _847));
        float _918 = fma(_855, cbModelParam._m0[28u].z, fma(_851, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _847));
        float _943 = _847 + _622;
        float _944 = _851 + _623;
        float _945 = _855 + _624;
        float _955 = fma(_945, cbModelParam._m0[26u].z, fma(_944, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _943)) - _910;
        float _956 = fma(_945, cbModelParam._m0[27u].z, fma(_944, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _943)) - _914;
        float _957 = fma(_945, cbModelParam._m0[28u].z, fma(_944, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _943)) - _918;
        float _961 = inversesqrt(dot(vec3(_955, _956, _957), vec3(_955, _956, _957)));
        float _974 = ((_961 * _955) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_910 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _975 = ((_961 * _956) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_914 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _976 = ((_961 * _957) / cbModelParam._m0[34u].z) + ((((((_918 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_974, _975, _976), 0.0);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_974, _975, _976), 0.0);
        vec4 _993 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_974, _975, _976), 0.0);
        vec4 _1000 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_974, _975, _976), 0.0);
        float _1013 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_979.x + (-0.5));
        float _1015 = _1013 * (_979.y + (-0.5));
        float _1016 = _1013 * (_979.z + (-0.5));
        float _1023 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_986.x + (-0.5));
        float _1025 = _1023 * (_986.y + (-0.5));
        float _1026 = _1023 * (_986.z + (-0.5));
        float _1033 = exp2((_993.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_993.x + (-0.5));
        float _1035 = _1033 * (_993.y + (-0.5));
        float _1036 = _1033 * (_993.z + (-0.5));
        float _1043 = exp2((_1000.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1000.x + (-0.5));
        float _1045 = _1043 * (_1000.y + (-0.5));
        float _1046 = _1043 * (_1000.z + (-0.5));
        float _1047 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1048 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1049 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1050 = _1014 * 0.5;
        float _1051 = _1024 * 0.5;
        float _1052 = _1034 * 0.5;
        float _1053 = dot(vec3(_1050, _1051, _1052), vec3(_1050, _1051, _1052));
        float _1058 = (_1053 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1053);
        float _1067 = (dot(vec3(_622, _623, _624), vec3(_1058 * _1050, _1058 * _1051, _1058 * _1052)) + 1.0) * 0.5;
        float _4084 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1077 = sqrt(((_1051 * _1051) + (_1050 * _1050)) + (_1052 * _1052)) / (_1047 + 9.9999997473787516355514526367188e-06);
        float _4095 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1079 = _1078 * 2.0;
        float _1083 = (1.0 - _1078) / (_1078 + 1.0);
        float _4106 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1093 = ((((1.0 - _1084) * (_1079 + 2.0)) * exp2(log2(isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_1079 + 1.0))) + _1084) * _1047;
        float _1094 = _1015 * 0.5;
        float _1095 = _1025 * 0.5;
        float _1096 = _1035 * 0.5;
        float _1097 = dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096));
        float _1102 = (_1097 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1097);
        float _1110 = (dot(vec3(_622, _623, _624), vec3(_1102 * _1094, _1102 * _1095, _1102 * _1096)) + 1.0) * 0.5;
        float _4117 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1119 = sqrt(((_1095 * _1095) + (_1094 * _1094)) + (_1096 * _1096)) / (_1048 + 9.9999997473787516355514526367188e-06);
        float _4128 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1121 = _1120 * 2.0;
        float _1125 = (1.0 - _1120) / (_1120 + 1.0);
        float _4139 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1135 = ((((1.0 - _1126) * (_1121 + 2.0)) * exp2(log2(isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_1121 + 1.0))) + _1126) * _1048;
        float _1136 = _1016 * 0.5;
        float _1137 = _1026 * 0.5;
        float _1138 = _1036 * 0.5;
        float _1139 = dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138));
        float _1144 = (_1139 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1139);
        float _1152 = (dot(vec3(_622, _623, _624), vec3(_1144 * _1136, _1144 * _1137, _1144 * _1138)) + 1.0) * 0.5;
        float _4150 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1161 = sqrt(((_1137 * _1137) + (_1136 * _1136)) + (_1138 * _1138)) / (_1049 + 9.9999997473787516355514526367188e-06);
        float _4161 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1163 = _1162 * 2.0;
        float _1167 = (1.0 - _1162) / (_1162 + 1.0);
        float _4172 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1177 = ((((1.0 - _1168) * (_1163 + 2.0)) * exp2(log2(isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1163 + 1.0))) + _1168) * _1049;
        _1185 = _1016;
        _1187 = _1015;
        _1188 = _1014;
        _1189 = _1026;
        _1190 = _1025;
        _1191 = _1024;
        _1192 = _1036;
        _1193 = _1035;
        _1194 = _1034;
        _1195 = _1049;
        _1196 = _1048;
        _1197 = _1047;
        _1198 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0)));
        _1199 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)));
        _1200 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)));
    }
    else
    {
        _1185 = _1186;
        _1187 = _1186;
        _1188 = _1186;
        _1189 = _1186;
        _1190 = _1186;
        _1191 = _1186;
        _1192 = _1186;
        _1193 = _1186;
        _1194 = _1186;
        _1195 = _1186;
        _1196 = _1186;
        _1197 = _1186;
        _1198 = 0.0;
        _1199 = 0.0;
        _1200 = 0.0;
    }
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1229 = fma(_855, cbModelParam._m0[30u].z, fma(_851, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _847));
        float _1233 = fma(_855, cbModelParam._m0[31u].z, fma(_851, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _847));
        float _1237 = fma(_855, cbModelParam._m0[32u].z, fma(_851, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _847));
        float _1260 = _847 + _622;
        float _1261 = _851 + _623;
        float _1262 = _855 + _624;
        float _1272 = fma(_1262, cbModelParam._m0[30u].z, fma(_1261, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1260)) - _1229;
        float _1273 = fma(_1262, cbModelParam._m0[31u].z, fma(_1261, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1260)) - _1233;
        float _1274 = fma(_1262, cbModelParam._m0[32u].z, fma(_1261, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1260)) - _1237;
        float _1278 = inversesqrt(dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274)));
        float _1291 = ((_1278 * _1272) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1229 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1292 = ((_1278 * _1273) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1233 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1293 = ((_1278 * _1274) / cbModelParam._m0[35u].z) + ((((((_1237 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        float _1328 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1295.x + (-0.5));
        float _1330 = _1328 * (_1295.y + (-0.5));
        float _1331 = _1328 * (_1295.z + (-0.5));
        float _1338 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1339 = _1338 * (_1302.x + (-0.5));
        float _1340 = _1338 * (_1302.y + (-0.5));
        float _1341 = _1338 * (_1302.z + (-0.5));
        float _1348 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1349 = _1348 * (_1309.x + (-0.5));
        float _1350 = _1348 * (_1309.y + (-0.5));
        float _1351 = _1348 * (_1309.z + (-0.5));
        float _1358 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1316.x + (-0.5));
        float _1360 = _1358 * (_1316.y + (-0.5));
        float _1361 = _1358 * (_1316.z + (-0.5));
        float _1362 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1363 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1364 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1365 = _1329 * 0.5;
        float _1366 = _1339 * 0.5;
        float _1367 = _1349 * 0.5;
        float _1368 = dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367));
        float _1373 = (_1368 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1368);
        float _1381 = (dot(vec3(_622, _623, _624), vec3(_1373 * _1365, _1373 * _1366, _1373 * _1367)) + 1.0) * 0.5;
        float _4213 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1390 = sqrt(((_1366 * _1366) + (_1365 * _1365)) + (_1367 * _1367)) / (_1362 + 9.9999997473787516355514526367188e-06);
        float _4224 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1392 = _1391 * 2.0;
        float _1396 = (1.0 - _1391) / (_1391 + 1.0);
        float _4235 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1406 = ((((1.0 - _1397) * (_1392 + 2.0)) * exp2(log2(isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_1392 + 1.0))) + _1397) * _1362;
        float _1407 = _1330 * 0.5;
        float _1408 = _1340 * 0.5;
        float _1409 = _1350 * 0.5;
        float _1410 = dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409));
        float _1415 = (_1410 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1410);
        float _1423 = (dot(vec3(_622, _623, _624), vec3(_1415 * _1407, _1415 * _1408, _1415 * _1409)) + 1.0) * 0.5;
        float _4246 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1432 = sqrt(((_1408 * _1408) + (_1407 * _1407)) + (_1409 * _1409)) / (_1363 + 9.9999997473787516355514526367188e-06);
        float _4257 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1434 = _1433 * 2.0;
        float _1438 = (1.0 - _1433) / (_1433 + 1.0);
        float _4268 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _1448 = ((((1.0 - _1439) * (_1434 + 2.0)) * exp2(log2(isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_1434 + 1.0))) + _1439) * _1363;
        float _1449 = _1331 * 0.5;
        float _1450 = _1341 * 0.5;
        float _1451 = _1351 * 0.5;
        float _1452 = dot(vec3(_1449, _1450, _1451), vec3(_1449, _1450, _1451));
        float _1457 = (_1452 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1452);
        float _1465 = (dot(vec3(_622, _623, _624), vec3(_1457 * _1449, _1457 * _1450, _1457 * _1451)) + 1.0) * 0.5;
        float _4279 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1474 = sqrt(((_1450 * _1450) + (_1449 * _1449)) + (_1451 * _1451)) / (_1364 + 9.9999997473787516355514526367188e-06);
        float _4290 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1476 = _1475 * 2.0;
        float _1480 = (1.0 - _1475) / (_1475 + 1.0);
        float _4301 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1490 = ((((1.0 - _1481) * (_1476 + 2.0)) * exp2(log2(isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_1476 + 1.0))) + _1481) * _1364;
        _1498 = _1331;
        _1499 = _1330;
        _1500 = _1329;
        _1501 = _1341;
        _1502 = _1340;
        _1503 = _1339;
        _1504 = _1351;
        _1505 = _1350;
        _1506 = _1349;
        _1507 = _1364;
        _1508 = _1363;
        _1509 = _1362;
        _1510 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)));
        _1511 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)));
        _1512 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)));
    }
    else
    {
        _1498 = _1186;
        _1499 = _1186;
        _1500 = _1186;
        _1501 = _1186;
        _1502 = _1186;
        _1503 = _1186;
        _1504 = _1186;
        _1505 = _1186;
        _1506 = _1186;
        _1507 = _1186;
        _1508 = _1186;
        _1509 = _1186;
        _1510 = 0.0;
        _1511 = 0.0;
        _1512 = 0.0;
    }
    float _1522 = (cbModelParam._m0[1u].x * (_1510 - _1198)) + _1198;
    float _1523 = (cbModelParam._m0[1u].x * (_1511 - _1199)) + _1199;
    float _1524 = (cbModelParam._m0[1u].x * (_1512 - _1200)) + _1200;
    float _1545 = fma(_1524, cbSceneParam._m0[89u].z, fma(_1523, cbSceneParam._m0[89u].y, _1522 * cbSceneParam._m0[89u].x));
    float _1548 = fma(_1524, cbSceneParam._m0[90u].z, fma(_1523, cbSceneParam._m0[90u].y, _1522 * cbSceneParam._m0[90u].x));
    float _1551 = fma(_1524, cbSceneParam._m0[91u].z, fma(_1523, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1522));
    float _1566 = _794 * 0.5;
    float _1567 = _795 * 0.5;
    float _1568 = _796 * 0.5;
    float _1569 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1500, _1503, _1506, _1509));
    float _1572 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1499, _1502, _1505, _1508));
    float _1575 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1498, _1501, _1504, _1507));
    float _1609;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1582 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1185, _1189, _1192, _1195));
        float _1586 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1187, _1190, _1193, _1196));
        float _1590 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1188, _1191, _1194, _1197));
        float _1597 = dot(vec4(cbModelParam._m0[39u]), vec4(_1566, _1567, _1568, 1.0));
        _1609 = dot(vec3(isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)), isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)), isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1597) ? 0.0 : (isnan(0.0) ? _1597 : max(0.0, _1597))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1609 = 1.0;
    }
    float _1620;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1611 = dot(vec4(cbModelParam._m0[40u]), vec4(_1566, _1567, _1568, 1.0));
        _1620 = dot(vec3(isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)), isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)), isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1611) ? 0.0 : (isnan(0.0) ? _1611 : max(0.0, _1611))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1620 = 1.0;
    }
    float _1624 = (_1620 * cbModelParam._m0[1u].x) + (_1609 * (1.0 - cbModelParam._m0[1u].x));
    float _1634 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _625);
    float _1635 = isnan(_1634) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1634 : min(cbModelParam._m0[25u].z, _1634));
    float _1715;
    float _1717;
    float _1719;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1682 = fma(_855, cbModelParam._m0[13u].z, fma(_851, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _847)) + cbModelParam._m0[13u].w;
        float _1686 = fma(_855, cbModelParam._m0[14u].z, fma(_851, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _847)) + cbModelParam._m0[14u].w;
        float _1690 = fma(_855, cbModelParam._m0[15u].z, fma(_851, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _847)) + cbModelParam._m0[15u].w;
        float _1693 = fma(_796, cbModelParam._m0[13u].z, fma(_795, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _794));
        float _1696 = fma(_796, cbModelParam._m0[14u].z, fma(_795, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _794));
        float _1699 = fma(_796, cbModelParam._m0[15u].z, fma(_795, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _794));
        float _1727;
        if (_1693 > 0.0)
        {
            _1727 = abs((1.0 - _1682) / _1693);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1693 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1682 + 1.0) / _1693);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1727 = frontier_phi_17_15_ladder;
        }
        float _1898;
        if (_1696 > 0.0)
        {
            _1898 = abs((1.0 - _1686) / _1696);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1696 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1686 + 1.0) / _1696);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1898 = frontier_phi_26_22_ladder;
        }
        float _2193;
        if (_1699 > 0.0)
        {
            _2193 = abs((1.0 - _1690) / _1699);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1699 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1690 + 1.0) / _1699);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2193 = frontier_phi_38_33_ladder;
        }
        float _2195 = isnan(_1898) ? _1727 : (isnan(_1727) ? _1898 : min(_1727, _1898));
        float _2196 = isnan(_2193) ? _2195 : (isnan(_2195) ? _2193 : min(_2195, _2193));
        float _2200 = (_2196 * _1693) + _1682;
        float _2201 = (_2196 * _1696) + _1686;
        float _2202 = (_2196 * _1699) + _1690;
        float _2203 = _2196 * 9.9999997473787516355514526367188e-05;
        float _2205 = (-1.0) - _2203;
        float _2207 = _2203 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2202 > _2207) || ((_2202 < _2205) || ((_2201 > _2207) || ((_2201 < _2205) || ((_2200 < _2205) || (_2200 > _2207))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2347 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2202, cbModelParam._m0[9u].z, fma(_2201, cbModelParam._m0[9u].y, _2200 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2202, cbModelParam._m0[10u].z, fma(_2201, cbModelParam._m0[10u].y, _2200 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2202, cbModelParam._m0[11u].z, fma(_2201, cbModelParam._m0[11u].y, _2200 * cbModelParam._m0[11u].x))), _1635);
            frontier_phi_16_38_ladder = _2347.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2347.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2347.x * cbModelParam._m0[1u].y;
        }
        _1715 = frontier_phi_16_38_ladder_2;
        _1717 = frontier_phi_16_38_ladder_1;
        _1719 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1703 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_794, _795, _796), _1635);
        _1715 = _1703.x * cbModelParam._m0[1u].y;
        _1717 = _1703.y * cbModelParam._m0[1u].y;
        _1719 = _1703.z * cbModelParam._m0[1u].y;
    }
    float _1723 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _625);
    float _1724 = isnan(_1723) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1723 : min(cbModelParam._m0[25u].w, _1723));
    float _1815;
    float _1817;
    float _1819;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1779 = fma(_855, cbModelParam._m0[21u].z, fma(_851, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _847)) + cbModelParam._m0[21u].w;
        float _1783 = fma(_855, cbModelParam._m0[22u].z, fma(_851, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _847)) + cbModelParam._m0[22u].w;
        float _1787 = fma(_855, cbModelParam._m0[23u].z, fma(_851, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _847)) + cbModelParam._m0[23u].w;
        float _1790 = fma(_796, cbModelParam._m0[21u].z, fma(_795, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _794));
        float _1793 = fma(_796, cbModelParam._m0[22u].z, fma(_795, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _794));
        float _1796 = fma(_796, cbModelParam._m0[23u].z, fma(_795, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _794));
        float _1903;
        if (_1790 > 0.0)
        {
            _1903 = abs((1.0 - _1779) / _1790);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1790 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1779 + 1.0) / _1790);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1903 = frontier_phi_28_24_ladder;
        }
        float _2220;
        if (_1793 > 0.0)
        {
            _2220 = abs((1.0 - _1783) / _1793);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1793 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1783 + 1.0) / _1793);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2220 = frontier_phi_40_35_ladder;
        }
        float _2547;
        if (_1796 > 0.0)
        {
            _2547 = abs((1.0 - _1787) / _1796);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1796 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1787 + 1.0) / _1796);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2547 = frontier_phi_50_47_ladder;
        }
        float _2549 = isnan(_2220) ? _1903 : (isnan(_1903) ? _2220 : min(_1903, _2220));
        float _2550 = isnan(_2547) ? _2549 : (isnan(_2549) ? _2547 : min(_2549, _2547));
        float _2554 = (_2550 * _1790) + _1779;
        float _2555 = (_2550 * _1793) + _1783;
        float _2556 = (_2550 * _1796) + _1787;
        float _2557 = _2550 * 9.9999997473787516355514526367188e-05;
        float _2558 = (-1.0) - _2557;
        float _2560 = _2557 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2556 > _2560) || ((_2556 < _2558) || ((_2555 > _2560) || ((_2555 < _2558) || ((_2554 < _2558) || (_2554 > _2560))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2674 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2556, cbModelParam._m0[17u].z, fma(_2555, cbModelParam._m0[17u].y, _2554 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2556, cbModelParam._m0[18u].z, fma(_2555, cbModelParam._m0[18u].y, _2554 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2556, cbModelParam._m0[19u].z, fma(_2555, cbModelParam._m0[19u].y, _2554 * cbModelParam._m0[19u].x))), _1724);
            frontier_phi_25_50_ladder = _2674.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2674.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2674.x * cbModelParam._m0[1u].z;
        }
        _1815 = frontier_phi_25_50_ladder_2;
        _1817 = frontier_phi_25_50_ladder_1;
        _1819 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1799 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_794, _795, _796), _1724);
        _1815 = _1799.x * cbModelParam._m0[1u].z;
        _1817 = _1799.y * cbModelParam._m0[1u].z;
        _1819 = _1799.z * cbModelParam._m0[1u].z;
    }
    float _1831 = ((((1.0 - _815) * ((_802 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_815 * _802)) * _786;
    float _1832 = _1831 * ((cbModelParam._m0[1u].w * (_1815 - _1715)) + _1715);
    float _1833 = _1831 * ((cbModelParam._m0[1u].w * (_1817 - _1717)) + _1717);
    float _1834 = _1831 * ((cbModelParam._m0[1u].w * (_1819 - _1719)) + _1719);
    float _1837 = fma(_1834, cbSceneParam._m0[89u].z, fma(_1833, cbSceneParam._m0[89u].y, _1832 * cbSceneParam._m0[89u].x));
    float _1840 = fma(_1834, cbSceneParam._m0[90u].z, fma(_1833, cbSceneParam._m0[90u].y, _1832 * cbSceneParam._m0[90u].x));
    float _1843 = fma(_1834, cbSceneParam._m0[91u].z, fma(_1833, cbSceneParam._m0[91u].y, _1832 * cbSceneParam._m0[91u].x));
    float _1877 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1881 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1885 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1889 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1890 = _1877 / _1889;
    float _1891 = _1881 / _1889;
    float _1892 = _1885 / _1889;
    float _2039;
    float _2040;
    float _2041;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1919 = ((uint(_1892 > cbSceneParam._m0[59u].y) + uint(_1892 > cbSceneParam._m0[59u].x)) + uint(_1892 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1920 = _1919 + 43u;
        uint _1928 = _1919 + 44u;
        uint _1936 = _1919 + 45u;
        uint _1944 = _1919 + 46u;
        float _1955 = fma(_1889, cbSceneParam._m0[_1920].w, fma(_1885, cbSceneParam._m0[_1920].z, fma(_1881, cbSceneParam._m0[_1920].y, _1877 * cbSceneParam._m0[_1920].x)));
        float _1959 = fma(_1889, cbSceneParam._m0[_1928].w, fma(_1885, cbSceneParam._m0[_1928].z, fma(_1881, cbSceneParam._m0[_1928].y, _1877 * cbSceneParam._m0[_1928].x)));
        float _1967 = fma(_1889, cbSceneParam._m0[_1944].w, fma(_1885, cbSceneParam._m0[_1944].z, fma(_1881, cbSceneParam._m0[_1944].y, _1877 * cbSceneParam._m0[_1944].x)));
        float _1972 = cbSceneParam._m0[33u].z * _1967;
        float _1974 = cbSceneParam._m0[33u].w * _1967;
        float _1977 = fma(_1889, cbSceneParam._m0[_1936].w, fma(_1885, cbSceneParam._m0[_1936].z, fma(_1881, cbSceneParam._m0[_1936].y, _1877 * cbSceneParam._m0[_1936].x))) / _1967;
        float _2025 = (cbSceneParam._m0[33u].x - sqrt(((_1891 * _1891) + (_1890 * _1890)) + (_1892 * _1892))) * cbSceneParam._m0[33u].y;
        float _4427 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
        float _2032 = (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1972 + _1955) / _1967, (_1974 + _1959) / _1967), _1977), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1974 + _1955) / _1967, (_1959 - _1972) / _1967), _1977), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1955 - _1972) / _1967, (_1959 - _1974) / _1967), _1977), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1955 - _1974) / _1967, (_1972 + _1959) / _1967), _1977), 0.0)).x), vec4(0.25)));
        _2039 = 1.0 - (_2032 * cbSceneParam._m0[34u].x);
        _2040 = 1.0 - (_2032 * cbSceneParam._m0[34u].y);
        _2041 = 1.0 - (_2032 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2039 = 1.0;
        _2040 = 1.0;
        _2041 = 1.0;
    }
    float _2105;
    float _2107;
    float _2109;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2093 = fma(_1889, cbSceneParam._m0[63u].w, fma(_1885, cbSceneParam._m0[63u].z, fma(_1881, cbSceneParam._m0[63u].y, _1877 * cbSceneParam._m0[63u].x)));
        float _2094 = fma(_1889, cbSceneParam._m0[60u].w, fma(_1885, cbSceneParam._m0[60u].z, fma(_1881, cbSceneParam._m0[60u].y, _1877 * cbSceneParam._m0[60u].x))) / _2093;
        float _2095 = fma(_1889, cbSceneParam._m0[61u].w, fma(_1885, cbSceneParam._m0[61u].z, fma(_1881, cbSceneParam._m0[61u].y, _1877 * cbSceneParam._m0[61u].x))) / _2093;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2094 >= cbSceneParam._m0[64u].x) && (_2095 >= cbSceneParam._m0[64u].y)) && (_2094 <= cbSceneParam._m0[64u].z)) && (_2095 <= cbSceneParam._m0[64u].w))
        {
            float _2233 = fma(_1889, cbSceneParam._m0[62u].w, fma(_1885, cbSceneParam._m0[62u].z, fma(_1881, cbSceneParam._m0[62u].y, _1877 * cbSceneParam._m0[62u].x))) / _2093;
            float _2237 = isnan(cbSceneParam._m0[41u].w) ? _2233 : (isnan(_2233) ? cbSceneParam._m0[41u].w : max(_2233, cbSceneParam._m0[41u].w));
            float _2280 = (cbSceneParam._m0[33u].x - sqrt(((_1891 * _1891) + (_1890 * _1890)) + (_1892 * _1892))) * cbSceneParam._m0[33u].y;
            float _4443 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
            float _2287 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2094, cbSceneParam._m0[33u].w + _2095), _2237), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2094, _2095 - cbSceneParam._m0[33u].z), _2237), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2094 - cbSceneParam._m0[33u].z, _2095 - cbSceneParam._m0[33u].w), _2237), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2094 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2095), _2237), 0.0)).x), vec4(0.25)));
            float _2291 = 1.0 - (_2287 * cbSceneParam._m0[34u].x);
            float _2292 = 1.0 - (_2287 * cbSceneParam._m0[34u].y);
            float _2293 = 1.0 - (_2287 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2293) ? _2041 : (isnan(_2041) ? _2293 : min(_2041, _2293));
            frontier_phi_37_36_ladder_1 = isnan(_2292) ? _2040 : (isnan(_2040) ? _2292 : min(_2040, _2292));
            frontier_phi_37_36_ladder_2 = isnan(_2291) ? _2039 : (isnan(_2039) ? _2291 : min(_2039, _2291));
        }
        else
        {
            frontier_phi_37_36_ladder = _2041;
            frontier_phi_37_36_ladder_1 = _2040;
            frontier_phi_37_36_ladder_2 = _2039;
        }
        _2105 = frontier_phi_37_36_ladder_2;
        _2107 = frontier_phi_37_36_ladder_1;
        _2109 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2105 = _2039;
        _2107 = _2040;
        _2109 = _2041;
    }
    uvec4 _2114 = floatBitsToUint(cbInstanceData._m0[_761 + 5u]);
    uint _2116 = _2114.x * 14u;
    uint _2117 = _2116 + 13u;
    float _2124 = _786 + (-1.0);
    float _2129 = (cbLight._m0[_2117].x * _2124) + 1.0;
    float _2130 = (cbLight._m0[_2117].y * _2124) + 1.0;
    float _2131 = (cbLight._m0[_2117].z * _2124) + 1.0;
    float _2132 = (cbLight._m0[_2117].w * _2124) + 1.0;
    uint _2133 = _2116 + 5u;
    float _2139 = isnan(1.0) ? _2130 : (isnan(_2130) ? 1.0 : min(_2130, 1.0));
    uint _2143 = _2116 + 4u;
    float _2152 = isnan(1.0) ? _2129 : (isnan(_2129) ? 1.0 : min(_2129, 1.0));
    uint _2156 = _2116 | 1u;
    float _2167 = dot(vec3(cbLight._m0[_2116].xyz), vec3(_622, _623, _624));
    float _2170 = dot(vec3(cbLight._m0[_2156].xyz), vec3(_622, _623, _624));
    float _4479 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _4490 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2175 = (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * 0.3183098733425140380859375;
    float _2177 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * 0.3183098733425140380859375;
    float _2184 = ((cbLight._m0[_2133].x * _2139) * _2177) + (((cbLight._m0[_2143].x * _2105) * _2152) * _2175);
    float _2185 = ((_2139 * cbLight._m0[_2133].y) * _2177) + (((cbLight._m0[_2143].y * _2107) * _2152) * _2175);
    float _2186 = ((_2139 * cbLight._m0[_2133].z) * _2177) + (((cbLight._m0[_2143].z * _2109) * _2152) * _2175);
    uvec4 _2190 = floatBitsToUint(cbLight._m0[_2116 + 12u]);
    bool _2192 = _2190.x == 0u;
    float _2294;
    float _2296;
    float _2298;
    if (_2192)
    {
        _2294 = _2184;
        _2296 = _2185;
        _2298 = _2186;
    }
    else
    {
        uint _2302 = _2116 + 6u;
        float _2318 = (dot(vec3(cbLight._m0[_2116 + 2u].xyz), vec3(_622, _623, _624)) * 0.5) + 0.5;
        float _2319 = _2318 * _2318;
        float _4501 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2320 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _2321 = isnan(1.0) ? _2131 : (isnan(_2131) ? 1.0 : min(_2131, 1.0));
        _2294 = (((cbLight._m0[_2302].x * 0.3183098733425140380859375) * _2320) * _2321) + _2184;
        _2296 = (((cbLight._m0[_2302].y * 0.3183098733425140380859375) * _2320) * _2321) + _2185;
        _2298 = (((cbLight._m0[_2302].z * 0.3183098733425140380859375) * _2320) * _2321) + _2186;
    }
    bool _2301 = _2190.y == 0u;
    float _2356;
    float _2358;
    float _2360;
    if (_2301)
    {
        _2356 = _2294;
        _2358 = _2296;
        _2360 = _2298;
    }
    else
    {
        uint _2518 = _2116 + 7u;
        float _2534 = (dot(vec3(cbLight._m0[_2116 + 3u].xyz), vec3(_622, _623, _624)) * 0.5) + 0.5;
        float _2535 = _2534 * _2534;
        float _4517 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2536 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _2537 = isnan(1.0) ? _2132 : (isnan(_2132) ? 1.0 : min(_2132, 1.0));
        _2356 = (((cbLight._m0[_2518].x * 0.3183098733425140380859375) * _2536) * _2537) + _2294;
        _2358 = (((cbLight._m0[_2518].y * 0.3183098733425140380859375) * _2536) * _2537) + _2296;
        _2360 = (((cbLight._m0[_2518].z * 0.3183098733425140380859375) * _2536) * _2537) + _2298;
    }
    uint _2363 = _2116 + 8u;
    float _2376 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2116].w)) * _625) * 0.949999988079071044921875);
    float _2377 = _2376 * _2376;
    float _2378 = cbLight._m0[_2116].x + _701;
    float _2379 = cbLight._m0[_2116].y + _702;
    float _2380 = cbLight._m0[_2116].z + _703;
    float _2384 = inversesqrt(dot(vec3(_2378, _2379, _2380), vec3(_2378, _2379, _2380)));
    float _2385 = _2384 * _2378;
    float _2386 = _2384 * _2379;
    float _2387 = _2384 * _2380;
    float _2388 = dot(vec3(_622, _623, _624), vec3(cbLight._m0[_2116].xyz));
    float _4533 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
    float _2391 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
    float _4544 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _2392 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
    float _2393 = dot(vec3(_622, _623, _624), vec3(_2385, _2386, _2387));
    float _4555 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _2396 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
    float _2397 = dot(vec3(cbLight._m0[_2116].xyz), vec3(_2385, _2386, _2387));
    float _4566 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2401 = _2377 * _2377;
    float _2405 = ((_2396 * _2396) * (_2401 + (-1.0))) + 1.0;
    float _2416 = (exp2(log2(1.0 - (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2417 = 1.0 - _2377;
    float _2428 = (0.5 / (((_2392 * ((_2391 * _2417) + _2377)) + 9.9999999392252902907785028219223e-09) + (((_2392 * _2417) + _2377) * _2391))) * _2391;
    float _4577 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
    float _2430 = (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (_2401 / ((_2405 * _2405) * 3.141590118408203125));
    uint _2444 = _2116 + 9u;
    float _2455 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2156].w)) * _625) * 0.949999988079071044921875);
    float _2456 = _2455 * _2455;
    float _2457 = cbLight._m0[_2156].x + _701;
    float _2458 = cbLight._m0[_2156].y + _702;
    float _2459 = cbLight._m0[_2156].z + _703;
    float _2463 = inversesqrt(dot(vec3(_2457, _2458, _2459), vec3(_2457, _2458, _2459)));
    float _2464 = _2463 * _2457;
    float _2465 = _2463 * _2458;
    float _2466 = _2463 * _2459;
    float _2467 = dot(vec3(_622, _623, _624), vec3(cbLight._m0[_2156].xyz));
    float _4588 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
    float _2470 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
    float _2471 = dot(vec3(_622, _623, _624), vec3(_2464, _2465, _2466));
    float _4599 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
    float _2474 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
    float _2475 = dot(vec3(cbLight._m0[_2156].xyz), vec3(_2464, _2465, _2466));
    float _4610 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
    float _2479 = _2456 * _2456;
    float _2483 = ((_2474 * _2474) * (_2479 + (-1.0))) + 1.0;
    float _2492 = (exp2(log2(1.0 - (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2493 = 1.0 - _2456;
    float _2503 = (0.5 / (((_2392 * ((_2470 * _2493) + _2456)) + 9.9999999392252902907785028219223e-09) + (((_2392 * _2493) + _2456) * _2470))) * _2470;
    float _4621 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
    float _2505 = (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2479 / ((_2483 * _2483) * 3.141590118408203125));
    float _2515 = (((_2492 * cbLight._m0[_2444].x) * _2505) * _2139) + ((((cbLight._m0[_2363].x * _2105) * _2416) * _2430) * _2152);
    float _2516 = (((_2492 * cbLight._m0[_2444].y) * _2505) * _2139) + ((((cbLight._m0[_2363].y * _2107) * _2416) * _2430) * _2152);
    float _2517 = (((_2492 * cbLight._m0[_2444].z) * _2505) * _2139) + ((((cbLight._m0[_2363].z * _2109) * _2416) * _2430) * _2152);
    float _2573;
    float _2575;
    float _2577;
    if (_2192)
    {
        _2573 = _2515;
        _2575 = _2516;
        _2577 = _2517;
    }
    else
    {
        uint _2579 = _2116 + 2u;
        uint _2583 = _2116 + 10u;
        float _2597 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2579].w)) * _625) * 0.949999988079071044921875);
        float _2598 = _2597 * _2597;
        float _2599 = cbLight._m0[_2579].x + _701;
        float _2600 = cbLight._m0[_2579].y + _702;
        float _2601 = cbLight._m0[_2579].z + _703;
        float _2605 = inversesqrt(dot(vec3(_2599, _2600, _2601), vec3(_2599, _2600, _2601)));
        float _2606 = _2605 * _2599;
        float _2607 = _2605 * _2600;
        float _2608 = _2605 * _2601;
        float _2609 = dot(vec3(_622, _623, _624), vec3(cbLight._m0[_2579].xyz));
        float _4632 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2612 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
        float _2613 = dot(vec3(_622, _623, _624), vec3(_2606, _2607, _2608));
        float _4643 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2616 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
        float _2617 = dot(vec3(cbLight._m0[_2579].xyz), vec3(_2606, _2607, _2608));
        float _4654 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2621 = _2598 * _2598;
        float _2625 = ((_2616 * _2616) * (_2621 + (-1.0))) + 1.0;
        float _2634 = (exp2(log2(1.0 - (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2635 = 1.0 - _2598;
        float _2645 = (0.5 / (((_2392 * ((_2612 * _2635) + _2598)) + 9.9999999392252902907785028219223e-09) + (((_2392 * _2635) + _2598) * _2612))) * _2612;
        float _4665 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2647 = (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (_2621 / ((_2625 * _2625) * 3.141590118408203125));
        float _2648 = isnan(1.0) ? _2131 : (isnan(_2131) ? 1.0 : min(_2131, 1.0));
        _2573 = (((_2634 * cbLight._m0[_2583].x) * _2647) * _2648) + _2515;
        _2575 = (((_2634 * cbLight._m0[_2583].y) * _2647) * _2648) + _2516;
        _2577 = (((_2634 * cbLight._m0[_2583].z) * _2647) * _2648) + _2517;
    }
    float _2679;
    float _2681;
    float _2683;
    if (_2301)
    {
        _2679 = _2573;
        _2681 = _2575;
        _2683 = _2577;
    }
    else
    {
        uint _2690 = _2116 + 3u;
        uint _2694 = _2116 + 11u;
        float _2708 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2690].w)) * _625) * 0.949999988079071044921875);
        float _2709 = _2708 * _2708;
        float _2710 = cbLight._m0[_2690].x + _701;
        float _2711 = cbLight._m0[_2690].y + _702;
        float _2712 = cbLight._m0[_2690].z + _703;
        float _2716 = inversesqrt(dot(vec3(_2710, _2711, _2712), vec3(_2710, _2711, _2712)));
        float _2717 = _2716 * _2710;
        float _2718 = _2716 * _2711;
        float _2719 = _2716 * _2712;
        float _2720 = dot(vec3(_622, _623, _624), vec3(cbLight._m0[_2690].xyz));
        float _4681 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
        float _2723 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
        float _2724 = dot(vec3(_622, _623, _624), vec3(_2717, _2718, _2719));
        float _4692 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
        float _2727 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
        float _2728 = dot(vec3(cbLight._m0[_2690].xyz), vec3(_2717, _2718, _2719));
        float _4703 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
        float _2732 = _2709 * _2709;
        float _2736 = ((_2727 * _2727) * (_2732 + (-1.0))) + 1.0;
        float _2745 = (exp2(log2(1.0 - (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2746 = 1.0 - _2709;
        float _2756 = (0.5 / (((_2392 * ((_2723 * _2746) + _2709)) + 9.9999999392252902907785028219223e-09) + (((_2392 * _2746) + _2709) * _2723))) * _2723;
        float _4714 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
        float _2758 = (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0))) * (_2732 / ((_2736 * _2736) * 3.141590118408203125));
        float _2759 = isnan(1.0) ? _2132 : (isnan(_2132) ? 1.0 : min(_2132, 1.0));
        _2679 = (((_2745 * cbLight._m0[_2694].x) * _2758) * _2759) + _2573;
        _2681 = (((_2745 * cbLight._m0[_2694].y) * _2758) * _2759) + _2575;
        _2683 = (((_2745 * cbLight._m0[_2694].z) * _2758) * _2759) + _2577;
    }
    float _2825;
    float _2827;
    float _2829;
    float _2831;
    float _2833;
    float _2835;
    if (_2114.y == 0u)
    {
        uvec4 _2780 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2781 = _2780.x;
        uint _2792 = uint((float(_2780.y) * floor(float(uint(cbSceneParam._m0[85u].y * _723) / _2781))) + floor(float(uint(cbSceneParam._m0[85u].x * _722) / _2781)));
        float _2802 = (log2(_1892 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2803 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
        uint _2806 = uint(isnan(14.0) ? _2803 : (isnan(_2803) ? 14.0 : min(_2803, 14.0)));
        uvec4 _2811 = texelFetch(g_lightClusterGridBuffer, int(((_2806 << 2u) + (_2792 << 6u)) >> 2u));
        uint _2812 = _2811.x;
        uint _2813 = _2780.z;
        float _2921;
        float _2923;
        float _2925;
        float _2927;
        float _2929;
        float _2931;
        if (((((1u << ((_2813 >> 4u) & 15u)) + 4294967295u) & _2812) == 0u) || ((_2813 & 240u) == 0u))
        {
            _2921 = 0.0;
            _2923 = 0.0;
            _2925 = 0.0;
            _2927 = 0.0;
            _2929 = 0.0;
            _2931 = 0.0;
        }
        else
        {
            float _2922;
            float _2924;
            float _2926;
            float _2928;
            float _2930;
            float _2932;
            float _3083 = 0.0;
            float _3084 = 0.0;
            float _3085 = 0.0;
            float _3086 = 0.0;
            float _3087 = 0.0;
            float _3088 = 0.0;
            uint _3089 = 0u;
            uint _3098;
            bool _3099;
            for (;;)
            {
                _3098 = texelFetch(g_lightClassification, int((((_2806 << 5u) + (_2792 << 9u)) + (_3089 << 2u)) >> 2u)).x;
                _3099 = _3098 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3099)
                {
                    frontier_phi_71_pred = _3088;
                    frontier_phi_71_pred_1 = _3087;
                    frontier_phi_71_pred_2 = _3086;
                    frontier_phi_71_pred_3 = _3085;
                    frontier_phi_71_pred_4 = _3084;
                    frontier_phi_71_pred_5 = _3083;
                }
                else
                {
                    float _3228;
                    float _3229;
                    float _3230;
                    float _3231;
                    float _3232;
                    float _3233;
                    uint _3234;
                    _3228 = _3083;
                    _3229 = _3084;
                    _3230 = _3085;
                    _3231 = _3086;
                    _3232 = _3087;
                    _3233 = _3088;
                    _3234 = _3098;
                    float _3155;
                    float _3156;
                    float _3157;
                    float _3158;
                    float _3159;
                    float _3160;
                    for (;;)
                    {
                        uint _3238 = uint(findLSB(_3234)) + (_3089 << 5u);
                        uint _3235 = (_3234 + 4294967295u) & _3234;
                        uint _3240 = _3238 * 48u;
                        vec4 _3254 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3240)).x, texelFetch(g_PointLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3240 + 3u)).x));
                        uint _3260 = (_3238 * 48u) + 4u;
                        vec4 _3273 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3260)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 3u)).x));
                        uint _3279 = (_3238 * 48u) + 8u;
                        vec3 _3290 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3279)).x, texelFetch(g_PointLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3279 + 2u)).x));
                        float _3294 = _3254.x - _1890;
                        float _3295 = _3254.y - _1891;
                        float _3296 = _3254.z - _1892;
                        float _3297 = dot(vec3(_3294, _3295, _3296), vec3(_3294, _3295, _3296));
                        float _3300 = inversesqrt(_3297);
                        float _3301 = _3300 * _3294;
                        float _3302 = _3300 * _3295;
                        float _3303 = _3300 * _3296;
                        float _3304 = dot(vec3(_742, _745, _748), vec3(_3301, _3302, _3303));
                        float _3309 = 1.0 - (_3297 * _3254.w);
                        float _4740 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                        float _3310 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                        float _3311 = sqrt(_3297) * _3273.w;
                        float _3314 = 1.39999997615814208984375 / (_3311 + 1.39999997615814208984375);
                        float _3315 = _3314 * _3314;
                        float _3318 = ((1.0 - _3315) * _3304) + _3315;
                        float _3321 = _3311 * _3311;
                        float _3325 = ((isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0))) * _3310) / ((_3321 * 0.699999988079071044921875) + 1.0);
                        float _3329 = (-0.0) - _1890;
                        float _3330 = (-0.0) - _1891;
                        float _3331 = (-0.0) - _1892;
                        float _3335 = inversesqrt(dot(vec3(_3329, _3330, _3331), vec3(_3329, _3330, _3331)));
                        float _3336 = _3335 * _3329;
                        float _3337 = _3335 * _3330;
                        float _3338 = _3335 * _3331;
                        float _3345 = exp2(log2(1.0 / ((_3321 * 3.5) + 5.0)) * 0.25);
                        float _3346 = 1.0 - _802;
                        float _3353 = sqrt(1.0 - ((1.0 - (_3346 * _3346)) * (1.0 - (_3345 * _3345))));
                        float _3354 = _3353 * _3353;
                        float _3355 = _3354 * _3354;
                        float _3356 = _3336 + _3301;
                        float _3357 = _3337 + _3302;
                        float _3358 = _3338 + _3303;
                        float _3362 = inversesqrt(dot(vec3(_3356, _3357, _3358), vec3(_3356, _3357, _3358)));
                        float _3366 = dot(vec3(_742, _745, _748), vec3(_3336, _3337, _3338));
                        float _4756 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                        float _3369 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                        float _3370 = dot(vec3(_742, _745, _748), vec3(_3362 * _3356, _3362 * _3357, _3362 * _3358));
                        float _4767 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                        float _3373 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
                        float _3377 = ((_3373 * _3373) * (_3355 + (-1.0))) + 1.0;
                        float _3378 = _3314 * _3354;
                        float _3379 = _3378 * _3378;
                        float _3382 = ((1.0 - _3379) * _3304) + _3379;
                        float _4778 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                        float _3383 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
                        float _3384 = 1.0 - _3354;
                        float _3394 = (0.5 / (((_3383 * ((_3369 * _3384) + _3354)) + 9.9999999392252902907785028219223e-09) + (((_3383 * _3384) + _3354) * _3369))) * _3383;
                        float _4789 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                        float _3405 = (((_3355 * 3.1415927410125732421875) * (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0)))) / ((_3377 * _3377) * ((_3321 * 2.1991131305694580078125) + 3.141590118408203125))) * _3310;
                        _3158 = (_3325 * _3273.x) + _3231;
                        _3159 = (_3325 * _3273.y) + _3232;
                        _3160 = (_3325 * _3273.z) + _3233;
                        _3155 = (_3405 * _3290.x) + _3228;
                        _3156 = (_3405 * _3290.y) + _3229;
                        _3157 = (_3405 * _3290.z) + _3230;
                        if (_3235 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3228 = _3155;
                            _3229 = _3156;
                            _3230 = _3157;
                            _3231 = _3158;
                            _3232 = _3159;
                            _3233 = _3160;
                            _3234 = _3235;
                        }
                    }
                    frontier_phi_71_pred = _3160;
                    frontier_phi_71_pred_1 = _3159;
                    frontier_phi_71_pred_2 = _3158;
                    frontier_phi_71_pred_3 = _3157;
                    frontier_phi_71_pred_4 = _3156;
                    frontier_phi_71_pred_5 = _3155;
                }
                _2932 = frontier_phi_71_pred;
                _2930 = frontier_phi_71_pred_1;
                _2928 = frontier_phi_71_pred_2;
                _2926 = frontier_phi_71_pred_3;
                _2924 = frontier_phi_71_pred_4;
                _2922 = frontier_phi_71_pred_5;
                uint _3090 = _3089 + 1u;
                if (_3090 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3083 = _2922;
                    _3084 = _2924;
                    _3085 = _2926;
                    _3086 = _2928;
                    _3087 = _2930;
                    _3088 = _2932;
                    _3089 = _3090;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2921 = _2922;
            _2923 = _2924;
            _2925 = _2926;
            _2927 = _2928;
            _2929 = _2930;
            _2931 = _2932;
        }
        uvec4 _2935 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2936 = _2935.z;
        uint _2938 = (_2936 >> 8u) & 15u;
        float _3051;
        float _3053;
        float _3055;
        float _3057;
        float _3059;
        float _3061;
        if (((4294967295u << _2938) & _2812) == 0u)
        {
            _3051 = _2921;
            _3053 = _2923;
            _3055 = _2925;
            _3057 = _2927;
            _3059 = _2929;
            _3061 = _2931;
        }
        else
        {
            float _3076 = inversesqrt(dot(vec3(_1890, _1891, _1892), vec3(_1890, _1891, _1892)));
            float _3077 = _3076 * _1890;
            float _3078 = _3076 * _1891;
            float _3079 = _3076 * _1892;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2938 < ((_2936 >> 12u) & 15u))
            {
                float _3052;
                float _3054;
                float _3056;
                float _3058;
                float _3060;
                float _3062;
                float _3211 = _2921;
                float _3212 = _2923;
                float _3213 = _2925;
                float _3214 = _2927;
                float _3215 = _2929;
                float _3216 = _2931;
                uint _3217 = _2938;
                uint _3226;
                bool _3227;
                for (;;)
                {
                    _3226 = texelFetch(g_lightClassification, int((((_2806 << 5u) + (_2792 << 9u)) + (_3217 << 2u)) >> 2u)).x;
                    _3227 = _3226 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3227)
                    {
                        frontier_phi_82_pred = _3216;
                        frontier_phi_82_pred_1 = _3215;
                        frontier_phi_82_pred_2 = _3214;
                        frontier_phi_82_pred_3 = _3213;
                        frontier_phi_82_pred_4 = _3212;
                        frontier_phi_82_pred_5 = _3211;
                    }
                    else
                    {
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3714;
                        float _3715;
                        float _3716;
                        float _3717;
                        float _3718;
                        float _3719;
                        float _3432 = _3211;
                        float _3433 = _3212;
                        float _3434 = _3213;
                        float _3435 = _3214;
                        float _3436 = _3215;
                        float _3437 = _3216;
                        uint _3438 = _3226;
                        uint _3439;
                        vec4 _3464;
                        float _3465;
                        vec4 _3480;
                        vec3 _3492;
                        vec4 _3507;
                        vec4 _3523;
                        float _3570;
                        bool _3571;
                        for (;;)
                        {
                            uint _3449 = ((_3217 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3438));
                            _3439 = (_3438 + 4294967295u) & _3438;
                            uint _3451 = _3449 * 40u;
                            _3464 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3451)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 3u)).x));
                            _3465 = _3464.w;
                            uint _3467 = (_3449 * 40u) + 4u;
                            _3480 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3467)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 3u)).x));
                            uint _3482 = (_3449 * 40u) + 8u;
                            _3492 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3482)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 2u)).x));
                            uint _3494 = (_3449 * 40u) + 16u;
                            _3507 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 3u)).x));
                            uint _3510 = (_3449 * 40u) + 20u;
                            _3523 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 3u)).x));
                            uint _3526 = (_3449 * 40u) + 24u;
                            vec4 _3539 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3526)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 3u)).x));
                            uint _3545 = (_3449 * 40u) + 28u;
                            vec4 _3558 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3545)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 3u)).x));
                            _3570 = fma(_1892, _3558.z, fma(_1891, _3558.y, _3558.x * _1890)) + _3558.w;
                            _3571 = !((fma(_1892, _3539.z, fma(_1891, _3539.y, _3539.x * _1890)) + _3539.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3571)
                            {
                                float _3598 = _3464.x - _1890;
                                float _3599 = _3464.y - _1891;
                                float _3600 = _3464.z - _1892;
                                float _3601 = dot(vec3(_3598, _3599, _3600), vec3(_3598, _3599, _3600));
                                float _3604 = inversesqrt(_3601);
                                float _3605 = _3604 * _3598;
                                float _3606 = _3604 * _3599;
                                float _3607 = _3604 * _3600;
                                float _3611 = 1.0 - (_3601 / (_3465 * _3465));
                                float _4800 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                                float _3612 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                                float _3616 = sqrt(_3601) * _3480.w;
                                float _3618 = 1.39999997615814208984375 / (_3616 + 1.39999997615814208984375);
                                float _3619 = _3618 * _3618;
                                float _3622 = ((1.0 - _3619) * dot(vec3(_3605, _3606, _3607), vec3(_742, _745, _748))) + _3619;
                                float _3625 = _3616 * _3616;
                                float _3629 = (fma(_1892, _3507.z, fma(_1891, _3507.y, _3507.x * _1890)) + _3507.w) / _3570;
                                float _3630 = (fma(_1892, _3523.z, fma(_1891, _3523.y, _3523.x * _1890)) + _3523.w) / _3570;
                                float _3634 = 1.0 - dot(vec2(_3629, _3630), vec2(_3629, _3630));
                                float _4816 = isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0));
                                float _3635 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                                float _3636 = _3635 * (((isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0))) * _3612) / ((_3625 * 0.699999988079071044921875) + 1.0));
                                float _3648 = exp2(log2(1.0 / ((_3625 * 3.5) + 5.0)) * 0.25);
                                float _3649 = 1.0 - _802;
                                float _3656 = sqrt(1.0 - ((1.0 - (_3649 * _3649)) * (1.0 - (_3648 * _3648))));
                                float _3657 = _3656 * _3656;
                                float _3658 = _3657 * _3657;
                                float _3659 = _3605 - _3077;
                                float _3660 = _3606 - _3078;
                                float _3661 = _3607 - _3079;
                                float _3665 = inversesqrt(dot(vec3(_3659, _3660, _3661), vec3(_3659, _3660, _3661)));
                                float _3669 = dot(vec3(_742, _745, _748), vec3((-0.0) - _3077, (-0.0) - _3078, (-0.0) - _3079));
                                float _4827 = isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0));
                                float _3672 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                                float _3673 = dot(vec3(_742, _745, _748), vec3(_3665 * _3659, _3665 * _3660, _3665 * _3661));
                                float _4838 = isnan(0.0) ? _3673 : (isnan(_3673) ? 0.0 : max(_3673, 0.0));
                                float _3676 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                                float _3680 = ((_3676 * _3676) * (_3658 + (-1.0))) + 1.0;
                                float _3681 = _3618 * _3657;
                                float _3682 = _3681 * _3681;
                                float _3688 = ((1.0 - _3682) * dot(vec3(_742, _745, _748), vec3(_3605, _3606, _3607))) + _3682;
                                float _4849 = isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0));
                                float _3689 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
                                float _3690 = 1.0 - _3657;
                                float _3700 = (0.5 / (((_3689 * ((_3672 * _3690) + _3657)) + 9.9999999392252902907785028219223e-09) + (((_3689 * _3690) + _3657) * _3672))) * _3689;
                                float _4860 = isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0));
                                float _3710 = (_3635 * _3612) * (((_3658 * 3.1415927410125732421875) * (isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0)))) / ((_3680 * _3680) * ((_3625 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3636 * _3480.z;
                                frontier_phi_88_pred_1 = _3636 * _3480.y;
                                frontier_phi_88_pred_2 = _3636 * _3480.x;
                                frontier_phi_88_pred_3 = _3710 * _3492.z;
                                frontier_phi_88_pred_4 = _3710 * _3492.y;
                                frontier_phi_88_pred_5 = _3710 * _3492.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3719 = frontier_phi_88_pred;
                            _3718 = frontier_phi_88_pred_1;
                            _3717 = frontier_phi_88_pred_2;
                            _3716 = frontier_phi_88_pred_3;
                            _3715 = frontier_phi_88_pred_4;
                            _3714 = frontier_phi_88_pred_5;
                            _3422 = _3717 + _3435;
                            _3423 = _3718 + _3436;
                            _3424 = _3719 + _3437;
                            _3419 = _3714 + _3432;
                            _3420 = _3715 + _3433;
                            _3421 = _3716 + _3434;
                            if (_3439 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3432 = _3419;
                                _3433 = _3420;
                                _3434 = _3421;
                                _3435 = _3422;
                                _3436 = _3423;
                                _3437 = _3424;
                                _3438 = _3439;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3424;
                        frontier_phi_82_pred_1 = _3423;
                        frontier_phi_82_pred_2 = _3422;
                        frontier_phi_82_pred_3 = _3421;
                        frontier_phi_82_pred_4 = _3420;
                        frontier_phi_82_pred_5 = _3419;
                    }
                    _3062 = frontier_phi_82_pred;
                    _3060 = frontier_phi_82_pred_1;
                    _3058 = frontier_phi_82_pred_2;
                    _3056 = frontier_phi_82_pred_3;
                    _3054 = frontier_phi_82_pred_4;
                    _3052 = frontier_phi_82_pred_5;
                    uint _3218 = _3217 + 1u;
                    if (_3218 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3211 = _3052;
                        _3212 = _3054;
                        _3213 = _3056;
                        _3214 = _3058;
                        _3215 = _3060;
                        _3216 = _3062;
                        _3217 = _3218;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3058;
                frontier_phi_63_64_ladder_1 = _3062;
                frontier_phi_63_64_ladder_2 = _3060;
                frontier_phi_63_64_ladder_3 = _3056;
                frontier_phi_63_64_ladder_4 = _3054;
                frontier_phi_63_64_ladder_5 = _3052;
            }
            else
            {
                frontier_phi_63_64_ladder = _2927;
                frontier_phi_63_64_ladder_1 = _2931;
                frontier_phi_63_64_ladder_2 = _2929;
                frontier_phi_63_64_ladder_3 = _2925;
                frontier_phi_63_64_ladder_4 = _2923;
                frontier_phi_63_64_ladder_5 = _2921;
            }
            _3051 = frontier_phi_63_64_ladder_5;
            _3053 = frontier_phi_63_64_ladder_4;
            _3055 = frontier_phi_63_64_ladder_3;
            _3057 = frontier_phi_63_64_ladder;
            _3059 = frontier_phi_63_64_ladder_2;
            _3061 = frontier_phi_63_64_ladder_1;
        }
        float _3066 = isnan(1.0) ? _786 : (isnan(_786) ? 1.0 : min(_786, 1.0));
        _2825 = (_3066 * _3057) + _2356;
        _2827 = (_3066 * _3059) + _2358;
        _2829 = (_3066 * _3061) + _2360;
        _2831 = ((_3051 * 0.039999999105930328369140625) * _3066) + _2679;
        _2833 = ((_3053 * 0.039999999105930328369140625) * _3066) + _2681;
        _2835 = ((_3055 * 0.039999999105930328369140625) * _3066) + _2683;
    }
    else
    {
        _2825 = _2356;
        _2827 = _2358;
        _2829 = _2360;
        _2831 = _2679;
        _2833 = _2681;
        _2835 = _2683;
    }
    uint _2841 = _762 + uint(cbMatDynParam._m0[0u].w);
    float _2847 = cbInstanceData._m0[_2841].x * (_532 - (_548 * _532));
    float _2848 = cbInstanceData._m0[_2841].y * (_533 - (_548 * _533));
    float _2849 = cbInstanceData._m0[_2841].z * (_534 - (_548 * _534));
    float _4876 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _4887 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _4898 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _2866 = (((isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0))) * (_2825 + ((isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))) * _786))) + ((_2831 + ((isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))) * _1624)) * cbPerFrame._m0[3u].x)) + _2847;
    float _2868 = (_2848 + ((_2833 + ((isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))) * _1624)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0))) * (_2827 + ((isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))) * _786)));
    float _2870 = (_2849 + ((_2835 + ((isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))) * _1624)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0))) * (_2829 + ((isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))) * _786)));
    float _2871 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
    float _2872 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
    float _2873 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
    float _2879 = cbMtdParam._m0[2u].x * _2847;
    float _2880 = cbMtdParam._m0[2u].y * _2848;
    float _2881 = cbMtdParam._m0[2u].z * _2849;
    float _4924 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2883 = isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0));
    uint _2884 = _761 + 6u;
    float _2892 = _722 / cbSceneParam._m0[86u].x;
    float _2893 = _723 / cbSceneParam._m0[86u].y;
    vec4 _2907 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2892, _2893, (log2((isnan(cbSceneParam._m0[77u].w) ? _644 : (isnan(_644) ? cbSceneParam._m0[77u].w : min(_644, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2909 = _2907.x;
    float _2910 = _2907.y;
    float _2911 = _2907.z;
    float _2912 = _2907.w;
    float _2984;
    float _2986;
    float _2988;
    float _2990;
    if (_644 > cbSceneParam._m0[78u].w)
    {
        float _2946 = isnan(_644) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _644 : min(cbSceneParam._m0[80u].w, _644));
        float _2947 = _2946 / _644;
        float _2958 = _2947 * _694;
        float _2959 = _695 * _2947;
        float _2960 = (-0.0) - _2959;
        float _2962 = _2947 * _696;
        float _2964 = (cbSceneParam._m0[77u].w * _2960) / _2946;
        float _2965 = _2964 + cbSceneParam._m0[79u].w;
        float _2966 = cbSceneParam._m0[79u].w - _2959;
        float _2972 = sqrt(((_2958 * _2958) + (_2959 * _2959)) + (_2962 * _2962));
        float _2975 = (1.0 - (cbSceneParam._m0[77u].w / _2946)) * _2972;
        float _2980 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2982 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3168;
        if (abs((_2960 - _2964) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3168 = ((((_2965 > 0.0) ? exp2(_2980 * _2965) : (2.0 - exp2(_2982 * _2965))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2975;
        }
        else
        {
            float _3112 = 1.0 / cbSceneParam._m0[80u].x;
            float _3113 = isnan(_2966) ? _2965 : (isnan(_2965) ? _2966 : max(_2965, _2966));
            float _3114 = isnan(_2966) ? _2965 : (isnan(_2965) ? _2966 : min(_2965, _2966));
            float _3123 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : min(_3113, 0.0));
            float _3124 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : min(_3114, 0.0));
            _3168 = ((abs(_2972 / _2960) * cbSceneParam._m0[80u].y) * ((((_3123 - _3124) * 2.0) - ((exp2(_2980 * (isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0)))) - exp2(_2980 * (isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0))))) * _3112)) - ((exp2(_2982 * _3123) - exp2(_2982 * _3124)) * _3112))) + (_2975 * cbSceneParam._m0[80u].z);
        }
        vec4 _3170 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2892, _2893, 1.0), 0.0);
        float _3179 = exp2((_3168 * (-1.44269502162933349609375)) * (1.0 - _3170.w));
        float _3180 = log2(_3179);
        float _3196 = log2(_2912);
        _2984 = (exp2(_3196 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3180 * cbSceneParam._m0[78u].x)) * _3170.x) / cbSceneParam._m0[78u].x)) + _2909;
        _2986 = (exp2(_3196 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3180 * cbSceneParam._m0[78u].y)) * _3170.y) / cbSceneParam._m0[78u].y)) + _2910;
        _2988 = (exp2(_3196 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3180 * cbSceneParam._m0[78u].z)) * _3170.z) / cbSceneParam._m0[78u].z)) + _2911;
        _2990 = _3179 * _2912;
    }
    else
    {
        _2984 = _2909;
        _2986 = _2910;
        _2988 = _2911;
        _2990 = _2912;
    }
    bool _3206;
    vec4 _3000;
    vec4 _3022;
    float _3024;
    float _3028;
    float _3029;
    float _3030;
    float _3033;
    float _3036;
    float _3039;
    float _3040;
    bool _3050;
    for (;;)
    {
        _3000 = cbMatDynParam._m0[0u];
        float _3002 = roundEven(_3000.y);
        bool _3003 = _3002 == 3.0;
        float _3004 = log2(_2990);
        float _3008 = exp2(_3004 * cbSceneParam._m0[78u].x);
        float _3009 = exp2(_3004 * cbSceneParam._m0[78u].y);
        float _3010 = exp2(_3004 * cbSceneParam._m0[78u].z);
        float _3011 = _3008 * _2871;
        float _3012 = _3009 * _2872;
        float _3013 = _3010 * _2873;
        float _3020 = _710 + (-0.5);
        _3022 = cbMtdParam._m0[1u];
        _3024 = _3022.y * _3020;
        float _3027 = (_3002 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3028 = _3027 * (_3003 ? _3011 : (_3011 + (cbSceneParam._m0[72u].w * _2984)));
        _3029 = _3027 * (_3003 ? _3012 : (_3012 + (cbSceneParam._m0[72u].w * _2986)));
        _3030 = _3027 * (_3003 ? _3013 : (_3013 + (cbSceneParam._m0[72u].w * _2988)));
        _3033 = ((_2879 * _2883) * _3008) * _3027;
        _3036 = ((_2880 * _2883) * _3009) * _3027;
        _3039 = ((_2881 * _2883) * _3010) * _3027;
        _3040 = _3020 * 0.999000012874603271484375;
        _3050 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3050)
        {
            if ((cbInstanceData._m0[_761 + 7u].x + _3040) < 0.5)
            {
                _3206 = true;
                break;
            }
        }
        uint _3147 = _762 + uint(_3000.w);
        if ((cbInstanceData._m0[_3147].w < 1.0) && ((cbInstanceData._m0[_3147].w + _3040) < 0.5))
        {
            _3206 = true;
            break;
        }
        if ((_3024 + 1.0) < _3022.x)
        {
            _3206 = true;
            break;
        }
        _3206 = false;
        break;
    }
    float _3410;
    if (_3206)
    {
        discard_state = true;
        _3410 = 0.0;
    }
    else
    {
        _3410 = cbInstanceData._m0[_2884].w;
    }
    SV_Target.x = _3028;
    SV_Target.y = _3029;
    SV_Target.z = _3030;
    SV_Target.w = _3410;
    SV_Target_1.x = _3033;
    SV_Target_1.y = _3036;
    SV_Target_1.z = _3039;
    SV_Target_1.w = cbInstanceData._m0[_2884].w;
    discard_exit();
}


