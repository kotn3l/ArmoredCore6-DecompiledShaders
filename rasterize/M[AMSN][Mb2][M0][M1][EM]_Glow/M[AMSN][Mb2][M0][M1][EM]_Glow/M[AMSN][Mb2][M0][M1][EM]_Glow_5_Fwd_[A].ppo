#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1118;
float _3525;
float _3526;
float _3527;
float _3528;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _247 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _253 = _247.x * cbMtdParam._m0[9u].x;
    float _254 = _247.y * cbMtdParam._m0[9u].y;
    float _255 = _247.z * cbMtdParam._m0[9u].z;
    vec4 _293 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _309 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3537 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _310 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
    float _317 = (((_293.x * cbMtdParam._m0[10u].x) - _253) * _310) + _253;
    float _318 = (((_293.y * cbMtdParam._m0[10u].y) - _254) * _310) + _254;
    float _319 = (((_293.z * cbMtdParam._m0[10u].z) - _255) * _310) + _255;
    vec4 _339 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _358 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_339.x + 0.00999999977648258209228515625));
    float _360 = _358 * (cbMtdParam._m0[15u].x + 1.0);
    float _3548 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _361 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
    float _369 = ((((cbMtdParam._m0[12u].x - _317) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _361) + _317;
    float _370 = ((((cbMtdParam._m0[12u].y - _318) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _361) + _318;
    float _371 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _319)) * _361) + _319;
    vec4 _384 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _392 = (_384.x * 2.0) + (-1.0);
    float _394 = (_384.y * 2.0) + (-1.0);
    float _395 = dot(vec2(_392, _394), vec2(_392, _394));
    float _3559 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    vec4 _412 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _416 = _412.z;
    float _419 = (_412.x * 2.0) + (-1.0);
    float _420 = (_412.y * 2.0) + (-1.0);
    float _421 = dot(vec2(_419, _420), vec2(_419, _420));
    float _3570 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _426 = sqrt(1.0 - (isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))));
    float _429 = (_310 * (_384.z - _416)) + _416;
    float _432 = _358 * (cbMtdParam._m0[14u].w + 1.0);
    float _3581 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _436 = ((cbMtdParam._m0[14u].y - _429) * (isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0)))) + _429;
    vec4 _463 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _478 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _492 = (_310 * (_392 - _419)) + _419;
    float _493 = (_310 * (_394 - _420)) + _420;
    float _494 = (_310 * (sqrt(1.0 - (isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0)))) - _426)) + _426;
    vec4 _513 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _519 = (_513.x * 2.0) + (-1.0);
    float _520 = (_513.y * 2.0) + (-1.0);
    float _521 = dot(vec2(_519, _520), vec2(_519, _520));
    float _3592 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _537 = (_361 * (((_492 * cbMtdParam._m0[13u].z) - _492) + _519)) + _492;
    float _538 = (_361 * (((_493 * cbMtdParam._m0[13u].z) - _493) + _520)) + _493;
    float _539 = (_361 * (sqrt(1.0 - (isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0)))) - _494)) + _494;
    float _542 = fma(_539, _218 * NORMAL.x, fma(_538, _225 * TANGENT.x, (_211 * _203) * _537));
    float _545 = fma(_539, _218 * NORMAL.y, fma(_538, _225 * TANGENT.y, (_211 * _204) * _537));
    float _548 = fma(_539, _218 * NORMAL.z, fma(_538, _225 * TANGENT.z, (_211 * _205) * _537));
    float _552 = inversesqrt(dot(vec3(_542, _545, _548), vec3(_542, _545, _548)));
    float _553 = _552 * _542;
    float _554 = _552 * _545;
    float _555 = _552 * _548;
    float _3603 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _556 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
    float _3614 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _3625 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _3636 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _575 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _616 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _626 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _616);
    float _627 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _616);
    float _628 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _616);
    float _632 = inversesqrt(dot(vec3(_626, _627, _628), vec3(_626, _627, _628)));
    float _633 = _626 * _632;
    float _634 = _627 * _632;
    float _635 = _628 * _632;
    vec4 _640 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _642 = _640.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _798 = sqrt(((_626 * _626) + (_627 * _627)) + (_628 * _628));
        float _804 = (cbMatDynParam._m0[5u].x * _798) + cbMatDynParam._m0[5u].y;
        float _3647 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _805 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _809 = (cbMatDynParam._m0[5u].z * _798) + cbMatDynParam._m0[5u].w;
        float _3658 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))) - _805)) + _805) < ((_642 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _654 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _655 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _674 = fma(_555, cbSceneParam._m0[5u].z, fma(_554, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _553));
    float _677 = fma(_555, cbSceneParam._m0[6u].z, fma(_554, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _553));
    float _680 = fma(_555, cbSceneParam._m0[7u].z, fma(_554, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _553));
    uint _693 = uint(roundEven(NORMAL.w)) * 13u;
    uint _694 = _693 + 9u;
    uint _695 = _694 + uint(cbMatDynParam._m0[0u].w);
    float _701 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0)))) * cbInstanceData._m0[_695].x;
    float _702 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0)))) * cbInstanceData._m0[_695].y;
    float _703 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0)))) * cbInstanceData._m0[_695].z;
    float _3669 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _704 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _3680 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _705 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
    float _3691 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _706 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    vec4 _715 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _654, cbSceneParam._m0[86u].y * _655));
    float _718 = _715.x * TEXCOORD_3.w;
    float _719 = dot(vec3(_553, _554, _555), vec3(_633, _634, _635));
    float _722 = _719 * 2.0;
    float _726 = (_722 * _553) - _633;
    float _727 = (_722 * _554) - _634;
    float _728 = (_722 * _555) - _635;
    float _732 = abs(dot(vec3(_633, _634, _635), vec3(_553, _554, _555)));
    float _3702 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _734 = sqrt(_556);
    float _747 = exp2((_734 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_734 * 3.0));
    float _779 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _783 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _787 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1117;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _842 = fma(_787, cbModelParam._m0[26u].z, fma(_783, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _779));
        float _846 = fma(_787, cbModelParam._m0[27u].z, fma(_783, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _779));
        float _850 = fma(_787, cbModelParam._m0[28u].z, fma(_783, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _779));
        float _875 = _779 + _553;
        float _876 = _783 + _554;
        float _877 = _787 + _555;
        float _887 = fma(_877, cbModelParam._m0[26u].z, fma(_876, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _875)) - _842;
        float _888 = fma(_877, cbModelParam._m0[27u].z, fma(_876, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _875)) - _846;
        float _889 = fma(_877, cbModelParam._m0[28u].z, fma(_876, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _875)) - _850;
        float _893 = inversesqrt(dot(vec3(_887, _888, _889), vec3(_887, _888, _889)));
        float _906 = ((_893 * _887) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_842 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _907 = ((_893 * _888) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_846 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _908 = ((_893 * _889) / cbModelParam._m0[34u].z) + ((((((_850 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _911 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_906, _907, _908), 0.0);
        vec4 _918 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_906, _907, _908), 0.0);
        vec4 _925 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_906, _907, _908), 0.0);
        vec4 _932 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_906, _907, _908), 0.0);
        float _945 = exp2((_911.w + (-0.5)) * 20.0) * 2.0;
        float _946 = _945 * (_911.x + (-0.5));
        float _947 = _945 * (_911.y + (-0.5));
        float _948 = _945 * (_911.z + (-0.5));
        float _955 = exp2((_918.w + (-0.5)) * 20.0) * 2.0;
        float _956 = _955 * (_918.x + (-0.5));
        float _957 = _955 * (_918.y + (-0.5));
        float _958 = _955 * (_918.z + (-0.5));
        float _965 = exp2((_925.w + (-0.5)) * 20.0) * 2.0;
        float _966 = _965 * (_925.x + (-0.5));
        float _967 = _965 * (_925.y + (-0.5));
        float _968 = _965 * (_925.z + (-0.5));
        float _975 = exp2((_932.w + (-0.5)) * 20.0) * 2.0;
        float _976 = _975 * (_932.x + (-0.5));
        float _977 = _975 * (_932.y + (-0.5));
        float _978 = _975 * (_932.z + (-0.5));
        float _979 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _980 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _981 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _982 = _946 * 0.5;
        float _983 = _956 * 0.5;
        float _984 = _966 * 0.5;
        float _985 = dot(vec3(_982, _983, _984), vec3(_982, _983, _984));
        float _990 = (_985 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_985);
        float _999 = (dot(vec3(_553, _554, _555), vec3(_990 * _982, _990 * _983, _990 * _984)) + 1.0) * 0.5;
        float _3728 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1009 = sqrt(((_983 * _983) + (_982 * _982)) + (_984 * _984)) / (_979 + 9.9999997473787516355514526367188e-06);
        float _3739 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1011 = _1010 * 2.0;
        float _1015 = (1.0 - _1010) / (_1010 + 1.0);
        float _3750 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1025 = ((((1.0 - _1016) * (_1011 + 2.0)) * exp2(log2(isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * (_1011 + 1.0))) + _1016) * _979;
        float _1026 = _947 * 0.5;
        float _1027 = _957 * 0.5;
        float _1028 = _967 * 0.5;
        float _1029 = dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028));
        float _1034 = (_1029 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1029);
        float _1042 = (dot(vec3(_553, _554, _555), vec3(_1034 * _1026, _1034 * _1027, _1034 * _1028)) + 1.0) * 0.5;
        float _3761 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1051 = sqrt(((_1027 * _1027) + (_1026 * _1026)) + (_1028 * _1028)) / (_980 + 9.9999997473787516355514526367188e-06);
        float _3772 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1053 = _1052 * 2.0;
        float _1057 = (1.0 - _1052) / (_1052 + 1.0);
        float _3783 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1067 = ((((1.0 - _1058) * (_1053 + 2.0)) * exp2(log2(isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * (_1053 + 1.0))) + _1058) * _980;
        float _1068 = _948 * 0.5;
        float _1069 = _958 * 0.5;
        float _1070 = _968 * 0.5;
        float _1071 = dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070));
        float _1076 = (_1071 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1071);
        float _1084 = (dot(vec3(_553, _554, _555), vec3(_1076 * _1068, _1076 * _1069, _1076 * _1070)) + 1.0) * 0.5;
        float _3794 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1093 = sqrt(((_1069 * _1069) + (_1068 * _1068)) + (_1070 * _1070)) / (_981 + 9.9999997473787516355514526367188e-06);
        float _3805 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1095 = _1094 * 2.0;
        float _1099 = (1.0 - _1094) / (_1094 + 1.0);
        float _3816 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1109 = ((((1.0 - _1100) * (_1095 + 2.0)) * exp2(log2(isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (_1095 + 1.0))) + _1100) * _981;
        _1117 = _948;
        _1119 = _947;
        _1120 = _946;
        _1121 = _958;
        _1122 = _957;
        _1123 = _956;
        _1124 = _968;
        _1125 = _967;
        _1126 = _966;
        _1127 = _981;
        _1128 = _980;
        _1129 = _979;
        _1130 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0)));
        _1131 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0)));
        _1132 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)));
    }
    else
    {
        _1117 = _1118;
        _1119 = _1118;
        _1120 = _1118;
        _1121 = _1118;
        _1122 = _1118;
        _1123 = _1118;
        _1124 = _1118;
        _1125 = _1118;
        _1126 = _1118;
        _1127 = _1118;
        _1128 = _1118;
        _1129 = _1118;
        _1130 = 0.0;
        _1131 = 0.0;
        _1132 = 0.0;
    }
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1161 = fma(_787, cbModelParam._m0[30u].z, fma(_783, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _779));
        float _1165 = fma(_787, cbModelParam._m0[31u].z, fma(_783, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _779));
        float _1169 = fma(_787, cbModelParam._m0[32u].z, fma(_783, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _779));
        float _1192 = _779 + _553;
        float _1193 = _783 + _554;
        float _1194 = _787 + _555;
        float _1204 = fma(_1194, cbModelParam._m0[30u].z, fma(_1193, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1192)) - _1161;
        float _1205 = fma(_1194, cbModelParam._m0[31u].z, fma(_1193, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1192)) - _1165;
        float _1206 = fma(_1194, cbModelParam._m0[32u].z, fma(_1193, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1192)) - _1169;
        float _1210 = inversesqrt(dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206)));
        float _1223 = ((_1210 * _1204) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1161 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1224 = ((_1210 * _1205) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1165 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1225 = ((_1210 * _1206) / cbModelParam._m0[35u].z) + ((((((_1169 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1227 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        float _1260 = exp2((_1227.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1227.x + (-0.5));
        float _1262 = _1260 * (_1227.y + (-0.5));
        float _1263 = _1260 * (_1227.z + (-0.5));
        float _1270 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1234.x + (-0.5));
        float _1272 = _1270 * (_1234.y + (-0.5));
        float _1273 = _1270 * (_1234.z + (-0.5));
        float _1280 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = _1280 * (_1241.x + (-0.5));
        float _1282 = _1280 * (_1241.y + (-0.5));
        float _1283 = _1280 * (_1241.z + (-0.5));
        float _1290 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1248.x + (-0.5));
        float _1292 = _1290 * (_1248.y + (-0.5));
        float _1293 = _1290 * (_1248.z + (-0.5));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1296 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1297 = _1261 * 0.5;
        float _1298 = _1271 * 0.5;
        float _1299 = _1281 * 0.5;
        float _1300 = dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299));
        float _1305 = (_1300 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1300);
        float _1313 = (dot(vec3(_553, _554, _555), vec3(_1305 * _1297, _1305 * _1298, _1305 * _1299)) + 1.0) * 0.5;
        float _3857 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1322 = sqrt(((_1298 * _1298) + (_1297 * _1297)) + (_1299 * _1299)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _3868 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1324 = _1323 * 2.0;
        float _1328 = (1.0 - _1323) / (_1323 + 1.0);
        float _3879 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1338 = ((((1.0 - _1329) * (_1324 + 2.0)) * exp2(log2(isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * (_1324 + 1.0))) + _1329) * _1294;
        float _1339 = _1262 * 0.5;
        float _1340 = _1272 * 0.5;
        float _1341 = _1282 * 0.5;
        float _1342 = dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341));
        float _1347 = (_1342 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1342);
        float _1355 = (dot(vec3(_553, _554, _555), vec3(_1347 * _1339, _1347 * _1340, _1347 * _1341)) + 1.0) * 0.5;
        float _3890 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1364 = sqrt(((_1340 * _1340) + (_1339 * _1339)) + (_1341 * _1341)) / (_1295 + 9.9999997473787516355514526367188e-06);
        float _3901 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1366 = _1365 * 2.0;
        float _1370 = (1.0 - _1365) / (_1365 + 1.0);
        float _3912 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1380 = ((((1.0 - _1371) * (_1366 + 2.0)) * exp2(log2(isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * (_1366 + 1.0))) + _1371) * _1295;
        float _1381 = _1263 * 0.5;
        float _1382 = _1273 * 0.5;
        float _1383 = _1283 * 0.5;
        float _1384 = dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383));
        float _1389 = (_1384 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1384);
        float _1397 = (dot(vec3(_553, _554, _555), vec3(_1389 * _1381, _1389 * _1382, _1389 * _1383)) + 1.0) * 0.5;
        float _3923 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1406 = sqrt(((_1382 * _1382) + (_1381 * _1381)) + (_1383 * _1383)) / (_1296 + 9.9999997473787516355514526367188e-06);
        float _3934 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1408 = _1407 * 2.0;
        float _1412 = (1.0 - _1407) / (_1407 + 1.0);
        float _3945 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1422 = ((((1.0 - _1413) * (_1408 + 2.0)) * exp2(log2(isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * (_1408 + 1.0))) + _1413) * _1296;
        _1430 = _1263;
        _1431 = _1262;
        _1432 = _1261;
        _1433 = _1273;
        _1434 = _1272;
        _1435 = _1271;
        _1436 = _1283;
        _1437 = _1282;
        _1438 = _1281;
        _1439 = _1296;
        _1440 = _1295;
        _1441 = _1294;
        _1442 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)));
        _1443 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)));
        _1444 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)));
    }
    else
    {
        _1430 = _1118;
        _1431 = _1118;
        _1432 = _1118;
        _1433 = _1118;
        _1434 = _1118;
        _1435 = _1118;
        _1436 = _1118;
        _1437 = _1118;
        _1438 = _1118;
        _1439 = _1118;
        _1440 = _1118;
        _1441 = _1118;
        _1442 = 0.0;
        _1443 = 0.0;
        _1444 = 0.0;
    }
    float _1454 = (cbModelParam._m0[1u].x * (_1442 - _1130)) + _1130;
    float _1455 = (cbModelParam._m0[1u].x * (_1443 - _1131)) + _1131;
    float _1456 = (cbModelParam._m0[1u].x * (_1444 - _1132)) + _1132;
    float _1477 = fma(_1456, cbSceneParam._m0[89u].z, fma(_1455, cbSceneParam._m0[89u].y, _1454 * cbSceneParam._m0[89u].x));
    float _1480 = fma(_1456, cbSceneParam._m0[90u].z, fma(_1455, cbSceneParam._m0[90u].y, _1454 * cbSceneParam._m0[90u].x));
    float _1483 = fma(_1456, cbSceneParam._m0[91u].z, fma(_1455, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1454));
    float _1498 = _726 * 0.5;
    float _1499 = _727 * 0.5;
    float _1500 = _728 * 0.5;
    float _1501 = dot(vec4(_1498, _1499, _1500, 1.0), vec4(_1432, _1435, _1438, _1441));
    float _1504 = dot(vec4(_1498, _1499, _1500, 1.0), vec4(_1431, _1434, _1437, _1440));
    float _1507 = dot(vec4(_1498, _1499, _1500, 1.0), vec4(_1430, _1433, _1436, _1439));
    float _1541;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1514 = dot(vec4(_1498, _1499, _1500, 1.0), vec4(_1117, _1121, _1124, _1127));
        float _1518 = dot(vec4(_1498, _1499, _1500, 1.0), vec4(_1119, _1122, _1125, _1128));
        float _1522 = dot(vec4(_1498, _1499, _1500, 1.0), vec4(_1120, _1123, _1126, _1129));
        float _1529 = dot(vec4(cbModelParam._m0[39u]), vec4(_1498, _1499, _1500, 1.0));
        _1541 = dot(vec3(isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)), isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)), isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1529) ? 0.0 : (isnan(0.0) ? _1529 : max(0.0, _1529))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1541 = 1.0;
    }
    float _1552;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1543 = dot(vec4(cbModelParam._m0[40u]), vec4(_1498, _1499, _1500, 1.0));
        _1552 = dot(vec3(isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)), isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)), isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1543) ? 0.0 : (isnan(0.0) ? _1543 : max(0.0, _1543))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1552 = 1.0;
    }
    float _1556 = (_1552 * cbModelParam._m0[1u].x) + (_1541 * (1.0 - cbModelParam._m0[1u].x));
    float _1566 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _556);
    float _1567 = isnan(_1566) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1566 : min(cbModelParam._m0[25u].z, _1566));
    float _1647;
    float _1649;
    float _1651;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1614 = fma(_787, cbModelParam._m0[13u].z, fma(_783, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _779)) + cbModelParam._m0[13u].w;
        float _1618 = fma(_787, cbModelParam._m0[14u].z, fma(_783, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _779)) + cbModelParam._m0[14u].w;
        float _1622 = fma(_787, cbModelParam._m0[15u].z, fma(_783, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _779)) + cbModelParam._m0[15u].w;
        float _1625 = fma(_728, cbModelParam._m0[13u].z, fma(_727, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _726));
        float _1628 = fma(_728, cbModelParam._m0[14u].z, fma(_727, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _726));
        float _1631 = fma(_728, cbModelParam._m0[15u].z, fma(_727, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _726));
        float _1659;
        if (_1625 > 0.0)
        {
            _1659 = abs((1.0 - _1614) / _1625);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1614 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1659 = frontier_phi_17_15_ladder;
        }
        float _1861;
        if (_1628 > 0.0)
        {
            _1861 = abs((1.0 - _1618) / _1628);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1628 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1618 + 1.0) / _1628);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1861 = frontier_phi_26_22_ladder;
        }
        float _2104;
        if (_1631 > 0.0)
        {
            _2104 = abs((1.0 - _1622) / _1631);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1622 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2104 = frontier_phi_38_33_ladder;
        }
        float _2106 = isnan(_1861) ? _1659 : (isnan(_1659) ? _1861 : min(_1659, _1861));
        float _2107 = isnan(_2104) ? _2106 : (isnan(_2106) ? _2104 : min(_2106, _2104));
        float _2111 = (_2107 * _1625) + _1614;
        float _2112 = (_2107 * _1628) + _1618;
        float _2113 = (_2107 * _1631) + _1622;
        float _2114 = _2107 * 9.9999997473787516355514526367188e-05;
        float _2116 = (-1.0) - _2114;
        float _2118 = _2114 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2113 > _2118) || ((_2113 < _2116) || ((_2112 > _2118) || ((_2112 < _2116) || ((_2111 < _2116) || (_2111 > _2118))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2237 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2113, cbModelParam._m0[9u].z, fma(_2112, cbModelParam._m0[9u].y, _2111 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2113, cbModelParam._m0[10u].z, fma(_2112, cbModelParam._m0[10u].y, _2111 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2113, cbModelParam._m0[11u].z, fma(_2112, cbModelParam._m0[11u].y, _2111 * cbModelParam._m0[11u].x))), _1567);
            frontier_phi_16_38_ladder = _2237.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2237.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2237.x * cbModelParam._m0[1u].y;
        }
        _1647 = frontier_phi_16_38_ladder_2;
        _1649 = frontier_phi_16_38_ladder_1;
        _1651 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1635 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_726, _727, _728), _1567);
        _1647 = _1635.x * cbModelParam._m0[1u].y;
        _1649 = _1635.y * cbModelParam._m0[1u].y;
        _1651 = _1635.z * cbModelParam._m0[1u].y;
    }
    float _1655 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _556);
    float _1656 = isnan(_1655) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1655 : min(cbModelParam._m0[25u].w, _1655));
    float _1747;
    float _1749;
    float _1751;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1711 = fma(_787, cbModelParam._m0[21u].z, fma(_783, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _779)) + cbModelParam._m0[21u].w;
        float _1715 = fma(_787, cbModelParam._m0[22u].z, fma(_783, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _779)) + cbModelParam._m0[22u].w;
        float _1719 = fma(_787, cbModelParam._m0[23u].z, fma(_783, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _779)) + cbModelParam._m0[23u].w;
        float _1722 = fma(_728, cbModelParam._m0[21u].z, fma(_727, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _726));
        float _1725 = fma(_728, cbModelParam._m0[22u].z, fma(_727, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _726));
        float _1728 = fma(_728, cbModelParam._m0[23u].z, fma(_727, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _726));
        float _1866;
        if (_1722 > 0.0)
        {
            _1866 = abs((1.0 - _1711) / _1722);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1722 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1711 + 1.0) / _1722);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1866 = frontier_phi_28_24_ladder;
        }
        float _2131;
        if (_1725 > 0.0)
        {
            _2131 = abs((1.0 - _1715) / _1725);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1725 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1715 + 1.0) / _1725);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2131 = frontier_phi_40_35_ladder;
        }
        float _2336;
        if (_1728 > 0.0)
        {
            _2336 = abs((1.0 - _1719) / _1728);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1719 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2336 = frontier_phi_49_46_ladder;
        }
        float _2338 = isnan(_2131) ? _1866 : (isnan(_1866) ? _2131 : min(_1866, _2131));
        float _2339 = isnan(_2336) ? _2338 : (isnan(_2338) ? _2336 : min(_2338, _2336));
        float _2343 = (_2339 * _1722) + _1711;
        float _2344 = (_2339 * _1725) + _1715;
        float _2345 = (_2339 * _1728) + _1719;
        float _2346 = _2339 * 9.9999997473787516355514526367188e-05;
        float _2347 = (-1.0) - _2346;
        float _2349 = _2346 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2345 > _2349) || ((_2345 < _2347) || ((_2344 > _2349) || ((_2344 < _2347) || ((_2343 < _2347) || (_2343 > _2349))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2579 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2345, cbModelParam._m0[17u].z, fma(_2344, cbModelParam._m0[17u].y, _2343 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2345, cbModelParam._m0[18u].z, fma(_2344, cbModelParam._m0[18u].y, _2343 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2345, cbModelParam._m0[19u].z, fma(_2344, cbModelParam._m0[19u].y, _2343 * cbModelParam._m0[19u].x))), _1656);
            frontier_phi_25_49_ladder = _2579.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2579.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2579.x * cbModelParam._m0[1u].z;
        }
        _1747 = frontier_phi_25_49_ladder_2;
        _1749 = frontier_phi_25_49_ladder_1;
        _1751 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1731 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_726, _727, _728), _1656);
        _1747 = _1731.x * cbModelParam._m0[1u].z;
        _1749 = _1731.y * cbModelParam._m0[1u].z;
        _1751 = _1731.z * cbModelParam._m0[1u].z;
    }
    float _1763 = ((((1.0 - _747) * ((_734 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_747 * _734)) * _718;
    float _1764 = _1763 * ((cbModelParam._m0[1u].w * (_1747 - _1647)) + _1647);
    float _1765 = _1763 * ((cbModelParam._m0[1u].w * (_1749 - _1649)) + _1649);
    float _1766 = _1763 * ((cbModelParam._m0[1u].w * (_1751 - _1651)) + _1651);
    float _1769 = fma(_1766, cbSceneParam._m0[89u].z, fma(_1765, cbSceneParam._m0[89u].y, _1764 * cbSceneParam._m0[89u].x));
    float _1772 = fma(_1766, cbSceneParam._m0[90u].z, fma(_1765, cbSceneParam._m0[90u].y, _1764 * cbSceneParam._m0[90u].x));
    float _1775 = fma(_1766, cbSceneParam._m0[91u].z, fma(_1765, cbSceneParam._m0[91u].y, _1764 * cbSceneParam._m0[91u].x));
    uvec4 _1785 = floatBitsToUint(cbInstanceData._m0[_693 + 5u]);
    uint _1787 = _1785.x * 14u;
    uint _1788 = _1787 + 13u;
    float _1795 = _718 + (-1.0);
    float _1800 = (cbLight._m0[_1788].x * _1795) + 1.0;
    float _1801 = (cbLight._m0[_1788].y * _1795) + 1.0;
    float _1802 = (cbLight._m0[_1788].z * _1795) + 1.0;
    float _1803 = (cbLight._m0[_1788].w * _1795) + 1.0;
    uint _1804 = _1787 + 5u;
    float _1810 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
    uint _1814 = _1787 + 4u;
    float _1820 = isnan(1.0) ? _1800 : (isnan(_1800) ? 1.0 : min(_1800, 1.0));
    uint _1824 = _1787 | 1u;
    float _1835 = dot(vec3(cbLight._m0[_1787].xyz), vec3(_553, _554, _555));
    float _1838 = dot(vec3(cbLight._m0[_1824].xyz), vec3(_553, _554, _555));
    float _4081 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _4092 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
    float _1843 = (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * 0.3183098733425140380859375;
    float _1845 = (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * 0.3183098733425140380859375;
    float _1852 = ((cbLight._m0[_1804].x * _1810) * _1845) + ((cbLight._m0[_1814].x * _1820) * _1843);
    float _1853 = ((_1810 * cbLight._m0[_1804].y) * _1845) + ((_1820 * cbLight._m0[_1814].y) * _1843);
    float _1854 = ((_1810 * cbLight._m0[_1804].z) * _1845) + ((_1820 * cbLight._m0[_1814].z) * _1843);
    uvec4 _1858 = floatBitsToUint(cbLight._m0[_1787 + 12u]);
    bool _1860 = _1858.x == 0u;
    float _1871;
    float _1873;
    float _1875;
    if (_1860)
    {
        _1871 = _1852;
        _1873 = _1853;
        _1875 = _1854;
    }
    else
    {
        uint _1879 = _1787 + 6u;
        float _1895 = (dot(vec3(cbLight._m0[_1787 + 2u].xyz), vec3(_553, _554, _555)) * 0.5) + 0.5;
        float _1896 = _1895 * _1895;
        float _4103 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
        float _1897 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1898 = isnan(1.0) ? _1802 : (isnan(_1802) ? 1.0 : min(_1802, 1.0));
        _1871 = (((cbLight._m0[_1879].x * 0.3183098733425140380859375) * _1897) * _1898) + _1852;
        _1873 = (((cbLight._m0[_1879].y * 0.3183098733425140380859375) * _1897) * _1898) + _1853;
        _1875 = (((cbLight._m0[_1879].z * 0.3183098733425140380859375) * _1897) * _1898) + _1854;
    }
    bool _1878 = _1858.y == 0u;
    float _1916;
    float _1918;
    float _1920;
    if (_1878)
    {
        _1916 = _1871;
        _1918 = _1873;
        _1920 = _1875;
    }
    else
    {
        uint _2075 = _1787 + 7u;
        float _2091 = (dot(vec3(cbLight._m0[_1787 + 3u].xyz), vec3(_553, _554, _555)) * 0.5) + 0.5;
        float _2092 = _2091 * _2091;
        float _4119 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2093 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _2094 = isnan(1.0) ? _1803 : (isnan(_1803) ? 1.0 : min(_1803, 1.0));
        _1916 = (((cbLight._m0[_2075].x * 0.3183098733425140380859375) * _2093) * _2094) + _1871;
        _1918 = (((cbLight._m0[_2075].y * 0.3183098733425140380859375) * _2093) * _2094) + _1873;
        _1920 = (((cbLight._m0[_2075].z * 0.3183098733425140380859375) * _2093) * _2094) + _1875;
    }
    uint _1923 = _1787 + 8u;
    float _1936 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1787].w)) * _556) * 0.949999988079071044921875);
    float _1937 = _1936 * _1936;
    float _1938 = cbLight._m0[_1787].x + _633;
    float _1939 = cbLight._m0[_1787].y + _634;
    float _1940 = cbLight._m0[_1787].z + _635;
    float _1944 = inversesqrt(dot(vec3(_1938, _1939, _1940), vec3(_1938, _1939, _1940)));
    float _1945 = _1944 * _1938;
    float _1946 = _1944 * _1939;
    float _1947 = _1944 * _1940;
    float _1948 = dot(vec3(_553, _554, _555), vec3(cbLight._m0[_1787].xyz));
    float _4135 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1951 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _4146 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _1952 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _1953 = dot(vec3(_553, _554, _555), vec3(_1945, _1946, _1947));
    float _4157 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1956 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
    float _1957 = dot(vec3(cbLight._m0[_1787].xyz), vec3(_1945, _1946, _1947));
    float _4168 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1961 = _1937 * _1937;
    float _1965 = ((_1956 * _1956) * (_1961 + (-1.0))) + 1.0;
    float _1976 = (exp2(log2(1.0 - (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1977 = 1.0 - _1937;
    float _1988 = (0.5 / (((_1952 * ((_1951 * _1977) + _1937)) + 9.9999999392252902907785028219223e-09) + (((_1952 * _1977) + _1937) * _1951))) * _1951;
    float _4179 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _1990 = (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (_1961 / ((_1965 * _1965) * 3.141590118408203125));
    uint _2001 = _1787 + 9u;
    float _2012 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1824].w)) * _556) * 0.949999988079071044921875);
    float _2013 = _2012 * _2012;
    float _2014 = cbLight._m0[_1824].x + _633;
    float _2015 = cbLight._m0[_1824].y + _634;
    float _2016 = cbLight._m0[_1824].z + _635;
    float _2020 = inversesqrt(dot(vec3(_2014, _2015, _2016), vec3(_2014, _2015, _2016)));
    float _2021 = _2020 * _2014;
    float _2022 = _2020 * _2015;
    float _2023 = _2020 * _2016;
    float _2024 = dot(vec3(_553, _554, _555), vec3(cbLight._m0[_1824].xyz));
    float _4190 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2027 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _2028 = dot(vec3(_553, _554, _555), vec3(_2021, _2022, _2023));
    float _4201 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2031 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _2032 = dot(vec3(cbLight._m0[_1824].xyz), vec3(_2021, _2022, _2023));
    float _4212 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
    float _2036 = _2013 * _2013;
    float _2040 = ((_2031 * _2031) * (_2036 + (-1.0))) + 1.0;
    float _2049 = (exp2(log2(1.0 - (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2050 = 1.0 - _2013;
    float _2060 = (0.5 / (((_1952 * ((_2027 * _2050) + _2013)) + 9.9999999392252902907785028219223e-09) + (((_1952 * _2050) + _2013) * _2027))) * _2027;
    float _4223 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2062 = (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_2036 / ((_2040 * _2040) * 3.141590118408203125));
    float _2072 = (((_2049 * cbLight._m0[_2001].x) * _2062) * _1810) + (((_1976 * cbLight._m0[_1923].x) * _1990) * _1820);
    float _2073 = (((_2049 * cbLight._m0[_2001].y) * _2062) * _1810) + (((_1976 * cbLight._m0[_1923].y) * _1990) * _1820);
    float _2074 = (((_2049 * cbLight._m0[_2001].z) * _2062) * _1810) + (((_1976 * cbLight._m0[_1923].z) * _1990) * _1820);
    float _2136;
    float _2138;
    float _2140;
    if (_1860)
    {
        _2136 = _2072;
        _2138 = _2073;
        _2140 = _2074;
    }
    else
    {
        uint _2142 = _1787 + 2u;
        uint _2146 = _1787 + 10u;
        float _2160 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2142].w)) * _556) * 0.949999988079071044921875);
        float _2161 = _2160 * _2160;
        float _2162 = cbLight._m0[_2142].x + _633;
        float _2163 = cbLight._m0[_2142].y + _634;
        float _2164 = cbLight._m0[_2142].z + _635;
        float _2168 = inversesqrt(dot(vec3(_2162, _2163, _2164), vec3(_2162, _2163, _2164)));
        float _2169 = _2168 * _2162;
        float _2170 = _2168 * _2163;
        float _2171 = _2168 * _2164;
        float _2172 = dot(vec3(_553, _554, _555), vec3(cbLight._m0[_2142].xyz));
        float _4234 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        float _2175 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _2176 = dot(vec3(_553, _554, _555), vec3(_2169, _2170, _2171));
        float _4245 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        float _2179 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _2180 = dot(vec3(cbLight._m0[_2142].xyz), vec3(_2169, _2170, _2171));
        float _4256 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        float _2184 = _2161 * _2161;
        float _2188 = ((_2179 * _2179) * (_2184 + (-1.0))) + 1.0;
        float _2197 = (exp2(log2(1.0 - (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2198 = 1.0 - _2161;
        float _2208 = (0.5 / (((_1952 * ((_2175 * _2198) + _2161)) + 9.9999999392252902907785028219223e-09) + (((_1952 * _2198) + _2161) * _2175))) * _2175;
        float _4267 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2210 = (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_2184 / ((_2188 * _2188) * 3.141590118408203125));
        float _2211 = isnan(1.0) ? _1802 : (isnan(_1802) ? 1.0 : min(_1802, 1.0));
        _2136 = (((_2197 * cbLight._m0[_2146].x) * _2210) * _2211) + _2072;
        _2138 = (((_2197 * cbLight._m0[_2146].y) * _2210) * _2211) + _2073;
        _2140 = (((_2197 * cbLight._m0[_2146].z) * _2210) * _2211) + _2074;
    }
    float _2246;
    float _2248;
    float _2250;
    if (_1878)
    {
        _2246 = _2136;
        _2248 = _2138;
        _2250 = _2140;
    }
    else
    {
        uint _2257 = _1787 + 3u;
        uint _2261 = _1787 + 11u;
        float _2275 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2257].w)) * _556) * 0.949999988079071044921875);
        float _2276 = _2275 * _2275;
        float _2277 = cbLight._m0[_2257].x + _633;
        float _2278 = cbLight._m0[_2257].y + _634;
        float _2279 = cbLight._m0[_2257].z + _635;
        float _2283 = inversesqrt(dot(vec3(_2277, _2278, _2279), vec3(_2277, _2278, _2279)));
        float _2284 = _2283 * _2277;
        float _2285 = _2283 * _2278;
        float _2286 = _2283 * _2279;
        float _2287 = dot(vec3(_553, _554, _555), vec3(cbLight._m0[_2257].xyz));
        float _4283 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2290 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _2291 = dot(vec3(_553, _554, _555), vec3(_2284, _2285, _2286));
        float _4294 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        float _2294 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _2295 = dot(vec3(cbLight._m0[_2257].xyz), vec3(_2284, _2285, _2286));
        float _4305 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        float _2299 = _2276 * _2276;
        float _2303 = ((_2294 * _2294) * (_2299 + (-1.0))) + 1.0;
        float _2312 = (exp2(log2(1.0 - (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2313 = 1.0 - _2276;
        float _2323 = (0.5 / (((_1952 * ((_2290 * _2313) + _2276)) + 9.9999999392252902907785028219223e-09) + (((_1952 * _2313) + _2276) * _2290))) * _2290;
        float _4316 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2325 = (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2299 / ((_2303 * _2303) * 3.141590118408203125));
        float _2326 = isnan(1.0) ? _1803 : (isnan(_1803) ? 1.0 : min(_1803, 1.0));
        _2246 = (((_2312 * cbLight._m0[_2261].x) * _2325) * _2326) + _2136;
        _2248 = (((_2312 * cbLight._m0[_2261].y) * _2325) * _2326) + _2138;
        _2250 = (((_2312 * cbLight._m0[_2261].z) * _2325) * _2326) + _2140;
    }
    float _2461;
    float _2463;
    float _2465;
    float _2467;
    float _2469;
    float _2471;
    if (_1785.y == 0u)
    {
        float _2401 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2402 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2401;
        float _2403 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2401;
        float _2404 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2401;
        uvec4 _2416 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2417 = _2416.x;
        uint _2428 = uint((float(_2416.y) * floor(float(uint(cbSceneParam._m0[85u].y * _655) / _2417))) + floor(float(uint(cbSceneParam._m0[85u].x * _654) / _2417)));
        float _2438 = (log2(_2404 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2439 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        uint _2442 = uint(isnan(14.0) ? _2439 : (isnan(_2439) ? 14.0 : min(_2439, 14.0)));
        uvec4 _2447 = texelFetch(g_lightClusterGridBuffer, int(((_2442 << 2u) + (_2428 << 6u)) >> 2u));
        uint _2448 = _2447.x;
        uint _2449 = _2416.z;
        float _2584;
        float _2586;
        float _2588;
        float _2590;
        float _2592;
        float _2594;
        if (((((1u << ((_2449 >> 4u) & 15u)) + 4294967295u) & _2448) == 0u) || ((_2449 & 240u) == 0u))
        {
            _2584 = 0.0;
            _2586 = 0.0;
            _2588 = 0.0;
            _2590 = 0.0;
            _2592 = 0.0;
            _2594 = 0.0;
        }
        else
        {
            float _2585;
            float _2587;
            float _2589;
            float _2591;
            float _2593;
            float _2595;
            float _2746 = 0.0;
            float _2747 = 0.0;
            float _2748 = 0.0;
            float _2749 = 0.0;
            float _2750 = 0.0;
            float _2751 = 0.0;
            uint _2752 = 0u;
            uint _2761;
            bool _2762;
            for (;;)
            {
                _2761 = texelFetch(g_lightClassification, int((((_2442 << 5u) + (_2428 << 9u)) + (_2752 << 2u)) >> 2u)).x;
                _2762 = _2761 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2762)
                {
                    frontier_phi_66_pred = _2746;
                    frontier_phi_66_pred_1 = _2751;
                    frontier_phi_66_pred_2 = _2750;
                    frontier_phi_66_pred_3 = _2749;
                    frontier_phi_66_pred_4 = _2748;
                    frontier_phi_66_pred_5 = _2747;
                }
                else
                {
                    float _2891;
                    float _2892;
                    float _2893;
                    float _2894;
                    float _2895;
                    float _2896;
                    uint _2897;
                    _2891 = _2746;
                    _2892 = _2747;
                    _2893 = _2748;
                    _2894 = _2749;
                    _2895 = _2750;
                    _2896 = _2751;
                    _2897 = _2761;
                    float _2818;
                    float _2819;
                    float _2820;
                    float _2821;
                    float _2822;
                    float _2823;
                    for (;;)
                    {
                        uint _2901 = uint(findLSB(_2897)) + (_2752 << 5u);
                        uint _2898 = (_2897 + 4294967295u) & _2897;
                        uint _2903 = _2901 * 48u;
                        vec4 _2917 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2903)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 3u)).x));
                        uint _2923 = (_2901 * 48u) + 4u;
                        vec4 _2936 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2923)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 3u)).x));
                        uint _2942 = (_2901 * 48u) + 8u;
                        vec3 _2953 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2942)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 2u)).x));
                        float _2957 = _2917.x - _2402;
                        float _2958 = _2917.y - _2403;
                        float _2959 = _2917.z - _2404;
                        float _2960 = dot(vec3(_2957, _2958, _2959), vec3(_2957, _2958, _2959));
                        float _2963 = inversesqrt(_2960);
                        float _2964 = _2963 * _2957;
                        float _2965 = _2963 * _2958;
                        float _2966 = _2963 * _2959;
                        float _2967 = dot(vec3(_674, _677, _680), vec3(_2964, _2965, _2966));
                        float _2972 = 1.0 - (_2960 * _2917.w);
                        float _4342 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
                        float _2973 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
                        float _2974 = sqrt(_2960) * _2936.w;
                        float _2977 = 1.39999997615814208984375 / (_2974 + 1.39999997615814208984375);
                        float _2978 = _2977 * _2977;
                        float _2981 = ((1.0 - _2978) * _2967) + _2978;
                        float _2984 = _2974 * _2974;
                        float _2988 = ((isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0))) * _2973) / ((_2984 * 0.699999988079071044921875) + 1.0);
                        float _2992 = (-0.0) - _2402;
                        float _2993 = (-0.0) - _2403;
                        float _2994 = (-0.0) - _2404;
                        float _2998 = inversesqrt(dot(vec3(_2992, _2993, _2994), vec3(_2992, _2993, _2994)));
                        float _2999 = _2998 * _2992;
                        float _3000 = _2998 * _2993;
                        float _3001 = _2998 * _2994;
                        float _3009 = exp2(log2(1.0 / ((_2984 * 3.5) + 5.0)) * 0.25);
                        float _3010 = 1.0 - _734;
                        float _3017 = sqrt(1.0 - ((1.0 - (_3010 * _3010)) * (1.0 - (_3009 * _3009))));
                        float _3018 = _3017 * _3017;
                        float _3019 = _3018 * _3018;
                        float _3020 = _2999 + _2964;
                        float _3021 = _3000 + _2965;
                        float _3022 = _3001 + _2966;
                        float _3026 = inversesqrt(dot(vec3(_3020, _3021, _3022), vec3(_3020, _3021, _3022)));
                        float _3030 = dot(vec3(_674, _677, _680), vec3(_2999, _3000, _3001));
                        float _4358 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                        float _3033 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
                        float _3034 = dot(vec3(_674, _677, _680), vec3(_3026 * _3020, _3026 * _3021, _3026 * _3022));
                        float _4369 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                        float _3037 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
                        float _3041 = ((_3037 * _3037) * (_3019 + (-1.0))) + 1.0;
                        float _3042 = _2977 * _3018;
                        float _3043 = _3042 * _3042;
                        float _3046 = ((1.0 - _3043) * _2967) + _3043;
                        float _4380 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                        float _3047 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
                        float _3048 = 1.0 - _3018;
                        float _3058 = (0.5 / (((_3047 * ((_3033 * _3048) + _3018)) + 9.9999999392252902907785028219223e-09) + (((_3047 * _3048) + _3018) * _3033))) * _3047;
                        float _4391 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
                        float _3069 = (((_3019 * 3.1415927410125732421875) * (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0)))) / ((_3041 * _3041) * ((_2984 * 2.1991131305694580078125) + 3.141590118408203125))) * _2973;
                        _2821 = (_2988 * _2936.x) + _2894;
                        _2822 = (_2988 * _2936.y) + _2895;
                        _2823 = (_2988 * _2936.z) + _2896;
                        _2818 = (_3069 * _2953.x) + _2891;
                        _2819 = (_3069 * _2953.y) + _2892;
                        _2820 = (_3069 * _2953.z) + _2893;
                        if (_2898 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2891 = _2818;
                            _2892 = _2819;
                            _2893 = _2820;
                            _2894 = _2821;
                            _2895 = _2822;
                            _2896 = _2823;
                            _2897 = _2898;
                        }
                    }
                    frontier_phi_66_pred = _2818;
                    frontier_phi_66_pred_1 = _2823;
                    frontier_phi_66_pred_2 = _2822;
                    frontier_phi_66_pred_3 = _2821;
                    frontier_phi_66_pred_4 = _2820;
                    frontier_phi_66_pred_5 = _2819;
                }
                _2585 = frontier_phi_66_pred;
                _2595 = frontier_phi_66_pred_1;
                _2593 = frontier_phi_66_pred_2;
                _2591 = frontier_phi_66_pred_3;
                _2589 = frontier_phi_66_pred_4;
                _2587 = frontier_phi_66_pred_5;
                uint _2753 = _2752 + 1u;
                if (_2753 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2746 = _2585;
                    _2747 = _2587;
                    _2748 = _2589;
                    _2749 = _2591;
                    _2750 = _2593;
                    _2751 = _2595;
                    _2752 = _2753;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2584 = _2585;
            _2586 = _2587;
            _2588 = _2589;
            _2590 = _2591;
            _2592 = _2593;
            _2594 = _2595;
        }
        uvec4 _2598 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2599 = _2598.z;
        uint _2601 = (_2599 >> 8u) & 15u;
        float _2714;
        float _2716;
        float _2718;
        float _2720;
        float _2722;
        float _2724;
        if (((4294967295u << _2601) & _2448) == 0u)
        {
            _2714 = _2584;
            _2716 = _2586;
            _2718 = _2588;
            _2720 = _2590;
            _2722 = _2592;
            _2724 = _2594;
        }
        else
        {
            float _2739 = inversesqrt(dot(vec3(_2402, _2403, _2404), vec3(_2402, _2403, _2404)));
            float _2740 = _2739 * _2402;
            float _2741 = _2739 * _2403;
            float _2742 = _2739 * _2404;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2601 < ((_2599 >> 12u) & 15u))
            {
                float _2715;
                float _2717;
                float _2719;
                float _2721;
                float _2723;
                float _2725;
                float _2874 = _2584;
                float _2875 = _2586;
                float _2876 = _2588;
                float _2877 = _2590;
                float _2878 = _2592;
                float _2879 = _2594;
                uint _2880 = _2601;
                uint _2889;
                bool _2890;
                for (;;)
                {
                    _2889 = texelFetch(g_lightClassification, int((((_2442 << 5u) + (_2428 << 9u)) + (_2880 << 2u)) >> 2u)).x;
                    _2890 = _2889 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2890)
                    {
                        frontier_phi_77_pred = _2879;
                        frontier_phi_77_pred_1 = _2878;
                        frontier_phi_77_pred_2 = _2877;
                        frontier_phi_77_pred_3 = _2876;
                        frontier_phi_77_pred_4 = _2875;
                        frontier_phi_77_pred_5 = _2874;
                    }
                    else
                    {
                        float _3083;
                        float _3084;
                        float _3085;
                        float _3086;
                        float _3087;
                        float _3088;
                        float _3378;
                        float _3379;
                        float _3380;
                        float _3381;
                        float _3382;
                        float _3383;
                        float _3096 = _2874;
                        float _3097 = _2875;
                        float _3098 = _2876;
                        float _3099 = _2877;
                        float _3100 = _2878;
                        float _3101 = _2879;
                        uint _3102 = _2889;
                        uint _3103;
                        vec4 _3128;
                        float _3129;
                        vec4 _3144;
                        vec3 _3156;
                        vec4 _3171;
                        vec4 _3187;
                        float _3234;
                        bool _3235;
                        for (;;)
                        {
                            uint _3113 = ((_2880 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3102));
                            _3103 = (_3102 + 4294967295u) & _3102;
                            uint _3115 = _3113 * 40u;
                            _3128 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 3u)).x));
                            _3129 = _3128.w;
                            uint _3131 = (_3113 * 40u) + 4u;
                            _3144 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3131)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 3u)).x));
                            uint _3146 = (_3113 * 40u) + 8u;
                            _3156 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3146)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 2u)).x));
                            uint _3158 = (_3113 * 40u) + 16u;
                            _3171 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 3u)).x));
                            uint _3174 = (_3113 * 40u) + 20u;
                            _3187 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3174)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 3u)).x));
                            uint _3190 = (_3113 * 40u) + 24u;
                            vec4 _3203 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3190)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 3u)).x));
                            uint _3209 = (_3113 * 40u) + 28u;
                            vec4 _3222 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3209)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 3u)).x));
                            _3234 = fma(_2404, _3222.z, fma(_2403, _3222.y, _3222.x * _2402)) + _3222.w;
                            _3235 = !((fma(_2404, _3203.z, fma(_2403, _3203.y, _3203.x * _2402)) + _3203.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3235)
                            {
                                float _3262 = _3128.x - _2402;
                                float _3263 = _3128.y - _2403;
                                float _3264 = _3128.z - _2404;
                                float _3265 = dot(vec3(_3262, _3263, _3264), vec3(_3262, _3263, _3264));
                                float _3268 = inversesqrt(_3265);
                                float _3269 = _3268 * _3262;
                                float _3270 = _3268 * _3263;
                                float _3271 = _3268 * _3264;
                                float _3275 = 1.0 - (_3265 / (_3129 * _3129));
                                float _4402 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                                float _3276 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                                float _3280 = sqrt(_3265) * _3144.w;
                                float _3282 = 1.39999997615814208984375 / (_3280 + 1.39999997615814208984375);
                                float _3283 = _3282 * _3282;
                                float _3286 = ((1.0 - _3283) * dot(vec3(_3269, _3270, _3271), vec3(_674, _677, _680))) + _3283;
                                float _3289 = _3280 * _3280;
                                float _3293 = (fma(_2404, _3171.z, fma(_2403, _3171.y, _3171.x * _2402)) + _3171.w) / _3234;
                                float _3294 = (fma(_2404, _3187.z, fma(_2403, _3187.y, _3187.x * _2402)) + _3187.w) / _3234;
                                float _3298 = 1.0 - dot(vec2(_3293, _3294), vec2(_3293, _3294));
                                float _4418 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                                float _3299 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
                                float _3300 = _3299 * (((isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0))) * _3276) / ((_3289 * 0.699999988079071044921875) + 1.0));
                                float _3312 = exp2(log2(1.0 / ((_3289 * 3.5) + 5.0)) * 0.25);
                                float _3313 = 1.0 - _734;
                                float _3320 = sqrt(1.0 - ((1.0 - (_3313 * _3313)) * (1.0 - (_3312 * _3312))));
                                float _3321 = _3320 * _3320;
                                float _3322 = _3321 * _3321;
                                float _3323 = _3269 - _2740;
                                float _3324 = _3270 - _2741;
                                float _3325 = _3271 - _2742;
                                float _3329 = inversesqrt(dot(vec3(_3323, _3324, _3325), vec3(_3323, _3324, _3325)));
                                float _3333 = dot(vec3(_674, _677, _680), vec3((-0.0) - _2740, (-0.0) - _2741, (-0.0) - _2742));
                                float _4429 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                                float _3336 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
                                float _3337 = dot(vec3(_674, _677, _680), vec3(_3329 * _3323, _3329 * _3324, _3329 * _3325));
                                float _4440 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                                float _3340 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
                                float _3344 = ((_3340 * _3340) * (_3322 + (-1.0))) + 1.0;
                                float _3345 = _3282 * _3321;
                                float _3346 = _3345 * _3345;
                                float _3352 = ((1.0 - _3346) * dot(vec3(_674, _677, _680), vec3(_3269, _3270, _3271))) + _3346;
                                float _4451 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                                float _3353 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
                                float _3354 = 1.0 - _3321;
                                float _3364 = (0.5 / (((_3353 * ((_3336 * _3354) + _3321)) + 9.9999999392252902907785028219223e-09) + (((_3353 * _3354) + _3321) * _3336))) * _3353;
                                float _4462 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                                float _3374 = (_3299 * _3276) * (((_3322 * 3.1415927410125732421875) * (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0)))) / ((_3344 * _3344) * ((_3289 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3300 * _3144.y;
                                frontier_phi_83_pred_1 = _3300 * _3144.x;
                                frontier_phi_83_pred_2 = _3374 * _3156.z;
                                frontier_phi_83_pred_3 = _3374 * _3156.y;
                                frontier_phi_83_pred_4 = _3374 * _3156.x;
                                frontier_phi_83_pred_5 = _3300 * _3144.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3382 = frontier_phi_83_pred;
                            _3381 = frontier_phi_83_pred_1;
                            _3380 = frontier_phi_83_pred_2;
                            _3379 = frontier_phi_83_pred_3;
                            _3378 = frontier_phi_83_pred_4;
                            _3383 = frontier_phi_83_pred_5;
                            _3086 = _3381 + _3099;
                            _3087 = _3382 + _3100;
                            _3088 = _3383 + _3101;
                            _3083 = _3378 + _3096;
                            _3084 = _3379 + _3097;
                            _3085 = _3380 + _3098;
                            if (_3103 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3096 = _3083;
                                _3097 = _3084;
                                _3098 = _3085;
                                _3099 = _3086;
                                _3100 = _3087;
                                _3101 = _3088;
                                _3102 = _3103;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3088;
                        frontier_phi_77_pred_1 = _3087;
                        frontier_phi_77_pred_2 = _3086;
                        frontier_phi_77_pred_3 = _3085;
                        frontier_phi_77_pred_4 = _3084;
                        frontier_phi_77_pred_5 = _3083;
                    }
                    _2725 = frontier_phi_77_pred;
                    _2723 = frontier_phi_77_pred_1;
                    _2721 = frontier_phi_77_pred_2;
                    _2719 = frontier_phi_77_pred_3;
                    _2717 = frontier_phi_77_pred_4;
                    _2715 = frontier_phi_77_pred_5;
                    uint _2881 = _2880 + 1u;
                    if (_2881 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2874 = _2715;
                        _2875 = _2717;
                        _2876 = _2719;
                        _2877 = _2721;
                        _2878 = _2723;
                        _2879 = _2725;
                        _2880 = _2881;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2719;
                frontier_phi_58_59_ladder_1 = _2725;
                frontier_phi_58_59_ladder_2 = _2723;
                frontier_phi_58_59_ladder_3 = _2721;
                frontier_phi_58_59_ladder_4 = _2717;
                frontier_phi_58_59_ladder_5 = _2715;
            }
            else
            {
                frontier_phi_58_59_ladder = _2588;
                frontier_phi_58_59_ladder_1 = _2594;
                frontier_phi_58_59_ladder_2 = _2592;
                frontier_phi_58_59_ladder_3 = _2590;
                frontier_phi_58_59_ladder_4 = _2586;
                frontier_phi_58_59_ladder_5 = _2584;
            }
            _2714 = frontier_phi_58_59_ladder_5;
            _2716 = frontier_phi_58_59_ladder_4;
            _2718 = frontier_phi_58_59_ladder;
            _2720 = frontier_phi_58_59_ladder_3;
            _2722 = frontier_phi_58_59_ladder_2;
            _2724 = frontier_phi_58_59_ladder_1;
        }
        float _2729 = isnan(1.0) ? _718 : (isnan(_718) ? 1.0 : min(_718, 1.0));
        _2461 = (_2729 * _2720) + _1916;
        _2463 = (_2729 * _2722) + _1918;
        _2465 = (_2729 * _2724) + _1920;
        _2467 = ((_2714 * 0.039999999105930328369140625) * _2729) + _2246;
        _2469 = ((_2716 * 0.039999999105930328369140625) * _2729) + _2248;
        _2471 = ((_2718 * 0.039999999105930328369140625) * _2729) + _2250;
    }
    else
    {
        _2461 = _1916;
        _2463 = _1918;
        _2465 = _1920;
        _2467 = _2246;
        _2469 = _2248;
        _2471 = _2250;
    }
    uint _2477 = _694 + uint(cbMatDynParam._m0[0u].w);
    float _2485 = ((_361 * cbMtdParam._m0[11u].x) * (_478.x + _463.x)) * cbInstanceData._m0[_2477].x;
    float _2488 = ((_361 * cbMtdParam._m0[11u].y) * (_478.y + _463.y)) * cbInstanceData._m0[_2477].y;
    float _2491 = ((_361 * cbMtdParam._m0[11u].z) * (_478.z + _463.z)) * cbInstanceData._m0[_2477].z;
    float _4478 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _4489 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _4500 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _2508 = (((isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * (_2461 + ((isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0))) * _718))) + ((_2467 + ((isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))) * _1556)) * cbPerFrame._m0[3u].x)) + _2485;
    float _2510 = (_2488 + ((_2469 + ((isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))) * _1556)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (_2463 + ((isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))) * _718)));
    float _2512 = (_2491 + ((_2471 + ((isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))) * _1556)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * (_2465 + ((isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0))) * _718)));
    float _2513 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _2514 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
    float _2515 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
    float _2521 = cbMtdParam._m0[2u].x * _2485;
    float _2522 = cbMtdParam._m0[2u].y * _2488;
    float _2523 = cbMtdParam._m0[2u].z * _2491;
    float _4526 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2525 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
    uint _2526 = _693 + 6u;
    float _2534 = _654 / cbSceneParam._m0[86u].x;
    float _2535 = _655 / cbSceneParam._m0[86u].y;
    vec4 _2549 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2534, _2535, (log2((isnan(cbSceneParam._m0[77u].w) ? _575 : (isnan(_575) ? cbSceneParam._m0[77u].w : min(_575, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2551 = _2549.x;
    float _2552 = _2549.y;
    float _2553 = _2549.z;
    float _2554 = _2549.w;
    float _2647;
    float _2649;
    float _2651;
    float _2653;
    if (_575 > cbSceneParam._m0[78u].w)
    {
        float _2609 = isnan(_575) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _575 : min(cbSceneParam._m0[80u].w, _575));
        float _2610 = _2609 / _575;
        float _2621 = _2610 * _626;
        float _2622 = _627 * _2610;
        float _2623 = (-0.0) - _2622;
        float _2625 = _2610 * _628;
        float _2627 = (cbSceneParam._m0[77u].w * _2623) / _2609;
        float _2628 = _2627 + cbSceneParam._m0[79u].w;
        float _2629 = cbSceneParam._m0[79u].w - _2622;
        float _2635 = sqrt(((_2621 * _2621) + (_2622 * _2622)) + (_2625 * _2625));
        float _2638 = (1.0 - (cbSceneParam._m0[77u].w / _2609)) * _2635;
        float _2643 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2645 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2831;
        if (abs((_2623 - _2627) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2831 = ((((_2628 > 0.0) ? exp2(_2643 * _2628) : (2.0 - exp2(_2645 * _2628))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2638;
        }
        else
        {
            float _2775 = 1.0 / cbSceneParam._m0[80u].x;
            float _2776 = isnan(_2629) ? _2628 : (isnan(_2628) ? _2629 : max(_2628, _2629));
            float _2777 = isnan(_2629) ? _2628 : (isnan(_2628) ? _2629 : min(_2628, _2629));
            float _2786 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : min(_2776, 0.0));
            float _2787 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : min(_2777, 0.0));
            _2831 = ((abs(_2635 / _2623) * cbSceneParam._m0[80u].y) * ((((_2786 - _2787) * 2.0) - ((exp2(_2643 * (isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0)))) - exp2(_2643 * (isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0))))) * _2775)) - ((exp2(_2645 * _2786) - exp2(_2645 * _2787)) * _2775))) + (_2638 * cbSceneParam._m0[80u].z);
        }
        vec4 _2833 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2534, _2535, 1.0), 0.0);
        float _2842 = exp2((_2831 * (-1.44269502162933349609375)) * (1.0 - _2833.w));
        float _2843 = log2(_2842);
        float _2859 = log2(_2554);
        _2647 = (exp2(_2859 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2843 * cbSceneParam._m0[78u].x)) * _2833.x) / cbSceneParam._m0[78u].x)) + _2551;
        _2649 = (exp2(_2859 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2843 * cbSceneParam._m0[78u].y)) * _2833.y) / cbSceneParam._m0[78u].y)) + _2552;
        _2651 = (exp2(_2859 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2843 * cbSceneParam._m0[78u].z)) * _2833.z) / cbSceneParam._m0[78u].z)) + _2553;
        _2653 = _2842 * _2554;
    }
    else
    {
        _2647 = _2551;
        _2649 = _2552;
        _2651 = _2553;
        _2653 = _2554;
    }
    bool _2869;
    vec4 _2663;
    vec4 _2685;
    float _2687;
    float _2691;
    float _2692;
    float _2693;
    float _2696;
    float _2699;
    float _2702;
    float _2703;
    bool _2713;
    for (;;)
    {
        _2663 = cbMatDynParam._m0[0u];
        float _2665 = roundEven(_2663.y);
        bool _2666 = _2665 == 3.0;
        float _2667 = log2(_2653);
        float _2671 = exp2(_2667 * cbSceneParam._m0[78u].x);
        float _2672 = exp2(_2667 * cbSceneParam._m0[78u].y);
        float _2673 = exp2(_2667 * cbSceneParam._m0[78u].z);
        float _2674 = _2671 * _2513;
        float _2675 = _2672 * _2514;
        float _2676 = _2673 * _2515;
        float _2683 = _642 + (-0.5);
        _2685 = cbMtdParam._m0[1u];
        _2687 = _2685.y * _2683;
        float _2690 = (_2665 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2691 = _2690 * (_2666 ? _2674 : (_2674 + (cbSceneParam._m0[72u].w * _2647)));
        _2692 = _2690 * (_2666 ? _2675 : (_2675 + (cbSceneParam._m0[72u].w * _2649)));
        _2693 = _2690 * (_2666 ? _2676 : (_2676 + (cbSceneParam._m0[72u].w * _2651)));
        _2696 = ((_2521 * _2525) * _2671) * _2690;
        _2699 = ((_2522 * _2525) * _2672) * _2690;
        _2702 = ((_2523 * _2525) * _2673) * _2690;
        _2703 = _2683 * 0.999000012874603271484375;
        _2713 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2713)
        {
            if ((cbInstanceData._m0[_693 + 7u].x + _2703) < 0.5)
            {
                _2869 = true;
                break;
            }
        }
        uint _2810 = _694 + uint(_2663.w);
        if ((cbInstanceData._m0[_2810].w < 1.0) && ((cbInstanceData._m0[_2810].w + _2703) < 0.5))
        {
            _2869 = true;
            break;
        }
        if ((_2687 + 1.0) < _2685.x)
        {
            _2869 = true;
            break;
        }
        _2869 = false;
        break;
    }
    float _3074;
    if (_2869)
    {
        discard_state = true;
        _3074 = 0.0;
    }
    else
    {
        _3074 = cbInstanceData._m0[_2526].w;
    }
    SV_Target.x = _2691;
    SV_Target.y = _2692;
    SV_Target.z = _2693;
    SV_Target.w = _3074;
    SV_Target_1.x = _2696;
    SV_Target_1.y = _2699;
    SV_Target_1.z = _2702;
    SV_Target_1.w = cbInstanceData._m0[_2526].w;
    discard_exit();
}


