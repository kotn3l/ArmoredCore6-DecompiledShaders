#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _972;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _193 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _194 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _195 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_193, _194, _195), vec3(_193, _194, _195)));
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _215 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _237 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _243 = _237.x * cbMtdParam._m0[9u].x;
    float _244 = _237.y * cbMtdParam._m0[9u].y;
    float _245 = _237.z * cbMtdParam._m0[9u].z;
    vec4 _265 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _286 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_265.x + 0.00999999977648258209228515625));
    float _288 = _286 * (cbMtdParam._m0[15u].x + 1.0);
    float _3350 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _289 = isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0));
    float _297 = ((((cbMtdParam._m0[12u].x - _243) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _289) + _243;
    float _298 = ((((cbMtdParam._m0[12u].y - _244) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _289) + _244;
    float _299 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _245)) * _289) + _245;
    vec4 _311 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _315 = _311.z;
    float _319 = (_311.x * 2.0) + (-1.0);
    float _321 = (_311.y * 2.0) + (-1.0);
    float _322 = dot(vec2(_319, _321), vec2(_319, _321));
    float _3361 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _327 = sqrt(1.0 - (isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0))));
    float _330 = _286 * (cbMtdParam._m0[14u].w + 1.0);
    float _3372 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _334 = ((cbMtdParam._m0[14u].y - _315) * (isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0)))) + _315;
    vec4 _362 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _377 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _406 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _412 = (_406.x * 2.0) + (-1.0);
    float _413 = (_406.y * 2.0) + (-1.0);
    float _414 = dot(vec2(_412, _413), vec2(_412, _413));
    float _3383 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _430 = (_289 * (((cbMtdParam._m0[13u].z * _319) - _319) + _412)) + _319;
    float _431 = (_289 * (((cbMtdParam._m0[13u].z * _321) - _321) + _413)) + _321;
    float _432 = (_289 * (sqrt(1.0 - (isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0)))) - _327)) + _327;
    float _435 = fma(_432, _208 * NORMAL.x, fma(_431, _215 * TANGENT.x, (_201 * _193) * _430));
    float _438 = fma(_432, _208 * NORMAL.y, fma(_431, _215 * TANGENT.y, (_201 * _194) * _430));
    float _441 = fma(_432, _208 * NORMAL.z, fma(_431, _215 * TANGENT.z, (_201 * _195) * _430));
    float _445 = inversesqrt(dot(vec3(_435, _438, _441), vec3(_435, _438, _441)));
    float _446 = _445 * _435;
    float _447 = _445 * _438;
    float _448 = _445 * _441;
    float _3394 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _449 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
    float _3405 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _3416 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _3427 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _468 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _509 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _519 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _509);
    float _520 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _509);
    float _521 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _509);
    float _525 = inversesqrt(dot(vec3(_519, _520, _521), vec3(_519, _520, _521)));
    float _526 = _519 * _525;
    float _527 = _520 * _525;
    float _528 = _521 * _525;
    float _534 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _535 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _556 = fma(_448, cbSceneParam._m0[5u].z, fma(_447, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _446));
    float _559 = fma(_448, cbSceneParam._m0[6u].z, fma(_447, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _446));
    float _562 = fma(_448, cbSceneParam._m0[7u].z, fma(_447, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _446));
    uint _575 = uint(roundEven(NORMAL.w)) * 13u;
    uint _576 = _575 + 9u;
    uint _577 = _576 + uint(cbMatDynParam._m0[0u].w);
    float _583 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0)))) * cbInstanceData._m0[_577].x;
    float _584 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0)))) * cbInstanceData._m0[_577].y;
    float _585 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0)))) * cbInstanceData._m0[_577].z;
    float _3438 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _586 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
    float _3449 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _587 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
    float _3460 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _588 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
    vec4 _597 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _534, cbSceneParam._m0[86u].y * _535));
    float _600 = _597.x * TEXCOORD_3.w;
    float _601 = dot(vec3(_446, _447, _448), vec3(_526, _527, _528));
    float _604 = _601 * 2.0;
    float _608 = (_604 * _446) - _526;
    float _609 = (_604 * _447) - _527;
    float _610 = (_604 * _448) - _528;
    float _614 = abs(dot(vec3(_526, _527, _528), vec3(_446, _447, _448)));
    float _3471 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _616 = sqrt(_449);
    float _629 = exp2((_616 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_616 * 3.0));
    float _661 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _665 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _669 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _971;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _696 = fma(_669, cbModelParam._m0[26u].z, fma(_665, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _661));
        float _700 = fma(_669, cbModelParam._m0[27u].z, fma(_665, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _661));
        float _704 = fma(_669, cbModelParam._m0[28u].z, fma(_665, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _661));
        float _729 = _661 + _446;
        float _730 = _665 + _447;
        float _731 = _669 + _448;
        float _741 = fma(_731, cbModelParam._m0[26u].z, fma(_730, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _729)) - _696;
        float _742 = fma(_731, cbModelParam._m0[27u].z, fma(_730, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _729)) - _700;
        float _743 = fma(_731, cbModelParam._m0[28u].z, fma(_730, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _729)) - _704;
        float _747 = inversesqrt(dot(vec3(_741, _742, _743), vec3(_741, _742, _743)));
        float _760 = ((_747 * _741) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_696 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _761 = ((_747 * _742) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_700 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _762 = ((_747 * _743) / cbModelParam._m0[34u].z) + ((((((_704 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _765 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_760, _761, _762), 0.0);
        vec4 _772 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_760, _761, _762), 0.0);
        vec4 _779 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_760, _761, _762), 0.0);
        vec4 _786 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_760, _761, _762), 0.0);
        float _799 = exp2((_765.w + (-0.5)) * 20.0) * 2.0;
        float _800 = _799 * (_765.x + (-0.5));
        float _801 = _799 * (_765.y + (-0.5));
        float _802 = _799 * (_765.z + (-0.5));
        float _809 = exp2((_772.w + (-0.5)) * 20.0) * 2.0;
        float _810 = _809 * (_772.x + (-0.5));
        float _811 = _809 * (_772.y + (-0.5));
        float _812 = _809 * (_772.z + (-0.5));
        float _819 = exp2((_779.w + (-0.5)) * 20.0) * 2.0;
        float _820 = _819 * (_779.x + (-0.5));
        float _821 = _819 * (_779.y + (-0.5));
        float _822 = _819 * (_779.z + (-0.5));
        float _829 = exp2((_786.w + (-0.5)) * 20.0) * 2.0;
        float _830 = _829 * (_786.x + (-0.5));
        float _831 = _829 * (_786.y + (-0.5));
        float _832 = _829 * (_786.z + (-0.5));
        float _833 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _834 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _835 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _836 = _800 * 0.5;
        float _837 = _810 * 0.5;
        float _838 = _820 * 0.5;
        float _839 = dot(vec3(_836, _837, _838), vec3(_836, _837, _838));
        float _844 = (_839 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_839);
        float _853 = (dot(vec3(_446, _447, _448), vec3(_844 * _836, _844 * _837, _844 * _838)) + 1.0) * 0.5;
        float _3497 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _863 = sqrt(((_837 * _837) + (_836 * _836)) + (_838 * _838)) / (_833 + 9.9999997473787516355514526367188e-06);
        float _3508 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _864 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
        float _865 = _864 * 2.0;
        float _869 = (1.0 - _864) / (_864 + 1.0);
        float _3519 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _870 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _879 = ((((1.0 - _870) * (_865 + 2.0)) * exp2(log2(isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0))) * (_865 + 1.0))) + _870) * _833;
        float _880 = _801 * 0.5;
        float _881 = _811 * 0.5;
        float _882 = _821 * 0.5;
        float _883 = dot(vec3(_880, _881, _882), vec3(_880, _881, _882));
        float _888 = (_883 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_883);
        float _896 = (dot(vec3(_446, _447, _448), vec3(_888 * _880, _888 * _881, _888 * _882)) + 1.0) * 0.5;
        float _3530 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _905 = sqrt(((_881 * _881) + (_880 * _880)) + (_882 * _882)) / (_834 + 9.9999997473787516355514526367188e-06);
        float _3541 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
        float _907 = _906 * 2.0;
        float _911 = (1.0 - _906) / (_906 + 1.0);
        float _3552 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _912 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _921 = ((((1.0 - _912) * (_907 + 2.0)) * exp2(log2(isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))) * (_907 + 1.0))) + _912) * _834;
        float _922 = _802 * 0.5;
        float _923 = _812 * 0.5;
        float _924 = _822 * 0.5;
        float _925 = dot(vec3(_922, _923, _924), vec3(_922, _923, _924));
        float _930 = (_925 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_925);
        float _938 = (dot(vec3(_446, _447, _448), vec3(_930 * _922, _930 * _923, _930 * _924)) + 1.0) * 0.5;
        float _3563 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _947 = sqrt(((_923 * _923) + (_922 * _922)) + (_924 * _924)) / (_835 + 9.9999997473787516355514526367188e-06);
        float _3574 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _949 = _948 * 2.0;
        float _953 = (1.0 - _948) / (_948 + 1.0);
        float _3585 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _963 = ((((1.0 - _954) * (_949 + 2.0)) * exp2(log2(isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))) * (_949 + 1.0))) + _954) * _835;
        _971 = _802;
        _973 = _801;
        _974 = _800;
        _975 = _812;
        _976 = _811;
        _977 = _810;
        _978 = _822;
        _979 = _821;
        _980 = _820;
        _981 = _835;
        _982 = _834;
        _983 = _833;
        _984 = cbModelParam._m0[36u].z * (isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0)));
        _985 = cbModelParam._m0[36u].z * (isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0)));
        _986 = cbModelParam._m0[36u].z * (isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0)));
    }
    else
    {
        _971 = _972;
        _973 = _972;
        _974 = _972;
        _975 = _972;
        _976 = _972;
        _977 = _972;
        _978 = _972;
        _979 = _972;
        _980 = _972;
        _981 = _972;
        _982 = _972;
        _983 = _972;
        _984 = 0.0;
        _985 = 0.0;
        _986 = 0.0;
    }
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1012 = fma(_669, cbModelParam._m0[30u].z, fma(_665, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _661));
        float _1016 = fma(_669, cbModelParam._m0[31u].z, fma(_665, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _661));
        float _1020 = fma(_669, cbModelParam._m0[32u].z, fma(_665, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _661));
        float _1043 = _661 + _446;
        float _1044 = _665 + _447;
        float _1045 = _669 + _448;
        float _1055 = fma(_1045, cbModelParam._m0[30u].z, fma(_1044, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1043)) - _1012;
        float _1056 = fma(_1045, cbModelParam._m0[31u].z, fma(_1044, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1043)) - _1016;
        float _1057 = fma(_1045, cbModelParam._m0[32u].z, fma(_1044, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1043)) - _1020;
        float _1061 = inversesqrt(dot(vec3(_1055, _1056, _1057), vec3(_1055, _1056, _1057)));
        float _1074 = ((_1061 * _1055) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1012 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1075 = ((_1061 * _1056) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1016 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1076 = ((_1061 * _1057) / cbModelParam._m0[35u].z) + ((((((_1020 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        vec4 _1085 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        float _1111 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1078.x + (-0.5));
        float _1113 = _1111 * (_1078.y + (-0.5));
        float _1114 = _1111 * (_1078.z + (-0.5));
        float _1121 = exp2((_1085.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1085.x + (-0.5));
        float _1123 = _1121 * (_1085.y + (-0.5));
        float _1124 = _1121 * (_1085.z + (-0.5));
        float _1131 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1092.x + (-0.5));
        float _1133 = _1131 * (_1092.y + (-0.5));
        float _1134 = _1131 * (_1092.z + (-0.5));
        float _1141 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1099.x + (-0.5));
        float _1143 = _1141 * (_1099.y + (-0.5));
        float _1144 = _1141 * (_1099.z + (-0.5));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1148 = _1112 * 0.5;
        float _1149 = _1122 * 0.5;
        float _1150 = _1132 * 0.5;
        float _1151 = dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150));
        float _1156 = (_1151 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1151);
        float _1164 = (dot(vec3(_446, _447, _448), vec3(_1156 * _1148, _1156 * _1149, _1156 * _1150)) + 1.0) * 0.5;
        float _3626 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1173 = sqrt(((_1149 * _1149) + (_1148 * _1148)) + (_1150 * _1150)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _3637 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
        float _1175 = _1174 * 2.0;
        float _1179 = (1.0 - _1174) / (_1174 + 1.0);
        float _3648 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _1189 = ((((1.0 - _1180) * (_1175 + 2.0)) * exp2(log2(isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) * (_1175 + 1.0))) + _1180) * _1145;
        float _1190 = _1113 * 0.5;
        float _1191 = _1123 * 0.5;
        float _1192 = _1133 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1206 = (dot(vec3(_446, _447, _448), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _3659 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1215 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1146 + 9.9999997473787516355514526367188e-06);
        float _3670 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _1217 = _1216 * 2.0;
        float _1221 = (1.0 - _1216) / (_1216 + 1.0);
        float _3681 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _1231 = ((((1.0 - _1222) * (_1217 + 2.0)) * exp2(log2(isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * (_1217 + 1.0))) + _1222) * _1146;
        float _1232 = _1114 * 0.5;
        float _1233 = _1124 * 0.5;
        float _1234 = _1134 * 0.5;
        float _1235 = dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234));
        float _1240 = (_1235 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1235);
        float _1248 = (dot(vec3(_446, _447, _448), vec3(_1240 * _1232, _1240 * _1233, _1240 * _1234)) + 1.0) * 0.5;
        float _3692 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1257 = sqrt(((_1233 * _1233) + (_1232 * _1232)) + (_1234 * _1234)) / (_1147 + 9.9999997473787516355514526367188e-06);
        float _3703 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _1259 = _1258 * 2.0;
        float _1263 = (1.0 - _1258) / (_1258 + 1.0);
        float _3714 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1273 = ((((1.0 - _1264) * (_1259 + 2.0)) * exp2(log2(isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) * (_1259 + 1.0))) + _1264) * _1147;
        _1281 = _1114;
        _1282 = _1113;
        _1283 = _1112;
        _1284 = _1124;
        _1285 = _1123;
        _1286 = _1122;
        _1287 = _1134;
        _1288 = _1133;
        _1289 = _1132;
        _1290 = _1147;
        _1291 = _1146;
        _1292 = _1145;
        _1293 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)));
        _1294 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)));
        _1295 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)));
    }
    else
    {
        _1281 = _972;
        _1282 = _972;
        _1283 = _972;
        _1284 = _972;
        _1285 = _972;
        _1286 = _972;
        _1287 = _972;
        _1288 = _972;
        _1289 = _972;
        _1290 = _972;
        _1291 = _972;
        _1292 = _972;
        _1293 = 0.0;
        _1294 = 0.0;
        _1295 = 0.0;
    }
    float _1305 = (cbModelParam._m0[1u].x * (_1293 - _984)) + _984;
    float _1306 = (cbModelParam._m0[1u].x * (_1294 - _985)) + _985;
    float _1307 = (cbModelParam._m0[1u].x * (_1295 - _986)) + _986;
    float _1328 = fma(_1307, cbSceneParam._m0[89u].z, fma(_1306, cbSceneParam._m0[89u].y, _1305 * cbSceneParam._m0[89u].x));
    float _1331 = fma(_1307, cbSceneParam._m0[90u].z, fma(_1306, cbSceneParam._m0[90u].y, _1305 * cbSceneParam._m0[90u].x));
    float _1334 = fma(_1307, cbSceneParam._m0[91u].z, fma(_1306, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1305));
    float _1349 = _608 * 0.5;
    float _1350 = _609 * 0.5;
    float _1351 = _610 * 0.5;
    float _1352 = dot(vec4(_1349, _1350, _1351, 1.0), vec4(_1283, _1286, _1289, _1292));
    float _1355 = dot(vec4(_1349, _1350, _1351, 1.0), vec4(_1282, _1285, _1288, _1291));
    float _1358 = dot(vec4(_1349, _1350, _1351, 1.0), vec4(_1281, _1284, _1287, _1290));
    float _1392;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1365 = dot(vec4(_1349, _1350, _1351, 1.0), vec4(_971, _975, _978, _981));
        float _1369 = dot(vec4(_1349, _1350, _1351, 1.0), vec4(_973, _976, _979, _982));
        float _1373 = dot(vec4(_1349, _1350, _1351, 1.0), vec4(_974, _977, _980, _983));
        float _1380 = dot(vec4(cbModelParam._m0[39u]), vec4(_1349, _1350, _1351, 1.0));
        _1392 = dot(vec3(isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)), isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)), isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1380) ? 0.0 : (isnan(0.0) ? _1380 : max(0.0, _1380))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1392 = 1.0;
    }
    float _1403;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1394 = dot(vec4(cbModelParam._m0[40u]), vec4(_1349, _1350, _1351, 1.0));
        _1403 = dot(vec3(isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)), isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)), isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1394) ? 0.0 : (isnan(0.0) ? _1394 : max(0.0, _1394))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1403 = 1.0;
    }
    float _1407 = (_1403 * cbModelParam._m0[1u].x) + (_1392 * (1.0 - cbModelParam._m0[1u].x));
    float _1417 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _449);
    float _1418 = isnan(_1417) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1417 : min(cbModelParam._m0[25u].z, _1417));
    float _1498;
    float _1500;
    float _1502;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1465 = fma(_669, cbModelParam._m0[13u].z, fma(_665, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _661)) + cbModelParam._m0[13u].w;
        float _1469 = fma(_669, cbModelParam._m0[14u].z, fma(_665, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _661)) + cbModelParam._m0[14u].w;
        float _1473 = fma(_669, cbModelParam._m0[15u].z, fma(_665, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _661)) + cbModelParam._m0[15u].w;
        float _1476 = fma(_610, cbModelParam._m0[13u].z, fma(_609, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _608));
        float _1479 = fma(_610, cbModelParam._m0[14u].z, fma(_609, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _608));
        float _1482 = fma(_610, cbModelParam._m0[15u].z, fma(_609, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _608));
        float _1510;
        if (_1476 > 0.0)
        {
            _1510 = abs((1.0 - _1465) / _1476);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1476 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1465 + 1.0) / _1476);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1510 = frontier_phi_14_12_ladder;
        }
        float _1734;
        if (_1479 > 0.0)
        {
            _1734 = abs((1.0 - _1469) / _1479);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1479 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1469 + 1.0) / _1479);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1734 = frontier_phi_23_19_ladder;
        }
        float _1980;
        if (_1482 > 0.0)
        {
            _1980 = abs((1.0 - _1473) / _1482);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1482 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1473 + 1.0) / _1482);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1980 = frontier_phi_35_30_ladder;
        }
        float _1982 = isnan(_1734) ? _1510 : (isnan(_1510) ? _1734 : min(_1510, _1734));
        float _1983 = isnan(_1980) ? _1982 : (isnan(_1982) ? _1980 : min(_1982, _1980));
        float _1987 = (_1983 * _1476) + _1465;
        float _1988 = (_1983 * _1479) + _1469;
        float _1989 = (_1983 * _1482) + _1473;
        float _1990 = _1983 * 9.9999997473787516355514526367188e-05;
        float _1992 = (-1.0) - _1990;
        float _1994 = _1990 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1989 > _1994) || ((_1989 < _1992) || ((_1988 > _1994) || ((_1988 < _1992) || ((_1987 < _1992) || (_1987 > _1994))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2113 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1989, cbModelParam._m0[9u].z, fma(_1988, cbModelParam._m0[9u].y, _1987 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1989, cbModelParam._m0[10u].z, fma(_1988, cbModelParam._m0[10u].y, _1987 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1989, cbModelParam._m0[11u].z, fma(_1988, cbModelParam._m0[11u].y, _1987 * cbModelParam._m0[11u].x))), _1418);
            frontier_phi_13_35_ladder = _2113.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2113.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2113.x * cbModelParam._m0[1u].y;
        }
        _1498 = frontier_phi_13_35_ladder_2;
        _1500 = frontier_phi_13_35_ladder_1;
        _1502 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1486 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_608, _609, _610), _1418);
        _1498 = _1486.x * cbModelParam._m0[1u].y;
        _1500 = _1486.y * cbModelParam._m0[1u].y;
        _1502 = _1486.z * cbModelParam._m0[1u].y;
    }
    float _1506 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _449);
    float _1507 = isnan(_1506) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1506 : min(cbModelParam._m0[25u].w, _1506));
    float _1598;
    float _1600;
    float _1602;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1562 = fma(_669, cbModelParam._m0[21u].z, fma(_665, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _661)) + cbModelParam._m0[21u].w;
        float _1566 = fma(_669, cbModelParam._m0[22u].z, fma(_665, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _661)) + cbModelParam._m0[22u].w;
        float _1570 = fma(_669, cbModelParam._m0[23u].z, fma(_665, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _661)) + cbModelParam._m0[23u].w;
        float _1573 = fma(_610, cbModelParam._m0[21u].z, fma(_609, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _608));
        float _1576 = fma(_610, cbModelParam._m0[22u].z, fma(_609, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _608));
        float _1579 = fma(_610, cbModelParam._m0[23u].z, fma(_609, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _608));
        float _1739;
        if (_1573 > 0.0)
        {
            _1739 = abs((1.0 - _1562) / _1573);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1573 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1562 + 1.0) / _1573);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1739 = frontier_phi_25_21_ladder;
        }
        float _2007;
        if (_1576 > 0.0)
        {
            _2007 = abs((1.0 - _1566) / _1576);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1576 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1566 + 1.0) / _1576);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2007 = frontier_phi_37_32_ladder;
        }
        float _2212;
        if (_1579 > 0.0)
        {
            _2212 = abs((1.0 - _1570) / _1579);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1579 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1570 + 1.0) / _1579);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2212 = frontier_phi_46_43_ladder;
        }
        float _2214 = isnan(_2007) ? _1739 : (isnan(_1739) ? _2007 : min(_1739, _2007));
        float _2215 = isnan(_2212) ? _2214 : (isnan(_2214) ? _2212 : min(_2214, _2212));
        float _2219 = (_2215 * _1573) + _1562;
        float _2220 = (_2215 * _1576) + _1566;
        float _2221 = (_2215 * _1579) + _1570;
        float _2222 = _2215 * 9.9999997473787516355514526367188e-05;
        float _2223 = (-1.0) - _2222;
        float _2225 = _2222 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2221 > _2225) || ((_2221 < _2223) || ((_2220 > _2225) || ((_2220 < _2223) || ((_2219 < _2223) || (_2219 > _2225))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2455 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2221, cbModelParam._m0[17u].z, fma(_2220, cbModelParam._m0[17u].y, _2219 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2221, cbModelParam._m0[18u].z, fma(_2220, cbModelParam._m0[18u].y, _2219 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2221, cbModelParam._m0[19u].z, fma(_2220, cbModelParam._m0[19u].y, _2219 * cbModelParam._m0[19u].x))), _1507);
            frontier_phi_22_46_ladder = _2455.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2455.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2455.x * cbModelParam._m0[1u].z;
        }
        _1598 = frontier_phi_22_46_ladder_2;
        _1600 = frontier_phi_22_46_ladder_1;
        _1602 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1582 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_608, _609, _610), _1507);
        _1598 = _1582.x * cbModelParam._m0[1u].z;
        _1600 = _1582.y * cbModelParam._m0[1u].z;
        _1602 = _1582.z * cbModelParam._m0[1u].z;
    }
    float _1614 = ((((1.0 - _629) * ((_616 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_629 * _616)) * _600;
    float _1615 = _1614 * ((cbModelParam._m0[1u].w * (_1598 - _1498)) + _1498);
    float _1616 = _1614 * ((cbModelParam._m0[1u].w * (_1600 - _1500)) + _1500);
    float _1617 = _1614 * ((cbModelParam._m0[1u].w * (_1602 - _1502)) + _1502);
    float _1620 = fma(_1617, cbSceneParam._m0[89u].z, fma(_1616, cbSceneParam._m0[89u].y, _1615 * cbSceneParam._m0[89u].x));
    float _1623 = fma(_1617, cbSceneParam._m0[90u].z, fma(_1616, cbSceneParam._m0[90u].y, _1615 * cbSceneParam._m0[90u].x));
    float _1626 = fma(_1617, cbSceneParam._m0[91u].z, fma(_1616, cbSceneParam._m0[91u].y, _1615 * cbSceneParam._m0[91u].x));
    vec4 _1634 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_534, _535));
    float _1636 = _1634.w;
    float _1648 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1636);
    float _1649 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1636);
    float _1650 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1636);
    uvec4 _1654 = floatBitsToUint(cbInstanceData._m0[_575 + 5u]);
    uint _1656 = _1654.x * 14u;
    uint _1657 = _1656 + 13u;
    float _1664 = _600 + (-1.0);
    float _1669 = (cbLight._m0[_1657].x * _1664) + 1.0;
    float _1670 = (cbLight._m0[_1657].y * _1664) + 1.0;
    float _1671 = (cbLight._m0[_1657].z * _1664) + 1.0;
    float _1672 = (cbLight._m0[_1657].w * _1664) + 1.0;
    uint _1673 = _1656 + 5u;
    float _1679 = isnan(1.0) ? _1670 : (isnan(_1670) ? 1.0 : min(_1670, 1.0));
    uint _1683 = _1656 + 4u;
    float _1693 = isnan(1.0) ? _1669 : (isnan(_1669) ? 1.0 : min(_1669, 1.0));
    uint _1697 = _1656 | 1u;
    float _1708 = dot(vec3(cbLight._m0[_1656].xyz), vec3(_446, _447, _448));
    float _1711 = dot(vec3(cbLight._m0[_1697].xyz), vec3(_446, _447, _448));
    float _3850 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
    float _3861 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
    float _1716 = (isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * 0.3183098733425140380859375;
    float _1718 = (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * 0.3183098733425140380859375;
    float _1725 = ((cbLight._m0[_1673].x * _1679) * _1718) + (((cbLight._m0[_1683].x * _1648) * _1693) * _1716);
    float _1726 = ((_1679 * cbLight._m0[_1673].y) * _1718) + (((cbLight._m0[_1683].y * _1649) * _1693) * _1716);
    float _1727 = ((_1679 * cbLight._m0[_1673].z) * _1718) + (((cbLight._m0[_1683].z * _1650) * _1693) * _1716);
    uvec4 _1731 = floatBitsToUint(cbLight._m0[_1656 + 12u]);
    bool _1733 = _1731.x == 0u;
    float _1744;
    float _1746;
    float _1748;
    if (_1733)
    {
        _1744 = _1725;
        _1746 = _1726;
        _1748 = _1727;
    }
    else
    {
        uint _1752 = _1656 + 6u;
        float _1768 = (dot(vec3(cbLight._m0[_1656 + 2u].xyz), vec3(_446, _447, _448)) * 0.5) + 0.5;
        float _1769 = _1768 * _1768;
        float _3872 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1770 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1771 = isnan(1.0) ? _1671 : (isnan(_1671) ? 1.0 : min(_1671, 1.0));
        _1744 = (((cbLight._m0[_1752].x * 0.3183098733425140380859375) * _1770) * _1771) + _1725;
        _1746 = (((cbLight._m0[_1752].y * 0.3183098733425140380859375) * _1770) * _1771) + _1726;
        _1748 = (((cbLight._m0[_1752].z * 0.3183098733425140380859375) * _1770) * _1771) + _1727;
    }
    bool _1751 = _1731.y == 0u;
    float _1789;
    float _1791;
    float _1793;
    if (_1751)
    {
        _1789 = _1744;
        _1791 = _1746;
        _1793 = _1748;
    }
    else
    {
        uint _1951 = _1656 + 7u;
        float _1967 = (dot(vec3(cbLight._m0[_1656 + 3u].xyz), vec3(_446, _447, _448)) * 0.5) + 0.5;
        float _1968 = _1967 * _1967;
        float _3888 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
        float _1969 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1970 = isnan(1.0) ? _1672 : (isnan(_1672) ? 1.0 : min(_1672, 1.0));
        _1789 = (((cbLight._m0[_1951].x * 0.3183098733425140380859375) * _1969) * _1970) + _1744;
        _1791 = (((cbLight._m0[_1951].y * 0.3183098733425140380859375) * _1969) * _1970) + _1746;
        _1793 = (((cbLight._m0[_1951].z * 0.3183098733425140380859375) * _1969) * _1970) + _1748;
    }
    uint _1796 = _1656 + 8u;
    float _1809 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1656].w)) * _449) * 0.949999988079071044921875);
    float _1810 = _1809 * _1809;
    float _1811 = cbLight._m0[_1656].x + _526;
    float _1812 = cbLight._m0[_1656].y + _527;
    float _1813 = cbLight._m0[_1656].z + _528;
    float _1817 = inversesqrt(dot(vec3(_1811, _1812, _1813), vec3(_1811, _1812, _1813)));
    float _1818 = _1817 * _1811;
    float _1819 = _1817 * _1812;
    float _1820 = _1817 * _1813;
    float _1821 = dot(vec3(_446, _447, _448), vec3(cbLight._m0[_1656].xyz));
    float _3904 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
    float _1824 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _3915 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _1825 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _1826 = dot(vec3(_446, _447, _448), vec3(_1818, _1819, _1820));
    float _3926 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _1829 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _1830 = dot(vec3(cbLight._m0[_1656].xyz), vec3(_1818, _1819, _1820));
    float _3937 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _1834 = _1810 * _1810;
    float _1838 = ((_1829 * _1829) * (_1834 + (-1.0))) + 1.0;
    float _1849 = (exp2(log2(1.0 - (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1850 = 1.0 - _1810;
    float _1861 = (0.5 / (((_1825 * ((_1824 * _1850) + _1810)) + 9.9999999392252902907785028219223e-09) + (((_1825 * _1850) + _1810) * _1824))) * _1824;
    float _3948 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1863 = (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * (_1834 / ((_1838 * _1838) * 3.141590118408203125));
    uint _1877 = _1656 + 9u;
    float _1888 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1697].w)) * _449) * 0.949999988079071044921875);
    float _1889 = _1888 * _1888;
    float _1890 = cbLight._m0[_1697].x + _526;
    float _1891 = cbLight._m0[_1697].y + _527;
    float _1892 = cbLight._m0[_1697].z + _528;
    float _1896 = inversesqrt(dot(vec3(_1890, _1891, _1892), vec3(_1890, _1891, _1892)));
    float _1897 = _1896 * _1890;
    float _1898 = _1896 * _1891;
    float _1899 = _1896 * _1892;
    float _1900 = dot(vec3(_446, _447, _448), vec3(cbLight._m0[_1697].xyz));
    float _3959 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
    float _1903 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _1904 = dot(vec3(_446, _447, _448), vec3(_1897, _1898, _1899));
    float _3970 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
    float _1907 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _1908 = dot(vec3(cbLight._m0[_1697].xyz), vec3(_1897, _1898, _1899));
    float _3981 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _1912 = _1889 * _1889;
    float _1916 = ((_1907 * _1907) * (_1912 + (-1.0))) + 1.0;
    float _1925 = (exp2(log2(1.0 - (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1926 = 1.0 - _1889;
    float _1936 = (0.5 / (((_1825 * ((_1903 * _1926) + _1889)) + 9.9999999392252902907785028219223e-09) + (((_1825 * _1926) + _1889) * _1903))) * _1903;
    float _3992 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1938 = (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_1912 / ((_1916 * _1916) * 3.141590118408203125));
    float _1948 = (((_1925 * cbLight._m0[_1877].x) * _1938) * _1679) + ((((cbLight._m0[_1796].x * _1648) * _1849) * _1863) * _1693);
    float _1949 = (((_1925 * cbLight._m0[_1877].y) * _1938) * _1679) + ((((cbLight._m0[_1796].y * _1649) * _1849) * _1863) * _1693);
    float _1950 = (((_1925 * cbLight._m0[_1877].z) * _1938) * _1679) + ((((cbLight._m0[_1796].z * _1650) * _1849) * _1863) * _1693);
    float _2012;
    float _2014;
    float _2016;
    if (_1733)
    {
        _2012 = _1948;
        _2014 = _1949;
        _2016 = _1950;
    }
    else
    {
        uint _2018 = _1656 + 2u;
        uint _2022 = _1656 + 10u;
        float _2036 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2018].w)) * _449) * 0.949999988079071044921875);
        float _2037 = _2036 * _2036;
        float _2038 = cbLight._m0[_2018].x + _526;
        float _2039 = cbLight._m0[_2018].y + _527;
        float _2040 = cbLight._m0[_2018].z + _528;
        float _2044 = inversesqrt(dot(vec3(_2038, _2039, _2040), vec3(_2038, _2039, _2040)));
        float _2045 = _2044 * _2038;
        float _2046 = _2044 * _2039;
        float _2047 = _2044 * _2040;
        float _2048 = dot(vec3(_446, _447, _448), vec3(cbLight._m0[_2018].xyz));
        float _4003 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
        float _2051 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _2052 = dot(vec3(_446, _447, _448), vec3(_2045, _2046, _2047));
        float _4014 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
        float _2055 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _2056 = dot(vec3(cbLight._m0[_2018].xyz), vec3(_2045, _2046, _2047));
        float _4025 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
        float _2060 = _2037 * _2037;
        float _2064 = ((_2055 * _2055) * (_2060 + (-1.0))) + 1.0;
        float _2073 = (exp2(log2(1.0 - (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2074 = 1.0 - _2037;
        float _2084 = (0.5 / (((_1825 * ((_2051 * _2074) + _2037)) + 9.9999999392252902907785028219223e-09) + (((_1825 * _2074) + _2037) * _2051))) * _2051;
        float _4036 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
        float _2086 = (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * (_2060 / ((_2064 * _2064) * 3.141590118408203125));
        float _2087 = isnan(1.0) ? _1671 : (isnan(_1671) ? 1.0 : min(_1671, 1.0));
        _2012 = (((_2073 * cbLight._m0[_2022].x) * _2086) * _2087) + _1948;
        _2014 = (((_2073 * cbLight._m0[_2022].y) * _2086) * _2087) + _1949;
        _2016 = (((_2073 * cbLight._m0[_2022].z) * _2086) * _2087) + _1950;
    }
    float _2122;
    float _2124;
    float _2126;
    if (_1751)
    {
        _2122 = _2012;
        _2124 = _2014;
        _2126 = _2016;
    }
    else
    {
        uint _2133 = _1656 + 3u;
        uint _2137 = _1656 + 11u;
        float _2151 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2133].w)) * _449) * 0.949999988079071044921875);
        float _2152 = _2151 * _2151;
        float _2153 = cbLight._m0[_2133].x + _526;
        float _2154 = cbLight._m0[_2133].y + _527;
        float _2155 = cbLight._m0[_2133].z + _528;
        float _2159 = inversesqrt(dot(vec3(_2153, _2154, _2155), vec3(_2153, _2154, _2155)));
        float _2160 = _2159 * _2153;
        float _2161 = _2159 * _2154;
        float _2162 = _2159 * _2155;
        float _2163 = dot(vec3(_446, _447, _448), vec3(cbLight._m0[_2133].xyz));
        float _4052 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
        float _2166 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _2167 = dot(vec3(_446, _447, _448), vec3(_2160, _2161, _2162));
        float _4063 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
        float _2170 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _2171 = dot(vec3(cbLight._m0[_2133].xyz), vec3(_2160, _2161, _2162));
        float _4074 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
        float _2175 = _2152 * _2152;
        float _2179 = ((_2170 * _2170) * (_2175 + (-1.0))) + 1.0;
        float _2188 = (exp2(log2(1.0 - (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2189 = 1.0 - _2152;
        float _2199 = (0.5 / (((_1825 * ((_2166 * _2189) + _2152)) + 9.9999999392252902907785028219223e-09) + (((_1825 * _2189) + _2152) * _2166))) * _2166;
        float _4085 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2201 = (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_2175 / ((_2179 * _2179) * 3.141590118408203125));
        float _2202 = isnan(1.0) ? _1672 : (isnan(_1672) ? 1.0 : min(_1672, 1.0));
        _2122 = (((_2188 * cbLight._m0[_2137].x) * _2201) * _2202) + _2012;
        _2124 = (((_2188 * cbLight._m0[_2137].y) * _2201) * _2202) + _2014;
        _2126 = (((_2188 * cbLight._m0[_2137].z) * _2201) * _2202) + _2016;
    }
    float _2337;
    float _2339;
    float _2341;
    float _2343;
    float _2345;
    float _2347;
    if (_1654.y == 0u)
    {
        float _2277 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2278 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2277;
        float _2279 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2277;
        float _2280 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2277;
        uvec4 _2292 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2293 = _2292.x;
        uint _2304 = uint((float(_2292.y) * floor(float(uint(cbSceneParam._m0[85u].y * _535) / _2293))) + floor(float(uint(cbSceneParam._m0[85u].x * _534) / _2293)));
        float _2314 = (log2(_2280 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2315 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        uint _2318 = uint(isnan(14.0) ? _2315 : (isnan(_2315) ? 14.0 : min(_2315, 14.0)));
        uvec4 _2323 = texelFetch(g_lightClusterGridBuffer, int(((_2318 << 2u) + (_2304 << 6u)) >> 2u));
        uint _2324 = _2323.x;
        uint _2325 = _2292.z;
        float _2460;
        float _2462;
        float _2464;
        float _2466;
        float _2468;
        float _2470;
        if (((((1u << ((_2325 >> 4u) & 15u)) + 4294967295u) & _2324) == 0u) || ((_2325 & 240u) == 0u))
        {
            _2460 = 0.0;
            _2462 = 0.0;
            _2464 = 0.0;
            _2466 = 0.0;
            _2468 = 0.0;
            _2470 = 0.0;
        }
        else
        {
            float _2461;
            float _2463;
            float _2465;
            float _2467;
            float _2469;
            float _2471;
            float _2614 = 0.0;
            float _2615 = 0.0;
            float _2616 = 0.0;
            float _2617 = 0.0;
            float _2618 = 0.0;
            float _2619 = 0.0;
            uint _2620 = 0u;
            uint _2629;
            bool _2630;
            for (;;)
            {
                _2629 = texelFetch(g_lightClassification, int((((_2318 << 5u) + (_2304 << 9u)) + (_2620 << 2u)) >> 2u)).x;
                _2630 = _2629 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2630)
                {
                    frontier_phi_61_pred = _2614;
                    frontier_phi_61_pred_1 = _2619;
                    frontier_phi_61_pred_2 = _2618;
                    frontier_phi_61_pred_3 = _2617;
                    frontier_phi_61_pred_4 = _2616;
                    frontier_phi_61_pred_5 = _2615;
                }
                else
                {
                    float _2738;
                    float _2739;
                    float _2740;
                    float _2741;
                    float _2742;
                    float _2743;
                    uint _2744;
                    _2738 = _2614;
                    _2739 = _2615;
                    _2740 = _2616;
                    _2741 = _2617;
                    _2742 = _2618;
                    _2743 = _2619;
                    _2744 = _2629;
                    float _2670;
                    float _2671;
                    float _2672;
                    float _2673;
                    float _2674;
                    float _2675;
                    for (;;)
                    {
                        uint _2748 = uint(findLSB(_2744)) + (_2620 << 5u);
                        uint _2745 = (_2744 + 4294967295u) & _2744;
                        uint _2750 = _2748 * 48u;
                        vec4 _2764 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2750)).x, texelFetch(g_PointLightRenderingBuffer, int(_2750 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2750 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2750 + 3u)).x));
                        uint _2770 = (_2748 * 48u) + 4u;
                        vec4 _2783 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2770)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 3u)).x));
                        uint _2789 = (_2748 * 48u) + 8u;
                        vec3 _2800 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2789)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 2u)).x));
                        float _2804 = _2764.x - _2278;
                        float _2805 = _2764.y - _2279;
                        float _2806 = _2764.z - _2280;
                        float _2807 = dot(vec3(_2804, _2805, _2806), vec3(_2804, _2805, _2806));
                        float _2810 = inversesqrt(_2807);
                        float _2811 = _2810 * _2804;
                        float _2812 = _2810 * _2805;
                        float _2813 = _2810 * _2806;
                        float _2814 = dot(vec3(_556, _559, _562), vec3(_2811, _2812, _2813));
                        float _2819 = 1.0 - (_2807 * _2764.w);
                        float _4111 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
                        float _2820 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
                        float _2821 = sqrt(_2807) * _2783.w;
                        float _2824 = 1.39999997615814208984375 / (_2821 + 1.39999997615814208984375);
                        float _2825 = _2824 * _2824;
                        float _2828 = ((1.0 - _2825) * _2814) + _2825;
                        float _2831 = _2821 * _2821;
                        float _2835 = ((isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0))) * _2820) / ((_2831 * 0.699999988079071044921875) + 1.0);
                        float _2839 = (-0.0) - _2278;
                        float _2840 = (-0.0) - _2279;
                        float _2841 = (-0.0) - _2280;
                        float _2845 = inversesqrt(dot(vec3(_2839, _2840, _2841), vec3(_2839, _2840, _2841)));
                        float _2846 = _2845 * _2839;
                        float _2847 = _2845 * _2840;
                        float _2848 = _2845 * _2841;
                        float _2856 = exp2(log2(1.0 / ((_2831 * 3.5) + 5.0)) * 0.25);
                        float _2857 = 1.0 - _616;
                        float _2864 = sqrt(1.0 - ((1.0 - (_2857 * _2857)) * (1.0 - (_2856 * _2856))));
                        float _2865 = _2864 * _2864;
                        float _2866 = _2865 * _2865;
                        float _2867 = _2846 + _2811;
                        float _2868 = _2847 + _2812;
                        float _2869 = _2848 + _2813;
                        float _2873 = inversesqrt(dot(vec3(_2867, _2868, _2869), vec3(_2867, _2868, _2869)));
                        float _2877 = dot(vec3(_556, _559, _562), vec3(_2846, _2847, _2848));
                        float _4127 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
                        float _2880 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
                        float _2881 = dot(vec3(_556, _559, _562), vec3(_2873 * _2867, _2873 * _2868, _2873 * _2869));
                        float _4138 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
                        float _2884 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
                        float _2888 = ((_2884 * _2884) * (_2866 + (-1.0))) + 1.0;
                        float _2889 = _2824 * _2865;
                        float _2890 = _2889 * _2889;
                        float _2893 = ((1.0 - _2890) * _2814) + _2890;
                        float _4149 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
                        float _2894 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
                        float _2895 = 1.0 - _2865;
                        float _2905 = (0.5 / (((_2894 * ((_2880 * _2895) + _2865)) + 9.9999999392252902907785028219223e-09) + (((_2894 * _2895) + _2865) * _2880))) * _2894;
                        float _4160 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
                        float _2916 = (((_2866 * 3.1415927410125732421875) * (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) / ((_2888 * _2888) * ((_2831 * 2.1991131305694580078125) + 3.141590118408203125))) * _2820;
                        _2673 = (_2835 * _2783.x) + _2741;
                        _2674 = (_2835 * _2783.y) + _2742;
                        _2675 = (_2835 * _2783.z) + _2743;
                        _2670 = (_2916 * _2800.x) + _2738;
                        _2671 = (_2916 * _2800.y) + _2739;
                        _2672 = (_2916 * _2800.z) + _2740;
                        if (_2745 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2738 = _2670;
                            _2739 = _2671;
                            _2740 = _2672;
                            _2741 = _2673;
                            _2742 = _2674;
                            _2743 = _2675;
                            _2744 = _2745;
                        }
                    }
                    frontier_phi_61_pred = _2670;
                    frontier_phi_61_pred_1 = _2675;
                    frontier_phi_61_pred_2 = _2674;
                    frontier_phi_61_pred_3 = _2673;
                    frontier_phi_61_pred_4 = _2672;
                    frontier_phi_61_pred_5 = _2671;
                }
                _2461 = frontier_phi_61_pred;
                _2471 = frontier_phi_61_pred_1;
                _2469 = frontier_phi_61_pred_2;
                _2467 = frontier_phi_61_pred_3;
                _2465 = frontier_phi_61_pred_4;
                _2463 = frontier_phi_61_pred_5;
                uint _2621 = _2620 + 1u;
                if (_2621 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2614 = _2461;
                    _2615 = _2463;
                    _2616 = _2465;
                    _2617 = _2467;
                    _2618 = _2469;
                    _2619 = _2471;
                    _2620 = _2621;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2460 = _2461;
            _2462 = _2463;
            _2464 = _2465;
            _2466 = _2467;
            _2468 = _2469;
            _2470 = _2471;
        }
        uvec4 _2474 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2475 = _2474.z;
        uint _2477 = (_2475 >> 8u) & 15u;
        float _2582;
        float _2584;
        float _2586;
        float _2588;
        float _2590;
        float _2592;
        if (((4294967295u << _2477) & _2324) == 0u)
        {
            _2582 = _2460;
            _2584 = _2462;
            _2586 = _2464;
            _2588 = _2466;
            _2590 = _2468;
            _2592 = _2470;
        }
        else
        {
            float _2607 = inversesqrt(dot(vec3(_2278, _2279, _2280), vec3(_2278, _2279, _2280)));
            float _2608 = _2607 * _2278;
            float _2609 = _2607 * _2279;
            float _2610 = _2607 * _2280;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2477 < ((_2475 >> 12u) & 15u))
            {
                float _2583;
                float _2585;
                float _2587;
                float _2589;
                float _2591;
                float _2593;
                float _2721 = _2460;
                float _2722 = _2462;
                float _2723 = _2464;
                float _2724 = _2466;
                float _2725 = _2468;
                float _2726 = _2470;
                uint _2727 = _2477;
                uint _2736;
                bool _2737;
                for (;;)
                {
                    _2736 = texelFetch(g_lightClassification, int((((_2318 << 5u) + (_2304 << 9u)) + (_2727 << 2u)) >> 2u)).x;
                    _2737 = _2736 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2737)
                    {
                        frontier_phi_67_pred = _2724;
                        frontier_phi_67_pred_1 = _2725;
                        frontier_phi_67_pred_2 = _2726;
                        frontier_phi_67_pred_3 = _2723;
                        frontier_phi_67_pred_4 = _2722;
                        frontier_phi_67_pred_5 = _2721;
                    }
                    else
                    {
                        float _2921;
                        float _2922;
                        float _2923;
                        float _2924;
                        float _2925;
                        float _2926;
                        float _3216;
                        float _3217;
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _2934 = _2721;
                        float _2935 = _2722;
                        float _2936 = _2723;
                        float _2937 = _2724;
                        float _2938 = _2725;
                        float _2939 = _2726;
                        uint _2940 = _2736;
                        uint _2941;
                        vec4 _2966;
                        float _2967;
                        vec4 _2982;
                        vec3 _2994;
                        vec4 _3009;
                        vec4 _3025;
                        float _3072;
                        bool _3073;
                        for (;;)
                        {
                            uint _2951 = ((_2727 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2940));
                            _2941 = (_2940 + 4294967295u) & _2940;
                            uint _2953 = _2951 * 40u;
                            _2966 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2953)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 3u)).x));
                            _2967 = _2966.w;
                            uint _2969 = (_2951 * 40u) + 4u;
                            _2982 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2969)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 3u)).x));
                            uint _2984 = (_2951 * 40u) + 8u;
                            _2994 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2984)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 2u)).x));
                            uint _2996 = (_2951 * 40u) + 16u;
                            _3009 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2996)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 3u)).x));
                            uint _3012 = (_2951 * 40u) + 20u;
                            _3025 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3012)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 3u)).x));
                            uint _3028 = (_2951 * 40u) + 24u;
                            vec4 _3041 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 3u)).x));
                            uint _3047 = (_2951 * 40u) + 28u;
                            vec4 _3060 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3047)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 3u)).x));
                            _3072 = fma(_2280, _3060.z, fma(_2279, _3060.y, _3060.x * _2278)) + _3060.w;
                            _3073 = !((fma(_2280, _3041.z, fma(_2279, _3041.y, _3041.x * _2278)) + _3041.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3073)
                            {
                                float _3100 = _2966.x - _2278;
                                float _3101 = _2966.y - _2279;
                                float _3102 = _2966.z - _2280;
                                float _3103 = dot(vec3(_3100, _3101, _3102), vec3(_3100, _3101, _3102));
                                float _3106 = inversesqrt(_3103);
                                float _3107 = _3106 * _3100;
                                float _3108 = _3106 * _3101;
                                float _3109 = _3106 * _3102;
                                float _3113 = 1.0 - (_3103 / (_2967 * _2967));
                                float _4171 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                                float _3114 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
                                float _3118 = sqrt(_3103) * _2982.w;
                                float _3120 = 1.39999997615814208984375 / (_3118 + 1.39999997615814208984375);
                                float _3121 = _3120 * _3120;
                                float _3124 = ((1.0 - _3121) * dot(vec3(_3107, _3108, _3109), vec3(_556, _559, _562))) + _3121;
                                float _3127 = _3118 * _3118;
                                float _3131 = (fma(_2280, _3009.z, fma(_2279, _3009.y, _3009.x * _2278)) + _3009.w) / _3072;
                                float _3132 = (fma(_2280, _3025.z, fma(_2279, _3025.y, _3025.x * _2278)) + _3025.w) / _3072;
                                float _3136 = 1.0 - dot(vec2(_3131, _3132), vec2(_3131, _3132));
                                float _4187 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                                float _3137 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
                                float _3138 = _3137 * (((isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0))) * _3114) / ((_3127 * 0.699999988079071044921875) + 1.0));
                                float _3150 = exp2(log2(1.0 / ((_3127 * 3.5) + 5.0)) * 0.25);
                                float _3151 = 1.0 - _616;
                                float _3158 = sqrt(1.0 - ((1.0 - (_3151 * _3151)) * (1.0 - (_3150 * _3150))));
                                float _3159 = _3158 * _3158;
                                float _3160 = _3159 * _3159;
                                float _3161 = _3107 - _2608;
                                float _3162 = _3108 - _2609;
                                float _3163 = _3109 - _2610;
                                float _3167 = inversesqrt(dot(vec3(_3161, _3162, _3163), vec3(_3161, _3162, _3163)));
                                float _3171 = dot(vec3(_556, _559, _562), vec3((-0.0) - _2608, (-0.0) - _2609, (-0.0) - _2610));
                                float _4198 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                                float _3174 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
                                float _3175 = dot(vec3(_556, _559, _562), vec3(_3167 * _3161, _3167 * _3162, _3167 * _3163));
                                float _4209 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                                float _3178 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
                                float _3182 = ((_3178 * _3178) * (_3160 + (-1.0))) + 1.0;
                                float _3183 = _3120 * _3159;
                                float _3184 = _3183 * _3183;
                                float _3190 = ((1.0 - _3184) * dot(vec3(_556, _559, _562), vec3(_3107, _3108, _3109))) + _3184;
                                float _4220 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                                float _3191 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
                                float _3192 = 1.0 - _3159;
                                float _3202 = (0.5 / (((_3191 * ((_3174 * _3192) + _3159)) + 9.9999999392252902907785028219223e-09) + (((_3191 * _3192) + _3159) * _3174))) * _3191;
                                float _4231 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                                float _3212 = (_3137 * _3114) * (((_3160 * 3.1415927410125732421875) * (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0)))) / ((_3182 * _3182) * ((_3127 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3212 * _2994.x;
                                frontier_phi_73_pred_1 = _3212 * _2994.y;
                                frontier_phi_73_pred_2 = _3138 * _2982.z;
                                frontier_phi_73_pred_3 = _3138 * _2982.y;
                                frontier_phi_73_pred_4 = _3138 * _2982.x;
                                frontier_phi_73_pred_5 = _3212 * _2994.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3216 = frontier_phi_73_pred;
                            _3217 = frontier_phi_73_pred_1;
                            _3221 = frontier_phi_73_pred_2;
                            _3220 = frontier_phi_73_pred_3;
                            _3219 = frontier_phi_73_pred_4;
                            _3218 = frontier_phi_73_pred_5;
                            _2924 = _3219 + _2937;
                            _2925 = _3220 + _2938;
                            _2926 = _3221 + _2939;
                            _2921 = _3216 + _2934;
                            _2922 = _3217 + _2935;
                            _2923 = _3218 + _2936;
                            if (_2941 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2934 = _2921;
                                _2935 = _2922;
                                _2936 = _2923;
                                _2937 = _2924;
                                _2938 = _2925;
                                _2939 = _2926;
                                _2940 = _2941;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2924;
                        frontier_phi_67_pred_1 = _2925;
                        frontier_phi_67_pred_2 = _2926;
                        frontier_phi_67_pred_3 = _2923;
                        frontier_phi_67_pred_4 = _2922;
                        frontier_phi_67_pred_5 = _2921;
                    }
                    _2589 = frontier_phi_67_pred;
                    _2591 = frontier_phi_67_pred_1;
                    _2593 = frontier_phi_67_pred_2;
                    _2587 = frontier_phi_67_pred_3;
                    _2585 = frontier_phi_67_pred_4;
                    _2583 = frontier_phi_67_pred_5;
                    uint _2728 = _2727 + 1u;
                    if (_2728 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2721 = _2583;
                        _2722 = _2585;
                        _2723 = _2587;
                        _2724 = _2589;
                        _2725 = _2591;
                        _2726 = _2593;
                        _2727 = _2728;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2591;
                frontier_phi_55_56_ladder_1 = _2593;
                frontier_phi_55_56_ladder_2 = _2589;
                frontier_phi_55_56_ladder_3 = _2587;
                frontier_phi_55_56_ladder_4 = _2585;
                frontier_phi_55_56_ladder_5 = _2583;
            }
            else
            {
                frontier_phi_55_56_ladder = _2468;
                frontier_phi_55_56_ladder_1 = _2470;
                frontier_phi_55_56_ladder_2 = _2466;
                frontier_phi_55_56_ladder_3 = _2464;
                frontier_phi_55_56_ladder_4 = _2462;
                frontier_phi_55_56_ladder_5 = _2460;
            }
            _2582 = frontier_phi_55_56_ladder_5;
            _2584 = frontier_phi_55_56_ladder_4;
            _2586 = frontier_phi_55_56_ladder_3;
            _2588 = frontier_phi_55_56_ladder_2;
            _2590 = frontier_phi_55_56_ladder;
            _2592 = frontier_phi_55_56_ladder_1;
        }
        float _2597 = isnan(1.0) ? _600 : (isnan(_600) ? 1.0 : min(_600, 1.0));
        _2337 = (_2597 * _2588) + _1789;
        _2339 = (_2597 * _2590) + _1791;
        _2341 = (_2597 * _2592) + _1793;
        _2343 = ((_2582 * 0.039999999105930328369140625) * _2597) + _2122;
        _2345 = ((_2584 * 0.039999999105930328369140625) * _2597) + _2124;
        _2347 = ((_2586 * 0.039999999105930328369140625) * _2597) + _2126;
    }
    else
    {
        _2337 = _1789;
        _2339 = _1791;
        _2341 = _1793;
        _2343 = _2122;
        _2345 = _2124;
        _2347 = _2126;
    }
    uint _2353 = _576 + uint(cbMatDynParam._m0[0u].w);
    float _2361 = ((_289 * cbMtdParam._m0[11u].x) * (_377.x + _362.x)) * cbInstanceData._m0[_2353].x;
    float _2364 = ((_289 * cbMtdParam._m0[11u].y) * (_377.y + _362.y)) * cbInstanceData._m0[_2353].y;
    float _2367 = ((_289 * cbMtdParam._m0[11u].z) * (_377.z + _362.z)) * cbInstanceData._m0[_2353].z;
    float _4247 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _4258 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _4269 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _2384 = (((isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_2337 + ((isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0))) * _600))) + ((_2343 + ((isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))) * _1407)) * cbPerFrame._m0[3u].x)) + _2361;
    float _2386 = (_2364 + ((_2345 + ((isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))) * _1407)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_2339 + ((isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0))) * _600)));
    float _2388 = (_2367 + ((_2347 + ((isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))) * _1407)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_2341 + ((isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0))) * _600)));
    float _4295 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2401 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
    uint _2402 = _575 + 6u;
    float _2410 = _534 / cbSceneParam._m0[86u].x;
    float _2411 = _535 / cbSceneParam._m0[86u].y;
    vec4 _2425 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2410, _2411, (log2((isnan(cbSceneParam._m0[77u].w) ? _468 : (isnan(_468) ? cbSceneParam._m0[77u].w : min(_468, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2427 = _2425.x;
    float _2428 = _2425.y;
    float _2429 = _2425.z;
    float _2430 = _2425.w;
    float _2523;
    float _2525;
    float _2527;
    float _2529;
    if (_468 > cbSceneParam._m0[78u].w)
    {
        float _2485 = isnan(_468) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _468 : min(cbSceneParam._m0[80u].w, _468));
        float _2486 = _2485 / _468;
        float _2497 = _2486 * _519;
        float _2498 = _520 * _2486;
        float _2499 = (-0.0) - _2498;
        float _2501 = _2486 * _521;
        float _2503 = (cbSceneParam._m0[77u].w * _2499) / _2485;
        float _2504 = _2503 + cbSceneParam._m0[79u].w;
        float _2505 = cbSceneParam._m0[79u].w - _2498;
        float _2511 = sqrt(((_2497 * _2497) + (_2498 * _2498)) + (_2501 * _2501));
        float _2514 = (1.0 - (cbSceneParam._m0[77u].w / _2485)) * _2511;
        float _2519 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2521 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2683;
        if (abs((_2499 - _2503) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2683 = ((((_2504 > 0.0) ? exp2(_2519 * _2504) : (2.0 - exp2(_2521 * _2504))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2514;
        }
        else
        {
            float _2643 = 1.0 / cbSceneParam._m0[80u].x;
            float _2644 = isnan(_2505) ? _2504 : (isnan(_2504) ? _2505 : max(_2504, _2505));
            float _2645 = isnan(_2505) ? _2504 : (isnan(_2504) ? _2505 : min(_2504, _2505));
            float _2654 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : min(_2644, 0.0));
            float _2655 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : min(_2645, 0.0));
            _2683 = ((abs(_2511 / _2499) * cbSceneParam._m0[80u].y) * ((((_2654 - _2655) * 2.0) - ((exp2(_2519 * (isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0)))) - exp2(_2519 * (isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0))))) * _2643)) - ((exp2(_2521 * _2654) - exp2(_2521 * _2655)) * _2643))) + (_2514 * cbSceneParam._m0[80u].z);
        }
        vec4 _2685 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2410, _2411, 1.0), 0.0);
        float _2694 = exp2((_2683 * (-1.44269502162933349609375)) * (1.0 - _2685.w));
        float _2695 = log2(_2694);
        float _2711 = log2(_2430);
        _2523 = (exp2(_2711 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2695 * cbSceneParam._m0[78u].x)) * _2685.x) / cbSceneParam._m0[78u].x)) + _2427;
        _2525 = (exp2(_2711 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2695 * cbSceneParam._m0[78u].y)) * _2685.y) / cbSceneParam._m0[78u].y)) + _2428;
        _2527 = (exp2(_2711 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2695 * cbSceneParam._m0[78u].z)) * _2685.z) / cbSceneParam._m0[78u].z)) + _2429;
        _2529 = _2694 * _2430;
    }
    else
    {
        _2523 = _2427;
        _2525 = _2428;
        _2527 = _2429;
        _2529 = _2430;
    }
    float _2541 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2542 = _2541 == 3.0;
    float _2543 = log2(_2529);
    float _2547 = exp2(_2543 * cbSceneParam._m0[78u].x);
    float _2548 = exp2(_2543 * cbSceneParam._m0[78u].y);
    float _2549 = exp2(_2543 * cbSceneParam._m0[78u].z);
    float _2550 = _2547 * (isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0)));
    float _2551 = _2548 * (isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0)));
    float _2552 = _2549 * (isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0)));
    float _2561 = (_2541 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2561 * (_2542 ? _2550 : (_2550 + (cbSceneParam._m0[72u].w * _2523)));
    SV_Target.y = _2561 * (_2542 ? _2551 : (_2551 + (cbSceneParam._m0[72u].w * _2525)));
    SV_Target.z = _2561 * (_2542 ? _2552 : (_2552 + (cbSceneParam._m0[72u].w * _2527)));
    SV_Target.w = cbInstanceData._m0[_2402].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2361) * _2401) * _2547) * _2561;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2364) * _2401) * _2548) * _2561;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2367) * _2401) * _2549) * _2561;
    SV_Target_1.w = cbInstanceData._m0[_2402].w;
}


