#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _969;
float _3423;
float _3424;
float _3425;
float _3426;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _193 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _194 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _195 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_193, _194, _195), vec3(_193, _194, _195)));
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _215 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _237 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _243 = _237.x * cbMtdParam._m0[9u].x;
    float _244 = _237.y * cbMtdParam._m0[9u].y;
    float _245 = _237.z * cbMtdParam._m0[9u].z;
    vec4 _265 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _280 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _282 = _280.x;
    vec4 _294 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _298 = _294.z;
    float _302 = (_294.x * 2.0) + (-1.0);
    float _304 = (_294.y * 2.0) + (-1.0);
    float _305 = dot(vec2(_302, _304), vec2(_302, _304));
    float _3435 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _311 = sqrt(1.0 - (isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0))));
    vec4 _339 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _354 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _369 = (TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_265.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].x + 1.0);
    float _3446 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _370 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
    float _373 = fma(_311, _208 * NORMAL.x, fma(_304, _215 * TANGENT.x, (_201 * _193) * _302));
    float _376 = fma(_311, _208 * NORMAL.y, fma(_304, _215 * TANGENT.y, (_201 * _194) * _302));
    float _379 = fma(_311, _208 * NORMAL.z, fma(_304, _215 * TANGENT.z, (_201 * _195) * _302));
    float _383 = inversesqrt(dot(vec3(_373, _376, _379), vec3(_373, _376, _379)));
    float _384 = _383 * _373;
    float _385 = _383 * _376;
    float _386 = _383 * _379;
    float _3457 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _387 = isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0));
    float _3468 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3479 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _3490 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3501 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _391 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
    float _407 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _448 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _458 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _448);
    float _459 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _448);
    float _460 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _448);
    float _464 = inversesqrt(dot(vec3(_458, _459, _460), vec3(_458, _459, _460)));
    float _465 = _458 * _464;
    float _466 = _459 * _464;
    float _467 = _460 * _464;
    vec4 _472 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _474 = _472.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _649 = sqrt(((_458 * _458) + (_459 * _459)) + (_460 * _460));
        float _655 = (cbMatDynParam._m0[5u].x * _649) + cbMatDynParam._m0[5u].y;
        float _3512 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
        float _656 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
        float _660 = (cbMatDynParam._m0[5u].z * _649) + cbMatDynParam._m0[5u].w;
        float _3523 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0))) - _656)) + _656) < ((_474 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _485 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _486 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _506 = fma(_386, cbSceneParam._m0[5u].z, fma(_385, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _384));
    float _509 = fma(_386, cbSceneParam._m0[6u].z, fma(_385, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _384));
    float _512 = fma(_386, cbSceneParam._m0[7u].z, fma(_385, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _384));
    uint _525 = uint(roundEven(NORMAL.w)) * 13u;
    uint _527 = _525 + 9u;
    uint _528 = _527 + uint(cbMatDynParam._m0[0u].w);
    float _534 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0)))) * cbInstanceData._m0[_528].x;
    float _535 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0)))) * cbInstanceData._m0[_528].y;
    float _536 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0)))) * cbInstanceData._m0[_528].z;
    float _3534 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _537 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
    float _3545 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _538 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
    float _3556 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _539 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
    float _540 = 1.0 - _391;
    float _541 = _537 * _540;
    float _542 = _538 * _540;
    float _543 = _539 * _540;
    float _548 = (_537 + (-0.039999999105930328369140625)) * _391;
    float _549 = (_538 + (-0.039999999105930328369140625)) * _391;
    float _550 = (_539 + (-0.039999999105930328369140625)) * _391;
    float _551 = _548 + 0.039999999105930328369140625;
    float _553 = _549 + 0.039999999105930328369140625;
    float _554 = _550 + 0.039999999105930328369140625;
    vec4 _563 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _485, cbSceneParam._m0[86u].y * _486));
    float _566 = _563.x * TEXCOORD_3.w;
    float _567 = dot(vec3(_384, _385, _386), vec3(_465, _466, _467));
    float _570 = _567 * 2.0;
    float _574 = (_570 * _384) - _465;
    float _575 = (_570 * _385) - _466;
    float _576 = (_570 * _386) - _467;
    float _580 = abs(dot(vec3(_465, _466, _467), vec3(_384, _385, _386)));
    float _3567 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _582 = sqrt(_387);
    float _595 = exp2((_582 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_582 * 3.0));
    float _601 = (1.0 - _595) * ((_582 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _602 = _595 * _582;
    float _630 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _634 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _638 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _968;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _693 = fma(_638, cbModelParam._m0[26u].z, fma(_634, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _630));
        float _697 = fma(_638, cbModelParam._m0[27u].z, fma(_634, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _630));
        float _701 = fma(_638, cbModelParam._m0[28u].z, fma(_634, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _630));
        float _726 = _630 + _384;
        float _727 = _634 + _385;
        float _728 = _638 + _386;
        float _738 = fma(_728, cbModelParam._m0[26u].z, fma(_727, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _726)) - _693;
        float _739 = fma(_728, cbModelParam._m0[27u].z, fma(_727, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _726)) - _697;
        float _740 = fma(_728, cbModelParam._m0[28u].z, fma(_727, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _726)) - _701;
        float _744 = inversesqrt(dot(vec3(_738, _739, _740), vec3(_738, _739, _740)));
        float _757 = ((_744 * _738) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_693 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _758 = ((_744 * _739) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_697 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _759 = ((_744 * _740) / cbModelParam._m0[34u].z) + ((((((_701 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _762 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_757, _758, _759), 0.0);
        vec4 _769 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_757, _758, _759), 0.0);
        vec4 _776 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_757, _758, _759), 0.0);
        vec4 _783 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_757, _758, _759), 0.0);
        float _796 = exp2((_762.w + (-0.5)) * 20.0) * 2.0;
        float _797 = _796 * (_762.x + (-0.5));
        float _798 = _796 * (_762.y + (-0.5));
        float _799 = _796 * (_762.z + (-0.5));
        float _806 = exp2((_769.w + (-0.5)) * 20.0) * 2.0;
        float _807 = _806 * (_769.x + (-0.5));
        float _808 = _806 * (_769.y + (-0.5));
        float _809 = _806 * (_769.z + (-0.5));
        float _816 = exp2((_776.w + (-0.5)) * 20.0) * 2.0;
        float _817 = _816 * (_776.x + (-0.5));
        float _818 = _816 * (_776.y + (-0.5));
        float _819 = _816 * (_776.z + (-0.5));
        float _826 = exp2((_783.w + (-0.5)) * 20.0) * 2.0;
        float _827 = _826 * (_783.x + (-0.5));
        float _828 = _826 * (_783.y + (-0.5));
        float _829 = _826 * (_783.z + (-0.5));
        float _830 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _831 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _832 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _833 = _797 * 0.5;
        float _834 = _807 * 0.5;
        float _835 = _817 * 0.5;
        float _836 = dot(vec3(_833, _834, _835), vec3(_833, _834, _835));
        float _841 = (_836 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_836);
        float _850 = (dot(vec3(_384, _385, _386), vec3(_841 * _833, _841 * _834, _841 * _835)) + 1.0) * 0.5;
        float _3593 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _860 = sqrt(((_834 * _834) + (_833 * _833)) + (_835 * _835)) / (_830 + 9.9999997473787516355514526367188e-06);
        float _3604 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _861 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
        float _862 = _861 * 2.0;
        float _866 = (1.0 - _861) / (_861 + 1.0);
        float _3615 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _867 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _876 = ((((1.0 - _867) * (_862 + 2.0)) * exp2(log2(isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))) * (_862 + 1.0))) + _867) * _830;
        float _877 = _798 * 0.5;
        float _878 = _808 * 0.5;
        float _879 = _818 * 0.5;
        float _880 = dot(vec3(_877, _878, _879), vec3(_877, _878, _879));
        float _885 = (_880 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_880);
        float _893 = (dot(vec3(_384, _385, _386), vec3(_885 * _877, _885 * _878, _885 * _879)) + 1.0) * 0.5;
        float _3626 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _902 = sqrt(((_878 * _878) + (_877 * _877)) + (_879 * _879)) / (_831 + 9.9999997473787516355514526367188e-06);
        float _3637 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _903 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
        float _904 = _903 * 2.0;
        float _908 = (1.0 - _903) / (_903 + 1.0);
        float _3648 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _909 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _918 = ((((1.0 - _909) * (_904 + 2.0)) * exp2(log2(isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) * (_904 + 1.0))) + _909) * _831;
        float _919 = _799 * 0.5;
        float _920 = _809 * 0.5;
        float _921 = _819 * 0.5;
        float _922 = dot(vec3(_919, _920, _921), vec3(_919, _920, _921));
        float _927 = (_922 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_922);
        float _935 = (dot(vec3(_384, _385, _386), vec3(_927 * _919, _927 * _920, _927 * _921)) + 1.0) * 0.5;
        float _3659 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _944 = sqrt(((_920 * _920) + (_919 * _919)) + (_921 * _921)) / (_832 + 9.9999997473787516355514526367188e-06);
        float _3670 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _946 = _945 * 2.0;
        float _950 = (1.0 - _945) / (_945 + 1.0);
        float _3681 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _951 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _960 = ((((1.0 - _951) * (_946 + 2.0)) * exp2(log2(isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * (_946 + 1.0))) + _951) * _832;
        _968 = _799;
        _970 = _798;
        _971 = _797;
        _972 = _809;
        _973 = _808;
        _974 = _807;
        _975 = _819;
        _976 = _818;
        _977 = _817;
        _978 = _832;
        _979 = _831;
        _980 = _830;
        _981 = cbModelParam._m0[36u].z * (isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0)));
        _982 = cbModelParam._m0[36u].z * (isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0)));
        _983 = cbModelParam._m0[36u].z * (isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0)));
    }
    else
    {
        _968 = _969;
        _970 = _969;
        _971 = _969;
        _972 = _969;
        _973 = _969;
        _974 = _969;
        _975 = _969;
        _976 = _969;
        _977 = _969;
        _978 = _969;
        _979 = _969;
        _980 = _969;
        _981 = 0.0;
        _982 = 0.0;
        _983 = 0.0;
    }
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1012 = fma(_638, cbModelParam._m0[30u].z, fma(_634, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _630));
        float _1016 = fma(_638, cbModelParam._m0[31u].z, fma(_634, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _630));
        float _1020 = fma(_638, cbModelParam._m0[32u].z, fma(_634, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _630));
        float _1043 = _630 + _384;
        float _1044 = _634 + _385;
        float _1045 = _638 + _386;
        float _1055 = fma(_1045, cbModelParam._m0[30u].z, fma(_1044, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1043)) - _1012;
        float _1056 = fma(_1045, cbModelParam._m0[31u].z, fma(_1044, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1043)) - _1016;
        float _1057 = fma(_1045, cbModelParam._m0[32u].z, fma(_1044, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1043)) - _1020;
        float _1061 = inversesqrt(dot(vec3(_1055, _1056, _1057), vec3(_1055, _1056, _1057)));
        float _1074 = ((_1061 * _1055) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1012 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1075 = ((_1061 * _1056) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1016 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1076 = ((_1061 * _1057) / cbModelParam._m0[35u].z) + ((((((_1020 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        vec4 _1085 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        float _1111 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1078.x + (-0.5));
        float _1113 = _1111 * (_1078.y + (-0.5));
        float _1114 = _1111 * (_1078.z + (-0.5));
        float _1121 = exp2((_1085.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1085.x + (-0.5));
        float _1123 = _1121 * (_1085.y + (-0.5));
        float _1124 = _1121 * (_1085.z + (-0.5));
        float _1131 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1092.x + (-0.5));
        float _1133 = _1131 * (_1092.y + (-0.5));
        float _1134 = _1131 * (_1092.z + (-0.5));
        float _1141 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1099.x + (-0.5));
        float _1143 = _1141 * (_1099.y + (-0.5));
        float _1144 = _1141 * (_1099.z + (-0.5));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1148 = _1112 * 0.5;
        float _1149 = _1122 * 0.5;
        float _1150 = _1132 * 0.5;
        float _1151 = dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150));
        float _1156 = (_1151 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1151);
        float _1164 = (dot(vec3(_384, _385, _386), vec3(_1156 * _1148, _1156 * _1149, _1156 * _1150)) + 1.0) * 0.5;
        float _3722 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1173 = sqrt(((_1149 * _1149) + (_1148 * _1148)) + (_1150 * _1150)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _3733 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1175 = _1174 * 2.0;
        float _1179 = (1.0 - _1174) / (_1174 + 1.0);
        float _3744 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1189 = ((((1.0 - _1180) * (_1175 + 2.0)) * exp2(log2(isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * (_1175 + 1.0))) + _1180) * _1145;
        float _1190 = _1113 * 0.5;
        float _1191 = _1123 * 0.5;
        float _1192 = _1133 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1206 = (dot(vec3(_384, _385, _386), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _3755 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1215 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1146 + 9.9999997473787516355514526367188e-06);
        float _3766 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1217 = _1216 * 2.0;
        float _1221 = (1.0 - _1216) / (_1216 + 1.0);
        float _3777 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1231 = ((((1.0 - _1222) * (_1217 + 2.0)) * exp2(log2(isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_1217 + 1.0))) + _1222) * _1146;
        float _1232 = _1114 * 0.5;
        float _1233 = _1124 * 0.5;
        float _1234 = _1134 * 0.5;
        float _1235 = dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234));
        float _1240 = (_1235 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1235);
        float _1248 = (dot(vec3(_384, _385, _386), vec3(_1240 * _1232, _1240 * _1233, _1240 * _1234)) + 1.0) * 0.5;
        float _3788 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1257 = sqrt(((_1233 * _1233) + (_1232 * _1232)) + (_1234 * _1234)) / (_1147 + 9.9999997473787516355514526367188e-06);
        float _3799 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1259 = _1258 * 2.0;
        float _1263 = (1.0 - _1258) / (_1258 + 1.0);
        float _3810 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1273 = ((((1.0 - _1264) * (_1259 + 2.0)) * exp2(log2(isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * (_1259 + 1.0))) + _1264) * _1147;
        _1281 = _1114;
        _1282 = _1113;
        _1283 = _1112;
        _1284 = _1124;
        _1285 = _1123;
        _1286 = _1122;
        _1287 = _1134;
        _1288 = _1133;
        _1289 = _1132;
        _1290 = _1147;
        _1291 = _1146;
        _1292 = _1145;
        _1293 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)));
        _1294 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)));
        _1295 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)));
    }
    else
    {
        _1281 = _969;
        _1282 = _969;
        _1283 = _969;
        _1284 = _969;
        _1285 = _969;
        _1286 = _969;
        _1287 = _969;
        _1288 = _969;
        _1289 = _969;
        _1290 = _969;
        _1291 = _969;
        _1292 = _969;
        _1293 = 0.0;
        _1294 = 0.0;
        _1295 = 0.0;
    }
    float _1305 = (cbModelParam._m0[1u].x * (_1293 - _981)) + _981;
    float _1306 = (cbModelParam._m0[1u].x * (_1294 - _982)) + _982;
    float _1307 = (cbModelParam._m0[1u].x * (_1295 - _983)) + _983;
    float _1328 = fma(_1307, cbSceneParam._m0[89u].z, fma(_1306, cbSceneParam._m0[89u].y, _1305 * cbSceneParam._m0[89u].x));
    float _1331 = fma(_1307, cbSceneParam._m0[90u].z, fma(_1306, cbSceneParam._m0[90u].y, _1305 * cbSceneParam._m0[90u].x));
    float _1334 = fma(_1307, cbSceneParam._m0[91u].z, fma(_1306, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1305));
    float _1349 = _574 * 0.5;
    float _1350 = _575 * 0.5;
    float _1351 = _576 * 0.5;
    float _1352 = dot(vec4(_1349, _1350, _1351, 1.0), vec4(_1283, _1286, _1289, _1292));
    float _1355 = dot(vec4(_1349, _1350, _1351, 1.0), vec4(_1282, _1285, _1288, _1291));
    float _1358 = dot(vec4(_1349, _1350, _1351, 1.0), vec4(_1281, _1284, _1287, _1290));
    float _1392;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1365 = dot(vec4(_1349, _1350, _1351, 1.0), vec4(_968, _972, _975, _978));
        float _1369 = dot(vec4(_1349, _1350, _1351, 1.0), vec4(_970, _973, _976, _979));
        float _1373 = dot(vec4(_1349, _1350, _1351, 1.0), vec4(_971, _974, _977, _980));
        float _1380 = dot(vec4(cbModelParam._m0[39u]), vec4(_1349, _1350, _1351, 1.0));
        _1392 = dot(vec3(isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)), isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)), isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1380) ? 0.0 : (isnan(0.0) ? _1380 : max(0.0, _1380))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1392 = 1.0;
    }
    float _1403;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1394 = dot(vec4(cbModelParam._m0[40u]), vec4(_1349, _1350, _1351, 1.0));
        _1403 = dot(vec3(isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)), isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)), isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1394) ? 0.0 : (isnan(0.0) ? _1394 : max(0.0, _1394))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1403 = 1.0;
    }
    float _1407 = (_1403 * cbModelParam._m0[1u].x) + (_1392 * (1.0 - cbModelParam._m0[1u].x));
    float _1417 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _387);
    float _1418 = isnan(_1417) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1417 : min(cbModelParam._m0[25u].z, _1417));
    float _1498;
    float _1500;
    float _1502;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1465 = fma(_638, cbModelParam._m0[13u].z, fma(_634, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _630)) + cbModelParam._m0[13u].w;
        float _1469 = fma(_638, cbModelParam._m0[14u].z, fma(_634, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _630)) + cbModelParam._m0[14u].w;
        float _1473 = fma(_638, cbModelParam._m0[15u].z, fma(_634, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _630)) + cbModelParam._m0[15u].w;
        float _1476 = fma(_576, cbModelParam._m0[13u].z, fma(_575, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _574));
        float _1479 = fma(_576, cbModelParam._m0[14u].z, fma(_575, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _574));
        float _1482 = fma(_576, cbModelParam._m0[15u].z, fma(_575, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _574));
        float _1510;
        if (_1476 > 0.0)
        {
            _1510 = abs((1.0 - _1465) / _1476);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1476 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1465 + 1.0) / _1476);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1510 = frontier_phi_17_15_ladder;
        }
        float _1737;
        if (_1479 > 0.0)
        {
            _1737 = abs((1.0 - _1469) / _1479);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1479 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1469 + 1.0) / _1479);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1737 = frontier_phi_26_22_ladder;
        }
        float _1994;
        if (_1482 > 0.0)
        {
            _1994 = abs((1.0 - _1473) / _1482);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1482 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1473 + 1.0) / _1482);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1994 = frontier_phi_38_33_ladder;
        }
        float _1996 = isnan(_1737) ? _1510 : (isnan(_1510) ? _1737 : min(_1510, _1737));
        float _1997 = isnan(_1994) ? _1996 : (isnan(_1996) ? _1994 : min(_1996, _1994));
        float _2001 = (_1997 * _1476) + _1465;
        float _2002 = (_1997 * _1479) + _1469;
        float _2003 = (_1997 * _1482) + _1473;
        float _2004 = _1997 * 9.9999997473787516355514526367188e-05;
        float _2006 = (-1.0) - _2004;
        float _2008 = _2004 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2003 > _2008) || ((_2003 < _2006) || ((_2002 > _2008) || ((_2002 < _2006) || ((_2001 < _2006) || (_2001 > _2008))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2131 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2003, cbModelParam._m0[9u].z, fma(_2002, cbModelParam._m0[9u].y, _2001 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2003, cbModelParam._m0[10u].z, fma(_2002, cbModelParam._m0[10u].y, _2001 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2003, cbModelParam._m0[11u].z, fma(_2002, cbModelParam._m0[11u].y, _2001 * cbModelParam._m0[11u].x))), _1418);
            frontier_phi_16_38_ladder = _2131.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2131.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2131.x * cbModelParam._m0[1u].y;
        }
        _1498 = frontier_phi_16_38_ladder_2;
        _1500 = frontier_phi_16_38_ladder_1;
        _1502 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1486 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_574, _575, _576), _1418);
        _1498 = _1486.x * cbModelParam._m0[1u].y;
        _1500 = _1486.y * cbModelParam._m0[1u].y;
        _1502 = _1486.z * cbModelParam._m0[1u].y;
    }
    float _1506 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _387);
    float _1507 = isnan(_1506) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1506 : min(cbModelParam._m0[25u].w, _1506));
    float _1598;
    float _1600;
    float _1602;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1562 = fma(_638, cbModelParam._m0[21u].z, fma(_634, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _630)) + cbModelParam._m0[21u].w;
        float _1566 = fma(_638, cbModelParam._m0[22u].z, fma(_634, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _630)) + cbModelParam._m0[22u].w;
        float _1570 = fma(_638, cbModelParam._m0[23u].z, fma(_634, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _630)) + cbModelParam._m0[23u].w;
        float _1573 = fma(_576, cbModelParam._m0[21u].z, fma(_575, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _574));
        float _1576 = fma(_576, cbModelParam._m0[22u].z, fma(_575, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _574));
        float _1579 = fma(_576, cbModelParam._m0[23u].z, fma(_575, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _574));
        float _1742;
        if (_1573 > 0.0)
        {
            _1742 = abs((1.0 - _1562) / _1573);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1573 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1562 + 1.0) / _1573);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1742 = frontier_phi_28_24_ladder;
        }
        float _2021;
        if (_1576 > 0.0)
        {
            _2021 = abs((1.0 - _1566) / _1576);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1576 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1566 + 1.0) / _1576);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2021 = frontier_phi_40_35_ladder;
        }
        float _2234;
        if (_1579 > 0.0)
        {
            _2234 = abs((1.0 - _1570) / _1579);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1579 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1570 + 1.0) / _1579);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2234 = frontier_phi_49_46_ladder;
        }
        float _2236 = isnan(_2021) ? _1742 : (isnan(_1742) ? _2021 : min(_1742, _2021));
        float _2237 = isnan(_2234) ? _2236 : (isnan(_2236) ? _2234 : min(_2236, _2234));
        float _2241 = (_2237 * _1573) + _1562;
        float _2242 = (_2237 * _1576) + _1566;
        float _2243 = (_2237 * _1579) + _1570;
        float _2244 = _2237 * 9.9999997473787516355514526367188e-05;
        float _2245 = (-1.0) - _2244;
        float _2247 = _2244 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2243 > _2247) || ((_2243 < _2245) || ((_2242 > _2247) || ((_2242 < _2245) || ((_2241 < _2245) || (_2241 > _2247))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2477 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2243, cbModelParam._m0[17u].z, fma(_2242, cbModelParam._m0[17u].y, _2241 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2243, cbModelParam._m0[18u].z, fma(_2242, cbModelParam._m0[18u].y, _2241 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2243, cbModelParam._m0[19u].z, fma(_2242, cbModelParam._m0[19u].y, _2241 * cbModelParam._m0[19u].x))), _1507);
            frontier_phi_25_49_ladder = _2477.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2477.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2477.x * cbModelParam._m0[1u].z;
        }
        _1598 = frontier_phi_25_49_ladder_2;
        _1600 = frontier_phi_25_49_ladder_1;
        _1602 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1582 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_574, _575, _576), _1507);
        _1598 = _1582.x * cbModelParam._m0[1u].z;
        _1600 = _1582.y * cbModelParam._m0[1u].z;
        _1602 = _1582.z * cbModelParam._m0[1u].z;
    }
    float _1615 = (((_601 * _551) + _602) * _566) * ((cbModelParam._m0[1u].w * (_1598 - _1498)) + _1498);
    float _1617 = (((_601 * _553) + _602) * _566) * ((cbModelParam._m0[1u].w * (_1600 - _1500)) + _1500);
    float _1619 = (((_601 * _554) + _602) * _566) * ((cbModelParam._m0[1u].w * (_1602 - _1502)) + _1502);
    float _1622 = fma(_1619, cbSceneParam._m0[89u].z, fma(_1617, cbSceneParam._m0[89u].y, _1615 * cbSceneParam._m0[89u].x));
    float _1625 = fma(_1619, cbSceneParam._m0[90u].z, fma(_1617, cbSceneParam._m0[90u].y, _1615 * cbSceneParam._m0[90u].x));
    float _1628 = fma(_1619, cbSceneParam._m0[91u].z, fma(_1617, cbSceneParam._m0[91u].y, _1615 * cbSceneParam._m0[91u].x));
    vec4 _1636 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_485, _486));
    float _1638 = _1636.w;
    float _1650 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1638);
    float _1651 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1638);
    float _1652 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1638);
    uvec4 _1656 = floatBitsToUint(cbInstanceData._m0[_525 + 5u]);
    uint _1658 = _1656.x * 14u;
    uint _1659 = _1658 + 13u;
    float _1666 = _566 + (-1.0);
    float _1671 = (cbLight._m0[_1659].x * _1666) + 1.0;
    float _1672 = (cbLight._m0[_1659].y * _1666) + 1.0;
    float _1673 = (cbLight._m0[_1659].z * _1666) + 1.0;
    float _1674 = (cbLight._m0[_1659].w * _1666) + 1.0;
    uint _1675 = _1658 + 5u;
    float _1681 = isnan(1.0) ? _1672 : (isnan(_1672) ? 1.0 : min(_1672, 1.0));
    uint _1685 = _1658 + 4u;
    float _1695 = isnan(1.0) ? _1671 : (isnan(_1671) ? 1.0 : min(_1671, 1.0));
    uint _1699 = _1658 | 1u;
    float _1710 = dot(vec3(cbLight._m0[_1658].xyz), vec3(_384, _385, _386));
    float _1713 = dot(vec3(cbLight._m0[_1699].xyz), vec3(_384, _385, _386));
    float _3946 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
    float _3957 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
    float _1718 = (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * 0.3183098733425140380859375;
    float _1720 = (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * 0.3183098733425140380859375;
    float _1727 = ((cbLight._m0[_1675].x * _1681) * _1720) + (((cbLight._m0[_1685].x * _1650) * _1695) * _1718);
    float _1728 = ((_1681 * cbLight._m0[_1675].y) * _1720) + (((cbLight._m0[_1685].y * _1651) * _1695) * _1718);
    float _1729 = ((_1681 * cbLight._m0[_1675].z) * _1720) + (((cbLight._m0[_1685].z * _1652) * _1695) * _1718);
    uvec4 _1734 = floatBitsToUint(cbLight._m0[_1658 + 12u]);
    bool _1736 = _1734.x == 0u;
    float _1747;
    float _1749;
    float _1751;
    if (_1736)
    {
        _1747 = _1727;
        _1749 = _1728;
        _1751 = _1729;
    }
    else
    {
        uint _1755 = _1658 + 6u;
        float _1771 = (dot(vec3(cbLight._m0[_1658 + 2u].xyz), vec3(_384, _385, _386)) * 0.5) + 0.5;
        float _1772 = _1771 * _1771;
        float _3968 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1773 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1774 = isnan(1.0) ? _1673 : (isnan(_1673) ? 1.0 : min(_1673, 1.0));
        _1747 = (((cbLight._m0[_1755].x * 0.3183098733425140380859375) * _1773) * _1774) + _1727;
        _1749 = (((cbLight._m0[_1755].y * 0.3183098733425140380859375) * _1773) * _1774) + _1728;
        _1751 = (((cbLight._m0[_1755].z * 0.3183098733425140380859375) * _1773) * _1774) + _1729;
    }
    bool _1754 = _1734.y == 0u;
    float _1792;
    float _1794;
    float _1796;
    if (_1754)
    {
        _1792 = _1747;
        _1794 = _1749;
        _1796 = _1751;
    }
    else
    {
        uint _1965 = _1658 + 7u;
        float _1981 = (dot(vec3(cbLight._m0[_1658 + 3u].xyz), vec3(_384, _385, _386)) * 0.5) + 0.5;
        float _1982 = _1981 * _1981;
        float _3984 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
        float _1983 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1984 = isnan(1.0) ? _1674 : (isnan(_1674) ? 1.0 : min(_1674, 1.0));
        _1792 = (((cbLight._m0[_1965].x * 0.3183098733425140380859375) * _1983) * _1984) + _1747;
        _1794 = (((cbLight._m0[_1965].y * 0.3183098733425140380859375) * _1983) * _1984) + _1749;
        _1796 = (((cbLight._m0[_1965].z * 0.3183098733425140380859375) * _1983) * _1984) + _1751;
    }
    uint _1799 = _1658 + 8u;
    float _1812 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1658].w)) * _387) * 0.949999988079071044921875);
    float _1813 = _1812 * _1812;
    float _1814 = cbLight._m0[_1658].x + _465;
    float _1815 = cbLight._m0[_1658].y + _466;
    float _1816 = cbLight._m0[_1658].z + _467;
    float _1820 = inversesqrt(dot(vec3(_1814, _1815, _1816), vec3(_1814, _1815, _1816)));
    float _1821 = _1820 * _1814;
    float _1822 = _1820 * _1815;
    float _1823 = _1820 * _1816;
    float _1824 = dot(vec3(_384, _385, _386), vec3(cbLight._m0[_1658].xyz));
    float _4000 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
    float _1827 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _4011 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _1828 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
    float _1829 = dot(vec3(_384, _385, _386), vec3(_1821, _1822, _1823));
    float _4022 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1832 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _1833 = dot(vec3(cbLight._m0[_1658].xyz), vec3(_1821, _1822, _1823));
    float _4033 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _1837 = _1813 * _1813;
    float _1841 = ((_1832 * _1832) * (_1837 + (-1.0))) + 1.0;
    float _1849 = exp2(log2(1.0 - (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0)))) * 5.0);
    float _1850 = 0.959999978542327880859375 - _548;
    float _1852 = 0.959999978542327880859375 - _549;
    float _1853 = 0.959999978542327880859375 - _550;
    float _1860 = 1.0 - _1813;
    float _1871 = (0.5 / (((_1828 * ((_1827 * _1860) + _1813)) + 9.9999999392252902907785028219223e-09) + (((_1828 * _1860) + _1813) * _1827))) * _1827;
    float _4044 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _1873 = (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_1837 / ((_1841 * _1841) * 3.141590118408203125));
    uint _1887 = _1658 + 9u;
    float _1898 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1699].w)) * _387) * 0.949999988079071044921875);
    float _1899 = _1898 * _1898;
    float _1900 = cbLight._m0[_1699].x + _465;
    float _1901 = cbLight._m0[_1699].y + _466;
    float _1902 = cbLight._m0[_1699].z + _467;
    float _1906 = inversesqrt(dot(vec3(_1900, _1901, _1902), vec3(_1900, _1901, _1902)));
    float _1907 = _1906 * _1900;
    float _1908 = _1906 * _1901;
    float _1909 = _1906 * _1902;
    float _1910 = dot(vec3(_384, _385, _386), vec3(cbLight._m0[_1699].xyz));
    float _4055 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _1913 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _1914 = dot(vec3(_384, _385, _386), vec3(_1907, _1908, _1909));
    float _4066 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _1917 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _1918 = dot(vec3(cbLight._m0[_1699].xyz), vec3(_1907, _1908, _1909));
    float _4077 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1922 = _1899 * _1899;
    float _1926 = ((_1917 * _1917) * (_1922 + (-1.0))) + 1.0;
    float _1933 = exp2(log2(1.0 - (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0)))) * 5.0);
    float _1940 = 1.0 - _1899;
    float _1950 = (0.5 / (((_1828 * ((_1913 * _1940) + _1899)) + 9.9999999392252902907785028219223e-09) + (((_1828 * _1940) + _1899) * _1913))) * _1913;
    float _4088 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _1952 = (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_1922 / ((_1926 * _1926) * 3.141590118408203125));
    float _1962 = (((((_1933 * _1850) + _551) * cbLight._m0[_1887].x) * _1952) * _1681) + ((((cbLight._m0[_1799].x * _1650) * ((_1849 * _1850) + _551)) * _1873) * _1695);
    float _1963 = (((((_1933 * _1852) + _553) * cbLight._m0[_1887].y) * _1952) * _1681) + ((((cbLight._m0[_1799].y * _1651) * ((_1849 * _1852) + _553)) * _1873) * _1695);
    float _1964 = (((((_1933 * _1853) + _554) * cbLight._m0[_1887].z) * _1952) * _1681) + ((((cbLight._m0[_1799].z * _1652) * ((_1849 * _1853) + _554)) * _1873) * _1695);
    float _2026;
    float _2028;
    float _2030;
    if (_1736)
    {
        _2026 = _1962;
        _2028 = _1963;
        _2030 = _1964;
    }
    else
    {
        uint _2032 = _1658 + 2u;
        uint _2036 = _1658 + 10u;
        float _2050 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2032].w)) * _387) * 0.949999988079071044921875);
        float _2051 = _2050 * _2050;
        float _2052 = cbLight._m0[_2032].x + _465;
        float _2053 = cbLight._m0[_2032].y + _466;
        float _2054 = cbLight._m0[_2032].z + _467;
        float _2058 = inversesqrt(dot(vec3(_2052, _2053, _2054), vec3(_2052, _2053, _2054)));
        float _2059 = _2058 * _2052;
        float _2060 = _2058 * _2053;
        float _2061 = _2058 * _2054;
        float _2062 = dot(vec3(_384, _385, _386), vec3(cbLight._m0[_2032].xyz));
        float _4099 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
        float _2065 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _2066 = dot(vec3(_384, _385, _386), vec3(_2059, _2060, _2061));
        float _4110 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
        float _2069 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _2070 = dot(vec3(cbLight._m0[_2032].xyz), vec3(_2059, _2060, _2061));
        float _4121 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
        float _2074 = _2051 * _2051;
        float _2078 = ((_2069 * _2069) * (_2074 + (-1.0))) + 1.0;
        float _2085 = exp2(log2(1.0 - (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)))) * 5.0);
        float _2092 = 1.0 - _2051;
        float _2102 = (0.5 / (((_1828 * ((_2065 * _2092) + _2051)) + 9.9999999392252902907785028219223e-09) + (((_1828 * _2092) + _2051) * _2065))) * _2065;
        float _4132 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
        float _2104 = (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_2074 / ((_2078 * _2078) * 3.141590118408203125));
        float _2105 = isnan(1.0) ? _1673 : (isnan(_1673) ? 1.0 : min(_1673, 1.0));
        _2026 = (((((_2085 * _1850) + _551) * cbLight._m0[_2036].x) * _2104) * _2105) + _1962;
        _2028 = (((((_2085 * _1852) + _553) * cbLight._m0[_2036].y) * _2104) * _2105) + _1963;
        _2030 = (((((_2085 * _1853) + _554) * cbLight._m0[_2036].z) * _2104) * _2105) + _1964;
    }
    float _2140;
    float _2142;
    float _2144;
    if (_1754)
    {
        _2140 = _2026;
        _2142 = _2028;
        _2144 = _2030;
    }
    else
    {
        uint _2151 = _1658 + 3u;
        uint _2155 = _1658 + 11u;
        float _2169 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2151].w)) * _387) * 0.949999988079071044921875);
        float _2170 = _2169 * _2169;
        float _2171 = cbLight._m0[_2151].x + _465;
        float _2172 = cbLight._m0[_2151].y + _466;
        float _2173 = cbLight._m0[_2151].z + _467;
        float _2177 = inversesqrt(dot(vec3(_2171, _2172, _2173), vec3(_2171, _2172, _2173)));
        float _2178 = _2177 * _2171;
        float _2179 = _2177 * _2172;
        float _2180 = _2177 * _2173;
        float _2181 = dot(vec3(_384, _385, _386), vec3(cbLight._m0[_2151].xyz));
        float _4148 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2184 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _2185 = dot(vec3(_384, _385, _386), vec3(_2178, _2179, _2180));
        float _4159 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
        float _2188 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _2189 = dot(vec3(cbLight._m0[_2151].xyz), vec3(_2178, _2179, _2180));
        float _4170 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        float _2193 = _2170 * _2170;
        float _2197 = ((_2188 * _2188) * (_2193 + (-1.0))) + 1.0;
        float _2204 = exp2(log2(1.0 - (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0)))) * 5.0);
        float _2211 = 1.0 - _2170;
        float _2221 = (0.5 / (((_1828 * ((_2184 * _2211) + _2170)) + 9.9999999392252902907785028219223e-09) + (((_1828 * _2211) + _2170) * _2184))) * _2184;
        float _4181 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2223 = (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_2193 / ((_2197 * _2197) * 3.141590118408203125));
        float _2224 = isnan(1.0) ? _1674 : (isnan(_1674) ? 1.0 : min(_1674, 1.0));
        _2140 = (((((_2204 * _1850) + _551) * cbLight._m0[_2155].x) * _2223) * _2224) + _2026;
        _2142 = (((((_2204 * _1852) + _553) * cbLight._m0[_2155].y) * _2223) * _2224) + _2028;
        _2144 = (((((_2204 * _1853) + _554) * cbLight._m0[_2155].z) * _2223) * _2224) + _2030;
    }
    float _2359;
    float _2361;
    float _2363;
    float _2365;
    float _2367;
    float _2369;
    if (_1656.y == 0u)
    {
        float _2299 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2300 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2299;
        float _2301 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2299;
        float _2302 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2299;
        uvec4 _2314 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2315 = _2314.x;
        uint _2326 = uint((float(_2314.y) * floor(float(uint(cbSceneParam._m0[85u].y * _486) / _2315))) + floor(float(uint(cbSceneParam._m0[85u].x * _485) / _2315)));
        float _2336 = (log2(_2302 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2337 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        uint _2340 = uint(isnan(14.0) ? _2337 : (isnan(_2337) ? 14.0 : min(_2337, 14.0)));
        uvec4 _2345 = texelFetch(g_lightClusterGridBuffer, int(((_2340 << 2u) + (_2326 << 6u)) >> 2u));
        uint _2346 = _2345.x;
        uint _2347 = _2314.z;
        float _2482;
        float _2484;
        float _2486;
        float _2488;
        float _2490;
        float _2492;
        if (((((1u << ((_2347 >> 4u) & 15u)) + 4294967295u) & _2346) == 0u) || ((_2347 & 240u) == 0u))
        {
            _2482 = 0.0;
            _2484 = 0.0;
            _2486 = 0.0;
            _2488 = 0.0;
            _2490 = 0.0;
            _2492 = 0.0;
        }
        else
        {
            float _2483;
            float _2485;
            float _2487;
            float _2489;
            float _2491;
            float _2493;
            float _2644 = 0.0;
            float _2645 = 0.0;
            float _2646 = 0.0;
            float _2647 = 0.0;
            float _2648 = 0.0;
            float _2649 = 0.0;
            uint _2650 = 0u;
            uint _2659;
            bool _2660;
            for (;;)
            {
                _2659 = texelFetch(g_lightClassification, int((((_2340 << 5u) + (_2326 << 9u)) + (_2650 << 2u)) >> 2u)).x;
                _2660 = _2659 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2660)
                {
                    frontier_phi_66_pred = _2644;
                    frontier_phi_66_pred_1 = _2649;
                    frontier_phi_66_pred_2 = _2648;
                    frontier_phi_66_pred_3 = _2647;
                    frontier_phi_66_pred_4 = _2646;
                    frontier_phi_66_pred_5 = _2645;
                }
                else
                {
                    float _2789;
                    float _2790;
                    float _2791;
                    float _2792;
                    float _2793;
                    float _2794;
                    uint _2795;
                    _2789 = _2644;
                    _2790 = _2645;
                    _2791 = _2646;
                    _2792 = _2647;
                    _2793 = _2648;
                    _2794 = _2649;
                    _2795 = _2659;
                    float _2716;
                    float _2717;
                    float _2718;
                    float _2719;
                    float _2720;
                    float _2721;
                    for (;;)
                    {
                        uint _2799 = uint(findLSB(_2795)) + (_2650 << 5u);
                        uint _2796 = (_2795 + 4294967295u) & _2795;
                        uint _2801 = _2799 * 48u;
                        vec4 _2815 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2801)).x, texelFetch(g_PointLightRenderingBuffer, int(_2801 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2801 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2801 + 3u)).x));
                        uint _2821 = (_2799 * 48u) + 4u;
                        vec4 _2834 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2821)).x, texelFetch(g_PointLightRenderingBuffer, int(_2821 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2821 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2821 + 3u)).x));
                        uint _2840 = (_2799 * 48u) + 8u;
                        vec3 _2851 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2840)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 2u)).x));
                        float _2855 = _2815.x - _2300;
                        float _2856 = _2815.y - _2301;
                        float _2857 = _2815.z - _2302;
                        float _2858 = dot(vec3(_2855, _2856, _2857), vec3(_2855, _2856, _2857));
                        float _2861 = inversesqrt(_2858);
                        float _2862 = _2861 * _2855;
                        float _2863 = _2861 * _2856;
                        float _2864 = _2861 * _2857;
                        float _2865 = dot(vec3(_506, _509, _512), vec3(_2862, _2863, _2864));
                        float _2870 = 1.0 - (_2858 * _2815.w);
                        float _4207 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
                        float _2871 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
                        float _2872 = sqrt(_2858) * _2834.w;
                        float _2875 = 1.39999997615814208984375 / (_2872 + 1.39999997615814208984375);
                        float _2876 = _2875 * _2875;
                        float _2879 = ((1.0 - _2876) * _2865) + _2876;
                        float _2882 = _2872 * _2872;
                        float _2886 = ((isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0))) * _2871) / ((_2882 * 0.699999988079071044921875) + 1.0);
                        float _2890 = (-0.0) - _2300;
                        float _2891 = (-0.0) - _2301;
                        float _2892 = (-0.0) - _2302;
                        float _2896 = inversesqrt(dot(vec3(_2890, _2891, _2892), vec3(_2890, _2891, _2892)));
                        float _2897 = _2896 * _2890;
                        float _2898 = _2896 * _2891;
                        float _2899 = _2896 * _2892;
                        float _2907 = exp2(log2(1.0 / ((_2882 * 3.5) + 5.0)) * 0.25);
                        float _2908 = 1.0 - _582;
                        float _2915 = sqrt(1.0 - ((1.0 - (_2908 * _2908)) * (1.0 - (_2907 * _2907))));
                        float _2916 = _2915 * _2915;
                        float _2917 = _2916 * _2916;
                        float _2918 = _2897 + _2862;
                        float _2919 = _2898 + _2863;
                        float _2920 = _2899 + _2864;
                        float _2924 = inversesqrt(dot(vec3(_2918, _2919, _2920), vec3(_2918, _2919, _2920)));
                        float _2928 = dot(vec3(_506, _509, _512), vec3(_2897, _2898, _2899));
                        float _4223 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
                        float _2931 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
                        float _2932 = dot(vec3(_506, _509, _512), vec3(_2924 * _2918, _2924 * _2919, _2924 * _2920));
                        float _4234 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
                        float _2935 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                        float _2939 = ((_2935 * _2935) * (_2917 + (-1.0))) + 1.0;
                        float _2940 = _2875 * _2916;
                        float _2941 = _2940 * _2940;
                        float _2944 = ((1.0 - _2941) * _2865) + _2941;
                        float _4245 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
                        float _2945 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
                        float _2946 = 1.0 - _2916;
                        float _2956 = (0.5 / (((_2945 * ((_2931 * _2946) + _2916)) + 9.9999999392252902907785028219223e-09) + (((_2945 * _2946) + _2916) * _2931))) * _2945;
                        float _4256 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                        float _2967 = (((_2917 * 3.1415927410125732421875) * (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) / ((_2939 * _2939) * ((_2882 * 2.1991131305694580078125) + 3.141590118408203125))) * _2871;
                        _2719 = (_2886 * _2834.x) + _2792;
                        _2720 = (_2886 * _2834.y) + _2793;
                        _2721 = (_2886 * _2834.z) + _2794;
                        _2716 = (_2967 * _2851.x) + _2789;
                        _2717 = (_2967 * _2851.y) + _2790;
                        _2718 = (_2967 * _2851.z) + _2791;
                        if (_2796 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2789 = _2716;
                            _2790 = _2717;
                            _2791 = _2718;
                            _2792 = _2719;
                            _2793 = _2720;
                            _2794 = _2721;
                            _2795 = _2796;
                        }
                    }
                    frontier_phi_66_pred = _2716;
                    frontier_phi_66_pred_1 = _2721;
                    frontier_phi_66_pred_2 = _2720;
                    frontier_phi_66_pred_3 = _2719;
                    frontier_phi_66_pred_4 = _2718;
                    frontier_phi_66_pred_5 = _2717;
                }
                _2483 = frontier_phi_66_pred;
                _2493 = frontier_phi_66_pred_1;
                _2491 = frontier_phi_66_pred_2;
                _2489 = frontier_phi_66_pred_3;
                _2487 = frontier_phi_66_pred_4;
                _2485 = frontier_phi_66_pred_5;
                uint _2651 = _2650 + 1u;
                if (_2651 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2644 = _2483;
                    _2645 = _2485;
                    _2646 = _2487;
                    _2647 = _2489;
                    _2648 = _2491;
                    _2649 = _2493;
                    _2650 = _2651;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2482 = _2483;
            _2484 = _2485;
            _2486 = _2487;
            _2488 = _2489;
            _2490 = _2491;
            _2492 = _2493;
        }
        uvec4 _2496 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2497 = _2496.z;
        uint _2499 = (_2497 >> 8u) & 15u;
        float _2612;
        float _2614;
        float _2616;
        float _2618;
        float _2620;
        float _2622;
        if (((4294967295u << _2499) & _2346) == 0u)
        {
            _2612 = _2482;
            _2614 = _2484;
            _2616 = _2486;
            _2618 = _2488;
            _2620 = _2490;
            _2622 = _2492;
        }
        else
        {
            float _2637 = inversesqrt(dot(vec3(_2300, _2301, _2302), vec3(_2300, _2301, _2302)));
            float _2638 = _2637 * _2300;
            float _2639 = _2637 * _2301;
            float _2640 = _2637 * _2302;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2499 < ((_2497 >> 12u) & 15u))
            {
                float _2613;
                float _2615;
                float _2617;
                float _2619;
                float _2621;
                float _2623;
                float _2772 = _2482;
                float _2773 = _2484;
                float _2774 = _2486;
                float _2775 = _2488;
                float _2776 = _2490;
                float _2777 = _2492;
                uint _2778 = _2499;
                uint _2787;
                bool _2788;
                for (;;)
                {
                    _2787 = texelFetch(g_lightClassification, int((((_2340 << 5u) + (_2326 << 9u)) + (_2778 << 2u)) >> 2u)).x;
                    _2788 = _2787 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2788)
                    {
                        frontier_phi_77_pred = _2777;
                        frontier_phi_77_pred_1 = _2776;
                        frontier_phi_77_pred_2 = _2775;
                        frontier_phi_77_pred_3 = _2774;
                        frontier_phi_77_pred_4 = _2773;
                        frontier_phi_77_pred_5 = _2772;
                    }
                    else
                    {
                        float _2981;
                        float _2982;
                        float _2983;
                        float _2984;
                        float _2985;
                        float _2986;
                        float _3276;
                        float _3277;
                        float _3278;
                        float _3279;
                        float _3280;
                        float _3281;
                        float _2994 = _2772;
                        float _2995 = _2773;
                        float _2996 = _2774;
                        float _2997 = _2775;
                        float _2998 = _2776;
                        float _2999 = _2777;
                        uint _3000 = _2787;
                        uint _3001;
                        vec4 _3026;
                        float _3027;
                        vec4 _3042;
                        vec3 _3054;
                        vec4 _3069;
                        vec4 _3085;
                        float _3132;
                        bool _3133;
                        for (;;)
                        {
                            uint _3011 = ((_2778 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3000));
                            _3001 = (_3000 + 4294967295u) & _3000;
                            uint _3013 = _3011 * 40u;
                            _3026 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3013)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 3u)).x));
                            _3027 = _3026.w;
                            uint _3029 = (_3011 * 40u) + 4u;
                            _3042 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3029)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 3u)).x));
                            uint _3044 = (_3011 * 40u) + 8u;
                            _3054 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3044)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 2u)).x));
                            uint _3056 = (_3011 * 40u) + 16u;
                            _3069 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3056)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 3u)).x));
                            uint _3072 = (_3011 * 40u) + 20u;
                            _3085 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 3u)).x));
                            uint _3088 = (_3011 * 40u) + 24u;
                            vec4 _3101 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3088)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 3u)).x));
                            uint _3107 = (_3011 * 40u) + 28u;
                            vec4 _3120 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3107)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 3u)).x));
                            _3132 = fma(_2302, _3120.z, fma(_2301, _3120.y, _3120.x * _2300)) + _3120.w;
                            _3133 = !((fma(_2302, _3101.z, fma(_2301, _3101.y, _3101.x * _2300)) + _3101.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3133)
                            {
                                float _3160 = _3026.x - _2300;
                                float _3161 = _3026.y - _2301;
                                float _3162 = _3026.z - _2302;
                                float _3163 = dot(vec3(_3160, _3161, _3162), vec3(_3160, _3161, _3162));
                                float _3166 = inversesqrt(_3163);
                                float _3167 = _3166 * _3160;
                                float _3168 = _3166 * _3161;
                                float _3169 = _3166 * _3162;
                                float _3173 = 1.0 - (_3163 / (_3027 * _3027));
                                float _4267 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                                float _3174 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                                float _3178 = sqrt(_3163) * _3042.w;
                                float _3180 = 1.39999997615814208984375 / (_3178 + 1.39999997615814208984375);
                                float _3181 = _3180 * _3180;
                                float _3184 = ((1.0 - _3181) * dot(vec3(_3167, _3168, _3169), vec3(_506, _509, _512))) + _3181;
                                float _3187 = _3178 * _3178;
                                float _3191 = (fma(_2302, _3069.z, fma(_2301, _3069.y, _3069.x * _2300)) + _3069.w) / _3132;
                                float _3192 = (fma(_2302, _3085.z, fma(_2301, _3085.y, _3085.x * _2300)) + _3085.w) / _3132;
                                float _3196 = 1.0 - dot(vec2(_3191, _3192), vec2(_3191, _3192));
                                float _4283 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                                float _3197 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
                                float _3198 = _3197 * (((isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0))) * _3174) / ((_3187 * 0.699999988079071044921875) + 1.0));
                                float _3210 = exp2(log2(1.0 / ((_3187 * 3.5) + 5.0)) * 0.25);
                                float _3211 = 1.0 - _582;
                                float _3218 = sqrt(1.0 - ((1.0 - (_3211 * _3211)) * (1.0 - (_3210 * _3210))));
                                float _3219 = _3218 * _3218;
                                float _3220 = _3219 * _3219;
                                float _3221 = _3167 - _2638;
                                float _3222 = _3168 - _2639;
                                float _3223 = _3169 - _2640;
                                float _3227 = inversesqrt(dot(vec3(_3221, _3222, _3223), vec3(_3221, _3222, _3223)));
                                float _3231 = dot(vec3(_506, _509, _512), vec3((-0.0) - _2638, (-0.0) - _2639, (-0.0) - _2640));
                                float _4294 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                                float _3234 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
                                float _3235 = dot(vec3(_506, _509, _512), vec3(_3227 * _3221, _3227 * _3222, _3227 * _3223));
                                float _4305 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                                float _3238 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
                                float _3242 = ((_3238 * _3238) * (_3220 + (-1.0))) + 1.0;
                                float _3243 = _3180 * _3219;
                                float _3244 = _3243 * _3243;
                                float _3250 = ((1.0 - _3244) * dot(vec3(_506, _509, _512), vec3(_3167, _3168, _3169))) + _3244;
                                float _4316 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                                float _3251 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
                                float _3252 = 1.0 - _3219;
                                float _3262 = (0.5 / (((_3251 * ((_3234 * _3252) + _3219)) + 9.9999999392252902907785028219223e-09) + (((_3251 * _3252) + _3219) * _3234))) * _3251;
                                float _4327 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                                float _3272 = (_3197 * _3174) * (((_3220 * 3.1415927410125732421875) * (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0)))) / ((_3242 * _3242) * ((_3187 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3198 * _3042.y;
                                frontier_phi_83_pred_1 = _3198 * _3042.x;
                                frontier_phi_83_pred_2 = _3272 * _3054.z;
                                frontier_phi_83_pred_3 = _3272 * _3054.y;
                                frontier_phi_83_pred_4 = _3272 * _3054.x;
                                frontier_phi_83_pred_5 = _3198 * _3042.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3280 = frontier_phi_83_pred;
                            _3279 = frontier_phi_83_pred_1;
                            _3278 = frontier_phi_83_pred_2;
                            _3277 = frontier_phi_83_pred_3;
                            _3276 = frontier_phi_83_pred_4;
                            _3281 = frontier_phi_83_pred_5;
                            _2984 = _3279 + _2997;
                            _2985 = _3280 + _2998;
                            _2986 = _3281 + _2999;
                            _2981 = _3276 + _2994;
                            _2982 = _3277 + _2995;
                            _2983 = _3278 + _2996;
                            if (_3001 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2994 = _2981;
                                _2995 = _2982;
                                _2996 = _2983;
                                _2997 = _2984;
                                _2998 = _2985;
                                _2999 = _2986;
                                _3000 = _3001;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2986;
                        frontier_phi_77_pred_1 = _2985;
                        frontier_phi_77_pred_2 = _2984;
                        frontier_phi_77_pred_3 = _2983;
                        frontier_phi_77_pred_4 = _2982;
                        frontier_phi_77_pred_5 = _2981;
                    }
                    _2623 = frontier_phi_77_pred;
                    _2621 = frontier_phi_77_pred_1;
                    _2619 = frontier_phi_77_pred_2;
                    _2617 = frontier_phi_77_pred_3;
                    _2615 = frontier_phi_77_pred_4;
                    _2613 = frontier_phi_77_pred_5;
                    uint _2779 = _2778 + 1u;
                    if (_2779 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2772 = _2613;
                        _2773 = _2615;
                        _2774 = _2617;
                        _2775 = _2619;
                        _2776 = _2621;
                        _2777 = _2623;
                        _2778 = _2779;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2617;
                frontier_phi_58_59_ladder_1 = _2623;
                frontier_phi_58_59_ladder_2 = _2621;
                frontier_phi_58_59_ladder_3 = _2619;
                frontier_phi_58_59_ladder_4 = _2615;
                frontier_phi_58_59_ladder_5 = _2613;
            }
            else
            {
                frontier_phi_58_59_ladder = _2486;
                frontier_phi_58_59_ladder_1 = _2492;
                frontier_phi_58_59_ladder_2 = _2490;
                frontier_phi_58_59_ladder_3 = _2488;
                frontier_phi_58_59_ladder_4 = _2484;
                frontier_phi_58_59_ladder_5 = _2482;
            }
            _2612 = frontier_phi_58_59_ladder_5;
            _2614 = frontier_phi_58_59_ladder_4;
            _2616 = frontier_phi_58_59_ladder;
            _2618 = frontier_phi_58_59_ladder_3;
            _2620 = frontier_phi_58_59_ladder_2;
            _2622 = frontier_phi_58_59_ladder_1;
        }
        float _2627 = isnan(1.0) ? _566 : (isnan(_566) ? 1.0 : min(_566, 1.0));
        _2359 = (_2627 * _2618) + _1792;
        _2361 = (_2627 * _2620) + _1794;
        _2363 = (_2627 * _2622) + _1796;
        _2365 = ((_2612 * _551) * _2627) + _2140;
        _2367 = ((_2614 * _553) * _2627) + _2142;
        _2369 = ((_2616 * _554) * _2627) + _2144;
    }
    else
    {
        _2359 = _1792;
        _2361 = _1794;
        _2363 = _1796;
        _2365 = _2140;
        _2367 = _2142;
        _2369 = _2144;
    }
    uint _2375 = _527 + uint(cbMatDynParam._m0[0u].w);
    float _2383 = ((_370 * cbMtdParam._m0[11u].x) * (_354.x + _339.x)) * cbInstanceData._m0[_2375].x;
    float _2386 = ((_370 * cbMtdParam._m0[11u].y) * (_354.y + _339.y)) * cbInstanceData._m0[_2375].y;
    float _2389 = ((_370 * cbMtdParam._m0[11u].z) * (_354.z + _339.z)) * cbInstanceData._m0[_2375].z;
    float _4343 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _4354 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _4365 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _2406 = (((isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_2359 + ((isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0))) * _566))) + ((_2365 + ((isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))) * _1407)) * cbPerFrame._m0[3u].x)) + _2383;
    float _2408 = (_2386 + ((_2367 + ((isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))) * _1407)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (_2361 + ((isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0))) * _566)));
    float _2410 = (_2389 + ((_2369 + ((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _1407)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_2363 + ((isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0))) * _566)));
    float _2411 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2412 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _2413 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _2419 = cbMtdParam._m0[2u].x * _2383;
    float _2420 = cbMtdParam._m0[2u].y * _2386;
    float _2421 = cbMtdParam._m0[2u].z * _2389;
    float _4391 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2423 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
    uint _2424 = _525 + 6u;
    float _2432 = _485 / cbSceneParam._m0[86u].x;
    float _2433 = _486 / cbSceneParam._m0[86u].y;
    vec4 _2447 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2432, _2433, (log2((isnan(cbSceneParam._m0[77u].w) ? _407 : (isnan(_407) ? cbSceneParam._m0[77u].w : min(_407, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2449 = _2447.x;
    float _2450 = _2447.y;
    float _2451 = _2447.z;
    float _2452 = _2447.w;
    float _2545;
    float _2547;
    float _2549;
    float _2551;
    if (_407 > cbSceneParam._m0[78u].w)
    {
        float _2507 = isnan(_407) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _407 : min(cbSceneParam._m0[80u].w, _407));
        float _2508 = _2507 / _407;
        float _2519 = _2508 * _458;
        float _2520 = _459 * _2508;
        float _2521 = (-0.0) - _2520;
        float _2523 = _2508 * _460;
        float _2525 = (cbSceneParam._m0[77u].w * _2521) / _2507;
        float _2526 = _2525 + cbSceneParam._m0[79u].w;
        float _2527 = cbSceneParam._m0[79u].w - _2520;
        float _2533 = sqrt(((_2519 * _2519) + (_2520 * _2520)) + (_2523 * _2523));
        float _2536 = (1.0 - (cbSceneParam._m0[77u].w / _2507)) * _2533;
        float _2541 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2543 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2729;
        if (abs((_2521 - _2525) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2729 = ((((_2526 > 0.0) ? exp2(_2541 * _2526) : (2.0 - exp2(_2543 * _2526))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2536;
        }
        else
        {
            float _2673 = 1.0 / cbSceneParam._m0[80u].x;
            float _2674 = isnan(_2527) ? _2526 : (isnan(_2526) ? _2527 : max(_2526, _2527));
            float _2675 = isnan(_2527) ? _2526 : (isnan(_2526) ? _2527 : min(_2526, _2527));
            float _2684 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : min(_2674, 0.0));
            float _2685 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : min(_2675, 0.0));
            _2729 = ((abs(_2533 / _2521) * cbSceneParam._m0[80u].y) * ((((_2684 - _2685) * 2.0) - ((exp2(_2541 * (isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0)))) - exp2(_2541 * (isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0))))) * _2673)) - ((exp2(_2543 * _2684) - exp2(_2543 * _2685)) * _2673))) + (_2536 * cbSceneParam._m0[80u].z);
        }
        vec4 _2731 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2432, _2433, 1.0), 0.0);
        float _2740 = exp2((_2729 * (-1.44269502162933349609375)) * (1.0 - _2731.w));
        float _2741 = log2(_2740);
        float _2757 = log2(_2452);
        _2545 = (exp2(_2757 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2741 * cbSceneParam._m0[78u].x)) * _2731.x) / cbSceneParam._m0[78u].x)) + _2449;
        _2547 = (exp2(_2757 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2741 * cbSceneParam._m0[78u].y)) * _2731.y) / cbSceneParam._m0[78u].y)) + _2450;
        _2549 = (exp2(_2757 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2741 * cbSceneParam._m0[78u].z)) * _2731.z) / cbSceneParam._m0[78u].z)) + _2451;
        _2551 = _2740 * _2452;
    }
    else
    {
        _2545 = _2449;
        _2547 = _2450;
        _2549 = _2451;
        _2551 = _2452;
    }
    bool _2767;
    vec4 _2561;
    vec4 _2583;
    float _2585;
    float _2589;
    float _2590;
    float _2591;
    float _2594;
    float _2597;
    float _2600;
    float _2601;
    bool _2611;
    for (;;)
    {
        _2561 = cbMatDynParam._m0[0u];
        float _2563 = roundEven(_2561.y);
        bool _2564 = _2563 == 3.0;
        float _2565 = log2(_2551);
        float _2569 = exp2(_2565 * cbSceneParam._m0[78u].x);
        float _2570 = exp2(_2565 * cbSceneParam._m0[78u].y);
        float _2571 = exp2(_2565 * cbSceneParam._m0[78u].z);
        float _2572 = _2569 * _2411;
        float _2573 = _2570 * _2412;
        float _2574 = _2571 * _2413;
        float _2581 = _474 + (-0.5);
        _2583 = cbMtdParam._m0[1u];
        _2585 = _2583.y * _2581;
        float _2588 = (_2563 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2589 = _2588 * (_2564 ? _2572 : (_2572 + (cbSceneParam._m0[72u].w * _2545)));
        _2590 = _2588 * (_2564 ? _2573 : (_2573 + (cbSceneParam._m0[72u].w * _2547)));
        _2591 = _2588 * (_2564 ? _2574 : (_2574 + (cbSceneParam._m0[72u].w * _2549)));
        _2594 = ((_2419 * _2423) * _2569) * _2588;
        _2597 = ((_2420 * _2423) * _2570) * _2588;
        _2600 = ((_2421 * _2423) * _2571) * _2588;
        _2601 = _2581 * 0.999000012874603271484375;
        _2611 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2611)
        {
            if ((cbInstanceData._m0[_525 + 7u].x + _2601) < 0.5)
            {
                _2767 = true;
                break;
            }
        }
        uint _2708 = _527 + uint(_2561.w);
        if ((cbInstanceData._m0[_2708].w < 1.0) && ((cbInstanceData._m0[_2708].w + _2601) < 0.5))
        {
            _2767 = true;
            break;
        }
        if ((_2585 + 1.0) < _2583.x)
        {
            _2767 = true;
            break;
        }
        _2767 = false;
        break;
    }
    float _2972;
    if (_2767)
    {
        discard_state = true;
        _2972 = 0.0;
    }
    else
    {
        _2972 = cbInstanceData._m0[_2424].w;
    }
    SV_Target.x = _2589;
    SV_Target.y = _2590;
    SV_Target.z = _2591;
    SV_Target.w = _2972;
    SV_Target_1.x = _2594;
    SV_Target_1.y = _2597;
    SV_Target_1.z = _2600;
    SV_Target_1.w = cbInstanceData._m0[_2424].w;
    discard_exit();
}


