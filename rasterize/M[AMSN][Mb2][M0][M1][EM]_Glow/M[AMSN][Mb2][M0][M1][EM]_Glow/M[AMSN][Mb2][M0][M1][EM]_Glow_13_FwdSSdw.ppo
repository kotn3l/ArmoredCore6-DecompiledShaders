#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1036;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _243 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _249 = _243.x * cbMtdParam._m0[9u].x;
    float _250 = _243.y * cbMtdParam._m0[9u].y;
    float _251 = _243.z * cbMtdParam._m0[9u].z;
    vec4 _271 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _292 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_271.x + 0.00999999977648258209228515625));
    float _294 = _292 * (cbMtdParam._m0[15u].x + 1.0);
    float _3408 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _295 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
    float _303 = ((((cbMtdParam._m0[12u].x - _249) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _295) + _249;
    float _304 = ((((cbMtdParam._m0[12u].y - _250) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _295) + _250;
    float _305 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _251)) * _295) + _251;
    vec4 _317 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _321 = _317.z;
    float _325 = (_317.x * 2.0) + (-1.0);
    float _327 = (_317.y * 2.0) + (-1.0);
    float _328 = dot(vec2(_325, _327), vec2(_325, _327));
    float _3419 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _333 = sqrt(1.0 - (isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0))));
    float _336 = _292 * (cbMtdParam._m0[14u].w + 1.0);
    float _3430 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _340 = ((cbMtdParam._m0[14u].y - _321) * (isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0)))) + _321;
    vec4 _368 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    vec4 _383 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _428 = (TEXCOORD_6.x - ((cbMtdParam._m0[13u].w * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_5, SS_WrapLinear), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].x + 1.0);
    float _3441 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _429 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
    float _430 = ((_383.x + _368.x) * cbMtdParam._m0[11u].x) * _429;
    float _431 = ((_383.y + _368.y) * cbMtdParam._m0[11u].y) * _429;
    float _432 = ((_383.z + _368.z) * cbMtdParam._m0[11u].z) * _429;
    vec4 _444 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[9u].w));
    float _446 = _444.x;
    vec4 _471 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _477 = (_471.x * 2.0) + (-1.0);
    float _478 = (_471.y * 2.0) + (-1.0);
    float _479 = dot(vec2(_477, _478), vec2(_477, _478));
    float _3452 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _495 = (_295 * (((cbMtdParam._m0[13u].z * _325) - _325) + _477)) + _325;
    float _496 = (_295 * (((cbMtdParam._m0[13u].z * _327) - _327) + _478)) + _327;
    float _497 = (_295 * (sqrt(1.0 - (isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0)))) - _333)) + _333;
    float _500 = fma(_497, _214 * NORMAL.x, fma(_496, _221 * TANGENT.x, (_207 * _199) * _495));
    float _503 = fma(_497, _214 * NORMAL.y, fma(_496, _221 * TANGENT.y, (_207 * _200) * _495));
    float _506 = fma(_497, _214 * NORMAL.z, fma(_496, _221 * TANGENT.z, (_207 * _201) * _495));
    float _510 = inversesqrt(dot(vec3(_500, _503, _506), vec3(_500, _503, _506)));
    float _511 = _510 * _500;
    float _512 = _510 * _503;
    float _513 = _510 * _506;
    float _3463 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _514 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
    float _3474 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3485 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _3496 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _533 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _573 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _583 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _573);
    float _584 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _573);
    float _585 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _573);
    float _589 = inversesqrt(dot(vec3(_583, _584, _585), vec3(_583, _584, _585)));
    float _590 = _583 * _589;
    float _591 = _584 * _589;
    float _592 = _585 * _589;
    float _598 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _599 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _620 = fma(_513, cbSceneParam._m0[5u].z, fma(_512, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _511));
    float _623 = fma(_513, cbSceneParam._m0[6u].z, fma(_512, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _511));
    float _626 = fma(_513, cbSceneParam._m0[7u].z, fma(_512, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _511));
    uint _639 = uint(roundEven(NORMAL.w)) * 13u;
    uint _640 = _639 + 9u;
    uint _641 = _640 + uint(cbMatDynParam._m0[0u].w);
    float _647 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0)))) * cbInstanceData._m0[_641].x;
    float _648 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0)))) * cbInstanceData._m0[_641].y;
    float _649 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0)))) * cbInstanceData._m0[_641].z;
    float _3507 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _650 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
    float _3518 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _651 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
    float _3529 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _652 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
    vec4 _661 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _598, cbSceneParam._m0[86u].y * _599));
    float _664 = _661.x * TEXCOORD_3.w;
    float _665 = dot(vec3(_511, _512, _513), vec3(_590, _591, _592));
    float _668 = _665 * 2.0;
    float _672 = (_668 * _511) - _590;
    float _673 = (_668 * _512) - _591;
    float _674 = (_668 * _513) - _592;
    float _678 = abs(dot(vec3(_590, _591, _592), vec3(_511, _512, _513)));
    float _3540 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _680 = sqrt(_514);
    float _693 = exp2((_680 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_680 * 3.0));
    float _725 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _729 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _733 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1035;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _760 = fma(_733, cbModelParam._m0[26u].z, fma(_729, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _725));
        float _764 = fma(_733, cbModelParam._m0[27u].z, fma(_729, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _725));
        float _768 = fma(_733, cbModelParam._m0[28u].z, fma(_729, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _725));
        float _793 = _725 + _511;
        float _794 = _729 + _512;
        float _795 = _733 + _513;
        float _805 = fma(_795, cbModelParam._m0[26u].z, fma(_794, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _793)) - _760;
        float _806 = fma(_795, cbModelParam._m0[27u].z, fma(_794, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _793)) - _764;
        float _807 = fma(_795, cbModelParam._m0[28u].z, fma(_794, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _793)) - _768;
        float _811 = inversesqrt(dot(vec3(_805, _806, _807), vec3(_805, _806, _807)));
        float _824 = ((_811 * _805) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_760 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _825 = ((_811 * _806) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_764 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _826 = ((_811 * _807) / cbModelParam._m0[34u].z) + ((((((_768 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _829 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        vec4 _836 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        vec4 _843 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        float _863 = exp2((_829.w + (-0.5)) * 20.0) * 2.0;
        float _864 = _863 * (_829.x + (-0.5));
        float _865 = _863 * (_829.y + (-0.5));
        float _866 = _863 * (_829.z + (-0.5));
        float _873 = exp2((_836.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_836.x + (-0.5));
        float _875 = _873 * (_836.y + (-0.5));
        float _876 = _873 * (_836.z + (-0.5));
        float _883 = exp2((_843.w + (-0.5)) * 20.0) * 2.0;
        float _884 = _883 * (_843.x + (-0.5));
        float _885 = _883 * (_843.y + (-0.5));
        float _886 = _883 * (_843.z + (-0.5));
        float _893 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _894 = _893 * (_850.x + (-0.5));
        float _895 = _893 * (_850.y + (-0.5));
        float _896 = _893 * (_850.z + (-0.5));
        float _897 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _898 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _899 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _900 = _864 * 0.5;
        float _901 = _874 * 0.5;
        float _902 = _884 * 0.5;
        float _903 = dot(vec3(_900, _901, _902), vec3(_900, _901, _902));
        float _908 = (_903 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_903);
        float _917 = (dot(vec3(_511, _512, _513), vec3(_908 * _900, _908 * _901, _908 * _902)) + 1.0) * 0.5;
        float _3566 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _927 = sqrt(((_901 * _901) + (_900 * _900)) + (_902 * _902)) / (_897 + 9.9999997473787516355514526367188e-06);
        float _3577 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _929 = _928 * 2.0;
        float _933 = (1.0 - _928) / (_928 + 1.0);
        float _3588 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _943 = ((((1.0 - _934) * (_929 + 2.0)) * exp2(log2(isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0))) * (_929 + 1.0))) + _934) * _897;
        float _944 = _865 * 0.5;
        float _945 = _875 * 0.5;
        float _946 = _885 * 0.5;
        float _947 = dot(vec3(_944, _945, _946), vec3(_944, _945, _946));
        float _952 = (_947 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_947);
        float _960 = (dot(vec3(_511, _512, _513), vec3(_952 * _944, _952 * _945, _952 * _946)) + 1.0) * 0.5;
        float _3599 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _969 = sqrt(((_945 * _945) + (_944 * _944)) + (_946 * _946)) / (_898 + 9.9999997473787516355514526367188e-06);
        float _3610 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _971 = _970 * 2.0;
        float _975 = (1.0 - _970) / (_970 + 1.0);
        float _3621 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _985 = ((((1.0 - _976) * (_971 + 2.0)) * exp2(log2(isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))) * (_971 + 1.0))) + _976) * _898;
        float _986 = _866 * 0.5;
        float _987 = _876 * 0.5;
        float _988 = _886 * 0.5;
        float _989 = dot(vec3(_986, _987, _988), vec3(_986, _987, _988));
        float _994 = (_989 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_989);
        float _1002 = (dot(vec3(_511, _512, _513), vec3(_994 * _986, _994 * _987, _994 * _988)) + 1.0) * 0.5;
        float _3632 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1011 = sqrt(((_987 * _987) + (_986 * _986)) + (_988 * _988)) / (_899 + 9.9999997473787516355514526367188e-06);
        float _3643 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _1013 = _1012 * 2.0;
        float _1017 = (1.0 - _1012) / (_1012 + 1.0);
        float _3654 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _1027 = ((((1.0 - _1018) * (_1013 + 2.0)) * exp2(log2(isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) * (_1013 + 1.0))) + _1018) * _899;
        _1035 = _866;
        _1037 = _865;
        _1038 = _864;
        _1039 = _876;
        _1040 = _875;
        _1041 = _874;
        _1042 = _886;
        _1043 = _885;
        _1044 = _884;
        _1045 = _899;
        _1046 = _898;
        _1047 = _897;
        _1048 = cbModelParam._m0[36u].z * (isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0)));
        _1049 = cbModelParam._m0[36u].z * (isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0)));
        _1050 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0)));
    }
    else
    {
        _1035 = _1036;
        _1037 = _1036;
        _1038 = _1036;
        _1039 = _1036;
        _1040 = _1036;
        _1041 = _1036;
        _1042 = _1036;
        _1043 = _1036;
        _1044 = _1036;
        _1045 = _1036;
        _1046 = _1036;
        _1047 = _1036;
        _1048 = 0.0;
        _1049 = 0.0;
        _1050 = 0.0;
    }
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1076 = fma(_733, cbModelParam._m0[30u].z, fma(_729, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _725));
        float _1080 = fma(_733, cbModelParam._m0[31u].z, fma(_729, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _725));
        float _1084 = fma(_733, cbModelParam._m0[32u].z, fma(_729, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _725));
        float _1107 = _725 + _511;
        float _1108 = _729 + _512;
        float _1109 = _733 + _513;
        float _1119 = fma(_1109, cbModelParam._m0[30u].z, fma(_1108, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1107)) - _1076;
        float _1120 = fma(_1109, cbModelParam._m0[31u].z, fma(_1108, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1107)) - _1080;
        float _1121 = fma(_1109, cbModelParam._m0[32u].z, fma(_1108, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1107)) - _1084;
        float _1125 = inversesqrt(dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121)));
        float _1138 = ((_1125 * _1119) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1076 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1139 = ((_1125 * _1120) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1080 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1140 = ((_1125 * _1121) / cbModelParam._m0[35u].z) + ((((((_1084 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        float _1175 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1142.x + (-0.5));
        float _1177 = _1175 * (_1142.y + (-0.5));
        float _1178 = _1175 * (_1142.z + (-0.5));
        float _1185 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1149.x + (-0.5));
        float _1187 = _1185 * (_1149.y + (-0.5));
        float _1188 = _1185 * (_1149.z + (-0.5));
        float _1195 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1156.x + (-0.5));
        float _1197 = _1195 * (_1156.y + (-0.5));
        float _1198 = _1195 * (_1156.z + (-0.5));
        float _1205 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1163.x + (-0.5));
        float _1207 = _1205 * (_1163.y + (-0.5));
        float _1208 = _1205 * (_1163.z + (-0.5));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1212 = _1176 * 0.5;
        float _1213 = _1186 * 0.5;
        float _1214 = _1196 * 0.5;
        float _1215 = dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214));
        float _1220 = (_1215 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1215);
        float _1228 = (dot(vec3(_511, _512, _513), vec3(_1220 * _1212, _1220 * _1213, _1220 * _1214)) + 1.0) * 0.5;
        float _3695 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1237 = sqrt(((_1213 * _1213) + (_1212 * _1212)) + (_1214 * _1214)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _3706 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1239 = _1238 * 2.0;
        float _1243 = (1.0 - _1238) / (_1238 + 1.0);
        float _3717 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1253 = ((((1.0 - _1244) * (_1239 + 2.0)) * exp2(log2(isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * (_1239 + 1.0))) + _1244) * _1209;
        float _1254 = _1177 * 0.5;
        float _1255 = _1187 * 0.5;
        float _1256 = _1197 * 0.5;
        float _1257 = dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256));
        float _1262 = (_1257 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1257);
        float _1270 = (dot(vec3(_511, _512, _513), vec3(_1262 * _1254, _1262 * _1255, _1262 * _1256)) + 1.0) * 0.5;
        float _3728 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1279 = sqrt(((_1255 * _1255) + (_1254 * _1254)) + (_1256 * _1256)) / (_1210 + 9.9999997473787516355514526367188e-06);
        float _3739 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1281 = _1280 * 2.0;
        float _1285 = (1.0 - _1280) / (_1280 + 1.0);
        float _3750 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1295 = ((((1.0 - _1286) * (_1281 + 2.0)) * exp2(log2(isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * (_1281 + 1.0))) + _1286) * _1210;
        float _1296 = _1178 * 0.5;
        float _1297 = _1188 * 0.5;
        float _1298 = _1198 * 0.5;
        float _1299 = dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298));
        float _1304 = (_1299 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1299);
        float _1312 = (dot(vec3(_511, _512, _513), vec3(_1304 * _1296, _1304 * _1297, _1304 * _1298)) + 1.0) * 0.5;
        float _3761 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1321 = sqrt(((_1297 * _1297) + (_1296 * _1296)) + (_1298 * _1298)) / (_1211 + 9.9999997473787516355514526367188e-06);
        float _3772 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1323 = _1322 * 2.0;
        float _1327 = (1.0 - _1322) / (_1322 + 1.0);
        float _3783 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1337 = ((((1.0 - _1328) * (_1323 + 2.0)) * exp2(log2(isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * (_1323 + 1.0))) + _1328) * _1211;
        _1345 = _1178;
        _1346 = _1177;
        _1347 = _1176;
        _1348 = _1188;
        _1349 = _1187;
        _1350 = _1186;
        _1351 = _1198;
        _1352 = _1197;
        _1353 = _1196;
        _1354 = _1211;
        _1355 = _1210;
        _1356 = _1209;
        _1357 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)));
        _1358 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)));
        _1359 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)));
    }
    else
    {
        _1345 = _1036;
        _1346 = _1036;
        _1347 = _1036;
        _1348 = _1036;
        _1349 = _1036;
        _1350 = _1036;
        _1351 = _1036;
        _1352 = _1036;
        _1353 = _1036;
        _1354 = _1036;
        _1355 = _1036;
        _1356 = _1036;
        _1357 = 0.0;
        _1358 = 0.0;
        _1359 = 0.0;
    }
    float _1369 = (cbModelParam._m0[1u].x * (_1357 - _1048)) + _1048;
    float _1370 = (cbModelParam._m0[1u].x * (_1358 - _1049)) + _1049;
    float _1371 = (cbModelParam._m0[1u].x * (_1359 - _1050)) + _1050;
    float _1392 = fma(_1371, cbSceneParam._m0[89u].z, fma(_1370, cbSceneParam._m0[89u].y, _1369 * cbSceneParam._m0[89u].x));
    float _1395 = fma(_1371, cbSceneParam._m0[90u].z, fma(_1370, cbSceneParam._m0[90u].y, _1369 * cbSceneParam._m0[90u].x));
    float _1398 = fma(_1371, cbSceneParam._m0[91u].z, fma(_1370, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1369));
    float _1413 = _672 * 0.5;
    float _1414 = _673 * 0.5;
    float _1415 = _674 * 0.5;
    float _1416 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1347, _1350, _1353, _1356));
    float _1419 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1346, _1349, _1352, _1355));
    float _1422 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1345, _1348, _1351, _1354));
    float _1456;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1429 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1035, _1039, _1042, _1045));
        float _1433 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1037, _1040, _1043, _1046));
        float _1437 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1038, _1041, _1044, _1047));
        float _1444 = dot(vec4(cbModelParam._m0[39u]), vec4(_1413, _1414, _1415, 1.0));
        _1456 = dot(vec3(isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)), isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)), isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1444) ? 0.0 : (isnan(0.0) ? _1444 : max(0.0, _1444))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1456 = 1.0;
    }
    float _1467;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1458 = dot(vec4(cbModelParam._m0[40u]), vec4(_1413, _1414, _1415, 1.0));
        _1467 = dot(vec3(isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)), isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)), isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1458) ? 0.0 : (isnan(0.0) ? _1458 : max(0.0, _1458))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1467 = 1.0;
    }
    float _1471 = (_1467 * cbModelParam._m0[1u].x) + (_1456 * (1.0 - cbModelParam._m0[1u].x));
    float _1481 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _514);
    float _1482 = isnan(_1481) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1481 : min(cbModelParam._m0[25u].z, _1481));
    float _1562;
    float _1564;
    float _1566;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1529 = fma(_733, cbModelParam._m0[13u].z, fma(_729, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _725)) + cbModelParam._m0[13u].w;
        float _1533 = fma(_733, cbModelParam._m0[14u].z, fma(_729, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _725)) + cbModelParam._m0[14u].w;
        float _1537 = fma(_733, cbModelParam._m0[15u].z, fma(_729, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _725)) + cbModelParam._m0[15u].w;
        float _1540 = fma(_674, cbModelParam._m0[13u].z, fma(_673, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _672));
        float _1543 = fma(_674, cbModelParam._m0[14u].z, fma(_673, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _672));
        float _1546 = fma(_674, cbModelParam._m0[15u].z, fma(_673, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _672));
        float _1574;
        if (_1540 > 0.0)
        {
            _1574 = abs((1.0 - _1529) / _1540);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1529 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1574 = frontier_phi_14_12_ladder;
        }
        float _1798;
        if (_1543 > 0.0)
        {
            _1798 = abs((1.0 - _1533) / _1543);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1543 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1533 + 1.0) / _1543);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1798 = frontier_phi_23_19_ladder;
        }
        float _2044;
        if (_1546 > 0.0)
        {
            _2044 = abs((1.0 - _1537) / _1546);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1546 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1537 + 1.0) / _1546);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2044 = frontier_phi_35_30_ladder;
        }
        float _2046 = isnan(_1798) ? _1574 : (isnan(_1574) ? _1798 : min(_1574, _1798));
        float _2047 = isnan(_2044) ? _2046 : (isnan(_2046) ? _2044 : min(_2046, _2044));
        float _2051 = (_2047 * _1540) + _1529;
        float _2052 = (_2047 * _1543) + _1533;
        float _2053 = (_2047 * _1546) + _1537;
        float _2054 = _2047 * 9.9999997473787516355514526367188e-05;
        float _2056 = (-1.0) - _2054;
        float _2058 = _2054 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2053 > _2058) || ((_2053 < _2056) || ((_2052 > _2058) || ((_2052 < _2056) || ((_2051 < _2056) || (_2051 > _2058))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2177 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2053, cbModelParam._m0[9u].z, fma(_2052, cbModelParam._m0[9u].y, _2051 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2053, cbModelParam._m0[10u].z, fma(_2052, cbModelParam._m0[10u].y, _2051 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2053, cbModelParam._m0[11u].z, fma(_2052, cbModelParam._m0[11u].y, _2051 * cbModelParam._m0[11u].x))), _1482);
            frontier_phi_13_35_ladder = _2177.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2177.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2177.x * cbModelParam._m0[1u].y;
        }
        _1562 = frontier_phi_13_35_ladder_2;
        _1564 = frontier_phi_13_35_ladder_1;
        _1566 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1550 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_672, _673, _674), _1482);
        _1562 = _1550.x * cbModelParam._m0[1u].y;
        _1564 = _1550.y * cbModelParam._m0[1u].y;
        _1566 = _1550.z * cbModelParam._m0[1u].y;
    }
    float _1570 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _514);
    float _1571 = isnan(_1570) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1570 : min(cbModelParam._m0[25u].w, _1570));
    float _1662;
    float _1664;
    float _1666;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1626 = fma(_733, cbModelParam._m0[21u].z, fma(_729, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _725)) + cbModelParam._m0[21u].w;
        float _1630 = fma(_733, cbModelParam._m0[22u].z, fma(_729, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _725)) + cbModelParam._m0[22u].w;
        float _1634 = fma(_733, cbModelParam._m0[23u].z, fma(_729, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _725)) + cbModelParam._m0[23u].w;
        float _1637 = fma(_674, cbModelParam._m0[21u].z, fma(_673, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _672));
        float _1640 = fma(_674, cbModelParam._m0[22u].z, fma(_673, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _672));
        float _1643 = fma(_674, cbModelParam._m0[23u].z, fma(_673, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _672));
        float _1803;
        if (_1637 > 0.0)
        {
            _1803 = abs((1.0 - _1626) / _1637);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1626 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1803 = frontier_phi_25_21_ladder;
        }
        float _2071;
        if (_1640 > 0.0)
        {
            _2071 = abs((1.0 - _1630) / _1640);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1640 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1630 + 1.0) / _1640);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2071 = frontier_phi_37_32_ladder;
        }
        float _2276;
        if (_1643 > 0.0)
        {
            _2276 = abs((1.0 - _1634) / _1643);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1643 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1634 + 1.0) / _1643);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2276 = frontier_phi_46_43_ladder;
        }
        float _2278 = isnan(_2071) ? _1803 : (isnan(_1803) ? _2071 : min(_1803, _2071));
        float _2279 = isnan(_2276) ? _2278 : (isnan(_2278) ? _2276 : min(_2278, _2276));
        float _2283 = (_2279 * _1637) + _1626;
        float _2284 = (_2279 * _1640) + _1630;
        float _2285 = (_2279 * _1643) + _1634;
        float _2286 = _2279 * 9.9999997473787516355514526367188e-05;
        float _2287 = (-1.0) - _2286;
        float _2289 = _2286 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2285 > _2289) || ((_2285 < _2287) || ((_2284 > _2289) || ((_2284 < _2287) || ((_2283 < _2287) || (_2283 > _2289))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2513 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2285, cbModelParam._m0[17u].z, fma(_2284, cbModelParam._m0[17u].y, _2283 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2285, cbModelParam._m0[18u].z, fma(_2284, cbModelParam._m0[18u].y, _2283 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2285, cbModelParam._m0[19u].z, fma(_2284, cbModelParam._m0[19u].y, _2283 * cbModelParam._m0[19u].x))), _1571);
            frontier_phi_22_46_ladder = _2513.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2513.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2513.x * cbModelParam._m0[1u].z;
        }
        _1662 = frontier_phi_22_46_ladder_2;
        _1664 = frontier_phi_22_46_ladder_1;
        _1666 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1646 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_672, _673, _674), _1571);
        _1662 = _1646.x * cbModelParam._m0[1u].z;
        _1664 = _1646.y * cbModelParam._m0[1u].z;
        _1666 = _1646.z * cbModelParam._m0[1u].z;
    }
    float _1678 = ((((1.0 - _693) * ((_680 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_693 * _680)) * _664;
    float _1679 = _1678 * ((cbModelParam._m0[1u].w * (_1662 - _1562)) + _1562);
    float _1680 = _1678 * ((cbModelParam._m0[1u].w * (_1664 - _1564)) + _1564);
    float _1681 = _1678 * ((cbModelParam._m0[1u].w * (_1666 - _1566)) + _1566);
    float _1684 = fma(_1681, cbSceneParam._m0[89u].z, fma(_1680, cbSceneParam._m0[89u].y, _1679 * cbSceneParam._m0[89u].x));
    float _1687 = fma(_1681, cbSceneParam._m0[90u].z, fma(_1680, cbSceneParam._m0[90u].y, _1679 * cbSceneParam._m0[90u].x));
    float _1690 = fma(_1681, cbSceneParam._m0[91u].z, fma(_1680, cbSceneParam._m0[91u].y, _1679 * cbSceneParam._m0[91u].x));
    vec4 _1698 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_598, _599));
    float _1700 = _1698.w;
    float _1712 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1700);
    float _1713 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1700);
    float _1714 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1700);
    uvec4 _1718 = floatBitsToUint(cbInstanceData._m0[_639 + 5u]);
    uint _1720 = _1718.x * 14u;
    uint _1721 = _1720 + 13u;
    float _1728 = _664 + (-1.0);
    float _1733 = (cbLight._m0[_1721].x * _1728) + 1.0;
    float _1734 = (cbLight._m0[_1721].y * _1728) + 1.0;
    float _1735 = (cbLight._m0[_1721].z * _1728) + 1.0;
    float _1736 = (cbLight._m0[_1721].w * _1728) + 1.0;
    uint _1737 = _1720 + 5u;
    float _1743 = isnan(1.0) ? _1734 : (isnan(_1734) ? 1.0 : min(_1734, 1.0));
    uint _1747 = _1720 + 4u;
    float _1757 = isnan(1.0) ? _1733 : (isnan(_1733) ? 1.0 : min(_1733, 1.0));
    uint _1761 = _1720 | 1u;
    float _1772 = dot(vec3(cbLight._m0[_1720].xyz), vec3(_511, _512, _513));
    float _1775 = dot(vec3(cbLight._m0[_1761].xyz), vec3(_511, _512, _513));
    float _3919 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    float _3930 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
    float _1780 = (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * 0.3183098733425140380859375;
    float _1782 = (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * 0.3183098733425140380859375;
    float _1789 = ((cbLight._m0[_1737].x * _1743) * _1782) + (((cbLight._m0[_1747].x * _1712) * _1757) * _1780);
    float _1790 = ((_1743 * cbLight._m0[_1737].y) * _1782) + (((cbLight._m0[_1747].y * _1713) * _1757) * _1780);
    float _1791 = ((_1743 * cbLight._m0[_1737].z) * _1782) + (((cbLight._m0[_1747].z * _1714) * _1757) * _1780);
    uvec4 _1795 = floatBitsToUint(cbLight._m0[_1720 + 12u]);
    bool _1797 = _1795.x == 0u;
    float _1808;
    float _1810;
    float _1812;
    if (_1797)
    {
        _1808 = _1789;
        _1810 = _1790;
        _1812 = _1791;
    }
    else
    {
        uint _1816 = _1720 + 6u;
        float _1832 = (dot(vec3(cbLight._m0[_1720 + 2u].xyz), vec3(_511, _512, _513)) * 0.5) + 0.5;
        float _1833 = _1832 * _1832;
        float _3941 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
        float _1834 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1835 = isnan(1.0) ? _1735 : (isnan(_1735) ? 1.0 : min(_1735, 1.0));
        _1808 = (((cbLight._m0[_1816].x * 0.3183098733425140380859375) * _1834) * _1835) + _1789;
        _1810 = (((cbLight._m0[_1816].y * 0.3183098733425140380859375) * _1834) * _1835) + _1790;
        _1812 = (((cbLight._m0[_1816].z * 0.3183098733425140380859375) * _1834) * _1835) + _1791;
    }
    bool _1815 = _1795.y == 0u;
    float _1853;
    float _1855;
    float _1857;
    if (_1815)
    {
        _1853 = _1808;
        _1855 = _1810;
        _1857 = _1812;
    }
    else
    {
        uint _2015 = _1720 + 7u;
        float _2031 = (dot(vec3(cbLight._m0[_1720 + 3u].xyz), vec3(_511, _512, _513)) * 0.5) + 0.5;
        float _2032 = _2031 * _2031;
        float _3957 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
        float _2033 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _2034 = isnan(1.0) ? _1736 : (isnan(_1736) ? 1.0 : min(_1736, 1.0));
        _1853 = (((cbLight._m0[_2015].x * 0.3183098733425140380859375) * _2033) * _2034) + _1808;
        _1855 = (((cbLight._m0[_2015].y * 0.3183098733425140380859375) * _2033) * _2034) + _1810;
        _1857 = (((cbLight._m0[_2015].z * 0.3183098733425140380859375) * _2033) * _2034) + _1812;
    }
    uint _1860 = _1720 + 8u;
    float _1873 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1720].w)) * _514) * 0.949999988079071044921875);
    float _1874 = _1873 * _1873;
    float _1875 = cbLight._m0[_1720].x + _590;
    float _1876 = cbLight._m0[_1720].y + _591;
    float _1877 = cbLight._m0[_1720].z + _592;
    float _1881 = inversesqrt(dot(vec3(_1875, _1876, _1877), vec3(_1875, _1876, _1877)));
    float _1882 = _1881 * _1875;
    float _1883 = _1881 * _1876;
    float _1884 = _1881 * _1877;
    float _1885 = dot(vec3(_511, _512, _513), vec3(cbLight._m0[_1720].xyz));
    float _3973 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1888 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _3984 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _1889 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _1890 = dot(vec3(_511, _512, _513), vec3(_1882, _1883, _1884));
    float _3995 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1893 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
    float _1894 = dot(vec3(cbLight._m0[_1720].xyz), vec3(_1882, _1883, _1884));
    float _4006 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
    float _1898 = _1874 * _1874;
    float _1902 = ((_1893 * _1893) * (_1898 + (-1.0))) + 1.0;
    float _1913 = (exp2(log2(1.0 - (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1914 = 1.0 - _1874;
    float _1925 = (0.5 / (((_1889 * ((_1888 * _1914) + _1874)) + 9.9999999392252902907785028219223e-09) + (((_1889 * _1914) + _1874) * _1888))) * _1888;
    float _4017 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _1927 = (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_1898 / ((_1902 * _1902) * 3.141590118408203125));
    uint _1941 = _1720 + 9u;
    float _1952 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1761].w)) * _514) * 0.949999988079071044921875);
    float _1953 = _1952 * _1952;
    float _1954 = cbLight._m0[_1761].x + _590;
    float _1955 = cbLight._m0[_1761].y + _591;
    float _1956 = cbLight._m0[_1761].z + _592;
    float _1960 = inversesqrt(dot(vec3(_1954, _1955, _1956), vec3(_1954, _1955, _1956)));
    float _1961 = _1960 * _1954;
    float _1962 = _1960 * _1955;
    float _1963 = _1960 * _1956;
    float _1964 = dot(vec3(_511, _512, _513), vec3(cbLight._m0[_1761].xyz));
    float _4028 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _1967 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    float _1968 = dot(vec3(_511, _512, _513), vec3(_1961, _1962, _1963));
    float _4039 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1971 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    float _1972 = dot(vec3(cbLight._m0[_1761].xyz), vec3(_1961, _1962, _1963));
    float _4050 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1976 = _1953 * _1953;
    float _1980 = ((_1971 * _1971) * (_1976 + (-1.0))) + 1.0;
    float _1989 = (exp2(log2(1.0 - (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1990 = 1.0 - _1953;
    float _2000 = (0.5 / (((_1889 * ((_1967 * _1990) + _1953)) + 9.9999999392252902907785028219223e-09) + (((_1889 * _1990) + _1953) * _1967))) * _1967;
    float _4061 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2002 = (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * (_1976 / ((_1980 * _1980) * 3.141590118408203125));
    float _2012 = (((_1989 * cbLight._m0[_1941].x) * _2002) * _1743) + ((((cbLight._m0[_1860].x * _1712) * _1913) * _1927) * _1757);
    float _2013 = (((_1989 * cbLight._m0[_1941].y) * _2002) * _1743) + ((((cbLight._m0[_1860].y * _1713) * _1913) * _1927) * _1757);
    float _2014 = (((_1989 * cbLight._m0[_1941].z) * _2002) * _1743) + ((((cbLight._m0[_1860].z * _1714) * _1913) * _1927) * _1757);
    float _2076;
    float _2078;
    float _2080;
    if (_1797)
    {
        _2076 = _2012;
        _2078 = _2013;
        _2080 = _2014;
    }
    else
    {
        uint _2082 = _1720 + 2u;
        uint _2086 = _1720 + 10u;
        float _2100 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2082].w)) * _514) * 0.949999988079071044921875);
        float _2101 = _2100 * _2100;
        float _2102 = cbLight._m0[_2082].x + _590;
        float _2103 = cbLight._m0[_2082].y + _591;
        float _2104 = cbLight._m0[_2082].z + _592;
        float _2108 = inversesqrt(dot(vec3(_2102, _2103, _2104), vec3(_2102, _2103, _2104)));
        float _2109 = _2108 * _2102;
        float _2110 = _2108 * _2103;
        float _2111 = _2108 * _2104;
        float _2112 = dot(vec3(_511, _512, _513), vec3(cbLight._m0[_2082].xyz));
        float _4072 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
        float _2115 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _2116 = dot(vec3(_511, _512, _513), vec3(_2109, _2110, _2111));
        float _4083 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
        float _2119 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _2120 = dot(vec3(cbLight._m0[_2082].xyz), vec3(_2109, _2110, _2111));
        float _4094 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2124 = _2101 * _2101;
        float _2128 = ((_2119 * _2119) * (_2124 + (-1.0))) + 1.0;
        float _2137 = (exp2(log2(1.0 - (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2138 = 1.0 - _2101;
        float _2148 = (0.5 / (((_1889 * ((_2115 * _2138) + _2101)) + 9.9999999392252902907785028219223e-09) + (((_1889 * _2138) + _2101) * _2115))) * _2115;
        float _4105 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
        float _2150 = (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_2124 / ((_2128 * _2128) * 3.141590118408203125));
        float _2151 = isnan(1.0) ? _1735 : (isnan(_1735) ? 1.0 : min(_1735, 1.0));
        _2076 = (((_2137 * cbLight._m0[_2086].x) * _2150) * _2151) + _2012;
        _2078 = (((_2137 * cbLight._m0[_2086].y) * _2150) * _2151) + _2013;
        _2080 = (((_2137 * cbLight._m0[_2086].z) * _2150) * _2151) + _2014;
    }
    float _2186;
    float _2188;
    float _2190;
    if (_1815)
    {
        _2186 = _2076;
        _2188 = _2078;
        _2190 = _2080;
    }
    else
    {
        uint _2197 = _1720 + 3u;
        uint _2201 = _1720 + 11u;
        float _2215 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2197].w)) * _514) * 0.949999988079071044921875);
        float _2216 = _2215 * _2215;
        float _2217 = cbLight._m0[_2197].x + _590;
        float _2218 = cbLight._m0[_2197].y + _591;
        float _2219 = cbLight._m0[_2197].z + _592;
        float _2223 = inversesqrt(dot(vec3(_2217, _2218, _2219), vec3(_2217, _2218, _2219)));
        float _2224 = _2223 * _2217;
        float _2225 = _2223 * _2218;
        float _2226 = _2223 * _2219;
        float _2227 = dot(vec3(_511, _512, _513), vec3(cbLight._m0[_2197].xyz));
        float _4121 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
        float _2230 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _2231 = dot(vec3(_511, _512, _513), vec3(_2224, _2225, _2226));
        float _4132 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        float _2234 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _2235 = dot(vec3(cbLight._m0[_2197].xyz), vec3(_2224, _2225, _2226));
        float _4143 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2239 = _2216 * _2216;
        float _2243 = ((_2234 * _2234) * (_2239 + (-1.0))) + 1.0;
        float _2252 = (exp2(log2(1.0 - (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2253 = 1.0 - _2216;
        float _2263 = (0.5 / (((_1889 * ((_2230 * _2253) + _2216)) + 9.9999999392252902907785028219223e-09) + (((_1889 * _2253) + _2216) * _2230))) * _2230;
        float _4154 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
        float _2265 = (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_2239 / ((_2243 * _2243) * 3.141590118408203125));
        float _2266 = isnan(1.0) ? _1736 : (isnan(_1736) ? 1.0 : min(_1736, 1.0));
        _2186 = (((_2252 * cbLight._m0[_2201].x) * _2265) * _2266) + _2076;
        _2188 = (((_2252 * cbLight._m0[_2201].y) * _2265) * _2266) + _2078;
        _2190 = (((_2252 * cbLight._m0[_2201].z) * _2265) * _2266) + _2080;
    }
    float _2401;
    float _2403;
    float _2405;
    float _2407;
    float _2409;
    float _2411;
    if (_1718.y == 0u)
    {
        float _2341 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2342 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2341;
        float _2343 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2341;
        float _2344 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2341;
        uvec4 _2356 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2357 = _2356.x;
        uint _2368 = uint((float(_2356.y) * floor(float(uint(cbSceneParam._m0[85u].y * _599) / _2357))) + floor(float(uint(cbSceneParam._m0[85u].x * _598) / _2357)));
        float _2378 = (log2(_2344 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2379 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        uint _2382 = uint(isnan(14.0) ? _2379 : (isnan(_2379) ? 14.0 : min(_2379, 14.0)));
        uvec4 _2387 = texelFetch(g_lightClusterGridBuffer, int(((_2382 << 2u) + (_2368 << 6u)) >> 2u));
        uint _2388 = _2387.x;
        uint _2389 = _2356.z;
        float _2518;
        float _2520;
        float _2522;
        float _2524;
        float _2526;
        float _2528;
        if (((((1u << ((_2389 >> 4u) & 15u)) + 4294967295u) & _2388) == 0u) || ((_2389 & 240u) == 0u))
        {
            _2518 = 0.0;
            _2520 = 0.0;
            _2522 = 0.0;
            _2524 = 0.0;
            _2526 = 0.0;
            _2528 = 0.0;
        }
        else
        {
            float _2519;
            float _2521;
            float _2523;
            float _2525;
            float _2527;
            float _2529;
            float _2672 = 0.0;
            float _2673 = 0.0;
            float _2674 = 0.0;
            float _2675 = 0.0;
            float _2676 = 0.0;
            float _2677 = 0.0;
            uint _2678 = 0u;
            uint _2687;
            bool _2688;
            for (;;)
            {
                _2687 = texelFetch(g_lightClassification, int((((_2382 << 5u) + (_2368 << 9u)) + (_2678 << 2u)) >> 2u)).x;
                _2688 = _2687 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2688)
                {
                    frontier_phi_61_pred = _2672;
                    frontier_phi_61_pred_1 = _2677;
                    frontier_phi_61_pred_2 = _2676;
                    frontier_phi_61_pred_3 = _2675;
                    frontier_phi_61_pred_4 = _2674;
                    frontier_phi_61_pred_5 = _2673;
                }
                else
                {
                    float _2796;
                    float _2797;
                    float _2798;
                    float _2799;
                    float _2800;
                    float _2801;
                    uint _2802;
                    _2796 = _2672;
                    _2797 = _2673;
                    _2798 = _2674;
                    _2799 = _2675;
                    _2800 = _2676;
                    _2801 = _2677;
                    _2802 = _2687;
                    float _2728;
                    float _2729;
                    float _2730;
                    float _2731;
                    float _2732;
                    float _2733;
                    for (;;)
                    {
                        uint _2806 = uint(findLSB(_2802)) + (_2678 << 5u);
                        uint _2803 = (_2802 + 4294967295u) & _2802;
                        uint _2808 = _2806 * 48u;
                        vec4 _2822 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2808)).x, texelFetch(g_PointLightRenderingBuffer, int(_2808 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2808 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2808 + 3u)).x));
                        uint _2828 = (_2806 * 48u) + 4u;
                        vec4 _2841 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2828)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 3u)).x));
                        uint _2847 = (_2806 * 48u) + 8u;
                        vec3 _2858 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2847)).x, texelFetch(g_PointLightRenderingBuffer, int(_2847 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2847 + 2u)).x));
                        float _2862 = _2822.x - _2342;
                        float _2863 = _2822.y - _2343;
                        float _2864 = _2822.z - _2344;
                        float _2865 = dot(vec3(_2862, _2863, _2864), vec3(_2862, _2863, _2864));
                        float _2868 = inversesqrt(_2865);
                        float _2869 = _2868 * _2862;
                        float _2870 = _2868 * _2863;
                        float _2871 = _2868 * _2864;
                        float _2872 = dot(vec3(_620, _623, _626), vec3(_2869, _2870, _2871));
                        float _2877 = 1.0 - (_2865 * _2822.w);
                        float _4180 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
                        float _2878 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
                        float _2879 = sqrt(_2865) * _2841.w;
                        float _2882 = 1.39999997615814208984375 / (_2879 + 1.39999997615814208984375);
                        float _2883 = _2882 * _2882;
                        float _2886 = ((1.0 - _2883) * _2872) + _2883;
                        float _2889 = _2879 * _2879;
                        float _2893 = ((isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0))) * _2878) / ((_2889 * 0.699999988079071044921875) + 1.0);
                        float _2897 = (-0.0) - _2342;
                        float _2898 = (-0.0) - _2343;
                        float _2899 = (-0.0) - _2344;
                        float _2903 = inversesqrt(dot(vec3(_2897, _2898, _2899), vec3(_2897, _2898, _2899)));
                        float _2904 = _2903 * _2897;
                        float _2905 = _2903 * _2898;
                        float _2906 = _2903 * _2899;
                        float _2914 = exp2(log2(1.0 / ((_2889 * 3.5) + 5.0)) * 0.25);
                        float _2915 = 1.0 - _680;
                        float _2922 = sqrt(1.0 - ((1.0 - (_2915 * _2915)) * (1.0 - (_2914 * _2914))));
                        float _2923 = _2922 * _2922;
                        float _2924 = _2923 * _2923;
                        float _2925 = _2904 + _2869;
                        float _2926 = _2905 + _2870;
                        float _2927 = _2906 + _2871;
                        float _2931 = inversesqrt(dot(vec3(_2925, _2926, _2927), vec3(_2925, _2926, _2927)));
                        float _2935 = dot(vec3(_620, _623, _626), vec3(_2904, _2905, _2906));
                        float _4196 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
                        float _2938 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
                        float _2939 = dot(vec3(_620, _623, _626), vec3(_2931 * _2925, _2931 * _2926, _2931 * _2927));
                        float _4207 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
                        float _2942 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
                        float _2946 = ((_2942 * _2942) * (_2924 + (-1.0))) + 1.0;
                        float _2947 = _2882 * _2923;
                        float _2948 = _2947 * _2947;
                        float _2951 = ((1.0 - _2948) * _2872) + _2948;
                        float _4218 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
                        float _2952 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
                        float _2953 = 1.0 - _2923;
                        float _2963 = (0.5 / (((_2952 * ((_2938 * _2953) + _2923)) + 9.9999999392252902907785028219223e-09) + (((_2952 * _2953) + _2923) * _2938))) * _2952;
                        float _4229 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
                        float _2974 = (((_2924 * 3.1415927410125732421875) * (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0)))) / ((_2946 * _2946) * ((_2889 * 2.1991131305694580078125) + 3.141590118408203125))) * _2878;
                        _2731 = (_2893 * _2841.x) + _2799;
                        _2732 = (_2893 * _2841.y) + _2800;
                        _2733 = (_2893 * _2841.z) + _2801;
                        _2728 = (_2974 * _2858.x) + _2796;
                        _2729 = (_2974 * _2858.y) + _2797;
                        _2730 = (_2974 * _2858.z) + _2798;
                        if (_2803 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2796 = _2728;
                            _2797 = _2729;
                            _2798 = _2730;
                            _2799 = _2731;
                            _2800 = _2732;
                            _2801 = _2733;
                            _2802 = _2803;
                        }
                    }
                    frontier_phi_61_pred = _2728;
                    frontier_phi_61_pred_1 = _2733;
                    frontier_phi_61_pred_2 = _2732;
                    frontier_phi_61_pred_3 = _2731;
                    frontier_phi_61_pred_4 = _2730;
                    frontier_phi_61_pred_5 = _2729;
                }
                _2519 = frontier_phi_61_pred;
                _2529 = frontier_phi_61_pred_1;
                _2527 = frontier_phi_61_pred_2;
                _2525 = frontier_phi_61_pred_3;
                _2523 = frontier_phi_61_pred_4;
                _2521 = frontier_phi_61_pred_5;
                uint _2679 = _2678 + 1u;
                if (_2679 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2672 = _2519;
                    _2673 = _2521;
                    _2674 = _2523;
                    _2675 = _2525;
                    _2676 = _2527;
                    _2677 = _2529;
                    _2678 = _2679;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2518 = _2519;
            _2520 = _2521;
            _2522 = _2523;
            _2524 = _2525;
            _2526 = _2527;
            _2528 = _2529;
        }
        uvec4 _2532 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2533 = _2532.z;
        uint _2535 = (_2533 >> 8u) & 15u;
        float _2640;
        float _2642;
        float _2644;
        float _2646;
        float _2648;
        float _2650;
        if (((4294967295u << _2535) & _2388) == 0u)
        {
            _2640 = _2518;
            _2642 = _2520;
            _2644 = _2522;
            _2646 = _2524;
            _2648 = _2526;
            _2650 = _2528;
        }
        else
        {
            float _2665 = inversesqrt(dot(vec3(_2342, _2343, _2344), vec3(_2342, _2343, _2344)));
            float _2666 = _2665 * _2342;
            float _2667 = _2665 * _2343;
            float _2668 = _2665 * _2344;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2535 < ((_2533 >> 12u) & 15u))
            {
                float _2641;
                float _2643;
                float _2645;
                float _2647;
                float _2649;
                float _2651;
                float _2779 = _2518;
                float _2780 = _2520;
                float _2781 = _2522;
                float _2782 = _2524;
                float _2783 = _2526;
                float _2784 = _2528;
                uint _2785 = _2535;
                uint _2794;
                bool _2795;
                for (;;)
                {
                    _2794 = texelFetch(g_lightClassification, int((((_2382 << 5u) + (_2368 << 9u)) + (_2785 << 2u)) >> 2u)).x;
                    _2795 = _2794 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2795)
                    {
                        frontier_phi_67_pred = _2782;
                        frontier_phi_67_pred_1 = _2783;
                        frontier_phi_67_pred_2 = _2784;
                        frontier_phi_67_pred_3 = _2781;
                        frontier_phi_67_pred_4 = _2780;
                        frontier_phi_67_pred_5 = _2779;
                    }
                    else
                    {
                        float _2979;
                        float _2980;
                        float _2981;
                        float _2982;
                        float _2983;
                        float _2984;
                        float _3274;
                        float _3275;
                        float _3276;
                        float _3277;
                        float _3278;
                        float _3279;
                        float _2992 = _2779;
                        float _2993 = _2780;
                        float _2994 = _2781;
                        float _2995 = _2782;
                        float _2996 = _2783;
                        float _2997 = _2784;
                        uint _2998 = _2794;
                        uint _2999;
                        vec4 _3024;
                        float _3025;
                        vec4 _3040;
                        vec3 _3052;
                        vec4 _3067;
                        vec4 _3083;
                        float _3130;
                        bool _3131;
                        for (;;)
                        {
                            uint _3009 = ((_2785 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2998));
                            _2999 = (_2998 + 4294967295u) & _2998;
                            uint _3011 = _3009 * 40u;
                            _3024 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3011)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 3u)).x));
                            _3025 = _3024.w;
                            uint _3027 = (_3009 * 40u) + 4u;
                            _3040 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3027)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 3u)).x));
                            uint _3042 = (_3009 * 40u) + 8u;
                            _3052 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3042)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 2u)).x));
                            uint _3054 = (_3009 * 40u) + 16u;
                            _3067 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3054)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 3u)).x));
                            uint _3070 = (_3009 * 40u) + 20u;
                            _3083 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3070)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 3u)).x));
                            uint _3086 = (_3009 * 40u) + 24u;
                            vec4 _3099 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 3u)).x));
                            uint _3105 = (_3009 * 40u) + 28u;
                            vec4 _3118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 3u)).x));
                            _3130 = fma(_2344, _3118.z, fma(_2343, _3118.y, _3118.x * _2342)) + _3118.w;
                            _3131 = !((fma(_2344, _3099.z, fma(_2343, _3099.y, _3099.x * _2342)) + _3099.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3131)
                            {
                                float _3158 = _3024.x - _2342;
                                float _3159 = _3024.y - _2343;
                                float _3160 = _3024.z - _2344;
                                float _3161 = dot(vec3(_3158, _3159, _3160), vec3(_3158, _3159, _3160));
                                float _3164 = inversesqrt(_3161);
                                float _3165 = _3164 * _3158;
                                float _3166 = _3164 * _3159;
                                float _3167 = _3164 * _3160;
                                float _3171 = 1.0 - (_3161 / (_3025 * _3025));
                                float _4240 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                                float _3172 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
                                float _3176 = sqrt(_3161) * _3040.w;
                                float _3178 = 1.39999997615814208984375 / (_3176 + 1.39999997615814208984375);
                                float _3179 = _3178 * _3178;
                                float _3182 = ((1.0 - _3179) * dot(vec3(_3165, _3166, _3167), vec3(_620, _623, _626))) + _3179;
                                float _3185 = _3176 * _3176;
                                float _3189 = (fma(_2344, _3067.z, fma(_2343, _3067.y, _3067.x * _2342)) + _3067.w) / _3130;
                                float _3190 = (fma(_2344, _3083.z, fma(_2343, _3083.y, _3083.x * _2342)) + _3083.w) / _3130;
                                float _3194 = 1.0 - dot(vec2(_3189, _3190), vec2(_3189, _3190));
                                float _4256 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                                float _3195 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                                float _3196 = _3195 * (((isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0))) * _3172) / ((_3185 * 0.699999988079071044921875) + 1.0));
                                float _3208 = exp2(log2(1.0 / ((_3185 * 3.5) + 5.0)) * 0.25);
                                float _3209 = 1.0 - _680;
                                float _3216 = sqrt(1.0 - ((1.0 - (_3209 * _3209)) * (1.0 - (_3208 * _3208))));
                                float _3217 = _3216 * _3216;
                                float _3218 = _3217 * _3217;
                                float _3219 = _3165 - _2666;
                                float _3220 = _3166 - _2667;
                                float _3221 = _3167 - _2668;
                                float _3225 = inversesqrt(dot(vec3(_3219, _3220, _3221), vec3(_3219, _3220, _3221)));
                                float _3229 = dot(vec3(_620, _623, _626), vec3((-0.0) - _2666, (-0.0) - _2667, (-0.0) - _2668));
                                float _4267 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                                float _3232 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                                float _3233 = dot(vec3(_620, _623, _626), vec3(_3225 * _3219, _3225 * _3220, _3225 * _3221));
                                float _4278 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                                float _3236 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
                                float _3240 = ((_3236 * _3236) * (_3218 + (-1.0))) + 1.0;
                                float _3241 = _3178 * _3217;
                                float _3242 = _3241 * _3241;
                                float _3248 = ((1.0 - _3242) * dot(vec3(_620, _623, _626), vec3(_3165, _3166, _3167))) + _3242;
                                float _4289 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                                float _3249 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
                                float _3250 = 1.0 - _3217;
                                float _3260 = (0.5 / (((_3249 * ((_3232 * _3250) + _3217)) + 9.9999999392252902907785028219223e-09) + (((_3249 * _3250) + _3217) * _3232))) * _3249;
                                float _4300 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                                float _3270 = (_3195 * _3172) * (((_3218 * 3.1415927410125732421875) * (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)))) / ((_3240 * _3240) * ((_3185 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3270 * _3052.x;
                                frontier_phi_73_pred_1 = _3270 * _3052.y;
                                frontier_phi_73_pred_2 = _3196 * _3040.z;
                                frontier_phi_73_pred_3 = _3196 * _3040.y;
                                frontier_phi_73_pred_4 = _3196 * _3040.x;
                                frontier_phi_73_pred_5 = _3270 * _3052.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3274 = frontier_phi_73_pred;
                            _3275 = frontier_phi_73_pred_1;
                            _3279 = frontier_phi_73_pred_2;
                            _3278 = frontier_phi_73_pred_3;
                            _3277 = frontier_phi_73_pred_4;
                            _3276 = frontier_phi_73_pred_5;
                            _2982 = _3277 + _2995;
                            _2983 = _3278 + _2996;
                            _2984 = _3279 + _2997;
                            _2979 = _3274 + _2992;
                            _2980 = _3275 + _2993;
                            _2981 = _3276 + _2994;
                            if (_2999 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2992 = _2979;
                                _2993 = _2980;
                                _2994 = _2981;
                                _2995 = _2982;
                                _2996 = _2983;
                                _2997 = _2984;
                                _2998 = _2999;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2982;
                        frontier_phi_67_pred_1 = _2983;
                        frontier_phi_67_pred_2 = _2984;
                        frontier_phi_67_pred_3 = _2981;
                        frontier_phi_67_pred_4 = _2980;
                        frontier_phi_67_pred_5 = _2979;
                    }
                    _2647 = frontier_phi_67_pred;
                    _2649 = frontier_phi_67_pred_1;
                    _2651 = frontier_phi_67_pred_2;
                    _2645 = frontier_phi_67_pred_3;
                    _2643 = frontier_phi_67_pred_4;
                    _2641 = frontier_phi_67_pred_5;
                    uint _2786 = _2785 + 1u;
                    if (_2786 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2779 = _2641;
                        _2780 = _2643;
                        _2781 = _2645;
                        _2782 = _2647;
                        _2783 = _2649;
                        _2784 = _2651;
                        _2785 = _2786;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2649;
                frontier_phi_55_56_ladder_1 = _2651;
                frontier_phi_55_56_ladder_2 = _2647;
                frontier_phi_55_56_ladder_3 = _2645;
                frontier_phi_55_56_ladder_4 = _2643;
                frontier_phi_55_56_ladder_5 = _2641;
            }
            else
            {
                frontier_phi_55_56_ladder = _2526;
                frontier_phi_55_56_ladder_1 = _2528;
                frontier_phi_55_56_ladder_2 = _2524;
                frontier_phi_55_56_ladder_3 = _2522;
                frontier_phi_55_56_ladder_4 = _2520;
                frontier_phi_55_56_ladder_5 = _2518;
            }
            _2640 = frontier_phi_55_56_ladder_5;
            _2642 = frontier_phi_55_56_ladder_4;
            _2644 = frontier_phi_55_56_ladder_3;
            _2646 = frontier_phi_55_56_ladder_2;
            _2648 = frontier_phi_55_56_ladder;
            _2650 = frontier_phi_55_56_ladder_1;
        }
        float _2655 = isnan(1.0) ? _664 : (isnan(_664) ? 1.0 : min(_664, 1.0));
        _2401 = (_2655 * _2646) + _1853;
        _2403 = (_2655 * _2648) + _1855;
        _2405 = (_2655 * _2650) + _1857;
        _2407 = ((_2640 * 0.039999999105930328369140625) * _2655) + _2186;
        _2409 = ((_2642 * 0.039999999105930328369140625) * _2655) + _2188;
        _2411 = ((_2644 * 0.039999999105930328369140625) * _2655) + _2190;
    }
    else
    {
        _2401 = _1853;
        _2403 = _1855;
        _2405 = _1857;
        _2407 = _2186;
        _2409 = _2188;
        _2411 = _2190;
    }
    uint _2417 = _640 + uint(cbMatDynParam._m0[0u].w);
    float _2423 = cbInstanceData._m0[_2417].x * (_430 - (_446 * _430));
    float _2424 = cbInstanceData._m0[_2417].y * (_431 - (_446 * _431));
    float _2425 = cbInstanceData._m0[_2417].z * (_432 - (_446 * _432));
    float _4316 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _4327 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _4338 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _2442 = (((isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2401 + ((isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0))) * _664))) + ((_2407 + ((isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))) * _1471)) * cbPerFrame._m0[3u].x)) + _2423;
    float _2444 = (_2424 + ((_2409 + ((isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))) * _1471)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_2403 + ((isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0))) * _664)));
    float _2446 = (_2425 + ((_2411 + ((isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))) * _1471)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_2405 + ((isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0))) * _664)));
    float _4364 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2459 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
    uint _2460 = _639 + 6u;
    float _2468 = _598 / cbSceneParam._m0[86u].x;
    float _2469 = _599 / cbSceneParam._m0[86u].y;
    vec4 _2483 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2468, _2469, (log2((isnan(cbSceneParam._m0[77u].w) ? _533 : (isnan(_533) ? cbSceneParam._m0[77u].w : min(_533, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2485 = _2483.x;
    float _2486 = _2483.y;
    float _2487 = _2483.z;
    float _2488 = _2483.w;
    float _2581;
    float _2583;
    float _2585;
    float _2587;
    if (_533 > cbSceneParam._m0[78u].w)
    {
        float _2543 = isnan(_533) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _533 : min(cbSceneParam._m0[80u].w, _533));
        float _2544 = _2543 / _533;
        float _2555 = _2544 * _583;
        float _2556 = _584 * _2544;
        float _2557 = (-0.0) - _2556;
        float _2559 = _2544 * _585;
        float _2561 = (cbSceneParam._m0[77u].w * _2557) / _2543;
        float _2562 = _2561 + cbSceneParam._m0[79u].w;
        float _2563 = cbSceneParam._m0[79u].w - _2556;
        float _2569 = sqrt(((_2555 * _2555) + (_2556 * _2556)) + (_2559 * _2559));
        float _2572 = (1.0 - (cbSceneParam._m0[77u].w / _2543)) * _2569;
        float _2577 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2579 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2741;
        if (abs((_2557 - _2561) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2741 = ((((_2562 > 0.0) ? exp2(_2577 * _2562) : (2.0 - exp2(_2579 * _2562))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2572;
        }
        else
        {
            float _2701 = 1.0 / cbSceneParam._m0[80u].x;
            float _2702 = isnan(_2563) ? _2562 : (isnan(_2562) ? _2563 : max(_2562, _2563));
            float _2703 = isnan(_2563) ? _2562 : (isnan(_2562) ? _2563 : min(_2562, _2563));
            float _2712 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : min(_2702, 0.0));
            float _2713 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : min(_2703, 0.0));
            _2741 = ((abs(_2569 / _2557) * cbSceneParam._m0[80u].y) * ((((_2712 - _2713) * 2.0) - ((exp2(_2577 * (isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0)))) - exp2(_2577 * (isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0))))) * _2701)) - ((exp2(_2579 * _2712) - exp2(_2579 * _2713)) * _2701))) + (_2572 * cbSceneParam._m0[80u].z);
        }
        vec4 _2743 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2468, _2469, 1.0), 0.0);
        float _2752 = exp2((_2741 * (-1.44269502162933349609375)) * (1.0 - _2743.w));
        float _2753 = log2(_2752);
        float _2769 = log2(_2488);
        _2581 = (exp2(_2769 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2753 * cbSceneParam._m0[78u].x)) * _2743.x) / cbSceneParam._m0[78u].x)) + _2485;
        _2583 = (exp2(_2769 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2753 * cbSceneParam._m0[78u].y)) * _2743.y) / cbSceneParam._m0[78u].y)) + _2486;
        _2585 = (exp2(_2769 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2753 * cbSceneParam._m0[78u].z)) * _2743.z) / cbSceneParam._m0[78u].z)) + _2487;
        _2587 = _2752 * _2488;
    }
    else
    {
        _2581 = _2485;
        _2583 = _2486;
        _2585 = _2487;
        _2587 = _2488;
    }
    float _2599 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2600 = _2599 == 3.0;
    float _2601 = log2(_2587);
    float _2605 = exp2(_2601 * cbSceneParam._m0[78u].x);
    float _2606 = exp2(_2601 * cbSceneParam._m0[78u].y);
    float _2607 = exp2(_2601 * cbSceneParam._m0[78u].z);
    float _2608 = _2605 * (isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0)));
    float _2609 = _2606 * (isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0)));
    float _2610 = _2607 * (isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0)));
    float _2619 = (_2599 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2619 * (_2600 ? _2608 : (_2608 + (cbSceneParam._m0[72u].w * _2581)));
    SV_Target.y = _2619 * (_2600 ? _2609 : (_2609 + (cbSceneParam._m0[72u].w * _2583)));
    SV_Target.z = _2619 * (_2600 ? _2610 : (_2610 + (cbSceneParam._m0[72u].w * _2585)));
    SV_Target.w = cbInstanceData._m0[_2460].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2423) * _2459) * _2605) * _2619;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2424) * _2459) * _2606) * _2619;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2425) * _2459) * _2607) * _2619;
    SV_Target_1.w = cbInstanceData._m0[_2460].w;
}


