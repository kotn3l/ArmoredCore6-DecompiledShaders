#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M0_M1_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M0_M1_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M0_M1_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _942;
float _3634;
float _3635;
float _3636;
float _3637;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _239 = texture(sampler2D(C_AMSN_M0_M1_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _245 = _239.w;
    float _246 = _239.x * cbMtdParam._m0[9u].x;
    float _247 = _239.y * cbMtdParam._m0[9u].y;
    float _248 = _239.z * cbMtdParam._m0[9u].z;
    vec4 _260 = texture(sampler2D(C_AMSN_M0_M1_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _262 = _260.x;
    vec4 _274 = texture(sampler2D(C_AMSN_M0_M1_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _278 = _274.z;
    float _282 = (_274.x * 2.0) + (-1.0);
    float _284 = (_274.y * 2.0) + (-1.0);
    float _285 = dot(vec2(_282, _284), vec2(_282, _284));
    float _3646 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _291 = sqrt(1.0 - (isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))));
    float _294 = fma(_291, _209 * NORMAL.x, fma(_284, _216 * TANGENT.x, (_202 * _194) * _282));
    float _297 = fma(_291, _209 * NORMAL.y, fma(_284, _216 * TANGENT.y, (_202 * _195) * _282));
    float _300 = fma(_291, _209 * NORMAL.z, fma(_284, _216 * TANGENT.z, (_202 * _196) * _282));
    float _304 = inversesqrt(dot(vec3(_294, _297, _300), vec3(_294, _297, _300)));
    float _305 = _304 * _294;
    float _306 = _304 * _297;
    float _307 = _304 * _300;
    float _3657 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _308 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    float _3668 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _3679 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3690 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _3701 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _312 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
    float _328 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _370 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _380 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _370);
    float _381 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _370);
    float _382 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _370);
    float _386 = inversesqrt(dot(vec3(_380, _381, _382), vec3(_380, _381, _382)));
    float _387 = _380 * _386;
    float _388 = _381 * _386;
    float _389 = _382 * _386;
    vec4 _394 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _396 = _394.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _621 = sqrt(((_380 * _380) + (_381 * _381)) + (_382 * _382));
        float _627 = (cbMatDynParam._m0[5u].x * _621) + cbMatDynParam._m0[5u].y;
        float _3712 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
        float _628 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _632 = (cbMatDynParam._m0[5u].z * _621) + cbMatDynParam._m0[5u].w;
        float _3723 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) - _628)) + _628) < ((_396 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _408 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _409 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _411 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _413 = _411.w;
    float _433 = fma(_307, cbSceneParam._m0[5u].z, fma(_306, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _305));
    float _436 = fma(_307, cbSceneParam._m0[6u].z, fma(_306, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _305));
    float _439 = fma(_307, cbSceneParam._m0[7u].z, fma(_306, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _305));
    vec4 _441 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _452 = (((_441.y - _308) + (_441.w * _308)) * cbMtdParam._m0[3u].x) + _308;
    uint _465 = uint(roundEven(NORMAL.w)) * 13u;
    uint _467 = _465 + 9u;
    uint _468 = _467 + uint(cbMatDynParam._m0[0u].w);
    float _474 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0)))) * cbInstanceData._m0[_468].x;
    float _475 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0)))) * cbInstanceData._m0[_468].y;
    float _476 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0)))) * cbInstanceData._m0[_468].z;
    float _3734 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _477 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _3745 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _478 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _3756 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _479 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    vec4 _480 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _485 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _496 = (((_485.x - _312) + (_485.w * _312)) * cbMtdParam._m0[3u].x) + _312;
    float _509 = (cbMtdParam._m0[3u].x * (((_477 * _413) - _477) + _480.x)) + _477;
    float _510 = (cbMtdParam._m0[3u].x * (((_478 * _413) - _478) + _480.y)) + _478;
    float _511 = (cbMtdParam._m0[3u].x * (((_479 * _413) - _479) + _480.z)) + _479;
    float _512 = 1.0 - _496;
    float _513 = _512 * _509;
    float _514 = _512 * _510;
    float _515 = _512 * _511;
    float _520 = (_509 + (-0.039999999105930328369140625)) * _496;
    float _521 = (_510 + (-0.039999999105930328369140625)) * _496;
    float _522 = (_511 + (-0.039999999105930328369140625)) * _496;
    float _523 = _520 + 0.039999999105930328369140625;
    float _525 = _521 + 0.039999999105930328369140625;
    float _526 = _522 + 0.039999999105930328369140625;
    vec4 _535 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _408, cbSceneParam._m0[86u].y * _409));
    float _538 = _535.x * TEXCOORD_4;
    float _539 = dot(vec3(_305, _306, _307), vec3(_387, _388, _389));
    float _542 = _539 * 2.0;
    float _546 = (_542 * _305) - _387;
    float _547 = (_542 * _306) - _388;
    float _548 = (_542 * _307) - _389;
    float _552 = abs(dot(vec3(_387, _388, _389), vec3(_305, _306, _307)));
    float _3767 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _554 = sqrt(_452);
    float _567 = exp2((_554 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_554 * 3.0));
    float _573 = (1.0 - _567) * ((_554 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _574 = _567 * _554;
    float _602 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _606 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _610 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _941;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    float _951;
    float _952;
    float _953;
    float _954;
    float _955;
    float _956;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _666 = fma(_610, cbModelParam._m0[26u].z, fma(_606, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _602));
        float _670 = fma(_610, cbModelParam._m0[27u].z, fma(_606, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _602));
        float _674 = fma(_610, cbModelParam._m0[28u].z, fma(_606, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _602));
        float _699 = _602 + _305;
        float _700 = _606 + _306;
        float _701 = _610 + _307;
        float _711 = fma(_701, cbModelParam._m0[26u].z, fma(_700, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _699)) - _666;
        float _712 = fma(_701, cbModelParam._m0[27u].z, fma(_700, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _699)) - _670;
        float _713 = fma(_701, cbModelParam._m0[28u].z, fma(_700, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _699)) - _674;
        float _717 = inversesqrt(dot(vec3(_711, _712, _713), vec3(_711, _712, _713)));
        float _730 = ((_717 * _711) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_666 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _731 = ((_717 * _712) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_670 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _732 = ((_717 * _713) / cbModelParam._m0[34u].z) + ((((((_674 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _735 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_730, _731, _732), 0.0);
        vec4 _742 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_730, _731, _732), 0.0);
        vec4 _749 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_730, _731, _732), 0.0);
        vec4 _756 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_730, _731, _732), 0.0);
        float _769 = exp2((_735.w + (-0.5)) * 20.0) * 2.0;
        float _770 = _769 * (_735.x + (-0.5));
        float _771 = _769 * (_735.y + (-0.5));
        float _772 = _769 * (_735.z + (-0.5));
        float _779 = exp2((_742.w + (-0.5)) * 20.0) * 2.0;
        float _780 = _779 * (_742.x + (-0.5));
        float _781 = _779 * (_742.y + (-0.5));
        float _782 = _779 * (_742.z + (-0.5));
        float _789 = exp2((_749.w + (-0.5)) * 20.0) * 2.0;
        float _790 = _789 * (_749.x + (-0.5));
        float _791 = _789 * (_749.y + (-0.5));
        float _792 = _789 * (_749.z + (-0.5));
        float _799 = exp2((_756.w + (-0.5)) * 20.0) * 2.0;
        float _800 = _799 * (_756.x + (-0.5));
        float _801 = _799 * (_756.y + (-0.5));
        float _802 = _799 * (_756.z + (-0.5));
        float _803 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _804 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _805 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _806 = _770 * 0.5;
        float _807 = _780 * 0.5;
        float _808 = _790 * 0.5;
        float _809 = dot(vec3(_806, _807, _808), vec3(_806, _807, _808));
        float _814 = (_809 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_809);
        float _823 = (dot(vec3(_305, _306, _307), vec3(_814 * _806, _814 * _807, _814 * _808)) + 1.0) * 0.5;
        float _3793 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _833 = sqrt(((_807 * _807) + (_806 * _806)) + (_808 * _808)) / (_803 + 9.9999997473787516355514526367188e-06);
        float _3804 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _834 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _835 = _834 * 2.0;
        float _839 = (1.0 - _834) / (_834 + 1.0);
        float _3815 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _840 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _849 = ((((1.0 - _840) * (_835 + 2.0)) * exp2(log2(isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * (_835 + 1.0))) + _840) * _803;
        float _850 = _771 * 0.5;
        float _851 = _781 * 0.5;
        float _852 = _791 * 0.5;
        float _853 = dot(vec3(_850, _851, _852), vec3(_850, _851, _852));
        float _858 = (_853 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_853);
        float _866 = (dot(vec3(_305, _306, _307), vec3(_858 * _850, _858 * _851, _858 * _852)) + 1.0) * 0.5;
        float _3826 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _875 = sqrt(((_851 * _851) + (_850 * _850)) + (_852 * _852)) / (_804 + 9.9999997473787516355514526367188e-06);
        float _3837 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _876 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _877 = _876 * 2.0;
        float _881 = (1.0 - _876) / (_876 + 1.0);
        float _3848 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _882 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _891 = ((((1.0 - _882) * (_877 + 2.0)) * exp2(log2(isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * (_877 + 1.0))) + _882) * _804;
        float _892 = _772 * 0.5;
        float _893 = _782 * 0.5;
        float _894 = _792 * 0.5;
        float _895 = dot(vec3(_892, _893, _894), vec3(_892, _893, _894));
        float _900 = (_895 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_895);
        float _908 = (dot(vec3(_305, _306, _307), vec3(_900 * _892, _900 * _893, _900 * _894)) + 1.0) * 0.5;
        float _3859 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _917 = sqrt(((_893 * _893) + (_892 * _892)) + (_894 * _894)) / (_805 + 9.9999997473787516355514526367188e-06);
        float _3870 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _918 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _919 = _918 * 2.0;
        float _923 = (1.0 - _918) / (_918 + 1.0);
        float _3881 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _924 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _933 = ((((1.0 - _924) * (_919 + 2.0)) * exp2(log2(isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * (_919 + 1.0))) + _924) * _805;
        _941 = _772;
        _943 = _771;
        _944 = _770;
        _945 = _782;
        _946 = _781;
        _947 = _780;
        _948 = _792;
        _949 = _791;
        _950 = _790;
        _951 = _805;
        _952 = _804;
        _953 = _803;
        _954 = cbModelParam._m0[36u].z * (isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0)));
        _955 = cbModelParam._m0[36u].z * (isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0)));
        _956 = cbModelParam._m0[36u].z * (isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0)));
    }
    else
    {
        _941 = _942;
        _943 = _942;
        _944 = _942;
        _945 = _942;
        _946 = _942;
        _947 = _942;
        _948 = _942;
        _949 = _942;
        _950 = _942;
        _951 = _942;
        _952 = _942;
        _953 = _942;
        _954 = 0.0;
        _955 = 0.0;
        _956 = 0.0;
    }
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _985 = fma(_610, cbModelParam._m0[30u].z, fma(_606, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _602));
        float _989 = fma(_610, cbModelParam._m0[31u].z, fma(_606, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _602));
        float _993 = fma(_610, cbModelParam._m0[32u].z, fma(_606, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _602));
        float _1016 = _602 + _305;
        float _1017 = _606 + _306;
        float _1018 = _610 + _307;
        float _1028 = fma(_1018, cbModelParam._m0[30u].z, fma(_1017, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1016)) - _985;
        float _1029 = fma(_1018, cbModelParam._m0[31u].z, fma(_1017, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1016)) - _989;
        float _1030 = fma(_1018, cbModelParam._m0[32u].z, fma(_1017, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1016)) - _993;
        float _1034 = inversesqrt(dot(vec3(_1028, _1029, _1030), vec3(_1028, _1029, _1030)));
        float _1047 = ((_1034 * _1028) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_985 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1048 = ((_1034 * _1029) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_989 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1049 = ((_1034 * _1030) / cbModelParam._m0[35u].z) + ((((((_993 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1047, _1048, _1049), 0.0);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1047, _1048, _1049), 0.0);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1047, _1048, _1049), 0.0);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1047, _1048, _1049), 0.0);
        float _1084 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1051.x + (-0.5));
        float _1086 = _1084 * (_1051.y + (-0.5));
        float _1087 = _1084 * (_1051.z + (-0.5));
        float _1094 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1058.x + (-0.5));
        float _1096 = _1094 * (_1058.y + (-0.5));
        float _1097 = _1094 * (_1058.z + (-0.5));
        float _1104 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1065.x + (-0.5));
        float _1106 = _1104 * (_1065.y + (-0.5));
        float _1107 = _1104 * (_1065.z + (-0.5));
        float _1114 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1072.x + (-0.5));
        float _1116 = _1114 * (_1072.y + (-0.5));
        float _1117 = _1114 * (_1072.z + (-0.5));
        float _1118 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1119 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1120 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1121 = _1085 * 0.5;
        float _1122 = _1095 * 0.5;
        float _1123 = _1105 * 0.5;
        float _1124 = dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123));
        float _1129 = (_1124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1124);
        float _1137 = (dot(vec3(_305, _306, _307), vec3(_1129 * _1121, _1129 * _1122, _1129 * _1123)) + 1.0) * 0.5;
        float _3922 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1146 = sqrt(((_1122 * _1122) + (_1121 * _1121)) + (_1123 * _1123)) / (_1118 + 9.9999997473787516355514526367188e-06);
        float _3933 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1148 = _1147 * 2.0;
        float _1152 = (1.0 - _1147) / (_1147 + 1.0);
        float _3944 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1162 = ((((1.0 - _1153) * (_1148 + 2.0)) * exp2(log2(isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_1148 + 1.0))) + _1153) * _1118;
        float _1163 = _1086 * 0.5;
        float _1164 = _1096 * 0.5;
        float _1165 = _1106 * 0.5;
        float _1166 = dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165));
        float _1171 = (_1166 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1166);
        float _1179 = (dot(vec3(_305, _306, _307), vec3(_1171 * _1163, _1171 * _1164, _1171 * _1165)) + 1.0) * 0.5;
        float _3955 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1188 = sqrt(((_1164 * _1164) + (_1163 * _1163)) + (_1165 * _1165)) / (_1119 + 9.9999997473787516355514526367188e-06);
        float _3966 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1190 = _1189 * 2.0;
        float _1194 = (1.0 - _1189) / (_1189 + 1.0);
        float _3977 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1204 = ((((1.0 - _1195) * (_1190 + 2.0)) * exp2(log2(isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_1190 + 1.0))) + _1195) * _1119;
        float _1205 = _1087 * 0.5;
        float _1206 = _1097 * 0.5;
        float _1207 = _1107 * 0.5;
        float _1208 = dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207));
        float _1213 = (_1208 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1208);
        float _1221 = (dot(vec3(_305, _306, _307), vec3(_1213 * _1205, _1213 * _1206, _1213 * _1207)) + 1.0) * 0.5;
        float _3988 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1230 = sqrt(((_1206 * _1206) + (_1205 * _1205)) + (_1207 * _1207)) / (_1120 + 9.9999997473787516355514526367188e-06);
        float _3999 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1232 = _1231 * 2.0;
        float _1236 = (1.0 - _1231) / (_1231 + 1.0);
        float _4010 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1246 = ((((1.0 - _1237) * (_1232 + 2.0)) * exp2(log2(isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * (_1232 + 1.0))) + _1237) * _1120;
        _1254 = _1087;
        _1255 = _1086;
        _1256 = _1085;
        _1257 = _1097;
        _1258 = _1096;
        _1259 = _1095;
        _1260 = _1107;
        _1261 = _1106;
        _1262 = _1105;
        _1263 = _1120;
        _1264 = _1119;
        _1265 = _1118;
        _1266 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)));
        _1267 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)));
        _1268 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)));
    }
    else
    {
        _1254 = _942;
        _1255 = _942;
        _1256 = _942;
        _1257 = _942;
        _1258 = _942;
        _1259 = _942;
        _1260 = _942;
        _1261 = _942;
        _1262 = _942;
        _1263 = _942;
        _1264 = _942;
        _1265 = _942;
        _1266 = 0.0;
        _1267 = 0.0;
        _1268 = 0.0;
    }
    float _1278 = (cbModelParam._m0[1u].x * (_1266 - _954)) + _954;
    float _1279 = (cbModelParam._m0[1u].x * (_1267 - _955)) + _955;
    float _1280 = (cbModelParam._m0[1u].x * (_1268 - _956)) + _956;
    float _1301 = fma(_1280, cbSceneParam._m0[89u].z, fma(_1279, cbSceneParam._m0[89u].y, _1278 * cbSceneParam._m0[89u].x));
    float _1304 = fma(_1280, cbSceneParam._m0[90u].z, fma(_1279, cbSceneParam._m0[90u].y, _1278 * cbSceneParam._m0[90u].x));
    float _1307 = fma(_1280, cbSceneParam._m0[91u].z, fma(_1279, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1278));
    float _1322 = _546 * 0.5;
    float _1323 = _547 * 0.5;
    float _1324 = _548 * 0.5;
    float _1325 = dot(vec4(_1322, _1323, _1324, 1.0), vec4(_1256, _1259, _1262, _1265));
    float _1328 = dot(vec4(_1322, _1323, _1324, 1.0), vec4(_1255, _1258, _1261, _1264));
    float _1331 = dot(vec4(_1322, _1323, _1324, 1.0), vec4(_1254, _1257, _1260, _1263));
    float _1365;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1338 = dot(vec4(_1322, _1323, _1324, 1.0), vec4(_941, _945, _948, _951));
        float _1342 = dot(vec4(_1322, _1323, _1324, 1.0), vec4(_943, _946, _949, _952));
        float _1346 = dot(vec4(_1322, _1323, _1324, 1.0), vec4(_944, _947, _950, _953));
        float _1353 = dot(vec4(cbModelParam._m0[39u]), vec4(_1322, _1323, _1324, 1.0));
        _1365 = dot(vec3(isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)), isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)), isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1353) ? 0.0 : (isnan(0.0) ? _1353 : max(0.0, _1353))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1365 = 1.0;
    }
    float _1376;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1367 = dot(vec4(cbModelParam._m0[40u]), vec4(_1322, _1323, _1324, 1.0));
        _1376 = dot(vec3(isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)), isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)), isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1367) ? 0.0 : (isnan(0.0) ? _1367 : max(0.0, _1367))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1376 = 1.0;
    }
    float _1380 = (_1376 * cbModelParam._m0[1u].x) + (_1365 * (1.0 - cbModelParam._m0[1u].x));
    float _1390 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _452);
    float _1391 = isnan(_1390) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1390 : min(cbModelParam._m0[25u].z, _1390));
    float _1473;
    float _1475;
    float _1477;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1440 = fma(_610, cbModelParam._m0[13u].z, fma(_606, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _602)) + cbModelParam._m0[13u].w;
        float _1444 = fma(_610, cbModelParam._m0[14u].z, fma(_606, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _602)) + cbModelParam._m0[14u].w;
        float _1448 = fma(_610, cbModelParam._m0[15u].z, fma(_606, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _602)) + cbModelParam._m0[15u].w;
        float _1451 = fma(_548, cbModelParam._m0[13u].z, fma(_547, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _546));
        float _1454 = fma(_548, cbModelParam._m0[14u].z, fma(_547, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _546));
        float _1457 = fma(_548, cbModelParam._m0[15u].z, fma(_547, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _546));
        float _1485;
        if (_1451 > 0.0)
        {
            _1485 = abs((1.0 - _1440) / _1451);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1451 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1440 + 1.0) / _1451);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1485 = frontier_phi_17_15_ladder;
        }
        float _1661;
        if (_1454 > 0.0)
        {
            _1661 = abs((1.0 - _1444) / _1454);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1454 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1444 + 1.0) / _1454);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1661 = frontier_phi_26_22_ladder;
        }
        float _1957;
        if (_1457 > 0.0)
        {
            _1957 = abs((1.0 - _1448) / _1457);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1457 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1448 + 1.0) / _1457);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1957 = frontier_phi_38_33_ladder;
        }
        float _1959 = isnan(_1661) ? _1485 : (isnan(_1485) ? _1661 : min(_1485, _1661));
        float _1960 = isnan(_1957) ? _1959 : (isnan(_1959) ? _1957 : min(_1959, _1957));
        float _1964 = (_1960 * _1451) + _1440;
        float _1965 = (_1960 * _1454) + _1444;
        float _1966 = (_1960 * _1457) + _1448;
        float _1967 = _1960 * 9.9999997473787516355514526367188e-05;
        float _1969 = (-1.0) - _1967;
        float _1971 = _1967 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1966 > _1971) || ((_1966 < _1969) || ((_1965 > _1971) || ((_1965 < _1969) || ((_1964 < _1969) || (_1964 > _1971))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2111 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1966, cbModelParam._m0[9u].z, fma(_1965, cbModelParam._m0[9u].y, _1964 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1966, cbModelParam._m0[10u].z, fma(_1965, cbModelParam._m0[10u].y, _1964 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1966, cbModelParam._m0[11u].z, fma(_1965, cbModelParam._m0[11u].y, _1964 * cbModelParam._m0[11u].x))), _1391);
            frontier_phi_16_38_ladder = _2111.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2111.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2111.x * cbModelParam._m0[1u].y;
        }
        _1473 = frontier_phi_16_38_ladder_2;
        _1475 = frontier_phi_16_38_ladder_1;
        _1477 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1461 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_546, _547, _548), _1391);
        _1473 = _1461.x * cbModelParam._m0[1u].y;
        _1475 = _1461.y * cbModelParam._m0[1u].y;
        _1477 = _1461.z * cbModelParam._m0[1u].y;
    }
    float _1481 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _452);
    float _1482 = isnan(_1481) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1481 : min(cbModelParam._m0[25u].w, _1481));
    float _1575;
    float _1577;
    float _1579;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1539 = fma(_610, cbModelParam._m0[21u].z, fma(_606, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _602)) + cbModelParam._m0[21u].w;
        float _1543 = fma(_610, cbModelParam._m0[22u].z, fma(_606, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _602)) + cbModelParam._m0[22u].w;
        float _1547 = fma(_610, cbModelParam._m0[23u].z, fma(_606, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _602)) + cbModelParam._m0[23u].w;
        float _1550 = fma(_548, cbModelParam._m0[21u].z, fma(_547, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _546));
        float _1553 = fma(_548, cbModelParam._m0[22u].z, fma(_547, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _546));
        float _1556 = fma(_548, cbModelParam._m0[23u].z, fma(_547, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _546));
        float _1666;
        if (_1550 > 0.0)
        {
            _1666 = abs((1.0 - _1539) / _1550);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1550 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1539 + 1.0) / _1550);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1666 = frontier_phi_28_24_ladder;
        }
        float _1984;
        if (_1553 > 0.0)
        {
            _1984 = abs((1.0 - _1543) / _1553);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1553 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1543 + 1.0) / _1553);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1984 = frontier_phi_40_35_ladder;
        }
        float _2322;
        if (_1556 > 0.0)
        {
            _2322 = abs((1.0 - _1547) / _1556);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1556 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1547 + 1.0) / _1556);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2322 = frontier_phi_50_47_ladder;
        }
        float _2324 = isnan(_1984) ? _1666 : (isnan(_1666) ? _1984 : min(_1666, _1984));
        float _2325 = isnan(_2322) ? _2324 : (isnan(_2324) ? _2322 : min(_2324, _2322));
        float _2329 = (_2325 * _1550) + _1539;
        float _2330 = (_2325 * _1553) + _1543;
        float _2331 = (_2325 * _1556) + _1547;
        float _2332 = _2325 * 9.9999997473787516355514526367188e-05;
        float _2333 = (-1.0) - _2332;
        float _2335 = _2332 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2331 > _2335) || ((_2331 < _2333) || ((_2330 > _2335) || ((_2330 < _2333) || ((_2329 < _2333) || (_2329 > _2335))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2453 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2331, cbModelParam._m0[17u].z, fma(_2330, cbModelParam._m0[17u].y, _2329 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2331, cbModelParam._m0[18u].z, fma(_2330, cbModelParam._m0[18u].y, _2329 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2331, cbModelParam._m0[19u].z, fma(_2330, cbModelParam._m0[19u].y, _2329 * cbModelParam._m0[19u].x))), _1482);
            frontier_phi_25_50_ladder = _2453.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2453.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2453.x * cbModelParam._m0[1u].z;
        }
        _1575 = frontier_phi_25_50_ladder_2;
        _1577 = frontier_phi_25_50_ladder_1;
        _1579 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1559 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_546, _547, _548), _1482);
        _1575 = _1559.x * cbModelParam._m0[1u].z;
        _1577 = _1559.y * cbModelParam._m0[1u].z;
        _1579 = _1559.z * cbModelParam._m0[1u].z;
    }
    float _1592 = (((_573 * _523) + _574) * _538) * ((cbModelParam._m0[1u].w * (_1575 - _1473)) + _1473);
    float _1594 = (((_573 * _525) + _574) * _538) * ((cbModelParam._m0[1u].w * (_1577 - _1475)) + _1475);
    float _1596 = (((_573 * _526) + _574) * _538) * ((cbModelParam._m0[1u].w * (_1579 - _1477)) + _1477);
    float _1599 = fma(_1596, cbSceneParam._m0[89u].z, fma(_1594, cbSceneParam._m0[89u].y, _1592 * cbSceneParam._m0[89u].x));
    float _1602 = fma(_1596, cbSceneParam._m0[90u].z, fma(_1594, cbSceneParam._m0[90u].y, _1592 * cbSceneParam._m0[90u].x));
    float _1605 = fma(_1596, cbSceneParam._m0[91u].z, fma(_1594, cbSceneParam._m0[91u].y, _1592 * cbSceneParam._m0[91u].x));
    float _1640 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1644 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1648 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1652 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1653 = _1640 / _1652;
    float _1654 = _1644 / _1652;
    float _1655 = _1648 / _1652;
    float _1802;
    float _1803;
    float _1804;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1682 = ((uint(_1655 > cbSceneParam._m0[59u].y) + uint(_1655 > cbSceneParam._m0[59u].x)) + uint(_1655 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1683 = _1682 + 43u;
        uint _1691 = _1682 + 44u;
        uint _1699 = _1682 + 45u;
        uint _1707 = _1682 + 46u;
        float _1718 = fma(_1652, cbSceneParam._m0[_1683].w, fma(_1648, cbSceneParam._m0[_1683].z, fma(_1644, cbSceneParam._m0[_1683].y, _1640 * cbSceneParam._m0[_1683].x)));
        float _1722 = fma(_1652, cbSceneParam._m0[_1691].w, fma(_1648, cbSceneParam._m0[_1691].z, fma(_1644, cbSceneParam._m0[_1691].y, _1640 * cbSceneParam._m0[_1691].x)));
        float _1730 = fma(_1652, cbSceneParam._m0[_1707].w, fma(_1648, cbSceneParam._m0[_1707].z, fma(_1644, cbSceneParam._m0[_1707].y, _1640 * cbSceneParam._m0[_1707].x)));
        float _1735 = cbSceneParam._m0[33u].z * _1730;
        float _1737 = cbSceneParam._m0[33u].w * _1730;
        float _1740 = fma(_1652, cbSceneParam._m0[_1699].w, fma(_1648, cbSceneParam._m0[_1699].z, fma(_1644, cbSceneParam._m0[_1699].y, _1640 * cbSceneParam._m0[_1699].x))) / _1730;
        float _1788 = (cbSceneParam._m0[33u].x - sqrt(((_1654 * _1654) + (_1653 * _1653)) + (_1655 * _1655))) * cbSceneParam._m0[33u].y;
        float _4136 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
        float _1795 = (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1735 + _1718) / _1730, (_1737 + _1722) / _1730), _1740), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1737 + _1718) / _1730, (_1722 - _1735) / _1730), _1740), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1718 - _1735) / _1730, (_1722 - _1737) / _1730), _1740), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1718 - _1737) / _1730, (_1735 + _1722) / _1730), _1740), 0.0)).x), vec4(0.25)));
        _1802 = 1.0 - (_1795 * cbSceneParam._m0[34u].x);
        _1803 = 1.0 - (_1795 * cbSceneParam._m0[34u].y);
        _1804 = 1.0 - (_1795 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1802 = 1.0;
        _1803 = 1.0;
        _1804 = 1.0;
    }
    float _1868;
    float _1870;
    float _1872;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1856 = fma(_1652, cbSceneParam._m0[63u].w, fma(_1648, cbSceneParam._m0[63u].z, fma(_1644, cbSceneParam._m0[63u].y, _1640 * cbSceneParam._m0[63u].x)));
        float _1857 = fma(_1652, cbSceneParam._m0[60u].w, fma(_1648, cbSceneParam._m0[60u].z, fma(_1644, cbSceneParam._m0[60u].y, _1640 * cbSceneParam._m0[60u].x))) / _1856;
        float _1858 = fma(_1652, cbSceneParam._m0[61u].w, fma(_1648, cbSceneParam._m0[61u].z, fma(_1644, cbSceneParam._m0[61u].y, _1640 * cbSceneParam._m0[61u].x))) / _1856;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1857 >= cbSceneParam._m0[64u].x) && (_1858 >= cbSceneParam._m0[64u].y)) && (_1857 <= cbSceneParam._m0[64u].z)) && (_1858 <= cbSceneParam._m0[64u].w))
        {
            float _1997 = fma(_1652, cbSceneParam._m0[62u].w, fma(_1648, cbSceneParam._m0[62u].z, fma(_1644, cbSceneParam._m0[62u].y, _1640 * cbSceneParam._m0[62u].x))) / _1856;
            float _2001 = isnan(cbSceneParam._m0[41u].w) ? _1997 : (isnan(_1997) ? cbSceneParam._m0[41u].w : max(_1997, cbSceneParam._m0[41u].w));
            float _2044 = (cbSceneParam._m0[33u].x - sqrt(((_1654 * _1654) + (_1653 * _1653)) + (_1655 * _1655))) * cbSceneParam._m0[33u].y;
            float _4152 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
            float _2051 = (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1857, cbSceneParam._m0[33u].w + _1858), _2001), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1857, _1858 - cbSceneParam._m0[33u].z), _2001), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1857 - cbSceneParam._m0[33u].z, _1858 - cbSceneParam._m0[33u].w), _2001), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1857 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1858), _2001), 0.0)).x), vec4(0.25)));
            float _2055 = 1.0 - (_2051 * cbSceneParam._m0[34u].x);
            float _2056 = 1.0 - (_2051 * cbSceneParam._m0[34u].y);
            float _2057 = 1.0 - (_2051 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2057) ? _1804 : (isnan(_1804) ? _2057 : min(_1804, _2057));
            frontier_phi_37_36_ladder_1 = isnan(_2056) ? _1803 : (isnan(_1803) ? _2056 : min(_1803, _2056));
            frontier_phi_37_36_ladder_2 = isnan(_2055) ? _1802 : (isnan(_1802) ? _2055 : min(_1802, _2055));
        }
        else
        {
            frontier_phi_37_36_ladder = _1804;
            frontier_phi_37_36_ladder_1 = _1803;
            frontier_phi_37_36_ladder_2 = _1802;
        }
        _1868 = frontier_phi_37_36_ladder_2;
        _1870 = frontier_phi_37_36_ladder_1;
        _1872 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1868 = _1802;
        _1870 = _1803;
        _1872 = _1804;
    }
    uvec4 _1877 = floatBitsToUint(cbInstanceData._m0[_465 + 5u]);
    uint _1879 = _1877.x * 14u;
    uint _1880 = _1879 + 13u;
    float _1887 = _538 + (-1.0);
    float _1892 = (cbLight._m0[_1880].x * _1887) + 1.0;
    float _1893 = (cbLight._m0[_1880].y * _1887) + 1.0;
    float _1894 = (cbLight._m0[_1880].z * _1887) + 1.0;
    float _1895 = (cbLight._m0[_1880].w * _1887) + 1.0;
    uint _1896 = _1879 + 5u;
    float _1902 = isnan(1.0) ? _1893 : (isnan(_1893) ? 1.0 : min(_1893, 1.0));
    uint _1906 = _1879 + 4u;
    float _1916 = isnan(1.0) ? _1892 : (isnan(_1892) ? 1.0 : min(_1892, 1.0));
    uint _1920 = _1879 | 1u;
    float _1931 = dot(vec3(cbLight._m0[_1879].xyz), vec3(_305, _306, _307));
    float _1934 = dot(vec3(cbLight._m0[_1920].xyz), vec3(_305, _306, _307));
    float _4188 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _4199 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
    float _1939 = (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * 0.3183098733425140380859375;
    float _1941 = (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * 0.3183098733425140380859375;
    float _1948 = ((cbLight._m0[_1896].x * _1902) * _1941) + (((cbLight._m0[_1906].x * _1868) * _1916) * _1939);
    float _1949 = ((_1902 * cbLight._m0[_1896].y) * _1941) + (((cbLight._m0[_1906].y * _1870) * _1916) * _1939);
    float _1950 = ((_1902 * cbLight._m0[_1896].z) * _1941) + (((cbLight._m0[_1906].z * _1872) * _1916) * _1939);
    uvec4 _1954 = floatBitsToUint(cbLight._m0[_1879 + 12u]);
    bool _1956 = _1954.x == 0u;
    float _2058;
    float _2060;
    float _2062;
    if (_1956)
    {
        _2058 = _1948;
        _2060 = _1949;
        _2062 = _1950;
    }
    else
    {
        uint _2066 = _1879 + 6u;
        float _2082 = (dot(vec3(cbLight._m0[_1879 + 2u].xyz), vec3(_305, _306, _307)) * 0.5) + 0.5;
        float _2083 = _2082 * _2082;
        float _4210 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2084 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _2085 = isnan(1.0) ? _1894 : (isnan(_1894) ? 1.0 : min(_1894, 1.0));
        _2058 = (((cbLight._m0[_2066].x * 0.3183098733425140380859375) * _2084) * _2085) + _1948;
        _2060 = (((cbLight._m0[_2066].y * 0.3183098733425140380859375) * _2084) * _2085) + _1949;
        _2062 = (((cbLight._m0[_2066].z * 0.3183098733425140380859375) * _2084) * _2085) + _1950;
    }
    bool _2065 = _1954.y == 0u;
    float _2120;
    float _2122;
    float _2124;
    if (_2065)
    {
        _2120 = _2058;
        _2122 = _2060;
        _2124 = _2062;
    }
    else
    {
        uint _2293 = _1879 + 7u;
        float _2309 = (dot(vec3(cbLight._m0[_1879 + 3u].xyz), vec3(_305, _306, _307)) * 0.5) + 0.5;
        float _2310 = _2309 * _2309;
        float _4226 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
        float _2311 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _2312 = isnan(1.0) ? _1895 : (isnan(_1895) ? 1.0 : min(_1895, 1.0));
        _2120 = (((cbLight._m0[_2293].x * 0.3183098733425140380859375) * _2311) * _2312) + _2058;
        _2122 = (((cbLight._m0[_2293].y * 0.3183098733425140380859375) * _2311) * _2312) + _2060;
        _2124 = (((cbLight._m0[_2293].z * 0.3183098733425140380859375) * _2311) * _2312) + _2062;
    }
    uint _2127 = _1879 + 8u;
    float _2140 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1879].w)) * _452) * 0.949999988079071044921875);
    float _2141 = _2140 * _2140;
    float _2142 = cbLight._m0[_1879].x + _387;
    float _2143 = cbLight._m0[_1879].y + _388;
    float _2144 = cbLight._m0[_1879].z + _389;
    float _2148 = inversesqrt(dot(vec3(_2142, _2143, _2144), vec3(_2142, _2143, _2144)));
    float _2149 = _2148 * _2142;
    float _2150 = _2148 * _2143;
    float _2151 = _2148 * _2144;
    float _2152 = dot(vec3(_305, _306, _307), vec3(cbLight._m0[_1879].xyz));
    float _4242 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _2155 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
    float _4253 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _2156 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
    float _2157 = dot(vec3(_305, _306, _307), vec3(_2149, _2150, _2151));
    float _4264 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2160 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
    float _2161 = dot(vec3(cbLight._m0[_1879].xyz), vec3(_2149, _2150, _2151));
    float _4275 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2165 = _2141 * _2141;
    float _2169 = ((_2160 * _2160) * (_2165 + (-1.0))) + 1.0;
    float _2177 = exp2(log2(1.0 - (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0)))) * 5.0);
    float _2178 = 0.959999978542327880859375 - _520;
    float _2180 = 0.959999978542327880859375 - _521;
    float _2181 = 0.959999978542327880859375 - _522;
    float _2188 = 1.0 - _2141;
    float _2199 = (0.5 / (((_2156 * ((_2155 * _2188) + _2141)) + 9.9999999392252902907785028219223e-09) + (((_2156 * _2188) + _2141) * _2155))) * _2155;
    float _4286 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2201 = (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_2165 / ((_2169 * _2169) * 3.141590118408203125));
    uint _2215 = _1879 + 9u;
    float _2226 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1920].w)) * _452) * 0.949999988079071044921875);
    float _2227 = _2226 * _2226;
    float _2228 = cbLight._m0[_1920].x + _387;
    float _2229 = cbLight._m0[_1920].y + _388;
    float _2230 = cbLight._m0[_1920].z + _389;
    float _2234 = inversesqrt(dot(vec3(_2228, _2229, _2230), vec3(_2228, _2229, _2230)));
    float _2235 = _2234 * _2228;
    float _2236 = _2234 * _2229;
    float _2237 = _2234 * _2230;
    float _2238 = dot(vec3(_305, _306, _307), vec3(cbLight._m0[_1920].xyz));
    float _4297 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2241 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
    float _2242 = dot(vec3(_305, _306, _307), vec3(_2235, _2236, _2237));
    float _4308 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2245 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
    float _2246 = dot(vec3(cbLight._m0[_1920].xyz), vec3(_2235, _2236, _2237));
    float _4319 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _2250 = _2227 * _2227;
    float _2254 = ((_2245 * _2245) * (_2250 + (-1.0))) + 1.0;
    float _2261 = exp2(log2(1.0 - (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0)))) * 5.0);
    float _2268 = 1.0 - _2227;
    float _2278 = (0.5 / (((_2156 * ((_2241 * _2268) + _2227)) + 9.9999999392252902907785028219223e-09) + (((_2156 * _2268) + _2227) * _2241))) * _2241;
    float _4330 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2280 = (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_2250 / ((_2254 * _2254) * 3.141590118408203125));
    float _2290 = (((((_2261 * _2178) + _523) * cbLight._m0[_2215].x) * _2280) * _1902) + ((((cbLight._m0[_2127].x * _1868) * ((_2177 * _2178) + _523)) * _2201) * _1916);
    float _2291 = (((((_2261 * _2180) + _525) * cbLight._m0[_2215].y) * _2280) * _1902) + ((((cbLight._m0[_2127].y * _1870) * ((_2177 * _2180) + _525)) * _2201) * _1916);
    float _2292 = (((((_2261 * _2181) + _526) * cbLight._m0[_2215].z) * _2280) * _1902) + ((((cbLight._m0[_2127].z * _1872) * ((_2177 * _2181) + _526)) * _2201) * _1916);
    float _2348;
    float _2350;
    float _2352;
    if (_1956)
    {
        _2348 = _2290;
        _2350 = _2291;
        _2352 = _2292;
    }
    else
    {
        uint _2354 = _1879 + 2u;
        uint _2358 = _1879 + 10u;
        float _2372 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2354].w)) * _452) * 0.949999988079071044921875);
        float _2373 = _2372 * _2372;
        float _2374 = cbLight._m0[_2354].x + _387;
        float _2375 = cbLight._m0[_2354].y + _388;
        float _2376 = cbLight._m0[_2354].z + _389;
        float _2380 = inversesqrt(dot(vec3(_2374, _2375, _2376), vec3(_2374, _2375, _2376)));
        float _2381 = _2380 * _2374;
        float _2382 = _2380 * _2375;
        float _2383 = _2380 * _2376;
        float _2384 = dot(vec3(_305, _306, _307), vec3(cbLight._m0[_2354].xyz));
        float _4341 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2387 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _2388 = dot(vec3(_305, _306, _307), vec3(_2381, _2382, _2383));
        float _4352 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2391 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _2392 = dot(vec3(cbLight._m0[_2354].xyz), vec3(_2381, _2382, _2383));
        float _4363 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2396 = _2373 * _2373;
        float _2400 = ((_2391 * _2391) * (_2396 + (-1.0))) + 1.0;
        float _2407 = exp2(log2(1.0 - (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0)))) * 5.0);
        float _2414 = 1.0 - _2373;
        float _2424 = (0.5 / (((_2156 * ((_2387 * _2414) + _2373)) + 9.9999999392252902907785028219223e-09) + (((_2156 * _2414) + _2373) * _2387))) * _2387;
        float _4374 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2426 = (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_2396 / ((_2400 * _2400) * 3.141590118408203125));
        float _2427 = isnan(1.0) ? _1894 : (isnan(_1894) ? 1.0 : min(_1894, 1.0));
        _2348 = (((((_2407 * _2178) + _523) * cbLight._m0[_2358].x) * _2426) * _2427) + _2290;
        _2350 = (((((_2407 * _2180) + _525) * cbLight._m0[_2358].y) * _2426) * _2427) + _2291;
        _2352 = (((((_2407 * _2181) + _526) * cbLight._m0[_2358].z) * _2426) * _2427) + _2292;
    }
    float _2458;
    float _2460;
    float _2462;
    if (_2065)
    {
        _2458 = _2348;
        _2460 = _2350;
        _2462 = _2352;
    }
    else
    {
        uint _2469 = _1879 + 3u;
        uint _2473 = _1879 + 11u;
        float _2487 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2469].w)) * _452) * 0.949999988079071044921875);
        float _2488 = _2487 * _2487;
        float _2489 = cbLight._m0[_2469].x + _387;
        float _2490 = cbLight._m0[_2469].y + _388;
        float _2491 = cbLight._m0[_2469].z + _389;
        float _2495 = inversesqrt(dot(vec3(_2489, _2490, _2491), vec3(_2489, _2490, _2491)));
        float _2496 = _2495 * _2489;
        float _2497 = _2495 * _2490;
        float _2498 = _2495 * _2491;
        float _2499 = dot(vec3(_305, _306, _307), vec3(cbLight._m0[_2469].xyz));
        float _4390 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2502 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _2503 = dot(vec3(_305, _306, _307), vec3(_2496, _2497, _2498));
        float _4401 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2506 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _2507 = dot(vec3(cbLight._m0[_2469].xyz), vec3(_2496, _2497, _2498));
        float _4412 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        float _2511 = _2488 * _2488;
        float _2515 = ((_2506 * _2506) * (_2511 + (-1.0))) + 1.0;
        float _2522 = exp2(log2(1.0 - (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0)))) * 5.0);
        float _2529 = 1.0 - _2488;
        float _2539 = (0.5 / (((_2156 * ((_2502 * _2529) + _2488)) + 9.9999999392252902907785028219223e-09) + (((_2156 * _2529) + _2488) * _2502))) * _2502;
        float _4423 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2541 = (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_2511 / ((_2515 * _2515) * 3.141590118408203125));
        float _2542 = isnan(1.0) ? _1895 : (isnan(_1895) ? 1.0 : min(_1895, 1.0));
        _2458 = (((((_2522 * _2178) + _523) * cbLight._m0[_2473].x) * _2541) * _2542) + _2348;
        _2460 = (((((_2522 * _2180) + _525) * cbLight._m0[_2473].y) * _2541) * _2542) + _2350;
        _2462 = (((((_2522 * _2181) + _526) * cbLight._m0[_2473].z) * _2541) * _2542) + _2352;
    }
    float _2608;
    float _2610;
    float _2612;
    float _2614;
    float _2616;
    float _2618;
    if (_1877.y == 0u)
    {
        uvec4 _2563 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2564 = _2563.x;
        uint _2575 = uint((float(_2563.y) * floor(float(uint(cbSceneParam._m0[85u].y * _409) / _2564))) + floor(float(uint(cbSceneParam._m0[85u].x * _408) / _2564)));
        float _2585 = (log2(_1655 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2586 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        uint _2589 = uint(isnan(14.0) ? _2586 : (isnan(_2586) ? 14.0 : min(_2586, 14.0)));
        uvec4 _2594 = texelFetch(g_lightClusterGridBuffer, int(((_2589 << 2u) + (_2575 << 6u)) >> 2u));
        uint _2595 = _2594.x;
        uint _2596 = _2563.z;
        float _2693;
        float _2695;
        float _2697;
        float _2699;
        float _2701;
        float _2703;
        if (((((1u << ((_2596 >> 4u) & 15u)) + 4294967295u) & _2595) == 0u) || ((_2596 & 240u) == 0u))
        {
            _2693 = 0.0;
            _2695 = 0.0;
            _2697 = 0.0;
            _2699 = 0.0;
            _2701 = 0.0;
            _2703 = 0.0;
        }
        else
        {
            float _2694;
            float _2696;
            float _2698;
            float _2700;
            float _2702;
            float _2704;
            float _2846 = 0.0;
            float _2847 = 0.0;
            float _2848 = 0.0;
            float _2849 = 0.0;
            float _2850 = 0.0;
            float _2851 = 0.0;
            uint _2852 = 0u;
            uint _2861;
            bool _2862;
            for (;;)
            {
                _2861 = texelFetch(g_lightClassification, int((((_2589 << 5u) + (_2575 << 9u)) + (_2852 << 2u)) >> 2u)).x;
                _2862 = _2861 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2862)
                {
                    frontier_phi_71_pred = _2851;
                    frontier_phi_71_pred_1 = _2850;
                    frontier_phi_71_pred_2 = _2849;
                    frontier_phi_71_pred_3 = _2848;
                    frontier_phi_71_pred_4 = _2847;
                    frontier_phi_71_pred_5 = _2846;
                }
                else
                {
                    float _2991;
                    float _2992;
                    float _2993;
                    float _2994;
                    float _2995;
                    float _2996;
                    uint _2997;
                    _2991 = _2846;
                    _2992 = _2847;
                    _2993 = _2848;
                    _2994 = _2849;
                    _2995 = _2850;
                    _2996 = _2851;
                    _2997 = _2861;
                    float _2918;
                    float _2919;
                    float _2920;
                    float _2921;
                    float _2922;
                    float _2923;
                    for (;;)
                    {
                        uint _3001 = uint(findLSB(_2997)) + (_2852 << 5u);
                        uint _2998 = (_2997 + 4294967295u) & _2997;
                        uint _3003 = _3001 * 48u;
                        vec4 _3017 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3003)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 3u)).x));
                        uint _3023 = (_3001 * 48u) + 4u;
                        vec4 _3036 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3023)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 3u)).x));
                        uint _3042 = (_3001 * 48u) + 8u;
                        vec3 _3053 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3042)).x, texelFetch(g_PointLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3042 + 2u)).x));
                        float _3057 = _3017.x - _1653;
                        float _3058 = _3017.y - _1654;
                        float _3059 = _3017.z - _1655;
                        float _3060 = dot(vec3(_3057, _3058, _3059), vec3(_3057, _3058, _3059));
                        float _3063 = inversesqrt(_3060);
                        float _3064 = _3063 * _3057;
                        float _3065 = _3063 * _3058;
                        float _3066 = _3063 * _3059;
                        float _3067 = dot(vec3(_433, _436, _439), vec3(_3064, _3065, _3066));
                        float _3072 = 1.0 - (_3060 * _3017.w);
                        float _4449 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                        float _3073 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
                        float _3074 = sqrt(_3060) * _3036.w;
                        float _3077 = 1.39999997615814208984375 / (_3074 + 1.39999997615814208984375);
                        float _3078 = _3077 * _3077;
                        float _3081 = ((1.0 - _3078) * _3067) + _3078;
                        float _3084 = _3074 * _3074;
                        float _3088 = ((isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0))) * _3073) / ((_3084 * 0.699999988079071044921875) + 1.0);
                        float _3092 = (-0.0) - _1653;
                        float _3093 = (-0.0) - _1654;
                        float _3094 = (-0.0) - _1655;
                        float _3098 = inversesqrt(dot(vec3(_3092, _3093, _3094), vec3(_3092, _3093, _3094)));
                        float _3099 = _3098 * _3092;
                        float _3100 = _3098 * _3093;
                        float _3101 = _3098 * _3094;
                        float _3108 = exp2(log2(1.0 / ((_3084 * 3.5) + 5.0)) * 0.25);
                        float _3109 = 1.0 - _554;
                        float _3116 = sqrt(1.0 - ((1.0 - (_3109 * _3109)) * (1.0 - (_3108 * _3108))));
                        float _3117 = _3116 * _3116;
                        float _3118 = _3117 * _3117;
                        float _3119 = _3099 + _3064;
                        float _3120 = _3100 + _3065;
                        float _3121 = _3101 + _3066;
                        float _3125 = inversesqrt(dot(vec3(_3119, _3120, _3121), vec3(_3119, _3120, _3121)));
                        float _3129 = dot(vec3(_433, _436, _439), vec3(_3099, _3100, _3101));
                        float _4465 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                        float _3132 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
                        float _3133 = dot(vec3(_433, _436, _439), vec3(_3125 * _3119, _3125 * _3120, _3125 * _3121));
                        float _4476 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                        float _3136 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
                        float _3140 = ((_3136 * _3136) * (_3118 + (-1.0))) + 1.0;
                        float _3141 = _3077 * _3117;
                        float _3142 = _3141 * _3141;
                        float _3145 = ((1.0 - _3142) * _3067) + _3142;
                        float _4487 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                        float _3146 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                        float _3147 = 1.0 - _3117;
                        float _3157 = (0.5 / (((_3146 * ((_3132 * _3147) + _3117)) + 9.9999999392252902907785028219223e-09) + (((_3146 * _3147) + _3117) * _3132))) * _3146;
                        float _4498 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                        float _3168 = (((_3118 * 3.1415927410125732421875) * (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0)))) / ((_3140 * _3140) * ((_3084 * 2.1991131305694580078125) + 3.141590118408203125))) * _3073;
                        _2921 = (_3088 * _3036.x) + _2994;
                        _2922 = (_3088 * _3036.y) + _2995;
                        _2923 = (_3088 * _3036.z) + _2996;
                        _2918 = (_3168 * _3053.x) + _2991;
                        _2919 = (_3168 * _3053.y) + _2992;
                        _2920 = (_3168 * _3053.z) + _2993;
                        if (_2998 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2991 = _2918;
                            _2992 = _2919;
                            _2993 = _2920;
                            _2994 = _2921;
                            _2995 = _2922;
                            _2996 = _2923;
                            _2997 = _2998;
                        }
                    }
                    frontier_phi_71_pred = _2923;
                    frontier_phi_71_pred_1 = _2922;
                    frontier_phi_71_pred_2 = _2921;
                    frontier_phi_71_pred_3 = _2920;
                    frontier_phi_71_pred_4 = _2919;
                    frontier_phi_71_pred_5 = _2918;
                }
                _2704 = frontier_phi_71_pred;
                _2702 = frontier_phi_71_pred_1;
                _2700 = frontier_phi_71_pred_2;
                _2698 = frontier_phi_71_pred_3;
                _2696 = frontier_phi_71_pred_4;
                _2694 = frontier_phi_71_pred_5;
                uint _2853 = _2852 + 1u;
                if (_2853 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2846 = _2694;
                    _2847 = _2696;
                    _2848 = _2698;
                    _2849 = _2700;
                    _2850 = _2702;
                    _2851 = _2704;
                    _2852 = _2853;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2693 = _2694;
            _2695 = _2696;
            _2697 = _2698;
            _2699 = _2700;
            _2701 = _2702;
            _2703 = _2704;
        }
        uvec4 _2707 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2708 = _2707.z;
        uint _2710 = (_2708 >> 8u) & 15u;
        float _2814;
        float _2816;
        float _2818;
        float _2820;
        float _2822;
        float _2824;
        if (((4294967295u << _2710) & _2595) == 0u)
        {
            _2814 = _2693;
            _2816 = _2695;
            _2818 = _2697;
            _2820 = _2699;
            _2822 = _2701;
            _2824 = _2703;
        }
        else
        {
            float _2839 = inversesqrt(dot(vec3(_1653, _1654, _1655), vec3(_1653, _1654, _1655)));
            float _2840 = _2839 * _1653;
            float _2841 = _2839 * _1654;
            float _2842 = _2839 * _1655;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2710 < ((_2708 >> 12u) & 15u))
            {
                float _2815;
                float _2817;
                float _2819;
                float _2821;
                float _2823;
                float _2825;
                float _2974 = _2693;
                float _2975 = _2695;
                float _2976 = _2697;
                float _2977 = _2699;
                float _2978 = _2701;
                float _2979 = _2703;
                uint _2980 = _2710;
                uint _2989;
                bool _2990;
                for (;;)
                {
                    _2989 = texelFetch(g_lightClassification, int((((_2589 << 5u) + (_2575 << 9u)) + (_2980 << 2u)) >> 2u)).x;
                    _2990 = _2989 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2990)
                    {
                        frontier_phi_82_pred = _2979;
                        frontier_phi_82_pred_1 = _2978;
                        frontier_phi_82_pred_2 = _2977;
                        frontier_phi_82_pred_3 = _2976;
                        frontier_phi_82_pred_4 = _2975;
                        frontier_phi_82_pred_5 = _2974;
                    }
                    else
                    {
                        float _3182;
                        float _3183;
                        float _3184;
                        float _3185;
                        float _3186;
                        float _3187;
                        float _3478;
                        float _3479;
                        float _3480;
                        float _3481;
                        float _3482;
                        float _3483;
                        float _3195 = _2974;
                        float _3196 = _2975;
                        float _3197 = _2976;
                        float _3198 = _2977;
                        float _3199 = _2978;
                        float _3200 = _2979;
                        uint _3201 = _2989;
                        uint _3202;
                        vec4 _3227;
                        float _3228;
                        vec4 _3243;
                        vec3 _3255;
                        vec4 _3271;
                        vec4 _3287;
                        float _3334;
                        bool _3335;
                        for (;;)
                        {
                            uint _3212 = ((_2980 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3201));
                            _3202 = (_3201 + 4294967295u) & _3201;
                            uint _3214 = _3212 * 40u;
                            _3227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 3u)).x));
                            _3228 = _3227.w;
                            uint _3230 = (_3212 * 40u) + 4u;
                            _3243 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3230)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 3u)).x));
                            uint _3245 = (_3212 * 40u) + 8u;
                            _3255 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3245)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 2u)).x));
                            uint _3258 = (_3212 * 40u) + 16u;
                            _3271 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3258)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 3u)).x));
                            uint _3274 = (_3212 * 40u) + 20u;
                            _3287 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3274)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 3u)).x));
                            uint _3290 = (_3212 * 40u) + 24u;
                            vec4 _3303 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3290)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 3u)).x));
                            uint _3309 = (_3212 * 40u) + 28u;
                            vec4 _3322 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3309)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 3u)).x));
                            _3334 = fma(_1655, _3322.z, fma(_1654, _3322.y, _3322.x * _1653)) + _3322.w;
                            _3335 = !((fma(_1655, _3303.z, fma(_1654, _3303.y, _3303.x * _1653)) + _3303.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3335)
                            {
                                float _3362 = _3227.x - _1653;
                                float _3363 = _3227.y - _1654;
                                float _3364 = _3227.z - _1655;
                                float _3365 = dot(vec3(_3362, _3363, _3364), vec3(_3362, _3363, _3364));
                                float _3368 = inversesqrt(_3365);
                                float _3369 = _3368 * _3362;
                                float _3370 = _3368 * _3363;
                                float _3371 = _3368 * _3364;
                                float _3375 = 1.0 - (_3365 / (_3228 * _3228));
                                float _4509 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                                float _3376 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                                float _3380 = sqrt(_3365) * _3243.w;
                                float _3382 = 1.39999997615814208984375 / (_3380 + 1.39999997615814208984375);
                                float _3383 = _3382 * _3382;
                                float _3386 = ((1.0 - _3383) * dot(vec3(_3369, _3370, _3371), vec3(_433, _436, _439))) + _3383;
                                float _3389 = _3380 * _3380;
                                float _3393 = (fma(_1655, _3271.z, fma(_1654, _3271.y, _3271.x * _1653)) + _3271.w) / _3334;
                                float _3394 = (fma(_1655, _3287.z, fma(_1654, _3287.y, _3287.x * _1653)) + _3287.w) / _3334;
                                float _3398 = 1.0 - dot(vec2(_3393, _3394), vec2(_3393, _3394));
                                float _4525 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                                float _3399 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
                                float _3400 = _3399 * (((isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0))) * _3376) / ((_3389 * 0.699999988079071044921875) + 1.0));
                                float _3412 = exp2(log2(1.0 / ((_3389 * 3.5) + 5.0)) * 0.25);
                                float _3413 = 1.0 - _554;
                                float _3420 = sqrt(1.0 - ((1.0 - (_3413 * _3413)) * (1.0 - (_3412 * _3412))));
                                float _3421 = _3420 * _3420;
                                float _3422 = _3421 * _3421;
                                float _3423 = _3369 - _2840;
                                float _3424 = _3370 - _2841;
                                float _3425 = _3371 - _2842;
                                float _3429 = inversesqrt(dot(vec3(_3423, _3424, _3425), vec3(_3423, _3424, _3425)));
                                float _3433 = dot(vec3(_433, _436, _439), vec3((-0.0) - _2840, (-0.0) - _2841, (-0.0) - _2842));
                                float _4536 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                                float _3436 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
                                float _3437 = dot(vec3(_433, _436, _439), vec3(_3429 * _3423, _3429 * _3424, _3429 * _3425));
                                float _4547 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                                float _3440 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
                                float _3444 = ((_3440 * _3440) * (_3422 + (-1.0))) + 1.0;
                                float _3445 = _3382 * _3421;
                                float _3446 = _3445 * _3445;
                                float _3452 = ((1.0 - _3446) * dot(vec3(_433, _436, _439), vec3(_3369, _3370, _3371))) + _3446;
                                float _4558 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                                float _3453 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                                float _3454 = 1.0 - _3421;
                                float _3464 = (0.5 / (((_3453 * ((_3436 * _3454) + _3421)) + 9.9999999392252902907785028219223e-09) + (((_3453 * _3454) + _3421) * _3436))) * _3453;
                                float _4569 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                                float _3474 = (_3399 * _3376) * (((_3422 * 3.1415927410125732421875) * (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0)))) / ((_3444 * _3444) * ((_3389 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3400 * _3243.z;
                                frontier_phi_88_pred_1 = _3400 * _3243.y;
                                frontier_phi_88_pred_2 = _3400 * _3243.x;
                                frontier_phi_88_pred_3 = _3474 * _3255.z;
                                frontier_phi_88_pred_4 = _3474 * _3255.y;
                                frontier_phi_88_pred_5 = _3474 * _3255.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3483 = frontier_phi_88_pred;
                            _3482 = frontier_phi_88_pred_1;
                            _3481 = frontier_phi_88_pred_2;
                            _3480 = frontier_phi_88_pred_3;
                            _3479 = frontier_phi_88_pred_4;
                            _3478 = frontier_phi_88_pred_5;
                            _3185 = _3481 + _3198;
                            _3186 = _3482 + _3199;
                            _3187 = _3483 + _3200;
                            _3182 = _3478 + _3195;
                            _3183 = _3479 + _3196;
                            _3184 = _3480 + _3197;
                            if (_3202 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3195 = _3182;
                                _3196 = _3183;
                                _3197 = _3184;
                                _3198 = _3185;
                                _3199 = _3186;
                                _3200 = _3187;
                                _3201 = _3202;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3187;
                        frontier_phi_82_pred_1 = _3186;
                        frontier_phi_82_pred_2 = _3185;
                        frontier_phi_82_pred_3 = _3184;
                        frontier_phi_82_pred_4 = _3183;
                        frontier_phi_82_pred_5 = _3182;
                    }
                    _2825 = frontier_phi_82_pred;
                    _2823 = frontier_phi_82_pred_1;
                    _2821 = frontier_phi_82_pred_2;
                    _2819 = frontier_phi_82_pred_3;
                    _2817 = frontier_phi_82_pred_4;
                    _2815 = frontier_phi_82_pred_5;
                    uint _2981 = _2980 + 1u;
                    if (_2981 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2974 = _2815;
                        _2975 = _2817;
                        _2976 = _2819;
                        _2977 = _2821;
                        _2978 = _2823;
                        _2979 = _2825;
                        _2980 = _2981;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2821;
                frontier_phi_63_64_ladder_1 = _2825;
                frontier_phi_63_64_ladder_2 = _2823;
                frontier_phi_63_64_ladder_3 = _2819;
                frontier_phi_63_64_ladder_4 = _2817;
                frontier_phi_63_64_ladder_5 = _2815;
            }
            else
            {
                frontier_phi_63_64_ladder = _2699;
                frontier_phi_63_64_ladder_1 = _2703;
                frontier_phi_63_64_ladder_2 = _2701;
                frontier_phi_63_64_ladder_3 = _2697;
                frontier_phi_63_64_ladder_4 = _2695;
                frontier_phi_63_64_ladder_5 = _2693;
            }
            _2814 = frontier_phi_63_64_ladder_5;
            _2816 = frontier_phi_63_64_ladder_4;
            _2818 = frontier_phi_63_64_ladder_3;
            _2820 = frontier_phi_63_64_ladder;
            _2822 = frontier_phi_63_64_ladder_2;
            _2824 = frontier_phi_63_64_ladder_1;
        }
        float _2829 = isnan(1.0) ? _538 : (isnan(_538) ? 1.0 : min(_538, 1.0));
        _2608 = (_2829 * _2820) + _2120;
        _2610 = (_2829 * _2822) + _2122;
        _2612 = (_2829 * _2824) + _2124;
        _2614 = ((_2814 * _523) * _2829) + _2458;
        _2616 = ((_2816 * _525) * _2829) + _2460;
        _2618 = ((_2818 * _526) * _2829) + _2462;
    }
    else
    {
        _2608 = _2120;
        _2610 = _2122;
        _2612 = _2124;
        _2614 = _2458;
        _2616 = _2460;
        _2618 = _2462;
    }
    vec4 _2624 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4585 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _4596 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _4607 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _2648 = (((isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * (_2608 + ((isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0))) * _538))) + ((_2614 + ((isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))) * _1380)) * cbPerFrame._m0[3u].x)) + (_2624.x * cbMtdParam._m0[3u].x);
    float _2650 = ((_2624.y * cbMtdParam._m0[3u].x) + ((_2616 + ((isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))) * _1380)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (_2610 + ((isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0))) * _538)));
    float _2652 = ((_2624.z * cbMtdParam._m0[3u].x) + ((_2618 + ((isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))) * _1380)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * (_2612 + ((isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0))) * _538)));
    float _2653 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
    float _2654 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
    float _2655 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
    uint _2656 = _465 + 6u;
    float _2664 = _408 / cbSceneParam._m0[86u].x;
    float _2665 = _409 / cbSceneParam._m0[86u].y;
    vec4 _2679 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2664, _2665, (log2((isnan(cbSceneParam._m0[77u].w) ? _328 : (isnan(_328) ? cbSceneParam._m0[77u].w : min(_328, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2681 = _2679.x;
    float _2682 = _2679.y;
    float _2683 = _2679.z;
    float _2684 = _2679.w;
    float _2756;
    float _2758;
    float _2760;
    float _2762;
    if (_328 > cbSceneParam._m0[78u].w)
    {
        float _2718 = isnan(_328) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _328 : min(cbSceneParam._m0[80u].w, _328));
        float _2719 = _2718 / _328;
        float _2730 = _2719 * _380;
        float _2731 = _381 * _2719;
        float _2732 = (-0.0) - _2731;
        float _2734 = _2719 * _382;
        float _2736 = (cbSceneParam._m0[77u].w * _2732) / _2718;
        float _2737 = _2736 + cbSceneParam._m0[79u].w;
        float _2738 = cbSceneParam._m0[79u].w - _2731;
        float _2744 = sqrt(((_2730 * _2730) + (_2731 * _2731)) + (_2734 * _2734));
        float _2747 = (1.0 - (cbSceneParam._m0[77u].w / _2718)) * _2744;
        float _2752 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2754 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2931;
        if (abs((_2732 - _2736) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2931 = ((((_2737 > 0.0) ? exp2(_2752 * _2737) : (2.0 - exp2(_2754 * _2737))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2747;
        }
        else
        {
            float _2875 = 1.0 / cbSceneParam._m0[80u].x;
            float _2876 = isnan(_2738) ? _2737 : (isnan(_2737) ? _2738 : max(_2737, _2738));
            float _2877 = isnan(_2738) ? _2737 : (isnan(_2737) ? _2738 : min(_2737, _2738));
            float _2886 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : min(_2876, 0.0));
            float _2887 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : min(_2877, 0.0));
            _2931 = ((abs(_2744 / _2732) * cbSceneParam._m0[80u].y) * ((((_2886 - _2887) * 2.0) - ((exp2(_2752 * (isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0)))) - exp2(_2752 * (isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0))))) * _2875)) - ((exp2(_2754 * _2886) - exp2(_2754 * _2887)) * _2875))) + (_2747 * cbSceneParam._m0[80u].z);
        }
        vec4 _2933 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2664, _2665, 1.0), 0.0);
        float _2942 = exp2((_2931 * (-1.44269502162933349609375)) * (1.0 - _2933.w));
        float _2943 = log2(_2942);
        float _2959 = log2(_2684);
        _2756 = (exp2(_2959 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2943 * cbSceneParam._m0[78u].x)) * _2933.x) / cbSceneParam._m0[78u].x)) + _2681;
        _2758 = (exp2(_2959 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2943 * cbSceneParam._m0[78u].y)) * _2933.y) / cbSceneParam._m0[78u].y)) + _2682;
        _2760 = (exp2(_2959 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2943 * cbSceneParam._m0[78u].z)) * _2933.z) / cbSceneParam._m0[78u].z)) + _2683;
        _2762 = _2942 * _2684;
    }
    else
    {
        _2756 = _2681;
        _2758 = _2682;
        _2760 = _2683;
        _2762 = _2684;
    }
    bool _2969;
    vec4 _2772;
    vec4 _2794;
    float _2796;
    float _2800;
    float _2801;
    float _2802;
    float _2803;
    bool _2813;
    for (;;)
    {
        _2772 = cbMatDynParam._m0[0u];
        float _2774 = roundEven(_2772.y);
        bool _2775 = _2774 == 3.0;
        float _2776 = log2(_2762);
        float _2783 = exp2(_2776 * cbSceneParam._m0[78u].x) * _2653;
        float _2784 = exp2(_2776 * cbSceneParam._m0[78u].y) * _2654;
        float _2785 = exp2(_2776 * cbSceneParam._m0[78u].z) * _2655;
        float _2792 = _396 + (-0.5);
        _2794 = cbMtdParam._m0[1u];
        _2796 = _2794.y * _2792;
        float _2799 = (_2774 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2800 = _2799 * (_2775 ? _2783 : (_2783 + (cbSceneParam._m0[72u].w * _2756)));
        _2801 = _2799 * (_2775 ? _2784 : (_2784 + (cbSceneParam._m0[72u].w * _2758)));
        _2802 = _2799 * (_2775 ? _2785 : (_2785 + (cbSceneParam._m0[72u].w * _2760)));
        _2803 = _2792 * 0.999000012874603271484375;
        _2813 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2813)
        {
            if ((cbInstanceData._m0[_465 + 7u].x + _2803) < 0.5)
            {
                _2969 = true;
                break;
            }
        }
        uint _2910 = _467 + uint(_2772.w);
        if ((cbInstanceData._m0[_2910].w < 1.0) && ((cbInstanceData._m0[_2910].w + _2803) < 0.5))
        {
            _2969 = true;
            break;
        }
        if ((_2796 + _245) < _2794.x)
        {
            _2969 = true;
            break;
        }
        _2969 = false;
        break;
    }
    float _3173;
    if (_2969)
    {
        discard_state = true;
        _3173 = 0.0;
    }
    else
    {
        _3173 = cbInstanceData._m0[_2656].w;
    }
    SV_Target.x = _2800;
    SV_Target.y = _2801;
    SV_Target.z = _2802;
    SV_Target.w = _3173;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2656].w;
    discard_exit();
}


