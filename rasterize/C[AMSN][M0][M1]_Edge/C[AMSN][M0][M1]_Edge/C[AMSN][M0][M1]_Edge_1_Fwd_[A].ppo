#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M0_M1_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M0_M1_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _916;
float _3325;
float _3326;
float _3327;
float _3328;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _233 = texture(sampler2D(C_AMSN_M0_M1_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _239 = _233.w;
    float _240 = _233.x * cbMtdParam._m0[9u].x;
    float _241 = _233.y * cbMtdParam._m0[9u].y;
    float _242 = _233.z * cbMtdParam._m0[9u].z;
    vec4 _254 = texture(sampler2D(C_AMSN_M0_M1_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _258 = _254.z;
    float _262 = (_254.x * 2.0) + (-1.0);
    float _264 = (_254.y * 2.0) + (-1.0);
    float _265 = dot(vec2(_262, _264), vec2(_262, _264));
    float _3337 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _271 = sqrt(1.0 - (isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0))));
    float _274 = fma(_271, _203 * NORMAL.x, fma(_264, _210 * TANGENT.x, (_196 * _188) * _262));
    float _277 = fma(_271, _203 * NORMAL.y, fma(_264, _210 * TANGENT.y, (_196 * _189) * _262));
    float _280 = fma(_271, _203 * NORMAL.z, fma(_264, _210 * TANGENT.z, (_196 * _190) * _262));
    float _284 = inversesqrt(dot(vec3(_274, _277, _280), vec3(_274, _277, _280)));
    float _285 = _284 * _274;
    float _286 = _284 * _277;
    float _287 = _284 * _280;
    float _3348 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _288 = isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0));
    float _3359 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3370 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3381 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _307 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _349 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _359 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _349);
    float _360 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _349);
    float _361 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _349);
    float _365 = inversesqrt(dot(vec3(_359, _360, _361), vec3(_359, _360, _361)));
    float _366 = _359 * _365;
    float _367 = _360 * _365;
    float _368 = _361 * _365;
    vec4 _373 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _375 = _373.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _595 = sqrt(((_359 * _359) + (_360 * _360)) + (_361 * _361));
        float _601 = (cbMatDynParam._m0[5u].x * _595) + cbMatDynParam._m0[5u].y;
        float _3392 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
        float _602 = isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0));
        float _606 = (cbMatDynParam._m0[5u].z * _595) + cbMatDynParam._m0[5u].w;
        float _3403 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0))) - _602)) + _602) < ((_375 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _387 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _388 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _390 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _392 = _390.w;
    float _412 = fma(_287, cbSceneParam._m0[5u].z, fma(_286, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _285));
    float _415 = fma(_287, cbSceneParam._m0[6u].z, fma(_286, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _285));
    float _418 = fma(_287, cbSceneParam._m0[7u].z, fma(_286, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _285));
    vec4 _420 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _431 = (((_420.y - _288) + (_420.w * _288)) * cbMtdParam._m0[3u].x) + _288;
    uint _444 = uint(roundEven(NORMAL.w)) * 13u;
    uint _446 = _444 + 9u;
    uint _447 = _446 + uint(cbMatDynParam._m0[0u].w);
    float _453 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0)))) * cbInstanceData._m0[_447].x;
    float _454 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0)))) * cbInstanceData._m0[_447].y;
    float _455 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0)))) * cbInstanceData._m0[_447].z;
    float _3414 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _456 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
    float _3425 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _457 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
    float _3436 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _458 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
    vec4 _459 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _464 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _470 = cbMtdParam._m0[3u].x * _464.x;
    float _483 = (cbMtdParam._m0[3u].x * (((_456 * _392) - _456) + _459.x)) + _456;
    float _484 = (cbMtdParam._m0[3u].x * (((_457 * _392) - _457) + _459.y)) + _457;
    float _485 = (cbMtdParam._m0[3u].x * (((_458 * _392) - _458) + _459.z)) + _458;
    float _486 = 1.0 - _470;
    float _487 = _483 * _486;
    float _488 = _484 * _486;
    float _489 = _485 * _486;
    float _494 = (_483 + (-0.039999999105930328369140625)) * _470;
    float _495 = (_484 + (-0.039999999105930328369140625)) * _470;
    float _496 = (_485 + (-0.039999999105930328369140625)) * _470;
    float _497 = _494 + 0.039999999105930328369140625;
    float _499 = _495 + 0.039999999105930328369140625;
    float _500 = _496 + 0.039999999105930328369140625;
    vec4 _509 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _387, cbSceneParam._m0[86u].y * _388));
    float _512 = _509.x * TEXCOORD_4;
    float _513 = dot(vec3(_285, _286, _287), vec3(_366, _367, _368));
    float _516 = _513 * 2.0;
    float _520 = (_516 * _285) - _366;
    float _521 = (_516 * _286) - _367;
    float _522 = (_516 * _287) - _368;
    float _526 = abs(dot(vec3(_366, _367, _368), vec3(_285, _286, _287)));
    float _3447 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _528 = sqrt(_431);
    float _541 = exp2((_528 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_528 * 3.0));
    float _547 = (1.0 - _541) * ((_528 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _548 = _541 * _528;
    float _576 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _580 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _584 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _915;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _640 = fma(_584, cbModelParam._m0[26u].z, fma(_580, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _576));
        float _644 = fma(_584, cbModelParam._m0[27u].z, fma(_580, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _576));
        float _648 = fma(_584, cbModelParam._m0[28u].z, fma(_580, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _576));
        float _673 = _576 + _285;
        float _674 = _580 + _286;
        float _675 = _584 + _287;
        float _685 = fma(_675, cbModelParam._m0[26u].z, fma(_674, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _673)) - _640;
        float _686 = fma(_675, cbModelParam._m0[27u].z, fma(_674, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _673)) - _644;
        float _687 = fma(_675, cbModelParam._m0[28u].z, fma(_674, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _673)) - _648;
        float _691 = inversesqrt(dot(vec3(_685, _686, _687), vec3(_685, _686, _687)));
        float _704 = ((_691 * _685) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_640 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _705 = ((_691 * _686) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_644 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _706 = ((_691 * _687) / cbModelParam._m0[34u].z) + ((((((_648 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _709 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_704, _705, _706), 0.0);
        vec4 _716 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_704, _705, _706), 0.0);
        vec4 _723 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_704, _705, _706), 0.0);
        vec4 _730 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_704, _705, _706), 0.0);
        float _743 = exp2((_709.w + (-0.5)) * 20.0) * 2.0;
        float _744 = _743 * (_709.x + (-0.5));
        float _745 = _743 * (_709.y + (-0.5));
        float _746 = _743 * (_709.z + (-0.5));
        float _753 = exp2((_716.w + (-0.5)) * 20.0) * 2.0;
        float _754 = _753 * (_716.x + (-0.5));
        float _755 = _753 * (_716.y + (-0.5));
        float _756 = _753 * (_716.z + (-0.5));
        float _763 = exp2((_723.w + (-0.5)) * 20.0) * 2.0;
        float _764 = _763 * (_723.x + (-0.5));
        float _765 = _763 * (_723.y + (-0.5));
        float _766 = _763 * (_723.z + (-0.5));
        float _773 = exp2((_730.w + (-0.5)) * 20.0) * 2.0;
        float _774 = _773 * (_730.x + (-0.5));
        float _775 = _773 * (_730.y + (-0.5));
        float _776 = _773 * (_730.z + (-0.5));
        float _777 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _778 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _779 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _780 = _744 * 0.5;
        float _781 = _754 * 0.5;
        float _782 = _764 * 0.5;
        float _783 = dot(vec3(_780, _781, _782), vec3(_780, _781, _782));
        float _788 = (_783 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_783);
        float _797 = (dot(vec3(_285, _286, _287), vec3(_788 * _780, _788 * _781, _788 * _782)) + 1.0) * 0.5;
        float _3473 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _807 = sqrt(((_781 * _781) + (_780 * _780)) + (_782 * _782)) / (_777 + 9.9999997473787516355514526367188e-06);
        float _3484 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _808 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
        float _809 = _808 * 2.0;
        float _813 = (1.0 - _808) / (_808 + 1.0);
        float _3495 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _814 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
        float _823 = ((((1.0 - _814) * (_809 + 2.0)) * exp2(log2(isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0))) * (_809 + 1.0))) + _814) * _777;
        float _824 = _745 * 0.5;
        float _825 = _755 * 0.5;
        float _826 = _765 * 0.5;
        float _827 = dot(vec3(_824, _825, _826), vec3(_824, _825, _826));
        float _832 = (_827 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_827);
        float _840 = (dot(vec3(_285, _286, _287), vec3(_832 * _824, _832 * _825, _832 * _826)) + 1.0) * 0.5;
        float _3506 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _849 = sqrt(((_825 * _825) + (_824 * _824)) + (_826 * _826)) / (_778 + 9.9999997473787516355514526367188e-06);
        float _3517 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _850 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
        float _851 = _850 * 2.0;
        float _855 = (1.0 - _850) / (_850 + 1.0);
        float _3528 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _856 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
        float _865 = ((((1.0 - _856) * (_851 + 2.0)) * exp2(log2(isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))) * (_851 + 1.0))) + _856) * _778;
        float _866 = _746 * 0.5;
        float _867 = _756 * 0.5;
        float _868 = _766 * 0.5;
        float _869 = dot(vec3(_866, _867, _868), vec3(_866, _867, _868));
        float _874 = (_869 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_869);
        float _882 = (dot(vec3(_285, _286, _287), vec3(_874 * _866, _874 * _867, _874 * _868)) + 1.0) * 0.5;
        float _3539 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _891 = sqrt(((_867 * _867) + (_866 * _866)) + (_868 * _868)) / (_779 + 9.9999997473787516355514526367188e-06);
        float _3550 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _892 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _893 = _892 * 2.0;
        float _897 = (1.0 - _892) / (_892 + 1.0);
        float _3561 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _898 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _907 = ((((1.0 - _898) * (_893 + 2.0)) * exp2(log2(isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0))) * (_893 + 1.0))) + _898) * _779;
        _915 = _746;
        _917 = _745;
        _918 = _744;
        _919 = _756;
        _920 = _755;
        _921 = _754;
        _922 = _766;
        _923 = _765;
        _924 = _764;
        _925 = _779;
        _926 = _778;
        _927 = _777;
        _928 = cbModelParam._m0[36u].z * (isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0)));
        _929 = cbModelParam._m0[36u].z * (isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0)));
        _930 = cbModelParam._m0[36u].z * (isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0)));
    }
    else
    {
        _915 = _916;
        _917 = _916;
        _918 = _916;
        _919 = _916;
        _920 = _916;
        _921 = _916;
        _922 = _916;
        _923 = _916;
        _924 = _916;
        _925 = _916;
        _926 = _916;
        _927 = _916;
        _928 = 0.0;
        _929 = 0.0;
        _930 = 0.0;
    }
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _959 = fma(_584, cbModelParam._m0[30u].z, fma(_580, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _576));
        float _963 = fma(_584, cbModelParam._m0[31u].z, fma(_580, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _576));
        float _967 = fma(_584, cbModelParam._m0[32u].z, fma(_580, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _576));
        float _990 = _576 + _285;
        float _991 = _580 + _286;
        float _992 = _584 + _287;
        float _1002 = fma(_992, cbModelParam._m0[30u].z, fma(_991, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _990)) - _959;
        float _1003 = fma(_992, cbModelParam._m0[31u].z, fma(_991, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _990)) - _963;
        float _1004 = fma(_992, cbModelParam._m0[32u].z, fma(_991, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _990)) - _967;
        float _1008 = inversesqrt(dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004)));
        float _1021 = ((_1008 * _1002) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_959 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1022 = ((_1008 * _1003) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_963 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1023 = ((_1008 * _1004) / cbModelParam._m0[35u].z) + ((((((_967 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1021, _1022, _1023), 0.0);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1021, _1022, _1023), 0.0);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1021, _1022, _1023), 0.0);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1021, _1022, _1023), 0.0);
        float _1058 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1025.x + (-0.5));
        float _1060 = _1058 * (_1025.y + (-0.5));
        float _1061 = _1058 * (_1025.z + (-0.5));
        float _1068 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1032.x + (-0.5));
        float _1070 = _1068 * (_1032.y + (-0.5));
        float _1071 = _1068 * (_1032.z + (-0.5));
        float _1078 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1039.x + (-0.5));
        float _1080 = _1078 * (_1039.y + (-0.5));
        float _1081 = _1078 * (_1039.z + (-0.5));
        float _1088 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1089 = _1088 * (_1046.x + (-0.5));
        float _1090 = _1088 * (_1046.y + (-0.5));
        float _1091 = _1088 * (_1046.z + (-0.5));
        float _1092 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1093 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1094 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1095 = _1059 * 0.5;
        float _1096 = _1069 * 0.5;
        float _1097 = _1079 * 0.5;
        float _1098 = dot(vec3(_1095, _1096, _1097), vec3(_1095, _1096, _1097));
        float _1103 = (_1098 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1098);
        float _1111 = (dot(vec3(_285, _286, _287), vec3(_1103 * _1095, _1103 * _1096, _1103 * _1097)) + 1.0) * 0.5;
        float _3602 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1120 = sqrt(((_1096 * _1096) + (_1095 * _1095)) + (_1097 * _1097)) / (_1092 + 9.9999997473787516355514526367188e-06);
        float _3613 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _1122 = _1121 * 2.0;
        float _1126 = (1.0 - _1121) / (_1121 + 1.0);
        float _3624 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _1136 = ((((1.0 - _1127) * (_1122 + 2.0)) * exp2(log2(isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))) * (_1122 + 1.0))) + _1127) * _1092;
        float _1137 = _1060 * 0.5;
        float _1138 = _1070 * 0.5;
        float _1139 = _1080 * 0.5;
        float _1140 = dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139));
        float _1145 = (_1140 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1140);
        float _1153 = (dot(vec3(_285, _286, _287), vec3(_1145 * _1137, _1145 * _1138, _1145 * _1139)) + 1.0) * 0.5;
        float _3635 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1162 = sqrt(((_1138 * _1138) + (_1137 * _1137)) + (_1139 * _1139)) / (_1093 + 9.9999997473787516355514526367188e-06);
        float _3646 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _1164 = _1163 * 2.0;
        float _1168 = (1.0 - _1163) / (_1163 + 1.0);
        float _3657 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _1178 = ((((1.0 - _1169) * (_1164 + 2.0)) * exp2(log2(isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))) * (_1164 + 1.0))) + _1169) * _1093;
        float _1179 = _1061 * 0.5;
        float _1180 = _1071 * 0.5;
        float _1181 = _1081 * 0.5;
        float _1182 = dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181));
        float _1187 = (_1182 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1182);
        float _1195 = (dot(vec3(_285, _286, _287), vec3(_1187 * _1179, _1187 * _1180, _1187 * _1181)) + 1.0) * 0.5;
        float _3668 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1204 = sqrt(((_1180 * _1180) + (_1179 * _1179)) + (_1181 * _1181)) / (_1094 + 9.9999997473787516355514526367188e-06);
        float _3679 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _1206 = _1205 * 2.0;
        float _1210 = (1.0 - _1205) / (_1205 + 1.0);
        float _3690 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _1220 = ((((1.0 - _1211) * (_1206 + 2.0)) * exp2(log2(isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) * (_1206 + 1.0))) + _1211) * _1094;
        _1228 = _1061;
        _1229 = _1060;
        _1230 = _1059;
        _1231 = _1071;
        _1232 = _1070;
        _1233 = _1069;
        _1234 = _1081;
        _1235 = _1080;
        _1236 = _1079;
        _1237 = _1094;
        _1238 = _1093;
        _1239 = _1092;
        _1240 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0)));
        _1241 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0)));
        _1242 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0)));
    }
    else
    {
        _1228 = _916;
        _1229 = _916;
        _1230 = _916;
        _1231 = _916;
        _1232 = _916;
        _1233 = _916;
        _1234 = _916;
        _1235 = _916;
        _1236 = _916;
        _1237 = _916;
        _1238 = _916;
        _1239 = _916;
        _1240 = 0.0;
        _1241 = 0.0;
        _1242 = 0.0;
    }
    float _1252 = (cbModelParam._m0[1u].x * (_1240 - _928)) + _928;
    float _1253 = (cbModelParam._m0[1u].x * (_1241 - _929)) + _929;
    float _1254 = (cbModelParam._m0[1u].x * (_1242 - _930)) + _930;
    float _1275 = fma(_1254, cbSceneParam._m0[89u].z, fma(_1253, cbSceneParam._m0[89u].y, _1252 * cbSceneParam._m0[89u].x));
    float _1278 = fma(_1254, cbSceneParam._m0[90u].z, fma(_1253, cbSceneParam._m0[90u].y, _1252 * cbSceneParam._m0[90u].x));
    float _1281 = fma(_1254, cbSceneParam._m0[91u].z, fma(_1253, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1252));
    float _1296 = _520 * 0.5;
    float _1297 = _521 * 0.5;
    float _1298 = _522 * 0.5;
    float _1299 = dot(vec4(_1296, _1297, _1298, 1.0), vec4(_1230, _1233, _1236, _1239));
    float _1302 = dot(vec4(_1296, _1297, _1298, 1.0), vec4(_1229, _1232, _1235, _1238));
    float _1305 = dot(vec4(_1296, _1297, _1298, 1.0), vec4(_1228, _1231, _1234, _1237));
    float _1339;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1312 = dot(vec4(_1296, _1297, _1298, 1.0), vec4(_915, _919, _922, _925));
        float _1316 = dot(vec4(_1296, _1297, _1298, 1.0), vec4(_917, _920, _923, _926));
        float _1320 = dot(vec4(_1296, _1297, _1298, 1.0), vec4(_918, _921, _924, _927));
        float _1327 = dot(vec4(cbModelParam._m0[39u]), vec4(_1296, _1297, _1298, 1.0));
        _1339 = dot(vec3(isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)), isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)), isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1327) ? 0.0 : (isnan(0.0) ? _1327 : max(0.0, _1327))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1339 = 1.0;
    }
    float _1350;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1341 = dot(vec4(cbModelParam._m0[40u]), vec4(_1296, _1297, _1298, 1.0));
        _1350 = dot(vec3(isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)), isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)), isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1341) ? 0.0 : (isnan(0.0) ? _1341 : max(0.0, _1341))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1350 = 1.0;
    }
    float _1354 = (_1350 * cbModelParam._m0[1u].x) + (_1339 * (1.0 - cbModelParam._m0[1u].x));
    float _1364 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _431);
    float _1365 = isnan(_1364) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1364 : min(cbModelParam._m0[25u].z, _1364));
    float _1447;
    float _1449;
    float _1451;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1414 = fma(_584, cbModelParam._m0[13u].z, fma(_580, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _576)) + cbModelParam._m0[13u].w;
        float _1418 = fma(_584, cbModelParam._m0[14u].z, fma(_580, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _576)) + cbModelParam._m0[14u].w;
        float _1422 = fma(_584, cbModelParam._m0[15u].z, fma(_580, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _576)) + cbModelParam._m0[15u].w;
        float _1425 = fma(_522, cbModelParam._m0[13u].z, fma(_521, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _520));
        float _1428 = fma(_522, cbModelParam._m0[14u].z, fma(_521, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _520));
        float _1431 = fma(_522, cbModelParam._m0[15u].z, fma(_521, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _520));
        float _1459;
        if (_1425 > 0.0)
        {
            _1459 = abs((1.0 - _1414) / _1425);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1425 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1414 + 1.0) / _1425);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1459 = frontier_phi_17_15_ladder;
        }
        float _1667;
        if (_1428 > 0.0)
        {
            _1667 = abs((1.0 - _1418) / _1428);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1428 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1418 + 1.0) / _1428);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1667 = frontier_phi_26_22_ladder;
        }
        float _1921;
        if (_1431 > 0.0)
        {
            _1921 = abs((1.0 - _1422) / _1431);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1431 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1422 + 1.0) / _1431);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1921 = frontier_phi_38_33_ladder;
        }
        float _1923 = isnan(_1667) ? _1459 : (isnan(_1459) ? _1667 : min(_1459, _1667));
        float _1924 = isnan(_1921) ? _1923 : (isnan(_1923) ? _1921 : min(_1923, _1921));
        float _1928 = (_1924 * _1425) + _1414;
        float _1929 = (_1924 * _1428) + _1418;
        float _1930 = (_1924 * _1431) + _1422;
        float _1931 = _1924 * 9.9999997473787516355514526367188e-05;
        float _1933 = (-1.0) - _1931;
        float _1935 = _1931 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1930 > _1935) || ((_1930 < _1933) || ((_1929 > _1935) || ((_1929 < _1933) || ((_1928 < _1933) || (_1928 > _1935))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2058 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1930, cbModelParam._m0[9u].z, fma(_1929, cbModelParam._m0[9u].y, _1928 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1930, cbModelParam._m0[10u].z, fma(_1929, cbModelParam._m0[10u].y, _1928 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1930, cbModelParam._m0[11u].z, fma(_1929, cbModelParam._m0[11u].y, _1928 * cbModelParam._m0[11u].x))), _1365);
            frontier_phi_16_38_ladder = _2058.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2058.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2058.x * cbModelParam._m0[1u].y;
        }
        _1447 = frontier_phi_16_38_ladder_2;
        _1449 = frontier_phi_16_38_ladder_1;
        _1451 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1435 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_520, _521, _522), _1365);
        _1447 = _1435.x * cbModelParam._m0[1u].y;
        _1449 = _1435.y * cbModelParam._m0[1u].y;
        _1451 = _1435.z * cbModelParam._m0[1u].y;
    }
    float _1455 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _431);
    float _1456 = isnan(_1455) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1455 : min(cbModelParam._m0[25u].w, _1455));
    float _1549;
    float _1551;
    float _1553;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1513 = fma(_584, cbModelParam._m0[21u].z, fma(_580, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _576)) + cbModelParam._m0[21u].w;
        float _1517 = fma(_584, cbModelParam._m0[22u].z, fma(_580, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _576)) + cbModelParam._m0[22u].w;
        float _1521 = fma(_584, cbModelParam._m0[23u].z, fma(_580, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _576)) + cbModelParam._m0[23u].w;
        float _1524 = fma(_522, cbModelParam._m0[21u].z, fma(_521, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _520));
        float _1527 = fma(_522, cbModelParam._m0[22u].z, fma(_521, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _520));
        float _1530 = fma(_522, cbModelParam._m0[23u].z, fma(_521, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _520));
        float _1672;
        if (_1524 > 0.0)
        {
            _1672 = abs((1.0 - _1513) / _1524);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1524 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1513 + 1.0) / _1524);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1672 = frontier_phi_28_24_ladder;
        }
        float _1948;
        if (_1527 > 0.0)
        {
            _1948 = abs((1.0 - _1517) / _1527);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1527 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1517 + 1.0) / _1527);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1948 = frontier_phi_40_35_ladder;
        }
        float _2161;
        if (_1530 > 0.0)
        {
            _2161 = abs((1.0 - _1521) / _1530);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1530 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1521 + 1.0) / _1530);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2161 = frontier_phi_49_46_ladder;
        }
        float _2163 = isnan(_1948) ? _1672 : (isnan(_1672) ? _1948 : min(_1672, _1948));
        float _2164 = isnan(_2161) ? _2163 : (isnan(_2163) ? _2161 : min(_2163, _2161));
        float _2168 = (_2164 * _1524) + _1513;
        float _2169 = (_2164 * _1527) + _1517;
        float _2170 = (_2164 * _1530) + _1521;
        float _2171 = _2164 * 9.9999997473787516355514526367188e-05;
        float _2172 = (-1.0) - _2171;
        float _2174 = _2171 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2170 > _2174) || ((_2170 < _2172) || ((_2169 > _2174) || ((_2169 < _2172) || ((_2168 < _2172) || (_2168 > _2174))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2387 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2170, cbModelParam._m0[17u].z, fma(_2169, cbModelParam._m0[17u].y, _2168 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2170, cbModelParam._m0[18u].z, fma(_2169, cbModelParam._m0[18u].y, _2168 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2170, cbModelParam._m0[19u].z, fma(_2169, cbModelParam._m0[19u].y, _2168 * cbModelParam._m0[19u].x))), _1456);
            frontier_phi_25_49_ladder = _2387.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2387.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2387.x * cbModelParam._m0[1u].z;
        }
        _1549 = frontier_phi_25_49_ladder_2;
        _1551 = frontier_phi_25_49_ladder_1;
        _1553 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1533 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_520, _521, _522), _1456);
        _1549 = _1533.x * cbModelParam._m0[1u].z;
        _1551 = _1533.y * cbModelParam._m0[1u].z;
        _1553 = _1533.z * cbModelParam._m0[1u].z;
    }
    float _1566 = (((_547 * _497) + _548) * _512) * ((cbModelParam._m0[1u].w * (_1549 - _1447)) + _1447);
    float _1568 = (((_547 * _499) + _548) * _512) * ((cbModelParam._m0[1u].w * (_1551 - _1449)) + _1449);
    float _1570 = (((_547 * _500) + _548) * _512) * ((cbModelParam._m0[1u].w * (_1553 - _1451)) + _1451);
    float _1573 = fma(_1570, cbSceneParam._m0[89u].z, fma(_1568, cbSceneParam._m0[89u].y, _1566 * cbSceneParam._m0[89u].x));
    float _1576 = fma(_1570, cbSceneParam._m0[90u].z, fma(_1568, cbSceneParam._m0[90u].y, _1566 * cbSceneParam._m0[90u].x));
    float _1579 = fma(_1570, cbSceneParam._m0[91u].z, fma(_1568, cbSceneParam._m0[91u].y, _1566 * cbSceneParam._m0[91u].x));
    uvec4 _1589 = floatBitsToUint(cbInstanceData._m0[_444 + 5u]);
    uint _1591 = _1589.x * 14u;
    uint _1592 = _1591 + 13u;
    float _1599 = _512 + (-1.0);
    float _1604 = (cbLight._m0[_1592].x * _1599) + 1.0;
    float _1605 = (cbLight._m0[_1592].y * _1599) + 1.0;
    float _1606 = (cbLight._m0[_1592].z * _1599) + 1.0;
    float _1607 = (cbLight._m0[_1592].w * _1599) + 1.0;
    uint _1608 = _1591 + 5u;
    float _1614 = isnan(1.0) ? _1605 : (isnan(_1605) ? 1.0 : min(_1605, 1.0));
    uint _1618 = _1591 + 4u;
    float _1625 = isnan(1.0) ? _1604 : (isnan(_1604) ? 1.0 : min(_1604, 1.0));
    uint _1629 = _1591 | 1u;
    float _1640 = dot(vec3(cbLight._m0[_1591].xyz), vec3(_285, _286, _287));
    float _1643 = dot(vec3(cbLight._m0[_1629].xyz), vec3(_285, _286, _287));
    float _3826 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
    float _3837 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
    float _1648 = (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * 0.3183098733425140380859375;
    float _1650 = (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * 0.3183098733425140380859375;
    float _1657 = ((cbLight._m0[_1608].x * _1614) * _1650) + ((cbLight._m0[_1618].x * _1625) * _1648);
    float _1658 = ((_1614 * cbLight._m0[_1608].y) * _1650) + ((_1625 * cbLight._m0[_1618].y) * _1648);
    float _1659 = ((_1614 * cbLight._m0[_1608].z) * _1650) + ((_1625 * cbLight._m0[_1618].z) * _1648);
    uvec4 _1664 = floatBitsToUint(cbLight._m0[_1591 + 12u]);
    bool _1666 = _1664.x == 0u;
    float _1677;
    float _1679;
    float _1681;
    if (_1666)
    {
        _1677 = _1657;
        _1679 = _1658;
        _1681 = _1659;
    }
    else
    {
        uint _1685 = _1591 + 6u;
        float _1701 = (dot(vec3(cbLight._m0[_1591 + 2u].xyz), vec3(_285, _286, _287)) * 0.5) + 0.5;
        float _1702 = _1701 * _1701;
        float _3848 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1704 = isnan(1.0) ? _1606 : (isnan(_1606) ? 1.0 : min(_1606, 1.0));
        _1677 = (((cbLight._m0[_1685].x * 0.3183098733425140380859375) * _1703) * _1704) + _1657;
        _1679 = (((cbLight._m0[_1685].y * 0.3183098733425140380859375) * _1703) * _1704) + _1658;
        _1681 = (((cbLight._m0[_1685].z * 0.3183098733425140380859375) * _1703) * _1704) + _1659;
    }
    bool _1684 = _1664.y == 0u;
    float _1722;
    float _1724;
    float _1726;
    if (_1684)
    {
        _1722 = _1677;
        _1724 = _1679;
        _1726 = _1681;
    }
    else
    {
        uint _1892 = _1591 + 7u;
        float _1908 = (dot(vec3(cbLight._m0[_1591 + 3u].xyz), vec3(_285, _286, _287)) * 0.5) + 0.5;
        float _1909 = _1908 * _1908;
        float _3864 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
        float _1910 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1911 = isnan(1.0) ? _1607 : (isnan(_1607) ? 1.0 : min(_1607, 1.0));
        _1722 = (((cbLight._m0[_1892].x * 0.3183098733425140380859375) * _1910) * _1911) + _1677;
        _1724 = (((cbLight._m0[_1892].y * 0.3183098733425140380859375) * _1910) * _1911) + _1679;
        _1726 = (((cbLight._m0[_1892].z * 0.3183098733425140380859375) * _1910) * _1911) + _1681;
    }
    uint _1729 = _1591 + 8u;
    float _1742 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1591].w)) * _431) * 0.949999988079071044921875);
    float _1743 = _1742 * _1742;
    float _1744 = cbLight._m0[_1591].x + _366;
    float _1745 = cbLight._m0[_1591].y + _367;
    float _1746 = cbLight._m0[_1591].z + _368;
    float _1750 = inversesqrt(dot(vec3(_1744, _1745, _1746), vec3(_1744, _1745, _1746)));
    float _1751 = _1750 * _1744;
    float _1752 = _1750 * _1745;
    float _1753 = _1750 * _1746;
    float _1754 = dot(vec3(_285, _286, _287), vec3(cbLight._m0[_1591].xyz));
    float _3880 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
    float _1757 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    float _3891 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _1758 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _1759 = dot(vec3(_285, _286, _287), vec3(_1751, _1752, _1753));
    float _3902 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
    float _1762 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
    float _1763 = dot(vec3(cbLight._m0[_1591].xyz), vec3(_1751, _1752, _1753));
    float _3913 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
    float _1767 = _1743 * _1743;
    float _1771 = ((_1762 * _1762) * (_1767 + (-1.0))) + 1.0;
    float _1779 = exp2(log2(1.0 - (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0)))) * 5.0);
    float _1780 = 0.959999978542327880859375 - _494;
    float _1782 = 0.959999978542327880859375 - _495;
    float _1783 = 0.959999978542327880859375 - _496;
    float _1790 = 1.0 - _1743;
    float _1801 = (0.5 / (((_1758 * ((_1757 * _1790) + _1743)) + 9.9999999392252902907785028219223e-09) + (((_1758 * _1790) + _1743) * _1757))) * _1757;
    float _3924 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _1803 = (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (_1767 / ((_1771 * _1771) * 3.141590118408203125));
    uint _1814 = _1591 + 9u;
    float _1825 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1629].w)) * _431) * 0.949999988079071044921875);
    float _1826 = _1825 * _1825;
    float _1827 = cbLight._m0[_1629].x + _366;
    float _1828 = cbLight._m0[_1629].y + _367;
    float _1829 = cbLight._m0[_1629].z + _368;
    float _1833 = inversesqrt(dot(vec3(_1827, _1828, _1829), vec3(_1827, _1828, _1829)));
    float _1834 = _1833 * _1827;
    float _1835 = _1833 * _1828;
    float _1836 = _1833 * _1829;
    float _1837 = dot(vec3(_285, _286, _287), vec3(cbLight._m0[_1629].xyz));
    float _3935 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1840 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _1841 = dot(vec3(_285, _286, _287), vec3(_1834, _1835, _1836));
    float _3946 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
    float _1844 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _1845 = dot(vec3(cbLight._m0[_1629].xyz), vec3(_1834, _1835, _1836));
    float _3957 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _1849 = _1826 * _1826;
    float _1853 = ((_1844 * _1844) * (_1849 + (-1.0))) + 1.0;
    float _1860 = exp2(log2(1.0 - (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0)))) * 5.0);
    float _1867 = 1.0 - _1826;
    float _1877 = (0.5 / (((_1758 * ((_1840 * _1867) + _1826)) + 9.9999999392252902907785028219223e-09) + (((_1758 * _1867) + _1826) * _1840))) * _1840;
    float _3968 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
    float _1879 = (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * (_1849 / ((_1853 * _1853) * 3.141590118408203125));
    float _1889 = (((((_1860 * _1780) + _497) * cbLight._m0[_1814].x) * _1879) * _1614) + (((((_1779 * _1780) + _497) * cbLight._m0[_1729].x) * _1803) * _1625);
    float _1890 = (((((_1860 * _1782) + _499) * cbLight._m0[_1814].y) * _1879) * _1614) + (((((_1779 * _1782) + _499) * cbLight._m0[_1729].y) * _1803) * _1625);
    float _1891 = (((((_1860 * _1783) + _500) * cbLight._m0[_1814].z) * _1879) * _1614) + (((((_1779 * _1783) + _500) * cbLight._m0[_1729].z) * _1803) * _1625);
    float _1953;
    float _1955;
    float _1957;
    if (_1666)
    {
        _1953 = _1889;
        _1955 = _1890;
        _1957 = _1891;
    }
    else
    {
        uint _1959 = _1591 + 2u;
        uint _1963 = _1591 + 10u;
        float _1977 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1959].w)) * _431) * 0.949999988079071044921875);
        float _1978 = _1977 * _1977;
        float _1979 = cbLight._m0[_1959].x + _366;
        float _1980 = cbLight._m0[_1959].y + _367;
        float _1981 = cbLight._m0[_1959].z + _368;
        float _1985 = inversesqrt(dot(vec3(_1979, _1980, _1981), vec3(_1979, _1980, _1981)));
        float _1986 = _1985 * _1979;
        float _1987 = _1985 * _1980;
        float _1988 = _1985 * _1981;
        float _1989 = dot(vec3(_285, _286, _287), vec3(cbLight._m0[_1959].xyz));
        float _3979 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        float _1992 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1993 = dot(vec3(_285, _286, _287), vec3(_1986, _1987, _1988));
        float _3990 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
        float _1996 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1997 = dot(vec3(cbLight._m0[_1959].xyz), vec3(_1986, _1987, _1988));
        float _4001 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
        float _2001 = _1978 * _1978;
        float _2005 = ((_1996 * _1996) * (_2001 + (-1.0))) + 1.0;
        float _2012 = exp2(log2(1.0 - (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0)))) * 5.0);
        float _2019 = 1.0 - _1978;
        float _2029 = (0.5 / (((_1758 * ((_1992 * _2019) + _1978)) + 9.9999999392252902907785028219223e-09) + (((_1758 * _2019) + _1978) * _1992))) * _1992;
        float _4012 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
        float _2031 = (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_2001 / ((_2005 * _2005) * 3.141590118408203125));
        float _2032 = isnan(1.0) ? _1606 : (isnan(_1606) ? 1.0 : min(_1606, 1.0));
        _1953 = (((((_2012 * _1780) + _497) * cbLight._m0[_1963].x) * _2031) * _2032) + _1889;
        _1955 = (((((_2012 * _1782) + _499) * cbLight._m0[_1963].y) * _2031) * _2032) + _1890;
        _1957 = (((((_2012 * _1783) + _500) * cbLight._m0[_1963].z) * _2031) * _2032) + _1891;
    }
    float _2067;
    float _2069;
    float _2071;
    if (_1684)
    {
        _2067 = _1953;
        _2069 = _1955;
        _2071 = _1957;
    }
    else
    {
        uint _2078 = _1591 + 3u;
        uint _2082 = _1591 + 11u;
        float _2096 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2078].w)) * _431) * 0.949999988079071044921875);
        float _2097 = _2096 * _2096;
        float _2098 = cbLight._m0[_2078].x + _366;
        float _2099 = cbLight._m0[_2078].y + _367;
        float _2100 = cbLight._m0[_2078].z + _368;
        float _2104 = inversesqrt(dot(vec3(_2098, _2099, _2100), vec3(_2098, _2099, _2100)));
        float _2105 = _2104 * _2098;
        float _2106 = _2104 * _2099;
        float _2107 = _2104 * _2100;
        float _2108 = dot(vec3(_285, _286, _287), vec3(cbLight._m0[_2078].xyz));
        float _4028 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
        float _2111 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _2112 = dot(vec3(_285, _286, _287), vec3(_2105, _2106, _2107));
        float _4039 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
        float _2115 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _2116 = dot(vec3(cbLight._m0[_2078].xyz), vec3(_2105, _2106, _2107));
        float _4050 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
        float _2120 = _2097 * _2097;
        float _2124 = ((_2115 * _2115) * (_2120 + (-1.0))) + 1.0;
        float _2131 = exp2(log2(1.0 - (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0)))) * 5.0);
        float _2138 = 1.0 - _2097;
        float _2148 = (0.5 / (((_1758 * ((_2111 * _2138) + _2097)) + 9.9999999392252902907785028219223e-09) + (((_1758 * _2138) + _2097) * _2111))) * _2111;
        float _4061 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
        float _2150 = (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * (_2120 / ((_2124 * _2124) * 3.141590118408203125));
        float _2151 = isnan(1.0) ? _1607 : (isnan(_1607) ? 1.0 : min(_1607, 1.0));
        _2067 = (((((_2131 * _1780) + _497) * cbLight._m0[_2082].x) * _2150) * _2151) + _1953;
        _2069 = (((((_2131 * _1782) + _499) * cbLight._m0[_2082].y) * _2150) * _2151) + _1955;
        _2071 = (((((_2131 * _1783) + _500) * cbLight._m0[_2082].z) * _2150) * _2151) + _1957;
    }
    float _2286;
    float _2288;
    float _2290;
    float _2292;
    float _2294;
    float _2296;
    if (_1589.y == 0u)
    {
        float _2226 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2227 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2226;
        float _2228 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2226;
        float _2229 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2226;
        uvec4 _2241 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2242 = _2241.x;
        uint _2253 = uint((float(_2241.y) * floor(float(uint(cbSceneParam._m0[85u].y * _388) / _2242))) + floor(float(uint(cbSceneParam._m0[85u].x * _387) / _2242)));
        float _2263 = (log2(_2229 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2264 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
        uint _2267 = uint(isnan(14.0) ? _2264 : (isnan(_2264) ? 14.0 : min(_2264, 14.0)));
        uvec4 _2272 = texelFetch(g_lightClusterGridBuffer, int(((_2267 << 2u) + (_2253 << 6u)) >> 2u));
        uint _2273 = _2272.x;
        uint _2274 = _2241.z;
        float _2392;
        float _2394;
        float _2396;
        float _2398;
        float _2400;
        float _2402;
        if (((((1u << ((_2274 >> 4u) & 15u)) + 4294967295u) & _2273) == 0u) || ((_2274 & 240u) == 0u))
        {
            _2392 = 0.0;
            _2394 = 0.0;
            _2396 = 0.0;
            _2398 = 0.0;
            _2400 = 0.0;
            _2402 = 0.0;
        }
        else
        {
            float _2393;
            float _2395;
            float _2397;
            float _2399;
            float _2401;
            float _2403;
            float _2545 = 0.0;
            float _2546 = 0.0;
            float _2547 = 0.0;
            float _2548 = 0.0;
            float _2549 = 0.0;
            float _2550 = 0.0;
            uint _2551 = 0u;
            uint _2560;
            bool _2561;
            for (;;)
            {
                _2560 = texelFetch(g_lightClassification, int((((_2267 << 5u) + (_2253 << 9u)) + (_2551 << 2u)) >> 2u)).x;
                _2561 = _2560 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2561)
                {
                    frontier_phi_66_pred = _2545;
                    frontier_phi_66_pred_1 = _2550;
                    frontier_phi_66_pred_2 = _2549;
                    frontier_phi_66_pred_3 = _2548;
                    frontier_phi_66_pred_4 = _2547;
                    frontier_phi_66_pred_5 = _2546;
                }
                else
                {
                    float _2690;
                    float _2691;
                    float _2692;
                    float _2693;
                    float _2694;
                    float _2695;
                    uint _2696;
                    _2690 = _2545;
                    _2691 = _2546;
                    _2692 = _2547;
                    _2693 = _2548;
                    _2694 = _2549;
                    _2695 = _2550;
                    _2696 = _2560;
                    float _2617;
                    float _2618;
                    float _2619;
                    float _2620;
                    float _2621;
                    float _2622;
                    for (;;)
                    {
                        uint _2700 = uint(findLSB(_2696)) + (_2551 << 5u);
                        uint _2697 = (_2696 + 4294967295u) & _2696;
                        uint _2702 = _2700 * 48u;
                        vec4 _2716 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2702)).x, texelFetch(g_PointLightRenderingBuffer, int(_2702 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2702 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2702 + 3u)).x));
                        uint _2722 = (_2700 * 48u) + 4u;
                        vec4 _2735 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2722)).x, texelFetch(g_PointLightRenderingBuffer, int(_2722 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2722 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2722 + 3u)).x));
                        uint _2741 = (_2700 * 48u) + 8u;
                        vec3 _2752 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2741)).x, texelFetch(g_PointLightRenderingBuffer, int(_2741 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2741 + 2u)).x));
                        float _2756 = _2716.x - _2227;
                        float _2757 = _2716.y - _2228;
                        float _2758 = _2716.z - _2229;
                        float _2759 = dot(vec3(_2756, _2757, _2758), vec3(_2756, _2757, _2758));
                        float _2762 = inversesqrt(_2759);
                        float _2763 = _2762 * _2756;
                        float _2764 = _2762 * _2757;
                        float _2765 = _2762 * _2758;
                        float _2766 = dot(vec3(_412, _415, _418), vec3(_2763, _2764, _2765));
                        float _2771 = 1.0 - (_2759 * _2716.w);
                        float _4087 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
                        float _2772 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
                        float _2773 = sqrt(_2759) * _2735.w;
                        float _2776 = 1.39999997615814208984375 / (_2773 + 1.39999997615814208984375);
                        float _2777 = _2776 * _2776;
                        float _2780 = ((1.0 - _2777) * _2766) + _2777;
                        float _2783 = _2773 * _2773;
                        float _2787 = ((isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0))) * _2772) / ((_2783 * 0.699999988079071044921875) + 1.0);
                        float _2791 = (-0.0) - _2227;
                        float _2792 = (-0.0) - _2228;
                        float _2793 = (-0.0) - _2229;
                        float _2797 = inversesqrt(dot(vec3(_2791, _2792, _2793), vec3(_2791, _2792, _2793)));
                        float _2798 = _2797 * _2791;
                        float _2799 = _2797 * _2792;
                        float _2800 = _2797 * _2793;
                        float _2808 = exp2(log2(1.0 / ((_2783 * 3.5) + 5.0)) * 0.25);
                        float _2809 = 1.0 - _528;
                        float _2816 = sqrt(1.0 - ((1.0 - (_2809 * _2809)) * (1.0 - (_2808 * _2808))));
                        float _2817 = _2816 * _2816;
                        float _2818 = _2817 * _2817;
                        float _2819 = _2798 + _2763;
                        float _2820 = _2799 + _2764;
                        float _2821 = _2800 + _2765;
                        float _2825 = inversesqrt(dot(vec3(_2819, _2820, _2821), vec3(_2819, _2820, _2821)));
                        float _2829 = dot(vec3(_412, _415, _418), vec3(_2798, _2799, _2800));
                        float _4103 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
                        float _2832 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
                        float _2833 = dot(vec3(_412, _415, _418), vec3(_2825 * _2819, _2825 * _2820, _2825 * _2821));
                        float _4114 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
                        float _2836 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
                        float _2840 = ((_2836 * _2836) * (_2818 + (-1.0))) + 1.0;
                        float _2841 = _2776 * _2817;
                        float _2842 = _2841 * _2841;
                        float _2845 = ((1.0 - _2842) * _2766) + _2842;
                        float _4125 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
                        float _2846 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
                        float _2847 = 1.0 - _2817;
                        float _2857 = (0.5 / (((_2846 * ((_2832 * _2847) + _2817)) + 9.9999999392252902907785028219223e-09) + (((_2846 * _2847) + _2817) * _2832))) * _2846;
                        float _4136 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
                        float _2868 = (((_2818 * 3.1415927410125732421875) * (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0)))) / ((_2840 * _2840) * ((_2783 * 2.1991131305694580078125) + 3.141590118408203125))) * _2772;
                        _2620 = (_2787 * _2735.x) + _2693;
                        _2621 = (_2787 * _2735.y) + _2694;
                        _2622 = (_2787 * _2735.z) + _2695;
                        _2617 = (_2868 * _2752.x) + _2690;
                        _2618 = (_2868 * _2752.y) + _2691;
                        _2619 = (_2868 * _2752.z) + _2692;
                        if (_2697 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2690 = _2617;
                            _2691 = _2618;
                            _2692 = _2619;
                            _2693 = _2620;
                            _2694 = _2621;
                            _2695 = _2622;
                            _2696 = _2697;
                        }
                    }
                    frontier_phi_66_pred = _2617;
                    frontier_phi_66_pred_1 = _2622;
                    frontier_phi_66_pred_2 = _2621;
                    frontier_phi_66_pred_3 = _2620;
                    frontier_phi_66_pred_4 = _2619;
                    frontier_phi_66_pred_5 = _2618;
                }
                _2393 = frontier_phi_66_pred;
                _2403 = frontier_phi_66_pred_1;
                _2401 = frontier_phi_66_pred_2;
                _2399 = frontier_phi_66_pred_3;
                _2397 = frontier_phi_66_pred_4;
                _2395 = frontier_phi_66_pred_5;
                uint _2552 = _2551 + 1u;
                if (_2552 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2545 = _2393;
                    _2546 = _2395;
                    _2547 = _2397;
                    _2548 = _2399;
                    _2549 = _2401;
                    _2550 = _2403;
                    _2551 = _2552;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2392 = _2393;
            _2394 = _2395;
            _2396 = _2397;
            _2398 = _2399;
            _2400 = _2401;
            _2402 = _2403;
        }
        uvec4 _2406 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2407 = _2406.z;
        uint _2409 = (_2407 >> 8u) & 15u;
        float _2513;
        float _2515;
        float _2517;
        float _2519;
        float _2521;
        float _2523;
        if (((4294967295u << _2409) & _2273) == 0u)
        {
            _2513 = _2392;
            _2515 = _2394;
            _2517 = _2396;
            _2519 = _2398;
            _2521 = _2400;
            _2523 = _2402;
        }
        else
        {
            float _2538 = inversesqrt(dot(vec3(_2227, _2228, _2229), vec3(_2227, _2228, _2229)));
            float _2539 = _2538 * _2227;
            float _2540 = _2538 * _2228;
            float _2541 = _2538 * _2229;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2409 < ((_2407 >> 12u) & 15u))
            {
                float _2514;
                float _2516;
                float _2518;
                float _2520;
                float _2522;
                float _2524;
                float _2673 = _2392;
                float _2674 = _2394;
                float _2675 = _2396;
                float _2676 = _2398;
                float _2677 = _2400;
                float _2678 = _2402;
                uint _2679 = _2409;
                uint _2688;
                bool _2689;
                for (;;)
                {
                    _2688 = texelFetch(g_lightClassification, int((((_2267 << 5u) + (_2253 << 9u)) + (_2679 << 2u)) >> 2u)).x;
                    _2689 = _2688 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2689)
                    {
                        frontier_phi_77_pred = _2678;
                        frontier_phi_77_pred_1 = _2677;
                        frontier_phi_77_pred_2 = _2676;
                        frontier_phi_77_pred_3 = _2675;
                        frontier_phi_77_pred_4 = _2674;
                        frontier_phi_77_pred_5 = _2673;
                    }
                    else
                    {
                        float _2882;
                        float _2883;
                        float _2884;
                        float _2885;
                        float _2886;
                        float _2887;
                        float _3178;
                        float _3179;
                        float _3180;
                        float _3181;
                        float _3182;
                        float _3183;
                        float _2895 = _2673;
                        float _2896 = _2674;
                        float _2897 = _2675;
                        float _2898 = _2676;
                        float _2899 = _2677;
                        float _2900 = _2678;
                        uint _2901 = _2688;
                        uint _2902;
                        vec4 _2927;
                        float _2928;
                        vec4 _2943;
                        vec3 _2955;
                        vec4 _2971;
                        vec4 _2987;
                        float _3034;
                        bool _3035;
                        for (;;)
                        {
                            uint _2912 = ((_2679 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2901));
                            _2902 = (_2901 + 4294967295u) & _2901;
                            uint _2914 = _2912 * 40u;
                            _2927 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2914)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 3u)).x));
                            _2928 = _2927.w;
                            uint _2930 = (_2912 * 40u) + 4u;
                            _2943 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2930)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 3u)).x));
                            uint _2945 = (_2912 * 40u) + 8u;
                            _2955 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2945)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 2u)).x));
                            uint _2958 = (_2912 * 40u) + 16u;
                            _2971 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2958)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 3u)).x));
                            uint _2974 = (_2912 * 40u) + 20u;
                            _2987 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2974)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 3u)).x));
                            uint _2990 = (_2912 * 40u) + 24u;
                            vec4 _3003 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2990)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 3u)).x));
                            uint _3009 = (_2912 * 40u) + 28u;
                            vec4 _3022 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3009)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 3u)).x));
                            _3034 = fma(_2229, _3022.z, fma(_2228, _3022.y, _3022.x * _2227)) + _3022.w;
                            _3035 = !((fma(_2229, _3003.z, fma(_2228, _3003.y, _3003.x * _2227)) + _3003.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3035)
                            {
                                float _3062 = _2927.x - _2227;
                                float _3063 = _2927.y - _2228;
                                float _3064 = _2927.z - _2229;
                                float _3065 = dot(vec3(_3062, _3063, _3064), vec3(_3062, _3063, _3064));
                                float _3068 = inversesqrt(_3065);
                                float _3069 = _3068 * _3062;
                                float _3070 = _3068 * _3063;
                                float _3071 = _3068 * _3064;
                                float _3075 = 1.0 - (_3065 / (_2928 * _2928));
                                float _4147 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                                float _3076 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
                                float _3080 = sqrt(_3065) * _2943.w;
                                float _3082 = 1.39999997615814208984375 / (_3080 + 1.39999997615814208984375);
                                float _3083 = _3082 * _3082;
                                float _3086 = ((1.0 - _3083) * dot(vec3(_3069, _3070, _3071), vec3(_412, _415, _418))) + _3083;
                                float _3089 = _3080 * _3080;
                                float _3093 = (fma(_2229, _2971.z, fma(_2228, _2971.y, _2971.x * _2227)) + _2971.w) / _3034;
                                float _3094 = (fma(_2229, _2987.z, fma(_2228, _2987.y, _2987.x * _2227)) + _2987.w) / _3034;
                                float _3098 = 1.0 - dot(vec2(_3093, _3094), vec2(_3093, _3094));
                                float _4163 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                                float _3099 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
                                float _3100 = _3099 * (((isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0))) * _3076) / ((_3089 * 0.699999988079071044921875) + 1.0));
                                float _3112 = exp2(log2(1.0 / ((_3089 * 3.5) + 5.0)) * 0.25);
                                float _3113 = 1.0 - _528;
                                float _3120 = sqrt(1.0 - ((1.0 - (_3113 * _3113)) * (1.0 - (_3112 * _3112))));
                                float _3121 = _3120 * _3120;
                                float _3122 = _3121 * _3121;
                                float _3123 = _3069 - _2539;
                                float _3124 = _3070 - _2540;
                                float _3125 = _3071 - _2541;
                                float _3129 = inversesqrt(dot(vec3(_3123, _3124, _3125), vec3(_3123, _3124, _3125)));
                                float _3133 = dot(vec3(_412, _415, _418), vec3((-0.0) - _2539, (-0.0) - _2540, (-0.0) - _2541));
                                float _4174 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                                float _3136 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                                float _3137 = dot(vec3(_412, _415, _418), vec3(_3129 * _3123, _3129 * _3124, _3129 * _3125));
                                float _4185 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                                float _3140 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
                                float _3144 = ((_3140 * _3140) * (_3122 + (-1.0))) + 1.0;
                                float _3145 = _3082 * _3121;
                                float _3146 = _3145 * _3145;
                                float _3152 = ((1.0 - _3146) * dot(vec3(_412, _415, _418), vec3(_3069, _3070, _3071))) + _3146;
                                float _4196 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                                float _3153 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
                                float _3154 = 1.0 - _3121;
                                float _3164 = (0.5 / (((_3153 * ((_3136 * _3154) + _3121)) + 9.9999999392252902907785028219223e-09) + (((_3153 * _3154) + _3121) * _3136))) * _3153;
                                float _4207 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                                float _3174 = (_3099 * _3076) * (((_3122 * 3.1415927410125732421875) * (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0)))) / ((_3144 * _3144) * ((_3089 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3100 * _2943.y;
                                frontier_phi_83_pred_1 = _3100 * _2943.x;
                                frontier_phi_83_pred_2 = _3174 * _2955.z;
                                frontier_phi_83_pred_3 = _3174 * _2955.y;
                                frontier_phi_83_pred_4 = _3174 * _2955.x;
                                frontier_phi_83_pred_5 = _3100 * _2943.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3182 = frontier_phi_83_pred;
                            _3181 = frontier_phi_83_pred_1;
                            _3180 = frontier_phi_83_pred_2;
                            _3179 = frontier_phi_83_pred_3;
                            _3178 = frontier_phi_83_pred_4;
                            _3183 = frontier_phi_83_pred_5;
                            _2885 = _3181 + _2898;
                            _2886 = _3182 + _2899;
                            _2887 = _3183 + _2900;
                            _2882 = _3178 + _2895;
                            _2883 = _3179 + _2896;
                            _2884 = _3180 + _2897;
                            if (_2902 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2895 = _2882;
                                _2896 = _2883;
                                _2897 = _2884;
                                _2898 = _2885;
                                _2899 = _2886;
                                _2900 = _2887;
                                _2901 = _2902;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2887;
                        frontier_phi_77_pred_1 = _2886;
                        frontier_phi_77_pred_2 = _2885;
                        frontier_phi_77_pred_3 = _2884;
                        frontier_phi_77_pred_4 = _2883;
                        frontier_phi_77_pred_5 = _2882;
                    }
                    _2524 = frontier_phi_77_pred;
                    _2522 = frontier_phi_77_pred_1;
                    _2520 = frontier_phi_77_pred_2;
                    _2518 = frontier_phi_77_pred_3;
                    _2516 = frontier_phi_77_pred_4;
                    _2514 = frontier_phi_77_pred_5;
                    uint _2680 = _2679 + 1u;
                    if (_2680 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2673 = _2514;
                        _2674 = _2516;
                        _2675 = _2518;
                        _2676 = _2520;
                        _2677 = _2522;
                        _2678 = _2524;
                        _2679 = _2680;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2518;
                frontier_phi_58_59_ladder_1 = _2524;
                frontier_phi_58_59_ladder_2 = _2522;
                frontier_phi_58_59_ladder_3 = _2520;
                frontier_phi_58_59_ladder_4 = _2516;
                frontier_phi_58_59_ladder_5 = _2514;
            }
            else
            {
                frontier_phi_58_59_ladder = _2396;
                frontier_phi_58_59_ladder_1 = _2402;
                frontier_phi_58_59_ladder_2 = _2400;
                frontier_phi_58_59_ladder_3 = _2398;
                frontier_phi_58_59_ladder_4 = _2394;
                frontier_phi_58_59_ladder_5 = _2392;
            }
            _2513 = frontier_phi_58_59_ladder_5;
            _2515 = frontier_phi_58_59_ladder_4;
            _2517 = frontier_phi_58_59_ladder;
            _2519 = frontier_phi_58_59_ladder_3;
            _2521 = frontier_phi_58_59_ladder_2;
            _2523 = frontier_phi_58_59_ladder_1;
        }
        float _2528 = isnan(1.0) ? _512 : (isnan(_512) ? 1.0 : min(_512, 1.0));
        _2286 = (_2528 * _2519) + _1722;
        _2288 = (_2528 * _2521) + _1724;
        _2290 = (_2528 * _2523) + _1726;
        _2292 = ((_2513 * _497) * _2528) + _2067;
        _2294 = ((_2515 * _499) * _2528) + _2069;
        _2296 = ((_2517 * _500) * _2528) + _2071;
    }
    else
    {
        _2286 = _1722;
        _2288 = _1724;
        _2290 = _1726;
        _2292 = _2067;
        _2294 = _2069;
        _2296 = _2071;
    }
    vec4 _2302 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4223 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _4234 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _4245 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _2326 = (((isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_2286 + ((isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0))) * _512))) + ((_2292 + ((isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))) * _1354)) * cbPerFrame._m0[3u].x)) + (_2302.x * cbMtdParam._m0[3u].x);
    float _2328 = ((_2302.y * cbMtdParam._m0[3u].x) + ((_2294 + ((isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0))) * _1354)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_2288 + ((isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0))) * _512)));
    float _2330 = ((_2302.z * cbMtdParam._m0[3u].x) + ((_2296 + ((isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))) * _1354)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (_2290 + ((isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0))) * _512)));
    float _2331 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2332 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2333 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    uint _2334 = _444 + 6u;
    float _2342 = _387 / cbSceneParam._m0[86u].x;
    float _2343 = _388 / cbSceneParam._m0[86u].y;
    vec4 _2357 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2342, _2343, (log2((isnan(cbSceneParam._m0[77u].w) ? _307 : (isnan(_307) ? cbSceneParam._m0[77u].w : min(_307, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2359 = _2357.x;
    float _2360 = _2357.y;
    float _2361 = _2357.z;
    float _2362 = _2357.w;
    float _2455;
    float _2457;
    float _2459;
    float _2461;
    if (_307 > cbSceneParam._m0[78u].w)
    {
        float _2417 = isnan(_307) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _307 : min(cbSceneParam._m0[80u].w, _307));
        float _2418 = _2417 / _307;
        float _2429 = _2418 * _359;
        float _2430 = _360 * _2418;
        float _2431 = (-0.0) - _2430;
        float _2433 = _2418 * _361;
        float _2435 = (cbSceneParam._m0[77u].w * _2431) / _2417;
        float _2436 = _2435 + cbSceneParam._m0[79u].w;
        float _2437 = cbSceneParam._m0[79u].w - _2430;
        float _2443 = sqrt(((_2429 * _2429) + (_2430 * _2430)) + (_2433 * _2433));
        float _2446 = (1.0 - (cbSceneParam._m0[77u].w / _2417)) * _2443;
        float _2451 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2453 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2630;
        if (abs((_2431 - _2435) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2630 = ((((_2436 > 0.0) ? exp2(_2451 * _2436) : (2.0 - exp2(_2453 * _2436))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2446;
        }
        else
        {
            float _2574 = 1.0 / cbSceneParam._m0[80u].x;
            float _2575 = isnan(_2437) ? _2436 : (isnan(_2436) ? _2437 : max(_2436, _2437));
            float _2576 = isnan(_2437) ? _2436 : (isnan(_2436) ? _2437 : min(_2436, _2437));
            float _2585 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : min(_2575, 0.0));
            float _2586 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : min(_2576, 0.0));
            _2630 = ((abs(_2443 / _2431) * cbSceneParam._m0[80u].y) * ((((_2585 - _2586) * 2.0) - ((exp2(_2451 * (isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0)))) - exp2(_2451 * (isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0))))) * _2574)) - ((exp2(_2453 * _2585) - exp2(_2453 * _2586)) * _2574))) + (_2446 * cbSceneParam._m0[80u].z);
        }
        vec4 _2632 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2342, _2343, 1.0), 0.0);
        float _2641 = exp2((_2630 * (-1.44269502162933349609375)) * (1.0 - _2632.w));
        float _2642 = log2(_2641);
        float _2658 = log2(_2362);
        _2455 = (exp2(_2658 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2642 * cbSceneParam._m0[78u].x)) * _2632.x) / cbSceneParam._m0[78u].x)) + _2359;
        _2457 = (exp2(_2658 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2642 * cbSceneParam._m0[78u].y)) * _2632.y) / cbSceneParam._m0[78u].y)) + _2360;
        _2459 = (exp2(_2658 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2642 * cbSceneParam._m0[78u].z)) * _2632.z) / cbSceneParam._m0[78u].z)) + _2361;
        _2461 = _2641 * _2362;
    }
    else
    {
        _2455 = _2359;
        _2457 = _2360;
        _2459 = _2361;
        _2461 = _2362;
    }
    bool _2668;
    vec4 _2471;
    vec4 _2493;
    float _2495;
    float _2499;
    float _2500;
    float _2501;
    float _2502;
    bool _2512;
    for (;;)
    {
        _2471 = cbMatDynParam._m0[0u];
        float _2473 = roundEven(_2471.y);
        bool _2474 = _2473 == 3.0;
        float _2475 = log2(_2461);
        float _2482 = exp2(_2475 * cbSceneParam._m0[78u].x) * _2331;
        float _2483 = exp2(_2475 * cbSceneParam._m0[78u].y) * _2332;
        float _2484 = exp2(_2475 * cbSceneParam._m0[78u].z) * _2333;
        float _2491 = _375 + (-0.5);
        _2493 = cbMtdParam._m0[1u];
        _2495 = _2493.y * _2491;
        float _2498 = (_2473 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2499 = _2498 * (_2474 ? _2482 : (_2482 + (cbSceneParam._m0[72u].w * _2455)));
        _2500 = _2498 * (_2474 ? _2483 : (_2483 + (cbSceneParam._m0[72u].w * _2457)));
        _2501 = _2498 * (_2474 ? _2484 : (_2484 + (cbSceneParam._m0[72u].w * _2459)));
        _2502 = _2491 * 0.999000012874603271484375;
        _2512 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2512)
        {
            if ((cbInstanceData._m0[_444 + 7u].x + _2502) < 0.5)
            {
                _2668 = true;
                break;
            }
        }
        uint _2609 = _446 + uint(_2471.w);
        if ((cbInstanceData._m0[_2609].w < 1.0) && ((cbInstanceData._m0[_2609].w + _2502) < 0.5))
        {
            _2668 = true;
            break;
        }
        if ((_2495 + _239) < _2493.x)
        {
            _2668 = true;
            break;
        }
        _2668 = false;
        break;
    }
    float _2873;
    if (_2668)
    {
        discard_state = true;
        _2873 = 0.0;
    }
    else
    {
        _2873 = cbInstanceData._m0[_2334].w;
    }
    SV_Target.x = _2499;
    SV_Target.y = _2500;
    SV_Target.z = _2501;
    SV_Target.w = _2873;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2334].w;
    discard_exit();
}


