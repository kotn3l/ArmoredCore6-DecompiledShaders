#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M0_M1_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M0_M1_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M0_M1_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _938;
float _3347;
float _3348;
float _3349;
float _3350;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _235 = texture(sampler2D(C_AMSN_M0_M1_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _241 = _235.w;
    float _242 = _235.x * cbMtdParam._m0[9u].x;
    float _243 = _235.y * cbMtdParam._m0[9u].y;
    float _244 = _235.z * cbMtdParam._m0[9u].z;
    vec4 _256 = texture(sampler2D(C_AMSN_M0_M1_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _258 = _256.x;
    vec4 _270 = texture(sampler2D(C_AMSN_M0_M1_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _274 = _270.z;
    float _278 = (_270.x * 2.0) + (-1.0);
    float _280 = (_270.y * 2.0) + (-1.0);
    float _281 = dot(vec2(_278, _280), vec2(_278, _280));
    float _3359 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _287 = sqrt(1.0 - (isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0))));
    float _290 = fma(_287, _205 * NORMAL.x, fma(_280, _212 * TANGENT.x, (_198 * _190) * _278));
    float _293 = fma(_287, _205 * NORMAL.y, fma(_280, _212 * TANGENT.y, (_198 * _191) * _278));
    float _296 = fma(_287, _205 * NORMAL.z, fma(_280, _212 * TANGENT.z, (_198 * _192) * _278));
    float _300 = inversesqrt(dot(vec3(_290, _293, _296), vec3(_290, _293, _296)));
    float _301 = _300 * _290;
    float _302 = _300 * _293;
    float _303 = _300 * _296;
    float _3370 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _304 = isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0));
    float _3381 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3392 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3403 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _3414 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _308 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
    float _324 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _366 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _376 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _366);
    float _377 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _366);
    float _378 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _366);
    float _382 = inversesqrt(dot(vec3(_376, _377, _378), vec3(_376, _377, _378)));
    float _383 = _376 * _382;
    float _384 = _377 * _382;
    float _385 = _378 * _382;
    vec4 _390 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _392 = _390.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _617 = sqrt(((_376 * _376) + (_377 * _377)) + (_378 * _378));
        float _623 = (cbMatDynParam._m0[5u].x * _617) + cbMatDynParam._m0[5u].y;
        float _3425 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
        float _624 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
        float _628 = (cbMatDynParam._m0[5u].z * _617) + cbMatDynParam._m0[5u].w;
        float _3436 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0))) - _624)) + _624) < ((_392 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _404 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _405 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _407 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _409 = _407.w;
    float _429 = fma(_303, cbSceneParam._m0[5u].z, fma(_302, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _301));
    float _432 = fma(_303, cbSceneParam._m0[6u].z, fma(_302, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _301));
    float _435 = fma(_303, cbSceneParam._m0[7u].z, fma(_302, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _301));
    vec4 _437 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _448 = (((_437.y - _304) + (_437.w * _304)) * cbMtdParam._m0[3u].x) + _304;
    uint _461 = uint(roundEven(NORMAL.w)) * 13u;
    uint _463 = _461 + 9u;
    uint _464 = _463 + uint(cbMatDynParam._m0[0u].w);
    float _470 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0)))) * cbInstanceData._m0[_464].x;
    float _471 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0)))) * cbInstanceData._m0[_464].y;
    float _472 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0)))) * cbInstanceData._m0[_464].z;
    float _3447 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _473 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
    float _3458 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _474 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
    float _3469 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _475 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
    vec4 _476 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _481 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _492 = (((_481.x - _308) + (_481.w * _308)) * cbMtdParam._m0[3u].x) + _308;
    float _505 = (cbMtdParam._m0[3u].x * (((_473 * _409) - _473) + _476.x)) + _473;
    float _506 = (cbMtdParam._m0[3u].x * (((_474 * _409) - _474) + _476.y)) + _474;
    float _507 = (cbMtdParam._m0[3u].x * (((_475 * _409) - _475) + _476.z)) + _475;
    float _508 = 1.0 - _492;
    float _509 = _508 * _505;
    float _510 = _508 * _506;
    float _511 = _508 * _507;
    float _516 = (_505 + (-0.039999999105930328369140625)) * _492;
    float _517 = (_506 + (-0.039999999105930328369140625)) * _492;
    float _518 = (_507 + (-0.039999999105930328369140625)) * _492;
    float _519 = _516 + 0.039999999105930328369140625;
    float _521 = _517 + 0.039999999105930328369140625;
    float _522 = _518 + 0.039999999105930328369140625;
    vec4 _531 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _404, cbSceneParam._m0[86u].y * _405));
    float _534 = _531.x * TEXCOORD_4;
    float _535 = dot(vec3(_301, _302, _303), vec3(_383, _384, _385));
    float _538 = _535 * 2.0;
    float _542 = (_538 * _301) - _383;
    float _543 = (_538 * _302) - _384;
    float _544 = (_538 * _303) - _385;
    float _548 = abs(dot(vec3(_383, _384, _385), vec3(_301, _302, _303)));
    float _3480 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _550 = sqrt(_448);
    float _563 = exp2((_550 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_550 * 3.0));
    float _569 = (1.0 - _563) * ((_550 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _570 = _563 * _550;
    float _598 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _602 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _606 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _937;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    float _951;
    float _952;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _662 = fma(_606, cbModelParam._m0[26u].z, fma(_602, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _598));
        float _666 = fma(_606, cbModelParam._m0[27u].z, fma(_602, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _598));
        float _670 = fma(_606, cbModelParam._m0[28u].z, fma(_602, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _598));
        float _695 = _598 + _301;
        float _696 = _602 + _302;
        float _697 = _606 + _303;
        float _707 = fma(_697, cbModelParam._m0[26u].z, fma(_696, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _695)) - _662;
        float _708 = fma(_697, cbModelParam._m0[27u].z, fma(_696, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _695)) - _666;
        float _709 = fma(_697, cbModelParam._m0[28u].z, fma(_696, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _695)) - _670;
        float _713 = inversesqrt(dot(vec3(_707, _708, _709), vec3(_707, _708, _709)));
        float _726 = ((_713 * _707) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_662 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _727 = ((_713 * _708) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_666 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _728 = ((_713 * _709) / cbModelParam._m0[34u].z) + ((((((_670 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _731 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_726, _727, _728), 0.0);
        vec4 _738 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_726, _727, _728), 0.0);
        vec4 _745 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_726, _727, _728), 0.0);
        vec4 _752 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_726, _727, _728), 0.0);
        float _765 = exp2((_731.w + (-0.5)) * 20.0) * 2.0;
        float _766 = _765 * (_731.x + (-0.5));
        float _767 = _765 * (_731.y + (-0.5));
        float _768 = _765 * (_731.z + (-0.5));
        float _775 = exp2((_738.w + (-0.5)) * 20.0) * 2.0;
        float _776 = _775 * (_738.x + (-0.5));
        float _777 = _775 * (_738.y + (-0.5));
        float _778 = _775 * (_738.z + (-0.5));
        float _785 = exp2((_745.w + (-0.5)) * 20.0) * 2.0;
        float _786 = _785 * (_745.x + (-0.5));
        float _787 = _785 * (_745.y + (-0.5));
        float _788 = _785 * (_745.z + (-0.5));
        float _795 = exp2((_752.w + (-0.5)) * 20.0) * 2.0;
        float _796 = _795 * (_752.x + (-0.5));
        float _797 = _795 * (_752.y + (-0.5));
        float _798 = _795 * (_752.z + (-0.5));
        float _799 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _800 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _801 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _802 = _766 * 0.5;
        float _803 = _776 * 0.5;
        float _804 = _786 * 0.5;
        float _805 = dot(vec3(_802, _803, _804), vec3(_802, _803, _804));
        float _810 = (_805 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_805);
        float _819 = (dot(vec3(_301, _302, _303), vec3(_810 * _802, _810 * _803, _810 * _804)) + 1.0) * 0.5;
        float _3506 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _829 = sqrt(((_803 * _803) + (_802 * _802)) + (_804 * _804)) / (_799 + 9.9999997473787516355514526367188e-06);
        float _3517 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
        float _831 = _830 * 2.0;
        float _835 = (1.0 - _830) / (_830 + 1.0);
        float _3528 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _836 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
        float _845 = ((((1.0 - _836) * (_831 + 2.0)) * exp2(log2(isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))) * (_831 + 1.0))) + _836) * _799;
        float _846 = _767 * 0.5;
        float _847 = _777 * 0.5;
        float _848 = _787 * 0.5;
        float _849 = dot(vec3(_846, _847, _848), vec3(_846, _847, _848));
        float _854 = (_849 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_849);
        float _862 = (dot(vec3(_301, _302, _303), vec3(_854 * _846, _854 * _847, _854 * _848)) + 1.0) * 0.5;
        float _3539 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _871 = sqrt(((_847 * _847) + (_846 * _846)) + (_848 * _848)) / (_800 + 9.9999997473787516355514526367188e-06);
        float _3550 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _872 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _873 = _872 * 2.0;
        float _877 = (1.0 - _872) / (_872 + 1.0);
        float _3561 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _878 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _887 = ((((1.0 - _878) * (_873 + 2.0)) * exp2(log2(isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0))) * (_873 + 1.0))) + _878) * _800;
        float _888 = _768 * 0.5;
        float _889 = _778 * 0.5;
        float _890 = _788 * 0.5;
        float _891 = dot(vec3(_888, _889, _890), vec3(_888, _889, _890));
        float _896 = (_891 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_891);
        float _904 = (dot(vec3(_301, _302, _303), vec3(_896 * _888, _896 * _889, _896 * _890)) + 1.0) * 0.5;
        float _3572 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _913 = sqrt(((_889 * _889) + (_888 * _888)) + (_890 * _890)) / (_801 + 9.9999997473787516355514526367188e-06);
        float _3583 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
        float _915 = _914 * 2.0;
        float _919 = (1.0 - _914) / (_914 + 1.0);
        float _3594 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _920 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _929 = ((((1.0 - _920) * (_915 + 2.0)) * exp2(log2(isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) * (_915 + 1.0))) + _920) * _801;
        _937 = _768;
        _939 = _767;
        _940 = _766;
        _941 = _778;
        _942 = _777;
        _943 = _776;
        _944 = _788;
        _945 = _787;
        _946 = _786;
        _947 = _801;
        _948 = _800;
        _949 = _799;
        _950 = cbModelParam._m0[36u].z * (isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0)));
        _951 = cbModelParam._m0[36u].z * (isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0)));
        _952 = cbModelParam._m0[36u].z * (isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0)));
    }
    else
    {
        _937 = _938;
        _939 = _938;
        _940 = _938;
        _941 = _938;
        _942 = _938;
        _943 = _938;
        _944 = _938;
        _945 = _938;
        _946 = _938;
        _947 = _938;
        _948 = _938;
        _949 = _938;
        _950 = 0.0;
        _951 = 0.0;
        _952 = 0.0;
    }
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _981 = fma(_606, cbModelParam._m0[30u].z, fma(_602, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _598));
        float _985 = fma(_606, cbModelParam._m0[31u].z, fma(_602, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _598));
        float _989 = fma(_606, cbModelParam._m0[32u].z, fma(_602, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _598));
        float _1012 = _598 + _301;
        float _1013 = _602 + _302;
        float _1014 = _606 + _303;
        float _1024 = fma(_1014, cbModelParam._m0[30u].z, fma(_1013, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1012)) - _981;
        float _1025 = fma(_1014, cbModelParam._m0[31u].z, fma(_1013, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1012)) - _985;
        float _1026 = fma(_1014, cbModelParam._m0[32u].z, fma(_1013, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1012)) - _989;
        float _1030 = inversesqrt(dot(vec3(_1024, _1025, _1026), vec3(_1024, _1025, _1026)));
        float _1043 = ((_1030 * _1024) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_981 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1044 = ((_1030 * _1025) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_985 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1045 = ((_1030 * _1026) / cbModelParam._m0[35u].z) + ((((((_989 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1043, _1044, _1045), 0.0);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1043, _1044, _1045), 0.0);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1043, _1044, _1045), 0.0);
        vec4 _1068 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1043, _1044, _1045), 0.0);
        float _1080 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1047.x + (-0.5));
        float _1082 = _1080 * (_1047.y + (-0.5));
        float _1083 = _1080 * (_1047.z + (-0.5));
        float _1090 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1054.x + (-0.5));
        float _1092 = _1090 * (_1054.y + (-0.5));
        float _1093 = _1090 * (_1054.z + (-0.5));
        float _1100 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1061.x + (-0.5));
        float _1102 = _1100 * (_1061.y + (-0.5));
        float _1103 = _1100 * (_1061.z + (-0.5));
        float _1110 = exp2((_1068.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1068.x + (-0.5));
        float _1112 = _1110 * (_1068.y + (-0.5));
        float _1113 = _1110 * (_1068.z + (-0.5));
        float _1114 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1115 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1116 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1117 = _1081 * 0.5;
        float _1118 = _1091 * 0.5;
        float _1119 = _1101 * 0.5;
        float _1120 = dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119));
        float _1125 = (_1120 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1120);
        float _1133 = (dot(vec3(_301, _302, _303), vec3(_1125 * _1117, _1125 * _1118, _1125 * _1119)) + 1.0) * 0.5;
        float _3635 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1142 = sqrt(((_1118 * _1118) + (_1117 * _1117)) + (_1119 * _1119)) / (_1114 + 9.9999997473787516355514526367188e-06);
        float _3646 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _1144 = _1143 * 2.0;
        float _1148 = (1.0 - _1143) / (_1143 + 1.0);
        float _3657 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _1158 = ((((1.0 - _1149) * (_1144 + 2.0)) * exp2(log2(isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))) * (_1144 + 1.0))) + _1149) * _1114;
        float _1159 = _1082 * 0.5;
        float _1160 = _1092 * 0.5;
        float _1161 = _1102 * 0.5;
        float _1162 = dot(vec3(_1159, _1160, _1161), vec3(_1159, _1160, _1161));
        float _1167 = (_1162 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1162);
        float _1175 = (dot(vec3(_301, _302, _303), vec3(_1167 * _1159, _1167 * _1160, _1167 * _1161)) + 1.0) * 0.5;
        float _3668 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1184 = sqrt(((_1160 * _1160) + (_1159 * _1159)) + (_1161 * _1161)) / (_1115 + 9.9999997473787516355514526367188e-06);
        float _3679 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _1186 = _1185 * 2.0;
        float _1190 = (1.0 - _1185) / (_1185 + 1.0);
        float _3690 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _1200 = ((((1.0 - _1191) * (_1186 + 2.0)) * exp2(log2(isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) * (_1186 + 1.0))) + _1191) * _1115;
        float _1201 = _1083 * 0.5;
        float _1202 = _1093 * 0.5;
        float _1203 = _1103 * 0.5;
        float _1204 = dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203));
        float _1209 = (_1204 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1204);
        float _1217 = (dot(vec3(_301, _302, _303), vec3(_1209 * _1201, _1209 * _1202, _1209 * _1203)) + 1.0) * 0.5;
        float _3701 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1226 = sqrt(((_1202 * _1202) + (_1201 * _1201)) + (_1203 * _1203)) / (_1116 + 9.9999997473787516355514526367188e-06);
        float _3712 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1228 = _1227 * 2.0;
        float _1232 = (1.0 - _1227) / (_1227 + 1.0);
        float _3723 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1242 = ((((1.0 - _1233) * (_1228 + 2.0)) * exp2(log2(isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * (_1228 + 1.0))) + _1233) * _1116;
        _1250 = _1083;
        _1251 = _1082;
        _1252 = _1081;
        _1253 = _1093;
        _1254 = _1092;
        _1255 = _1091;
        _1256 = _1103;
        _1257 = _1102;
        _1258 = _1101;
        _1259 = _1116;
        _1260 = _1115;
        _1261 = _1114;
        _1262 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)));
        _1263 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)));
        _1264 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)));
    }
    else
    {
        _1250 = _938;
        _1251 = _938;
        _1252 = _938;
        _1253 = _938;
        _1254 = _938;
        _1255 = _938;
        _1256 = _938;
        _1257 = _938;
        _1258 = _938;
        _1259 = _938;
        _1260 = _938;
        _1261 = _938;
        _1262 = 0.0;
        _1263 = 0.0;
        _1264 = 0.0;
    }
    float _1274 = (cbModelParam._m0[1u].x * (_1262 - _950)) + _950;
    float _1275 = (cbModelParam._m0[1u].x * (_1263 - _951)) + _951;
    float _1276 = (cbModelParam._m0[1u].x * (_1264 - _952)) + _952;
    float _1297 = fma(_1276, cbSceneParam._m0[89u].z, fma(_1275, cbSceneParam._m0[89u].y, _1274 * cbSceneParam._m0[89u].x));
    float _1300 = fma(_1276, cbSceneParam._m0[90u].z, fma(_1275, cbSceneParam._m0[90u].y, _1274 * cbSceneParam._m0[90u].x));
    float _1303 = fma(_1276, cbSceneParam._m0[91u].z, fma(_1275, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1274));
    float _1318 = _542 * 0.5;
    float _1319 = _543 * 0.5;
    float _1320 = _544 * 0.5;
    float _1321 = dot(vec4(_1318, _1319, _1320, 1.0), vec4(_1252, _1255, _1258, _1261));
    float _1324 = dot(vec4(_1318, _1319, _1320, 1.0), vec4(_1251, _1254, _1257, _1260));
    float _1327 = dot(vec4(_1318, _1319, _1320, 1.0), vec4(_1250, _1253, _1256, _1259));
    float _1361;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1334 = dot(vec4(_1318, _1319, _1320, 1.0), vec4(_937, _941, _944, _947));
        float _1338 = dot(vec4(_1318, _1319, _1320, 1.0), vec4(_939, _942, _945, _948));
        float _1342 = dot(vec4(_1318, _1319, _1320, 1.0), vec4(_940, _943, _946, _949));
        float _1349 = dot(vec4(cbModelParam._m0[39u]), vec4(_1318, _1319, _1320, 1.0));
        _1361 = dot(vec3(isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)), isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)), isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1349) ? 0.0 : (isnan(0.0) ? _1349 : max(0.0, _1349))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1361 = 1.0;
    }
    float _1372;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1363 = dot(vec4(cbModelParam._m0[40u]), vec4(_1318, _1319, _1320, 1.0));
        _1372 = dot(vec3(isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)), isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)), isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1363) ? 0.0 : (isnan(0.0) ? _1363 : max(0.0, _1363))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1372 = 1.0;
    }
    float _1376 = (_1372 * cbModelParam._m0[1u].x) + (_1361 * (1.0 - cbModelParam._m0[1u].x));
    float _1386 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _448);
    float _1387 = isnan(_1386) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1386 : min(cbModelParam._m0[25u].z, _1386));
    float _1469;
    float _1471;
    float _1473;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1436 = fma(_606, cbModelParam._m0[13u].z, fma(_602, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _598)) + cbModelParam._m0[13u].w;
        float _1440 = fma(_606, cbModelParam._m0[14u].z, fma(_602, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _598)) + cbModelParam._m0[14u].w;
        float _1444 = fma(_606, cbModelParam._m0[15u].z, fma(_602, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _598)) + cbModelParam._m0[15u].w;
        float _1447 = fma(_544, cbModelParam._m0[13u].z, fma(_543, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _542));
        float _1450 = fma(_544, cbModelParam._m0[14u].z, fma(_543, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _542));
        float _1453 = fma(_544, cbModelParam._m0[15u].z, fma(_543, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _542));
        float _1481;
        if (_1447 > 0.0)
        {
            _1481 = abs((1.0 - _1436) / _1447);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1447 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1436 + 1.0) / _1447);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1481 = frontier_phi_17_15_ladder;
        }
        float _1689;
        if (_1450 > 0.0)
        {
            _1689 = abs((1.0 - _1440) / _1450);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1450 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1440 + 1.0) / _1450);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1689 = frontier_phi_26_22_ladder;
        }
        float _1943;
        if (_1453 > 0.0)
        {
            _1943 = abs((1.0 - _1444) / _1453);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1453 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1444 + 1.0) / _1453);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1943 = frontier_phi_38_33_ladder;
        }
        float _1945 = isnan(_1689) ? _1481 : (isnan(_1481) ? _1689 : min(_1481, _1689));
        float _1946 = isnan(_1943) ? _1945 : (isnan(_1945) ? _1943 : min(_1945, _1943));
        float _1950 = (_1946 * _1447) + _1436;
        float _1951 = (_1946 * _1450) + _1440;
        float _1952 = (_1946 * _1453) + _1444;
        float _1953 = _1946 * 9.9999997473787516355514526367188e-05;
        float _1955 = (-1.0) - _1953;
        float _1957 = _1953 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1952 > _1957) || ((_1952 < _1955) || ((_1951 > _1957) || ((_1951 < _1955) || ((_1950 < _1955) || (_1950 > _1957))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2080 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1952, cbModelParam._m0[9u].z, fma(_1951, cbModelParam._m0[9u].y, _1950 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1952, cbModelParam._m0[10u].z, fma(_1951, cbModelParam._m0[10u].y, _1950 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1952, cbModelParam._m0[11u].z, fma(_1951, cbModelParam._m0[11u].y, _1950 * cbModelParam._m0[11u].x))), _1387);
            frontier_phi_16_38_ladder = _2080.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2080.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2080.x * cbModelParam._m0[1u].y;
        }
        _1469 = frontier_phi_16_38_ladder_2;
        _1471 = frontier_phi_16_38_ladder_1;
        _1473 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1457 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_542, _543, _544), _1387);
        _1469 = _1457.x * cbModelParam._m0[1u].y;
        _1471 = _1457.y * cbModelParam._m0[1u].y;
        _1473 = _1457.z * cbModelParam._m0[1u].y;
    }
    float _1477 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _448);
    float _1478 = isnan(_1477) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1477 : min(cbModelParam._m0[25u].w, _1477));
    float _1571;
    float _1573;
    float _1575;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1535 = fma(_606, cbModelParam._m0[21u].z, fma(_602, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _598)) + cbModelParam._m0[21u].w;
        float _1539 = fma(_606, cbModelParam._m0[22u].z, fma(_602, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _598)) + cbModelParam._m0[22u].w;
        float _1543 = fma(_606, cbModelParam._m0[23u].z, fma(_602, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _598)) + cbModelParam._m0[23u].w;
        float _1546 = fma(_544, cbModelParam._m0[21u].z, fma(_543, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _542));
        float _1549 = fma(_544, cbModelParam._m0[22u].z, fma(_543, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _542));
        float _1552 = fma(_544, cbModelParam._m0[23u].z, fma(_543, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _542));
        float _1694;
        if (_1546 > 0.0)
        {
            _1694 = abs((1.0 - _1535) / _1546);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1546 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1535 + 1.0) / _1546);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1694 = frontier_phi_28_24_ladder;
        }
        float _1970;
        if (_1549 > 0.0)
        {
            _1970 = abs((1.0 - _1539) / _1549);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1549 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1539 + 1.0) / _1549);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1970 = frontier_phi_40_35_ladder;
        }
        float _2183;
        if (_1552 > 0.0)
        {
            _2183 = abs((1.0 - _1543) / _1552);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1552 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1543 + 1.0) / _1552);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2183 = frontier_phi_49_46_ladder;
        }
        float _2185 = isnan(_1970) ? _1694 : (isnan(_1694) ? _1970 : min(_1694, _1970));
        float _2186 = isnan(_2183) ? _2185 : (isnan(_2185) ? _2183 : min(_2185, _2183));
        float _2190 = (_2186 * _1546) + _1535;
        float _2191 = (_2186 * _1549) + _1539;
        float _2192 = (_2186 * _1552) + _1543;
        float _2193 = _2186 * 9.9999997473787516355514526367188e-05;
        float _2194 = (-1.0) - _2193;
        float _2196 = _2193 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2192 > _2196) || ((_2192 < _2194) || ((_2191 > _2196) || ((_2191 < _2194) || ((_2190 < _2194) || (_2190 > _2196))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2409 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2192, cbModelParam._m0[17u].z, fma(_2191, cbModelParam._m0[17u].y, _2190 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2192, cbModelParam._m0[18u].z, fma(_2191, cbModelParam._m0[18u].y, _2190 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2192, cbModelParam._m0[19u].z, fma(_2191, cbModelParam._m0[19u].y, _2190 * cbModelParam._m0[19u].x))), _1478);
            frontier_phi_25_49_ladder = _2409.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2409.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2409.x * cbModelParam._m0[1u].z;
        }
        _1571 = frontier_phi_25_49_ladder_2;
        _1573 = frontier_phi_25_49_ladder_1;
        _1575 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1555 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_542, _543, _544), _1478);
        _1571 = _1555.x * cbModelParam._m0[1u].z;
        _1573 = _1555.y * cbModelParam._m0[1u].z;
        _1575 = _1555.z * cbModelParam._m0[1u].z;
    }
    float _1588 = (((_569 * _519) + _570) * _534) * ((cbModelParam._m0[1u].w * (_1571 - _1469)) + _1469);
    float _1590 = (((_569 * _521) + _570) * _534) * ((cbModelParam._m0[1u].w * (_1573 - _1471)) + _1471);
    float _1592 = (((_569 * _522) + _570) * _534) * ((cbModelParam._m0[1u].w * (_1575 - _1473)) + _1473);
    float _1595 = fma(_1592, cbSceneParam._m0[89u].z, fma(_1590, cbSceneParam._m0[89u].y, _1588 * cbSceneParam._m0[89u].x));
    float _1598 = fma(_1592, cbSceneParam._m0[90u].z, fma(_1590, cbSceneParam._m0[90u].y, _1588 * cbSceneParam._m0[90u].x));
    float _1601 = fma(_1592, cbSceneParam._m0[91u].z, fma(_1590, cbSceneParam._m0[91u].y, _1588 * cbSceneParam._m0[91u].x));
    uvec4 _1611 = floatBitsToUint(cbInstanceData._m0[_461 + 5u]);
    uint _1613 = _1611.x * 14u;
    uint _1614 = _1613 + 13u;
    float _1621 = _534 + (-1.0);
    float _1626 = (cbLight._m0[_1614].x * _1621) + 1.0;
    float _1627 = (cbLight._m0[_1614].y * _1621) + 1.0;
    float _1628 = (cbLight._m0[_1614].z * _1621) + 1.0;
    float _1629 = (cbLight._m0[_1614].w * _1621) + 1.0;
    uint _1630 = _1613 + 5u;
    float _1636 = isnan(1.0) ? _1627 : (isnan(_1627) ? 1.0 : min(_1627, 1.0));
    uint _1640 = _1613 + 4u;
    float _1647 = isnan(1.0) ? _1626 : (isnan(_1626) ? 1.0 : min(_1626, 1.0));
    uint _1651 = _1613 | 1u;
    float _1662 = dot(vec3(cbLight._m0[_1613].xyz), vec3(_301, _302, _303));
    float _1665 = dot(vec3(cbLight._m0[_1651].xyz), vec3(_301, _302, _303));
    float _3859 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
    float _3870 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
    float _1670 = (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * 0.3183098733425140380859375;
    float _1672 = (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * 0.3183098733425140380859375;
    float _1679 = ((cbLight._m0[_1630].x * _1636) * _1672) + ((cbLight._m0[_1640].x * _1647) * _1670);
    float _1680 = ((_1636 * cbLight._m0[_1630].y) * _1672) + ((_1647 * cbLight._m0[_1640].y) * _1670);
    float _1681 = ((_1636 * cbLight._m0[_1630].z) * _1672) + ((_1647 * cbLight._m0[_1640].z) * _1670);
    uvec4 _1686 = floatBitsToUint(cbLight._m0[_1613 + 12u]);
    bool _1688 = _1686.x == 0u;
    float _1699;
    float _1701;
    float _1703;
    if (_1688)
    {
        _1699 = _1679;
        _1701 = _1680;
        _1703 = _1681;
    }
    else
    {
        uint _1707 = _1613 + 6u;
        float _1723 = (dot(vec3(cbLight._m0[_1613 + 2u].xyz), vec3(_301, _302, _303)) * 0.5) + 0.5;
        float _1724 = _1723 * _1723;
        float _3881 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1725 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1726 = isnan(1.0) ? _1628 : (isnan(_1628) ? 1.0 : min(_1628, 1.0));
        _1699 = (((cbLight._m0[_1707].x * 0.3183098733425140380859375) * _1725) * _1726) + _1679;
        _1701 = (((cbLight._m0[_1707].y * 0.3183098733425140380859375) * _1725) * _1726) + _1680;
        _1703 = (((cbLight._m0[_1707].z * 0.3183098733425140380859375) * _1725) * _1726) + _1681;
    }
    bool _1706 = _1686.y == 0u;
    float _1744;
    float _1746;
    float _1748;
    if (_1706)
    {
        _1744 = _1699;
        _1746 = _1701;
        _1748 = _1703;
    }
    else
    {
        uint _1914 = _1613 + 7u;
        float _1930 = (dot(vec3(cbLight._m0[_1613 + 3u].xyz), vec3(_301, _302, _303)) * 0.5) + 0.5;
        float _1931 = _1930 * _1930;
        float _3897 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
        float _1932 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1933 = isnan(1.0) ? _1629 : (isnan(_1629) ? 1.0 : min(_1629, 1.0));
        _1744 = (((cbLight._m0[_1914].x * 0.3183098733425140380859375) * _1932) * _1933) + _1699;
        _1746 = (((cbLight._m0[_1914].y * 0.3183098733425140380859375) * _1932) * _1933) + _1701;
        _1748 = (((cbLight._m0[_1914].z * 0.3183098733425140380859375) * _1932) * _1933) + _1703;
    }
    uint _1751 = _1613 + 8u;
    float _1764 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1613].w)) * _448) * 0.949999988079071044921875);
    float _1765 = _1764 * _1764;
    float _1766 = cbLight._m0[_1613].x + _383;
    float _1767 = cbLight._m0[_1613].y + _384;
    float _1768 = cbLight._m0[_1613].z + _385;
    float _1772 = inversesqrt(dot(vec3(_1766, _1767, _1768), vec3(_1766, _1767, _1768)));
    float _1773 = _1772 * _1766;
    float _1774 = _1772 * _1767;
    float _1775 = _1772 * _1768;
    float _1776 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_1613].xyz));
    float _3913 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
    float _1779 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _3924 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _1780 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _1781 = dot(vec3(_301, _302, _303), vec3(_1773, _1774, _1775));
    float _3935 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
    float _1784 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _1785 = dot(vec3(cbLight._m0[_1613].xyz), vec3(_1773, _1774, _1775));
    float _3946 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
    float _1789 = _1765 * _1765;
    float _1793 = ((_1784 * _1784) * (_1789 + (-1.0))) + 1.0;
    float _1801 = exp2(log2(1.0 - (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0)))) * 5.0);
    float _1802 = 0.959999978542327880859375 - _516;
    float _1804 = 0.959999978542327880859375 - _517;
    float _1805 = 0.959999978542327880859375 - _518;
    float _1812 = 1.0 - _1765;
    float _1823 = (0.5 / (((_1780 * ((_1779 * _1812) + _1765)) + 9.9999999392252902907785028219223e-09) + (((_1780 * _1812) + _1765) * _1779))) * _1779;
    float _3957 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _1825 = (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (_1789 / ((_1793 * _1793) * 3.141590118408203125));
    uint _1836 = _1613 + 9u;
    float _1847 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1651].w)) * _448) * 0.949999988079071044921875);
    float _1848 = _1847 * _1847;
    float _1849 = cbLight._m0[_1651].x + _383;
    float _1850 = cbLight._m0[_1651].y + _384;
    float _1851 = cbLight._m0[_1651].z + _385;
    float _1855 = inversesqrt(dot(vec3(_1849, _1850, _1851), vec3(_1849, _1850, _1851)));
    float _1856 = _1855 * _1849;
    float _1857 = _1855 * _1850;
    float _1858 = _1855 * _1851;
    float _1859 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_1651].xyz));
    float _3968 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
    float _1862 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _1863 = dot(vec3(_301, _302, _303), vec3(_1856, _1857, _1858));
    float _3979 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _1866 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _1867 = dot(vec3(cbLight._m0[_1651].xyz), vec3(_1856, _1857, _1858));
    float _3990 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1871 = _1848 * _1848;
    float _1875 = ((_1866 * _1866) * (_1871 + (-1.0))) + 1.0;
    float _1882 = exp2(log2(1.0 - (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0)))) * 5.0);
    float _1889 = 1.0 - _1848;
    float _1899 = (0.5 / (((_1780 * ((_1862 * _1889) + _1848)) + 9.9999999392252902907785028219223e-09) + (((_1780 * _1889) + _1848) * _1862))) * _1862;
    float _4001 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1901 = (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_1871 / ((_1875 * _1875) * 3.141590118408203125));
    float _1911 = (((((_1882 * _1802) + _519) * cbLight._m0[_1836].x) * _1901) * _1636) + (((((_1801 * _1802) + _519) * cbLight._m0[_1751].x) * _1825) * _1647);
    float _1912 = (((((_1882 * _1804) + _521) * cbLight._m0[_1836].y) * _1901) * _1636) + (((((_1801 * _1804) + _521) * cbLight._m0[_1751].y) * _1825) * _1647);
    float _1913 = (((((_1882 * _1805) + _522) * cbLight._m0[_1836].z) * _1901) * _1636) + (((((_1801 * _1805) + _522) * cbLight._m0[_1751].z) * _1825) * _1647);
    float _1975;
    float _1977;
    float _1979;
    if (_1688)
    {
        _1975 = _1911;
        _1977 = _1912;
        _1979 = _1913;
    }
    else
    {
        uint _1981 = _1613 + 2u;
        uint _1985 = _1613 + 10u;
        float _1999 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1981].w)) * _448) * 0.949999988079071044921875);
        float _2000 = _1999 * _1999;
        float _2001 = cbLight._m0[_1981].x + _383;
        float _2002 = cbLight._m0[_1981].y + _384;
        float _2003 = cbLight._m0[_1981].z + _385;
        float _2007 = inversesqrt(dot(vec3(_2001, _2002, _2003), vec3(_2001, _2002, _2003)));
        float _2008 = _2007 * _2001;
        float _2009 = _2007 * _2002;
        float _2010 = _2007 * _2003;
        float _2011 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_1981].xyz));
        float _4012 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
        float _2014 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _2015 = dot(vec3(_301, _302, _303), vec3(_2008, _2009, _2010));
        float _4023 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
        float _2018 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _2019 = dot(vec3(cbLight._m0[_1981].xyz), vec3(_2008, _2009, _2010));
        float _4034 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
        float _2023 = _2000 * _2000;
        float _2027 = ((_2018 * _2018) * (_2023 + (-1.0))) + 1.0;
        float _2034 = exp2(log2(1.0 - (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) * 5.0);
        float _2041 = 1.0 - _2000;
        float _2051 = (0.5 / (((_1780 * ((_2014 * _2041) + _2000)) + 9.9999999392252902907785028219223e-09) + (((_1780 * _2041) + _2000) * _2014))) * _2014;
        float _4045 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2053 = (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_2023 / ((_2027 * _2027) * 3.141590118408203125));
        float _2054 = isnan(1.0) ? _1628 : (isnan(_1628) ? 1.0 : min(_1628, 1.0));
        _1975 = (((((_2034 * _1802) + _519) * cbLight._m0[_1985].x) * _2053) * _2054) + _1911;
        _1977 = (((((_2034 * _1804) + _521) * cbLight._m0[_1985].y) * _2053) * _2054) + _1912;
        _1979 = (((((_2034 * _1805) + _522) * cbLight._m0[_1985].z) * _2053) * _2054) + _1913;
    }
    float _2089;
    float _2091;
    float _2093;
    if (_1706)
    {
        _2089 = _1975;
        _2091 = _1977;
        _2093 = _1979;
    }
    else
    {
        uint _2100 = _1613 + 3u;
        uint _2104 = _1613 + 11u;
        float _2118 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2100].w)) * _448) * 0.949999988079071044921875);
        float _2119 = _2118 * _2118;
        float _2120 = cbLight._m0[_2100].x + _383;
        float _2121 = cbLight._m0[_2100].y + _384;
        float _2122 = cbLight._m0[_2100].z + _385;
        float _2126 = inversesqrt(dot(vec3(_2120, _2121, _2122), vec3(_2120, _2121, _2122)));
        float _2127 = _2126 * _2120;
        float _2128 = _2126 * _2121;
        float _2129 = _2126 * _2122;
        float _2130 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_2100].xyz));
        float _4061 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
        float _2133 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _2134 = dot(vec3(_301, _302, _303), vec3(_2127, _2128, _2129));
        float _4072 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        float _2137 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _2138 = dot(vec3(cbLight._m0[_2100].xyz), vec3(_2127, _2128, _2129));
        float _4083 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
        float _2142 = _2119 * _2119;
        float _2146 = ((_2137 * _2137) * (_2142 + (-1.0))) + 1.0;
        float _2153 = exp2(log2(1.0 - (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) * 5.0);
        float _2160 = 1.0 - _2119;
        float _2170 = (0.5 / (((_1780 * ((_2133 * _2160) + _2119)) + 9.9999999392252902907785028219223e-09) + (((_1780 * _2160) + _2119) * _2133))) * _2133;
        float _4094 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2172 = (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_2142 / ((_2146 * _2146) * 3.141590118408203125));
        float _2173 = isnan(1.0) ? _1629 : (isnan(_1629) ? 1.0 : min(_1629, 1.0));
        _2089 = (((((_2153 * _1802) + _519) * cbLight._m0[_2104].x) * _2172) * _2173) + _1975;
        _2091 = (((((_2153 * _1804) + _521) * cbLight._m0[_2104].y) * _2172) * _2173) + _1977;
        _2093 = (((((_2153 * _1805) + _522) * cbLight._m0[_2104].z) * _2172) * _2173) + _1979;
    }
    float _2308;
    float _2310;
    float _2312;
    float _2314;
    float _2316;
    float _2318;
    if (_1611.y == 0u)
    {
        float _2248 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2249 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2248;
        float _2250 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2248;
        float _2251 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2248;
        uvec4 _2263 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2264 = _2263.x;
        uint _2275 = uint((float(_2263.y) * floor(float(uint(cbSceneParam._m0[85u].y * _405) / _2264))) + floor(float(uint(cbSceneParam._m0[85u].x * _404) / _2264)));
        float _2285 = (log2(_2251 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2286 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
        uint _2289 = uint(isnan(14.0) ? _2286 : (isnan(_2286) ? 14.0 : min(_2286, 14.0)));
        uvec4 _2294 = texelFetch(g_lightClusterGridBuffer, int(((_2289 << 2u) + (_2275 << 6u)) >> 2u));
        uint _2295 = _2294.x;
        uint _2296 = _2263.z;
        float _2414;
        float _2416;
        float _2418;
        float _2420;
        float _2422;
        float _2424;
        if (((((1u << ((_2296 >> 4u) & 15u)) + 4294967295u) & _2295) == 0u) || ((_2296 & 240u) == 0u))
        {
            _2414 = 0.0;
            _2416 = 0.0;
            _2418 = 0.0;
            _2420 = 0.0;
            _2422 = 0.0;
            _2424 = 0.0;
        }
        else
        {
            float _2415;
            float _2417;
            float _2419;
            float _2421;
            float _2423;
            float _2425;
            float _2567 = 0.0;
            float _2568 = 0.0;
            float _2569 = 0.0;
            float _2570 = 0.0;
            float _2571 = 0.0;
            float _2572 = 0.0;
            uint _2573 = 0u;
            uint _2582;
            bool _2583;
            for (;;)
            {
                _2582 = texelFetch(g_lightClassification, int((((_2289 << 5u) + (_2275 << 9u)) + (_2573 << 2u)) >> 2u)).x;
                _2583 = _2582 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2583)
                {
                    frontier_phi_66_pred = _2567;
                    frontier_phi_66_pred_1 = _2572;
                    frontier_phi_66_pred_2 = _2571;
                    frontier_phi_66_pred_3 = _2570;
                    frontier_phi_66_pred_4 = _2569;
                    frontier_phi_66_pred_5 = _2568;
                }
                else
                {
                    float _2712;
                    float _2713;
                    float _2714;
                    float _2715;
                    float _2716;
                    float _2717;
                    uint _2718;
                    _2712 = _2567;
                    _2713 = _2568;
                    _2714 = _2569;
                    _2715 = _2570;
                    _2716 = _2571;
                    _2717 = _2572;
                    _2718 = _2582;
                    float _2639;
                    float _2640;
                    float _2641;
                    float _2642;
                    float _2643;
                    float _2644;
                    for (;;)
                    {
                        uint _2722 = uint(findLSB(_2718)) + (_2573 << 5u);
                        uint _2719 = (_2718 + 4294967295u) & _2718;
                        uint _2724 = _2722 * 48u;
                        vec4 _2738 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2724)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 3u)).x));
                        uint _2744 = (_2722 * 48u) + 4u;
                        vec4 _2757 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2744)).x, texelFetch(g_PointLightRenderingBuffer, int(_2744 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2744 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2744 + 3u)).x));
                        uint _2763 = (_2722 * 48u) + 8u;
                        vec3 _2774 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2763)).x, texelFetch(g_PointLightRenderingBuffer, int(_2763 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2763 + 2u)).x));
                        float _2778 = _2738.x - _2249;
                        float _2779 = _2738.y - _2250;
                        float _2780 = _2738.z - _2251;
                        float _2781 = dot(vec3(_2778, _2779, _2780), vec3(_2778, _2779, _2780));
                        float _2784 = inversesqrt(_2781);
                        float _2785 = _2784 * _2778;
                        float _2786 = _2784 * _2779;
                        float _2787 = _2784 * _2780;
                        float _2788 = dot(vec3(_429, _432, _435), vec3(_2785, _2786, _2787));
                        float _2793 = 1.0 - (_2781 * _2738.w);
                        float _4120 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
                        float _2794 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
                        float _2795 = sqrt(_2781) * _2757.w;
                        float _2798 = 1.39999997615814208984375 / (_2795 + 1.39999997615814208984375);
                        float _2799 = _2798 * _2798;
                        float _2802 = ((1.0 - _2799) * _2788) + _2799;
                        float _2805 = _2795 * _2795;
                        float _2809 = ((isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0))) * _2794) / ((_2805 * 0.699999988079071044921875) + 1.0);
                        float _2813 = (-0.0) - _2249;
                        float _2814 = (-0.0) - _2250;
                        float _2815 = (-0.0) - _2251;
                        float _2819 = inversesqrt(dot(vec3(_2813, _2814, _2815), vec3(_2813, _2814, _2815)));
                        float _2820 = _2819 * _2813;
                        float _2821 = _2819 * _2814;
                        float _2822 = _2819 * _2815;
                        float _2830 = exp2(log2(1.0 / ((_2805 * 3.5) + 5.0)) * 0.25);
                        float _2831 = 1.0 - _550;
                        float _2838 = sqrt(1.0 - ((1.0 - (_2831 * _2831)) * (1.0 - (_2830 * _2830))));
                        float _2839 = _2838 * _2838;
                        float _2840 = _2839 * _2839;
                        float _2841 = _2820 + _2785;
                        float _2842 = _2821 + _2786;
                        float _2843 = _2822 + _2787;
                        float _2847 = inversesqrt(dot(vec3(_2841, _2842, _2843), vec3(_2841, _2842, _2843)));
                        float _2851 = dot(vec3(_429, _432, _435), vec3(_2820, _2821, _2822));
                        float _4136 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
                        float _2854 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
                        float _2855 = dot(vec3(_429, _432, _435), vec3(_2847 * _2841, _2847 * _2842, _2847 * _2843));
                        float _4147 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
                        float _2858 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
                        float _2862 = ((_2858 * _2858) * (_2840 + (-1.0))) + 1.0;
                        float _2863 = _2798 * _2839;
                        float _2864 = _2863 * _2863;
                        float _2867 = ((1.0 - _2864) * _2788) + _2864;
                        float _4158 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
                        float _2868 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
                        float _2869 = 1.0 - _2839;
                        float _2879 = (0.5 / (((_2868 * ((_2854 * _2869) + _2839)) + 9.9999999392252902907785028219223e-09) + (((_2868 * _2869) + _2839) * _2854))) * _2868;
                        float _4169 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
                        float _2890 = (((_2840 * 3.1415927410125732421875) * (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0)))) / ((_2862 * _2862) * ((_2805 * 2.1991131305694580078125) + 3.141590118408203125))) * _2794;
                        _2642 = (_2809 * _2757.x) + _2715;
                        _2643 = (_2809 * _2757.y) + _2716;
                        _2644 = (_2809 * _2757.z) + _2717;
                        _2639 = (_2890 * _2774.x) + _2712;
                        _2640 = (_2890 * _2774.y) + _2713;
                        _2641 = (_2890 * _2774.z) + _2714;
                        if (_2719 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2712 = _2639;
                            _2713 = _2640;
                            _2714 = _2641;
                            _2715 = _2642;
                            _2716 = _2643;
                            _2717 = _2644;
                            _2718 = _2719;
                        }
                    }
                    frontier_phi_66_pred = _2639;
                    frontier_phi_66_pred_1 = _2644;
                    frontier_phi_66_pred_2 = _2643;
                    frontier_phi_66_pred_3 = _2642;
                    frontier_phi_66_pred_4 = _2641;
                    frontier_phi_66_pred_5 = _2640;
                }
                _2415 = frontier_phi_66_pred;
                _2425 = frontier_phi_66_pred_1;
                _2423 = frontier_phi_66_pred_2;
                _2421 = frontier_phi_66_pred_3;
                _2419 = frontier_phi_66_pred_4;
                _2417 = frontier_phi_66_pred_5;
                uint _2574 = _2573 + 1u;
                if (_2574 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2567 = _2415;
                    _2568 = _2417;
                    _2569 = _2419;
                    _2570 = _2421;
                    _2571 = _2423;
                    _2572 = _2425;
                    _2573 = _2574;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2414 = _2415;
            _2416 = _2417;
            _2418 = _2419;
            _2420 = _2421;
            _2422 = _2423;
            _2424 = _2425;
        }
        uvec4 _2428 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2429 = _2428.z;
        uint _2431 = (_2429 >> 8u) & 15u;
        float _2535;
        float _2537;
        float _2539;
        float _2541;
        float _2543;
        float _2545;
        if (((4294967295u << _2431) & _2295) == 0u)
        {
            _2535 = _2414;
            _2537 = _2416;
            _2539 = _2418;
            _2541 = _2420;
            _2543 = _2422;
            _2545 = _2424;
        }
        else
        {
            float _2560 = inversesqrt(dot(vec3(_2249, _2250, _2251), vec3(_2249, _2250, _2251)));
            float _2561 = _2560 * _2249;
            float _2562 = _2560 * _2250;
            float _2563 = _2560 * _2251;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2431 < ((_2429 >> 12u) & 15u))
            {
                float _2536;
                float _2538;
                float _2540;
                float _2542;
                float _2544;
                float _2546;
                float _2695 = _2414;
                float _2696 = _2416;
                float _2697 = _2418;
                float _2698 = _2420;
                float _2699 = _2422;
                float _2700 = _2424;
                uint _2701 = _2431;
                uint _2710;
                bool _2711;
                for (;;)
                {
                    _2710 = texelFetch(g_lightClassification, int((((_2289 << 5u) + (_2275 << 9u)) + (_2701 << 2u)) >> 2u)).x;
                    _2711 = _2710 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2711)
                    {
                        frontier_phi_77_pred = _2700;
                        frontier_phi_77_pred_1 = _2699;
                        frontier_phi_77_pred_2 = _2698;
                        frontier_phi_77_pred_3 = _2697;
                        frontier_phi_77_pred_4 = _2696;
                        frontier_phi_77_pred_5 = _2695;
                    }
                    else
                    {
                        float _2904;
                        float _2905;
                        float _2906;
                        float _2907;
                        float _2908;
                        float _2909;
                        float _3200;
                        float _3201;
                        float _3202;
                        float _3203;
                        float _3204;
                        float _3205;
                        float _2917 = _2695;
                        float _2918 = _2696;
                        float _2919 = _2697;
                        float _2920 = _2698;
                        float _2921 = _2699;
                        float _2922 = _2700;
                        uint _2923 = _2710;
                        uint _2924;
                        vec4 _2949;
                        float _2950;
                        vec4 _2965;
                        vec3 _2977;
                        vec4 _2993;
                        vec4 _3009;
                        float _3056;
                        bool _3057;
                        for (;;)
                        {
                            uint _2934 = ((_2701 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2923));
                            _2924 = (_2923 + 4294967295u) & _2923;
                            uint _2936 = _2934 * 40u;
                            _2949 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2936)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 3u)).x));
                            _2950 = _2949.w;
                            uint _2952 = (_2934 * 40u) + 4u;
                            _2965 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2952)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 3u)).x));
                            uint _2967 = (_2934 * 40u) + 8u;
                            _2977 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2967)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 2u)).x));
                            uint _2980 = (_2934 * 40u) + 16u;
                            _2993 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2980)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 3u)).x));
                            uint _2996 = (_2934 * 40u) + 20u;
                            _3009 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2996)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 3u)).x));
                            uint _3012 = (_2934 * 40u) + 24u;
                            vec4 _3025 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3012)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 3u)).x));
                            uint _3031 = (_2934 * 40u) + 28u;
                            vec4 _3044 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3031)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 3u)).x));
                            _3056 = fma(_2251, _3044.z, fma(_2250, _3044.y, _3044.x * _2249)) + _3044.w;
                            _3057 = !((fma(_2251, _3025.z, fma(_2250, _3025.y, _3025.x * _2249)) + _3025.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3057)
                            {
                                float _3084 = _2949.x - _2249;
                                float _3085 = _2949.y - _2250;
                                float _3086 = _2949.z - _2251;
                                float _3087 = dot(vec3(_3084, _3085, _3086), vec3(_3084, _3085, _3086));
                                float _3090 = inversesqrt(_3087);
                                float _3091 = _3090 * _3084;
                                float _3092 = _3090 * _3085;
                                float _3093 = _3090 * _3086;
                                float _3097 = 1.0 - (_3087 / (_2950 * _2950));
                                float _4180 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                                float _3098 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
                                float _3102 = sqrt(_3087) * _2965.w;
                                float _3104 = 1.39999997615814208984375 / (_3102 + 1.39999997615814208984375);
                                float _3105 = _3104 * _3104;
                                float _3108 = ((1.0 - _3105) * dot(vec3(_3091, _3092, _3093), vec3(_429, _432, _435))) + _3105;
                                float _3111 = _3102 * _3102;
                                float _3115 = (fma(_2251, _2993.z, fma(_2250, _2993.y, _2993.x * _2249)) + _2993.w) / _3056;
                                float _3116 = (fma(_2251, _3009.z, fma(_2250, _3009.y, _3009.x * _2249)) + _3009.w) / _3056;
                                float _3120 = 1.0 - dot(vec2(_3115, _3116), vec2(_3115, _3116));
                                float _4196 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                                float _3121 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
                                float _3122 = _3121 * (((isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0))) * _3098) / ((_3111 * 0.699999988079071044921875) + 1.0));
                                float _3134 = exp2(log2(1.0 / ((_3111 * 3.5) + 5.0)) * 0.25);
                                float _3135 = 1.0 - _550;
                                float _3142 = sqrt(1.0 - ((1.0 - (_3135 * _3135)) * (1.0 - (_3134 * _3134))));
                                float _3143 = _3142 * _3142;
                                float _3144 = _3143 * _3143;
                                float _3145 = _3091 - _2561;
                                float _3146 = _3092 - _2562;
                                float _3147 = _3093 - _2563;
                                float _3151 = inversesqrt(dot(vec3(_3145, _3146, _3147), vec3(_3145, _3146, _3147)));
                                float _3155 = dot(vec3(_429, _432, _435), vec3((-0.0) - _2561, (-0.0) - _2562, (-0.0) - _2563));
                                float _4207 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                                float _3158 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
                                float _3159 = dot(vec3(_429, _432, _435), vec3(_3151 * _3145, _3151 * _3146, _3151 * _3147));
                                float _4218 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                                float _3162 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
                                float _3166 = ((_3162 * _3162) * (_3144 + (-1.0))) + 1.0;
                                float _3167 = _3104 * _3143;
                                float _3168 = _3167 * _3167;
                                float _3174 = ((1.0 - _3168) * dot(vec3(_429, _432, _435), vec3(_3091, _3092, _3093))) + _3168;
                                float _4229 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
                                float _3175 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
                                float _3176 = 1.0 - _3143;
                                float _3186 = (0.5 / (((_3175 * ((_3158 * _3176) + _3143)) + 9.9999999392252902907785028219223e-09) + (((_3175 * _3176) + _3143) * _3158))) * _3175;
                                float _4240 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                                float _3196 = (_3121 * _3098) * (((_3144 * 3.1415927410125732421875) * (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0)))) / ((_3166 * _3166) * ((_3111 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3122 * _2965.y;
                                frontier_phi_83_pred_1 = _3122 * _2965.x;
                                frontier_phi_83_pred_2 = _3196 * _2977.z;
                                frontier_phi_83_pred_3 = _3196 * _2977.y;
                                frontier_phi_83_pred_4 = _3196 * _2977.x;
                                frontier_phi_83_pred_5 = _3122 * _2965.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3204 = frontier_phi_83_pred;
                            _3203 = frontier_phi_83_pred_1;
                            _3202 = frontier_phi_83_pred_2;
                            _3201 = frontier_phi_83_pred_3;
                            _3200 = frontier_phi_83_pred_4;
                            _3205 = frontier_phi_83_pred_5;
                            _2907 = _3203 + _2920;
                            _2908 = _3204 + _2921;
                            _2909 = _3205 + _2922;
                            _2904 = _3200 + _2917;
                            _2905 = _3201 + _2918;
                            _2906 = _3202 + _2919;
                            if (_2924 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2917 = _2904;
                                _2918 = _2905;
                                _2919 = _2906;
                                _2920 = _2907;
                                _2921 = _2908;
                                _2922 = _2909;
                                _2923 = _2924;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2909;
                        frontier_phi_77_pred_1 = _2908;
                        frontier_phi_77_pred_2 = _2907;
                        frontier_phi_77_pred_3 = _2906;
                        frontier_phi_77_pred_4 = _2905;
                        frontier_phi_77_pred_5 = _2904;
                    }
                    _2546 = frontier_phi_77_pred;
                    _2544 = frontier_phi_77_pred_1;
                    _2542 = frontier_phi_77_pred_2;
                    _2540 = frontier_phi_77_pred_3;
                    _2538 = frontier_phi_77_pred_4;
                    _2536 = frontier_phi_77_pred_5;
                    uint _2702 = _2701 + 1u;
                    if (_2702 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2695 = _2536;
                        _2696 = _2538;
                        _2697 = _2540;
                        _2698 = _2542;
                        _2699 = _2544;
                        _2700 = _2546;
                        _2701 = _2702;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2540;
                frontier_phi_58_59_ladder_1 = _2546;
                frontier_phi_58_59_ladder_2 = _2544;
                frontier_phi_58_59_ladder_3 = _2542;
                frontier_phi_58_59_ladder_4 = _2538;
                frontier_phi_58_59_ladder_5 = _2536;
            }
            else
            {
                frontier_phi_58_59_ladder = _2418;
                frontier_phi_58_59_ladder_1 = _2424;
                frontier_phi_58_59_ladder_2 = _2422;
                frontier_phi_58_59_ladder_3 = _2420;
                frontier_phi_58_59_ladder_4 = _2416;
                frontier_phi_58_59_ladder_5 = _2414;
            }
            _2535 = frontier_phi_58_59_ladder_5;
            _2537 = frontier_phi_58_59_ladder_4;
            _2539 = frontier_phi_58_59_ladder;
            _2541 = frontier_phi_58_59_ladder_3;
            _2543 = frontier_phi_58_59_ladder_2;
            _2545 = frontier_phi_58_59_ladder_1;
        }
        float _2550 = isnan(1.0) ? _534 : (isnan(_534) ? 1.0 : min(_534, 1.0));
        _2308 = (_2550 * _2541) + _1744;
        _2310 = (_2550 * _2543) + _1746;
        _2312 = (_2550 * _2545) + _1748;
        _2314 = ((_2535 * _519) * _2550) + _2089;
        _2316 = ((_2537 * _521) * _2550) + _2091;
        _2318 = ((_2539 * _522) * _2550) + _2093;
    }
    else
    {
        _2308 = _1744;
        _2310 = _1746;
        _2312 = _1748;
        _2314 = _2089;
        _2316 = _2091;
        _2318 = _2093;
    }
    vec4 _2324 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4256 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _4267 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _4278 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _2348 = (((isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_2308 + ((isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0))) * _534))) + ((_2314 + ((isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))) * _1376)) * cbPerFrame._m0[3u].x)) + (_2324.x * cbMtdParam._m0[3u].x);
    float _2350 = ((_2324.y * cbMtdParam._m0[3u].x) + ((_2316 + ((isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0))) * _1376)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_2310 + ((isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0))) * _534)));
    float _2352 = ((_2324.z * cbMtdParam._m0[3u].x) + ((_2318 + ((isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))) * _1376)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_2312 + ((isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0))) * _534)));
    float _2353 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2354 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2355 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    uint _2356 = _461 + 6u;
    float _2364 = _404 / cbSceneParam._m0[86u].x;
    float _2365 = _405 / cbSceneParam._m0[86u].y;
    vec4 _2379 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2364, _2365, (log2((isnan(cbSceneParam._m0[77u].w) ? _324 : (isnan(_324) ? cbSceneParam._m0[77u].w : min(_324, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2381 = _2379.x;
    float _2382 = _2379.y;
    float _2383 = _2379.z;
    float _2384 = _2379.w;
    float _2477;
    float _2479;
    float _2481;
    float _2483;
    if (_324 > cbSceneParam._m0[78u].w)
    {
        float _2439 = isnan(_324) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _324 : min(cbSceneParam._m0[80u].w, _324));
        float _2440 = _2439 / _324;
        float _2451 = _2440 * _376;
        float _2452 = _377 * _2440;
        float _2453 = (-0.0) - _2452;
        float _2455 = _2440 * _378;
        float _2457 = (cbSceneParam._m0[77u].w * _2453) / _2439;
        float _2458 = _2457 + cbSceneParam._m0[79u].w;
        float _2459 = cbSceneParam._m0[79u].w - _2452;
        float _2465 = sqrt(((_2451 * _2451) + (_2452 * _2452)) + (_2455 * _2455));
        float _2468 = (1.0 - (cbSceneParam._m0[77u].w / _2439)) * _2465;
        float _2473 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2475 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2652;
        if (abs((_2453 - _2457) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2652 = ((((_2458 > 0.0) ? exp2(_2473 * _2458) : (2.0 - exp2(_2475 * _2458))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2468;
        }
        else
        {
            float _2596 = 1.0 / cbSceneParam._m0[80u].x;
            float _2597 = isnan(_2459) ? _2458 : (isnan(_2458) ? _2459 : max(_2458, _2459));
            float _2598 = isnan(_2459) ? _2458 : (isnan(_2458) ? _2459 : min(_2458, _2459));
            float _2607 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : min(_2597, 0.0));
            float _2608 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : min(_2598, 0.0));
            _2652 = ((abs(_2465 / _2453) * cbSceneParam._m0[80u].y) * ((((_2607 - _2608) * 2.0) - ((exp2(_2473 * (isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0)))) - exp2(_2473 * (isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0))))) * _2596)) - ((exp2(_2475 * _2607) - exp2(_2475 * _2608)) * _2596))) + (_2468 * cbSceneParam._m0[80u].z);
        }
        vec4 _2654 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2364, _2365, 1.0), 0.0);
        float _2663 = exp2((_2652 * (-1.44269502162933349609375)) * (1.0 - _2654.w));
        float _2664 = log2(_2663);
        float _2680 = log2(_2384);
        _2477 = (exp2(_2680 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2664 * cbSceneParam._m0[78u].x)) * _2654.x) / cbSceneParam._m0[78u].x)) + _2381;
        _2479 = (exp2(_2680 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2664 * cbSceneParam._m0[78u].y)) * _2654.y) / cbSceneParam._m0[78u].y)) + _2382;
        _2481 = (exp2(_2680 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2664 * cbSceneParam._m0[78u].z)) * _2654.z) / cbSceneParam._m0[78u].z)) + _2383;
        _2483 = _2663 * _2384;
    }
    else
    {
        _2477 = _2381;
        _2479 = _2382;
        _2481 = _2383;
        _2483 = _2384;
    }
    bool _2690;
    vec4 _2493;
    vec4 _2515;
    float _2517;
    float _2521;
    float _2522;
    float _2523;
    float _2524;
    bool _2534;
    for (;;)
    {
        _2493 = cbMatDynParam._m0[0u];
        float _2495 = roundEven(_2493.y);
        bool _2496 = _2495 == 3.0;
        float _2497 = log2(_2483);
        float _2504 = exp2(_2497 * cbSceneParam._m0[78u].x) * _2353;
        float _2505 = exp2(_2497 * cbSceneParam._m0[78u].y) * _2354;
        float _2506 = exp2(_2497 * cbSceneParam._m0[78u].z) * _2355;
        float _2513 = _392 + (-0.5);
        _2515 = cbMtdParam._m0[1u];
        _2517 = _2515.y * _2513;
        float _2520 = (_2495 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2521 = _2520 * (_2496 ? _2504 : (_2504 + (cbSceneParam._m0[72u].w * _2477)));
        _2522 = _2520 * (_2496 ? _2505 : (_2505 + (cbSceneParam._m0[72u].w * _2479)));
        _2523 = _2520 * (_2496 ? _2506 : (_2506 + (cbSceneParam._m0[72u].w * _2481)));
        _2524 = _2513 * 0.999000012874603271484375;
        _2534 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2534)
        {
            if ((cbInstanceData._m0[_461 + 7u].x + _2524) < 0.5)
            {
                _2690 = true;
                break;
            }
        }
        uint _2631 = _463 + uint(_2493.w);
        if ((cbInstanceData._m0[_2631].w < 1.0) && ((cbInstanceData._m0[_2631].w + _2524) < 0.5))
        {
            _2690 = true;
            break;
        }
        if ((_2517 + _241) < _2515.x)
        {
            _2690 = true;
            break;
        }
        _2690 = false;
        break;
    }
    float _2895;
    if (_2690)
    {
        discard_state = true;
        _2895 = 0.0;
    }
    else
    {
        _2895 = cbInstanceData._m0[_2356].w;
    }
    SV_Target.x = _2521;
    SV_Target.y = _2522;
    SV_Target.z = _2523;
    SV_Target.w = _2895;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2356].w;
    discard_exit();
}


