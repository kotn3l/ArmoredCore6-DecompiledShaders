#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M0_M1_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M0_M1_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _872;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _231 = texture(sampler2D(C_AMSN_M0_M1_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _237 = _231.x * cbMtdParam._m0[9u].x;
    float _238 = _231.y * cbMtdParam._m0[9u].y;
    float _239 = _231.z * cbMtdParam._m0[9u].z;
    vec4 _251 = texture(sampler2D(C_AMSN_M0_M1_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _255 = _251.z;
    float _259 = (_251.x * 2.0) + (-1.0);
    float _261 = (_251.y * 2.0) + (-1.0);
    float _262 = dot(vec2(_259, _261), vec2(_259, _261));
    float _3251 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _268 = sqrt(1.0 - (isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0))));
    float _271 = fma(_268, _201 * NORMAL.x, fma(_261, _208 * TANGENT.x, (_194 * _186) * _259));
    float _274 = fma(_268, _201 * NORMAL.y, fma(_261, _208 * TANGENT.y, (_194 * _187) * _259));
    float _277 = fma(_268, _201 * NORMAL.z, fma(_261, _208 * TANGENT.z, (_194 * _188) * _259));
    float _281 = inversesqrt(dot(vec3(_271, _274, _277), vec3(_271, _274, _277)));
    float _282 = _281 * _271;
    float _283 = _281 * _274;
    float _284 = _281 * _277;
    float _3262 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _285 = isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0));
    float _3273 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3284 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3295 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _304 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _346 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _356 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _346);
    float _357 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _346);
    float _358 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _346);
    float _362 = inversesqrt(dot(vec3(_356, _357, _358), vec3(_356, _357, _358)));
    float _363 = _356 * _362;
    float _364 = _357 * _362;
    float _365 = _358 * _362;
    float _371 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _372 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _374 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _376 = _374.w;
    float _397 = fma(_284, cbSceneParam._m0[5u].z, fma(_283, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _282));
    float _400 = fma(_284, cbSceneParam._m0[6u].z, fma(_283, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _282));
    float _403 = fma(_284, cbSceneParam._m0[7u].z, fma(_283, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _282));
    vec4 _405 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _416 = (((_405.y - _285) + (_405.w * _285)) * cbMtdParam._m0[3u].x) + _285;
    uint _429 = uint(roundEven(NORMAL.w)) * 13u;
    uint _432 = (_429 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _438 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0)))) * cbInstanceData._m0[_432].x;
    float _439 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0)))) * cbInstanceData._m0[_432].y;
    float _440 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0)))) * cbInstanceData._m0[_432].z;
    float _3306 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _441 = isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0));
    float _3317 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _442 = isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0));
    float _3328 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _443 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
    vec4 _444 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _449 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _455 = cbMtdParam._m0[3u].x * _449.x;
    float _468 = (cbMtdParam._m0[3u].x * (((_441 * _376) - _441) + _444.x)) + _441;
    float _469 = (cbMtdParam._m0[3u].x * (((_442 * _376) - _442) + _444.y)) + _442;
    float _470 = (cbMtdParam._m0[3u].x * (((_443 * _376) - _443) + _444.z)) + _443;
    float _471 = 1.0 - _455;
    float _472 = _468 * _471;
    float _473 = _469 * _471;
    float _474 = _470 * _471;
    float _479 = (_468 + (-0.039999999105930328369140625)) * _455;
    float _480 = (_469 + (-0.039999999105930328369140625)) * _455;
    float _481 = (_470 + (-0.039999999105930328369140625)) * _455;
    float _482 = _479 + 0.039999999105930328369140625;
    float _484 = _480 + 0.039999999105930328369140625;
    float _485 = _481 + 0.039999999105930328369140625;
    vec4 _494 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _371, cbSceneParam._m0[86u].y * _372));
    float _497 = _494.x * TEXCOORD_4;
    float _498 = dot(vec3(_282, _283, _284), vec3(_363, _364, _365));
    float _501 = _498 * 2.0;
    float _505 = (_501 * _282) - _363;
    float _506 = (_501 * _283) - _364;
    float _507 = (_501 * _284) - _365;
    float _511 = abs(dot(vec3(_363, _364, _365), vec3(_282, _283, _284)));
    float _3339 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _513 = sqrt(_416);
    float _526 = exp2((_513 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_513 * 3.0));
    float _532 = (1.0 - _526) * ((_513 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _533 = _526 * _513;
    float _561 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _565 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _569 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _871;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _596 = fma(_569, cbModelParam._m0[26u].z, fma(_565, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _561));
        float _600 = fma(_569, cbModelParam._m0[27u].z, fma(_565, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _561));
        float _604 = fma(_569, cbModelParam._m0[28u].z, fma(_565, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _561));
        float _629 = _561 + _282;
        float _630 = _565 + _283;
        float _631 = _569 + _284;
        float _641 = fma(_631, cbModelParam._m0[26u].z, fma(_630, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _629)) - _596;
        float _642 = fma(_631, cbModelParam._m0[27u].z, fma(_630, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _629)) - _600;
        float _643 = fma(_631, cbModelParam._m0[28u].z, fma(_630, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _629)) - _604;
        float _647 = inversesqrt(dot(vec3(_641, _642, _643), vec3(_641, _642, _643)));
        float _660 = ((_647 * _641) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_596 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _661 = ((_647 * _642) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_600 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _662 = ((_647 * _643) / cbModelParam._m0[34u].z) + ((((((_604 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _665 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_660, _661, _662), 0.0);
        vec4 _672 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_660, _661, _662), 0.0);
        vec4 _679 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_660, _661, _662), 0.0);
        vec4 _686 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_660, _661, _662), 0.0);
        float _699 = exp2((_665.w + (-0.5)) * 20.0) * 2.0;
        float _700 = _699 * (_665.x + (-0.5));
        float _701 = _699 * (_665.y + (-0.5));
        float _702 = _699 * (_665.z + (-0.5));
        float _709 = exp2((_672.w + (-0.5)) * 20.0) * 2.0;
        float _710 = _709 * (_672.x + (-0.5));
        float _711 = _709 * (_672.y + (-0.5));
        float _712 = _709 * (_672.z + (-0.5));
        float _719 = exp2((_679.w + (-0.5)) * 20.0) * 2.0;
        float _720 = _719 * (_679.x + (-0.5));
        float _721 = _719 * (_679.y + (-0.5));
        float _722 = _719 * (_679.z + (-0.5));
        float _729 = exp2((_686.w + (-0.5)) * 20.0) * 2.0;
        float _730 = _729 * (_686.x + (-0.5));
        float _731 = _729 * (_686.y + (-0.5));
        float _732 = _729 * (_686.z + (-0.5));
        float _733 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _734 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _735 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _736 = _700 * 0.5;
        float _737 = _710 * 0.5;
        float _738 = _720 * 0.5;
        float _739 = dot(vec3(_736, _737, _738), vec3(_736, _737, _738));
        float _744 = (_739 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_739);
        float _753 = (dot(vec3(_282, _283, _284), vec3(_744 * _736, _744 * _737, _744 * _738)) + 1.0) * 0.5;
        float _3365 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _763 = sqrt(((_737 * _737) + (_736 * _736)) + (_738 * _738)) / (_733 + 9.9999997473787516355514526367188e-06);
        float _3376 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _764 = isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0));
        float _765 = _764 * 2.0;
        float _769 = (1.0 - _764) / (_764 + 1.0);
        float _3387 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _770 = isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0));
        float _779 = ((((1.0 - _770) * (_765 + 2.0)) * exp2(log2(isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0))) * (_765 + 1.0))) + _770) * _733;
        float _780 = _701 * 0.5;
        float _781 = _711 * 0.5;
        float _782 = _721 * 0.5;
        float _783 = dot(vec3(_780, _781, _782), vec3(_780, _781, _782));
        float _788 = (_783 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_783);
        float _796 = (dot(vec3(_282, _283, _284), vec3(_788 * _780, _788 * _781, _788 * _782)) + 1.0) * 0.5;
        float _3398 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _805 = sqrt(((_781 * _781) + (_780 * _780)) + (_782 * _782)) / (_734 + 9.9999997473787516355514526367188e-06);
        float _3409 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _806 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
        float _807 = _806 * 2.0;
        float _811 = (1.0 - _806) / (_806 + 1.0);
        float _3420 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _812 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
        float _821 = ((((1.0 - _812) * (_807 + 2.0)) * exp2(log2(isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0))) * (_807 + 1.0))) + _812) * _734;
        float _822 = _702 * 0.5;
        float _823 = _712 * 0.5;
        float _824 = _722 * 0.5;
        float _825 = dot(vec3(_822, _823, _824), vec3(_822, _823, _824));
        float _830 = (_825 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_825);
        float _838 = (dot(vec3(_282, _283, _284), vec3(_830 * _822, _830 * _823, _830 * _824)) + 1.0) * 0.5;
        float _3431 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _847 = sqrt(((_823 * _823) + (_822 * _822)) + (_824 * _824)) / (_735 + 9.9999997473787516355514526367188e-06);
        float _3442 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _848 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
        float _849 = _848 * 2.0;
        float _853 = (1.0 - _848) / (_848 + 1.0);
        float _3453 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _854 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
        float _863 = ((((1.0 - _854) * (_849 + 2.0)) * exp2(log2(isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0))) * (_849 + 1.0))) + _854) * _735;
        _871 = _702;
        _873 = _701;
        _874 = _700;
        _875 = _712;
        _876 = _711;
        _877 = _710;
        _878 = _722;
        _879 = _721;
        _880 = _720;
        _881 = _735;
        _882 = _734;
        _883 = _733;
        _884 = cbModelParam._m0[36u].z * (isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0)));
        _885 = cbModelParam._m0[36u].z * (isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0)));
        _886 = cbModelParam._m0[36u].z * (isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0)));
    }
    else
    {
        _871 = _872;
        _873 = _872;
        _874 = _872;
        _875 = _872;
        _876 = _872;
        _877 = _872;
        _878 = _872;
        _879 = _872;
        _880 = _872;
        _881 = _872;
        _882 = _872;
        _883 = _872;
        _884 = 0.0;
        _885 = 0.0;
        _886 = 0.0;
    }
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _912 = fma(_569, cbModelParam._m0[30u].z, fma(_565, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _561));
        float _916 = fma(_569, cbModelParam._m0[31u].z, fma(_565, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _561));
        float _920 = fma(_569, cbModelParam._m0[32u].z, fma(_565, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _561));
        float _943 = _561 + _282;
        float _944 = _565 + _283;
        float _945 = _569 + _284;
        float _955 = fma(_945, cbModelParam._m0[30u].z, fma(_944, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _943)) - _912;
        float _956 = fma(_945, cbModelParam._m0[31u].z, fma(_944, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _943)) - _916;
        float _957 = fma(_945, cbModelParam._m0[32u].z, fma(_944, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _943)) - _920;
        float _961 = inversesqrt(dot(vec3(_955, _956, _957), vec3(_955, _956, _957)));
        float _974 = ((_961 * _955) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_912 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _975 = ((_961 * _956) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_916 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _976 = ((_961 * _957) / cbModelParam._m0[35u].z) + ((((((_920 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_974, _975, _976), 0.0);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_974, _975, _976), 0.0);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_974, _975, _976), 0.0);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_974, _975, _976), 0.0);
        float _1011 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_978.x + (-0.5));
        float _1013 = _1011 * (_978.y + (-0.5));
        float _1014 = _1011 * (_978.z + (-0.5));
        float _1021 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_985.x + (-0.5));
        float _1023 = _1021 * (_985.y + (-0.5));
        float _1024 = _1021 * (_985.z + (-0.5));
        float _1031 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_992.x + (-0.5));
        float _1033 = _1031 * (_992.y + (-0.5));
        float _1034 = _1031 * (_992.z + (-0.5));
        float _1041 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_999.x + (-0.5));
        float _1043 = _1041 * (_999.y + (-0.5));
        float _1044 = _1041 * (_999.z + (-0.5));
        float _1045 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1046 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1047 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1048 = _1012 * 0.5;
        float _1049 = _1022 * 0.5;
        float _1050 = _1032 * 0.5;
        float _1051 = dot(vec3(_1048, _1049, _1050), vec3(_1048, _1049, _1050));
        float _1056 = (_1051 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1051);
        float _1064 = (dot(vec3(_282, _283, _284), vec3(_1056 * _1048, _1056 * _1049, _1056 * _1050)) + 1.0) * 0.5;
        float _3494 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1073 = sqrt(((_1049 * _1049) + (_1048 * _1048)) + (_1050 * _1050)) / (_1045 + 9.9999997473787516355514526367188e-06);
        float _3505 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
        float _1075 = _1074 * 2.0;
        float _1079 = (1.0 - _1074) / (_1074 + 1.0);
        float _3516 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
        float _1089 = ((((1.0 - _1080) * (_1075 + 2.0)) * exp2(log2(isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0))) * (_1075 + 1.0))) + _1080) * _1045;
        float _1090 = _1013 * 0.5;
        float _1091 = _1023 * 0.5;
        float _1092 = _1033 * 0.5;
        float _1093 = dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092));
        float _1098 = (_1093 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1093);
        float _1106 = (dot(vec3(_282, _283, _284), vec3(_1098 * _1090, _1098 * _1091, _1098 * _1092)) + 1.0) * 0.5;
        float _3527 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1115 = sqrt(((_1091 * _1091) + (_1090 * _1090)) + (_1092 * _1092)) / (_1046 + 9.9999997473787516355514526367188e-06);
        float _3538 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
        float _1117 = _1116 * 2.0;
        float _1121 = (1.0 - _1116) / (_1116 + 1.0);
        float _3549 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _1131 = ((((1.0 - _1122) * (_1117 + 2.0)) * exp2(log2(isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0))) * (_1117 + 1.0))) + _1122) * _1046;
        float _1132 = _1014 * 0.5;
        float _1133 = _1024 * 0.5;
        float _1134 = _1034 * 0.5;
        float _1135 = dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134));
        float _1140 = (_1135 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1135);
        float _1148 = (dot(vec3(_282, _283, _284), vec3(_1140 * _1132, _1140 * _1133, _1140 * _1134)) + 1.0) * 0.5;
        float _3560 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1157 = sqrt(((_1133 * _1133) + (_1132 * _1132)) + (_1134 * _1134)) / (_1047 + 9.9999997473787516355514526367188e-06);
        float _3571 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
        float _1159 = _1158 * 2.0;
        float _1163 = (1.0 - _1158) / (_1158 + 1.0);
        float _3582 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _1173 = ((((1.0 - _1164) * (_1159 + 2.0)) * exp2(log2(isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0))) * (_1159 + 1.0))) + _1164) * _1047;
        _1181 = _1014;
        _1182 = _1013;
        _1183 = _1012;
        _1184 = _1024;
        _1185 = _1023;
        _1186 = _1022;
        _1187 = _1034;
        _1188 = _1033;
        _1189 = _1032;
        _1190 = _1047;
        _1191 = _1046;
        _1192 = _1045;
        _1193 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0)));
        _1194 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0)));
        _1195 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)));
    }
    else
    {
        _1181 = _872;
        _1182 = _872;
        _1183 = _872;
        _1184 = _872;
        _1185 = _872;
        _1186 = _872;
        _1187 = _872;
        _1188 = _872;
        _1189 = _872;
        _1190 = _872;
        _1191 = _872;
        _1192 = _872;
        _1193 = 0.0;
        _1194 = 0.0;
        _1195 = 0.0;
    }
    float _1205 = (cbModelParam._m0[1u].x * (_1193 - _884)) + _884;
    float _1206 = (cbModelParam._m0[1u].x * (_1194 - _885)) + _885;
    float _1207 = (cbModelParam._m0[1u].x * (_1195 - _886)) + _886;
    float _1228 = fma(_1207, cbSceneParam._m0[89u].z, fma(_1206, cbSceneParam._m0[89u].y, _1205 * cbSceneParam._m0[89u].x));
    float _1231 = fma(_1207, cbSceneParam._m0[90u].z, fma(_1206, cbSceneParam._m0[90u].y, _1205 * cbSceneParam._m0[90u].x));
    float _1234 = fma(_1207, cbSceneParam._m0[91u].z, fma(_1206, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1205));
    float _1249 = _505 * 0.5;
    float _1250 = _506 * 0.5;
    float _1251 = _507 * 0.5;
    float _1252 = dot(vec4(_1249, _1250, _1251, 1.0), vec4(_1183, _1186, _1189, _1192));
    float _1255 = dot(vec4(_1249, _1250, _1251, 1.0), vec4(_1182, _1185, _1188, _1191));
    float _1258 = dot(vec4(_1249, _1250, _1251, 1.0), vec4(_1181, _1184, _1187, _1190));
    float _1292;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1265 = dot(vec4(_1249, _1250, _1251, 1.0), vec4(_871, _875, _878, _881));
        float _1269 = dot(vec4(_1249, _1250, _1251, 1.0), vec4(_873, _876, _879, _882));
        float _1273 = dot(vec4(_1249, _1250, _1251, 1.0), vec4(_874, _877, _880, _883));
        float _1280 = dot(vec4(cbModelParam._m0[39u]), vec4(_1249, _1250, _1251, 1.0));
        _1292 = dot(vec3(isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)), isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)), isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1280) ? 0.0 : (isnan(0.0) ? _1280 : max(0.0, _1280))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1292 = 1.0;
    }
    float _1303;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1294 = dot(vec4(cbModelParam._m0[40u]), vec4(_1249, _1250, _1251, 1.0));
        _1303 = dot(vec3(isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)), isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)), isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1294) ? 0.0 : (isnan(0.0) ? _1294 : max(0.0, _1294))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1303 = 1.0;
    }
    float _1307 = (_1303 * cbModelParam._m0[1u].x) + (_1292 * (1.0 - cbModelParam._m0[1u].x));
    float _1317 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _416);
    float _1318 = isnan(_1317) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1317 : min(cbModelParam._m0[25u].z, _1317));
    float _1400;
    float _1402;
    float _1404;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1367 = fma(_569, cbModelParam._m0[13u].z, fma(_565, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _561)) + cbModelParam._m0[13u].w;
        float _1371 = fma(_569, cbModelParam._m0[14u].z, fma(_565, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _561)) + cbModelParam._m0[14u].w;
        float _1375 = fma(_569, cbModelParam._m0[15u].z, fma(_565, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _561)) + cbModelParam._m0[15u].w;
        float _1378 = fma(_507, cbModelParam._m0[13u].z, fma(_506, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _505));
        float _1381 = fma(_507, cbModelParam._m0[14u].z, fma(_506, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _505));
        float _1384 = fma(_507, cbModelParam._m0[15u].z, fma(_506, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _505));
        float _1412;
        if (_1378 > 0.0)
        {
            _1412 = abs((1.0 - _1367) / _1378);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1378 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1367 + 1.0) / _1378);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1412 = frontier_phi_14_12_ladder;
        }
        float _1641;
        if (_1381 > 0.0)
        {
            _1641 = abs((1.0 - _1371) / _1381);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1381 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1371 + 1.0) / _1381);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1641 = frontier_phi_23_19_ladder;
        }
        float _1898;
        if (_1384 > 0.0)
        {
            _1898 = abs((1.0 - _1375) / _1384);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1384 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1375 + 1.0) / _1384);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1898 = frontier_phi_35_30_ladder;
        }
        float _1900 = isnan(_1641) ? _1412 : (isnan(_1412) ? _1641 : min(_1412, _1641));
        float _1901 = isnan(_1898) ? _1900 : (isnan(_1900) ? _1898 : min(_1900, _1898));
        float _1905 = (_1901 * _1378) + _1367;
        float _1906 = (_1901 * _1381) + _1371;
        float _1907 = (_1901 * _1384) + _1375;
        float _1908 = _1901 * 9.9999997473787516355514526367188e-05;
        float _1910 = (-1.0) - _1908;
        float _1912 = _1908 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1907 > _1912) || ((_1907 < _1910) || ((_1906 > _1912) || ((_1906 < _1910) || ((_1905 < _1910) || (_1905 > _1912))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2035 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1907, cbModelParam._m0[9u].z, fma(_1906, cbModelParam._m0[9u].y, _1905 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1907, cbModelParam._m0[10u].z, fma(_1906, cbModelParam._m0[10u].y, _1905 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1907, cbModelParam._m0[11u].z, fma(_1906, cbModelParam._m0[11u].y, _1905 * cbModelParam._m0[11u].x))), _1318);
            frontier_phi_13_35_ladder = _2035.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2035.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2035.x * cbModelParam._m0[1u].y;
        }
        _1400 = frontier_phi_13_35_ladder_2;
        _1402 = frontier_phi_13_35_ladder_1;
        _1404 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1388 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_505, _506, _507), _1318);
        _1400 = _1388.x * cbModelParam._m0[1u].y;
        _1402 = _1388.y * cbModelParam._m0[1u].y;
        _1404 = _1388.z * cbModelParam._m0[1u].y;
    }
    float _1408 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _416);
    float _1409 = isnan(_1408) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1408 : min(cbModelParam._m0[25u].w, _1408));
    float _1502;
    float _1504;
    float _1506;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1466 = fma(_569, cbModelParam._m0[21u].z, fma(_565, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _561)) + cbModelParam._m0[21u].w;
        float _1470 = fma(_569, cbModelParam._m0[22u].z, fma(_565, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _561)) + cbModelParam._m0[22u].w;
        float _1474 = fma(_569, cbModelParam._m0[23u].z, fma(_565, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _561)) + cbModelParam._m0[23u].w;
        float _1477 = fma(_507, cbModelParam._m0[21u].z, fma(_506, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _505));
        float _1480 = fma(_507, cbModelParam._m0[22u].z, fma(_506, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _505));
        float _1483 = fma(_507, cbModelParam._m0[23u].z, fma(_506, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _505));
        float _1646;
        if (_1477 > 0.0)
        {
            _1646 = abs((1.0 - _1466) / _1477);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1477 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1466 + 1.0) / _1477);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1646 = frontier_phi_25_21_ladder;
        }
        float _1925;
        if (_1480 > 0.0)
        {
            _1925 = abs((1.0 - _1470) / _1480);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1480 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1470 + 1.0) / _1480);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1925 = frontier_phi_37_32_ladder;
        }
        float _2138;
        if (_1483 > 0.0)
        {
            _2138 = abs((1.0 - _1474) / _1483);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1483 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1474 + 1.0) / _1483);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2138 = frontier_phi_46_43_ladder;
        }
        float _2140 = isnan(_1925) ? _1646 : (isnan(_1646) ? _1925 : min(_1646, _1925));
        float _2141 = isnan(_2138) ? _2140 : (isnan(_2140) ? _2138 : min(_2140, _2138));
        float _2145 = (_2141 * _1477) + _1466;
        float _2146 = (_2141 * _1480) + _1470;
        float _2147 = (_2141 * _1483) + _1474;
        float _2148 = _2141 * 9.9999997473787516355514526367188e-05;
        float _2149 = (-1.0) - _2148;
        float _2151 = _2148 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2147 > _2151) || ((_2147 < _2149) || ((_2146 > _2151) || ((_2146 < _2149) || ((_2145 < _2149) || (_2145 > _2151))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2364 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2147, cbModelParam._m0[17u].z, fma(_2146, cbModelParam._m0[17u].y, _2145 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2147, cbModelParam._m0[18u].z, fma(_2146, cbModelParam._m0[18u].y, _2145 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2147, cbModelParam._m0[19u].z, fma(_2146, cbModelParam._m0[19u].y, _2145 * cbModelParam._m0[19u].x))), _1409);
            frontier_phi_22_46_ladder = _2364.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2364.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2364.x * cbModelParam._m0[1u].z;
        }
        _1502 = frontier_phi_22_46_ladder_2;
        _1504 = frontier_phi_22_46_ladder_1;
        _1506 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1486 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_505, _506, _507), _1409);
        _1502 = _1486.x * cbModelParam._m0[1u].z;
        _1504 = _1486.y * cbModelParam._m0[1u].z;
        _1506 = _1486.z * cbModelParam._m0[1u].z;
    }
    float _1519 = (((_532 * _482) + _533) * _497) * ((cbModelParam._m0[1u].w * (_1502 - _1400)) + _1400);
    float _1521 = (((_532 * _484) + _533) * _497) * ((cbModelParam._m0[1u].w * (_1504 - _1402)) + _1402);
    float _1523 = (((_532 * _485) + _533) * _497) * ((cbModelParam._m0[1u].w * (_1506 - _1404)) + _1404);
    float _1526 = fma(_1523, cbSceneParam._m0[89u].z, fma(_1521, cbSceneParam._m0[89u].y, _1519 * cbSceneParam._m0[89u].x));
    float _1529 = fma(_1523, cbSceneParam._m0[90u].z, fma(_1521, cbSceneParam._m0[90u].y, _1519 * cbSceneParam._m0[90u].x));
    float _1532 = fma(_1523, cbSceneParam._m0[91u].z, fma(_1521, cbSceneParam._m0[91u].y, _1519 * cbSceneParam._m0[91u].x));
    vec4 _1540 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_371, _372));
    float _1542 = _1540.w;
    float _1554 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1542);
    float _1555 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1542);
    float _1556 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1542);
    uvec4 _1560 = floatBitsToUint(cbInstanceData._m0[_429 + 5u]);
    uint _1562 = _1560.x * 14u;
    uint _1563 = _1562 + 13u;
    float _1570 = _497 + (-1.0);
    float _1575 = (cbLight._m0[_1563].x * _1570) + 1.0;
    float _1576 = (cbLight._m0[_1563].y * _1570) + 1.0;
    float _1577 = (cbLight._m0[_1563].z * _1570) + 1.0;
    float _1578 = (cbLight._m0[_1563].w * _1570) + 1.0;
    uint _1579 = _1562 + 5u;
    float _1585 = isnan(1.0) ? _1576 : (isnan(_1576) ? 1.0 : min(_1576, 1.0));
    uint _1589 = _1562 + 4u;
    float _1599 = isnan(1.0) ? _1575 : (isnan(_1575) ? 1.0 : min(_1575, 1.0));
    uint _1603 = _1562 | 1u;
    float _1614 = dot(vec3(cbLight._m0[_1562].xyz), vec3(_282, _283, _284));
    float _1617 = dot(vec3(cbLight._m0[_1603].xyz), vec3(_282, _283, _284));
    float _3718 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
    float _3729 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
    float _1622 = (isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * 0.3183098733425140380859375;
    float _1624 = (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * 0.3183098733425140380859375;
    float _1631 = ((cbLight._m0[_1579].x * _1585) * _1624) + (((cbLight._m0[_1589].x * _1554) * _1599) * _1622);
    float _1632 = ((_1585 * cbLight._m0[_1579].y) * _1624) + (((cbLight._m0[_1589].y * _1555) * _1599) * _1622);
    float _1633 = ((_1585 * cbLight._m0[_1579].z) * _1624) + (((cbLight._m0[_1589].z * _1556) * _1599) * _1622);
    uvec4 _1638 = floatBitsToUint(cbLight._m0[_1562 + 12u]);
    bool _1640 = _1638.x == 0u;
    float _1651;
    float _1653;
    float _1655;
    if (_1640)
    {
        _1651 = _1631;
        _1653 = _1632;
        _1655 = _1633;
    }
    else
    {
        uint _1659 = _1562 + 6u;
        float _1675 = (dot(vec3(cbLight._m0[_1562 + 2u].xyz), vec3(_282, _283, _284)) * 0.5) + 0.5;
        float _1676 = _1675 * _1675;
        float _3740 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1677 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1678 = isnan(1.0) ? _1577 : (isnan(_1577) ? 1.0 : min(_1577, 1.0));
        _1651 = (((cbLight._m0[_1659].x * 0.3183098733425140380859375) * _1677) * _1678) + _1631;
        _1653 = (((cbLight._m0[_1659].y * 0.3183098733425140380859375) * _1677) * _1678) + _1632;
        _1655 = (((cbLight._m0[_1659].z * 0.3183098733425140380859375) * _1677) * _1678) + _1633;
    }
    bool _1658 = _1638.y == 0u;
    float _1696;
    float _1698;
    float _1700;
    if (_1658)
    {
        _1696 = _1651;
        _1698 = _1653;
        _1700 = _1655;
    }
    else
    {
        uint _1869 = _1562 + 7u;
        float _1885 = (dot(vec3(cbLight._m0[_1562 + 3u].xyz), vec3(_282, _283, _284)) * 0.5) + 0.5;
        float _1886 = _1885 * _1885;
        float _3756 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
        float _1887 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1888 = isnan(1.0) ? _1578 : (isnan(_1578) ? 1.0 : min(_1578, 1.0));
        _1696 = (((cbLight._m0[_1869].x * 0.3183098733425140380859375) * _1887) * _1888) + _1651;
        _1698 = (((cbLight._m0[_1869].y * 0.3183098733425140380859375) * _1887) * _1888) + _1653;
        _1700 = (((cbLight._m0[_1869].z * 0.3183098733425140380859375) * _1887) * _1888) + _1655;
    }
    uint _1703 = _1562 + 8u;
    float _1716 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1562].w)) * _416) * 0.949999988079071044921875);
    float _1717 = _1716 * _1716;
    float _1718 = cbLight._m0[_1562].x + _363;
    float _1719 = cbLight._m0[_1562].y + _364;
    float _1720 = cbLight._m0[_1562].z + _365;
    float _1724 = inversesqrt(dot(vec3(_1718, _1719, _1720), vec3(_1718, _1719, _1720)));
    float _1725 = _1724 * _1718;
    float _1726 = _1724 * _1719;
    float _1727 = _1724 * _1720;
    float _1728 = dot(vec3(_282, _283, _284), vec3(cbLight._m0[_1562].xyz));
    float _3772 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
    float _1731 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _3783 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _1732 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _1733 = dot(vec3(_282, _283, _284), vec3(_1725, _1726, _1727));
    float _3794 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
    float _1736 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _1737 = dot(vec3(cbLight._m0[_1562].xyz), vec3(_1725, _1726, _1727));
    float _3805 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
    float _1741 = _1717 * _1717;
    float _1745 = ((_1736 * _1736) * (_1741 + (-1.0))) + 1.0;
    float _1753 = exp2(log2(1.0 - (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0)))) * 5.0);
    float _1754 = 0.959999978542327880859375 - _479;
    float _1756 = 0.959999978542327880859375 - _480;
    float _1757 = 0.959999978542327880859375 - _481;
    float _1764 = 1.0 - _1717;
    float _1775 = (0.5 / (((_1732 * ((_1731 * _1764) + _1717)) + 9.9999999392252902907785028219223e-09) + (((_1732 * _1764) + _1717) * _1731))) * _1731;
    float _3816 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
    float _1777 = (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_1741 / ((_1745 * _1745) * 3.141590118408203125));
    uint _1791 = _1562 + 9u;
    float _1802 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1603].w)) * _416) * 0.949999988079071044921875);
    float _1803 = _1802 * _1802;
    float _1804 = cbLight._m0[_1603].x + _363;
    float _1805 = cbLight._m0[_1603].y + _364;
    float _1806 = cbLight._m0[_1603].z + _365;
    float _1810 = inversesqrt(dot(vec3(_1804, _1805, _1806), vec3(_1804, _1805, _1806)));
    float _1811 = _1810 * _1804;
    float _1812 = _1810 * _1805;
    float _1813 = _1810 * _1806;
    float _1814 = dot(vec3(_282, _283, _284), vec3(cbLight._m0[_1603].xyz));
    float _3827 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1817 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _1818 = dot(vec3(_282, _283, _284), vec3(_1811, _1812, _1813));
    float _3838 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _1821 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _1822 = dot(vec3(cbLight._m0[_1603].xyz), vec3(_1811, _1812, _1813));
    float _3849 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
    float _1826 = _1803 * _1803;
    float _1830 = ((_1821 * _1821) * (_1826 + (-1.0))) + 1.0;
    float _1837 = exp2(log2(1.0 - (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0)))) * 5.0);
    float _1844 = 1.0 - _1803;
    float _1854 = (0.5 / (((_1732 * ((_1817 * _1844) + _1803)) + 9.9999999392252902907785028219223e-09) + (((_1732 * _1844) + _1803) * _1817))) * _1817;
    float _3860 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1856 = (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * (_1826 / ((_1830 * _1830) * 3.141590118408203125));
    float _1866 = (((((_1837 * _1754) + _482) * cbLight._m0[_1791].x) * _1856) * _1585) + ((((cbLight._m0[_1703].x * _1554) * ((_1753 * _1754) + _482)) * _1777) * _1599);
    float _1867 = (((((_1837 * _1756) + _484) * cbLight._m0[_1791].y) * _1856) * _1585) + ((((cbLight._m0[_1703].y * _1555) * ((_1753 * _1756) + _484)) * _1777) * _1599);
    float _1868 = (((((_1837 * _1757) + _485) * cbLight._m0[_1791].z) * _1856) * _1585) + ((((cbLight._m0[_1703].z * _1556) * ((_1753 * _1757) + _485)) * _1777) * _1599);
    float _1930;
    float _1932;
    float _1934;
    if (_1640)
    {
        _1930 = _1866;
        _1932 = _1867;
        _1934 = _1868;
    }
    else
    {
        uint _1936 = _1562 + 2u;
        uint _1940 = _1562 + 10u;
        float _1954 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1936].w)) * _416) * 0.949999988079071044921875);
        float _1955 = _1954 * _1954;
        float _1956 = cbLight._m0[_1936].x + _363;
        float _1957 = cbLight._m0[_1936].y + _364;
        float _1958 = cbLight._m0[_1936].z + _365;
        float _1962 = inversesqrt(dot(vec3(_1956, _1957, _1958), vec3(_1956, _1957, _1958)));
        float _1963 = _1962 * _1956;
        float _1964 = _1962 * _1957;
        float _1965 = _1962 * _1958;
        float _1966 = dot(vec3(_282, _283, _284), vec3(cbLight._m0[_1936].xyz));
        float _3871 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
        float _1969 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1970 = dot(vec3(_282, _283, _284), vec3(_1963, _1964, _1965));
        float _3882 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1973 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1974 = dot(vec3(cbLight._m0[_1936].xyz), vec3(_1963, _1964, _1965));
        float _3893 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
        float _1978 = _1955 * _1955;
        float _1982 = ((_1973 * _1973) * (_1978 + (-1.0))) + 1.0;
        float _1989 = exp2(log2(1.0 - (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0)))) * 5.0);
        float _1996 = 1.0 - _1955;
        float _2006 = (0.5 / (((_1732 * ((_1969 * _1996) + _1955)) + 9.9999999392252902907785028219223e-09) + (((_1732 * _1996) + _1955) * _1969))) * _1969;
        float _3904 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
        float _2008 = (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * (_1978 / ((_1982 * _1982) * 3.141590118408203125));
        float _2009 = isnan(1.0) ? _1577 : (isnan(_1577) ? 1.0 : min(_1577, 1.0));
        _1930 = (((((_1989 * _1754) + _482) * cbLight._m0[_1940].x) * _2008) * _2009) + _1866;
        _1932 = (((((_1989 * _1756) + _484) * cbLight._m0[_1940].y) * _2008) * _2009) + _1867;
        _1934 = (((((_1989 * _1757) + _485) * cbLight._m0[_1940].z) * _2008) * _2009) + _1868;
    }
    float _2044;
    float _2046;
    float _2048;
    if (_1658)
    {
        _2044 = _1930;
        _2046 = _1932;
        _2048 = _1934;
    }
    else
    {
        uint _2055 = _1562 + 3u;
        uint _2059 = _1562 + 11u;
        float _2073 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2055].w)) * _416) * 0.949999988079071044921875);
        float _2074 = _2073 * _2073;
        float _2075 = cbLight._m0[_2055].x + _363;
        float _2076 = cbLight._m0[_2055].y + _364;
        float _2077 = cbLight._m0[_2055].z + _365;
        float _2081 = inversesqrt(dot(vec3(_2075, _2076, _2077), vec3(_2075, _2076, _2077)));
        float _2082 = _2081 * _2075;
        float _2083 = _2081 * _2076;
        float _2084 = _2081 * _2077;
        float _2085 = dot(vec3(_282, _283, _284), vec3(cbLight._m0[_2055].xyz));
        float _3920 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
        float _2088 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _2089 = dot(vec3(_282, _283, _284), vec3(_2082, _2083, _2084));
        float _3931 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
        float _2092 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _2093 = dot(vec3(cbLight._m0[_2055].xyz), vec3(_2082, _2083, _2084));
        float _3942 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2097 = _2074 * _2074;
        float _2101 = ((_2092 * _2092) * (_2097 + (-1.0))) + 1.0;
        float _2108 = exp2(log2(1.0 - (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0)))) * 5.0);
        float _2115 = 1.0 - _2074;
        float _2125 = (0.5 / (((_1732 * ((_2088 * _2115) + _2074)) + 9.9999999392252902907785028219223e-09) + (((_1732 * _2115) + _2074) * _2088))) * _2088;
        float _3953 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2127 = (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * (_2097 / ((_2101 * _2101) * 3.141590118408203125));
        float _2128 = isnan(1.0) ? _1578 : (isnan(_1578) ? 1.0 : min(_1578, 1.0));
        _2044 = (((((_2108 * _1754) + _482) * cbLight._m0[_2059].x) * _2127) * _2128) + _1930;
        _2046 = (((((_2108 * _1756) + _484) * cbLight._m0[_2059].y) * _2127) * _2128) + _1932;
        _2048 = (((((_2108 * _1757) + _485) * cbLight._m0[_2059].z) * _2127) * _2128) + _1934;
    }
    float _2263;
    float _2265;
    float _2267;
    float _2269;
    float _2271;
    float _2273;
    if (_1560.y == 0u)
    {
        float _2203 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2204 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2203;
        float _2205 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2203;
        float _2206 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2203;
        uvec4 _2218 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2219 = _2218.x;
        uint _2230 = uint((float(_2218.y) * floor(float(uint(cbSceneParam._m0[85u].y * _372) / _2219))) + floor(float(uint(cbSceneParam._m0[85u].x * _371) / _2219)));
        float _2240 = (log2(_2206 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2241 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        uint _2244 = uint(isnan(14.0) ? _2241 : (isnan(_2241) ? 14.0 : min(_2241, 14.0)));
        uvec4 _2249 = texelFetch(g_lightClusterGridBuffer, int(((_2244 << 2u) + (_2230 << 6u)) >> 2u));
        uint _2250 = _2249.x;
        uint _2251 = _2218.z;
        float _2369;
        float _2371;
        float _2373;
        float _2375;
        float _2377;
        float _2379;
        if (((((1u << ((_2251 >> 4u) & 15u)) + 4294967295u) & _2250) == 0u) || ((_2251 & 240u) == 0u))
        {
            _2369 = 0.0;
            _2371 = 0.0;
            _2373 = 0.0;
            _2375 = 0.0;
            _2377 = 0.0;
            _2379 = 0.0;
        }
        else
        {
            float _2370;
            float _2372;
            float _2374;
            float _2376;
            float _2378;
            float _2380;
            float _2514 = 0.0;
            float _2515 = 0.0;
            float _2516 = 0.0;
            float _2517 = 0.0;
            float _2518 = 0.0;
            float _2519 = 0.0;
            uint _2520 = 0u;
            uint _2529;
            bool _2530;
            for (;;)
            {
                _2529 = texelFetch(g_lightClassification, int((((_2244 << 5u) + (_2230 << 9u)) + (_2520 << 2u)) >> 2u)).x;
                _2530 = _2529 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2530)
                {
                    frontier_phi_61_pred = _2514;
                    frontier_phi_61_pred_1 = _2519;
                    frontier_phi_61_pred_2 = _2518;
                    frontier_phi_61_pred_3 = _2517;
                    frontier_phi_61_pred_4 = _2516;
                    frontier_phi_61_pred_5 = _2515;
                }
                else
                {
                    float _2638;
                    float _2639;
                    float _2640;
                    float _2641;
                    float _2642;
                    float _2643;
                    uint _2644;
                    _2638 = _2514;
                    _2639 = _2515;
                    _2640 = _2516;
                    _2641 = _2517;
                    _2642 = _2518;
                    _2643 = _2519;
                    _2644 = _2529;
                    float _2570;
                    float _2571;
                    float _2572;
                    float _2573;
                    float _2574;
                    float _2575;
                    for (;;)
                    {
                        uint _2648 = uint(findLSB(_2644)) + (_2520 << 5u);
                        uint _2645 = (_2644 + 4294967295u) & _2644;
                        uint _2650 = _2648 * 48u;
                        vec4 _2664 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2650)).x, texelFetch(g_PointLightRenderingBuffer, int(_2650 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2650 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2650 + 3u)).x));
                        uint _2670 = (_2648 * 48u) + 4u;
                        vec4 _2683 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2670)).x, texelFetch(g_PointLightRenderingBuffer, int(_2670 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2670 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2670 + 3u)).x));
                        uint _2689 = (_2648 * 48u) + 8u;
                        vec3 _2700 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2689)).x, texelFetch(g_PointLightRenderingBuffer, int(_2689 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2689 + 2u)).x));
                        float _2704 = _2664.x - _2204;
                        float _2705 = _2664.y - _2205;
                        float _2706 = _2664.z - _2206;
                        float _2707 = dot(vec3(_2704, _2705, _2706), vec3(_2704, _2705, _2706));
                        float _2710 = inversesqrt(_2707);
                        float _2711 = _2710 * _2704;
                        float _2712 = _2710 * _2705;
                        float _2713 = _2710 * _2706;
                        float _2714 = dot(vec3(_397, _400, _403), vec3(_2711, _2712, _2713));
                        float _2719 = 1.0 - (_2707 * _2664.w);
                        float _3979 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
                        float _2720 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
                        float _2721 = sqrt(_2707) * _2683.w;
                        float _2724 = 1.39999997615814208984375 / (_2721 + 1.39999997615814208984375);
                        float _2725 = _2724 * _2724;
                        float _2728 = ((1.0 - _2725) * _2714) + _2725;
                        float _2731 = _2721 * _2721;
                        float _2735 = ((isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0))) * _2720) / ((_2731 * 0.699999988079071044921875) + 1.0);
                        float _2739 = (-0.0) - _2204;
                        float _2740 = (-0.0) - _2205;
                        float _2741 = (-0.0) - _2206;
                        float _2745 = inversesqrt(dot(vec3(_2739, _2740, _2741), vec3(_2739, _2740, _2741)));
                        float _2746 = _2745 * _2739;
                        float _2747 = _2745 * _2740;
                        float _2748 = _2745 * _2741;
                        float _2756 = exp2(log2(1.0 / ((_2731 * 3.5) + 5.0)) * 0.25);
                        float _2757 = 1.0 - _513;
                        float _2764 = sqrt(1.0 - ((1.0 - (_2757 * _2757)) * (1.0 - (_2756 * _2756))));
                        float _2765 = _2764 * _2764;
                        float _2766 = _2765 * _2765;
                        float _2767 = _2746 + _2711;
                        float _2768 = _2747 + _2712;
                        float _2769 = _2748 + _2713;
                        float _2773 = inversesqrt(dot(vec3(_2767, _2768, _2769), vec3(_2767, _2768, _2769)));
                        float _2777 = dot(vec3(_397, _400, _403), vec3(_2746, _2747, _2748));
                        float _3995 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
                        float _2780 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
                        float _2781 = dot(vec3(_397, _400, _403), vec3(_2773 * _2767, _2773 * _2768, _2773 * _2769));
                        float _4006 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
                        float _2784 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
                        float _2788 = ((_2784 * _2784) * (_2766 + (-1.0))) + 1.0;
                        float _2789 = _2724 * _2765;
                        float _2790 = _2789 * _2789;
                        float _2793 = ((1.0 - _2790) * _2714) + _2790;
                        float _4017 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
                        float _2794 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
                        float _2795 = 1.0 - _2765;
                        float _2805 = (0.5 / (((_2794 * ((_2780 * _2795) + _2765)) + 9.9999999392252902907785028219223e-09) + (((_2794 * _2795) + _2765) * _2780))) * _2794;
                        float _4028 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
                        float _2816 = (((_2766 * 3.1415927410125732421875) * (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) / ((_2788 * _2788) * ((_2731 * 2.1991131305694580078125) + 3.141590118408203125))) * _2720;
                        _2573 = (_2735 * _2683.x) + _2641;
                        _2574 = (_2735 * _2683.y) + _2642;
                        _2575 = (_2735 * _2683.z) + _2643;
                        _2570 = (_2816 * _2700.x) + _2638;
                        _2571 = (_2816 * _2700.y) + _2639;
                        _2572 = (_2816 * _2700.z) + _2640;
                        if (_2645 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2638 = _2570;
                            _2639 = _2571;
                            _2640 = _2572;
                            _2641 = _2573;
                            _2642 = _2574;
                            _2643 = _2575;
                            _2644 = _2645;
                        }
                    }
                    frontier_phi_61_pred = _2570;
                    frontier_phi_61_pred_1 = _2575;
                    frontier_phi_61_pred_2 = _2574;
                    frontier_phi_61_pred_3 = _2573;
                    frontier_phi_61_pred_4 = _2572;
                    frontier_phi_61_pred_5 = _2571;
                }
                _2370 = frontier_phi_61_pred;
                _2380 = frontier_phi_61_pred_1;
                _2378 = frontier_phi_61_pred_2;
                _2376 = frontier_phi_61_pred_3;
                _2374 = frontier_phi_61_pred_4;
                _2372 = frontier_phi_61_pred_5;
                uint _2521 = _2520 + 1u;
                if (_2521 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2514 = _2370;
                    _2515 = _2372;
                    _2516 = _2374;
                    _2517 = _2376;
                    _2518 = _2378;
                    _2519 = _2380;
                    _2520 = _2521;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2369 = _2370;
            _2371 = _2372;
            _2373 = _2374;
            _2375 = _2376;
            _2377 = _2378;
            _2379 = _2380;
        }
        uvec4 _2383 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2384 = _2383.z;
        uint _2386 = (_2384 >> 8u) & 15u;
        float _2482;
        float _2484;
        float _2486;
        float _2488;
        float _2490;
        float _2492;
        if (((4294967295u << _2386) & _2250) == 0u)
        {
            _2482 = _2369;
            _2484 = _2371;
            _2486 = _2373;
            _2488 = _2375;
            _2490 = _2377;
            _2492 = _2379;
        }
        else
        {
            float _2507 = inversesqrt(dot(vec3(_2204, _2205, _2206), vec3(_2204, _2205, _2206)));
            float _2508 = _2507 * _2204;
            float _2509 = _2507 * _2205;
            float _2510 = _2507 * _2206;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2386 < ((_2384 >> 12u) & 15u))
            {
                float _2483;
                float _2485;
                float _2487;
                float _2489;
                float _2491;
                float _2493;
                float _2621 = _2369;
                float _2622 = _2371;
                float _2623 = _2373;
                float _2624 = _2375;
                float _2625 = _2377;
                float _2626 = _2379;
                uint _2627 = _2386;
                uint _2636;
                bool _2637;
                for (;;)
                {
                    _2636 = texelFetch(g_lightClassification, int((((_2244 << 5u) + (_2230 << 9u)) + (_2627 << 2u)) >> 2u)).x;
                    _2637 = _2636 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2637)
                    {
                        frontier_phi_67_pred = _2624;
                        frontier_phi_67_pred_1 = _2625;
                        frontier_phi_67_pred_2 = _2626;
                        frontier_phi_67_pred_3 = _2623;
                        frontier_phi_67_pred_4 = _2622;
                        frontier_phi_67_pred_5 = _2621;
                    }
                    else
                    {
                        float _2821;
                        float _2822;
                        float _2823;
                        float _2824;
                        float _2825;
                        float _2826;
                        float _3117;
                        float _3118;
                        float _3119;
                        float _3120;
                        float _3121;
                        float _3122;
                        float _2834 = _2621;
                        float _2835 = _2622;
                        float _2836 = _2623;
                        float _2837 = _2624;
                        float _2838 = _2625;
                        float _2839 = _2626;
                        uint _2840 = _2636;
                        uint _2841;
                        vec4 _2866;
                        float _2867;
                        vec4 _2882;
                        vec3 _2894;
                        vec4 _2910;
                        vec4 _2926;
                        float _2973;
                        bool _2974;
                        for (;;)
                        {
                            uint _2851 = ((_2627 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2840));
                            _2841 = (_2840 + 4294967295u) & _2840;
                            uint _2853 = _2851 * 40u;
                            _2866 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2853)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 3u)).x));
                            _2867 = _2866.w;
                            uint _2869 = (_2851 * 40u) + 4u;
                            _2882 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2869)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 3u)).x));
                            uint _2884 = (_2851 * 40u) + 8u;
                            _2894 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2884)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 2u)).x));
                            uint _2897 = (_2851 * 40u) + 16u;
                            _2910 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2897)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 3u)).x));
                            uint _2913 = (_2851 * 40u) + 20u;
                            _2926 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2913)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 3u)).x));
                            uint _2929 = (_2851 * 40u) + 24u;
                            vec4 _2942 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2929)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 3u)).x));
                            uint _2948 = (_2851 * 40u) + 28u;
                            vec4 _2961 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2948)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 3u)).x));
                            _2973 = fma(_2206, _2961.z, fma(_2205, _2961.y, _2961.x * _2204)) + _2961.w;
                            _2974 = !((fma(_2206, _2942.z, fma(_2205, _2942.y, _2942.x * _2204)) + _2942.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2974)
                            {
                                float _3001 = _2866.x - _2204;
                                float _3002 = _2866.y - _2205;
                                float _3003 = _2866.z - _2206;
                                float _3004 = dot(vec3(_3001, _3002, _3003), vec3(_3001, _3002, _3003));
                                float _3007 = inversesqrt(_3004);
                                float _3008 = _3007 * _3001;
                                float _3009 = _3007 * _3002;
                                float _3010 = _3007 * _3003;
                                float _3014 = 1.0 - (_3004 / (_2867 * _2867));
                                float _4039 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
                                float _3015 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
                                float _3019 = sqrt(_3004) * _2882.w;
                                float _3021 = 1.39999997615814208984375 / (_3019 + 1.39999997615814208984375);
                                float _3022 = _3021 * _3021;
                                float _3025 = ((1.0 - _3022) * dot(vec3(_3008, _3009, _3010), vec3(_397, _400, _403))) + _3022;
                                float _3028 = _3019 * _3019;
                                float _3032 = (fma(_2206, _2910.z, fma(_2205, _2910.y, _2910.x * _2204)) + _2910.w) / _2973;
                                float _3033 = (fma(_2206, _2926.z, fma(_2205, _2926.y, _2926.x * _2204)) + _2926.w) / _2973;
                                float _3037 = 1.0 - dot(vec2(_3032, _3033), vec2(_3032, _3033));
                                float _4055 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                                float _3038 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
                                float _3039 = _3038 * (((isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0))) * _3015) / ((_3028 * 0.699999988079071044921875) + 1.0));
                                float _3051 = exp2(log2(1.0 / ((_3028 * 3.5) + 5.0)) * 0.25);
                                float _3052 = 1.0 - _513;
                                float _3059 = sqrt(1.0 - ((1.0 - (_3052 * _3052)) * (1.0 - (_3051 * _3051))));
                                float _3060 = _3059 * _3059;
                                float _3061 = _3060 * _3060;
                                float _3062 = _3008 - _2508;
                                float _3063 = _3009 - _2509;
                                float _3064 = _3010 - _2510;
                                float _3068 = inversesqrt(dot(vec3(_3062, _3063, _3064), vec3(_3062, _3063, _3064)));
                                float _3072 = dot(vec3(_397, _400, _403), vec3((-0.0) - _2508, (-0.0) - _2509, (-0.0) - _2510));
                                float _4066 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                                float _3075 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
                                float _3076 = dot(vec3(_397, _400, _403), vec3(_3068 * _3062, _3068 * _3063, _3068 * _3064));
                                float _4077 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                                float _3079 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
                                float _3083 = ((_3079 * _3079) * (_3061 + (-1.0))) + 1.0;
                                float _3084 = _3021 * _3060;
                                float _3085 = _3084 * _3084;
                                float _3091 = ((1.0 - _3085) * dot(vec3(_397, _400, _403), vec3(_3008, _3009, _3010))) + _3085;
                                float _4088 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                                float _3092 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
                                float _3093 = 1.0 - _3060;
                                float _3103 = (0.5 / (((_3092 * ((_3075 * _3093) + _3060)) + 9.9999999392252902907785028219223e-09) + (((_3092 * _3093) + _3060) * _3075))) * _3092;
                                float _4099 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
                                float _3113 = (_3038 * _3015) * (((_3061 * 3.1415927410125732421875) * (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0)))) / ((_3083 * _3083) * ((_3028 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3113 * _2894.x;
                                frontier_phi_73_pred_1 = _3113 * _2894.y;
                                frontier_phi_73_pred_2 = _3039 * _2882.z;
                                frontier_phi_73_pred_3 = _3039 * _2882.y;
                                frontier_phi_73_pred_4 = _3039 * _2882.x;
                                frontier_phi_73_pred_5 = _3113 * _2894.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3117 = frontier_phi_73_pred;
                            _3118 = frontier_phi_73_pred_1;
                            _3122 = frontier_phi_73_pred_2;
                            _3121 = frontier_phi_73_pred_3;
                            _3120 = frontier_phi_73_pred_4;
                            _3119 = frontier_phi_73_pred_5;
                            _2824 = _3120 + _2837;
                            _2825 = _3121 + _2838;
                            _2826 = _3122 + _2839;
                            _2821 = _3117 + _2834;
                            _2822 = _3118 + _2835;
                            _2823 = _3119 + _2836;
                            if (_2841 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2834 = _2821;
                                _2835 = _2822;
                                _2836 = _2823;
                                _2837 = _2824;
                                _2838 = _2825;
                                _2839 = _2826;
                                _2840 = _2841;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2824;
                        frontier_phi_67_pred_1 = _2825;
                        frontier_phi_67_pred_2 = _2826;
                        frontier_phi_67_pred_3 = _2823;
                        frontier_phi_67_pred_4 = _2822;
                        frontier_phi_67_pred_5 = _2821;
                    }
                    _2489 = frontier_phi_67_pred;
                    _2491 = frontier_phi_67_pred_1;
                    _2493 = frontier_phi_67_pred_2;
                    _2487 = frontier_phi_67_pred_3;
                    _2485 = frontier_phi_67_pred_4;
                    _2483 = frontier_phi_67_pred_5;
                    uint _2628 = _2627 + 1u;
                    if (_2628 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2621 = _2483;
                        _2622 = _2485;
                        _2623 = _2487;
                        _2624 = _2489;
                        _2625 = _2491;
                        _2626 = _2493;
                        _2627 = _2628;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2491;
                frontier_phi_55_56_ladder_1 = _2493;
                frontier_phi_55_56_ladder_2 = _2489;
                frontier_phi_55_56_ladder_3 = _2487;
                frontier_phi_55_56_ladder_4 = _2485;
                frontier_phi_55_56_ladder_5 = _2483;
            }
            else
            {
                frontier_phi_55_56_ladder = _2377;
                frontier_phi_55_56_ladder_1 = _2379;
                frontier_phi_55_56_ladder_2 = _2375;
                frontier_phi_55_56_ladder_3 = _2373;
                frontier_phi_55_56_ladder_4 = _2371;
                frontier_phi_55_56_ladder_5 = _2369;
            }
            _2482 = frontier_phi_55_56_ladder_5;
            _2484 = frontier_phi_55_56_ladder_4;
            _2486 = frontier_phi_55_56_ladder_3;
            _2488 = frontier_phi_55_56_ladder_2;
            _2490 = frontier_phi_55_56_ladder;
            _2492 = frontier_phi_55_56_ladder_1;
        }
        float _2497 = isnan(1.0) ? _497 : (isnan(_497) ? 1.0 : min(_497, 1.0));
        _2263 = (_2497 * _2488) + _1696;
        _2265 = (_2497 * _2490) + _1698;
        _2267 = (_2497 * _2492) + _1700;
        _2269 = ((_2482 * _482) * _2497) + _2044;
        _2271 = ((_2484 * _484) * _2497) + _2046;
        _2273 = ((_2486 * _485) * _2497) + _2048;
    }
    else
    {
        _2263 = _1696;
        _2265 = _1698;
        _2267 = _1700;
        _2269 = _2044;
        _2271 = _2046;
        _2273 = _2048;
    }
    vec4 _2279 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4115 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _4126 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _4137 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _2303 = (((isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (_2263 + ((isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0))) * _497))) + ((_2269 + ((isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))) * _1307)) * cbPerFrame._m0[3u].x)) + (_2279.x * cbMtdParam._m0[3u].x);
    float _2305 = ((_2279.y * cbMtdParam._m0[3u].x) + ((_2271 + ((isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))) * _1307)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_2265 + ((isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0))) * _497)));
    float _2307 = ((_2279.z * cbMtdParam._m0[3u].x) + ((_2273 + ((isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))) * _1307)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_2267 + ((isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0))) * _497)));
    uint _2311 = _429 + 6u;
    float _2319 = _371 / cbSceneParam._m0[86u].x;
    float _2320 = _372 / cbSceneParam._m0[86u].y;
    vec4 _2334 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2319, _2320, (log2((isnan(cbSceneParam._m0[77u].w) ? _304 : (isnan(_304) ? cbSceneParam._m0[77u].w : min(_304, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2336 = _2334.x;
    float _2337 = _2334.y;
    float _2338 = _2334.z;
    float _2339 = _2334.w;
    float _2432;
    float _2434;
    float _2436;
    float _2438;
    if (_304 > cbSceneParam._m0[78u].w)
    {
        float _2394 = isnan(_304) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _304 : min(cbSceneParam._m0[80u].w, _304));
        float _2395 = _2394 / _304;
        float _2406 = _2395 * _356;
        float _2407 = _357 * _2395;
        float _2408 = (-0.0) - _2407;
        float _2410 = _2395 * _358;
        float _2412 = (cbSceneParam._m0[77u].w * _2408) / _2394;
        float _2413 = _2412 + cbSceneParam._m0[79u].w;
        float _2414 = cbSceneParam._m0[79u].w - _2407;
        float _2420 = sqrt(((_2406 * _2406) + (_2407 * _2407)) + (_2410 * _2410));
        float _2423 = (1.0 - (cbSceneParam._m0[77u].w / _2394)) * _2420;
        float _2428 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2430 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2583;
        if (abs((_2408 - _2412) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2583 = ((((_2413 > 0.0) ? exp2(_2428 * _2413) : (2.0 - exp2(_2430 * _2413))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2423;
        }
        else
        {
            float _2543 = 1.0 / cbSceneParam._m0[80u].x;
            float _2544 = isnan(_2414) ? _2413 : (isnan(_2413) ? _2414 : max(_2413, _2414));
            float _2545 = isnan(_2414) ? _2413 : (isnan(_2413) ? _2414 : min(_2413, _2414));
            float _2554 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : min(_2544, 0.0));
            float _2555 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : min(_2545, 0.0));
            _2583 = ((abs(_2420 / _2408) * cbSceneParam._m0[80u].y) * ((((_2554 - _2555) * 2.0) - ((exp2(_2428 * (isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0)))) - exp2(_2428 * (isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0))))) * _2543)) - ((exp2(_2430 * _2554) - exp2(_2430 * _2555)) * _2543))) + (_2423 * cbSceneParam._m0[80u].z);
        }
        vec4 _2585 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2319, _2320, 1.0), 0.0);
        float _2594 = exp2((_2583 * (-1.44269502162933349609375)) * (1.0 - _2585.w));
        float _2595 = log2(_2594);
        float _2611 = log2(_2339);
        _2432 = (exp2(_2611 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2595 * cbSceneParam._m0[78u].x)) * _2585.x) / cbSceneParam._m0[78u].x)) + _2336;
        _2434 = (exp2(_2611 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2595 * cbSceneParam._m0[78u].y)) * _2585.y) / cbSceneParam._m0[78u].y)) + _2337;
        _2436 = (exp2(_2611 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2595 * cbSceneParam._m0[78u].z)) * _2585.z) / cbSceneParam._m0[78u].z)) + _2338;
        _2438 = _2594 * _2339;
    }
    else
    {
        _2432 = _2336;
        _2434 = _2337;
        _2436 = _2338;
        _2438 = _2339;
    }
    float _2450 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2451 = _2450 == 3.0;
    float _2452 = log2(_2438);
    float _2459 = exp2(_2452 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0)));
    float _2460 = exp2(_2452 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0)));
    float _2461 = exp2(_2452 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0)));
    float _2470 = (_2450 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2470 * (_2451 ? _2459 : (_2459 + (cbSceneParam._m0[72u].w * _2432)));
    SV_Target.y = _2470 * (_2451 ? _2460 : (_2460 + (cbSceneParam._m0[72u].w * _2434)));
    SV_Target.z = _2470 * (_2451 ? _2461 : (_2461 + (cbSceneParam._m0[72u].w * _2436)));
    SV_Target.w = cbInstanceData._m0[_2311].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2311].w;
}


