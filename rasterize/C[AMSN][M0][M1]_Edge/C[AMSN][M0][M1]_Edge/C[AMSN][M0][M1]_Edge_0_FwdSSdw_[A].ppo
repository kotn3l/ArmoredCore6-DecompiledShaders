#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M0_M1_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M0_M1_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M0_M1_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _940;
float _3373;
float _3374;
float _3375;
float _3376;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _237 = texture(sampler2D(C_AMSN_M0_M1_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _243 = _237.w;
    float _244 = _237.x * cbMtdParam._m0[9u].x;
    float _245 = _237.y * cbMtdParam._m0[9u].y;
    float _246 = _237.z * cbMtdParam._m0[9u].z;
    vec4 _258 = texture(sampler2D(C_AMSN_M0_M1_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _260 = _258.x;
    vec4 _272 = texture(sampler2D(C_AMSN_M0_M1_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _276 = _272.z;
    float _280 = (_272.x * 2.0) + (-1.0);
    float _282 = (_272.y * 2.0) + (-1.0);
    float _283 = dot(vec2(_280, _282), vec2(_280, _282));
    float _3385 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _289 = sqrt(1.0 - (isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0))));
    float _292 = fma(_289, _207 * NORMAL.x, fma(_282, _214 * TANGENT.x, (_200 * _192) * _280));
    float _295 = fma(_289, _207 * NORMAL.y, fma(_282, _214 * TANGENT.y, (_200 * _193) * _280));
    float _298 = fma(_289, _207 * NORMAL.z, fma(_282, _214 * TANGENT.z, (_200 * _194) * _280));
    float _302 = inversesqrt(dot(vec3(_292, _295, _298), vec3(_292, _295, _298)));
    float _303 = _302 * _292;
    float _304 = _302 * _295;
    float _305 = _302 * _298;
    float _3396 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _306 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
    float _3407 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _3418 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3429 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _3440 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _310 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
    float _326 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _368 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _378 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _368);
    float _379 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _368);
    float _380 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _368);
    float _384 = inversesqrt(dot(vec3(_378, _379, _380), vec3(_378, _379, _380)));
    float _385 = _378 * _384;
    float _386 = _379 * _384;
    float _387 = _380 * _384;
    vec4 _392 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _394 = _392.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _619 = sqrt(((_378 * _378) + (_379 * _379)) + (_380 * _380));
        float _625 = (cbMatDynParam._m0[5u].x * _619) + cbMatDynParam._m0[5u].y;
        float _3451 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
        float _626 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
        float _630 = (cbMatDynParam._m0[5u].z * _619) + cbMatDynParam._m0[5u].w;
        float _3462 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0))) - _626)) + _626) < ((_394 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _406 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _407 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _409 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _411 = _409.w;
    float _431 = fma(_305, cbSceneParam._m0[5u].z, fma(_304, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _303));
    float _434 = fma(_305, cbSceneParam._m0[6u].z, fma(_304, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _303));
    float _437 = fma(_305, cbSceneParam._m0[7u].z, fma(_304, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _303));
    vec4 _439 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _450 = (((_439.y - _306) + (_439.w * _306)) * cbMtdParam._m0[3u].x) + _306;
    uint _463 = uint(roundEven(NORMAL.w)) * 13u;
    uint _465 = _463 + 9u;
    uint _466 = _465 + uint(cbMatDynParam._m0[0u].w);
    float _472 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0)))) * cbInstanceData._m0[_466].x;
    float _473 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0)))) * cbInstanceData._m0[_466].y;
    float _474 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0)))) * cbInstanceData._m0[_466].z;
    float _3473 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _475 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
    float _3484 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _476 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
    float _3495 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _477 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
    vec4 _478 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _483 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _494 = (((_483.x - _310) + (_483.w * _310)) * cbMtdParam._m0[3u].x) + _310;
    float _507 = (cbMtdParam._m0[3u].x * (((_475 * _411) - _475) + _478.x)) + _475;
    float _508 = (cbMtdParam._m0[3u].x * (((_476 * _411) - _476) + _478.y)) + _476;
    float _509 = (cbMtdParam._m0[3u].x * (((_477 * _411) - _477) + _478.z)) + _477;
    float _510 = 1.0 - _494;
    float _511 = _510 * _507;
    float _512 = _510 * _508;
    float _513 = _510 * _509;
    float _518 = (_507 + (-0.039999999105930328369140625)) * _494;
    float _519 = (_508 + (-0.039999999105930328369140625)) * _494;
    float _520 = (_509 + (-0.039999999105930328369140625)) * _494;
    float _521 = _518 + 0.039999999105930328369140625;
    float _523 = _519 + 0.039999999105930328369140625;
    float _524 = _520 + 0.039999999105930328369140625;
    vec4 _533 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _406, cbSceneParam._m0[86u].y * _407));
    float _536 = _533.x * TEXCOORD_4;
    float _537 = dot(vec3(_303, _304, _305), vec3(_385, _386, _387));
    float _540 = _537 * 2.0;
    float _544 = (_540 * _303) - _385;
    float _545 = (_540 * _304) - _386;
    float _546 = (_540 * _305) - _387;
    float _550 = abs(dot(vec3(_385, _386, _387), vec3(_303, _304, _305)));
    float _3506 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _552 = sqrt(_450);
    float _565 = exp2((_552 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_552 * 3.0));
    float _571 = (1.0 - _565) * ((_552 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _572 = _565 * _552;
    float _600 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _604 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _608 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _939;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    float _951;
    float _952;
    float _953;
    float _954;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _664 = fma(_608, cbModelParam._m0[26u].z, fma(_604, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _600));
        float _668 = fma(_608, cbModelParam._m0[27u].z, fma(_604, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _600));
        float _672 = fma(_608, cbModelParam._m0[28u].z, fma(_604, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _600));
        float _697 = _600 + _303;
        float _698 = _604 + _304;
        float _699 = _608 + _305;
        float _709 = fma(_699, cbModelParam._m0[26u].z, fma(_698, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _697)) - _664;
        float _710 = fma(_699, cbModelParam._m0[27u].z, fma(_698, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _697)) - _668;
        float _711 = fma(_699, cbModelParam._m0[28u].z, fma(_698, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _697)) - _672;
        float _715 = inversesqrt(dot(vec3(_709, _710, _711), vec3(_709, _710, _711)));
        float _728 = ((_715 * _709) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_664 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _729 = ((_715 * _710) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_668 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _730 = ((_715 * _711) / cbModelParam._m0[34u].z) + ((((((_672 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _733 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_728, _729, _730), 0.0);
        vec4 _740 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_728, _729, _730), 0.0);
        vec4 _747 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_728, _729, _730), 0.0);
        vec4 _754 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_728, _729, _730), 0.0);
        float _767 = exp2((_733.w + (-0.5)) * 20.0) * 2.0;
        float _768 = _767 * (_733.x + (-0.5));
        float _769 = _767 * (_733.y + (-0.5));
        float _770 = _767 * (_733.z + (-0.5));
        float _777 = exp2((_740.w + (-0.5)) * 20.0) * 2.0;
        float _778 = _777 * (_740.x + (-0.5));
        float _779 = _777 * (_740.y + (-0.5));
        float _780 = _777 * (_740.z + (-0.5));
        float _787 = exp2((_747.w + (-0.5)) * 20.0) * 2.0;
        float _788 = _787 * (_747.x + (-0.5));
        float _789 = _787 * (_747.y + (-0.5));
        float _790 = _787 * (_747.z + (-0.5));
        float _797 = exp2((_754.w + (-0.5)) * 20.0) * 2.0;
        float _798 = _797 * (_754.x + (-0.5));
        float _799 = _797 * (_754.y + (-0.5));
        float _800 = _797 * (_754.z + (-0.5));
        float _801 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _802 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _803 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _804 = _768 * 0.5;
        float _805 = _778 * 0.5;
        float _806 = _788 * 0.5;
        float _807 = dot(vec3(_804, _805, _806), vec3(_804, _805, _806));
        float _812 = (_807 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_807);
        float _821 = (dot(vec3(_303, _304, _305), vec3(_812 * _804, _812 * _805, _812 * _806)) + 1.0) * 0.5;
        float _3532 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _831 = sqrt(((_805 * _805) + (_804 * _804)) + (_806 * _806)) / (_801 + 9.9999997473787516355514526367188e-06);
        float _3543 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _832 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _833 = _832 * 2.0;
        float _837 = (1.0 - _832) / (_832 + 1.0);
        float _3554 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _838 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _847 = ((((1.0 - _838) * (_833 + 2.0)) * exp2(log2(isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * (_833 + 1.0))) + _838) * _801;
        float _848 = _769 * 0.5;
        float _849 = _779 * 0.5;
        float _850 = _789 * 0.5;
        float _851 = dot(vec3(_848, _849, _850), vec3(_848, _849, _850));
        float _856 = (_851 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_851);
        float _864 = (dot(vec3(_303, _304, _305), vec3(_856 * _848, _856 * _849, _856 * _850)) + 1.0) * 0.5;
        float _3565 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _873 = sqrt(((_849 * _849) + (_848 * _848)) + (_850 * _850)) / (_802 + 9.9999997473787516355514526367188e-06);
        float _3576 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _874 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _875 = _874 * 2.0;
        float _879 = (1.0 - _874) / (_874 + 1.0);
        float _3587 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _880 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _889 = ((((1.0 - _880) * (_875 + 2.0)) * exp2(log2(isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))) * (_875 + 1.0))) + _880) * _802;
        float _890 = _770 * 0.5;
        float _891 = _780 * 0.5;
        float _892 = _790 * 0.5;
        float _893 = dot(vec3(_890, _891, _892), vec3(_890, _891, _892));
        float _898 = (_893 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_893);
        float _906 = (dot(vec3(_303, _304, _305), vec3(_898 * _890, _898 * _891, _898 * _892)) + 1.0) * 0.5;
        float _3598 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _915 = sqrt(((_891 * _891) + (_890 * _890)) + (_892 * _892)) / (_803 + 9.9999997473787516355514526367188e-06);
        float _3609 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _917 = _916 * 2.0;
        float _921 = (1.0 - _916) / (_916 + 1.0);
        float _3620 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _922 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _931 = ((((1.0 - _922) * (_917 + 2.0)) * exp2(log2(isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * (_917 + 1.0))) + _922) * _803;
        _939 = _770;
        _941 = _769;
        _942 = _768;
        _943 = _780;
        _944 = _779;
        _945 = _778;
        _946 = _790;
        _947 = _789;
        _948 = _788;
        _949 = _803;
        _950 = _802;
        _951 = _801;
        _952 = cbModelParam._m0[36u].z * (isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0)));
        _953 = cbModelParam._m0[36u].z * (isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0)));
        _954 = cbModelParam._m0[36u].z * (isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0)));
    }
    else
    {
        _939 = _940;
        _941 = _940;
        _942 = _940;
        _943 = _940;
        _944 = _940;
        _945 = _940;
        _946 = _940;
        _947 = _940;
        _948 = _940;
        _949 = _940;
        _950 = _940;
        _951 = _940;
        _952 = 0.0;
        _953 = 0.0;
        _954 = 0.0;
    }
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _983 = fma(_608, cbModelParam._m0[30u].z, fma(_604, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _600));
        float _987 = fma(_608, cbModelParam._m0[31u].z, fma(_604, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _600));
        float _991 = fma(_608, cbModelParam._m0[32u].z, fma(_604, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _600));
        float _1014 = _600 + _303;
        float _1015 = _604 + _304;
        float _1016 = _608 + _305;
        float _1026 = fma(_1016, cbModelParam._m0[30u].z, fma(_1015, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1014)) - _983;
        float _1027 = fma(_1016, cbModelParam._m0[31u].z, fma(_1015, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1014)) - _987;
        float _1028 = fma(_1016, cbModelParam._m0[32u].z, fma(_1015, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1014)) - _991;
        float _1032 = inversesqrt(dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028)));
        float _1045 = ((_1032 * _1026) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_983 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1046 = ((_1032 * _1027) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_987 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1047 = ((_1032 * _1028) / cbModelParam._m0[35u].z) + ((((((_991 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        float _1082 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1049.x + (-0.5));
        float _1084 = _1082 * (_1049.y + (-0.5));
        float _1085 = _1082 * (_1049.z + (-0.5));
        float _1092 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1093 = _1092 * (_1056.x + (-0.5));
        float _1094 = _1092 * (_1056.y + (-0.5));
        float _1095 = _1092 * (_1056.z + (-0.5));
        float _1102 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1103 = _1102 * (_1063.x + (-0.5));
        float _1104 = _1102 * (_1063.y + (-0.5));
        float _1105 = _1102 * (_1063.z + (-0.5));
        float _1112 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1113 = _1112 * (_1070.x + (-0.5));
        float _1114 = _1112 * (_1070.y + (-0.5));
        float _1115 = _1112 * (_1070.z + (-0.5));
        float _1116 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1117 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1118 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1119 = _1083 * 0.5;
        float _1120 = _1093 * 0.5;
        float _1121 = _1103 * 0.5;
        float _1122 = dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121));
        float _1127 = (_1122 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1122);
        float _1135 = (dot(vec3(_303, _304, _305), vec3(_1127 * _1119, _1127 * _1120, _1127 * _1121)) + 1.0) * 0.5;
        float _3661 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1144 = sqrt(((_1120 * _1120) + (_1119 * _1119)) + (_1121 * _1121)) / (_1116 + 9.9999997473787516355514526367188e-06);
        float _3672 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _1146 = _1145 * 2.0;
        float _1150 = (1.0 - _1145) / (_1145 + 1.0);
        float _3683 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1160 = ((((1.0 - _1151) * (_1146 + 2.0)) * exp2(log2(isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * (_1146 + 1.0))) + _1151) * _1116;
        float _1161 = _1084 * 0.5;
        float _1162 = _1094 * 0.5;
        float _1163 = _1104 * 0.5;
        float _1164 = dot(vec3(_1161, _1162, _1163), vec3(_1161, _1162, _1163));
        float _1169 = (_1164 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1164);
        float _1177 = (dot(vec3(_303, _304, _305), vec3(_1169 * _1161, _1169 * _1162, _1169 * _1163)) + 1.0) * 0.5;
        float _3694 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1186 = sqrt(((_1162 * _1162) + (_1161 * _1161)) + (_1163 * _1163)) / (_1117 + 9.9999997473787516355514526367188e-06);
        float _3705 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _1188 = _1187 * 2.0;
        float _1192 = (1.0 - _1187) / (_1187 + 1.0);
        float _3716 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1202 = ((((1.0 - _1193) * (_1188 + 2.0)) * exp2(log2(isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))) * (_1188 + 1.0))) + _1193) * _1117;
        float _1203 = _1085 * 0.5;
        float _1204 = _1095 * 0.5;
        float _1205 = _1105 * 0.5;
        float _1206 = dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205));
        float _1211 = (_1206 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1206);
        float _1219 = (dot(vec3(_303, _304, _305), vec3(_1211 * _1203, _1211 * _1204, _1211 * _1205)) + 1.0) * 0.5;
        float _3727 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1228 = sqrt(((_1204 * _1204) + (_1203 * _1203)) + (_1205 * _1205)) / (_1118 + 9.9999997473787516355514526367188e-06);
        float _3738 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1230 = _1229 * 2.0;
        float _1234 = (1.0 - _1229) / (_1229 + 1.0);
        float _3749 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1244 = ((((1.0 - _1235) * (_1230 + 2.0)) * exp2(log2(isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) * (_1230 + 1.0))) + _1235) * _1118;
        _1252 = _1085;
        _1253 = _1084;
        _1254 = _1083;
        _1255 = _1095;
        _1256 = _1094;
        _1257 = _1093;
        _1258 = _1105;
        _1259 = _1104;
        _1260 = _1103;
        _1261 = _1118;
        _1262 = _1117;
        _1263 = _1116;
        _1264 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)));
        _1265 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)));
        _1266 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)));
    }
    else
    {
        _1252 = _940;
        _1253 = _940;
        _1254 = _940;
        _1255 = _940;
        _1256 = _940;
        _1257 = _940;
        _1258 = _940;
        _1259 = _940;
        _1260 = _940;
        _1261 = _940;
        _1262 = _940;
        _1263 = _940;
        _1264 = 0.0;
        _1265 = 0.0;
        _1266 = 0.0;
    }
    float _1276 = (cbModelParam._m0[1u].x * (_1264 - _952)) + _952;
    float _1277 = (cbModelParam._m0[1u].x * (_1265 - _953)) + _953;
    float _1278 = (cbModelParam._m0[1u].x * (_1266 - _954)) + _954;
    float _1299 = fma(_1278, cbSceneParam._m0[89u].z, fma(_1277, cbSceneParam._m0[89u].y, _1276 * cbSceneParam._m0[89u].x));
    float _1302 = fma(_1278, cbSceneParam._m0[90u].z, fma(_1277, cbSceneParam._m0[90u].y, _1276 * cbSceneParam._m0[90u].x));
    float _1305 = fma(_1278, cbSceneParam._m0[91u].z, fma(_1277, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1276));
    float _1320 = _544 * 0.5;
    float _1321 = _545 * 0.5;
    float _1322 = _546 * 0.5;
    float _1323 = dot(vec4(_1320, _1321, _1322, 1.0), vec4(_1254, _1257, _1260, _1263));
    float _1326 = dot(vec4(_1320, _1321, _1322, 1.0), vec4(_1253, _1256, _1259, _1262));
    float _1329 = dot(vec4(_1320, _1321, _1322, 1.0), vec4(_1252, _1255, _1258, _1261));
    float _1363;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1336 = dot(vec4(_1320, _1321, _1322, 1.0), vec4(_939, _943, _946, _949));
        float _1340 = dot(vec4(_1320, _1321, _1322, 1.0), vec4(_941, _944, _947, _950));
        float _1344 = dot(vec4(_1320, _1321, _1322, 1.0), vec4(_942, _945, _948, _951));
        float _1351 = dot(vec4(cbModelParam._m0[39u]), vec4(_1320, _1321, _1322, 1.0));
        _1363 = dot(vec3(isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)), isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)), isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1351) ? 0.0 : (isnan(0.0) ? _1351 : max(0.0, _1351))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1363 = 1.0;
    }
    float _1374;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1365 = dot(vec4(cbModelParam._m0[40u]), vec4(_1320, _1321, _1322, 1.0));
        _1374 = dot(vec3(isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)), isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)), isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1365) ? 0.0 : (isnan(0.0) ? _1365 : max(0.0, _1365))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1374 = 1.0;
    }
    float _1378 = (_1374 * cbModelParam._m0[1u].x) + (_1363 * (1.0 - cbModelParam._m0[1u].x));
    float _1388 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _450);
    float _1389 = isnan(_1388) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1388 : min(cbModelParam._m0[25u].z, _1388));
    float _1471;
    float _1473;
    float _1475;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1438 = fma(_608, cbModelParam._m0[13u].z, fma(_604, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _600)) + cbModelParam._m0[13u].w;
        float _1442 = fma(_608, cbModelParam._m0[14u].z, fma(_604, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _600)) + cbModelParam._m0[14u].w;
        float _1446 = fma(_608, cbModelParam._m0[15u].z, fma(_604, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _600)) + cbModelParam._m0[15u].w;
        float _1449 = fma(_546, cbModelParam._m0[13u].z, fma(_545, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _544));
        float _1452 = fma(_546, cbModelParam._m0[14u].z, fma(_545, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _544));
        float _1455 = fma(_546, cbModelParam._m0[15u].z, fma(_545, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _544));
        float _1483;
        if (_1449 > 0.0)
        {
            _1483 = abs((1.0 - _1438) / _1449);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1449 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1438 + 1.0) / _1449);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1483 = frontier_phi_17_15_ladder;
        }
        float _1712;
        if (_1452 > 0.0)
        {
            _1712 = abs((1.0 - _1442) / _1452);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1452 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1442 + 1.0) / _1452);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1712 = frontier_phi_26_22_ladder;
        }
        float _1969;
        if (_1455 > 0.0)
        {
            _1969 = abs((1.0 - _1446) / _1455);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1455 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1446 + 1.0) / _1455);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1969 = frontier_phi_38_33_ladder;
        }
        float _1971 = isnan(_1712) ? _1483 : (isnan(_1483) ? _1712 : min(_1483, _1712));
        float _1972 = isnan(_1969) ? _1971 : (isnan(_1971) ? _1969 : min(_1971, _1969));
        float _1976 = (_1972 * _1449) + _1438;
        float _1977 = (_1972 * _1452) + _1442;
        float _1978 = (_1972 * _1455) + _1446;
        float _1979 = _1972 * 9.9999997473787516355514526367188e-05;
        float _1981 = (-1.0) - _1979;
        float _1983 = _1979 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1978 > _1983) || ((_1978 < _1981) || ((_1977 > _1983) || ((_1977 < _1981) || ((_1976 < _1981) || (_1976 > _1983))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2106 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1978, cbModelParam._m0[9u].z, fma(_1977, cbModelParam._m0[9u].y, _1976 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1978, cbModelParam._m0[10u].z, fma(_1977, cbModelParam._m0[10u].y, _1976 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1978, cbModelParam._m0[11u].z, fma(_1977, cbModelParam._m0[11u].y, _1976 * cbModelParam._m0[11u].x))), _1389);
            frontier_phi_16_38_ladder = _2106.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2106.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2106.x * cbModelParam._m0[1u].y;
        }
        _1471 = frontier_phi_16_38_ladder_2;
        _1473 = frontier_phi_16_38_ladder_1;
        _1475 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1459 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_544, _545, _546), _1389);
        _1471 = _1459.x * cbModelParam._m0[1u].y;
        _1473 = _1459.y * cbModelParam._m0[1u].y;
        _1475 = _1459.z * cbModelParam._m0[1u].y;
    }
    float _1479 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _450);
    float _1480 = isnan(_1479) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1479 : min(cbModelParam._m0[25u].w, _1479));
    float _1573;
    float _1575;
    float _1577;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1537 = fma(_608, cbModelParam._m0[21u].z, fma(_604, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _600)) + cbModelParam._m0[21u].w;
        float _1541 = fma(_608, cbModelParam._m0[22u].z, fma(_604, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _600)) + cbModelParam._m0[22u].w;
        float _1545 = fma(_608, cbModelParam._m0[23u].z, fma(_604, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _600)) + cbModelParam._m0[23u].w;
        float _1548 = fma(_546, cbModelParam._m0[21u].z, fma(_545, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _544));
        float _1551 = fma(_546, cbModelParam._m0[22u].z, fma(_545, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _544));
        float _1554 = fma(_546, cbModelParam._m0[23u].z, fma(_545, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _544));
        float _1717;
        if (_1548 > 0.0)
        {
            _1717 = abs((1.0 - _1537) / _1548);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1548 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1537 + 1.0) / _1548);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1717 = frontier_phi_28_24_ladder;
        }
        float _1996;
        if (_1551 > 0.0)
        {
            _1996 = abs((1.0 - _1541) / _1551);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1551 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1541 + 1.0) / _1551);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1996 = frontier_phi_40_35_ladder;
        }
        float _2209;
        if (_1554 > 0.0)
        {
            _2209 = abs((1.0 - _1545) / _1554);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1554 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1545 + 1.0) / _1554);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2209 = frontier_phi_49_46_ladder;
        }
        float _2211 = isnan(_1996) ? _1717 : (isnan(_1717) ? _1996 : min(_1717, _1996));
        float _2212 = isnan(_2209) ? _2211 : (isnan(_2211) ? _2209 : min(_2211, _2209));
        float _2216 = (_2212 * _1548) + _1537;
        float _2217 = (_2212 * _1551) + _1541;
        float _2218 = (_2212 * _1554) + _1545;
        float _2219 = _2212 * 9.9999997473787516355514526367188e-05;
        float _2220 = (-1.0) - _2219;
        float _2222 = _2219 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2218 > _2222) || ((_2218 < _2220) || ((_2217 > _2222) || ((_2217 < _2220) || ((_2216 < _2220) || (_2216 > _2222))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2435 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2218, cbModelParam._m0[17u].z, fma(_2217, cbModelParam._m0[17u].y, _2216 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2218, cbModelParam._m0[18u].z, fma(_2217, cbModelParam._m0[18u].y, _2216 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2218, cbModelParam._m0[19u].z, fma(_2217, cbModelParam._m0[19u].y, _2216 * cbModelParam._m0[19u].x))), _1480);
            frontier_phi_25_49_ladder = _2435.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2435.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2435.x * cbModelParam._m0[1u].z;
        }
        _1573 = frontier_phi_25_49_ladder_2;
        _1575 = frontier_phi_25_49_ladder_1;
        _1577 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1557 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_544, _545, _546), _1480);
        _1573 = _1557.x * cbModelParam._m0[1u].z;
        _1575 = _1557.y * cbModelParam._m0[1u].z;
        _1577 = _1557.z * cbModelParam._m0[1u].z;
    }
    float _1590 = (((_571 * _521) + _572) * _536) * ((cbModelParam._m0[1u].w * (_1573 - _1471)) + _1471);
    float _1592 = (((_571 * _523) + _572) * _536) * ((cbModelParam._m0[1u].w * (_1575 - _1473)) + _1473);
    float _1594 = (((_571 * _524) + _572) * _536) * ((cbModelParam._m0[1u].w * (_1577 - _1475)) + _1475);
    float _1597 = fma(_1594, cbSceneParam._m0[89u].z, fma(_1592, cbSceneParam._m0[89u].y, _1590 * cbSceneParam._m0[89u].x));
    float _1600 = fma(_1594, cbSceneParam._m0[90u].z, fma(_1592, cbSceneParam._m0[90u].y, _1590 * cbSceneParam._m0[90u].x));
    float _1603 = fma(_1594, cbSceneParam._m0[91u].z, fma(_1592, cbSceneParam._m0[91u].y, _1590 * cbSceneParam._m0[91u].x));
    vec4 _1611 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_406, _407));
    float _1613 = _1611.w;
    float _1625 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1613);
    float _1626 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1613);
    float _1627 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1613);
    uvec4 _1631 = floatBitsToUint(cbInstanceData._m0[_463 + 5u]);
    uint _1633 = _1631.x * 14u;
    uint _1634 = _1633 + 13u;
    float _1641 = _536 + (-1.0);
    float _1646 = (cbLight._m0[_1634].x * _1641) + 1.0;
    float _1647 = (cbLight._m0[_1634].y * _1641) + 1.0;
    float _1648 = (cbLight._m0[_1634].z * _1641) + 1.0;
    float _1649 = (cbLight._m0[_1634].w * _1641) + 1.0;
    uint _1650 = _1633 + 5u;
    float _1656 = isnan(1.0) ? _1647 : (isnan(_1647) ? 1.0 : min(_1647, 1.0));
    uint _1660 = _1633 + 4u;
    float _1670 = isnan(1.0) ? _1646 : (isnan(_1646) ? 1.0 : min(_1646, 1.0));
    uint _1674 = _1633 | 1u;
    float _1685 = dot(vec3(cbLight._m0[_1633].xyz), vec3(_303, _304, _305));
    float _1688 = dot(vec3(cbLight._m0[_1674].xyz), vec3(_303, _304, _305));
    float _3885 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
    float _3896 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
    float _1693 = (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * 0.3183098733425140380859375;
    float _1695 = (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * 0.3183098733425140380859375;
    float _1702 = ((cbLight._m0[_1650].x * _1656) * _1695) + (((cbLight._m0[_1660].x * _1625) * _1670) * _1693);
    float _1703 = ((_1656 * cbLight._m0[_1650].y) * _1695) + (((cbLight._m0[_1660].y * _1626) * _1670) * _1693);
    float _1704 = ((_1656 * cbLight._m0[_1650].z) * _1695) + (((cbLight._m0[_1660].z * _1627) * _1670) * _1693);
    uvec4 _1709 = floatBitsToUint(cbLight._m0[_1633 + 12u]);
    bool _1711 = _1709.x == 0u;
    float _1722;
    float _1724;
    float _1726;
    if (_1711)
    {
        _1722 = _1702;
        _1724 = _1703;
        _1726 = _1704;
    }
    else
    {
        uint _1730 = _1633 + 6u;
        float _1746 = (dot(vec3(cbLight._m0[_1633 + 2u].xyz), vec3(_303, _304, _305)) * 0.5) + 0.5;
        float _1747 = _1746 * _1746;
        float _3907 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1748 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1749 = isnan(1.0) ? _1648 : (isnan(_1648) ? 1.0 : min(_1648, 1.0));
        _1722 = (((cbLight._m0[_1730].x * 0.3183098733425140380859375) * _1748) * _1749) + _1702;
        _1724 = (((cbLight._m0[_1730].y * 0.3183098733425140380859375) * _1748) * _1749) + _1703;
        _1726 = (((cbLight._m0[_1730].z * 0.3183098733425140380859375) * _1748) * _1749) + _1704;
    }
    bool _1729 = _1709.y == 0u;
    float _1767;
    float _1769;
    float _1771;
    if (_1729)
    {
        _1767 = _1722;
        _1769 = _1724;
        _1771 = _1726;
    }
    else
    {
        uint _1940 = _1633 + 7u;
        float _1956 = (dot(vec3(cbLight._m0[_1633 + 3u].xyz), vec3(_303, _304, _305)) * 0.5) + 0.5;
        float _1957 = _1956 * _1956;
        float _3923 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
        float _1958 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1959 = isnan(1.0) ? _1649 : (isnan(_1649) ? 1.0 : min(_1649, 1.0));
        _1767 = (((cbLight._m0[_1940].x * 0.3183098733425140380859375) * _1958) * _1959) + _1722;
        _1769 = (((cbLight._m0[_1940].y * 0.3183098733425140380859375) * _1958) * _1959) + _1724;
        _1771 = (((cbLight._m0[_1940].z * 0.3183098733425140380859375) * _1958) * _1959) + _1726;
    }
    uint _1774 = _1633 + 8u;
    float _1787 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1633].w)) * _450) * 0.949999988079071044921875);
    float _1788 = _1787 * _1787;
    float _1789 = cbLight._m0[_1633].x + _385;
    float _1790 = cbLight._m0[_1633].y + _386;
    float _1791 = cbLight._m0[_1633].z + _387;
    float _1795 = inversesqrt(dot(vec3(_1789, _1790, _1791), vec3(_1789, _1790, _1791)));
    float _1796 = _1795 * _1789;
    float _1797 = _1795 * _1790;
    float _1798 = _1795 * _1791;
    float _1799 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_1633].xyz));
    float _3939 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
    float _1802 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _3950 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _1803 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _1804 = dot(vec3(_303, _304, _305), vec3(_1796, _1797, _1798));
    float _3961 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1807 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _1808 = dot(vec3(cbLight._m0[_1633].xyz), vec3(_1796, _1797, _1798));
    float _3972 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _1812 = _1788 * _1788;
    float _1816 = ((_1807 * _1807) * (_1812 + (-1.0))) + 1.0;
    float _1824 = exp2(log2(1.0 - (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0)))) * 5.0);
    float _1825 = 0.959999978542327880859375 - _518;
    float _1827 = 0.959999978542327880859375 - _519;
    float _1828 = 0.959999978542327880859375 - _520;
    float _1835 = 1.0 - _1788;
    float _1846 = (0.5 / (((_1803 * ((_1802 * _1835) + _1788)) + 9.9999999392252902907785028219223e-09) + (((_1803 * _1835) + _1788) * _1802))) * _1802;
    float _3983 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
    float _1848 = (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_1812 / ((_1816 * _1816) * 3.141590118408203125));
    uint _1862 = _1633 + 9u;
    float _1873 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1674].w)) * _450) * 0.949999988079071044921875);
    float _1874 = _1873 * _1873;
    float _1875 = cbLight._m0[_1674].x + _385;
    float _1876 = cbLight._m0[_1674].y + _386;
    float _1877 = cbLight._m0[_1674].z + _387;
    float _1881 = inversesqrt(dot(vec3(_1875, _1876, _1877), vec3(_1875, _1876, _1877)));
    float _1882 = _1881 * _1875;
    float _1883 = _1881 * _1876;
    float _1884 = _1881 * _1877;
    float _1885 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_1674].xyz));
    float _3994 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1888 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _1889 = dot(vec3(_303, _304, _305), vec3(_1882, _1883, _1884));
    float _4005 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _1892 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _1893 = dot(vec3(cbLight._m0[_1674].xyz), vec3(_1882, _1883, _1884));
    float _4016 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
    float _1897 = _1874 * _1874;
    float _1901 = ((_1892 * _1892) * (_1897 + (-1.0))) + 1.0;
    float _1908 = exp2(log2(1.0 - (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) * 5.0);
    float _1915 = 1.0 - _1874;
    float _1925 = (0.5 / (((_1803 * ((_1888 * _1915) + _1874)) + 9.9999999392252902907785028219223e-09) + (((_1803 * _1915) + _1874) * _1888))) * _1888;
    float _4027 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _1927 = (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_1897 / ((_1901 * _1901) * 3.141590118408203125));
    float _1937 = (((((_1908 * _1825) + _521) * cbLight._m0[_1862].x) * _1927) * _1656) + ((((cbLight._m0[_1774].x * _1625) * ((_1824 * _1825) + _521)) * _1848) * _1670);
    float _1938 = (((((_1908 * _1827) + _523) * cbLight._m0[_1862].y) * _1927) * _1656) + ((((cbLight._m0[_1774].y * _1626) * ((_1824 * _1827) + _523)) * _1848) * _1670);
    float _1939 = (((((_1908 * _1828) + _524) * cbLight._m0[_1862].z) * _1927) * _1656) + ((((cbLight._m0[_1774].z * _1627) * ((_1824 * _1828) + _524)) * _1848) * _1670);
    float _2001;
    float _2003;
    float _2005;
    if (_1711)
    {
        _2001 = _1937;
        _2003 = _1938;
        _2005 = _1939;
    }
    else
    {
        uint _2007 = _1633 + 2u;
        uint _2011 = _1633 + 10u;
        float _2025 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2007].w)) * _450) * 0.949999988079071044921875);
        float _2026 = _2025 * _2025;
        float _2027 = cbLight._m0[_2007].x + _385;
        float _2028 = cbLight._m0[_2007].y + _386;
        float _2029 = cbLight._m0[_2007].z + _387;
        float _2033 = inversesqrt(dot(vec3(_2027, _2028, _2029), vec3(_2027, _2028, _2029)));
        float _2034 = _2033 * _2027;
        float _2035 = _2033 * _2028;
        float _2036 = _2033 * _2029;
        float _2037 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_2007].xyz));
        float _4038 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        float _2040 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _2041 = dot(vec3(_303, _304, _305), vec3(_2034, _2035, _2036));
        float _4049 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
        float _2044 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _2045 = dot(vec3(cbLight._m0[_2007].xyz), vec3(_2034, _2035, _2036));
        float _4060 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2049 = _2026 * _2026;
        float _2053 = ((_2044 * _2044) * (_2049 + (-1.0))) + 1.0;
        float _2060 = exp2(log2(1.0 - (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0)))) * 5.0);
        float _2067 = 1.0 - _2026;
        float _2077 = (0.5 / (((_1803 * ((_2040 * _2067) + _2026)) + 9.9999999392252902907785028219223e-09) + (((_1803 * _2067) + _2026) * _2040))) * _2040;
        float _4071 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2079 = (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (_2049 / ((_2053 * _2053) * 3.141590118408203125));
        float _2080 = isnan(1.0) ? _1648 : (isnan(_1648) ? 1.0 : min(_1648, 1.0));
        _2001 = (((((_2060 * _1825) + _521) * cbLight._m0[_2011].x) * _2079) * _2080) + _1937;
        _2003 = (((((_2060 * _1827) + _523) * cbLight._m0[_2011].y) * _2079) * _2080) + _1938;
        _2005 = (((((_2060 * _1828) + _524) * cbLight._m0[_2011].z) * _2079) * _2080) + _1939;
    }
    float _2115;
    float _2117;
    float _2119;
    if (_1729)
    {
        _2115 = _2001;
        _2117 = _2003;
        _2119 = _2005;
    }
    else
    {
        uint _2126 = _1633 + 3u;
        uint _2130 = _1633 + 11u;
        float _2144 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2126].w)) * _450) * 0.949999988079071044921875);
        float _2145 = _2144 * _2144;
        float _2146 = cbLight._m0[_2126].x + _385;
        float _2147 = cbLight._m0[_2126].y + _386;
        float _2148 = cbLight._m0[_2126].z + _387;
        float _2152 = inversesqrt(dot(vec3(_2146, _2147, _2148), vec3(_2146, _2147, _2148)));
        float _2153 = _2152 * _2146;
        float _2154 = _2152 * _2147;
        float _2155 = _2152 * _2148;
        float _2156 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_2126].xyz));
        float _4087 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        float _2159 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _2160 = dot(vec3(_303, _304, _305), vec3(_2153, _2154, _2155));
        float _4098 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2163 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _2164 = dot(vec3(cbLight._m0[_2126].xyz), vec3(_2153, _2154, _2155));
        float _4109 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2168 = _2145 * _2145;
        float _2172 = ((_2163 * _2163) * (_2168 + (-1.0))) + 1.0;
        float _2179 = exp2(log2(1.0 - (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0)))) * 5.0);
        float _2186 = 1.0 - _2145;
        float _2196 = (0.5 / (((_1803 * ((_2159 * _2186) + _2145)) + 9.9999999392252902907785028219223e-09) + (((_1803 * _2186) + _2145) * _2159))) * _2159;
        float _4120 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2198 = (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_2168 / ((_2172 * _2172) * 3.141590118408203125));
        float _2199 = isnan(1.0) ? _1649 : (isnan(_1649) ? 1.0 : min(_1649, 1.0));
        _2115 = (((((_2179 * _1825) + _521) * cbLight._m0[_2130].x) * _2198) * _2199) + _2001;
        _2117 = (((((_2179 * _1827) + _523) * cbLight._m0[_2130].y) * _2198) * _2199) + _2003;
        _2119 = (((((_2179 * _1828) + _524) * cbLight._m0[_2130].z) * _2198) * _2199) + _2005;
    }
    float _2334;
    float _2336;
    float _2338;
    float _2340;
    float _2342;
    float _2344;
    if (_1631.y == 0u)
    {
        float _2274 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2275 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2274;
        float _2276 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2274;
        float _2277 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2274;
        uvec4 _2289 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2290 = _2289.x;
        uint _2301 = uint((float(_2289.y) * floor(float(uint(cbSceneParam._m0[85u].y * _407) / _2290))) + floor(float(uint(cbSceneParam._m0[85u].x * _406) / _2290)));
        float _2311 = (log2(_2277 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2312 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        uint _2315 = uint(isnan(14.0) ? _2312 : (isnan(_2312) ? 14.0 : min(_2312, 14.0)));
        uvec4 _2320 = texelFetch(g_lightClusterGridBuffer, int(((_2315 << 2u) + (_2301 << 6u)) >> 2u));
        uint _2321 = _2320.x;
        uint _2322 = _2289.z;
        float _2440;
        float _2442;
        float _2444;
        float _2446;
        float _2448;
        float _2450;
        if (((((1u << ((_2322 >> 4u) & 15u)) + 4294967295u) & _2321) == 0u) || ((_2322 & 240u) == 0u))
        {
            _2440 = 0.0;
            _2442 = 0.0;
            _2444 = 0.0;
            _2446 = 0.0;
            _2448 = 0.0;
            _2450 = 0.0;
        }
        else
        {
            float _2441;
            float _2443;
            float _2445;
            float _2447;
            float _2449;
            float _2451;
            float _2593 = 0.0;
            float _2594 = 0.0;
            float _2595 = 0.0;
            float _2596 = 0.0;
            float _2597 = 0.0;
            float _2598 = 0.0;
            uint _2599 = 0u;
            uint _2608;
            bool _2609;
            for (;;)
            {
                _2608 = texelFetch(g_lightClassification, int((((_2315 << 5u) + (_2301 << 9u)) + (_2599 << 2u)) >> 2u)).x;
                _2609 = _2608 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2609)
                {
                    frontier_phi_66_pred = _2593;
                    frontier_phi_66_pred_1 = _2598;
                    frontier_phi_66_pred_2 = _2597;
                    frontier_phi_66_pred_3 = _2596;
                    frontier_phi_66_pred_4 = _2595;
                    frontier_phi_66_pred_5 = _2594;
                }
                else
                {
                    float _2738;
                    float _2739;
                    float _2740;
                    float _2741;
                    float _2742;
                    float _2743;
                    uint _2744;
                    _2738 = _2593;
                    _2739 = _2594;
                    _2740 = _2595;
                    _2741 = _2596;
                    _2742 = _2597;
                    _2743 = _2598;
                    _2744 = _2608;
                    float _2665;
                    float _2666;
                    float _2667;
                    float _2668;
                    float _2669;
                    float _2670;
                    for (;;)
                    {
                        uint _2748 = uint(findLSB(_2744)) + (_2599 << 5u);
                        uint _2745 = (_2744 + 4294967295u) & _2744;
                        uint _2750 = _2748 * 48u;
                        vec4 _2764 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2750)).x, texelFetch(g_PointLightRenderingBuffer, int(_2750 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2750 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2750 + 3u)).x));
                        uint _2770 = (_2748 * 48u) + 4u;
                        vec4 _2783 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2770)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 3u)).x));
                        uint _2789 = (_2748 * 48u) + 8u;
                        vec3 _2800 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2789)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 2u)).x));
                        float _2804 = _2764.x - _2275;
                        float _2805 = _2764.y - _2276;
                        float _2806 = _2764.z - _2277;
                        float _2807 = dot(vec3(_2804, _2805, _2806), vec3(_2804, _2805, _2806));
                        float _2810 = inversesqrt(_2807);
                        float _2811 = _2810 * _2804;
                        float _2812 = _2810 * _2805;
                        float _2813 = _2810 * _2806;
                        float _2814 = dot(vec3(_431, _434, _437), vec3(_2811, _2812, _2813));
                        float _2819 = 1.0 - (_2807 * _2764.w);
                        float _4146 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
                        float _2820 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
                        float _2821 = sqrt(_2807) * _2783.w;
                        float _2824 = 1.39999997615814208984375 / (_2821 + 1.39999997615814208984375);
                        float _2825 = _2824 * _2824;
                        float _2828 = ((1.0 - _2825) * _2814) + _2825;
                        float _2831 = _2821 * _2821;
                        float _2835 = ((isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0))) * _2820) / ((_2831 * 0.699999988079071044921875) + 1.0);
                        float _2839 = (-0.0) - _2275;
                        float _2840 = (-0.0) - _2276;
                        float _2841 = (-0.0) - _2277;
                        float _2845 = inversesqrt(dot(vec3(_2839, _2840, _2841), vec3(_2839, _2840, _2841)));
                        float _2846 = _2845 * _2839;
                        float _2847 = _2845 * _2840;
                        float _2848 = _2845 * _2841;
                        float _2856 = exp2(log2(1.0 / ((_2831 * 3.5) + 5.0)) * 0.25);
                        float _2857 = 1.0 - _552;
                        float _2864 = sqrt(1.0 - ((1.0 - (_2857 * _2857)) * (1.0 - (_2856 * _2856))));
                        float _2865 = _2864 * _2864;
                        float _2866 = _2865 * _2865;
                        float _2867 = _2846 + _2811;
                        float _2868 = _2847 + _2812;
                        float _2869 = _2848 + _2813;
                        float _2873 = inversesqrt(dot(vec3(_2867, _2868, _2869), vec3(_2867, _2868, _2869)));
                        float _2877 = dot(vec3(_431, _434, _437), vec3(_2846, _2847, _2848));
                        float _4162 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
                        float _2880 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
                        float _2881 = dot(vec3(_431, _434, _437), vec3(_2873 * _2867, _2873 * _2868, _2873 * _2869));
                        float _4173 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
                        float _2884 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
                        float _2888 = ((_2884 * _2884) * (_2866 + (-1.0))) + 1.0;
                        float _2889 = _2824 * _2865;
                        float _2890 = _2889 * _2889;
                        float _2893 = ((1.0 - _2890) * _2814) + _2890;
                        float _4184 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
                        float _2894 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
                        float _2895 = 1.0 - _2865;
                        float _2905 = (0.5 / (((_2894 * ((_2880 * _2895) + _2865)) + 9.9999999392252902907785028219223e-09) + (((_2894 * _2895) + _2865) * _2880))) * _2894;
                        float _4195 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
                        float _2916 = (((_2866 * 3.1415927410125732421875) * (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0)))) / ((_2888 * _2888) * ((_2831 * 2.1991131305694580078125) + 3.141590118408203125))) * _2820;
                        _2668 = (_2835 * _2783.x) + _2741;
                        _2669 = (_2835 * _2783.y) + _2742;
                        _2670 = (_2835 * _2783.z) + _2743;
                        _2665 = (_2916 * _2800.x) + _2738;
                        _2666 = (_2916 * _2800.y) + _2739;
                        _2667 = (_2916 * _2800.z) + _2740;
                        if (_2745 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2738 = _2665;
                            _2739 = _2666;
                            _2740 = _2667;
                            _2741 = _2668;
                            _2742 = _2669;
                            _2743 = _2670;
                            _2744 = _2745;
                        }
                    }
                    frontier_phi_66_pred = _2665;
                    frontier_phi_66_pred_1 = _2670;
                    frontier_phi_66_pred_2 = _2669;
                    frontier_phi_66_pred_3 = _2668;
                    frontier_phi_66_pred_4 = _2667;
                    frontier_phi_66_pred_5 = _2666;
                }
                _2441 = frontier_phi_66_pred;
                _2451 = frontier_phi_66_pred_1;
                _2449 = frontier_phi_66_pred_2;
                _2447 = frontier_phi_66_pred_3;
                _2445 = frontier_phi_66_pred_4;
                _2443 = frontier_phi_66_pred_5;
                uint _2600 = _2599 + 1u;
                if (_2600 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2593 = _2441;
                    _2594 = _2443;
                    _2595 = _2445;
                    _2596 = _2447;
                    _2597 = _2449;
                    _2598 = _2451;
                    _2599 = _2600;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2440 = _2441;
            _2442 = _2443;
            _2444 = _2445;
            _2446 = _2447;
            _2448 = _2449;
            _2450 = _2451;
        }
        uvec4 _2454 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2455 = _2454.z;
        uint _2457 = (_2455 >> 8u) & 15u;
        float _2561;
        float _2563;
        float _2565;
        float _2567;
        float _2569;
        float _2571;
        if (((4294967295u << _2457) & _2321) == 0u)
        {
            _2561 = _2440;
            _2563 = _2442;
            _2565 = _2444;
            _2567 = _2446;
            _2569 = _2448;
            _2571 = _2450;
        }
        else
        {
            float _2586 = inversesqrt(dot(vec3(_2275, _2276, _2277), vec3(_2275, _2276, _2277)));
            float _2587 = _2586 * _2275;
            float _2588 = _2586 * _2276;
            float _2589 = _2586 * _2277;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2457 < ((_2455 >> 12u) & 15u))
            {
                float _2562;
                float _2564;
                float _2566;
                float _2568;
                float _2570;
                float _2572;
                float _2721 = _2440;
                float _2722 = _2442;
                float _2723 = _2444;
                float _2724 = _2446;
                float _2725 = _2448;
                float _2726 = _2450;
                uint _2727 = _2457;
                uint _2736;
                bool _2737;
                for (;;)
                {
                    _2736 = texelFetch(g_lightClassification, int((((_2315 << 5u) + (_2301 << 9u)) + (_2727 << 2u)) >> 2u)).x;
                    _2737 = _2736 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2737)
                    {
                        frontier_phi_77_pred = _2726;
                        frontier_phi_77_pred_1 = _2725;
                        frontier_phi_77_pred_2 = _2724;
                        frontier_phi_77_pred_3 = _2723;
                        frontier_phi_77_pred_4 = _2722;
                        frontier_phi_77_pred_5 = _2721;
                    }
                    else
                    {
                        float _2930;
                        float _2931;
                        float _2932;
                        float _2933;
                        float _2934;
                        float _2935;
                        float _3226;
                        float _3227;
                        float _3228;
                        float _3229;
                        float _3230;
                        float _3231;
                        float _2943 = _2721;
                        float _2944 = _2722;
                        float _2945 = _2723;
                        float _2946 = _2724;
                        float _2947 = _2725;
                        float _2948 = _2726;
                        uint _2949 = _2736;
                        uint _2950;
                        vec4 _2975;
                        float _2976;
                        vec4 _2991;
                        vec3 _3003;
                        vec4 _3019;
                        vec4 _3035;
                        float _3082;
                        bool _3083;
                        for (;;)
                        {
                            uint _2960 = ((_2727 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2949));
                            _2950 = (_2949 + 4294967295u) & _2949;
                            uint _2962 = _2960 * 40u;
                            _2975 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2962)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 3u)).x));
                            _2976 = _2975.w;
                            uint _2978 = (_2960 * 40u) + 4u;
                            _2991 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2978)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 3u)).x));
                            uint _2993 = (_2960 * 40u) + 8u;
                            _3003 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2993)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 2u)).x));
                            uint _3006 = (_2960 * 40u) + 16u;
                            _3019 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3006)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 3u)).x));
                            uint _3022 = (_2960 * 40u) + 20u;
                            _3035 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3022)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 3u)).x));
                            uint _3038 = (_2960 * 40u) + 24u;
                            vec4 _3051 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3038)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 3u)).x));
                            uint _3057 = (_2960 * 40u) + 28u;
                            vec4 _3070 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3057)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 3u)).x));
                            _3082 = fma(_2277, _3070.z, fma(_2276, _3070.y, _3070.x * _2275)) + _3070.w;
                            _3083 = !((fma(_2277, _3051.z, fma(_2276, _3051.y, _3051.x * _2275)) + _3051.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3083)
                            {
                                float _3110 = _2975.x - _2275;
                                float _3111 = _2975.y - _2276;
                                float _3112 = _2975.z - _2277;
                                float _3113 = dot(vec3(_3110, _3111, _3112), vec3(_3110, _3111, _3112));
                                float _3116 = inversesqrt(_3113);
                                float _3117 = _3116 * _3110;
                                float _3118 = _3116 * _3111;
                                float _3119 = _3116 * _3112;
                                float _3123 = 1.0 - (_3113 / (_2976 * _2976));
                                float _4206 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                                float _3124 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
                                float _3128 = sqrt(_3113) * _2991.w;
                                float _3130 = 1.39999997615814208984375 / (_3128 + 1.39999997615814208984375);
                                float _3131 = _3130 * _3130;
                                float _3134 = ((1.0 - _3131) * dot(vec3(_3117, _3118, _3119), vec3(_431, _434, _437))) + _3131;
                                float _3137 = _3128 * _3128;
                                float _3141 = (fma(_2277, _3019.z, fma(_2276, _3019.y, _3019.x * _2275)) + _3019.w) / _3082;
                                float _3142 = (fma(_2277, _3035.z, fma(_2276, _3035.y, _3035.x * _2275)) + _3035.w) / _3082;
                                float _3146 = 1.0 - dot(vec2(_3141, _3142), vec2(_3141, _3142));
                                float _4222 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
                                float _3147 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
                                float _3148 = _3147 * (((isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0))) * _3124) / ((_3137 * 0.699999988079071044921875) + 1.0));
                                float _3160 = exp2(log2(1.0 / ((_3137 * 3.5) + 5.0)) * 0.25);
                                float _3161 = 1.0 - _552;
                                float _3168 = sqrt(1.0 - ((1.0 - (_3161 * _3161)) * (1.0 - (_3160 * _3160))));
                                float _3169 = _3168 * _3168;
                                float _3170 = _3169 * _3169;
                                float _3171 = _3117 - _2587;
                                float _3172 = _3118 - _2588;
                                float _3173 = _3119 - _2589;
                                float _3177 = inversesqrt(dot(vec3(_3171, _3172, _3173), vec3(_3171, _3172, _3173)));
                                float _3181 = dot(vec3(_431, _434, _437), vec3((-0.0) - _2587, (-0.0) - _2588, (-0.0) - _2589));
                                float _4233 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                                float _3184 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
                                float _3185 = dot(vec3(_431, _434, _437), vec3(_3177 * _3171, _3177 * _3172, _3177 * _3173));
                                float _4244 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0));
                                float _3188 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
                                float _3192 = ((_3188 * _3188) * (_3170 + (-1.0))) + 1.0;
                                float _3193 = _3130 * _3169;
                                float _3194 = _3193 * _3193;
                                float _3200 = ((1.0 - _3194) * dot(vec3(_431, _434, _437), vec3(_3117, _3118, _3119))) + _3194;
                                float _4255 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                                float _3201 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
                                float _3202 = 1.0 - _3169;
                                float _3212 = (0.5 / (((_3201 * ((_3184 * _3202) + _3169)) + 9.9999999392252902907785028219223e-09) + (((_3201 * _3202) + _3169) * _3184))) * _3201;
                                float _4266 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                                float _3222 = (_3147 * _3124) * (((_3170 * 3.1415927410125732421875) * (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0)))) / ((_3192 * _3192) * ((_3137 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3148 * _2991.y;
                                frontier_phi_83_pred_1 = _3148 * _2991.x;
                                frontier_phi_83_pred_2 = _3222 * _3003.z;
                                frontier_phi_83_pred_3 = _3222 * _3003.y;
                                frontier_phi_83_pred_4 = _3222 * _3003.x;
                                frontier_phi_83_pred_5 = _3148 * _2991.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3230 = frontier_phi_83_pred;
                            _3229 = frontier_phi_83_pred_1;
                            _3228 = frontier_phi_83_pred_2;
                            _3227 = frontier_phi_83_pred_3;
                            _3226 = frontier_phi_83_pred_4;
                            _3231 = frontier_phi_83_pred_5;
                            _2933 = _3229 + _2946;
                            _2934 = _3230 + _2947;
                            _2935 = _3231 + _2948;
                            _2930 = _3226 + _2943;
                            _2931 = _3227 + _2944;
                            _2932 = _3228 + _2945;
                            if (_2950 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2943 = _2930;
                                _2944 = _2931;
                                _2945 = _2932;
                                _2946 = _2933;
                                _2947 = _2934;
                                _2948 = _2935;
                                _2949 = _2950;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2935;
                        frontier_phi_77_pred_1 = _2934;
                        frontier_phi_77_pred_2 = _2933;
                        frontier_phi_77_pred_3 = _2932;
                        frontier_phi_77_pred_4 = _2931;
                        frontier_phi_77_pred_5 = _2930;
                    }
                    _2572 = frontier_phi_77_pred;
                    _2570 = frontier_phi_77_pred_1;
                    _2568 = frontier_phi_77_pred_2;
                    _2566 = frontier_phi_77_pred_3;
                    _2564 = frontier_phi_77_pred_4;
                    _2562 = frontier_phi_77_pred_5;
                    uint _2728 = _2727 + 1u;
                    if (_2728 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2721 = _2562;
                        _2722 = _2564;
                        _2723 = _2566;
                        _2724 = _2568;
                        _2725 = _2570;
                        _2726 = _2572;
                        _2727 = _2728;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2566;
                frontier_phi_58_59_ladder_1 = _2572;
                frontier_phi_58_59_ladder_2 = _2570;
                frontier_phi_58_59_ladder_3 = _2568;
                frontier_phi_58_59_ladder_4 = _2564;
                frontier_phi_58_59_ladder_5 = _2562;
            }
            else
            {
                frontier_phi_58_59_ladder = _2444;
                frontier_phi_58_59_ladder_1 = _2450;
                frontier_phi_58_59_ladder_2 = _2448;
                frontier_phi_58_59_ladder_3 = _2446;
                frontier_phi_58_59_ladder_4 = _2442;
                frontier_phi_58_59_ladder_5 = _2440;
            }
            _2561 = frontier_phi_58_59_ladder_5;
            _2563 = frontier_phi_58_59_ladder_4;
            _2565 = frontier_phi_58_59_ladder;
            _2567 = frontier_phi_58_59_ladder_3;
            _2569 = frontier_phi_58_59_ladder_2;
            _2571 = frontier_phi_58_59_ladder_1;
        }
        float _2576 = isnan(1.0) ? _536 : (isnan(_536) ? 1.0 : min(_536, 1.0));
        _2334 = (_2576 * _2567) + _1767;
        _2336 = (_2576 * _2569) + _1769;
        _2338 = (_2576 * _2571) + _1771;
        _2340 = ((_2561 * _521) * _2576) + _2115;
        _2342 = ((_2563 * _523) * _2576) + _2117;
        _2344 = ((_2565 * _524) * _2576) + _2119;
    }
    else
    {
        _2334 = _1767;
        _2336 = _1769;
        _2338 = _1771;
        _2340 = _2115;
        _2342 = _2117;
        _2344 = _2119;
    }
    vec4 _2350 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4282 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _4293 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _4304 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _2374 = (((isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_2334 + ((isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0))) * _536))) + ((_2340 + ((isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0))) * _1378)) * cbPerFrame._m0[3u].x)) + (_2350.x * cbMtdParam._m0[3u].x);
    float _2376 = ((_2350.y * cbMtdParam._m0[3u].x) + ((_2342 + ((isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))) * _1378)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_2336 + ((isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0))) * _536)));
    float _2378 = ((_2350.z * cbMtdParam._m0[3u].x) + ((_2344 + ((isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0))) * _1378)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_2338 + ((isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0))) * _536)));
    float _2379 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2380 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2381 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    uint _2382 = _463 + 6u;
    float _2390 = _406 / cbSceneParam._m0[86u].x;
    float _2391 = _407 / cbSceneParam._m0[86u].y;
    vec4 _2405 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2390, _2391, (log2((isnan(cbSceneParam._m0[77u].w) ? _326 : (isnan(_326) ? cbSceneParam._m0[77u].w : min(_326, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2407 = _2405.x;
    float _2408 = _2405.y;
    float _2409 = _2405.z;
    float _2410 = _2405.w;
    float _2503;
    float _2505;
    float _2507;
    float _2509;
    if (_326 > cbSceneParam._m0[78u].w)
    {
        float _2465 = isnan(_326) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _326 : min(cbSceneParam._m0[80u].w, _326));
        float _2466 = _2465 / _326;
        float _2477 = _2466 * _378;
        float _2478 = _379 * _2466;
        float _2479 = (-0.0) - _2478;
        float _2481 = _2466 * _380;
        float _2483 = (cbSceneParam._m0[77u].w * _2479) / _2465;
        float _2484 = _2483 + cbSceneParam._m0[79u].w;
        float _2485 = cbSceneParam._m0[79u].w - _2478;
        float _2491 = sqrt(((_2477 * _2477) + (_2478 * _2478)) + (_2481 * _2481));
        float _2494 = (1.0 - (cbSceneParam._m0[77u].w / _2465)) * _2491;
        float _2499 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2501 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2678;
        if (abs((_2479 - _2483) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2678 = ((((_2484 > 0.0) ? exp2(_2499 * _2484) : (2.0 - exp2(_2501 * _2484))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2494;
        }
        else
        {
            float _2622 = 1.0 / cbSceneParam._m0[80u].x;
            float _2623 = isnan(_2485) ? _2484 : (isnan(_2484) ? _2485 : max(_2484, _2485));
            float _2624 = isnan(_2485) ? _2484 : (isnan(_2484) ? _2485 : min(_2484, _2485));
            float _2633 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : min(_2623, 0.0));
            float _2634 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : min(_2624, 0.0));
            _2678 = ((abs(_2491 / _2479) * cbSceneParam._m0[80u].y) * ((((_2633 - _2634) * 2.0) - ((exp2(_2499 * (isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0)))) - exp2(_2499 * (isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0))))) * _2622)) - ((exp2(_2501 * _2633) - exp2(_2501 * _2634)) * _2622))) + (_2494 * cbSceneParam._m0[80u].z);
        }
        vec4 _2680 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2390, _2391, 1.0), 0.0);
        float _2689 = exp2((_2678 * (-1.44269502162933349609375)) * (1.0 - _2680.w));
        float _2690 = log2(_2689);
        float _2706 = log2(_2410);
        _2503 = (exp2(_2706 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2690 * cbSceneParam._m0[78u].x)) * _2680.x) / cbSceneParam._m0[78u].x)) + _2407;
        _2505 = (exp2(_2706 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2690 * cbSceneParam._m0[78u].y)) * _2680.y) / cbSceneParam._m0[78u].y)) + _2408;
        _2507 = (exp2(_2706 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2690 * cbSceneParam._m0[78u].z)) * _2680.z) / cbSceneParam._m0[78u].z)) + _2409;
        _2509 = _2689 * _2410;
    }
    else
    {
        _2503 = _2407;
        _2505 = _2408;
        _2507 = _2409;
        _2509 = _2410;
    }
    bool _2716;
    vec4 _2519;
    vec4 _2541;
    float _2543;
    float _2547;
    float _2548;
    float _2549;
    float _2550;
    bool _2560;
    for (;;)
    {
        _2519 = cbMatDynParam._m0[0u];
        float _2521 = roundEven(_2519.y);
        bool _2522 = _2521 == 3.0;
        float _2523 = log2(_2509);
        float _2530 = exp2(_2523 * cbSceneParam._m0[78u].x) * _2379;
        float _2531 = exp2(_2523 * cbSceneParam._m0[78u].y) * _2380;
        float _2532 = exp2(_2523 * cbSceneParam._m0[78u].z) * _2381;
        float _2539 = _394 + (-0.5);
        _2541 = cbMtdParam._m0[1u];
        _2543 = _2541.y * _2539;
        float _2546 = (_2521 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2547 = _2546 * (_2522 ? _2530 : (_2530 + (cbSceneParam._m0[72u].w * _2503)));
        _2548 = _2546 * (_2522 ? _2531 : (_2531 + (cbSceneParam._m0[72u].w * _2505)));
        _2549 = _2546 * (_2522 ? _2532 : (_2532 + (cbSceneParam._m0[72u].w * _2507)));
        _2550 = _2539 * 0.999000012874603271484375;
        _2560 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2560)
        {
            if ((cbInstanceData._m0[_463 + 7u].x + _2550) < 0.5)
            {
                _2716 = true;
                break;
            }
        }
        uint _2657 = _465 + uint(_2519.w);
        if ((cbInstanceData._m0[_2657].w < 1.0) && ((cbInstanceData._m0[_2657].w + _2550) < 0.5))
        {
            _2716 = true;
            break;
        }
        if ((_2543 + _243) < _2541.x)
        {
            _2716 = true;
            break;
        }
        _2716 = false;
        break;
    }
    float _2921;
    if (_2716)
    {
        discard_state = true;
        _2921 = 0.0;
    }
    else
    {
        _2921 = cbInstanceData._m0[_2382].w;
    }
    SV_Target.x = _2547;
    SV_Target.y = _2548;
    SV_Target.z = _2549;
    SV_Target.w = _2921;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2382].w;
    discard_exit();
}


