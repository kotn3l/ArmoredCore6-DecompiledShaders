#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M0_M1_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M0_M1_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _870;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _229 = texture(sampler2D(C_AMSN_M0_M1_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _235 = _229.x * cbMtdParam._m0[9u].x;
    float _236 = _229.y * cbMtdParam._m0[9u].y;
    float _237 = _229.z * cbMtdParam._m0[9u].z;
    vec4 _249 = texture(sampler2D(C_AMSN_M0_M1_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _253 = _249.z;
    float _257 = (_249.x * 2.0) + (-1.0);
    float _259 = (_249.y * 2.0) + (-1.0);
    float _260 = dot(vec2(_257, _259), vec2(_257, _259));
    float _3225 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _266 = sqrt(1.0 - (isnan(1.0) ? _3225 : (isnan(_3225) ? 1.0 : min(_3225, 1.0))));
    float _269 = fma(_266, _199 * NORMAL.x, fma(_259, _206 * TANGENT.x, (_192 * _184) * _257));
    float _272 = fma(_266, _199 * NORMAL.y, fma(_259, _206 * TANGENT.y, (_192 * _185) * _257));
    float _275 = fma(_266, _199 * NORMAL.z, fma(_259, _206 * TANGENT.z, (_192 * _186) * _257));
    float _279 = inversesqrt(dot(vec3(_269, _272, _275), vec3(_269, _272, _275)));
    float _280 = _279 * _269;
    float _281 = _279 * _272;
    float _282 = _279 * _275;
    float _3236 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _283 = isnan(1.0) ? _3236 : (isnan(_3236) ? 1.0 : min(_3236, 1.0));
    float _3247 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3258 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3269 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _302 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _344 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _354 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _344);
    float _355 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _344);
    float _356 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _344);
    float _360 = inversesqrt(dot(vec3(_354, _355, _356), vec3(_354, _355, _356)));
    float _361 = _354 * _360;
    float _362 = _355 * _360;
    float _363 = _356 * _360;
    float _369 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _370 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _372 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _374 = _372.w;
    float _395 = fma(_282, cbSceneParam._m0[5u].z, fma(_281, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _280));
    float _398 = fma(_282, cbSceneParam._m0[6u].z, fma(_281, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _280));
    float _401 = fma(_282, cbSceneParam._m0[7u].z, fma(_281, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _280));
    vec4 _403 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _414 = (((_403.y - _283) + (_403.w * _283)) * cbMtdParam._m0[3u].x) + _283;
    uint _427 = uint(roundEven(NORMAL.w)) * 13u;
    uint _430 = (_427 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _436 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0)))) * cbInstanceData._m0[_430].x;
    float _437 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0)))) * cbInstanceData._m0[_430].y;
    float _438 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0)))) * cbInstanceData._m0[_430].z;
    float _3280 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _439 = isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0));
    float _3291 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _440 = isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0));
    float _3302 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _441 = isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0));
    vec4 _442 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _447 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _453 = cbMtdParam._m0[3u].x * _447.x;
    float _466 = (cbMtdParam._m0[3u].x * (((_439 * _374) - _439) + _442.x)) + _439;
    float _467 = (cbMtdParam._m0[3u].x * (((_440 * _374) - _440) + _442.y)) + _440;
    float _468 = (cbMtdParam._m0[3u].x * (((_441 * _374) - _441) + _442.z)) + _441;
    float _469 = 1.0 - _453;
    float _470 = _466 * _469;
    float _471 = _467 * _469;
    float _472 = _468 * _469;
    float _477 = (_466 + (-0.039999999105930328369140625)) * _453;
    float _478 = (_467 + (-0.039999999105930328369140625)) * _453;
    float _479 = (_468 + (-0.039999999105930328369140625)) * _453;
    float _480 = _477 + 0.039999999105930328369140625;
    float _482 = _478 + 0.039999999105930328369140625;
    float _483 = _479 + 0.039999999105930328369140625;
    vec4 _492 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _369, cbSceneParam._m0[86u].y * _370));
    float _495 = _492.x * TEXCOORD_4;
    float _496 = dot(vec3(_280, _281, _282), vec3(_361, _362, _363));
    float _499 = _496 * 2.0;
    float _503 = (_499 * _280) - _361;
    float _504 = (_499 * _281) - _362;
    float _505 = (_499 * _282) - _363;
    float _509 = abs(dot(vec3(_361, _362, _363), vec3(_280, _281, _282)));
    float _3313 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _511 = sqrt(_414);
    float _524 = exp2((_511 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_511 * 3.0));
    float _530 = (1.0 - _524) * ((_511 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _531 = _524 * _511;
    float _559 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _563 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _567 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _869;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _594 = fma(_567, cbModelParam._m0[26u].z, fma(_563, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _559));
        float _598 = fma(_567, cbModelParam._m0[27u].z, fma(_563, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _559));
        float _602 = fma(_567, cbModelParam._m0[28u].z, fma(_563, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _559));
        float _627 = _559 + _280;
        float _628 = _563 + _281;
        float _629 = _567 + _282;
        float _639 = fma(_629, cbModelParam._m0[26u].z, fma(_628, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _627)) - _594;
        float _640 = fma(_629, cbModelParam._m0[27u].z, fma(_628, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _627)) - _598;
        float _641 = fma(_629, cbModelParam._m0[28u].z, fma(_628, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _627)) - _602;
        float _645 = inversesqrt(dot(vec3(_639, _640, _641), vec3(_639, _640, _641)));
        float _658 = ((_645 * _639) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_594 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _659 = ((_645 * _640) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_598 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _660 = ((_645 * _641) / cbModelParam._m0[34u].z) + ((((((_602 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _663 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_658, _659, _660), 0.0);
        vec4 _670 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_658, _659, _660), 0.0);
        vec4 _677 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_658, _659, _660), 0.0);
        vec4 _684 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_658, _659, _660), 0.0);
        float _697 = exp2((_663.w + (-0.5)) * 20.0) * 2.0;
        float _698 = _697 * (_663.x + (-0.5));
        float _699 = _697 * (_663.y + (-0.5));
        float _700 = _697 * (_663.z + (-0.5));
        float _707 = exp2((_670.w + (-0.5)) * 20.0) * 2.0;
        float _708 = _707 * (_670.x + (-0.5));
        float _709 = _707 * (_670.y + (-0.5));
        float _710 = _707 * (_670.z + (-0.5));
        float _717 = exp2((_677.w + (-0.5)) * 20.0) * 2.0;
        float _718 = _717 * (_677.x + (-0.5));
        float _719 = _717 * (_677.y + (-0.5));
        float _720 = _717 * (_677.z + (-0.5));
        float _727 = exp2((_684.w + (-0.5)) * 20.0) * 2.0;
        float _728 = _727 * (_684.x + (-0.5));
        float _729 = _727 * (_684.y + (-0.5));
        float _730 = _727 * (_684.z + (-0.5));
        float _731 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _732 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _733 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _734 = _698 * 0.5;
        float _735 = _708 * 0.5;
        float _736 = _718 * 0.5;
        float _737 = dot(vec3(_734, _735, _736), vec3(_734, _735, _736));
        float _742 = (_737 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_737);
        float _751 = (dot(vec3(_280, _281, _282), vec3(_742 * _734, _742 * _735, _742 * _736)) + 1.0) * 0.5;
        float _3339 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _761 = sqrt(((_735 * _735) + (_734 * _734)) + (_736 * _736)) / (_731 + 9.9999997473787516355514526367188e-06);
        float _3350 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _762 = isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0));
        float _763 = _762 * 2.0;
        float _767 = (1.0 - _762) / (_762 + 1.0);
        float _3361 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _768 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
        float _777 = ((((1.0 - _768) * (_763 + 2.0)) * exp2(log2(isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0))) * (_763 + 1.0))) + _768) * _731;
        float _778 = _699 * 0.5;
        float _779 = _709 * 0.5;
        float _780 = _719 * 0.5;
        float _781 = dot(vec3(_778, _779, _780), vec3(_778, _779, _780));
        float _786 = (_781 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_781);
        float _794 = (dot(vec3(_280, _281, _282), vec3(_786 * _778, _786 * _779, _786 * _780)) + 1.0) * 0.5;
        float _3372 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _803 = sqrt(((_779 * _779) + (_778 * _778)) + (_780 * _780)) / (_732 + 9.9999997473787516355514526367188e-06);
        float _3383 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _804 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
        float _805 = _804 * 2.0;
        float _809 = (1.0 - _804) / (_804 + 1.0);
        float _3394 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _810 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
        float _819 = ((((1.0 - _810) * (_805 + 2.0)) * exp2(log2(isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0))) * (_805 + 1.0))) + _810) * _732;
        float _820 = _700 * 0.5;
        float _821 = _710 * 0.5;
        float _822 = _720 * 0.5;
        float _823 = dot(vec3(_820, _821, _822), vec3(_820, _821, _822));
        float _828 = (_823 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_823);
        float _836 = (dot(vec3(_280, _281, _282), vec3(_828 * _820, _828 * _821, _828 * _822)) + 1.0) * 0.5;
        float _3405 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _845 = sqrt(((_821 * _821) + (_820 * _820)) + (_822 * _822)) / (_733 + 9.9999997473787516355514526367188e-06);
        float _3416 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _846 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
        float _847 = _846 * 2.0;
        float _851 = (1.0 - _846) / (_846 + 1.0);
        float _3427 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _852 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
        float _861 = ((((1.0 - _852) * (_847 + 2.0)) * exp2(log2(isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0))) * (_847 + 1.0))) + _852) * _733;
        _869 = _700;
        _871 = _699;
        _872 = _698;
        _873 = _710;
        _874 = _709;
        _875 = _708;
        _876 = _720;
        _877 = _719;
        _878 = _718;
        _879 = _733;
        _880 = _732;
        _881 = _731;
        _882 = cbModelParam._m0[36u].z * (isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0)));
        _883 = cbModelParam._m0[36u].z * (isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0)));
        _884 = cbModelParam._m0[36u].z * (isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0)));
    }
    else
    {
        _869 = _870;
        _871 = _870;
        _872 = _870;
        _873 = _870;
        _874 = _870;
        _875 = _870;
        _876 = _870;
        _877 = _870;
        _878 = _870;
        _879 = _870;
        _880 = _870;
        _881 = _870;
        _882 = 0.0;
        _883 = 0.0;
        _884 = 0.0;
    }
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _910 = fma(_567, cbModelParam._m0[30u].z, fma(_563, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _559));
        float _914 = fma(_567, cbModelParam._m0[31u].z, fma(_563, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _559));
        float _918 = fma(_567, cbModelParam._m0[32u].z, fma(_563, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _559));
        float _941 = _559 + _280;
        float _942 = _563 + _281;
        float _943 = _567 + _282;
        float _953 = fma(_943, cbModelParam._m0[30u].z, fma(_942, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _941)) - _910;
        float _954 = fma(_943, cbModelParam._m0[31u].z, fma(_942, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _941)) - _914;
        float _955 = fma(_943, cbModelParam._m0[32u].z, fma(_942, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _941)) - _918;
        float _959 = inversesqrt(dot(vec3(_953, _954, _955), vec3(_953, _954, _955)));
        float _972 = ((_959 * _953) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_910 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _973 = ((_959 * _954) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_914 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _974 = ((_959 * _955) / cbModelParam._m0[35u].z) + ((((((_918 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_972, _973, _974), 0.0);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_972, _973, _974), 0.0);
        vec4 _990 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_972, _973, _974), 0.0);
        vec4 _997 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_972, _973, _974), 0.0);
        float _1009 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_976.x + (-0.5));
        float _1011 = _1009 * (_976.y + (-0.5));
        float _1012 = _1009 * (_976.z + (-0.5));
        float _1019 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_983.x + (-0.5));
        float _1021 = _1019 * (_983.y + (-0.5));
        float _1022 = _1019 * (_983.z + (-0.5));
        float _1029 = exp2((_990.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_990.x + (-0.5));
        float _1031 = _1029 * (_990.y + (-0.5));
        float _1032 = _1029 * (_990.z + (-0.5));
        float _1039 = exp2((_997.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = _1039 * (_997.x + (-0.5));
        float _1041 = _1039 * (_997.y + (-0.5));
        float _1042 = _1039 * (_997.z + (-0.5));
        float _1043 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1044 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1045 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1046 = _1010 * 0.5;
        float _1047 = _1020 * 0.5;
        float _1048 = _1030 * 0.5;
        float _1049 = dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048));
        float _1054 = (_1049 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1049);
        float _1062 = (dot(vec3(_280, _281, _282), vec3(_1054 * _1046, _1054 * _1047, _1054 * _1048)) + 1.0) * 0.5;
        float _3468 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1071 = sqrt(((_1047 * _1047) + (_1046 * _1046)) + (_1048 * _1048)) / (_1043 + 9.9999997473787516355514526367188e-06);
        float _3479 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
        float _1073 = _1072 * 2.0;
        float _1077 = (1.0 - _1072) / (_1072 + 1.0);
        float _3490 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
        float _1087 = ((((1.0 - _1078) * (_1073 + 2.0)) * exp2(log2(isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0))) * (_1073 + 1.0))) + _1078) * _1043;
        float _1088 = _1011 * 0.5;
        float _1089 = _1021 * 0.5;
        float _1090 = _1031 * 0.5;
        float _1091 = dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090));
        float _1096 = (_1091 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1091);
        float _1104 = (dot(vec3(_280, _281, _282), vec3(_1096 * _1088, _1096 * _1089, _1096 * _1090)) + 1.0) * 0.5;
        float _3501 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1113 = sqrt(((_1089 * _1089) + (_1088 * _1088)) + (_1090 * _1090)) / (_1044 + 9.9999997473787516355514526367188e-06);
        float _3512 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
        float _1115 = _1114 * 2.0;
        float _1119 = (1.0 - _1114) / (_1114 + 1.0);
        float _3523 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _1129 = ((((1.0 - _1120) * (_1115 + 2.0)) * exp2(log2(isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0))) * (_1115 + 1.0))) + _1120) * _1044;
        float _1130 = _1012 * 0.5;
        float _1131 = _1022 * 0.5;
        float _1132 = _1032 * 0.5;
        float _1133 = dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132));
        float _1138 = (_1133 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1133);
        float _1146 = (dot(vec3(_280, _281, _282), vec3(_1138 * _1130, _1138 * _1131, _1138 * _1132)) + 1.0) * 0.5;
        float _3534 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1155 = sqrt(((_1131 * _1131) + (_1130 * _1130)) + (_1132 * _1132)) / (_1045 + 9.9999997473787516355514526367188e-06);
        float _3545 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _1157 = _1156 * 2.0;
        float _1161 = (1.0 - _1156) / (_1156 + 1.0);
        float _3556 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _1171 = ((((1.0 - _1162) * (_1157 + 2.0)) * exp2(log2(isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))) * (_1157 + 1.0))) + _1162) * _1045;
        _1179 = _1012;
        _1180 = _1011;
        _1181 = _1010;
        _1182 = _1022;
        _1183 = _1021;
        _1184 = _1020;
        _1185 = _1032;
        _1186 = _1031;
        _1187 = _1030;
        _1188 = _1045;
        _1189 = _1044;
        _1190 = _1043;
        _1191 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0)));
        _1192 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0)));
        _1193 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)));
    }
    else
    {
        _1179 = _870;
        _1180 = _870;
        _1181 = _870;
        _1182 = _870;
        _1183 = _870;
        _1184 = _870;
        _1185 = _870;
        _1186 = _870;
        _1187 = _870;
        _1188 = _870;
        _1189 = _870;
        _1190 = _870;
        _1191 = 0.0;
        _1192 = 0.0;
        _1193 = 0.0;
    }
    float _1203 = (cbModelParam._m0[1u].x * (_1191 - _882)) + _882;
    float _1204 = (cbModelParam._m0[1u].x * (_1192 - _883)) + _883;
    float _1205 = (cbModelParam._m0[1u].x * (_1193 - _884)) + _884;
    float _1226 = fma(_1205, cbSceneParam._m0[89u].z, fma(_1204, cbSceneParam._m0[89u].y, _1203 * cbSceneParam._m0[89u].x));
    float _1229 = fma(_1205, cbSceneParam._m0[90u].z, fma(_1204, cbSceneParam._m0[90u].y, _1203 * cbSceneParam._m0[90u].x));
    float _1232 = fma(_1205, cbSceneParam._m0[91u].z, fma(_1204, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1203));
    float _1247 = _503 * 0.5;
    float _1248 = _504 * 0.5;
    float _1249 = _505 * 0.5;
    float _1250 = dot(vec4(_1247, _1248, _1249, 1.0), vec4(_1181, _1184, _1187, _1190));
    float _1253 = dot(vec4(_1247, _1248, _1249, 1.0), vec4(_1180, _1183, _1186, _1189));
    float _1256 = dot(vec4(_1247, _1248, _1249, 1.0), vec4(_1179, _1182, _1185, _1188));
    float _1290;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1263 = dot(vec4(_1247, _1248, _1249, 1.0), vec4(_869, _873, _876, _879));
        float _1267 = dot(vec4(_1247, _1248, _1249, 1.0), vec4(_871, _874, _877, _880));
        float _1271 = dot(vec4(_1247, _1248, _1249, 1.0), vec4(_872, _875, _878, _881));
        float _1278 = dot(vec4(cbModelParam._m0[39u]), vec4(_1247, _1248, _1249, 1.0));
        _1290 = dot(vec3(isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)), isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)), isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1278) ? 0.0 : (isnan(0.0) ? _1278 : max(0.0, _1278))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1290 = 1.0;
    }
    float _1301;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1292 = dot(vec4(cbModelParam._m0[40u]), vec4(_1247, _1248, _1249, 1.0));
        _1301 = dot(vec3(isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)), isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)), isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1292) ? 0.0 : (isnan(0.0) ? _1292 : max(0.0, _1292))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1301 = 1.0;
    }
    float _1305 = (_1301 * cbModelParam._m0[1u].x) + (_1290 * (1.0 - cbModelParam._m0[1u].x));
    float _1315 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _414);
    float _1316 = isnan(_1315) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1315 : min(cbModelParam._m0[25u].z, _1315));
    float _1398;
    float _1400;
    float _1402;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1365 = fma(_567, cbModelParam._m0[13u].z, fma(_563, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _559)) + cbModelParam._m0[13u].w;
        float _1369 = fma(_567, cbModelParam._m0[14u].z, fma(_563, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _559)) + cbModelParam._m0[14u].w;
        float _1373 = fma(_567, cbModelParam._m0[15u].z, fma(_563, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _559)) + cbModelParam._m0[15u].w;
        float _1376 = fma(_505, cbModelParam._m0[13u].z, fma(_504, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _503));
        float _1379 = fma(_505, cbModelParam._m0[14u].z, fma(_504, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _503));
        float _1382 = fma(_505, cbModelParam._m0[15u].z, fma(_504, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _503));
        float _1410;
        if (_1376 > 0.0)
        {
            _1410 = abs((1.0 - _1365) / _1376);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1376 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1365 + 1.0) / _1376);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1410 = frontier_phi_14_12_ladder;
        }
        float _1618;
        if (_1379 > 0.0)
        {
            _1618 = abs((1.0 - _1369) / _1379);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1379 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1369 + 1.0) / _1379);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1618 = frontier_phi_23_19_ladder;
        }
        float _1872;
        if (_1382 > 0.0)
        {
            _1872 = abs((1.0 - _1373) / _1382);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1382 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1373 + 1.0) / _1382);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1872 = frontier_phi_35_30_ladder;
        }
        float _1874 = isnan(_1618) ? _1410 : (isnan(_1410) ? _1618 : min(_1410, _1618));
        float _1875 = isnan(_1872) ? _1874 : (isnan(_1874) ? _1872 : min(_1874, _1872));
        float _1879 = (_1875 * _1376) + _1365;
        float _1880 = (_1875 * _1379) + _1369;
        float _1881 = (_1875 * _1382) + _1373;
        float _1882 = _1875 * 9.9999997473787516355514526367188e-05;
        float _1884 = (-1.0) - _1882;
        float _1886 = _1882 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1881 > _1886) || ((_1881 < _1884) || ((_1880 > _1886) || ((_1880 < _1884) || ((_1879 < _1884) || (_1879 > _1886))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2009 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1881, cbModelParam._m0[9u].z, fma(_1880, cbModelParam._m0[9u].y, _1879 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1881, cbModelParam._m0[10u].z, fma(_1880, cbModelParam._m0[10u].y, _1879 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1881, cbModelParam._m0[11u].z, fma(_1880, cbModelParam._m0[11u].y, _1879 * cbModelParam._m0[11u].x))), _1316);
            frontier_phi_13_35_ladder = _2009.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2009.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2009.x * cbModelParam._m0[1u].y;
        }
        _1398 = frontier_phi_13_35_ladder_2;
        _1400 = frontier_phi_13_35_ladder_1;
        _1402 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1386 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_503, _504, _505), _1316);
        _1398 = _1386.x * cbModelParam._m0[1u].y;
        _1400 = _1386.y * cbModelParam._m0[1u].y;
        _1402 = _1386.z * cbModelParam._m0[1u].y;
    }
    float _1406 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _414);
    float _1407 = isnan(_1406) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1406 : min(cbModelParam._m0[25u].w, _1406));
    float _1500;
    float _1502;
    float _1504;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1464 = fma(_567, cbModelParam._m0[21u].z, fma(_563, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _559)) + cbModelParam._m0[21u].w;
        float _1468 = fma(_567, cbModelParam._m0[22u].z, fma(_563, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _559)) + cbModelParam._m0[22u].w;
        float _1472 = fma(_567, cbModelParam._m0[23u].z, fma(_563, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _559)) + cbModelParam._m0[23u].w;
        float _1475 = fma(_505, cbModelParam._m0[21u].z, fma(_504, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _503));
        float _1478 = fma(_505, cbModelParam._m0[22u].z, fma(_504, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _503));
        float _1481 = fma(_505, cbModelParam._m0[23u].z, fma(_504, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _503));
        float _1623;
        if (_1475 > 0.0)
        {
            _1623 = abs((1.0 - _1464) / _1475);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1475 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1464 + 1.0) / _1475);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1623 = frontier_phi_25_21_ladder;
        }
        float _1899;
        if (_1478 > 0.0)
        {
            _1899 = abs((1.0 - _1468) / _1478);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1478 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1468 + 1.0) / _1478);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1899 = frontier_phi_37_32_ladder;
        }
        float _2112;
        if (_1481 > 0.0)
        {
            _2112 = abs((1.0 - _1472) / _1481);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1481 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1472 + 1.0) / _1481);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2112 = frontier_phi_46_43_ladder;
        }
        float _2114 = isnan(_1899) ? _1623 : (isnan(_1623) ? _1899 : min(_1623, _1899));
        float _2115 = isnan(_2112) ? _2114 : (isnan(_2114) ? _2112 : min(_2114, _2112));
        float _2119 = (_2115 * _1475) + _1464;
        float _2120 = (_2115 * _1478) + _1468;
        float _2121 = (_2115 * _1481) + _1472;
        float _2122 = _2115 * 9.9999997473787516355514526367188e-05;
        float _2123 = (-1.0) - _2122;
        float _2125 = _2122 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2121 > _2125) || ((_2121 < _2123) || ((_2120 > _2125) || ((_2120 < _2123) || ((_2119 < _2123) || (_2119 > _2125))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2338 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2121, cbModelParam._m0[17u].z, fma(_2120, cbModelParam._m0[17u].y, _2119 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2121, cbModelParam._m0[18u].z, fma(_2120, cbModelParam._m0[18u].y, _2119 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2121, cbModelParam._m0[19u].z, fma(_2120, cbModelParam._m0[19u].y, _2119 * cbModelParam._m0[19u].x))), _1407);
            frontier_phi_22_46_ladder = _2338.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2338.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2338.x * cbModelParam._m0[1u].z;
        }
        _1500 = frontier_phi_22_46_ladder_2;
        _1502 = frontier_phi_22_46_ladder_1;
        _1504 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1484 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_503, _504, _505), _1407);
        _1500 = _1484.x * cbModelParam._m0[1u].z;
        _1502 = _1484.y * cbModelParam._m0[1u].z;
        _1504 = _1484.z * cbModelParam._m0[1u].z;
    }
    float _1517 = (((_530 * _480) + _531) * _495) * ((cbModelParam._m0[1u].w * (_1500 - _1398)) + _1398);
    float _1519 = (((_530 * _482) + _531) * _495) * ((cbModelParam._m0[1u].w * (_1502 - _1400)) + _1400);
    float _1521 = (((_530 * _483) + _531) * _495) * ((cbModelParam._m0[1u].w * (_1504 - _1402)) + _1402);
    float _1524 = fma(_1521, cbSceneParam._m0[89u].z, fma(_1519, cbSceneParam._m0[89u].y, _1517 * cbSceneParam._m0[89u].x));
    float _1527 = fma(_1521, cbSceneParam._m0[90u].z, fma(_1519, cbSceneParam._m0[90u].y, _1517 * cbSceneParam._m0[90u].x));
    float _1530 = fma(_1521, cbSceneParam._m0[91u].z, fma(_1519, cbSceneParam._m0[91u].y, _1517 * cbSceneParam._m0[91u].x));
    uvec4 _1540 = floatBitsToUint(cbInstanceData._m0[_427 + 5u]);
    uint _1542 = _1540.x * 14u;
    uint _1543 = _1542 + 13u;
    float _1550 = _495 + (-1.0);
    float _1555 = (cbLight._m0[_1543].x * _1550) + 1.0;
    float _1556 = (cbLight._m0[_1543].y * _1550) + 1.0;
    float _1557 = (cbLight._m0[_1543].z * _1550) + 1.0;
    float _1558 = (cbLight._m0[_1543].w * _1550) + 1.0;
    uint _1559 = _1542 + 5u;
    float _1565 = isnan(1.0) ? _1556 : (isnan(_1556) ? 1.0 : min(_1556, 1.0));
    uint _1569 = _1542 + 4u;
    float _1576 = isnan(1.0) ? _1555 : (isnan(_1555) ? 1.0 : min(_1555, 1.0));
    uint _1580 = _1542 | 1u;
    float _1591 = dot(vec3(cbLight._m0[_1542].xyz), vec3(_280, _281, _282));
    float _1594 = dot(vec3(cbLight._m0[_1580].xyz), vec3(_280, _281, _282));
    float _3692 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
    float _3703 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
    float _1599 = (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) * 0.3183098733425140380859375;
    float _1601 = (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * 0.3183098733425140380859375;
    float _1608 = ((cbLight._m0[_1559].x * _1565) * _1601) + ((cbLight._m0[_1569].x * _1576) * _1599);
    float _1609 = ((_1565 * cbLight._m0[_1559].y) * _1601) + ((_1576 * cbLight._m0[_1569].y) * _1599);
    float _1610 = ((_1565 * cbLight._m0[_1559].z) * _1601) + ((_1576 * cbLight._m0[_1569].z) * _1599);
    uvec4 _1615 = floatBitsToUint(cbLight._m0[_1542 + 12u]);
    bool _1617 = _1615.x == 0u;
    float _1628;
    float _1630;
    float _1632;
    if (_1617)
    {
        _1628 = _1608;
        _1630 = _1609;
        _1632 = _1610;
    }
    else
    {
        uint _1636 = _1542 + 6u;
        float _1652 = (dot(vec3(cbLight._m0[_1542 + 2u].xyz), vec3(_280, _281, _282)) * 0.5) + 0.5;
        float _1653 = _1652 * _1652;
        float _3714 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1654 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1655 = isnan(1.0) ? _1557 : (isnan(_1557) ? 1.0 : min(_1557, 1.0));
        _1628 = (((cbLight._m0[_1636].x * 0.3183098733425140380859375) * _1654) * _1655) + _1608;
        _1630 = (((cbLight._m0[_1636].y * 0.3183098733425140380859375) * _1654) * _1655) + _1609;
        _1632 = (((cbLight._m0[_1636].z * 0.3183098733425140380859375) * _1654) * _1655) + _1610;
    }
    bool _1635 = _1615.y == 0u;
    float _1673;
    float _1675;
    float _1677;
    if (_1635)
    {
        _1673 = _1628;
        _1675 = _1630;
        _1677 = _1632;
    }
    else
    {
        uint _1843 = _1542 + 7u;
        float _1859 = (dot(vec3(cbLight._m0[_1542 + 3u].xyz), vec3(_280, _281, _282)) * 0.5) + 0.5;
        float _1860 = _1859 * _1859;
        float _3730 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
        float _1861 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _1862 = isnan(1.0) ? _1558 : (isnan(_1558) ? 1.0 : min(_1558, 1.0));
        _1673 = (((cbLight._m0[_1843].x * 0.3183098733425140380859375) * _1861) * _1862) + _1628;
        _1675 = (((cbLight._m0[_1843].y * 0.3183098733425140380859375) * _1861) * _1862) + _1630;
        _1677 = (((cbLight._m0[_1843].z * 0.3183098733425140380859375) * _1861) * _1862) + _1632;
    }
    uint _1680 = _1542 + 8u;
    float _1693 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1542].w)) * _414) * 0.949999988079071044921875);
    float _1694 = _1693 * _1693;
    float _1695 = cbLight._m0[_1542].x + _361;
    float _1696 = cbLight._m0[_1542].y + _362;
    float _1697 = cbLight._m0[_1542].z + _363;
    float _1701 = inversesqrt(dot(vec3(_1695, _1696, _1697), vec3(_1695, _1696, _1697)));
    float _1702 = _1701 * _1695;
    float _1703 = _1701 * _1696;
    float _1704 = _1701 * _1697;
    float _1705 = dot(vec3(_280, _281, _282), vec3(cbLight._m0[_1542].xyz));
    float _3746 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
    float _1708 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _3757 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _1709 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _1710 = dot(vec3(_280, _281, _282), vec3(_1702, _1703, _1704));
    float _3768 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
    float _1713 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _1714 = dot(vec3(cbLight._m0[_1542].xyz), vec3(_1702, _1703, _1704));
    float _3779 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
    float _1718 = _1694 * _1694;
    float _1722 = ((_1713 * _1713) * (_1718 + (-1.0))) + 1.0;
    float _1730 = exp2(log2(1.0 - (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0)))) * 5.0);
    float _1731 = 0.959999978542327880859375 - _477;
    float _1733 = 0.959999978542327880859375 - _478;
    float _1734 = 0.959999978542327880859375 - _479;
    float _1741 = 1.0 - _1694;
    float _1752 = (0.5 / (((_1709 * ((_1708 * _1741) + _1694)) + 9.9999999392252902907785028219223e-09) + (((_1709 * _1741) + _1694) * _1708))) * _1708;
    float _3790 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
    float _1754 = (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * (_1718 / ((_1722 * _1722) * 3.141590118408203125));
    uint _1765 = _1542 + 9u;
    float _1776 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1580].w)) * _414) * 0.949999988079071044921875);
    float _1777 = _1776 * _1776;
    float _1778 = cbLight._m0[_1580].x + _361;
    float _1779 = cbLight._m0[_1580].y + _362;
    float _1780 = cbLight._m0[_1580].z + _363;
    float _1784 = inversesqrt(dot(vec3(_1778, _1779, _1780), vec3(_1778, _1779, _1780)));
    float _1785 = _1784 * _1778;
    float _1786 = _1784 * _1779;
    float _1787 = _1784 * _1780;
    float _1788 = dot(vec3(_280, _281, _282), vec3(cbLight._m0[_1580].xyz));
    float _3801 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _1791 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _1792 = dot(vec3(_280, _281, _282), vec3(_1785, _1786, _1787));
    float _3812 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1795 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _1796 = dot(vec3(cbLight._m0[_1580].xyz), vec3(_1785, _1786, _1787));
    float _3823 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _1800 = _1777 * _1777;
    float _1804 = ((_1795 * _1795) * (_1800 + (-1.0))) + 1.0;
    float _1811 = exp2(log2(1.0 - (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0)))) * 5.0);
    float _1818 = 1.0 - _1777;
    float _1828 = (0.5 / (((_1709 * ((_1791 * _1818) + _1777)) + 9.9999999392252902907785028219223e-09) + (((_1709 * _1818) + _1777) * _1791))) * _1791;
    float _3834 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1830 = (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_1800 / ((_1804 * _1804) * 3.141590118408203125));
    float _1840 = (((((_1811 * _1731) + _480) * cbLight._m0[_1765].x) * _1830) * _1565) + (((((_1730 * _1731) + _480) * cbLight._m0[_1680].x) * _1754) * _1576);
    float _1841 = (((((_1811 * _1733) + _482) * cbLight._m0[_1765].y) * _1830) * _1565) + (((((_1730 * _1733) + _482) * cbLight._m0[_1680].y) * _1754) * _1576);
    float _1842 = (((((_1811 * _1734) + _483) * cbLight._m0[_1765].z) * _1830) * _1565) + (((((_1730 * _1734) + _483) * cbLight._m0[_1680].z) * _1754) * _1576);
    float _1904;
    float _1906;
    float _1908;
    if (_1617)
    {
        _1904 = _1840;
        _1906 = _1841;
        _1908 = _1842;
    }
    else
    {
        uint _1910 = _1542 + 2u;
        uint _1914 = _1542 + 10u;
        float _1928 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1910].w)) * _414) * 0.949999988079071044921875);
        float _1929 = _1928 * _1928;
        float _1930 = cbLight._m0[_1910].x + _361;
        float _1931 = cbLight._m0[_1910].y + _362;
        float _1932 = cbLight._m0[_1910].z + _363;
        float _1936 = inversesqrt(dot(vec3(_1930, _1931, _1932), vec3(_1930, _1931, _1932)));
        float _1937 = _1936 * _1930;
        float _1938 = _1936 * _1931;
        float _1939 = _1936 * _1932;
        float _1940 = dot(vec3(_280, _281, _282), vec3(cbLight._m0[_1910].xyz));
        float _3845 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
        float _1943 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1944 = dot(vec3(_280, _281, _282), vec3(_1937, _1938, _1939));
        float _3856 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
        float _1947 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1948 = dot(vec3(cbLight._m0[_1910].xyz), vec3(_1937, _1938, _1939));
        float _3867 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
        float _1952 = _1929 * _1929;
        float _1956 = ((_1947 * _1947) * (_1952 + (-1.0))) + 1.0;
        float _1963 = exp2(log2(1.0 - (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0)))) * 5.0);
        float _1970 = 1.0 - _1929;
        float _1980 = (0.5 / (((_1709 * ((_1943 * _1970) + _1929)) + 9.9999999392252902907785028219223e-09) + (((_1709 * _1970) + _1929) * _1943))) * _1943;
        float _3878 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
        float _1982 = (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * (_1952 / ((_1956 * _1956) * 3.141590118408203125));
        float _1983 = isnan(1.0) ? _1557 : (isnan(_1557) ? 1.0 : min(_1557, 1.0));
        _1904 = (((((_1963 * _1731) + _480) * cbLight._m0[_1914].x) * _1982) * _1983) + _1840;
        _1906 = (((((_1963 * _1733) + _482) * cbLight._m0[_1914].y) * _1982) * _1983) + _1841;
        _1908 = (((((_1963 * _1734) + _483) * cbLight._m0[_1914].z) * _1982) * _1983) + _1842;
    }
    float _2018;
    float _2020;
    float _2022;
    if (_1635)
    {
        _2018 = _1904;
        _2020 = _1906;
        _2022 = _1908;
    }
    else
    {
        uint _2029 = _1542 + 3u;
        uint _2033 = _1542 + 11u;
        float _2047 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2029].w)) * _414) * 0.949999988079071044921875);
        float _2048 = _2047 * _2047;
        float _2049 = cbLight._m0[_2029].x + _361;
        float _2050 = cbLight._m0[_2029].y + _362;
        float _2051 = cbLight._m0[_2029].z + _363;
        float _2055 = inversesqrt(dot(vec3(_2049, _2050, _2051), vec3(_2049, _2050, _2051)));
        float _2056 = _2055 * _2049;
        float _2057 = _2055 * _2050;
        float _2058 = _2055 * _2051;
        float _2059 = dot(vec3(_280, _281, _282), vec3(cbLight._m0[_2029].xyz));
        float _3894 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
        float _2062 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _2063 = dot(vec3(_280, _281, _282), vec3(_2056, _2057, _2058));
        float _3905 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
        float _2066 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _2067 = dot(vec3(cbLight._m0[_2029].xyz), vec3(_2056, _2057, _2058));
        float _3916 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
        float _2071 = _2048 * _2048;
        float _2075 = ((_2066 * _2066) * (_2071 + (-1.0))) + 1.0;
        float _2082 = exp2(log2(1.0 - (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0)))) * 5.0);
        float _2089 = 1.0 - _2048;
        float _2099 = (0.5 / (((_1709 * ((_2062 * _2089) + _2048)) + 9.9999999392252902907785028219223e-09) + (((_1709 * _2089) + _2048) * _2062))) * _2062;
        float _3927 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2101 = (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * (_2071 / ((_2075 * _2075) * 3.141590118408203125));
        float _2102 = isnan(1.0) ? _1558 : (isnan(_1558) ? 1.0 : min(_1558, 1.0));
        _2018 = (((((_2082 * _1731) + _480) * cbLight._m0[_2033].x) * _2101) * _2102) + _1904;
        _2020 = (((((_2082 * _1733) + _482) * cbLight._m0[_2033].y) * _2101) * _2102) + _1906;
        _2022 = (((((_2082 * _1734) + _483) * cbLight._m0[_2033].z) * _2101) * _2102) + _1908;
    }
    float _2237;
    float _2239;
    float _2241;
    float _2243;
    float _2245;
    float _2247;
    if (_1540.y == 0u)
    {
        float _2177 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2178 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2177;
        float _2179 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2177;
        float _2180 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2177;
        uvec4 _2192 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2193 = _2192.x;
        uint _2204 = uint((float(_2192.y) * floor(float(uint(cbSceneParam._m0[85u].y * _370) / _2193))) + floor(float(uint(cbSceneParam._m0[85u].x * _369) / _2193)));
        float _2214 = (log2(_2180 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2215 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
        uint _2218 = uint(isnan(14.0) ? _2215 : (isnan(_2215) ? 14.0 : min(_2215, 14.0)));
        uvec4 _2223 = texelFetch(g_lightClusterGridBuffer, int(((_2218 << 2u) + (_2204 << 6u)) >> 2u));
        uint _2224 = _2223.x;
        uint _2225 = _2192.z;
        float _2343;
        float _2345;
        float _2347;
        float _2349;
        float _2351;
        float _2353;
        if (((((1u << ((_2225 >> 4u) & 15u)) + 4294967295u) & _2224) == 0u) || ((_2225 & 240u) == 0u))
        {
            _2343 = 0.0;
            _2345 = 0.0;
            _2347 = 0.0;
            _2349 = 0.0;
            _2351 = 0.0;
            _2353 = 0.0;
        }
        else
        {
            float _2344;
            float _2346;
            float _2348;
            float _2350;
            float _2352;
            float _2354;
            float _2488 = 0.0;
            float _2489 = 0.0;
            float _2490 = 0.0;
            float _2491 = 0.0;
            float _2492 = 0.0;
            float _2493 = 0.0;
            uint _2494 = 0u;
            uint _2503;
            bool _2504;
            for (;;)
            {
                _2503 = texelFetch(g_lightClassification, int((((_2218 << 5u) + (_2204 << 9u)) + (_2494 << 2u)) >> 2u)).x;
                _2504 = _2503 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2504)
                {
                    frontier_phi_61_pred = _2488;
                    frontier_phi_61_pred_1 = _2493;
                    frontier_phi_61_pred_2 = _2492;
                    frontier_phi_61_pred_3 = _2491;
                    frontier_phi_61_pred_4 = _2490;
                    frontier_phi_61_pred_5 = _2489;
                }
                else
                {
                    float _2612;
                    float _2613;
                    float _2614;
                    float _2615;
                    float _2616;
                    float _2617;
                    uint _2618;
                    _2612 = _2488;
                    _2613 = _2489;
                    _2614 = _2490;
                    _2615 = _2491;
                    _2616 = _2492;
                    _2617 = _2493;
                    _2618 = _2503;
                    float _2544;
                    float _2545;
                    float _2546;
                    float _2547;
                    float _2548;
                    float _2549;
                    for (;;)
                    {
                        uint _2622 = uint(findLSB(_2618)) + (_2494 << 5u);
                        uint _2619 = (_2618 + 4294967295u) & _2618;
                        uint _2624 = _2622 * 48u;
                        vec4 _2638 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2624)).x, texelFetch(g_PointLightRenderingBuffer, int(_2624 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2624 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2624 + 3u)).x));
                        uint _2644 = (_2622 * 48u) + 4u;
                        vec4 _2657 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2644)).x, texelFetch(g_PointLightRenderingBuffer, int(_2644 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2644 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2644 + 3u)).x));
                        uint _2663 = (_2622 * 48u) + 8u;
                        vec3 _2674 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2663)).x, texelFetch(g_PointLightRenderingBuffer, int(_2663 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2663 + 2u)).x));
                        float _2678 = _2638.x - _2178;
                        float _2679 = _2638.y - _2179;
                        float _2680 = _2638.z - _2180;
                        float _2681 = dot(vec3(_2678, _2679, _2680), vec3(_2678, _2679, _2680));
                        float _2684 = inversesqrt(_2681);
                        float _2685 = _2684 * _2678;
                        float _2686 = _2684 * _2679;
                        float _2687 = _2684 * _2680;
                        float _2688 = dot(vec3(_395, _398, _401), vec3(_2685, _2686, _2687));
                        float _2693 = 1.0 - (_2681 * _2638.w);
                        float _3953 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
                        float _2694 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
                        float _2695 = sqrt(_2681) * _2657.w;
                        float _2698 = 1.39999997615814208984375 / (_2695 + 1.39999997615814208984375);
                        float _2699 = _2698 * _2698;
                        float _2702 = ((1.0 - _2699) * _2688) + _2699;
                        float _2705 = _2695 * _2695;
                        float _2709 = ((isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0))) * _2694) / ((_2705 * 0.699999988079071044921875) + 1.0);
                        float _2713 = (-0.0) - _2178;
                        float _2714 = (-0.0) - _2179;
                        float _2715 = (-0.0) - _2180;
                        float _2719 = inversesqrt(dot(vec3(_2713, _2714, _2715), vec3(_2713, _2714, _2715)));
                        float _2720 = _2719 * _2713;
                        float _2721 = _2719 * _2714;
                        float _2722 = _2719 * _2715;
                        float _2730 = exp2(log2(1.0 / ((_2705 * 3.5) + 5.0)) * 0.25);
                        float _2731 = 1.0 - _511;
                        float _2738 = sqrt(1.0 - ((1.0 - (_2731 * _2731)) * (1.0 - (_2730 * _2730))));
                        float _2739 = _2738 * _2738;
                        float _2740 = _2739 * _2739;
                        float _2741 = _2720 + _2685;
                        float _2742 = _2721 + _2686;
                        float _2743 = _2722 + _2687;
                        float _2747 = inversesqrt(dot(vec3(_2741, _2742, _2743), vec3(_2741, _2742, _2743)));
                        float _2751 = dot(vec3(_395, _398, _401), vec3(_2720, _2721, _2722));
                        float _3969 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
                        float _2754 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
                        float _2755 = dot(vec3(_395, _398, _401), vec3(_2747 * _2741, _2747 * _2742, _2747 * _2743));
                        float _3980 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
                        float _2758 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
                        float _2762 = ((_2758 * _2758) * (_2740 + (-1.0))) + 1.0;
                        float _2763 = _2698 * _2739;
                        float _2764 = _2763 * _2763;
                        float _2767 = ((1.0 - _2764) * _2688) + _2764;
                        float _3991 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
                        float _2768 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
                        float _2769 = 1.0 - _2739;
                        float _2779 = (0.5 / (((_2768 * ((_2754 * _2769) + _2739)) + 9.9999999392252902907785028219223e-09) + (((_2768 * _2769) + _2739) * _2754))) * _2768;
                        float _4002 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
                        float _2790 = (((_2740 * 3.1415927410125732421875) * (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) / ((_2762 * _2762) * ((_2705 * 2.1991131305694580078125) + 3.141590118408203125))) * _2694;
                        _2547 = (_2709 * _2657.x) + _2615;
                        _2548 = (_2709 * _2657.y) + _2616;
                        _2549 = (_2709 * _2657.z) + _2617;
                        _2544 = (_2790 * _2674.x) + _2612;
                        _2545 = (_2790 * _2674.y) + _2613;
                        _2546 = (_2790 * _2674.z) + _2614;
                        if (_2619 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2612 = _2544;
                            _2613 = _2545;
                            _2614 = _2546;
                            _2615 = _2547;
                            _2616 = _2548;
                            _2617 = _2549;
                            _2618 = _2619;
                        }
                    }
                    frontier_phi_61_pred = _2544;
                    frontier_phi_61_pred_1 = _2549;
                    frontier_phi_61_pred_2 = _2548;
                    frontier_phi_61_pred_3 = _2547;
                    frontier_phi_61_pred_4 = _2546;
                    frontier_phi_61_pred_5 = _2545;
                }
                _2344 = frontier_phi_61_pred;
                _2354 = frontier_phi_61_pred_1;
                _2352 = frontier_phi_61_pred_2;
                _2350 = frontier_phi_61_pred_3;
                _2348 = frontier_phi_61_pred_4;
                _2346 = frontier_phi_61_pred_5;
                uint _2495 = _2494 + 1u;
                if (_2495 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2488 = _2344;
                    _2489 = _2346;
                    _2490 = _2348;
                    _2491 = _2350;
                    _2492 = _2352;
                    _2493 = _2354;
                    _2494 = _2495;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2343 = _2344;
            _2345 = _2346;
            _2347 = _2348;
            _2349 = _2350;
            _2351 = _2352;
            _2353 = _2354;
        }
        uvec4 _2357 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2358 = _2357.z;
        uint _2360 = (_2358 >> 8u) & 15u;
        float _2456;
        float _2458;
        float _2460;
        float _2462;
        float _2464;
        float _2466;
        if (((4294967295u << _2360) & _2224) == 0u)
        {
            _2456 = _2343;
            _2458 = _2345;
            _2460 = _2347;
            _2462 = _2349;
            _2464 = _2351;
            _2466 = _2353;
        }
        else
        {
            float _2481 = inversesqrt(dot(vec3(_2178, _2179, _2180), vec3(_2178, _2179, _2180)));
            float _2482 = _2481 * _2178;
            float _2483 = _2481 * _2179;
            float _2484 = _2481 * _2180;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2360 < ((_2358 >> 12u) & 15u))
            {
                float _2457;
                float _2459;
                float _2461;
                float _2463;
                float _2465;
                float _2467;
                float _2595 = _2343;
                float _2596 = _2345;
                float _2597 = _2347;
                float _2598 = _2349;
                float _2599 = _2351;
                float _2600 = _2353;
                uint _2601 = _2360;
                uint _2610;
                bool _2611;
                for (;;)
                {
                    _2610 = texelFetch(g_lightClassification, int((((_2218 << 5u) + (_2204 << 9u)) + (_2601 << 2u)) >> 2u)).x;
                    _2611 = _2610 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2611)
                    {
                        frontier_phi_67_pred = _2598;
                        frontier_phi_67_pred_1 = _2599;
                        frontier_phi_67_pred_2 = _2600;
                        frontier_phi_67_pred_3 = _2597;
                        frontier_phi_67_pred_4 = _2596;
                        frontier_phi_67_pred_5 = _2595;
                    }
                    else
                    {
                        float _2795;
                        float _2796;
                        float _2797;
                        float _2798;
                        float _2799;
                        float _2800;
                        float _3091;
                        float _3092;
                        float _3093;
                        float _3094;
                        float _3095;
                        float _3096;
                        float _2808 = _2595;
                        float _2809 = _2596;
                        float _2810 = _2597;
                        float _2811 = _2598;
                        float _2812 = _2599;
                        float _2813 = _2600;
                        uint _2814 = _2610;
                        uint _2815;
                        vec4 _2840;
                        float _2841;
                        vec4 _2856;
                        vec3 _2868;
                        vec4 _2884;
                        vec4 _2900;
                        float _2947;
                        bool _2948;
                        for (;;)
                        {
                            uint _2825 = ((_2601 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2814));
                            _2815 = (_2814 + 4294967295u) & _2814;
                            uint _2827 = _2825 * 40u;
                            _2840 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2827)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 3u)).x));
                            _2841 = _2840.w;
                            uint _2843 = (_2825 * 40u) + 4u;
                            _2856 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2843)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 3u)).x));
                            uint _2858 = (_2825 * 40u) + 8u;
                            _2868 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2858)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 2u)).x));
                            uint _2871 = (_2825 * 40u) + 16u;
                            _2884 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2871)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 3u)).x));
                            uint _2887 = (_2825 * 40u) + 20u;
                            _2900 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2887)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 3u)).x));
                            uint _2903 = (_2825 * 40u) + 24u;
                            vec4 _2916 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2903)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 3u)).x));
                            uint _2922 = (_2825 * 40u) + 28u;
                            vec4 _2935 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2922)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 3u)).x));
                            _2947 = fma(_2180, _2935.z, fma(_2179, _2935.y, _2935.x * _2178)) + _2935.w;
                            _2948 = !((fma(_2180, _2916.z, fma(_2179, _2916.y, _2916.x * _2178)) + _2916.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2948)
                            {
                                float _2975 = _2840.x - _2178;
                                float _2976 = _2840.y - _2179;
                                float _2977 = _2840.z - _2180;
                                float _2978 = dot(vec3(_2975, _2976, _2977), vec3(_2975, _2976, _2977));
                                float _2981 = inversesqrt(_2978);
                                float _2982 = _2981 * _2975;
                                float _2983 = _2981 * _2976;
                                float _2984 = _2981 * _2977;
                                float _2988 = 1.0 - (_2978 / (_2841 * _2841));
                                float _4013 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
                                float _2989 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
                                float _2993 = sqrt(_2978) * _2856.w;
                                float _2995 = 1.39999997615814208984375 / (_2993 + 1.39999997615814208984375);
                                float _2996 = _2995 * _2995;
                                float _2999 = ((1.0 - _2996) * dot(vec3(_2982, _2983, _2984), vec3(_395, _398, _401))) + _2996;
                                float _3002 = _2993 * _2993;
                                float _3006 = (fma(_2180, _2884.z, fma(_2179, _2884.y, _2884.x * _2178)) + _2884.w) / _2947;
                                float _3007 = (fma(_2180, _2900.z, fma(_2179, _2900.y, _2900.x * _2178)) + _2900.w) / _2947;
                                float _3011 = 1.0 - dot(vec2(_3006, _3007), vec2(_3006, _3007));
                                float _4029 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                                float _3012 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
                                float _3013 = _3012 * (((isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0))) * _2989) / ((_3002 * 0.699999988079071044921875) + 1.0));
                                float _3025 = exp2(log2(1.0 / ((_3002 * 3.5) + 5.0)) * 0.25);
                                float _3026 = 1.0 - _511;
                                float _3033 = sqrt(1.0 - ((1.0 - (_3026 * _3026)) * (1.0 - (_3025 * _3025))));
                                float _3034 = _3033 * _3033;
                                float _3035 = _3034 * _3034;
                                float _3036 = _2982 - _2482;
                                float _3037 = _2983 - _2483;
                                float _3038 = _2984 - _2484;
                                float _3042 = inversesqrt(dot(vec3(_3036, _3037, _3038), vec3(_3036, _3037, _3038)));
                                float _3046 = dot(vec3(_395, _398, _401), vec3((-0.0) - _2482, (-0.0) - _2483, (-0.0) - _2484));
                                float _4040 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                                float _3049 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
                                float _3050 = dot(vec3(_395, _398, _401), vec3(_3042 * _3036, _3042 * _3037, _3042 * _3038));
                                float _4051 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                                float _3053 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
                                float _3057 = ((_3053 * _3053) * (_3035 + (-1.0))) + 1.0;
                                float _3058 = _2995 * _3034;
                                float _3059 = _3058 * _3058;
                                float _3065 = ((1.0 - _3059) * dot(vec3(_395, _398, _401), vec3(_2982, _2983, _2984))) + _3059;
                                float _4062 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                                float _3066 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
                                float _3067 = 1.0 - _3034;
                                float _3077 = (0.5 / (((_3066 * ((_3049 * _3067) + _3034)) + 9.9999999392252902907785028219223e-09) + (((_3066 * _3067) + _3034) * _3049))) * _3066;
                                float _4073 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
                                float _3087 = (_3012 * _2989) * (((_3035 * 3.1415927410125732421875) * (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0)))) / ((_3057 * _3057) * ((_3002 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3087 * _2868.x;
                                frontier_phi_73_pred_1 = _3087 * _2868.y;
                                frontier_phi_73_pred_2 = _3013 * _2856.z;
                                frontier_phi_73_pred_3 = _3013 * _2856.y;
                                frontier_phi_73_pred_4 = _3013 * _2856.x;
                                frontier_phi_73_pred_5 = _3087 * _2868.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3091 = frontier_phi_73_pred;
                            _3092 = frontier_phi_73_pred_1;
                            _3096 = frontier_phi_73_pred_2;
                            _3095 = frontier_phi_73_pred_3;
                            _3094 = frontier_phi_73_pred_4;
                            _3093 = frontier_phi_73_pred_5;
                            _2798 = _3094 + _2811;
                            _2799 = _3095 + _2812;
                            _2800 = _3096 + _2813;
                            _2795 = _3091 + _2808;
                            _2796 = _3092 + _2809;
                            _2797 = _3093 + _2810;
                            if (_2815 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2808 = _2795;
                                _2809 = _2796;
                                _2810 = _2797;
                                _2811 = _2798;
                                _2812 = _2799;
                                _2813 = _2800;
                                _2814 = _2815;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2798;
                        frontier_phi_67_pred_1 = _2799;
                        frontier_phi_67_pred_2 = _2800;
                        frontier_phi_67_pred_3 = _2797;
                        frontier_phi_67_pred_4 = _2796;
                        frontier_phi_67_pred_5 = _2795;
                    }
                    _2463 = frontier_phi_67_pred;
                    _2465 = frontier_phi_67_pred_1;
                    _2467 = frontier_phi_67_pred_2;
                    _2461 = frontier_phi_67_pred_3;
                    _2459 = frontier_phi_67_pred_4;
                    _2457 = frontier_phi_67_pred_5;
                    uint _2602 = _2601 + 1u;
                    if (_2602 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2595 = _2457;
                        _2596 = _2459;
                        _2597 = _2461;
                        _2598 = _2463;
                        _2599 = _2465;
                        _2600 = _2467;
                        _2601 = _2602;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2465;
                frontier_phi_55_56_ladder_1 = _2467;
                frontier_phi_55_56_ladder_2 = _2463;
                frontier_phi_55_56_ladder_3 = _2461;
                frontier_phi_55_56_ladder_4 = _2459;
                frontier_phi_55_56_ladder_5 = _2457;
            }
            else
            {
                frontier_phi_55_56_ladder = _2351;
                frontier_phi_55_56_ladder_1 = _2353;
                frontier_phi_55_56_ladder_2 = _2349;
                frontier_phi_55_56_ladder_3 = _2347;
                frontier_phi_55_56_ladder_4 = _2345;
                frontier_phi_55_56_ladder_5 = _2343;
            }
            _2456 = frontier_phi_55_56_ladder_5;
            _2458 = frontier_phi_55_56_ladder_4;
            _2460 = frontier_phi_55_56_ladder_3;
            _2462 = frontier_phi_55_56_ladder_2;
            _2464 = frontier_phi_55_56_ladder;
            _2466 = frontier_phi_55_56_ladder_1;
        }
        float _2471 = isnan(1.0) ? _495 : (isnan(_495) ? 1.0 : min(_495, 1.0));
        _2237 = (_2471 * _2462) + _1673;
        _2239 = (_2471 * _2464) + _1675;
        _2241 = (_2471 * _2466) + _1677;
        _2243 = ((_2456 * _480) * _2471) + _2018;
        _2245 = ((_2458 * _482) * _2471) + _2020;
        _2247 = ((_2460 * _483) * _2471) + _2022;
    }
    else
    {
        _2237 = _1673;
        _2239 = _1675;
        _2241 = _1677;
        _2243 = _2018;
        _2245 = _2020;
        _2247 = _2022;
    }
    vec4 _2253 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4089 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _4100 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _4111 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _2277 = (((isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_2237 + ((isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0))) * _495))) + ((_2243 + ((isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))) * _1305)) * cbPerFrame._m0[3u].x)) + (_2253.x * cbMtdParam._m0[3u].x);
    float _2279 = ((_2253.y * cbMtdParam._m0[3u].x) + ((_2245 + ((isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))) * _1305)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_2239 + ((isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0))) * _495)));
    float _2281 = ((_2253.z * cbMtdParam._m0[3u].x) + ((_2247 + ((isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))) * _1305)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_2241 + ((isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0))) * _495)));
    uint _2285 = _427 + 6u;
    float _2293 = _369 / cbSceneParam._m0[86u].x;
    float _2294 = _370 / cbSceneParam._m0[86u].y;
    vec4 _2308 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2293, _2294, (log2((isnan(cbSceneParam._m0[77u].w) ? _302 : (isnan(_302) ? cbSceneParam._m0[77u].w : min(_302, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2310 = _2308.x;
    float _2311 = _2308.y;
    float _2312 = _2308.z;
    float _2313 = _2308.w;
    float _2406;
    float _2408;
    float _2410;
    float _2412;
    if (_302 > cbSceneParam._m0[78u].w)
    {
        float _2368 = isnan(_302) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _302 : min(cbSceneParam._m0[80u].w, _302));
        float _2369 = _2368 / _302;
        float _2380 = _2369 * _354;
        float _2381 = _355 * _2369;
        float _2382 = (-0.0) - _2381;
        float _2384 = _2369 * _356;
        float _2386 = (cbSceneParam._m0[77u].w * _2382) / _2368;
        float _2387 = _2386 + cbSceneParam._m0[79u].w;
        float _2388 = cbSceneParam._m0[79u].w - _2381;
        float _2394 = sqrt(((_2380 * _2380) + (_2381 * _2381)) + (_2384 * _2384));
        float _2397 = (1.0 - (cbSceneParam._m0[77u].w / _2368)) * _2394;
        float _2402 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2404 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2557;
        if (abs((_2382 - _2386) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2557 = ((((_2387 > 0.0) ? exp2(_2402 * _2387) : (2.0 - exp2(_2404 * _2387))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2397;
        }
        else
        {
            float _2517 = 1.0 / cbSceneParam._m0[80u].x;
            float _2518 = isnan(_2388) ? _2387 : (isnan(_2387) ? _2388 : max(_2387, _2388));
            float _2519 = isnan(_2388) ? _2387 : (isnan(_2387) ? _2388 : min(_2387, _2388));
            float _2528 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : min(_2518, 0.0));
            float _2529 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : min(_2519, 0.0));
            _2557 = ((abs(_2394 / _2382) * cbSceneParam._m0[80u].y) * ((((_2528 - _2529) * 2.0) - ((exp2(_2402 * (isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0)))) - exp2(_2402 * (isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0))))) * _2517)) - ((exp2(_2404 * _2528) - exp2(_2404 * _2529)) * _2517))) + (_2397 * cbSceneParam._m0[80u].z);
        }
        vec4 _2559 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2293, _2294, 1.0), 0.0);
        float _2568 = exp2((_2557 * (-1.44269502162933349609375)) * (1.0 - _2559.w));
        float _2569 = log2(_2568);
        float _2585 = log2(_2313);
        _2406 = (exp2(_2585 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2569 * cbSceneParam._m0[78u].x)) * _2559.x) / cbSceneParam._m0[78u].x)) + _2310;
        _2408 = (exp2(_2585 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2569 * cbSceneParam._m0[78u].y)) * _2559.y) / cbSceneParam._m0[78u].y)) + _2311;
        _2410 = (exp2(_2585 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2569 * cbSceneParam._m0[78u].z)) * _2559.z) / cbSceneParam._m0[78u].z)) + _2312;
        _2412 = _2568 * _2313;
    }
    else
    {
        _2406 = _2310;
        _2408 = _2311;
        _2410 = _2312;
        _2412 = _2313;
    }
    float _2424 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2425 = _2424 == 3.0;
    float _2426 = log2(_2412);
    float _2433 = exp2(_2426 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0)));
    float _2434 = exp2(_2426 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0)));
    float _2435 = exp2(_2426 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0)));
    float _2444 = (_2424 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2444 * (_2425 ? _2433 : (_2433 + (cbSceneParam._m0[72u].w * _2406)));
    SV_Target.y = _2444 * (_2425 ? _2434 : (_2434 + (cbSceneParam._m0[72u].w * _2408)));
    SV_Target.z = _2444 * (_2425 ? _2435 : (_2435 + (cbSceneParam._m0[72u].w * _2410)));
    SV_Target.w = cbInstanceData._m0[_2285].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2285].w;
}


