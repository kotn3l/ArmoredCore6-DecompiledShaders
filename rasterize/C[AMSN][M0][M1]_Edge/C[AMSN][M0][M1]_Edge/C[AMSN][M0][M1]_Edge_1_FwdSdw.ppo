#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M0_M1_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M0_M1_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _874;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _233 = texture(sampler2D(C_AMSN_M0_M1_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _239 = _233.x * cbMtdParam._m0[9u].x;
    float _240 = _233.y * cbMtdParam._m0[9u].y;
    float _241 = _233.z * cbMtdParam._m0[9u].z;
    vec4 _253 = texture(sampler2D(C_AMSN_M0_M1_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _257 = _253.z;
    float _261 = (_253.x * 2.0) + (-1.0);
    float _263 = (_253.y * 2.0) + (-1.0);
    float _264 = dot(vec2(_261, _263), vec2(_261, _263));
    float _3512 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _270 = sqrt(1.0 - (isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0))));
    float _273 = fma(_270, _203 * NORMAL.x, fma(_263, _210 * TANGENT.x, (_196 * _188) * _261));
    float _276 = fma(_270, _203 * NORMAL.y, fma(_263, _210 * TANGENT.y, (_196 * _189) * _261));
    float _279 = fma(_270, _203 * NORMAL.z, fma(_263, _210 * TANGENT.z, (_196 * _190) * _261));
    float _283 = inversesqrt(dot(vec3(_273, _276, _279), vec3(_273, _276, _279)));
    float _284 = _283 * _273;
    float _285 = _283 * _276;
    float _286 = _283 * _279;
    float _3523 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _287 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
    float _3534 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3545 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3556 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _306 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _348 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _358 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _348);
    float _359 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _348);
    float _360 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _348);
    float _364 = inversesqrt(dot(vec3(_358, _359, _360), vec3(_358, _359, _360)));
    float _365 = _358 * _364;
    float _366 = _359 * _364;
    float _367 = _360 * _364;
    float _373 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _374 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _376 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _378 = _376.w;
    float _399 = fma(_286, cbSceneParam._m0[5u].z, fma(_285, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _284));
    float _402 = fma(_286, cbSceneParam._m0[6u].z, fma(_285, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _284));
    float _405 = fma(_286, cbSceneParam._m0[7u].z, fma(_285, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _284));
    vec4 _407 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _418 = (((_407.y - _287) + (_407.w * _287)) * cbMtdParam._m0[3u].x) + _287;
    uint _431 = uint(roundEven(NORMAL.w)) * 13u;
    uint _434 = (_431 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _440 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0)))) * cbInstanceData._m0[_434].x;
    float _441 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0)))) * cbInstanceData._m0[_434].y;
    float _442 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0)))) * cbInstanceData._m0[_434].z;
    float _3567 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _443 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
    float _3578 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _444 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
    float _3589 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _445 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
    vec4 _446 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _451 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _457 = cbMtdParam._m0[3u].x * _451.x;
    float _470 = (cbMtdParam._m0[3u].x * (((_443 * _378) - _443) + _446.x)) + _443;
    float _471 = (cbMtdParam._m0[3u].x * (((_444 * _378) - _444) + _446.y)) + _444;
    float _472 = (cbMtdParam._m0[3u].x * (((_445 * _378) - _445) + _446.z)) + _445;
    float _473 = 1.0 - _457;
    float _474 = _470 * _473;
    float _475 = _471 * _473;
    float _476 = _472 * _473;
    float _481 = (_470 + (-0.039999999105930328369140625)) * _457;
    float _482 = (_471 + (-0.039999999105930328369140625)) * _457;
    float _483 = (_472 + (-0.039999999105930328369140625)) * _457;
    float _484 = _481 + 0.039999999105930328369140625;
    float _486 = _482 + 0.039999999105930328369140625;
    float _487 = _483 + 0.039999999105930328369140625;
    vec4 _496 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _373, cbSceneParam._m0[86u].y * _374));
    float _499 = _496.x * TEXCOORD_4;
    float _500 = dot(vec3(_284, _285, _286), vec3(_365, _366, _367));
    float _503 = _500 * 2.0;
    float _507 = (_503 * _284) - _365;
    float _508 = (_503 * _285) - _366;
    float _509 = (_503 * _286) - _367;
    float _513 = abs(dot(vec3(_365, _366, _367), vec3(_284, _285, _286)));
    float _3600 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _515 = sqrt(_418);
    float _528 = exp2((_515 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_515 * 3.0));
    float _534 = (1.0 - _528) * ((_515 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _535 = _528 * _515;
    float _563 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _567 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _571 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _873;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _598 = fma(_571, cbModelParam._m0[26u].z, fma(_567, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _563));
        float _602 = fma(_571, cbModelParam._m0[27u].z, fma(_567, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _563));
        float _606 = fma(_571, cbModelParam._m0[28u].z, fma(_567, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _563));
        float _631 = _563 + _284;
        float _632 = _567 + _285;
        float _633 = _571 + _286;
        float _643 = fma(_633, cbModelParam._m0[26u].z, fma(_632, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _631)) - _598;
        float _644 = fma(_633, cbModelParam._m0[27u].z, fma(_632, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _631)) - _602;
        float _645 = fma(_633, cbModelParam._m0[28u].z, fma(_632, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _631)) - _606;
        float _649 = inversesqrt(dot(vec3(_643, _644, _645), vec3(_643, _644, _645)));
        float _662 = ((_649 * _643) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_598 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _663 = ((_649 * _644) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_602 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _664 = ((_649 * _645) / cbModelParam._m0[34u].z) + ((((((_606 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _667 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_662, _663, _664), 0.0);
        vec4 _674 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_662, _663, _664), 0.0);
        vec4 _681 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_662, _663, _664), 0.0);
        vec4 _688 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_662, _663, _664), 0.0);
        float _701 = exp2((_667.w + (-0.5)) * 20.0) * 2.0;
        float _702 = _701 * (_667.x + (-0.5));
        float _703 = _701 * (_667.y + (-0.5));
        float _704 = _701 * (_667.z + (-0.5));
        float _711 = exp2((_674.w + (-0.5)) * 20.0) * 2.0;
        float _712 = _711 * (_674.x + (-0.5));
        float _713 = _711 * (_674.y + (-0.5));
        float _714 = _711 * (_674.z + (-0.5));
        float _721 = exp2((_681.w + (-0.5)) * 20.0) * 2.0;
        float _722 = _721 * (_681.x + (-0.5));
        float _723 = _721 * (_681.y + (-0.5));
        float _724 = _721 * (_681.z + (-0.5));
        float _731 = exp2((_688.w + (-0.5)) * 20.0) * 2.0;
        float _732 = _731 * (_688.x + (-0.5));
        float _733 = _731 * (_688.y + (-0.5));
        float _734 = _731 * (_688.z + (-0.5));
        float _735 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _736 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _737 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        float _738 = _702 * 0.5;
        float _739 = _712 * 0.5;
        float _740 = _722 * 0.5;
        float _741 = dot(vec3(_738, _739, _740), vec3(_738, _739, _740));
        float _746 = (_741 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_741);
        float _755 = (dot(vec3(_284, _285, _286), vec3(_746 * _738, _746 * _739, _746 * _740)) + 1.0) * 0.5;
        float _3626 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _765 = sqrt(((_739 * _739) + (_738 * _738)) + (_740 * _740)) / (_735 + 9.9999997473787516355514526367188e-06);
        float _3637 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _766 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
        float _767 = _766 * 2.0;
        float _771 = (1.0 - _766) / (_766 + 1.0);
        float _3648 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _772 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _781 = ((((1.0 - _772) * (_767 + 2.0)) * exp2(log2(isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) * (_767 + 1.0))) + _772) * _735;
        float _782 = _703 * 0.5;
        float _783 = _713 * 0.5;
        float _784 = _723 * 0.5;
        float _785 = dot(vec3(_782, _783, _784), vec3(_782, _783, _784));
        float _790 = (_785 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_785);
        float _798 = (dot(vec3(_284, _285, _286), vec3(_790 * _782, _790 * _783, _790 * _784)) + 1.0) * 0.5;
        float _3659 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _807 = sqrt(((_783 * _783) + (_782 * _782)) + (_784 * _784)) / (_736 + 9.9999997473787516355514526367188e-06);
        float _3670 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _808 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _809 = _808 * 2.0;
        float _813 = (1.0 - _808) / (_808 + 1.0);
        float _3681 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _814 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _823 = ((((1.0 - _814) * (_809 + 2.0)) * exp2(log2(isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * (_809 + 1.0))) + _814) * _736;
        float _824 = _704 * 0.5;
        float _825 = _714 * 0.5;
        float _826 = _724 * 0.5;
        float _827 = dot(vec3(_824, _825, _826), vec3(_824, _825, _826));
        float _832 = (_827 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_827);
        float _840 = (dot(vec3(_284, _285, _286), vec3(_832 * _824, _832 * _825, _832 * _826)) + 1.0) * 0.5;
        float _3692 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _849 = sqrt(((_825 * _825) + (_824 * _824)) + (_826 * _826)) / (_737 + 9.9999997473787516355514526367188e-06);
        float _3703 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _850 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _851 = _850 * 2.0;
        float _855 = (1.0 - _850) / (_850 + 1.0);
        float _3714 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _856 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _865 = ((((1.0 - _856) * (_851 + 2.0)) * exp2(log2(isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) * (_851 + 1.0))) + _856) * _737;
        _873 = _704;
        _875 = _703;
        _876 = _702;
        _877 = _714;
        _878 = _713;
        _879 = _712;
        _880 = _724;
        _881 = _723;
        _882 = _722;
        _883 = _737;
        _884 = _736;
        _885 = _735;
        _886 = cbModelParam._m0[36u].z * (isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0)));
        _887 = cbModelParam._m0[36u].z * (isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0)));
        _888 = cbModelParam._m0[36u].z * (isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0)));
    }
    else
    {
        _873 = _874;
        _875 = _874;
        _876 = _874;
        _877 = _874;
        _878 = _874;
        _879 = _874;
        _880 = _874;
        _881 = _874;
        _882 = _874;
        _883 = _874;
        _884 = _874;
        _885 = _874;
        _886 = 0.0;
        _887 = 0.0;
        _888 = 0.0;
    }
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _914 = fma(_571, cbModelParam._m0[30u].z, fma(_567, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _563));
        float _918 = fma(_571, cbModelParam._m0[31u].z, fma(_567, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _563));
        float _922 = fma(_571, cbModelParam._m0[32u].z, fma(_567, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _563));
        float _945 = _563 + _284;
        float _946 = _567 + _285;
        float _947 = _571 + _286;
        float _957 = fma(_947, cbModelParam._m0[30u].z, fma(_946, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _945)) - _914;
        float _958 = fma(_947, cbModelParam._m0[31u].z, fma(_946, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _945)) - _918;
        float _959 = fma(_947, cbModelParam._m0[32u].z, fma(_946, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _945)) - _922;
        float _963 = inversesqrt(dot(vec3(_957, _958, _959), vec3(_957, _958, _959)));
        float _976 = ((_963 * _957) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_914 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _977 = ((_963 * _958) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_918 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _978 = ((_963 * _959) / cbModelParam._m0[35u].z) + ((((((_922 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_976, _977, _978), 0.0);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_976, _977, _978), 0.0);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_976, _977, _978), 0.0);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_976, _977, _978), 0.0);
        float _1013 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_980.x + (-0.5));
        float _1015 = _1013 * (_980.y + (-0.5));
        float _1016 = _1013 * (_980.z + (-0.5));
        float _1023 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_987.x + (-0.5));
        float _1025 = _1023 * (_987.y + (-0.5));
        float _1026 = _1023 * (_987.z + (-0.5));
        float _1033 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_994.x + (-0.5));
        float _1035 = _1033 * (_994.y + (-0.5));
        float _1036 = _1033 * (_994.z + (-0.5));
        float _1043 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1001.x + (-0.5));
        float _1045 = _1043 * (_1001.y + (-0.5));
        float _1046 = _1043 * (_1001.z + (-0.5));
        float _1047 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1048 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1049 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1050 = _1014 * 0.5;
        float _1051 = _1024 * 0.5;
        float _1052 = _1034 * 0.5;
        float _1053 = dot(vec3(_1050, _1051, _1052), vec3(_1050, _1051, _1052));
        float _1058 = (_1053 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1053);
        float _1066 = (dot(vec3(_284, _285, _286), vec3(_1058 * _1050, _1058 * _1051, _1058 * _1052)) + 1.0) * 0.5;
        float _3755 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1075 = sqrt(((_1051 * _1051) + (_1050 * _1050)) + (_1052 * _1052)) / (_1047 + 9.9999997473787516355514526367188e-06);
        float _3766 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1077 = _1076 * 2.0;
        float _1081 = (1.0 - _1076) / (_1076 + 1.0);
        float _3777 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1091 = ((((1.0 - _1082) * (_1077 + 2.0)) * exp2(log2(isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_1077 + 1.0))) + _1082) * _1047;
        float _1092 = _1015 * 0.5;
        float _1093 = _1025 * 0.5;
        float _1094 = _1035 * 0.5;
        float _1095 = dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094));
        float _1100 = (_1095 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1095);
        float _1108 = (dot(vec3(_284, _285, _286), vec3(_1100 * _1092, _1100 * _1093, _1100 * _1094)) + 1.0) * 0.5;
        float _3788 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1117 = sqrt(((_1093 * _1093) + (_1092 * _1092)) + (_1094 * _1094)) / (_1048 + 9.9999997473787516355514526367188e-06);
        float _3799 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1119 = _1118 * 2.0;
        float _1123 = (1.0 - _1118) / (_1118 + 1.0);
        float _3810 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1133 = ((((1.0 - _1124) * (_1119 + 2.0)) * exp2(log2(isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * (_1119 + 1.0))) + _1124) * _1048;
        float _1134 = _1016 * 0.5;
        float _1135 = _1026 * 0.5;
        float _1136 = _1036 * 0.5;
        float _1137 = dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136));
        float _1142 = (_1137 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1137);
        float _1150 = (dot(vec3(_284, _285, _286), vec3(_1142 * _1134, _1142 * _1135, _1142 * _1136)) + 1.0) * 0.5;
        float _3821 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1159 = sqrt(((_1135 * _1135) + (_1134 * _1134)) + (_1136 * _1136)) / (_1049 + 9.9999997473787516355514526367188e-06);
        float _3832 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1161 = _1160 * 2.0;
        float _1165 = (1.0 - _1160) / (_1160 + 1.0);
        float _3843 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1175 = ((((1.0 - _1166) * (_1161 + 2.0)) * exp2(log2(isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * (_1161 + 1.0))) + _1166) * _1049;
        _1183 = _1016;
        _1184 = _1015;
        _1185 = _1014;
        _1186 = _1026;
        _1187 = _1025;
        _1188 = _1024;
        _1189 = _1036;
        _1190 = _1035;
        _1191 = _1034;
        _1192 = _1049;
        _1193 = _1048;
        _1194 = _1047;
        _1195 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0)));
        _1196 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0)));
        _1197 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)));
    }
    else
    {
        _1183 = _874;
        _1184 = _874;
        _1185 = _874;
        _1186 = _874;
        _1187 = _874;
        _1188 = _874;
        _1189 = _874;
        _1190 = _874;
        _1191 = _874;
        _1192 = _874;
        _1193 = _874;
        _1194 = _874;
        _1195 = 0.0;
        _1196 = 0.0;
        _1197 = 0.0;
    }
    float _1207 = (cbModelParam._m0[1u].x * (_1195 - _886)) + _886;
    float _1208 = (cbModelParam._m0[1u].x * (_1196 - _887)) + _887;
    float _1209 = (cbModelParam._m0[1u].x * (_1197 - _888)) + _888;
    float _1230 = fma(_1209, cbSceneParam._m0[89u].z, fma(_1208, cbSceneParam._m0[89u].y, _1207 * cbSceneParam._m0[89u].x));
    float _1233 = fma(_1209, cbSceneParam._m0[90u].z, fma(_1208, cbSceneParam._m0[90u].y, _1207 * cbSceneParam._m0[90u].x));
    float _1236 = fma(_1209, cbSceneParam._m0[91u].z, fma(_1208, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1207));
    float _1251 = _507 * 0.5;
    float _1252 = _508 * 0.5;
    float _1253 = _509 * 0.5;
    float _1254 = dot(vec4(_1251, _1252, _1253, 1.0), vec4(_1185, _1188, _1191, _1194));
    float _1257 = dot(vec4(_1251, _1252, _1253, 1.0), vec4(_1184, _1187, _1190, _1193));
    float _1260 = dot(vec4(_1251, _1252, _1253, 1.0), vec4(_1183, _1186, _1189, _1192));
    float _1294;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1267 = dot(vec4(_1251, _1252, _1253, 1.0), vec4(_873, _877, _880, _883));
        float _1271 = dot(vec4(_1251, _1252, _1253, 1.0), vec4(_875, _878, _881, _884));
        float _1275 = dot(vec4(_1251, _1252, _1253, 1.0), vec4(_876, _879, _882, _885));
        float _1282 = dot(vec4(cbModelParam._m0[39u]), vec4(_1251, _1252, _1253, 1.0));
        _1294 = dot(vec3(isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)), isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)), isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1282) ? 0.0 : (isnan(0.0) ? _1282 : max(0.0, _1282))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1294 = 1.0;
    }
    float _1305;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1296 = dot(vec4(cbModelParam._m0[40u]), vec4(_1251, _1252, _1253, 1.0));
        _1305 = dot(vec3(isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)), isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)), isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1296) ? 0.0 : (isnan(0.0) ? _1296 : max(0.0, _1296))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1305 = 1.0;
    }
    float _1309 = (_1305 * cbModelParam._m0[1u].x) + (_1294 * (1.0 - cbModelParam._m0[1u].x));
    float _1319 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _418);
    float _1320 = isnan(_1319) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1319 : min(cbModelParam._m0[25u].z, _1319));
    float _1402;
    float _1404;
    float _1406;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1369 = fma(_571, cbModelParam._m0[13u].z, fma(_567, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _563)) + cbModelParam._m0[13u].w;
        float _1373 = fma(_571, cbModelParam._m0[14u].z, fma(_567, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _563)) + cbModelParam._m0[14u].w;
        float _1377 = fma(_571, cbModelParam._m0[15u].z, fma(_567, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _563)) + cbModelParam._m0[15u].w;
        float _1380 = fma(_509, cbModelParam._m0[13u].z, fma(_508, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _507));
        float _1383 = fma(_509, cbModelParam._m0[14u].z, fma(_508, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _507));
        float _1386 = fma(_509, cbModelParam._m0[15u].z, fma(_508, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _507));
        float _1414;
        if (_1380 > 0.0)
        {
            _1414 = abs((1.0 - _1369) / _1380);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1380 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1369 + 1.0) / _1380);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1414 = frontier_phi_14_12_ladder;
        }
        float _1590;
        if (_1383 > 0.0)
        {
            _1590 = abs((1.0 - _1373) / _1383);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1383 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1373 + 1.0) / _1383);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1590 = frontier_phi_23_19_ladder;
        }
        float _1886;
        if (_1386 > 0.0)
        {
            _1886 = abs((1.0 - _1377) / _1386);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1386 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1377 + 1.0) / _1386);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1886 = frontier_phi_35_30_ladder;
        }
        float _1888 = isnan(_1590) ? _1414 : (isnan(_1414) ? _1590 : min(_1414, _1590));
        float _1889 = isnan(_1886) ? _1888 : (isnan(_1888) ? _1886 : min(_1888, _1886));
        float _1893 = (_1889 * _1380) + _1369;
        float _1894 = (_1889 * _1383) + _1373;
        float _1895 = (_1889 * _1386) + _1377;
        float _1896 = _1889 * 9.9999997473787516355514526367188e-05;
        float _1898 = (-1.0) - _1896;
        float _1900 = _1896 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1895 > _1900) || ((_1895 < _1898) || ((_1894 > _1900) || ((_1894 < _1898) || ((_1893 < _1898) || (_1893 > _1900))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2040 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1895, cbModelParam._m0[9u].z, fma(_1894, cbModelParam._m0[9u].y, _1893 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1895, cbModelParam._m0[10u].z, fma(_1894, cbModelParam._m0[10u].y, _1893 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1895, cbModelParam._m0[11u].z, fma(_1894, cbModelParam._m0[11u].y, _1893 * cbModelParam._m0[11u].x))), _1320);
            frontier_phi_13_35_ladder = _2040.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2040.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2040.x * cbModelParam._m0[1u].y;
        }
        _1402 = frontier_phi_13_35_ladder_2;
        _1404 = frontier_phi_13_35_ladder_1;
        _1406 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1390 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_507, _508, _509), _1320);
        _1402 = _1390.x * cbModelParam._m0[1u].y;
        _1404 = _1390.y * cbModelParam._m0[1u].y;
        _1406 = _1390.z * cbModelParam._m0[1u].y;
    }
    float _1410 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _418);
    float _1411 = isnan(_1410) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1410 : min(cbModelParam._m0[25u].w, _1410));
    float _1504;
    float _1506;
    float _1508;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1468 = fma(_571, cbModelParam._m0[21u].z, fma(_567, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _563)) + cbModelParam._m0[21u].w;
        float _1472 = fma(_571, cbModelParam._m0[22u].z, fma(_567, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _563)) + cbModelParam._m0[22u].w;
        float _1476 = fma(_571, cbModelParam._m0[23u].z, fma(_567, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _563)) + cbModelParam._m0[23u].w;
        float _1479 = fma(_509, cbModelParam._m0[21u].z, fma(_508, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _507));
        float _1482 = fma(_509, cbModelParam._m0[22u].z, fma(_508, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _507));
        float _1485 = fma(_509, cbModelParam._m0[23u].z, fma(_508, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _507));
        float _1595;
        if (_1479 > 0.0)
        {
            _1595 = abs((1.0 - _1468) / _1479);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1479 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1468 + 1.0) / _1479);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1595 = frontier_phi_25_21_ladder;
        }
        float _1913;
        if (_1482 > 0.0)
        {
            _1913 = abs((1.0 - _1472) / _1482);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1482 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1472 + 1.0) / _1482);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1913 = frontier_phi_37_32_ladder;
        }
        float _2251;
        if (_1485 > 0.0)
        {
            _2251 = abs((1.0 - _1476) / _1485);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1485 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1476 + 1.0) / _1485);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2251 = frontier_phi_47_44_ladder;
        }
        float _2253 = isnan(_1913) ? _1595 : (isnan(_1595) ? _1913 : min(_1595, _1913));
        float _2254 = isnan(_2251) ? _2253 : (isnan(_2253) ? _2251 : min(_2253, _2251));
        float _2258 = (_2254 * _1479) + _1468;
        float _2259 = (_2254 * _1482) + _1472;
        float _2260 = (_2254 * _1485) + _1476;
        float _2261 = _2254 * 9.9999997473787516355514526367188e-05;
        float _2262 = (-1.0) - _2261;
        float _2264 = _2261 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2260 > _2264) || ((_2260 < _2262) || ((_2259 > _2264) || ((_2259 < _2262) || ((_2258 < _2262) || (_2258 > _2264))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2382 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2260, cbModelParam._m0[17u].z, fma(_2259, cbModelParam._m0[17u].y, _2258 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2260, cbModelParam._m0[18u].z, fma(_2259, cbModelParam._m0[18u].y, _2258 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2260, cbModelParam._m0[19u].z, fma(_2259, cbModelParam._m0[19u].y, _2258 * cbModelParam._m0[19u].x))), _1411);
            frontier_phi_22_47_ladder = _2382.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2382.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2382.x * cbModelParam._m0[1u].z;
        }
        _1504 = frontier_phi_22_47_ladder_2;
        _1506 = frontier_phi_22_47_ladder_1;
        _1508 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1488 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_507, _508, _509), _1411);
        _1504 = _1488.x * cbModelParam._m0[1u].z;
        _1506 = _1488.y * cbModelParam._m0[1u].z;
        _1508 = _1488.z * cbModelParam._m0[1u].z;
    }
    float _1521 = (((_534 * _484) + _535) * _499) * ((cbModelParam._m0[1u].w * (_1504 - _1402)) + _1402);
    float _1523 = (((_534 * _486) + _535) * _499) * ((cbModelParam._m0[1u].w * (_1506 - _1404)) + _1404);
    float _1525 = (((_534 * _487) + _535) * _499) * ((cbModelParam._m0[1u].w * (_1508 - _1406)) + _1406);
    float _1528 = fma(_1525, cbSceneParam._m0[89u].z, fma(_1523, cbSceneParam._m0[89u].y, _1521 * cbSceneParam._m0[89u].x));
    float _1531 = fma(_1525, cbSceneParam._m0[90u].z, fma(_1523, cbSceneParam._m0[90u].y, _1521 * cbSceneParam._m0[90u].x));
    float _1534 = fma(_1525, cbSceneParam._m0[91u].z, fma(_1523, cbSceneParam._m0[91u].y, _1521 * cbSceneParam._m0[91u].x));
    float _1569 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1573 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1577 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1581 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1582 = _1569 / _1581;
    float _1583 = _1573 / _1581;
    float _1584 = _1577 / _1581;
    float _1731;
    float _1732;
    float _1733;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1611 = ((uint(_1584 > cbSceneParam._m0[59u].y) + uint(_1584 > cbSceneParam._m0[59u].x)) + uint(_1584 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1612 = _1611 + 43u;
        uint _1620 = _1611 + 44u;
        uint _1628 = _1611 + 45u;
        uint _1636 = _1611 + 46u;
        float _1647 = fma(_1581, cbSceneParam._m0[_1612].w, fma(_1577, cbSceneParam._m0[_1612].z, fma(_1573, cbSceneParam._m0[_1612].y, _1569 * cbSceneParam._m0[_1612].x)));
        float _1651 = fma(_1581, cbSceneParam._m0[_1620].w, fma(_1577, cbSceneParam._m0[_1620].z, fma(_1573, cbSceneParam._m0[_1620].y, _1569 * cbSceneParam._m0[_1620].x)));
        float _1659 = fma(_1581, cbSceneParam._m0[_1636].w, fma(_1577, cbSceneParam._m0[_1636].z, fma(_1573, cbSceneParam._m0[_1636].y, _1569 * cbSceneParam._m0[_1636].x)));
        float _1664 = cbSceneParam._m0[33u].z * _1659;
        float _1666 = cbSceneParam._m0[33u].w * _1659;
        float _1669 = fma(_1581, cbSceneParam._m0[_1628].w, fma(_1577, cbSceneParam._m0[_1628].z, fma(_1573, cbSceneParam._m0[_1628].y, _1569 * cbSceneParam._m0[_1628].x))) / _1659;
        float _1717 = (cbSceneParam._m0[33u].x - sqrt(((_1583 * _1583) + (_1582 * _1582)) + (_1584 * _1584))) * cbSceneParam._m0[33u].y;
        float _3969 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1724 = (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1664 + _1647) / _1659, (_1666 + _1651) / _1659), _1669), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1666 + _1647) / _1659, (_1651 - _1664) / _1659), _1669), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1647 - _1664) / _1659, (_1651 - _1666) / _1659), _1669), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1647 - _1666) / _1659, (_1664 + _1651) / _1659), _1669), 0.0)).x), vec4(0.25)));
        _1731 = 1.0 - (_1724 * cbSceneParam._m0[34u].x);
        _1732 = 1.0 - (_1724 * cbSceneParam._m0[34u].y);
        _1733 = 1.0 - (_1724 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1731 = 1.0;
        _1732 = 1.0;
        _1733 = 1.0;
    }
    float _1797;
    float _1799;
    float _1801;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1785 = fma(_1581, cbSceneParam._m0[63u].w, fma(_1577, cbSceneParam._m0[63u].z, fma(_1573, cbSceneParam._m0[63u].y, _1569 * cbSceneParam._m0[63u].x)));
        float _1786 = fma(_1581, cbSceneParam._m0[60u].w, fma(_1577, cbSceneParam._m0[60u].z, fma(_1573, cbSceneParam._m0[60u].y, _1569 * cbSceneParam._m0[60u].x))) / _1785;
        float _1787 = fma(_1581, cbSceneParam._m0[61u].w, fma(_1577, cbSceneParam._m0[61u].z, fma(_1573, cbSceneParam._m0[61u].y, _1569 * cbSceneParam._m0[61u].x))) / _1785;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1786 >= cbSceneParam._m0[64u].x) && (_1787 >= cbSceneParam._m0[64u].y)) && (_1786 <= cbSceneParam._m0[64u].z)) && (_1787 <= cbSceneParam._m0[64u].w))
        {
            float _1926 = fma(_1581, cbSceneParam._m0[62u].w, fma(_1577, cbSceneParam._m0[62u].z, fma(_1573, cbSceneParam._m0[62u].y, _1569 * cbSceneParam._m0[62u].x))) / _1785;
            float _1930 = isnan(cbSceneParam._m0[41u].w) ? _1926 : (isnan(_1926) ? cbSceneParam._m0[41u].w : max(_1926, cbSceneParam._m0[41u].w));
            float _1973 = (cbSceneParam._m0[33u].x - sqrt(((_1583 * _1583) + (_1582 * _1582)) + (_1584 * _1584))) * cbSceneParam._m0[33u].y;
            float _3985 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
            float _1980 = (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1786, cbSceneParam._m0[33u].w + _1787), _1930), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1786, _1787 - cbSceneParam._m0[33u].z), _1930), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1786 - cbSceneParam._m0[33u].z, _1787 - cbSceneParam._m0[33u].w), _1930), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1786 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1787), _1930), 0.0)).x), vec4(0.25)));
            float _1984 = 1.0 - (_1980 * cbSceneParam._m0[34u].x);
            float _1985 = 1.0 - (_1980 * cbSceneParam._m0[34u].y);
            float _1986 = 1.0 - (_1980 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1986) ? _1733 : (isnan(_1733) ? _1986 : min(_1733, _1986));
            frontier_phi_34_33_ladder_1 = isnan(_1985) ? _1732 : (isnan(_1732) ? _1985 : min(_1732, _1985));
            frontier_phi_34_33_ladder_2 = isnan(_1984) ? _1731 : (isnan(_1731) ? _1984 : min(_1731, _1984));
        }
        else
        {
            frontier_phi_34_33_ladder = _1733;
            frontier_phi_34_33_ladder_1 = _1732;
            frontier_phi_34_33_ladder_2 = _1731;
        }
        _1797 = frontier_phi_34_33_ladder_2;
        _1799 = frontier_phi_34_33_ladder_1;
        _1801 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1797 = _1731;
        _1799 = _1732;
        _1801 = _1733;
    }
    uvec4 _1806 = floatBitsToUint(cbInstanceData._m0[_431 + 5u]);
    uint _1808 = _1806.x * 14u;
    uint _1809 = _1808 + 13u;
    float _1816 = _499 + (-1.0);
    float _1821 = (cbLight._m0[_1809].x * _1816) + 1.0;
    float _1822 = (cbLight._m0[_1809].y * _1816) + 1.0;
    float _1823 = (cbLight._m0[_1809].z * _1816) + 1.0;
    float _1824 = (cbLight._m0[_1809].w * _1816) + 1.0;
    uint _1825 = _1808 + 5u;
    float _1831 = isnan(1.0) ? _1822 : (isnan(_1822) ? 1.0 : min(_1822, 1.0));
    uint _1835 = _1808 + 4u;
    float _1845 = isnan(1.0) ? _1821 : (isnan(_1821) ? 1.0 : min(_1821, 1.0));
    uint _1849 = _1808 | 1u;
    float _1860 = dot(vec3(cbLight._m0[_1808].xyz), vec3(_284, _285, _286));
    float _1863 = dot(vec3(cbLight._m0[_1849].xyz), vec3(_284, _285, _286));
    float _4021 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _4032 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _1868 = (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * 0.3183098733425140380859375;
    float _1870 = (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * 0.3183098733425140380859375;
    float _1877 = ((cbLight._m0[_1825].x * _1831) * _1870) + (((cbLight._m0[_1835].x * _1797) * _1845) * _1868);
    float _1878 = ((_1831 * cbLight._m0[_1825].y) * _1870) + (((cbLight._m0[_1835].y * _1799) * _1845) * _1868);
    float _1879 = ((_1831 * cbLight._m0[_1825].z) * _1870) + (((cbLight._m0[_1835].z * _1801) * _1845) * _1868);
    uvec4 _1883 = floatBitsToUint(cbLight._m0[_1808 + 12u]);
    bool _1885 = _1883.x == 0u;
    float _1987;
    float _1989;
    float _1991;
    if (_1885)
    {
        _1987 = _1877;
        _1989 = _1878;
        _1991 = _1879;
    }
    else
    {
        uint _1995 = _1808 + 6u;
        float _2011 = (dot(vec3(cbLight._m0[_1808 + 2u].xyz), vec3(_284, _285, _286)) * 0.5) + 0.5;
        float _2012 = _2011 * _2011;
        float _4043 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
        float _2013 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _2014 = isnan(1.0) ? _1823 : (isnan(_1823) ? 1.0 : min(_1823, 1.0));
        _1987 = (((cbLight._m0[_1995].x * 0.3183098733425140380859375) * _2013) * _2014) + _1877;
        _1989 = (((cbLight._m0[_1995].y * 0.3183098733425140380859375) * _2013) * _2014) + _1878;
        _1991 = (((cbLight._m0[_1995].z * 0.3183098733425140380859375) * _2013) * _2014) + _1879;
    }
    bool _1994 = _1883.y == 0u;
    float _2049;
    float _2051;
    float _2053;
    if (_1994)
    {
        _2049 = _1987;
        _2051 = _1989;
        _2053 = _1991;
    }
    else
    {
        uint _2222 = _1808 + 7u;
        float _2238 = (dot(vec3(cbLight._m0[_1808 + 3u].xyz), vec3(_284, _285, _286)) * 0.5) + 0.5;
        float _2239 = _2238 * _2238;
        float _4059 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2240 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _2241 = isnan(1.0) ? _1824 : (isnan(_1824) ? 1.0 : min(_1824, 1.0));
        _2049 = (((cbLight._m0[_2222].x * 0.3183098733425140380859375) * _2240) * _2241) + _1987;
        _2051 = (((cbLight._m0[_2222].y * 0.3183098733425140380859375) * _2240) * _2241) + _1989;
        _2053 = (((cbLight._m0[_2222].z * 0.3183098733425140380859375) * _2240) * _2241) + _1991;
    }
    uint _2056 = _1808 + 8u;
    float _2069 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1808].w)) * _418) * 0.949999988079071044921875);
    float _2070 = _2069 * _2069;
    float _2071 = cbLight._m0[_1808].x + _365;
    float _2072 = cbLight._m0[_1808].y + _366;
    float _2073 = cbLight._m0[_1808].z + _367;
    float _2077 = inversesqrt(dot(vec3(_2071, _2072, _2073), vec3(_2071, _2072, _2073)));
    float _2078 = _2077 * _2071;
    float _2079 = _2077 * _2072;
    float _2080 = _2077 * _2073;
    float _2081 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_1808].xyz));
    float _4075 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2084 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _4086 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _2085 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _2086 = dot(vec3(_284, _285, _286), vec3(_2078, _2079, _2080));
    float _4097 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _2089 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _2090 = dot(vec3(cbLight._m0[_1808].xyz), vec3(_2078, _2079, _2080));
    float _4108 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2094 = _2070 * _2070;
    float _2098 = ((_2089 * _2089) * (_2094 + (-1.0))) + 1.0;
    float _2106 = exp2(log2(1.0 - (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0)))) * 5.0);
    float _2107 = 0.959999978542327880859375 - _481;
    float _2109 = 0.959999978542327880859375 - _482;
    float _2110 = 0.959999978542327880859375 - _483;
    float _2117 = 1.0 - _2070;
    float _2128 = (0.5 / (((_2085 * ((_2084 * _2117) + _2070)) + 9.9999999392252902907785028219223e-09) + (((_2085 * _2117) + _2070) * _2084))) * _2084;
    float _4119 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2130 = (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_2094 / ((_2098 * _2098) * 3.141590118408203125));
    uint _2144 = _1808 + 9u;
    float _2155 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1849].w)) * _418) * 0.949999988079071044921875);
    float _2156 = _2155 * _2155;
    float _2157 = cbLight._m0[_1849].x + _365;
    float _2158 = cbLight._m0[_1849].y + _366;
    float _2159 = cbLight._m0[_1849].z + _367;
    float _2163 = inversesqrt(dot(vec3(_2157, _2158, _2159), vec3(_2157, _2158, _2159)));
    float _2164 = _2163 * _2157;
    float _2165 = _2163 * _2158;
    float _2166 = _2163 * _2159;
    float _2167 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_1849].xyz));
    float _4130 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2170 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _2171 = dot(vec3(_284, _285, _286), vec3(_2164, _2165, _2166));
    float _4141 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2174 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _2175 = dot(vec3(cbLight._m0[_1849].xyz), vec3(_2164, _2165, _2166));
    float _4152 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2179 = _2156 * _2156;
    float _2183 = ((_2174 * _2174) * (_2179 + (-1.0))) + 1.0;
    float _2190 = exp2(log2(1.0 - (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0)))) * 5.0);
    float _2197 = 1.0 - _2156;
    float _2207 = (0.5 / (((_2085 * ((_2170 * _2197) + _2156)) + 9.9999999392252902907785028219223e-09) + (((_2085 * _2197) + _2156) * _2170))) * _2170;
    float _4163 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2209 = (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_2179 / ((_2183 * _2183) * 3.141590118408203125));
    float _2219 = (((((_2190 * _2107) + _484) * cbLight._m0[_2144].x) * _2209) * _1831) + ((((cbLight._m0[_2056].x * _1797) * ((_2106 * _2107) + _484)) * _2130) * _1845);
    float _2220 = (((((_2190 * _2109) + _486) * cbLight._m0[_2144].y) * _2209) * _1831) + ((((cbLight._m0[_2056].y * _1799) * ((_2106 * _2109) + _486)) * _2130) * _1845);
    float _2221 = (((((_2190 * _2110) + _487) * cbLight._m0[_2144].z) * _2209) * _1831) + ((((cbLight._m0[_2056].z * _1801) * ((_2106 * _2110) + _487)) * _2130) * _1845);
    float _2277;
    float _2279;
    float _2281;
    if (_1885)
    {
        _2277 = _2219;
        _2279 = _2220;
        _2281 = _2221;
    }
    else
    {
        uint _2283 = _1808 + 2u;
        uint _2287 = _1808 + 10u;
        float _2301 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2283].w)) * _418) * 0.949999988079071044921875);
        float _2302 = _2301 * _2301;
        float _2303 = cbLight._m0[_2283].x + _365;
        float _2304 = cbLight._m0[_2283].y + _366;
        float _2305 = cbLight._m0[_2283].z + _367;
        float _2309 = inversesqrt(dot(vec3(_2303, _2304, _2305), vec3(_2303, _2304, _2305)));
        float _2310 = _2309 * _2303;
        float _2311 = _2309 * _2304;
        float _2312 = _2309 * _2305;
        float _2313 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_2283].xyz));
        float _4174 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2316 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _2317 = dot(vec3(_284, _285, _286), vec3(_2310, _2311, _2312));
        float _4185 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        float _2320 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _2321 = dot(vec3(cbLight._m0[_2283].xyz), vec3(_2310, _2311, _2312));
        float _4196 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2325 = _2302 * _2302;
        float _2329 = ((_2320 * _2320) * (_2325 + (-1.0))) + 1.0;
        float _2336 = exp2(log2(1.0 - (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0)))) * 5.0);
        float _2343 = 1.0 - _2302;
        float _2353 = (0.5 / (((_2085 * ((_2316 * _2343) + _2302)) + 9.9999999392252902907785028219223e-09) + (((_2085 * _2343) + _2302) * _2316))) * _2316;
        float _4207 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2355 = (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_2325 / ((_2329 * _2329) * 3.141590118408203125));
        float _2356 = isnan(1.0) ? _1823 : (isnan(_1823) ? 1.0 : min(_1823, 1.0));
        _2277 = (((((_2336 * _2107) + _484) * cbLight._m0[_2287].x) * _2355) * _2356) + _2219;
        _2279 = (((((_2336 * _2109) + _486) * cbLight._m0[_2287].y) * _2355) * _2356) + _2220;
        _2281 = (((((_2336 * _2110) + _487) * cbLight._m0[_2287].z) * _2355) * _2356) + _2221;
    }
    float _2387;
    float _2389;
    float _2391;
    if (_1994)
    {
        _2387 = _2277;
        _2389 = _2279;
        _2391 = _2281;
    }
    else
    {
        uint _2398 = _1808 + 3u;
        uint _2402 = _1808 + 11u;
        float _2416 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2398].w)) * _418) * 0.949999988079071044921875);
        float _2417 = _2416 * _2416;
        float _2418 = cbLight._m0[_2398].x + _365;
        float _2419 = cbLight._m0[_2398].y + _366;
        float _2420 = cbLight._m0[_2398].z + _367;
        float _2424 = inversesqrt(dot(vec3(_2418, _2419, _2420), vec3(_2418, _2419, _2420)));
        float _2425 = _2424 * _2418;
        float _2426 = _2424 * _2419;
        float _2427 = _2424 * _2420;
        float _2428 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_2398].xyz));
        float _4223 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2431 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _2432 = dot(vec3(_284, _285, _286), vec3(_2425, _2426, _2427));
        float _4234 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2435 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _2436 = dot(vec3(cbLight._m0[_2398].xyz), vec3(_2425, _2426, _2427));
        float _4245 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        float _2440 = _2417 * _2417;
        float _2444 = ((_2435 * _2435) * (_2440 + (-1.0))) + 1.0;
        float _2451 = exp2(log2(1.0 - (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0)))) * 5.0);
        float _2458 = 1.0 - _2417;
        float _2468 = (0.5 / (((_2085 * ((_2431 * _2458) + _2417)) + 9.9999999392252902907785028219223e-09) + (((_2085 * _2458) + _2417) * _2431))) * _2431;
        float _4256 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2470 = (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_2440 / ((_2444 * _2444) * 3.141590118408203125));
        float _2471 = isnan(1.0) ? _1824 : (isnan(_1824) ? 1.0 : min(_1824, 1.0));
        _2387 = (((((_2451 * _2107) + _484) * cbLight._m0[_2402].x) * _2470) * _2471) + _2277;
        _2389 = (((((_2451 * _2109) + _486) * cbLight._m0[_2402].y) * _2470) * _2471) + _2279;
        _2391 = (((((_2451 * _2110) + _487) * cbLight._m0[_2402].z) * _2470) * _2471) + _2281;
    }
    float _2537;
    float _2539;
    float _2541;
    float _2543;
    float _2545;
    float _2547;
    if (_1806.y == 0u)
    {
        uvec4 _2492 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2493 = _2492.x;
        uint _2504 = uint((float(_2492.y) * floor(float(uint(cbSceneParam._m0[85u].y * _374) / _2493))) + floor(float(uint(cbSceneParam._m0[85u].x * _373) / _2493)));
        float _2514 = (log2(_1584 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2515 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        uint _2518 = uint(isnan(14.0) ? _2515 : (isnan(_2515) ? 14.0 : min(_2515, 14.0)));
        uvec4 _2523 = texelFetch(g_lightClusterGridBuffer, int(((_2518 << 2u) + (_2504 << 6u)) >> 2u));
        uint _2524 = _2523.x;
        uint _2525 = _2492.z;
        float _2622;
        float _2624;
        float _2626;
        float _2628;
        float _2630;
        float _2632;
        if (((((1u << ((_2525 >> 4u) & 15u)) + 4294967295u) & _2524) == 0u) || ((_2525 & 240u) == 0u))
        {
            _2622 = 0.0;
            _2624 = 0.0;
            _2626 = 0.0;
            _2628 = 0.0;
            _2630 = 0.0;
            _2632 = 0.0;
        }
        else
        {
            float _2623;
            float _2625;
            float _2627;
            float _2629;
            float _2631;
            float _2633;
            float _2767 = 0.0;
            float _2768 = 0.0;
            float _2769 = 0.0;
            float _2770 = 0.0;
            float _2771 = 0.0;
            float _2772 = 0.0;
            uint _2773 = 0u;
            uint _2782;
            bool _2783;
            for (;;)
            {
                _2782 = texelFetch(g_lightClassification, int((((_2518 << 5u) + (_2504 << 9u)) + (_2773 << 2u)) >> 2u)).x;
                _2783 = _2782 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2783)
                {
                    frontier_phi_66_pred = _2772;
                    frontier_phi_66_pred_1 = _2771;
                    frontier_phi_66_pred_2 = _2770;
                    frontier_phi_66_pred_3 = _2769;
                    frontier_phi_66_pred_4 = _2768;
                    frontier_phi_66_pred_5 = _2767;
                }
                else
                {
                    float _2891;
                    float _2892;
                    float _2893;
                    float _2894;
                    float _2895;
                    float _2896;
                    uint _2897;
                    _2891 = _2767;
                    _2892 = _2768;
                    _2893 = _2769;
                    _2894 = _2770;
                    _2895 = _2771;
                    _2896 = _2772;
                    _2897 = _2782;
                    float _2823;
                    float _2824;
                    float _2825;
                    float _2826;
                    float _2827;
                    float _2828;
                    for (;;)
                    {
                        uint _2901 = uint(findLSB(_2897)) + (_2773 << 5u);
                        uint _2898 = (_2897 + 4294967295u) & _2897;
                        uint _2903 = _2901 * 48u;
                        vec4 _2917 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2903)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 3u)).x));
                        uint _2923 = (_2901 * 48u) + 4u;
                        vec4 _2936 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2923)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 3u)).x));
                        uint _2942 = (_2901 * 48u) + 8u;
                        vec3 _2953 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2942)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 2u)).x));
                        float _2957 = _2917.x - _1582;
                        float _2958 = _2917.y - _1583;
                        float _2959 = _2917.z - _1584;
                        float _2960 = dot(vec3(_2957, _2958, _2959), vec3(_2957, _2958, _2959));
                        float _2963 = inversesqrt(_2960);
                        float _2964 = _2963 * _2957;
                        float _2965 = _2963 * _2958;
                        float _2966 = _2963 * _2959;
                        float _2967 = dot(vec3(_399, _402, _405), vec3(_2964, _2965, _2966));
                        float _2972 = 1.0 - (_2960 * _2917.w);
                        float _4282 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
                        float _2973 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
                        float _2974 = sqrt(_2960) * _2936.w;
                        float _2977 = 1.39999997615814208984375 / (_2974 + 1.39999997615814208984375);
                        float _2978 = _2977 * _2977;
                        float _2981 = ((1.0 - _2978) * _2967) + _2978;
                        float _2984 = _2974 * _2974;
                        float _2988 = ((isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0))) * _2973) / ((_2984 * 0.699999988079071044921875) + 1.0);
                        float _2992 = (-0.0) - _1582;
                        float _2993 = (-0.0) - _1583;
                        float _2994 = (-0.0) - _1584;
                        float _2998 = inversesqrt(dot(vec3(_2992, _2993, _2994), vec3(_2992, _2993, _2994)));
                        float _2999 = _2998 * _2992;
                        float _3000 = _2998 * _2993;
                        float _3001 = _2998 * _2994;
                        float _3008 = exp2(log2(1.0 / ((_2984 * 3.5) + 5.0)) * 0.25);
                        float _3009 = 1.0 - _515;
                        float _3016 = sqrt(1.0 - ((1.0 - (_3009 * _3009)) * (1.0 - (_3008 * _3008))));
                        float _3017 = _3016 * _3016;
                        float _3018 = _3017 * _3017;
                        float _3019 = _2999 + _2964;
                        float _3020 = _3000 + _2965;
                        float _3021 = _3001 + _2966;
                        float _3025 = inversesqrt(dot(vec3(_3019, _3020, _3021), vec3(_3019, _3020, _3021)));
                        float _3029 = dot(vec3(_399, _402, _405), vec3(_2999, _3000, _3001));
                        float _4298 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                        float _3032 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
                        float _3033 = dot(vec3(_399, _402, _405), vec3(_3025 * _3019, _3025 * _3020, _3025 * _3021));
                        float _4309 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                        float _3036 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
                        float _3040 = ((_3036 * _3036) * (_3018 + (-1.0))) + 1.0;
                        float _3041 = _2977 * _3017;
                        float _3042 = _3041 * _3041;
                        float _3045 = ((1.0 - _3042) * _2967) + _3042;
                        float _4320 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
                        float _3046 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
                        float _3047 = 1.0 - _3017;
                        float _3057 = (0.5 / (((_3046 * ((_3032 * _3047) + _3017)) + 9.9999999392252902907785028219223e-09) + (((_3046 * _3047) + _3017) * _3032))) * _3046;
                        float _4331 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                        float _3068 = (((_3018 * 3.1415927410125732421875) * (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0)))) / ((_3040 * _3040) * ((_2984 * 2.1991131305694580078125) + 3.141590118408203125))) * _2973;
                        _2826 = (_2988 * _2936.x) + _2894;
                        _2827 = (_2988 * _2936.y) + _2895;
                        _2828 = (_2988 * _2936.z) + _2896;
                        _2823 = (_3068 * _2953.x) + _2891;
                        _2824 = (_3068 * _2953.y) + _2892;
                        _2825 = (_3068 * _2953.z) + _2893;
                        if (_2898 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2891 = _2823;
                            _2892 = _2824;
                            _2893 = _2825;
                            _2894 = _2826;
                            _2895 = _2827;
                            _2896 = _2828;
                            _2897 = _2898;
                        }
                    }
                    frontier_phi_66_pred = _2828;
                    frontier_phi_66_pred_1 = _2827;
                    frontier_phi_66_pred_2 = _2826;
                    frontier_phi_66_pred_3 = _2825;
                    frontier_phi_66_pred_4 = _2824;
                    frontier_phi_66_pred_5 = _2823;
                }
                _2633 = frontier_phi_66_pred;
                _2631 = frontier_phi_66_pred_1;
                _2629 = frontier_phi_66_pred_2;
                _2627 = frontier_phi_66_pred_3;
                _2625 = frontier_phi_66_pred_4;
                _2623 = frontier_phi_66_pred_5;
                uint _2774 = _2773 + 1u;
                if (_2774 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2767 = _2623;
                    _2768 = _2625;
                    _2769 = _2627;
                    _2770 = _2629;
                    _2771 = _2631;
                    _2772 = _2633;
                    _2773 = _2774;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2622 = _2623;
            _2624 = _2625;
            _2626 = _2627;
            _2628 = _2629;
            _2630 = _2631;
            _2632 = _2633;
        }
        uvec4 _2636 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2637 = _2636.z;
        uint _2639 = (_2637 >> 8u) & 15u;
        float _2735;
        float _2737;
        float _2739;
        float _2741;
        float _2743;
        float _2745;
        if (((4294967295u << _2639) & _2524) == 0u)
        {
            _2735 = _2622;
            _2737 = _2624;
            _2739 = _2626;
            _2741 = _2628;
            _2743 = _2630;
            _2745 = _2632;
        }
        else
        {
            float _2760 = inversesqrt(dot(vec3(_1582, _1583, _1584), vec3(_1582, _1583, _1584)));
            float _2761 = _2760 * _1582;
            float _2762 = _2760 * _1583;
            float _2763 = _2760 * _1584;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2639 < ((_2637 >> 12u) & 15u))
            {
                float _2736;
                float _2738;
                float _2740;
                float _2742;
                float _2744;
                float _2746;
                float _2874 = _2622;
                float _2875 = _2624;
                float _2876 = _2626;
                float _2877 = _2628;
                float _2878 = _2630;
                float _2879 = _2632;
                uint _2880 = _2639;
                uint _2889;
                bool _2890;
                for (;;)
                {
                    _2889 = texelFetch(g_lightClassification, int((((_2518 << 5u) + (_2504 << 9u)) + (_2880 << 2u)) >> 2u)).x;
                    _2890 = _2889 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2890)
                    {
                        frontier_phi_72_pred = _2879;
                        frontier_phi_72_pred_1 = _2878;
                        frontier_phi_72_pred_2 = _2877;
                        frontier_phi_72_pred_3 = _2876;
                        frontier_phi_72_pred_4 = _2875;
                        frontier_phi_72_pred_5 = _2874;
                    }
                    else
                    {
                        float _3073;
                        float _3074;
                        float _3075;
                        float _3076;
                        float _3077;
                        float _3078;
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3086 = _2874;
                        float _3087 = _2875;
                        float _3088 = _2876;
                        float _3089 = _2877;
                        float _3090 = _2878;
                        float _3091 = _2879;
                        uint _3092 = _2889;
                        uint _3093;
                        vec4 _3118;
                        float _3119;
                        vec4 _3134;
                        vec3 _3146;
                        vec4 _3162;
                        vec4 _3178;
                        float _3225;
                        bool _3226;
                        for (;;)
                        {
                            uint _3103 = ((_2880 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3092));
                            _3093 = (_3092 + 4294967295u) & _3092;
                            uint _3105 = _3103 * 40u;
                            _3118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 3u)).x));
                            _3119 = _3118.w;
                            uint _3121 = (_3103 * 40u) + 4u;
                            _3134 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3121)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 3u)).x));
                            uint _3136 = (_3103 * 40u) + 8u;
                            _3146 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3136)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 2u)).x));
                            uint _3149 = (_3103 * 40u) + 16u;
                            _3162 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3149)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 3u)).x));
                            uint _3165 = (_3103 * 40u) + 20u;
                            _3178 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 3u)).x));
                            uint _3181 = (_3103 * 40u) + 24u;
                            vec4 _3194 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3181)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 3u)).x));
                            uint _3200 = (_3103 * 40u) + 28u;
                            vec4 _3213 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3200)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 3u)).x));
                            _3225 = fma(_1584, _3213.z, fma(_1583, _3213.y, _3213.x * _1582)) + _3213.w;
                            _3226 = !((fma(_1584, _3194.z, fma(_1583, _3194.y, _3194.x * _1582)) + _3194.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3226)
                            {
                                float _3253 = _3118.x - _1582;
                                float _3254 = _3118.y - _1583;
                                float _3255 = _3118.z - _1584;
                                float _3256 = dot(vec3(_3253, _3254, _3255), vec3(_3253, _3254, _3255));
                                float _3259 = inversesqrt(_3256);
                                float _3260 = _3259 * _3253;
                                float _3261 = _3259 * _3254;
                                float _3262 = _3259 * _3255;
                                float _3266 = 1.0 - (_3256 / (_3119 * _3119));
                                float _4342 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                                float _3267 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
                                float _3271 = sqrt(_3256) * _3134.w;
                                float _3273 = 1.39999997615814208984375 / (_3271 + 1.39999997615814208984375);
                                float _3274 = _3273 * _3273;
                                float _3277 = ((1.0 - _3274) * dot(vec3(_3260, _3261, _3262), vec3(_399, _402, _405))) + _3274;
                                float _3280 = _3271 * _3271;
                                float _3284 = (fma(_1584, _3162.z, fma(_1583, _3162.y, _3162.x * _1582)) + _3162.w) / _3225;
                                float _3285 = (fma(_1584, _3178.z, fma(_1583, _3178.y, _3178.x * _1582)) + _3178.w) / _3225;
                                float _3289 = 1.0 - dot(vec2(_3284, _3285), vec2(_3284, _3285));
                                float _4358 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                                float _3290 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
                                float _3291 = _3290 * (((isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0))) * _3267) / ((_3280 * 0.699999988079071044921875) + 1.0));
                                float _3303 = exp2(log2(1.0 / ((_3280 * 3.5) + 5.0)) * 0.25);
                                float _3304 = 1.0 - _515;
                                float _3311 = sqrt(1.0 - ((1.0 - (_3304 * _3304)) * (1.0 - (_3303 * _3303))));
                                float _3312 = _3311 * _3311;
                                float _3313 = _3312 * _3312;
                                float _3314 = _3260 - _2761;
                                float _3315 = _3261 - _2762;
                                float _3316 = _3262 - _2763;
                                float _3320 = inversesqrt(dot(vec3(_3314, _3315, _3316), vec3(_3314, _3315, _3316)));
                                float _3324 = dot(vec3(_399, _402, _405), vec3((-0.0) - _2761, (-0.0) - _2762, (-0.0) - _2763));
                                float _4369 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                                float _3327 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
                                float _3328 = dot(vec3(_399, _402, _405), vec3(_3320 * _3314, _3320 * _3315, _3320 * _3316));
                                float _4380 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                                float _3331 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
                                float _3335 = ((_3331 * _3331) * (_3313 + (-1.0))) + 1.0;
                                float _3336 = _3273 * _3312;
                                float _3337 = _3336 * _3336;
                                float _3343 = ((1.0 - _3337) * dot(vec3(_399, _402, _405), vec3(_3260, _3261, _3262))) + _3337;
                                float _4391 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                                float _3344 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
                                float _3345 = 1.0 - _3312;
                                float _3355 = (0.5 / (((_3344 * ((_3327 * _3345) + _3312)) + 9.9999999392252902907785028219223e-09) + (((_3344 * _3345) + _3312) * _3327))) * _3344;
                                float _4402 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                                float _3365 = (_3290 * _3267) * (((_3313 * 3.1415927410125732421875) * (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0)))) / ((_3335 * _3335) * ((_3280 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3291 * _3134.y;
                                frontier_phi_78_pred_1 = _3291 * _3134.x;
                                frontier_phi_78_pred_2 = _3365 * _3146.z;
                                frontier_phi_78_pred_3 = _3365 * _3146.y;
                                frontier_phi_78_pred_4 = _3365 * _3146.x;
                                frontier_phi_78_pred_5 = _3291 * _3134.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3373 = frontier_phi_78_pred;
                            _3372 = frontier_phi_78_pred_1;
                            _3371 = frontier_phi_78_pred_2;
                            _3370 = frontier_phi_78_pred_3;
                            _3369 = frontier_phi_78_pred_4;
                            _3374 = frontier_phi_78_pred_5;
                            _3076 = _3372 + _3089;
                            _3077 = _3373 + _3090;
                            _3078 = _3374 + _3091;
                            _3073 = _3369 + _3086;
                            _3074 = _3370 + _3087;
                            _3075 = _3371 + _3088;
                            if (_3093 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3086 = _3073;
                                _3087 = _3074;
                                _3088 = _3075;
                                _3089 = _3076;
                                _3090 = _3077;
                                _3091 = _3078;
                                _3092 = _3093;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3078;
                        frontier_phi_72_pred_1 = _3077;
                        frontier_phi_72_pred_2 = _3076;
                        frontier_phi_72_pred_3 = _3075;
                        frontier_phi_72_pred_4 = _3074;
                        frontier_phi_72_pred_5 = _3073;
                    }
                    _2746 = frontier_phi_72_pred;
                    _2744 = frontier_phi_72_pred_1;
                    _2742 = frontier_phi_72_pred_2;
                    _2740 = frontier_phi_72_pred_3;
                    _2738 = frontier_phi_72_pred_4;
                    _2736 = frontier_phi_72_pred_5;
                    uint _2881 = _2880 + 1u;
                    if (_2881 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2874 = _2736;
                        _2875 = _2738;
                        _2876 = _2740;
                        _2877 = _2742;
                        _2878 = _2744;
                        _2879 = _2746;
                        _2880 = _2881;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2746;
                frontier_phi_60_61_ladder_1 = _2744;
                frontier_phi_60_61_ladder_2 = _2740;
                frontier_phi_60_61_ladder_3 = _2738;
                frontier_phi_60_61_ladder_4 = _2736;
                frontier_phi_60_61_ladder_5 = _2742;
            }
            else
            {
                frontier_phi_60_61_ladder = _2632;
                frontier_phi_60_61_ladder_1 = _2630;
                frontier_phi_60_61_ladder_2 = _2626;
                frontier_phi_60_61_ladder_3 = _2624;
                frontier_phi_60_61_ladder_4 = _2622;
                frontier_phi_60_61_ladder_5 = _2628;
            }
            _2735 = frontier_phi_60_61_ladder_4;
            _2737 = frontier_phi_60_61_ladder_3;
            _2739 = frontier_phi_60_61_ladder_2;
            _2741 = frontier_phi_60_61_ladder_5;
            _2743 = frontier_phi_60_61_ladder_1;
            _2745 = frontier_phi_60_61_ladder;
        }
        float _2750 = isnan(1.0) ? _499 : (isnan(_499) ? 1.0 : min(_499, 1.0));
        _2537 = (_2750 * _2741) + _2049;
        _2539 = (_2750 * _2743) + _2051;
        _2541 = (_2750 * _2745) + _2053;
        _2543 = ((_2735 * _484) * _2750) + _2387;
        _2545 = ((_2737 * _486) * _2750) + _2389;
        _2547 = ((_2739 * _487) * _2750) + _2391;
    }
    else
    {
        _2537 = _2049;
        _2539 = _2051;
        _2541 = _2053;
        _2543 = _2387;
        _2545 = _2389;
        _2547 = _2391;
    }
    vec4 _2553 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4418 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _4429 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _4440 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _2577 = (((isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0))) * (_2537 + ((isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0))) * _499))) + ((_2543 + ((isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))) * _1309)) * cbPerFrame._m0[3u].x)) + (_2553.x * cbMtdParam._m0[3u].x);
    float _2579 = ((_2553.y * cbMtdParam._m0[3u].x) + ((_2545 + ((isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))) * _1309)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_2539 + ((isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0))) * _499)));
    float _2581 = ((_2553.z * cbMtdParam._m0[3u].x) + ((_2547 + ((isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))) * _1309)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_2541 + ((isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0))) * _499)));
    uint _2585 = _431 + 6u;
    float _2593 = _373 / cbSceneParam._m0[86u].x;
    float _2594 = _374 / cbSceneParam._m0[86u].y;
    vec4 _2608 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2593, _2594, (log2((isnan(cbSceneParam._m0[77u].w) ? _306 : (isnan(_306) ? cbSceneParam._m0[77u].w : min(_306, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2610 = _2608.x;
    float _2611 = _2608.y;
    float _2612 = _2608.z;
    float _2613 = _2608.w;
    float _2685;
    float _2687;
    float _2689;
    float _2691;
    if (_306 > cbSceneParam._m0[78u].w)
    {
        float _2647 = isnan(_306) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _306 : min(cbSceneParam._m0[80u].w, _306));
        float _2648 = _2647 / _306;
        float _2659 = _2648 * _358;
        float _2660 = _359 * _2648;
        float _2661 = (-0.0) - _2660;
        float _2663 = _2648 * _360;
        float _2665 = (cbSceneParam._m0[77u].w * _2661) / _2647;
        float _2666 = _2665 + cbSceneParam._m0[79u].w;
        float _2667 = cbSceneParam._m0[79u].w - _2660;
        float _2673 = sqrt(((_2659 * _2659) + (_2660 * _2660)) + (_2663 * _2663));
        float _2676 = (1.0 - (cbSceneParam._m0[77u].w / _2647)) * _2673;
        float _2681 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2683 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2836;
        if (abs((_2661 - _2665) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2836 = ((((_2666 > 0.0) ? exp2(_2681 * _2666) : (2.0 - exp2(_2683 * _2666))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2676;
        }
        else
        {
            float _2796 = 1.0 / cbSceneParam._m0[80u].x;
            float _2797 = isnan(_2667) ? _2666 : (isnan(_2666) ? _2667 : max(_2666, _2667));
            float _2798 = isnan(_2667) ? _2666 : (isnan(_2666) ? _2667 : min(_2666, _2667));
            float _2807 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : min(_2797, 0.0));
            float _2808 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : min(_2798, 0.0));
            _2836 = ((abs(_2673 / _2661) * cbSceneParam._m0[80u].y) * ((((_2807 - _2808) * 2.0) - ((exp2(_2681 * (isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0)))) - exp2(_2681 * (isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0))))) * _2796)) - ((exp2(_2683 * _2807) - exp2(_2683 * _2808)) * _2796))) + (_2676 * cbSceneParam._m0[80u].z);
        }
        vec4 _2838 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2593, _2594, 1.0), 0.0);
        float _2847 = exp2((_2836 * (-1.44269502162933349609375)) * (1.0 - _2838.w));
        float _2848 = log2(_2847);
        float _2864 = log2(_2613);
        _2685 = (exp2(_2864 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2848 * cbSceneParam._m0[78u].x)) * _2838.x) / cbSceneParam._m0[78u].x)) + _2610;
        _2687 = (exp2(_2864 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2848 * cbSceneParam._m0[78u].y)) * _2838.y) / cbSceneParam._m0[78u].y)) + _2611;
        _2689 = (exp2(_2864 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2848 * cbSceneParam._m0[78u].z)) * _2838.z) / cbSceneParam._m0[78u].z)) + _2612;
        _2691 = _2847 * _2613;
    }
    else
    {
        _2685 = _2610;
        _2687 = _2611;
        _2689 = _2612;
        _2691 = _2613;
    }
    float _2703 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2704 = _2703 == 3.0;
    float _2705 = log2(_2691);
    float _2712 = exp2(_2705 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0)));
    float _2713 = exp2(_2705 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0)));
    float _2714 = exp2(_2705 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0)));
    float _2723 = (_2703 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2723 * (_2704 ? _2712 : (_2712 + (cbSceneParam._m0[72u].w * _2685)));
    SV_Target.y = _2723 * (_2704 ? _2713 : (_2713 + (cbSceneParam._m0[72u].w * _2687)));
    SV_Target.z = _2723 * (_2704 ? _2714 : (_2714 + (cbSceneParam._m0[72u].w * _2689)));
    SV_Target.w = cbInstanceData._m0[_2585].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2585].w;
}


