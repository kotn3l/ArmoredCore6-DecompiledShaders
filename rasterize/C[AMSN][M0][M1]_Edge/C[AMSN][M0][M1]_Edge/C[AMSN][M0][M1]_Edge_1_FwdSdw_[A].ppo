#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M0_M1_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M0_M1_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _920;
float _3612;
float _3613;
float _3614;
float _3615;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _237 = texture(sampler2D(C_AMSN_M0_M1_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _243 = _237.w;
    float _244 = _237.x * cbMtdParam._m0[9u].x;
    float _245 = _237.y * cbMtdParam._m0[9u].y;
    float _246 = _237.z * cbMtdParam._m0[9u].z;
    vec4 _258 = texture(sampler2D(C_AMSN_M0_M1_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _262 = _258.z;
    float _266 = (_258.x * 2.0) + (-1.0);
    float _268 = (_258.y * 2.0) + (-1.0);
    float _269 = dot(vec2(_266, _268), vec2(_266, _268));
    float _3624 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _275 = sqrt(1.0 - (isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))));
    float _278 = fma(_275, _207 * NORMAL.x, fma(_268, _214 * TANGENT.x, (_200 * _192) * _266));
    float _281 = fma(_275, _207 * NORMAL.y, fma(_268, _214 * TANGENT.y, (_200 * _193) * _266));
    float _284 = fma(_275, _207 * NORMAL.z, fma(_268, _214 * TANGENT.z, (_200 * _194) * _266));
    float _288 = inversesqrt(dot(vec3(_278, _281, _284), vec3(_278, _281, _284)));
    float _289 = _288 * _278;
    float _290 = _288 * _281;
    float _291 = _288 * _284;
    float _3635 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _292 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
    float _3646 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _3657 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3668 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _311 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _353 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _363 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _353);
    float _364 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _353);
    float _365 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _353);
    float _369 = inversesqrt(dot(vec3(_363, _364, _365), vec3(_363, _364, _365)));
    float _370 = _363 * _369;
    float _371 = _364 * _369;
    float _372 = _365 * _369;
    vec4 _377 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _379 = _377.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _599 = sqrt(((_363 * _363) + (_364 * _364)) + (_365 * _365));
        float _605 = (cbMatDynParam._m0[5u].x * _599) + cbMatDynParam._m0[5u].y;
        float _3679 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
        float _606 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _610 = (cbMatDynParam._m0[5u].z * _599) + cbMatDynParam._m0[5u].w;
        float _3690 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))) - _606)) + _606) < ((_379 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _391 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _392 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _394 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _396 = _394.w;
    float _416 = fma(_291, cbSceneParam._m0[5u].z, fma(_290, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _289));
    float _419 = fma(_291, cbSceneParam._m0[6u].z, fma(_290, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _289));
    float _422 = fma(_291, cbSceneParam._m0[7u].z, fma(_290, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _289));
    vec4 _424 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _435 = (((_424.y - _292) + (_424.w * _292)) * cbMtdParam._m0[3u].x) + _292;
    uint _448 = uint(roundEven(NORMAL.w)) * 13u;
    uint _450 = _448 + 9u;
    uint _451 = _450 + uint(cbMatDynParam._m0[0u].w);
    float _457 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0)))) * cbInstanceData._m0[_451].x;
    float _458 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0)))) * cbInstanceData._m0[_451].y;
    float _459 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0)))) * cbInstanceData._m0[_451].z;
    float _3701 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _460 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
    float _3712 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _461 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
    float _3723 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _462 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
    vec4 _463 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _468 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _474 = cbMtdParam._m0[3u].x * _468.x;
    float _487 = (cbMtdParam._m0[3u].x * (((_460 * _396) - _460) + _463.x)) + _460;
    float _488 = (cbMtdParam._m0[3u].x * (((_461 * _396) - _461) + _463.y)) + _461;
    float _489 = (cbMtdParam._m0[3u].x * (((_462 * _396) - _462) + _463.z)) + _462;
    float _490 = 1.0 - _474;
    float _491 = _487 * _490;
    float _492 = _488 * _490;
    float _493 = _489 * _490;
    float _498 = (_487 + (-0.039999999105930328369140625)) * _474;
    float _499 = (_488 + (-0.039999999105930328369140625)) * _474;
    float _500 = (_489 + (-0.039999999105930328369140625)) * _474;
    float _501 = _498 + 0.039999999105930328369140625;
    float _503 = _499 + 0.039999999105930328369140625;
    float _504 = _500 + 0.039999999105930328369140625;
    vec4 _513 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _391, cbSceneParam._m0[86u].y * _392));
    float _516 = _513.x * TEXCOORD_4;
    float _517 = dot(vec3(_289, _290, _291), vec3(_370, _371, _372));
    float _520 = _517 * 2.0;
    float _524 = (_520 * _289) - _370;
    float _525 = (_520 * _290) - _371;
    float _526 = (_520 * _291) - _372;
    float _530 = abs(dot(vec3(_370, _371, _372), vec3(_289, _290, _291)));
    float _3734 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _532 = sqrt(_435);
    float _545 = exp2((_532 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_532 * 3.0));
    float _551 = (1.0 - _545) * ((_532 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _552 = _545 * _532;
    float _580 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _584 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _588 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _919;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _644 = fma(_588, cbModelParam._m0[26u].z, fma(_584, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _580));
        float _648 = fma(_588, cbModelParam._m0[27u].z, fma(_584, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _580));
        float _652 = fma(_588, cbModelParam._m0[28u].z, fma(_584, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _580));
        float _677 = _580 + _289;
        float _678 = _584 + _290;
        float _679 = _588 + _291;
        float _689 = fma(_679, cbModelParam._m0[26u].z, fma(_678, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _677)) - _644;
        float _690 = fma(_679, cbModelParam._m0[27u].z, fma(_678, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _677)) - _648;
        float _691 = fma(_679, cbModelParam._m0[28u].z, fma(_678, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _677)) - _652;
        float _695 = inversesqrt(dot(vec3(_689, _690, _691), vec3(_689, _690, _691)));
        float _708 = ((_695 * _689) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_644 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _709 = ((_695 * _690) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_648 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _710 = ((_695 * _691) / cbModelParam._m0[34u].z) + ((((((_652 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _713 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_708, _709, _710), 0.0);
        vec4 _720 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_708, _709, _710), 0.0);
        vec4 _727 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_708, _709, _710), 0.0);
        vec4 _734 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_708, _709, _710), 0.0);
        float _747 = exp2((_713.w + (-0.5)) * 20.0) * 2.0;
        float _748 = _747 * (_713.x + (-0.5));
        float _749 = _747 * (_713.y + (-0.5));
        float _750 = _747 * (_713.z + (-0.5));
        float _757 = exp2((_720.w + (-0.5)) * 20.0) * 2.0;
        float _758 = _757 * (_720.x + (-0.5));
        float _759 = _757 * (_720.y + (-0.5));
        float _760 = _757 * (_720.z + (-0.5));
        float _767 = exp2((_727.w + (-0.5)) * 20.0) * 2.0;
        float _768 = _767 * (_727.x + (-0.5));
        float _769 = _767 * (_727.y + (-0.5));
        float _770 = _767 * (_727.z + (-0.5));
        float _777 = exp2((_734.w + (-0.5)) * 20.0) * 2.0;
        float _778 = _777 * (_734.x + (-0.5));
        float _779 = _777 * (_734.y + (-0.5));
        float _780 = _777 * (_734.z + (-0.5));
        float _781 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _782 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _783 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _784 = _748 * 0.5;
        float _785 = _758 * 0.5;
        float _786 = _768 * 0.5;
        float _787 = dot(vec3(_784, _785, _786), vec3(_784, _785, _786));
        float _792 = (_787 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_787);
        float _801 = (dot(vec3(_289, _290, _291), vec3(_792 * _784, _792 * _785, _792 * _786)) + 1.0) * 0.5;
        float _3760 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _811 = sqrt(((_785 * _785) + (_784 * _784)) + (_786 * _786)) / (_781 + 9.9999997473787516355514526367188e-06);
        float _3771 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _812 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _813 = _812 * 2.0;
        float _817 = (1.0 - _812) / (_812 + 1.0);
        float _3782 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _818 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _827 = ((((1.0 - _818) * (_813 + 2.0)) * exp2(log2(isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * (_813 + 1.0))) + _818) * _781;
        float _828 = _749 * 0.5;
        float _829 = _759 * 0.5;
        float _830 = _769 * 0.5;
        float _831 = dot(vec3(_828, _829, _830), vec3(_828, _829, _830));
        float _836 = (_831 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_831);
        float _844 = (dot(vec3(_289, _290, _291), vec3(_836 * _828, _836 * _829, _836 * _830)) + 1.0) * 0.5;
        float _3793 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _853 = sqrt(((_829 * _829) + (_828 * _828)) + (_830 * _830)) / (_782 + 9.9999997473787516355514526367188e-06);
        float _3804 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _854 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _855 = _854 * 2.0;
        float _859 = (1.0 - _854) / (_854 + 1.0);
        float _3815 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _860 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _869 = ((((1.0 - _860) * (_855 + 2.0)) * exp2(log2(isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * (_855 + 1.0))) + _860) * _782;
        float _870 = _750 * 0.5;
        float _871 = _760 * 0.5;
        float _872 = _770 * 0.5;
        float _873 = dot(vec3(_870, _871, _872), vec3(_870, _871, _872));
        float _878 = (_873 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_873);
        float _886 = (dot(vec3(_289, _290, _291), vec3(_878 * _870, _878 * _871, _878 * _872)) + 1.0) * 0.5;
        float _3826 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _895 = sqrt(((_871 * _871) + (_870 * _870)) + (_872 * _872)) / (_783 + 9.9999997473787516355514526367188e-06);
        float _3837 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _896 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _897 = _896 * 2.0;
        float _901 = (1.0 - _896) / (_896 + 1.0);
        float _3848 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _902 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _911 = ((((1.0 - _902) * (_897 + 2.0)) * exp2(log2(isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * (_897 + 1.0))) + _902) * _783;
        _919 = _750;
        _921 = _749;
        _922 = _748;
        _923 = _760;
        _924 = _759;
        _925 = _758;
        _926 = _770;
        _927 = _769;
        _928 = _768;
        _929 = _783;
        _930 = _782;
        _931 = _781;
        _932 = cbModelParam._m0[36u].z * (isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0)));
        _933 = cbModelParam._m0[36u].z * (isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0)));
        _934 = cbModelParam._m0[36u].z * (isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0)));
    }
    else
    {
        _919 = _920;
        _921 = _920;
        _922 = _920;
        _923 = _920;
        _924 = _920;
        _925 = _920;
        _926 = _920;
        _927 = _920;
        _928 = _920;
        _929 = _920;
        _930 = _920;
        _931 = _920;
        _932 = 0.0;
        _933 = 0.0;
        _934 = 0.0;
    }
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _963 = fma(_588, cbModelParam._m0[30u].z, fma(_584, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _580));
        float _967 = fma(_588, cbModelParam._m0[31u].z, fma(_584, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _580));
        float _971 = fma(_588, cbModelParam._m0[32u].z, fma(_584, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _580));
        float _994 = _580 + _289;
        float _995 = _584 + _290;
        float _996 = _588 + _291;
        float _1006 = fma(_996, cbModelParam._m0[30u].z, fma(_995, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _994)) - _963;
        float _1007 = fma(_996, cbModelParam._m0[31u].z, fma(_995, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _994)) - _967;
        float _1008 = fma(_996, cbModelParam._m0[32u].z, fma(_995, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _994)) - _971;
        float _1012 = inversesqrt(dot(vec3(_1006, _1007, _1008), vec3(_1006, _1007, _1008)));
        float _1025 = ((_1012 * _1006) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_963 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1026 = ((_1012 * _1007) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_967 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1027 = ((_1012 * _1008) / cbModelParam._m0[35u].z) + ((((((_971 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        vec4 _1043 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        float _1062 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1029.x + (-0.5));
        float _1064 = _1062 * (_1029.y + (-0.5));
        float _1065 = _1062 * (_1029.z + (-0.5));
        float _1072 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1036.x + (-0.5));
        float _1074 = _1072 * (_1036.y + (-0.5));
        float _1075 = _1072 * (_1036.z + (-0.5));
        float _1082 = exp2((_1043.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1043.x + (-0.5));
        float _1084 = _1082 * (_1043.y + (-0.5));
        float _1085 = _1082 * (_1043.z + (-0.5));
        float _1092 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1093 = _1092 * (_1050.x + (-0.5));
        float _1094 = _1092 * (_1050.y + (-0.5));
        float _1095 = _1092 * (_1050.z + (-0.5));
        float _1096 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1097 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1098 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1099 = _1063 * 0.5;
        float _1100 = _1073 * 0.5;
        float _1101 = _1083 * 0.5;
        float _1102 = dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101));
        float _1107 = (_1102 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1102);
        float _1115 = (dot(vec3(_289, _290, _291), vec3(_1107 * _1099, _1107 * _1100, _1107 * _1101)) + 1.0) * 0.5;
        float _3889 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1124 = sqrt(((_1100 * _1100) + (_1099 * _1099)) + (_1101 * _1101)) / (_1096 + 9.9999997473787516355514526367188e-06);
        float _3900 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1126 = _1125 * 2.0;
        float _1130 = (1.0 - _1125) / (_1125 + 1.0);
        float _3911 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1140 = ((((1.0 - _1131) * (_1126 + 2.0)) * exp2(log2(isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_1126 + 1.0))) + _1131) * _1096;
        float _1141 = _1064 * 0.5;
        float _1142 = _1074 * 0.5;
        float _1143 = _1084 * 0.5;
        float _1144 = dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143));
        float _1149 = (_1144 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1144);
        float _1157 = (dot(vec3(_289, _290, _291), vec3(_1149 * _1141, _1149 * _1142, _1149 * _1143)) + 1.0) * 0.5;
        float _3922 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1166 = sqrt(((_1142 * _1142) + (_1141 * _1141)) + (_1143 * _1143)) / (_1097 + 9.9999997473787516355514526367188e-06);
        float _3933 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1168 = _1167 * 2.0;
        float _1172 = (1.0 - _1167) / (_1167 + 1.0);
        float _3944 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1182 = ((((1.0 - _1173) * (_1168 + 2.0)) * exp2(log2(isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_1168 + 1.0))) + _1173) * _1097;
        float _1183 = _1065 * 0.5;
        float _1184 = _1075 * 0.5;
        float _1185 = _1085 * 0.5;
        float _1186 = dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185));
        float _1191 = (_1186 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1186);
        float _1199 = (dot(vec3(_289, _290, _291), vec3(_1191 * _1183, _1191 * _1184, _1191 * _1185)) + 1.0) * 0.5;
        float _3955 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1208 = sqrt(((_1184 * _1184) + (_1183 * _1183)) + (_1185 * _1185)) / (_1098 + 9.9999997473787516355514526367188e-06);
        float _3966 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1210 = _1209 * 2.0;
        float _1214 = (1.0 - _1209) / (_1209 + 1.0);
        float _3977 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1224 = ((((1.0 - _1215) * (_1210 + 2.0)) * exp2(log2(isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_1210 + 1.0))) + _1215) * _1098;
        _1232 = _1065;
        _1233 = _1064;
        _1234 = _1063;
        _1235 = _1075;
        _1236 = _1074;
        _1237 = _1073;
        _1238 = _1085;
        _1239 = _1084;
        _1240 = _1083;
        _1241 = _1098;
        _1242 = _1097;
        _1243 = _1096;
        _1244 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0)));
        _1245 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)));
        _1246 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)));
    }
    else
    {
        _1232 = _920;
        _1233 = _920;
        _1234 = _920;
        _1235 = _920;
        _1236 = _920;
        _1237 = _920;
        _1238 = _920;
        _1239 = _920;
        _1240 = _920;
        _1241 = _920;
        _1242 = _920;
        _1243 = _920;
        _1244 = 0.0;
        _1245 = 0.0;
        _1246 = 0.0;
    }
    float _1256 = (cbModelParam._m0[1u].x * (_1244 - _932)) + _932;
    float _1257 = (cbModelParam._m0[1u].x * (_1245 - _933)) + _933;
    float _1258 = (cbModelParam._m0[1u].x * (_1246 - _934)) + _934;
    float _1279 = fma(_1258, cbSceneParam._m0[89u].z, fma(_1257, cbSceneParam._m0[89u].y, _1256 * cbSceneParam._m0[89u].x));
    float _1282 = fma(_1258, cbSceneParam._m0[90u].z, fma(_1257, cbSceneParam._m0[90u].y, _1256 * cbSceneParam._m0[90u].x));
    float _1285 = fma(_1258, cbSceneParam._m0[91u].z, fma(_1257, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1256));
    float _1300 = _524 * 0.5;
    float _1301 = _525 * 0.5;
    float _1302 = _526 * 0.5;
    float _1303 = dot(vec4(_1300, _1301, _1302, 1.0), vec4(_1234, _1237, _1240, _1243));
    float _1306 = dot(vec4(_1300, _1301, _1302, 1.0), vec4(_1233, _1236, _1239, _1242));
    float _1309 = dot(vec4(_1300, _1301, _1302, 1.0), vec4(_1232, _1235, _1238, _1241));
    float _1343;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1316 = dot(vec4(_1300, _1301, _1302, 1.0), vec4(_919, _923, _926, _929));
        float _1320 = dot(vec4(_1300, _1301, _1302, 1.0), vec4(_921, _924, _927, _930));
        float _1324 = dot(vec4(_1300, _1301, _1302, 1.0), vec4(_922, _925, _928, _931));
        float _1331 = dot(vec4(cbModelParam._m0[39u]), vec4(_1300, _1301, _1302, 1.0));
        _1343 = dot(vec3(isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)), isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)), isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1331) ? 0.0 : (isnan(0.0) ? _1331 : max(0.0, _1331))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1343 = 1.0;
    }
    float _1354;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1345 = dot(vec4(cbModelParam._m0[40u]), vec4(_1300, _1301, _1302, 1.0));
        _1354 = dot(vec3(isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)), isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)), isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1345) ? 0.0 : (isnan(0.0) ? _1345 : max(0.0, _1345))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1354 = 1.0;
    }
    float _1358 = (_1354 * cbModelParam._m0[1u].x) + (_1343 * (1.0 - cbModelParam._m0[1u].x));
    float _1368 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _435);
    float _1369 = isnan(_1368) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1368 : min(cbModelParam._m0[25u].z, _1368));
    float _1451;
    float _1453;
    float _1455;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1418 = fma(_588, cbModelParam._m0[13u].z, fma(_584, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _580)) + cbModelParam._m0[13u].w;
        float _1422 = fma(_588, cbModelParam._m0[14u].z, fma(_584, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _580)) + cbModelParam._m0[14u].w;
        float _1426 = fma(_588, cbModelParam._m0[15u].z, fma(_584, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _580)) + cbModelParam._m0[15u].w;
        float _1429 = fma(_526, cbModelParam._m0[13u].z, fma(_525, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _524));
        float _1432 = fma(_526, cbModelParam._m0[14u].z, fma(_525, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _524));
        float _1435 = fma(_526, cbModelParam._m0[15u].z, fma(_525, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _524));
        float _1463;
        if (_1429 > 0.0)
        {
            _1463 = abs((1.0 - _1418) / _1429);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1429 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1418 + 1.0) / _1429);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1463 = frontier_phi_17_15_ladder;
        }
        float _1639;
        if (_1432 > 0.0)
        {
            _1639 = abs((1.0 - _1422) / _1432);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1432 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1422 + 1.0) / _1432);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1639 = frontier_phi_26_22_ladder;
        }
        float _1935;
        if (_1435 > 0.0)
        {
            _1935 = abs((1.0 - _1426) / _1435);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1435 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1426 + 1.0) / _1435);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1935 = frontier_phi_38_33_ladder;
        }
        float _1937 = isnan(_1639) ? _1463 : (isnan(_1463) ? _1639 : min(_1463, _1639));
        float _1938 = isnan(_1935) ? _1937 : (isnan(_1937) ? _1935 : min(_1937, _1935));
        float _1942 = (_1938 * _1429) + _1418;
        float _1943 = (_1938 * _1432) + _1422;
        float _1944 = (_1938 * _1435) + _1426;
        float _1945 = _1938 * 9.9999997473787516355514526367188e-05;
        float _1947 = (-1.0) - _1945;
        float _1949 = _1945 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1944 > _1949) || ((_1944 < _1947) || ((_1943 > _1949) || ((_1943 < _1947) || ((_1942 < _1947) || (_1942 > _1949))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2089 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1944, cbModelParam._m0[9u].z, fma(_1943, cbModelParam._m0[9u].y, _1942 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1944, cbModelParam._m0[10u].z, fma(_1943, cbModelParam._m0[10u].y, _1942 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1944, cbModelParam._m0[11u].z, fma(_1943, cbModelParam._m0[11u].y, _1942 * cbModelParam._m0[11u].x))), _1369);
            frontier_phi_16_38_ladder = _2089.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2089.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2089.x * cbModelParam._m0[1u].y;
        }
        _1451 = frontier_phi_16_38_ladder_2;
        _1453 = frontier_phi_16_38_ladder_1;
        _1455 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1439 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_524, _525, _526), _1369);
        _1451 = _1439.x * cbModelParam._m0[1u].y;
        _1453 = _1439.y * cbModelParam._m0[1u].y;
        _1455 = _1439.z * cbModelParam._m0[1u].y;
    }
    float _1459 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _435);
    float _1460 = isnan(_1459) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1459 : min(cbModelParam._m0[25u].w, _1459));
    float _1553;
    float _1555;
    float _1557;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1517 = fma(_588, cbModelParam._m0[21u].z, fma(_584, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _580)) + cbModelParam._m0[21u].w;
        float _1521 = fma(_588, cbModelParam._m0[22u].z, fma(_584, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _580)) + cbModelParam._m0[22u].w;
        float _1525 = fma(_588, cbModelParam._m0[23u].z, fma(_584, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _580)) + cbModelParam._m0[23u].w;
        float _1528 = fma(_526, cbModelParam._m0[21u].z, fma(_525, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _524));
        float _1531 = fma(_526, cbModelParam._m0[22u].z, fma(_525, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _524));
        float _1534 = fma(_526, cbModelParam._m0[23u].z, fma(_525, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _524));
        float _1644;
        if (_1528 > 0.0)
        {
            _1644 = abs((1.0 - _1517) / _1528);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1528 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1517 + 1.0) / _1528);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1644 = frontier_phi_28_24_ladder;
        }
        float _1962;
        if (_1531 > 0.0)
        {
            _1962 = abs((1.0 - _1521) / _1531);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1531 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1521 + 1.0) / _1531);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1962 = frontier_phi_40_35_ladder;
        }
        float _2300;
        if (_1534 > 0.0)
        {
            _2300 = abs((1.0 - _1525) / _1534);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1534 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1525 + 1.0) / _1534);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2300 = frontier_phi_50_47_ladder;
        }
        float _2302 = isnan(_1962) ? _1644 : (isnan(_1644) ? _1962 : min(_1644, _1962));
        float _2303 = isnan(_2300) ? _2302 : (isnan(_2302) ? _2300 : min(_2302, _2300));
        float _2307 = (_2303 * _1528) + _1517;
        float _2308 = (_2303 * _1531) + _1521;
        float _2309 = (_2303 * _1534) + _1525;
        float _2310 = _2303 * 9.9999997473787516355514526367188e-05;
        float _2311 = (-1.0) - _2310;
        float _2313 = _2310 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2309 > _2313) || ((_2309 < _2311) || ((_2308 > _2313) || ((_2308 < _2311) || ((_2307 < _2311) || (_2307 > _2313))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2431 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2309, cbModelParam._m0[17u].z, fma(_2308, cbModelParam._m0[17u].y, _2307 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2309, cbModelParam._m0[18u].z, fma(_2308, cbModelParam._m0[18u].y, _2307 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2309, cbModelParam._m0[19u].z, fma(_2308, cbModelParam._m0[19u].y, _2307 * cbModelParam._m0[19u].x))), _1460);
            frontier_phi_25_50_ladder = _2431.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2431.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2431.x * cbModelParam._m0[1u].z;
        }
        _1553 = frontier_phi_25_50_ladder_2;
        _1555 = frontier_phi_25_50_ladder_1;
        _1557 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1537 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_524, _525, _526), _1460);
        _1553 = _1537.x * cbModelParam._m0[1u].z;
        _1555 = _1537.y * cbModelParam._m0[1u].z;
        _1557 = _1537.z * cbModelParam._m0[1u].z;
    }
    float _1570 = (((_551 * _501) + _552) * _516) * ((cbModelParam._m0[1u].w * (_1553 - _1451)) + _1451);
    float _1572 = (((_551 * _503) + _552) * _516) * ((cbModelParam._m0[1u].w * (_1555 - _1453)) + _1453);
    float _1574 = (((_551 * _504) + _552) * _516) * ((cbModelParam._m0[1u].w * (_1557 - _1455)) + _1455);
    float _1577 = fma(_1574, cbSceneParam._m0[89u].z, fma(_1572, cbSceneParam._m0[89u].y, _1570 * cbSceneParam._m0[89u].x));
    float _1580 = fma(_1574, cbSceneParam._m0[90u].z, fma(_1572, cbSceneParam._m0[90u].y, _1570 * cbSceneParam._m0[90u].x));
    float _1583 = fma(_1574, cbSceneParam._m0[91u].z, fma(_1572, cbSceneParam._m0[91u].y, _1570 * cbSceneParam._m0[91u].x));
    float _1618 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1622 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1626 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1630 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1631 = _1618 / _1630;
    float _1632 = _1622 / _1630;
    float _1633 = _1626 / _1630;
    float _1780;
    float _1781;
    float _1782;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1660 = ((uint(_1633 > cbSceneParam._m0[59u].y) + uint(_1633 > cbSceneParam._m0[59u].x)) + uint(_1633 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1661 = _1660 + 43u;
        uint _1669 = _1660 + 44u;
        uint _1677 = _1660 + 45u;
        uint _1685 = _1660 + 46u;
        float _1696 = fma(_1630, cbSceneParam._m0[_1661].w, fma(_1626, cbSceneParam._m0[_1661].z, fma(_1622, cbSceneParam._m0[_1661].y, _1618 * cbSceneParam._m0[_1661].x)));
        float _1700 = fma(_1630, cbSceneParam._m0[_1669].w, fma(_1626, cbSceneParam._m0[_1669].z, fma(_1622, cbSceneParam._m0[_1669].y, _1618 * cbSceneParam._m0[_1669].x)));
        float _1708 = fma(_1630, cbSceneParam._m0[_1685].w, fma(_1626, cbSceneParam._m0[_1685].z, fma(_1622, cbSceneParam._m0[_1685].y, _1618 * cbSceneParam._m0[_1685].x)));
        float _1713 = cbSceneParam._m0[33u].z * _1708;
        float _1715 = cbSceneParam._m0[33u].w * _1708;
        float _1718 = fma(_1630, cbSceneParam._m0[_1677].w, fma(_1626, cbSceneParam._m0[_1677].z, fma(_1622, cbSceneParam._m0[_1677].y, _1618 * cbSceneParam._m0[_1677].x))) / _1708;
        float _1766 = (cbSceneParam._m0[33u].x - sqrt(((_1632 * _1632) + (_1631 * _1631)) + (_1633 * _1633))) * cbSceneParam._m0[33u].y;
        float _4103 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1773 = (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1713 + _1696) / _1708, (_1715 + _1700) / _1708), _1718), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1715 + _1696) / _1708, (_1700 - _1713) / _1708), _1718), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1696 - _1713) / _1708, (_1700 - _1715) / _1708), _1718), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1696 - _1715) / _1708, (_1713 + _1700) / _1708), _1718), 0.0)).x), vec4(0.25)));
        _1780 = 1.0 - (_1773 * cbSceneParam._m0[34u].x);
        _1781 = 1.0 - (_1773 * cbSceneParam._m0[34u].y);
        _1782 = 1.0 - (_1773 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1780 = 1.0;
        _1781 = 1.0;
        _1782 = 1.0;
    }
    float _1846;
    float _1848;
    float _1850;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1834 = fma(_1630, cbSceneParam._m0[63u].w, fma(_1626, cbSceneParam._m0[63u].z, fma(_1622, cbSceneParam._m0[63u].y, _1618 * cbSceneParam._m0[63u].x)));
        float _1835 = fma(_1630, cbSceneParam._m0[60u].w, fma(_1626, cbSceneParam._m0[60u].z, fma(_1622, cbSceneParam._m0[60u].y, _1618 * cbSceneParam._m0[60u].x))) / _1834;
        float _1836 = fma(_1630, cbSceneParam._m0[61u].w, fma(_1626, cbSceneParam._m0[61u].z, fma(_1622, cbSceneParam._m0[61u].y, _1618 * cbSceneParam._m0[61u].x))) / _1834;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1835 >= cbSceneParam._m0[64u].x) && (_1836 >= cbSceneParam._m0[64u].y)) && (_1835 <= cbSceneParam._m0[64u].z)) && (_1836 <= cbSceneParam._m0[64u].w))
        {
            float _1975 = fma(_1630, cbSceneParam._m0[62u].w, fma(_1626, cbSceneParam._m0[62u].z, fma(_1622, cbSceneParam._m0[62u].y, _1618 * cbSceneParam._m0[62u].x))) / _1834;
            float _1979 = isnan(cbSceneParam._m0[41u].w) ? _1975 : (isnan(_1975) ? cbSceneParam._m0[41u].w : max(_1975, cbSceneParam._m0[41u].w));
            float _2022 = (cbSceneParam._m0[33u].x - sqrt(((_1632 * _1632) + (_1631 * _1631)) + (_1633 * _1633))) * cbSceneParam._m0[33u].y;
            float _4119 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
            float _2029 = (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1835, cbSceneParam._m0[33u].w + _1836), _1979), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1835, _1836 - cbSceneParam._m0[33u].z), _1979), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1835 - cbSceneParam._m0[33u].z, _1836 - cbSceneParam._m0[33u].w), _1979), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1835 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1836), _1979), 0.0)).x), vec4(0.25)));
            float _2033 = 1.0 - (_2029 * cbSceneParam._m0[34u].x);
            float _2034 = 1.0 - (_2029 * cbSceneParam._m0[34u].y);
            float _2035 = 1.0 - (_2029 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2035) ? _1782 : (isnan(_1782) ? _2035 : min(_1782, _2035));
            frontier_phi_37_36_ladder_1 = isnan(_2034) ? _1781 : (isnan(_1781) ? _2034 : min(_1781, _2034));
            frontier_phi_37_36_ladder_2 = isnan(_2033) ? _1780 : (isnan(_1780) ? _2033 : min(_1780, _2033));
        }
        else
        {
            frontier_phi_37_36_ladder = _1782;
            frontier_phi_37_36_ladder_1 = _1781;
            frontier_phi_37_36_ladder_2 = _1780;
        }
        _1846 = frontier_phi_37_36_ladder_2;
        _1848 = frontier_phi_37_36_ladder_1;
        _1850 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1846 = _1780;
        _1848 = _1781;
        _1850 = _1782;
    }
    uvec4 _1855 = floatBitsToUint(cbInstanceData._m0[_448 + 5u]);
    uint _1857 = _1855.x * 14u;
    uint _1858 = _1857 + 13u;
    float _1865 = _516 + (-1.0);
    float _1870 = (cbLight._m0[_1858].x * _1865) + 1.0;
    float _1871 = (cbLight._m0[_1858].y * _1865) + 1.0;
    float _1872 = (cbLight._m0[_1858].z * _1865) + 1.0;
    float _1873 = (cbLight._m0[_1858].w * _1865) + 1.0;
    uint _1874 = _1857 + 5u;
    float _1880 = isnan(1.0) ? _1871 : (isnan(_1871) ? 1.0 : min(_1871, 1.0));
    uint _1884 = _1857 + 4u;
    float _1894 = isnan(1.0) ? _1870 : (isnan(_1870) ? 1.0 : min(_1870, 1.0));
    uint _1898 = _1857 | 1u;
    float _1909 = dot(vec3(cbLight._m0[_1857].xyz), vec3(_289, _290, _291));
    float _1912 = dot(vec3(cbLight._m0[_1898].xyz), vec3(_289, _290, _291));
    float _4155 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _4166 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _1917 = (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * 0.3183098733425140380859375;
    float _1919 = (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * 0.3183098733425140380859375;
    float _1926 = ((cbLight._m0[_1874].x * _1880) * _1919) + (((cbLight._m0[_1884].x * _1846) * _1894) * _1917);
    float _1927 = ((_1880 * cbLight._m0[_1874].y) * _1919) + (((cbLight._m0[_1884].y * _1848) * _1894) * _1917);
    float _1928 = ((_1880 * cbLight._m0[_1874].z) * _1919) + (((cbLight._m0[_1884].z * _1850) * _1894) * _1917);
    uvec4 _1932 = floatBitsToUint(cbLight._m0[_1857 + 12u]);
    bool _1934 = _1932.x == 0u;
    float _2036;
    float _2038;
    float _2040;
    if (_1934)
    {
        _2036 = _1926;
        _2038 = _1927;
        _2040 = _1928;
    }
    else
    {
        uint _2044 = _1857 + 6u;
        float _2060 = (dot(vec3(cbLight._m0[_1857 + 2u].xyz), vec3(_289, _290, _291)) * 0.5) + 0.5;
        float _2061 = _2060 * _2060;
        float _4177 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
        float _2062 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _2063 = isnan(1.0) ? _1872 : (isnan(_1872) ? 1.0 : min(_1872, 1.0));
        _2036 = (((cbLight._m0[_2044].x * 0.3183098733425140380859375) * _2062) * _2063) + _1926;
        _2038 = (((cbLight._m0[_2044].y * 0.3183098733425140380859375) * _2062) * _2063) + _1927;
        _2040 = (((cbLight._m0[_2044].z * 0.3183098733425140380859375) * _2062) * _2063) + _1928;
    }
    bool _2043 = _1932.y == 0u;
    float _2098;
    float _2100;
    float _2102;
    if (_2043)
    {
        _2098 = _2036;
        _2100 = _2038;
        _2102 = _2040;
    }
    else
    {
        uint _2271 = _1857 + 7u;
        float _2287 = (dot(vec3(cbLight._m0[_1857 + 3u].xyz), vec3(_289, _290, _291)) * 0.5) + 0.5;
        float _2288 = _2287 * _2287;
        float _4193 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
        float _2289 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _2290 = isnan(1.0) ? _1873 : (isnan(_1873) ? 1.0 : min(_1873, 1.0));
        _2098 = (((cbLight._m0[_2271].x * 0.3183098733425140380859375) * _2289) * _2290) + _2036;
        _2100 = (((cbLight._m0[_2271].y * 0.3183098733425140380859375) * _2289) * _2290) + _2038;
        _2102 = (((cbLight._m0[_2271].z * 0.3183098733425140380859375) * _2289) * _2290) + _2040;
    }
    uint _2105 = _1857 + 8u;
    float _2118 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1857].w)) * _435) * 0.949999988079071044921875);
    float _2119 = _2118 * _2118;
    float _2120 = cbLight._m0[_1857].x + _370;
    float _2121 = cbLight._m0[_1857].y + _371;
    float _2122 = cbLight._m0[_1857].z + _372;
    float _2126 = inversesqrt(dot(vec3(_2120, _2121, _2122), vec3(_2120, _2121, _2122)));
    float _2127 = _2126 * _2120;
    float _2128 = _2126 * _2121;
    float _2129 = _2126 * _2122;
    float _2130 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_1857].xyz));
    float _4209 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2133 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
    float _4220 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _2134 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
    float _2135 = dot(vec3(_289, _290, _291), vec3(_2127, _2128, _2129));
    float _4231 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2138 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
    float _2139 = dot(vec3(cbLight._m0[_1857].xyz), vec3(_2127, _2128, _2129));
    float _4242 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2143 = _2119 * _2119;
    float _2147 = ((_2138 * _2138) * (_2143 + (-1.0))) + 1.0;
    float _2155 = exp2(log2(1.0 - (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0)))) * 5.0);
    float _2156 = 0.959999978542327880859375 - _498;
    float _2158 = 0.959999978542327880859375 - _499;
    float _2159 = 0.959999978542327880859375 - _500;
    float _2166 = 1.0 - _2119;
    float _2177 = (0.5 / (((_2134 * ((_2133 * _2166) + _2119)) + 9.9999999392252902907785028219223e-09) + (((_2134 * _2166) + _2119) * _2133))) * _2133;
    float _4253 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2179 = (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_2143 / ((_2147 * _2147) * 3.141590118408203125));
    uint _2193 = _1857 + 9u;
    float _2204 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1898].w)) * _435) * 0.949999988079071044921875);
    float _2205 = _2204 * _2204;
    float _2206 = cbLight._m0[_1898].x + _370;
    float _2207 = cbLight._m0[_1898].y + _371;
    float _2208 = cbLight._m0[_1898].z + _372;
    float _2212 = inversesqrt(dot(vec3(_2206, _2207, _2208), vec3(_2206, _2207, _2208)));
    float _2213 = _2212 * _2206;
    float _2214 = _2212 * _2207;
    float _2215 = _2212 * _2208;
    float _2216 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_1898].xyz));
    float _4264 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _2219 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
    float _2220 = dot(vec3(_289, _290, _291), vec3(_2213, _2214, _2215));
    float _4275 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2223 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
    float _2224 = dot(vec3(cbLight._m0[_1898].xyz), vec3(_2213, _2214, _2215));
    float _4286 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2228 = _2205 * _2205;
    float _2232 = ((_2223 * _2223) * (_2228 + (-1.0))) + 1.0;
    float _2239 = exp2(log2(1.0 - (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0)))) * 5.0);
    float _2246 = 1.0 - _2205;
    float _2256 = (0.5 / (((_2134 * ((_2219 * _2246) + _2205)) + 9.9999999392252902907785028219223e-09) + (((_2134 * _2246) + _2205) * _2219))) * _2219;
    float _4297 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2258 = (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_2228 / ((_2232 * _2232) * 3.141590118408203125));
    float _2268 = (((((_2239 * _2156) + _501) * cbLight._m0[_2193].x) * _2258) * _1880) + ((((cbLight._m0[_2105].x * _1846) * ((_2155 * _2156) + _501)) * _2179) * _1894);
    float _2269 = (((((_2239 * _2158) + _503) * cbLight._m0[_2193].y) * _2258) * _1880) + ((((cbLight._m0[_2105].y * _1848) * ((_2155 * _2158) + _503)) * _2179) * _1894);
    float _2270 = (((((_2239 * _2159) + _504) * cbLight._m0[_2193].z) * _2258) * _1880) + ((((cbLight._m0[_2105].z * _1850) * ((_2155 * _2159) + _504)) * _2179) * _1894);
    float _2326;
    float _2328;
    float _2330;
    if (_1934)
    {
        _2326 = _2268;
        _2328 = _2269;
        _2330 = _2270;
    }
    else
    {
        uint _2332 = _1857 + 2u;
        uint _2336 = _1857 + 10u;
        float _2350 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2332].w)) * _435) * 0.949999988079071044921875);
        float _2351 = _2350 * _2350;
        float _2352 = cbLight._m0[_2332].x + _370;
        float _2353 = cbLight._m0[_2332].y + _371;
        float _2354 = cbLight._m0[_2332].z + _372;
        float _2358 = inversesqrt(dot(vec3(_2352, _2353, _2354), vec3(_2352, _2353, _2354)));
        float _2359 = _2358 * _2352;
        float _2360 = _2358 * _2353;
        float _2361 = _2358 * _2354;
        float _2362 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_2332].xyz));
        float _4308 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2365 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _2366 = dot(vec3(_289, _290, _291), vec3(_2359, _2360, _2361));
        float _4319 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2369 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _2370 = dot(vec3(cbLight._m0[_2332].xyz), vec3(_2359, _2360, _2361));
        float _4330 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2374 = _2351 * _2351;
        float _2378 = ((_2369 * _2369) * (_2374 + (-1.0))) + 1.0;
        float _2385 = exp2(log2(1.0 - (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0)))) * 5.0);
        float _2392 = 1.0 - _2351;
        float _2402 = (0.5 / (((_2134 * ((_2365 * _2392) + _2351)) + 9.9999999392252902907785028219223e-09) + (((_2134 * _2392) + _2351) * _2365))) * _2365;
        float _4341 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2404 = (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_2374 / ((_2378 * _2378) * 3.141590118408203125));
        float _2405 = isnan(1.0) ? _1872 : (isnan(_1872) ? 1.0 : min(_1872, 1.0));
        _2326 = (((((_2385 * _2156) + _501) * cbLight._m0[_2336].x) * _2404) * _2405) + _2268;
        _2328 = (((((_2385 * _2158) + _503) * cbLight._m0[_2336].y) * _2404) * _2405) + _2269;
        _2330 = (((((_2385 * _2159) + _504) * cbLight._m0[_2336].z) * _2404) * _2405) + _2270;
    }
    float _2436;
    float _2438;
    float _2440;
    if (_2043)
    {
        _2436 = _2326;
        _2438 = _2328;
        _2440 = _2330;
    }
    else
    {
        uint _2447 = _1857 + 3u;
        uint _2451 = _1857 + 11u;
        float _2465 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2447].w)) * _435) * 0.949999988079071044921875);
        float _2466 = _2465 * _2465;
        float _2467 = cbLight._m0[_2447].x + _370;
        float _2468 = cbLight._m0[_2447].y + _371;
        float _2469 = cbLight._m0[_2447].z + _372;
        float _2473 = inversesqrt(dot(vec3(_2467, _2468, _2469), vec3(_2467, _2468, _2469)));
        float _2474 = _2473 * _2467;
        float _2475 = _2473 * _2468;
        float _2476 = _2473 * _2469;
        float _2477 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_2447].xyz));
        float _4357 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2480 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _2481 = dot(vec3(_289, _290, _291), vec3(_2474, _2475, _2476));
        float _4368 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2484 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _2485 = dot(vec3(cbLight._m0[_2447].xyz), vec3(_2474, _2475, _2476));
        float _4379 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2489 = _2466 * _2466;
        float _2493 = ((_2484 * _2484) * (_2489 + (-1.0))) + 1.0;
        float _2500 = exp2(log2(1.0 - (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0)))) * 5.0);
        float _2507 = 1.0 - _2466;
        float _2517 = (0.5 / (((_2134 * ((_2480 * _2507) + _2466)) + 9.9999999392252902907785028219223e-09) + (((_2134 * _2507) + _2466) * _2480))) * _2480;
        float _4390 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2519 = (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * (_2489 / ((_2493 * _2493) * 3.141590118408203125));
        float _2520 = isnan(1.0) ? _1873 : (isnan(_1873) ? 1.0 : min(_1873, 1.0));
        _2436 = (((((_2500 * _2156) + _501) * cbLight._m0[_2451].x) * _2519) * _2520) + _2326;
        _2438 = (((((_2500 * _2158) + _503) * cbLight._m0[_2451].y) * _2519) * _2520) + _2328;
        _2440 = (((((_2500 * _2159) + _504) * cbLight._m0[_2451].z) * _2519) * _2520) + _2330;
    }
    float _2586;
    float _2588;
    float _2590;
    float _2592;
    float _2594;
    float _2596;
    if (_1855.y == 0u)
    {
        uvec4 _2541 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2542 = _2541.x;
        uint _2553 = uint((float(_2541.y) * floor(float(uint(cbSceneParam._m0[85u].y * _392) / _2542))) + floor(float(uint(cbSceneParam._m0[85u].x * _391) / _2542)));
        float _2563 = (log2(_1633 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2564 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        uint _2567 = uint(isnan(14.0) ? _2564 : (isnan(_2564) ? 14.0 : min(_2564, 14.0)));
        uvec4 _2572 = texelFetch(g_lightClusterGridBuffer, int(((_2567 << 2u) + (_2553 << 6u)) >> 2u));
        uint _2573 = _2572.x;
        uint _2574 = _2541.z;
        float _2671;
        float _2673;
        float _2675;
        float _2677;
        float _2679;
        float _2681;
        if (((((1u << ((_2574 >> 4u) & 15u)) + 4294967295u) & _2573) == 0u) || ((_2574 & 240u) == 0u))
        {
            _2671 = 0.0;
            _2673 = 0.0;
            _2675 = 0.0;
            _2677 = 0.0;
            _2679 = 0.0;
            _2681 = 0.0;
        }
        else
        {
            float _2672;
            float _2674;
            float _2676;
            float _2678;
            float _2680;
            float _2682;
            float _2824 = 0.0;
            float _2825 = 0.0;
            float _2826 = 0.0;
            float _2827 = 0.0;
            float _2828 = 0.0;
            float _2829 = 0.0;
            uint _2830 = 0u;
            uint _2839;
            bool _2840;
            for (;;)
            {
                _2839 = texelFetch(g_lightClassification, int((((_2567 << 5u) + (_2553 << 9u)) + (_2830 << 2u)) >> 2u)).x;
                _2840 = _2839 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2840)
                {
                    frontier_phi_71_pred = _2829;
                    frontier_phi_71_pred_1 = _2828;
                    frontier_phi_71_pred_2 = _2827;
                    frontier_phi_71_pred_3 = _2826;
                    frontier_phi_71_pred_4 = _2825;
                    frontier_phi_71_pred_5 = _2824;
                }
                else
                {
                    float _2969;
                    float _2970;
                    float _2971;
                    float _2972;
                    float _2973;
                    float _2974;
                    uint _2975;
                    _2969 = _2824;
                    _2970 = _2825;
                    _2971 = _2826;
                    _2972 = _2827;
                    _2973 = _2828;
                    _2974 = _2829;
                    _2975 = _2839;
                    float _2896;
                    float _2897;
                    float _2898;
                    float _2899;
                    float _2900;
                    float _2901;
                    for (;;)
                    {
                        uint _2979 = uint(findLSB(_2975)) + (_2830 << 5u);
                        uint _2976 = (_2975 + 4294967295u) & _2975;
                        uint _2981 = _2979 * 48u;
                        vec4 _2995 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2981)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 3u)).x));
                        uint _3001 = (_2979 * 48u) + 4u;
                        vec4 _3014 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3001)).x, texelFetch(g_PointLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3001 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3001 + 3u)).x));
                        uint _3020 = (_2979 * 48u) + 8u;
                        vec3 _3031 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3020)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 2u)).x));
                        float _3035 = _2995.x - _1631;
                        float _3036 = _2995.y - _1632;
                        float _3037 = _2995.z - _1633;
                        float _3038 = dot(vec3(_3035, _3036, _3037), vec3(_3035, _3036, _3037));
                        float _3041 = inversesqrt(_3038);
                        float _3042 = _3041 * _3035;
                        float _3043 = _3041 * _3036;
                        float _3044 = _3041 * _3037;
                        float _3045 = dot(vec3(_416, _419, _422), vec3(_3042, _3043, _3044));
                        float _3050 = 1.0 - (_3038 * _2995.w);
                        float _4416 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                        float _3051 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
                        float _3052 = sqrt(_3038) * _3014.w;
                        float _3055 = 1.39999997615814208984375 / (_3052 + 1.39999997615814208984375);
                        float _3056 = _3055 * _3055;
                        float _3059 = ((1.0 - _3056) * _3045) + _3056;
                        float _3062 = _3052 * _3052;
                        float _3066 = ((isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0))) * _3051) / ((_3062 * 0.699999988079071044921875) + 1.0);
                        float _3070 = (-0.0) - _1631;
                        float _3071 = (-0.0) - _1632;
                        float _3072 = (-0.0) - _1633;
                        float _3076 = inversesqrt(dot(vec3(_3070, _3071, _3072), vec3(_3070, _3071, _3072)));
                        float _3077 = _3076 * _3070;
                        float _3078 = _3076 * _3071;
                        float _3079 = _3076 * _3072;
                        float _3086 = exp2(log2(1.0 / ((_3062 * 3.5) + 5.0)) * 0.25);
                        float _3087 = 1.0 - _532;
                        float _3094 = sqrt(1.0 - ((1.0 - (_3087 * _3087)) * (1.0 - (_3086 * _3086))));
                        float _3095 = _3094 * _3094;
                        float _3096 = _3095 * _3095;
                        float _3097 = _3077 + _3042;
                        float _3098 = _3078 + _3043;
                        float _3099 = _3079 + _3044;
                        float _3103 = inversesqrt(dot(vec3(_3097, _3098, _3099), vec3(_3097, _3098, _3099)));
                        float _3107 = dot(vec3(_416, _419, _422), vec3(_3077, _3078, _3079));
                        float _4432 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                        float _3110 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                        float _3111 = dot(vec3(_416, _419, _422), vec3(_3103 * _3097, _3103 * _3098, _3103 * _3099));
                        float _4443 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                        float _3114 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
                        float _3118 = ((_3114 * _3114) * (_3096 + (-1.0))) + 1.0;
                        float _3119 = _3055 * _3095;
                        float _3120 = _3119 * _3119;
                        float _3123 = ((1.0 - _3120) * _3045) + _3120;
                        float _4454 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                        float _3124 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
                        float _3125 = 1.0 - _3095;
                        float _3135 = (0.5 / (((_3124 * ((_3110 * _3125) + _3095)) + 9.9999999392252902907785028219223e-09) + (((_3124 * _3125) + _3095) * _3110))) * _3124;
                        float _4465 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                        float _3146 = (((_3096 * 3.1415927410125732421875) * (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0)))) / ((_3118 * _3118) * ((_3062 * 2.1991131305694580078125) + 3.141590118408203125))) * _3051;
                        _2899 = (_3066 * _3014.x) + _2972;
                        _2900 = (_3066 * _3014.y) + _2973;
                        _2901 = (_3066 * _3014.z) + _2974;
                        _2896 = (_3146 * _3031.x) + _2969;
                        _2897 = (_3146 * _3031.y) + _2970;
                        _2898 = (_3146 * _3031.z) + _2971;
                        if (_2976 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2969 = _2896;
                            _2970 = _2897;
                            _2971 = _2898;
                            _2972 = _2899;
                            _2973 = _2900;
                            _2974 = _2901;
                            _2975 = _2976;
                        }
                    }
                    frontier_phi_71_pred = _2901;
                    frontier_phi_71_pred_1 = _2900;
                    frontier_phi_71_pred_2 = _2899;
                    frontier_phi_71_pred_3 = _2898;
                    frontier_phi_71_pred_4 = _2897;
                    frontier_phi_71_pred_5 = _2896;
                }
                _2682 = frontier_phi_71_pred;
                _2680 = frontier_phi_71_pred_1;
                _2678 = frontier_phi_71_pred_2;
                _2676 = frontier_phi_71_pred_3;
                _2674 = frontier_phi_71_pred_4;
                _2672 = frontier_phi_71_pred_5;
                uint _2831 = _2830 + 1u;
                if (_2831 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2824 = _2672;
                    _2825 = _2674;
                    _2826 = _2676;
                    _2827 = _2678;
                    _2828 = _2680;
                    _2829 = _2682;
                    _2830 = _2831;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2671 = _2672;
            _2673 = _2674;
            _2675 = _2676;
            _2677 = _2678;
            _2679 = _2680;
            _2681 = _2682;
        }
        uvec4 _2685 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2686 = _2685.z;
        uint _2688 = (_2686 >> 8u) & 15u;
        float _2792;
        float _2794;
        float _2796;
        float _2798;
        float _2800;
        float _2802;
        if (((4294967295u << _2688) & _2573) == 0u)
        {
            _2792 = _2671;
            _2794 = _2673;
            _2796 = _2675;
            _2798 = _2677;
            _2800 = _2679;
            _2802 = _2681;
        }
        else
        {
            float _2817 = inversesqrt(dot(vec3(_1631, _1632, _1633), vec3(_1631, _1632, _1633)));
            float _2818 = _2817 * _1631;
            float _2819 = _2817 * _1632;
            float _2820 = _2817 * _1633;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2688 < ((_2686 >> 12u) & 15u))
            {
                float _2793;
                float _2795;
                float _2797;
                float _2799;
                float _2801;
                float _2803;
                float _2952 = _2671;
                float _2953 = _2673;
                float _2954 = _2675;
                float _2955 = _2677;
                float _2956 = _2679;
                float _2957 = _2681;
                uint _2958 = _2688;
                uint _2967;
                bool _2968;
                for (;;)
                {
                    _2967 = texelFetch(g_lightClassification, int((((_2567 << 5u) + (_2553 << 9u)) + (_2958 << 2u)) >> 2u)).x;
                    _2968 = _2967 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2968)
                    {
                        frontier_phi_82_pred = _2957;
                        frontier_phi_82_pred_1 = _2956;
                        frontier_phi_82_pred_2 = _2955;
                        frontier_phi_82_pred_3 = _2954;
                        frontier_phi_82_pred_4 = _2953;
                        frontier_phi_82_pred_5 = _2952;
                    }
                    else
                    {
                        float _3160;
                        float _3161;
                        float _3162;
                        float _3163;
                        float _3164;
                        float _3165;
                        float _3456;
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3460;
                        float _3461;
                        float _3173 = _2952;
                        float _3174 = _2953;
                        float _3175 = _2954;
                        float _3176 = _2955;
                        float _3177 = _2956;
                        float _3178 = _2957;
                        uint _3179 = _2967;
                        uint _3180;
                        vec4 _3205;
                        float _3206;
                        vec4 _3221;
                        vec3 _3233;
                        vec4 _3249;
                        vec4 _3265;
                        float _3312;
                        bool _3313;
                        for (;;)
                        {
                            uint _3190 = ((_2958 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3179));
                            _3180 = (_3179 + 4294967295u) & _3179;
                            uint _3192 = _3190 * 40u;
                            _3205 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3192)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 3u)).x));
                            _3206 = _3205.w;
                            uint _3208 = (_3190 * 40u) + 4u;
                            _3221 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3208)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 3u)).x));
                            uint _3223 = (_3190 * 40u) + 8u;
                            _3233 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3223)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 2u)).x));
                            uint _3236 = (_3190 * 40u) + 16u;
                            _3249 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3236)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 3u)).x));
                            uint _3252 = (_3190 * 40u) + 20u;
                            _3265 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3252)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 3u)).x));
                            uint _3268 = (_3190 * 40u) + 24u;
                            vec4 _3281 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3268)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 3u)).x));
                            uint _3287 = (_3190 * 40u) + 28u;
                            vec4 _3300 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3287)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 3u)).x));
                            _3312 = fma(_1633, _3300.z, fma(_1632, _3300.y, _3300.x * _1631)) + _3300.w;
                            _3313 = !((fma(_1633, _3281.z, fma(_1632, _3281.y, _3281.x * _1631)) + _3281.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3313)
                            {
                                float _3340 = _3205.x - _1631;
                                float _3341 = _3205.y - _1632;
                                float _3342 = _3205.z - _1633;
                                float _3343 = dot(vec3(_3340, _3341, _3342), vec3(_3340, _3341, _3342));
                                float _3346 = inversesqrt(_3343);
                                float _3347 = _3346 * _3340;
                                float _3348 = _3346 * _3341;
                                float _3349 = _3346 * _3342;
                                float _3353 = 1.0 - (_3343 / (_3206 * _3206));
                                float _4476 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                                float _3354 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
                                float _3358 = sqrt(_3343) * _3221.w;
                                float _3360 = 1.39999997615814208984375 / (_3358 + 1.39999997615814208984375);
                                float _3361 = _3360 * _3360;
                                float _3364 = ((1.0 - _3361) * dot(vec3(_3347, _3348, _3349), vec3(_416, _419, _422))) + _3361;
                                float _3367 = _3358 * _3358;
                                float _3371 = (fma(_1633, _3249.z, fma(_1632, _3249.y, _3249.x * _1631)) + _3249.w) / _3312;
                                float _3372 = (fma(_1633, _3265.z, fma(_1632, _3265.y, _3265.x * _1631)) + _3265.w) / _3312;
                                float _3376 = 1.0 - dot(vec2(_3371, _3372), vec2(_3371, _3372));
                                float _4492 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                                float _3377 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
                                float _3378 = _3377 * (((isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0))) * _3354) / ((_3367 * 0.699999988079071044921875) + 1.0));
                                float _3390 = exp2(log2(1.0 / ((_3367 * 3.5) + 5.0)) * 0.25);
                                float _3391 = 1.0 - _532;
                                float _3398 = sqrt(1.0 - ((1.0 - (_3391 * _3391)) * (1.0 - (_3390 * _3390))));
                                float _3399 = _3398 * _3398;
                                float _3400 = _3399 * _3399;
                                float _3401 = _3347 - _2818;
                                float _3402 = _3348 - _2819;
                                float _3403 = _3349 - _2820;
                                float _3407 = inversesqrt(dot(vec3(_3401, _3402, _3403), vec3(_3401, _3402, _3403)));
                                float _3411 = dot(vec3(_416, _419, _422), vec3((-0.0) - _2818, (-0.0) - _2819, (-0.0) - _2820));
                                float _4503 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                                float _3414 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
                                float _3415 = dot(vec3(_416, _419, _422), vec3(_3407 * _3401, _3407 * _3402, _3407 * _3403));
                                float _4514 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                                float _3418 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
                                float _3422 = ((_3418 * _3418) * (_3400 + (-1.0))) + 1.0;
                                float _3423 = _3360 * _3399;
                                float _3424 = _3423 * _3423;
                                float _3430 = ((1.0 - _3424) * dot(vec3(_416, _419, _422), vec3(_3347, _3348, _3349))) + _3424;
                                float _4525 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                                float _3431 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
                                float _3432 = 1.0 - _3399;
                                float _3442 = (0.5 / (((_3431 * ((_3414 * _3432) + _3399)) + 9.9999999392252902907785028219223e-09) + (((_3431 * _3432) + _3399) * _3414))) * _3431;
                                float _4536 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                                float _3452 = (_3377 * _3354) * (((_3400 * 3.1415927410125732421875) * (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0)))) / ((_3422 * _3422) * ((_3367 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3378 * _3221.z;
                                frontier_phi_88_pred_1 = _3378 * _3221.y;
                                frontier_phi_88_pred_2 = _3378 * _3221.x;
                                frontier_phi_88_pred_3 = _3452 * _3233.z;
                                frontier_phi_88_pred_4 = _3452 * _3233.y;
                                frontier_phi_88_pred_5 = _3452 * _3233.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3461 = frontier_phi_88_pred;
                            _3460 = frontier_phi_88_pred_1;
                            _3459 = frontier_phi_88_pred_2;
                            _3458 = frontier_phi_88_pred_3;
                            _3457 = frontier_phi_88_pred_4;
                            _3456 = frontier_phi_88_pred_5;
                            _3163 = _3459 + _3176;
                            _3164 = _3460 + _3177;
                            _3165 = _3461 + _3178;
                            _3160 = _3456 + _3173;
                            _3161 = _3457 + _3174;
                            _3162 = _3458 + _3175;
                            if (_3180 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3173 = _3160;
                                _3174 = _3161;
                                _3175 = _3162;
                                _3176 = _3163;
                                _3177 = _3164;
                                _3178 = _3165;
                                _3179 = _3180;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3165;
                        frontier_phi_82_pred_1 = _3164;
                        frontier_phi_82_pred_2 = _3163;
                        frontier_phi_82_pred_3 = _3162;
                        frontier_phi_82_pred_4 = _3161;
                        frontier_phi_82_pred_5 = _3160;
                    }
                    _2803 = frontier_phi_82_pred;
                    _2801 = frontier_phi_82_pred_1;
                    _2799 = frontier_phi_82_pred_2;
                    _2797 = frontier_phi_82_pred_3;
                    _2795 = frontier_phi_82_pred_4;
                    _2793 = frontier_phi_82_pred_5;
                    uint _2959 = _2958 + 1u;
                    if (_2959 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2952 = _2793;
                        _2953 = _2795;
                        _2954 = _2797;
                        _2955 = _2799;
                        _2956 = _2801;
                        _2957 = _2803;
                        _2958 = _2959;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2799;
                frontier_phi_63_64_ladder_1 = _2803;
                frontier_phi_63_64_ladder_2 = _2801;
                frontier_phi_63_64_ladder_3 = _2797;
                frontier_phi_63_64_ladder_4 = _2795;
                frontier_phi_63_64_ladder_5 = _2793;
            }
            else
            {
                frontier_phi_63_64_ladder = _2677;
                frontier_phi_63_64_ladder_1 = _2681;
                frontier_phi_63_64_ladder_2 = _2679;
                frontier_phi_63_64_ladder_3 = _2675;
                frontier_phi_63_64_ladder_4 = _2673;
                frontier_phi_63_64_ladder_5 = _2671;
            }
            _2792 = frontier_phi_63_64_ladder_5;
            _2794 = frontier_phi_63_64_ladder_4;
            _2796 = frontier_phi_63_64_ladder_3;
            _2798 = frontier_phi_63_64_ladder;
            _2800 = frontier_phi_63_64_ladder_2;
            _2802 = frontier_phi_63_64_ladder_1;
        }
        float _2807 = isnan(1.0) ? _516 : (isnan(_516) ? 1.0 : min(_516, 1.0));
        _2586 = (_2807 * _2798) + _2098;
        _2588 = (_2807 * _2800) + _2100;
        _2590 = (_2807 * _2802) + _2102;
        _2592 = ((_2792 * _501) * _2807) + _2436;
        _2594 = ((_2794 * _503) * _2807) + _2438;
        _2596 = ((_2796 * _504) * _2807) + _2440;
    }
    else
    {
        _2586 = _2098;
        _2588 = _2100;
        _2590 = _2102;
        _2592 = _2436;
        _2594 = _2438;
        _2596 = _2440;
    }
    vec4 _2602 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4552 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _4563 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _4574 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _2626 = (((isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * (_2586 + ((isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0))) * _516))) + ((_2592 + ((isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0))) * _1358)) * cbPerFrame._m0[3u].x)) + (_2602.x * cbMtdParam._m0[3u].x);
    float _2628 = ((_2602.y * cbMtdParam._m0[3u].x) + ((_2594 + ((isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))) * _1358)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0))) * (_2588 + ((isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0))) * _516)));
    float _2630 = ((_2602.z * cbMtdParam._m0[3u].x) + ((_2596 + ((isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))) * _1358)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * (_2590 + ((isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0))) * _516)));
    float _2631 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
    float _2632 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
    float _2633 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
    uint _2634 = _448 + 6u;
    float _2642 = _391 / cbSceneParam._m0[86u].x;
    float _2643 = _392 / cbSceneParam._m0[86u].y;
    vec4 _2657 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2642, _2643, (log2((isnan(cbSceneParam._m0[77u].w) ? _311 : (isnan(_311) ? cbSceneParam._m0[77u].w : min(_311, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2659 = _2657.x;
    float _2660 = _2657.y;
    float _2661 = _2657.z;
    float _2662 = _2657.w;
    float _2734;
    float _2736;
    float _2738;
    float _2740;
    if (_311 > cbSceneParam._m0[78u].w)
    {
        float _2696 = isnan(_311) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _311 : min(cbSceneParam._m0[80u].w, _311));
        float _2697 = _2696 / _311;
        float _2708 = _2697 * _363;
        float _2709 = _364 * _2697;
        float _2710 = (-0.0) - _2709;
        float _2712 = _2697 * _365;
        float _2714 = (cbSceneParam._m0[77u].w * _2710) / _2696;
        float _2715 = _2714 + cbSceneParam._m0[79u].w;
        float _2716 = cbSceneParam._m0[79u].w - _2709;
        float _2722 = sqrt(((_2708 * _2708) + (_2709 * _2709)) + (_2712 * _2712));
        float _2725 = (1.0 - (cbSceneParam._m0[77u].w / _2696)) * _2722;
        float _2730 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2732 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2909;
        if (abs((_2710 - _2714) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2909 = ((((_2715 > 0.0) ? exp2(_2730 * _2715) : (2.0 - exp2(_2732 * _2715))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2725;
        }
        else
        {
            float _2853 = 1.0 / cbSceneParam._m0[80u].x;
            float _2854 = isnan(_2716) ? _2715 : (isnan(_2715) ? _2716 : max(_2715, _2716));
            float _2855 = isnan(_2716) ? _2715 : (isnan(_2715) ? _2716 : min(_2715, _2716));
            float _2864 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : min(_2854, 0.0));
            float _2865 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : min(_2855, 0.0));
            _2909 = ((abs(_2722 / _2710) * cbSceneParam._m0[80u].y) * ((((_2864 - _2865) * 2.0) - ((exp2(_2730 * (isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0)))) - exp2(_2730 * (isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0))))) * _2853)) - ((exp2(_2732 * _2864) - exp2(_2732 * _2865)) * _2853))) + (_2725 * cbSceneParam._m0[80u].z);
        }
        vec4 _2911 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2642, _2643, 1.0), 0.0);
        float _2920 = exp2((_2909 * (-1.44269502162933349609375)) * (1.0 - _2911.w));
        float _2921 = log2(_2920);
        float _2937 = log2(_2662);
        _2734 = (exp2(_2937 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2921 * cbSceneParam._m0[78u].x)) * _2911.x) / cbSceneParam._m0[78u].x)) + _2659;
        _2736 = (exp2(_2937 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2921 * cbSceneParam._m0[78u].y)) * _2911.y) / cbSceneParam._m0[78u].y)) + _2660;
        _2738 = (exp2(_2937 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2921 * cbSceneParam._m0[78u].z)) * _2911.z) / cbSceneParam._m0[78u].z)) + _2661;
        _2740 = _2920 * _2662;
    }
    else
    {
        _2734 = _2659;
        _2736 = _2660;
        _2738 = _2661;
        _2740 = _2662;
    }
    bool _2947;
    vec4 _2750;
    vec4 _2772;
    float _2774;
    float _2778;
    float _2779;
    float _2780;
    float _2781;
    bool _2791;
    for (;;)
    {
        _2750 = cbMatDynParam._m0[0u];
        float _2752 = roundEven(_2750.y);
        bool _2753 = _2752 == 3.0;
        float _2754 = log2(_2740);
        float _2761 = exp2(_2754 * cbSceneParam._m0[78u].x) * _2631;
        float _2762 = exp2(_2754 * cbSceneParam._m0[78u].y) * _2632;
        float _2763 = exp2(_2754 * cbSceneParam._m0[78u].z) * _2633;
        float _2770 = _379 + (-0.5);
        _2772 = cbMtdParam._m0[1u];
        _2774 = _2772.y * _2770;
        float _2777 = (_2752 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2778 = _2777 * (_2753 ? _2761 : (_2761 + (cbSceneParam._m0[72u].w * _2734)));
        _2779 = _2777 * (_2753 ? _2762 : (_2762 + (cbSceneParam._m0[72u].w * _2736)));
        _2780 = _2777 * (_2753 ? _2763 : (_2763 + (cbSceneParam._m0[72u].w * _2738)));
        _2781 = _2770 * 0.999000012874603271484375;
        _2791 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2791)
        {
            if ((cbInstanceData._m0[_448 + 7u].x + _2781) < 0.5)
            {
                _2947 = true;
                break;
            }
        }
        uint _2888 = _450 + uint(_2750.w);
        if ((cbInstanceData._m0[_2888].w < 1.0) && ((cbInstanceData._m0[_2888].w + _2781) < 0.5))
        {
            _2947 = true;
            break;
        }
        if ((_2774 + _243) < _2772.x)
        {
            _2947 = true;
            break;
        }
        _2947 = false;
        break;
    }
    float _3151;
    if (_2947)
    {
        discard_state = true;
        _3151 = 0.0;
    }
    else
    {
        _3151 = cbInstanceData._m0[_2634].w;
    }
    SV_Target.x = _2778;
    SV_Target.y = _2779;
    SV_Target.z = _2780;
    SV_Target.w = _3151;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2634].w;
    discard_exit();
}


