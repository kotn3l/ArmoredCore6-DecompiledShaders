#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M0_M1_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M0_M1_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M0_M1_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _892;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _231 = texture(sampler2D(C_AMSN_M0_M1_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _237 = _231.x * cbMtdParam._m0[9u].x;
    float _238 = _231.y * cbMtdParam._m0[9u].y;
    float _239 = _231.z * cbMtdParam._m0[9u].z;
    vec4 _251 = texture(sampler2D(C_AMSN_M0_M1_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _253 = _251.x;
    vec4 _265 = texture(sampler2D(C_AMSN_M0_M1_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _269 = _265.z;
    float _273 = (_265.x * 2.0) + (-1.0);
    float _275 = (_265.y * 2.0) + (-1.0);
    float _276 = dot(vec2(_273, _275), vec2(_273, _275));
    float _3247 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _282 = sqrt(1.0 - (isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0))));
    float _285 = fma(_282, _201 * NORMAL.x, fma(_275, _208 * TANGENT.x, (_194 * _186) * _273));
    float _288 = fma(_282, _201 * NORMAL.y, fma(_275, _208 * TANGENT.y, (_194 * _187) * _273));
    float _291 = fma(_282, _201 * NORMAL.z, fma(_275, _208 * TANGENT.z, (_194 * _188) * _273));
    float _295 = inversesqrt(dot(vec3(_285, _288, _291), vec3(_285, _288, _291)));
    float _296 = _295 * _285;
    float _297 = _295 * _288;
    float _298 = _295 * _291;
    float _3258 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _299 = isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0));
    float _3269 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3280 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3291 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3302 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _303 = isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0));
    float _319 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _361 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _371 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _361);
    float _372 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _361);
    float _373 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _361);
    float _377 = inversesqrt(dot(vec3(_371, _372, _373), vec3(_371, _372, _373)));
    float _378 = _371 * _377;
    float _379 = _372 * _377;
    float _380 = _373 * _377;
    float _386 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _387 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _389 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _391 = _389.w;
    float _412 = fma(_298, cbSceneParam._m0[5u].z, fma(_297, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _296));
    float _415 = fma(_298, cbSceneParam._m0[6u].z, fma(_297, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _296));
    float _418 = fma(_298, cbSceneParam._m0[7u].z, fma(_297, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _296));
    vec4 _420 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _431 = (((_420.y - _299) + (_420.w * _299)) * cbMtdParam._m0[3u].x) + _299;
    uint _444 = uint(roundEven(NORMAL.w)) * 13u;
    uint _447 = (_444 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _453 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0)))) * cbInstanceData._m0[_447].x;
    float _454 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0)))) * cbInstanceData._m0[_447].y;
    float _455 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0)))) * cbInstanceData._m0[_447].z;
    float _3313 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _456 = isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0));
    float _3324 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _457 = isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0));
    float _3335 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _458 = isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0));
    vec4 _459 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _464 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _475 = (((_464.x - _303) + (_464.w * _303)) * cbMtdParam._m0[3u].x) + _303;
    float _488 = (cbMtdParam._m0[3u].x * (((_456 * _391) - _456) + _459.x)) + _456;
    float _489 = (cbMtdParam._m0[3u].x * (((_457 * _391) - _457) + _459.y)) + _457;
    float _490 = (cbMtdParam._m0[3u].x * (((_458 * _391) - _458) + _459.z)) + _458;
    float _491 = 1.0 - _475;
    float _492 = _491 * _488;
    float _493 = _491 * _489;
    float _494 = _491 * _490;
    float _499 = (_488 + (-0.039999999105930328369140625)) * _475;
    float _500 = (_489 + (-0.039999999105930328369140625)) * _475;
    float _501 = (_490 + (-0.039999999105930328369140625)) * _475;
    float _502 = _499 + 0.039999999105930328369140625;
    float _504 = _500 + 0.039999999105930328369140625;
    float _505 = _501 + 0.039999999105930328369140625;
    vec4 _514 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _386, cbSceneParam._m0[86u].y * _387));
    float _517 = _514.x * TEXCOORD_4;
    float _518 = dot(vec3(_296, _297, _298), vec3(_378, _379, _380));
    float _521 = _518 * 2.0;
    float _525 = (_521 * _296) - _378;
    float _526 = (_521 * _297) - _379;
    float _527 = (_521 * _298) - _380;
    float _531 = abs(dot(vec3(_378, _379, _380), vec3(_296, _297, _298)));
    float _3346 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _533 = sqrt(_431);
    float _546 = exp2((_533 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_533 * 3.0));
    float _552 = (1.0 - _546) * ((_533 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _553 = _546 * _533;
    float _581 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _585 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _589 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _891;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _616 = fma(_589, cbModelParam._m0[26u].z, fma(_585, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _581));
        float _620 = fma(_589, cbModelParam._m0[27u].z, fma(_585, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _581));
        float _624 = fma(_589, cbModelParam._m0[28u].z, fma(_585, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _581));
        float _649 = _581 + _296;
        float _650 = _585 + _297;
        float _651 = _589 + _298;
        float _661 = fma(_651, cbModelParam._m0[26u].z, fma(_650, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _649)) - _616;
        float _662 = fma(_651, cbModelParam._m0[27u].z, fma(_650, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _649)) - _620;
        float _663 = fma(_651, cbModelParam._m0[28u].z, fma(_650, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _649)) - _624;
        float _667 = inversesqrt(dot(vec3(_661, _662, _663), vec3(_661, _662, _663)));
        float _680 = ((_667 * _661) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_616 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _681 = ((_667 * _662) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_620 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _682 = ((_667 * _663) / cbModelParam._m0[34u].z) + ((((((_624 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _685 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_680, _681, _682), 0.0);
        vec4 _692 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_680, _681, _682), 0.0);
        vec4 _699 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_680, _681, _682), 0.0);
        vec4 _706 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_680, _681, _682), 0.0);
        float _719 = exp2((_685.w + (-0.5)) * 20.0) * 2.0;
        float _720 = _719 * (_685.x + (-0.5));
        float _721 = _719 * (_685.y + (-0.5));
        float _722 = _719 * (_685.z + (-0.5));
        float _729 = exp2((_692.w + (-0.5)) * 20.0) * 2.0;
        float _730 = _729 * (_692.x + (-0.5));
        float _731 = _729 * (_692.y + (-0.5));
        float _732 = _729 * (_692.z + (-0.5));
        float _739 = exp2((_699.w + (-0.5)) * 20.0) * 2.0;
        float _740 = _739 * (_699.x + (-0.5));
        float _741 = _739 * (_699.y + (-0.5));
        float _742 = _739 * (_699.z + (-0.5));
        float _749 = exp2((_706.w + (-0.5)) * 20.0) * 2.0;
        float _750 = _749 * (_706.x + (-0.5));
        float _751 = _749 * (_706.y + (-0.5));
        float _752 = _749 * (_706.z + (-0.5));
        float _753 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _754 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _755 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _756 = _720 * 0.5;
        float _757 = _730 * 0.5;
        float _758 = _740 * 0.5;
        float _759 = dot(vec3(_756, _757, _758), vec3(_756, _757, _758));
        float _764 = (_759 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_759);
        float _773 = (dot(vec3(_296, _297, _298), vec3(_764 * _756, _764 * _757, _764 * _758)) + 1.0) * 0.5;
        float _3372 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _783 = sqrt(((_757 * _757) + (_756 * _756)) + (_758 * _758)) / (_753 + 9.9999997473787516355514526367188e-06);
        float _3383 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _784 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
        float _785 = _784 * 2.0;
        float _789 = (1.0 - _784) / (_784 + 1.0);
        float _3394 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _790 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
        float _799 = ((((1.0 - _790) * (_785 + 2.0)) * exp2(log2(isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0))) * (_785 + 1.0))) + _790) * _753;
        float _800 = _721 * 0.5;
        float _801 = _731 * 0.5;
        float _802 = _741 * 0.5;
        float _803 = dot(vec3(_800, _801, _802), vec3(_800, _801, _802));
        float _808 = (_803 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_803);
        float _816 = (dot(vec3(_296, _297, _298), vec3(_808 * _800, _808 * _801, _808 * _802)) + 1.0) * 0.5;
        float _3405 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _825 = sqrt(((_801 * _801) + (_800 * _800)) + (_802 * _802)) / (_754 + 9.9999997473787516355514526367188e-06);
        float _3416 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _826 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
        float _827 = _826 * 2.0;
        float _831 = (1.0 - _826) / (_826 + 1.0);
        float _3427 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _832 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
        float _841 = ((((1.0 - _832) * (_827 + 2.0)) * exp2(log2(isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0))) * (_827 + 1.0))) + _832) * _754;
        float _842 = _722 * 0.5;
        float _843 = _732 * 0.5;
        float _844 = _742 * 0.5;
        float _845 = dot(vec3(_842, _843, _844), vec3(_842, _843, _844));
        float _850 = (_845 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_845);
        float _858 = (dot(vec3(_296, _297, _298), vec3(_850 * _842, _850 * _843, _850 * _844)) + 1.0) * 0.5;
        float _3438 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _867 = sqrt(((_843 * _843) + (_842 * _842)) + (_844 * _844)) / (_755 + 9.9999997473787516355514526367188e-06);
        float _3449 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _868 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
        float _869 = _868 * 2.0;
        float _873 = (1.0 - _868) / (_868 + 1.0);
        float _3460 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _874 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
        float _883 = ((((1.0 - _874) * (_869 + 2.0)) * exp2(log2(isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0))) * (_869 + 1.0))) + _874) * _755;
        _891 = _722;
        _893 = _721;
        _894 = _720;
        _895 = _732;
        _896 = _731;
        _897 = _730;
        _898 = _742;
        _899 = _741;
        _900 = _740;
        _901 = _755;
        _902 = _754;
        _903 = _753;
        _904 = cbModelParam._m0[36u].z * (isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0)));
        _905 = cbModelParam._m0[36u].z * (isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0)));
        _906 = cbModelParam._m0[36u].z * (isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0)));
    }
    else
    {
        _891 = _892;
        _893 = _892;
        _894 = _892;
        _895 = _892;
        _896 = _892;
        _897 = _892;
        _898 = _892;
        _899 = _892;
        _900 = _892;
        _901 = _892;
        _902 = _892;
        _903 = _892;
        _904 = 0.0;
        _905 = 0.0;
        _906 = 0.0;
    }
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _932 = fma(_589, cbModelParam._m0[30u].z, fma(_585, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _581));
        float _936 = fma(_589, cbModelParam._m0[31u].z, fma(_585, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _581));
        float _940 = fma(_589, cbModelParam._m0[32u].z, fma(_585, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _581));
        float _963 = _581 + _296;
        float _964 = _585 + _297;
        float _965 = _589 + _298;
        float _975 = fma(_965, cbModelParam._m0[30u].z, fma(_964, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _963)) - _932;
        float _976 = fma(_965, cbModelParam._m0[31u].z, fma(_964, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _963)) - _936;
        float _977 = fma(_965, cbModelParam._m0[32u].z, fma(_964, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _963)) - _940;
        float _981 = inversesqrt(dot(vec3(_975, _976, _977), vec3(_975, _976, _977)));
        float _994 = ((_981 * _975) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_932 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _995 = ((_981 * _976) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_936 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _996 = ((_981 * _977) / cbModelParam._m0[35u].z) + ((((((_940 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        float _1031 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_998.x + (-0.5));
        float _1033 = _1031 * (_998.y + (-0.5));
        float _1034 = _1031 * (_998.z + (-0.5));
        float _1041 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_1005.x + (-0.5));
        float _1043 = _1041 * (_1005.y + (-0.5));
        float _1044 = _1041 * (_1005.z + (-0.5));
        float _1051 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1012.x + (-0.5));
        float _1053 = _1051 * (_1012.y + (-0.5));
        float _1054 = _1051 * (_1012.z + (-0.5));
        float _1061 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1019.x + (-0.5));
        float _1063 = _1061 * (_1019.y + (-0.5));
        float _1064 = _1061 * (_1019.z + (-0.5));
        float _1065 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1066 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1067 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1068 = _1032 * 0.5;
        float _1069 = _1042 * 0.5;
        float _1070 = _1052 * 0.5;
        float _1071 = dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070));
        float _1076 = (_1071 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1071);
        float _1084 = (dot(vec3(_296, _297, _298), vec3(_1076 * _1068, _1076 * _1069, _1076 * _1070)) + 1.0) * 0.5;
        float _3501 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1093 = sqrt(((_1069 * _1069) + (_1068 * _1068)) + (_1070 * _1070)) / (_1065 + 9.9999997473787516355514526367188e-06);
        float _3512 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
        float _1095 = _1094 * 2.0;
        float _1099 = (1.0 - _1094) / (_1094 + 1.0);
        float _3523 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _1109 = ((((1.0 - _1100) * (_1095 + 2.0)) * exp2(log2(isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0))) * (_1095 + 1.0))) + _1100) * _1065;
        float _1110 = _1033 * 0.5;
        float _1111 = _1043 * 0.5;
        float _1112 = _1053 * 0.5;
        float _1113 = dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112));
        float _1118 = (_1113 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1113);
        float _1126 = (dot(vec3(_296, _297, _298), vec3(_1118 * _1110, _1118 * _1111, _1118 * _1112)) + 1.0) * 0.5;
        float _3534 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1135 = sqrt(((_1111 * _1111) + (_1110 * _1110)) + (_1112 * _1112)) / (_1066 + 9.9999997473787516355514526367188e-06);
        float _3545 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _1137 = _1136 * 2.0;
        float _1141 = (1.0 - _1136) / (_1136 + 1.0);
        float _3556 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _1151 = ((((1.0 - _1142) * (_1137 + 2.0)) * exp2(log2(isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))) * (_1137 + 1.0))) + _1142) * _1066;
        float _1152 = _1034 * 0.5;
        float _1153 = _1044 * 0.5;
        float _1154 = _1054 * 0.5;
        float _1155 = dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154));
        float _1160 = (_1155 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1155);
        float _1168 = (dot(vec3(_296, _297, _298), vec3(_1160 * _1152, _1160 * _1153, _1160 * _1154)) + 1.0) * 0.5;
        float _3567 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1177 = sqrt(((_1153 * _1153) + (_1152 * _1152)) + (_1154 * _1154)) / (_1067 + 9.9999997473787516355514526367188e-06);
        float _3578 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _1179 = _1178 * 2.0;
        float _1183 = (1.0 - _1178) / (_1178 + 1.0);
        float _3589 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _1193 = ((((1.0 - _1184) * (_1179 + 2.0)) * exp2(log2(isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0))) * (_1179 + 1.0))) + _1184) * _1067;
        _1201 = _1034;
        _1202 = _1033;
        _1203 = _1032;
        _1204 = _1044;
        _1205 = _1043;
        _1206 = _1042;
        _1207 = _1054;
        _1208 = _1053;
        _1209 = _1052;
        _1210 = _1067;
        _1211 = _1066;
        _1212 = _1065;
        _1213 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)));
        _1214 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)));
        _1215 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)));
    }
    else
    {
        _1201 = _892;
        _1202 = _892;
        _1203 = _892;
        _1204 = _892;
        _1205 = _892;
        _1206 = _892;
        _1207 = _892;
        _1208 = _892;
        _1209 = _892;
        _1210 = _892;
        _1211 = _892;
        _1212 = _892;
        _1213 = 0.0;
        _1214 = 0.0;
        _1215 = 0.0;
    }
    float _1225 = (cbModelParam._m0[1u].x * (_1213 - _904)) + _904;
    float _1226 = (cbModelParam._m0[1u].x * (_1214 - _905)) + _905;
    float _1227 = (cbModelParam._m0[1u].x * (_1215 - _906)) + _906;
    float _1248 = fma(_1227, cbSceneParam._m0[89u].z, fma(_1226, cbSceneParam._m0[89u].y, _1225 * cbSceneParam._m0[89u].x));
    float _1251 = fma(_1227, cbSceneParam._m0[90u].z, fma(_1226, cbSceneParam._m0[90u].y, _1225 * cbSceneParam._m0[90u].x));
    float _1254 = fma(_1227, cbSceneParam._m0[91u].z, fma(_1226, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1225));
    float _1269 = _525 * 0.5;
    float _1270 = _526 * 0.5;
    float _1271 = _527 * 0.5;
    float _1272 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_1203, _1206, _1209, _1212));
    float _1275 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_1202, _1205, _1208, _1211));
    float _1278 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_1201, _1204, _1207, _1210));
    float _1312;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1285 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_891, _895, _898, _901));
        float _1289 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_893, _896, _899, _902));
        float _1293 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_894, _897, _900, _903));
        float _1300 = dot(vec4(cbModelParam._m0[39u]), vec4(_1269, _1270, _1271, 1.0));
        _1312 = dot(vec3(isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)), isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)), isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1300) ? 0.0 : (isnan(0.0) ? _1300 : max(0.0, _1300))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1312 = 1.0;
    }
    float _1323;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1314 = dot(vec4(cbModelParam._m0[40u]), vec4(_1269, _1270, _1271, 1.0));
        _1323 = dot(vec3(isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)), isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)), isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1314) ? 0.0 : (isnan(0.0) ? _1314 : max(0.0, _1314))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1323 = 1.0;
    }
    float _1327 = (_1323 * cbModelParam._m0[1u].x) + (_1312 * (1.0 - cbModelParam._m0[1u].x));
    float _1337 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _431);
    float _1338 = isnan(_1337) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1337 : min(cbModelParam._m0[25u].z, _1337));
    float _1420;
    float _1422;
    float _1424;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1387 = fma(_589, cbModelParam._m0[13u].z, fma(_585, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _581)) + cbModelParam._m0[13u].w;
        float _1391 = fma(_589, cbModelParam._m0[14u].z, fma(_585, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _581)) + cbModelParam._m0[14u].w;
        float _1395 = fma(_589, cbModelParam._m0[15u].z, fma(_585, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _581)) + cbModelParam._m0[15u].w;
        float _1398 = fma(_527, cbModelParam._m0[13u].z, fma(_526, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _525));
        float _1401 = fma(_527, cbModelParam._m0[14u].z, fma(_526, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _525));
        float _1404 = fma(_527, cbModelParam._m0[15u].z, fma(_526, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _525));
        float _1432;
        if (_1398 > 0.0)
        {
            _1432 = abs((1.0 - _1387) / _1398);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1398 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1387 + 1.0) / _1398);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1432 = frontier_phi_14_12_ladder;
        }
        float _1640;
        if (_1401 > 0.0)
        {
            _1640 = abs((1.0 - _1391) / _1401);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1401 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1391 + 1.0) / _1401);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1640 = frontier_phi_23_19_ladder;
        }
        float _1894;
        if (_1404 > 0.0)
        {
            _1894 = abs((1.0 - _1395) / _1404);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1404 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1395 + 1.0) / _1404);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1894 = frontier_phi_35_30_ladder;
        }
        float _1896 = isnan(_1640) ? _1432 : (isnan(_1432) ? _1640 : min(_1432, _1640));
        float _1897 = isnan(_1894) ? _1896 : (isnan(_1896) ? _1894 : min(_1896, _1894));
        float _1901 = (_1897 * _1398) + _1387;
        float _1902 = (_1897 * _1401) + _1391;
        float _1903 = (_1897 * _1404) + _1395;
        float _1904 = _1897 * 9.9999997473787516355514526367188e-05;
        float _1906 = (-1.0) - _1904;
        float _1908 = _1904 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1903 > _1908) || ((_1903 < _1906) || ((_1902 > _1908) || ((_1902 < _1906) || ((_1901 < _1906) || (_1901 > _1908))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2031 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1903, cbModelParam._m0[9u].z, fma(_1902, cbModelParam._m0[9u].y, _1901 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1903, cbModelParam._m0[10u].z, fma(_1902, cbModelParam._m0[10u].y, _1901 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1903, cbModelParam._m0[11u].z, fma(_1902, cbModelParam._m0[11u].y, _1901 * cbModelParam._m0[11u].x))), _1338);
            frontier_phi_13_35_ladder = _2031.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2031.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2031.x * cbModelParam._m0[1u].y;
        }
        _1420 = frontier_phi_13_35_ladder_2;
        _1422 = frontier_phi_13_35_ladder_1;
        _1424 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1408 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_525, _526, _527), _1338);
        _1420 = _1408.x * cbModelParam._m0[1u].y;
        _1422 = _1408.y * cbModelParam._m0[1u].y;
        _1424 = _1408.z * cbModelParam._m0[1u].y;
    }
    float _1428 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _431);
    float _1429 = isnan(_1428) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1428 : min(cbModelParam._m0[25u].w, _1428));
    float _1522;
    float _1524;
    float _1526;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1486 = fma(_589, cbModelParam._m0[21u].z, fma(_585, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _581)) + cbModelParam._m0[21u].w;
        float _1490 = fma(_589, cbModelParam._m0[22u].z, fma(_585, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _581)) + cbModelParam._m0[22u].w;
        float _1494 = fma(_589, cbModelParam._m0[23u].z, fma(_585, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _581)) + cbModelParam._m0[23u].w;
        float _1497 = fma(_527, cbModelParam._m0[21u].z, fma(_526, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _525));
        float _1500 = fma(_527, cbModelParam._m0[22u].z, fma(_526, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _525));
        float _1503 = fma(_527, cbModelParam._m0[23u].z, fma(_526, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _525));
        float _1645;
        if (_1497 > 0.0)
        {
            _1645 = abs((1.0 - _1486) / _1497);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1497 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1486 + 1.0) / _1497);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1645 = frontier_phi_25_21_ladder;
        }
        float _1921;
        if (_1500 > 0.0)
        {
            _1921 = abs((1.0 - _1490) / _1500);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1500 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1490 + 1.0) / _1500);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1921 = frontier_phi_37_32_ladder;
        }
        float _2134;
        if (_1503 > 0.0)
        {
            _2134 = abs((1.0 - _1494) / _1503);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1503 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1494 + 1.0) / _1503);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2134 = frontier_phi_46_43_ladder;
        }
        float _2136 = isnan(_1921) ? _1645 : (isnan(_1645) ? _1921 : min(_1645, _1921));
        float _2137 = isnan(_2134) ? _2136 : (isnan(_2136) ? _2134 : min(_2136, _2134));
        float _2141 = (_2137 * _1497) + _1486;
        float _2142 = (_2137 * _1500) + _1490;
        float _2143 = (_2137 * _1503) + _1494;
        float _2144 = _2137 * 9.9999997473787516355514526367188e-05;
        float _2145 = (-1.0) - _2144;
        float _2147 = _2144 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2143 > _2147) || ((_2143 < _2145) || ((_2142 > _2147) || ((_2142 < _2145) || ((_2141 < _2145) || (_2141 > _2147))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2360 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2143, cbModelParam._m0[17u].z, fma(_2142, cbModelParam._m0[17u].y, _2141 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2143, cbModelParam._m0[18u].z, fma(_2142, cbModelParam._m0[18u].y, _2141 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2143, cbModelParam._m0[19u].z, fma(_2142, cbModelParam._m0[19u].y, _2141 * cbModelParam._m0[19u].x))), _1429);
            frontier_phi_22_46_ladder = _2360.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2360.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2360.x * cbModelParam._m0[1u].z;
        }
        _1522 = frontier_phi_22_46_ladder_2;
        _1524 = frontier_phi_22_46_ladder_1;
        _1526 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1506 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_525, _526, _527), _1429);
        _1522 = _1506.x * cbModelParam._m0[1u].z;
        _1524 = _1506.y * cbModelParam._m0[1u].z;
        _1526 = _1506.z * cbModelParam._m0[1u].z;
    }
    float _1539 = (((_552 * _502) + _553) * _517) * ((cbModelParam._m0[1u].w * (_1522 - _1420)) + _1420);
    float _1541 = (((_552 * _504) + _553) * _517) * ((cbModelParam._m0[1u].w * (_1524 - _1422)) + _1422);
    float _1543 = (((_552 * _505) + _553) * _517) * ((cbModelParam._m0[1u].w * (_1526 - _1424)) + _1424);
    float _1546 = fma(_1543, cbSceneParam._m0[89u].z, fma(_1541, cbSceneParam._m0[89u].y, _1539 * cbSceneParam._m0[89u].x));
    float _1549 = fma(_1543, cbSceneParam._m0[90u].z, fma(_1541, cbSceneParam._m0[90u].y, _1539 * cbSceneParam._m0[90u].x));
    float _1552 = fma(_1543, cbSceneParam._m0[91u].z, fma(_1541, cbSceneParam._m0[91u].y, _1539 * cbSceneParam._m0[91u].x));
    uvec4 _1562 = floatBitsToUint(cbInstanceData._m0[_444 + 5u]);
    uint _1564 = _1562.x * 14u;
    uint _1565 = _1564 + 13u;
    float _1572 = _517 + (-1.0);
    float _1577 = (cbLight._m0[_1565].x * _1572) + 1.0;
    float _1578 = (cbLight._m0[_1565].y * _1572) + 1.0;
    float _1579 = (cbLight._m0[_1565].z * _1572) + 1.0;
    float _1580 = (cbLight._m0[_1565].w * _1572) + 1.0;
    uint _1581 = _1564 + 5u;
    float _1587 = isnan(1.0) ? _1578 : (isnan(_1578) ? 1.0 : min(_1578, 1.0));
    uint _1591 = _1564 + 4u;
    float _1598 = isnan(1.0) ? _1577 : (isnan(_1577) ? 1.0 : min(_1577, 1.0));
    uint _1602 = _1564 | 1u;
    float _1613 = dot(vec3(cbLight._m0[_1564].xyz), vec3(_296, _297, _298));
    float _1616 = dot(vec3(cbLight._m0[_1602].xyz), vec3(_296, _297, _298));
    float _3725 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
    float _3736 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
    float _1621 = (isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * 0.3183098733425140380859375;
    float _1623 = (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * 0.3183098733425140380859375;
    float _1630 = ((cbLight._m0[_1581].x * _1587) * _1623) + ((cbLight._m0[_1591].x * _1598) * _1621);
    float _1631 = ((_1587 * cbLight._m0[_1581].y) * _1623) + ((_1598 * cbLight._m0[_1591].y) * _1621);
    float _1632 = ((_1587 * cbLight._m0[_1581].z) * _1623) + ((_1598 * cbLight._m0[_1591].z) * _1621);
    uvec4 _1637 = floatBitsToUint(cbLight._m0[_1564 + 12u]);
    bool _1639 = _1637.x == 0u;
    float _1650;
    float _1652;
    float _1654;
    if (_1639)
    {
        _1650 = _1630;
        _1652 = _1631;
        _1654 = _1632;
    }
    else
    {
        uint _1658 = _1564 + 6u;
        float _1674 = (dot(vec3(cbLight._m0[_1564 + 2u].xyz), vec3(_296, _297, _298)) * 0.5) + 0.5;
        float _1675 = _1674 * _1674;
        float _3747 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1676 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1677 = isnan(1.0) ? _1579 : (isnan(_1579) ? 1.0 : min(_1579, 1.0));
        _1650 = (((cbLight._m0[_1658].x * 0.3183098733425140380859375) * _1676) * _1677) + _1630;
        _1652 = (((cbLight._m0[_1658].y * 0.3183098733425140380859375) * _1676) * _1677) + _1631;
        _1654 = (((cbLight._m0[_1658].z * 0.3183098733425140380859375) * _1676) * _1677) + _1632;
    }
    bool _1657 = _1637.y == 0u;
    float _1695;
    float _1697;
    float _1699;
    if (_1657)
    {
        _1695 = _1650;
        _1697 = _1652;
        _1699 = _1654;
    }
    else
    {
        uint _1865 = _1564 + 7u;
        float _1881 = (dot(vec3(cbLight._m0[_1564 + 3u].xyz), vec3(_296, _297, _298)) * 0.5) + 0.5;
        float _1882 = _1881 * _1881;
        float _3763 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
        float _1883 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _1884 = isnan(1.0) ? _1580 : (isnan(_1580) ? 1.0 : min(_1580, 1.0));
        _1695 = (((cbLight._m0[_1865].x * 0.3183098733425140380859375) * _1883) * _1884) + _1650;
        _1697 = (((cbLight._m0[_1865].y * 0.3183098733425140380859375) * _1883) * _1884) + _1652;
        _1699 = (((cbLight._m0[_1865].z * 0.3183098733425140380859375) * _1883) * _1884) + _1654;
    }
    uint _1702 = _1564 + 8u;
    float _1715 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1564].w)) * _431) * 0.949999988079071044921875);
    float _1716 = _1715 * _1715;
    float _1717 = cbLight._m0[_1564].x + _378;
    float _1718 = cbLight._m0[_1564].y + _379;
    float _1719 = cbLight._m0[_1564].z + _380;
    float _1723 = inversesqrt(dot(vec3(_1717, _1718, _1719), vec3(_1717, _1718, _1719)));
    float _1724 = _1723 * _1717;
    float _1725 = _1723 * _1718;
    float _1726 = _1723 * _1719;
    float _1727 = dot(vec3(_296, _297, _298), vec3(cbLight._m0[_1564].xyz));
    float _3779 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
    float _1730 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _3790 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _1731 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
    float _1732 = dot(vec3(_296, _297, _298), vec3(_1724, _1725, _1726));
    float _3801 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
    float _1735 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _1736 = dot(vec3(cbLight._m0[_1564].xyz), vec3(_1724, _1725, _1726));
    float _3812 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
    float _1740 = _1716 * _1716;
    float _1744 = ((_1735 * _1735) * (_1740 + (-1.0))) + 1.0;
    float _1752 = exp2(log2(1.0 - (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0)))) * 5.0);
    float _1753 = 0.959999978542327880859375 - _499;
    float _1755 = 0.959999978542327880859375 - _500;
    float _1756 = 0.959999978542327880859375 - _501;
    float _1763 = 1.0 - _1716;
    float _1774 = (0.5 / (((_1731 * ((_1730 * _1763) + _1716)) + 9.9999999392252902907785028219223e-09) + (((_1731 * _1763) + _1716) * _1730))) * _1730;
    float _3823 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
    float _1776 = (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * (_1740 / ((_1744 * _1744) * 3.141590118408203125));
    uint _1787 = _1564 + 9u;
    float _1798 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1602].w)) * _431) * 0.949999988079071044921875);
    float _1799 = _1798 * _1798;
    float _1800 = cbLight._m0[_1602].x + _378;
    float _1801 = cbLight._m0[_1602].y + _379;
    float _1802 = cbLight._m0[_1602].z + _380;
    float _1806 = inversesqrt(dot(vec3(_1800, _1801, _1802), vec3(_1800, _1801, _1802)));
    float _1807 = _1806 * _1800;
    float _1808 = _1806 * _1801;
    float _1809 = _1806 * _1802;
    float _1810 = dot(vec3(_296, _297, _298), vec3(cbLight._m0[_1602].xyz));
    float _3834 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _1813 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _1814 = dot(vec3(_296, _297, _298), vec3(_1807, _1808, _1809));
    float _3845 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1817 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    float _1818 = dot(vec3(cbLight._m0[_1602].xyz), vec3(_1807, _1808, _1809));
    float _3856 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _1822 = _1799 * _1799;
    float _1826 = ((_1817 * _1817) * (_1822 + (-1.0))) + 1.0;
    float _1833 = exp2(log2(1.0 - (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0)))) * 5.0);
    float _1840 = 1.0 - _1799;
    float _1850 = (0.5 / (((_1731 * ((_1813 * _1840) + _1799)) + 9.9999999392252902907785028219223e-09) + (((_1731 * _1840) + _1799) * _1813))) * _1813;
    float _3867 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
    float _1852 = (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * (_1822 / ((_1826 * _1826) * 3.141590118408203125));
    float _1862 = (((((_1833 * _1753) + _502) * cbLight._m0[_1787].x) * _1852) * _1587) + (((((_1752 * _1753) + _502) * cbLight._m0[_1702].x) * _1776) * _1598);
    float _1863 = (((((_1833 * _1755) + _504) * cbLight._m0[_1787].y) * _1852) * _1587) + (((((_1752 * _1755) + _504) * cbLight._m0[_1702].y) * _1776) * _1598);
    float _1864 = (((((_1833 * _1756) + _505) * cbLight._m0[_1787].z) * _1852) * _1587) + (((((_1752 * _1756) + _505) * cbLight._m0[_1702].z) * _1776) * _1598);
    float _1926;
    float _1928;
    float _1930;
    if (_1639)
    {
        _1926 = _1862;
        _1928 = _1863;
        _1930 = _1864;
    }
    else
    {
        uint _1932 = _1564 + 2u;
        uint _1936 = _1564 + 10u;
        float _1950 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1932].w)) * _431) * 0.949999988079071044921875);
        float _1951 = _1950 * _1950;
        float _1952 = cbLight._m0[_1932].x + _378;
        float _1953 = cbLight._m0[_1932].y + _379;
        float _1954 = cbLight._m0[_1932].z + _380;
        float _1958 = inversesqrt(dot(vec3(_1952, _1953, _1954), vec3(_1952, _1953, _1954)));
        float _1959 = _1958 * _1952;
        float _1960 = _1958 * _1953;
        float _1961 = _1958 * _1954;
        float _1962 = dot(vec3(_296, _297, _298), vec3(cbLight._m0[_1932].xyz));
        float _3878 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
        float _1965 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1966 = dot(vec3(_296, _297, _298), vec3(_1959, _1960, _1961));
        float _3889 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
        float _1969 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1970 = dot(vec3(cbLight._m0[_1932].xyz), vec3(_1959, _1960, _1961));
        float _3900 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1974 = _1951 * _1951;
        float _1978 = ((_1969 * _1969) * (_1974 + (-1.0))) + 1.0;
        float _1985 = exp2(log2(1.0 - (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) * 5.0);
        float _1992 = 1.0 - _1951;
        float _2002 = (0.5 / (((_1731 * ((_1965 * _1992) + _1951)) + 9.9999999392252902907785028219223e-09) + (((_1731 * _1992) + _1951) * _1965))) * _1965;
        float _3911 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
        float _2004 = (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * (_1974 / ((_1978 * _1978) * 3.141590118408203125));
        float _2005 = isnan(1.0) ? _1579 : (isnan(_1579) ? 1.0 : min(_1579, 1.0));
        _1926 = (((((_1985 * _1753) + _502) * cbLight._m0[_1936].x) * _2004) * _2005) + _1862;
        _1928 = (((((_1985 * _1755) + _504) * cbLight._m0[_1936].y) * _2004) * _2005) + _1863;
        _1930 = (((((_1985 * _1756) + _505) * cbLight._m0[_1936].z) * _2004) * _2005) + _1864;
    }
    float _2040;
    float _2042;
    float _2044;
    if (_1657)
    {
        _2040 = _1926;
        _2042 = _1928;
        _2044 = _1930;
    }
    else
    {
        uint _2051 = _1564 + 3u;
        uint _2055 = _1564 + 11u;
        float _2069 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2051].w)) * _431) * 0.949999988079071044921875);
        float _2070 = _2069 * _2069;
        float _2071 = cbLight._m0[_2051].x + _378;
        float _2072 = cbLight._m0[_2051].y + _379;
        float _2073 = cbLight._m0[_2051].z + _380;
        float _2077 = inversesqrt(dot(vec3(_2071, _2072, _2073), vec3(_2071, _2072, _2073)));
        float _2078 = _2077 * _2071;
        float _2079 = _2077 * _2072;
        float _2080 = _2077 * _2073;
        float _2081 = dot(vec3(_296, _297, _298), vec3(cbLight._m0[_2051].xyz));
        float _3927 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
        float _2084 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _2085 = dot(vec3(_296, _297, _298), vec3(_2078, _2079, _2080));
        float _3938 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
        float _2088 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _2089 = dot(vec3(cbLight._m0[_2051].xyz), vec3(_2078, _2079, _2080));
        float _3949 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
        float _2093 = _2070 * _2070;
        float _2097 = ((_2088 * _2088) * (_2093 + (-1.0))) + 1.0;
        float _2104 = exp2(log2(1.0 - (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0)))) * 5.0);
        float _2111 = 1.0 - _2070;
        float _2121 = (0.5 / (((_1731 * ((_2084 * _2111) + _2070)) + 9.9999999392252902907785028219223e-09) + (((_1731 * _2111) + _2070) * _2084))) * _2084;
        float _3960 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        float _2123 = (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_2093 / ((_2097 * _2097) * 3.141590118408203125));
        float _2124 = isnan(1.0) ? _1580 : (isnan(_1580) ? 1.0 : min(_1580, 1.0));
        _2040 = (((((_2104 * _1753) + _502) * cbLight._m0[_2055].x) * _2123) * _2124) + _1926;
        _2042 = (((((_2104 * _1755) + _504) * cbLight._m0[_2055].y) * _2123) * _2124) + _1928;
        _2044 = (((((_2104 * _1756) + _505) * cbLight._m0[_2055].z) * _2123) * _2124) + _1930;
    }
    float _2259;
    float _2261;
    float _2263;
    float _2265;
    float _2267;
    float _2269;
    if (_1562.y == 0u)
    {
        float _2199 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2200 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2199;
        float _2201 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2199;
        float _2202 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2199;
        uvec4 _2214 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2215 = _2214.x;
        uint _2226 = uint((float(_2214.y) * floor(float(uint(cbSceneParam._m0[85u].y * _387) / _2215))) + floor(float(uint(cbSceneParam._m0[85u].x * _386) / _2215)));
        float _2236 = (log2(_2202 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2237 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
        uint _2240 = uint(isnan(14.0) ? _2237 : (isnan(_2237) ? 14.0 : min(_2237, 14.0)));
        uvec4 _2245 = texelFetch(g_lightClusterGridBuffer, int(((_2240 << 2u) + (_2226 << 6u)) >> 2u));
        uint _2246 = _2245.x;
        uint _2247 = _2214.z;
        float _2365;
        float _2367;
        float _2369;
        float _2371;
        float _2373;
        float _2375;
        if (((((1u << ((_2247 >> 4u) & 15u)) + 4294967295u) & _2246) == 0u) || ((_2247 & 240u) == 0u))
        {
            _2365 = 0.0;
            _2367 = 0.0;
            _2369 = 0.0;
            _2371 = 0.0;
            _2373 = 0.0;
            _2375 = 0.0;
        }
        else
        {
            float _2366;
            float _2368;
            float _2370;
            float _2372;
            float _2374;
            float _2376;
            float _2510 = 0.0;
            float _2511 = 0.0;
            float _2512 = 0.0;
            float _2513 = 0.0;
            float _2514 = 0.0;
            float _2515 = 0.0;
            uint _2516 = 0u;
            uint _2525;
            bool _2526;
            for (;;)
            {
                _2525 = texelFetch(g_lightClassification, int((((_2240 << 5u) + (_2226 << 9u)) + (_2516 << 2u)) >> 2u)).x;
                _2526 = _2525 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2526)
                {
                    frontier_phi_61_pred = _2510;
                    frontier_phi_61_pred_1 = _2515;
                    frontier_phi_61_pred_2 = _2514;
                    frontier_phi_61_pred_3 = _2513;
                    frontier_phi_61_pred_4 = _2512;
                    frontier_phi_61_pred_5 = _2511;
                }
                else
                {
                    float _2634;
                    float _2635;
                    float _2636;
                    float _2637;
                    float _2638;
                    float _2639;
                    uint _2640;
                    _2634 = _2510;
                    _2635 = _2511;
                    _2636 = _2512;
                    _2637 = _2513;
                    _2638 = _2514;
                    _2639 = _2515;
                    _2640 = _2525;
                    float _2566;
                    float _2567;
                    float _2568;
                    float _2569;
                    float _2570;
                    float _2571;
                    for (;;)
                    {
                        uint _2644 = uint(findLSB(_2640)) + (_2516 << 5u);
                        uint _2641 = (_2640 + 4294967295u) & _2640;
                        uint _2646 = _2644 * 48u;
                        vec4 _2660 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2646)).x, texelFetch(g_PointLightRenderingBuffer, int(_2646 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2646 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2646 + 3u)).x));
                        uint _2666 = (_2644 * 48u) + 4u;
                        vec4 _2679 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2666)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 3u)).x));
                        uint _2685 = (_2644 * 48u) + 8u;
                        vec3 _2696 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2685)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 2u)).x));
                        float _2700 = _2660.x - _2200;
                        float _2701 = _2660.y - _2201;
                        float _2702 = _2660.z - _2202;
                        float _2703 = dot(vec3(_2700, _2701, _2702), vec3(_2700, _2701, _2702));
                        float _2706 = inversesqrt(_2703);
                        float _2707 = _2706 * _2700;
                        float _2708 = _2706 * _2701;
                        float _2709 = _2706 * _2702;
                        float _2710 = dot(vec3(_412, _415, _418), vec3(_2707, _2708, _2709));
                        float _2715 = 1.0 - (_2703 * _2660.w);
                        float _3986 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
                        float _2716 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
                        float _2717 = sqrt(_2703) * _2679.w;
                        float _2720 = 1.39999997615814208984375 / (_2717 + 1.39999997615814208984375);
                        float _2721 = _2720 * _2720;
                        float _2724 = ((1.0 - _2721) * _2710) + _2721;
                        float _2727 = _2717 * _2717;
                        float _2731 = ((isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0))) * _2716) / ((_2727 * 0.699999988079071044921875) + 1.0);
                        float _2735 = (-0.0) - _2200;
                        float _2736 = (-0.0) - _2201;
                        float _2737 = (-0.0) - _2202;
                        float _2741 = inversesqrt(dot(vec3(_2735, _2736, _2737), vec3(_2735, _2736, _2737)));
                        float _2742 = _2741 * _2735;
                        float _2743 = _2741 * _2736;
                        float _2744 = _2741 * _2737;
                        float _2752 = exp2(log2(1.0 / ((_2727 * 3.5) + 5.0)) * 0.25);
                        float _2753 = 1.0 - _533;
                        float _2760 = sqrt(1.0 - ((1.0 - (_2753 * _2753)) * (1.0 - (_2752 * _2752))));
                        float _2761 = _2760 * _2760;
                        float _2762 = _2761 * _2761;
                        float _2763 = _2742 + _2707;
                        float _2764 = _2743 + _2708;
                        float _2765 = _2744 + _2709;
                        float _2769 = inversesqrt(dot(vec3(_2763, _2764, _2765), vec3(_2763, _2764, _2765)));
                        float _2773 = dot(vec3(_412, _415, _418), vec3(_2742, _2743, _2744));
                        float _4002 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
                        float _2776 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
                        float _2777 = dot(vec3(_412, _415, _418), vec3(_2769 * _2763, _2769 * _2764, _2769 * _2765));
                        float _4013 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
                        float _2780 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
                        float _2784 = ((_2780 * _2780) * (_2762 + (-1.0))) + 1.0;
                        float _2785 = _2720 * _2761;
                        float _2786 = _2785 * _2785;
                        float _2789 = ((1.0 - _2786) * _2710) + _2786;
                        float _4024 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
                        float _2790 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
                        float _2791 = 1.0 - _2761;
                        float _2801 = (0.5 / (((_2790 * ((_2776 * _2791) + _2761)) + 9.9999999392252902907785028219223e-09) + (((_2790 * _2791) + _2761) * _2776))) * _2790;
                        float _4035 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
                        float _2812 = (((_2762 * 3.1415927410125732421875) * (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0)))) / ((_2784 * _2784) * ((_2727 * 2.1991131305694580078125) + 3.141590118408203125))) * _2716;
                        _2569 = (_2731 * _2679.x) + _2637;
                        _2570 = (_2731 * _2679.y) + _2638;
                        _2571 = (_2731 * _2679.z) + _2639;
                        _2566 = (_2812 * _2696.x) + _2634;
                        _2567 = (_2812 * _2696.y) + _2635;
                        _2568 = (_2812 * _2696.z) + _2636;
                        if (_2641 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2634 = _2566;
                            _2635 = _2567;
                            _2636 = _2568;
                            _2637 = _2569;
                            _2638 = _2570;
                            _2639 = _2571;
                            _2640 = _2641;
                        }
                    }
                    frontier_phi_61_pred = _2566;
                    frontier_phi_61_pred_1 = _2571;
                    frontier_phi_61_pred_2 = _2570;
                    frontier_phi_61_pred_3 = _2569;
                    frontier_phi_61_pred_4 = _2568;
                    frontier_phi_61_pred_5 = _2567;
                }
                _2366 = frontier_phi_61_pred;
                _2376 = frontier_phi_61_pred_1;
                _2374 = frontier_phi_61_pred_2;
                _2372 = frontier_phi_61_pred_3;
                _2370 = frontier_phi_61_pred_4;
                _2368 = frontier_phi_61_pred_5;
                uint _2517 = _2516 + 1u;
                if (_2517 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2510 = _2366;
                    _2511 = _2368;
                    _2512 = _2370;
                    _2513 = _2372;
                    _2514 = _2374;
                    _2515 = _2376;
                    _2516 = _2517;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2365 = _2366;
            _2367 = _2368;
            _2369 = _2370;
            _2371 = _2372;
            _2373 = _2374;
            _2375 = _2376;
        }
        uvec4 _2379 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2380 = _2379.z;
        uint _2382 = (_2380 >> 8u) & 15u;
        float _2478;
        float _2480;
        float _2482;
        float _2484;
        float _2486;
        float _2488;
        if (((4294967295u << _2382) & _2246) == 0u)
        {
            _2478 = _2365;
            _2480 = _2367;
            _2482 = _2369;
            _2484 = _2371;
            _2486 = _2373;
            _2488 = _2375;
        }
        else
        {
            float _2503 = inversesqrt(dot(vec3(_2200, _2201, _2202), vec3(_2200, _2201, _2202)));
            float _2504 = _2503 * _2200;
            float _2505 = _2503 * _2201;
            float _2506 = _2503 * _2202;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2382 < ((_2380 >> 12u) & 15u))
            {
                float _2479;
                float _2481;
                float _2483;
                float _2485;
                float _2487;
                float _2489;
                float _2617 = _2365;
                float _2618 = _2367;
                float _2619 = _2369;
                float _2620 = _2371;
                float _2621 = _2373;
                float _2622 = _2375;
                uint _2623 = _2382;
                uint _2632;
                bool _2633;
                for (;;)
                {
                    _2632 = texelFetch(g_lightClassification, int((((_2240 << 5u) + (_2226 << 9u)) + (_2623 << 2u)) >> 2u)).x;
                    _2633 = _2632 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2633)
                    {
                        frontier_phi_67_pred = _2620;
                        frontier_phi_67_pred_1 = _2621;
                        frontier_phi_67_pred_2 = _2622;
                        frontier_phi_67_pred_3 = _2619;
                        frontier_phi_67_pred_4 = _2618;
                        frontier_phi_67_pred_5 = _2617;
                    }
                    else
                    {
                        float _2817;
                        float _2818;
                        float _2819;
                        float _2820;
                        float _2821;
                        float _2822;
                        float _3113;
                        float _3114;
                        float _3115;
                        float _3116;
                        float _3117;
                        float _3118;
                        float _2830 = _2617;
                        float _2831 = _2618;
                        float _2832 = _2619;
                        float _2833 = _2620;
                        float _2834 = _2621;
                        float _2835 = _2622;
                        uint _2836 = _2632;
                        uint _2837;
                        vec4 _2862;
                        float _2863;
                        vec4 _2878;
                        vec3 _2890;
                        vec4 _2906;
                        vec4 _2922;
                        float _2969;
                        bool _2970;
                        for (;;)
                        {
                            uint _2847 = ((_2623 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2836));
                            _2837 = (_2836 + 4294967295u) & _2836;
                            uint _2849 = _2847 * 40u;
                            _2862 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2849)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 3u)).x));
                            _2863 = _2862.w;
                            uint _2865 = (_2847 * 40u) + 4u;
                            _2878 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2865)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 3u)).x));
                            uint _2880 = (_2847 * 40u) + 8u;
                            _2890 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2880)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 2u)).x));
                            uint _2893 = (_2847 * 40u) + 16u;
                            _2906 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2893)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 3u)).x));
                            uint _2909 = (_2847 * 40u) + 20u;
                            _2922 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2909)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 3u)).x));
                            uint _2925 = (_2847 * 40u) + 24u;
                            vec4 _2938 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2925)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 3u)).x));
                            uint _2944 = (_2847 * 40u) + 28u;
                            vec4 _2957 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2944)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 3u)).x));
                            _2969 = fma(_2202, _2957.z, fma(_2201, _2957.y, _2957.x * _2200)) + _2957.w;
                            _2970 = !((fma(_2202, _2938.z, fma(_2201, _2938.y, _2938.x * _2200)) + _2938.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2970)
                            {
                                float _2997 = _2862.x - _2200;
                                float _2998 = _2862.y - _2201;
                                float _2999 = _2862.z - _2202;
                                float _3000 = dot(vec3(_2997, _2998, _2999), vec3(_2997, _2998, _2999));
                                float _3003 = inversesqrt(_3000);
                                float _3004 = _3003 * _2997;
                                float _3005 = _3003 * _2998;
                                float _3006 = _3003 * _2999;
                                float _3010 = 1.0 - (_3000 / (_2863 * _2863));
                                float _4046 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
                                float _3011 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
                                float _3015 = sqrt(_3000) * _2878.w;
                                float _3017 = 1.39999997615814208984375 / (_3015 + 1.39999997615814208984375);
                                float _3018 = _3017 * _3017;
                                float _3021 = ((1.0 - _3018) * dot(vec3(_3004, _3005, _3006), vec3(_412, _415, _418))) + _3018;
                                float _3024 = _3015 * _3015;
                                float _3028 = (fma(_2202, _2906.z, fma(_2201, _2906.y, _2906.x * _2200)) + _2906.w) / _2969;
                                float _3029 = (fma(_2202, _2922.z, fma(_2201, _2922.y, _2922.x * _2200)) + _2922.w) / _2969;
                                float _3033 = 1.0 - dot(vec2(_3028, _3029), vec2(_3028, _3029));
                                float _4062 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                                float _3034 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
                                float _3035 = _3034 * (((isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0))) * _3011) / ((_3024 * 0.699999988079071044921875) + 1.0));
                                float _3047 = exp2(log2(1.0 / ((_3024 * 3.5) + 5.0)) * 0.25);
                                float _3048 = 1.0 - _533;
                                float _3055 = sqrt(1.0 - ((1.0 - (_3048 * _3048)) * (1.0 - (_3047 * _3047))));
                                float _3056 = _3055 * _3055;
                                float _3057 = _3056 * _3056;
                                float _3058 = _3004 - _2504;
                                float _3059 = _3005 - _2505;
                                float _3060 = _3006 - _2506;
                                float _3064 = inversesqrt(dot(vec3(_3058, _3059, _3060), vec3(_3058, _3059, _3060)));
                                float _3068 = dot(vec3(_412, _415, _418), vec3((-0.0) - _2504, (-0.0) - _2505, (-0.0) - _2506));
                                float _4073 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                                float _3071 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
                                float _3072 = dot(vec3(_412, _415, _418), vec3(_3064 * _3058, _3064 * _3059, _3064 * _3060));
                                float _4084 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                                float _3075 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
                                float _3079 = ((_3075 * _3075) * (_3057 + (-1.0))) + 1.0;
                                float _3080 = _3017 * _3056;
                                float _3081 = _3080 * _3080;
                                float _3087 = ((1.0 - _3081) * dot(vec3(_412, _415, _418), vec3(_3004, _3005, _3006))) + _3081;
                                float _4095 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                                float _3088 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
                                float _3089 = 1.0 - _3056;
                                float _3099 = (0.5 / (((_3088 * ((_3071 * _3089) + _3056)) + 9.9999999392252902907785028219223e-09) + (((_3088 * _3089) + _3056) * _3071))) * _3088;
                                float _4106 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                                float _3109 = (_3034 * _3011) * (((_3057 * 3.1415927410125732421875) * (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0)))) / ((_3079 * _3079) * ((_3024 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3109 * _2890.x;
                                frontier_phi_73_pred_1 = _3109 * _2890.y;
                                frontier_phi_73_pred_2 = _3035 * _2878.z;
                                frontier_phi_73_pred_3 = _3035 * _2878.y;
                                frontier_phi_73_pred_4 = _3035 * _2878.x;
                                frontier_phi_73_pred_5 = _3109 * _2890.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3113 = frontier_phi_73_pred;
                            _3114 = frontier_phi_73_pred_1;
                            _3118 = frontier_phi_73_pred_2;
                            _3117 = frontier_phi_73_pred_3;
                            _3116 = frontier_phi_73_pred_4;
                            _3115 = frontier_phi_73_pred_5;
                            _2820 = _3116 + _2833;
                            _2821 = _3117 + _2834;
                            _2822 = _3118 + _2835;
                            _2817 = _3113 + _2830;
                            _2818 = _3114 + _2831;
                            _2819 = _3115 + _2832;
                            if (_2837 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2830 = _2817;
                                _2831 = _2818;
                                _2832 = _2819;
                                _2833 = _2820;
                                _2834 = _2821;
                                _2835 = _2822;
                                _2836 = _2837;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2820;
                        frontier_phi_67_pred_1 = _2821;
                        frontier_phi_67_pred_2 = _2822;
                        frontier_phi_67_pred_3 = _2819;
                        frontier_phi_67_pred_4 = _2818;
                        frontier_phi_67_pred_5 = _2817;
                    }
                    _2485 = frontier_phi_67_pred;
                    _2487 = frontier_phi_67_pred_1;
                    _2489 = frontier_phi_67_pred_2;
                    _2483 = frontier_phi_67_pred_3;
                    _2481 = frontier_phi_67_pred_4;
                    _2479 = frontier_phi_67_pred_5;
                    uint _2624 = _2623 + 1u;
                    if (_2624 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2617 = _2479;
                        _2618 = _2481;
                        _2619 = _2483;
                        _2620 = _2485;
                        _2621 = _2487;
                        _2622 = _2489;
                        _2623 = _2624;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2487;
                frontier_phi_55_56_ladder_1 = _2489;
                frontier_phi_55_56_ladder_2 = _2485;
                frontier_phi_55_56_ladder_3 = _2483;
                frontier_phi_55_56_ladder_4 = _2481;
                frontier_phi_55_56_ladder_5 = _2479;
            }
            else
            {
                frontier_phi_55_56_ladder = _2373;
                frontier_phi_55_56_ladder_1 = _2375;
                frontier_phi_55_56_ladder_2 = _2371;
                frontier_phi_55_56_ladder_3 = _2369;
                frontier_phi_55_56_ladder_4 = _2367;
                frontier_phi_55_56_ladder_5 = _2365;
            }
            _2478 = frontier_phi_55_56_ladder_5;
            _2480 = frontier_phi_55_56_ladder_4;
            _2482 = frontier_phi_55_56_ladder_3;
            _2484 = frontier_phi_55_56_ladder_2;
            _2486 = frontier_phi_55_56_ladder;
            _2488 = frontier_phi_55_56_ladder_1;
        }
        float _2493 = isnan(1.0) ? _517 : (isnan(_517) ? 1.0 : min(_517, 1.0));
        _2259 = (_2493 * _2484) + _1695;
        _2261 = (_2493 * _2486) + _1697;
        _2263 = (_2493 * _2488) + _1699;
        _2265 = ((_2478 * _502) * _2493) + _2040;
        _2267 = ((_2480 * _504) * _2493) + _2042;
        _2269 = ((_2482 * _505) * _2493) + _2044;
    }
    else
    {
        _2259 = _1695;
        _2261 = _1697;
        _2263 = _1699;
        _2265 = _2040;
        _2267 = _2042;
        _2269 = _2044;
    }
    vec4 _2275 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4122 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _4133 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _4144 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _2299 = (((isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_2259 + ((isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0))) * _517))) + ((_2265 + ((isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))) * _1327)) * cbPerFrame._m0[3u].x)) + (_2275.x * cbMtdParam._m0[3u].x);
    float _2301 = ((_2275.y * cbMtdParam._m0[3u].x) + ((_2267 + ((isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))) * _1327)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_2261 + ((isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0))) * _517)));
    float _2303 = ((_2275.z * cbMtdParam._m0[3u].x) + ((_2269 + ((isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))) * _1327)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_2263 + ((isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0))) * _517)));
    uint _2307 = _444 + 6u;
    float _2315 = _386 / cbSceneParam._m0[86u].x;
    float _2316 = _387 / cbSceneParam._m0[86u].y;
    vec4 _2330 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2315, _2316, (log2((isnan(cbSceneParam._m0[77u].w) ? _319 : (isnan(_319) ? cbSceneParam._m0[77u].w : min(_319, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2332 = _2330.x;
    float _2333 = _2330.y;
    float _2334 = _2330.z;
    float _2335 = _2330.w;
    float _2428;
    float _2430;
    float _2432;
    float _2434;
    if (_319 > cbSceneParam._m0[78u].w)
    {
        float _2390 = isnan(_319) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _319 : min(cbSceneParam._m0[80u].w, _319));
        float _2391 = _2390 / _319;
        float _2402 = _2391 * _371;
        float _2403 = _372 * _2391;
        float _2404 = (-0.0) - _2403;
        float _2406 = _2391 * _373;
        float _2408 = (cbSceneParam._m0[77u].w * _2404) / _2390;
        float _2409 = _2408 + cbSceneParam._m0[79u].w;
        float _2410 = cbSceneParam._m0[79u].w - _2403;
        float _2416 = sqrt(((_2402 * _2402) + (_2403 * _2403)) + (_2406 * _2406));
        float _2419 = (1.0 - (cbSceneParam._m0[77u].w / _2390)) * _2416;
        float _2424 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2426 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2579;
        if (abs((_2404 - _2408) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2579 = ((((_2409 > 0.0) ? exp2(_2424 * _2409) : (2.0 - exp2(_2426 * _2409))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2419;
        }
        else
        {
            float _2539 = 1.0 / cbSceneParam._m0[80u].x;
            float _2540 = isnan(_2410) ? _2409 : (isnan(_2409) ? _2410 : max(_2409, _2410));
            float _2541 = isnan(_2410) ? _2409 : (isnan(_2409) ? _2410 : min(_2409, _2410));
            float _2550 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : min(_2540, 0.0));
            float _2551 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : min(_2541, 0.0));
            _2579 = ((abs(_2416 / _2404) * cbSceneParam._m0[80u].y) * ((((_2550 - _2551) * 2.0) - ((exp2(_2424 * (isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0)))) - exp2(_2424 * (isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0))))) * _2539)) - ((exp2(_2426 * _2550) - exp2(_2426 * _2551)) * _2539))) + (_2419 * cbSceneParam._m0[80u].z);
        }
        vec4 _2581 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2315, _2316, 1.0), 0.0);
        float _2590 = exp2((_2579 * (-1.44269502162933349609375)) * (1.0 - _2581.w));
        float _2591 = log2(_2590);
        float _2607 = log2(_2335);
        _2428 = (exp2(_2607 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2591 * cbSceneParam._m0[78u].x)) * _2581.x) / cbSceneParam._m0[78u].x)) + _2332;
        _2430 = (exp2(_2607 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2591 * cbSceneParam._m0[78u].y)) * _2581.y) / cbSceneParam._m0[78u].y)) + _2333;
        _2432 = (exp2(_2607 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2591 * cbSceneParam._m0[78u].z)) * _2581.z) / cbSceneParam._m0[78u].z)) + _2334;
        _2434 = _2590 * _2335;
    }
    else
    {
        _2428 = _2332;
        _2430 = _2333;
        _2432 = _2334;
        _2434 = _2335;
    }
    float _2446 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2447 = _2446 == 3.0;
    float _2448 = log2(_2434);
    float _2455 = exp2(_2448 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0)));
    float _2456 = exp2(_2448 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0)));
    float _2457 = exp2(_2448 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0)));
    float _2466 = (_2446 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2466 * (_2447 ? _2455 : (_2455 + (cbSceneParam._m0[72u].w * _2428)));
    SV_Target.y = _2466 * (_2447 ? _2456 : (_2456 + (cbSceneParam._m0[72u].w * _2430)));
    SV_Target.z = _2466 * (_2447 ? _2457 : (_2457 + (cbSceneParam._m0[72u].w * _2432)));
    SV_Target.w = cbInstanceData._m0[_2307].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2307].w;
}


