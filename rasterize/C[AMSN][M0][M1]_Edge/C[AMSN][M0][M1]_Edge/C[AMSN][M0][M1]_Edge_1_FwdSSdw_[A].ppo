#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M0_M1_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M0_M1_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _918;
float _3351;
float _3352;
float _3353;
float _3354;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _235 = texture(sampler2D(C_AMSN_M0_M1_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _241 = _235.w;
    float _242 = _235.x * cbMtdParam._m0[9u].x;
    float _243 = _235.y * cbMtdParam._m0[9u].y;
    float _244 = _235.z * cbMtdParam._m0[9u].z;
    vec4 _256 = texture(sampler2D(C_AMSN_M0_M1_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _260 = _256.z;
    float _264 = (_256.x * 2.0) + (-1.0);
    float _266 = (_256.y * 2.0) + (-1.0);
    float _267 = dot(vec2(_264, _266), vec2(_264, _266));
    float _3363 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _273 = sqrt(1.0 - (isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0))));
    float _276 = fma(_273, _205 * NORMAL.x, fma(_266, _212 * TANGENT.x, (_198 * _190) * _264));
    float _279 = fma(_273, _205 * NORMAL.y, fma(_266, _212 * TANGENT.y, (_198 * _191) * _264));
    float _282 = fma(_273, _205 * NORMAL.z, fma(_266, _212 * TANGENT.z, (_198 * _192) * _264));
    float _286 = inversesqrt(dot(vec3(_276, _279, _282), vec3(_276, _279, _282)));
    float _287 = _286 * _276;
    float _288 = _286 * _279;
    float _289 = _286 * _282;
    float _3374 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _290 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
    float _3385 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3396 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3407 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _309 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _351 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _361 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _351);
    float _362 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _351);
    float _363 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _351);
    float _367 = inversesqrt(dot(vec3(_361, _362, _363), vec3(_361, _362, _363)));
    float _368 = _361 * _367;
    float _369 = _362 * _367;
    float _370 = _363 * _367;
    vec4 _375 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _377 = _375.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _597 = sqrt(((_361 * _361) + (_362 * _362)) + (_363 * _363));
        float _603 = (cbMatDynParam._m0[5u].x * _597) + cbMatDynParam._m0[5u].y;
        float _3418 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
        float _604 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
        float _608 = (cbMatDynParam._m0[5u].z * _597) + cbMatDynParam._m0[5u].w;
        float _3429 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0))) - _604)) + _604) < ((_377 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _389 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _390 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _392 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _394 = _392.w;
    float _414 = fma(_289, cbSceneParam._m0[5u].z, fma(_288, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _287));
    float _417 = fma(_289, cbSceneParam._m0[6u].z, fma(_288, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _287));
    float _420 = fma(_289, cbSceneParam._m0[7u].z, fma(_288, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _287));
    vec4 _422 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _433 = (((_422.y - _290) + (_422.w * _290)) * cbMtdParam._m0[3u].x) + _290;
    uint _446 = uint(roundEven(NORMAL.w)) * 13u;
    uint _448 = _446 + 9u;
    uint _449 = _448 + uint(cbMatDynParam._m0[0u].w);
    float _455 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0)))) * cbInstanceData._m0[_449].x;
    float _456 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0)))) * cbInstanceData._m0[_449].y;
    float _457 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0)))) * cbInstanceData._m0[_449].z;
    float _3440 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _458 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
    float _3451 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _459 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
    float _3462 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _460 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
    vec4 _461 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _466 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _472 = cbMtdParam._m0[3u].x * _466.x;
    float _485 = (cbMtdParam._m0[3u].x * (((_458 * _394) - _458) + _461.x)) + _458;
    float _486 = (cbMtdParam._m0[3u].x * (((_459 * _394) - _459) + _461.y)) + _459;
    float _487 = (cbMtdParam._m0[3u].x * (((_460 * _394) - _460) + _461.z)) + _460;
    float _488 = 1.0 - _472;
    float _489 = _485 * _488;
    float _490 = _486 * _488;
    float _491 = _487 * _488;
    float _496 = (_485 + (-0.039999999105930328369140625)) * _472;
    float _497 = (_486 + (-0.039999999105930328369140625)) * _472;
    float _498 = (_487 + (-0.039999999105930328369140625)) * _472;
    float _499 = _496 + 0.039999999105930328369140625;
    float _501 = _497 + 0.039999999105930328369140625;
    float _502 = _498 + 0.039999999105930328369140625;
    vec4 _511 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _389, cbSceneParam._m0[86u].y * _390));
    float _514 = _511.x * TEXCOORD_4;
    float _515 = dot(vec3(_287, _288, _289), vec3(_368, _369, _370));
    float _518 = _515 * 2.0;
    float _522 = (_518 * _287) - _368;
    float _523 = (_518 * _288) - _369;
    float _524 = (_518 * _289) - _370;
    float _528 = abs(dot(vec3(_368, _369, _370), vec3(_287, _288, _289)));
    float _3473 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _530 = sqrt(_433);
    float _543 = exp2((_530 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_530 * 3.0));
    float _549 = (1.0 - _543) * ((_530 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _550 = _543 * _530;
    float _578 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _582 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _586 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _917;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _642 = fma(_586, cbModelParam._m0[26u].z, fma(_582, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _578));
        float _646 = fma(_586, cbModelParam._m0[27u].z, fma(_582, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _578));
        float _650 = fma(_586, cbModelParam._m0[28u].z, fma(_582, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _578));
        float _675 = _578 + _287;
        float _676 = _582 + _288;
        float _677 = _586 + _289;
        float _687 = fma(_677, cbModelParam._m0[26u].z, fma(_676, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _675)) - _642;
        float _688 = fma(_677, cbModelParam._m0[27u].z, fma(_676, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _675)) - _646;
        float _689 = fma(_677, cbModelParam._m0[28u].z, fma(_676, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _675)) - _650;
        float _693 = inversesqrt(dot(vec3(_687, _688, _689), vec3(_687, _688, _689)));
        float _706 = ((_693 * _687) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_642 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _707 = ((_693 * _688) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_646 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _708 = ((_693 * _689) / cbModelParam._m0[34u].z) + ((((((_650 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _711 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_706, _707, _708), 0.0);
        vec4 _718 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_706, _707, _708), 0.0);
        vec4 _725 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_706, _707, _708), 0.0);
        vec4 _732 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_706, _707, _708), 0.0);
        float _745 = exp2((_711.w + (-0.5)) * 20.0) * 2.0;
        float _746 = _745 * (_711.x + (-0.5));
        float _747 = _745 * (_711.y + (-0.5));
        float _748 = _745 * (_711.z + (-0.5));
        float _755 = exp2((_718.w + (-0.5)) * 20.0) * 2.0;
        float _756 = _755 * (_718.x + (-0.5));
        float _757 = _755 * (_718.y + (-0.5));
        float _758 = _755 * (_718.z + (-0.5));
        float _765 = exp2((_725.w + (-0.5)) * 20.0) * 2.0;
        float _766 = _765 * (_725.x + (-0.5));
        float _767 = _765 * (_725.y + (-0.5));
        float _768 = _765 * (_725.z + (-0.5));
        float _775 = exp2((_732.w + (-0.5)) * 20.0) * 2.0;
        float _776 = _775 * (_732.x + (-0.5));
        float _777 = _775 * (_732.y + (-0.5));
        float _778 = _775 * (_732.z + (-0.5));
        float _779 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _780 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _781 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _782 = _746 * 0.5;
        float _783 = _756 * 0.5;
        float _784 = _766 * 0.5;
        float _785 = dot(vec3(_782, _783, _784), vec3(_782, _783, _784));
        float _790 = (_785 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_785);
        float _799 = (dot(vec3(_287, _288, _289), vec3(_790 * _782, _790 * _783, _790 * _784)) + 1.0) * 0.5;
        float _3499 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _809 = sqrt(((_783 * _783) + (_782 * _782)) + (_784 * _784)) / (_779 + 9.9999997473787516355514526367188e-06);
        float _3510 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _810 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
        float _811 = _810 * 2.0;
        float _815 = (1.0 - _810) / (_810 + 1.0);
        float _3521 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _816 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
        float _825 = ((((1.0 - _816) * (_811 + 2.0)) * exp2(log2(isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0))) * (_811 + 1.0))) + _816) * _779;
        float _826 = _747 * 0.5;
        float _827 = _757 * 0.5;
        float _828 = _767 * 0.5;
        float _829 = dot(vec3(_826, _827, _828), vec3(_826, _827, _828));
        float _834 = (_829 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_829);
        float _842 = (dot(vec3(_287, _288, _289), vec3(_834 * _826, _834 * _827, _834 * _828)) + 1.0) * 0.5;
        float _3532 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _851 = sqrt(((_827 * _827) + (_826 * _826)) + (_828 * _828)) / (_780 + 9.9999997473787516355514526367188e-06);
        float _3543 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _852 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _853 = _852 * 2.0;
        float _857 = (1.0 - _852) / (_852 + 1.0);
        float _3554 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _858 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _867 = ((((1.0 - _858) * (_853 + 2.0)) * exp2(log2(isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * (_853 + 1.0))) + _858) * _780;
        float _868 = _748 * 0.5;
        float _869 = _758 * 0.5;
        float _870 = _768 * 0.5;
        float _871 = dot(vec3(_868, _869, _870), vec3(_868, _869, _870));
        float _876 = (_871 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_871);
        float _884 = (dot(vec3(_287, _288, _289), vec3(_876 * _868, _876 * _869, _876 * _870)) + 1.0) * 0.5;
        float _3565 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _893 = sqrt(((_869 * _869) + (_868 * _868)) + (_870 * _870)) / (_781 + 9.9999997473787516355514526367188e-06);
        float _3576 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _894 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _895 = _894 * 2.0;
        float _899 = (1.0 - _894) / (_894 + 1.0);
        float _3587 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _900 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _909 = ((((1.0 - _900) * (_895 + 2.0)) * exp2(log2(isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))) * (_895 + 1.0))) + _900) * _781;
        _917 = _748;
        _919 = _747;
        _920 = _746;
        _921 = _758;
        _922 = _757;
        _923 = _756;
        _924 = _768;
        _925 = _767;
        _926 = _766;
        _927 = _781;
        _928 = _780;
        _929 = _779;
        _930 = cbModelParam._m0[36u].z * (isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0)));
        _931 = cbModelParam._m0[36u].z * (isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0)));
        _932 = cbModelParam._m0[36u].z * (isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0)));
    }
    else
    {
        _917 = _918;
        _919 = _918;
        _920 = _918;
        _921 = _918;
        _922 = _918;
        _923 = _918;
        _924 = _918;
        _925 = _918;
        _926 = _918;
        _927 = _918;
        _928 = _918;
        _929 = _918;
        _930 = 0.0;
        _931 = 0.0;
        _932 = 0.0;
    }
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _961 = fma(_586, cbModelParam._m0[30u].z, fma(_582, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _578));
        float _965 = fma(_586, cbModelParam._m0[31u].z, fma(_582, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _578));
        float _969 = fma(_586, cbModelParam._m0[32u].z, fma(_582, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _578));
        float _992 = _578 + _287;
        float _993 = _582 + _288;
        float _994 = _586 + _289;
        float _1004 = fma(_994, cbModelParam._m0[30u].z, fma(_993, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _992)) - _961;
        float _1005 = fma(_994, cbModelParam._m0[31u].z, fma(_993, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _992)) - _965;
        float _1006 = fma(_994, cbModelParam._m0[32u].z, fma(_993, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _992)) - _969;
        float _1010 = inversesqrt(dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006)));
        float _1023 = ((_1010 * _1004) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_961 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1024 = ((_1010 * _1005) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_965 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1025 = ((_1010 * _1006) / cbModelParam._m0[35u].z) + ((((((_969 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1041 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        float _1060 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1027.x + (-0.5));
        float _1062 = _1060 * (_1027.y + (-0.5));
        float _1063 = _1060 * (_1027.z + (-0.5));
        float _1070 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1034.x + (-0.5));
        float _1072 = _1070 * (_1034.y + (-0.5));
        float _1073 = _1070 * (_1034.z + (-0.5));
        float _1080 = exp2((_1041.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1041.x + (-0.5));
        float _1082 = _1080 * (_1041.y + (-0.5));
        float _1083 = _1080 * (_1041.z + (-0.5));
        float _1090 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1048.x + (-0.5));
        float _1092 = _1090 * (_1048.y + (-0.5));
        float _1093 = _1090 * (_1048.z + (-0.5));
        float _1094 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1095 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1096 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1097 = _1061 * 0.5;
        float _1098 = _1071 * 0.5;
        float _1099 = _1081 * 0.5;
        float _1100 = dot(vec3(_1097, _1098, _1099), vec3(_1097, _1098, _1099));
        float _1105 = (_1100 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1100);
        float _1113 = (dot(vec3(_287, _288, _289), vec3(_1105 * _1097, _1105 * _1098, _1105 * _1099)) + 1.0) * 0.5;
        float _3628 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1122 = sqrt(((_1098 * _1098) + (_1097 * _1097)) + (_1099 * _1099)) / (_1094 + 9.9999997473787516355514526367188e-06);
        float _3639 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _1124 = _1123 * 2.0;
        float _1128 = (1.0 - _1123) / (_1123 + 1.0);
        float _3650 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1138 = ((((1.0 - _1129) * (_1124 + 2.0)) * exp2(log2(isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * (_1124 + 1.0))) + _1129) * _1094;
        float _1139 = _1062 * 0.5;
        float _1140 = _1072 * 0.5;
        float _1141 = _1082 * 0.5;
        float _1142 = dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141));
        float _1147 = (_1142 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1142);
        float _1155 = (dot(vec3(_287, _288, _289), vec3(_1147 * _1139, _1147 * _1140, _1147 * _1141)) + 1.0) * 0.5;
        float _3661 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1164 = sqrt(((_1140 * _1140) + (_1139 * _1139)) + (_1141 * _1141)) / (_1095 + 9.9999997473787516355514526367188e-06);
        float _3672 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _1166 = _1165 * 2.0;
        float _1170 = (1.0 - _1165) / (_1165 + 1.0);
        float _3683 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1180 = ((((1.0 - _1171) * (_1166 + 2.0)) * exp2(log2(isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * (_1166 + 1.0))) + _1171) * _1095;
        float _1181 = _1063 * 0.5;
        float _1182 = _1073 * 0.5;
        float _1183 = _1083 * 0.5;
        float _1184 = dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183));
        float _1189 = (_1184 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1184);
        float _1197 = (dot(vec3(_287, _288, _289), vec3(_1189 * _1181, _1189 * _1182, _1189 * _1183)) + 1.0) * 0.5;
        float _3694 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1206 = sqrt(((_1182 * _1182) + (_1181 * _1181)) + (_1183 * _1183)) / (_1096 + 9.9999997473787516355514526367188e-06);
        float _3705 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _1208 = _1207 * 2.0;
        float _1212 = (1.0 - _1207) / (_1207 + 1.0);
        float _3716 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1222 = ((((1.0 - _1213) * (_1208 + 2.0)) * exp2(log2(isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))) * (_1208 + 1.0))) + _1213) * _1096;
        _1230 = _1063;
        _1231 = _1062;
        _1232 = _1061;
        _1233 = _1073;
        _1234 = _1072;
        _1235 = _1071;
        _1236 = _1083;
        _1237 = _1082;
        _1238 = _1081;
        _1239 = _1096;
        _1240 = _1095;
        _1241 = _1094;
        _1242 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0)));
        _1243 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0)));
        _1244 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)));
    }
    else
    {
        _1230 = _918;
        _1231 = _918;
        _1232 = _918;
        _1233 = _918;
        _1234 = _918;
        _1235 = _918;
        _1236 = _918;
        _1237 = _918;
        _1238 = _918;
        _1239 = _918;
        _1240 = _918;
        _1241 = _918;
        _1242 = 0.0;
        _1243 = 0.0;
        _1244 = 0.0;
    }
    float _1254 = (cbModelParam._m0[1u].x * (_1242 - _930)) + _930;
    float _1255 = (cbModelParam._m0[1u].x * (_1243 - _931)) + _931;
    float _1256 = (cbModelParam._m0[1u].x * (_1244 - _932)) + _932;
    float _1277 = fma(_1256, cbSceneParam._m0[89u].z, fma(_1255, cbSceneParam._m0[89u].y, _1254 * cbSceneParam._m0[89u].x));
    float _1280 = fma(_1256, cbSceneParam._m0[90u].z, fma(_1255, cbSceneParam._m0[90u].y, _1254 * cbSceneParam._m0[90u].x));
    float _1283 = fma(_1256, cbSceneParam._m0[91u].z, fma(_1255, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1254));
    float _1298 = _522 * 0.5;
    float _1299 = _523 * 0.5;
    float _1300 = _524 * 0.5;
    float _1301 = dot(vec4(_1298, _1299, _1300, 1.0), vec4(_1232, _1235, _1238, _1241));
    float _1304 = dot(vec4(_1298, _1299, _1300, 1.0), vec4(_1231, _1234, _1237, _1240));
    float _1307 = dot(vec4(_1298, _1299, _1300, 1.0), vec4(_1230, _1233, _1236, _1239));
    float _1341;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1314 = dot(vec4(_1298, _1299, _1300, 1.0), vec4(_917, _921, _924, _927));
        float _1318 = dot(vec4(_1298, _1299, _1300, 1.0), vec4(_919, _922, _925, _928));
        float _1322 = dot(vec4(_1298, _1299, _1300, 1.0), vec4(_920, _923, _926, _929));
        float _1329 = dot(vec4(cbModelParam._m0[39u]), vec4(_1298, _1299, _1300, 1.0));
        _1341 = dot(vec3(isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)), isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)), isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1329) ? 0.0 : (isnan(0.0) ? _1329 : max(0.0, _1329))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1341 = 1.0;
    }
    float _1352;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1343 = dot(vec4(cbModelParam._m0[40u]), vec4(_1298, _1299, _1300, 1.0));
        _1352 = dot(vec3(isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)), isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)), isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1343) ? 0.0 : (isnan(0.0) ? _1343 : max(0.0, _1343))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1352 = 1.0;
    }
    float _1356 = (_1352 * cbModelParam._m0[1u].x) + (_1341 * (1.0 - cbModelParam._m0[1u].x));
    float _1366 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _433);
    float _1367 = isnan(_1366) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1366 : min(cbModelParam._m0[25u].z, _1366));
    float _1449;
    float _1451;
    float _1453;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1416 = fma(_586, cbModelParam._m0[13u].z, fma(_582, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _578)) + cbModelParam._m0[13u].w;
        float _1420 = fma(_586, cbModelParam._m0[14u].z, fma(_582, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _578)) + cbModelParam._m0[14u].w;
        float _1424 = fma(_586, cbModelParam._m0[15u].z, fma(_582, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _578)) + cbModelParam._m0[15u].w;
        float _1427 = fma(_524, cbModelParam._m0[13u].z, fma(_523, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _522));
        float _1430 = fma(_524, cbModelParam._m0[14u].z, fma(_523, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _522));
        float _1433 = fma(_524, cbModelParam._m0[15u].z, fma(_523, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _522));
        float _1461;
        if (_1427 > 0.0)
        {
            _1461 = abs((1.0 - _1416) / _1427);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1427 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1416 + 1.0) / _1427);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1461 = frontier_phi_17_15_ladder;
        }
        float _1690;
        if (_1430 > 0.0)
        {
            _1690 = abs((1.0 - _1420) / _1430);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1430 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1420 + 1.0) / _1430);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1690 = frontier_phi_26_22_ladder;
        }
        float _1947;
        if (_1433 > 0.0)
        {
            _1947 = abs((1.0 - _1424) / _1433);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1433 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1424 + 1.0) / _1433);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1947 = frontier_phi_38_33_ladder;
        }
        float _1949 = isnan(_1690) ? _1461 : (isnan(_1461) ? _1690 : min(_1461, _1690));
        float _1950 = isnan(_1947) ? _1949 : (isnan(_1949) ? _1947 : min(_1949, _1947));
        float _1954 = (_1950 * _1427) + _1416;
        float _1955 = (_1950 * _1430) + _1420;
        float _1956 = (_1950 * _1433) + _1424;
        float _1957 = _1950 * 9.9999997473787516355514526367188e-05;
        float _1959 = (-1.0) - _1957;
        float _1961 = _1957 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1956 > _1961) || ((_1956 < _1959) || ((_1955 > _1961) || ((_1955 < _1959) || ((_1954 < _1959) || (_1954 > _1961))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2084 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1956, cbModelParam._m0[9u].z, fma(_1955, cbModelParam._m0[9u].y, _1954 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1956, cbModelParam._m0[10u].z, fma(_1955, cbModelParam._m0[10u].y, _1954 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1956, cbModelParam._m0[11u].z, fma(_1955, cbModelParam._m0[11u].y, _1954 * cbModelParam._m0[11u].x))), _1367);
            frontier_phi_16_38_ladder = _2084.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2084.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2084.x * cbModelParam._m0[1u].y;
        }
        _1449 = frontier_phi_16_38_ladder_2;
        _1451 = frontier_phi_16_38_ladder_1;
        _1453 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1437 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_522, _523, _524), _1367);
        _1449 = _1437.x * cbModelParam._m0[1u].y;
        _1451 = _1437.y * cbModelParam._m0[1u].y;
        _1453 = _1437.z * cbModelParam._m0[1u].y;
    }
    float _1457 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _433);
    float _1458 = isnan(_1457) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1457 : min(cbModelParam._m0[25u].w, _1457));
    float _1551;
    float _1553;
    float _1555;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1515 = fma(_586, cbModelParam._m0[21u].z, fma(_582, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _578)) + cbModelParam._m0[21u].w;
        float _1519 = fma(_586, cbModelParam._m0[22u].z, fma(_582, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _578)) + cbModelParam._m0[22u].w;
        float _1523 = fma(_586, cbModelParam._m0[23u].z, fma(_582, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _578)) + cbModelParam._m0[23u].w;
        float _1526 = fma(_524, cbModelParam._m0[21u].z, fma(_523, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _522));
        float _1529 = fma(_524, cbModelParam._m0[22u].z, fma(_523, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _522));
        float _1532 = fma(_524, cbModelParam._m0[23u].z, fma(_523, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _522));
        float _1695;
        if (_1526 > 0.0)
        {
            _1695 = abs((1.0 - _1515) / _1526);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1526 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1515 + 1.0) / _1526);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1695 = frontier_phi_28_24_ladder;
        }
        float _1974;
        if (_1529 > 0.0)
        {
            _1974 = abs((1.0 - _1519) / _1529);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1529 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1519 + 1.0) / _1529);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1974 = frontier_phi_40_35_ladder;
        }
        float _2187;
        if (_1532 > 0.0)
        {
            _2187 = abs((1.0 - _1523) / _1532);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1532 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1523 + 1.0) / _1532);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2187 = frontier_phi_49_46_ladder;
        }
        float _2189 = isnan(_1974) ? _1695 : (isnan(_1695) ? _1974 : min(_1695, _1974));
        float _2190 = isnan(_2187) ? _2189 : (isnan(_2189) ? _2187 : min(_2189, _2187));
        float _2194 = (_2190 * _1526) + _1515;
        float _2195 = (_2190 * _1529) + _1519;
        float _2196 = (_2190 * _1532) + _1523;
        float _2197 = _2190 * 9.9999997473787516355514526367188e-05;
        float _2198 = (-1.0) - _2197;
        float _2200 = _2197 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2196 > _2200) || ((_2196 < _2198) || ((_2195 > _2200) || ((_2195 < _2198) || ((_2194 < _2198) || (_2194 > _2200))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2413 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2196, cbModelParam._m0[17u].z, fma(_2195, cbModelParam._m0[17u].y, _2194 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2196, cbModelParam._m0[18u].z, fma(_2195, cbModelParam._m0[18u].y, _2194 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2196, cbModelParam._m0[19u].z, fma(_2195, cbModelParam._m0[19u].y, _2194 * cbModelParam._m0[19u].x))), _1458);
            frontier_phi_25_49_ladder = _2413.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2413.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2413.x * cbModelParam._m0[1u].z;
        }
        _1551 = frontier_phi_25_49_ladder_2;
        _1553 = frontier_phi_25_49_ladder_1;
        _1555 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1535 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_522, _523, _524), _1458);
        _1551 = _1535.x * cbModelParam._m0[1u].z;
        _1553 = _1535.y * cbModelParam._m0[1u].z;
        _1555 = _1535.z * cbModelParam._m0[1u].z;
    }
    float _1568 = (((_549 * _499) + _550) * _514) * ((cbModelParam._m0[1u].w * (_1551 - _1449)) + _1449);
    float _1570 = (((_549 * _501) + _550) * _514) * ((cbModelParam._m0[1u].w * (_1553 - _1451)) + _1451);
    float _1572 = (((_549 * _502) + _550) * _514) * ((cbModelParam._m0[1u].w * (_1555 - _1453)) + _1453);
    float _1575 = fma(_1572, cbSceneParam._m0[89u].z, fma(_1570, cbSceneParam._m0[89u].y, _1568 * cbSceneParam._m0[89u].x));
    float _1578 = fma(_1572, cbSceneParam._m0[90u].z, fma(_1570, cbSceneParam._m0[90u].y, _1568 * cbSceneParam._m0[90u].x));
    float _1581 = fma(_1572, cbSceneParam._m0[91u].z, fma(_1570, cbSceneParam._m0[91u].y, _1568 * cbSceneParam._m0[91u].x));
    vec4 _1589 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_389, _390));
    float _1591 = _1589.w;
    float _1603 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1591);
    float _1604 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1591);
    float _1605 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1591);
    uvec4 _1609 = floatBitsToUint(cbInstanceData._m0[_446 + 5u]);
    uint _1611 = _1609.x * 14u;
    uint _1612 = _1611 + 13u;
    float _1619 = _514 + (-1.0);
    float _1624 = (cbLight._m0[_1612].x * _1619) + 1.0;
    float _1625 = (cbLight._m0[_1612].y * _1619) + 1.0;
    float _1626 = (cbLight._m0[_1612].z * _1619) + 1.0;
    float _1627 = (cbLight._m0[_1612].w * _1619) + 1.0;
    uint _1628 = _1611 + 5u;
    float _1634 = isnan(1.0) ? _1625 : (isnan(_1625) ? 1.0 : min(_1625, 1.0));
    uint _1638 = _1611 + 4u;
    float _1648 = isnan(1.0) ? _1624 : (isnan(_1624) ? 1.0 : min(_1624, 1.0));
    uint _1652 = _1611 | 1u;
    float _1663 = dot(vec3(cbLight._m0[_1611].xyz), vec3(_287, _288, _289));
    float _1666 = dot(vec3(cbLight._m0[_1652].xyz), vec3(_287, _288, _289));
    float _3852 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
    float _3863 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
    float _1671 = (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * 0.3183098733425140380859375;
    float _1673 = (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * 0.3183098733425140380859375;
    float _1680 = ((cbLight._m0[_1628].x * _1634) * _1673) + (((cbLight._m0[_1638].x * _1603) * _1648) * _1671);
    float _1681 = ((_1634 * cbLight._m0[_1628].y) * _1673) + (((cbLight._m0[_1638].y * _1604) * _1648) * _1671);
    float _1682 = ((_1634 * cbLight._m0[_1628].z) * _1673) + (((cbLight._m0[_1638].z * _1605) * _1648) * _1671);
    uvec4 _1687 = floatBitsToUint(cbLight._m0[_1611 + 12u]);
    bool _1689 = _1687.x == 0u;
    float _1700;
    float _1702;
    float _1704;
    if (_1689)
    {
        _1700 = _1680;
        _1702 = _1681;
        _1704 = _1682;
    }
    else
    {
        uint _1708 = _1611 + 6u;
        float _1724 = (dot(vec3(cbLight._m0[_1611 + 2u].xyz), vec3(_287, _288, _289)) * 0.5) + 0.5;
        float _1725 = _1724 * _1724;
        float _3874 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1726 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1727 = isnan(1.0) ? _1626 : (isnan(_1626) ? 1.0 : min(_1626, 1.0));
        _1700 = (((cbLight._m0[_1708].x * 0.3183098733425140380859375) * _1726) * _1727) + _1680;
        _1702 = (((cbLight._m0[_1708].y * 0.3183098733425140380859375) * _1726) * _1727) + _1681;
        _1704 = (((cbLight._m0[_1708].z * 0.3183098733425140380859375) * _1726) * _1727) + _1682;
    }
    bool _1707 = _1687.y == 0u;
    float _1745;
    float _1747;
    float _1749;
    if (_1707)
    {
        _1745 = _1700;
        _1747 = _1702;
        _1749 = _1704;
    }
    else
    {
        uint _1918 = _1611 + 7u;
        float _1934 = (dot(vec3(cbLight._m0[_1611 + 3u].xyz), vec3(_287, _288, _289)) * 0.5) + 0.5;
        float _1935 = _1934 * _1934;
        float _3890 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
        float _1936 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1937 = isnan(1.0) ? _1627 : (isnan(_1627) ? 1.0 : min(_1627, 1.0));
        _1745 = (((cbLight._m0[_1918].x * 0.3183098733425140380859375) * _1936) * _1937) + _1700;
        _1747 = (((cbLight._m0[_1918].y * 0.3183098733425140380859375) * _1936) * _1937) + _1702;
        _1749 = (((cbLight._m0[_1918].z * 0.3183098733425140380859375) * _1936) * _1937) + _1704;
    }
    uint _1752 = _1611 + 8u;
    float _1765 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1611].w)) * _433) * 0.949999988079071044921875);
    float _1766 = _1765 * _1765;
    float _1767 = cbLight._m0[_1611].x + _368;
    float _1768 = cbLight._m0[_1611].y + _369;
    float _1769 = cbLight._m0[_1611].z + _370;
    float _1773 = inversesqrt(dot(vec3(_1767, _1768, _1769), vec3(_1767, _1768, _1769)));
    float _1774 = _1773 * _1767;
    float _1775 = _1773 * _1768;
    float _1776 = _1773 * _1769;
    float _1777 = dot(vec3(_287, _288, _289), vec3(cbLight._m0[_1611].xyz));
    float _3906 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
    float _1780 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _3917 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _1781 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _1782 = dot(vec3(_287, _288, _289), vec3(_1774, _1775, _1776));
    float _3928 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
    float _1785 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _1786 = dot(vec3(cbLight._m0[_1611].xyz), vec3(_1774, _1775, _1776));
    float _3939 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
    float _1790 = _1766 * _1766;
    float _1794 = ((_1785 * _1785) * (_1790 + (-1.0))) + 1.0;
    float _1802 = exp2(log2(1.0 - (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0)))) * 5.0);
    float _1803 = 0.959999978542327880859375 - _496;
    float _1805 = 0.959999978542327880859375 - _497;
    float _1806 = 0.959999978542327880859375 - _498;
    float _1813 = 1.0 - _1766;
    float _1824 = (0.5 / (((_1781 * ((_1780 * _1813) + _1766)) + 9.9999999392252902907785028219223e-09) + (((_1781 * _1813) + _1766) * _1780))) * _1780;
    float _3950 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
    float _1826 = (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_1790 / ((_1794 * _1794) * 3.141590118408203125));
    uint _1840 = _1611 + 9u;
    float _1851 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1652].w)) * _433) * 0.949999988079071044921875);
    float _1852 = _1851 * _1851;
    float _1853 = cbLight._m0[_1652].x + _368;
    float _1854 = cbLight._m0[_1652].y + _369;
    float _1855 = cbLight._m0[_1652].z + _370;
    float _1859 = inversesqrt(dot(vec3(_1853, _1854, _1855), vec3(_1853, _1854, _1855)));
    float _1860 = _1859 * _1853;
    float _1861 = _1859 * _1854;
    float _1862 = _1859 * _1855;
    float _1863 = dot(vec3(_287, _288, _289), vec3(cbLight._m0[_1652].xyz));
    float _3961 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _1866 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _1867 = dot(vec3(_287, _288, _289), vec3(_1860, _1861, _1862));
    float _3972 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1870 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _1871 = dot(vec3(cbLight._m0[_1652].xyz), vec3(_1860, _1861, _1862));
    float _3983 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _1875 = _1852 * _1852;
    float _1879 = ((_1870 * _1870) * (_1875 + (-1.0))) + 1.0;
    float _1886 = exp2(log2(1.0 - (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0)))) * 5.0);
    float _1893 = 1.0 - _1852;
    float _1903 = (0.5 / (((_1781 * ((_1866 * _1893) + _1852)) + 9.9999999392252902907785028219223e-09) + (((_1781 * _1893) + _1852) * _1866))) * _1866;
    float _3994 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
    float _1905 = (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_1875 / ((_1879 * _1879) * 3.141590118408203125));
    float _1915 = (((((_1886 * _1803) + _499) * cbLight._m0[_1840].x) * _1905) * _1634) + ((((cbLight._m0[_1752].x * _1603) * ((_1802 * _1803) + _499)) * _1826) * _1648);
    float _1916 = (((((_1886 * _1805) + _501) * cbLight._m0[_1840].y) * _1905) * _1634) + ((((cbLight._m0[_1752].y * _1604) * ((_1802 * _1805) + _501)) * _1826) * _1648);
    float _1917 = (((((_1886 * _1806) + _502) * cbLight._m0[_1840].z) * _1905) * _1634) + ((((cbLight._m0[_1752].z * _1605) * ((_1802 * _1806) + _502)) * _1826) * _1648);
    float _1979;
    float _1981;
    float _1983;
    if (_1689)
    {
        _1979 = _1915;
        _1981 = _1916;
        _1983 = _1917;
    }
    else
    {
        uint _1985 = _1611 + 2u;
        uint _1989 = _1611 + 10u;
        float _2003 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1985].w)) * _433) * 0.949999988079071044921875);
        float _2004 = _2003 * _2003;
        float _2005 = cbLight._m0[_1985].x + _368;
        float _2006 = cbLight._m0[_1985].y + _369;
        float _2007 = cbLight._m0[_1985].z + _370;
        float _2011 = inversesqrt(dot(vec3(_2005, _2006, _2007), vec3(_2005, _2006, _2007)));
        float _2012 = _2011 * _2005;
        float _2013 = _2011 * _2006;
        float _2014 = _2011 * _2007;
        float _2015 = dot(vec3(_287, _288, _289), vec3(cbLight._m0[_1985].xyz));
        float _4005 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
        float _2018 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _2019 = dot(vec3(_287, _288, _289), vec3(_2012, _2013, _2014));
        float _4016 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
        float _2022 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _2023 = dot(vec3(cbLight._m0[_1985].xyz), vec3(_2012, _2013, _2014));
        float _4027 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
        float _2027 = _2004 * _2004;
        float _2031 = ((_2022 * _2022) * (_2027 + (-1.0))) + 1.0;
        float _2038 = exp2(log2(1.0 - (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0)))) * 5.0);
        float _2045 = 1.0 - _2004;
        float _2055 = (0.5 / (((_1781 * ((_2018 * _2045) + _2004)) + 9.9999999392252902907785028219223e-09) + (((_1781 * _2045) + _2004) * _2018))) * _2018;
        float _4038 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
        float _2057 = (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * (_2027 / ((_2031 * _2031) * 3.141590118408203125));
        float _2058 = isnan(1.0) ? _1626 : (isnan(_1626) ? 1.0 : min(_1626, 1.0));
        _1979 = (((((_2038 * _1803) + _499) * cbLight._m0[_1989].x) * _2057) * _2058) + _1915;
        _1981 = (((((_2038 * _1805) + _501) * cbLight._m0[_1989].y) * _2057) * _2058) + _1916;
        _1983 = (((((_2038 * _1806) + _502) * cbLight._m0[_1989].z) * _2057) * _2058) + _1917;
    }
    float _2093;
    float _2095;
    float _2097;
    if (_1707)
    {
        _2093 = _1979;
        _2095 = _1981;
        _2097 = _1983;
    }
    else
    {
        uint _2104 = _1611 + 3u;
        uint _2108 = _1611 + 11u;
        float _2122 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2104].w)) * _433) * 0.949999988079071044921875);
        float _2123 = _2122 * _2122;
        float _2124 = cbLight._m0[_2104].x + _368;
        float _2125 = cbLight._m0[_2104].y + _369;
        float _2126 = cbLight._m0[_2104].z + _370;
        float _2130 = inversesqrt(dot(vec3(_2124, _2125, _2126), vec3(_2124, _2125, _2126)));
        float _2131 = _2130 * _2124;
        float _2132 = _2130 * _2125;
        float _2133 = _2130 * _2126;
        float _2134 = dot(vec3(_287, _288, _289), vec3(cbLight._m0[_2104].xyz));
        float _4054 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        float _2137 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _2138 = dot(vec3(_287, _288, _289), vec3(_2131, _2132, _2133));
        float _4065 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
        float _2141 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _2142 = dot(vec3(cbLight._m0[_2104].xyz), vec3(_2131, _2132, _2133));
        float _4076 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2146 = _2123 * _2123;
        float _2150 = ((_2141 * _2141) * (_2146 + (-1.0))) + 1.0;
        float _2157 = exp2(log2(1.0 - (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0)))) * 5.0);
        float _2164 = 1.0 - _2123;
        float _2174 = (0.5 / (((_1781 * ((_2137 * _2164) + _2123)) + 9.9999999392252902907785028219223e-09) + (((_1781 * _2164) + _2123) * _2137))) * _2137;
        float _4087 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2176 = (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_2146 / ((_2150 * _2150) * 3.141590118408203125));
        float _2177 = isnan(1.0) ? _1627 : (isnan(_1627) ? 1.0 : min(_1627, 1.0));
        _2093 = (((((_2157 * _1803) + _499) * cbLight._m0[_2108].x) * _2176) * _2177) + _1979;
        _2095 = (((((_2157 * _1805) + _501) * cbLight._m0[_2108].y) * _2176) * _2177) + _1981;
        _2097 = (((((_2157 * _1806) + _502) * cbLight._m0[_2108].z) * _2176) * _2177) + _1983;
    }
    float _2312;
    float _2314;
    float _2316;
    float _2318;
    float _2320;
    float _2322;
    if (_1609.y == 0u)
    {
        float _2252 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2253 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2252;
        float _2254 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2252;
        float _2255 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2252;
        uvec4 _2267 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2268 = _2267.x;
        uint _2279 = uint((float(_2267.y) * floor(float(uint(cbSceneParam._m0[85u].y * _390) / _2268))) + floor(float(uint(cbSceneParam._m0[85u].x * _389) / _2268)));
        float _2289 = (log2(_2255 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2290 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
        uint _2293 = uint(isnan(14.0) ? _2290 : (isnan(_2290) ? 14.0 : min(_2290, 14.0)));
        uvec4 _2298 = texelFetch(g_lightClusterGridBuffer, int(((_2293 << 2u) + (_2279 << 6u)) >> 2u));
        uint _2299 = _2298.x;
        uint _2300 = _2267.z;
        float _2418;
        float _2420;
        float _2422;
        float _2424;
        float _2426;
        float _2428;
        if (((((1u << ((_2300 >> 4u) & 15u)) + 4294967295u) & _2299) == 0u) || ((_2300 & 240u) == 0u))
        {
            _2418 = 0.0;
            _2420 = 0.0;
            _2422 = 0.0;
            _2424 = 0.0;
            _2426 = 0.0;
            _2428 = 0.0;
        }
        else
        {
            float _2419;
            float _2421;
            float _2423;
            float _2425;
            float _2427;
            float _2429;
            float _2571 = 0.0;
            float _2572 = 0.0;
            float _2573 = 0.0;
            float _2574 = 0.0;
            float _2575 = 0.0;
            float _2576 = 0.0;
            uint _2577 = 0u;
            uint _2586;
            bool _2587;
            for (;;)
            {
                _2586 = texelFetch(g_lightClassification, int((((_2293 << 5u) + (_2279 << 9u)) + (_2577 << 2u)) >> 2u)).x;
                _2587 = _2586 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2587)
                {
                    frontier_phi_66_pred = _2571;
                    frontier_phi_66_pred_1 = _2576;
                    frontier_phi_66_pred_2 = _2575;
                    frontier_phi_66_pred_3 = _2574;
                    frontier_phi_66_pred_4 = _2573;
                    frontier_phi_66_pred_5 = _2572;
                }
                else
                {
                    float _2716;
                    float _2717;
                    float _2718;
                    float _2719;
                    float _2720;
                    float _2721;
                    uint _2722;
                    _2716 = _2571;
                    _2717 = _2572;
                    _2718 = _2573;
                    _2719 = _2574;
                    _2720 = _2575;
                    _2721 = _2576;
                    _2722 = _2586;
                    float _2643;
                    float _2644;
                    float _2645;
                    float _2646;
                    float _2647;
                    float _2648;
                    for (;;)
                    {
                        uint _2726 = uint(findLSB(_2722)) + (_2577 << 5u);
                        uint _2723 = (_2722 + 4294967295u) & _2722;
                        uint _2728 = _2726 * 48u;
                        vec4 _2742 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2728)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 3u)).x));
                        uint _2748 = (_2726 * 48u) + 4u;
                        vec4 _2761 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2748)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 3u)).x));
                        uint _2767 = (_2726 * 48u) + 8u;
                        vec3 _2778 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2767)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 2u)).x));
                        float _2782 = _2742.x - _2253;
                        float _2783 = _2742.y - _2254;
                        float _2784 = _2742.z - _2255;
                        float _2785 = dot(vec3(_2782, _2783, _2784), vec3(_2782, _2783, _2784));
                        float _2788 = inversesqrt(_2785);
                        float _2789 = _2788 * _2782;
                        float _2790 = _2788 * _2783;
                        float _2791 = _2788 * _2784;
                        float _2792 = dot(vec3(_414, _417, _420), vec3(_2789, _2790, _2791));
                        float _2797 = 1.0 - (_2785 * _2742.w);
                        float _4113 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
                        float _2798 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
                        float _2799 = sqrt(_2785) * _2761.w;
                        float _2802 = 1.39999997615814208984375 / (_2799 + 1.39999997615814208984375);
                        float _2803 = _2802 * _2802;
                        float _2806 = ((1.0 - _2803) * _2792) + _2803;
                        float _2809 = _2799 * _2799;
                        float _2813 = ((isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0))) * _2798) / ((_2809 * 0.699999988079071044921875) + 1.0);
                        float _2817 = (-0.0) - _2253;
                        float _2818 = (-0.0) - _2254;
                        float _2819 = (-0.0) - _2255;
                        float _2823 = inversesqrt(dot(vec3(_2817, _2818, _2819), vec3(_2817, _2818, _2819)));
                        float _2824 = _2823 * _2817;
                        float _2825 = _2823 * _2818;
                        float _2826 = _2823 * _2819;
                        float _2834 = exp2(log2(1.0 / ((_2809 * 3.5) + 5.0)) * 0.25);
                        float _2835 = 1.0 - _530;
                        float _2842 = sqrt(1.0 - ((1.0 - (_2835 * _2835)) * (1.0 - (_2834 * _2834))));
                        float _2843 = _2842 * _2842;
                        float _2844 = _2843 * _2843;
                        float _2845 = _2824 + _2789;
                        float _2846 = _2825 + _2790;
                        float _2847 = _2826 + _2791;
                        float _2851 = inversesqrt(dot(vec3(_2845, _2846, _2847), vec3(_2845, _2846, _2847)));
                        float _2855 = dot(vec3(_414, _417, _420), vec3(_2824, _2825, _2826));
                        float _4129 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
                        float _2858 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
                        float _2859 = dot(vec3(_414, _417, _420), vec3(_2851 * _2845, _2851 * _2846, _2851 * _2847));
                        float _4140 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
                        float _2862 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
                        float _2866 = ((_2862 * _2862) * (_2844 + (-1.0))) + 1.0;
                        float _2867 = _2802 * _2843;
                        float _2868 = _2867 * _2867;
                        float _2871 = ((1.0 - _2868) * _2792) + _2868;
                        float _4151 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
                        float _2872 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
                        float _2873 = 1.0 - _2843;
                        float _2883 = (0.5 / (((_2872 * ((_2858 * _2873) + _2843)) + 9.9999999392252902907785028219223e-09) + (((_2872 * _2873) + _2843) * _2858))) * _2872;
                        float _4162 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
                        float _2894 = (((_2844 * 3.1415927410125732421875) * (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) / ((_2866 * _2866) * ((_2809 * 2.1991131305694580078125) + 3.141590118408203125))) * _2798;
                        _2646 = (_2813 * _2761.x) + _2719;
                        _2647 = (_2813 * _2761.y) + _2720;
                        _2648 = (_2813 * _2761.z) + _2721;
                        _2643 = (_2894 * _2778.x) + _2716;
                        _2644 = (_2894 * _2778.y) + _2717;
                        _2645 = (_2894 * _2778.z) + _2718;
                        if (_2723 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2716 = _2643;
                            _2717 = _2644;
                            _2718 = _2645;
                            _2719 = _2646;
                            _2720 = _2647;
                            _2721 = _2648;
                            _2722 = _2723;
                        }
                    }
                    frontier_phi_66_pred = _2643;
                    frontier_phi_66_pred_1 = _2648;
                    frontier_phi_66_pred_2 = _2647;
                    frontier_phi_66_pred_3 = _2646;
                    frontier_phi_66_pred_4 = _2645;
                    frontier_phi_66_pred_5 = _2644;
                }
                _2419 = frontier_phi_66_pred;
                _2429 = frontier_phi_66_pred_1;
                _2427 = frontier_phi_66_pred_2;
                _2425 = frontier_phi_66_pred_3;
                _2423 = frontier_phi_66_pred_4;
                _2421 = frontier_phi_66_pred_5;
                uint _2578 = _2577 + 1u;
                if (_2578 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2571 = _2419;
                    _2572 = _2421;
                    _2573 = _2423;
                    _2574 = _2425;
                    _2575 = _2427;
                    _2576 = _2429;
                    _2577 = _2578;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2418 = _2419;
            _2420 = _2421;
            _2422 = _2423;
            _2424 = _2425;
            _2426 = _2427;
            _2428 = _2429;
        }
        uvec4 _2432 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2433 = _2432.z;
        uint _2435 = (_2433 >> 8u) & 15u;
        float _2539;
        float _2541;
        float _2543;
        float _2545;
        float _2547;
        float _2549;
        if (((4294967295u << _2435) & _2299) == 0u)
        {
            _2539 = _2418;
            _2541 = _2420;
            _2543 = _2422;
            _2545 = _2424;
            _2547 = _2426;
            _2549 = _2428;
        }
        else
        {
            float _2564 = inversesqrt(dot(vec3(_2253, _2254, _2255), vec3(_2253, _2254, _2255)));
            float _2565 = _2564 * _2253;
            float _2566 = _2564 * _2254;
            float _2567 = _2564 * _2255;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2435 < ((_2433 >> 12u) & 15u))
            {
                float _2540;
                float _2542;
                float _2544;
                float _2546;
                float _2548;
                float _2550;
                float _2699 = _2418;
                float _2700 = _2420;
                float _2701 = _2422;
                float _2702 = _2424;
                float _2703 = _2426;
                float _2704 = _2428;
                uint _2705 = _2435;
                uint _2714;
                bool _2715;
                for (;;)
                {
                    _2714 = texelFetch(g_lightClassification, int((((_2293 << 5u) + (_2279 << 9u)) + (_2705 << 2u)) >> 2u)).x;
                    _2715 = _2714 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2715)
                    {
                        frontier_phi_77_pred = _2704;
                        frontier_phi_77_pred_1 = _2703;
                        frontier_phi_77_pred_2 = _2702;
                        frontier_phi_77_pred_3 = _2701;
                        frontier_phi_77_pred_4 = _2700;
                        frontier_phi_77_pred_5 = _2699;
                    }
                    else
                    {
                        float _2908;
                        float _2909;
                        float _2910;
                        float _2911;
                        float _2912;
                        float _2913;
                        float _3204;
                        float _3205;
                        float _3206;
                        float _3207;
                        float _3208;
                        float _3209;
                        float _2921 = _2699;
                        float _2922 = _2700;
                        float _2923 = _2701;
                        float _2924 = _2702;
                        float _2925 = _2703;
                        float _2926 = _2704;
                        uint _2927 = _2714;
                        uint _2928;
                        vec4 _2953;
                        float _2954;
                        vec4 _2969;
                        vec3 _2981;
                        vec4 _2997;
                        vec4 _3013;
                        float _3060;
                        bool _3061;
                        for (;;)
                        {
                            uint _2938 = ((_2705 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2927));
                            _2928 = (_2927 + 4294967295u) & _2927;
                            uint _2940 = _2938 * 40u;
                            _2953 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2940)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 3u)).x));
                            _2954 = _2953.w;
                            uint _2956 = (_2938 * 40u) + 4u;
                            _2969 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2956)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 3u)).x));
                            uint _2971 = (_2938 * 40u) + 8u;
                            _2981 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2971)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 2u)).x));
                            uint _2984 = (_2938 * 40u) + 16u;
                            _2997 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2984)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 3u)).x));
                            uint _3000 = (_2938 * 40u) + 20u;
                            _3013 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3000)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 3u)).x));
                            uint _3016 = (_2938 * 40u) + 24u;
                            vec4 _3029 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3016)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 3u)).x));
                            uint _3035 = (_2938 * 40u) + 28u;
                            vec4 _3048 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3035)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 3u)).x));
                            _3060 = fma(_2255, _3048.z, fma(_2254, _3048.y, _3048.x * _2253)) + _3048.w;
                            _3061 = !((fma(_2255, _3029.z, fma(_2254, _3029.y, _3029.x * _2253)) + _3029.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3061)
                            {
                                float _3088 = _2953.x - _2253;
                                float _3089 = _2953.y - _2254;
                                float _3090 = _2953.z - _2255;
                                float _3091 = dot(vec3(_3088, _3089, _3090), vec3(_3088, _3089, _3090));
                                float _3094 = inversesqrt(_3091);
                                float _3095 = _3094 * _3088;
                                float _3096 = _3094 * _3089;
                                float _3097 = _3094 * _3090;
                                float _3101 = 1.0 - (_3091 / (_2954 * _2954));
                                float _4173 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                                float _3102 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
                                float _3106 = sqrt(_3091) * _2969.w;
                                float _3108 = 1.39999997615814208984375 / (_3106 + 1.39999997615814208984375);
                                float _3109 = _3108 * _3108;
                                float _3112 = ((1.0 - _3109) * dot(vec3(_3095, _3096, _3097), vec3(_414, _417, _420))) + _3109;
                                float _3115 = _3106 * _3106;
                                float _3119 = (fma(_2255, _2997.z, fma(_2254, _2997.y, _2997.x * _2253)) + _2997.w) / _3060;
                                float _3120 = (fma(_2255, _3013.z, fma(_2254, _3013.y, _3013.x * _2253)) + _3013.w) / _3060;
                                float _3124 = 1.0 - dot(vec2(_3119, _3120), vec2(_3119, _3120));
                                float _4189 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                                float _3125 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
                                float _3126 = _3125 * (((isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0))) * _3102) / ((_3115 * 0.699999988079071044921875) + 1.0));
                                float _3138 = exp2(log2(1.0 / ((_3115 * 3.5) + 5.0)) * 0.25);
                                float _3139 = 1.0 - _530;
                                float _3146 = sqrt(1.0 - ((1.0 - (_3139 * _3139)) * (1.0 - (_3138 * _3138))));
                                float _3147 = _3146 * _3146;
                                float _3148 = _3147 * _3147;
                                float _3149 = _3095 - _2565;
                                float _3150 = _3096 - _2566;
                                float _3151 = _3097 - _2567;
                                float _3155 = inversesqrt(dot(vec3(_3149, _3150, _3151), vec3(_3149, _3150, _3151)));
                                float _3159 = dot(vec3(_414, _417, _420), vec3((-0.0) - _2565, (-0.0) - _2566, (-0.0) - _2567));
                                float _4200 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                                float _3162 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
                                float _3163 = dot(vec3(_414, _417, _420), vec3(_3155 * _3149, _3155 * _3150, _3155 * _3151));
                                float _4211 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                                float _3166 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
                                float _3170 = ((_3166 * _3166) * (_3148 + (-1.0))) + 1.0;
                                float _3171 = _3108 * _3147;
                                float _3172 = _3171 * _3171;
                                float _3178 = ((1.0 - _3172) * dot(vec3(_414, _417, _420), vec3(_3095, _3096, _3097))) + _3172;
                                float _4222 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                                float _3179 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
                                float _3180 = 1.0 - _3147;
                                float _3190 = (0.5 / (((_3179 * ((_3162 * _3180) + _3147)) + 9.9999999392252902907785028219223e-09) + (((_3179 * _3180) + _3147) * _3162))) * _3179;
                                float _4233 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                                float _3200 = (_3125 * _3102) * (((_3148 * 3.1415927410125732421875) * (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0)))) / ((_3170 * _3170) * ((_3115 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3126 * _2969.y;
                                frontier_phi_83_pred_1 = _3126 * _2969.x;
                                frontier_phi_83_pred_2 = _3200 * _2981.z;
                                frontier_phi_83_pred_3 = _3200 * _2981.y;
                                frontier_phi_83_pred_4 = _3200 * _2981.x;
                                frontier_phi_83_pred_5 = _3126 * _2969.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3208 = frontier_phi_83_pred;
                            _3207 = frontier_phi_83_pred_1;
                            _3206 = frontier_phi_83_pred_2;
                            _3205 = frontier_phi_83_pred_3;
                            _3204 = frontier_phi_83_pred_4;
                            _3209 = frontier_phi_83_pred_5;
                            _2911 = _3207 + _2924;
                            _2912 = _3208 + _2925;
                            _2913 = _3209 + _2926;
                            _2908 = _3204 + _2921;
                            _2909 = _3205 + _2922;
                            _2910 = _3206 + _2923;
                            if (_2928 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2921 = _2908;
                                _2922 = _2909;
                                _2923 = _2910;
                                _2924 = _2911;
                                _2925 = _2912;
                                _2926 = _2913;
                                _2927 = _2928;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2913;
                        frontier_phi_77_pred_1 = _2912;
                        frontier_phi_77_pred_2 = _2911;
                        frontier_phi_77_pred_3 = _2910;
                        frontier_phi_77_pred_4 = _2909;
                        frontier_phi_77_pred_5 = _2908;
                    }
                    _2550 = frontier_phi_77_pred;
                    _2548 = frontier_phi_77_pred_1;
                    _2546 = frontier_phi_77_pred_2;
                    _2544 = frontier_phi_77_pred_3;
                    _2542 = frontier_phi_77_pred_4;
                    _2540 = frontier_phi_77_pred_5;
                    uint _2706 = _2705 + 1u;
                    if (_2706 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2699 = _2540;
                        _2700 = _2542;
                        _2701 = _2544;
                        _2702 = _2546;
                        _2703 = _2548;
                        _2704 = _2550;
                        _2705 = _2706;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2544;
                frontier_phi_58_59_ladder_1 = _2550;
                frontier_phi_58_59_ladder_2 = _2548;
                frontier_phi_58_59_ladder_3 = _2546;
                frontier_phi_58_59_ladder_4 = _2542;
                frontier_phi_58_59_ladder_5 = _2540;
            }
            else
            {
                frontier_phi_58_59_ladder = _2422;
                frontier_phi_58_59_ladder_1 = _2428;
                frontier_phi_58_59_ladder_2 = _2426;
                frontier_phi_58_59_ladder_3 = _2424;
                frontier_phi_58_59_ladder_4 = _2420;
                frontier_phi_58_59_ladder_5 = _2418;
            }
            _2539 = frontier_phi_58_59_ladder_5;
            _2541 = frontier_phi_58_59_ladder_4;
            _2543 = frontier_phi_58_59_ladder;
            _2545 = frontier_phi_58_59_ladder_3;
            _2547 = frontier_phi_58_59_ladder_2;
            _2549 = frontier_phi_58_59_ladder_1;
        }
        float _2554 = isnan(1.0) ? _514 : (isnan(_514) ? 1.0 : min(_514, 1.0));
        _2312 = (_2554 * _2545) + _1745;
        _2314 = (_2554 * _2547) + _1747;
        _2316 = (_2554 * _2549) + _1749;
        _2318 = ((_2539 * _499) * _2554) + _2093;
        _2320 = ((_2541 * _501) * _2554) + _2095;
        _2322 = ((_2543 * _502) * _2554) + _2097;
    }
    else
    {
        _2312 = _1745;
        _2314 = _1747;
        _2316 = _1749;
        _2318 = _2093;
        _2320 = _2095;
        _2322 = _2097;
    }
    vec4 _2328 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4249 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _4260 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _4271 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _2352 = (((isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_2312 + ((isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0))) * _514))) + ((_2318 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _1356)) * cbPerFrame._m0[3u].x)) + (_2328.x * cbMtdParam._m0[3u].x);
    float _2354 = ((_2328.y * cbMtdParam._m0[3u].x) + ((_2320 + ((isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))) * _1356)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_2314 + ((isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0))) * _514)));
    float _2356 = ((_2328.z * cbMtdParam._m0[3u].x) + ((_2322 + ((isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))) * _1356)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_2316 + ((isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0))) * _514)));
    float _2357 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2358 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2359 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    uint _2360 = _446 + 6u;
    float _2368 = _389 / cbSceneParam._m0[86u].x;
    float _2369 = _390 / cbSceneParam._m0[86u].y;
    vec4 _2383 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2368, _2369, (log2((isnan(cbSceneParam._m0[77u].w) ? _309 : (isnan(_309) ? cbSceneParam._m0[77u].w : min(_309, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2385 = _2383.x;
    float _2386 = _2383.y;
    float _2387 = _2383.z;
    float _2388 = _2383.w;
    float _2481;
    float _2483;
    float _2485;
    float _2487;
    if (_309 > cbSceneParam._m0[78u].w)
    {
        float _2443 = isnan(_309) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _309 : min(cbSceneParam._m0[80u].w, _309));
        float _2444 = _2443 / _309;
        float _2455 = _2444 * _361;
        float _2456 = _362 * _2444;
        float _2457 = (-0.0) - _2456;
        float _2459 = _2444 * _363;
        float _2461 = (cbSceneParam._m0[77u].w * _2457) / _2443;
        float _2462 = _2461 + cbSceneParam._m0[79u].w;
        float _2463 = cbSceneParam._m0[79u].w - _2456;
        float _2469 = sqrt(((_2455 * _2455) + (_2456 * _2456)) + (_2459 * _2459));
        float _2472 = (1.0 - (cbSceneParam._m0[77u].w / _2443)) * _2469;
        float _2477 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2479 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2656;
        if (abs((_2457 - _2461) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2656 = ((((_2462 > 0.0) ? exp2(_2477 * _2462) : (2.0 - exp2(_2479 * _2462))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2472;
        }
        else
        {
            float _2600 = 1.0 / cbSceneParam._m0[80u].x;
            float _2601 = isnan(_2463) ? _2462 : (isnan(_2462) ? _2463 : max(_2462, _2463));
            float _2602 = isnan(_2463) ? _2462 : (isnan(_2462) ? _2463 : min(_2462, _2463));
            float _2611 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : min(_2601, 0.0));
            float _2612 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : min(_2602, 0.0));
            _2656 = ((abs(_2469 / _2457) * cbSceneParam._m0[80u].y) * ((((_2611 - _2612) * 2.0) - ((exp2(_2477 * (isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0)))) - exp2(_2477 * (isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0))))) * _2600)) - ((exp2(_2479 * _2611) - exp2(_2479 * _2612)) * _2600))) + (_2472 * cbSceneParam._m0[80u].z);
        }
        vec4 _2658 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2368, _2369, 1.0), 0.0);
        float _2667 = exp2((_2656 * (-1.44269502162933349609375)) * (1.0 - _2658.w));
        float _2668 = log2(_2667);
        float _2684 = log2(_2388);
        _2481 = (exp2(_2684 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2668 * cbSceneParam._m0[78u].x)) * _2658.x) / cbSceneParam._m0[78u].x)) + _2385;
        _2483 = (exp2(_2684 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2668 * cbSceneParam._m0[78u].y)) * _2658.y) / cbSceneParam._m0[78u].y)) + _2386;
        _2485 = (exp2(_2684 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2668 * cbSceneParam._m0[78u].z)) * _2658.z) / cbSceneParam._m0[78u].z)) + _2387;
        _2487 = _2667 * _2388;
    }
    else
    {
        _2481 = _2385;
        _2483 = _2386;
        _2485 = _2387;
        _2487 = _2388;
    }
    bool _2694;
    vec4 _2497;
    vec4 _2519;
    float _2521;
    float _2525;
    float _2526;
    float _2527;
    float _2528;
    bool _2538;
    for (;;)
    {
        _2497 = cbMatDynParam._m0[0u];
        float _2499 = roundEven(_2497.y);
        bool _2500 = _2499 == 3.0;
        float _2501 = log2(_2487);
        float _2508 = exp2(_2501 * cbSceneParam._m0[78u].x) * _2357;
        float _2509 = exp2(_2501 * cbSceneParam._m0[78u].y) * _2358;
        float _2510 = exp2(_2501 * cbSceneParam._m0[78u].z) * _2359;
        float _2517 = _377 + (-0.5);
        _2519 = cbMtdParam._m0[1u];
        _2521 = _2519.y * _2517;
        float _2524 = (_2499 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2525 = _2524 * (_2500 ? _2508 : (_2508 + (cbSceneParam._m0[72u].w * _2481)));
        _2526 = _2524 * (_2500 ? _2509 : (_2509 + (cbSceneParam._m0[72u].w * _2483)));
        _2527 = _2524 * (_2500 ? _2510 : (_2510 + (cbSceneParam._m0[72u].w * _2485)));
        _2528 = _2517 * 0.999000012874603271484375;
        _2538 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2538)
        {
            if ((cbInstanceData._m0[_446 + 7u].x + _2528) < 0.5)
            {
                _2694 = true;
                break;
            }
        }
        uint _2635 = _448 + uint(_2497.w);
        if ((cbInstanceData._m0[_2635].w < 1.0) && ((cbInstanceData._m0[_2635].w + _2528) < 0.5))
        {
            _2694 = true;
            break;
        }
        if ((_2521 + _241) < _2519.x)
        {
            _2694 = true;
            break;
        }
        _2694 = false;
        break;
    }
    float _2899;
    if (_2694)
    {
        discard_state = true;
        _2899 = 0.0;
    }
    else
    {
        _2899 = cbInstanceData._m0[_2360].w;
    }
    SV_Target.x = _2525;
    SV_Target.y = _2526;
    SV_Target.z = _2527;
    SV_Target.w = _2899;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2360].w;
    discard_exit();
}


