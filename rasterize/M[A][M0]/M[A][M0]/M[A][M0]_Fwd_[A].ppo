#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _749;
float _2914;
float _2915;
float _2916;
float _2917;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _165 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _166 = _165 * NORMAL.x;
    float _167 = _165 * NORMAL.y;
    float _168 = _165 * NORMAL.z;
    float _173;
    float _174;
    float _175;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _173 = (-0.0) - _166;
        _174 = (-0.0) - _167;
        _175 = (-0.0) - _168;
    }
    else
    {
        _173 = _166;
        _174 = _167;
        _175 = _168;
    }
    vec4 _195 = texture(sampler2D(M_A_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _201 = _195.x * cbMtdParam._m0[9u].x;
    float _202 = _195.y * cbMtdParam._m0[9u].y;
    float _203 = _195.z * cbMtdParam._m0[9u].z;
    float _207 = inversesqrt(dot(vec3(_173, _174, _175), vec3(_173, _174, _175)));
    float _208 = _207 * _173;
    float _209 = _207 * _174;
    float _210 = _207 * _175;
    float _2926 = isnan(0.0) ? _201 : (isnan(_201) ? 0.0 : max(_201, 0.0));
    float _2937 = isnan(0.0) ? _202 : (isnan(_202) ? 0.0 : max(_202, 0.0));
    float _2948 = isnan(0.0) ? _203 : (isnan(_203) ? 0.0 : max(_203, 0.0));
    float _230 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _272 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _282 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _272);
    float _283 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _272);
    float _284 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _272);
    float _288 = inversesqrt(dot(vec3(_282, _283, _284), vec3(_282, _283, _284)));
    float _289 = _282 * _288;
    float _290 = _283 * _288;
    float _291 = _284 * _288;
    vec4 _296 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _298 = _296.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _428 = sqrt(((_282 * _282) + (_283 * _283)) + (_284 * _284));
        float _434 = (cbMatDynParam._m0[5u].x * _428) + cbMatDynParam._m0[5u].y;
        float _2959 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
        float _435 = isnan(1.0) ? _2959 : (isnan(_2959) ? 1.0 : min(_2959, 1.0));
        float _439 = (cbMatDynParam._m0[5u].z * _428) + cbMatDynParam._m0[5u].w;
        float _2970 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2970 : (isnan(_2970) ? 1.0 : min(_2970, 1.0))) - _435)) + _435) < ((_298 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _310 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _311 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _331 = fma(_210, cbSceneParam._m0[5u].z, fma(_209, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _208));
    float _334 = fma(_210, cbSceneParam._m0[6u].z, fma(_209, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _208));
    float _337 = fma(_210, cbSceneParam._m0[7u].z, fma(_209, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _208));
    uint _350 = uint(roundEven(NORMAL.w)) * 13u;
    uint _352 = _350 + 9u;
    uint _353 = _352 + uint(cbMatDynParam._m0[0u].w);
    float _359 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2926 : (isnan(_2926) ? 1.0 : min(_2926, 1.0)))) * cbInstanceData._m0[_353].x;
    float _360 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2937 : (isnan(_2937) ? 1.0 : min(_2937, 1.0)))) * cbInstanceData._m0[_353].y;
    float _361 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2948 : (isnan(_2948) ? 1.0 : min(_2948, 1.0)))) * cbInstanceData._m0[_353].z;
    float _2981 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _362 = isnan(1.0) ? _2981 : (isnan(_2981) ? 1.0 : min(_2981, 1.0));
    float _2992 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _363 = isnan(1.0) ? _2992 : (isnan(_2992) ? 1.0 : min(_2992, 1.0));
    float _3003 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _364 = isnan(1.0) ? _3003 : (isnan(_3003) ? 1.0 : min(_3003, 1.0));
    vec4 _373 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _310, cbSceneParam._m0[86u].y * _311));
    float _376 = _373.x * TEXCOORD.z;
    float _377 = dot(vec3(_208, _209, _210), vec3(_289, _290, _291));
    float _380 = _377 * 2.0;
    float _385 = (_380 * _208) - _289;
    float _386 = (_380 * _209) - _290;
    float _387 = (_380 * _210) - _291;
    float _409 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _413 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _417 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _748;
    float _750;
    float _751;
    float _752;
    float _753;
    float _754;
    float _755;
    float _756;
    float _757;
    float _758;
    float _759;
    float _760;
    float _761;
    float _762;
    float _763;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _473 = fma(_417, cbModelParam._m0[26u].z, fma(_413, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _409));
        float _477 = fma(_417, cbModelParam._m0[27u].z, fma(_413, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _409));
        float _481 = fma(_417, cbModelParam._m0[28u].z, fma(_413, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _409));
        float _506 = _409 + _208;
        float _507 = _413 + _209;
        float _508 = _417 + _210;
        float _518 = fma(_508, cbModelParam._m0[26u].z, fma(_507, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _506)) - _473;
        float _519 = fma(_508, cbModelParam._m0[27u].z, fma(_507, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _506)) - _477;
        float _520 = fma(_508, cbModelParam._m0[28u].z, fma(_507, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _506)) - _481;
        float _524 = inversesqrt(dot(vec3(_518, _519, _520), vec3(_518, _519, _520)));
        float _537 = ((_524 * _518) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_473 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _538 = ((_524 * _519) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_477 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _539 = ((_524 * _520) / cbModelParam._m0[34u].z) + ((((((_481 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _542 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_537, _538, _539), 0.0);
        vec4 _549 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_537, _538, _539), 0.0);
        vec4 _556 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_537, _538, _539), 0.0);
        vec4 _563 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_537, _538, _539), 0.0);
        float _576 = exp2((_542.w + (-0.5)) * 20.0) * 2.0;
        float _577 = _576 * (_542.x + (-0.5));
        float _578 = _576 * (_542.y + (-0.5));
        float _579 = _576 * (_542.z + (-0.5));
        float _586 = exp2((_549.w + (-0.5)) * 20.0) * 2.0;
        float _587 = _586 * (_549.x + (-0.5));
        float _588 = _586 * (_549.y + (-0.5));
        float _589 = _586 * (_549.z + (-0.5));
        float _596 = exp2((_556.w + (-0.5)) * 20.0) * 2.0;
        float _597 = _596 * (_556.x + (-0.5));
        float _598 = _596 * (_556.y + (-0.5));
        float _599 = _596 * (_556.z + (-0.5));
        float _606 = exp2((_563.w + (-0.5)) * 20.0) * 2.0;
        float _607 = _606 * (_563.x + (-0.5));
        float _608 = _606 * (_563.y + (-0.5));
        float _609 = _606 * (_563.z + (-0.5));
        float _610 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
        float _611 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
        float _612 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
        float _613 = _577 * 0.5;
        float _614 = _587 * 0.5;
        float _615 = _597 * 0.5;
        float _616 = dot(vec3(_613, _614, _615), vec3(_613, _614, _615));
        float _621 = (_616 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_616);
        float _630 = (dot(vec3(_208, _209, _210), vec3(_621 * _613, _621 * _614, _621 * _615)) + 1.0) * 0.5;
        float _3029 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
        float _640 = sqrt(((_614 * _614) + (_613 * _613)) + (_615 * _615)) / (_610 + 9.9999997473787516355514526367188e-06);
        float _3040 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
        float _641 = isnan(1.0) ? _3040 : (isnan(_3040) ? 1.0 : min(_3040, 1.0));
        float _642 = _641 * 2.0;
        float _646 = (1.0 - _641) / (_641 + 1.0);
        float _3051 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
        float _647 = isnan(1.0) ? _3051 : (isnan(_3051) ? 1.0 : min(_3051, 1.0));
        float _656 = ((((1.0 - _647) * (_642 + 2.0)) * exp2(log2(isnan(1.0) ? _3029 : (isnan(_3029) ? 1.0 : min(_3029, 1.0))) * (_642 + 1.0))) + _647) * _610;
        float _657 = _578 * 0.5;
        float _658 = _588 * 0.5;
        float _659 = _598 * 0.5;
        float _660 = dot(vec3(_657, _658, _659), vec3(_657, _658, _659));
        float _665 = (_660 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_660);
        float _673 = (dot(vec3(_208, _209, _210), vec3(_665 * _657, _665 * _658, _665 * _659)) + 1.0) * 0.5;
        float _3062 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
        float _682 = sqrt(((_658 * _658) + (_657 * _657)) + (_659 * _659)) / (_611 + 9.9999997473787516355514526367188e-06);
        float _3073 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
        float _683 = isnan(1.0) ? _3073 : (isnan(_3073) ? 1.0 : min(_3073, 1.0));
        float _684 = _683 * 2.0;
        float _688 = (1.0 - _683) / (_683 + 1.0);
        float _3084 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
        float _689 = isnan(1.0) ? _3084 : (isnan(_3084) ? 1.0 : min(_3084, 1.0));
        float _698 = ((((1.0 - _689) * (_684 + 2.0)) * exp2(log2(isnan(1.0) ? _3062 : (isnan(_3062) ? 1.0 : min(_3062, 1.0))) * (_684 + 1.0))) + _689) * _611;
        float _699 = _579 * 0.5;
        float _700 = _589 * 0.5;
        float _701 = _599 * 0.5;
        float _702 = dot(vec3(_699, _700, _701), vec3(_699, _700, _701));
        float _707 = (_702 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_702);
        float _715 = (dot(vec3(_208, _209, _210), vec3(_707 * _699, _707 * _700, _707 * _701)) + 1.0) * 0.5;
        float _3095 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _724 = sqrt(((_700 * _700) + (_699 * _699)) + (_701 * _701)) / (_612 + 9.9999997473787516355514526367188e-06);
        float _3106 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _725 = isnan(1.0) ? _3106 : (isnan(_3106) ? 1.0 : min(_3106, 1.0));
        float _726 = _725 * 2.0;
        float _730 = (1.0 - _725) / (_725 + 1.0);
        float _3117 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _731 = isnan(1.0) ? _3117 : (isnan(_3117) ? 1.0 : min(_3117, 1.0));
        float _740 = ((((1.0 - _731) * (_726 + 2.0)) * exp2(log2(isnan(1.0) ? _3095 : (isnan(_3095) ? 1.0 : min(_3095, 1.0))) * (_726 + 1.0))) + _731) * _612;
        _748 = _579;
        _750 = _578;
        _751 = _577;
        _752 = _589;
        _753 = _588;
        _754 = _587;
        _755 = _599;
        _756 = _598;
        _757 = _597;
        _758 = _612;
        _759 = _611;
        _760 = _610;
        _761 = cbModelParam._m0[36u].z * (isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0)));
        _762 = cbModelParam._m0[36u].z * (isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0)));
        _763 = cbModelParam._m0[36u].z * (isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0)));
    }
    else
    {
        _748 = _749;
        _750 = _749;
        _751 = _749;
        _752 = _749;
        _753 = _749;
        _754 = _749;
        _755 = _749;
        _756 = _749;
        _757 = _749;
        _758 = _749;
        _759 = _749;
        _760 = _749;
        _761 = 0.0;
        _762 = 0.0;
        _763 = 0.0;
    }
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _792 = fma(_417, cbModelParam._m0[30u].z, fma(_413, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _409));
        float _796 = fma(_417, cbModelParam._m0[31u].z, fma(_413, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _409));
        float _800 = fma(_417, cbModelParam._m0[32u].z, fma(_413, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _409));
        float _823 = _409 + _208;
        float _824 = _413 + _209;
        float _825 = _417 + _210;
        float _835 = fma(_825, cbModelParam._m0[30u].z, fma(_824, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _823)) - _792;
        float _836 = fma(_825, cbModelParam._m0[31u].z, fma(_824, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _823)) - _796;
        float _837 = fma(_825, cbModelParam._m0[32u].z, fma(_824, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _823)) - _800;
        float _841 = inversesqrt(dot(vec3(_835, _836, _837), vec3(_835, _836, _837)));
        float _854 = ((_841 * _835) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_792 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _855 = ((_841 * _836) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_796 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _856 = ((_841 * _837) / cbModelParam._m0[35u].z) + ((((((_800 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_854, _855, _856), 0.0);
        vec4 _865 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_854, _855, _856), 0.0);
        vec4 _872 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_854, _855, _856), 0.0);
        vec4 _879 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_854, _855, _856), 0.0);
        float _891 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _892 = _891 * (_858.x + (-0.5));
        float _893 = _891 * (_858.y + (-0.5));
        float _894 = _891 * (_858.z + (-0.5));
        float _901 = exp2((_865.w + (-0.5)) * 20.0) * 2.0;
        float _902 = _901 * (_865.x + (-0.5));
        float _903 = _901 * (_865.y + (-0.5));
        float _904 = _901 * (_865.z + (-0.5));
        float _911 = exp2((_872.w + (-0.5)) * 20.0) * 2.0;
        float _912 = _911 * (_872.x + (-0.5));
        float _913 = _911 * (_872.y + (-0.5));
        float _914 = _911 * (_872.z + (-0.5));
        float _921 = exp2((_879.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_879.x + (-0.5));
        float _923 = _921 * (_879.y + (-0.5));
        float _924 = _921 * (_879.z + (-0.5));
        float _925 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _926 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _927 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _928 = _892 * 0.5;
        float _929 = _902 * 0.5;
        float _930 = _912 * 0.5;
        float _931 = dot(vec3(_928, _929, _930), vec3(_928, _929, _930));
        float _936 = (_931 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_931);
        float _944 = (dot(vec3(_208, _209, _210), vec3(_936 * _928, _936 * _929, _936 * _930)) + 1.0) * 0.5;
        float _3158 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _953 = sqrt(((_929 * _929) + (_928 * _928)) + (_930 * _930)) / (_925 + 9.9999997473787516355514526367188e-06);
        float _3169 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3169 : (isnan(_3169) ? 1.0 : min(_3169, 1.0));
        float _955 = _954 * 2.0;
        float _959 = (1.0 - _954) / (_954 + 1.0);
        float _3180 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3180 : (isnan(_3180) ? 1.0 : min(_3180, 1.0));
        float _969 = ((((1.0 - _960) * (_955 + 2.0)) * exp2(log2(isnan(1.0) ? _3158 : (isnan(_3158) ? 1.0 : min(_3158, 1.0))) * (_955 + 1.0))) + _960) * _925;
        float _970 = _893 * 0.5;
        float _971 = _903 * 0.5;
        float _972 = _913 * 0.5;
        float _973 = dot(vec3(_970, _971, _972), vec3(_970, _971, _972));
        float _978 = (_973 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_973);
        float _986 = (dot(vec3(_208, _209, _210), vec3(_978 * _970, _978 * _971, _978 * _972)) + 1.0) * 0.5;
        float _3191 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _995 = sqrt(((_971 * _971) + (_970 * _970)) + (_972 * _972)) / (_926 + 9.9999997473787516355514526367188e-06);
        float _3202 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3202 : (isnan(_3202) ? 1.0 : min(_3202, 1.0));
        float _997 = _996 * 2.0;
        float _1001 = (1.0 - _996) / (_996 + 1.0);
        float _3213 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3213 : (isnan(_3213) ? 1.0 : min(_3213, 1.0));
        float _1011 = ((((1.0 - _1002) * (_997 + 2.0)) * exp2(log2(isnan(1.0) ? _3191 : (isnan(_3191) ? 1.0 : min(_3191, 1.0))) * (_997 + 1.0))) + _1002) * _926;
        float _1012 = _894 * 0.5;
        float _1013 = _904 * 0.5;
        float _1014 = _914 * 0.5;
        float _1015 = dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014));
        float _1020 = (_1015 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1015);
        float _1028 = (dot(vec3(_208, _209, _210), vec3(_1020 * _1012, _1020 * _1013, _1020 * _1014)) + 1.0) * 0.5;
        float _3224 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1037 = sqrt(((_1013 * _1013) + (_1012 * _1012)) + (_1014 * _1014)) / (_927 + 9.9999997473787516355514526367188e-06);
        float _3235 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3235 : (isnan(_3235) ? 1.0 : min(_3235, 1.0));
        float _1039 = _1038 * 2.0;
        float _1043 = (1.0 - _1038) / (_1038 + 1.0);
        float _3246 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0));
        float _1053 = ((((1.0 - _1044) * (_1039 + 2.0)) * exp2(log2(isnan(1.0) ? _3224 : (isnan(_3224) ? 1.0 : min(_3224, 1.0))) * (_1039 + 1.0))) + _1044) * _927;
        _1061 = _894;
        _1062 = _893;
        _1063 = _892;
        _1064 = _904;
        _1065 = _903;
        _1066 = _902;
        _1067 = _914;
        _1068 = _913;
        _1069 = _912;
        _1070 = _927;
        _1071 = _926;
        _1072 = _925;
        _1073 = cbModelParam._m0[36u].w * (isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0)));
        _1074 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0)));
        _1075 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0)));
    }
    else
    {
        _1061 = _749;
        _1062 = _749;
        _1063 = _749;
        _1064 = _749;
        _1065 = _749;
        _1066 = _749;
        _1067 = _749;
        _1068 = _749;
        _1069 = _749;
        _1070 = _749;
        _1071 = _749;
        _1072 = _749;
        _1073 = 0.0;
        _1074 = 0.0;
        _1075 = 0.0;
    }
    float _1085 = (cbModelParam._m0[1u].x * (_1073 - _761)) + _761;
    float _1086 = (cbModelParam._m0[1u].x * (_1074 - _762)) + _762;
    float _1087 = (cbModelParam._m0[1u].x * (_1075 - _763)) + _763;
    float _1108 = fma(_1087, cbSceneParam._m0[89u].z, fma(_1086, cbSceneParam._m0[89u].y, _1085 * cbSceneParam._m0[89u].x));
    float _1111 = fma(_1087, cbSceneParam._m0[90u].z, fma(_1086, cbSceneParam._m0[90u].y, _1085 * cbSceneParam._m0[90u].x));
    float _1114 = fma(_1087, cbSceneParam._m0[91u].z, fma(_1086, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1085));
    float _1129 = _385 * 0.5;
    float _1130 = _386 * 0.5;
    float _1131 = _387 * 0.5;
    float _1132 = dot(vec4(_1129, _1130, _1131, 1.0), vec4(_1063, _1066, _1069, _1072));
    float _1135 = dot(vec4(_1129, _1130, _1131, 1.0), vec4(_1062, _1065, _1068, _1071));
    float _1138 = dot(vec4(_1129, _1130, _1131, 1.0), vec4(_1061, _1064, _1067, _1070));
    float _1172;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1145 = dot(vec4(_1129, _1130, _1131, 1.0), vec4(_748, _752, _755, _758));
        float _1149 = dot(vec4(_1129, _1130, _1131, 1.0), vec4(_750, _753, _756, _759));
        float _1153 = dot(vec4(_1129, _1130, _1131, 1.0), vec4(_751, _754, _757, _760));
        float _1160 = dot(vec4(cbModelParam._m0[39u]), vec4(_1129, _1130, _1131, 1.0));
        _1172 = dot(vec3(isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)), isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)), isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1160) ? 0.0 : (isnan(0.0) ? _1160 : max(0.0, _1160))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1172 = 1.0;
    }
    float _1183;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1174 = dot(vec4(cbModelParam._m0[40u]), vec4(_1129, _1130, _1131, 1.0));
        _1183 = dot(vec3(isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0)), isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)), isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1174) ? 0.0 : (isnan(0.0) ? _1174 : max(0.0, _1174))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1183 = 1.0;
    }
    float _1187 = (_1183 * cbModelParam._m0[1u].x) + (_1172 * (1.0 - cbModelParam._m0[1u].x));
    float _1196 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1278;
    float _1280;
    float _1282;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1245 = fma(_417, cbModelParam._m0[13u].z, fma(_413, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _409)) + cbModelParam._m0[13u].w;
        float _1249 = fma(_417, cbModelParam._m0[14u].z, fma(_413, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _409)) + cbModelParam._m0[14u].w;
        float _1253 = fma(_417, cbModelParam._m0[15u].z, fma(_413, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _409)) + cbModelParam._m0[15u].w;
        float _1256 = fma(_387, cbModelParam._m0[13u].z, fma(_386, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _385));
        float _1259 = fma(_387, cbModelParam._m0[14u].z, fma(_386, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _385));
        float _1262 = fma(_387, cbModelParam._m0[15u].z, fma(_386, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _385));
        float _1288;
        if (_1256 > 0.0)
        {
            _1288 = abs((1.0 - _1245) / _1256);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1256 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1245 + 1.0) / _1256);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1288 = frontier_phi_19_17_ladder;
        }
        float _1496;
        if (_1259 > 0.0)
        {
            _1496 = abs((1.0 - _1249) / _1259);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1259 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1249 + 1.0) / _1259);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1496 = frontier_phi_28_24_ladder;
        }
        float _1685;
        if (_1262 > 0.0)
        {
            _1685 = abs((1.0 - _1253) / _1262);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1262 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1253 + 1.0) / _1262);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1685 = frontier_phi_40_35_ladder;
        }
        float _1687 = isnan(_1496) ? _1288 : (isnan(_1288) ? _1496 : min(_1288, _1496));
        float _1688 = isnan(_1685) ? _1687 : (isnan(_1687) ? _1685 : min(_1687, _1685));
        float _1692 = (_1688 * _1256) + _1245;
        float _1693 = (_1688 * _1259) + _1249;
        float _1694 = (_1688 * _1262) + _1253;
        float _1695 = _1688 * 9.9999997473787516355514526367188e-05;
        float _1697 = (-1.0) - _1695;
        float _1699 = _1695 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1694 > _1699) || ((_1694 < _1697) || ((_1693 > _1699) || ((_1693 < _1697) || ((_1692 < _1697) || (_1692 > _1699))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1791 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1694, cbModelParam._m0[9u].z, fma(_1693, cbModelParam._m0[9u].y, _1692 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1694, cbModelParam._m0[10u].z, fma(_1693, cbModelParam._m0[10u].y, _1692 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1694, cbModelParam._m0[11u].z, fma(_1693, cbModelParam._m0[11u].y, _1692 * cbModelParam._m0[11u].x))), _1196);
            frontier_phi_18_40_ladder = _1791.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1791.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1791.x * cbModelParam._m0[1u].y;
        }
        _1278 = frontier_phi_18_40_ladder_2;
        _1280 = frontier_phi_18_40_ladder_1;
        _1282 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1266 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_385, _386, _387), _1196);
        _1278 = _1266.x * cbModelParam._m0[1u].y;
        _1280 = _1266.y * cbModelParam._m0[1u].y;
        _1282 = _1266.z * cbModelParam._m0[1u].y;
    }
    float _1285 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1378;
    float _1380;
    float _1382;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1342 = fma(_417, cbModelParam._m0[21u].z, fma(_413, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _409)) + cbModelParam._m0[21u].w;
        float _1346 = fma(_417, cbModelParam._m0[22u].z, fma(_413, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _409)) + cbModelParam._m0[22u].w;
        float _1350 = fma(_417, cbModelParam._m0[23u].z, fma(_413, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _409)) + cbModelParam._m0[23u].w;
        float _1353 = fma(_387, cbModelParam._m0[21u].z, fma(_386, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _385));
        float _1356 = fma(_387, cbModelParam._m0[22u].z, fma(_386, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _385));
        float _1359 = fma(_387, cbModelParam._m0[23u].z, fma(_386, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _385));
        float _1501;
        if (_1353 > 0.0)
        {
            _1501 = abs((1.0 - _1342) / _1353);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1353 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1342 + 1.0) / _1353);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1501 = frontier_phi_30_26_ladder;
        }
        float _1712;
        if (_1356 > 0.0)
        {
            _1712 = abs((1.0 - _1346) / _1356);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1356 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1346 + 1.0) / _1356);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1712 = frontier_phi_42_37_ladder;
        }
        float _1863;
        if (_1359 > 0.0)
        {
            _1863 = abs((1.0 - _1350) / _1359);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1359 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1350 + 1.0) / _1359);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _1863 = frontier_phi_51_48_ladder;
        }
        float _1865 = isnan(_1712) ? _1501 : (isnan(_1501) ? _1712 : min(_1501, _1712));
        float _1866 = isnan(_1863) ? _1865 : (isnan(_1865) ? _1863 : min(_1865, _1863));
        float _1870 = (_1866 * _1353) + _1342;
        float _1871 = (_1866 * _1356) + _1346;
        float _1872 = (_1866 * _1359) + _1350;
        float _1873 = _1866 * 9.9999997473787516355514526367188e-05;
        float _1874 = (-1.0) - _1873;
        float _1876 = _1873 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_1872 > _1876) || ((_1872 < _1874) || ((_1871 > _1876) || ((_1871 < _1874) || ((_1870 < _1874) || (_1870 > _1876))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2070 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1872, cbModelParam._m0[17u].z, fma(_1871, cbModelParam._m0[17u].y, _1870 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1872, cbModelParam._m0[18u].z, fma(_1871, cbModelParam._m0[18u].y, _1870 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1872, cbModelParam._m0[19u].z, fma(_1871, cbModelParam._m0[19u].y, _1870 * cbModelParam._m0[19u].x))), _1285);
            frontier_phi_27_51_ladder = _2070.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2070.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2070.x * cbModelParam._m0[1u].z;
        }
        _1378 = frontier_phi_27_51_ladder_2;
        _1380 = frontier_phi_27_51_ladder_1;
        _1382 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1362 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_385, _386, _387), _1285);
        _1378 = _1362.x * cbModelParam._m0[1u].z;
        _1380 = _1362.y * cbModelParam._m0[1u].z;
        _1382 = _1362.z * cbModelParam._m0[1u].z;
    }
    float _1394 = _376 * 0.01200000010430812835693359375;
    float _1396 = _1394 * ((cbModelParam._m0[1u].w * (_1378 - _1278)) + _1278);
    float _1397 = _1394 * ((cbModelParam._m0[1u].w * (_1380 - _1280)) + _1280);
    float _1398 = _1394 * ((cbModelParam._m0[1u].w * (_1382 - _1282)) + _1282);
    float _1401 = fma(_1398, cbSceneParam._m0[89u].z, fma(_1397, cbSceneParam._m0[89u].y, _1396 * cbSceneParam._m0[89u].x));
    float _1404 = fma(_1398, cbSceneParam._m0[90u].z, fma(_1397, cbSceneParam._m0[90u].y, _1396 * cbSceneParam._m0[90u].x));
    float _1407 = fma(_1398, cbSceneParam._m0[91u].z, fma(_1397, cbSceneParam._m0[91u].y, _1396 * cbSceneParam._m0[91u].x));
    uvec4 _1417 = floatBitsToUint(cbInstanceData._m0[_350 + 5u]);
    uint _1419 = _1417.x * 14u;
    uint _1420 = _1419 + 13u;
    float _1427 = _376 + (-1.0);
    float _1433 = (cbLight._m0[_1420].x * _1427) + 1.0;
    float _1434 = (cbLight._m0[_1420].y * _1427) + 1.0;
    float _1435 = (cbLight._m0[_1420].z * _1427) + 1.0;
    float _1436 = (cbLight._m0[_1420].w * _1427) + 1.0;
    uint _1437 = _1419 + 5u;
    float _1443 = isnan(1.0) ? _1434 : (isnan(_1434) ? 1.0 : min(_1434, 1.0));
    uint _1447 = _1419 + 4u;
    float _1454 = isnan(1.0) ? _1433 : (isnan(_1433) ? 1.0 : min(_1433, 1.0));
    uint _1458 = _1419 | 1u;
    float _1469 = dot(vec3(cbLight._m0[_1419].xyz), vec3(_208, _209, _210));
    float _1472 = dot(vec3(cbLight._m0[_1458].xyz), vec3(_208, _209, _210));
    float _3382 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
    float _3393 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
    float _1477 = (isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0))) * 0.3183098733425140380859375;
    float _1479 = (isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0))) * 0.3183098733425140380859375;
    float _1486 = ((cbLight._m0[_1437].x * _1443) * _1479) + ((cbLight._m0[_1447].x * _1454) * _1477);
    float _1487 = ((_1443 * cbLight._m0[_1437].y) * _1479) + ((_1454 * cbLight._m0[_1447].y) * _1477);
    float _1488 = ((_1443 * cbLight._m0[_1437].z) * _1479) + ((_1454 * cbLight._m0[_1447].z) * _1477);
    uvec4 _1493 = floatBitsToUint(cbLight._m0[_1419 + 12u]);
    bool _1495 = _1493.x == 0u;
    float _1506;
    float _1508;
    float _1510;
    if (_1495)
    {
        _1506 = _1486;
        _1508 = _1487;
        _1510 = _1488;
    }
    else
    {
        uint _1514 = _1419 + 6u;
        float _1530 = (dot(vec3(cbLight._m0[_1419 + 2u].xyz), vec3(_208, _209, _210)) * 0.5) + 0.5;
        float _1531 = _1530 * _1530;
        float _3404 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
        float _1533 = isnan(1.0) ? _1435 : (isnan(_1435) ? 1.0 : min(_1435, 1.0));
        _1506 = (((cbLight._m0[_1514].x * 0.3183098733425140380859375) * _1532) * _1533) + _1486;
        _1508 = (((cbLight._m0[_1514].y * 0.3183098733425140380859375) * _1532) * _1533) + _1487;
        _1510 = (((cbLight._m0[_1514].z * 0.3183098733425140380859375) * _1532) * _1533) + _1488;
    }
    bool _1513 = _1493.y == 0u;
    float _1551;
    float _1553;
    float _1555;
    if (_1513)
    {
        _1551 = _1506;
        _1553 = _1508;
        _1555 = _1510;
    }
    else
    {
        uint _1656 = _1419 + 7u;
        float _1672 = (dot(vec3(cbLight._m0[_1419 + 3u].xyz), vec3(_208, _209, _210)) * 0.5) + 0.5;
        float _1673 = _1672 * _1672;
        float _3420 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1674 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
        float _1675 = isnan(1.0) ? _1436 : (isnan(_1436) ? 1.0 : min(_1436, 1.0));
        _1551 = (((cbLight._m0[_1656].x * 0.3183098733425140380859375) * _1674) * _1675) + _1506;
        _1553 = (((cbLight._m0[_1656].y * 0.3183098733425140380859375) * _1674) * _1675) + _1508;
        _1555 = (((cbLight._m0[_1656].z * 0.3183098733425140380859375) * _1674) * _1675) + _1510;
    }
    uint _1557 = _1419 + 8u;
    float _1563 = cbLight._m0[_1419].x + _289;
    float _1564 = cbLight._m0[_1419].y + _290;
    float _1565 = cbLight._m0[_1419].z + _291;
    float _1569 = inversesqrt(dot(vec3(_1563, _1564, _1565), vec3(_1563, _1564, _1565)));
    float _1573 = dot(vec3(_208, _209, _210), vec3(cbLight._m0[_1419].xyz));
    float _3436 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
    float _1576 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
    float _3447 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _1577 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
    float _1578 = dot(vec3(cbLight._m0[_1419].xyz), vec3(_1563 * _1569, _1564 * _1569, _1565 * _1569));
    float _3458 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
    float _1589 = (exp2(log2(1.0 - (isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1595 = (0.5 / ((_1576 + 9.9999999392252902907785028219223e-09) + _1577)) * _1576;
    float _3469 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
    float _1597 = (isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0))) * 0.31831014156341552734375;
    uint _1608 = _1419 + 9u;
    float _1614 = cbLight._m0[_1458].x + _289;
    float _1615 = cbLight._m0[_1458].y + _290;
    float _1616 = cbLight._m0[_1458].z + _291;
    float _1620 = inversesqrt(dot(vec3(_1614, _1615, _1616), vec3(_1614, _1615, _1616)));
    float _1624 = dot(vec3(_208, _209, _210), vec3(cbLight._m0[_1458].xyz));
    float _3480 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
    float _1627 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
    float _1628 = dot(vec3(cbLight._m0[_1458].xyz), vec3(_1614 * _1620, _1615 * _1620, _1616 * _1620));
    float _3491 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
    float _1637 = (exp2(log2(1.0 - (isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1641 = (0.5 / ((_1627 + 9.9999999392252902907785028219223e-09) + _1577)) * _1627;
    float _3502 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
    float _1643 = (isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0))) * 0.31831014156341552734375;
    float _1653 = (((_1637 * cbLight._m0[_1608].x) * _1643) * _1443) + (((_1589 * cbLight._m0[_1557].x) * _1597) * _1454);
    float _1654 = (((_1637 * cbLight._m0[_1608].y) * _1643) * _1443) + (((_1589 * cbLight._m0[_1557].y) * _1597) * _1454);
    float _1655 = (((_1637 * cbLight._m0[_1608].z) * _1643) * _1443) + (((_1589 * cbLight._m0[_1557].z) * _1597) * _1454);
    float _1717;
    float _1719;
    float _1721;
    if (_1495)
    {
        _1717 = _1653;
        _1719 = _1654;
        _1721 = _1655;
    }
    else
    {
        uint _1723 = _1419 + 10u;
        uint _1729 = _1419 + 2u;
        float _1735 = cbLight._m0[_1729].x + _289;
        float _1736 = cbLight._m0[_1729].y + _290;
        float _1737 = cbLight._m0[_1729].z + _291;
        float _1741 = inversesqrt(dot(vec3(_1735, _1736, _1737), vec3(_1735, _1736, _1737)));
        float _1745 = dot(vec3(_208, _209, _210), vec3(cbLight._m0[_1729].xyz));
        float _3513 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1748 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
        float _1749 = dot(vec3(cbLight._m0[_1729].xyz), vec3(_1735 * _1741, _1736 * _1741, _1737 * _1741));
        float _3524 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1758 = (exp2(log2(1.0 - (isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1762 = (0.5 / ((_1748 + 9.9999999392252902907785028219223e-09) + _1577)) * _1748;
        float _3535 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1764 = (isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))) * 0.31831014156341552734375;
        float _1765 = isnan(1.0) ? _1435 : (isnan(_1435) ? 1.0 : min(_1435, 1.0));
        _1717 = (((_1758 * cbLight._m0[_1723].x) * _1764) * _1765) + _1653;
        _1719 = (((_1758 * cbLight._m0[_1723].y) * _1764) * _1765) + _1654;
        _1721 = (((_1758 * cbLight._m0[_1723].z) * _1764) * _1765) + _1655;
    }
    float _1800;
    float _1802;
    float _1804;
    if (_1513)
    {
        _1800 = _1717;
        _1802 = _1719;
        _1804 = _1721;
    }
    else
    {
        uint _1811 = _1419 + 11u;
        uint _1817 = _1419 + 3u;
        float _1823 = cbLight._m0[_1817].x + _289;
        float _1824 = cbLight._m0[_1817].y + _290;
        float _1825 = cbLight._m0[_1817].z + _291;
        float _1829 = inversesqrt(dot(vec3(_1823, _1824, _1825), vec3(_1823, _1824, _1825)));
        float _1833 = dot(vec3(_208, _209, _210), vec3(cbLight._m0[_1817].xyz));
        float _3551 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
        float _1836 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
        float _1837 = dot(vec3(cbLight._m0[_1817].xyz), vec3(_1823 * _1829, _1824 * _1829, _1825 * _1829));
        float _3562 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
        float _1846 = (exp2(log2(1.0 - (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1850 = (0.5 / ((_1836 + 9.9999999392252902907785028219223e-09) + _1577)) * _1836;
        float _3573 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
        float _1852 = (isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) * 0.31831014156341552734375;
        float _1853 = isnan(1.0) ? _1436 : (isnan(_1436) ? 1.0 : min(_1436, 1.0));
        _1800 = (((_1846 * cbLight._m0[_1811].x) * _1852) * _1853) + _1717;
        _1802 = (((_1846 * cbLight._m0[_1811].y) * _1852) * _1853) + _1719;
        _1804 = (((_1846 * cbLight._m0[_1811].z) * _1852) * _1853) + _1721;
    }
    float _1987;
    float _1989;
    float _1991;
    float _1993;
    float _1995;
    float _1997;
    if (_1417.y == 0u)
    {
        float _1928 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1929 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1928;
        float _1930 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1928;
        float _1931 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1928;
        uvec4 _1943 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1944 = _1943.x;
        uint _1955 = uint((float(_1943.y) * floor(float(uint(cbSceneParam._m0[85u].y * _311) / _1944))) + floor(float(uint(cbSceneParam._m0[85u].x * _310) / _1944)));
        float _1965 = (log2(_1931 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1966 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
        uint _1969 = uint(isnan(14.0) ? _1966 : (isnan(_1966) ? 14.0 : min(_1966, 14.0)));
        uvec4 _1974 = texelFetch(g_lightClusterGridBuffer, int(((_1969 << 2u) + (_1955 << 6u)) >> 2u));
        uint _1975 = _1974.x;
        uint _1976 = _1943.z;
        float _2075;
        float _2077;
        float _2079;
        float _2081;
        float _2083;
        float _2085;
        if (((((1u << ((_1976 >> 4u) & 15u)) + 4294967295u) & _1975) == 0u) || ((_1976 & 240u) == 0u))
        {
            _2075 = 0.0;
            _2077 = 0.0;
            _2079 = 0.0;
            _2081 = 0.0;
            _2083 = 0.0;
            _2085 = 0.0;
        }
        else
        {
            float _2076;
            float _2078;
            float _2080;
            float _2082;
            float _2084;
            float _2086;
            float _2226 = 0.0;
            float _2227 = 0.0;
            float _2228 = 0.0;
            float _2229 = 0.0;
            float _2230 = 0.0;
            float _2231 = 0.0;
            uint _2232 = 0u;
            uint _2241;
            bool _2242;
            for (;;)
            {
                _2241 = texelFetch(g_lightClassification, int((((_1969 << 5u) + (_1955 << 9u)) + (_2232 << 2u)) >> 2u)).x;
                _2242 = _2241 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2242)
                {
                    frontier_phi_68_pred = _2228;
                    frontier_phi_68_pred_1 = _2231;
                    frontier_phi_68_pred_2 = _2230;
                    frontier_phi_68_pred_3 = _2229;
                    frontier_phi_68_pred_4 = _2227;
                    frontier_phi_68_pred_5 = _2226;
                }
                else
                {
                    float _2371;
                    float _2372;
                    float _2373;
                    float _2374;
                    float _2375;
                    float _2376;
                    uint _2377;
                    _2371 = _2226;
                    _2372 = _2227;
                    _2373 = _2228;
                    _2374 = _2229;
                    _2375 = _2230;
                    _2376 = _2231;
                    _2377 = _2241;
                    float _2298;
                    float _2299;
                    float _2300;
                    float _2301;
                    float _2302;
                    float _2303;
                    for (;;)
                    {
                        uint _2381 = uint(findLSB(_2377)) + (_2232 << 5u);
                        uint _2378 = (_2377 + 4294967295u) & _2377;
                        uint _2383 = _2381 * 48u;
                        vec4 _2397 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2383)).x, texelFetch(g_PointLightRenderingBuffer, int(_2383 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2383 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2383 + 3u)).x));
                        uint _2403 = (_2381 * 48u) + 4u;
                        vec4 _2416 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2403)).x, texelFetch(g_PointLightRenderingBuffer, int(_2403 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2403 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2403 + 3u)).x));
                        uint _2422 = (_2381 * 48u) + 8u;
                        vec3 _2433 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2422)).x, texelFetch(g_PointLightRenderingBuffer, int(_2422 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2422 + 2u)).x));
                        float _2437 = _2397.x - _1929;
                        float _2438 = _2397.y - _1930;
                        float _2439 = _2397.z - _1931;
                        float _2440 = dot(vec3(_2437, _2438, _2439), vec3(_2437, _2438, _2439));
                        float _2443 = inversesqrt(_2440);
                        float _2452 = 1.0 - (_2440 * _2397.w);
                        float _3599 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
                        float _2453 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
                        float _2454 = sqrt(_2440) * _2416.w;
                        float _2457 = 1.39999997615814208984375 / (_2454 + 1.39999997615814208984375);
                        float _2458 = _2457 * _2457;
                        float _2461 = ((1.0 - _2458) * dot(vec3(_331, _334, _337), vec3(_2443 * _2437, _2443 * _2438, _2443 * _2439))) + _2458;
                        float _2464 = _2454 * _2454;
                        float _2468 = ((isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0))) * _2453) / ((_2464 * 0.699999988079071044921875) + 1.0);
                        float _2472 = (-0.0) - _1929;
                        float _2473 = (-0.0) - _1930;
                        float _2474 = (-0.0) - _1931;
                        float _2478 = inversesqrt(dot(vec3(_2472, _2473, _2474), vec3(_2472, _2473, _2474)));
                        float _2482 = dot(vec3(_331, _334, _337), vec3(_2478 * _2472, _2478 * _2473, _2478 * _2474));
                        float _3615 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
                        float _3626 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
                        float _2486 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
                        float _2490 = (0.5 / (((isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0))) + 9.9999999392252902907785028219223e-09) + _2486)) * _2486;
                        float _3637 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
                        float _2499 = (((isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * 3.1415927410125732421875) / ((_2464 * 2.1991131305694580078125) + 3.141590118408203125)) * _2453;
                        _2301 = (_2468 * _2416.x) + _2374;
                        _2302 = (_2468 * _2416.y) + _2375;
                        _2303 = (_2468 * _2416.z) + _2376;
                        _2298 = (_2499 * _2433.x) + _2371;
                        _2299 = (_2499 * _2433.y) + _2372;
                        _2300 = (_2499 * _2433.z) + _2373;
                        if (_2378 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2371 = _2298;
                            _2372 = _2299;
                            _2373 = _2300;
                            _2374 = _2301;
                            _2375 = _2302;
                            _2376 = _2303;
                            _2377 = _2378;
                        }
                    }
                    frontier_phi_68_pred = _2300;
                    frontier_phi_68_pred_1 = _2303;
                    frontier_phi_68_pred_2 = _2302;
                    frontier_phi_68_pred_3 = _2301;
                    frontier_phi_68_pred_4 = _2299;
                    frontier_phi_68_pred_5 = _2298;
                }
                _2080 = frontier_phi_68_pred;
                _2086 = frontier_phi_68_pred_1;
                _2084 = frontier_phi_68_pred_2;
                _2082 = frontier_phi_68_pred_3;
                _2078 = frontier_phi_68_pred_4;
                _2076 = frontier_phi_68_pred_5;
                uint _2233 = _2232 + 1u;
                if (_2233 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2226 = _2076;
                    _2227 = _2078;
                    _2228 = _2080;
                    _2229 = _2082;
                    _2230 = _2084;
                    _2231 = _2086;
                    _2232 = _2233;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2075 = _2076;
            _2077 = _2078;
            _2079 = _2080;
            _2081 = _2082;
            _2083 = _2084;
            _2085 = _2086;
        }
        uvec4 _2089 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2090 = _2089.z;
        uint _2092 = (_2090 >> 8u) & 15u;
        float _2197;
        float _2199;
        float _2201;
        float _2203;
        float _2205;
        float _2207;
        if (((4294967295u << _2092) & _1975) == 0u)
        {
            _2197 = _2075;
            _2199 = _2077;
            _2201 = _2079;
            _2203 = _2081;
            _2205 = _2083;
            _2207 = _2085;
        }
        else
        {
            float _2222 = inversesqrt(dot(vec3(_1929, _1930, _1931), vec3(_1929, _1930, _1931)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2092 < ((_2090 >> 12u) & 15u))
            {
                float _2198;
                float _2200;
                float _2202;
                float _2204;
                float _2206;
                float _2208;
                float _2354 = _2075;
                float _2355 = _2077;
                float _2356 = _2079;
                float _2357 = _2081;
                float _2358 = _2083;
                float _2359 = _2085;
                uint _2360 = _2092;
                uint _2369;
                bool _2370;
                for (;;)
                {
                    _2369 = texelFetch(g_lightClassification, int((((_1969 << 5u) + (_1955 << 9u)) + (_2360 << 2u)) >> 2u)).x;
                    _2370 = _2369 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2370)
                    {
                        frontier_phi_79_pred = _2359;
                        frontier_phi_79_pred_1 = _2358;
                        frontier_phi_79_pred_2 = _2357;
                        frontier_phi_79_pred_3 = _2356;
                        frontier_phi_79_pred_4 = _2355;
                        frontier_phi_79_pred_5 = _2354;
                    }
                    else
                    {
                        float _2513;
                        float _2514;
                        float _2515;
                        float _2516;
                        float _2517;
                        float _2518;
                        float _2765;
                        float _2766;
                        float _2767;
                        float _2768;
                        float _2769;
                        float _2770;
                        float _2526 = _2354;
                        float _2527 = _2355;
                        float _2528 = _2356;
                        float _2529 = _2357;
                        float _2530 = _2358;
                        float _2531 = _2359;
                        uint _2532 = _2369;
                        uint _2533;
                        vec4 _2558;
                        float _2559;
                        vec4 _2574;
                        vec3 _2586;
                        vec4 _2602;
                        vec4 _2618;
                        float _2665;
                        bool _2666;
                        for (;;)
                        {
                            uint _2543 = ((_2360 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2532));
                            _2533 = (_2532 + 4294967295u) & _2532;
                            uint _2545 = _2543 * 40u;
                            _2558 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2545)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2545 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2545 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2545 + 3u)).x));
                            _2559 = _2558.w;
                            uint _2561 = (_2543 * 40u) + 4u;
                            _2574 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2561)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2561 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2561 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2561 + 3u)).x));
                            uint _2576 = (_2543 * 40u) + 8u;
                            _2586 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2576)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2576 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2576 + 2u)).x));
                            uint _2589 = (_2543 * 40u) + 16u;
                            _2602 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2589)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2589 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2589 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2589 + 3u)).x));
                            uint _2605 = (_2543 * 40u) + 20u;
                            _2618 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2605)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2605 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2605 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2605 + 3u)).x));
                            uint _2621 = (_2543 * 40u) + 24u;
                            vec4 _2634 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2621)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2621 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2621 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2621 + 3u)).x));
                            uint _2640 = (_2543 * 40u) + 28u;
                            vec4 _2653 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2640)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2640 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2640 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2640 + 3u)).x));
                            _2665 = fma(_1931, _2653.z, fma(_1930, _2653.y, _2653.x * _1929)) + _2653.w;
                            _2666 = !((fma(_1931, _2634.z, fma(_1930, _2634.y, _2634.x * _1929)) + _2634.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2666)
                            {
                                float _2693 = _2558.x - _1929;
                                float _2694 = _2558.y - _1930;
                                float _2695 = _2558.z - _1931;
                                float _2696 = dot(vec3(_2693, _2694, _2695), vec3(_2693, _2694, _2695));
                                float _2699 = inversesqrt(_2696);
                                float _2700 = _2699 * _2693;
                                float _2701 = _2699 * _2694;
                                float _2702 = _2699 * _2695;
                                float _2706 = 1.0 - (_2696 / (_2559 * _2559));
                                float _3648 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
                                float _2707 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
                                float _2711 = sqrt(_2696) * _2574.w;
                                float _2713 = 1.39999997615814208984375 / (_2711 + 1.39999997615814208984375);
                                float _2714 = _2713 * _2713;
                                float _2715 = 1.0 - _2714;
                                float _2717 = (_2715 * dot(vec3(_2700, _2701, _2702), vec3(_331, _334, _337))) + _2714;
                                float _2720 = _2711 * _2711;
                                float _2724 = (fma(_1931, _2602.z, fma(_1930, _2602.y, _2602.x * _1929)) + _2602.w) / _2665;
                                float _2725 = (fma(_1931, _2618.z, fma(_1930, _2618.y, _2618.x * _1929)) + _2618.w) / _2665;
                                float _2729 = 1.0 - dot(vec2(_2724, _2725), vec2(_2724, _2725));
                                float _3664 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
                                float _2730 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
                                float _2731 = _2730 * (((isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0))) * _2707) / ((_2720 * 0.699999988079071044921875) + 1.0));
                                float _2741 = dot(vec3(_331, _334, _337), vec3((-0.0) - (_1929 * _2222), (-0.0) - (_1930 * _2222), (-0.0) - (_1931 * _2222)));
                                float _3675 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
                                float _2749 = (_2715 * dot(vec3(_331, _334, _337), vec3(_2700, _2701, _2702))) + _2714;
                                float _3686 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
                                float _2750 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
                                float _2754 = (0.5 / (((isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) + 9.9999999392252902907785028219223e-09) + _2750)) * _2750;
                                float _3697 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
                                float _2761 = (_2730 * _2707) * (((isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * 3.1415927410125732421875) / ((_2720 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_85_pred = _2731 * _2574.z;
                                frontier_phi_85_pred_1 = _2731 * _2574.y;
                                frontier_phi_85_pred_2 = _2731 * _2574.x;
                                frontier_phi_85_pred_3 = _2761 * _2586.z;
                                frontier_phi_85_pred_4 = _2761 * _2586.y;
                                frontier_phi_85_pred_5 = _2761 * _2586.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _2770 = frontier_phi_85_pred;
                            _2769 = frontier_phi_85_pred_1;
                            _2768 = frontier_phi_85_pred_2;
                            _2767 = frontier_phi_85_pred_3;
                            _2766 = frontier_phi_85_pred_4;
                            _2765 = frontier_phi_85_pred_5;
                            _2516 = _2768 + _2529;
                            _2517 = _2769 + _2530;
                            _2518 = _2770 + _2531;
                            _2513 = _2765 + _2526;
                            _2514 = _2766 + _2527;
                            _2515 = _2767 + _2528;
                            if (_2533 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2526 = _2513;
                                _2527 = _2514;
                                _2528 = _2515;
                                _2529 = _2516;
                                _2530 = _2517;
                                _2531 = _2518;
                                _2532 = _2533;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2518;
                        frontier_phi_79_pred_1 = _2517;
                        frontier_phi_79_pred_2 = _2516;
                        frontier_phi_79_pred_3 = _2515;
                        frontier_phi_79_pred_4 = _2514;
                        frontier_phi_79_pred_5 = _2513;
                    }
                    _2208 = frontier_phi_79_pred;
                    _2206 = frontier_phi_79_pred_1;
                    _2204 = frontier_phi_79_pred_2;
                    _2202 = frontier_phi_79_pred_3;
                    _2200 = frontier_phi_79_pred_4;
                    _2198 = frontier_phi_79_pred_5;
                    uint _2361 = _2360 + 1u;
                    if (_2361 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2354 = _2198;
                        _2355 = _2200;
                        _2356 = _2202;
                        _2357 = _2204;
                        _2358 = _2206;
                        _2359 = _2208;
                        _2360 = _2361;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2204;
                frontier_phi_60_61_ladder_1 = _2208;
                frontier_phi_60_61_ladder_2 = _2206;
                frontier_phi_60_61_ladder_3 = _2202;
                frontier_phi_60_61_ladder_4 = _2200;
                frontier_phi_60_61_ladder_5 = _2198;
            }
            else
            {
                frontier_phi_60_61_ladder = _2081;
                frontier_phi_60_61_ladder_1 = _2085;
                frontier_phi_60_61_ladder_2 = _2083;
                frontier_phi_60_61_ladder_3 = _2079;
                frontier_phi_60_61_ladder_4 = _2077;
                frontier_phi_60_61_ladder_5 = _2075;
            }
            _2197 = frontier_phi_60_61_ladder_5;
            _2199 = frontier_phi_60_61_ladder_4;
            _2201 = frontier_phi_60_61_ladder_3;
            _2203 = frontier_phi_60_61_ladder;
            _2205 = frontier_phi_60_61_ladder_2;
            _2207 = frontier_phi_60_61_ladder_1;
        }
        float _2212 = isnan(1.0) ? _376 : (isnan(_376) ? 1.0 : min(_376, 1.0));
        _1987 = (_2212 * _2203) + _1551;
        _1989 = (_2212 * _2205) + _1553;
        _1991 = (_2212 * _2207) + _1555;
        _1993 = ((_2197 * 0.039999999105930328369140625) * _2212) + _1800;
        _1995 = ((_2199 * 0.039999999105930328369140625) * _2212) + _1802;
        _1997 = ((_2201 * 0.039999999105930328369140625) * _2212) + _1804;
    }
    else
    {
        _1987 = _1551;
        _1989 = _1553;
        _1991 = _1555;
        _1993 = _1800;
        _1995 = _1802;
        _1997 = _1804;
    }
    float _3713 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _3724 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _3735 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _2014 = ((isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * (_1987 + ((isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0))) * _376))) + ((_1993 + ((isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))) * _1187)) * cbPerFrame._m0[3u].x);
    float _2015 = ((isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * (_1989 + ((isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0))) * _376))) + ((_1995 + ((isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))) * _1187)) * cbPerFrame._m0[3u].x);
    float _2016 = ((isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * (_1991 + ((isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0))) * _376))) + ((_1997 + ((isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0))) * _1187)) * cbPerFrame._m0[3u].x);
    uint _2017 = _350 + 6u;
    float _2025 = _310 / cbSceneParam._m0[86u].x;
    float _2026 = _311 / cbSceneParam._m0[86u].y;
    vec4 _2040 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2025, _2026, (log2((isnan(cbSceneParam._m0[77u].w) ? _230 : (isnan(_230) ? cbSceneParam._m0[77u].w : min(_230, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2042 = _2040.x;
    float _2043 = _2040.y;
    float _2044 = _2040.z;
    float _2045 = _2040.w;
    float _2137;
    float _2139;
    float _2141;
    float _2143;
    if (_230 > cbSceneParam._m0[78u].w)
    {
        float _2100 = isnan(_230) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _230 : min(cbSceneParam._m0[80u].w, _230));
        float _2101 = _2100 / _230;
        float _2112 = _2101 * _282;
        float _2113 = _283 * _2101;
        float _2114 = (-0.0) - _2113;
        float _2115 = _2101 * _284;
        float _2117 = (cbSceneParam._m0[77u].w * _2114) / _2100;
        float _2118 = _2117 + cbSceneParam._m0[79u].w;
        float _2119 = cbSceneParam._m0[79u].w - _2113;
        float _2125 = sqrt(((_2112 * _2112) + (_2113 * _2113)) + (_2115 * _2115));
        float _2128 = (1.0 - (cbSceneParam._m0[77u].w / _2100)) * _2125;
        float _2133 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2135 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2311;
        if (abs((_2114 - _2117) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2311 = ((((_2118 > 0.0) ? exp2(_2133 * _2118) : (2.0 - exp2(_2135 * _2118))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2128;
        }
        else
        {
            float _2255 = 1.0 / cbSceneParam._m0[80u].x;
            float _2256 = isnan(_2119) ? _2118 : (isnan(_2118) ? _2119 : max(_2118, _2119));
            float _2257 = isnan(_2119) ? _2118 : (isnan(_2118) ? _2119 : min(_2118, _2119));
            float _2266 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : min(_2256, 0.0));
            float _2267 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : min(_2257, 0.0));
            _2311 = ((abs(_2125 / _2114) * cbSceneParam._m0[80u].y) * ((((_2266 - _2267) * 2.0) - ((exp2(_2133 * (isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0)))) - exp2(_2133 * (isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0))))) * _2255)) - ((exp2(_2135 * _2266) - exp2(_2135 * _2267)) * _2255))) + (_2128 * cbSceneParam._m0[80u].z);
        }
        vec4 _2313 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2025, _2026, 1.0), 0.0);
        float _2322 = exp2((_2311 * (-1.44269502162933349609375)) * (1.0 - _2313.w));
        float _2323 = log2(_2322);
        float _2339 = log2(_2045);
        _2137 = (exp2(_2339 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2323 * cbSceneParam._m0[78u].x)) * _2313.x) / cbSceneParam._m0[78u].x)) + _2042;
        _2139 = (exp2(_2339 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2323 * cbSceneParam._m0[78u].y)) * _2313.y) / cbSceneParam._m0[78u].y)) + _2043;
        _2141 = (exp2(_2339 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2323 * cbSceneParam._m0[78u].z)) * _2313.z) / cbSceneParam._m0[78u].z)) + _2044;
        _2143 = _2322 * _2045;
    }
    else
    {
        _2137 = _2042;
        _2139 = _2043;
        _2141 = _2044;
        _2143 = _2045;
    }
    bool _2349;
    vec4 _2153;
    vec4 _2176;
    float _2178;
    float _2182;
    float _2183;
    float _2184;
    float _2185;
    bool _2196;
    for (;;)
    {
        _2153 = cbMatDynParam._m0[0u];
        float _2155 = roundEven(_2153.y);
        bool _2156 = _2155 == 3.0;
        float _2158 = log2(_2143);
        float _2165 = exp2(_2158 * cbSceneParam._m0[78u].x) * _2014;
        float _2166 = exp2(_2158 * cbSceneParam._m0[78u].y) * _2015;
        float _2167 = exp2(_2158 * cbSceneParam._m0[78u].z) * _2016;
        float _2174 = _298 + (-0.5);
        _2176 = cbMtdParam._m0[1u];
        _2178 = _2176.y * _2174;
        float _2181 = (_2155 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2182 = _2181 * (_2156 ? _2165 : (_2165 + (cbSceneParam._m0[72u].w * _2137)));
        _2183 = _2181 * (_2156 ? _2166 : (_2166 + (cbSceneParam._m0[72u].w * _2139)));
        _2184 = _2181 * (_2156 ? _2167 : (_2167 + (cbSceneParam._m0[72u].w * _2141)));
        _2185 = _2174 * 0.999000012874603271484375;
        _2196 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2196)
        {
            if ((cbInstanceData._m0[_350 + 7u].x + _2185) < 0.5)
            {
                _2349 = true;
                break;
            }
        }
        uint _2290 = _352 + uint(_2153.w);
        if ((cbInstanceData._m0[_2290].w < 1.0) && ((cbInstanceData._m0[_2290].w + _2185) < 0.5))
        {
            _2349 = true;
            break;
        }
        if ((_2178 + 1.0) < _2176.x)
        {
            _2349 = true;
            break;
        }
        _2349 = false;
        break;
    }
    float _2504;
    if (_2349)
    {
        discard_state = true;
        _2504 = 0.0;
    }
    else
    {
        _2504 = cbInstanceData._m0[_2017].w;
    }
    SV_Target.x = _2182;
    SV_Target.y = _2183;
    SV_Target.z = _2184;
    SV_Target.w = _2504;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2017].w;
    discard_exit();
}


