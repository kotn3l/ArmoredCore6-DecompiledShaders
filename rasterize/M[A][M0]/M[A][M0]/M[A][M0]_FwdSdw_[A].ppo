#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _753;
float _3202;
float _3203;
float _3204;
float _3205;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _169 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _170 = _169 * NORMAL.x;
    float _171 = _169 * NORMAL.y;
    float _172 = _169 * NORMAL.z;
    float _177;
    float _178;
    float _179;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _177 = (-0.0) - _170;
        _178 = (-0.0) - _171;
        _179 = (-0.0) - _172;
    }
    else
    {
        _177 = _170;
        _178 = _171;
        _179 = _172;
    }
    vec4 _199 = texture(sampler2D(M_A_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _205 = _199.x * cbMtdParam._m0[9u].x;
    float _206 = _199.y * cbMtdParam._m0[9u].y;
    float _207 = _199.z * cbMtdParam._m0[9u].z;
    float _211 = inversesqrt(dot(vec3(_177, _178, _179), vec3(_177, _178, _179)));
    float _212 = _211 * _177;
    float _213 = _211 * _178;
    float _214 = _211 * _179;
    float _3214 = isnan(0.0) ? _205 : (isnan(_205) ? 0.0 : max(_205, 0.0));
    float _3225 = isnan(0.0) ? _206 : (isnan(_206) ? 0.0 : max(_206, 0.0));
    float _3236 = isnan(0.0) ? _207 : (isnan(_207) ? 0.0 : max(_207, 0.0));
    float _234 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _276 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _286 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _276);
    float _287 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _276);
    float _288 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _276);
    float _292 = inversesqrt(dot(vec3(_286, _287, _288), vec3(_286, _287, _288)));
    float _293 = _286 * _292;
    float _294 = _287 * _292;
    float _295 = _288 * _292;
    vec4 _300 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _302 = _300.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _432 = sqrt(((_286 * _286) + (_287 * _287)) + (_288 * _288));
        float _438 = (cbMatDynParam._m0[5u].x * _432) + cbMatDynParam._m0[5u].y;
        float _3247 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
        float _439 = isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0));
        float _443 = (cbMatDynParam._m0[5u].z * _432) + cbMatDynParam._m0[5u].w;
        float _3258 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0))) - _439)) + _439) < ((_302 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _314 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _315 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _335 = fma(_214, cbSceneParam._m0[5u].z, fma(_213, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _212));
    float _338 = fma(_214, cbSceneParam._m0[6u].z, fma(_213, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _212));
    float _341 = fma(_214, cbSceneParam._m0[7u].z, fma(_213, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _212));
    uint _354 = uint(roundEven(NORMAL.w)) * 13u;
    uint _356 = _354 + 9u;
    uint _357 = _356 + uint(cbMatDynParam._m0[0u].w);
    float _363 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3214 : (isnan(_3214) ? 1.0 : min(_3214, 1.0)))) * cbInstanceData._m0[_357].x;
    float _364 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3225 : (isnan(_3225) ? 1.0 : min(_3225, 1.0)))) * cbInstanceData._m0[_357].y;
    float _365 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3236 : (isnan(_3236) ? 1.0 : min(_3236, 1.0)))) * cbInstanceData._m0[_357].z;
    float _3269 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _366 = isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0));
    float _3280 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _367 = isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0));
    float _3291 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _368 = isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0));
    vec4 _377 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _314, cbSceneParam._m0[86u].y * _315));
    float _380 = _377.x * TEXCOORD.z;
    float _381 = dot(vec3(_212, _213, _214), vec3(_293, _294, _295));
    float _384 = _381 * 2.0;
    float _389 = (_384 * _212) - _293;
    float _390 = (_384 * _213) - _294;
    float _391 = (_384 * _214) - _295;
    float _413 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _417 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _421 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _752;
    float _754;
    float _755;
    float _756;
    float _757;
    float _758;
    float _759;
    float _760;
    float _761;
    float _762;
    float _763;
    float _764;
    float _765;
    float _766;
    float _767;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _477 = fma(_421, cbModelParam._m0[26u].z, fma(_417, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _413));
        float _481 = fma(_421, cbModelParam._m0[27u].z, fma(_417, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _413));
        float _485 = fma(_421, cbModelParam._m0[28u].z, fma(_417, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _413));
        float _510 = _413 + _212;
        float _511 = _417 + _213;
        float _512 = _421 + _214;
        float _522 = fma(_512, cbModelParam._m0[26u].z, fma(_511, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _510)) - _477;
        float _523 = fma(_512, cbModelParam._m0[27u].z, fma(_511, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _510)) - _481;
        float _524 = fma(_512, cbModelParam._m0[28u].z, fma(_511, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _510)) - _485;
        float _528 = inversesqrt(dot(vec3(_522, _523, _524), vec3(_522, _523, _524)));
        float _541 = ((_528 * _522) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_477 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _542 = ((_528 * _523) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_481 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _543 = ((_528 * _524) / cbModelParam._m0[34u].z) + ((((((_485 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _546 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_541, _542, _543), 0.0);
        vec4 _553 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_541, _542, _543), 0.0);
        vec4 _560 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_541, _542, _543), 0.0);
        vec4 _567 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_541, _542, _543), 0.0);
        float _580 = exp2((_546.w + (-0.5)) * 20.0) * 2.0;
        float _581 = _580 * (_546.x + (-0.5));
        float _582 = _580 * (_546.y + (-0.5));
        float _583 = _580 * (_546.z + (-0.5));
        float _590 = exp2((_553.w + (-0.5)) * 20.0) * 2.0;
        float _591 = _590 * (_553.x + (-0.5));
        float _592 = _590 * (_553.y + (-0.5));
        float _593 = _590 * (_553.z + (-0.5));
        float _600 = exp2((_560.w + (-0.5)) * 20.0) * 2.0;
        float _601 = _600 * (_560.x + (-0.5));
        float _602 = _600 * (_560.y + (-0.5));
        float _603 = _600 * (_560.z + (-0.5));
        float _610 = exp2((_567.w + (-0.5)) * 20.0) * 2.0;
        float _611 = _610 * (_567.x + (-0.5));
        float _612 = _610 * (_567.y + (-0.5));
        float _613 = _610 * (_567.z + (-0.5));
        float _614 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
        float _615 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
        float _616 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
        float _617 = _581 * 0.5;
        float _618 = _591 * 0.5;
        float _619 = _601 * 0.5;
        float _620 = dot(vec3(_617, _618, _619), vec3(_617, _618, _619));
        float _625 = (_620 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_620);
        float _634 = (dot(vec3(_212, _213, _214), vec3(_625 * _617, _625 * _618, _625 * _619)) + 1.0) * 0.5;
        float _3317 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
        float _644 = sqrt(((_618 * _618) + (_617 * _617)) + (_619 * _619)) / (_614 + 9.9999997473787516355514526367188e-06);
        float _3328 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
        float _645 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
        float _646 = _645 * 2.0;
        float _650 = (1.0 - _645) / (_645 + 1.0);
        float _3339 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
        float _651 = isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0));
        float _660 = ((((1.0 - _651) * (_646 + 2.0)) * exp2(log2(isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0))) * (_646 + 1.0))) + _651) * _614;
        float _661 = _582 * 0.5;
        float _662 = _592 * 0.5;
        float _663 = _602 * 0.5;
        float _664 = dot(vec3(_661, _662, _663), vec3(_661, _662, _663));
        float _669 = (_664 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_664);
        float _677 = (dot(vec3(_212, _213, _214), vec3(_669 * _661, _669 * _662, _669 * _663)) + 1.0) * 0.5;
        float _3350 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
        float _686 = sqrt(((_662 * _662) + (_661 * _661)) + (_663 * _663)) / (_615 + 9.9999997473787516355514526367188e-06);
        float _3361 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
        float _687 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
        float _688 = _687 * 2.0;
        float _692 = (1.0 - _687) / (_687 + 1.0);
        float _3372 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        float _693 = isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0));
        float _702 = ((((1.0 - _693) * (_688 + 2.0)) * exp2(log2(isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0))) * (_688 + 1.0))) + _693) * _615;
        float _703 = _583 * 0.5;
        float _704 = _593 * 0.5;
        float _705 = _603 * 0.5;
        float _706 = dot(vec3(_703, _704, _705), vec3(_703, _704, _705));
        float _711 = (_706 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_706);
        float _719 = (dot(vec3(_212, _213, _214), vec3(_711 * _703, _711 * _704, _711 * _705)) + 1.0) * 0.5;
        float _3383 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _728 = sqrt(((_704 * _704) + (_703 * _703)) + (_705 * _705)) / (_616 + 9.9999997473787516355514526367188e-06);
        float _3394 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _729 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
        float _730 = _729 * 2.0;
        float _734 = (1.0 - _729) / (_729 + 1.0);
        float _3405 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        float _735 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
        float _744 = ((((1.0 - _735) * (_730 + 2.0)) * exp2(log2(isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0))) * (_730 + 1.0))) + _735) * _616;
        _752 = _583;
        _754 = _582;
        _755 = _581;
        _756 = _593;
        _757 = _592;
        _758 = _591;
        _759 = _603;
        _760 = _602;
        _761 = _601;
        _762 = _616;
        _763 = _615;
        _764 = _614;
        _765 = cbModelParam._m0[36u].z * (isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0)));
        _766 = cbModelParam._m0[36u].z * (isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0)));
        _767 = cbModelParam._m0[36u].z * (isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0)));
    }
    else
    {
        _752 = _753;
        _754 = _753;
        _755 = _753;
        _756 = _753;
        _757 = _753;
        _758 = _753;
        _759 = _753;
        _760 = _753;
        _761 = _753;
        _762 = _753;
        _763 = _753;
        _764 = _753;
        _765 = 0.0;
        _766 = 0.0;
        _767 = 0.0;
    }
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _796 = fma(_421, cbModelParam._m0[30u].z, fma(_417, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _413));
        float _800 = fma(_421, cbModelParam._m0[31u].z, fma(_417, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _413));
        float _804 = fma(_421, cbModelParam._m0[32u].z, fma(_417, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _413));
        float _827 = _413 + _212;
        float _828 = _417 + _213;
        float _829 = _421 + _214;
        float _839 = fma(_829, cbModelParam._m0[30u].z, fma(_828, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _827)) - _796;
        float _840 = fma(_829, cbModelParam._m0[31u].z, fma(_828, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _827)) - _800;
        float _841 = fma(_829, cbModelParam._m0[32u].z, fma(_828, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _827)) - _804;
        float _845 = inversesqrt(dot(vec3(_839, _840, _841), vec3(_839, _840, _841)));
        float _858 = ((_845 * _839) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_796 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _859 = ((_845 * _840) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_800 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _860 = ((_845 * _841) / cbModelParam._m0[35u].z) + ((((((_804 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _862 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_858, _859, _860), 0.0);
        vec4 _869 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_858, _859, _860), 0.0);
        vec4 _876 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_858, _859, _860), 0.0);
        vec4 _883 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_858, _859, _860), 0.0);
        float _895 = exp2((_862.w + (-0.5)) * 20.0) * 2.0;
        float _896 = _895 * (_862.x + (-0.5));
        float _897 = _895 * (_862.y + (-0.5));
        float _898 = _895 * (_862.z + (-0.5));
        float _905 = exp2((_869.w + (-0.5)) * 20.0) * 2.0;
        float _906 = _905 * (_869.x + (-0.5));
        float _907 = _905 * (_869.y + (-0.5));
        float _908 = _905 * (_869.z + (-0.5));
        float _915 = exp2((_876.w + (-0.5)) * 20.0) * 2.0;
        float _916 = _915 * (_876.x + (-0.5));
        float _917 = _915 * (_876.y + (-0.5));
        float _918 = _915 * (_876.z + (-0.5));
        float _925 = exp2((_883.w + (-0.5)) * 20.0) * 2.0;
        float _926 = _925 * (_883.x + (-0.5));
        float _927 = _925 * (_883.y + (-0.5));
        float _928 = _925 * (_883.z + (-0.5));
        float _929 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _930 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _931 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _932 = _896 * 0.5;
        float _933 = _906 * 0.5;
        float _934 = _916 * 0.5;
        float _935 = dot(vec3(_932, _933, _934), vec3(_932, _933, _934));
        float _940 = (_935 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_935);
        float _948 = (dot(vec3(_212, _213, _214), vec3(_940 * _932, _940 * _933, _940 * _934)) + 1.0) * 0.5;
        float _3446 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _957 = sqrt(((_933 * _933) + (_932 * _932)) + (_934 * _934)) / (_929 + 9.9999997473787516355514526367188e-06);
        float _3457 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0));
        float _959 = _958 * 2.0;
        float _963 = (1.0 - _958) / (_958 + 1.0);
        float _3468 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0));
        float _973 = ((((1.0 - _964) * (_959 + 2.0)) * exp2(log2(isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0))) * (_959 + 1.0))) + _964) * _929;
        float _974 = _897 * 0.5;
        float _975 = _907 * 0.5;
        float _976 = _917 * 0.5;
        float _977 = dot(vec3(_974, _975, _976), vec3(_974, _975, _976));
        float _982 = (_977 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_977);
        float _990 = (dot(vec3(_212, _213, _214), vec3(_982 * _974, _982 * _975, _982 * _976)) + 1.0) * 0.5;
        float _3479 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _999 = sqrt(((_975 * _975) + (_974 * _974)) + (_976 * _976)) / (_930 + 9.9999997473787516355514526367188e-06);
        float _3490 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
        float _1001 = _1000 * 2.0;
        float _1005 = (1.0 - _1000) / (_1000 + 1.0);
        float _3501 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
        float _1015 = ((((1.0 - _1006) * (_1001 + 2.0)) * exp2(log2(isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0))) * (_1001 + 1.0))) + _1006) * _930;
        float _1016 = _898 * 0.5;
        float _1017 = _908 * 0.5;
        float _1018 = _918 * 0.5;
        float _1019 = dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018));
        float _1024 = (_1019 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1019);
        float _1032 = (dot(vec3(_212, _213, _214), vec3(_1024 * _1016, _1024 * _1017, _1024 * _1018)) + 1.0) * 0.5;
        float _3512 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1041 = sqrt(((_1017 * _1017) + (_1016 * _1016)) + (_1018 * _1018)) / (_931 + 9.9999997473787516355514526367188e-06);
        float _3523 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _1043 = _1042 * 2.0;
        float _1047 = (1.0 - _1042) / (_1042 + 1.0);
        float _3534 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
        float _1057 = ((((1.0 - _1048) * (_1043 + 2.0)) * exp2(log2(isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0))) * (_1043 + 1.0))) + _1048) * _931;
        _1065 = _898;
        _1066 = _897;
        _1067 = _896;
        _1068 = _908;
        _1069 = _907;
        _1070 = _906;
        _1071 = _918;
        _1072 = _917;
        _1073 = _916;
        _1074 = _931;
        _1075 = _930;
        _1076 = _929;
        _1077 = cbModelParam._m0[36u].w * (isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0)));
        _1078 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0)));
        _1079 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0)));
    }
    else
    {
        _1065 = _753;
        _1066 = _753;
        _1067 = _753;
        _1068 = _753;
        _1069 = _753;
        _1070 = _753;
        _1071 = _753;
        _1072 = _753;
        _1073 = _753;
        _1074 = _753;
        _1075 = _753;
        _1076 = _753;
        _1077 = 0.0;
        _1078 = 0.0;
        _1079 = 0.0;
    }
    float _1089 = (cbModelParam._m0[1u].x * (_1077 - _765)) + _765;
    float _1090 = (cbModelParam._m0[1u].x * (_1078 - _766)) + _766;
    float _1091 = (cbModelParam._m0[1u].x * (_1079 - _767)) + _767;
    float _1112 = fma(_1091, cbSceneParam._m0[89u].z, fma(_1090, cbSceneParam._m0[89u].y, _1089 * cbSceneParam._m0[89u].x));
    float _1115 = fma(_1091, cbSceneParam._m0[90u].z, fma(_1090, cbSceneParam._m0[90u].y, _1089 * cbSceneParam._m0[90u].x));
    float _1118 = fma(_1091, cbSceneParam._m0[91u].z, fma(_1090, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1089));
    float _1133 = _389 * 0.5;
    float _1134 = _390 * 0.5;
    float _1135 = _391 * 0.5;
    float _1136 = dot(vec4(_1133, _1134, _1135, 1.0), vec4(_1067, _1070, _1073, _1076));
    float _1139 = dot(vec4(_1133, _1134, _1135, 1.0), vec4(_1066, _1069, _1072, _1075));
    float _1142 = dot(vec4(_1133, _1134, _1135, 1.0), vec4(_1065, _1068, _1071, _1074));
    float _1176;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1149 = dot(vec4(_1133, _1134, _1135, 1.0), vec4(_752, _756, _759, _762));
        float _1153 = dot(vec4(_1133, _1134, _1135, 1.0), vec4(_754, _757, _760, _763));
        float _1157 = dot(vec4(_1133, _1134, _1135, 1.0), vec4(_755, _758, _761, _764));
        float _1164 = dot(vec4(cbModelParam._m0[39u]), vec4(_1133, _1134, _1135, 1.0));
        _1176 = dot(vec3(isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)), isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)), isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1164) ? 0.0 : (isnan(0.0) ? _1164 : max(0.0, _1164))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1176 = 1.0;
    }
    float _1187;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1178 = dot(vec4(cbModelParam._m0[40u]), vec4(_1133, _1134, _1135, 1.0));
        _1187 = dot(vec3(isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0)), isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0)), isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1178) ? 0.0 : (isnan(0.0) ? _1178 : max(0.0, _1178))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1187 = 1.0;
    }
    float _1191 = (_1187 * cbModelParam._m0[1u].x) + (_1176 * (1.0 - cbModelParam._m0[1u].x));
    float _1200 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1282;
    float _1284;
    float _1286;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1249 = fma(_421, cbModelParam._m0[13u].z, fma(_417, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _413)) + cbModelParam._m0[13u].w;
        float _1253 = fma(_421, cbModelParam._m0[14u].z, fma(_417, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _413)) + cbModelParam._m0[14u].w;
        float _1257 = fma(_421, cbModelParam._m0[15u].z, fma(_417, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _413)) + cbModelParam._m0[15u].w;
        float _1260 = fma(_391, cbModelParam._m0[13u].z, fma(_390, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _389));
        float _1263 = fma(_391, cbModelParam._m0[14u].z, fma(_390, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _389));
        float _1266 = fma(_391, cbModelParam._m0[15u].z, fma(_390, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _389));
        float _1292;
        if (_1260 > 0.0)
        {
            _1292 = abs((1.0 - _1249) / _1260);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1260 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1249 + 1.0) / _1260);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1292 = frontier_phi_19_17_ladder;
        }
        float _1467;
        if (_1263 > 0.0)
        {
            _1467 = abs((1.0 - _1253) / _1263);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1263 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1253 + 1.0) / _1263);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1467 = frontier_phi_28_24_ladder;
        }
        float _1764;
        if (_1266 > 0.0)
        {
            _1764 = abs((1.0 - _1257) / _1266);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1266 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1257 + 1.0) / _1266);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1764 = frontier_phi_40_35_ladder;
        }
        float _1766 = isnan(_1467) ? _1292 : (isnan(_1292) ? _1467 : min(_1292, _1467));
        float _1767 = isnan(_1764) ? _1766 : (isnan(_1766) ? _1764 : min(_1766, _1764));
        float _1771 = (_1767 * _1260) + _1249;
        float _1772 = (_1767 * _1263) + _1253;
        float _1773 = (_1767 * _1266) + _1257;
        float _1774 = _1767 * 9.9999997473787516355514526367188e-05;
        float _1776 = (-1.0) - _1774;
        float _1778 = _1774 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1773 > _1778) || ((_1773 < _1776) || ((_1772 > _1778) || ((_1772 < _1776) || ((_1771 < _1776) || (_1771 > _1778))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1918 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1773, cbModelParam._m0[9u].z, fma(_1772, cbModelParam._m0[9u].y, _1771 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1773, cbModelParam._m0[10u].z, fma(_1772, cbModelParam._m0[10u].y, _1771 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1773, cbModelParam._m0[11u].z, fma(_1772, cbModelParam._m0[11u].y, _1771 * cbModelParam._m0[11u].x))), _1200);
            frontier_phi_18_40_ladder = _1918.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1918.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1918.x * cbModelParam._m0[1u].y;
        }
        _1282 = frontier_phi_18_40_ladder_2;
        _1284 = frontier_phi_18_40_ladder_1;
        _1286 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1270 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_389, _390, _391), _1200);
        _1282 = _1270.x * cbModelParam._m0[1u].y;
        _1284 = _1270.y * cbModelParam._m0[1u].y;
        _1286 = _1270.z * cbModelParam._m0[1u].y;
    }
    float _1289 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1382;
    float _1384;
    float _1386;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1346 = fma(_421, cbModelParam._m0[21u].z, fma(_417, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _413)) + cbModelParam._m0[21u].w;
        float _1350 = fma(_421, cbModelParam._m0[22u].z, fma(_417, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _413)) + cbModelParam._m0[22u].w;
        float _1354 = fma(_421, cbModelParam._m0[23u].z, fma(_417, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _413)) + cbModelParam._m0[23u].w;
        float _1357 = fma(_391, cbModelParam._m0[21u].z, fma(_390, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _389));
        float _1360 = fma(_391, cbModelParam._m0[22u].z, fma(_390, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _389));
        float _1363 = fma(_391, cbModelParam._m0[23u].z, fma(_390, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _389));
        float _1472;
        if (_1357 > 0.0)
        {
            _1472 = abs((1.0 - _1346) / _1357);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1357 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1346 + 1.0) / _1357);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1472 = frontier_phi_30_26_ladder;
        }
        float _1791;
        if (_1360 > 0.0)
        {
            _1791 = abs((1.0 - _1350) / _1360);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1360 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1350 + 1.0) / _1360);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1791 = frontier_phi_42_37_ladder;
        }
        float _2064;
        if (_1363 > 0.0)
        {
            _2064 = abs((1.0 - _1354) / _1363);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1363 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1354 + 1.0) / _1363);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2064 = frontier_phi_52_49_ladder;
        }
        float _2066 = isnan(_1791) ? _1472 : (isnan(_1472) ? _1791 : min(_1472, _1791));
        float _2067 = isnan(_2064) ? _2066 : (isnan(_2066) ? _2064 : min(_2066, _2064));
        float _2071 = (_2067 * _1357) + _1346;
        float _2072 = (_2067 * _1360) + _1350;
        float _2073 = (_2067 * _1363) + _1354;
        float _2074 = _2067 * 9.9999997473787516355514526367188e-05;
        float _2075 = (-1.0) - _2074;
        float _2077 = _2074 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2073 > _2077) || ((_2073 < _2075) || ((_2072 > _2077) || ((_2072 < _2075) || ((_2071 < _2075) || (_2071 > _2077))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2164 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2073, cbModelParam._m0[17u].z, fma(_2072, cbModelParam._m0[17u].y, _2071 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2073, cbModelParam._m0[18u].z, fma(_2072, cbModelParam._m0[18u].y, _2071 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2073, cbModelParam._m0[19u].z, fma(_2072, cbModelParam._m0[19u].y, _2071 * cbModelParam._m0[19u].x))), _1289);
            frontier_phi_27_52_ladder = _2164.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2164.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2164.x * cbModelParam._m0[1u].z;
        }
        _1382 = frontier_phi_27_52_ladder_2;
        _1384 = frontier_phi_27_52_ladder_1;
        _1386 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1366 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_389, _390, _391), _1289);
        _1382 = _1366.x * cbModelParam._m0[1u].z;
        _1384 = _1366.y * cbModelParam._m0[1u].z;
        _1386 = _1366.z * cbModelParam._m0[1u].z;
    }
    float _1398 = _380 * 0.01200000010430812835693359375;
    float _1400 = _1398 * ((cbModelParam._m0[1u].w * (_1382 - _1282)) + _1282);
    float _1401 = _1398 * ((cbModelParam._m0[1u].w * (_1384 - _1284)) + _1284);
    float _1402 = _1398 * ((cbModelParam._m0[1u].w * (_1386 - _1286)) + _1286);
    float _1405 = fma(_1402, cbSceneParam._m0[89u].z, fma(_1401, cbSceneParam._m0[89u].y, _1400 * cbSceneParam._m0[89u].x));
    float _1408 = fma(_1402, cbSceneParam._m0[90u].z, fma(_1401, cbSceneParam._m0[90u].y, _1400 * cbSceneParam._m0[90u].x));
    float _1411 = fma(_1402, cbSceneParam._m0[91u].z, fma(_1401, cbSceneParam._m0[91u].y, _1400 * cbSceneParam._m0[91u].x));
    float _1446 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1450 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1454 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1458 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1459 = _1446 / _1458;
    float _1460 = _1450 / _1458;
    float _1461 = _1454 / _1458;
    float _1608;
    float _1609;
    float _1610;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1488 = ((uint(_1461 > cbSceneParam._m0[59u].y) + uint(_1461 > cbSceneParam._m0[59u].x)) + uint(_1461 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1489 = _1488 + 43u;
        uint _1497 = _1488 + 44u;
        uint _1505 = _1488 + 45u;
        uint _1513 = _1488 + 46u;
        float _1524 = fma(_1458, cbSceneParam._m0[_1489].w, fma(_1454, cbSceneParam._m0[_1489].z, fma(_1450, cbSceneParam._m0[_1489].y, _1446 * cbSceneParam._m0[_1489].x)));
        float _1528 = fma(_1458, cbSceneParam._m0[_1497].w, fma(_1454, cbSceneParam._m0[_1497].z, fma(_1450, cbSceneParam._m0[_1497].y, _1446 * cbSceneParam._m0[_1497].x)));
        float _1536 = fma(_1458, cbSceneParam._m0[_1513].w, fma(_1454, cbSceneParam._m0[_1513].z, fma(_1450, cbSceneParam._m0[_1513].y, _1446 * cbSceneParam._m0[_1513].x)));
        float _1541 = cbSceneParam._m0[33u].z * _1536;
        float _1543 = cbSceneParam._m0[33u].w * _1536;
        float _1546 = fma(_1458, cbSceneParam._m0[_1505].w, fma(_1454, cbSceneParam._m0[_1505].z, fma(_1450, cbSceneParam._m0[_1505].y, _1446 * cbSceneParam._m0[_1505].x))) / _1536;
        float _1594 = (cbSceneParam._m0[33u].x - sqrt(((_1460 * _1460) + (_1459 * _1459)) + (_1461 * _1461))) * cbSceneParam._m0[33u].y;
        float _3660 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1601 = (isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1541 + _1524) / _1536, (_1543 + _1528) / _1536), _1546), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1543 + _1524) / _1536, (_1528 - _1541) / _1536), _1546), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1524 - _1541) / _1536, (_1528 - _1543) / _1536), _1546), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1524 - _1543) / _1536, (_1541 + _1528) / _1536), _1546), 0.0)).x), vec4(0.25)));
        _1608 = 1.0 - (_1601 * cbSceneParam._m0[34u].x);
        _1609 = 1.0 - (_1601 * cbSceneParam._m0[34u].y);
        _1610 = 1.0 - (_1601 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1608 = 1.0;
        _1609 = 1.0;
        _1610 = 1.0;
    }
    float _1674;
    float _1676;
    float _1678;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1662 = fma(_1458, cbSceneParam._m0[63u].w, fma(_1454, cbSceneParam._m0[63u].z, fma(_1450, cbSceneParam._m0[63u].y, _1446 * cbSceneParam._m0[63u].x)));
        float _1663 = fma(_1458, cbSceneParam._m0[60u].w, fma(_1454, cbSceneParam._m0[60u].z, fma(_1450, cbSceneParam._m0[60u].y, _1446 * cbSceneParam._m0[60u].x))) / _1662;
        float _1664 = fma(_1458, cbSceneParam._m0[61u].w, fma(_1454, cbSceneParam._m0[61u].z, fma(_1450, cbSceneParam._m0[61u].y, _1446 * cbSceneParam._m0[61u].x))) / _1662;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1663 >= cbSceneParam._m0[64u].x) && (_1664 >= cbSceneParam._m0[64u].y)) && (_1663 <= cbSceneParam._m0[64u].z)) && (_1664 <= cbSceneParam._m0[64u].w))
        {
            float _1804 = fma(_1458, cbSceneParam._m0[62u].w, fma(_1454, cbSceneParam._m0[62u].z, fma(_1450, cbSceneParam._m0[62u].y, _1446 * cbSceneParam._m0[62u].x))) / _1662;
            float _1808 = isnan(cbSceneParam._m0[41u].w) ? _1804 : (isnan(_1804) ? cbSceneParam._m0[41u].w : max(_1804, cbSceneParam._m0[41u].w));
            float _1851 = (cbSceneParam._m0[33u].x - sqrt(((_1460 * _1460) + (_1459 * _1459)) + (_1461 * _1461))) * cbSceneParam._m0[33u].y;
            float _3676 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
            float _1858 = (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1663, cbSceneParam._m0[33u].w + _1664), _1808), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1663, _1664 - cbSceneParam._m0[33u].z), _1808), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1663 - cbSceneParam._m0[33u].z, _1664 - cbSceneParam._m0[33u].w), _1808), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1663 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1664), _1808), 0.0)).x), vec4(0.25)));
            float _1862 = 1.0 - (_1858 * cbSceneParam._m0[34u].x);
            float _1863 = 1.0 - (_1858 * cbSceneParam._m0[34u].y);
            float _1864 = 1.0 - (_1858 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_1863) ? _1609 : (isnan(_1609) ? _1863 : min(_1609, _1863));
            frontier_phi_39_38_ladder_1 = isnan(_1862) ? _1608 : (isnan(_1608) ? _1862 : min(_1608, _1862));
            frontier_phi_39_38_ladder_2 = isnan(_1864) ? _1610 : (isnan(_1610) ? _1864 : min(_1610, _1864));
        }
        else
        {
            frontier_phi_39_38_ladder = _1609;
            frontier_phi_39_38_ladder_1 = _1608;
            frontier_phi_39_38_ladder_2 = _1610;
        }
        _1674 = frontier_phi_39_38_ladder_1;
        _1676 = frontier_phi_39_38_ladder;
        _1678 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1674 = _1608;
        _1676 = _1609;
        _1678 = _1610;
    }
    uvec4 _1683 = floatBitsToUint(cbInstanceData._m0[_354 + 5u]);
    uint _1685 = _1683.x * 14u;
    uint _1686 = _1685 + 13u;
    float _1693 = _380 + (-1.0);
    float _1699 = (cbLight._m0[_1686].x * _1693) + 1.0;
    float _1700 = (cbLight._m0[_1686].y * _1693) + 1.0;
    float _1701 = (cbLight._m0[_1686].z * _1693) + 1.0;
    float _1702 = (cbLight._m0[_1686].w * _1693) + 1.0;
    uint _1703 = _1685 + 5u;
    float _1709 = isnan(1.0) ? _1700 : (isnan(_1700) ? 1.0 : min(_1700, 1.0));
    uint _1713 = _1685 + 4u;
    float _1723 = isnan(1.0) ? _1699 : (isnan(_1699) ? 1.0 : min(_1699, 1.0));
    uint _1727 = _1685 | 1u;
    float _1738 = dot(vec3(cbLight._m0[_1685].xyz), vec3(_212, _213, _214));
    float _1741 = dot(vec3(cbLight._m0[_1727].xyz), vec3(_212, _213, _214));
    float _3712 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
    float _3723 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
    float _1746 = (isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))) * 0.3183098733425140380859375;
    float _1748 = (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * 0.3183098733425140380859375;
    float _1755 = ((cbLight._m0[_1703].x * _1709) * _1748) + (((cbLight._m0[_1713].x * _1674) * _1723) * _1746);
    float _1756 = ((_1709 * cbLight._m0[_1703].y) * _1748) + (((cbLight._m0[_1713].y * _1676) * _1723) * _1746);
    float _1757 = ((_1709 * cbLight._m0[_1703].z) * _1748) + (((cbLight._m0[_1713].z * _1678) * _1723) * _1746);
    uvec4 _1761 = floatBitsToUint(cbLight._m0[_1685 + 12u]);
    bool _1763 = _1761.x == 0u;
    float _1865;
    float _1867;
    float _1869;
    if (_1763)
    {
        _1865 = _1755;
        _1867 = _1756;
        _1869 = _1757;
    }
    else
    {
        uint _1873 = _1685 + 6u;
        float _1889 = (dot(vec3(cbLight._m0[_1685 + 2u].xyz), vec3(_212, _213, _214)) * 0.5) + 0.5;
        float _1890 = _1889 * _1889;
        float _3734 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
        float _1891 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1892 = isnan(1.0) ? _1701 : (isnan(_1701) ? 1.0 : min(_1701, 1.0));
        _1865 = (((cbLight._m0[_1873].x * 0.3183098733425140380859375) * _1891) * _1892) + _1755;
        _1867 = (((cbLight._m0[_1873].y * 0.3183098733425140380859375) * _1891) * _1892) + _1756;
        _1869 = (((cbLight._m0[_1873].z * 0.3183098733425140380859375) * _1891) * _1892) + _1757;
    }
    bool _1872 = _1761.y == 0u;
    float _1927;
    float _1929;
    float _1931;
    if (_1872)
    {
        _1927 = _1865;
        _1929 = _1867;
        _1931 = _1869;
    }
    else
    {
        uint _2035 = _1685 + 7u;
        float _2051 = (dot(vec3(cbLight._m0[_1685 + 3u].xyz), vec3(_212, _213, _214)) * 0.5) + 0.5;
        float _2052 = _2051 * _2051;
        float _3750 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
        float _2053 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _2054 = isnan(1.0) ? _1702 : (isnan(_1702) ? 1.0 : min(_1702, 1.0));
        _1927 = (((cbLight._m0[_2035].x * 0.3183098733425140380859375) * _2053) * _2054) + _1865;
        _1929 = (((cbLight._m0[_2035].y * 0.3183098733425140380859375) * _2053) * _2054) + _1867;
        _1931 = (((cbLight._m0[_2035].z * 0.3183098733425140380859375) * _2053) * _2054) + _1869;
    }
    uint _1933 = _1685 + 8u;
    float _1939 = cbLight._m0[_1685].x + _293;
    float _1940 = cbLight._m0[_1685].y + _294;
    float _1941 = cbLight._m0[_1685].z + _295;
    float _1945 = inversesqrt(dot(vec3(_1939, _1940, _1941), vec3(_1939, _1940, _1941)));
    float _1949 = dot(vec3(_212, _213, _214), vec3(cbLight._m0[_1685].xyz));
    float _3766 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
    float _1952 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
    float _3777 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _1953 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
    float _1954 = dot(vec3(cbLight._m0[_1685].xyz), vec3(_1939 * _1945, _1940 * _1945, _1941 * _1945));
    float _3788 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1965 = (exp2(log2(1.0 - (isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1971 = (0.5 / ((_1952 + 9.9999999392252902907785028219223e-09) + _1953)) * _1952;
    float _3799 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _1973 = (isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * 0.31831014156341552734375;
    uint _1987 = _1685 + 9u;
    float _1993 = cbLight._m0[_1727].x + _293;
    float _1994 = cbLight._m0[_1727].y + _294;
    float _1995 = cbLight._m0[_1727].z + _295;
    float _1999 = inversesqrt(dot(vec3(_1993, _1994, _1995), vec3(_1993, _1994, _1995)));
    float _2003 = dot(vec3(_212, _213, _214), vec3(cbLight._m0[_1727].xyz));
    float _3810 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2006 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
    float _2007 = dot(vec3(cbLight._m0[_1727].xyz), vec3(_1993 * _1999, _1994 * _1999, _1995 * _1999));
    float _3821 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2016 = (exp2(log2(1.0 - (isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2020 = (0.5 / ((_2006 + 9.9999999392252902907785028219223e-09) + _1953)) * _2006;
    float _3832 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
    float _2022 = (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * 0.31831014156341552734375;
    float _2032 = (((_2016 * cbLight._m0[_1987].x) * _2022) * _1709) + ((((cbLight._m0[_1933].x * _1674) * _1965) * _1973) * _1723);
    float _2033 = (((_2016 * cbLight._m0[_1987].y) * _2022) * _1709) + ((((cbLight._m0[_1933].y * _1676) * _1965) * _1973) * _1723);
    float _2034 = (((_2016 * cbLight._m0[_1987].z) * _2022) * _1709) + ((((cbLight._m0[_1933].z * _1678) * _1965) * _1973) * _1723);
    float _2090;
    float _2092;
    float _2094;
    if (_1763)
    {
        _2090 = _2032;
        _2092 = _2033;
        _2094 = _2034;
    }
    else
    {
        uint _2096 = _1685 + 10u;
        uint _2102 = _1685 + 2u;
        float _2108 = cbLight._m0[_2102].x + _293;
        float _2109 = cbLight._m0[_2102].y + _294;
        float _2110 = cbLight._m0[_2102].z + _295;
        float _2114 = inversesqrt(dot(vec3(_2108, _2109, _2110), vec3(_2108, _2109, _2110)));
        float _2118 = dot(vec3(_212, _213, _214), vec3(cbLight._m0[_2102].xyz));
        float _3843 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        float _2121 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _2122 = dot(vec3(cbLight._m0[_2102].xyz), vec3(_2108 * _2114, _2109 * _2114, _2110 * _2114));
        float _3854 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2131 = (exp2(log2(1.0 - (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2135 = (0.5 / ((_2121 + 9.9999999392252902907785028219223e-09) + _1953)) * _2121;
        float _3865 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2137 = (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * 0.31831014156341552734375;
        float _2138 = isnan(1.0) ? _1701 : (isnan(_1701) ? 1.0 : min(_1701, 1.0));
        _2090 = (((_2131 * cbLight._m0[_2096].x) * _2137) * _2138) + _2032;
        _2092 = (((_2131 * cbLight._m0[_2096].y) * _2137) * _2138) + _2033;
        _2094 = (((_2131 * cbLight._m0[_2096].z) * _2137) * _2138) + _2034;
    }
    float _2169;
    float _2171;
    float _2173;
    if (_1872)
    {
        _2169 = _2090;
        _2171 = _2092;
        _2173 = _2094;
    }
    else
    {
        uint _2180 = _1685 + 11u;
        uint _2186 = _1685 + 3u;
        float _2192 = cbLight._m0[_2186].x + _293;
        float _2193 = cbLight._m0[_2186].y + _294;
        float _2194 = cbLight._m0[_2186].z + _295;
        float _2198 = inversesqrt(dot(vec3(_2192, _2193, _2194), vec3(_2192, _2193, _2194)));
        float _2202 = dot(vec3(_212, _213, _214), vec3(cbLight._m0[_2186].xyz));
        float _3881 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2205 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _2206 = dot(vec3(cbLight._m0[_2186].xyz), vec3(_2192 * _2198, _2193 * _2198, _2194 * _2198));
        float _3892 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2215 = (exp2(log2(1.0 - (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2219 = (0.5 / ((_2205 + 9.9999999392252902907785028219223e-09) + _1953)) * _2205;
        float _3903 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2221 = (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * 0.31831014156341552734375;
        float _2222 = isnan(1.0) ? _1702 : (isnan(_1702) ? 1.0 : min(_1702, 1.0));
        _2169 = (((_2215 * cbLight._m0[_2180].x) * _2221) * _2222) + _2090;
        _2171 = (((_2215 * cbLight._m0[_2180].y) * _2221) * _2222) + _2092;
        _2173 = (((_2215 * cbLight._m0[_2180].z) * _2221) * _2222) + _2094;
    }
    float _2287;
    float _2289;
    float _2291;
    float _2293;
    float _2295;
    float _2297;
    if (_1683.y == 0u)
    {
        uvec4 _2243 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2244 = _2243.x;
        uint _2255 = uint((float(_2243.y) * floor(float(uint(cbSceneParam._m0[85u].y * _315) / _2244))) + floor(float(uint(cbSceneParam._m0[85u].x * _314) / _2244)));
        float _2265 = (log2(_1461 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2266 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        uint _2269 = uint(isnan(14.0) ? _2266 : (isnan(_2266) ? 14.0 : min(_2266, 14.0)));
        uvec4 _2274 = texelFetch(g_lightClusterGridBuffer, int(((_2269 << 2u) + (_2255 << 6u)) >> 2u));
        uint _2275 = _2274.x;
        uint _2276 = _2243.z;
        float _2354;
        float _2356;
        float _2358;
        float _2360;
        float _2362;
        float _2364;
        if (((((1u << ((_2276 >> 4u) & 15u)) + 4294967295u) & _2275) == 0u) || ((_2276 & 240u) == 0u))
        {
            _2354 = 0.0;
            _2356 = 0.0;
            _2358 = 0.0;
            _2360 = 0.0;
            _2362 = 0.0;
            _2364 = 0.0;
        }
        else
        {
            float _2355;
            float _2357;
            float _2359;
            float _2361;
            float _2363;
            float _2365;
            float _2505 = 0.0;
            float _2506 = 0.0;
            float _2507 = 0.0;
            float _2508 = 0.0;
            float _2509 = 0.0;
            float _2510 = 0.0;
            uint _2511 = 0u;
            uint _2520;
            bool _2521;
            for (;;)
            {
                _2520 = texelFetch(g_lightClassification, int((((_2269 << 5u) + (_2255 << 9u)) + (_2511 << 2u)) >> 2u)).x;
                _2521 = _2520 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2521)
                {
                    frontier_phi_73_pred = _2510;
                    frontier_phi_73_pred_1 = _2509;
                    frontier_phi_73_pred_2 = _2508;
                    frontier_phi_73_pred_3 = _2507;
                    frontier_phi_73_pred_4 = _2506;
                    frontier_phi_73_pred_5 = _2505;
                }
                else
                {
                    float _2650;
                    float _2651;
                    float _2652;
                    float _2653;
                    float _2654;
                    float _2655;
                    uint _2656;
                    _2650 = _2505;
                    _2651 = _2506;
                    _2652 = _2507;
                    _2653 = _2508;
                    _2654 = _2509;
                    _2655 = _2510;
                    _2656 = _2520;
                    float _2577;
                    float _2578;
                    float _2579;
                    float _2580;
                    float _2581;
                    float _2582;
                    for (;;)
                    {
                        uint _2660 = uint(findLSB(_2656)) + (_2511 << 5u);
                        uint _2657 = (_2656 + 4294967295u) & _2656;
                        uint _2662 = _2660 * 48u;
                        vec4 _2676 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2662)).x, texelFetch(g_PointLightRenderingBuffer, int(_2662 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2662 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2662 + 3u)).x));
                        uint _2682 = (_2660 * 48u) + 4u;
                        vec4 _2695 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2682)).x, texelFetch(g_PointLightRenderingBuffer, int(_2682 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2682 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2682 + 3u)).x));
                        uint _2701 = (_2660 * 48u) + 8u;
                        vec3 _2712 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2701)).x, texelFetch(g_PointLightRenderingBuffer, int(_2701 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2701 + 2u)).x));
                        float _2716 = _2676.x - _1459;
                        float _2717 = _2676.y - _1460;
                        float _2718 = _2676.z - _1461;
                        float _2719 = dot(vec3(_2716, _2717, _2718), vec3(_2716, _2717, _2718));
                        float _2722 = inversesqrt(_2719);
                        float _2731 = 1.0 - (_2719 * _2676.w);
                        float _3929 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
                        float _2732 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
                        float _2733 = sqrt(_2719) * _2695.w;
                        float _2736 = 1.39999997615814208984375 / (_2733 + 1.39999997615814208984375);
                        float _2737 = _2736 * _2736;
                        float _2740 = ((1.0 - _2737) * dot(vec3(_335, _338, _341), vec3(_2722 * _2716, _2722 * _2717, _2722 * _2718))) + _2737;
                        float _2743 = _2733 * _2733;
                        float _2747 = ((isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0))) * _2732) / ((_2743 * 0.699999988079071044921875) + 1.0);
                        float _2751 = (-0.0) - _1459;
                        float _2752 = (-0.0) - _1460;
                        float _2753 = (-0.0) - _1461;
                        float _2757 = inversesqrt(dot(vec3(_2751, _2752, _2753), vec3(_2751, _2752, _2753)));
                        float _2761 = dot(vec3(_335, _338, _341), vec3(_2757 * _2751, _2757 * _2752, _2757 * _2753));
                        float _3945 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
                        float _3956 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
                        float _2765 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
                        float _2769 = (0.5 / (((isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) + 9.9999999392252902907785028219223e-09) + _2765)) * _2765;
                        float _3967 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
                        float _2778 = (((isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * 3.1415927410125732421875) / ((_2743 * 2.1991131305694580078125) + 3.141590118408203125)) * _2732;
                        _2580 = (_2747 * _2695.x) + _2653;
                        _2581 = (_2747 * _2695.y) + _2654;
                        _2582 = (_2747 * _2695.z) + _2655;
                        _2577 = (_2778 * _2712.x) + _2650;
                        _2578 = (_2778 * _2712.y) + _2651;
                        _2579 = (_2778 * _2712.z) + _2652;
                        if (_2657 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2650 = _2577;
                            _2651 = _2578;
                            _2652 = _2579;
                            _2653 = _2580;
                            _2654 = _2581;
                            _2655 = _2582;
                            _2656 = _2657;
                        }
                    }
                    frontier_phi_73_pred = _2582;
                    frontier_phi_73_pred_1 = _2581;
                    frontier_phi_73_pred_2 = _2580;
                    frontier_phi_73_pred_3 = _2579;
                    frontier_phi_73_pred_4 = _2578;
                    frontier_phi_73_pred_5 = _2577;
                }
                _2365 = frontier_phi_73_pred;
                _2363 = frontier_phi_73_pred_1;
                _2361 = frontier_phi_73_pred_2;
                _2359 = frontier_phi_73_pred_3;
                _2357 = frontier_phi_73_pred_4;
                _2355 = frontier_phi_73_pred_5;
                uint _2512 = _2511 + 1u;
                if (_2512 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2505 = _2355;
                    _2506 = _2357;
                    _2507 = _2359;
                    _2508 = _2361;
                    _2509 = _2363;
                    _2510 = _2365;
                    _2511 = _2512;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2354 = _2355;
            _2356 = _2357;
            _2358 = _2359;
            _2360 = _2361;
            _2362 = _2363;
            _2364 = _2365;
        }
        uvec4 _2368 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2369 = _2368.z;
        uint _2371 = (_2369 >> 8u) & 15u;
        float _2476;
        float _2478;
        float _2480;
        float _2482;
        float _2484;
        float _2486;
        if (((4294967295u << _2371) & _2275) == 0u)
        {
            _2476 = _2354;
            _2478 = _2356;
            _2480 = _2358;
            _2482 = _2360;
            _2484 = _2362;
            _2486 = _2364;
        }
        else
        {
            float _2501 = inversesqrt(dot(vec3(_1459, _1460, _1461), vec3(_1459, _1460, _1461)));
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2371 < ((_2369 >> 12u) & 15u))
            {
                float _2477;
                float _2479;
                float _2481;
                float _2483;
                float _2485;
                float _2487;
                float _2633 = _2354;
                float _2634 = _2356;
                float _2635 = _2358;
                float _2636 = _2360;
                float _2637 = _2362;
                float _2638 = _2364;
                uint _2639 = _2371;
                uint _2648;
                bool _2649;
                for (;;)
                {
                    _2648 = texelFetch(g_lightClassification, int((((_2269 << 5u) + (_2255 << 9u)) + (_2639 << 2u)) >> 2u)).x;
                    _2649 = _2648 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2649)
                    {
                        frontier_phi_84_pred = _2637;
                        frontier_phi_84_pred_1 = _2636;
                        frontier_phi_84_pred_2 = _2635;
                        frontier_phi_84_pred_3 = _2634;
                        frontier_phi_84_pred_4 = _2633;
                        frontier_phi_84_pred_5 = _2638;
                    }
                    else
                    {
                        float _2792;
                        float _2793;
                        float _2794;
                        float _2795;
                        float _2796;
                        float _2797;
                        float _3044;
                        float _3045;
                        float _3046;
                        float _3047;
                        float _3048;
                        float _3049;
                        float _2805 = _2633;
                        float _2806 = _2634;
                        float _2807 = _2635;
                        float _2808 = _2636;
                        float _2809 = _2637;
                        float _2810 = _2638;
                        uint _2811 = _2648;
                        uint _2812;
                        vec4 _2837;
                        float _2838;
                        vec4 _2853;
                        vec3 _2865;
                        vec4 _2881;
                        vec4 _2897;
                        float _2944;
                        bool _2945;
                        for (;;)
                        {
                            uint _2822 = ((_2639 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2811));
                            _2812 = (_2811 + 4294967295u) & _2811;
                            uint _2824 = _2822 * 40u;
                            _2837 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2824)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 3u)).x));
                            _2838 = _2837.w;
                            uint _2840 = (_2822 * 40u) + 4u;
                            _2853 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2840)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 3u)).x));
                            uint _2855 = (_2822 * 40u) + 8u;
                            _2865 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2855)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 2u)).x));
                            uint _2868 = (_2822 * 40u) + 16u;
                            _2881 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2868)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 3u)).x));
                            uint _2884 = (_2822 * 40u) + 20u;
                            _2897 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2884)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 3u)).x));
                            uint _2900 = (_2822 * 40u) + 24u;
                            vec4 _2913 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2900)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 3u)).x));
                            uint _2919 = (_2822 * 40u) + 28u;
                            vec4 _2932 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2919)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 3u)).x));
                            _2944 = fma(_1461, _2932.z, fma(_1460, _2932.y, _2932.x * _1459)) + _2932.w;
                            _2945 = !((fma(_1461, _2913.z, fma(_1460, _2913.y, _2913.x * _1459)) + _2913.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_2945)
                            {
                                float _2972 = _2837.x - _1459;
                                float _2973 = _2837.y - _1460;
                                float _2974 = _2837.z - _1461;
                                float _2975 = dot(vec3(_2972, _2973, _2974), vec3(_2972, _2973, _2974));
                                float _2978 = inversesqrt(_2975);
                                float _2979 = _2978 * _2972;
                                float _2980 = _2978 * _2973;
                                float _2981 = _2978 * _2974;
                                float _2985 = 1.0 - (_2975 / (_2838 * _2838));
                                float _3978 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
                                float _2986 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
                                float _2990 = sqrt(_2975) * _2853.w;
                                float _2992 = 1.39999997615814208984375 / (_2990 + 1.39999997615814208984375);
                                float _2993 = _2992 * _2992;
                                float _2994 = 1.0 - _2993;
                                float _2996 = (_2994 * dot(vec3(_2979, _2980, _2981), vec3(_335, _338, _341))) + _2993;
                                float _2999 = _2990 * _2990;
                                float _3003 = (fma(_1461, _2881.z, fma(_1460, _2881.y, _2881.x * _1459)) + _2881.w) / _2944;
                                float _3004 = (fma(_1461, _2897.z, fma(_1460, _2897.y, _2897.x * _1459)) + _2897.w) / _2944;
                                float _3008 = 1.0 - dot(vec2(_3003, _3004), vec2(_3003, _3004));
                                float _3994 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                                float _3009 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
                                float _3010 = _3009 * (((isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0))) * _2986) / ((_2999 * 0.699999988079071044921875) + 1.0));
                                float _3020 = dot(vec3(_335, _338, _341), vec3((-0.0) - (_1459 * _2501), (-0.0) - (_1460 * _2501), (-0.0) - (_1461 * _2501)));
                                float _4005 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                                float _3028 = (_2994 * dot(vec3(_335, _338, _341), vec3(_2979, _2980, _2981))) + _2993;
                                float _4016 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
                                float _3029 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
                                float _3033 = (0.5 / (((isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) + 9.9999999392252902907785028219223e-09) + _3029)) * _3029;
                                float _4027 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                                float _3040 = (_3009 * _2986) * (((isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * 3.1415927410125732421875) / ((_2999 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_90_pred = _3010 * _2853.y;
                                frontier_phi_90_pred_1 = _3010 * _2853.x;
                                frontier_phi_90_pred_2 = _3040 * _2865.z;
                                frontier_phi_90_pred_3 = _3040 * _2865.y;
                                frontier_phi_90_pred_4 = _3040 * _2865.x;
                                frontier_phi_90_pred_5 = _3010 * _2853.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3048 = frontier_phi_90_pred;
                            _3047 = frontier_phi_90_pred_1;
                            _3046 = frontier_phi_90_pred_2;
                            _3045 = frontier_phi_90_pred_3;
                            _3044 = frontier_phi_90_pred_4;
                            _3049 = frontier_phi_90_pred_5;
                            _2795 = _3047 + _2808;
                            _2796 = _3048 + _2809;
                            _2797 = _3049 + _2810;
                            _2792 = _3044 + _2805;
                            _2793 = _3045 + _2806;
                            _2794 = _3046 + _2807;
                            if (_2812 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2805 = _2792;
                                _2806 = _2793;
                                _2807 = _2794;
                                _2808 = _2795;
                                _2809 = _2796;
                                _2810 = _2797;
                                _2811 = _2812;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _2796;
                        frontier_phi_84_pred_1 = _2795;
                        frontier_phi_84_pred_2 = _2794;
                        frontier_phi_84_pred_3 = _2793;
                        frontier_phi_84_pred_4 = _2792;
                        frontier_phi_84_pred_5 = _2797;
                    }
                    _2485 = frontier_phi_84_pred;
                    _2483 = frontier_phi_84_pred_1;
                    _2481 = frontier_phi_84_pred_2;
                    _2479 = frontier_phi_84_pred_3;
                    _2477 = frontier_phi_84_pred_4;
                    _2487 = frontier_phi_84_pred_5;
                    uint _2640 = _2639 + 1u;
                    if (_2640 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2633 = _2477;
                        _2634 = _2479;
                        _2635 = _2481;
                        _2636 = _2483;
                        _2637 = _2485;
                        _2638 = _2487;
                        _2639 = _2640;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2487;
                frontier_phi_65_66_ladder_1 = _2483;
                frontier_phi_65_66_ladder_2 = _2485;
                frontier_phi_65_66_ladder_3 = _2479;
                frontier_phi_65_66_ladder_4 = _2477;
                frontier_phi_65_66_ladder_5 = _2481;
            }
            else
            {
                frontier_phi_65_66_ladder = _2364;
                frontier_phi_65_66_ladder_1 = _2360;
                frontier_phi_65_66_ladder_2 = _2362;
                frontier_phi_65_66_ladder_3 = _2356;
                frontier_phi_65_66_ladder_4 = _2354;
                frontier_phi_65_66_ladder_5 = _2358;
            }
            _2476 = frontier_phi_65_66_ladder_4;
            _2478 = frontier_phi_65_66_ladder_3;
            _2480 = frontier_phi_65_66_ladder_5;
            _2482 = frontier_phi_65_66_ladder_1;
            _2484 = frontier_phi_65_66_ladder_2;
            _2486 = frontier_phi_65_66_ladder;
        }
        float _2491 = isnan(1.0) ? _380 : (isnan(_380) ? 1.0 : min(_380, 1.0));
        _2287 = (_2491 * _2482) + _1927;
        _2289 = (_2491 * _2484) + _1929;
        _2291 = (_2491 * _2486) + _1931;
        _2293 = ((_2476 * 0.039999999105930328369140625) * _2491) + _2169;
        _2295 = ((_2478 * 0.039999999105930328369140625) * _2491) + _2171;
        _2297 = ((_2480 * 0.039999999105930328369140625) * _2491) + _2173;
    }
    else
    {
        _2287 = _1927;
        _2289 = _1929;
        _2291 = _1931;
        _2293 = _2169;
        _2295 = _2171;
        _2297 = _2173;
    }
    float _4043 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _4054 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _4065 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _2314 = ((isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_2287 + ((isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0))) * _380))) + ((_2293 + ((isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0))) * _1191)) * cbPerFrame._m0[3u].x);
    float _2315 = ((isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_2289 + ((isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0))) * _380))) + ((_2295 + ((isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0))) * _1191)) * cbPerFrame._m0[3u].x);
    float _2316 = ((isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_2291 + ((isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0))) * _380))) + ((_2297 + ((isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0))) * _1191)) * cbPerFrame._m0[3u].x);
    uint _2317 = _354 + 6u;
    float _2325 = _314 / cbSceneParam._m0[86u].x;
    float _2326 = _315 / cbSceneParam._m0[86u].y;
    vec4 _2340 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2325, _2326, (log2((isnan(cbSceneParam._m0[77u].w) ? _234 : (isnan(_234) ? cbSceneParam._m0[77u].w : min(_234, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2342 = _2340.x;
    float _2343 = _2340.y;
    float _2344 = _2340.z;
    float _2345 = _2340.w;
    float _2416;
    float _2418;
    float _2420;
    float _2422;
    if (_234 > cbSceneParam._m0[78u].w)
    {
        float _2379 = isnan(_234) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _234 : min(cbSceneParam._m0[80u].w, _234));
        float _2380 = _2379 / _234;
        float _2391 = _2380 * _286;
        float _2392 = _287 * _2380;
        float _2393 = (-0.0) - _2392;
        float _2394 = _2380 * _288;
        float _2396 = (cbSceneParam._m0[77u].w * _2393) / _2379;
        float _2397 = _2396 + cbSceneParam._m0[79u].w;
        float _2398 = cbSceneParam._m0[79u].w - _2392;
        float _2404 = sqrt(((_2391 * _2391) + (_2392 * _2392)) + (_2394 * _2394));
        float _2407 = (1.0 - (cbSceneParam._m0[77u].w / _2379)) * _2404;
        float _2412 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2414 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2590;
        if (abs((_2393 - _2396) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2590 = ((((_2397 > 0.0) ? exp2(_2412 * _2397) : (2.0 - exp2(_2414 * _2397))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2407;
        }
        else
        {
            float _2534 = 1.0 / cbSceneParam._m0[80u].x;
            float _2535 = isnan(_2398) ? _2397 : (isnan(_2397) ? _2398 : max(_2397, _2398));
            float _2536 = isnan(_2398) ? _2397 : (isnan(_2397) ? _2398 : min(_2397, _2398));
            float _2545 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : min(_2535, 0.0));
            float _2546 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : min(_2536, 0.0));
            _2590 = ((abs(_2404 / _2393) * cbSceneParam._m0[80u].y) * ((((_2545 - _2546) * 2.0) - ((exp2(_2412 * (isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0)))) - exp2(_2412 * (isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0))))) * _2534)) - ((exp2(_2414 * _2545) - exp2(_2414 * _2546)) * _2534))) + (_2407 * cbSceneParam._m0[80u].z);
        }
        vec4 _2592 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2325, _2326, 1.0), 0.0);
        float _2601 = exp2((_2590 * (-1.44269502162933349609375)) * (1.0 - _2592.w));
        float _2602 = log2(_2601);
        float _2618 = log2(_2345);
        _2416 = (exp2(_2618 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2602 * cbSceneParam._m0[78u].x)) * _2592.x) / cbSceneParam._m0[78u].x)) + _2342;
        _2418 = (exp2(_2618 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2602 * cbSceneParam._m0[78u].y)) * _2592.y) / cbSceneParam._m0[78u].y)) + _2343;
        _2420 = (exp2(_2618 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2602 * cbSceneParam._m0[78u].z)) * _2592.z) / cbSceneParam._m0[78u].z)) + _2344;
        _2422 = _2601 * _2345;
    }
    else
    {
        _2416 = _2342;
        _2418 = _2343;
        _2420 = _2344;
        _2422 = _2345;
    }
    bool _2628;
    vec4 _2432;
    vec4 _2455;
    float _2457;
    float _2461;
    float _2462;
    float _2463;
    float _2464;
    bool _2475;
    for (;;)
    {
        _2432 = cbMatDynParam._m0[0u];
        float _2434 = roundEven(_2432.y);
        bool _2435 = _2434 == 3.0;
        float _2437 = log2(_2422);
        float _2444 = exp2(_2437 * cbSceneParam._m0[78u].x) * _2314;
        float _2445 = exp2(_2437 * cbSceneParam._m0[78u].y) * _2315;
        float _2446 = exp2(_2437 * cbSceneParam._m0[78u].z) * _2316;
        float _2453 = _302 + (-0.5);
        _2455 = cbMtdParam._m0[1u];
        _2457 = _2455.y * _2453;
        float _2460 = (_2434 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2461 = _2460 * (_2435 ? _2444 : (_2444 + (cbSceneParam._m0[72u].w * _2416)));
        _2462 = _2460 * (_2435 ? _2445 : (_2445 + (cbSceneParam._m0[72u].w * _2418)));
        _2463 = _2460 * (_2435 ? _2446 : (_2446 + (cbSceneParam._m0[72u].w * _2420)));
        _2464 = _2453 * 0.999000012874603271484375;
        _2475 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2475)
        {
            if ((cbInstanceData._m0[_354 + 7u].x + _2464) < 0.5)
            {
                _2628 = true;
                break;
            }
        }
        uint _2569 = _356 + uint(_2432.w);
        if ((cbInstanceData._m0[_2569].w < 1.0) && ((cbInstanceData._m0[_2569].w + _2464) < 0.5))
        {
            _2628 = true;
            break;
        }
        if ((_2457 + 1.0) < _2455.x)
        {
            _2628 = true;
            break;
        }
        _2628 = false;
        break;
    }
    float _2783;
    if (_2628)
    {
        discard_state = true;
        _2783 = 0.0;
    }
    else
    {
        _2783 = cbInstanceData._m0[_2317].w;
    }
    SV_Target.x = _2461;
    SV_Target.y = _2462;
    SV_Target.z = _2463;
    SV_Target.w = _2783;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2317].w;
    discard_exit();
}


