#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _696;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _161 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _162 = _161 * NORMAL.x;
    float _163 = _161 * NORMAL.y;
    float _164 = _161 * NORMAL.z;
    float _169;
    float _170;
    float _171;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _169 = (-0.0) - _162;
        _170 = (-0.0) - _163;
        _171 = (-0.0) - _164;
    }
    else
    {
        _169 = _162;
        _170 = _163;
        _171 = _164;
    }
    vec4 _185 = texture(sampler2D(M_A_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _188 = _185.x;
    float _189 = _185.y;
    float _190 = _185.z;
    float _194 = inversesqrt(dot(vec3(_169, _170, _171), vec3(_169, _170, _171)));
    float _195 = _194 * _169;
    float _196 = _194 * _170;
    float _197 = _194 * _171;
    float _2806 = isnan(0.0) ? _188 : (isnan(_188) ? 0.0 : max(_188, 0.0));
    float _2817 = isnan(0.0) ? _189 : (isnan(_189) ? 0.0 : max(_189, 0.0));
    float _2828 = isnan(0.0) ? _190 : (isnan(_190) ? 0.0 : max(_190, 0.0));
    float _217 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _260 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _270 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _260);
    float _271 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _260);
    float _272 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _260);
    float _276 = inversesqrt(dot(vec3(_270, _271, _272), vec3(_270, _271, _272)));
    float _277 = _270 * _276;
    float _278 = _271 * _276;
    float _279 = _272 * _276;
    float _285 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _286 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _307 = fma(_197, cbSceneParam._m0[5u].z, fma(_196, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _195));
    float _310 = fma(_197, cbSceneParam._m0[6u].z, fma(_196, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _195));
    float _313 = fma(_197, cbSceneParam._m0[7u].z, fma(_196, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _195));
    uint _326 = uint(roundEven(NORMAL.w)) * 13u;
    uint _329 = (_326 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _335 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2806 : (isnan(_2806) ? 1.0 : min(_2806, 1.0)))) * cbInstanceData._m0[_329].x;
    float _336 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2817 : (isnan(_2817) ? 1.0 : min(_2817, 1.0)))) * cbInstanceData._m0[_329].y;
    float _337 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2828 : (isnan(_2828) ? 1.0 : min(_2828, 1.0)))) * cbInstanceData._m0[_329].z;
    float _2839 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _338 = isnan(1.0) ? _2839 : (isnan(_2839) ? 1.0 : min(_2839, 1.0));
    float _2850 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _339 = isnan(1.0) ? _2850 : (isnan(_2850) ? 1.0 : min(_2850, 1.0));
    float _2861 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _340 = isnan(1.0) ? _2861 : (isnan(_2861) ? 1.0 : min(_2861, 1.0));
    vec4 _349 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _285, cbSceneParam._m0[86u].y * _286));
    float _352 = _349.x * TEXCOORD.z;
    float _353 = dot(vec3(_195, _196, _197), vec3(_277, _278, _279));
    float _356 = _353 * 2.0;
    float _361 = (_356 * _195) - _277;
    float _362 = (_356 * _196) - _278;
    float _363 = (_356 * _197) - _279;
    float _385 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _389 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _393 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _695;
    float _697;
    float _698;
    float _699;
    float _700;
    float _701;
    float _702;
    float _703;
    float _704;
    float _705;
    float _706;
    float _707;
    float _708;
    float _709;
    float _710;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _420 = fma(_393, cbModelParam._m0[26u].z, fma(_389, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _385));
        float _424 = fma(_393, cbModelParam._m0[27u].z, fma(_389, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _385));
        float _428 = fma(_393, cbModelParam._m0[28u].z, fma(_389, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _385));
        float _453 = _385 + _195;
        float _454 = _389 + _196;
        float _455 = _393 + _197;
        float _465 = fma(_455, cbModelParam._m0[26u].z, fma(_454, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _453)) - _420;
        float _466 = fma(_455, cbModelParam._m0[27u].z, fma(_454, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _453)) - _424;
        float _467 = fma(_455, cbModelParam._m0[28u].z, fma(_454, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _453)) - _428;
        float _471 = inversesqrt(dot(vec3(_465, _466, _467), vec3(_465, _466, _467)));
        float _484 = ((_471 * _465) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_420 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _485 = ((_471 * _466) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_424 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _486 = ((_471 * _467) / cbModelParam._m0[34u].z) + ((((((_428 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _489 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_484, _485, _486), 0.0);
        vec4 _496 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_484, _485, _486), 0.0);
        vec4 _503 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_484, _485, _486), 0.0);
        vec4 _510 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_484, _485, _486), 0.0);
        float _523 = exp2((_489.w + (-0.5)) * 20.0) * 2.0;
        float _524 = _523 * (_489.x + (-0.5));
        float _525 = _523 * (_489.y + (-0.5));
        float _526 = _523 * (_489.z + (-0.5));
        float _533 = exp2((_496.w + (-0.5)) * 20.0) * 2.0;
        float _534 = _533 * (_496.x + (-0.5));
        float _535 = _533 * (_496.y + (-0.5));
        float _536 = _533 * (_496.z + (-0.5));
        float _543 = exp2((_503.w + (-0.5)) * 20.0) * 2.0;
        float _544 = _543 * (_503.x + (-0.5));
        float _545 = _543 * (_503.y + (-0.5));
        float _546 = _543 * (_503.z + (-0.5));
        float _553 = exp2((_510.w + (-0.5)) * 20.0) * 2.0;
        float _554 = _553 * (_510.x + (-0.5));
        float _555 = _553 * (_510.y + (-0.5));
        float _556 = _553 * (_510.z + (-0.5));
        float _557 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
        float _558 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
        float _559 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
        float _560 = _524 * 0.5;
        float _561 = _534 * 0.5;
        float _562 = _544 * 0.5;
        float _563 = dot(vec3(_560, _561, _562), vec3(_560, _561, _562));
        float _568 = (_563 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_563);
        float _577 = (dot(vec3(_195, _196, _197), vec3(_568 * _560, _568 * _561, _568 * _562)) + 1.0) * 0.5;
        float _2887 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
        float _587 = sqrt(((_561 * _561) + (_560 * _560)) + (_562 * _562)) / (_557 + 9.9999997473787516355514526367188e-06);
        float _2898 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
        float _588 = isnan(1.0) ? _2898 : (isnan(_2898) ? 1.0 : min(_2898, 1.0));
        float _589 = _588 * 2.0;
        float _593 = (1.0 - _588) / (_588 + 1.0);
        float _2909 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
        float _594 = isnan(1.0) ? _2909 : (isnan(_2909) ? 1.0 : min(_2909, 1.0));
        float _603 = ((((1.0 - _594) * (_589 + 2.0)) * exp2(log2(isnan(1.0) ? _2887 : (isnan(_2887) ? 1.0 : min(_2887, 1.0))) * (_589 + 1.0))) + _594) * _557;
        float _604 = _525 * 0.5;
        float _605 = _535 * 0.5;
        float _606 = _545 * 0.5;
        float _607 = dot(vec3(_604, _605, _606), vec3(_604, _605, _606));
        float _612 = (_607 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_607);
        float _620 = (dot(vec3(_195, _196, _197), vec3(_612 * _604, _612 * _605, _612 * _606)) + 1.0) * 0.5;
        float _2920 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
        float _629 = sqrt(((_605 * _605) + (_604 * _604)) + (_606 * _606)) / (_558 + 9.9999997473787516355514526367188e-06);
        float _2931 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
        float _630 = isnan(1.0) ? _2931 : (isnan(_2931) ? 1.0 : min(_2931, 1.0));
        float _631 = _630 * 2.0;
        float _635 = (1.0 - _630) / (_630 + 1.0);
        float _2942 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
        float _636 = isnan(1.0) ? _2942 : (isnan(_2942) ? 1.0 : min(_2942, 1.0));
        float _645 = ((((1.0 - _636) * (_631 + 2.0)) * exp2(log2(isnan(1.0) ? _2920 : (isnan(_2920) ? 1.0 : min(_2920, 1.0))) * (_631 + 1.0))) + _636) * _558;
        float _646 = _526 * 0.5;
        float _647 = _536 * 0.5;
        float _648 = _546 * 0.5;
        float _649 = dot(vec3(_646, _647, _648), vec3(_646, _647, _648));
        float _654 = (_649 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_649);
        float _662 = (dot(vec3(_195, _196, _197), vec3(_654 * _646, _654 * _647, _654 * _648)) + 1.0) * 0.5;
        float _2953 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
        float _671 = sqrt(((_647 * _647) + (_646 * _646)) + (_648 * _648)) / (_559 + 9.9999997473787516355514526367188e-06);
        float _2964 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
        float _672 = isnan(1.0) ? _2964 : (isnan(_2964) ? 1.0 : min(_2964, 1.0));
        float _673 = _672 * 2.0;
        float _677 = (1.0 - _672) / (_672 + 1.0);
        float _2975 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
        float _678 = isnan(1.0) ? _2975 : (isnan(_2975) ? 1.0 : min(_2975, 1.0));
        float _687 = ((((1.0 - _678) * (_673 + 2.0)) * exp2(log2(isnan(1.0) ? _2953 : (isnan(_2953) ? 1.0 : min(_2953, 1.0))) * (_673 + 1.0))) + _678) * _559;
        _695 = _526;
        _697 = _525;
        _698 = _524;
        _699 = _536;
        _700 = _535;
        _701 = _534;
        _702 = _546;
        _703 = _545;
        _704 = _544;
        _705 = _559;
        _706 = _558;
        _707 = _557;
        _708 = cbModelParam._m0[36u].z * (isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0)));
        _709 = cbModelParam._m0[36u].z * (isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0)));
        _710 = cbModelParam._m0[36u].z * (isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0)));
    }
    else
    {
        _695 = _696;
        _697 = _696;
        _698 = _696;
        _699 = _696;
        _700 = _696;
        _701 = _696;
        _702 = _696;
        _703 = _696;
        _704 = _696;
        _705 = _696;
        _706 = _696;
        _707 = _696;
        _708 = 0.0;
        _709 = 0.0;
        _710 = 0.0;
    }
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _736 = fma(_393, cbModelParam._m0[30u].z, fma(_389, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _385));
        float _740 = fma(_393, cbModelParam._m0[31u].z, fma(_389, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _385));
        float _744 = fma(_393, cbModelParam._m0[32u].z, fma(_389, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _385));
        float _767 = _385 + _195;
        float _768 = _389 + _196;
        float _769 = _393 + _197;
        float _779 = fma(_769, cbModelParam._m0[30u].z, fma(_768, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _767)) - _736;
        float _780 = fma(_769, cbModelParam._m0[31u].z, fma(_768, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _767)) - _740;
        float _781 = fma(_769, cbModelParam._m0[32u].z, fma(_768, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _767)) - _744;
        float _785 = inversesqrt(dot(vec3(_779, _780, _781), vec3(_779, _780, _781)));
        float _798 = ((_785 * _779) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_736 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _799 = ((_785 * _780) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_740 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _800 = ((_785 * _781) / cbModelParam._m0[35u].z) + ((((((_744 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _802 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_798, _799, _800), 0.0);
        vec4 _809 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_798, _799, _800), 0.0);
        vec4 _816 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_798, _799, _800), 0.0);
        vec4 _823 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_798, _799, _800), 0.0);
        float _835 = exp2((_802.w + (-0.5)) * 20.0) * 2.0;
        float _836 = _835 * (_802.x + (-0.5));
        float _837 = _835 * (_802.y + (-0.5));
        float _838 = _835 * (_802.z + (-0.5));
        float _845 = exp2((_809.w + (-0.5)) * 20.0) * 2.0;
        float _846 = _845 * (_809.x + (-0.5));
        float _847 = _845 * (_809.y + (-0.5));
        float _848 = _845 * (_809.z + (-0.5));
        float _855 = exp2((_816.w + (-0.5)) * 20.0) * 2.0;
        float _856 = _855 * (_816.x + (-0.5));
        float _857 = _855 * (_816.y + (-0.5));
        float _858 = _855 * (_816.z + (-0.5));
        float _865 = exp2((_823.w + (-0.5)) * 20.0) * 2.0;
        float _866 = _865 * (_823.x + (-0.5));
        float _867 = _865 * (_823.y + (-0.5));
        float _868 = _865 * (_823.z + (-0.5));
        float _869 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _870 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _871 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _872 = _836 * 0.5;
        float _873 = _846 * 0.5;
        float _874 = _856 * 0.5;
        float _875 = dot(vec3(_872, _873, _874), vec3(_872, _873, _874));
        float _880 = (_875 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_875);
        float _888 = (dot(vec3(_195, _196, _197), vec3(_880 * _872, _880 * _873, _880 * _874)) + 1.0) * 0.5;
        float _3016 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _897 = sqrt(((_873 * _873) + (_872 * _872)) + (_874 * _874)) / (_869 + 9.9999997473787516355514526367188e-06);
        float _3027 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _898 = isnan(1.0) ? _3027 : (isnan(_3027) ? 1.0 : min(_3027, 1.0));
        float _899 = _898 * 2.0;
        float _903 = (1.0 - _898) / (_898 + 1.0);
        float _3038 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _904 = isnan(1.0) ? _3038 : (isnan(_3038) ? 1.0 : min(_3038, 1.0));
        float _913 = ((((1.0 - _904) * (_899 + 2.0)) * exp2(log2(isnan(1.0) ? _3016 : (isnan(_3016) ? 1.0 : min(_3016, 1.0))) * (_899 + 1.0))) + _904) * _869;
        float _914 = _837 * 0.5;
        float _915 = _847 * 0.5;
        float _916 = _857 * 0.5;
        float _917 = dot(vec3(_914, _915, _916), vec3(_914, _915, _916));
        float _922 = (_917 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_917);
        float _930 = (dot(vec3(_195, _196, _197), vec3(_922 * _914, _922 * _915, _922 * _916)) + 1.0) * 0.5;
        float _3049 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _939 = sqrt(((_915 * _915) + (_914 * _914)) + (_916 * _916)) / (_870 + 9.9999997473787516355514526367188e-06);
        float _3060 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3060 : (isnan(_3060) ? 1.0 : min(_3060, 1.0));
        float _941 = _940 * 2.0;
        float _945 = (1.0 - _940) / (_940 + 1.0);
        float _3071 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _946 = isnan(1.0) ? _3071 : (isnan(_3071) ? 1.0 : min(_3071, 1.0));
        float _955 = ((((1.0 - _946) * (_941 + 2.0)) * exp2(log2(isnan(1.0) ? _3049 : (isnan(_3049) ? 1.0 : min(_3049, 1.0))) * (_941 + 1.0))) + _946) * _870;
        float _956 = _838 * 0.5;
        float _957 = _848 * 0.5;
        float _958 = _858 * 0.5;
        float _959 = dot(vec3(_956, _957, _958), vec3(_956, _957, _958));
        float _964 = (_959 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_959);
        float _972 = (dot(vec3(_195, _196, _197), vec3(_964 * _956, _964 * _957, _964 * _958)) + 1.0) * 0.5;
        float _3082 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _981 = sqrt(((_957 * _957) + (_956 * _956)) + (_958 * _958)) / (_871 + 9.9999997473787516355514526367188e-06);
        float _3093 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3093 : (isnan(_3093) ? 1.0 : min(_3093, 1.0));
        float _983 = _982 * 2.0;
        float _987 = (1.0 - _982) / (_982 + 1.0);
        float _3104 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3104 : (isnan(_3104) ? 1.0 : min(_3104, 1.0));
        float _997 = ((((1.0 - _988) * (_983 + 2.0)) * exp2(log2(isnan(1.0) ? _3082 : (isnan(_3082) ? 1.0 : min(_3082, 1.0))) * (_983 + 1.0))) + _988) * _871;
        _1005 = _838;
        _1006 = _837;
        _1007 = _836;
        _1008 = _848;
        _1009 = _847;
        _1010 = _846;
        _1011 = _858;
        _1012 = _857;
        _1013 = _856;
        _1014 = _871;
        _1015 = _870;
        _1016 = _869;
        _1017 = cbModelParam._m0[36u].w * (isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0)));
        _1018 = cbModelParam._m0[36u].w * (isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0)));
        _1019 = cbModelParam._m0[36u].w * (isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0)));
    }
    else
    {
        _1005 = _696;
        _1006 = _696;
        _1007 = _696;
        _1008 = _696;
        _1009 = _696;
        _1010 = _696;
        _1011 = _696;
        _1012 = _696;
        _1013 = _696;
        _1014 = _696;
        _1015 = _696;
        _1016 = _696;
        _1017 = 0.0;
        _1018 = 0.0;
        _1019 = 0.0;
    }
    float _1029 = (cbModelParam._m0[1u].x * (_1017 - _708)) + _708;
    float _1030 = (cbModelParam._m0[1u].x * (_1018 - _709)) + _709;
    float _1031 = (cbModelParam._m0[1u].x * (_1019 - _710)) + _710;
    float _1052 = fma(_1031, cbSceneParam._m0[89u].z, fma(_1030, cbSceneParam._m0[89u].y, _1029 * cbSceneParam._m0[89u].x));
    float _1055 = fma(_1031, cbSceneParam._m0[90u].z, fma(_1030, cbSceneParam._m0[90u].y, _1029 * cbSceneParam._m0[90u].x));
    float _1058 = fma(_1031, cbSceneParam._m0[91u].z, fma(_1030, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1029));
    float _1073 = _361 * 0.5;
    float _1074 = _362 * 0.5;
    float _1075 = _363 * 0.5;
    float _1076 = dot(vec4(_1073, _1074, _1075, 1.0), vec4(_1007, _1010, _1013, _1016));
    float _1079 = dot(vec4(_1073, _1074, _1075, 1.0), vec4(_1006, _1009, _1012, _1015));
    float _1082 = dot(vec4(_1073, _1074, _1075, 1.0), vec4(_1005, _1008, _1011, _1014));
    float _1116;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1089 = dot(vec4(_1073, _1074, _1075, 1.0), vec4(_695, _699, _702, _705));
        float _1093 = dot(vec4(_1073, _1074, _1075, 1.0), vec4(_697, _700, _703, _706));
        float _1097 = dot(vec4(_1073, _1074, _1075, 1.0), vec4(_698, _701, _704, _707));
        float _1104 = dot(vec4(cbModelParam._m0[39u]), vec4(_1073, _1074, _1075, 1.0));
        _1116 = dot(vec3(isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0)), isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0)), isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1104) ? 0.0 : (isnan(0.0) ? _1104 : max(0.0, _1104))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1116 = 1.0;
    }
    float _1127;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1118 = dot(vec4(cbModelParam._m0[40u]), vec4(_1073, _1074, _1075, 1.0));
        _1127 = dot(vec3(isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0)), isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0)), isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1118) ? 0.0 : (isnan(0.0) ? _1118 : max(0.0, _1118))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1127 = 1.0;
    }
    float _1131 = (_1127 * cbModelParam._m0[1u].x) + (_1116 * (1.0 - cbModelParam._m0[1u].x));
    float _1140 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1222;
    float _1224;
    float _1226;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1189 = fma(_393, cbModelParam._m0[13u].z, fma(_389, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _385)) + cbModelParam._m0[13u].w;
        float _1193 = fma(_393, cbModelParam._m0[14u].z, fma(_389, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _385)) + cbModelParam._m0[14u].w;
        float _1197 = fma(_393, cbModelParam._m0[15u].z, fma(_389, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _385)) + cbModelParam._m0[15u].w;
        float _1200 = fma(_363, cbModelParam._m0[13u].z, fma(_362, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _361));
        float _1203 = fma(_363, cbModelParam._m0[14u].z, fma(_362, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _361));
        float _1206 = fma(_363, cbModelParam._m0[15u].z, fma(_362, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _361));
        float _1232;
        if (_1200 > 0.0)
        {
            _1232 = abs((1.0 - _1189) / _1200);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1200 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1189 + 1.0) / _1200);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1232 = frontier_phi_16_14_ladder;
        }
        float _1440;
        if (_1203 > 0.0)
        {
            _1440 = abs((1.0 - _1193) / _1203);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1203 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1193 + 1.0) / _1203);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1440 = frontier_phi_25_21_ladder;
        }
        float _1629;
        if (_1206 > 0.0)
        {
            _1629 = abs((1.0 - _1197) / _1206);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1206 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1197 + 1.0) / _1206);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1629 = frontier_phi_37_32_ladder;
        }
        float _1631 = isnan(_1440) ? _1232 : (isnan(_1232) ? _1440 : min(_1232, _1440));
        float _1632 = isnan(_1629) ? _1631 : (isnan(_1631) ? _1629 : min(_1631, _1629));
        float _1636 = (_1632 * _1200) + _1189;
        float _1637 = (_1632 * _1203) + _1193;
        float _1638 = (_1632 * _1206) + _1197;
        float _1639 = _1632 * 9.9999997473787516355514526367188e-05;
        float _1641 = (-1.0) - _1639;
        float _1643 = _1639 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1638 > _1643) || ((_1638 < _1641) || ((_1637 > _1643) || ((_1637 < _1641) || ((_1636 < _1641) || (_1636 > _1643))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1735 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1638, cbModelParam._m0[9u].z, fma(_1637, cbModelParam._m0[9u].y, _1636 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1638, cbModelParam._m0[10u].z, fma(_1637, cbModelParam._m0[10u].y, _1636 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1638, cbModelParam._m0[11u].z, fma(_1637, cbModelParam._m0[11u].y, _1636 * cbModelParam._m0[11u].x))), _1140);
            frontier_phi_15_37_ladder = _1735.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1735.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1735.x * cbModelParam._m0[1u].y;
        }
        _1222 = frontier_phi_15_37_ladder_2;
        _1224 = frontier_phi_15_37_ladder_1;
        _1226 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1210 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_361, _362, _363), _1140);
        _1222 = _1210.x * cbModelParam._m0[1u].y;
        _1224 = _1210.y * cbModelParam._m0[1u].y;
        _1226 = _1210.z * cbModelParam._m0[1u].y;
    }
    float _1229 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1322;
    float _1324;
    float _1326;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1286 = fma(_393, cbModelParam._m0[21u].z, fma(_389, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _385)) + cbModelParam._m0[21u].w;
        float _1290 = fma(_393, cbModelParam._m0[22u].z, fma(_389, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _385)) + cbModelParam._m0[22u].w;
        float _1294 = fma(_393, cbModelParam._m0[23u].z, fma(_389, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _385)) + cbModelParam._m0[23u].w;
        float _1297 = fma(_363, cbModelParam._m0[21u].z, fma(_362, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _361));
        float _1300 = fma(_363, cbModelParam._m0[22u].z, fma(_362, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _361));
        float _1303 = fma(_363, cbModelParam._m0[23u].z, fma(_362, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _361));
        float _1445;
        if (_1297 > 0.0)
        {
            _1445 = abs((1.0 - _1286) / _1297);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1297 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1286 + 1.0) / _1297);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1445 = frontier_phi_27_23_ladder;
        }
        float _1656;
        if (_1300 > 0.0)
        {
            _1656 = abs((1.0 - _1290) / _1300);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1300 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1290 + 1.0) / _1300);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1656 = frontier_phi_39_34_ladder;
        }
        float _1807;
        if (_1303 > 0.0)
        {
            _1807 = abs((1.0 - _1294) / _1303);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1303 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1294 + 1.0) / _1303);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _1807 = frontier_phi_48_45_ladder;
        }
        float _1809 = isnan(_1656) ? _1445 : (isnan(_1445) ? _1656 : min(_1445, _1656));
        float _1810 = isnan(_1807) ? _1809 : (isnan(_1809) ? _1807 : min(_1809, _1807));
        float _1814 = (_1810 * _1297) + _1286;
        float _1815 = (_1810 * _1300) + _1290;
        float _1816 = (_1810 * _1303) + _1294;
        float _1817 = _1810 * 9.9999997473787516355514526367188e-05;
        float _1818 = (-1.0) - _1817;
        float _1820 = _1817 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1816 > _1820) || ((_1816 < _1818) || ((_1815 > _1820) || ((_1815 < _1818) || ((_1814 < _1818) || (_1814 > _1820))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2014 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1816, cbModelParam._m0[17u].z, fma(_1815, cbModelParam._m0[17u].y, _1814 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1816, cbModelParam._m0[18u].z, fma(_1815, cbModelParam._m0[18u].y, _1814 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1816, cbModelParam._m0[19u].z, fma(_1815, cbModelParam._m0[19u].y, _1814 * cbModelParam._m0[19u].x))), _1229);
            frontier_phi_24_48_ladder = _2014.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2014.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2014.x * cbModelParam._m0[1u].z;
        }
        _1322 = frontier_phi_24_48_ladder_2;
        _1324 = frontier_phi_24_48_ladder_1;
        _1326 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1306 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_361, _362, _363), _1229);
        _1322 = _1306.x * cbModelParam._m0[1u].z;
        _1324 = _1306.y * cbModelParam._m0[1u].z;
        _1326 = _1306.z * cbModelParam._m0[1u].z;
    }
    float _1338 = _352 * 0.01200000010430812835693359375;
    float _1340 = _1338 * ((cbModelParam._m0[1u].w * (_1322 - _1222)) + _1222);
    float _1341 = _1338 * ((cbModelParam._m0[1u].w * (_1324 - _1224)) + _1224);
    float _1342 = _1338 * ((cbModelParam._m0[1u].w * (_1326 - _1226)) + _1226);
    float _1345 = fma(_1342, cbSceneParam._m0[89u].z, fma(_1341, cbSceneParam._m0[89u].y, _1340 * cbSceneParam._m0[89u].x));
    float _1348 = fma(_1342, cbSceneParam._m0[90u].z, fma(_1341, cbSceneParam._m0[90u].y, _1340 * cbSceneParam._m0[90u].x));
    float _1351 = fma(_1342, cbSceneParam._m0[91u].z, fma(_1341, cbSceneParam._m0[91u].y, _1340 * cbSceneParam._m0[91u].x));
    uvec4 _1361 = floatBitsToUint(cbInstanceData._m0[_326 + 5u]);
    uint _1363 = _1361.x * 14u;
    uint _1364 = _1363 + 13u;
    float _1371 = _352 + (-1.0);
    float _1377 = (cbLight._m0[_1364].x * _1371) + 1.0;
    float _1378 = (cbLight._m0[_1364].y * _1371) + 1.0;
    float _1379 = (cbLight._m0[_1364].z * _1371) + 1.0;
    float _1380 = (cbLight._m0[_1364].w * _1371) + 1.0;
    uint _1381 = _1363 + 5u;
    float _1387 = isnan(1.0) ? _1378 : (isnan(_1378) ? 1.0 : min(_1378, 1.0));
    uint _1391 = _1363 + 4u;
    float _1398 = isnan(1.0) ? _1377 : (isnan(_1377) ? 1.0 : min(_1377, 1.0));
    uint _1402 = _1363 | 1u;
    float _1413 = dot(vec3(cbLight._m0[_1363].xyz), vec3(_195, _196, _197));
    float _1416 = dot(vec3(cbLight._m0[_1402].xyz), vec3(_195, _196, _197));
    float _3240 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
    float _3251 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
    float _1421 = (isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0))) * 0.3183098733425140380859375;
    float _1423 = (isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0))) * 0.3183098733425140380859375;
    float _1430 = ((cbLight._m0[_1381].x * _1387) * _1423) + ((cbLight._m0[_1391].x * _1398) * _1421);
    float _1431 = ((_1387 * cbLight._m0[_1381].y) * _1423) + ((_1398 * cbLight._m0[_1391].y) * _1421);
    float _1432 = ((_1387 * cbLight._m0[_1381].z) * _1423) + ((_1398 * cbLight._m0[_1391].z) * _1421);
    uvec4 _1437 = floatBitsToUint(cbLight._m0[_1363 + 12u]);
    bool _1439 = _1437.x == 0u;
    float _1450;
    float _1452;
    float _1454;
    if (_1439)
    {
        _1450 = _1430;
        _1452 = _1431;
        _1454 = _1432;
    }
    else
    {
        uint _1458 = _1363 + 6u;
        float _1474 = (dot(vec3(cbLight._m0[_1363 + 2u].xyz), vec3(_195, _196, _197)) * 0.5) + 0.5;
        float _1475 = _1474 * _1474;
        float _3262 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0));
        float _1477 = isnan(1.0) ? _1379 : (isnan(_1379) ? 1.0 : min(_1379, 1.0));
        _1450 = (((cbLight._m0[_1458].x * 0.3183098733425140380859375) * _1476) * _1477) + _1430;
        _1452 = (((cbLight._m0[_1458].y * 0.3183098733425140380859375) * _1476) * _1477) + _1431;
        _1454 = (((cbLight._m0[_1458].z * 0.3183098733425140380859375) * _1476) * _1477) + _1432;
    }
    bool _1457 = _1437.y == 0u;
    float _1495;
    float _1497;
    float _1499;
    if (_1457)
    {
        _1495 = _1450;
        _1497 = _1452;
        _1499 = _1454;
    }
    else
    {
        uint _1600 = _1363 + 7u;
        float _1616 = (dot(vec3(cbLight._m0[_1363 + 3u].xyz), vec3(_195, _196, _197)) * 0.5) + 0.5;
        float _1617 = _1616 * _1616;
        float _3278 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0));
        float _1619 = isnan(1.0) ? _1380 : (isnan(_1380) ? 1.0 : min(_1380, 1.0));
        _1495 = (((cbLight._m0[_1600].x * 0.3183098733425140380859375) * _1618) * _1619) + _1450;
        _1497 = (((cbLight._m0[_1600].y * 0.3183098733425140380859375) * _1618) * _1619) + _1452;
        _1499 = (((cbLight._m0[_1600].z * 0.3183098733425140380859375) * _1618) * _1619) + _1454;
    }
    uint _1501 = _1363 + 8u;
    float _1507 = cbLight._m0[_1363].x + _277;
    float _1508 = cbLight._m0[_1363].y + _278;
    float _1509 = cbLight._m0[_1363].z + _279;
    float _1513 = inversesqrt(dot(vec3(_1507, _1508, _1509), vec3(_1507, _1508, _1509)));
    float _1517 = dot(vec3(_195, _196, _197), vec3(cbLight._m0[_1363].xyz));
    float _3294 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
    float _1520 = isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0));
    float _3305 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _1521 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
    float _1522 = dot(vec3(cbLight._m0[_1363].xyz), vec3(_1507 * _1513, _1508 * _1513, _1509 * _1513));
    float _3316 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
    float _1533 = (exp2(log2(1.0 - (isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1539 = (0.5 / ((_1520 + 9.9999999392252902907785028219223e-09) + _1521)) * _1520;
    float _3327 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
    float _1541 = (isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0))) * 0.31831014156341552734375;
    uint _1552 = _1363 + 9u;
    float _1558 = cbLight._m0[_1402].x + _277;
    float _1559 = cbLight._m0[_1402].y + _278;
    float _1560 = cbLight._m0[_1402].z + _279;
    float _1564 = inversesqrt(dot(vec3(_1558, _1559, _1560), vec3(_1558, _1559, _1560)));
    float _1568 = dot(vec3(_195, _196, _197), vec3(cbLight._m0[_1402].xyz));
    float _3338 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
    float _1571 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
    float _1572 = dot(vec3(cbLight._m0[_1402].xyz), vec3(_1558 * _1564, _1559 * _1564, _1560 * _1564));
    float _3349 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
    float _1581 = (exp2(log2(1.0 - (isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1585 = (0.5 / ((_1571 + 9.9999999392252902907785028219223e-09) + _1521)) * _1571;
    float _3360 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
    float _1587 = (isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0))) * 0.31831014156341552734375;
    float _1597 = (((_1581 * cbLight._m0[_1552].x) * _1587) * _1387) + (((_1533 * cbLight._m0[_1501].x) * _1541) * _1398);
    float _1598 = (((_1581 * cbLight._m0[_1552].y) * _1587) * _1387) + (((_1533 * cbLight._m0[_1501].y) * _1541) * _1398);
    float _1599 = (((_1581 * cbLight._m0[_1552].z) * _1587) * _1387) + (((_1533 * cbLight._m0[_1501].z) * _1541) * _1398);
    float _1661;
    float _1663;
    float _1665;
    if (_1439)
    {
        _1661 = _1597;
        _1663 = _1598;
        _1665 = _1599;
    }
    else
    {
        uint _1667 = _1363 + 10u;
        uint _1673 = _1363 + 2u;
        float _1679 = cbLight._m0[_1673].x + _277;
        float _1680 = cbLight._m0[_1673].y + _278;
        float _1681 = cbLight._m0[_1673].z + _279;
        float _1685 = inversesqrt(dot(vec3(_1679, _1680, _1681), vec3(_1679, _1680, _1681)));
        float _1689 = dot(vec3(_195, _196, _197), vec3(cbLight._m0[_1673].xyz));
        float _3371 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1692 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
        float _1693 = dot(vec3(cbLight._m0[_1673].xyz), vec3(_1679 * _1685, _1680 * _1685, _1681 * _1685));
        float _3382 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1702 = (exp2(log2(1.0 - (isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1706 = (0.5 / ((_1692 + 9.9999999392252902907785028219223e-09) + _1521)) * _1692;
        float _3393 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1708 = (isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0))) * 0.31831014156341552734375;
        float _1709 = isnan(1.0) ? _1379 : (isnan(_1379) ? 1.0 : min(_1379, 1.0));
        _1661 = (((_1702 * cbLight._m0[_1667].x) * _1708) * _1709) + _1597;
        _1663 = (((_1702 * cbLight._m0[_1667].y) * _1708) * _1709) + _1598;
        _1665 = (((_1702 * cbLight._m0[_1667].z) * _1708) * _1709) + _1599;
    }
    float _1744;
    float _1746;
    float _1748;
    if (_1457)
    {
        _1744 = _1661;
        _1746 = _1663;
        _1748 = _1665;
    }
    else
    {
        uint _1755 = _1363 + 11u;
        uint _1761 = _1363 + 3u;
        float _1767 = cbLight._m0[_1761].x + _277;
        float _1768 = cbLight._m0[_1761].y + _278;
        float _1769 = cbLight._m0[_1761].z + _279;
        float _1773 = inversesqrt(dot(vec3(_1767, _1768, _1769), vec3(_1767, _1768, _1769)));
        float _1777 = dot(vec3(_195, _196, _197), vec3(cbLight._m0[_1761].xyz));
        float _3409 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
        float _1780 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
        float _1781 = dot(vec3(cbLight._m0[_1761].xyz), vec3(_1767 * _1773, _1768 * _1773, _1769 * _1773));
        float _3420 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1790 = (exp2(log2(1.0 - (isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1794 = (0.5 / ((_1780 + 9.9999999392252902907785028219223e-09) + _1521)) * _1780;
        float _3431 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
        float _1796 = (isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0))) * 0.31831014156341552734375;
        float _1797 = isnan(1.0) ? _1380 : (isnan(_1380) ? 1.0 : min(_1380, 1.0));
        _1744 = (((_1790 * cbLight._m0[_1755].x) * _1796) * _1797) + _1661;
        _1746 = (((_1790 * cbLight._m0[_1755].y) * _1796) * _1797) + _1663;
        _1748 = (((_1790 * cbLight._m0[_1755].z) * _1796) * _1797) + _1665;
    }
    float _1931;
    float _1933;
    float _1935;
    float _1937;
    float _1939;
    float _1941;
    if (_1361.y == 0u)
    {
        float _1872 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1873 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1872;
        float _1874 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1872;
        float _1875 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1872;
        uvec4 _1887 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1888 = _1887.x;
        uint _1899 = uint((float(_1887.y) * floor(float(uint(cbSceneParam._m0[85u].y * _286) / _1888))) + floor(float(uint(cbSceneParam._m0[85u].x * _285) / _1888)));
        float _1909 = (log2(_1875 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1910 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
        uint _1913 = uint(isnan(14.0) ? _1910 : (isnan(_1910) ? 14.0 : min(_1910, 14.0)));
        uvec4 _1918 = texelFetch(g_lightClusterGridBuffer, int(((_1913 << 2u) + (_1899 << 6u)) >> 2u));
        uint _1919 = _1918.x;
        uint _1920 = _1887.z;
        float _2019;
        float _2021;
        float _2023;
        float _2025;
        float _2027;
        float _2029;
        if (((((1u << ((_1920 >> 4u) & 15u)) + 4294967295u) & _1919) == 0u) || ((_1920 & 240u) == 0u))
        {
            _2019 = 0.0;
            _2021 = 0.0;
            _2023 = 0.0;
            _2025 = 0.0;
            _2027 = 0.0;
            _2029 = 0.0;
        }
        else
        {
            float _2020;
            float _2022;
            float _2024;
            float _2026;
            float _2028;
            float _2030;
            float _2161 = 0.0;
            float _2162 = 0.0;
            float _2163 = 0.0;
            float _2164 = 0.0;
            float _2165 = 0.0;
            float _2166 = 0.0;
            uint _2167 = 0u;
            uint _2176;
            bool _2177;
            for (;;)
            {
                _2176 = texelFetch(g_lightClassification, int((((_1913 << 5u) + (_1899 << 9u)) + (_2167 << 2u)) >> 2u)).x;
                _2177 = _2176 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2177)
                {
                    frontier_phi_63_pred = _2166;
                    frontier_phi_63_pred_1 = _2165;
                    frontier_phi_63_pred_2 = _2164;
                    frontier_phi_63_pred_3 = _2163;
                    frontier_phi_63_pred_4 = _2162;
                    frontier_phi_63_pred_5 = _2161;
                }
                else
                {
                    float _2285;
                    float _2286;
                    float _2287;
                    float _2288;
                    float _2289;
                    float _2290;
                    uint _2291;
                    _2285 = _2161;
                    _2286 = _2162;
                    _2287 = _2163;
                    _2288 = _2164;
                    _2289 = _2165;
                    _2290 = _2166;
                    _2291 = _2176;
                    float _2217;
                    float _2218;
                    float _2219;
                    float _2220;
                    float _2221;
                    float _2222;
                    for (;;)
                    {
                        uint _2295 = uint(findLSB(_2291)) + (_2167 << 5u);
                        uint _2292 = (_2291 + 4294967295u) & _2291;
                        uint _2297 = _2295 * 48u;
                        vec4 _2311 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2297)).x, texelFetch(g_PointLightRenderingBuffer, int(_2297 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2297 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2297 + 3u)).x));
                        uint _2317 = (_2295 * 48u) + 4u;
                        vec4 _2330 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2317)).x, texelFetch(g_PointLightRenderingBuffer, int(_2317 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2317 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2317 + 3u)).x));
                        uint _2336 = (_2295 * 48u) + 8u;
                        vec3 _2347 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2336)).x, texelFetch(g_PointLightRenderingBuffer, int(_2336 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2336 + 2u)).x));
                        float _2351 = _2311.x - _1873;
                        float _2352 = _2311.y - _1874;
                        float _2353 = _2311.z - _1875;
                        float _2354 = dot(vec3(_2351, _2352, _2353), vec3(_2351, _2352, _2353));
                        float _2357 = inversesqrt(_2354);
                        float _2366 = 1.0 - (_2354 * _2311.w);
                        float _3457 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
                        float _2367 = isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0));
                        float _2368 = sqrt(_2354) * _2330.w;
                        float _2371 = 1.39999997615814208984375 / (_2368 + 1.39999997615814208984375);
                        float _2372 = _2371 * _2371;
                        float _2375 = ((1.0 - _2372) * dot(vec3(_307, _310, _313), vec3(_2357 * _2351, _2357 * _2352, _2357 * _2353))) + _2372;
                        float _2378 = _2368 * _2368;
                        float _2382 = ((isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0))) * _2367) / ((_2378 * 0.699999988079071044921875) + 1.0);
                        float _2386 = (-0.0) - _1873;
                        float _2387 = (-0.0) - _1874;
                        float _2388 = (-0.0) - _1875;
                        float _2392 = inversesqrt(dot(vec3(_2386, _2387, _2388), vec3(_2386, _2387, _2388)));
                        float _2396 = dot(vec3(_307, _310, _313), vec3(_2392 * _2386, _2392 * _2387, _2392 * _2388));
                        float _3473 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
                        float _3484 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
                        float _2400 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
                        float _2404 = (0.5 / (((isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0))) + 9.9999999392252902907785028219223e-09) + _2400)) * _2400;
                        float _3495 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
                        float _2413 = (((isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0))) * 3.1415927410125732421875) / ((_2378 * 2.1991131305694580078125) + 3.141590118408203125)) * _2367;
                        _2220 = (_2382 * _2330.x) + _2288;
                        _2221 = (_2382 * _2330.y) + _2289;
                        _2222 = (_2382 * _2330.z) + _2290;
                        _2217 = (_2413 * _2347.x) + _2285;
                        _2218 = (_2413 * _2347.y) + _2286;
                        _2219 = (_2413 * _2347.z) + _2287;
                        if (_2292 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2285 = _2217;
                            _2286 = _2218;
                            _2287 = _2219;
                            _2288 = _2220;
                            _2289 = _2221;
                            _2290 = _2222;
                            _2291 = _2292;
                        }
                    }
                    frontier_phi_63_pred = _2222;
                    frontier_phi_63_pred_1 = _2221;
                    frontier_phi_63_pred_2 = _2220;
                    frontier_phi_63_pred_3 = _2219;
                    frontier_phi_63_pred_4 = _2218;
                    frontier_phi_63_pred_5 = _2217;
                }
                _2030 = frontier_phi_63_pred;
                _2028 = frontier_phi_63_pred_1;
                _2026 = frontier_phi_63_pred_2;
                _2024 = frontier_phi_63_pred_3;
                _2022 = frontier_phi_63_pred_4;
                _2020 = frontier_phi_63_pred_5;
                uint _2168 = _2167 + 1u;
                if (_2168 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2161 = _2020;
                    _2162 = _2022;
                    _2163 = _2024;
                    _2164 = _2026;
                    _2165 = _2028;
                    _2166 = _2030;
                    _2167 = _2168;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2019 = _2020;
            _2021 = _2022;
            _2023 = _2024;
            _2025 = _2026;
            _2027 = _2028;
            _2029 = _2030;
        }
        uvec4 _2033 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2034 = _2033.z;
        uint _2036 = (_2034 >> 8u) & 15u;
        float _2132;
        float _2134;
        float _2136;
        float _2138;
        float _2140;
        float _2142;
        if (((4294967295u << _2036) & _1919) == 0u)
        {
            _2132 = _2019;
            _2134 = _2021;
            _2136 = _2023;
            _2138 = _2025;
            _2140 = _2027;
            _2142 = _2029;
        }
        else
        {
            float _2157 = inversesqrt(dot(vec3(_1873, _1874, _1875), vec3(_1873, _1874, _1875)));
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2036 < ((_2034 >> 12u) & 15u))
            {
                float _2133;
                float _2135;
                float _2137;
                float _2139;
                float _2141;
                float _2143;
                float _2268 = _2019;
                float _2269 = _2021;
                float _2270 = _2023;
                float _2271 = _2025;
                float _2272 = _2027;
                float _2273 = _2029;
                uint _2274 = _2036;
                uint _2283;
                bool _2284;
                for (;;)
                {
                    _2283 = texelFetch(g_lightClassification, int((((_1913 << 5u) + (_1899 << 9u)) + (_2274 << 2u)) >> 2u)).x;
                    _2284 = _2283 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2284)
                    {
                        frontier_phi_69_pred = _2273;
                        frontier_phi_69_pred_1 = _2272;
                        frontier_phi_69_pred_2 = _2271;
                        frontier_phi_69_pred_3 = _2270;
                        frontier_phi_69_pred_4 = _2269;
                        frontier_phi_69_pred_5 = _2268;
                    }
                    else
                    {
                        float _2418;
                        float _2419;
                        float _2420;
                        float _2421;
                        float _2422;
                        float _2423;
                        float _2670;
                        float _2671;
                        float _2672;
                        float _2673;
                        float _2674;
                        float _2675;
                        float _2431 = _2268;
                        float _2432 = _2269;
                        float _2433 = _2270;
                        float _2434 = _2271;
                        float _2435 = _2272;
                        float _2436 = _2273;
                        uint _2437 = _2283;
                        uint _2438;
                        vec4 _2463;
                        float _2464;
                        vec4 _2479;
                        vec3 _2491;
                        vec4 _2507;
                        vec4 _2523;
                        float _2570;
                        bool _2571;
                        for (;;)
                        {
                            uint _2448 = ((_2274 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2437));
                            _2438 = (_2437 + 4294967295u) & _2437;
                            uint _2450 = _2448 * 40u;
                            _2463 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2450)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2450 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2450 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2450 + 3u)).x));
                            _2464 = _2463.w;
                            uint _2466 = (_2448 * 40u) + 4u;
                            _2479 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2466)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2466 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2466 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2466 + 3u)).x));
                            uint _2481 = (_2448 * 40u) + 8u;
                            _2491 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2481)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2481 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2481 + 2u)).x));
                            uint _2494 = (_2448 * 40u) + 16u;
                            _2507 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2494 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2494 + 3u)).x));
                            uint _2510 = (_2448 * 40u) + 20u;
                            _2523 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2510 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2510 + 3u)).x));
                            uint _2526 = (_2448 * 40u) + 24u;
                            vec4 _2539 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2526)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2526 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2526 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2526 + 3u)).x));
                            uint _2545 = (_2448 * 40u) + 28u;
                            vec4 _2558 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2545)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2545 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2545 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2545 + 3u)).x));
                            _2570 = fma(_1875, _2558.z, fma(_1874, _2558.y, _2558.x * _1873)) + _2558.w;
                            _2571 = !((fma(_1875, _2539.z, fma(_1874, _2539.y, _2539.x * _1873)) + _2539.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2571)
                            {
                                float _2598 = _2463.x - _1873;
                                float _2599 = _2463.y - _1874;
                                float _2600 = _2463.z - _1875;
                                float _2601 = dot(vec3(_2598, _2599, _2600), vec3(_2598, _2599, _2600));
                                float _2604 = inversesqrt(_2601);
                                float _2605 = _2604 * _2598;
                                float _2606 = _2604 * _2599;
                                float _2607 = _2604 * _2600;
                                float _2611 = 1.0 - (_2601 / (_2464 * _2464));
                                float _3506 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
                                float _2612 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
                                float _2616 = sqrt(_2601) * _2479.w;
                                float _2618 = 1.39999997615814208984375 / (_2616 + 1.39999997615814208984375);
                                float _2619 = _2618 * _2618;
                                float _2620 = 1.0 - _2619;
                                float _2622 = (_2620 * dot(vec3(_2605, _2606, _2607), vec3(_307, _310, _313))) + _2619;
                                float _2625 = _2616 * _2616;
                                float _2629 = (fma(_1875, _2507.z, fma(_1874, _2507.y, _2507.x * _1873)) + _2507.w) / _2570;
                                float _2630 = (fma(_1875, _2523.z, fma(_1874, _2523.y, _2523.x * _1873)) + _2523.w) / _2570;
                                float _2634 = 1.0 - dot(vec2(_2629, _2630), vec2(_2629, _2630));
                                float _3522 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
                                float _2635 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
                                float _2636 = _2635 * (((isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0))) * _2612) / ((_2625 * 0.699999988079071044921875) + 1.0));
                                float _2646 = dot(vec3(_307, _310, _313), vec3((-0.0) - (_1873 * _2157), (-0.0) - (_1874 * _2157), (-0.0) - (_1875 * _2157)));
                                float _3533 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
                                float _2654 = (_2620 * dot(vec3(_307, _310, _313), vec3(_2605, _2606, _2607))) + _2619;
                                float _3544 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
                                float _2655 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
                                float _2659 = (0.5 / (((isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))) + 9.9999999392252902907785028219223e-09) + _2655)) * _2655;
                                float _3555 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
                                float _2666 = (_2635 * _2612) * (((isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * 3.1415927410125732421875) / ((_2625 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_75_pred = _2636 * _2479.z;
                                frontier_phi_75_pred_1 = _2636 * _2479.y;
                                frontier_phi_75_pred_2 = _2636 * _2479.x;
                                frontier_phi_75_pred_3 = _2666 * _2491.z;
                                frontier_phi_75_pred_4 = _2666 * _2491.y;
                                frontier_phi_75_pred_5 = _2666 * _2491.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _2675 = frontier_phi_75_pred;
                            _2674 = frontier_phi_75_pred_1;
                            _2673 = frontier_phi_75_pred_2;
                            _2672 = frontier_phi_75_pred_3;
                            _2671 = frontier_phi_75_pred_4;
                            _2670 = frontier_phi_75_pred_5;
                            _2421 = _2673 + _2434;
                            _2422 = _2674 + _2435;
                            _2423 = _2675 + _2436;
                            _2418 = _2670 + _2431;
                            _2419 = _2671 + _2432;
                            _2420 = _2672 + _2433;
                            if (_2438 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2431 = _2418;
                                _2432 = _2419;
                                _2433 = _2420;
                                _2434 = _2421;
                                _2435 = _2422;
                                _2436 = _2423;
                                _2437 = _2438;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2423;
                        frontier_phi_69_pred_1 = _2422;
                        frontier_phi_69_pred_2 = _2421;
                        frontier_phi_69_pred_3 = _2420;
                        frontier_phi_69_pred_4 = _2419;
                        frontier_phi_69_pred_5 = _2418;
                    }
                    _2143 = frontier_phi_69_pred;
                    _2141 = frontier_phi_69_pred_1;
                    _2139 = frontier_phi_69_pred_2;
                    _2137 = frontier_phi_69_pred_3;
                    _2135 = frontier_phi_69_pred_4;
                    _2133 = frontier_phi_69_pred_5;
                    uint _2275 = _2274 + 1u;
                    if (_2275 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2268 = _2133;
                        _2269 = _2135;
                        _2270 = _2137;
                        _2271 = _2139;
                        _2272 = _2141;
                        _2273 = _2143;
                        _2274 = _2275;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2143;
                frontier_phi_57_58_ladder_1 = _2141;
                frontier_phi_57_58_ladder_2 = _2139;
                frontier_phi_57_58_ladder_3 = _2137;
                frontier_phi_57_58_ladder_4 = _2135;
                frontier_phi_57_58_ladder_5 = _2133;
            }
            else
            {
                frontier_phi_57_58_ladder = _2029;
                frontier_phi_57_58_ladder_1 = _2027;
                frontier_phi_57_58_ladder_2 = _2025;
                frontier_phi_57_58_ladder_3 = _2023;
                frontier_phi_57_58_ladder_4 = _2021;
                frontier_phi_57_58_ladder_5 = _2019;
            }
            _2132 = frontier_phi_57_58_ladder_5;
            _2134 = frontier_phi_57_58_ladder_4;
            _2136 = frontier_phi_57_58_ladder_3;
            _2138 = frontier_phi_57_58_ladder_2;
            _2140 = frontier_phi_57_58_ladder_1;
            _2142 = frontier_phi_57_58_ladder;
        }
        float _2147 = isnan(1.0) ? _352 : (isnan(_352) ? 1.0 : min(_352, 1.0));
        _1931 = (_2147 * _2138) + _1495;
        _1933 = (_2147 * _2140) + _1497;
        _1935 = (_2147 * _2142) + _1499;
        _1937 = ((_2132 * 0.039999999105930328369140625) * _2147) + _1744;
        _1939 = ((_2134 * 0.039999999105930328369140625) * _2147) + _1746;
        _1941 = ((_2136 * 0.039999999105930328369140625) * _2147) + _1748;
    }
    else
    {
        _1931 = _1495;
        _1933 = _1497;
        _1935 = _1499;
        _1937 = _1744;
        _1939 = _1746;
        _1941 = _1748;
    }
    float _3571 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _3582 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _3593 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    uint _1961 = _326 + 6u;
    float _1969 = _285 / cbSceneParam._m0[86u].x;
    float _1970 = _286 / cbSceneParam._m0[86u].y;
    vec4 _1984 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1969, _1970, (log2((isnan(cbSceneParam._m0[77u].w) ? _217 : (isnan(_217) ? cbSceneParam._m0[77u].w : min(_217, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1986 = _1984.x;
    float _1987 = _1984.y;
    float _1988 = _1984.z;
    float _1989 = _1984.w;
    float _2081;
    float _2083;
    float _2085;
    float _2087;
    if (_217 > cbSceneParam._m0[78u].w)
    {
        float _2044 = isnan(_217) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _217 : min(cbSceneParam._m0[80u].w, _217));
        float _2045 = _2044 / _217;
        float _2056 = _2045 * _270;
        float _2057 = _271 * _2045;
        float _2058 = (-0.0) - _2057;
        float _2059 = _2045 * _272;
        float _2061 = (cbSceneParam._m0[77u].w * _2058) / _2044;
        float _2062 = _2061 + cbSceneParam._m0[79u].w;
        float _2063 = cbSceneParam._m0[79u].w - _2057;
        float _2069 = sqrt(((_2056 * _2056) + (_2057 * _2057)) + (_2059 * _2059));
        float _2072 = (1.0 - (cbSceneParam._m0[77u].w / _2044)) * _2069;
        float _2077 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2079 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2230;
        if (abs((_2058 - _2061) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2230 = ((((_2062 > 0.0) ? exp2(_2077 * _2062) : (2.0 - exp2(_2079 * _2062))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2072;
        }
        else
        {
            float _2190 = 1.0 / cbSceneParam._m0[80u].x;
            float _2191 = isnan(_2063) ? _2062 : (isnan(_2062) ? _2063 : max(_2062, _2063));
            float _2192 = isnan(_2063) ? _2062 : (isnan(_2062) ? _2063 : min(_2062, _2063));
            float _2201 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : min(_2191, 0.0));
            float _2202 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : min(_2192, 0.0));
            _2230 = ((abs(_2069 / _2058) * cbSceneParam._m0[80u].y) * ((((_2201 - _2202) * 2.0) - ((exp2(_2077 * (isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0)))) - exp2(_2077 * (isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0))))) * _2190)) - ((exp2(_2079 * _2201) - exp2(_2079 * _2202)) * _2190))) + (_2072 * cbSceneParam._m0[80u].z);
        }
        vec4 _2232 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1969, _1970, 1.0), 0.0);
        float _2241 = exp2((_2230 * (-1.44269502162933349609375)) * (1.0 - _2232.w));
        float _2242 = log2(_2241);
        float _2258 = log2(_1989);
        _2081 = (exp2(_2258 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2242 * cbSceneParam._m0[78u].x)) * _2232.x) / cbSceneParam._m0[78u].x)) + _1986;
        _2083 = (exp2(_2258 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2242 * cbSceneParam._m0[78u].y)) * _2232.y) / cbSceneParam._m0[78u].y)) + _1987;
        _2085 = (exp2(_2258 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2242 * cbSceneParam._m0[78u].z)) * _2232.z) / cbSceneParam._m0[78u].z)) + _1988;
        _2087 = _2241 * _1989;
    }
    else
    {
        _2081 = _1986;
        _2083 = _1987;
        _2085 = _1988;
        _2087 = _1989;
    }
    float _2099 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2100 = _2099 == 3.0;
    float _2102 = log2(_2087);
    float _2109 = exp2(_2102 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0))) * (_1931 + ((isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0))) * _352))) + ((_1937 + ((isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0))) * _1131)) * cbPerFrame._m0[3u].x));
    float _2110 = exp2(_2102 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0))) * (_1933 + ((isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0))) * _352))) + ((_1939 + ((isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0))) * _1131)) * cbPerFrame._m0[3u].x));
    float _2111 = exp2(_2102 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))) * (_1935 + ((isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0))) * _352))) + ((_1941 + ((isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0))) * _1131)) * cbPerFrame._m0[3u].x));
    float _2120 = (_2099 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2120 * (_2100 ? _2109 : (_2109 + (cbSceneParam._m0[72u].w * _2081)));
    SV_Target.y = _2120 * (_2100 ? _2110 : (_2110 + (cbSceneParam._m0[72u].w * _2083)));
    SV_Target.z = _2120 * (_2100 ? _2111 : (_2111 + (cbSceneParam._m0[72u].w * _2085)));
    SV_Target.w = cbInstanceData._m0[_1961].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1961].w;
}


