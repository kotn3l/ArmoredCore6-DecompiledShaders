#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 7, std140) uniform cbvModelParamUBO
{
    vec4 _m0[10];
} cbvModelParam;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 6, std140) uniform cbPrevObjMatrixUBO
{
    vec4 _m0[6];
} cbPrevObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uint BINORMAL;
layout(location = 4) in uvec4 BLENDINDICES;
layout(location = 5) in vec4 BLENDWEIGHT;
layout(location = 6) in vec4 COLOR_1;
layout(location = 7) in ivec2 TEXCOORD;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out vec3 TEXCOORD_1;
layout(location = 5) out vec4 TEXCOORD_5;
layout(location = 6) out vec4 TEXCOORD_6;
layout(location = 7) out vec3 TEXCOORD_7;

void main()
{
    uint _86 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_1.x = 0.0;
    TEXCOORD_1.y = 0.0;
    TEXCOORD_1.z = 0.0;
    TEXCOORD_5.x = 0.0;
    TEXCOORD_5.y = 0.0;
    TEXCOORD_5.z = 0.0;
    TEXCOORD_5.w = 0.0;
    TEXCOORD_6.x = 0.0;
    TEXCOORD_6.y = 0.0;
    TEXCOORD_6.z = 0.0;
    TEXCOORD_6.w = 0.0;
    TEXCOORD_7.x = 0.0;
    TEXCOORD_7.y = 0.0;
    TEXCOORD_7.z = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    float _191 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _193 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _194 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _201 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _202 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _203 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _205 = float(BLENDINDICES.x);
    float _206 = float(BLENDINDICES.y);
    float _207 = float(BLENDINDICES.z);
    float _208 = float(BLENDINDICES.w);
    bool _214 = floatBitsToUint(cbMatDynParam._m0[1u]).x == 0u;
    float _435;
    float _436;
    float _437;
    float _438;
    float _439;
    float _440;
    float _441;
    float _442;
    float _443;
    float _444;
    float _445;
    float _446;
    if (_214)
    {
        uint _219 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _86;
        precise float _223 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
        float _228 = isnan(_223) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _223 : max(0.001000000047497451305389404296875, _223));
        precise float _230 = BLENDWEIGHT.x / _228;
        precise float _231 = BLENDWEIGHT.y / _228;
        precise float _232 = BLENDWEIGHT.z / _228;
        precise float _233 = BLENDWEIGHT.w / _228;
        uvec4 _240 = floatBitsToUint(cbInstanceData._m0[(texelFetch(g_InstanceIndexBuffer, int(_219)).x * 13u) + 4u]);
        uint _241 = _240.x;
        uint _243 = (_241 + uint(_205)) * 3u;
        uint _250 = _243 + 1u;
        uint _257 = _243 + 2u;
        precise float _264 = _230 * cbObjMatrix._m0[_243].x;
        precise float _265 = _230 * cbObjMatrix._m0[_250].x;
        precise float _266 = _230 * cbObjMatrix._m0[_257].x;
        precise float _267 = _230 * cbObjMatrix._m0[_243].y;
        precise float _268 = _230 * cbObjMatrix._m0[_250].y;
        precise float _269 = _230 * cbObjMatrix._m0[_257].y;
        precise float _270 = _230 * cbObjMatrix._m0[_243].z;
        precise float _271 = _230 * cbObjMatrix._m0[_250].z;
        precise float _272 = _230 * cbObjMatrix._m0[_257].z;
        precise float _273 = _230 * cbObjMatrix._m0[_243].w;
        precise float _274 = _230 * cbObjMatrix._m0[_250].w;
        precise float _275 = _230 * cbObjMatrix._m0[_257].w;
        uint _278 = (_241 + uint(_206)) * 3u;
        uint _285 = _278 + 1u;
        uint _292 = _278 + 2u;
        precise float _299 = _231 * cbObjMatrix._m0[_278].x;
        precise float _300 = _231 * cbObjMatrix._m0[_285].x;
        precise float _301 = _231 * cbObjMatrix._m0[_292].x;
        precise float _302 = _231 * cbObjMatrix._m0[_278].y;
        precise float _303 = _231 * cbObjMatrix._m0[_285].y;
        precise float _304 = _231 * cbObjMatrix._m0[_292].y;
        precise float _305 = _231 * cbObjMatrix._m0[_278].z;
        precise float _306 = _231 * cbObjMatrix._m0[_285].z;
        precise float _307 = _231 * cbObjMatrix._m0[_292].z;
        precise float _308 = _231 * cbObjMatrix._m0[_278].w;
        precise float _309 = _231 * cbObjMatrix._m0[_285].w;
        precise float _310 = _231 * cbObjMatrix._m0[_292].w;
        precise float _311 = _264 + _299;
        precise float _312 = _265 + _300;
        precise float _313 = _266 + _301;
        precise float _314 = _267 + _302;
        precise float _315 = _268 + _303;
        precise float _316 = _269 + _304;
        precise float _317 = _270 + _305;
        precise float _318 = _271 + _306;
        precise float _319 = _272 + _307;
        precise float _320 = _273 + _308;
        precise float _321 = _274 + _309;
        precise float _322 = _275 + _310;
        uint _325 = (_241 + uint(_207)) * 3u;
        uint _332 = _325 + 1u;
        uint _339 = _325 + 2u;
        precise float _346 = _232 * cbObjMatrix._m0[_325].x;
        precise float _347 = _232 * cbObjMatrix._m0[_332].x;
        precise float _348 = _232 * cbObjMatrix._m0[_339].x;
        precise float _349 = _232 * cbObjMatrix._m0[_325].y;
        precise float _350 = _232 * cbObjMatrix._m0[_332].y;
        precise float _351 = _232 * cbObjMatrix._m0[_339].y;
        precise float _352 = _232 * cbObjMatrix._m0[_325].z;
        precise float _353 = _232 * cbObjMatrix._m0[_332].z;
        precise float _354 = _232 * cbObjMatrix._m0[_339].z;
        precise float _355 = _232 * cbObjMatrix._m0[_325].w;
        precise float _356 = _232 * cbObjMatrix._m0[_332].w;
        precise float _357 = _232 * cbObjMatrix._m0[_339].w;
        precise float _358 = _311 + _346;
        precise float _359 = _312 + _347;
        precise float _360 = _313 + _348;
        precise float _361 = _314 + _349;
        precise float _362 = _315 + _350;
        precise float _363 = _316 + _351;
        precise float _364 = _317 + _352;
        precise float _365 = _318 + _353;
        precise float _366 = _319 + _354;
        precise float _367 = _320 + _355;
        precise float _368 = _321 + _356;
        precise float _369 = _322 + _357;
        uint _372 = (_241 + uint(_208)) * 3u;
        uint _379 = _372 + 1u;
        uint _386 = _372 + 2u;
        precise float _393 = _233 * cbObjMatrix._m0[_372].x;
        precise float _394 = _233 * cbObjMatrix._m0[_379].x;
        precise float _395 = _233 * cbObjMatrix._m0[_386].x;
        precise float _396 = _233 * cbObjMatrix._m0[_372].y;
        precise float _397 = _233 * cbObjMatrix._m0[_379].y;
        precise float _398 = _233 * cbObjMatrix._m0[_386].y;
        precise float _399 = _233 * cbObjMatrix._m0[_372].z;
        precise float _400 = _233 * cbObjMatrix._m0[_379].z;
        precise float _401 = _233 * cbObjMatrix._m0[_386].z;
        precise float _402 = _233 * cbObjMatrix._m0[_372].w;
        precise float _403 = _233 * cbObjMatrix._m0[_379].w;
        precise float _404 = _233 * cbObjMatrix._m0[_386].w;
        precise float _405 = _358 + _393;
        precise float _406 = _359 + _394;
        precise float _407 = _360 + _395;
        precise float _408 = _361 + _396;
        precise float _409 = _362 + _397;
        precise float _410 = _363 + _398;
        precise float _411 = _364 + _399;
        precise float _412 = _365 + _400;
        precise float _413 = _366 + _401;
        precise float _414 = _367 + _402;
        precise float _415 = _368 + _403;
        precise float _416 = _369 + _404;
        _435 = _405;
        _436 = _408;
        _437 = _411;
        _438 = _414;
        _439 = _406;
        _440 = _409;
        _441 = _412;
        _442 = _415;
        _443 = _407;
        _444 = _410;
        _445 = _413;
        _446 = _416;
    }
    else
    {
        _435 = cbvModelParam._m0[0u].x;
        _436 = cbvModelParam._m0[0u].y;
        _437 = cbvModelParam._m0[0u].z;
        _438 = cbvModelParam._m0[0u].w;
        _439 = cbvModelParam._m0[1u].x;
        _440 = cbvModelParam._m0[1u].y;
        _441 = cbvModelParam._m0[1u].z;
        _442 = cbvModelParam._m0[1u].w;
        _443 = cbvModelParam._m0[2u].x;
        _444 = cbvModelParam._m0[2u].y;
        _445 = cbvModelParam._m0[2u].z;
        _446 = cbvModelParam._m0[2u].w;
    }
    precise float _447 = POSITION.x * _435;
    precise float _448 = POSITION.y * _436;
    precise float _449 = _448 + _447;
    precise float _450 = POSITION.z * _437;
    precise float _451 = _450 + _449;
    precise float _452 = 1.0 * _438;
    precise float _453 = _452 + _451;
    precise float _454 = POSITION.x * _439;
    precise float _455 = POSITION.y * _440;
    precise float _456 = _455 + _454;
    precise float _457 = POSITION.z * _441;
    precise float _458 = _457 + _456;
    precise float _459 = 1.0 * _442;
    precise float _460 = _459 + _458;
    precise float _461 = POSITION.x * _443;
    precise float _462 = POSITION.y * _444;
    precise float _463 = _462 + _461;
    precise float _464 = POSITION.z * _445;
    precise float _465 = _464 + _463;
    precise float _466 = 1.0 * _446;
    precise float _467 = _466 + _465;
    float _685;
    float _686;
    float _687;
    float _688;
    float _689;
    float _690;
    float _691;
    float _692;
    float _693;
    float _694;
    float _695;
    float _696;
    if (_214)
    {
        float _468 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
        float _471 = isnan(_468) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _468 : max(0.001000000047497451305389404296875, _468));
        float _472 = BLENDWEIGHT.x / _471;
        float _473 = BLENDWEIGHT.y / _471;
        float _474 = BLENDWEIGHT.z / _471;
        float _475 = BLENDWEIGHT.w / _471;
        uint _481 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _86;
        uvec4 _489 = floatBitsToUint(cbInstanceData._m0[(texelFetch(g_InstanceIndexBuffer, int(_481)).x * 13u) + 4u]);
        uint _490 = _489.x;
        uint _492 = (_490 + uint(_205)) * 3u;
        uint _499 = _492 + 1u;
        uint _506 = _492 + 2u;
        uint _527 = (_490 + uint(_206)) * 3u;
        uint _534 = _527 + 1u;
        uint _541 = _527 + 2u;
        uint _574 = (_490 + uint(_207)) * 3u;
        uint _581 = _574 + 1u;
        uint _588 = _574 + 2u;
        uint _621 = (_490 + uint(_208)) * 3u;
        uint _628 = _621 + 1u;
        uint _635 = _621 + 2u;
        _685 = (((cbPrevObjMatrix._m0[_527].x * _473) + (cbPrevObjMatrix._m0[_492].x * _472)) + (cbPrevObjMatrix._m0[_574].x * _474)) + (cbPrevObjMatrix._m0[_621].x * _475);
        _686 = (((cbPrevObjMatrix._m0[_527].y * _473) + (cbPrevObjMatrix._m0[_492].y * _472)) + (cbPrevObjMatrix._m0[_574].y * _474)) + (cbPrevObjMatrix._m0[_621].y * _475);
        _687 = (((cbPrevObjMatrix._m0[_527].z * _473) + (cbPrevObjMatrix._m0[_492].z * _472)) + (cbPrevObjMatrix._m0[_574].z * _474)) + (cbPrevObjMatrix._m0[_621].z * _475);
        _688 = (((cbPrevObjMatrix._m0[_527].w * _473) + (cbPrevObjMatrix._m0[_492].w * _472)) + (cbPrevObjMatrix._m0[_574].w * _474)) + (cbPrevObjMatrix._m0[_621].w * _475);
        _689 = (((cbPrevObjMatrix._m0[_534].x * _473) + (cbPrevObjMatrix._m0[_499].x * _472)) + (cbPrevObjMatrix._m0[_581].x * _474)) + (cbPrevObjMatrix._m0[_628].x * _475);
        _690 = (((cbPrevObjMatrix._m0[_534].y * _473) + (cbPrevObjMatrix._m0[_499].y * _472)) + (cbPrevObjMatrix._m0[_581].y * _474)) + (cbPrevObjMatrix._m0[_628].y * _475);
        _691 = (((cbPrevObjMatrix._m0[_534].z * _473) + (cbPrevObjMatrix._m0[_499].z * _472)) + (cbPrevObjMatrix._m0[_581].z * _474)) + (cbPrevObjMatrix._m0[_628].z * _475);
        _692 = (((cbPrevObjMatrix._m0[_534].w * _473) + (cbPrevObjMatrix._m0[_499].w * _472)) + (cbPrevObjMatrix._m0[_581].w * _474)) + (cbPrevObjMatrix._m0[_628].w * _475);
        _693 = (((cbPrevObjMatrix._m0[_541].x * _473) + (cbPrevObjMatrix._m0[_506].x * _472)) + (cbPrevObjMatrix._m0[_588].x * _474)) + (cbPrevObjMatrix._m0[_635].x * _475);
        _694 = (((cbPrevObjMatrix._m0[_541].y * _473) + (cbPrevObjMatrix._m0[_506].y * _472)) + (cbPrevObjMatrix._m0[_588].y * _474)) + (cbPrevObjMatrix._m0[_635].y * _475);
        _695 = (((cbPrevObjMatrix._m0[_541].z * _473) + (cbPrevObjMatrix._m0[_506].z * _472)) + (cbPrevObjMatrix._m0[_588].z * _474)) + (cbPrevObjMatrix._m0[_635].z * _475);
        _696 = (((cbPrevObjMatrix._m0[_541].w * _473) + (cbPrevObjMatrix._m0[_506].w * _472)) + (cbPrevObjMatrix._m0[_588].w * _474)) + (cbPrevObjMatrix._m0[_635].w * _475);
    }
    else
    {
        _685 = cbvModelParam._m0[3u].x;
        _686 = cbvModelParam._m0[3u].y;
        _687 = cbvModelParam._m0[3u].z;
        _688 = cbvModelParam._m0[3u].w;
        _689 = cbvModelParam._m0[4u].x;
        _690 = cbvModelParam._m0[4u].y;
        _691 = cbvModelParam._m0[4u].z;
        _692 = cbvModelParam._m0[4u].w;
        _693 = cbvModelParam._m0[5u].x;
        _694 = cbvModelParam._m0[5u].y;
        _695 = cbvModelParam._m0[5u].z;
        _696 = cbvModelParam._m0[5u].w;
    }
    float _715 = (fma(POSITION.z, _687, fma(POSITION.y, _686, _685 * POSITION.x)) + _688) - cbSceneParam._m0[28u].x;
    float _716 = (fma(POSITION.z, _691, fma(POSITION.y, _690, _689 * POSITION.x)) + _692) - cbSceneParam._m0[28u].y;
    float _717 = (fma(POSITION.z, _695, fma(POSITION.y, _694, _693 * POSITION.x)) + _696) - cbSceneParam._m0[28u].z;
    float _764 = fma(_194, _437, fma(_193, _436, _435 * _191));
    float _767 = fma(_194, _441, fma(_193, _440, _439 * _191));
    float _770 = fma(_194, _445, fma(_193, _444, _443 * _191));
    uint _775 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _86;
    uvec4 _777 = texelFetch(g_InstanceIndexBuffer, int(_775));
    uint _778 = _777.x;
    precise float _794 = _453 - cbSceneParam._m0[3u].x;
    precise float _795 = _460 - cbSceneParam._m0[3u].y;
    precise float _796 = _467 - cbSceneParam._m0[3u].z;
    precise float _824 = _794 * cbSceneParam._m0[24u].x;
    precise float _825 = _795 * cbSceneParam._m0[24u].y;
    precise float _826 = _825 + _824;
    precise float _827 = _796 * cbSceneParam._m0[24u].z;
    precise float _828 = _827 + _826;
    precise float _829 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _830 = _829 + _828;
    precise float _831 = _794 * cbSceneParam._m0[25u].x;
    precise float _832 = _795 * cbSceneParam._m0[25u].y;
    precise float _833 = _832 + _831;
    precise float _834 = _796 * cbSceneParam._m0[25u].z;
    precise float _835 = _834 + _833;
    precise float _836 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _837 = _836 + _835;
    precise float _838 = _794 * cbSceneParam._m0[26u].x;
    precise float _839 = _795 * cbSceneParam._m0[26u].y;
    precise float _840 = _839 + _838;
    precise float _841 = _796 * cbSceneParam._m0[26u].z;
    precise float _842 = _841 + _840;
    precise float _843 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _844 = _843 + _842;
    precise float _845 = _794 * cbSceneParam._m0[27u].x;
    precise float _846 = _795 * cbSceneParam._m0[27u].y;
    precise float _847 = _846 + _845;
    precise float _848 = _796 * cbSceneParam._m0[27u].z;
    precise float _849 = _848 + _847;
    precise float _850 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _851 = _850 + _849;
    gl_Position.x = _830;
    gl_Position.y = _837;
    gl_Position.z = _844;
    gl_Position.w = _851;
    POSITION_1.x = _830;
    POSITION_1.y = _837;
    POSITION_1.z = _844;
    POSITION_1.w = _851;
    NORMAL_1.x = _764;
    NORMAL_1.y = _767;
    NORMAL_1.z = _770;
    NORMAL_1.w = float(_778);
    TANGENT_1.x = fma(_203, _437, fma(_202, _436, _435 * _201));
    TANGENT_1.y = fma(_203, _441, fma(_202, _440, _439 * _201));
    TANGENT_1.z = fma(_203, _445, fma(_202, _444, _443 * _201));
    TANGENT_1.w = (float(BINORMAL) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_1.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_1.z = COLOR_1.x;
    TEXCOORD_5.x = _830;
    TEXCOORD_5.y = _837;
    TEXCOORD_5.z = _844;
    TEXCOORD_5.w = _851;
    TEXCOORD_6.x = fma(_717, cbSceneParam._m0[29u].z, fma(_716, cbSceneParam._m0[29u].y, _715 * cbSceneParam._m0[29u].x)) + cbSceneParam._m0[29u].w;
    TEXCOORD_6.y = fma(_717, cbSceneParam._m0[30u].z, fma(_716, cbSceneParam._m0[30u].y, cbSceneParam._m0[30u].x * _715)) + cbSceneParam._m0[30u].w;
    TEXCOORD_6.z = fma(_717, cbSceneParam._m0[31u].z, fma(_716, cbSceneParam._m0[31u].y, cbSceneParam._m0[31u].x * _715)) + cbSceneParam._m0[31u].w;
    TEXCOORD_6.w = fma(_717, cbSceneParam._m0[32u].z, fma(_716, cbSceneParam._m0[32u].y, cbSceneParam._m0[32u].x * _715)) + cbSceneParam._m0[32u].w;
    TEXCOORD_7.x = _764;
    TEXCOORD_7.y = _767;
    TEXCOORD_7.z = _770;
    gl_ClipDistance[0u] = dot(vec4(_830, _837, _844, _851), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_830, _837, _844, _851), vec4(cbInstanceData._m0[(_778 * 13u) + 3u]));
}


