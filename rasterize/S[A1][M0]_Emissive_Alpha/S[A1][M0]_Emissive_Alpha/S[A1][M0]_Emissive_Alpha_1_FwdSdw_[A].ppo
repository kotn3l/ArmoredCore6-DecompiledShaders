#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A1_M0_Emissive_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_A1_M0_Emissive_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _733;
float _3223;
float _3224;
float _3225;
float _3226;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _168 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _169 = _168 * NORMAL.x;
    float _170 = _168 * NORMAL.y;
    float _171 = _168 * NORMAL.z;
    vec4 _191 = texture(sampler2D(S_A1_M0_Emissive_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _194 = _191.w;
    float _195 = _194 * TEXCOORD_1.z;
    vec4 _211 = texture(sampler2D(S_A1_M0_Emissive_Alpha_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _225 = inversesqrt(dot(vec3(_169, _170, _171), vec3(_169, _170, _171)));
    float _226 = _225 * _169;
    float _227 = _225 * _170;
    float _228 = _225 * _171;
    float _3235 = isnan(0.0) ? _195 : (isnan(_195) ? 0.0 : max(_195, 0.0));
    float _230 = isnan(1.0) ? _3235 : (isnan(_3235) ? 1.0 : min(_3235, 1.0));
    float _3246 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _3257 = isnan(0.0) ? cbMtdParam._m0[10u].y : (isnan(cbMtdParam._m0[10u].y) ? 0.0 : max(cbMtdParam._m0[10u].y, 0.0));
    float _3268 = isnan(0.0) ? cbMtdParam._m0[10u].z : (isnan(cbMtdParam._m0[10u].z) ? 0.0 : max(cbMtdParam._m0[10u].z, 0.0));
    float _249 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _291 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _301 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _291);
    float _302 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _291);
    float _303 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _291);
    float _307 = inversesqrt(dot(vec3(_301, _302, _303), vec3(_301, _302, _303)));
    float _308 = _301 * _307;
    float _309 = _302 * _307;
    float _310 = _303 * _307;
    vec4 _315 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _317 = _315.w;
    float _323 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _324 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _345 = fma(_228, cbSceneParam._m0[5u].z, fma(_227, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _226));
    float _348 = fma(_228, cbSceneParam._m0[6u].z, fma(_227, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _226));
    float _351 = fma(_228, cbSceneParam._m0[7u].z, fma(_227, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _226));
    uint _364 = uint(roundEven(NORMAL.w)) * 13u;
    uint _365 = _364 + 9u;
    uint _366 = _365 + uint(cbMatDynParam._m0[0u].w);
    float _372 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0)))) * cbInstanceData._m0[_366].x;
    float _373 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0)))) * cbInstanceData._m0[_366].y;
    float _374 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0)))) * cbInstanceData._m0[_366].z;
    float _3279 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _375 = isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0));
    float _3290 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _376 = isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0));
    float _3301 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _377 = isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0));
    vec4 _386 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _323, cbSceneParam._m0[86u].y * _324));
    float _389 = _386.x * TEXCOORD_1.w;
    float _390 = dot(vec3(_226, _227, _228), vec3(_308, _309, _310));
    float _393 = _390 * 2.0;
    float _398 = (_393 * _226) - _308;
    float _399 = (_393 * _227) - _309;
    float _400 = (_393 * _228) - _310;
    float _422 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _426 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _430 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _732;
    float _734;
    float _735;
    float _736;
    float _737;
    float _738;
    float _739;
    float _740;
    float _741;
    float _742;
    float _743;
    float _744;
    float _745;
    float _746;
    float _747;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _457 = fma(_430, cbModelParam._m0[26u].z, fma(_426, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _422));
        float _461 = fma(_430, cbModelParam._m0[27u].z, fma(_426, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _422));
        float _465 = fma(_430, cbModelParam._m0[28u].z, fma(_426, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _422));
        float _490 = _422 + _226;
        float _491 = _426 + _227;
        float _492 = _430 + _228;
        float _502 = fma(_492, cbModelParam._m0[26u].z, fma(_491, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _490)) - _457;
        float _503 = fma(_492, cbModelParam._m0[27u].z, fma(_491, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _490)) - _461;
        float _504 = fma(_492, cbModelParam._m0[28u].z, fma(_491, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _490)) - _465;
        float _508 = inversesqrt(dot(vec3(_502, _503, _504), vec3(_502, _503, _504)));
        float _521 = ((_508 * _502) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_457 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _522 = ((_508 * _503) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_461 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _523 = ((_508 * _504) / cbModelParam._m0[34u].z) + ((((((_465 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _526 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_521, _522, _523), 0.0);
        vec4 _533 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_521, _522, _523), 0.0);
        vec4 _540 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_521, _522, _523), 0.0);
        vec4 _547 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_521, _522, _523), 0.0);
        float _560 = exp2((_526.w + (-0.5)) * 20.0) * 2.0;
        float _561 = _560 * (_526.x + (-0.5));
        float _562 = _560 * (_526.y + (-0.5));
        float _563 = _560 * (_526.z + (-0.5));
        float _570 = exp2((_533.w + (-0.5)) * 20.0) * 2.0;
        float _571 = _570 * (_533.x + (-0.5));
        float _572 = _570 * (_533.y + (-0.5));
        float _573 = _570 * (_533.z + (-0.5));
        float _580 = exp2((_540.w + (-0.5)) * 20.0) * 2.0;
        float _581 = _580 * (_540.x + (-0.5));
        float _582 = _580 * (_540.y + (-0.5));
        float _583 = _580 * (_540.z + (-0.5));
        float _590 = exp2((_547.w + (-0.5)) * 20.0) * 2.0;
        float _591 = _590 * (_547.x + (-0.5));
        float _592 = _590 * (_547.y + (-0.5));
        float _593 = _590 * (_547.z + (-0.5));
        float _594 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
        float _595 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
        float _596 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
        float _597 = _561 * 0.5;
        float _598 = _571 * 0.5;
        float _599 = _581 * 0.5;
        float _600 = dot(vec3(_597, _598, _599), vec3(_597, _598, _599));
        float _605 = (_600 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_600);
        float _614 = (dot(vec3(_226, _227, _228), vec3(_605 * _597, _605 * _598, _605 * _599)) + 1.0) * 0.5;
        float _3327 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
        float _624 = sqrt(((_598 * _598) + (_597 * _597)) + (_599 * _599)) / (_594 + 9.9999997473787516355514526367188e-06);
        float _3338 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
        float _625 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
        float _626 = _625 * 2.0;
        float _630 = (1.0 - _625) / (_625 + 1.0);
        float _3349 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
        float _631 = isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0));
        float _640 = ((((1.0 - _631) * (_626 + 2.0)) * exp2(log2(isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0))) * (_626 + 1.0))) + _631) * _594;
        float _641 = _562 * 0.5;
        float _642 = _572 * 0.5;
        float _643 = _582 * 0.5;
        float _644 = dot(vec3(_641, _642, _643), vec3(_641, _642, _643));
        float _649 = (_644 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_644);
        float _657 = (dot(vec3(_226, _227, _228), vec3(_649 * _641, _649 * _642, _649 * _643)) + 1.0) * 0.5;
        float _3360 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
        float _666 = sqrt(((_642 * _642) + (_641 * _641)) + (_643 * _643)) / (_595 + 9.9999997473787516355514526367188e-06);
        float _3371 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
        float _667 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
        float _668 = _667 * 2.0;
        float _672 = (1.0 - _667) / (_667 + 1.0);
        float _3382 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
        float _673 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
        float _682 = ((((1.0 - _673) * (_668 + 2.0)) * exp2(log2(isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0))) * (_668 + 1.0))) + _673) * _595;
        float _683 = _563 * 0.5;
        float _684 = _573 * 0.5;
        float _685 = _583 * 0.5;
        float _686 = dot(vec3(_683, _684, _685), vec3(_683, _684, _685));
        float _691 = (_686 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_686);
        float _699 = (dot(vec3(_226, _227, _228), vec3(_691 * _683, _691 * _684, _691 * _685)) + 1.0) * 0.5;
        float _3393 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
        float _708 = sqrt(((_684 * _684) + (_683 * _683)) + (_685 * _685)) / (_596 + 9.9999997473787516355514526367188e-06);
        float _3404 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _709 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
        float _710 = _709 * 2.0;
        float _714 = (1.0 - _709) / (_709 + 1.0);
        float _3415 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _715 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
        float _724 = ((((1.0 - _715) * (_710 + 2.0)) * exp2(log2(isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0))) * (_710 + 1.0))) + _715) * _596;
        _732 = _563;
        _734 = _562;
        _735 = _561;
        _736 = _573;
        _737 = _572;
        _738 = _571;
        _739 = _583;
        _740 = _582;
        _741 = _581;
        _742 = _596;
        _743 = _595;
        _744 = _594;
        _745 = cbModelParam._m0[36u].z * (isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0)));
        _746 = cbModelParam._m0[36u].z * (isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0)));
        _747 = cbModelParam._m0[36u].z * (isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0)));
    }
    else
    {
        _732 = _733;
        _734 = _733;
        _735 = _733;
        _736 = _733;
        _737 = _733;
        _738 = _733;
        _739 = _733;
        _740 = _733;
        _741 = _733;
        _742 = _733;
        _743 = _733;
        _744 = _733;
        _745 = 0.0;
        _746 = 0.0;
        _747 = 0.0;
    }
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _773 = fma(_430, cbModelParam._m0[30u].z, fma(_426, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _422));
        float _777 = fma(_430, cbModelParam._m0[31u].z, fma(_426, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _422));
        float _781 = fma(_430, cbModelParam._m0[32u].z, fma(_426, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _422));
        float _804 = _422 + _226;
        float _805 = _426 + _227;
        float _806 = _430 + _228;
        float _816 = fma(_806, cbModelParam._m0[30u].z, fma(_805, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _804)) - _773;
        float _817 = fma(_806, cbModelParam._m0[31u].z, fma(_805, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _804)) - _777;
        float _818 = fma(_806, cbModelParam._m0[32u].z, fma(_805, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _804)) - _781;
        float _822 = inversesqrt(dot(vec3(_816, _817, _818), vec3(_816, _817, _818)));
        float _835 = ((_822 * _816) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_773 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _836 = ((_822 * _817) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_777 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _837 = ((_822 * _818) / cbModelParam._m0[35u].z) + ((((((_781 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _839 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        vec4 _846 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        vec4 _853 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        vec4 _860 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        float _872 = exp2((_839.w + (-0.5)) * 20.0) * 2.0;
        float _873 = _872 * (_839.x + (-0.5));
        float _874 = _872 * (_839.y + (-0.5));
        float _875 = _872 * (_839.z + (-0.5));
        float _882 = exp2((_846.w + (-0.5)) * 20.0) * 2.0;
        float _883 = _882 * (_846.x + (-0.5));
        float _884 = _882 * (_846.y + (-0.5));
        float _885 = _882 * (_846.z + (-0.5));
        float _892 = exp2((_853.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_853.x + (-0.5));
        float _894 = _892 * (_853.y + (-0.5));
        float _895 = _892 * (_853.z + (-0.5));
        float _902 = exp2((_860.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_860.x + (-0.5));
        float _904 = _902 * (_860.y + (-0.5));
        float _905 = _902 * (_860.z + (-0.5));
        float _906 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _907 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _908 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _909 = _873 * 0.5;
        float _910 = _883 * 0.5;
        float _911 = _893 * 0.5;
        float _912 = dot(vec3(_909, _910, _911), vec3(_909, _910, _911));
        float _917 = (_912 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_912);
        float _925 = (dot(vec3(_226, _227, _228), vec3(_917 * _909, _917 * _910, _917 * _911)) + 1.0) * 0.5;
        float _3456 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _934 = sqrt(((_910 * _910) + (_909 * _909)) + (_911 * _911)) / (_906 + 9.9999997473787516355514526367188e-06);
        float _3467 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _935 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
        float _936 = _935 * 2.0;
        float _940 = (1.0 - _935) / (_935 + 1.0);
        float _3478 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _950 = ((((1.0 - _941) * (_936 + 2.0)) * exp2(log2(isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0))) * (_936 + 1.0))) + _941) * _906;
        float _951 = _874 * 0.5;
        float _952 = _884 * 0.5;
        float _953 = _894 * 0.5;
        float _954 = dot(vec3(_951, _952, _953), vec3(_951, _952, _953));
        float _959 = (_954 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_954);
        float _967 = (dot(vec3(_226, _227, _228), vec3(_959 * _951, _959 * _952, _959 * _953)) + 1.0) * 0.5;
        float _3489 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _976 = sqrt(((_952 * _952) + (_951 * _951)) + (_953 * _953)) / (_907 + 9.9999997473787516355514526367188e-06);
        float _3500 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
        float _978 = _977 * 2.0;
        float _982 = (1.0 - _977) / (_977 + 1.0);
        float _3511 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _992 = ((((1.0 - _983) * (_978 + 2.0)) * exp2(log2(isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0))) * (_978 + 1.0))) + _983) * _907;
        float _993 = _875 * 0.5;
        float _994 = _885 * 0.5;
        float _995 = _895 * 0.5;
        float _996 = dot(vec3(_993, _994, _995), vec3(_993, _994, _995));
        float _1001 = (_996 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_996);
        float _1009 = (dot(vec3(_226, _227, _228), vec3(_1001 * _993, _1001 * _994, _1001 * _995)) + 1.0) * 0.5;
        float _3522 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1018 = sqrt(((_994 * _994) + (_993 * _993)) + (_995 * _995)) / (_908 + 9.9999997473787516355514526367188e-06);
        float _3533 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _1020 = _1019 * 2.0;
        float _1024 = (1.0 - _1019) / (_1019 + 1.0);
        float _3544 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _1034 = ((((1.0 - _1025) * (_1020 + 2.0)) * exp2(log2(isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))) * (_1020 + 1.0))) + _1025) * _908;
        _1042 = _875;
        _1043 = _874;
        _1044 = _873;
        _1045 = _885;
        _1046 = _884;
        _1047 = _883;
        _1048 = _895;
        _1049 = _894;
        _1050 = _893;
        _1051 = _908;
        _1052 = _907;
        _1053 = _906;
        _1054 = cbModelParam._m0[36u].w * (isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0)));
        _1055 = cbModelParam._m0[36u].w * (isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0)));
        _1056 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0)));
    }
    else
    {
        _1042 = _733;
        _1043 = _733;
        _1044 = _733;
        _1045 = _733;
        _1046 = _733;
        _1047 = _733;
        _1048 = _733;
        _1049 = _733;
        _1050 = _733;
        _1051 = _733;
        _1052 = _733;
        _1053 = _733;
        _1054 = 0.0;
        _1055 = 0.0;
        _1056 = 0.0;
    }
    float _1066 = (cbModelParam._m0[1u].x * (_1054 - _745)) + _745;
    float _1067 = (cbModelParam._m0[1u].x * (_1055 - _746)) + _746;
    float _1068 = (cbModelParam._m0[1u].x * (_1056 - _747)) + _747;
    float _1089 = fma(_1068, cbSceneParam._m0[89u].z, fma(_1067, cbSceneParam._m0[89u].y, _1066 * cbSceneParam._m0[89u].x));
    float _1092 = fma(_1068, cbSceneParam._m0[90u].z, fma(_1067, cbSceneParam._m0[90u].y, _1066 * cbSceneParam._m0[90u].x));
    float _1095 = fma(_1068, cbSceneParam._m0[91u].z, fma(_1067, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1066));
    float _1110 = _398 * 0.5;
    float _1111 = _399 * 0.5;
    float _1112 = _400 * 0.5;
    float _1113 = dot(vec4(_1110, _1111, _1112, 1.0), vec4(_1044, _1047, _1050, _1053));
    float _1116 = dot(vec4(_1110, _1111, _1112, 1.0), vec4(_1043, _1046, _1049, _1052));
    float _1119 = dot(vec4(_1110, _1111, _1112, 1.0), vec4(_1042, _1045, _1048, _1051));
    float _1153;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1126 = dot(vec4(_1110, _1111, _1112, 1.0), vec4(_732, _736, _739, _742));
        float _1130 = dot(vec4(_1110, _1111, _1112, 1.0), vec4(_734, _737, _740, _743));
        float _1134 = dot(vec4(_1110, _1111, _1112, 1.0), vec4(_735, _738, _741, _744));
        float _1141 = dot(vec4(cbModelParam._m0[39u]), vec4(_1110, _1111, _1112, 1.0));
        _1153 = dot(vec3(isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0)), isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)), isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1141) ? 0.0 : (isnan(0.0) ? _1141 : max(0.0, _1141))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1153 = 1.0;
    }
    float _1164;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1155 = dot(vec4(cbModelParam._m0[40u]), vec4(_1110, _1111, _1112, 1.0));
        _1164 = dot(vec3(isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0)), isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)), isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1155) ? 0.0 : (isnan(0.0) ? _1155 : max(0.0, _1155))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1164 = 1.0;
    }
    float _1168 = (_1164 * cbModelParam._m0[1u].x) + (_1153 * (1.0 - cbModelParam._m0[1u].x));
    float _1177 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1259;
    float _1261;
    float _1263;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1226 = fma(_430, cbModelParam._m0[13u].z, fma(_426, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _422)) + cbModelParam._m0[13u].w;
        float _1230 = fma(_430, cbModelParam._m0[14u].z, fma(_426, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _422)) + cbModelParam._m0[14u].w;
        float _1234 = fma(_430, cbModelParam._m0[15u].z, fma(_426, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _422)) + cbModelParam._m0[15u].w;
        float _1237 = fma(_400, cbModelParam._m0[13u].z, fma(_399, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _398));
        float _1240 = fma(_400, cbModelParam._m0[14u].z, fma(_399, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _398));
        float _1243 = fma(_400, cbModelParam._m0[15u].z, fma(_399, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _398));
        float _1269;
        if (_1237 > 0.0)
        {
            _1269 = abs((1.0 - _1226) / _1237);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1237 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1226 + 1.0) / _1237);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1269 = frontier_phi_14_12_ladder;
        }
        float _1443;
        if (_1240 > 0.0)
        {
            _1443 = abs((1.0 - _1230) / _1240);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1240 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1230 + 1.0) / _1240);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1443 = frontier_phi_23_19_ladder;
        }
        float _1740;
        if (_1243 > 0.0)
        {
            _1740 = abs((1.0 - _1234) / _1243);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1243 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1234 + 1.0) / _1243);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1740 = frontier_phi_35_30_ladder;
        }
        float _1742 = isnan(_1443) ? _1269 : (isnan(_1269) ? _1443 : min(_1269, _1443));
        float _1743 = isnan(_1740) ? _1742 : (isnan(_1742) ? _1740 : min(_1742, _1740));
        float _1747 = (_1743 * _1237) + _1226;
        float _1748 = (_1743 * _1240) + _1230;
        float _1749 = (_1743 * _1243) + _1234;
        float _1750 = _1743 * 9.9999997473787516355514526367188e-05;
        float _1752 = (-1.0) - _1750;
        float _1754 = _1750 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1749 > _1754) || ((_1749 < _1752) || ((_1748 > _1754) || ((_1748 < _1752) || ((_1747 < _1752) || (_1747 > _1754))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1894 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1749, cbModelParam._m0[9u].z, fma(_1748, cbModelParam._m0[9u].y, _1747 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1749, cbModelParam._m0[10u].z, fma(_1748, cbModelParam._m0[10u].y, _1747 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1749, cbModelParam._m0[11u].z, fma(_1748, cbModelParam._m0[11u].y, _1747 * cbModelParam._m0[11u].x))), _1177);
            frontier_phi_13_35_ladder = _1894.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1894.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1894.x * cbModelParam._m0[1u].y;
        }
        _1259 = frontier_phi_13_35_ladder_2;
        _1261 = frontier_phi_13_35_ladder_1;
        _1263 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1247 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_398, _399, _400), _1177);
        _1259 = _1247.x * cbModelParam._m0[1u].y;
        _1261 = _1247.y * cbModelParam._m0[1u].y;
        _1263 = _1247.z * cbModelParam._m0[1u].y;
    }
    float _1266 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1359;
    float _1361;
    float _1363;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1323 = fma(_430, cbModelParam._m0[21u].z, fma(_426, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _422)) + cbModelParam._m0[21u].w;
        float _1327 = fma(_430, cbModelParam._m0[22u].z, fma(_426, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _422)) + cbModelParam._m0[22u].w;
        float _1331 = fma(_430, cbModelParam._m0[23u].z, fma(_426, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _422)) + cbModelParam._m0[23u].w;
        float _1334 = fma(_400, cbModelParam._m0[21u].z, fma(_399, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _398));
        float _1337 = fma(_400, cbModelParam._m0[22u].z, fma(_399, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _398));
        float _1340 = fma(_400, cbModelParam._m0[23u].z, fma(_399, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _398));
        float _1448;
        if (_1334 > 0.0)
        {
            _1448 = abs((1.0 - _1323) / _1334);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1334 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1323 + 1.0) / _1334);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1448 = frontier_phi_25_21_ladder;
        }
        float _1767;
        if (_1337 > 0.0)
        {
            _1767 = abs((1.0 - _1327) / _1337);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1337 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1327 + 1.0) / _1337);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1767 = frontier_phi_37_32_ladder;
        }
        float _2040;
        if (_1340 > 0.0)
        {
            _2040 = abs((1.0 - _1331) / _1340);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1340 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1331 + 1.0) / _1340);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2040 = frontier_phi_47_44_ladder;
        }
        float _2042 = isnan(_1767) ? _1448 : (isnan(_1448) ? _1767 : min(_1448, _1767));
        float _2043 = isnan(_2040) ? _2042 : (isnan(_2042) ? _2040 : min(_2042, _2040));
        float _2047 = (_2043 * _1334) + _1323;
        float _2048 = (_2043 * _1337) + _1327;
        float _2049 = (_2043 * _1340) + _1331;
        float _2050 = _2043 * 9.9999997473787516355514526367188e-05;
        float _2051 = (-1.0) - _2050;
        float _2053 = _2050 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2049 > _2053) || ((_2049 < _2051) || ((_2048 > _2053) || ((_2048 < _2051) || ((_2047 < _2051) || (_2047 > _2053))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2140 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2049, cbModelParam._m0[17u].z, fma(_2048, cbModelParam._m0[17u].y, _2047 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2049, cbModelParam._m0[18u].z, fma(_2048, cbModelParam._m0[18u].y, _2047 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2049, cbModelParam._m0[19u].z, fma(_2048, cbModelParam._m0[19u].y, _2047 * cbModelParam._m0[19u].x))), _1266);
            frontier_phi_22_47_ladder = _2140.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2140.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2140.x * cbModelParam._m0[1u].z;
        }
        _1359 = frontier_phi_22_47_ladder_2;
        _1361 = frontier_phi_22_47_ladder_1;
        _1363 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1343 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_398, _399, _400), _1266);
        _1359 = _1343.x * cbModelParam._m0[1u].z;
        _1361 = _1343.y * cbModelParam._m0[1u].z;
        _1363 = _1343.z * cbModelParam._m0[1u].z;
    }
    float _1375 = _389 * 0.01200000010430812835693359375;
    float _1377 = _1375 * ((cbModelParam._m0[1u].w * (_1359 - _1259)) + _1259);
    float _1378 = _1375 * ((cbModelParam._m0[1u].w * (_1361 - _1261)) + _1261);
    float _1379 = _1375 * ((cbModelParam._m0[1u].w * (_1363 - _1263)) + _1263);
    float _1382 = fma(_1379, cbSceneParam._m0[89u].z, fma(_1378, cbSceneParam._m0[89u].y, _1377 * cbSceneParam._m0[89u].x));
    float _1385 = fma(_1379, cbSceneParam._m0[90u].z, fma(_1378, cbSceneParam._m0[90u].y, _1377 * cbSceneParam._m0[90u].x));
    float _1388 = fma(_1379, cbSceneParam._m0[91u].z, fma(_1378, cbSceneParam._m0[91u].y, _1377 * cbSceneParam._m0[91u].x));
    float _1422 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1426 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1430 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1434 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1435 = _1422 / _1434;
    float _1436 = _1426 / _1434;
    float _1437 = _1430 / _1434;
    float _1584;
    float _1585;
    float _1586;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1464 = ((uint(_1437 > cbSceneParam._m0[59u].y) + uint(_1437 > cbSceneParam._m0[59u].x)) + uint(_1437 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1465 = _1464 + 43u;
        uint _1473 = _1464 + 44u;
        uint _1481 = _1464 + 45u;
        uint _1489 = _1464 + 46u;
        float _1500 = fma(_1434, cbSceneParam._m0[_1465].w, fma(_1430, cbSceneParam._m0[_1465].z, fma(_1426, cbSceneParam._m0[_1465].y, _1422 * cbSceneParam._m0[_1465].x)));
        float _1504 = fma(_1434, cbSceneParam._m0[_1473].w, fma(_1430, cbSceneParam._m0[_1473].z, fma(_1426, cbSceneParam._m0[_1473].y, _1422 * cbSceneParam._m0[_1473].x)));
        float _1512 = fma(_1434, cbSceneParam._m0[_1489].w, fma(_1430, cbSceneParam._m0[_1489].z, fma(_1426, cbSceneParam._m0[_1489].y, _1422 * cbSceneParam._m0[_1489].x)));
        float _1517 = cbSceneParam._m0[33u].z * _1512;
        float _1519 = cbSceneParam._m0[33u].w * _1512;
        float _1522 = fma(_1434, cbSceneParam._m0[_1481].w, fma(_1430, cbSceneParam._m0[_1481].z, fma(_1426, cbSceneParam._m0[_1481].y, _1422 * cbSceneParam._m0[_1481].x))) / _1512;
        float _1570 = (cbSceneParam._m0[33u].x - sqrt(((_1436 * _1436) + (_1435 * _1435)) + (_1437 * _1437))) * cbSceneParam._m0[33u].y;
        float _3670 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1577 = (isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1517 + _1500) / _1512, (_1519 + _1504) / _1512), _1522), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1519 + _1500) / _1512, (_1504 - _1517) / _1512), _1522), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1500 - _1517) / _1512, (_1504 - _1519) / _1512), _1522), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1500 - _1519) / _1512, (_1517 + _1504) / _1512), _1522), 0.0)).x), vec4(0.25)));
        _1584 = 1.0 - (_1577 * cbSceneParam._m0[34u].x);
        _1585 = 1.0 - (_1577 * cbSceneParam._m0[34u].y);
        _1586 = 1.0 - (_1577 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1584 = 1.0;
        _1585 = 1.0;
        _1586 = 1.0;
    }
    float _1650;
    float _1652;
    float _1654;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1638 = fma(_1434, cbSceneParam._m0[63u].w, fma(_1430, cbSceneParam._m0[63u].z, fma(_1426, cbSceneParam._m0[63u].y, _1422 * cbSceneParam._m0[63u].x)));
        float _1639 = fma(_1434, cbSceneParam._m0[60u].w, fma(_1430, cbSceneParam._m0[60u].z, fma(_1426, cbSceneParam._m0[60u].y, _1422 * cbSceneParam._m0[60u].x))) / _1638;
        float _1640 = fma(_1434, cbSceneParam._m0[61u].w, fma(_1430, cbSceneParam._m0[61u].z, fma(_1426, cbSceneParam._m0[61u].y, _1422 * cbSceneParam._m0[61u].x))) / _1638;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1639 >= cbSceneParam._m0[64u].x) && (_1640 >= cbSceneParam._m0[64u].y)) && (_1639 <= cbSceneParam._m0[64u].z)) && (_1640 <= cbSceneParam._m0[64u].w))
        {
            float _1780 = fma(_1434, cbSceneParam._m0[62u].w, fma(_1430, cbSceneParam._m0[62u].z, fma(_1426, cbSceneParam._m0[62u].y, _1422 * cbSceneParam._m0[62u].x))) / _1638;
            float _1784 = isnan(cbSceneParam._m0[41u].w) ? _1780 : (isnan(_1780) ? cbSceneParam._m0[41u].w : max(_1780, cbSceneParam._m0[41u].w));
            float _1827 = (cbSceneParam._m0[33u].x - sqrt(((_1436 * _1436) + (_1435 * _1435)) + (_1437 * _1437))) * cbSceneParam._m0[33u].y;
            float _3686 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
            float _1834 = (isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1639, cbSceneParam._m0[33u].w + _1640), _1784), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1639, _1640 - cbSceneParam._m0[33u].z), _1784), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1639 - cbSceneParam._m0[33u].z, _1640 - cbSceneParam._m0[33u].w), _1784), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1639 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1640), _1784), 0.0)).x), vec4(0.25)));
            float _1838 = 1.0 - (_1834 * cbSceneParam._m0[34u].x);
            float _1839 = 1.0 - (_1834 * cbSceneParam._m0[34u].y);
            float _1840 = 1.0 - (_1834 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1840) ? _1586 : (isnan(_1586) ? _1840 : min(_1586, _1840));
            frontier_phi_34_33_ladder_1 = isnan(_1839) ? _1585 : (isnan(_1585) ? _1839 : min(_1585, _1839));
            frontier_phi_34_33_ladder_2 = isnan(_1838) ? _1584 : (isnan(_1584) ? _1838 : min(_1584, _1838));
        }
        else
        {
            frontier_phi_34_33_ladder = _1586;
            frontier_phi_34_33_ladder_1 = _1585;
            frontier_phi_34_33_ladder_2 = _1584;
        }
        _1650 = frontier_phi_34_33_ladder_2;
        _1652 = frontier_phi_34_33_ladder_1;
        _1654 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1650 = _1584;
        _1652 = _1585;
        _1654 = _1586;
    }
    uvec4 _1659 = floatBitsToUint(cbInstanceData._m0[_364 + 5u]);
    uint _1661 = _1659.x * 14u;
    uint _1662 = _1661 + 13u;
    float _1669 = _389 + (-1.0);
    float _1675 = (cbLight._m0[_1662].x * _1669) + 1.0;
    float _1676 = (cbLight._m0[_1662].y * _1669) + 1.0;
    float _1677 = (cbLight._m0[_1662].z * _1669) + 1.0;
    float _1678 = (cbLight._m0[_1662].w * _1669) + 1.0;
    uint _1679 = _1661 + 5u;
    float _1685 = isnan(1.0) ? _1676 : (isnan(_1676) ? 1.0 : min(_1676, 1.0));
    uint _1689 = _1661 + 4u;
    float _1699 = isnan(1.0) ? _1675 : (isnan(_1675) ? 1.0 : min(_1675, 1.0));
    uint _1703 = _1661 | 1u;
    float _1714 = dot(vec3(cbLight._m0[_1661].xyz), vec3(_226, _227, _228));
    float _1717 = dot(vec3(cbLight._m0[_1703].xyz), vec3(_226, _227, _228));
    float _3722 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
    float _3733 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
    float _1722 = (isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * 0.3183098733425140380859375;
    float _1724 = (isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * 0.3183098733425140380859375;
    float _1731 = ((cbLight._m0[_1679].x * _1685) * _1724) + (((cbLight._m0[_1689].x * _1650) * _1699) * _1722);
    float _1732 = ((_1685 * cbLight._m0[_1679].y) * _1724) + (((cbLight._m0[_1689].y * _1652) * _1699) * _1722);
    float _1733 = ((_1685 * cbLight._m0[_1679].z) * _1724) + (((cbLight._m0[_1689].z * _1654) * _1699) * _1722);
    uvec4 _1737 = floatBitsToUint(cbLight._m0[_1661 + 12u]);
    bool _1739 = _1737.x == 0u;
    float _1841;
    float _1843;
    float _1845;
    if (_1739)
    {
        _1841 = _1731;
        _1843 = _1732;
        _1845 = _1733;
    }
    else
    {
        uint _1849 = _1661 + 6u;
        float _1865 = (dot(vec3(cbLight._m0[_1661 + 2u].xyz), vec3(_226, _227, _228)) * 0.5) + 0.5;
        float _1866 = _1865 * _1865;
        float _3744 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
        float _1867 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1868 = isnan(1.0) ? _1677 : (isnan(_1677) ? 1.0 : min(_1677, 1.0));
        _1841 = (((cbLight._m0[_1849].x * 0.3183098733425140380859375) * _1867) * _1868) + _1731;
        _1843 = (((cbLight._m0[_1849].y * 0.3183098733425140380859375) * _1867) * _1868) + _1732;
        _1845 = (((cbLight._m0[_1849].z * 0.3183098733425140380859375) * _1867) * _1868) + _1733;
    }
    bool _1848 = _1737.y == 0u;
    float _1903;
    float _1905;
    float _1907;
    if (_1848)
    {
        _1903 = _1841;
        _1905 = _1843;
        _1907 = _1845;
    }
    else
    {
        uint _2011 = _1661 + 7u;
        float _2027 = (dot(vec3(cbLight._m0[_1661 + 3u].xyz), vec3(_226, _227, _228)) * 0.5) + 0.5;
        float _2028 = _2027 * _2027;
        float _3760 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
        float _2029 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _2030 = isnan(1.0) ? _1678 : (isnan(_1678) ? 1.0 : min(_1678, 1.0));
        _1903 = (((cbLight._m0[_2011].x * 0.3183098733425140380859375) * _2029) * _2030) + _1841;
        _1905 = (((cbLight._m0[_2011].y * 0.3183098733425140380859375) * _2029) * _2030) + _1843;
        _1907 = (((cbLight._m0[_2011].z * 0.3183098733425140380859375) * _2029) * _2030) + _1845;
    }
    uint _1909 = _1661 + 8u;
    float _1915 = cbLight._m0[_1661].x + _308;
    float _1916 = cbLight._m0[_1661].y + _309;
    float _1917 = cbLight._m0[_1661].z + _310;
    float _1921 = inversesqrt(dot(vec3(_1915, _1916, _1917), vec3(_1915, _1916, _1917)));
    float _1925 = dot(vec3(_226, _227, _228), vec3(cbLight._m0[_1661].xyz));
    float _3776 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _1928 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _3787 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _1929 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _1930 = dot(vec3(cbLight._m0[_1661].xyz), vec3(_1915 * _1921, _1916 * _1921, _1917 * _1921));
    float _3798 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _1941 = (exp2(log2(1.0 - (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1947 = (0.5 / ((_1928 + 9.9999999392252902907785028219223e-09) + _1929)) * _1928;
    float _3809 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _1949 = (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * 0.31831014156341552734375;
    uint _1963 = _1661 + 9u;
    float _1969 = cbLight._m0[_1703].x + _308;
    float _1970 = cbLight._m0[_1703].y + _309;
    float _1971 = cbLight._m0[_1703].z + _310;
    float _1975 = inversesqrt(dot(vec3(_1969, _1970, _1971), vec3(_1969, _1970, _1971)));
    float _1979 = dot(vec3(_226, _227, _228), vec3(cbLight._m0[_1703].xyz));
    float _3820 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1982 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _1983 = dot(vec3(cbLight._m0[_1703].xyz), vec3(_1969 * _1975, _1970 * _1975, _1971 * _1975));
    float _3831 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _1992 = (exp2(log2(1.0 - (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1996 = (0.5 / ((_1982 + 9.9999999392252902907785028219223e-09) + _1929)) * _1982;
    float _3842 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _1998 = (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * 0.31831014156341552734375;
    float _2008 = (((_1992 * cbLight._m0[_1963].x) * _1998) * _1685) + ((((cbLight._m0[_1909].x * _1650) * _1941) * _1949) * _1699);
    float _2009 = (((_1992 * cbLight._m0[_1963].y) * _1998) * _1685) + ((((cbLight._m0[_1909].y * _1652) * _1941) * _1949) * _1699);
    float _2010 = (((_1992 * cbLight._m0[_1963].z) * _1998) * _1685) + ((((cbLight._m0[_1909].z * _1654) * _1941) * _1949) * _1699);
    float _2066;
    float _2068;
    float _2070;
    if (_1739)
    {
        _2066 = _2008;
        _2068 = _2009;
        _2070 = _2010;
    }
    else
    {
        uint _2072 = _1661 + 10u;
        uint _2078 = _1661 + 2u;
        float _2084 = cbLight._m0[_2078].x + _308;
        float _2085 = cbLight._m0[_2078].y + _309;
        float _2086 = cbLight._m0[_2078].z + _310;
        float _2090 = inversesqrt(dot(vec3(_2084, _2085, _2086), vec3(_2084, _2085, _2086)));
        float _2094 = dot(vec3(_226, _227, _228), vec3(cbLight._m0[_2078].xyz));
        float _3853 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        float _2097 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _2098 = dot(vec3(cbLight._m0[_2078].xyz), vec3(_2084 * _2090, _2085 * _2090, _2086 * _2090));
        float _3864 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        float _2107 = (exp2(log2(1.0 - (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2111 = (0.5 / ((_2097 + 9.9999999392252902907785028219223e-09) + _1929)) * _2097;
        float _3875 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        float _2113 = (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * 0.31831014156341552734375;
        float _2114 = isnan(1.0) ? _1677 : (isnan(_1677) ? 1.0 : min(_1677, 1.0));
        _2066 = (((_2107 * cbLight._m0[_2072].x) * _2113) * _2114) + _2008;
        _2068 = (((_2107 * cbLight._m0[_2072].y) * _2113) * _2114) + _2009;
        _2070 = (((_2107 * cbLight._m0[_2072].z) * _2113) * _2114) + _2010;
    }
    float _2145;
    float _2147;
    float _2149;
    if (_1848)
    {
        _2145 = _2066;
        _2147 = _2068;
        _2149 = _2070;
    }
    else
    {
        uint _2156 = _1661 + 11u;
        uint _2162 = _1661 + 3u;
        float _2168 = cbLight._m0[_2162].x + _308;
        float _2169 = cbLight._m0[_2162].y + _309;
        float _2170 = cbLight._m0[_2162].z + _310;
        float _2174 = inversesqrt(dot(vec3(_2168, _2169, _2170), vec3(_2168, _2169, _2170)));
        float _2178 = dot(vec3(_226, _227, _228), vec3(cbLight._m0[_2162].xyz));
        float _3891 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
        float _2181 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _2182 = dot(vec3(cbLight._m0[_2162].xyz), vec3(_2168 * _2174, _2169 * _2174, _2170 * _2174));
        float _3902 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2191 = (exp2(log2(1.0 - (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2195 = (0.5 / ((_2181 + 9.9999999392252902907785028219223e-09) + _1929)) * _2181;
        float _3913 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        float _2197 = (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * 0.31831014156341552734375;
        float _2198 = isnan(1.0) ? _1678 : (isnan(_1678) ? 1.0 : min(_1678, 1.0));
        _2145 = (((_2191 * cbLight._m0[_2156].x) * _2197) * _2198) + _2066;
        _2147 = (((_2191 * cbLight._m0[_2156].y) * _2197) * _2198) + _2068;
        _2149 = (((_2191 * cbLight._m0[_2156].z) * _2197) * _2198) + _2070;
    }
    float _2264;
    float _2266;
    float _2268;
    float _2270;
    float _2272;
    float _2274;
    if (_1659.y == 0u)
    {
        uvec4 _2219 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2220 = _2219.x;
        uint _2231 = uint((float(_2219.y) * floor(float(uint(cbSceneParam._m0[85u].y * _324) / _2220))) + floor(float(uint(cbSceneParam._m0[85u].x * _323) / _2220)));
        float _2241 = (log2(_1437 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2242 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        uint _2245 = uint(isnan(14.0) ? _2242 : (isnan(_2242) ? 14.0 : min(_2242, 14.0)));
        uvec4 _2250 = texelFetch(g_lightClusterGridBuffer, int(((_2245 << 2u) + (_2231 << 6u)) >> 2u));
        uint _2251 = _2250.x;
        uint _2252 = _2219.z;
        float _2368;
        float _2370;
        float _2372;
        float _2374;
        float _2376;
        float _2378;
        if (((((1u << ((_2252 >> 4u) & 15u)) + 4294967295u) & _2251) == 0u) || ((_2252 & 240u) == 0u))
        {
            _2368 = 0.0;
            _2370 = 0.0;
            _2372 = 0.0;
            _2374 = 0.0;
            _2376 = 0.0;
            _2378 = 0.0;
        }
        else
        {
            float _2369;
            float _2371;
            float _2373;
            float _2375;
            float _2377;
            float _2379;
            float _2529 = 0.0;
            float _2530 = 0.0;
            float _2531 = 0.0;
            float _2532 = 0.0;
            float _2533 = 0.0;
            float _2534 = 0.0;
            uint _2535 = 0u;
            uint _2544;
            bool _2545;
            for (;;)
            {
                _2544 = texelFetch(g_lightClassification, int((((_2245 << 5u) + (_2231 << 9u)) + (_2535 << 2u)) >> 2u)).x;
                _2545 = _2544 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2545)
                {
                    frontier_phi_68_pred = _2534;
                    frontier_phi_68_pred_1 = _2533;
                    frontier_phi_68_pred_2 = _2532;
                    frontier_phi_68_pred_3 = _2531;
                    frontier_phi_68_pred_4 = _2530;
                    frontier_phi_68_pred_5 = _2529;
                }
                else
                {
                    float _2675;
                    float _2676;
                    float _2677;
                    float _2678;
                    float _2679;
                    float _2680;
                    uint _2681;
                    _2675 = _2529;
                    _2676 = _2530;
                    _2677 = _2531;
                    _2678 = _2532;
                    _2679 = _2533;
                    _2680 = _2534;
                    _2681 = _2544;
                    float _2601;
                    float _2602;
                    float _2603;
                    float _2604;
                    float _2605;
                    float _2606;
                    for (;;)
                    {
                        uint _2685 = uint(findLSB(_2681)) + (_2535 << 5u);
                        uint _2682 = (_2681 + 4294967295u) & _2681;
                        uint _2687 = _2685 * 48u;
                        vec4 _2701 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2687)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 3u)).x));
                        uint _2707 = (_2685 * 48u) + 4u;
                        vec4 _2720 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2707)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 3u)).x));
                        uint _2726 = (_2685 * 48u) + 8u;
                        vec3 _2737 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2726)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 2u)).x));
                        float _2741 = _2701.x - _1435;
                        float _2742 = _2701.y - _1436;
                        float _2743 = _2701.z - _1437;
                        float _2744 = dot(vec3(_2741, _2742, _2743), vec3(_2741, _2742, _2743));
                        float _2747 = inversesqrt(_2744);
                        float _2756 = 1.0 - (_2744 * _2701.w);
                        float _3939 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
                        float _2757 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
                        float _2758 = sqrt(_2744) * _2720.w;
                        float _2761 = 1.39999997615814208984375 / (_2758 + 1.39999997615814208984375);
                        float _2762 = _2761 * _2761;
                        float _2765 = ((1.0 - _2762) * dot(vec3(_345, _348, _351), vec3(_2747 * _2741, _2747 * _2742, _2747 * _2743))) + _2762;
                        float _2768 = _2758 * _2758;
                        float _2772 = ((isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0))) * _2757) / ((_2768 * 0.699999988079071044921875) + 1.0);
                        float _2776 = (-0.0) - _1435;
                        float _2777 = (-0.0) - _1436;
                        float _2778 = (-0.0) - _1437;
                        float _2782 = inversesqrt(dot(vec3(_2776, _2777, _2778), vec3(_2776, _2777, _2778)));
                        float _2786 = dot(vec3(_345, _348, _351), vec3(_2782 * _2776, _2782 * _2777, _2782 * _2778));
                        float _3955 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
                        float _3966 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
                        float _2790 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
                        float _2794 = (0.5 / (((isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) + 9.9999999392252902907785028219223e-09) + _2790)) * _2790;
                        float _3977 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
                        float _2803 = (((isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * 3.1415927410125732421875) / ((_2768 * 2.1991131305694580078125) + 3.141590118408203125)) * _2757;
                        _2604 = (_2772 * _2720.x) + _2678;
                        _2605 = (_2772 * _2720.y) + _2679;
                        _2606 = (_2772 * _2720.z) + _2680;
                        _2601 = (_2803 * _2737.x) + _2675;
                        _2602 = (_2803 * _2737.y) + _2676;
                        _2603 = (_2803 * _2737.z) + _2677;
                        if (_2682 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2675 = _2601;
                            _2676 = _2602;
                            _2677 = _2603;
                            _2678 = _2604;
                            _2679 = _2605;
                            _2680 = _2606;
                            _2681 = _2682;
                        }
                    }
                    frontier_phi_68_pred = _2606;
                    frontier_phi_68_pred_1 = _2605;
                    frontier_phi_68_pred_2 = _2604;
                    frontier_phi_68_pred_3 = _2603;
                    frontier_phi_68_pred_4 = _2602;
                    frontier_phi_68_pred_5 = _2601;
                }
                _2379 = frontier_phi_68_pred;
                _2377 = frontier_phi_68_pred_1;
                _2375 = frontier_phi_68_pred_2;
                _2373 = frontier_phi_68_pred_3;
                _2371 = frontier_phi_68_pred_4;
                _2369 = frontier_phi_68_pred_5;
                uint _2536 = _2535 + 1u;
                if (_2536 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2529 = _2369;
                    _2530 = _2371;
                    _2531 = _2373;
                    _2532 = _2375;
                    _2533 = _2377;
                    _2534 = _2379;
                    _2535 = _2536;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2368 = _2369;
            _2370 = _2371;
            _2372 = _2373;
            _2374 = _2375;
            _2376 = _2377;
            _2378 = _2379;
        }
        uvec4 _2382 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2383 = _2382.z;
        uint _2385 = (_2383 >> 8u) & 15u;
        float _2500;
        float _2502;
        float _2504;
        float _2506;
        float _2508;
        float _2510;
        if (((4294967295u << _2385) & _2251) == 0u)
        {
            _2500 = _2368;
            _2502 = _2370;
            _2504 = _2372;
            _2506 = _2374;
            _2508 = _2376;
            _2510 = _2378;
        }
        else
        {
            float _2525 = inversesqrt(dot(vec3(_1435, _1436, _1437), vec3(_1435, _1436, _1437)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2385 < ((_2383 >> 12u) & 15u))
            {
                float _2501;
                float _2503;
                float _2505;
                float _2507;
                float _2509;
                float _2511;
                float _2658 = _2368;
                float _2659 = _2370;
                float _2660 = _2372;
                float _2661 = _2374;
                float _2662 = _2376;
                float _2663 = _2378;
                uint _2664 = _2385;
                uint _2673;
                bool _2674;
                for (;;)
                {
                    _2673 = texelFetch(g_lightClassification, int((((_2245 << 5u) + (_2231 << 9u)) + (_2664 << 2u)) >> 2u)).x;
                    _2674 = _2673 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2674)
                    {
                        frontier_phi_79_pred = _2663;
                        frontier_phi_79_pred_1 = _2662;
                        frontier_phi_79_pred_2 = _2661;
                        frontier_phi_79_pred_3 = _2660;
                        frontier_phi_79_pred_4 = _2659;
                        frontier_phi_79_pred_5 = _2658;
                    }
                    else
                    {
                        float _2819;
                        float _2820;
                        float _2821;
                        float _2822;
                        float _2823;
                        float _2824;
                        float _3071;
                        float _3072;
                        float _3073;
                        float _3074;
                        float _3075;
                        float _3076;
                        float _2832 = _2658;
                        float _2833 = _2659;
                        float _2834 = _2660;
                        float _2835 = _2661;
                        float _2836 = _2662;
                        float _2837 = _2663;
                        uint _2838 = _2673;
                        uint _2839;
                        vec4 _2864;
                        float _2865;
                        vec4 _2880;
                        vec3 _2892;
                        vec4 _2908;
                        vec4 _2924;
                        float _2971;
                        bool _2972;
                        for (;;)
                        {
                            uint _2849 = ((_2664 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2838));
                            _2839 = (_2838 + 4294967295u) & _2838;
                            uint _2851 = _2849 * 40u;
                            _2864 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2851)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 3u)).x));
                            _2865 = _2864.w;
                            uint _2867 = (_2849 * 40u) + 4u;
                            _2880 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2867)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 3u)).x));
                            uint _2882 = (_2849 * 40u) + 8u;
                            _2892 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2882)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 2u)).x));
                            uint _2895 = (_2849 * 40u) + 16u;
                            _2908 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2895)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 3u)).x));
                            uint _2911 = (_2849 * 40u) + 20u;
                            _2924 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2911)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 3u)).x));
                            uint _2927 = (_2849 * 40u) + 24u;
                            vec4 _2940 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2927)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 3u)).x));
                            uint _2946 = (_2849 * 40u) + 28u;
                            vec4 _2959 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2946)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 3u)).x));
                            _2971 = fma(_1437, _2959.z, fma(_1436, _2959.y, _2959.x * _1435)) + _2959.w;
                            _2972 = !((fma(_1437, _2940.z, fma(_1436, _2940.y, _2940.x * _1435)) + _2940.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2972)
                            {
                                float _2999 = _2864.x - _1435;
                                float _3000 = _2864.y - _1436;
                                float _3001 = _2864.z - _1437;
                                float _3002 = dot(vec3(_2999, _3000, _3001), vec3(_2999, _3000, _3001));
                                float _3005 = inversesqrt(_3002);
                                float _3006 = _3005 * _2999;
                                float _3007 = _3005 * _3000;
                                float _3008 = _3005 * _3001;
                                float _3012 = 1.0 - (_3002 / (_2865 * _2865));
                                float _3988 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                                float _3013 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
                                float _3017 = sqrt(_3002) * _2880.w;
                                float _3019 = 1.39999997615814208984375 / (_3017 + 1.39999997615814208984375);
                                float _3020 = _3019 * _3019;
                                float _3021 = 1.0 - _3020;
                                float _3023 = (_3021 * dot(vec3(_3006, _3007, _3008), vec3(_345, _348, _351))) + _3020;
                                float _3026 = _3017 * _3017;
                                float _3030 = (fma(_1437, _2908.z, fma(_1436, _2908.y, _2908.x * _1435)) + _2908.w) / _2971;
                                float _3031 = (fma(_1437, _2924.z, fma(_1436, _2924.y, _2924.x * _1435)) + _2924.w) / _2971;
                                float _3035 = 1.0 - dot(vec2(_3030, _3031), vec2(_3030, _3031));
                                float _4004 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                                float _3036 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
                                float _3037 = _3036 * (((isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0))) * _3013) / ((_3026 * 0.699999988079071044921875) + 1.0));
                                float _3047 = dot(vec3(_345, _348, _351), vec3((-0.0) - (_1435 * _2525), (-0.0) - (_1436 * _2525), (-0.0) - (_1437 * _2525)));
                                float _4015 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
                                float _3055 = (_3021 * dot(vec3(_345, _348, _351), vec3(_3006, _3007, _3008))) + _3020;
                                float _4026 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                                float _3056 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
                                float _3060 = (0.5 / (((isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) + 9.9999999392252902907785028219223e-09) + _3056)) * _3056;
                                float _4037 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                                float _3067 = (_3036 * _3013) * (((isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * 3.1415927410125732421875) / ((_3026 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_85_pred = _3037 * _2880.z;
                                frontier_phi_85_pred_1 = _3037 * _2880.y;
                                frontier_phi_85_pred_2 = _3037 * _2880.x;
                                frontier_phi_85_pred_3 = _3067 * _2892.z;
                                frontier_phi_85_pred_4 = _3067 * _2892.y;
                                frontier_phi_85_pred_5 = _3067 * _2892.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3076 = frontier_phi_85_pred;
                            _3075 = frontier_phi_85_pred_1;
                            _3074 = frontier_phi_85_pred_2;
                            _3073 = frontier_phi_85_pred_3;
                            _3072 = frontier_phi_85_pred_4;
                            _3071 = frontier_phi_85_pred_5;
                            _2822 = _3074 + _2835;
                            _2823 = _3075 + _2836;
                            _2824 = _3076 + _2837;
                            _2819 = _3071 + _2832;
                            _2820 = _3072 + _2833;
                            _2821 = _3073 + _2834;
                            if (_2839 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2832 = _2819;
                                _2833 = _2820;
                                _2834 = _2821;
                                _2835 = _2822;
                                _2836 = _2823;
                                _2837 = _2824;
                                _2838 = _2839;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2824;
                        frontier_phi_79_pred_1 = _2823;
                        frontier_phi_79_pred_2 = _2822;
                        frontier_phi_79_pred_3 = _2821;
                        frontier_phi_79_pred_4 = _2820;
                        frontier_phi_79_pred_5 = _2819;
                    }
                    _2511 = frontier_phi_79_pred;
                    _2509 = frontier_phi_79_pred_1;
                    _2507 = frontier_phi_79_pred_2;
                    _2505 = frontier_phi_79_pred_3;
                    _2503 = frontier_phi_79_pred_4;
                    _2501 = frontier_phi_79_pred_5;
                    uint _2665 = _2664 + 1u;
                    if (_2665 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2658 = _2501;
                        _2659 = _2503;
                        _2660 = _2505;
                        _2661 = _2507;
                        _2662 = _2509;
                        _2663 = _2511;
                        _2664 = _2665;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2507;
                frontier_phi_60_61_ladder_1 = _2511;
                frontier_phi_60_61_ladder_2 = _2509;
                frontier_phi_60_61_ladder_3 = _2505;
                frontier_phi_60_61_ladder_4 = _2503;
                frontier_phi_60_61_ladder_5 = _2501;
            }
            else
            {
                frontier_phi_60_61_ladder = _2374;
                frontier_phi_60_61_ladder_1 = _2378;
                frontier_phi_60_61_ladder_2 = _2376;
                frontier_phi_60_61_ladder_3 = _2372;
                frontier_phi_60_61_ladder_4 = _2370;
                frontier_phi_60_61_ladder_5 = _2368;
            }
            _2500 = frontier_phi_60_61_ladder_5;
            _2502 = frontier_phi_60_61_ladder_4;
            _2504 = frontier_phi_60_61_ladder_3;
            _2506 = frontier_phi_60_61_ladder;
            _2508 = frontier_phi_60_61_ladder_2;
            _2510 = frontier_phi_60_61_ladder_1;
        }
        float _2515 = isnan(1.0) ? _389 : (isnan(_389) ? 1.0 : min(_389, 1.0));
        _2264 = (_2515 * _2506) + _1903;
        _2266 = (_2515 * _2508) + _1905;
        _2268 = (_2515 * _2510) + _1907;
        _2270 = ((_2500 * 0.039999999105930328369140625) * _2515) + _2145;
        _2272 = ((_2502 * 0.039999999105930328369140625) * _2515) + _2147;
        _2274 = ((_2504 * 0.039999999105930328369140625) * _2515) + _2149;
    }
    else
    {
        _2264 = _1903;
        _2266 = _1905;
        _2268 = _1907;
        _2270 = _2145;
        _2272 = _2147;
        _2274 = _2149;
    }
    uint _2280 = _365 + uint(cbMatDynParam._m0[0u].w);
    float _2288 = ((_211.x * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].x) * cbInstanceData._m0[_2280].x;
    float _2291 = ((_211.y * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].y) * cbInstanceData._m0[_2280].y;
    float _2294 = ((_211.z * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].z) * cbInstanceData._m0[_2280].z;
    float _4053 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _4064 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _4075 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _4086 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _2312 = (((isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (_2264 + ((isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0))) * _389))) + ((_2270 + ((isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0))) * _1168)) * cbPerFrame._m0[3u].x)) + _2288;
    float _2314 = (_2291 + ((_2272 + ((isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0))) * _1168)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (_2266 + ((isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0))) * _389)));
    float _2316 = (_2294 + ((_2274 + ((isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0))) * _1168)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (_2268 + ((isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0))) * _389)));
    float _2317 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2318 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2319 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2325 = cbMtdParam._m0[2u].x * _2288;
    float _2326 = cbMtdParam._m0[2u].y * _2291;
    float _2327 = cbMtdParam._m0[2u].z * _2294;
    float _4112 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2329 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _2334 = cbInstanceData._m0[_364 + 6u].w * (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0)));
    float _2339 = _323 / cbSceneParam._m0[86u].x;
    float _2340 = _324 / cbSceneParam._m0[86u].y;
    vec4 _2354 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2339, _2340, (log2((isnan(cbSceneParam._m0[77u].w) ? _249 : (isnan(_249) ? cbSceneParam._m0[77u].w : min(_249, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2356 = _2354.x;
    float _2357 = _2354.y;
    float _2358 = _2354.z;
    float _2359 = _2354.w;
    float _2431;
    float _2433;
    float _2435;
    float _2437;
    if (_249 > cbSceneParam._m0[78u].w)
    {
        float _2393 = isnan(_249) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _249 : min(cbSceneParam._m0[80u].w, _249));
        float _2394 = _2393 / _249;
        float _2405 = _2394 * _301;
        float _2406 = _302 * _2394;
        float _2407 = (-0.0) - _2406;
        float _2409 = _2394 * _303;
        float _2411 = (cbSceneParam._m0[77u].w * _2407) / _2393;
        float _2412 = _2411 + cbSceneParam._m0[79u].w;
        float _2413 = cbSceneParam._m0[79u].w - _2406;
        float _2419 = sqrt(((_2405 * _2405) + (_2406 * _2406)) + (_2409 * _2409));
        float _2422 = (1.0 - (cbSceneParam._m0[77u].w / _2393)) * _2419;
        float _2427 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2429 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2614;
        if (abs((_2407 - _2411) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2614 = ((((_2412 > 0.0) ? exp2(_2427 * _2412) : (2.0 - exp2(_2429 * _2412))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2422;
        }
        else
        {
            float _2558 = 1.0 / cbSceneParam._m0[80u].x;
            float _2559 = isnan(_2413) ? _2412 : (isnan(_2412) ? _2413 : max(_2412, _2413));
            float _2560 = isnan(_2413) ? _2412 : (isnan(_2412) ? _2413 : min(_2412, _2413));
            float _2569 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : min(_2559, 0.0));
            float _2570 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : min(_2560, 0.0));
            _2614 = ((abs(_2419 / _2407) * cbSceneParam._m0[80u].y) * ((((_2569 - _2570) * 2.0) - ((exp2(_2427 * (isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0)))) - exp2(_2427 * (isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0))))) * _2558)) - ((exp2(_2429 * _2569) - exp2(_2429 * _2570)) * _2558))) + (_2422 * cbSceneParam._m0[80u].z);
        }
        vec4 _2616 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2339, _2340, 1.0), 0.0);
        float _2625 = exp2((_2614 * (-1.44269502162933349609375)) * (1.0 - _2616.w));
        float _2626 = log2(_2625);
        float _2642 = log2(_2359);
        _2431 = (exp2(_2642 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2626 * cbSceneParam._m0[78u].x)) * _2616.x) / cbSceneParam._m0[78u].x)) + _2356;
        _2433 = (exp2(_2642 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2626 * cbSceneParam._m0[78u].y)) * _2616.y) / cbSceneParam._m0[78u].y)) + _2357;
        _2435 = (exp2(_2642 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2626 * cbSceneParam._m0[78u].z)) * _2616.z) / cbSceneParam._m0[78u].z)) + _2358;
        _2437 = _2625 * _2359;
    }
    else
    {
        _2431 = _2356;
        _2433 = _2357;
        _2435 = _2358;
        _2437 = _2359;
    }
    bool _2652;
    vec4 _2447;
    vec4 _2470;
    float _2472;
    float _2476;
    float _2477;
    float _2478;
    float _2481;
    float _2484;
    float _2487;
    float _2488;
    bool _2499;
    for (;;)
    {
        _2447 = cbMatDynParam._m0[0u];
        float _2449 = roundEven(_2447.y);
        bool _2450 = _2449 == 3.0;
        float _2452 = log2(_2437);
        float _2456 = exp2(_2452 * cbSceneParam._m0[78u].x);
        float _2457 = exp2(_2452 * cbSceneParam._m0[78u].y);
        float _2458 = exp2(_2452 * cbSceneParam._m0[78u].z);
        float _2459 = _2456 * _2317;
        float _2460 = _2457 * _2318;
        float _2461 = _2458 * _2319;
        float _2468 = _317 + (-0.5);
        _2470 = cbMtdParam._m0[1u];
        _2472 = _2470.y * _2468;
        float _2475 = (_2449 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2476 = _2475 * (_2450 ? _2459 : (_2459 + (cbSceneParam._m0[72u].w * _2431)));
        _2477 = _2475 * (_2450 ? _2460 : (_2460 + (cbSceneParam._m0[72u].w * _2433)));
        _2478 = _2475 * (_2450 ? _2461 : (_2461 + (cbSceneParam._m0[72u].w * _2435)));
        _2481 = ((_2325 * _2329) * _2456) * _2475;
        _2484 = ((_2326 * _2329) * _2457) * _2475;
        _2487 = ((_2327 * _2329) * _2458) * _2475;
        _2488 = _2468 * 0.999000012874603271484375;
        _2499 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2499)
        {
            if ((cbInstanceData._m0[_364 + 7u].x + _2488) < 0.5)
            {
                _2652 = true;
                break;
            }
        }
        uint _2593 = _365 + uint(_2447.w);
        if ((cbInstanceData._m0[_2593].w < 1.0) && ((cbInstanceData._m0[_2593].w + _2488) < 0.5))
        {
            _2652 = true;
            break;
        }
        if ((_2472 + _194) < _2470.x)
        {
            _2652 = true;
            break;
        }
        _2652 = false;
        break;
    }
    float _2810;
    if (_2652)
    {
        discard_state = true;
        _2810 = 0.0;
    }
    else
    {
        _2810 = _2334;
    }
    SV_Target.x = _2476;
    SV_Target.y = _2477;
    SV_Target.z = _2478;
    SV_Target.w = _2810;
    SV_Target_1.x = _2481;
    SV_Target_1.y = _2484;
    SV_Target_1.z = _2487;
    SV_Target_1.w = _2334;
    discard_exit();
}


