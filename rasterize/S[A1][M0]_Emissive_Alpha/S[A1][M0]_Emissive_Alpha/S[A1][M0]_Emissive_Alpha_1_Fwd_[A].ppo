#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A1_M0_Emissive_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_A1_M0_Emissive_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _729;
float _2935;
float _2936;
float _2937;
float _2938;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _164 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _165 = _164 * NORMAL.x;
    float _166 = _164 * NORMAL.y;
    float _167 = _164 * NORMAL.z;
    vec4 _187 = texture(sampler2D(S_A1_M0_Emissive_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _190 = _187.w;
    float _191 = _190 * TEXCOORD_1.z;
    vec4 _207 = texture(sampler2D(S_A1_M0_Emissive_Alpha_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _221 = inversesqrt(dot(vec3(_165, _166, _167), vec3(_165, _166, _167)));
    float _222 = _221 * _165;
    float _223 = _221 * _166;
    float _224 = _221 * _167;
    float _2947 = isnan(0.0) ? _191 : (isnan(_191) ? 0.0 : max(_191, 0.0));
    float _226 = isnan(1.0) ? _2947 : (isnan(_2947) ? 1.0 : min(_2947, 1.0));
    float _2958 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _2969 = isnan(0.0) ? cbMtdParam._m0[10u].y : (isnan(cbMtdParam._m0[10u].y) ? 0.0 : max(cbMtdParam._m0[10u].y, 0.0));
    float _2980 = isnan(0.0) ? cbMtdParam._m0[10u].z : (isnan(cbMtdParam._m0[10u].z) ? 0.0 : max(cbMtdParam._m0[10u].z, 0.0));
    float _245 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _287 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _297 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _287);
    float _298 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _287);
    float _299 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _287);
    float _303 = inversesqrt(dot(vec3(_297, _298, _299), vec3(_297, _298, _299)));
    float _304 = _297 * _303;
    float _305 = _298 * _303;
    float _306 = _299 * _303;
    vec4 _311 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _313 = _311.w;
    float _319 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _320 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _341 = fma(_224, cbSceneParam._m0[5u].z, fma(_223, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _222));
    float _344 = fma(_224, cbSceneParam._m0[6u].z, fma(_223, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _222));
    float _347 = fma(_224, cbSceneParam._m0[7u].z, fma(_223, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _222));
    uint _360 = uint(roundEven(NORMAL.w)) * 13u;
    uint _361 = _360 + 9u;
    uint _362 = _361 + uint(cbMatDynParam._m0[0u].w);
    float _368 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2958 : (isnan(_2958) ? 1.0 : min(_2958, 1.0)))) * cbInstanceData._m0[_362].x;
    float _369 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2969 : (isnan(_2969) ? 1.0 : min(_2969, 1.0)))) * cbInstanceData._m0[_362].y;
    float _370 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2980 : (isnan(_2980) ? 1.0 : min(_2980, 1.0)))) * cbInstanceData._m0[_362].z;
    float _2991 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _371 = isnan(1.0) ? _2991 : (isnan(_2991) ? 1.0 : min(_2991, 1.0));
    float _3002 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _372 = isnan(1.0) ? _3002 : (isnan(_3002) ? 1.0 : min(_3002, 1.0));
    float _3013 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _373 = isnan(1.0) ? _3013 : (isnan(_3013) ? 1.0 : min(_3013, 1.0));
    vec4 _382 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _319, cbSceneParam._m0[86u].y * _320));
    float _385 = _382.x * TEXCOORD_1.w;
    float _386 = dot(vec3(_222, _223, _224), vec3(_304, _305, _306));
    float _389 = _386 * 2.0;
    float _394 = (_389 * _222) - _304;
    float _395 = (_389 * _223) - _305;
    float _396 = (_389 * _224) - _306;
    float _418 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _422 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _426 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _728;
    float _730;
    float _731;
    float _732;
    float _733;
    float _734;
    float _735;
    float _736;
    float _737;
    float _738;
    float _739;
    float _740;
    float _741;
    float _742;
    float _743;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _453 = fma(_426, cbModelParam._m0[26u].z, fma(_422, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _418));
        float _457 = fma(_426, cbModelParam._m0[27u].z, fma(_422, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _418));
        float _461 = fma(_426, cbModelParam._m0[28u].z, fma(_422, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _418));
        float _486 = _418 + _222;
        float _487 = _422 + _223;
        float _488 = _426 + _224;
        float _498 = fma(_488, cbModelParam._m0[26u].z, fma(_487, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _486)) - _453;
        float _499 = fma(_488, cbModelParam._m0[27u].z, fma(_487, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _486)) - _457;
        float _500 = fma(_488, cbModelParam._m0[28u].z, fma(_487, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _486)) - _461;
        float _504 = inversesqrt(dot(vec3(_498, _499, _500), vec3(_498, _499, _500)));
        float _517 = ((_504 * _498) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_453 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _518 = ((_504 * _499) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_457 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _519 = ((_504 * _500) / cbModelParam._m0[34u].z) + ((((((_461 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _522 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_517, _518, _519), 0.0);
        vec4 _529 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_517, _518, _519), 0.0);
        vec4 _536 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_517, _518, _519), 0.0);
        vec4 _543 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_517, _518, _519), 0.0);
        float _556 = exp2((_522.w + (-0.5)) * 20.0) * 2.0;
        float _557 = _556 * (_522.x + (-0.5));
        float _558 = _556 * (_522.y + (-0.5));
        float _559 = _556 * (_522.z + (-0.5));
        float _566 = exp2((_529.w + (-0.5)) * 20.0) * 2.0;
        float _567 = _566 * (_529.x + (-0.5));
        float _568 = _566 * (_529.y + (-0.5));
        float _569 = _566 * (_529.z + (-0.5));
        float _576 = exp2((_536.w + (-0.5)) * 20.0) * 2.0;
        float _577 = _576 * (_536.x + (-0.5));
        float _578 = _576 * (_536.y + (-0.5));
        float _579 = _576 * (_536.z + (-0.5));
        float _586 = exp2((_543.w + (-0.5)) * 20.0) * 2.0;
        float _587 = _586 * (_543.x + (-0.5));
        float _588 = _586 * (_543.y + (-0.5));
        float _589 = _586 * (_543.z + (-0.5));
        float _590 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
        float _591 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
        float _592 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
        float _593 = _557 * 0.5;
        float _594 = _567 * 0.5;
        float _595 = _577 * 0.5;
        float _596 = dot(vec3(_593, _594, _595), vec3(_593, _594, _595));
        float _601 = (_596 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_596);
        float _610 = (dot(vec3(_222, _223, _224), vec3(_601 * _593, _601 * _594, _601 * _595)) + 1.0) * 0.5;
        float _3039 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
        float _620 = sqrt(((_594 * _594) + (_593 * _593)) + (_595 * _595)) / (_590 + 9.9999997473787516355514526367188e-06);
        float _3050 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
        float _621 = isnan(1.0) ? _3050 : (isnan(_3050) ? 1.0 : min(_3050, 1.0));
        float _622 = _621 * 2.0;
        float _626 = (1.0 - _621) / (_621 + 1.0);
        float _3061 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
        float _627 = isnan(1.0) ? _3061 : (isnan(_3061) ? 1.0 : min(_3061, 1.0));
        float _636 = ((((1.0 - _627) * (_622 + 2.0)) * exp2(log2(isnan(1.0) ? _3039 : (isnan(_3039) ? 1.0 : min(_3039, 1.0))) * (_622 + 1.0))) + _627) * _590;
        float _637 = _558 * 0.5;
        float _638 = _568 * 0.5;
        float _639 = _578 * 0.5;
        float _640 = dot(vec3(_637, _638, _639), vec3(_637, _638, _639));
        float _645 = (_640 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_640);
        float _653 = (dot(vec3(_222, _223, _224), vec3(_645 * _637, _645 * _638, _645 * _639)) + 1.0) * 0.5;
        float _3072 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
        float _662 = sqrt(((_638 * _638) + (_637 * _637)) + (_639 * _639)) / (_591 + 9.9999997473787516355514526367188e-06);
        float _3083 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
        float _663 = isnan(1.0) ? _3083 : (isnan(_3083) ? 1.0 : min(_3083, 1.0));
        float _664 = _663 * 2.0;
        float _668 = (1.0 - _663) / (_663 + 1.0);
        float _3094 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
        float _669 = isnan(1.0) ? _3094 : (isnan(_3094) ? 1.0 : min(_3094, 1.0));
        float _678 = ((((1.0 - _669) * (_664 + 2.0)) * exp2(log2(isnan(1.0) ? _3072 : (isnan(_3072) ? 1.0 : min(_3072, 1.0))) * (_664 + 1.0))) + _669) * _591;
        float _679 = _559 * 0.5;
        float _680 = _569 * 0.5;
        float _681 = _579 * 0.5;
        float _682 = dot(vec3(_679, _680, _681), vec3(_679, _680, _681));
        float _687 = (_682 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_682);
        float _695 = (dot(vec3(_222, _223, _224), vec3(_687 * _679, _687 * _680, _687 * _681)) + 1.0) * 0.5;
        float _3105 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
        float _704 = sqrt(((_680 * _680) + (_679 * _679)) + (_681 * _681)) / (_592 + 9.9999997473787516355514526367188e-06);
        float _3116 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _705 = isnan(1.0) ? _3116 : (isnan(_3116) ? 1.0 : min(_3116, 1.0));
        float _706 = _705 * 2.0;
        float _710 = (1.0 - _705) / (_705 + 1.0);
        float _3127 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _711 = isnan(1.0) ? _3127 : (isnan(_3127) ? 1.0 : min(_3127, 1.0));
        float _720 = ((((1.0 - _711) * (_706 + 2.0)) * exp2(log2(isnan(1.0) ? _3105 : (isnan(_3105) ? 1.0 : min(_3105, 1.0))) * (_706 + 1.0))) + _711) * _592;
        _728 = _559;
        _730 = _558;
        _731 = _557;
        _732 = _569;
        _733 = _568;
        _734 = _567;
        _735 = _579;
        _736 = _578;
        _737 = _577;
        _738 = _592;
        _739 = _591;
        _740 = _590;
        _741 = cbModelParam._m0[36u].z * (isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0)));
        _742 = cbModelParam._m0[36u].z * (isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0)));
        _743 = cbModelParam._m0[36u].z * (isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0)));
    }
    else
    {
        _728 = _729;
        _730 = _729;
        _731 = _729;
        _732 = _729;
        _733 = _729;
        _734 = _729;
        _735 = _729;
        _736 = _729;
        _737 = _729;
        _738 = _729;
        _739 = _729;
        _740 = _729;
        _741 = 0.0;
        _742 = 0.0;
        _743 = 0.0;
    }
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _769 = fma(_426, cbModelParam._m0[30u].z, fma(_422, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _418));
        float _773 = fma(_426, cbModelParam._m0[31u].z, fma(_422, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _418));
        float _777 = fma(_426, cbModelParam._m0[32u].z, fma(_422, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _418));
        float _800 = _418 + _222;
        float _801 = _422 + _223;
        float _802 = _426 + _224;
        float _812 = fma(_802, cbModelParam._m0[30u].z, fma(_801, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _800)) - _769;
        float _813 = fma(_802, cbModelParam._m0[31u].z, fma(_801, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _800)) - _773;
        float _814 = fma(_802, cbModelParam._m0[32u].z, fma(_801, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _800)) - _777;
        float _818 = inversesqrt(dot(vec3(_812, _813, _814), vec3(_812, _813, _814)));
        float _831 = ((_818 * _812) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_769 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _832 = ((_818 * _813) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_773 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _833 = ((_818 * _814) / cbModelParam._m0[35u].z) + ((((((_777 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _835 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _842 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _849 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _856 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        float _868 = exp2((_835.w + (-0.5)) * 20.0) * 2.0;
        float _869 = _868 * (_835.x + (-0.5));
        float _870 = _868 * (_835.y + (-0.5));
        float _871 = _868 * (_835.z + (-0.5));
        float _878 = exp2((_842.w + (-0.5)) * 20.0) * 2.0;
        float _879 = _878 * (_842.x + (-0.5));
        float _880 = _878 * (_842.y + (-0.5));
        float _881 = _878 * (_842.z + (-0.5));
        float _888 = exp2((_849.w + (-0.5)) * 20.0) * 2.0;
        float _889 = _888 * (_849.x + (-0.5));
        float _890 = _888 * (_849.y + (-0.5));
        float _891 = _888 * (_849.z + (-0.5));
        float _898 = exp2((_856.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_856.x + (-0.5));
        float _900 = _898 * (_856.y + (-0.5));
        float _901 = _898 * (_856.z + (-0.5));
        float _902 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _903 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _904 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _905 = _869 * 0.5;
        float _906 = _879 * 0.5;
        float _907 = _889 * 0.5;
        float _908 = dot(vec3(_905, _906, _907), vec3(_905, _906, _907));
        float _913 = (_908 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_908);
        float _921 = (dot(vec3(_222, _223, _224), vec3(_913 * _905, _913 * _906, _913 * _907)) + 1.0) * 0.5;
        float _3168 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _930 = sqrt(((_906 * _906) + (_905 * _905)) + (_907 * _907)) / (_902 + 9.9999997473787516355514526367188e-06);
        float _3179 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _931 = isnan(1.0) ? _3179 : (isnan(_3179) ? 1.0 : min(_3179, 1.0));
        float _932 = _931 * 2.0;
        float _936 = (1.0 - _931) / (_931 + 1.0);
        float _3190 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3190 : (isnan(_3190) ? 1.0 : min(_3190, 1.0));
        float _946 = ((((1.0 - _937) * (_932 + 2.0)) * exp2(log2(isnan(1.0) ? _3168 : (isnan(_3168) ? 1.0 : min(_3168, 1.0))) * (_932 + 1.0))) + _937) * _902;
        float _947 = _870 * 0.5;
        float _948 = _880 * 0.5;
        float _949 = _890 * 0.5;
        float _950 = dot(vec3(_947, _948, _949), vec3(_947, _948, _949));
        float _955 = (_950 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_950);
        float _963 = (dot(vec3(_222, _223, _224), vec3(_955 * _947, _955 * _948, _955 * _949)) + 1.0) * 0.5;
        float _3201 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _972 = sqrt(((_948 * _948) + (_947 * _947)) + (_949 * _949)) / (_903 + 9.9999997473787516355514526367188e-06);
        float _3212 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _3212 : (isnan(_3212) ? 1.0 : min(_3212, 1.0));
        float _974 = _973 * 2.0;
        float _978 = (1.0 - _973) / (_973 + 1.0);
        float _3223 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3223 : (isnan(_3223) ? 1.0 : min(_3223, 1.0));
        float _988 = ((((1.0 - _979) * (_974 + 2.0)) * exp2(log2(isnan(1.0) ? _3201 : (isnan(_3201) ? 1.0 : min(_3201, 1.0))) * (_974 + 1.0))) + _979) * _903;
        float _989 = _871 * 0.5;
        float _990 = _881 * 0.5;
        float _991 = _891 * 0.5;
        float _992 = dot(vec3(_989, _990, _991), vec3(_989, _990, _991));
        float _997 = (_992 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_992);
        float _1005 = (dot(vec3(_222, _223, _224), vec3(_997 * _989, _997 * _990, _997 * _991)) + 1.0) * 0.5;
        float _3234 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1014 = sqrt(((_990 * _990) + (_989 * _989)) + (_991 * _991)) / (_904 + 9.9999997473787516355514526367188e-06);
        float _3245 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0));
        float _1016 = _1015 * 2.0;
        float _1020 = (1.0 - _1015) / (_1015 + 1.0);
        float _3256 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0));
        float _1030 = ((((1.0 - _1021) * (_1016 + 2.0)) * exp2(log2(isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0))) * (_1016 + 1.0))) + _1021) * _904;
        _1038 = _871;
        _1039 = _870;
        _1040 = _869;
        _1041 = _881;
        _1042 = _880;
        _1043 = _879;
        _1044 = _891;
        _1045 = _890;
        _1046 = _889;
        _1047 = _904;
        _1048 = _903;
        _1049 = _902;
        _1050 = cbModelParam._m0[36u].w * (isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0)));
        _1051 = cbModelParam._m0[36u].w * (isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0)));
        _1052 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0)));
    }
    else
    {
        _1038 = _729;
        _1039 = _729;
        _1040 = _729;
        _1041 = _729;
        _1042 = _729;
        _1043 = _729;
        _1044 = _729;
        _1045 = _729;
        _1046 = _729;
        _1047 = _729;
        _1048 = _729;
        _1049 = _729;
        _1050 = 0.0;
        _1051 = 0.0;
        _1052 = 0.0;
    }
    float _1062 = (cbModelParam._m0[1u].x * (_1050 - _741)) + _741;
    float _1063 = (cbModelParam._m0[1u].x * (_1051 - _742)) + _742;
    float _1064 = (cbModelParam._m0[1u].x * (_1052 - _743)) + _743;
    float _1085 = fma(_1064, cbSceneParam._m0[89u].z, fma(_1063, cbSceneParam._m0[89u].y, _1062 * cbSceneParam._m0[89u].x));
    float _1088 = fma(_1064, cbSceneParam._m0[90u].z, fma(_1063, cbSceneParam._m0[90u].y, _1062 * cbSceneParam._m0[90u].x));
    float _1091 = fma(_1064, cbSceneParam._m0[91u].z, fma(_1063, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1062));
    float _1106 = _394 * 0.5;
    float _1107 = _395 * 0.5;
    float _1108 = _396 * 0.5;
    float _1109 = dot(vec4(_1106, _1107, _1108, 1.0), vec4(_1040, _1043, _1046, _1049));
    float _1112 = dot(vec4(_1106, _1107, _1108, 1.0), vec4(_1039, _1042, _1045, _1048));
    float _1115 = dot(vec4(_1106, _1107, _1108, 1.0), vec4(_1038, _1041, _1044, _1047));
    float _1149;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1122 = dot(vec4(_1106, _1107, _1108, 1.0), vec4(_728, _732, _735, _738));
        float _1126 = dot(vec4(_1106, _1107, _1108, 1.0), vec4(_730, _733, _736, _739));
        float _1130 = dot(vec4(_1106, _1107, _1108, 1.0), vec4(_731, _734, _737, _740));
        float _1137 = dot(vec4(cbModelParam._m0[39u]), vec4(_1106, _1107, _1108, 1.0));
        _1149 = dot(vec3(isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)), isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)), isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1137) ? 0.0 : (isnan(0.0) ? _1137 : max(0.0, _1137))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1149 = 1.0;
    }
    float _1160;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1151 = dot(vec4(cbModelParam._m0[40u]), vec4(_1106, _1107, _1108, 1.0));
        _1160 = dot(vec3(isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)), isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0)), isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1151) ? 0.0 : (isnan(0.0) ? _1151 : max(0.0, _1151))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1160 = 1.0;
    }
    float _1164 = (_1160 * cbModelParam._m0[1u].x) + (_1149 * (1.0 - cbModelParam._m0[1u].x));
    float _1173 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1255;
    float _1257;
    float _1259;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1222 = fma(_426, cbModelParam._m0[13u].z, fma(_422, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _418)) + cbModelParam._m0[13u].w;
        float _1226 = fma(_426, cbModelParam._m0[14u].z, fma(_422, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _418)) + cbModelParam._m0[14u].w;
        float _1230 = fma(_426, cbModelParam._m0[15u].z, fma(_422, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _418)) + cbModelParam._m0[15u].w;
        float _1233 = fma(_396, cbModelParam._m0[13u].z, fma(_395, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _394));
        float _1236 = fma(_396, cbModelParam._m0[14u].z, fma(_395, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _394));
        float _1239 = fma(_396, cbModelParam._m0[15u].z, fma(_395, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _394));
        float _1265;
        if (_1233 > 0.0)
        {
            _1265 = abs((1.0 - _1222) / _1233);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1233 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1222 + 1.0) / _1233);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1265 = frontier_phi_14_12_ladder;
        }
        float _1472;
        if (_1236 > 0.0)
        {
            _1472 = abs((1.0 - _1226) / _1236);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1236 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1226 + 1.0) / _1236);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1472 = frontier_phi_23_19_ladder;
        }
        float _1661;
        if (_1239 > 0.0)
        {
            _1661 = abs((1.0 - _1230) / _1239);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1239 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1230 + 1.0) / _1239);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1661 = frontier_phi_35_30_ladder;
        }
        float _1663 = isnan(_1472) ? _1265 : (isnan(_1265) ? _1472 : min(_1265, _1472));
        float _1664 = isnan(_1661) ? _1663 : (isnan(_1663) ? _1661 : min(_1663, _1661));
        float _1668 = (_1664 * _1233) + _1222;
        float _1669 = (_1664 * _1236) + _1226;
        float _1670 = (_1664 * _1239) + _1230;
        float _1671 = _1664 * 9.9999997473787516355514526367188e-05;
        float _1673 = (-1.0) - _1671;
        float _1675 = _1671 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1670 > _1675) || ((_1670 < _1673) || ((_1669 > _1675) || ((_1669 < _1673) || ((_1668 < _1673) || (_1668 > _1675))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1767 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1670, cbModelParam._m0[9u].z, fma(_1669, cbModelParam._m0[9u].y, _1668 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1670, cbModelParam._m0[10u].z, fma(_1669, cbModelParam._m0[10u].y, _1668 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1670, cbModelParam._m0[11u].z, fma(_1669, cbModelParam._m0[11u].y, _1668 * cbModelParam._m0[11u].x))), _1173);
            frontier_phi_13_35_ladder = _1767.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1767.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1767.x * cbModelParam._m0[1u].y;
        }
        _1255 = frontier_phi_13_35_ladder_2;
        _1257 = frontier_phi_13_35_ladder_1;
        _1259 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1243 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_394, _395, _396), _1173);
        _1255 = _1243.x * cbModelParam._m0[1u].y;
        _1257 = _1243.y * cbModelParam._m0[1u].y;
        _1259 = _1243.z * cbModelParam._m0[1u].y;
    }
    float _1262 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1355;
    float _1357;
    float _1359;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1319 = fma(_426, cbModelParam._m0[21u].z, fma(_422, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _418)) + cbModelParam._m0[21u].w;
        float _1323 = fma(_426, cbModelParam._m0[22u].z, fma(_422, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _418)) + cbModelParam._m0[22u].w;
        float _1327 = fma(_426, cbModelParam._m0[23u].z, fma(_422, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _418)) + cbModelParam._m0[23u].w;
        float _1330 = fma(_396, cbModelParam._m0[21u].z, fma(_395, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _394));
        float _1333 = fma(_396, cbModelParam._m0[22u].z, fma(_395, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _394));
        float _1336 = fma(_396, cbModelParam._m0[23u].z, fma(_395, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _394));
        float _1477;
        if (_1330 > 0.0)
        {
            _1477 = abs((1.0 - _1319) / _1330);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1330 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1319 + 1.0) / _1330);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1477 = frontier_phi_25_21_ladder;
        }
        float _1688;
        if (_1333 > 0.0)
        {
            _1688 = abs((1.0 - _1323) / _1333);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1333 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1323 + 1.0) / _1333);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1688 = frontier_phi_37_32_ladder;
        }
        float _1839;
        if (_1336 > 0.0)
        {
            _1839 = abs((1.0 - _1327) / _1336);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1336 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1327 + 1.0) / _1336);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1839 = frontier_phi_46_43_ladder;
        }
        float _1841 = isnan(_1688) ? _1477 : (isnan(_1477) ? _1688 : min(_1477, _1688));
        float _1842 = isnan(_1839) ? _1841 : (isnan(_1841) ? _1839 : min(_1841, _1839));
        float _1846 = (_1842 * _1330) + _1319;
        float _1847 = (_1842 * _1333) + _1323;
        float _1848 = (_1842 * _1336) + _1327;
        float _1849 = _1842 * 9.9999997473787516355514526367188e-05;
        float _1850 = (-1.0) - _1849;
        float _1852 = _1849 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1848 > _1852) || ((_1848 < _1850) || ((_1847 > _1852) || ((_1847 < _1850) || ((_1846 < _1850) || (_1846 > _1852))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2084 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1848, cbModelParam._m0[17u].z, fma(_1847, cbModelParam._m0[17u].y, _1846 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1848, cbModelParam._m0[18u].z, fma(_1847, cbModelParam._m0[18u].y, _1846 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1848, cbModelParam._m0[19u].z, fma(_1847, cbModelParam._m0[19u].y, _1846 * cbModelParam._m0[19u].x))), _1262);
            frontier_phi_22_46_ladder = _2084.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2084.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2084.x * cbModelParam._m0[1u].z;
        }
        _1355 = frontier_phi_22_46_ladder_2;
        _1357 = frontier_phi_22_46_ladder_1;
        _1359 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1339 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_394, _395, _396), _1262);
        _1355 = _1339.x * cbModelParam._m0[1u].z;
        _1357 = _1339.y * cbModelParam._m0[1u].z;
        _1359 = _1339.z * cbModelParam._m0[1u].z;
    }
    float _1371 = _385 * 0.01200000010430812835693359375;
    float _1373 = _1371 * ((cbModelParam._m0[1u].w * (_1355 - _1255)) + _1255);
    float _1374 = _1371 * ((cbModelParam._m0[1u].w * (_1357 - _1257)) + _1257);
    float _1375 = _1371 * ((cbModelParam._m0[1u].w * (_1359 - _1259)) + _1259);
    float _1378 = fma(_1375, cbSceneParam._m0[89u].z, fma(_1374, cbSceneParam._m0[89u].y, _1373 * cbSceneParam._m0[89u].x));
    float _1381 = fma(_1375, cbSceneParam._m0[90u].z, fma(_1374, cbSceneParam._m0[90u].y, _1373 * cbSceneParam._m0[90u].x));
    float _1384 = fma(_1375, cbSceneParam._m0[91u].z, fma(_1374, cbSceneParam._m0[91u].y, _1373 * cbSceneParam._m0[91u].x));
    uvec4 _1394 = floatBitsToUint(cbInstanceData._m0[_360 + 5u]);
    uint _1396 = _1394.x * 14u;
    uint _1397 = _1396 + 13u;
    float _1404 = _385 + (-1.0);
    float _1410 = (cbLight._m0[_1397].x * _1404) + 1.0;
    float _1411 = (cbLight._m0[_1397].y * _1404) + 1.0;
    float _1412 = (cbLight._m0[_1397].z * _1404) + 1.0;
    float _1413 = (cbLight._m0[_1397].w * _1404) + 1.0;
    uint _1414 = _1396 + 5u;
    float _1420 = isnan(1.0) ? _1411 : (isnan(_1411) ? 1.0 : min(_1411, 1.0));
    uint _1424 = _1396 + 4u;
    float _1431 = isnan(1.0) ? _1410 : (isnan(_1410) ? 1.0 : min(_1410, 1.0));
    uint _1435 = _1396 | 1u;
    float _1446 = dot(vec3(cbLight._m0[_1396].xyz), vec3(_222, _223, _224));
    float _1449 = dot(vec3(cbLight._m0[_1435].xyz), vec3(_222, _223, _224));
    float _3392 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
    float _3403 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
    float _1454 = (isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0))) * 0.3183098733425140380859375;
    float _1456 = (isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0))) * 0.3183098733425140380859375;
    float _1463 = ((cbLight._m0[_1414].x * _1420) * _1456) + ((cbLight._m0[_1424].x * _1431) * _1454);
    float _1464 = ((_1420 * cbLight._m0[_1414].y) * _1456) + ((_1431 * cbLight._m0[_1424].y) * _1454);
    float _1465 = ((_1420 * cbLight._m0[_1414].z) * _1456) + ((_1431 * cbLight._m0[_1424].z) * _1454);
    uvec4 _1469 = floatBitsToUint(cbLight._m0[_1396 + 12u]);
    bool _1471 = _1469.x == 0u;
    float _1482;
    float _1484;
    float _1486;
    if (_1471)
    {
        _1482 = _1463;
        _1484 = _1464;
        _1486 = _1465;
    }
    else
    {
        uint _1490 = _1396 + 6u;
        float _1506 = (dot(vec3(cbLight._m0[_1396 + 2u].xyz), vec3(_222, _223, _224)) * 0.5) + 0.5;
        float _1507 = _1506 * _1506;
        float _3414 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
        float _1509 = isnan(1.0) ? _1412 : (isnan(_1412) ? 1.0 : min(_1412, 1.0));
        _1482 = (((cbLight._m0[_1490].x * 0.3183098733425140380859375) * _1508) * _1509) + _1463;
        _1484 = (((cbLight._m0[_1490].y * 0.3183098733425140380859375) * _1508) * _1509) + _1464;
        _1486 = (((cbLight._m0[_1490].z * 0.3183098733425140380859375) * _1508) * _1509) + _1465;
    }
    bool _1489 = _1469.y == 0u;
    float _1527;
    float _1529;
    float _1531;
    if (_1489)
    {
        _1527 = _1482;
        _1529 = _1484;
        _1531 = _1486;
    }
    else
    {
        uint _1632 = _1396 + 7u;
        float _1648 = (dot(vec3(cbLight._m0[_1396 + 3u].xyz), vec3(_222, _223, _224)) * 0.5) + 0.5;
        float _1649 = _1648 * _1648;
        float _3430 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1650 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
        float _1651 = isnan(1.0) ? _1413 : (isnan(_1413) ? 1.0 : min(_1413, 1.0));
        _1527 = (((cbLight._m0[_1632].x * 0.3183098733425140380859375) * _1650) * _1651) + _1482;
        _1529 = (((cbLight._m0[_1632].y * 0.3183098733425140380859375) * _1650) * _1651) + _1484;
        _1531 = (((cbLight._m0[_1632].z * 0.3183098733425140380859375) * _1650) * _1651) + _1486;
    }
    uint _1533 = _1396 + 8u;
    float _1539 = cbLight._m0[_1396].x + _304;
    float _1540 = cbLight._m0[_1396].y + _305;
    float _1541 = cbLight._m0[_1396].z + _306;
    float _1545 = inversesqrt(dot(vec3(_1539, _1540, _1541), vec3(_1539, _1540, _1541)));
    float _1549 = dot(vec3(_222, _223, _224), vec3(cbLight._m0[_1396].xyz));
    float _3446 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
    float _1552 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
    float _3457 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _1553 = isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0));
    float _1554 = dot(vec3(cbLight._m0[_1396].xyz), vec3(_1539 * _1545, _1540 * _1545, _1541 * _1545));
    float _3468 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
    float _1565 = (exp2(log2(1.0 - (isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1571 = (0.5 / ((_1552 + 9.9999999392252902907785028219223e-09) + _1553)) * _1552;
    float _3479 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
    float _1573 = (isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0))) * 0.31831014156341552734375;
    uint _1584 = _1396 + 9u;
    float _1590 = cbLight._m0[_1435].x + _304;
    float _1591 = cbLight._m0[_1435].y + _305;
    float _1592 = cbLight._m0[_1435].z + _306;
    float _1596 = inversesqrt(dot(vec3(_1590, _1591, _1592), vec3(_1590, _1591, _1592)));
    float _1600 = dot(vec3(_222, _223, _224), vec3(cbLight._m0[_1435].xyz));
    float _3490 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
    float _1603 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
    float _1604 = dot(vec3(cbLight._m0[_1435].xyz), vec3(_1590 * _1596, _1591 * _1596, _1592 * _1596));
    float _3501 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
    float _1613 = (exp2(log2(1.0 - (isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1617 = (0.5 / ((_1603 + 9.9999999392252902907785028219223e-09) + _1553)) * _1603;
    float _3512 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
    float _1619 = (isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0))) * 0.31831014156341552734375;
    float _1629 = (((_1613 * cbLight._m0[_1584].x) * _1619) * _1420) + (((_1565 * cbLight._m0[_1533].x) * _1573) * _1431);
    float _1630 = (((_1613 * cbLight._m0[_1584].y) * _1619) * _1420) + (((_1565 * cbLight._m0[_1533].y) * _1573) * _1431);
    float _1631 = (((_1613 * cbLight._m0[_1584].z) * _1619) * _1420) + (((_1565 * cbLight._m0[_1533].z) * _1573) * _1431);
    float _1693;
    float _1695;
    float _1697;
    if (_1471)
    {
        _1693 = _1629;
        _1695 = _1630;
        _1697 = _1631;
    }
    else
    {
        uint _1699 = _1396 + 10u;
        uint _1705 = _1396 + 2u;
        float _1711 = cbLight._m0[_1705].x + _304;
        float _1712 = cbLight._m0[_1705].y + _305;
        float _1713 = cbLight._m0[_1705].z + _306;
        float _1717 = inversesqrt(dot(vec3(_1711, _1712, _1713), vec3(_1711, _1712, _1713)));
        float _1721 = dot(vec3(_222, _223, _224), vec3(cbLight._m0[_1705].xyz));
        float _3523 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1724 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _1725 = dot(vec3(cbLight._m0[_1705].xyz), vec3(_1711 * _1717, _1712 * _1717, _1713 * _1717));
        float _3534 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1734 = (exp2(log2(1.0 - (isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1738 = (0.5 / ((_1724 + 9.9999999392252902907785028219223e-09) + _1553)) * _1724;
        float _3545 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1740 = (isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0))) * 0.31831014156341552734375;
        float _1741 = isnan(1.0) ? _1412 : (isnan(_1412) ? 1.0 : min(_1412, 1.0));
        _1693 = (((_1734 * cbLight._m0[_1699].x) * _1740) * _1741) + _1629;
        _1695 = (((_1734 * cbLight._m0[_1699].y) * _1740) * _1741) + _1630;
        _1697 = (((_1734 * cbLight._m0[_1699].z) * _1740) * _1741) + _1631;
    }
    float _1776;
    float _1778;
    float _1780;
    if (_1489)
    {
        _1776 = _1693;
        _1778 = _1695;
        _1780 = _1697;
    }
    else
    {
        uint _1787 = _1396 + 11u;
        uint _1793 = _1396 + 3u;
        float _1799 = cbLight._m0[_1793].x + _304;
        float _1800 = cbLight._m0[_1793].y + _305;
        float _1801 = cbLight._m0[_1793].z + _306;
        float _1805 = inversesqrt(dot(vec3(_1799, _1800, _1801), vec3(_1799, _1800, _1801)));
        float _1809 = dot(vec3(_222, _223, _224), vec3(cbLight._m0[_1793].xyz));
        float _3561 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
        float _1812 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _1813 = dot(vec3(cbLight._m0[_1793].xyz), vec3(_1799 * _1805, _1800 * _1805, _1801 * _1805));
        float _3572 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
        float _1822 = (exp2(log2(1.0 - (isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1826 = (0.5 / ((_1812 + 9.9999999392252902907785028219223e-09) + _1553)) * _1812;
        float _3583 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
        float _1828 = (isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0))) * 0.31831014156341552734375;
        float _1829 = isnan(1.0) ? _1413 : (isnan(_1413) ? 1.0 : min(_1413, 1.0));
        _1776 = (((_1822 * cbLight._m0[_1787].x) * _1828) * _1829) + _1693;
        _1778 = (((_1822 * cbLight._m0[_1787].y) * _1828) * _1829) + _1695;
        _1780 = (((_1822 * cbLight._m0[_1787].z) * _1828) * _1829) + _1697;
    }
    float _1964;
    float _1966;
    float _1968;
    float _1970;
    float _1972;
    float _1974;
    if (_1394.y == 0u)
    {
        float _1904 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1905 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1904;
        float _1906 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1904;
        float _1907 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1904;
        uvec4 _1919 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1920 = _1919.x;
        uint _1931 = uint((float(_1919.y) * floor(float(uint(cbSceneParam._m0[85u].y * _320) / _1920))) + floor(float(uint(cbSceneParam._m0[85u].x * _319) / _1920)));
        float _1941 = (log2(_1907 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1942 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
        uint _1945 = uint(isnan(14.0) ? _1942 : (isnan(_1942) ? 14.0 : min(_1942, 14.0)));
        uvec4 _1950 = texelFetch(g_lightClusterGridBuffer, int(((_1945 << 2u) + (_1931 << 6u)) >> 2u));
        uint _1951 = _1950.x;
        uint _1952 = _1919.z;
        float _2089;
        float _2091;
        float _2093;
        float _2095;
        float _2097;
        float _2099;
        if (((((1u << ((_1952 >> 4u) & 15u)) + 4294967295u) & _1951) == 0u) || ((_1952 & 240u) == 0u))
        {
            _2089 = 0.0;
            _2091 = 0.0;
            _2093 = 0.0;
            _2095 = 0.0;
            _2097 = 0.0;
            _2099 = 0.0;
        }
        else
        {
            float _2090;
            float _2092;
            float _2094;
            float _2096;
            float _2098;
            float _2100;
            float _2250 = 0.0;
            float _2251 = 0.0;
            float _2252 = 0.0;
            float _2253 = 0.0;
            float _2254 = 0.0;
            float _2255 = 0.0;
            uint _2256 = 0u;
            uint _2265;
            bool _2266;
            for (;;)
            {
                _2265 = texelFetch(g_lightClassification, int((((_1945 << 5u) + (_1931 << 9u)) + (_2256 << 2u)) >> 2u)).x;
                _2266 = _2265 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2266)
                {
                    frontier_phi_63_pred = _2250;
                    frontier_phi_63_pred_1 = _2255;
                    frontier_phi_63_pred_2 = _2254;
                    frontier_phi_63_pred_3 = _2253;
                    frontier_phi_63_pred_4 = _2252;
                    frontier_phi_63_pred_5 = _2251;
                }
                else
                {
                    float _2396;
                    float _2397;
                    float _2398;
                    float _2399;
                    float _2400;
                    float _2401;
                    uint _2402;
                    _2396 = _2250;
                    _2397 = _2251;
                    _2398 = _2252;
                    _2399 = _2253;
                    _2400 = _2254;
                    _2401 = _2255;
                    _2402 = _2265;
                    float _2322;
                    float _2323;
                    float _2324;
                    float _2325;
                    float _2326;
                    float _2327;
                    for (;;)
                    {
                        uint _2406 = uint(findLSB(_2402)) + (_2256 << 5u);
                        uint _2403 = (_2402 + 4294967295u) & _2402;
                        uint _2408 = _2406 * 48u;
                        vec4 _2422 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2408)).x, texelFetch(g_PointLightRenderingBuffer, int(_2408 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2408 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2408 + 3u)).x));
                        uint _2428 = (_2406 * 48u) + 4u;
                        vec4 _2441 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2428)).x, texelFetch(g_PointLightRenderingBuffer, int(_2428 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2428 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2428 + 3u)).x));
                        uint _2447 = (_2406 * 48u) + 8u;
                        vec3 _2458 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2447)).x, texelFetch(g_PointLightRenderingBuffer, int(_2447 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2447 + 2u)).x));
                        float _2462 = _2422.x - _1905;
                        float _2463 = _2422.y - _1906;
                        float _2464 = _2422.z - _1907;
                        float _2465 = dot(vec3(_2462, _2463, _2464), vec3(_2462, _2463, _2464));
                        float _2468 = inversesqrt(_2465);
                        float _2477 = 1.0 - (_2465 * _2422.w);
                        float _3609 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
                        float _2478 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
                        float _2479 = sqrt(_2465) * _2441.w;
                        float _2482 = 1.39999997615814208984375 / (_2479 + 1.39999997615814208984375);
                        float _2483 = _2482 * _2482;
                        float _2486 = ((1.0 - _2483) * dot(vec3(_341, _344, _347), vec3(_2468 * _2462, _2468 * _2463, _2468 * _2464))) + _2483;
                        float _2489 = _2479 * _2479;
                        float _2493 = ((isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0))) * _2478) / ((_2489 * 0.699999988079071044921875) + 1.0);
                        float _2497 = (-0.0) - _1905;
                        float _2498 = (-0.0) - _1906;
                        float _2499 = (-0.0) - _1907;
                        float _2503 = inversesqrt(dot(vec3(_2497, _2498, _2499), vec3(_2497, _2498, _2499)));
                        float _2507 = dot(vec3(_341, _344, _347), vec3(_2503 * _2497, _2503 * _2498, _2503 * _2499));
                        float _3625 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
                        float _3636 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
                        float _2511 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
                        float _2515 = (0.5 / (((isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0))) + 9.9999999392252902907785028219223e-09) + _2511)) * _2511;
                        float _3647 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
                        float _2524 = (((isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * 3.1415927410125732421875) / ((_2489 * 2.1991131305694580078125) + 3.141590118408203125)) * _2478;
                        _2325 = (_2493 * _2441.x) + _2399;
                        _2326 = (_2493 * _2441.y) + _2400;
                        _2327 = (_2493 * _2441.z) + _2401;
                        _2322 = (_2524 * _2458.x) + _2396;
                        _2323 = (_2524 * _2458.y) + _2397;
                        _2324 = (_2524 * _2458.z) + _2398;
                        if (_2403 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2396 = _2322;
                            _2397 = _2323;
                            _2398 = _2324;
                            _2399 = _2325;
                            _2400 = _2326;
                            _2401 = _2327;
                            _2402 = _2403;
                        }
                    }
                    frontier_phi_63_pred = _2322;
                    frontier_phi_63_pred_1 = _2327;
                    frontier_phi_63_pred_2 = _2326;
                    frontier_phi_63_pred_3 = _2325;
                    frontier_phi_63_pred_4 = _2324;
                    frontier_phi_63_pred_5 = _2323;
                }
                _2090 = frontier_phi_63_pred;
                _2100 = frontier_phi_63_pred_1;
                _2098 = frontier_phi_63_pred_2;
                _2096 = frontier_phi_63_pred_3;
                _2094 = frontier_phi_63_pred_4;
                _2092 = frontier_phi_63_pred_5;
                uint _2257 = _2256 + 1u;
                if (_2257 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2250 = _2090;
                    _2251 = _2092;
                    _2252 = _2094;
                    _2253 = _2096;
                    _2254 = _2098;
                    _2255 = _2100;
                    _2256 = _2257;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2089 = _2090;
            _2091 = _2092;
            _2093 = _2094;
            _2095 = _2096;
            _2097 = _2098;
            _2099 = _2100;
        }
        uvec4 _2103 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2104 = _2103.z;
        uint _2106 = (_2104 >> 8u) & 15u;
        float _2221;
        float _2223;
        float _2225;
        float _2227;
        float _2229;
        float _2231;
        if (((4294967295u << _2106) & _1951) == 0u)
        {
            _2221 = _2089;
            _2223 = _2091;
            _2225 = _2093;
            _2227 = _2095;
            _2229 = _2097;
            _2231 = _2099;
        }
        else
        {
            float _2246 = inversesqrt(dot(vec3(_1905, _1906, _1907), vec3(_1905, _1906, _1907)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2106 < ((_2104 >> 12u) & 15u))
            {
                float _2222;
                float _2224;
                float _2226;
                float _2228;
                float _2230;
                float _2232;
                float _2379 = _2089;
                float _2380 = _2091;
                float _2381 = _2093;
                float _2382 = _2095;
                float _2383 = _2097;
                float _2384 = _2099;
                uint _2385 = _2106;
                uint _2394;
                bool _2395;
                for (;;)
                {
                    _2394 = texelFetch(g_lightClassification, int((((_1945 << 5u) + (_1931 << 9u)) + (_2385 << 2u)) >> 2u)).x;
                    _2395 = _2394 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2395)
                    {
                        frontier_phi_74_pred = _2384;
                        frontier_phi_74_pred_1 = _2383;
                        frontier_phi_74_pred_2 = _2382;
                        frontier_phi_74_pred_3 = _2381;
                        frontier_phi_74_pred_4 = _2380;
                        frontier_phi_74_pred_5 = _2379;
                    }
                    else
                    {
                        float _2540;
                        float _2541;
                        float _2542;
                        float _2543;
                        float _2544;
                        float _2545;
                        float _2792;
                        float _2793;
                        float _2794;
                        float _2795;
                        float _2796;
                        float _2797;
                        float _2553 = _2379;
                        float _2554 = _2380;
                        float _2555 = _2381;
                        float _2556 = _2382;
                        float _2557 = _2383;
                        float _2558 = _2384;
                        uint _2559 = _2394;
                        uint _2560;
                        vec4 _2585;
                        float _2586;
                        vec4 _2601;
                        vec3 _2613;
                        vec4 _2629;
                        vec4 _2645;
                        float _2692;
                        bool _2693;
                        for (;;)
                        {
                            uint _2570 = ((_2385 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2559));
                            _2560 = (_2559 + 4294967295u) & _2559;
                            uint _2572 = _2570 * 40u;
                            _2585 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2572)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2572 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2572 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2572 + 3u)).x));
                            _2586 = _2585.w;
                            uint _2588 = (_2570 * 40u) + 4u;
                            _2601 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2588)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2588 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2588 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2588 + 3u)).x));
                            uint _2603 = (_2570 * 40u) + 8u;
                            _2613 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2603)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2603 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2603 + 2u)).x));
                            uint _2616 = (_2570 * 40u) + 16u;
                            _2629 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2616 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2616 + 3u)).x));
                            uint _2632 = (_2570 * 40u) + 20u;
                            _2645 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2632)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2632 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2632 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2632 + 3u)).x));
                            uint _2648 = (_2570 * 40u) + 24u;
                            vec4 _2661 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2648)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2648 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2648 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2648 + 3u)).x));
                            uint _2667 = (_2570 * 40u) + 28u;
                            vec4 _2680 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2667)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2667 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2667 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2667 + 3u)).x));
                            _2692 = fma(_1907, _2680.z, fma(_1906, _2680.y, _2680.x * _1905)) + _2680.w;
                            _2693 = !((fma(_1907, _2661.z, fma(_1906, _2661.y, _2661.x * _1905)) + _2661.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_2693)
                            {
                                float _2720 = _2585.x - _1905;
                                float _2721 = _2585.y - _1906;
                                float _2722 = _2585.z - _1907;
                                float _2723 = dot(vec3(_2720, _2721, _2722), vec3(_2720, _2721, _2722));
                                float _2726 = inversesqrt(_2723);
                                float _2727 = _2726 * _2720;
                                float _2728 = _2726 * _2721;
                                float _2729 = _2726 * _2722;
                                float _2733 = 1.0 - (_2723 / (_2586 * _2586));
                                float _3658 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
                                float _2734 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
                                float _2738 = sqrt(_2723) * _2601.w;
                                float _2740 = 1.39999997615814208984375 / (_2738 + 1.39999997615814208984375);
                                float _2741 = _2740 * _2740;
                                float _2742 = 1.0 - _2741;
                                float _2744 = (_2742 * dot(vec3(_2727, _2728, _2729), vec3(_341, _344, _347))) + _2741;
                                float _2747 = _2738 * _2738;
                                float _2751 = (fma(_1907, _2629.z, fma(_1906, _2629.y, _2629.x * _1905)) + _2629.w) / _2692;
                                float _2752 = (fma(_1907, _2645.z, fma(_1906, _2645.y, _2645.x * _1905)) + _2645.w) / _2692;
                                float _2756 = 1.0 - dot(vec2(_2751, _2752), vec2(_2751, _2752));
                                float _3674 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
                                float _2757 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
                                float _2758 = _2757 * (((isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0))) * _2734) / ((_2747 * 0.699999988079071044921875) + 1.0));
                                float _2768 = dot(vec3(_341, _344, _347), vec3((-0.0) - (_1905 * _2246), (-0.0) - (_1906 * _2246), (-0.0) - (_1907 * _2246)));
                                float _3685 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
                                float _2776 = (_2742 * dot(vec3(_341, _344, _347), vec3(_2727, _2728, _2729))) + _2741;
                                float _3696 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
                                float _2777 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
                                float _2781 = (0.5 / (((isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))) + 9.9999999392252902907785028219223e-09) + _2777)) * _2777;
                                float _3707 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
                                float _2788 = (_2757 * _2734) * (((isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))) * 3.1415927410125732421875) / ((_2747 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_80_pred = _2758 * _2601.y;
                                frontier_phi_80_pred_1 = _2758 * _2601.x;
                                frontier_phi_80_pred_2 = _2788 * _2613.z;
                                frontier_phi_80_pred_3 = _2788 * _2613.y;
                                frontier_phi_80_pred_4 = _2788 * _2613.x;
                                frontier_phi_80_pred_5 = _2758 * _2601.z;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _2796 = frontier_phi_80_pred;
                            _2795 = frontier_phi_80_pred_1;
                            _2794 = frontier_phi_80_pred_2;
                            _2793 = frontier_phi_80_pred_3;
                            _2792 = frontier_phi_80_pred_4;
                            _2797 = frontier_phi_80_pred_5;
                            _2543 = _2795 + _2556;
                            _2544 = _2796 + _2557;
                            _2545 = _2797 + _2558;
                            _2540 = _2792 + _2553;
                            _2541 = _2793 + _2554;
                            _2542 = _2794 + _2555;
                            if (_2560 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2553 = _2540;
                                _2554 = _2541;
                                _2555 = _2542;
                                _2556 = _2543;
                                _2557 = _2544;
                                _2558 = _2545;
                                _2559 = _2560;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _2545;
                        frontier_phi_74_pred_1 = _2544;
                        frontier_phi_74_pred_2 = _2543;
                        frontier_phi_74_pred_3 = _2542;
                        frontier_phi_74_pred_4 = _2541;
                        frontier_phi_74_pred_5 = _2540;
                    }
                    _2232 = frontier_phi_74_pred;
                    _2230 = frontier_phi_74_pred_1;
                    _2228 = frontier_phi_74_pred_2;
                    _2226 = frontier_phi_74_pred_3;
                    _2224 = frontier_phi_74_pred_4;
                    _2222 = frontier_phi_74_pred_5;
                    uint _2386 = _2385 + 1u;
                    if (_2386 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2379 = _2222;
                        _2380 = _2224;
                        _2381 = _2226;
                        _2382 = _2228;
                        _2383 = _2230;
                        _2384 = _2232;
                        _2385 = _2386;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2226;
                frontier_phi_55_56_ladder_1 = _2232;
                frontier_phi_55_56_ladder_2 = _2230;
                frontier_phi_55_56_ladder_3 = _2228;
                frontier_phi_55_56_ladder_4 = _2224;
                frontier_phi_55_56_ladder_5 = _2222;
            }
            else
            {
                frontier_phi_55_56_ladder = _2093;
                frontier_phi_55_56_ladder_1 = _2099;
                frontier_phi_55_56_ladder_2 = _2097;
                frontier_phi_55_56_ladder_3 = _2095;
                frontier_phi_55_56_ladder_4 = _2091;
                frontier_phi_55_56_ladder_5 = _2089;
            }
            _2221 = frontier_phi_55_56_ladder_5;
            _2223 = frontier_phi_55_56_ladder_4;
            _2225 = frontier_phi_55_56_ladder;
            _2227 = frontier_phi_55_56_ladder_3;
            _2229 = frontier_phi_55_56_ladder_2;
            _2231 = frontier_phi_55_56_ladder_1;
        }
        float _2236 = isnan(1.0) ? _385 : (isnan(_385) ? 1.0 : min(_385, 1.0));
        _1964 = (_2236 * _2227) + _1527;
        _1966 = (_2236 * _2229) + _1529;
        _1968 = (_2236 * _2231) + _1531;
        _1970 = ((_2221 * 0.039999999105930328369140625) * _2236) + _1776;
        _1972 = ((_2223 * 0.039999999105930328369140625) * _2236) + _1778;
        _1974 = ((_2225 * 0.039999999105930328369140625) * _2236) + _1780;
    }
    else
    {
        _1964 = _1527;
        _1966 = _1529;
        _1968 = _1531;
        _1970 = _1776;
        _1972 = _1778;
        _1974 = _1780;
    }
    uint _1980 = _361 + uint(cbMatDynParam._m0[0u].w);
    float _1988 = ((_207.x * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].x) * cbInstanceData._m0[_1980].x;
    float _1991 = ((_207.y * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].y) * cbInstanceData._m0[_1980].y;
    float _1994 = ((_207.z * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].z) * cbInstanceData._m0[_1980].z;
    float _3723 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _3734 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _3745 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _3756 = isnan(0.0) ? _226 : (isnan(_226) ? 0.0 : max(_226, 0.0));
    float _2012 = (((isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * (_1964 + ((isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0))) * _385))) + ((_1970 + ((isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0))) * _1164)) * cbPerFrame._m0[3u].x)) + _1988;
    float _2014 = (_1991 + ((_1972 + ((isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0))) * _1164)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * (_1966 + ((isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0))) * _385)));
    float _2016 = (_1994 + ((_1974 + ((isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0))) * _1164)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) * (_1968 + ((isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0))) * _385)));
    float _2017 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2018 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2019 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2025 = cbMtdParam._m0[2u].x * _1988;
    float _2026 = cbMtdParam._m0[2u].y * _1991;
    float _2027 = cbMtdParam._m0[2u].z * _1994;
    float _3782 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2029 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
    float _2034 = cbInstanceData._m0[_360 + 6u].w * (isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0)));
    float _2039 = _319 / cbSceneParam._m0[86u].x;
    float _2040 = _320 / cbSceneParam._m0[86u].y;
    vec4 _2054 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2039, _2040, (log2((isnan(cbSceneParam._m0[77u].w) ? _245 : (isnan(_245) ? cbSceneParam._m0[77u].w : min(_245, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2056 = _2054.x;
    float _2057 = _2054.y;
    float _2058 = _2054.z;
    float _2059 = _2054.w;
    float _2152;
    float _2154;
    float _2156;
    float _2158;
    if (_245 > cbSceneParam._m0[78u].w)
    {
        float _2114 = isnan(_245) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _245 : min(cbSceneParam._m0[80u].w, _245));
        float _2115 = _2114 / _245;
        float _2126 = _2115 * _297;
        float _2127 = _298 * _2115;
        float _2128 = (-0.0) - _2127;
        float _2130 = _2115 * _299;
        float _2132 = (cbSceneParam._m0[77u].w * _2128) / _2114;
        float _2133 = _2132 + cbSceneParam._m0[79u].w;
        float _2134 = cbSceneParam._m0[79u].w - _2127;
        float _2140 = sqrt(((_2126 * _2126) + (_2127 * _2127)) + (_2130 * _2130));
        float _2143 = (1.0 - (cbSceneParam._m0[77u].w / _2114)) * _2140;
        float _2148 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2150 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2335;
        if (abs((_2128 - _2132) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2335 = ((((_2133 > 0.0) ? exp2(_2148 * _2133) : (2.0 - exp2(_2150 * _2133))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2143;
        }
        else
        {
            float _2279 = 1.0 / cbSceneParam._m0[80u].x;
            float _2280 = isnan(_2134) ? _2133 : (isnan(_2133) ? _2134 : max(_2133, _2134));
            float _2281 = isnan(_2134) ? _2133 : (isnan(_2133) ? _2134 : min(_2133, _2134));
            float _2290 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : min(_2280, 0.0));
            float _2291 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : min(_2281, 0.0));
            _2335 = ((abs(_2140 / _2128) * cbSceneParam._m0[80u].y) * ((((_2290 - _2291) * 2.0) - ((exp2(_2148 * (isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0)))) - exp2(_2148 * (isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0))))) * _2279)) - ((exp2(_2150 * _2290) - exp2(_2150 * _2291)) * _2279))) + (_2143 * cbSceneParam._m0[80u].z);
        }
        vec4 _2337 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2039, _2040, 1.0), 0.0);
        float _2346 = exp2((_2335 * (-1.44269502162933349609375)) * (1.0 - _2337.w));
        float _2347 = log2(_2346);
        float _2363 = log2(_2059);
        _2152 = (exp2(_2363 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2347 * cbSceneParam._m0[78u].x)) * _2337.x) / cbSceneParam._m0[78u].x)) + _2056;
        _2154 = (exp2(_2363 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2347 * cbSceneParam._m0[78u].y)) * _2337.y) / cbSceneParam._m0[78u].y)) + _2057;
        _2156 = (exp2(_2363 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2347 * cbSceneParam._m0[78u].z)) * _2337.z) / cbSceneParam._m0[78u].z)) + _2058;
        _2158 = _2346 * _2059;
    }
    else
    {
        _2152 = _2056;
        _2154 = _2057;
        _2156 = _2058;
        _2158 = _2059;
    }
    bool _2373;
    vec4 _2168;
    vec4 _2191;
    float _2193;
    float _2197;
    float _2198;
    float _2199;
    float _2202;
    float _2205;
    float _2208;
    float _2209;
    bool _2220;
    for (;;)
    {
        _2168 = cbMatDynParam._m0[0u];
        float _2170 = roundEven(_2168.y);
        bool _2171 = _2170 == 3.0;
        float _2173 = log2(_2158);
        float _2177 = exp2(_2173 * cbSceneParam._m0[78u].x);
        float _2178 = exp2(_2173 * cbSceneParam._m0[78u].y);
        float _2179 = exp2(_2173 * cbSceneParam._m0[78u].z);
        float _2180 = _2177 * _2017;
        float _2181 = _2178 * _2018;
        float _2182 = _2179 * _2019;
        float _2189 = _313 + (-0.5);
        _2191 = cbMtdParam._m0[1u];
        _2193 = _2191.y * _2189;
        float _2196 = (_2170 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2197 = _2196 * (_2171 ? _2180 : (_2180 + (cbSceneParam._m0[72u].w * _2152)));
        _2198 = _2196 * (_2171 ? _2181 : (_2181 + (cbSceneParam._m0[72u].w * _2154)));
        _2199 = _2196 * (_2171 ? _2182 : (_2182 + (cbSceneParam._m0[72u].w * _2156)));
        _2202 = ((_2025 * _2029) * _2177) * _2196;
        _2205 = ((_2026 * _2029) * _2178) * _2196;
        _2208 = ((_2027 * _2029) * _2179) * _2196;
        _2209 = _2189 * 0.999000012874603271484375;
        _2220 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2220)
        {
            if ((cbInstanceData._m0[_360 + 7u].x + _2209) < 0.5)
            {
                _2373 = true;
                break;
            }
        }
        uint _2314 = _361 + uint(_2168.w);
        if ((cbInstanceData._m0[_2314].w < 1.0) && ((cbInstanceData._m0[_2314].w + _2209) < 0.5))
        {
            _2373 = true;
            break;
        }
        if ((_2193 + _190) < _2191.x)
        {
            _2373 = true;
            break;
        }
        _2373 = false;
        break;
    }
    float _2531;
    if (_2373)
    {
        discard_state = true;
        _2531 = 0.0;
    }
    else
    {
        _2531 = _2034;
    }
    SV_Target.x = _2197;
    SV_Target.y = _2198;
    SV_Target.z = _2199;
    SV_Target.w = _2531;
    SV_Target_1.x = _2202;
    SV_Target_1.y = _2205;
    SV_Target_1.z = _2208;
    SV_Target_1.w = _2034;
    discard_exit();
}


