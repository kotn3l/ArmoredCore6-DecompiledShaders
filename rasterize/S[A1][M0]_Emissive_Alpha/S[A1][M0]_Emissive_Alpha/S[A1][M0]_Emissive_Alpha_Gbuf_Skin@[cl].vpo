#version 460

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uvec4 BLENDINDICES;
layout(location = 4) in vec4 BLENDWEIGHT;
layout(location = 5) in vec4 COLOR_1;
layout(location = 6) in ivec2 TEXCOORD;
layout(location = 1) out vec4 NORMAL_1;
layout(location = 2) out vec4 TANGENT_1;
layout(location = 3) out vec4 TEXCOORD_1;

void main()
{
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_1.x = 0.0;
    TEXCOORD_1.y = 0.0;
    TEXCOORD_1.z = 0.0;
    TEXCOORD_1.w = 0.0;
    float _155 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _157 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _158 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _167 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _168 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _169 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _179 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + (uint(gl_InstanceIndex) - uint(gl_BaseInstance));
    uvec4 _181 = texelFetch(g_InstanceIndexBuffer, int(_179));
    uint _182 = _181.x;
    precise float _183 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
    float _188 = isnan(_183) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _183 : max(0.001000000047497451305389404296875, _183));
    precise float _190 = BLENDWEIGHT.x / _188;
    precise float _191 = BLENDWEIGHT.y / _188;
    precise float _192 = BLENDWEIGHT.z / _188;
    precise float _193 = BLENDWEIGHT.w / _188;
    uvec4 _200 = floatBitsToUint(cbInstanceData._m0[(_182 * 13u) + 4u]);
    uint _201 = _200.x;
    uint _203 = (_201 + uint(float(BLENDINDICES.x))) * 3u;
    uint _210 = _203 + 1u;
    uint _217 = _203 + 2u;
    precise float _224 = _190 * cbObjMatrix._m0[_203].x;
    precise float _225 = _190 * cbObjMatrix._m0[_210].x;
    precise float _226 = _190 * cbObjMatrix._m0[_217].x;
    precise float _227 = _190 * cbObjMatrix._m0[_203].y;
    precise float _228 = _190 * cbObjMatrix._m0[_210].y;
    precise float _229 = _190 * cbObjMatrix._m0[_217].y;
    precise float _230 = _190 * cbObjMatrix._m0[_203].z;
    precise float _231 = _190 * cbObjMatrix._m0[_210].z;
    precise float _232 = _190 * cbObjMatrix._m0[_217].z;
    precise float _233 = _190 * cbObjMatrix._m0[_203].w;
    precise float _234 = _190 * cbObjMatrix._m0[_210].w;
    precise float _235 = _190 * cbObjMatrix._m0[_217].w;
    uint _238 = (_201 + uint(float(BLENDINDICES.y))) * 3u;
    uint _245 = _238 + 1u;
    uint _252 = _238 + 2u;
    precise float _259 = _191 * cbObjMatrix._m0[_238].x;
    precise float _260 = _191 * cbObjMatrix._m0[_245].x;
    precise float _261 = _191 * cbObjMatrix._m0[_252].x;
    precise float _262 = _191 * cbObjMatrix._m0[_238].y;
    precise float _263 = _191 * cbObjMatrix._m0[_245].y;
    precise float _264 = _191 * cbObjMatrix._m0[_252].y;
    precise float _265 = _191 * cbObjMatrix._m0[_238].z;
    precise float _266 = _191 * cbObjMatrix._m0[_245].z;
    precise float _267 = _191 * cbObjMatrix._m0[_252].z;
    precise float _268 = _191 * cbObjMatrix._m0[_238].w;
    precise float _269 = _191 * cbObjMatrix._m0[_245].w;
    precise float _270 = _191 * cbObjMatrix._m0[_252].w;
    precise float _271 = _224 + _259;
    precise float _272 = _225 + _260;
    precise float _273 = _226 + _261;
    precise float _274 = _227 + _262;
    precise float _275 = _228 + _263;
    precise float _276 = _229 + _264;
    precise float _277 = _230 + _265;
    precise float _278 = _231 + _266;
    precise float _279 = _232 + _267;
    precise float _280 = _233 + _268;
    precise float _281 = _234 + _269;
    precise float _282 = _235 + _270;
    uint _285 = (_201 + uint(float(BLENDINDICES.z))) * 3u;
    uint _292 = _285 + 1u;
    uint _299 = _285 + 2u;
    precise float _306 = _192 * cbObjMatrix._m0[_285].x;
    precise float _307 = _192 * cbObjMatrix._m0[_292].x;
    precise float _308 = _192 * cbObjMatrix._m0[_299].x;
    precise float _309 = _192 * cbObjMatrix._m0[_285].y;
    precise float _310 = _192 * cbObjMatrix._m0[_292].y;
    precise float _311 = _192 * cbObjMatrix._m0[_299].y;
    precise float _312 = _192 * cbObjMatrix._m0[_285].z;
    precise float _313 = _192 * cbObjMatrix._m0[_292].z;
    precise float _314 = _192 * cbObjMatrix._m0[_299].z;
    precise float _315 = _192 * cbObjMatrix._m0[_285].w;
    precise float _316 = _192 * cbObjMatrix._m0[_292].w;
    precise float _317 = _192 * cbObjMatrix._m0[_299].w;
    precise float _318 = _271 + _306;
    precise float _319 = _272 + _307;
    precise float _320 = _273 + _308;
    precise float _321 = _274 + _309;
    precise float _322 = _275 + _310;
    precise float _323 = _276 + _311;
    precise float _324 = _277 + _312;
    precise float _325 = _278 + _313;
    precise float _326 = _279 + _314;
    precise float _327 = _280 + _315;
    precise float _328 = _281 + _316;
    precise float _329 = _282 + _317;
    uint _332 = (_201 + uint(float(BLENDINDICES.w))) * 3u;
    uint _339 = _332 + 1u;
    uint _346 = _332 + 2u;
    precise float _353 = _193 * cbObjMatrix._m0[_332].x;
    precise float _354 = _193 * cbObjMatrix._m0[_339].x;
    precise float _355 = _193 * cbObjMatrix._m0[_346].x;
    precise float _356 = _193 * cbObjMatrix._m0[_332].y;
    precise float _357 = _193 * cbObjMatrix._m0[_339].y;
    precise float _358 = _193 * cbObjMatrix._m0[_346].y;
    precise float _359 = _193 * cbObjMatrix._m0[_332].z;
    precise float _360 = _193 * cbObjMatrix._m0[_339].z;
    precise float _361 = _193 * cbObjMatrix._m0[_346].z;
    precise float _362 = _193 * cbObjMatrix._m0[_332].w;
    precise float _363 = _193 * cbObjMatrix._m0[_339].w;
    precise float _364 = _193 * cbObjMatrix._m0[_346].w;
    precise float _365 = _318 + _353;
    precise float _366 = _319 + _354;
    precise float _367 = _320 + _355;
    precise float _368 = _321 + _356;
    precise float _369 = _322 + _357;
    precise float _370 = _323 + _358;
    precise float _371 = _324 + _359;
    precise float _372 = _325 + _360;
    precise float _373 = _326 + _361;
    precise float _374 = _327 + _362;
    precise float _375 = _328 + _363;
    precise float _376 = _329 + _364;
    precise float _377 = POSITION.x * _365;
    precise float _378 = POSITION.y * _368;
    precise float _379 = _378 + _377;
    precise float _380 = POSITION.z * _371;
    precise float _381 = _380 + _379;
    precise float _382 = 1.0 * _374;
    precise float _383 = _382 + _381;
    precise float _384 = POSITION.x * _366;
    precise float _385 = POSITION.y * _369;
    precise float _386 = _385 + _384;
    precise float _387 = POSITION.z * _372;
    precise float _388 = _387 + _386;
    precise float _389 = 1.0 * _375;
    precise float _390 = _389 + _388;
    precise float _391 = POSITION.x * _367;
    precise float _392 = POSITION.y * _370;
    precise float _393 = _392 + _391;
    precise float _394 = POSITION.z * _373;
    precise float _395 = _394 + _393;
    precise float _396 = 1.0 * _376;
    precise float _397 = _396 + _395;
    precise float _422 = _383 - cbSceneParam._m0[3u].x;
    precise float _423 = _390 - cbSceneParam._m0[3u].y;
    precise float _424 = _397 - cbSceneParam._m0[3u].z;
    precise float _452 = _422 * cbSceneParam._m0[24u].x;
    precise float _453 = _423 * cbSceneParam._m0[24u].y;
    precise float _454 = _453 + _452;
    precise float _455 = _424 * cbSceneParam._m0[24u].z;
    precise float _456 = _455 + _454;
    precise float _457 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _458 = _457 + _456;
    precise float _459 = _422 * cbSceneParam._m0[25u].x;
    precise float _460 = _423 * cbSceneParam._m0[25u].y;
    precise float _461 = _460 + _459;
    precise float _462 = _424 * cbSceneParam._m0[25u].z;
    precise float _463 = _462 + _461;
    precise float _464 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _465 = _464 + _463;
    precise float _466 = _422 * cbSceneParam._m0[26u].x;
    precise float _467 = _423 * cbSceneParam._m0[26u].y;
    precise float _468 = _467 + _466;
    precise float _469 = _424 * cbSceneParam._m0[26u].z;
    precise float _470 = _469 + _468;
    precise float _471 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _472 = _471 + _470;
    precise float _473 = _422 * cbSceneParam._m0[27u].x;
    precise float _474 = _423 * cbSceneParam._m0[27u].y;
    precise float _475 = _474 + _473;
    precise float _476 = _424 * cbSceneParam._m0[27u].z;
    precise float _477 = _476 + _475;
    precise float _478 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _479 = _478 + _477;
    gl_Position.x = _458;
    gl_Position.y = _465;
    gl_Position.z = _472;
    gl_Position.w = _479;
    NORMAL_1.x = fma(_158, _371, fma(_157, _368, _365 * _155));
    NORMAL_1.y = fma(_158, _372, fma(_157, _369, _366 * _155));
    NORMAL_1.z = fma(_158, _373, fma(_157, _370, _367 * _155));
    NORMAL_1.w = float(_182);
    TANGENT_1.x = fma(_169, _371, fma(_168, _368, _365 * _167));
    TANGENT_1.y = fma(_169, _372, fma(_168, _369, _366 * _167));
    TANGENT_1.z = fma(_169, _373, fma(_168, _370, _367 * _167));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_1.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_1.z = COLOR_1.w;
    TEXCOORD_1.w = COLOR_1.x;
}


