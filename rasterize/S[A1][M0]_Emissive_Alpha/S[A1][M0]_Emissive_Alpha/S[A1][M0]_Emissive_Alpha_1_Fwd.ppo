#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A1_M0_Emissive_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_A1_M0_Emissive_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _718;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _160 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _161 = _160 * NORMAL.x;
    float _162 = _160 * NORMAL.y;
    float _163 = _160 * NORMAL.z;
    vec4 _183 = texture(sampler2D(S_A1_M0_Emissive_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _187 = _183.w * TEXCOORD_1.z;
    vec4 _203 = texture(sampler2D(S_A1_M0_Emissive_Alpha_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _217 = inversesqrt(dot(vec3(_161, _162, _163), vec3(_161, _162, _163)));
    float _218 = _217 * _161;
    float _219 = _217 * _162;
    float _220 = _217 * _163;
    float _2873 = isnan(0.0) ? _187 : (isnan(_187) ? 0.0 : max(_187, 0.0));
    float _222 = isnan(1.0) ? _2873 : (isnan(_2873) ? 1.0 : min(_2873, 1.0));
    float _2884 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _2895 = isnan(0.0) ? cbMtdParam._m0[10u].y : (isnan(cbMtdParam._m0[10u].y) ? 0.0 : max(cbMtdParam._m0[10u].y, 0.0));
    float _2906 = isnan(0.0) ? cbMtdParam._m0[10u].z : (isnan(cbMtdParam._m0[10u].z) ? 0.0 : max(cbMtdParam._m0[10u].z, 0.0));
    float _241 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _283 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _293 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _283);
    float _294 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _283);
    float _295 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _283);
    float _299 = inversesqrt(dot(vec3(_293, _294, _295), vec3(_293, _294, _295)));
    float _300 = _293 * _299;
    float _301 = _294 * _299;
    float _302 = _295 * _299;
    float _308 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _309 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _330 = fma(_220, cbSceneParam._m0[5u].z, fma(_219, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _218));
    float _333 = fma(_220, cbSceneParam._m0[6u].z, fma(_219, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _218));
    float _336 = fma(_220, cbSceneParam._m0[7u].z, fma(_219, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _218));
    uint _349 = uint(roundEven(NORMAL.w)) * 13u;
    uint _350 = _349 + 9u;
    uint _351 = _350 + uint(cbMatDynParam._m0[0u].w);
    float _357 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2884 : (isnan(_2884) ? 1.0 : min(_2884, 1.0)))) * cbInstanceData._m0[_351].x;
    float _358 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2895 : (isnan(_2895) ? 1.0 : min(_2895, 1.0)))) * cbInstanceData._m0[_351].y;
    float _359 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2906 : (isnan(_2906) ? 1.0 : min(_2906, 1.0)))) * cbInstanceData._m0[_351].z;
    float _2917 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _360 = isnan(1.0) ? _2917 : (isnan(_2917) ? 1.0 : min(_2917, 1.0));
    float _2928 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _361 = isnan(1.0) ? _2928 : (isnan(_2928) ? 1.0 : min(_2928, 1.0));
    float _2939 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _362 = isnan(1.0) ? _2939 : (isnan(_2939) ? 1.0 : min(_2939, 1.0));
    vec4 _371 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _308, cbSceneParam._m0[86u].y * _309));
    float _374 = _371.x * TEXCOORD_1.w;
    float _375 = dot(vec3(_218, _219, _220), vec3(_300, _301, _302));
    float _378 = _375 * 2.0;
    float _383 = (_378 * _218) - _300;
    float _384 = (_378 * _219) - _301;
    float _385 = (_378 * _220) - _302;
    float _407 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _411 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _415 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _717;
    float _719;
    float _720;
    float _721;
    float _722;
    float _723;
    float _724;
    float _725;
    float _726;
    float _727;
    float _728;
    float _729;
    float _730;
    float _731;
    float _732;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _442 = fma(_415, cbModelParam._m0[26u].z, fma(_411, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _407));
        float _446 = fma(_415, cbModelParam._m0[27u].z, fma(_411, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _407));
        float _450 = fma(_415, cbModelParam._m0[28u].z, fma(_411, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _407));
        float _475 = _407 + _218;
        float _476 = _411 + _219;
        float _477 = _415 + _220;
        float _487 = fma(_477, cbModelParam._m0[26u].z, fma(_476, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _475)) - _442;
        float _488 = fma(_477, cbModelParam._m0[27u].z, fma(_476, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _475)) - _446;
        float _489 = fma(_477, cbModelParam._m0[28u].z, fma(_476, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _475)) - _450;
        float _493 = inversesqrt(dot(vec3(_487, _488, _489), vec3(_487, _488, _489)));
        float _506 = ((_493 * _487) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_442 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _507 = ((_493 * _488) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_446 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _508 = ((_493 * _489) / cbModelParam._m0[34u].z) + ((((((_450 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _511 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_506, _507, _508), 0.0);
        vec4 _518 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_506, _507, _508), 0.0);
        vec4 _525 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_506, _507, _508), 0.0);
        vec4 _532 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_506, _507, _508), 0.0);
        float _545 = exp2((_511.w + (-0.5)) * 20.0) * 2.0;
        float _546 = _545 * (_511.x + (-0.5));
        float _547 = _545 * (_511.y + (-0.5));
        float _548 = _545 * (_511.z + (-0.5));
        float _555 = exp2((_518.w + (-0.5)) * 20.0) * 2.0;
        float _556 = _555 * (_518.x + (-0.5));
        float _557 = _555 * (_518.y + (-0.5));
        float _558 = _555 * (_518.z + (-0.5));
        float _565 = exp2((_525.w + (-0.5)) * 20.0) * 2.0;
        float _566 = _565 * (_525.x + (-0.5));
        float _567 = _565 * (_525.y + (-0.5));
        float _568 = _565 * (_525.z + (-0.5));
        float _575 = exp2((_532.w + (-0.5)) * 20.0) * 2.0;
        float _576 = _575 * (_532.x + (-0.5));
        float _577 = _575 * (_532.y + (-0.5));
        float _578 = _575 * (_532.z + (-0.5));
        float _579 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
        float _580 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
        float _581 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
        float _582 = _546 * 0.5;
        float _583 = _556 * 0.5;
        float _584 = _566 * 0.5;
        float _585 = dot(vec3(_582, _583, _584), vec3(_582, _583, _584));
        float _590 = (_585 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_585);
        float _599 = (dot(vec3(_218, _219, _220), vec3(_590 * _582, _590 * _583, _590 * _584)) + 1.0) * 0.5;
        float _2965 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
        float _609 = sqrt(((_583 * _583) + (_582 * _582)) + (_584 * _584)) / (_579 + 9.9999997473787516355514526367188e-06);
        float _2976 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
        float _610 = isnan(1.0) ? _2976 : (isnan(_2976) ? 1.0 : min(_2976, 1.0));
        float _611 = _610 * 2.0;
        float _615 = (1.0 - _610) / (_610 + 1.0);
        float _2987 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
        float _616 = isnan(1.0) ? _2987 : (isnan(_2987) ? 1.0 : min(_2987, 1.0));
        float _625 = ((((1.0 - _616) * (_611 + 2.0)) * exp2(log2(isnan(1.0) ? _2965 : (isnan(_2965) ? 1.0 : min(_2965, 1.0))) * (_611 + 1.0))) + _616) * _579;
        float _626 = _547 * 0.5;
        float _627 = _557 * 0.5;
        float _628 = _567 * 0.5;
        float _629 = dot(vec3(_626, _627, _628), vec3(_626, _627, _628));
        float _634 = (_629 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_629);
        float _642 = (dot(vec3(_218, _219, _220), vec3(_634 * _626, _634 * _627, _634 * _628)) + 1.0) * 0.5;
        float _2998 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
        float _651 = sqrt(((_627 * _627) + (_626 * _626)) + (_628 * _628)) / (_580 + 9.9999997473787516355514526367188e-06);
        float _3009 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
        float _652 = isnan(1.0) ? _3009 : (isnan(_3009) ? 1.0 : min(_3009, 1.0));
        float _653 = _652 * 2.0;
        float _657 = (1.0 - _652) / (_652 + 1.0);
        float _3020 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
        float _658 = isnan(1.0) ? _3020 : (isnan(_3020) ? 1.0 : min(_3020, 1.0));
        float _667 = ((((1.0 - _658) * (_653 + 2.0)) * exp2(log2(isnan(1.0) ? _2998 : (isnan(_2998) ? 1.0 : min(_2998, 1.0))) * (_653 + 1.0))) + _658) * _580;
        float _668 = _548 * 0.5;
        float _669 = _558 * 0.5;
        float _670 = _568 * 0.5;
        float _671 = dot(vec3(_668, _669, _670), vec3(_668, _669, _670));
        float _676 = (_671 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_671);
        float _684 = (dot(vec3(_218, _219, _220), vec3(_676 * _668, _676 * _669, _676 * _670)) + 1.0) * 0.5;
        float _3031 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
        float _693 = sqrt(((_669 * _669) + (_668 * _668)) + (_670 * _670)) / (_581 + 9.9999997473787516355514526367188e-06);
        float _3042 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
        float _694 = isnan(1.0) ? _3042 : (isnan(_3042) ? 1.0 : min(_3042, 1.0));
        float _695 = _694 * 2.0;
        float _699 = (1.0 - _694) / (_694 + 1.0);
        float _3053 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
        float _700 = isnan(1.0) ? _3053 : (isnan(_3053) ? 1.0 : min(_3053, 1.0));
        float _709 = ((((1.0 - _700) * (_695 + 2.0)) * exp2(log2(isnan(1.0) ? _3031 : (isnan(_3031) ? 1.0 : min(_3031, 1.0))) * (_695 + 1.0))) + _700) * _581;
        _717 = _548;
        _719 = _547;
        _720 = _546;
        _721 = _558;
        _722 = _557;
        _723 = _556;
        _724 = _568;
        _725 = _567;
        _726 = _566;
        _727 = _581;
        _728 = _580;
        _729 = _579;
        _730 = cbModelParam._m0[36u].z * (isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0)));
        _731 = cbModelParam._m0[36u].z * (isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0)));
        _732 = cbModelParam._m0[36u].z * (isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0)));
    }
    else
    {
        _717 = _718;
        _719 = _718;
        _720 = _718;
        _721 = _718;
        _722 = _718;
        _723 = _718;
        _724 = _718;
        _725 = _718;
        _726 = _718;
        _727 = _718;
        _728 = _718;
        _729 = _718;
        _730 = 0.0;
        _731 = 0.0;
        _732 = 0.0;
    }
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _758 = fma(_415, cbModelParam._m0[30u].z, fma(_411, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _407));
        float _762 = fma(_415, cbModelParam._m0[31u].z, fma(_411, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _407));
        float _766 = fma(_415, cbModelParam._m0[32u].z, fma(_411, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _407));
        float _789 = _407 + _218;
        float _790 = _411 + _219;
        float _791 = _415 + _220;
        float _801 = fma(_791, cbModelParam._m0[30u].z, fma(_790, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _789)) - _758;
        float _802 = fma(_791, cbModelParam._m0[31u].z, fma(_790, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _789)) - _762;
        float _803 = fma(_791, cbModelParam._m0[32u].z, fma(_790, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _789)) - _766;
        float _807 = inversesqrt(dot(vec3(_801, _802, _803), vec3(_801, _802, _803)));
        float _820 = ((_807 * _801) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_758 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _821 = ((_807 * _802) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_762 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _822 = ((_807 * _803) / cbModelParam._m0[35u].z) + ((((((_766 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _824 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_820, _821, _822), 0.0);
        vec4 _831 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_820, _821, _822), 0.0);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_820, _821, _822), 0.0);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_820, _821, _822), 0.0);
        float _857 = exp2((_824.w + (-0.5)) * 20.0) * 2.0;
        float _858 = _857 * (_824.x + (-0.5));
        float _859 = _857 * (_824.y + (-0.5));
        float _860 = _857 * (_824.z + (-0.5));
        float _867 = exp2((_831.w + (-0.5)) * 20.0) * 2.0;
        float _868 = _867 * (_831.x + (-0.5));
        float _869 = _867 * (_831.y + (-0.5));
        float _870 = _867 * (_831.z + (-0.5));
        float _877 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _878 = _877 * (_838.x + (-0.5));
        float _879 = _877 * (_838.y + (-0.5));
        float _880 = _877 * (_838.z + (-0.5));
        float _887 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _888 = _887 * (_845.x + (-0.5));
        float _889 = _887 * (_845.y + (-0.5));
        float _890 = _887 * (_845.z + (-0.5));
        float _891 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _892 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _893 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _894 = _858 * 0.5;
        float _895 = _868 * 0.5;
        float _896 = _878 * 0.5;
        float _897 = dot(vec3(_894, _895, _896), vec3(_894, _895, _896));
        float _902 = (_897 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_897);
        float _910 = (dot(vec3(_218, _219, _220), vec3(_902 * _894, _902 * _895, _902 * _896)) + 1.0) * 0.5;
        float _3094 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _919 = sqrt(((_895 * _895) + (_894 * _894)) + (_896 * _896)) / (_891 + 9.9999997473787516355514526367188e-06);
        float _3105 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _920 = isnan(1.0) ? _3105 : (isnan(_3105) ? 1.0 : min(_3105, 1.0));
        float _921 = _920 * 2.0;
        float _925 = (1.0 - _920) / (_920 + 1.0);
        float _3116 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _926 = isnan(1.0) ? _3116 : (isnan(_3116) ? 1.0 : min(_3116, 1.0));
        float _935 = ((((1.0 - _926) * (_921 + 2.0)) * exp2(log2(isnan(1.0) ? _3094 : (isnan(_3094) ? 1.0 : min(_3094, 1.0))) * (_921 + 1.0))) + _926) * _891;
        float _936 = _859 * 0.5;
        float _937 = _869 * 0.5;
        float _938 = _879 * 0.5;
        float _939 = dot(vec3(_936, _937, _938), vec3(_936, _937, _938));
        float _944 = (_939 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_939);
        float _952 = (dot(vec3(_218, _219, _220), vec3(_944 * _936, _944 * _937, _944 * _938)) + 1.0) * 0.5;
        float _3127 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _961 = sqrt(((_937 * _937) + (_936 * _936)) + (_938 * _938)) / (_892 + 9.9999997473787516355514526367188e-06);
        float _3138 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _962 = isnan(1.0) ? _3138 : (isnan(_3138) ? 1.0 : min(_3138, 1.0));
        float _963 = _962 * 2.0;
        float _967 = (1.0 - _962) / (_962 + 1.0);
        float _3149 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _3149 : (isnan(_3149) ? 1.0 : min(_3149, 1.0));
        float _977 = ((((1.0 - _968) * (_963 + 2.0)) * exp2(log2(isnan(1.0) ? _3127 : (isnan(_3127) ? 1.0 : min(_3127, 1.0))) * (_963 + 1.0))) + _968) * _892;
        float _978 = _860 * 0.5;
        float _979 = _870 * 0.5;
        float _980 = _880 * 0.5;
        float _981 = dot(vec3(_978, _979, _980), vec3(_978, _979, _980));
        float _986 = (_981 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_981);
        float _994 = (dot(vec3(_218, _219, _220), vec3(_986 * _978, _986 * _979, _986 * _980)) + 1.0) * 0.5;
        float _3160 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _1003 = sqrt(((_979 * _979) + (_978 * _978)) + (_980 * _980)) / (_893 + 9.9999997473787516355514526367188e-06);
        float _3171 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3171 : (isnan(_3171) ? 1.0 : min(_3171, 1.0));
        float _1005 = _1004 * 2.0;
        float _1009 = (1.0 - _1004) / (_1004 + 1.0);
        float _3182 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3182 : (isnan(_3182) ? 1.0 : min(_3182, 1.0));
        float _1019 = ((((1.0 - _1010) * (_1005 + 2.0)) * exp2(log2(isnan(1.0) ? _3160 : (isnan(_3160) ? 1.0 : min(_3160, 1.0))) * (_1005 + 1.0))) + _1010) * _893;
        _1027 = _860;
        _1028 = _859;
        _1029 = _858;
        _1030 = _870;
        _1031 = _869;
        _1032 = _868;
        _1033 = _880;
        _1034 = _879;
        _1035 = _878;
        _1036 = _893;
        _1037 = _892;
        _1038 = _891;
        _1039 = cbModelParam._m0[36u].w * (isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0)));
        _1040 = cbModelParam._m0[36u].w * (isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0)));
        _1041 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0)));
    }
    else
    {
        _1027 = _718;
        _1028 = _718;
        _1029 = _718;
        _1030 = _718;
        _1031 = _718;
        _1032 = _718;
        _1033 = _718;
        _1034 = _718;
        _1035 = _718;
        _1036 = _718;
        _1037 = _718;
        _1038 = _718;
        _1039 = 0.0;
        _1040 = 0.0;
        _1041 = 0.0;
    }
    float _1051 = (cbModelParam._m0[1u].x * (_1039 - _730)) + _730;
    float _1052 = (cbModelParam._m0[1u].x * (_1040 - _731)) + _731;
    float _1053 = (cbModelParam._m0[1u].x * (_1041 - _732)) + _732;
    float _1074 = fma(_1053, cbSceneParam._m0[89u].z, fma(_1052, cbSceneParam._m0[89u].y, _1051 * cbSceneParam._m0[89u].x));
    float _1077 = fma(_1053, cbSceneParam._m0[90u].z, fma(_1052, cbSceneParam._m0[90u].y, _1051 * cbSceneParam._m0[90u].x));
    float _1080 = fma(_1053, cbSceneParam._m0[91u].z, fma(_1052, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1051));
    float _1095 = _383 * 0.5;
    float _1096 = _384 * 0.5;
    float _1097 = _385 * 0.5;
    float _1098 = dot(vec4(_1095, _1096, _1097, 1.0), vec4(_1029, _1032, _1035, _1038));
    float _1101 = dot(vec4(_1095, _1096, _1097, 1.0), vec4(_1028, _1031, _1034, _1037));
    float _1104 = dot(vec4(_1095, _1096, _1097, 1.0), vec4(_1027, _1030, _1033, _1036));
    float _1138;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1111 = dot(vec4(_1095, _1096, _1097, 1.0), vec4(_717, _721, _724, _727));
        float _1115 = dot(vec4(_1095, _1096, _1097, 1.0), vec4(_719, _722, _725, _728));
        float _1119 = dot(vec4(_1095, _1096, _1097, 1.0), vec4(_720, _723, _726, _729));
        float _1126 = dot(vec4(cbModelParam._m0[39u]), vec4(_1095, _1096, _1097, 1.0));
        _1138 = dot(vec3(isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0)), isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)), isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1126) ? 0.0 : (isnan(0.0) ? _1126 : max(0.0, _1126))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1138 = 1.0;
    }
    float _1149;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1140 = dot(vec4(cbModelParam._m0[40u]), vec4(_1095, _1096, _1097, 1.0));
        _1149 = dot(vec3(isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0)), isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)), isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1140) ? 0.0 : (isnan(0.0) ? _1140 : max(0.0, _1140))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1149 = 1.0;
    }
    float _1153 = (_1149 * cbModelParam._m0[1u].x) + (_1138 * (1.0 - cbModelParam._m0[1u].x));
    float _1162 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1244;
    float _1246;
    float _1248;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1211 = fma(_415, cbModelParam._m0[13u].z, fma(_411, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _407)) + cbModelParam._m0[13u].w;
        float _1215 = fma(_415, cbModelParam._m0[14u].z, fma(_411, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _407)) + cbModelParam._m0[14u].w;
        float _1219 = fma(_415, cbModelParam._m0[15u].z, fma(_411, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _407)) + cbModelParam._m0[15u].w;
        float _1222 = fma(_385, cbModelParam._m0[13u].z, fma(_384, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _383));
        float _1225 = fma(_385, cbModelParam._m0[14u].z, fma(_384, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _383));
        float _1228 = fma(_385, cbModelParam._m0[15u].z, fma(_384, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _383));
        float _1254;
        if (_1222 > 0.0)
        {
            _1254 = abs((1.0 - _1211) / _1222);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1222 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1211 + 1.0) / _1222);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1254 = frontier_phi_14_12_ladder;
        }
        float _1461;
        if (_1225 > 0.0)
        {
            _1461 = abs((1.0 - _1215) / _1225);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1225 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1215 + 1.0) / _1225);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1461 = frontier_phi_23_19_ladder;
        }
        float _1650;
        if (_1228 > 0.0)
        {
            _1650 = abs((1.0 - _1219) / _1228);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1228 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1219 + 1.0) / _1228);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1650 = frontier_phi_35_30_ladder;
        }
        float _1652 = isnan(_1461) ? _1254 : (isnan(_1254) ? _1461 : min(_1254, _1461));
        float _1653 = isnan(_1650) ? _1652 : (isnan(_1652) ? _1650 : min(_1652, _1650));
        float _1657 = (_1653 * _1222) + _1211;
        float _1658 = (_1653 * _1225) + _1215;
        float _1659 = (_1653 * _1228) + _1219;
        float _1660 = _1653 * 9.9999997473787516355514526367188e-05;
        float _1662 = (-1.0) - _1660;
        float _1664 = _1660 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1659 > _1664) || ((_1659 < _1662) || ((_1658 > _1664) || ((_1658 < _1662) || ((_1657 < _1662) || (_1657 > _1664))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1756 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1659, cbModelParam._m0[9u].z, fma(_1658, cbModelParam._m0[9u].y, _1657 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1659, cbModelParam._m0[10u].z, fma(_1658, cbModelParam._m0[10u].y, _1657 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1659, cbModelParam._m0[11u].z, fma(_1658, cbModelParam._m0[11u].y, _1657 * cbModelParam._m0[11u].x))), _1162);
            frontier_phi_13_35_ladder = _1756.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1756.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1756.x * cbModelParam._m0[1u].y;
        }
        _1244 = frontier_phi_13_35_ladder_2;
        _1246 = frontier_phi_13_35_ladder_1;
        _1248 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1232 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_383, _384, _385), _1162);
        _1244 = _1232.x * cbModelParam._m0[1u].y;
        _1246 = _1232.y * cbModelParam._m0[1u].y;
        _1248 = _1232.z * cbModelParam._m0[1u].y;
    }
    float _1251 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1344;
    float _1346;
    float _1348;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1308 = fma(_415, cbModelParam._m0[21u].z, fma(_411, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _407)) + cbModelParam._m0[21u].w;
        float _1312 = fma(_415, cbModelParam._m0[22u].z, fma(_411, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _407)) + cbModelParam._m0[22u].w;
        float _1316 = fma(_415, cbModelParam._m0[23u].z, fma(_411, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _407)) + cbModelParam._m0[23u].w;
        float _1319 = fma(_385, cbModelParam._m0[21u].z, fma(_384, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _383));
        float _1322 = fma(_385, cbModelParam._m0[22u].z, fma(_384, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _383));
        float _1325 = fma(_385, cbModelParam._m0[23u].z, fma(_384, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _383));
        float _1466;
        if (_1319 > 0.0)
        {
            _1466 = abs((1.0 - _1308) / _1319);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1319 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1308 + 1.0) / _1319);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1466 = frontier_phi_25_21_ladder;
        }
        float _1677;
        if (_1322 > 0.0)
        {
            _1677 = abs((1.0 - _1312) / _1322);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1322 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1312 + 1.0) / _1322);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1677 = frontier_phi_37_32_ladder;
        }
        float _1828;
        if (_1325 > 0.0)
        {
            _1828 = abs((1.0 - _1316) / _1325);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1325 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1316 + 1.0) / _1325);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1828 = frontier_phi_46_43_ladder;
        }
        float _1830 = isnan(_1677) ? _1466 : (isnan(_1466) ? _1677 : min(_1466, _1677));
        float _1831 = isnan(_1828) ? _1830 : (isnan(_1830) ? _1828 : min(_1830, _1828));
        float _1835 = (_1831 * _1319) + _1308;
        float _1836 = (_1831 * _1322) + _1312;
        float _1837 = (_1831 * _1325) + _1316;
        float _1838 = _1831 * 9.9999997473787516355514526367188e-05;
        float _1839 = (-1.0) - _1838;
        float _1841 = _1838 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1837 > _1841) || ((_1837 < _1839) || ((_1836 > _1841) || ((_1836 < _1839) || ((_1835 < _1839) || (_1835 > _1841))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2073 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1837, cbModelParam._m0[17u].z, fma(_1836, cbModelParam._m0[17u].y, _1835 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1837, cbModelParam._m0[18u].z, fma(_1836, cbModelParam._m0[18u].y, _1835 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1837, cbModelParam._m0[19u].z, fma(_1836, cbModelParam._m0[19u].y, _1835 * cbModelParam._m0[19u].x))), _1251);
            frontier_phi_22_46_ladder = _2073.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2073.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2073.x * cbModelParam._m0[1u].z;
        }
        _1344 = frontier_phi_22_46_ladder_2;
        _1346 = frontier_phi_22_46_ladder_1;
        _1348 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1328 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_383, _384, _385), _1251);
        _1344 = _1328.x * cbModelParam._m0[1u].z;
        _1346 = _1328.y * cbModelParam._m0[1u].z;
        _1348 = _1328.z * cbModelParam._m0[1u].z;
    }
    float _1360 = _374 * 0.01200000010430812835693359375;
    float _1362 = _1360 * ((cbModelParam._m0[1u].w * (_1344 - _1244)) + _1244);
    float _1363 = _1360 * ((cbModelParam._m0[1u].w * (_1346 - _1246)) + _1246);
    float _1364 = _1360 * ((cbModelParam._m0[1u].w * (_1348 - _1248)) + _1248);
    float _1367 = fma(_1364, cbSceneParam._m0[89u].z, fma(_1363, cbSceneParam._m0[89u].y, _1362 * cbSceneParam._m0[89u].x));
    float _1370 = fma(_1364, cbSceneParam._m0[90u].z, fma(_1363, cbSceneParam._m0[90u].y, _1362 * cbSceneParam._m0[90u].x));
    float _1373 = fma(_1364, cbSceneParam._m0[91u].z, fma(_1363, cbSceneParam._m0[91u].y, _1362 * cbSceneParam._m0[91u].x));
    uvec4 _1383 = floatBitsToUint(cbInstanceData._m0[_349 + 5u]);
    uint _1385 = _1383.x * 14u;
    uint _1386 = _1385 + 13u;
    float _1393 = _374 + (-1.0);
    float _1399 = (cbLight._m0[_1386].x * _1393) + 1.0;
    float _1400 = (cbLight._m0[_1386].y * _1393) + 1.0;
    float _1401 = (cbLight._m0[_1386].z * _1393) + 1.0;
    float _1402 = (cbLight._m0[_1386].w * _1393) + 1.0;
    uint _1403 = _1385 + 5u;
    float _1409 = isnan(1.0) ? _1400 : (isnan(_1400) ? 1.0 : min(_1400, 1.0));
    uint _1413 = _1385 + 4u;
    float _1420 = isnan(1.0) ? _1399 : (isnan(_1399) ? 1.0 : min(_1399, 1.0));
    uint _1424 = _1385 | 1u;
    float _1435 = dot(vec3(cbLight._m0[_1385].xyz), vec3(_218, _219, _220));
    float _1438 = dot(vec3(cbLight._m0[_1424].xyz), vec3(_218, _219, _220));
    float _3318 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
    float _3329 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
    float _1443 = (isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0))) * 0.3183098733425140380859375;
    float _1445 = (isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0))) * 0.3183098733425140380859375;
    float _1452 = ((cbLight._m0[_1403].x * _1409) * _1445) + ((cbLight._m0[_1413].x * _1420) * _1443);
    float _1453 = ((_1409 * cbLight._m0[_1403].y) * _1445) + ((_1420 * cbLight._m0[_1413].y) * _1443);
    float _1454 = ((_1409 * cbLight._m0[_1403].z) * _1445) + ((_1420 * cbLight._m0[_1413].z) * _1443);
    uvec4 _1458 = floatBitsToUint(cbLight._m0[_1385 + 12u]);
    bool _1460 = _1458.x == 0u;
    float _1471;
    float _1473;
    float _1475;
    if (_1460)
    {
        _1471 = _1452;
        _1473 = _1453;
        _1475 = _1454;
    }
    else
    {
        uint _1479 = _1385 + 6u;
        float _1495 = (dot(vec3(cbLight._m0[_1385 + 2u].xyz), vec3(_218, _219, _220)) * 0.5) + 0.5;
        float _1496 = _1495 * _1495;
        float _3340 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0));
        float _1498 = isnan(1.0) ? _1401 : (isnan(_1401) ? 1.0 : min(_1401, 1.0));
        _1471 = (((cbLight._m0[_1479].x * 0.3183098733425140380859375) * _1497) * _1498) + _1452;
        _1473 = (((cbLight._m0[_1479].y * 0.3183098733425140380859375) * _1497) * _1498) + _1453;
        _1475 = (((cbLight._m0[_1479].z * 0.3183098733425140380859375) * _1497) * _1498) + _1454;
    }
    bool _1478 = _1458.y == 0u;
    float _1516;
    float _1518;
    float _1520;
    if (_1478)
    {
        _1516 = _1471;
        _1518 = _1473;
        _1520 = _1475;
    }
    else
    {
        uint _1621 = _1385 + 7u;
        float _1637 = (dot(vec3(cbLight._m0[_1385 + 3u].xyz), vec3(_218, _219, _220)) * 0.5) + 0.5;
        float _1638 = _1637 * _1637;
        float _3356 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
        float _1640 = isnan(1.0) ? _1402 : (isnan(_1402) ? 1.0 : min(_1402, 1.0));
        _1516 = (((cbLight._m0[_1621].x * 0.3183098733425140380859375) * _1639) * _1640) + _1471;
        _1518 = (((cbLight._m0[_1621].y * 0.3183098733425140380859375) * _1639) * _1640) + _1473;
        _1520 = (((cbLight._m0[_1621].z * 0.3183098733425140380859375) * _1639) * _1640) + _1475;
    }
    uint _1522 = _1385 + 8u;
    float _1528 = cbLight._m0[_1385].x + _300;
    float _1529 = cbLight._m0[_1385].y + _301;
    float _1530 = cbLight._m0[_1385].z + _302;
    float _1534 = inversesqrt(dot(vec3(_1528, _1529, _1530), vec3(_1528, _1529, _1530)));
    float _1538 = dot(vec3(_218, _219, _220), vec3(cbLight._m0[_1385].xyz));
    float _3372 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
    float _1541 = isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0));
    float _3383 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _1542 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
    float _1543 = dot(vec3(cbLight._m0[_1385].xyz), vec3(_1528 * _1534, _1529 * _1534, _1530 * _1534));
    float _3394 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
    float _1554 = (exp2(log2(1.0 - (isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1560 = (0.5 / ((_1541 + 9.9999999392252902907785028219223e-09) + _1542)) * _1541;
    float _3405 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
    float _1562 = (isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0))) * 0.31831014156341552734375;
    uint _1573 = _1385 + 9u;
    float _1579 = cbLight._m0[_1424].x + _300;
    float _1580 = cbLight._m0[_1424].y + _301;
    float _1581 = cbLight._m0[_1424].z + _302;
    float _1585 = inversesqrt(dot(vec3(_1579, _1580, _1581), vec3(_1579, _1580, _1581)));
    float _1589 = dot(vec3(_218, _219, _220), vec3(cbLight._m0[_1424].xyz));
    float _3416 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
    float _1592 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
    float _1593 = dot(vec3(cbLight._m0[_1424].xyz), vec3(_1579 * _1585, _1580 * _1585, _1581 * _1585));
    float _3427 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
    float _1602 = (exp2(log2(1.0 - (isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1606 = (0.5 / ((_1592 + 9.9999999392252902907785028219223e-09) + _1542)) * _1592;
    float _3438 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
    float _1608 = (isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0))) * 0.31831014156341552734375;
    float _1618 = (((_1602 * cbLight._m0[_1573].x) * _1608) * _1409) + (((_1554 * cbLight._m0[_1522].x) * _1562) * _1420);
    float _1619 = (((_1602 * cbLight._m0[_1573].y) * _1608) * _1409) + (((_1554 * cbLight._m0[_1522].y) * _1562) * _1420);
    float _1620 = (((_1602 * cbLight._m0[_1573].z) * _1608) * _1409) + (((_1554 * cbLight._m0[_1522].z) * _1562) * _1420);
    float _1682;
    float _1684;
    float _1686;
    if (_1460)
    {
        _1682 = _1618;
        _1684 = _1619;
        _1686 = _1620;
    }
    else
    {
        uint _1688 = _1385 + 10u;
        uint _1694 = _1385 + 2u;
        float _1700 = cbLight._m0[_1694].x + _300;
        float _1701 = cbLight._m0[_1694].y + _301;
        float _1702 = cbLight._m0[_1694].z + _302;
        float _1706 = inversesqrt(dot(vec3(_1700, _1701, _1702), vec3(_1700, _1701, _1702)));
        float _1710 = dot(vec3(_218, _219, _220), vec3(cbLight._m0[_1694].xyz));
        float _3449 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1713 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
        float _1714 = dot(vec3(cbLight._m0[_1694].xyz), vec3(_1700 * _1706, _1701 * _1706, _1702 * _1706));
        float _3460 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1723 = (exp2(log2(1.0 - (isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1727 = (0.5 / ((_1713 + 9.9999999392252902907785028219223e-09) + _1542)) * _1713;
        float _3471 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1729 = (isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0))) * 0.31831014156341552734375;
        float _1730 = isnan(1.0) ? _1401 : (isnan(_1401) ? 1.0 : min(_1401, 1.0));
        _1682 = (((_1723 * cbLight._m0[_1688].x) * _1729) * _1730) + _1618;
        _1684 = (((_1723 * cbLight._m0[_1688].y) * _1729) * _1730) + _1619;
        _1686 = (((_1723 * cbLight._m0[_1688].z) * _1729) * _1730) + _1620;
    }
    float _1765;
    float _1767;
    float _1769;
    if (_1478)
    {
        _1765 = _1682;
        _1767 = _1684;
        _1769 = _1686;
    }
    else
    {
        uint _1776 = _1385 + 11u;
        uint _1782 = _1385 + 3u;
        float _1788 = cbLight._m0[_1782].x + _300;
        float _1789 = cbLight._m0[_1782].y + _301;
        float _1790 = cbLight._m0[_1782].z + _302;
        float _1794 = inversesqrt(dot(vec3(_1788, _1789, _1790), vec3(_1788, _1789, _1790)));
        float _1798 = dot(vec3(_218, _219, _220), vec3(cbLight._m0[_1782].xyz));
        float _3487 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1801 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
        float _1802 = dot(vec3(cbLight._m0[_1782].xyz), vec3(_1788 * _1794, _1789 * _1794, _1790 * _1794));
        float _3498 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1811 = (exp2(log2(1.0 - (isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1815 = (0.5 / ((_1801 + 9.9999999392252902907785028219223e-09) + _1542)) * _1801;
        float _3509 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1817 = (isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0))) * 0.31831014156341552734375;
        float _1818 = isnan(1.0) ? _1402 : (isnan(_1402) ? 1.0 : min(_1402, 1.0));
        _1765 = (((_1811 * cbLight._m0[_1776].x) * _1817) * _1818) + _1682;
        _1767 = (((_1811 * cbLight._m0[_1776].y) * _1817) * _1818) + _1684;
        _1769 = (((_1811 * cbLight._m0[_1776].z) * _1817) * _1818) + _1686;
    }
    float _1953;
    float _1955;
    float _1957;
    float _1959;
    float _1961;
    float _1963;
    if (_1383.y == 0u)
    {
        float _1893 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1894 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1893;
        float _1895 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1893;
        float _1896 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1893;
        uvec4 _1908 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1909 = _1908.x;
        uint _1920 = uint((float(_1908.y) * floor(float(uint(cbSceneParam._m0[85u].y * _309) / _1909))) + floor(float(uint(cbSceneParam._m0[85u].x * _308) / _1909)));
        float _1930 = (log2(_1896 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1931 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
        uint _1934 = uint(isnan(14.0) ? _1931 : (isnan(_1931) ? 14.0 : min(_1931, 14.0)));
        uvec4 _1939 = texelFetch(g_lightClusterGridBuffer, int(((_1934 << 2u) + (_1920 << 6u)) >> 2u));
        uint _1940 = _1939.x;
        uint _1941 = _1908.z;
        float _2078;
        float _2080;
        float _2082;
        float _2084;
        float _2086;
        float _2088;
        if (((((1u << ((_1941 >> 4u) & 15u)) + 4294967295u) & _1940) == 0u) || ((_1941 & 240u) == 0u))
        {
            _2078 = 0.0;
            _2080 = 0.0;
            _2082 = 0.0;
            _2084 = 0.0;
            _2086 = 0.0;
            _2088 = 0.0;
        }
        else
        {
            float _2079;
            float _2081;
            float _2083;
            float _2085;
            float _2087;
            float _2089;
            float _2230 = 0.0;
            float _2231 = 0.0;
            float _2232 = 0.0;
            float _2233 = 0.0;
            float _2234 = 0.0;
            float _2235 = 0.0;
            uint _2236 = 0u;
            uint _2245;
            bool _2246;
            for (;;)
            {
                _2245 = texelFetch(g_lightClassification, int((((_1934 << 5u) + (_1920 << 9u)) + (_2236 << 2u)) >> 2u)).x;
                _2246 = _2245 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2246)
                {
                    frontier_phi_61_pred = _2230;
                    frontier_phi_61_pred_1 = _2235;
                    frontier_phi_61_pred_2 = _2234;
                    frontier_phi_61_pred_3 = _2233;
                    frontier_phi_61_pred_4 = _2232;
                    frontier_phi_61_pred_5 = _2231;
                }
                else
                {
                    float _2354;
                    float _2355;
                    float _2356;
                    float _2357;
                    float _2358;
                    float _2359;
                    uint _2360;
                    _2354 = _2230;
                    _2355 = _2231;
                    _2356 = _2232;
                    _2357 = _2233;
                    _2358 = _2234;
                    _2359 = _2235;
                    _2360 = _2245;
                    float _2286;
                    float _2287;
                    float _2288;
                    float _2289;
                    float _2290;
                    float _2291;
                    for (;;)
                    {
                        uint _2364 = uint(findLSB(_2360)) + (_2236 << 5u);
                        uint _2361 = (_2360 + 4294967295u) & _2360;
                        uint _2366 = _2364 * 48u;
                        vec4 _2380 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2366)).x, texelFetch(g_PointLightRenderingBuffer, int(_2366 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2366 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2366 + 3u)).x));
                        uint _2386 = (_2364 * 48u) + 4u;
                        vec4 _2399 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2386)).x, texelFetch(g_PointLightRenderingBuffer, int(_2386 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2386 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2386 + 3u)).x));
                        uint _2405 = (_2364 * 48u) + 8u;
                        vec3 _2416 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2405)).x, texelFetch(g_PointLightRenderingBuffer, int(_2405 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2405 + 2u)).x));
                        float _2420 = _2380.x - _1894;
                        float _2421 = _2380.y - _1895;
                        float _2422 = _2380.z - _1896;
                        float _2423 = dot(vec3(_2420, _2421, _2422), vec3(_2420, _2421, _2422));
                        float _2426 = inversesqrt(_2423);
                        float _2435 = 1.0 - (_2423 * _2380.w);
                        float _3535 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
                        float _2436 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
                        float _2437 = sqrt(_2423) * _2399.w;
                        float _2440 = 1.39999997615814208984375 / (_2437 + 1.39999997615814208984375);
                        float _2441 = _2440 * _2440;
                        float _2444 = ((1.0 - _2441) * dot(vec3(_330, _333, _336), vec3(_2426 * _2420, _2426 * _2421, _2426 * _2422))) + _2441;
                        float _2447 = _2437 * _2437;
                        float _2451 = ((isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0))) * _2436) / ((_2447 * 0.699999988079071044921875) + 1.0);
                        float _2455 = (-0.0) - _1894;
                        float _2456 = (-0.0) - _1895;
                        float _2457 = (-0.0) - _1896;
                        float _2461 = inversesqrt(dot(vec3(_2455, _2456, _2457), vec3(_2455, _2456, _2457)));
                        float _2465 = dot(vec3(_330, _333, _336), vec3(_2461 * _2455, _2461 * _2456, _2461 * _2457));
                        float _3551 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
                        float _3562 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
                        float _2469 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
                        float _2473 = (0.5 / (((isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) + 9.9999999392252902907785028219223e-09) + _2469)) * _2469;
                        float _3573 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
                        float _2482 = (((isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) * 3.1415927410125732421875) / ((_2447 * 2.1991131305694580078125) + 3.141590118408203125)) * _2436;
                        _2289 = (_2451 * _2399.x) + _2357;
                        _2290 = (_2451 * _2399.y) + _2358;
                        _2291 = (_2451 * _2399.z) + _2359;
                        _2286 = (_2482 * _2416.x) + _2354;
                        _2287 = (_2482 * _2416.y) + _2355;
                        _2288 = (_2482 * _2416.z) + _2356;
                        if (_2361 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2354 = _2286;
                            _2355 = _2287;
                            _2356 = _2288;
                            _2357 = _2289;
                            _2358 = _2290;
                            _2359 = _2291;
                            _2360 = _2361;
                        }
                    }
                    frontier_phi_61_pred = _2286;
                    frontier_phi_61_pred_1 = _2291;
                    frontier_phi_61_pred_2 = _2290;
                    frontier_phi_61_pred_3 = _2289;
                    frontier_phi_61_pred_4 = _2288;
                    frontier_phi_61_pred_5 = _2287;
                }
                _2079 = frontier_phi_61_pred;
                _2089 = frontier_phi_61_pred_1;
                _2087 = frontier_phi_61_pred_2;
                _2085 = frontier_phi_61_pred_3;
                _2083 = frontier_phi_61_pred_4;
                _2081 = frontier_phi_61_pred_5;
                uint _2237 = _2236 + 1u;
                if (_2237 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2230 = _2079;
                    _2231 = _2081;
                    _2232 = _2083;
                    _2233 = _2085;
                    _2234 = _2087;
                    _2235 = _2089;
                    _2236 = _2237;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2078 = _2079;
            _2080 = _2081;
            _2082 = _2083;
            _2084 = _2085;
            _2086 = _2087;
            _2088 = _2089;
        }
        uvec4 _2092 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2093 = _2092.z;
        uint _2095 = (_2093 >> 8u) & 15u;
        float _2201;
        float _2203;
        float _2205;
        float _2207;
        float _2209;
        float _2211;
        if (((4294967295u << _2095) & _1940) == 0u)
        {
            _2201 = _2078;
            _2203 = _2080;
            _2205 = _2082;
            _2207 = _2084;
            _2209 = _2086;
            _2211 = _2088;
        }
        else
        {
            float _2226 = inversesqrt(dot(vec3(_1894, _1895, _1896), vec3(_1894, _1895, _1896)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2095 < ((_2093 >> 12u) & 15u))
            {
                float _2202;
                float _2204;
                float _2206;
                float _2208;
                float _2210;
                float _2212;
                float _2337 = _2078;
                float _2338 = _2080;
                float _2339 = _2082;
                float _2340 = _2084;
                float _2341 = _2086;
                float _2342 = _2088;
                uint _2343 = _2095;
                uint _2352;
                bool _2353;
                for (;;)
                {
                    _2352 = texelFetch(g_lightClassification, int((((_1934 << 5u) + (_1920 << 9u)) + (_2343 << 2u)) >> 2u)).x;
                    _2353 = _2352 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2353)
                    {
                        frontier_phi_67_pred = _2340;
                        frontier_phi_67_pred_1 = _2341;
                        frontier_phi_67_pred_2 = _2342;
                        frontier_phi_67_pred_3 = _2339;
                        frontier_phi_67_pred_4 = _2338;
                        frontier_phi_67_pred_5 = _2337;
                    }
                    else
                    {
                        float _2487;
                        float _2488;
                        float _2489;
                        float _2490;
                        float _2491;
                        float _2492;
                        float _2739;
                        float _2740;
                        float _2741;
                        float _2742;
                        float _2743;
                        float _2744;
                        float _2500 = _2337;
                        float _2501 = _2338;
                        float _2502 = _2339;
                        float _2503 = _2340;
                        float _2504 = _2341;
                        float _2505 = _2342;
                        uint _2506 = _2352;
                        uint _2507;
                        vec4 _2532;
                        float _2533;
                        vec4 _2548;
                        vec3 _2560;
                        vec4 _2576;
                        vec4 _2592;
                        float _2639;
                        bool _2640;
                        for (;;)
                        {
                            uint _2517 = ((_2343 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2506));
                            _2507 = (_2506 + 4294967295u) & _2506;
                            uint _2519 = _2517 * 40u;
                            _2532 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2519)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2519 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2519 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2519 + 3u)).x));
                            _2533 = _2532.w;
                            uint _2535 = (_2517 * 40u) + 4u;
                            _2548 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2535)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2535 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2535 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2535 + 3u)).x));
                            uint _2550 = (_2517 * 40u) + 8u;
                            _2560 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2550)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2550 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2550 + 2u)).x));
                            uint _2563 = (_2517 * 40u) + 16u;
                            _2576 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2563)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2563 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2563 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2563 + 3u)).x));
                            uint _2579 = (_2517 * 40u) + 20u;
                            _2592 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2579)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2579 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2579 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2579 + 3u)).x));
                            uint _2595 = (_2517 * 40u) + 24u;
                            vec4 _2608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2595 + 3u)).x));
                            uint _2614 = (_2517 * 40u) + 28u;
                            vec4 _2627 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2614)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2614 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2614 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2614 + 3u)).x));
                            _2639 = fma(_1896, _2627.z, fma(_1895, _2627.y, _2627.x * _1894)) + _2627.w;
                            _2640 = !((fma(_1896, _2608.z, fma(_1895, _2608.y, _2608.x * _1894)) + _2608.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2640)
                            {
                                float _2667 = _2532.x - _1894;
                                float _2668 = _2532.y - _1895;
                                float _2669 = _2532.z - _1896;
                                float _2670 = dot(vec3(_2667, _2668, _2669), vec3(_2667, _2668, _2669));
                                float _2673 = inversesqrt(_2670);
                                float _2674 = _2673 * _2667;
                                float _2675 = _2673 * _2668;
                                float _2676 = _2673 * _2669;
                                float _2680 = 1.0 - (_2670 / (_2533 * _2533));
                                float _3584 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
                                float _2681 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
                                float _2685 = sqrt(_2670) * _2548.w;
                                float _2687 = 1.39999997615814208984375 / (_2685 + 1.39999997615814208984375);
                                float _2688 = _2687 * _2687;
                                float _2689 = 1.0 - _2688;
                                float _2691 = (_2689 * dot(vec3(_2674, _2675, _2676), vec3(_330, _333, _336))) + _2688;
                                float _2694 = _2685 * _2685;
                                float _2698 = (fma(_1896, _2576.z, fma(_1895, _2576.y, _2576.x * _1894)) + _2576.w) / _2639;
                                float _2699 = (fma(_1896, _2592.z, fma(_1895, _2592.y, _2592.x * _1894)) + _2592.w) / _2639;
                                float _2703 = 1.0 - dot(vec2(_2698, _2699), vec2(_2698, _2699));
                                float _3600 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
                                float _2704 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
                                float _2705 = _2704 * (((isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0))) * _2681) / ((_2694 * 0.699999988079071044921875) + 1.0));
                                float _2715 = dot(vec3(_330, _333, _336), vec3((-0.0) - (_1894 * _2226), (-0.0) - (_1895 * _2226), (-0.0) - (_1896 * _2226)));
                                float _3611 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
                                float _2723 = (_2689 * dot(vec3(_330, _333, _336), vec3(_2674, _2675, _2676))) + _2688;
                                float _3622 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
                                float _2724 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
                                float _2728 = (0.5 / (((isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) + 9.9999999392252902907785028219223e-09) + _2724)) * _2724;
                                float _3633 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
                                float _2735 = (_2704 * _2681) * (((isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * 3.1415927410125732421875) / ((_2694 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2735 * _2560.x;
                                frontier_phi_73_pred_1 = _2735 * _2560.y;
                                frontier_phi_73_pred_2 = _2705 * _2548.z;
                                frontier_phi_73_pred_3 = _2705 * _2548.y;
                                frontier_phi_73_pred_4 = _2705 * _2548.x;
                                frontier_phi_73_pred_5 = _2735 * _2560.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2739 = frontier_phi_73_pred;
                            _2740 = frontier_phi_73_pred_1;
                            _2744 = frontier_phi_73_pred_2;
                            _2743 = frontier_phi_73_pred_3;
                            _2742 = frontier_phi_73_pred_4;
                            _2741 = frontier_phi_73_pred_5;
                            _2490 = _2742 + _2503;
                            _2491 = _2743 + _2504;
                            _2492 = _2744 + _2505;
                            _2487 = _2739 + _2500;
                            _2488 = _2740 + _2501;
                            _2489 = _2741 + _2502;
                            if (_2507 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2500 = _2487;
                                _2501 = _2488;
                                _2502 = _2489;
                                _2503 = _2490;
                                _2504 = _2491;
                                _2505 = _2492;
                                _2506 = _2507;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2490;
                        frontier_phi_67_pred_1 = _2491;
                        frontier_phi_67_pred_2 = _2492;
                        frontier_phi_67_pred_3 = _2489;
                        frontier_phi_67_pred_4 = _2488;
                        frontier_phi_67_pred_5 = _2487;
                    }
                    _2208 = frontier_phi_67_pred;
                    _2210 = frontier_phi_67_pred_1;
                    _2212 = frontier_phi_67_pred_2;
                    _2206 = frontier_phi_67_pred_3;
                    _2204 = frontier_phi_67_pred_4;
                    _2202 = frontier_phi_67_pred_5;
                    uint _2344 = _2343 + 1u;
                    if (_2344 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2337 = _2202;
                        _2338 = _2204;
                        _2339 = _2206;
                        _2340 = _2208;
                        _2341 = _2210;
                        _2342 = _2212;
                        _2343 = _2344;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2210;
                frontier_phi_55_56_ladder_1 = _2212;
                frontier_phi_55_56_ladder_2 = _2208;
                frontier_phi_55_56_ladder_3 = _2206;
                frontier_phi_55_56_ladder_4 = _2204;
                frontier_phi_55_56_ladder_5 = _2202;
            }
            else
            {
                frontier_phi_55_56_ladder = _2086;
                frontier_phi_55_56_ladder_1 = _2088;
                frontier_phi_55_56_ladder_2 = _2084;
                frontier_phi_55_56_ladder_3 = _2082;
                frontier_phi_55_56_ladder_4 = _2080;
                frontier_phi_55_56_ladder_5 = _2078;
            }
            _2201 = frontier_phi_55_56_ladder_5;
            _2203 = frontier_phi_55_56_ladder_4;
            _2205 = frontier_phi_55_56_ladder_3;
            _2207 = frontier_phi_55_56_ladder_2;
            _2209 = frontier_phi_55_56_ladder;
            _2211 = frontier_phi_55_56_ladder_1;
        }
        float _2216 = isnan(1.0) ? _374 : (isnan(_374) ? 1.0 : min(_374, 1.0));
        _1953 = (_2216 * _2207) + _1516;
        _1955 = (_2216 * _2209) + _1518;
        _1957 = (_2216 * _2211) + _1520;
        _1959 = ((_2201 * 0.039999999105930328369140625) * _2216) + _1765;
        _1961 = ((_2203 * 0.039999999105930328369140625) * _2216) + _1767;
        _1963 = ((_2205 * 0.039999999105930328369140625) * _2216) + _1769;
    }
    else
    {
        _1953 = _1516;
        _1955 = _1518;
        _1957 = _1520;
        _1959 = _1765;
        _1961 = _1767;
        _1963 = _1769;
    }
    uint _1969 = _350 + uint(cbMatDynParam._m0[0u].w);
    float _1977 = ((_203.x * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].x) * cbInstanceData._m0[_1969].x;
    float _1980 = ((_203.y * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].y) * cbInstanceData._m0[_1969].y;
    float _1983 = ((_203.z * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].z) * cbInstanceData._m0[_1969].z;
    float _3649 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _3660 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _3671 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _3682 = isnan(0.0) ? _222 : (isnan(_222) ? 0.0 : max(_222, 0.0));
    float _2001 = (((isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0))) * (_1953 + ((isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0))) * _374))) + ((_1959 + ((isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0))) * _1153)) * cbPerFrame._m0[3u].x)) + _1977;
    float _2003 = (_1980 + ((_1961 + ((isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0))) * _1153)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * (_1955 + ((isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0))) * _374)));
    float _2005 = (_1983 + ((_1963 + ((isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0))) * _1153)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) * (_1957 + ((isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0))) * _374)));
    float _3708 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2018 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
    float _2023 = cbInstanceData._m0[_349 + 6u].w * (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0)));
    float _2028 = _308 / cbSceneParam._m0[86u].x;
    float _2029 = _309 / cbSceneParam._m0[86u].y;
    vec4 _2043 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2028, _2029, (log2((isnan(cbSceneParam._m0[77u].w) ? _241 : (isnan(_241) ? cbSceneParam._m0[77u].w : min(_241, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2045 = _2043.x;
    float _2046 = _2043.y;
    float _2047 = _2043.z;
    float _2048 = _2043.w;
    float _2141;
    float _2143;
    float _2145;
    float _2147;
    if (_241 > cbSceneParam._m0[78u].w)
    {
        float _2103 = isnan(_241) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _241 : min(cbSceneParam._m0[80u].w, _241));
        float _2104 = _2103 / _241;
        float _2115 = _2104 * _293;
        float _2116 = _294 * _2104;
        float _2117 = (-0.0) - _2116;
        float _2119 = _2104 * _295;
        float _2121 = (cbSceneParam._m0[77u].w * _2117) / _2103;
        float _2122 = _2121 + cbSceneParam._m0[79u].w;
        float _2123 = cbSceneParam._m0[79u].w - _2116;
        float _2129 = sqrt(((_2115 * _2115) + (_2116 * _2116)) + (_2119 * _2119));
        float _2132 = (1.0 - (cbSceneParam._m0[77u].w / _2103)) * _2129;
        float _2137 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2139 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2299;
        if (abs((_2117 - _2121) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2299 = ((((_2122 > 0.0) ? exp2(_2137 * _2122) : (2.0 - exp2(_2139 * _2122))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2132;
        }
        else
        {
            float _2259 = 1.0 / cbSceneParam._m0[80u].x;
            float _2260 = isnan(_2123) ? _2122 : (isnan(_2122) ? _2123 : max(_2122, _2123));
            float _2261 = isnan(_2123) ? _2122 : (isnan(_2122) ? _2123 : min(_2122, _2123));
            float _2270 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : min(_2260, 0.0));
            float _2271 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : min(_2261, 0.0));
            _2299 = ((abs(_2129 / _2117) * cbSceneParam._m0[80u].y) * ((((_2270 - _2271) * 2.0) - ((exp2(_2137 * (isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0)))) - exp2(_2137 * (isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0))))) * _2259)) - ((exp2(_2139 * _2270) - exp2(_2139 * _2271)) * _2259))) + (_2132 * cbSceneParam._m0[80u].z);
        }
        vec4 _2301 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2028, _2029, 1.0), 0.0);
        float _2310 = exp2((_2299 * (-1.44269502162933349609375)) * (1.0 - _2301.w));
        float _2311 = log2(_2310);
        float _2327 = log2(_2048);
        _2141 = (exp2(_2327 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2311 * cbSceneParam._m0[78u].x)) * _2301.x) / cbSceneParam._m0[78u].x)) + _2045;
        _2143 = (exp2(_2327 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2311 * cbSceneParam._m0[78u].y)) * _2301.y) / cbSceneParam._m0[78u].y)) + _2046;
        _2145 = (exp2(_2327 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2311 * cbSceneParam._m0[78u].z)) * _2301.z) / cbSceneParam._m0[78u].z)) + _2047;
        _2147 = _2310 * _2048;
    }
    else
    {
        _2141 = _2045;
        _2143 = _2046;
        _2145 = _2047;
        _2147 = _2048;
    }
    float _2159 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2160 = _2159 == 3.0;
    float _2162 = log2(_2147);
    float _2166 = exp2(_2162 * cbSceneParam._m0[78u].x);
    float _2167 = exp2(_2162 * cbSceneParam._m0[78u].y);
    float _2168 = exp2(_2162 * cbSceneParam._m0[78u].z);
    float _2169 = _2166 * (isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0)));
    float _2170 = _2167 * (isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0)));
    float _2171 = _2168 * (isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0)));
    float _2180 = (_2159 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2180 * (_2160 ? _2169 : (_2169 + (cbSceneParam._m0[72u].w * _2141)));
    SV_Target.y = _2180 * (_2160 ? _2170 : (_2170 + (cbSceneParam._m0[72u].w * _2143)));
    SV_Target.z = _2180 * (_2160 ? _2171 : (_2171 + (cbSceneParam._m0[72u].w * _2145)));
    SV_Target.w = _2023;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _1977) * _2018) * _2166) * _2180;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _1980) * _2018) * _2167) * _2180;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _1983) * _2018) * _2168) * _2180;
    SV_Target_1.w = _2023;
}


