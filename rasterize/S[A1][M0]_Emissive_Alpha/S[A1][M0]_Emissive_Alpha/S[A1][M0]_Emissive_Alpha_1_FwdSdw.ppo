#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A1_M0_Emissive_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_A1_M0_Emissive_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _722;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _164 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _165 = _164 * NORMAL.x;
    float _166 = _164 * NORMAL.y;
    float _167 = _164 * NORMAL.z;
    vec4 _187 = texture(sampler2D(S_A1_M0_Emissive_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _191 = _187.w * TEXCOORD_1.z;
    vec4 _207 = texture(sampler2D(S_A1_M0_Emissive_Alpha_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _221 = inversesqrt(dot(vec3(_165, _166, _167), vec3(_165, _166, _167)));
    float _222 = _221 * _165;
    float _223 = _221 * _166;
    float _224 = _221 * _167;
    float _3161 = isnan(0.0) ? _191 : (isnan(_191) ? 0.0 : max(_191, 0.0));
    float _226 = isnan(1.0) ? _3161 : (isnan(_3161) ? 1.0 : min(_3161, 1.0));
    float _3172 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _3183 = isnan(0.0) ? cbMtdParam._m0[10u].y : (isnan(cbMtdParam._m0[10u].y) ? 0.0 : max(cbMtdParam._m0[10u].y, 0.0));
    float _3194 = isnan(0.0) ? cbMtdParam._m0[10u].z : (isnan(cbMtdParam._m0[10u].z) ? 0.0 : max(cbMtdParam._m0[10u].z, 0.0));
    float _245 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _287 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _297 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _287);
    float _298 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _287);
    float _299 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _287);
    float _303 = inversesqrt(dot(vec3(_297, _298, _299), vec3(_297, _298, _299)));
    float _304 = _297 * _303;
    float _305 = _298 * _303;
    float _306 = _299 * _303;
    float _312 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _313 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _334 = fma(_224, cbSceneParam._m0[5u].z, fma(_223, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _222));
    float _337 = fma(_224, cbSceneParam._m0[6u].z, fma(_223, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _222));
    float _340 = fma(_224, cbSceneParam._m0[7u].z, fma(_223, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _222));
    uint _353 = uint(roundEven(NORMAL.w)) * 13u;
    uint _354 = _353 + 9u;
    uint _355 = _354 + uint(cbMatDynParam._m0[0u].w);
    float _361 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3172 : (isnan(_3172) ? 1.0 : min(_3172, 1.0)))) * cbInstanceData._m0[_355].x;
    float _362 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0)))) * cbInstanceData._m0[_355].y;
    float _363 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0)))) * cbInstanceData._m0[_355].z;
    float _3205 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _364 = isnan(1.0) ? _3205 : (isnan(_3205) ? 1.0 : min(_3205, 1.0));
    float _3216 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _365 = isnan(1.0) ? _3216 : (isnan(_3216) ? 1.0 : min(_3216, 1.0));
    float _3227 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _366 = isnan(1.0) ? _3227 : (isnan(_3227) ? 1.0 : min(_3227, 1.0));
    vec4 _375 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _312, cbSceneParam._m0[86u].y * _313));
    float _378 = _375.x * TEXCOORD_1.w;
    float _379 = dot(vec3(_222, _223, _224), vec3(_304, _305, _306));
    float _382 = _379 * 2.0;
    float _387 = (_382 * _222) - _304;
    float _388 = (_382 * _223) - _305;
    float _389 = (_382 * _224) - _306;
    float _411 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _415 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _419 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _721;
    float _723;
    float _724;
    float _725;
    float _726;
    float _727;
    float _728;
    float _729;
    float _730;
    float _731;
    float _732;
    float _733;
    float _734;
    float _735;
    float _736;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _446 = fma(_419, cbModelParam._m0[26u].z, fma(_415, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _411));
        float _450 = fma(_419, cbModelParam._m0[27u].z, fma(_415, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _411));
        float _454 = fma(_419, cbModelParam._m0[28u].z, fma(_415, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _411));
        float _479 = _411 + _222;
        float _480 = _415 + _223;
        float _481 = _419 + _224;
        float _491 = fma(_481, cbModelParam._m0[26u].z, fma(_480, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _479)) - _446;
        float _492 = fma(_481, cbModelParam._m0[27u].z, fma(_480, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _479)) - _450;
        float _493 = fma(_481, cbModelParam._m0[28u].z, fma(_480, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _479)) - _454;
        float _497 = inversesqrt(dot(vec3(_491, _492, _493), vec3(_491, _492, _493)));
        float _510 = ((_497 * _491) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_446 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _511 = ((_497 * _492) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_450 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _512 = ((_497 * _493) / cbModelParam._m0[34u].z) + ((((((_454 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _515 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_510, _511, _512), 0.0);
        vec4 _522 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_510, _511, _512), 0.0);
        vec4 _529 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_510, _511, _512), 0.0);
        vec4 _536 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_510, _511, _512), 0.0);
        float _549 = exp2((_515.w + (-0.5)) * 20.0) * 2.0;
        float _550 = _549 * (_515.x + (-0.5));
        float _551 = _549 * (_515.y + (-0.5));
        float _552 = _549 * (_515.z + (-0.5));
        float _559 = exp2((_522.w + (-0.5)) * 20.0) * 2.0;
        float _560 = _559 * (_522.x + (-0.5));
        float _561 = _559 * (_522.y + (-0.5));
        float _562 = _559 * (_522.z + (-0.5));
        float _569 = exp2((_529.w + (-0.5)) * 20.0) * 2.0;
        float _570 = _569 * (_529.x + (-0.5));
        float _571 = _569 * (_529.y + (-0.5));
        float _572 = _569 * (_529.z + (-0.5));
        float _579 = exp2((_536.w + (-0.5)) * 20.0) * 2.0;
        float _580 = _579 * (_536.x + (-0.5));
        float _581 = _579 * (_536.y + (-0.5));
        float _582 = _579 * (_536.z + (-0.5));
        float _583 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
        float _584 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
        float _585 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
        float _586 = _550 * 0.5;
        float _587 = _560 * 0.5;
        float _588 = _570 * 0.5;
        float _589 = dot(vec3(_586, _587, _588), vec3(_586, _587, _588));
        float _594 = (_589 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_589);
        float _603 = (dot(vec3(_222, _223, _224), vec3(_594 * _586, _594 * _587, _594 * _588)) + 1.0) * 0.5;
        float _3253 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
        float _613 = sqrt(((_587 * _587) + (_586 * _586)) + (_588 * _588)) / (_583 + 9.9999997473787516355514526367188e-06);
        float _3264 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
        float _614 = isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0));
        float _615 = _614 * 2.0;
        float _619 = (1.0 - _614) / (_614 + 1.0);
        float _3275 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
        float _620 = isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0));
        float _629 = ((((1.0 - _620) * (_615 + 2.0)) * exp2(log2(isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0))) * (_615 + 1.0))) + _620) * _583;
        float _630 = _551 * 0.5;
        float _631 = _561 * 0.5;
        float _632 = _571 * 0.5;
        float _633 = dot(vec3(_630, _631, _632), vec3(_630, _631, _632));
        float _638 = (_633 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_633);
        float _646 = (dot(vec3(_222, _223, _224), vec3(_638 * _630, _638 * _631, _638 * _632)) + 1.0) * 0.5;
        float _3286 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
        float _655 = sqrt(((_631 * _631) + (_630 * _630)) + (_632 * _632)) / (_584 + 9.9999997473787516355514526367188e-06);
        float _3297 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
        float _656 = isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0));
        float _657 = _656 * 2.0;
        float _661 = (1.0 - _656) / (_656 + 1.0);
        float _3308 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
        float _662 = isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0));
        float _671 = ((((1.0 - _662) * (_657 + 2.0)) * exp2(log2(isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0))) * (_657 + 1.0))) + _662) * _584;
        float _672 = _552 * 0.5;
        float _673 = _562 * 0.5;
        float _674 = _572 * 0.5;
        float _675 = dot(vec3(_672, _673, _674), vec3(_672, _673, _674));
        float _680 = (_675 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_675);
        float _688 = (dot(vec3(_222, _223, _224), vec3(_680 * _672, _680 * _673, _680 * _674)) + 1.0) * 0.5;
        float _3319 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
        float _697 = sqrt(((_673 * _673) + (_672 * _672)) + (_674 * _674)) / (_585 + 9.9999997473787516355514526367188e-06);
        float _3330 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
        float _698 = isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0));
        float _699 = _698 * 2.0;
        float _703 = (1.0 - _698) / (_698 + 1.0);
        float _3341 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _704 = isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0));
        float _713 = ((((1.0 - _704) * (_699 + 2.0)) * exp2(log2(isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0))) * (_699 + 1.0))) + _704) * _585;
        _721 = _552;
        _723 = _551;
        _724 = _550;
        _725 = _562;
        _726 = _561;
        _727 = _560;
        _728 = _572;
        _729 = _571;
        _730 = _570;
        _731 = _585;
        _732 = _584;
        _733 = _583;
        _734 = cbModelParam._m0[36u].z * (isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0)));
        _735 = cbModelParam._m0[36u].z * (isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0)));
        _736 = cbModelParam._m0[36u].z * (isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0)));
    }
    else
    {
        _721 = _722;
        _723 = _722;
        _724 = _722;
        _725 = _722;
        _726 = _722;
        _727 = _722;
        _728 = _722;
        _729 = _722;
        _730 = _722;
        _731 = _722;
        _732 = _722;
        _733 = _722;
        _734 = 0.0;
        _735 = 0.0;
        _736 = 0.0;
    }
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _762 = fma(_419, cbModelParam._m0[30u].z, fma(_415, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _411));
        float _766 = fma(_419, cbModelParam._m0[31u].z, fma(_415, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _411));
        float _770 = fma(_419, cbModelParam._m0[32u].z, fma(_415, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _411));
        float _793 = _411 + _222;
        float _794 = _415 + _223;
        float _795 = _419 + _224;
        float _805 = fma(_795, cbModelParam._m0[30u].z, fma(_794, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _793)) - _762;
        float _806 = fma(_795, cbModelParam._m0[31u].z, fma(_794, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _793)) - _766;
        float _807 = fma(_795, cbModelParam._m0[32u].z, fma(_794, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _793)) - _770;
        float _811 = inversesqrt(dot(vec3(_805, _806, _807), vec3(_805, _806, _807)));
        float _824 = ((_811 * _805) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_762 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _825 = ((_811 * _806) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_766 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _826 = ((_811 * _807) / cbModelParam._m0[35u].z) + ((((((_770 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _828 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        vec4 _835 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        vec4 _842 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        vec4 _849 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        float _861 = exp2((_828.w + (-0.5)) * 20.0) * 2.0;
        float _862 = _861 * (_828.x + (-0.5));
        float _863 = _861 * (_828.y + (-0.5));
        float _864 = _861 * (_828.z + (-0.5));
        float _871 = exp2((_835.w + (-0.5)) * 20.0) * 2.0;
        float _872 = _871 * (_835.x + (-0.5));
        float _873 = _871 * (_835.y + (-0.5));
        float _874 = _871 * (_835.z + (-0.5));
        float _881 = exp2((_842.w + (-0.5)) * 20.0) * 2.0;
        float _882 = _881 * (_842.x + (-0.5));
        float _883 = _881 * (_842.y + (-0.5));
        float _884 = _881 * (_842.z + (-0.5));
        float _891 = exp2((_849.w + (-0.5)) * 20.0) * 2.0;
        float _892 = _891 * (_849.x + (-0.5));
        float _893 = _891 * (_849.y + (-0.5));
        float _894 = _891 * (_849.z + (-0.5));
        float _895 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _896 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _897 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _898 = _862 * 0.5;
        float _899 = _872 * 0.5;
        float _900 = _882 * 0.5;
        float _901 = dot(vec3(_898, _899, _900), vec3(_898, _899, _900));
        float _906 = (_901 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_901);
        float _914 = (dot(vec3(_222, _223, _224), vec3(_906 * _898, _906 * _899, _906 * _900)) + 1.0) * 0.5;
        float _3382 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _923 = sqrt(((_899 * _899) + (_898 * _898)) + (_900 * _900)) / (_895 + 9.9999997473787516355514526367188e-06);
        float _3393 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _924 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
        float _925 = _924 * 2.0;
        float _929 = (1.0 - _924) / (_924 + 1.0);
        float _3404 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
        float _939 = ((((1.0 - _930) * (_925 + 2.0)) * exp2(log2(isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0))) * (_925 + 1.0))) + _930) * _895;
        float _940 = _863 * 0.5;
        float _941 = _873 * 0.5;
        float _942 = _883 * 0.5;
        float _943 = dot(vec3(_940, _941, _942), vec3(_940, _941, _942));
        float _948 = (_943 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_943);
        float _956 = (dot(vec3(_222, _223, _224), vec3(_948 * _940, _948 * _941, _948 * _942)) + 1.0) * 0.5;
        float _3415 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _965 = sqrt(((_941 * _941) + (_940 * _940)) + (_942 * _942)) / (_896 + 9.9999997473787516355514526367188e-06);
        float _3426 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _966 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
        float _967 = _966 * 2.0;
        float _971 = (1.0 - _966) / (_966 + 1.0);
        float _3437 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
        float _981 = ((((1.0 - _972) * (_967 + 2.0)) * exp2(log2(isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0))) * (_967 + 1.0))) + _972) * _896;
        float _982 = _864 * 0.5;
        float _983 = _874 * 0.5;
        float _984 = _884 * 0.5;
        float _985 = dot(vec3(_982, _983, _984), vec3(_982, _983, _984));
        float _990 = (_985 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_985);
        float _998 = (dot(vec3(_222, _223, _224), vec3(_990 * _982, _990 * _983, _990 * _984)) + 1.0) * 0.5;
        float _3448 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1007 = sqrt(((_983 * _983) + (_982 * _982)) + (_984 * _984)) / (_897 + 9.9999997473787516355514526367188e-06);
        float _3459 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
        float _1009 = _1008 * 2.0;
        float _1013 = (1.0 - _1008) / (_1008 + 1.0);
        float _3470 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
        float _1023 = ((((1.0 - _1014) * (_1009 + 2.0)) * exp2(log2(isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0))) * (_1009 + 1.0))) + _1014) * _897;
        _1031 = _864;
        _1032 = _863;
        _1033 = _862;
        _1034 = _874;
        _1035 = _873;
        _1036 = _872;
        _1037 = _884;
        _1038 = _883;
        _1039 = _882;
        _1040 = _897;
        _1041 = _896;
        _1042 = _895;
        _1043 = cbModelParam._m0[36u].w * (isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0)));
        _1044 = cbModelParam._m0[36u].w * (isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0)));
        _1045 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0)));
    }
    else
    {
        _1031 = _722;
        _1032 = _722;
        _1033 = _722;
        _1034 = _722;
        _1035 = _722;
        _1036 = _722;
        _1037 = _722;
        _1038 = _722;
        _1039 = _722;
        _1040 = _722;
        _1041 = _722;
        _1042 = _722;
        _1043 = 0.0;
        _1044 = 0.0;
        _1045 = 0.0;
    }
    float _1055 = (cbModelParam._m0[1u].x * (_1043 - _734)) + _734;
    float _1056 = (cbModelParam._m0[1u].x * (_1044 - _735)) + _735;
    float _1057 = (cbModelParam._m0[1u].x * (_1045 - _736)) + _736;
    float _1078 = fma(_1057, cbSceneParam._m0[89u].z, fma(_1056, cbSceneParam._m0[89u].y, _1055 * cbSceneParam._m0[89u].x));
    float _1081 = fma(_1057, cbSceneParam._m0[90u].z, fma(_1056, cbSceneParam._m0[90u].y, _1055 * cbSceneParam._m0[90u].x));
    float _1084 = fma(_1057, cbSceneParam._m0[91u].z, fma(_1056, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1055));
    float _1099 = _387 * 0.5;
    float _1100 = _388 * 0.5;
    float _1101 = _389 * 0.5;
    float _1102 = dot(vec4(_1099, _1100, _1101, 1.0), vec4(_1033, _1036, _1039, _1042));
    float _1105 = dot(vec4(_1099, _1100, _1101, 1.0), vec4(_1032, _1035, _1038, _1041));
    float _1108 = dot(vec4(_1099, _1100, _1101, 1.0), vec4(_1031, _1034, _1037, _1040));
    float _1142;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1115 = dot(vec4(_1099, _1100, _1101, 1.0), vec4(_721, _725, _728, _731));
        float _1119 = dot(vec4(_1099, _1100, _1101, 1.0), vec4(_723, _726, _729, _732));
        float _1123 = dot(vec4(_1099, _1100, _1101, 1.0), vec4(_724, _727, _730, _733));
        float _1130 = dot(vec4(cbModelParam._m0[39u]), vec4(_1099, _1100, _1101, 1.0));
        _1142 = dot(vec3(isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0)), isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0)), isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1130) ? 0.0 : (isnan(0.0) ? _1130 : max(0.0, _1130))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1142 = 1.0;
    }
    float _1153;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1144 = dot(vec4(cbModelParam._m0[40u]), vec4(_1099, _1100, _1101, 1.0));
        _1153 = dot(vec3(isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0)), isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)), isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1144) ? 0.0 : (isnan(0.0) ? _1144 : max(0.0, _1144))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1153 = 1.0;
    }
    float _1157 = (_1153 * cbModelParam._m0[1u].x) + (_1142 * (1.0 - cbModelParam._m0[1u].x));
    float _1166 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1248;
    float _1250;
    float _1252;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1215 = fma(_419, cbModelParam._m0[13u].z, fma(_415, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _411)) + cbModelParam._m0[13u].w;
        float _1219 = fma(_419, cbModelParam._m0[14u].z, fma(_415, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _411)) + cbModelParam._m0[14u].w;
        float _1223 = fma(_419, cbModelParam._m0[15u].z, fma(_415, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _411)) + cbModelParam._m0[15u].w;
        float _1226 = fma(_389, cbModelParam._m0[13u].z, fma(_388, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _387));
        float _1229 = fma(_389, cbModelParam._m0[14u].z, fma(_388, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _387));
        float _1232 = fma(_389, cbModelParam._m0[15u].z, fma(_388, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _387));
        float _1258;
        if (_1226 > 0.0)
        {
            _1258 = abs((1.0 - _1215) / _1226);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1226 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1215 + 1.0) / _1226);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1258 = frontier_phi_14_12_ladder;
        }
        float _1432;
        if (_1229 > 0.0)
        {
            _1432 = abs((1.0 - _1219) / _1229);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1229 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1219 + 1.0) / _1229);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1432 = frontier_phi_23_19_ladder;
        }
        float _1729;
        if (_1232 > 0.0)
        {
            _1729 = abs((1.0 - _1223) / _1232);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1232 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1223 + 1.0) / _1232);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1729 = frontier_phi_35_30_ladder;
        }
        float _1731 = isnan(_1432) ? _1258 : (isnan(_1258) ? _1432 : min(_1258, _1432));
        float _1732 = isnan(_1729) ? _1731 : (isnan(_1731) ? _1729 : min(_1731, _1729));
        float _1736 = (_1732 * _1226) + _1215;
        float _1737 = (_1732 * _1229) + _1219;
        float _1738 = (_1732 * _1232) + _1223;
        float _1739 = _1732 * 9.9999997473787516355514526367188e-05;
        float _1741 = (-1.0) - _1739;
        float _1743 = _1739 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1738 > _1743) || ((_1738 < _1741) || ((_1737 > _1743) || ((_1737 < _1741) || ((_1736 < _1741) || (_1736 > _1743))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1883 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1738, cbModelParam._m0[9u].z, fma(_1737, cbModelParam._m0[9u].y, _1736 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1738, cbModelParam._m0[10u].z, fma(_1737, cbModelParam._m0[10u].y, _1736 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1738, cbModelParam._m0[11u].z, fma(_1737, cbModelParam._m0[11u].y, _1736 * cbModelParam._m0[11u].x))), _1166);
            frontier_phi_13_35_ladder = _1883.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1883.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1883.x * cbModelParam._m0[1u].y;
        }
        _1248 = frontier_phi_13_35_ladder_2;
        _1250 = frontier_phi_13_35_ladder_1;
        _1252 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1236 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_387, _388, _389), _1166);
        _1248 = _1236.x * cbModelParam._m0[1u].y;
        _1250 = _1236.y * cbModelParam._m0[1u].y;
        _1252 = _1236.z * cbModelParam._m0[1u].y;
    }
    float _1255 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1348;
    float _1350;
    float _1352;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1312 = fma(_419, cbModelParam._m0[21u].z, fma(_415, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _411)) + cbModelParam._m0[21u].w;
        float _1316 = fma(_419, cbModelParam._m0[22u].z, fma(_415, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _411)) + cbModelParam._m0[22u].w;
        float _1320 = fma(_419, cbModelParam._m0[23u].z, fma(_415, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _411)) + cbModelParam._m0[23u].w;
        float _1323 = fma(_389, cbModelParam._m0[21u].z, fma(_388, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _387));
        float _1326 = fma(_389, cbModelParam._m0[22u].z, fma(_388, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _387));
        float _1329 = fma(_389, cbModelParam._m0[23u].z, fma(_388, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _387));
        float _1437;
        if (_1323 > 0.0)
        {
            _1437 = abs((1.0 - _1312) / _1323);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1323 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1312 + 1.0) / _1323);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1437 = frontier_phi_25_21_ladder;
        }
        float _1756;
        if (_1326 > 0.0)
        {
            _1756 = abs((1.0 - _1316) / _1326);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1326 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1316 + 1.0) / _1326);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1756 = frontier_phi_37_32_ladder;
        }
        float _2029;
        if (_1329 > 0.0)
        {
            _2029 = abs((1.0 - _1320) / _1329);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1329 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1320 + 1.0) / _1329);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2029 = frontier_phi_47_44_ladder;
        }
        float _2031 = isnan(_1756) ? _1437 : (isnan(_1437) ? _1756 : min(_1437, _1756));
        float _2032 = isnan(_2029) ? _2031 : (isnan(_2031) ? _2029 : min(_2031, _2029));
        float _2036 = (_2032 * _1323) + _1312;
        float _2037 = (_2032 * _1326) + _1316;
        float _2038 = (_2032 * _1329) + _1320;
        float _2039 = _2032 * 9.9999997473787516355514526367188e-05;
        float _2040 = (-1.0) - _2039;
        float _2042 = _2039 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2038 > _2042) || ((_2038 < _2040) || ((_2037 > _2042) || ((_2037 < _2040) || ((_2036 < _2040) || (_2036 > _2042))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2129 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2038, cbModelParam._m0[17u].z, fma(_2037, cbModelParam._m0[17u].y, _2036 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2038, cbModelParam._m0[18u].z, fma(_2037, cbModelParam._m0[18u].y, _2036 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2038, cbModelParam._m0[19u].z, fma(_2037, cbModelParam._m0[19u].y, _2036 * cbModelParam._m0[19u].x))), _1255);
            frontier_phi_22_47_ladder = _2129.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2129.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2129.x * cbModelParam._m0[1u].z;
        }
        _1348 = frontier_phi_22_47_ladder_2;
        _1350 = frontier_phi_22_47_ladder_1;
        _1352 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1332 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_387, _388, _389), _1255);
        _1348 = _1332.x * cbModelParam._m0[1u].z;
        _1350 = _1332.y * cbModelParam._m0[1u].z;
        _1352 = _1332.z * cbModelParam._m0[1u].z;
    }
    float _1364 = _378 * 0.01200000010430812835693359375;
    float _1366 = _1364 * ((cbModelParam._m0[1u].w * (_1348 - _1248)) + _1248);
    float _1367 = _1364 * ((cbModelParam._m0[1u].w * (_1350 - _1250)) + _1250);
    float _1368 = _1364 * ((cbModelParam._m0[1u].w * (_1352 - _1252)) + _1252);
    float _1371 = fma(_1368, cbSceneParam._m0[89u].z, fma(_1367, cbSceneParam._m0[89u].y, _1366 * cbSceneParam._m0[89u].x));
    float _1374 = fma(_1368, cbSceneParam._m0[90u].z, fma(_1367, cbSceneParam._m0[90u].y, _1366 * cbSceneParam._m0[90u].x));
    float _1377 = fma(_1368, cbSceneParam._m0[91u].z, fma(_1367, cbSceneParam._m0[91u].y, _1366 * cbSceneParam._m0[91u].x));
    float _1411 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1415 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1419 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1423 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1424 = _1411 / _1423;
    float _1425 = _1415 / _1423;
    float _1426 = _1419 / _1423;
    float _1573;
    float _1574;
    float _1575;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1453 = ((uint(_1426 > cbSceneParam._m0[59u].y) + uint(_1426 > cbSceneParam._m0[59u].x)) + uint(_1426 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1454 = _1453 + 43u;
        uint _1462 = _1453 + 44u;
        uint _1470 = _1453 + 45u;
        uint _1478 = _1453 + 46u;
        float _1489 = fma(_1423, cbSceneParam._m0[_1454].w, fma(_1419, cbSceneParam._m0[_1454].z, fma(_1415, cbSceneParam._m0[_1454].y, _1411 * cbSceneParam._m0[_1454].x)));
        float _1493 = fma(_1423, cbSceneParam._m0[_1462].w, fma(_1419, cbSceneParam._m0[_1462].z, fma(_1415, cbSceneParam._m0[_1462].y, _1411 * cbSceneParam._m0[_1462].x)));
        float _1501 = fma(_1423, cbSceneParam._m0[_1478].w, fma(_1419, cbSceneParam._m0[_1478].z, fma(_1415, cbSceneParam._m0[_1478].y, _1411 * cbSceneParam._m0[_1478].x)));
        float _1506 = cbSceneParam._m0[33u].z * _1501;
        float _1508 = cbSceneParam._m0[33u].w * _1501;
        float _1511 = fma(_1423, cbSceneParam._m0[_1470].w, fma(_1419, cbSceneParam._m0[_1470].z, fma(_1415, cbSceneParam._m0[_1470].y, _1411 * cbSceneParam._m0[_1470].x))) / _1501;
        float _1559 = (cbSceneParam._m0[33u].x - sqrt(((_1425 * _1425) + (_1424 * _1424)) + (_1426 * _1426))) * cbSceneParam._m0[33u].y;
        float _3596 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1566 = (isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1506 + _1489) / _1501, (_1508 + _1493) / _1501), _1511), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1508 + _1489) / _1501, (_1493 - _1506) / _1501), _1511), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1489 - _1506) / _1501, (_1493 - _1508) / _1501), _1511), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1489 - _1508) / _1501, (_1506 + _1493) / _1501), _1511), 0.0)).x), vec4(0.25)));
        _1573 = 1.0 - (_1566 * cbSceneParam._m0[34u].x);
        _1574 = 1.0 - (_1566 * cbSceneParam._m0[34u].y);
        _1575 = 1.0 - (_1566 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1573 = 1.0;
        _1574 = 1.0;
        _1575 = 1.0;
    }
    float _1639;
    float _1641;
    float _1643;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1627 = fma(_1423, cbSceneParam._m0[63u].w, fma(_1419, cbSceneParam._m0[63u].z, fma(_1415, cbSceneParam._m0[63u].y, _1411 * cbSceneParam._m0[63u].x)));
        float _1628 = fma(_1423, cbSceneParam._m0[60u].w, fma(_1419, cbSceneParam._m0[60u].z, fma(_1415, cbSceneParam._m0[60u].y, _1411 * cbSceneParam._m0[60u].x))) / _1627;
        float _1629 = fma(_1423, cbSceneParam._m0[61u].w, fma(_1419, cbSceneParam._m0[61u].z, fma(_1415, cbSceneParam._m0[61u].y, _1411 * cbSceneParam._m0[61u].x))) / _1627;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1628 >= cbSceneParam._m0[64u].x) && (_1629 >= cbSceneParam._m0[64u].y)) && (_1628 <= cbSceneParam._m0[64u].z)) && (_1629 <= cbSceneParam._m0[64u].w))
        {
            float _1769 = fma(_1423, cbSceneParam._m0[62u].w, fma(_1419, cbSceneParam._m0[62u].z, fma(_1415, cbSceneParam._m0[62u].y, _1411 * cbSceneParam._m0[62u].x))) / _1627;
            float _1773 = isnan(cbSceneParam._m0[41u].w) ? _1769 : (isnan(_1769) ? cbSceneParam._m0[41u].w : max(_1769, cbSceneParam._m0[41u].w));
            float _1816 = (cbSceneParam._m0[33u].x - sqrt(((_1425 * _1425) + (_1424 * _1424)) + (_1426 * _1426))) * cbSceneParam._m0[33u].y;
            float _3612 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
            float _1823 = (isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1628, cbSceneParam._m0[33u].w + _1629), _1773), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1628, _1629 - cbSceneParam._m0[33u].z), _1773), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1628 - cbSceneParam._m0[33u].z, _1629 - cbSceneParam._m0[33u].w), _1773), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1628 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1629), _1773), 0.0)).x), vec4(0.25)));
            float _1827 = 1.0 - (_1823 * cbSceneParam._m0[34u].x);
            float _1828 = 1.0 - (_1823 * cbSceneParam._m0[34u].y);
            float _1829 = 1.0 - (_1823 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1829) ? _1575 : (isnan(_1575) ? _1829 : min(_1575, _1829));
            frontier_phi_34_33_ladder_1 = isnan(_1828) ? _1574 : (isnan(_1574) ? _1828 : min(_1574, _1828));
            frontier_phi_34_33_ladder_2 = isnan(_1827) ? _1573 : (isnan(_1573) ? _1827 : min(_1573, _1827));
        }
        else
        {
            frontier_phi_34_33_ladder = _1575;
            frontier_phi_34_33_ladder_1 = _1574;
            frontier_phi_34_33_ladder_2 = _1573;
        }
        _1639 = frontier_phi_34_33_ladder_2;
        _1641 = frontier_phi_34_33_ladder_1;
        _1643 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1639 = _1573;
        _1641 = _1574;
        _1643 = _1575;
    }
    uvec4 _1648 = floatBitsToUint(cbInstanceData._m0[_353 + 5u]);
    uint _1650 = _1648.x * 14u;
    uint _1651 = _1650 + 13u;
    float _1658 = _378 + (-1.0);
    float _1664 = (cbLight._m0[_1651].x * _1658) + 1.0;
    float _1665 = (cbLight._m0[_1651].y * _1658) + 1.0;
    float _1666 = (cbLight._m0[_1651].z * _1658) + 1.0;
    float _1667 = (cbLight._m0[_1651].w * _1658) + 1.0;
    uint _1668 = _1650 + 5u;
    float _1674 = isnan(1.0) ? _1665 : (isnan(_1665) ? 1.0 : min(_1665, 1.0));
    uint _1678 = _1650 + 4u;
    float _1688 = isnan(1.0) ? _1664 : (isnan(_1664) ? 1.0 : min(_1664, 1.0));
    uint _1692 = _1650 | 1u;
    float _1703 = dot(vec3(cbLight._m0[_1650].xyz), vec3(_222, _223, _224));
    float _1706 = dot(vec3(cbLight._m0[_1692].xyz), vec3(_222, _223, _224));
    float _3648 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
    float _3659 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
    float _1711 = (isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0))) * 0.3183098733425140380859375;
    float _1713 = (isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * 0.3183098733425140380859375;
    float _1720 = ((cbLight._m0[_1668].x * _1674) * _1713) + (((cbLight._m0[_1678].x * _1639) * _1688) * _1711);
    float _1721 = ((_1674 * cbLight._m0[_1668].y) * _1713) + (((cbLight._m0[_1678].y * _1641) * _1688) * _1711);
    float _1722 = ((_1674 * cbLight._m0[_1668].z) * _1713) + (((cbLight._m0[_1678].z * _1643) * _1688) * _1711);
    uvec4 _1726 = floatBitsToUint(cbLight._m0[_1650 + 12u]);
    bool _1728 = _1726.x == 0u;
    float _1830;
    float _1832;
    float _1834;
    if (_1728)
    {
        _1830 = _1720;
        _1832 = _1721;
        _1834 = _1722;
    }
    else
    {
        uint _1838 = _1650 + 6u;
        float _1854 = (dot(vec3(cbLight._m0[_1650 + 2u].xyz), vec3(_222, _223, _224)) * 0.5) + 0.5;
        float _1855 = _1854 * _1854;
        float _3670 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1856 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _1857 = isnan(1.0) ? _1666 : (isnan(_1666) ? 1.0 : min(_1666, 1.0));
        _1830 = (((cbLight._m0[_1838].x * 0.3183098733425140380859375) * _1856) * _1857) + _1720;
        _1832 = (((cbLight._m0[_1838].y * 0.3183098733425140380859375) * _1856) * _1857) + _1721;
        _1834 = (((cbLight._m0[_1838].z * 0.3183098733425140380859375) * _1856) * _1857) + _1722;
    }
    bool _1837 = _1726.y == 0u;
    float _1892;
    float _1894;
    float _1896;
    if (_1837)
    {
        _1892 = _1830;
        _1894 = _1832;
        _1896 = _1834;
    }
    else
    {
        uint _2000 = _1650 + 7u;
        float _2016 = (dot(vec3(cbLight._m0[_1650 + 3u].xyz), vec3(_222, _223, _224)) * 0.5) + 0.5;
        float _2017 = _2016 * _2016;
        float _3686 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
        float _2018 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _2019 = isnan(1.0) ? _1667 : (isnan(_1667) ? 1.0 : min(_1667, 1.0));
        _1892 = (((cbLight._m0[_2000].x * 0.3183098733425140380859375) * _2018) * _2019) + _1830;
        _1894 = (((cbLight._m0[_2000].y * 0.3183098733425140380859375) * _2018) * _2019) + _1832;
        _1896 = (((cbLight._m0[_2000].z * 0.3183098733425140380859375) * _2018) * _2019) + _1834;
    }
    uint _1898 = _1650 + 8u;
    float _1904 = cbLight._m0[_1650].x + _304;
    float _1905 = cbLight._m0[_1650].y + _305;
    float _1906 = cbLight._m0[_1650].z + _306;
    float _1910 = inversesqrt(dot(vec3(_1904, _1905, _1906), vec3(_1904, _1905, _1906)));
    float _1914 = dot(vec3(_222, _223, _224), vec3(cbLight._m0[_1650].xyz));
    float _3702 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _1917 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _3713 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _1918 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _1919 = dot(vec3(cbLight._m0[_1650].xyz), vec3(_1904 * _1910, _1905 * _1910, _1906 * _1910));
    float _3724 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _1930 = (exp2(log2(1.0 - (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1936 = (0.5 / ((_1917 + 9.9999999392252902907785028219223e-09) + _1918)) * _1917;
    float _3735 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1938 = (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * 0.31831014156341552734375;
    uint _1952 = _1650 + 9u;
    float _1958 = cbLight._m0[_1692].x + _304;
    float _1959 = cbLight._m0[_1692].y + _305;
    float _1960 = cbLight._m0[_1692].z + _306;
    float _1964 = inversesqrt(dot(vec3(_1958, _1959, _1960), vec3(_1958, _1959, _1960)));
    float _1968 = dot(vec3(_222, _223, _224), vec3(cbLight._m0[_1692].xyz));
    float _3746 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1971 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _1972 = dot(vec3(cbLight._m0[_1692].xyz), vec3(_1958 * _1964, _1959 * _1964, _1960 * _1964));
    float _3757 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1981 = (exp2(log2(1.0 - (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1985 = (0.5 / ((_1971 + 9.9999999392252902907785028219223e-09) + _1918)) * _1971;
    float _3768 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1987 = (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * 0.31831014156341552734375;
    float _1997 = (((_1981 * cbLight._m0[_1952].x) * _1987) * _1674) + ((((cbLight._m0[_1898].x * _1639) * _1930) * _1938) * _1688);
    float _1998 = (((_1981 * cbLight._m0[_1952].y) * _1987) * _1674) + ((((cbLight._m0[_1898].y * _1641) * _1930) * _1938) * _1688);
    float _1999 = (((_1981 * cbLight._m0[_1952].z) * _1987) * _1674) + ((((cbLight._m0[_1898].z * _1643) * _1930) * _1938) * _1688);
    float _2055;
    float _2057;
    float _2059;
    if (_1728)
    {
        _2055 = _1997;
        _2057 = _1998;
        _2059 = _1999;
    }
    else
    {
        uint _2061 = _1650 + 10u;
        uint _2067 = _1650 + 2u;
        float _2073 = cbLight._m0[_2067].x + _304;
        float _2074 = cbLight._m0[_2067].y + _305;
        float _2075 = cbLight._m0[_2067].z + _306;
        float _2079 = inversesqrt(dot(vec3(_2073, _2074, _2075), vec3(_2073, _2074, _2075)));
        float _2083 = dot(vec3(_222, _223, _224), vec3(cbLight._m0[_2067].xyz));
        float _3779 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2086 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _2087 = dot(vec3(cbLight._m0[_2067].xyz), vec3(_2073 * _2079, _2074 * _2079, _2075 * _2079));
        float _3790 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
        float _2096 = (exp2(log2(1.0 - (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2100 = (0.5 / ((_2086 + 9.9999999392252902907785028219223e-09) + _1918)) * _2086;
        float _3801 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2102 = (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * 0.31831014156341552734375;
        float _2103 = isnan(1.0) ? _1666 : (isnan(_1666) ? 1.0 : min(_1666, 1.0));
        _2055 = (((_2096 * cbLight._m0[_2061].x) * _2102) * _2103) + _1997;
        _2057 = (((_2096 * cbLight._m0[_2061].y) * _2102) * _2103) + _1998;
        _2059 = (((_2096 * cbLight._m0[_2061].z) * _2102) * _2103) + _1999;
    }
    float _2134;
    float _2136;
    float _2138;
    if (_1837)
    {
        _2134 = _2055;
        _2136 = _2057;
        _2138 = _2059;
    }
    else
    {
        uint _2145 = _1650 + 11u;
        uint _2151 = _1650 + 3u;
        float _2157 = cbLight._m0[_2151].x + _304;
        float _2158 = cbLight._m0[_2151].y + _305;
        float _2159 = cbLight._m0[_2151].z + _306;
        float _2163 = inversesqrt(dot(vec3(_2157, _2158, _2159), vec3(_2157, _2158, _2159)));
        float _2167 = dot(vec3(_222, _223, _224), vec3(cbLight._m0[_2151].xyz));
        float _3817 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
        float _2170 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _2171 = dot(vec3(cbLight._m0[_2151].xyz), vec3(_2157 * _2163, _2158 * _2163, _2159 * _2163));
        float _3828 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
        float _2180 = (exp2(log2(1.0 - (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2184 = (0.5 / ((_2170 + 9.9999999392252902907785028219223e-09) + _1918)) * _2170;
        float _3839 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
        float _2186 = (isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * 0.31831014156341552734375;
        float _2187 = isnan(1.0) ? _1667 : (isnan(_1667) ? 1.0 : min(_1667, 1.0));
        _2134 = (((_2180 * cbLight._m0[_2145].x) * _2186) * _2187) + _2055;
        _2136 = (((_2180 * cbLight._m0[_2145].y) * _2186) * _2187) + _2057;
        _2138 = (((_2180 * cbLight._m0[_2145].z) * _2186) * _2187) + _2059;
    }
    float _2253;
    float _2255;
    float _2257;
    float _2259;
    float _2261;
    float _2263;
    if (_1648.y == 0u)
    {
        uvec4 _2208 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2209 = _2208.x;
        uint _2220 = uint((float(_2208.y) * floor(float(uint(cbSceneParam._m0[85u].y * _313) / _2209))) + floor(float(uint(cbSceneParam._m0[85u].x * _312) / _2209)));
        float _2230 = (log2(_1426 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2231 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        uint _2234 = uint(isnan(14.0) ? _2231 : (isnan(_2231) ? 14.0 : min(_2231, 14.0)));
        uvec4 _2239 = texelFetch(g_lightClusterGridBuffer, int(((_2234 << 2u) + (_2220 << 6u)) >> 2u));
        uint _2240 = _2239.x;
        uint _2241 = _2208.z;
        float _2357;
        float _2359;
        float _2361;
        float _2363;
        float _2365;
        float _2367;
        if (((((1u << ((_2241 >> 4u) & 15u)) + 4294967295u) & _2240) == 0u) || ((_2241 & 240u) == 0u))
        {
            _2357 = 0.0;
            _2359 = 0.0;
            _2361 = 0.0;
            _2363 = 0.0;
            _2365 = 0.0;
            _2367 = 0.0;
        }
        else
        {
            float _2358;
            float _2360;
            float _2362;
            float _2364;
            float _2366;
            float _2368;
            float _2509 = 0.0;
            float _2510 = 0.0;
            float _2511 = 0.0;
            float _2512 = 0.0;
            float _2513 = 0.0;
            float _2514 = 0.0;
            uint _2515 = 0u;
            uint _2524;
            bool _2525;
            for (;;)
            {
                _2524 = texelFetch(g_lightClassification, int((((_2234 << 5u) + (_2220 << 9u)) + (_2515 << 2u)) >> 2u)).x;
                _2525 = _2524 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2525)
                {
                    frontier_phi_66_pred = _2514;
                    frontier_phi_66_pred_1 = _2513;
                    frontier_phi_66_pred_2 = _2512;
                    frontier_phi_66_pred_3 = _2511;
                    frontier_phi_66_pred_4 = _2510;
                    frontier_phi_66_pred_5 = _2509;
                }
                else
                {
                    float _2633;
                    float _2634;
                    float _2635;
                    float _2636;
                    float _2637;
                    float _2638;
                    uint _2639;
                    _2633 = _2509;
                    _2634 = _2510;
                    _2635 = _2511;
                    _2636 = _2512;
                    _2637 = _2513;
                    _2638 = _2514;
                    _2639 = _2524;
                    float _2565;
                    float _2566;
                    float _2567;
                    float _2568;
                    float _2569;
                    float _2570;
                    for (;;)
                    {
                        uint _2643 = uint(findLSB(_2639)) + (_2515 << 5u);
                        uint _2640 = (_2639 + 4294967295u) & _2639;
                        uint _2645 = _2643 * 48u;
                        vec4 _2659 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2645)).x, texelFetch(g_PointLightRenderingBuffer, int(_2645 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2645 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2645 + 3u)).x));
                        uint _2665 = (_2643 * 48u) + 4u;
                        vec4 _2678 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2665)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 3u)).x));
                        uint _2684 = (_2643 * 48u) + 8u;
                        vec3 _2695 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2684)).x, texelFetch(g_PointLightRenderingBuffer, int(_2684 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2684 + 2u)).x));
                        float _2699 = _2659.x - _1424;
                        float _2700 = _2659.y - _1425;
                        float _2701 = _2659.z - _1426;
                        float _2702 = dot(vec3(_2699, _2700, _2701), vec3(_2699, _2700, _2701));
                        float _2705 = inversesqrt(_2702);
                        float _2714 = 1.0 - (_2702 * _2659.w);
                        float _3865 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
                        float _2715 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
                        float _2716 = sqrt(_2702) * _2678.w;
                        float _2719 = 1.39999997615814208984375 / (_2716 + 1.39999997615814208984375);
                        float _2720 = _2719 * _2719;
                        float _2723 = ((1.0 - _2720) * dot(vec3(_334, _337, _340), vec3(_2705 * _2699, _2705 * _2700, _2705 * _2701))) + _2720;
                        float _2726 = _2716 * _2716;
                        float _2730 = ((isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0))) * _2715) / ((_2726 * 0.699999988079071044921875) + 1.0);
                        float _2734 = (-0.0) - _1424;
                        float _2735 = (-0.0) - _1425;
                        float _2736 = (-0.0) - _1426;
                        float _2740 = inversesqrt(dot(vec3(_2734, _2735, _2736), vec3(_2734, _2735, _2736)));
                        float _2744 = dot(vec3(_334, _337, _340), vec3(_2740 * _2734, _2740 * _2735, _2740 * _2736));
                        float _3881 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
                        float _3892 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
                        float _2748 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
                        float _2752 = (0.5 / (((isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) + 9.9999999392252902907785028219223e-09) + _2748)) * _2748;
                        float _3903 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
                        float _2761 = (((isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * 3.1415927410125732421875) / ((_2726 * 2.1991131305694580078125) + 3.141590118408203125)) * _2715;
                        _2568 = (_2730 * _2678.x) + _2636;
                        _2569 = (_2730 * _2678.y) + _2637;
                        _2570 = (_2730 * _2678.z) + _2638;
                        _2565 = (_2761 * _2695.x) + _2633;
                        _2566 = (_2761 * _2695.y) + _2634;
                        _2567 = (_2761 * _2695.z) + _2635;
                        if (_2640 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2633 = _2565;
                            _2634 = _2566;
                            _2635 = _2567;
                            _2636 = _2568;
                            _2637 = _2569;
                            _2638 = _2570;
                            _2639 = _2640;
                        }
                    }
                    frontier_phi_66_pred = _2570;
                    frontier_phi_66_pred_1 = _2569;
                    frontier_phi_66_pred_2 = _2568;
                    frontier_phi_66_pred_3 = _2567;
                    frontier_phi_66_pred_4 = _2566;
                    frontier_phi_66_pred_5 = _2565;
                }
                _2368 = frontier_phi_66_pred;
                _2366 = frontier_phi_66_pred_1;
                _2364 = frontier_phi_66_pred_2;
                _2362 = frontier_phi_66_pred_3;
                _2360 = frontier_phi_66_pred_4;
                _2358 = frontier_phi_66_pred_5;
                uint _2516 = _2515 + 1u;
                if (_2516 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2509 = _2358;
                    _2510 = _2360;
                    _2511 = _2362;
                    _2512 = _2364;
                    _2513 = _2366;
                    _2514 = _2368;
                    _2515 = _2516;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2357 = _2358;
            _2359 = _2360;
            _2361 = _2362;
            _2363 = _2364;
            _2365 = _2366;
            _2367 = _2368;
        }
        uvec4 _2371 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2372 = _2371.z;
        uint _2374 = (_2372 >> 8u) & 15u;
        float _2480;
        float _2482;
        float _2484;
        float _2486;
        float _2488;
        float _2490;
        if (((4294967295u << _2374) & _2240) == 0u)
        {
            _2480 = _2357;
            _2482 = _2359;
            _2484 = _2361;
            _2486 = _2363;
            _2488 = _2365;
            _2490 = _2367;
        }
        else
        {
            float _2505 = inversesqrt(dot(vec3(_1424, _1425, _1426), vec3(_1424, _1425, _1426)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2374 < ((_2372 >> 12u) & 15u))
            {
                float _2481;
                float _2483;
                float _2485;
                float _2487;
                float _2489;
                float _2491;
                float _2616 = _2357;
                float _2617 = _2359;
                float _2618 = _2361;
                float _2619 = _2363;
                float _2620 = _2365;
                float _2621 = _2367;
                uint _2622 = _2374;
                uint _2631;
                bool _2632;
                for (;;)
                {
                    _2631 = texelFetch(g_lightClassification, int((((_2234 << 5u) + (_2220 << 9u)) + (_2622 << 2u)) >> 2u)).x;
                    _2632 = _2631 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2632)
                    {
                        frontier_phi_72_pred = _2621;
                        frontier_phi_72_pred_1 = _2620;
                        frontier_phi_72_pred_2 = _2619;
                        frontier_phi_72_pred_3 = _2618;
                        frontier_phi_72_pred_4 = _2617;
                        frontier_phi_72_pred_5 = _2616;
                    }
                    else
                    {
                        float _2766;
                        float _2767;
                        float _2768;
                        float _2769;
                        float _2770;
                        float _2771;
                        float _3018;
                        float _3019;
                        float _3020;
                        float _3021;
                        float _3022;
                        float _3023;
                        float _2779 = _2616;
                        float _2780 = _2617;
                        float _2781 = _2618;
                        float _2782 = _2619;
                        float _2783 = _2620;
                        float _2784 = _2621;
                        uint _2785 = _2631;
                        uint _2786;
                        vec4 _2811;
                        float _2812;
                        vec4 _2827;
                        vec3 _2839;
                        vec4 _2855;
                        vec4 _2871;
                        float _2918;
                        bool _2919;
                        for (;;)
                        {
                            uint _2796 = ((_2622 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2785));
                            _2786 = (_2785 + 4294967295u) & _2785;
                            uint _2798 = _2796 * 40u;
                            _2811 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2798)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 3u)).x));
                            _2812 = _2811.w;
                            uint _2814 = (_2796 * 40u) + 4u;
                            _2827 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2814)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 3u)).x));
                            uint _2829 = (_2796 * 40u) + 8u;
                            _2839 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2829)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 2u)).x));
                            uint _2842 = (_2796 * 40u) + 16u;
                            _2855 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2842)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 3u)).x));
                            uint _2858 = (_2796 * 40u) + 20u;
                            _2871 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2858)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 3u)).x));
                            uint _2874 = (_2796 * 40u) + 24u;
                            vec4 _2887 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2874)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 3u)).x));
                            uint _2893 = (_2796 * 40u) + 28u;
                            vec4 _2906 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2893)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 3u)).x));
                            _2918 = fma(_1426, _2906.z, fma(_1425, _2906.y, _2906.x * _1424)) + _2906.w;
                            _2919 = !((fma(_1426, _2887.z, fma(_1425, _2887.y, _2887.x * _1424)) + _2887.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_2919)
                            {
                                float _2946 = _2811.x - _1424;
                                float _2947 = _2811.y - _1425;
                                float _2948 = _2811.z - _1426;
                                float _2949 = dot(vec3(_2946, _2947, _2948), vec3(_2946, _2947, _2948));
                                float _2952 = inversesqrt(_2949);
                                float _2953 = _2952 * _2946;
                                float _2954 = _2952 * _2947;
                                float _2955 = _2952 * _2948;
                                float _2959 = 1.0 - (_2949 / (_2812 * _2812));
                                float _3914 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
                                float _2960 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
                                float _2964 = sqrt(_2949) * _2827.w;
                                float _2966 = 1.39999997615814208984375 / (_2964 + 1.39999997615814208984375);
                                float _2967 = _2966 * _2966;
                                float _2968 = 1.0 - _2967;
                                float _2970 = (_2968 * dot(vec3(_2953, _2954, _2955), vec3(_334, _337, _340))) + _2967;
                                float _2973 = _2964 * _2964;
                                float _2977 = (fma(_1426, _2855.z, fma(_1425, _2855.y, _2855.x * _1424)) + _2855.w) / _2918;
                                float _2978 = (fma(_1426, _2871.z, fma(_1425, _2871.y, _2871.x * _1424)) + _2871.w) / _2918;
                                float _2982 = 1.0 - dot(vec2(_2977, _2978), vec2(_2977, _2978));
                                float _3930 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
                                float _2983 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
                                float _2984 = _2983 * (((isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0))) * _2960) / ((_2973 * 0.699999988079071044921875) + 1.0));
                                float _2994 = dot(vec3(_334, _337, _340), vec3((-0.0) - (_1424 * _2505), (-0.0) - (_1425 * _2505), (-0.0) - (_1426 * _2505)));
                                float _3941 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
                                float _3002 = (_2968 * dot(vec3(_334, _337, _340), vec3(_2953, _2954, _2955))) + _2967;
                                float _3952 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
                                float _3003 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
                                float _3007 = (0.5 / (((isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) + 9.9999999392252902907785028219223e-09) + _3003)) * _3003;
                                float _3963 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                                float _3014 = (_2983 * _2960) * (((isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * 3.1415927410125732421875) / ((_2973 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_78_pred = _2984 * _2827.y;
                                frontier_phi_78_pred_1 = _2984 * _2827.x;
                                frontier_phi_78_pred_2 = _3014 * _2839.z;
                                frontier_phi_78_pred_3 = _3014 * _2839.y;
                                frontier_phi_78_pred_4 = _3014 * _2839.x;
                                frontier_phi_78_pred_5 = _2984 * _2827.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3022 = frontier_phi_78_pred;
                            _3021 = frontier_phi_78_pred_1;
                            _3020 = frontier_phi_78_pred_2;
                            _3019 = frontier_phi_78_pred_3;
                            _3018 = frontier_phi_78_pred_4;
                            _3023 = frontier_phi_78_pred_5;
                            _2769 = _3021 + _2782;
                            _2770 = _3022 + _2783;
                            _2771 = _3023 + _2784;
                            _2766 = _3018 + _2779;
                            _2767 = _3019 + _2780;
                            _2768 = _3020 + _2781;
                            if (_2786 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2779 = _2766;
                                _2780 = _2767;
                                _2781 = _2768;
                                _2782 = _2769;
                                _2783 = _2770;
                                _2784 = _2771;
                                _2785 = _2786;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2771;
                        frontier_phi_72_pred_1 = _2770;
                        frontier_phi_72_pred_2 = _2769;
                        frontier_phi_72_pred_3 = _2768;
                        frontier_phi_72_pred_4 = _2767;
                        frontier_phi_72_pred_5 = _2766;
                    }
                    _2491 = frontier_phi_72_pred;
                    _2489 = frontier_phi_72_pred_1;
                    _2487 = frontier_phi_72_pred_2;
                    _2485 = frontier_phi_72_pred_3;
                    _2483 = frontier_phi_72_pred_4;
                    _2481 = frontier_phi_72_pred_5;
                    uint _2623 = _2622 + 1u;
                    if (_2623 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2616 = _2481;
                        _2617 = _2483;
                        _2618 = _2485;
                        _2619 = _2487;
                        _2620 = _2489;
                        _2621 = _2491;
                        _2622 = _2623;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2491;
                frontier_phi_60_61_ladder_1 = _2489;
                frontier_phi_60_61_ladder_2 = _2485;
                frontier_phi_60_61_ladder_3 = _2483;
                frontier_phi_60_61_ladder_4 = _2481;
                frontier_phi_60_61_ladder_5 = _2487;
            }
            else
            {
                frontier_phi_60_61_ladder = _2367;
                frontier_phi_60_61_ladder_1 = _2365;
                frontier_phi_60_61_ladder_2 = _2361;
                frontier_phi_60_61_ladder_3 = _2359;
                frontier_phi_60_61_ladder_4 = _2357;
                frontier_phi_60_61_ladder_5 = _2363;
            }
            _2480 = frontier_phi_60_61_ladder_4;
            _2482 = frontier_phi_60_61_ladder_3;
            _2484 = frontier_phi_60_61_ladder_2;
            _2486 = frontier_phi_60_61_ladder_5;
            _2488 = frontier_phi_60_61_ladder_1;
            _2490 = frontier_phi_60_61_ladder;
        }
        float _2495 = isnan(1.0) ? _378 : (isnan(_378) ? 1.0 : min(_378, 1.0));
        _2253 = (_2495 * _2486) + _1892;
        _2255 = (_2495 * _2488) + _1894;
        _2257 = (_2495 * _2490) + _1896;
        _2259 = ((_2480 * 0.039999999105930328369140625) * _2495) + _2134;
        _2261 = ((_2482 * 0.039999999105930328369140625) * _2495) + _2136;
        _2263 = ((_2484 * 0.039999999105930328369140625) * _2495) + _2138;
    }
    else
    {
        _2253 = _1892;
        _2255 = _1894;
        _2257 = _1896;
        _2259 = _2134;
        _2261 = _2136;
        _2263 = _2138;
    }
    uint _2269 = _354 + uint(cbMatDynParam._m0[0u].w);
    float _2277 = ((_207.x * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].x) * cbInstanceData._m0[_2269].x;
    float _2280 = ((_207.y * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].y) * cbInstanceData._m0[_2269].y;
    float _2283 = ((_207.z * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].z) * cbInstanceData._m0[_2269].z;
    float _3979 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _3990 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _4001 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _4012 = isnan(0.0) ? _226 : (isnan(_226) ? 0.0 : max(_226, 0.0));
    float _2301 = (((isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * (_2253 + ((isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0))) * _378))) + ((_2259 + ((isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0))) * _1157)) * cbPerFrame._m0[3u].x)) + _2277;
    float _2303 = (_2280 + ((_2261 + ((isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0))) * _1157)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_2255 + ((isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0))) * _378)));
    float _2305 = (_2283 + ((_2263 + ((isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0))) * _1157)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_2257 + ((isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0))) * _378)));
    float _4038 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2318 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _2323 = cbInstanceData._m0[_353 + 6u].w * (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)));
    float _2328 = _312 / cbSceneParam._m0[86u].x;
    float _2329 = _313 / cbSceneParam._m0[86u].y;
    vec4 _2343 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2328, _2329, (log2((isnan(cbSceneParam._m0[77u].w) ? _245 : (isnan(_245) ? cbSceneParam._m0[77u].w : min(_245, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2345 = _2343.x;
    float _2346 = _2343.y;
    float _2347 = _2343.z;
    float _2348 = _2343.w;
    float _2420;
    float _2422;
    float _2424;
    float _2426;
    if (_245 > cbSceneParam._m0[78u].w)
    {
        float _2382 = isnan(_245) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _245 : min(cbSceneParam._m0[80u].w, _245));
        float _2383 = _2382 / _245;
        float _2394 = _2383 * _297;
        float _2395 = _298 * _2383;
        float _2396 = (-0.0) - _2395;
        float _2398 = _2383 * _299;
        float _2400 = (cbSceneParam._m0[77u].w * _2396) / _2382;
        float _2401 = _2400 + cbSceneParam._m0[79u].w;
        float _2402 = cbSceneParam._m0[79u].w - _2395;
        float _2408 = sqrt(((_2394 * _2394) + (_2395 * _2395)) + (_2398 * _2398));
        float _2411 = (1.0 - (cbSceneParam._m0[77u].w / _2382)) * _2408;
        float _2416 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2418 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2578;
        if (abs((_2396 - _2400) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2578 = ((((_2401 > 0.0) ? exp2(_2416 * _2401) : (2.0 - exp2(_2418 * _2401))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2411;
        }
        else
        {
            float _2538 = 1.0 / cbSceneParam._m0[80u].x;
            float _2539 = isnan(_2402) ? _2401 : (isnan(_2401) ? _2402 : max(_2401, _2402));
            float _2540 = isnan(_2402) ? _2401 : (isnan(_2401) ? _2402 : min(_2401, _2402));
            float _2549 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : min(_2539, 0.0));
            float _2550 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : min(_2540, 0.0));
            _2578 = ((abs(_2408 / _2396) * cbSceneParam._m0[80u].y) * ((((_2549 - _2550) * 2.0) - ((exp2(_2416 * (isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0)))) - exp2(_2416 * (isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0))))) * _2538)) - ((exp2(_2418 * _2549) - exp2(_2418 * _2550)) * _2538))) + (_2411 * cbSceneParam._m0[80u].z);
        }
        vec4 _2580 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2328, _2329, 1.0), 0.0);
        float _2589 = exp2((_2578 * (-1.44269502162933349609375)) * (1.0 - _2580.w));
        float _2590 = log2(_2589);
        float _2606 = log2(_2348);
        _2420 = (exp2(_2606 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2590 * cbSceneParam._m0[78u].x)) * _2580.x) / cbSceneParam._m0[78u].x)) + _2345;
        _2422 = (exp2(_2606 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2590 * cbSceneParam._m0[78u].y)) * _2580.y) / cbSceneParam._m0[78u].y)) + _2346;
        _2424 = (exp2(_2606 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2590 * cbSceneParam._m0[78u].z)) * _2580.z) / cbSceneParam._m0[78u].z)) + _2347;
        _2426 = _2589 * _2348;
    }
    else
    {
        _2420 = _2345;
        _2422 = _2346;
        _2424 = _2347;
        _2426 = _2348;
    }
    float _2438 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2439 = _2438 == 3.0;
    float _2441 = log2(_2426);
    float _2445 = exp2(_2441 * cbSceneParam._m0[78u].x);
    float _2446 = exp2(_2441 * cbSceneParam._m0[78u].y);
    float _2447 = exp2(_2441 * cbSceneParam._m0[78u].z);
    float _2448 = _2445 * (isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0)));
    float _2449 = _2446 * (isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0)));
    float _2450 = _2447 * (isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0)));
    float _2459 = (_2438 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2459 * (_2439 ? _2448 : (_2448 + (cbSceneParam._m0[72u].w * _2420)));
    SV_Target.y = _2459 * (_2439 ? _2449 : (_2449 + (cbSceneParam._m0[72u].w * _2422)));
    SV_Target.z = _2459 * (_2439 ? _2450 : (_2450 + (cbSceneParam._m0[72u].w * _2424)));
    SV_Target.w = _2323;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2277) * _2318) * _2445) * _2459;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2280) * _2318) * _2446) * _2459;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2283) * _2318) * _2447) * _2459;
    SV_Target_1.w = _2323;
}


