#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A1_M0_Emissive_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_A1_M0_Emissive_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _737;
float _2967;
float _2968;
float _2969;
float _2970;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _166 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _167 = _166 * NORMAL.x;
    float _168 = _166 * NORMAL.y;
    float _169 = _166 * NORMAL.z;
    vec4 _189 = texture(sampler2D(S_A1_M0_Emissive_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _195 = _189.w;
    float _196 = _189.x * cbMtdParam._m0[9u].x;
    float _197 = _189.y * cbMtdParam._m0[9u].y;
    float _198 = _189.z * cbMtdParam._m0[9u].z;
    float _199 = _195 * TEXCOORD_1.z;
    vec4 _215 = texture(sampler2D(S_A1_M0_Emissive_Alpha_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _229 = inversesqrt(dot(vec3(_167, _168, _169), vec3(_167, _168, _169)));
    float _230 = _229 * _167;
    float _231 = _229 * _168;
    float _232 = _229 * _169;
    float _2979 = isnan(0.0) ? _199 : (isnan(_199) ? 0.0 : max(_199, 0.0));
    float _234 = isnan(1.0) ? _2979 : (isnan(_2979) ? 1.0 : min(_2979, 1.0));
    float _2990 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _3001 = isnan(0.0) ? _197 : (isnan(_197) ? 0.0 : max(_197, 0.0));
    float _3012 = isnan(0.0) ? _198 : (isnan(_198) ? 0.0 : max(_198, 0.0));
    float _253 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _295 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _305 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _295);
    float _306 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _295);
    float _307 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _295);
    float _311 = inversesqrt(dot(vec3(_305, _306, _307), vec3(_305, _306, _307)));
    float _312 = _305 * _311;
    float _313 = _306 * _311;
    float _314 = _307 * _311;
    vec4 _319 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _321 = _319.w;
    float _327 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _328 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _349 = fma(_232, cbSceneParam._m0[5u].z, fma(_231, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _230));
    float _352 = fma(_232, cbSceneParam._m0[6u].z, fma(_231, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _230));
    float _355 = fma(_232, cbSceneParam._m0[7u].z, fma(_231, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _230));
    uint _368 = uint(roundEven(NORMAL.w)) * 13u;
    uint _369 = _368 + 9u;
    uint _370 = _369 + uint(cbMatDynParam._m0[0u].w);
    float _376 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2990 : (isnan(_2990) ? 1.0 : min(_2990, 1.0)))) * cbInstanceData._m0[_370].x;
    float _377 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3001 : (isnan(_3001) ? 1.0 : min(_3001, 1.0)))) * cbInstanceData._m0[_370].y;
    float _378 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3012 : (isnan(_3012) ? 1.0 : min(_3012, 1.0)))) * cbInstanceData._m0[_370].z;
    float _3023 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _379 = isnan(1.0) ? _3023 : (isnan(_3023) ? 1.0 : min(_3023, 1.0));
    float _3034 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _380 = isnan(1.0) ? _3034 : (isnan(_3034) ? 1.0 : min(_3034, 1.0));
    float _3045 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _381 = isnan(1.0) ? _3045 : (isnan(_3045) ? 1.0 : min(_3045, 1.0));
    vec4 _390 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _327, cbSceneParam._m0[86u].y * _328));
    float _393 = _390.x * TEXCOORD_1.w;
    float _394 = dot(vec3(_230, _231, _232), vec3(_312, _313, _314));
    float _397 = _394 * 2.0;
    float _402 = (_397 * _230) - _312;
    float _403 = (_397 * _231) - _313;
    float _404 = (_397 * _232) - _314;
    float _426 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _430 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _434 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _736;
    float _738;
    float _739;
    float _740;
    float _741;
    float _742;
    float _743;
    float _744;
    float _745;
    float _746;
    float _747;
    float _748;
    float _749;
    float _750;
    float _751;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _461 = fma(_434, cbModelParam._m0[26u].z, fma(_430, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _426));
        float _465 = fma(_434, cbModelParam._m0[27u].z, fma(_430, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _426));
        float _469 = fma(_434, cbModelParam._m0[28u].z, fma(_430, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _426));
        float _494 = _426 + _230;
        float _495 = _430 + _231;
        float _496 = _434 + _232;
        float _506 = fma(_496, cbModelParam._m0[26u].z, fma(_495, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _494)) - _461;
        float _507 = fma(_496, cbModelParam._m0[27u].z, fma(_495, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _494)) - _465;
        float _508 = fma(_496, cbModelParam._m0[28u].z, fma(_495, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _494)) - _469;
        float _512 = inversesqrt(dot(vec3(_506, _507, _508), vec3(_506, _507, _508)));
        float _525 = ((_512 * _506) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_461 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _526 = ((_512 * _507) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_465 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _527 = ((_512 * _508) / cbModelParam._m0[34u].z) + ((((((_469 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _530 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_525, _526, _527), 0.0);
        vec4 _537 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_525, _526, _527), 0.0);
        vec4 _544 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_525, _526, _527), 0.0);
        vec4 _551 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_525, _526, _527), 0.0);
        float _564 = exp2((_530.w + (-0.5)) * 20.0) * 2.0;
        float _565 = _564 * (_530.x + (-0.5));
        float _566 = _564 * (_530.y + (-0.5));
        float _567 = _564 * (_530.z + (-0.5));
        float _574 = exp2((_537.w + (-0.5)) * 20.0) * 2.0;
        float _575 = _574 * (_537.x + (-0.5));
        float _576 = _574 * (_537.y + (-0.5));
        float _577 = _574 * (_537.z + (-0.5));
        float _584 = exp2((_544.w + (-0.5)) * 20.0) * 2.0;
        float _585 = _584 * (_544.x + (-0.5));
        float _586 = _584 * (_544.y + (-0.5));
        float _587 = _584 * (_544.z + (-0.5));
        float _594 = exp2((_551.w + (-0.5)) * 20.0) * 2.0;
        float _595 = _594 * (_551.x + (-0.5));
        float _596 = _594 * (_551.y + (-0.5));
        float _597 = _594 * (_551.z + (-0.5));
        float _598 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
        float _599 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
        float _600 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
        float _601 = _565 * 0.5;
        float _602 = _575 * 0.5;
        float _603 = _585 * 0.5;
        float _604 = dot(vec3(_601, _602, _603), vec3(_601, _602, _603));
        float _609 = (_604 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_604);
        float _618 = (dot(vec3(_230, _231, _232), vec3(_609 * _601, _609 * _602, _609 * _603)) + 1.0) * 0.5;
        float _3071 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
        float _628 = sqrt(((_602 * _602) + (_601 * _601)) + (_603 * _603)) / (_598 + 9.9999997473787516355514526367188e-06);
        float _3082 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
        float _629 = isnan(1.0) ? _3082 : (isnan(_3082) ? 1.0 : min(_3082, 1.0));
        float _630 = _629 * 2.0;
        float _634 = (1.0 - _629) / (_629 + 1.0);
        float _3093 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
        float _635 = isnan(1.0) ? _3093 : (isnan(_3093) ? 1.0 : min(_3093, 1.0));
        float _644 = ((((1.0 - _635) * (_630 + 2.0)) * exp2(log2(isnan(1.0) ? _3071 : (isnan(_3071) ? 1.0 : min(_3071, 1.0))) * (_630 + 1.0))) + _635) * _598;
        float _645 = _566 * 0.5;
        float _646 = _576 * 0.5;
        float _647 = _586 * 0.5;
        float _648 = dot(vec3(_645, _646, _647), vec3(_645, _646, _647));
        float _653 = (_648 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_648);
        float _661 = (dot(vec3(_230, _231, _232), vec3(_653 * _645, _653 * _646, _653 * _647)) + 1.0) * 0.5;
        float _3104 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
        float _670 = sqrt(((_646 * _646) + (_645 * _645)) + (_647 * _647)) / (_599 + 9.9999997473787516355514526367188e-06);
        float _3115 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
        float _671 = isnan(1.0) ? _3115 : (isnan(_3115) ? 1.0 : min(_3115, 1.0));
        float _672 = _671 * 2.0;
        float _676 = (1.0 - _671) / (_671 + 1.0);
        float _3126 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
        float _677 = isnan(1.0) ? _3126 : (isnan(_3126) ? 1.0 : min(_3126, 1.0));
        float _686 = ((((1.0 - _677) * (_672 + 2.0)) * exp2(log2(isnan(1.0) ? _3104 : (isnan(_3104) ? 1.0 : min(_3104, 1.0))) * (_672 + 1.0))) + _677) * _599;
        float _687 = _567 * 0.5;
        float _688 = _577 * 0.5;
        float _689 = _587 * 0.5;
        float _690 = dot(vec3(_687, _688, _689), vec3(_687, _688, _689));
        float _695 = (_690 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_690);
        float _703 = (dot(vec3(_230, _231, _232), vec3(_695 * _687, _695 * _688, _695 * _689)) + 1.0) * 0.5;
        float _3137 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _712 = sqrt(((_688 * _688) + (_687 * _687)) + (_689 * _689)) / (_600 + 9.9999997473787516355514526367188e-06);
        float _3148 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _713 = isnan(1.0) ? _3148 : (isnan(_3148) ? 1.0 : min(_3148, 1.0));
        float _714 = _713 * 2.0;
        float _718 = (1.0 - _713) / (_713 + 1.0);
        float _3159 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        float _719 = isnan(1.0) ? _3159 : (isnan(_3159) ? 1.0 : min(_3159, 1.0));
        float _728 = ((((1.0 - _719) * (_714 + 2.0)) * exp2(log2(isnan(1.0) ? _3137 : (isnan(_3137) ? 1.0 : min(_3137, 1.0))) * (_714 + 1.0))) + _719) * _600;
        _736 = _567;
        _738 = _566;
        _739 = _565;
        _740 = _577;
        _741 = _576;
        _742 = _575;
        _743 = _587;
        _744 = _586;
        _745 = _585;
        _746 = _600;
        _747 = _599;
        _748 = _598;
        _749 = cbModelParam._m0[36u].z * (isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0)));
        _750 = cbModelParam._m0[36u].z * (isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0)));
        _751 = cbModelParam._m0[36u].z * (isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0)));
    }
    else
    {
        _736 = _737;
        _738 = _737;
        _739 = _737;
        _740 = _737;
        _741 = _737;
        _742 = _737;
        _743 = _737;
        _744 = _737;
        _745 = _737;
        _746 = _737;
        _747 = _737;
        _748 = _737;
        _749 = 0.0;
        _750 = 0.0;
        _751 = 0.0;
    }
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _777 = fma(_434, cbModelParam._m0[30u].z, fma(_430, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _426));
        float _781 = fma(_434, cbModelParam._m0[31u].z, fma(_430, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _426));
        float _785 = fma(_434, cbModelParam._m0[32u].z, fma(_430, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _426));
        float _808 = _426 + _230;
        float _809 = _430 + _231;
        float _810 = _434 + _232;
        float _820 = fma(_810, cbModelParam._m0[30u].z, fma(_809, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _808)) - _777;
        float _821 = fma(_810, cbModelParam._m0[31u].z, fma(_809, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _808)) - _781;
        float _822 = fma(_810, cbModelParam._m0[32u].z, fma(_809, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _808)) - _785;
        float _826 = inversesqrt(dot(vec3(_820, _821, _822), vec3(_820, _821, _822)));
        float _839 = ((_826 * _820) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_777 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _840 = ((_826 * _821) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_781 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _841 = ((_826 * _822) / cbModelParam._m0[35u].z) + ((((((_785 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _843 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        vec4 _864 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        float _876 = exp2((_843.w + (-0.5)) * 20.0) * 2.0;
        float _877 = _876 * (_843.x + (-0.5));
        float _878 = _876 * (_843.y + (-0.5));
        float _879 = _876 * (_843.z + (-0.5));
        float _886 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _887 = _886 * (_850.x + (-0.5));
        float _888 = _886 * (_850.y + (-0.5));
        float _889 = _886 * (_850.z + (-0.5));
        float _896 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _897 = _896 * (_857.x + (-0.5));
        float _898 = _896 * (_857.y + (-0.5));
        float _899 = _896 * (_857.z + (-0.5));
        float _906 = exp2((_864.w + (-0.5)) * 20.0) * 2.0;
        float _907 = _906 * (_864.x + (-0.5));
        float _908 = _906 * (_864.y + (-0.5));
        float _909 = _906 * (_864.z + (-0.5));
        float _910 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _911 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _912 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _913 = _877 * 0.5;
        float _914 = _887 * 0.5;
        float _915 = _897 * 0.5;
        float _916 = dot(vec3(_913, _914, _915), vec3(_913, _914, _915));
        float _921 = (_916 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_916);
        float _929 = (dot(vec3(_230, _231, _232), vec3(_921 * _913, _921 * _914, _921 * _915)) + 1.0) * 0.5;
        float _3200 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _938 = sqrt(((_914 * _914) + (_913 * _913)) + (_915 * _915)) / (_910 + 9.9999997473787516355514526367188e-06);
        float _3211 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3211 : (isnan(_3211) ? 1.0 : min(_3211, 1.0));
        float _940 = _939 * 2.0;
        float _944 = (1.0 - _939) / (_939 + 1.0);
        float _3222 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3222 : (isnan(_3222) ? 1.0 : min(_3222, 1.0));
        float _954 = ((((1.0 - _945) * (_940 + 2.0)) * exp2(log2(isnan(1.0) ? _3200 : (isnan(_3200) ? 1.0 : min(_3200, 1.0))) * (_940 + 1.0))) + _945) * _910;
        float _955 = _878 * 0.5;
        float _956 = _888 * 0.5;
        float _957 = _898 * 0.5;
        float _958 = dot(vec3(_955, _956, _957), vec3(_955, _956, _957));
        float _963 = (_958 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_958);
        float _971 = (dot(vec3(_230, _231, _232), vec3(_963 * _955, _963 * _956, _963 * _957)) + 1.0) * 0.5;
        float _3233 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _980 = sqrt(((_956 * _956) + (_955 * _955)) + (_957 * _957)) / (_911 + 9.9999997473787516355514526367188e-06);
        float _3244 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3244 : (isnan(_3244) ? 1.0 : min(_3244, 1.0));
        float _982 = _981 * 2.0;
        float _986 = (1.0 - _981) / (_981 + 1.0);
        float _3255 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3255 : (isnan(_3255) ? 1.0 : min(_3255, 1.0));
        float _996 = ((((1.0 - _987) * (_982 + 2.0)) * exp2(log2(isnan(1.0) ? _3233 : (isnan(_3233) ? 1.0 : min(_3233, 1.0))) * (_982 + 1.0))) + _987) * _911;
        float _997 = _879 * 0.5;
        float _998 = _889 * 0.5;
        float _999 = _899 * 0.5;
        float _1000 = dot(vec3(_997, _998, _999), vec3(_997, _998, _999));
        float _1005 = (_1000 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1000);
        float _1013 = (dot(vec3(_230, _231, _232), vec3(_1005 * _997, _1005 * _998, _1005 * _999)) + 1.0) * 0.5;
        float _3266 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1022 = sqrt(((_998 * _998) + (_997 * _997)) + (_999 * _999)) / (_912 + 9.9999997473787516355514526367188e-06);
        float _3277 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3277 : (isnan(_3277) ? 1.0 : min(_3277, 1.0));
        float _1024 = _1023 * 2.0;
        float _1028 = (1.0 - _1023) / (_1023 + 1.0);
        float _3288 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0));
        float _1038 = ((((1.0 - _1029) * (_1024 + 2.0)) * exp2(log2(isnan(1.0) ? _3266 : (isnan(_3266) ? 1.0 : min(_3266, 1.0))) * (_1024 + 1.0))) + _1029) * _912;
        _1046 = _879;
        _1047 = _878;
        _1048 = _877;
        _1049 = _889;
        _1050 = _888;
        _1051 = _887;
        _1052 = _899;
        _1053 = _898;
        _1054 = _897;
        _1055 = _912;
        _1056 = _911;
        _1057 = _910;
        _1058 = cbModelParam._m0[36u].w * (isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0)));
        _1059 = cbModelParam._m0[36u].w * (isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0)));
        _1060 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0)));
    }
    else
    {
        _1046 = _737;
        _1047 = _737;
        _1048 = _737;
        _1049 = _737;
        _1050 = _737;
        _1051 = _737;
        _1052 = _737;
        _1053 = _737;
        _1054 = _737;
        _1055 = _737;
        _1056 = _737;
        _1057 = _737;
        _1058 = 0.0;
        _1059 = 0.0;
        _1060 = 0.0;
    }
    float _1070 = (cbModelParam._m0[1u].x * (_1058 - _749)) + _749;
    float _1071 = (cbModelParam._m0[1u].x * (_1059 - _750)) + _750;
    float _1072 = (cbModelParam._m0[1u].x * (_1060 - _751)) + _751;
    float _1093 = fma(_1072, cbSceneParam._m0[89u].z, fma(_1071, cbSceneParam._m0[89u].y, _1070 * cbSceneParam._m0[89u].x));
    float _1096 = fma(_1072, cbSceneParam._m0[90u].z, fma(_1071, cbSceneParam._m0[90u].y, _1070 * cbSceneParam._m0[90u].x));
    float _1099 = fma(_1072, cbSceneParam._m0[91u].z, fma(_1071, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1070));
    float _1114 = _402 * 0.5;
    float _1115 = _403 * 0.5;
    float _1116 = _404 * 0.5;
    float _1117 = dot(vec4(_1114, _1115, _1116, 1.0), vec4(_1048, _1051, _1054, _1057));
    float _1120 = dot(vec4(_1114, _1115, _1116, 1.0), vec4(_1047, _1050, _1053, _1056));
    float _1123 = dot(vec4(_1114, _1115, _1116, 1.0), vec4(_1046, _1049, _1052, _1055));
    float _1157;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1130 = dot(vec4(_1114, _1115, _1116, 1.0), vec4(_736, _740, _743, _746));
        float _1134 = dot(vec4(_1114, _1115, _1116, 1.0), vec4(_738, _741, _744, _747));
        float _1138 = dot(vec4(_1114, _1115, _1116, 1.0), vec4(_739, _742, _745, _748));
        float _1145 = dot(vec4(cbModelParam._m0[39u]), vec4(_1114, _1115, _1116, 1.0));
        _1157 = dot(vec3(isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0)), isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0)), isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1145) ? 0.0 : (isnan(0.0) ? _1145 : max(0.0, _1145))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1157 = 1.0;
    }
    float _1168;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1159 = dot(vec4(cbModelParam._m0[40u]), vec4(_1114, _1115, _1116, 1.0));
        _1168 = dot(vec3(isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)), isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)), isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1159) ? 0.0 : (isnan(0.0) ? _1159 : max(0.0, _1159))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1168 = 1.0;
    }
    float _1172 = (_1168 * cbModelParam._m0[1u].x) + (_1157 * (1.0 - cbModelParam._m0[1u].x));
    float _1181 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1263;
    float _1265;
    float _1267;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1230 = fma(_434, cbModelParam._m0[13u].z, fma(_430, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _426)) + cbModelParam._m0[13u].w;
        float _1234 = fma(_434, cbModelParam._m0[14u].z, fma(_430, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _426)) + cbModelParam._m0[14u].w;
        float _1238 = fma(_434, cbModelParam._m0[15u].z, fma(_430, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _426)) + cbModelParam._m0[15u].w;
        float _1241 = fma(_404, cbModelParam._m0[13u].z, fma(_403, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _402));
        float _1244 = fma(_404, cbModelParam._m0[14u].z, fma(_403, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _402));
        float _1247 = fma(_404, cbModelParam._m0[15u].z, fma(_403, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _402));
        float _1273;
        if (_1241 > 0.0)
        {
            _1273 = abs((1.0 - _1230) / _1241);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1241 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1230 + 1.0) / _1241);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1273 = frontier_phi_14_12_ladder;
        }
        float _1501;
        if (_1244 > 0.0)
        {
            _1501 = abs((1.0 - _1234) / _1244);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1244 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1234 + 1.0) / _1244);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1501 = frontier_phi_23_19_ladder;
        }
        float _1693;
        if (_1247 > 0.0)
        {
            _1693 = abs((1.0 - _1238) / _1247);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1247 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1238 + 1.0) / _1247);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1693 = frontier_phi_35_30_ladder;
        }
        float _1695 = isnan(_1501) ? _1273 : (isnan(_1273) ? _1501 : min(_1273, _1501));
        float _1696 = isnan(_1693) ? _1695 : (isnan(_1695) ? _1693 : min(_1695, _1693));
        float _1700 = (_1696 * _1241) + _1230;
        float _1701 = (_1696 * _1244) + _1234;
        float _1702 = (_1696 * _1247) + _1238;
        float _1703 = _1696 * 9.9999997473787516355514526367188e-05;
        float _1705 = (-1.0) - _1703;
        float _1707 = _1703 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1702 > _1707) || ((_1702 < _1705) || ((_1701 > _1707) || ((_1701 < _1705) || ((_1700 < _1705) || (_1700 > _1707))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1799 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1702, cbModelParam._m0[9u].z, fma(_1701, cbModelParam._m0[9u].y, _1700 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1702, cbModelParam._m0[10u].z, fma(_1701, cbModelParam._m0[10u].y, _1700 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1702, cbModelParam._m0[11u].z, fma(_1701, cbModelParam._m0[11u].y, _1700 * cbModelParam._m0[11u].x))), _1181);
            frontier_phi_13_35_ladder = _1799.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1799.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1799.x * cbModelParam._m0[1u].y;
        }
        _1263 = frontier_phi_13_35_ladder_2;
        _1265 = frontier_phi_13_35_ladder_1;
        _1267 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1251 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_402, _403, _404), _1181);
        _1263 = _1251.x * cbModelParam._m0[1u].y;
        _1265 = _1251.y * cbModelParam._m0[1u].y;
        _1267 = _1251.z * cbModelParam._m0[1u].y;
    }
    float _1270 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1363;
    float _1365;
    float _1367;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1327 = fma(_434, cbModelParam._m0[21u].z, fma(_430, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _426)) + cbModelParam._m0[21u].w;
        float _1331 = fma(_434, cbModelParam._m0[22u].z, fma(_430, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _426)) + cbModelParam._m0[22u].w;
        float _1335 = fma(_434, cbModelParam._m0[23u].z, fma(_430, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _426)) + cbModelParam._m0[23u].w;
        float _1338 = fma(_404, cbModelParam._m0[21u].z, fma(_403, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _402));
        float _1341 = fma(_404, cbModelParam._m0[22u].z, fma(_403, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _402));
        float _1344 = fma(_404, cbModelParam._m0[23u].z, fma(_403, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _402));
        float _1506;
        if (_1338 > 0.0)
        {
            _1506 = abs((1.0 - _1327) / _1338);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1338 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1327 + 1.0) / _1338);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1506 = frontier_phi_25_21_ladder;
        }
        float _1720;
        if (_1341 > 0.0)
        {
            _1720 = abs((1.0 - _1331) / _1341);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1341 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1331 + 1.0) / _1341);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1720 = frontier_phi_37_32_ladder;
        }
        float _1871;
        if (_1344 > 0.0)
        {
            _1871 = abs((1.0 - _1335) / _1344);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1344 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1335 + 1.0) / _1344);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1871 = frontier_phi_46_43_ladder;
        }
        float _1873 = isnan(_1720) ? _1506 : (isnan(_1506) ? _1720 : min(_1506, _1720));
        float _1874 = isnan(_1871) ? _1873 : (isnan(_1873) ? _1871 : min(_1873, _1871));
        float _1878 = (_1874 * _1338) + _1327;
        float _1879 = (_1874 * _1341) + _1331;
        float _1880 = (_1874 * _1344) + _1335;
        float _1881 = _1874 * 9.9999997473787516355514526367188e-05;
        float _1882 = (-1.0) - _1881;
        float _1884 = _1881 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1880 > _1884) || ((_1880 < _1882) || ((_1879 > _1884) || ((_1879 < _1882) || ((_1878 < _1882) || (_1878 > _1884))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2116 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1880, cbModelParam._m0[17u].z, fma(_1879, cbModelParam._m0[17u].y, _1878 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1880, cbModelParam._m0[18u].z, fma(_1879, cbModelParam._m0[18u].y, _1878 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1880, cbModelParam._m0[19u].z, fma(_1879, cbModelParam._m0[19u].y, _1878 * cbModelParam._m0[19u].x))), _1270);
            frontier_phi_22_46_ladder = _2116.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2116.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2116.x * cbModelParam._m0[1u].z;
        }
        _1363 = frontier_phi_22_46_ladder_2;
        _1365 = frontier_phi_22_46_ladder_1;
        _1367 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1347 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_402, _403, _404), _1270);
        _1363 = _1347.x * cbModelParam._m0[1u].z;
        _1365 = _1347.y * cbModelParam._m0[1u].z;
        _1367 = _1347.z * cbModelParam._m0[1u].z;
    }
    float _1379 = _393 * 0.01200000010430812835693359375;
    float _1381 = _1379 * ((cbModelParam._m0[1u].w * (_1363 - _1263)) + _1263);
    float _1382 = _1379 * ((cbModelParam._m0[1u].w * (_1365 - _1265)) + _1265);
    float _1383 = _1379 * ((cbModelParam._m0[1u].w * (_1367 - _1267)) + _1267);
    float _1386 = fma(_1383, cbSceneParam._m0[89u].z, fma(_1382, cbSceneParam._m0[89u].y, _1381 * cbSceneParam._m0[89u].x));
    float _1389 = fma(_1383, cbSceneParam._m0[90u].z, fma(_1382, cbSceneParam._m0[90u].y, _1381 * cbSceneParam._m0[90u].x));
    float _1392 = fma(_1383, cbSceneParam._m0[91u].z, fma(_1382, cbSceneParam._m0[91u].y, _1381 * cbSceneParam._m0[91u].x));
    vec4 _1400 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_327, _328));
    float _1402 = _1400.w;
    float _1414 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1402);
    float _1415 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1402);
    float _1416 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1402);
    uvec4 _1420 = floatBitsToUint(cbInstanceData._m0[_368 + 5u]);
    uint _1422 = _1420.x * 14u;
    uint _1423 = _1422 + 13u;
    float _1430 = _393 + (-1.0);
    float _1436 = (cbLight._m0[_1423].x * _1430) + 1.0;
    float _1437 = (cbLight._m0[_1423].y * _1430) + 1.0;
    float _1438 = (cbLight._m0[_1423].z * _1430) + 1.0;
    float _1439 = (cbLight._m0[_1423].w * _1430) + 1.0;
    uint _1440 = _1422 + 5u;
    float _1446 = isnan(1.0) ? _1437 : (isnan(_1437) ? 1.0 : min(_1437, 1.0));
    uint _1450 = _1422 + 4u;
    float _1460 = isnan(1.0) ? _1436 : (isnan(_1436) ? 1.0 : min(_1436, 1.0));
    uint _1464 = _1422 | 1u;
    float _1475 = dot(vec3(cbLight._m0[_1422].xyz), vec3(_230, _231, _232));
    float _1478 = dot(vec3(cbLight._m0[_1464].xyz), vec3(_230, _231, _232));
    float _3424 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
    float _3435 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
    float _1483 = (isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0))) * 0.3183098733425140380859375;
    float _1485 = (isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0))) * 0.3183098733425140380859375;
    float _1492 = ((cbLight._m0[_1440].x * _1446) * _1485) + (((cbLight._m0[_1450].x * _1414) * _1460) * _1483);
    float _1493 = ((_1446 * cbLight._m0[_1440].y) * _1485) + (((cbLight._m0[_1450].y * _1415) * _1460) * _1483);
    float _1494 = ((_1446 * cbLight._m0[_1440].z) * _1485) + (((cbLight._m0[_1450].z * _1416) * _1460) * _1483);
    uvec4 _1498 = floatBitsToUint(cbLight._m0[_1422 + 12u]);
    bool _1500 = _1498.x == 0u;
    float _1511;
    float _1513;
    float _1515;
    if (_1500)
    {
        _1511 = _1492;
        _1513 = _1493;
        _1515 = _1494;
    }
    else
    {
        uint _1519 = _1422 + 6u;
        float _1535 = (dot(vec3(cbLight._m0[_1422 + 2u].xyz), vec3(_230, _231, _232)) * 0.5) + 0.5;
        float _1536 = _1535 * _1535;
        float _3446 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
        float _1538 = isnan(1.0) ? _1438 : (isnan(_1438) ? 1.0 : min(_1438, 1.0));
        _1511 = (((cbLight._m0[_1519].x * 0.3183098733425140380859375) * _1537) * _1538) + _1492;
        _1513 = (((cbLight._m0[_1519].y * 0.3183098733425140380859375) * _1537) * _1538) + _1493;
        _1515 = (((cbLight._m0[_1519].z * 0.3183098733425140380859375) * _1537) * _1538) + _1494;
    }
    bool _1518 = _1498.y == 0u;
    float _1556;
    float _1558;
    float _1560;
    if (_1518)
    {
        _1556 = _1511;
        _1558 = _1513;
        _1560 = _1515;
    }
    else
    {
        uint _1664 = _1422 + 7u;
        float _1680 = (dot(vec3(cbLight._m0[_1422 + 3u].xyz), vec3(_230, _231, _232)) * 0.5) + 0.5;
        float _1681 = _1680 * _1680;
        float _3462 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1682 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
        float _1683 = isnan(1.0) ? _1439 : (isnan(_1439) ? 1.0 : min(_1439, 1.0));
        _1556 = (((cbLight._m0[_1664].x * 0.3183098733425140380859375) * _1682) * _1683) + _1511;
        _1558 = (((cbLight._m0[_1664].y * 0.3183098733425140380859375) * _1682) * _1683) + _1513;
        _1560 = (((cbLight._m0[_1664].z * 0.3183098733425140380859375) * _1682) * _1683) + _1515;
    }
    uint _1562 = _1422 + 8u;
    float _1568 = cbLight._m0[_1422].x + _312;
    float _1569 = cbLight._m0[_1422].y + _313;
    float _1570 = cbLight._m0[_1422].z + _314;
    float _1574 = inversesqrt(dot(vec3(_1568, _1569, _1570), vec3(_1568, _1569, _1570)));
    float _1578 = dot(vec3(_230, _231, _232), vec3(cbLight._m0[_1422].xyz));
    float _3478 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
    float _1581 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
    float _3489 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _1582 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
    float _1583 = dot(vec3(cbLight._m0[_1422].xyz), vec3(_1568 * _1574, _1569 * _1574, _1570 * _1574));
    float _3500 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
    float _1594 = (exp2(log2(1.0 - (isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1600 = (0.5 / ((_1581 + 9.9999999392252902907785028219223e-09) + _1582)) * _1581;
    float _3511 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
    float _1602 = (isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))) * 0.31831014156341552734375;
    uint _1616 = _1422 + 9u;
    float _1622 = cbLight._m0[_1464].x + _312;
    float _1623 = cbLight._m0[_1464].y + _313;
    float _1624 = cbLight._m0[_1464].z + _314;
    float _1628 = inversesqrt(dot(vec3(_1622, _1623, _1624), vec3(_1622, _1623, _1624)));
    float _1632 = dot(vec3(_230, _231, _232), vec3(cbLight._m0[_1464].xyz));
    float _3522 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
    float _1635 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
    float _1636 = dot(vec3(cbLight._m0[_1464].xyz), vec3(_1622 * _1628, _1623 * _1628, _1624 * _1628));
    float _3533 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
    float _1645 = (exp2(log2(1.0 - (isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1649 = (0.5 / ((_1635 + 9.9999999392252902907785028219223e-09) + _1582)) * _1635;
    float _3544 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
    float _1651 = (isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * 0.31831014156341552734375;
    float _1661 = (((_1645 * cbLight._m0[_1616].x) * _1651) * _1446) + ((((cbLight._m0[_1562].x * _1414) * _1594) * _1602) * _1460);
    float _1662 = (((_1645 * cbLight._m0[_1616].y) * _1651) * _1446) + ((((cbLight._m0[_1562].y * _1415) * _1594) * _1602) * _1460);
    float _1663 = (((_1645 * cbLight._m0[_1616].z) * _1651) * _1446) + ((((cbLight._m0[_1562].z * _1416) * _1594) * _1602) * _1460);
    float _1725;
    float _1727;
    float _1729;
    if (_1500)
    {
        _1725 = _1661;
        _1727 = _1662;
        _1729 = _1663;
    }
    else
    {
        uint _1731 = _1422 + 10u;
        uint _1737 = _1422 + 2u;
        float _1743 = cbLight._m0[_1737].x + _312;
        float _1744 = cbLight._m0[_1737].y + _313;
        float _1745 = cbLight._m0[_1737].z + _314;
        float _1749 = inversesqrt(dot(vec3(_1743, _1744, _1745), vec3(_1743, _1744, _1745)));
        float _1753 = dot(vec3(_230, _231, _232), vec3(cbLight._m0[_1737].xyz));
        float _3555 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1756 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _1757 = dot(vec3(cbLight._m0[_1737].xyz), vec3(_1743 * _1749, _1744 * _1749, _1745 * _1749));
        float _3566 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
        float _1766 = (exp2(log2(1.0 - (isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1770 = (0.5 / ((_1756 + 9.9999999392252902907785028219223e-09) + _1582)) * _1756;
        float _3577 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _1772 = (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * 0.31831014156341552734375;
        float _1773 = isnan(1.0) ? _1438 : (isnan(_1438) ? 1.0 : min(_1438, 1.0));
        _1725 = (((_1766 * cbLight._m0[_1731].x) * _1772) * _1773) + _1661;
        _1727 = (((_1766 * cbLight._m0[_1731].y) * _1772) * _1773) + _1662;
        _1729 = (((_1766 * cbLight._m0[_1731].z) * _1772) * _1773) + _1663;
    }
    float _1808;
    float _1810;
    float _1812;
    if (_1518)
    {
        _1808 = _1725;
        _1810 = _1727;
        _1812 = _1729;
    }
    else
    {
        uint _1819 = _1422 + 11u;
        uint _1825 = _1422 + 3u;
        float _1831 = cbLight._m0[_1825].x + _312;
        float _1832 = cbLight._m0[_1825].y + _313;
        float _1833 = cbLight._m0[_1825].z + _314;
        float _1837 = inversesqrt(dot(vec3(_1831, _1832, _1833), vec3(_1831, _1832, _1833)));
        float _1841 = dot(vec3(_230, _231, _232), vec3(cbLight._m0[_1825].xyz));
        float _3593 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
        float _1844 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
        float _1845 = dot(vec3(cbLight._m0[_1825].xyz), vec3(_1831 * _1837, _1832 * _1837, _1833 * _1837));
        float _3604 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
        float _1854 = (exp2(log2(1.0 - (isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1858 = (0.5 / ((_1844 + 9.9999999392252902907785028219223e-09) + _1582)) * _1844;
        float _3615 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
        float _1860 = (isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0))) * 0.31831014156341552734375;
        float _1861 = isnan(1.0) ? _1439 : (isnan(_1439) ? 1.0 : min(_1439, 1.0));
        _1808 = (((_1854 * cbLight._m0[_1819].x) * _1860) * _1861) + _1725;
        _1810 = (((_1854 * cbLight._m0[_1819].y) * _1860) * _1861) + _1727;
        _1812 = (((_1854 * cbLight._m0[_1819].z) * _1860) * _1861) + _1729;
    }
    float _1996;
    float _1998;
    float _2000;
    float _2002;
    float _2004;
    float _2006;
    if (_1420.y == 0u)
    {
        float _1936 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1937 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1936;
        float _1938 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1936;
        float _1939 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1936;
        uvec4 _1951 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1952 = _1951.x;
        uint _1963 = uint((float(_1951.y) * floor(float(uint(cbSceneParam._m0[85u].y * _328) / _1952))) + floor(float(uint(cbSceneParam._m0[85u].x * _327) / _1952)));
        float _1973 = (log2(_1939 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1974 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
        uint _1977 = uint(isnan(14.0) ? _1974 : (isnan(_1974) ? 14.0 : min(_1974, 14.0)));
        uvec4 _1982 = texelFetch(g_lightClusterGridBuffer, int(((_1977 << 2u) + (_1963 << 6u)) >> 2u));
        uint _1983 = _1982.x;
        uint _1984 = _1951.z;
        float _2121;
        float _2123;
        float _2125;
        float _2127;
        float _2129;
        float _2131;
        if (((((1u << ((_1984 >> 4u) & 15u)) + 4294967295u) & _1983) == 0u) || ((_1984 & 240u) == 0u))
        {
            _2121 = 0.0;
            _2123 = 0.0;
            _2125 = 0.0;
            _2127 = 0.0;
            _2129 = 0.0;
            _2131 = 0.0;
        }
        else
        {
            float _2122;
            float _2124;
            float _2126;
            float _2128;
            float _2130;
            float _2132;
            float _2282 = 0.0;
            float _2283 = 0.0;
            float _2284 = 0.0;
            float _2285 = 0.0;
            float _2286 = 0.0;
            float _2287 = 0.0;
            uint _2288 = 0u;
            uint _2297;
            bool _2298;
            for (;;)
            {
                _2297 = texelFetch(g_lightClassification, int((((_1977 << 5u) + (_1963 << 9u)) + (_2288 << 2u)) >> 2u)).x;
                _2298 = _2297 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2298)
                {
                    frontier_phi_63_pred = _2282;
                    frontier_phi_63_pred_1 = _2287;
                    frontier_phi_63_pred_2 = _2286;
                    frontier_phi_63_pred_3 = _2285;
                    frontier_phi_63_pred_4 = _2284;
                    frontier_phi_63_pred_5 = _2283;
                }
                else
                {
                    float _2428;
                    float _2429;
                    float _2430;
                    float _2431;
                    float _2432;
                    float _2433;
                    uint _2434;
                    _2428 = _2282;
                    _2429 = _2283;
                    _2430 = _2284;
                    _2431 = _2285;
                    _2432 = _2286;
                    _2433 = _2287;
                    _2434 = _2297;
                    float _2354;
                    float _2355;
                    float _2356;
                    float _2357;
                    float _2358;
                    float _2359;
                    for (;;)
                    {
                        uint _2438 = uint(findLSB(_2434)) + (_2288 << 5u);
                        uint _2435 = (_2434 + 4294967295u) & _2434;
                        uint _2440 = _2438 * 48u;
                        vec4 _2454 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2440)).x, texelFetch(g_PointLightRenderingBuffer, int(_2440 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2440 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2440 + 3u)).x));
                        uint _2460 = (_2438 * 48u) + 4u;
                        vec4 _2473 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2460)).x, texelFetch(g_PointLightRenderingBuffer, int(_2460 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2460 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2460 + 3u)).x));
                        uint _2479 = (_2438 * 48u) + 8u;
                        vec3 _2490 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2479)).x, texelFetch(g_PointLightRenderingBuffer, int(_2479 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2479 + 2u)).x));
                        float _2494 = _2454.x - _1937;
                        float _2495 = _2454.y - _1938;
                        float _2496 = _2454.z - _1939;
                        float _2497 = dot(vec3(_2494, _2495, _2496), vec3(_2494, _2495, _2496));
                        float _2500 = inversesqrt(_2497);
                        float _2509 = 1.0 - (_2497 * _2454.w);
                        float _3641 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
                        float _2510 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
                        float _2511 = sqrt(_2497) * _2473.w;
                        float _2514 = 1.39999997615814208984375 / (_2511 + 1.39999997615814208984375);
                        float _2515 = _2514 * _2514;
                        float _2518 = ((1.0 - _2515) * dot(vec3(_349, _352, _355), vec3(_2500 * _2494, _2500 * _2495, _2500 * _2496))) + _2515;
                        float _2521 = _2511 * _2511;
                        float _2525 = ((isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0))) * _2510) / ((_2521 * 0.699999988079071044921875) + 1.0);
                        float _2529 = (-0.0) - _1937;
                        float _2530 = (-0.0) - _1938;
                        float _2531 = (-0.0) - _1939;
                        float _2535 = inversesqrt(dot(vec3(_2529, _2530, _2531), vec3(_2529, _2530, _2531)));
                        float _2539 = dot(vec3(_349, _352, _355), vec3(_2535 * _2529, _2535 * _2530, _2535 * _2531));
                        float _3657 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
                        float _3668 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
                        float _2543 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
                        float _2547 = (0.5 / (((isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0))) + 9.9999999392252902907785028219223e-09) + _2543)) * _2543;
                        float _3679 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
                        float _2556 = (((isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * 3.1415927410125732421875) / ((_2521 * 2.1991131305694580078125) + 3.141590118408203125)) * _2510;
                        _2357 = (_2525 * _2473.x) + _2431;
                        _2358 = (_2525 * _2473.y) + _2432;
                        _2359 = (_2525 * _2473.z) + _2433;
                        _2354 = (_2556 * _2490.x) + _2428;
                        _2355 = (_2556 * _2490.y) + _2429;
                        _2356 = (_2556 * _2490.z) + _2430;
                        if (_2435 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2428 = _2354;
                            _2429 = _2355;
                            _2430 = _2356;
                            _2431 = _2357;
                            _2432 = _2358;
                            _2433 = _2359;
                            _2434 = _2435;
                        }
                    }
                    frontier_phi_63_pred = _2354;
                    frontier_phi_63_pred_1 = _2359;
                    frontier_phi_63_pred_2 = _2358;
                    frontier_phi_63_pred_3 = _2357;
                    frontier_phi_63_pred_4 = _2356;
                    frontier_phi_63_pred_5 = _2355;
                }
                _2122 = frontier_phi_63_pred;
                _2132 = frontier_phi_63_pred_1;
                _2130 = frontier_phi_63_pred_2;
                _2128 = frontier_phi_63_pred_3;
                _2126 = frontier_phi_63_pred_4;
                _2124 = frontier_phi_63_pred_5;
                uint _2289 = _2288 + 1u;
                if (_2289 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2282 = _2122;
                    _2283 = _2124;
                    _2284 = _2126;
                    _2285 = _2128;
                    _2286 = _2130;
                    _2287 = _2132;
                    _2288 = _2289;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2121 = _2122;
            _2123 = _2124;
            _2125 = _2126;
            _2127 = _2128;
            _2129 = _2130;
            _2131 = _2132;
        }
        uvec4 _2135 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2136 = _2135.z;
        uint _2138 = (_2136 >> 8u) & 15u;
        float _2253;
        float _2255;
        float _2257;
        float _2259;
        float _2261;
        float _2263;
        if (((4294967295u << _2138) & _1983) == 0u)
        {
            _2253 = _2121;
            _2255 = _2123;
            _2257 = _2125;
            _2259 = _2127;
            _2261 = _2129;
            _2263 = _2131;
        }
        else
        {
            float _2278 = inversesqrt(dot(vec3(_1937, _1938, _1939), vec3(_1937, _1938, _1939)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2138 < ((_2136 >> 12u) & 15u))
            {
                float _2254;
                float _2256;
                float _2258;
                float _2260;
                float _2262;
                float _2264;
                float _2411 = _2121;
                float _2412 = _2123;
                float _2413 = _2125;
                float _2414 = _2127;
                float _2415 = _2129;
                float _2416 = _2131;
                uint _2417 = _2138;
                uint _2426;
                bool _2427;
                for (;;)
                {
                    _2426 = texelFetch(g_lightClassification, int((((_1977 << 5u) + (_1963 << 9u)) + (_2417 << 2u)) >> 2u)).x;
                    _2427 = _2426 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2427)
                    {
                        frontier_phi_74_pred = _2416;
                        frontier_phi_74_pred_1 = _2415;
                        frontier_phi_74_pred_2 = _2414;
                        frontier_phi_74_pred_3 = _2413;
                        frontier_phi_74_pred_4 = _2412;
                        frontier_phi_74_pred_5 = _2411;
                    }
                    else
                    {
                        float _2572;
                        float _2573;
                        float _2574;
                        float _2575;
                        float _2576;
                        float _2577;
                        float _2824;
                        float _2825;
                        float _2826;
                        float _2827;
                        float _2828;
                        float _2829;
                        float _2585 = _2411;
                        float _2586 = _2412;
                        float _2587 = _2413;
                        float _2588 = _2414;
                        float _2589 = _2415;
                        float _2590 = _2416;
                        uint _2591 = _2426;
                        uint _2592;
                        vec4 _2617;
                        float _2618;
                        vec4 _2633;
                        vec3 _2645;
                        vec4 _2661;
                        vec4 _2677;
                        float _2724;
                        bool _2725;
                        for (;;)
                        {
                            uint _2602 = ((_2417 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2591));
                            _2592 = (_2591 + 4294967295u) & _2591;
                            uint _2604 = _2602 * 40u;
                            _2617 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2604)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2604 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2604 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2604 + 3u)).x));
                            _2618 = _2617.w;
                            uint _2620 = (_2602 * 40u) + 4u;
                            _2633 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2620)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2620 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2620 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2620 + 3u)).x));
                            uint _2635 = (_2602 * 40u) + 8u;
                            _2645 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2635)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2635 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2635 + 2u)).x));
                            uint _2648 = (_2602 * 40u) + 16u;
                            _2661 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2648)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2648 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2648 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2648 + 3u)).x));
                            uint _2664 = (_2602 * 40u) + 20u;
                            _2677 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2664)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2664 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2664 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2664 + 3u)).x));
                            uint _2680 = (_2602 * 40u) + 24u;
                            vec4 _2693 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2680)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2680 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2680 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2680 + 3u)).x));
                            uint _2699 = (_2602 * 40u) + 28u;
                            vec4 _2712 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2699)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2699 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2699 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2699 + 3u)).x));
                            _2724 = fma(_1939, _2712.z, fma(_1938, _2712.y, _2712.x * _1937)) + _2712.w;
                            _2725 = !((fma(_1939, _2693.z, fma(_1938, _2693.y, _2693.x * _1937)) + _2693.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_2725)
                            {
                                float _2752 = _2617.x - _1937;
                                float _2753 = _2617.y - _1938;
                                float _2754 = _2617.z - _1939;
                                float _2755 = dot(vec3(_2752, _2753, _2754), vec3(_2752, _2753, _2754));
                                float _2758 = inversesqrt(_2755);
                                float _2759 = _2758 * _2752;
                                float _2760 = _2758 * _2753;
                                float _2761 = _2758 * _2754;
                                float _2765 = 1.0 - (_2755 / (_2618 * _2618));
                                float _3690 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
                                float _2766 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
                                float _2770 = sqrt(_2755) * _2633.w;
                                float _2772 = 1.39999997615814208984375 / (_2770 + 1.39999997615814208984375);
                                float _2773 = _2772 * _2772;
                                float _2774 = 1.0 - _2773;
                                float _2776 = (_2774 * dot(vec3(_2759, _2760, _2761), vec3(_349, _352, _355))) + _2773;
                                float _2779 = _2770 * _2770;
                                float _2783 = (fma(_1939, _2661.z, fma(_1938, _2661.y, _2661.x * _1937)) + _2661.w) / _2724;
                                float _2784 = (fma(_1939, _2677.z, fma(_1938, _2677.y, _2677.x * _1937)) + _2677.w) / _2724;
                                float _2788 = 1.0 - dot(vec2(_2783, _2784), vec2(_2783, _2784));
                                float _3706 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
                                float _2789 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
                                float _2790 = _2789 * (((isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0))) * _2766) / ((_2779 * 0.699999988079071044921875) + 1.0));
                                float _2800 = dot(vec3(_349, _352, _355), vec3((-0.0) - (_1937 * _2278), (-0.0) - (_1938 * _2278), (-0.0) - (_1939 * _2278)));
                                float _3717 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
                                float _2808 = (_2774 * dot(vec3(_349, _352, _355), vec3(_2759, _2760, _2761))) + _2773;
                                float _3728 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
                                float _2809 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
                                float _2813 = (0.5 / (((isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) + 9.9999999392252902907785028219223e-09) + _2809)) * _2809;
                                float _3739 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
                                float _2820 = (_2789 * _2766) * (((isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * 3.1415927410125732421875) / ((_2779 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_80_pred = _2790 * _2633.y;
                                frontier_phi_80_pred_1 = _2790 * _2633.x;
                                frontier_phi_80_pred_2 = _2820 * _2645.z;
                                frontier_phi_80_pred_3 = _2820 * _2645.y;
                                frontier_phi_80_pred_4 = _2820 * _2645.x;
                                frontier_phi_80_pred_5 = _2790 * _2633.z;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _2828 = frontier_phi_80_pred;
                            _2827 = frontier_phi_80_pred_1;
                            _2826 = frontier_phi_80_pred_2;
                            _2825 = frontier_phi_80_pred_3;
                            _2824 = frontier_phi_80_pred_4;
                            _2829 = frontier_phi_80_pred_5;
                            _2575 = _2827 + _2588;
                            _2576 = _2828 + _2589;
                            _2577 = _2829 + _2590;
                            _2572 = _2824 + _2585;
                            _2573 = _2825 + _2586;
                            _2574 = _2826 + _2587;
                            if (_2592 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2585 = _2572;
                                _2586 = _2573;
                                _2587 = _2574;
                                _2588 = _2575;
                                _2589 = _2576;
                                _2590 = _2577;
                                _2591 = _2592;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _2577;
                        frontier_phi_74_pred_1 = _2576;
                        frontier_phi_74_pred_2 = _2575;
                        frontier_phi_74_pred_3 = _2574;
                        frontier_phi_74_pred_4 = _2573;
                        frontier_phi_74_pred_5 = _2572;
                    }
                    _2264 = frontier_phi_74_pred;
                    _2262 = frontier_phi_74_pred_1;
                    _2260 = frontier_phi_74_pred_2;
                    _2258 = frontier_phi_74_pred_3;
                    _2256 = frontier_phi_74_pred_4;
                    _2254 = frontier_phi_74_pred_5;
                    uint _2418 = _2417 + 1u;
                    if (_2418 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2411 = _2254;
                        _2412 = _2256;
                        _2413 = _2258;
                        _2414 = _2260;
                        _2415 = _2262;
                        _2416 = _2264;
                        _2417 = _2418;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2258;
                frontier_phi_55_56_ladder_1 = _2264;
                frontier_phi_55_56_ladder_2 = _2262;
                frontier_phi_55_56_ladder_3 = _2260;
                frontier_phi_55_56_ladder_4 = _2256;
                frontier_phi_55_56_ladder_5 = _2254;
            }
            else
            {
                frontier_phi_55_56_ladder = _2125;
                frontier_phi_55_56_ladder_1 = _2131;
                frontier_phi_55_56_ladder_2 = _2129;
                frontier_phi_55_56_ladder_3 = _2127;
                frontier_phi_55_56_ladder_4 = _2123;
                frontier_phi_55_56_ladder_5 = _2121;
            }
            _2253 = frontier_phi_55_56_ladder_5;
            _2255 = frontier_phi_55_56_ladder_4;
            _2257 = frontier_phi_55_56_ladder;
            _2259 = frontier_phi_55_56_ladder_3;
            _2261 = frontier_phi_55_56_ladder_2;
            _2263 = frontier_phi_55_56_ladder_1;
        }
        float _2268 = isnan(1.0) ? _393 : (isnan(_393) ? 1.0 : min(_393, 1.0));
        _1996 = (_2268 * _2259) + _1556;
        _1998 = (_2268 * _2261) + _1558;
        _2000 = (_2268 * _2263) + _1560;
        _2002 = ((_2253 * 0.039999999105930328369140625) * _2268) + _1808;
        _2004 = ((_2255 * 0.039999999105930328369140625) * _2268) + _1810;
        _2006 = ((_2257 * 0.039999999105930328369140625) * _2268) + _1812;
    }
    else
    {
        _1996 = _1556;
        _1998 = _1558;
        _2000 = _1560;
        _2002 = _1808;
        _2004 = _1810;
        _2006 = _1812;
    }
    uint _2012 = _369 + uint(cbMatDynParam._m0[0u].w);
    float _2020 = ((_215.x * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].x) * cbInstanceData._m0[_2012].x;
    float _2023 = ((_215.y * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].y) * cbInstanceData._m0[_2012].y;
    float _2026 = ((_215.z * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].z) * cbInstanceData._m0[_2012].z;
    float _3755 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _3766 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _3777 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _3788 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _2044 = (((isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_1996 + ((isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0))) * _393))) + ((_2002 + ((isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0))) * _1172)) * cbPerFrame._m0[3u].x)) + _2020;
    float _2046 = (_2023 + ((_2004 + ((isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0))) * _1172)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * (_1998 + ((isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0))) * _393)));
    float _2048 = (_2026 + ((_2006 + ((isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0))) * _1172)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * (_2000 + ((isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0))) * _393)));
    float _2049 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2050 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2051 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2057 = cbMtdParam._m0[2u].x * _2020;
    float _2058 = cbMtdParam._m0[2u].y * _2023;
    float _2059 = cbMtdParam._m0[2u].z * _2026;
    float _3814 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2061 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _2066 = cbInstanceData._m0[_368 + 6u].w * (isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0)));
    float _2071 = _327 / cbSceneParam._m0[86u].x;
    float _2072 = _328 / cbSceneParam._m0[86u].y;
    vec4 _2086 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2071, _2072, (log2((isnan(cbSceneParam._m0[77u].w) ? _253 : (isnan(_253) ? cbSceneParam._m0[77u].w : min(_253, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2088 = _2086.x;
    float _2089 = _2086.y;
    float _2090 = _2086.z;
    float _2091 = _2086.w;
    float _2184;
    float _2186;
    float _2188;
    float _2190;
    if (_253 > cbSceneParam._m0[78u].w)
    {
        float _2146 = isnan(_253) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _253 : min(cbSceneParam._m0[80u].w, _253));
        float _2147 = _2146 / _253;
        float _2158 = _2147 * _305;
        float _2159 = _306 * _2147;
        float _2160 = (-0.0) - _2159;
        float _2162 = _2147 * _307;
        float _2164 = (cbSceneParam._m0[77u].w * _2160) / _2146;
        float _2165 = _2164 + cbSceneParam._m0[79u].w;
        float _2166 = cbSceneParam._m0[79u].w - _2159;
        float _2172 = sqrt(((_2158 * _2158) + (_2159 * _2159)) + (_2162 * _2162));
        float _2175 = (1.0 - (cbSceneParam._m0[77u].w / _2146)) * _2172;
        float _2180 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2182 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2367;
        if (abs((_2160 - _2164) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2367 = ((((_2165 > 0.0) ? exp2(_2180 * _2165) : (2.0 - exp2(_2182 * _2165))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2175;
        }
        else
        {
            float _2311 = 1.0 / cbSceneParam._m0[80u].x;
            float _2312 = isnan(_2166) ? _2165 : (isnan(_2165) ? _2166 : max(_2165, _2166));
            float _2313 = isnan(_2166) ? _2165 : (isnan(_2165) ? _2166 : min(_2165, _2166));
            float _2322 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : min(_2312, 0.0));
            float _2323 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : min(_2313, 0.0));
            _2367 = ((abs(_2172 / _2160) * cbSceneParam._m0[80u].y) * ((((_2322 - _2323) * 2.0) - ((exp2(_2180 * (isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0)))) - exp2(_2180 * (isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0))))) * _2311)) - ((exp2(_2182 * _2322) - exp2(_2182 * _2323)) * _2311))) + (_2175 * cbSceneParam._m0[80u].z);
        }
        vec4 _2369 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2071, _2072, 1.0), 0.0);
        float _2378 = exp2((_2367 * (-1.44269502162933349609375)) * (1.0 - _2369.w));
        float _2379 = log2(_2378);
        float _2395 = log2(_2091);
        _2184 = (exp2(_2395 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2379 * cbSceneParam._m0[78u].x)) * _2369.x) / cbSceneParam._m0[78u].x)) + _2088;
        _2186 = (exp2(_2395 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2379 * cbSceneParam._m0[78u].y)) * _2369.y) / cbSceneParam._m0[78u].y)) + _2089;
        _2188 = (exp2(_2395 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2379 * cbSceneParam._m0[78u].z)) * _2369.z) / cbSceneParam._m0[78u].z)) + _2090;
        _2190 = _2378 * _2091;
    }
    else
    {
        _2184 = _2088;
        _2186 = _2089;
        _2188 = _2090;
        _2190 = _2091;
    }
    bool _2405;
    vec4 _2200;
    vec4 _2223;
    float _2225;
    float _2229;
    float _2230;
    float _2231;
    float _2234;
    float _2237;
    float _2240;
    float _2241;
    bool _2252;
    for (;;)
    {
        _2200 = cbMatDynParam._m0[0u];
        float _2202 = roundEven(_2200.y);
        bool _2203 = _2202 == 3.0;
        float _2205 = log2(_2190);
        float _2209 = exp2(_2205 * cbSceneParam._m0[78u].x);
        float _2210 = exp2(_2205 * cbSceneParam._m0[78u].y);
        float _2211 = exp2(_2205 * cbSceneParam._m0[78u].z);
        float _2212 = _2209 * _2049;
        float _2213 = _2210 * _2050;
        float _2214 = _2211 * _2051;
        float _2221 = _321 + (-0.5);
        _2223 = cbMtdParam._m0[1u];
        _2225 = _2223.y * _2221;
        float _2228 = (_2202 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2229 = _2228 * (_2203 ? _2212 : (_2212 + (cbSceneParam._m0[72u].w * _2184)));
        _2230 = _2228 * (_2203 ? _2213 : (_2213 + (cbSceneParam._m0[72u].w * _2186)));
        _2231 = _2228 * (_2203 ? _2214 : (_2214 + (cbSceneParam._m0[72u].w * _2188)));
        _2234 = ((_2057 * _2061) * _2209) * _2228;
        _2237 = ((_2058 * _2061) * _2210) * _2228;
        _2240 = ((_2059 * _2061) * _2211) * _2228;
        _2241 = _2221 * 0.999000012874603271484375;
        _2252 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2252)
        {
            if ((cbInstanceData._m0[_368 + 7u].x + _2241) < 0.5)
            {
                _2405 = true;
                break;
            }
        }
        uint _2346 = _369 + uint(_2200.w);
        if ((cbInstanceData._m0[_2346].w < 1.0) && ((cbInstanceData._m0[_2346].w + _2241) < 0.5))
        {
            _2405 = true;
            break;
        }
        if ((_2225 + _195) < _2223.x)
        {
            _2405 = true;
            break;
        }
        _2405 = false;
        break;
    }
    float _2563;
    if (_2405)
    {
        discard_state = true;
        _2563 = 0.0;
    }
    else
    {
        _2563 = _2066;
    }
    SV_Target.x = _2229;
    SV_Target.y = _2230;
    SV_Target.z = _2231;
    SV_Target.w = _2563;
    SV_Target_1.x = _2234;
    SV_Target_1.y = _2237;
    SV_Target_1.z = _2240;
    SV_Target_1.w = _2066;
    discard_exit();
}


