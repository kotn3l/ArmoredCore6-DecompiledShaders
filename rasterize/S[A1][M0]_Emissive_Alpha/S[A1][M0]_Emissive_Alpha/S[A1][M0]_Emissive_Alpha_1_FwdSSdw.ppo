#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A1_M0_Emissive_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_A1_M0_Emissive_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _720;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _162 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _163 = _162 * NORMAL.x;
    float _164 = _162 * NORMAL.y;
    float _165 = _162 * NORMAL.z;
    vec4 _185 = texture(sampler2D(S_A1_M0_Emissive_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _189 = _185.w * TEXCOORD_1.z;
    vec4 _205 = texture(sampler2D(S_A1_M0_Emissive_Alpha_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _219 = inversesqrt(dot(vec3(_163, _164, _165), vec3(_163, _164, _165)));
    float _220 = _219 * _163;
    float _221 = _219 * _164;
    float _222 = _219 * _165;
    float _2899 = isnan(0.0) ? _189 : (isnan(_189) ? 0.0 : max(_189, 0.0));
    float _224 = isnan(1.0) ? _2899 : (isnan(_2899) ? 1.0 : min(_2899, 1.0));
    float _2910 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _2921 = isnan(0.0) ? cbMtdParam._m0[10u].y : (isnan(cbMtdParam._m0[10u].y) ? 0.0 : max(cbMtdParam._m0[10u].y, 0.0));
    float _2932 = isnan(0.0) ? cbMtdParam._m0[10u].z : (isnan(cbMtdParam._m0[10u].z) ? 0.0 : max(cbMtdParam._m0[10u].z, 0.0));
    float _243 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _285 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _295 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _285);
    float _296 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _285);
    float _297 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _285);
    float _301 = inversesqrt(dot(vec3(_295, _296, _297), vec3(_295, _296, _297)));
    float _302 = _295 * _301;
    float _303 = _296 * _301;
    float _304 = _297 * _301;
    float _310 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _311 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _332 = fma(_222, cbSceneParam._m0[5u].z, fma(_221, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _220));
    float _335 = fma(_222, cbSceneParam._m0[6u].z, fma(_221, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _220));
    float _338 = fma(_222, cbSceneParam._m0[7u].z, fma(_221, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _220));
    uint _351 = uint(roundEven(NORMAL.w)) * 13u;
    uint _352 = _351 + 9u;
    uint _353 = _352 + uint(cbMatDynParam._m0[0u].w);
    float _359 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2910 : (isnan(_2910) ? 1.0 : min(_2910, 1.0)))) * cbInstanceData._m0[_353].x;
    float _360 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2921 : (isnan(_2921) ? 1.0 : min(_2921, 1.0)))) * cbInstanceData._m0[_353].y;
    float _361 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2932 : (isnan(_2932) ? 1.0 : min(_2932, 1.0)))) * cbInstanceData._m0[_353].z;
    float _2943 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _362 = isnan(1.0) ? _2943 : (isnan(_2943) ? 1.0 : min(_2943, 1.0));
    float _2954 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _363 = isnan(1.0) ? _2954 : (isnan(_2954) ? 1.0 : min(_2954, 1.0));
    float _2965 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _364 = isnan(1.0) ? _2965 : (isnan(_2965) ? 1.0 : min(_2965, 1.0));
    vec4 _373 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _310, cbSceneParam._m0[86u].y * _311));
    float _376 = _373.x * TEXCOORD_1.w;
    float _377 = dot(vec3(_220, _221, _222), vec3(_302, _303, _304));
    float _380 = _377 * 2.0;
    float _385 = (_380 * _220) - _302;
    float _386 = (_380 * _221) - _303;
    float _387 = (_380 * _222) - _304;
    float _409 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _413 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _417 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _719;
    float _721;
    float _722;
    float _723;
    float _724;
    float _725;
    float _726;
    float _727;
    float _728;
    float _729;
    float _730;
    float _731;
    float _732;
    float _733;
    float _734;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _444 = fma(_417, cbModelParam._m0[26u].z, fma(_413, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _409));
        float _448 = fma(_417, cbModelParam._m0[27u].z, fma(_413, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _409));
        float _452 = fma(_417, cbModelParam._m0[28u].z, fma(_413, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _409));
        float _477 = _409 + _220;
        float _478 = _413 + _221;
        float _479 = _417 + _222;
        float _489 = fma(_479, cbModelParam._m0[26u].z, fma(_478, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _477)) - _444;
        float _490 = fma(_479, cbModelParam._m0[27u].z, fma(_478, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _477)) - _448;
        float _491 = fma(_479, cbModelParam._m0[28u].z, fma(_478, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _477)) - _452;
        float _495 = inversesqrt(dot(vec3(_489, _490, _491), vec3(_489, _490, _491)));
        float _508 = ((_495 * _489) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_444 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _509 = ((_495 * _490) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_448 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _510 = ((_495 * _491) / cbModelParam._m0[34u].z) + ((((((_452 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _513 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_508, _509, _510), 0.0);
        vec4 _520 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_508, _509, _510), 0.0);
        vec4 _527 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_508, _509, _510), 0.0);
        vec4 _534 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_508, _509, _510), 0.0);
        float _547 = exp2((_513.w + (-0.5)) * 20.0) * 2.0;
        float _548 = _547 * (_513.x + (-0.5));
        float _549 = _547 * (_513.y + (-0.5));
        float _550 = _547 * (_513.z + (-0.5));
        float _557 = exp2((_520.w + (-0.5)) * 20.0) * 2.0;
        float _558 = _557 * (_520.x + (-0.5));
        float _559 = _557 * (_520.y + (-0.5));
        float _560 = _557 * (_520.z + (-0.5));
        float _567 = exp2((_527.w + (-0.5)) * 20.0) * 2.0;
        float _568 = _567 * (_527.x + (-0.5));
        float _569 = _567 * (_527.y + (-0.5));
        float _570 = _567 * (_527.z + (-0.5));
        float _577 = exp2((_534.w + (-0.5)) * 20.0) * 2.0;
        float _578 = _577 * (_534.x + (-0.5));
        float _579 = _577 * (_534.y + (-0.5));
        float _580 = _577 * (_534.z + (-0.5));
        float _581 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
        float _582 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
        float _583 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
        float _584 = _548 * 0.5;
        float _585 = _558 * 0.5;
        float _586 = _568 * 0.5;
        float _587 = dot(vec3(_584, _585, _586), vec3(_584, _585, _586));
        float _592 = (_587 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_587);
        float _601 = (dot(vec3(_220, _221, _222), vec3(_592 * _584, _592 * _585, _592 * _586)) + 1.0) * 0.5;
        float _2991 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
        float _611 = sqrt(((_585 * _585) + (_584 * _584)) + (_586 * _586)) / (_581 + 9.9999997473787516355514526367188e-06);
        float _3002 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
        float _612 = isnan(1.0) ? _3002 : (isnan(_3002) ? 1.0 : min(_3002, 1.0));
        float _613 = _612 * 2.0;
        float _617 = (1.0 - _612) / (_612 + 1.0);
        float _3013 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
        float _618 = isnan(1.0) ? _3013 : (isnan(_3013) ? 1.0 : min(_3013, 1.0));
        float _627 = ((((1.0 - _618) * (_613 + 2.0)) * exp2(log2(isnan(1.0) ? _2991 : (isnan(_2991) ? 1.0 : min(_2991, 1.0))) * (_613 + 1.0))) + _618) * _581;
        float _628 = _549 * 0.5;
        float _629 = _559 * 0.5;
        float _630 = _569 * 0.5;
        float _631 = dot(vec3(_628, _629, _630), vec3(_628, _629, _630));
        float _636 = (_631 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_631);
        float _644 = (dot(vec3(_220, _221, _222), vec3(_636 * _628, _636 * _629, _636 * _630)) + 1.0) * 0.5;
        float _3024 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
        float _653 = sqrt(((_629 * _629) + (_628 * _628)) + (_630 * _630)) / (_582 + 9.9999997473787516355514526367188e-06);
        float _3035 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
        float _654 = isnan(1.0) ? _3035 : (isnan(_3035) ? 1.0 : min(_3035, 1.0));
        float _655 = _654 * 2.0;
        float _659 = (1.0 - _654) / (_654 + 1.0);
        float _3046 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
        float _660 = isnan(1.0) ? _3046 : (isnan(_3046) ? 1.0 : min(_3046, 1.0));
        float _669 = ((((1.0 - _660) * (_655 + 2.0)) * exp2(log2(isnan(1.0) ? _3024 : (isnan(_3024) ? 1.0 : min(_3024, 1.0))) * (_655 + 1.0))) + _660) * _582;
        float _670 = _550 * 0.5;
        float _671 = _560 * 0.5;
        float _672 = _570 * 0.5;
        float _673 = dot(vec3(_670, _671, _672), vec3(_670, _671, _672));
        float _678 = (_673 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_673);
        float _686 = (dot(vec3(_220, _221, _222), vec3(_678 * _670, _678 * _671, _678 * _672)) + 1.0) * 0.5;
        float _3057 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
        float _695 = sqrt(((_671 * _671) + (_670 * _670)) + (_672 * _672)) / (_583 + 9.9999997473787516355514526367188e-06);
        float _3068 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
        float _696 = isnan(1.0) ? _3068 : (isnan(_3068) ? 1.0 : min(_3068, 1.0));
        float _697 = _696 * 2.0;
        float _701 = (1.0 - _696) / (_696 + 1.0);
        float _3079 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
        float _702 = isnan(1.0) ? _3079 : (isnan(_3079) ? 1.0 : min(_3079, 1.0));
        float _711 = ((((1.0 - _702) * (_697 + 2.0)) * exp2(log2(isnan(1.0) ? _3057 : (isnan(_3057) ? 1.0 : min(_3057, 1.0))) * (_697 + 1.0))) + _702) * _583;
        _719 = _550;
        _721 = _549;
        _722 = _548;
        _723 = _560;
        _724 = _559;
        _725 = _558;
        _726 = _570;
        _727 = _569;
        _728 = _568;
        _729 = _583;
        _730 = _582;
        _731 = _581;
        _732 = cbModelParam._m0[36u].z * (isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0)));
        _733 = cbModelParam._m0[36u].z * (isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0)));
        _734 = cbModelParam._m0[36u].z * (isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0)));
    }
    else
    {
        _719 = _720;
        _721 = _720;
        _722 = _720;
        _723 = _720;
        _724 = _720;
        _725 = _720;
        _726 = _720;
        _727 = _720;
        _728 = _720;
        _729 = _720;
        _730 = _720;
        _731 = _720;
        _732 = 0.0;
        _733 = 0.0;
        _734 = 0.0;
    }
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _760 = fma(_417, cbModelParam._m0[30u].z, fma(_413, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _409));
        float _764 = fma(_417, cbModelParam._m0[31u].z, fma(_413, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _409));
        float _768 = fma(_417, cbModelParam._m0[32u].z, fma(_413, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _409));
        float _791 = _409 + _220;
        float _792 = _413 + _221;
        float _793 = _417 + _222;
        float _803 = fma(_793, cbModelParam._m0[30u].z, fma(_792, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _791)) - _760;
        float _804 = fma(_793, cbModelParam._m0[31u].z, fma(_792, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _791)) - _764;
        float _805 = fma(_793, cbModelParam._m0[32u].z, fma(_792, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _791)) - _768;
        float _809 = inversesqrt(dot(vec3(_803, _804, _805), vec3(_803, _804, _805)));
        float _822 = ((_809 * _803) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_760 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _823 = ((_809 * _804) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_764 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _824 = ((_809 * _805) / cbModelParam._m0[35u].z) + ((((((_768 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _826 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        vec4 _833 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        float _859 = exp2((_826.w + (-0.5)) * 20.0) * 2.0;
        float _860 = _859 * (_826.x + (-0.5));
        float _861 = _859 * (_826.y + (-0.5));
        float _862 = _859 * (_826.z + (-0.5));
        float _869 = exp2((_833.w + (-0.5)) * 20.0) * 2.0;
        float _870 = _869 * (_833.x + (-0.5));
        float _871 = _869 * (_833.y + (-0.5));
        float _872 = _869 * (_833.z + (-0.5));
        float _879 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _880 = _879 * (_840.x + (-0.5));
        float _881 = _879 * (_840.y + (-0.5));
        float _882 = _879 * (_840.z + (-0.5));
        float _889 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _890 = _889 * (_847.x + (-0.5));
        float _891 = _889 * (_847.y + (-0.5));
        float _892 = _889 * (_847.z + (-0.5));
        float _893 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _894 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _895 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _896 = _860 * 0.5;
        float _897 = _870 * 0.5;
        float _898 = _880 * 0.5;
        float _899 = dot(vec3(_896, _897, _898), vec3(_896, _897, _898));
        float _904 = (_899 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_899);
        float _912 = (dot(vec3(_220, _221, _222), vec3(_904 * _896, _904 * _897, _904 * _898)) + 1.0) * 0.5;
        float _3120 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _921 = sqrt(((_897 * _897) + (_896 * _896)) + (_898 * _898)) / (_893 + 9.9999997473787516355514526367188e-06);
        float _3131 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _922 = isnan(1.0) ? _3131 : (isnan(_3131) ? 1.0 : min(_3131, 1.0));
        float _923 = _922 * 2.0;
        float _927 = (1.0 - _922) / (_922 + 1.0);
        float _3142 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3142 : (isnan(_3142) ? 1.0 : min(_3142, 1.0));
        float _937 = ((((1.0 - _928) * (_923 + 2.0)) * exp2(log2(isnan(1.0) ? _3120 : (isnan(_3120) ? 1.0 : min(_3120, 1.0))) * (_923 + 1.0))) + _928) * _893;
        float _938 = _861 * 0.5;
        float _939 = _871 * 0.5;
        float _940 = _881 * 0.5;
        float _941 = dot(vec3(_938, _939, _940), vec3(_938, _939, _940));
        float _946 = (_941 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_941);
        float _954 = (dot(vec3(_220, _221, _222), vec3(_946 * _938, _946 * _939, _946 * _940)) + 1.0) * 0.5;
        float _3153 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _963 = sqrt(((_939 * _939) + (_938 * _938)) + (_940 * _940)) / (_894 + 9.9999997473787516355514526367188e-06);
        float _3164 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _3164 : (isnan(_3164) ? 1.0 : min(_3164, 1.0));
        float _965 = _964 * 2.0;
        float _969 = (1.0 - _964) / (_964 + 1.0);
        float _3175 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3175 : (isnan(_3175) ? 1.0 : min(_3175, 1.0));
        float _979 = ((((1.0 - _970) * (_965 + 2.0)) * exp2(log2(isnan(1.0) ? _3153 : (isnan(_3153) ? 1.0 : min(_3153, 1.0))) * (_965 + 1.0))) + _970) * _894;
        float _980 = _862 * 0.5;
        float _981 = _872 * 0.5;
        float _982 = _882 * 0.5;
        float _983 = dot(vec3(_980, _981, _982), vec3(_980, _981, _982));
        float _988 = (_983 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_983);
        float _996 = (dot(vec3(_220, _221, _222), vec3(_988 * _980, _988 * _981, _988 * _982)) + 1.0) * 0.5;
        float _3186 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1005 = sqrt(((_981 * _981) + (_980 * _980)) + (_982 * _982)) / (_895 + 9.9999997473787516355514526367188e-06);
        float _3197 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3197 : (isnan(_3197) ? 1.0 : min(_3197, 1.0));
        float _1007 = _1006 * 2.0;
        float _1011 = (1.0 - _1006) / (_1006 + 1.0);
        float _3208 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3208 : (isnan(_3208) ? 1.0 : min(_3208, 1.0));
        float _1021 = ((((1.0 - _1012) * (_1007 + 2.0)) * exp2(log2(isnan(1.0) ? _3186 : (isnan(_3186) ? 1.0 : min(_3186, 1.0))) * (_1007 + 1.0))) + _1012) * _895;
        _1029 = _862;
        _1030 = _861;
        _1031 = _860;
        _1032 = _872;
        _1033 = _871;
        _1034 = _870;
        _1035 = _882;
        _1036 = _881;
        _1037 = _880;
        _1038 = _895;
        _1039 = _894;
        _1040 = _893;
        _1041 = cbModelParam._m0[36u].w * (isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0)));
        _1042 = cbModelParam._m0[36u].w * (isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0)));
        _1043 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0)));
    }
    else
    {
        _1029 = _720;
        _1030 = _720;
        _1031 = _720;
        _1032 = _720;
        _1033 = _720;
        _1034 = _720;
        _1035 = _720;
        _1036 = _720;
        _1037 = _720;
        _1038 = _720;
        _1039 = _720;
        _1040 = _720;
        _1041 = 0.0;
        _1042 = 0.0;
        _1043 = 0.0;
    }
    float _1053 = (cbModelParam._m0[1u].x * (_1041 - _732)) + _732;
    float _1054 = (cbModelParam._m0[1u].x * (_1042 - _733)) + _733;
    float _1055 = (cbModelParam._m0[1u].x * (_1043 - _734)) + _734;
    float _1076 = fma(_1055, cbSceneParam._m0[89u].z, fma(_1054, cbSceneParam._m0[89u].y, _1053 * cbSceneParam._m0[89u].x));
    float _1079 = fma(_1055, cbSceneParam._m0[90u].z, fma(_1054, cbSceneParam._m0[90u].y, _1053 * cbSceneParam._m0[90u].x));
    float _1082 = fma(_1055, cbSceneParam._m0[91u].z, fma(_1054, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1053));
    float _1097 = _385 * 0.5;
    float _1098 = _386 * 0.5;
    float _1099 = _387 * 0.5;
    float _1100 = dot(vec4(_1097, _1098, _1099, 1.0), vec4(_1031, _1034, _1037, _1040));
    float _1103 = dot(vec4(_1097, _1098, _1099, 1.0), vec4(_1030, _1033, _1036, _1039));
    float _1106 = dot(vec4(_1097, _1098, _1099, 1.0), vec4(_1029, _1032, _1035, _1038));
    float _1140;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1113 = dot(vec4(_1097, _1098, _1099, 1.0), vec4(_719, _723, _726, _729));
        float _1117 = dot(vec4(_1097, _1098, _1099, 1.0), vec4(_721, _724, _727, _730));
        float _1121 = dot(vec4(_1097, _1098, _1099, 1.0), vec4(_722, _725, _728, _731));
        float _1128 = dot(vec4(cbModelParam._m0[39u]), vec4(_1097, _1098, _1099, 1.0));
        _1140 = dot(vec3(isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)), isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)), isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1128) ? 0.0 : (isnan(0.0) ? _1128 : max(0.0, _1128))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1140 = 1.0;
    }
    float _1151;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1142 = dot(vec4(cbModelParam._m0[40u]), vec4(_1097, _1098, _1099, 1.0));
        _1151 = dot(vec3(isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0)), isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)), isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1142) ? 0.0 : (isnan(0.0) ? _1142 : max(0.0, _1142))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1151 = 1.0;
    }
    float _1155 = (_1151 * cbModelParam._m0[1u].x) + (_1140 * (1.0 - cbModelParam._m0[1u].x));
    float _1164 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1246;
    float _1248;
    float _1250;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1213 = fma(_417, cbModelParam._m0[13u].z, fma(_413, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _409)) + cbModelParam._m0[13u].w;
        float _1217 = fma(_417, cbModelParam._m0[14u].z, fma(_413, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _409)) + cbModelParam._m0[14u].w;
        float _1221 = fma(_417, cbModelParam._m0[15u].z, fma(_413, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _409)) + cbModelParam._m0[15u].w;
        float _1224 = fma(_387, cbModelParam._m0[13u].z, fma(_386, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _385));
        float _1227 = fma(_387, cbModelParam._m0[14u].z, fma(_386, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _385));
        float _1230 = fma(_387, cbModelParam._m0[15u].z, fma(_386, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _385));
        float _1256;
        if (_1224 > 0.0)
        {
            _1256 = abs((1.0 - _1213) / _1224);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1224 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1213 + 1.0) / _1224);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1256 = frontier_phi_14_12_ladder;
        }
        float _1484;
        if (_1227 > 0.0)
        {
            _1484 = abs((1.0 - _1217) / _1227);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1227 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1217 + 1.0) / _1227);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1484 = frontier_phi_23_19_ladder;
        }
        float _1676;
        if (_1230 > 0.0)
        {
            _1676 = abs((1.0 - _1221) / _1230);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1230 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1221 + 1.0) / _1230);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1676 = frontier_phi_35_30_ladder;
        }
        float _1678 = isnan(_1484) ? _1256 : (isnan(_1256) ? _1484 : min(_1256, _1484));
        float _1679 = isnan(_1676) ? _1678 : (isnan(_1678) ? _1676 : min(_1678, _1676));
        float _1683 = (_1679 * _1224) + _1213;
        float _1684 = (_1679 * _1227) + _1217;
        float _1685 = (_1679 * _1230) + _1221;
        float _1686 = _1679 * 9.9999997473787516355514526367188e-05;
        float _1688 = (-1.0) - _1686;
        float _1690 = _1686 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1685 > _1690) || ((_1685 < _1688) || ((_1684 > _1690) || ((_1684 < _1688) || ((_1683 < _1688) || (_1683 > _1690))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1782 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1685, cbModelParam._m0[9u].z, fma(_1684, cbModelParam._m0[9u].y, _1683 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1685, cbModelParam._m0[10u].z, fma(_1684, cbModelParam._m0[10u].y, _1683 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1685, cbModelParam._m0[11u].z, fma(_1684, cbModelParam._m0[11u].y, _1683 * cbModelParam._m0[11u].x))), _1164);
            frontier_phi_13_35_ladder = _1782.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1782.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1782.x * cbModelParam._m0[1u].y;
        }
        _1246 = frontier_phi_13_35_ladder_2;
        _1248 = frontier_phi_13_35_ladder_1;
        _1250 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1234 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_385, _386, _387), _1164);
        _1246 = _1234.x * cbModelParam._m0[1u].y;
        _1248 = _1234.y * cbModelParam._m0[1u].y;
        _1250 = _1234.z * cbModelParam._m0[1u].y;
    }
    float _1253 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1346;
    float _1348;
    float _1350;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1310 = fma(_417, cbModelParam._m0[21u].z, fma(_413, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _409)) + cbModelParam._m0[21u].w;
        float _1314 = fma(_417, cbModelParam._m0[22u].z, fma(_413, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _409)) + cbModelParam._m0[22u].w;
        float _1318 = fma(_417, cbModelParam._m0[23u].z, fma(_413, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _409)) + cbModelParam._m0[23u].w;
        float _1321 = fma(_387, cbModelParam._m0[21u].z, fma(_386, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _385));
        float _1324 = fma(_387, cbModelParam._m0[22u].z, fma(_386, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _385));
        float _1327 = fma(_387, cbModelParam._m0[23u].z, fma(_386, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _385));
        float _1489;
        if (_1321 > 0.0)
        {
            _1489 = abs((1.0 - _1310) / _1321);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1321 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1310 + 1.0) / _1321);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1489 = frontier_phi_25_21_ladder;
        }
        float _1703;
        if (_1324 > 0.0)
        {
            _1703 = abs((1.0 - _1314) / _1324);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1324 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1314 + 1.0) / _1324);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1703 = frontier_phi_37_32_ladder;
        }
        float _1854;
        if (_1327 > 0.0)
        {
            _1854 = abs((1.0 - _1318) / _1327);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1327 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1318 + 1.0) / _1327);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1854 = frontier_phi_46_43_ladder;
        }
        float _1856 = isnan(_1703) ? _1489 : (isnan(_1489) ? _1703 : min(_1489, _1703));
        float _1857 = isnan(_1854) ? _1856 : (isnan(_1856) ? _1854 : min(_1856, _1854));
        float _1861 = (_1857 * _1321) + _1310;
        float _1862 = (_1857 * _1324) + _1314;
        float _1863 = (_1857 * _1327) + _1318;
        float _1864 = _1857 * 9.9999997473787516355514526367188e-05;
        float _1865 = (-1.0) - _1864;
        float _1867 = _1864 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1863 > _1867) || ((_1863 < _1865) || ((_1862 > _1867) || ((_1862 < _1865) || ((_1861 < _1865) || (_1861 > _1867))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2099 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1863, cbModelParam._m0[17u].z, fma(_1862, cbModelParam._m0[17u].y, _1861 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1863, cbModelParam._m0[18u].z, fma(_1862, cbModelParam._m0[18u].y, _1861 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1863, cbModelParam._m0[19u].z, fma(_1862, cbModelParam._m0[19u].y, _1861 * cbModelParam._m0[19u].x))), _1253);
            frontier_phi_22_46_ladder = _2099.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2099.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2099.x * cbModelParam._m0[1u].z;
        }
        _1346 = frontier_phi_22_46_ladder_2;
        _1348 = frontier_phi_22_46_ladder_1;
        _1350 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1330 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_385, _386, _387), _1253);
        _1346 = _1330.x * cbModelParam._m0[1u].z;
        _1348 = _1330.y * cbModelParam._m0[1u].z;
        _1350 = _1330.z * cbModelParam._m0[1u].z;
    }
    float _1362 = _376 * 0.01200000010430812835693359375;
    float _1364 = _1362 * ((cbModelParam._m0[1u].w * (_1346 - _1246)) + _1246);
    float _1365 = _1362 * ((cbModelParam._m0[1u].w * (_1348 - _1248)) + _1248);
    float _1366 = _1362 * ((cbModelParam._m0[1u].w * (_1350 - _1250)) + _1250);
    float _1369 = fma(_1366, cbSceneParam._m0[89u].z, fma(_1365, cbSceneParam._m0[89u].y, _1364 * cbSceneParam._m0[89u].x));
    float _1372 = fma(_1366, cbSceneParam._m0[90u].z, fma(_1365, cbSceneParam._m0[90u].y, _1364 * cbSceneParam._m0[90u].x));
    float _1375 = fma(_1366, cbSceneParam._m0[91u].z, fma(_1365, cbSceneParam._m0[91u].y, _1364 * cbSceneParam._m0[91u].x));
    vec4 _1383 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_310, _311));
    float _1385 = _1383.w;
    float _1397 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1385);
    float _1398 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1385);
    float _1399 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1385);
    uvec4 _1403 = floatBitsToUint(cbInstanceData._m0[_351 + 5u]);
    uint _1405 = _1403.x * 14u;
    uint _1406 = _1405 + 13u;
    float _1413 = _376 + (-1.0);
    float _1419 = (cbLight._m0[_1406].x * _1413) + 1.0;
    float _1420 = (cbLight._m0[_1406].y * _1413) + 1.0;
    float _1421 = (cbLight._m0[_1406].z * _1413) + 1.0;
    float _1422 = (cbLight._m0[_1406].w * _1413) + 1.0;
    uint _1423 = _1405 + 5u;
    float _1429 = isnan(1.0) ? _1420 : (isnan(_1420) ? 1.0 : min(_1420, 1.0));
    uint _1433 = _1405 + 4u;
    float _1443 = isnan(1.0) ? _1419 : (isnan(_1419) ? 1.0 : min(_1419, 1.0));
    uint _1447 = _1405 | 1u;
    float _1458 = dot(vec3(cbLight._m0[_1405].xyz), vec3(_220, _221, _222));
    float _1461 = dot(vec3(cbLight._m0[_1447].xyz), vec3(_220, _221, _222));
    float _3344 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
    float _3355 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
    float _1466 = (isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0))) * 0.3183098733425140380859375;
    float _1468 = (isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0))) * 0.3183098733425140380859375;
    float _1475 = ((cbLight._m0[_1423].x * _1429) * _1468) + (((cbLight._m0[_1433].x * _1397) * _1443) * _1466);
    float _1476 = ((_1429 * cbLight._m0[_1423].y) * _1468) + (((cbLight._m0[_1433].y * _1398) * _1443) * _1466);
    float _1477 = ((_1429 * cbLight._m0[_1423].z) * _1468) + (((cbLight._m0[_1433].z * _1399) * _1443) * _1466);
    uvec4 _1481 = floatBitsToUint(cbLight._m0[_1405 + 12u]);
    bool _1483 = _1481.x == 0u;
    float _1494;
    float _1496;
    float _1498;
    if (_1483)
    {
        _1494 = _1475;
        _1496 = _1476;
        _1498 = _1477;
    }
    else
    {
        uint _1502 = _1405 + 6u;
        float _1518 = (dot(vec3(cbLight._m0[_1405 + 2u].xyz), vec3(_220, _221, _222)) * 0.5) + 0.5;
        float _1519 = _1518 * _1518;
        float _3366 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
        float _1521 = isnan(1.0) ? _1421 : (isnan(_1421) ? 1.0 : min(_1421, 1.0));
        _1494 = (((cbLight._m0[_1502].x * 0.3183098733425140380859375) * _1520) * _1521) + _1475;
        _1496 = (((cbLight._m0[_1502].y * 0.3183098733425140380859375) * _1520) * _1521) + _1476;
        _1498 = (((cbLight._m0[_1502].z * 0.3183098733425140380859375) * _1520) * _1521) + _1477;
    }
    bool _1501 = _1481.y == 0u;
    float _1539;
    float _1541;
    float _1543;
    if (_1501)
    {
        _1539 = _1494;
        _1541 = _1496;
        _1543 = _1498;
    }
    else
    {
        uint _1647 = _1405 + 7u;
        float _1663 = (dot(vec3(cbLight._m0[_1405 + 3u].xyz), vec3(_220, _221, _222)) * 0.5) + 0.5;
        float _1664 = _1663 * _1663;
        float _3382 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
        float _1666 = isnan(1.0) ? _1422 : (isnan(_1422) ? 1.0 : min(_1422, 1.0));
        _1539 = (((cbLight._m0[_1647].x * 0.3183098733425140380859375) * _1665) * _1666) + _1494;
        _1541 = (((cbLight._m0[_1647].y * 0.3183098733425140380859375) * _1665) * _1666) + _1496;
        _1543 = (((cbLight._m0[_1647].z * 0.3183098733425140380859375) * _1665) * _1666) + _1498;
    }
    uint _1545 = _1405 + 8u;
    float _1551 = cbLight._m0[_1405].x + _302;
    float _1552 = cbLight._m0[_1405].y + _303;
    float _1553 = cbLight._m0[_1405].z + _304;
    float _1557 = inversesqrt(dot(vec3(_1551, _1552, _1553), vec3(_1551, _1552, _1553)));
    float _1561 = dot(vec3(_220, _221, _222), vec3(cbLight._m0[_1405].xyz));
    float _3398 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
    float _1564 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
    float _3409 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _1565 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
    float _1566 = dot(vec3(cbLight._m0[_1405].xyz), vec3(_1551 * _1557, _1552 * _1557, _1553 * _1557));
    float _3420 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
    float _1577 = (exp2(log2(1.0 - (isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1583 = (0.5 / ((_1564 + 9.9999999392252902907785028219223e-09) + _1565)) * _1564;
    float _3431 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
    float _1585 = (isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0))) * 0.31831014156341552734375;
    uint _1599 = _1405 + 9u;
    float _1605 = cbLight._m0[_1447].x + _302;
    float _1606 = cbLight._m0[_1447].y + _303;
    float _1607 = cbLight._m0[_1447].z + _304;
    float _1611 = inversesqrt(dot(vec3(_1605, _1606, _1607), vec3(_1605, _1606, _1607)));
    float _1615 = dot(vec3(_220, _221, _222), vec3(cbLight._m0[_1447].xyz));
    float _3442 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
    float _1618 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
    float _1619 = dot(vec3(cbLight._m0[_1447].xyz), vec3(_1605 * _1611, _1606 * _1611, _1607 * _1611));
    float _3453 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
    float _1628 = (exp2(log2(1.0 - (isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1632 = (0.5 / ((_1618 + 9.9999999392252902907785028219223e-09) + _1565)) * _1618;
    float _3464 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
    float _1634 = (isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0))) * 0.31831014156341552734375;
    float _1644 = (((_1628 * cbLight._m0[_1599].x) * _1634) * _1429) + ((((cbLight._m0[_1545].x * _1397) * _1577) * _1585) * _1443);
    float _1645 = (((_1628 * cbLight._m0[_1599].y) * _1634) * _1429) + ((((cbLight._m0[_1545].y * _1398) * _1577) * _1585) * _1443);
    float _1646 = (((_1628 * cbLight._m0[_1599].z) * _1634) * _1429) + ((((cbLight._m0[_1545].z * _1399) * _1577) * _1585) * _1443);
    float _1708;
    float _1710;
    float _1712;
    if (_1483)
    {
        _1708 = _1644;
        _1710 = _1645;
        _1712 = _1646;
    }
    else
    {
        uint _1714 = _1405 + 10u;
        uint _1720 = _1405 + 2u;
        float _1726 = cbLight._m0[_1720].x + _302;
        float _1727 = cbLight._m0[_1720].y + _303;
        float _1728 = cbLight._m0[_1720].z + _304;
        float _1732 = inversesqrt(dot(vec3(_1726, _1727, _1728), vec3(_1726, _1727, _1728)));
        float _1736 = dot(vec3(_220, _221, _222), vec3(cbLight._m0[_1720].xyz));
        float _3475 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1739 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
        float _1740 = dot(vec3(cbLight._m0[_1720].xyz), vec3(_1726 * _1732, _1727 * _1732, _1728 * _1732));
        float _3486 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1749 = (exp2(log2(1.0 - (isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1753 = (0.5 / ((_1739 + 9.9999999392252902907785028219223e-09) + _1565)) * _1739;
        float _3497 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1755 = (isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0))) * 0.31831014156341552734375;
        float _1756 = isnan(1.0) ? _1421 : (isnan(_1421) ? 1.0 : min(_1421, 1.0));
        _1708 = (((_1749 * cbLight._m0[_1714].x) * _1755) * _1756) + _1644;
        _1710 = (((_1749 * cbLight._m0[_1714].y) * _1755) * _1756) + _1645;
        _1712 = (((_1749 * cbLight._m0[_1714].z) * _1755) * _1756) + _1646;
    }
    float _1791;
    float _1793;
    float _1795;
    if (_1501)
    {
        _1791 = _1708;
        _1793 = _1710;
        _1795 = _1712;
    }
    else
    {
        uint _1802 = _1405 + 11u;
        uint _1808 = _1405 + 3u;
        float _1814 = cbLight._m0[_1808].x + _302;
        float _1815 = cbLight._m0[_1808].y + _303;
        float _1816 = cbLight._m0[_1808].z + _304;
        float _1820 = inversesqrt(dot(vec3(_1814, _1815, _1816), vec3(_1814, _1815, _1816)));
        float _1824 = dot(vec3(_220, _221, _222), vec3(cbLight._m0[_1808].xyz));
        float _3513 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        float _1827 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
        float _1828 = dot(vec3(cbLight._m0[_1808].xyz), vec3(_1814 * _1820, _1815 * _1820, _1816 * _1820));
        float _3524 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
        float _1837 = (exp2(log2(1.0 - (isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1841 = (0.5 / ((_1827 + 9.9999999392252902907785028219223e-09) + _1565)) * _1827;
        float _3535 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
        float _1843 = (isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))) * 0.31831014156341552734375;
        float _1844 = isnan(1.0) ? _1422 : (isnan(_1422) ? 1.0 : min(_1422, 1.0));
        _1791 = (((_1837 * cbLight._m0[_1802].x) * _1843) * _1844) + _1708;
        _1793 = (((_1837 * cbLight._m0[_1802].y) * _1843) * _1844) + _1710;
        _1795 = (((_1837 * cbLight._m0[_1802].z) * _1843) * _1844) + _1712;
    }
    float _1979;
    float _1981;
    float _1983;
    float _1985;
    float _1987;
    float _1989;
    if (_1403.y == 0u)
    {
        float _1919 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1920 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1919;
        float _1921 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1919;
        float _1922 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1919;
        uvec4 _1934 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1935 = _1934.x;
        uint _1946 = uint((float(_1934.y) * floor(float(uint(cbSceneParam._m0[85u].y * _311) / _1935))) + floor(float(uint(cbSceneParam._m0[85u].x * _310) / _1935)));
        float _1956 = (log2(_1922 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1957 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
        uint _1960 = uint(isnan(14.0) ? _1957 : (isnan(_1957) ? 14.0 : min(_1957, 14.0)));
        uvec4 _1965 = texelFetch(g_lightClusterGridBuffer, int(((_1960 << 2u) + (_1946 << 6u)) >> 2u));
        uint _1966 = _1965.x;
        uint _1967 = _1934.z;
        float _2104;
        float _2106;
        float _2108;
        float _2110;
        float _2112;
        float _2114;
        if (((((1u << ((_1967 >> 4u) & 15u)) + 4294967295u) & _1966) == 0u) || ((_1967 & 240u) == 0u))
        {
            _2104 = 0.0;
            _2106 = 0.0;
            _2108 = 0.0;
            _2110 = 0.0;
            _2112 = 0.0;
            _2114 = 0.0;
        }
        else
        {
            float _2105;
            float _2107;
            float _2109;
            float _2111;
            float _2113;
            float _2115;
            float _2256 = 0.0;
            float _2257 = 0.0;
            float _2258 = 0.0;
            float _2259 = 0.0;
            float _2260 = 0.0;
            float _2261 = 0.0;
            uint _2262 = 0u;
            uint _2271;
            bool _2272;
            for (;;)
            {
                _2271 = texelFetch(g_lightClassification, int((((_1960 << 5u) + (_1946 << 9u)) + (_2262 << 2u)) >> 2u)).x;
                _2272 = _2271 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2272)
                {
                    frontier_phi_61_pred = _2256;
                    frontier_phi_61_pred_1 = _2261;
                    frontier_phi_61_pred_2 = _2260;
                    frontier_phi_61_pred_3 = _2259;
                    frontier_phi_61_pred_4 = _2258;
                    frontier_phi_61_pred_5 = _2257;
                }
                else
                {
                    float _2380;
                    float _2381;
                    float _2382;
                    float _2383;
                    float _2384;
                    float _2385;
                    uint _2386;
                    _2380 = _2256;
                    _2381 = _2257;
                    _2382 = _2258;
                    _2383 = _2259;
                    _2384 = _2260;
                    _2385 = _2261;
                    _2386 = _2271;
                    float _2312;
                    float _2313;
                    float _2314;
                    float _2315;
                    float _2316;
                    float _2317;
                    for (;;)
                    {
                        uint _2390 = uint(findLSB(_2386)) + (_2262 << 5u);
                        uint _2387 = (_2386 + 4294967295u) & _2386;
                        uint _2392 = _2390 * 48u;
                        vec4 _2406 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2392)).x, texelFetch(g_PointLightRenderingBuffer, int(_2392 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2392 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2392 + 3u)).x));
                        uint _2412 = (_2390 * 48u) + 4u;
                        vec4 _2425 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2412)).x, texelFetch(g_PointLightRenderingBuffer, int(_2412 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2412 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2412 + 3u)).x));
                        uint _2431 = (_2390 * 48u) + 8u;
                        vec3 _2442 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2431)).x, texelFetch(g_PointLightRenderingBuffer, int(_2431 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2431 + 2u)).x));
                        float _2446 = _2406.x - _1920;
                        float _2447 = _2406.y - _1921;
                        float _2448 = _2406.z - _1922;
                        float _2449 = dot(vec3(_2446, _2447, _2448), vec3(_2446, _2447, _2448));
                        float _2452 = inversesqrt(_2449);
                        float _2461 = 1.0 - (_2449 * _2406.w);
                        float _3561 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
                        float _2462 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
                        float _2463 = sqrt(_2449) * _2425.w;
                        float _2466 = 1.39999997615814208984375 / (_2463 + 1.39999997615814208984375);
                        float _2467 = _2466 * _2466;
                        float _2470 = ((1.0 - _2467) * dot(vec3(_332, _335, _338), vec3(_2452 * _2446, _2452 * _2447, _2452 * _2448))) + _2467;
                        float _2473 = _2463 * _2463;
                        float _2477 = ((isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0))) * _2462) / ((_2473 * 0.699999988079071044921875) + 1.0);
                        float _2481 = (-0.0) - _1920;
                        float _2482 = (-0.0) - _1921;
                        float _2483 = (-0.0) - _1922;
                        float _2487 = inversesqrt(dot(vec3(_2481, _2482, _2483), vec3(_2481, _2482, _2483)));
                        float _2491 = dot(vec3(_332, _335, _338), vec3(_2487 * _2481, _2487 * _2482, _2487 * _2483));
                        float _3577 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
                        float _3588 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
                        float _2495 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
                        float _2499 = (0.5 / (((isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) + 9.9999999392252902907785028219223e-09) + _2495)) * _2495;
                        float _3599 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
                        float _2508 = (((isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))) * 3.1415927410125732421875) / ((_2473 * 2.1991131305694580078125) + 3.141590118408203125)) * _2462;
                        _2315 = (_2477 * _2425.x) + _2383;
                        _2316 = (_2477 * _2425.y) + _2384;
                        _2317 = (_2477 * _2425.z) + _2385;
                        _2312 = (_2508 * _2442.x) + _2380;
                        _2313 = (_2508 * _2442.y) + _2381;
                        _2314 = (_2508 * _2442.z) + _2382;
                        if (_2387 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2380 = _2312;
                            _2381 = _2313;
                            _2382 = _2314;
                            _2383 = _2315;
                            _2384 = _2316;
                            _2385 = _2317;
                            _2386 = _2387;
                        }
                    }
                    frontier_phi_61_pred = _2312;
                    frontier_phi_61_pred_1 = _2317;
                    frontier_phi_61_pred_2 = _2316;
                    frontier_phi_61_pred_3 = _2315;
                    frontier_phi_61_pred_4 = _2314;
                    frontier_phi_61_pred_5 = _2313;
                }
                _2105 = frontier_phi_61_pred;
                _2115 = frontier_phi_61_pred_1;
                _2113 = frontier_phi_61_pred_2;
                _2111 = frontier_phi_61_pred_3;
                _2109 = frontier_phi_61_pred_4;
                _2107 = frontier_phi_61_pred_5;
                uint _2263 = _2262 + 1u;
                if (_2263 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2256 = _2105;
                    _2257 = _2107;
                    _2258 = _2109;
                    _2259 = _2111;
                    _2260 = _2113;
                    _2261 = _2115;
                    _2262 = _2263;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2104 = _2105;
            _2106 = _2107;
            _2108 = _2109;
            _2110 = _2111;
            _2112 = _2113;
            _2114 = _2115;
        }
        uvec4 _2118 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2119 = _2118.z;
        uint _2121 = (_2119 >> 8u) & 15u;
        float _2227;
        float _2229;
        float _2231;
        float _2233;
        float _2235;
        float _2237;
        if (((4294967295u << _2121) & _1966) == 0u)
        {
            _2227 = _2104;
            _2229 = _2106;
            _2231 = _2108;
            _2233 = _2110;
            _2235 = _2112;
            _2237 = _2114;
        }
        else
        {
            float _2252 = inversesqrt(dot(vec3(_1920, _1921, _1922), vec3(_1920, _1921, _1922)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2121 < ((_2119 >> 12u) & 15u))
            {
                float _2228;
                float _2230;
                float _2232;
                float _2234;
                float _2236;
                float _2238;
                float _2363 = _2104;
                float _2364 = _2106;
                float _2365 = _2108;
                float _2366 = _2110;
                float _2367 = _2112;
                float _2368 = _2114;
                uint _2369 = _2121;
                uint _2378;
                bool _2379;
                for (;;)
                {
                    _2378 = texelFetch(g_lightClassification, int((((_1960 << 5u) + (_1946 << 9u)) + (_2369 << 2u)) >> 2u)).x;
                    _2379 = _2378 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2379)
                    {
                        frontier_phi_67_pred = _2366;
                        frontier_phi_67_pred_1 = _2367;
                        frontier_phi_67_pred_2 = _2368;
                        frontier_phi_67_pred_3 = _2365;
                        frontier_phi_67_pred_4 = _2364;
                        frontier_phi_67_pred_5 = _2363;
                    }
                    else
                    {
                        float _2513;
                        float _2514;
                        float _2515;
                        float _2516;
                        float _2517;
                        float _2518;
                        float _2765;
                        float _2766;
                        float _2767;
                        float _2768;
                        float _2769;
                        float _2770;
                        float _2526 = _2363;
                        float _2527 = _2364;
                        float _2528 = _2365;
                        float _2529 = _2366;
                        float _2530 = _2367;
                        float _2531 = _2368;
                        uint _2532 = _2378;
                        uint _2533;
                        vec4 _2558;
                        float _2559;
                        vec4 _2574;
                        vec3 _2586;
                        vec4 _2602;
                        vec4 _2618;
                        float _2665;
                        bool _2666;
                        for (;;)
                        {
                            uint _2543 = ((_2369 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2532));
                            _2533 = (_2532 + 4294967295u) & _2532;
                            uint _2545 = _2543 * 40u;
                            _2558 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2545)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2545 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2545 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2545 + 3u)).x));
                            _2559 = _2558.w;
                            uint _2561 = (_2543 * 40u) + 4u;
                            _2574 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2561)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2561 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2561 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2561 + 3u)).x));
                            uint _2576 = (_2543 * 40u) + 8u;
                            _2586 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2576)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2576 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2576 + 2u)).x));
                            uint _2589 = (_2543 * 40u) + 16u;
                            _2602 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2589)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2589 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2589 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2589 + 3u)).x));
                            uint _2605 = (_2543 * 40u) + 20u;
                            _2618 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2605)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2605 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2605 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2605 + 3u)).x));
                            uint _2621 = (_2543 * 40u) + 24u;
                            vec4 _2634 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2621)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2621 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2621 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2621 + 3u)).x));
                            uint _2640 = (_2543 * 40u) + 28u;
                            vec4 _2653 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2640)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2640 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2640 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2640 + 3u)).x));
                            _2665 = fma(_1922, _2653.z, fma(_1921, _2653.y, _2653.x * _1920)) + _2653.w;
                            _2666 = !((fma(_1922, _2634.z, fma(_1921, _2634.y, _2634.x * _1920)) + _2634.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2666)
                            {
                                float _2693 = _2558.x - _1920;
                                float _2694 = _2558.y - _1921;
                                float _2695 = _2558.z - _1922;
                                float _2696 = dot(vec3(_2693, _2694, _2695), vec3(_2693, _2694, _2695));
                                float _2699 = inversesqrt(_2696);
                                float _2700 = _2699 * _2693;
                                float _2701 = _2699 * _2694;
                                float _2702 = _2699 * _2695;
                                float _2706 = 1.0 - (_2696 / (_2559 * _2559));
                                float _3610 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
                                float _2707 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
                                float _2711 = sqrt(_2696) * _2574.w;
                                float _2713 = 1.39999997615814208984375 / (_2711 + 1.39999997615814208984375);
                                float _2714 = _2713 * _2713;
                                float _2715 = 1.0 - _2714;
                                float _2717 = (_2715 * dot(vec3(_2700, _2701, _2702), vec3(_332, _335, _338))) + _2714;
                                float _2720 = _2711 * _2711;
                                float _2724 = (fma(_1922, _2602.z, fma(_1921, _2602.y, _2602.x * _1920)) + _2602.w) / _2665;
                                float _2725 = (fma(_1922, _2618.z, fma(_1921, _2618.y, _2618.x * _1920)) + _2618.w) / _2665;
                                float _2729 = 1.0 - dot(vec2(_2724, _2725), vec2(_2724, _2725));
                                float _3626 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
                                float _2730 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
                                float _2731 = _2730 * (((isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0))) * _2707) / ((_2720 * 0.699999988079071044921875) + 1.0));
                                float _2741 = dot(vec3(_332, _335, _338), vec3((-0.0) - (_1920 * _2252), (-0.0) - (_1921 * _2252), (-0.0) - (_1922 * _2252)));
                                float _3637 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
                                float _2749 = (_2715 * dot(vec3(_332, _335, _338), vec3(_2700, _2701, _2702))) + _2714;
                                float _3648 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
                                float _2750 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
                                float _2754 = (0.5 / (((isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) + 9.9999999392252902907785028219223e-09) + _2750)) * _2750;
                                float _3659 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
                                float _2761 = (_2730 * _2707) * (((isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * 3.1415927410125732421875) / ((_2720 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2761 * _2586.x;
                                frontier_phi_73_pred_1 = _2761 * _2586.y;
                                frontier_phi_73_pred_2 = _2731 * _2574.z;
                                frontier_phi_73_pred_3 = _2731 * _2574.y;
                                frontier_phi_73_pred_4 = _2731 * _2574.x;
                                frontier_phi_73_pred_5 = _2761 * _2586.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2765 = frontier_phi_73_pred;
                            _2766 = frontier_phi_73_pred_1;
                            _2770 = frontier_phi_73_pred_2;
                            _2769 = frontier_phi_73_pred_3;
                            _2768 = frontier_phi_73_pred_4;
                            _2767 = frontier_phi_73_pred_5;
                            _2516 = _2768 + _2529;
                            _2517 = _2769 + _2530;
                            _2518 = _2770 + _2531;
                            _2513 = _2765 + _2526;
                            _2514 = _2766 + _2527;
                            _2515 = _2767 + _2528;
                            if (_2533 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2526 = _2513;
                                _2527 = _2514;
                                _2528 = _2515;
                                _2529 = _2516;
                                _2530 = _2517;
                                _2531 = _2518;
                                _2532 = _2533;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2516;
                        frontier_phi_67_pred_1 = _2517;
                        frontier_phi_67_pred_2 = _2518;
                        frontier_phi_67_pred_3 = _2515;
                        frontier_phi_67_pred_4 = _2514;
                        frontier_phi_67_pred_5 = _2513;
                    }
                    _2234 = frontier_phi_67_pred;
                    _2236 = frontier_phi_67_pred_1;
                    _2238 = frontier_phi_67_pred_2;
                    _2232 = frontier_phi_67_pred_3;
                    _2230 = frontier_phi_67_pred_4;
                    _2228 = frontier_phi_67_pred_5;
                    uint _2370 = _2369 + 1u;
                    if (_2370 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2363 = _2228;
                        _2364 = _2230;
                        _2365 = _2232;
                        _2366 = _2234;
                        _2367 = _2236;
                        _2368 = _2238;
                        _2369 = _2370;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2236;
                frontier_phi_55_56_ladder_1 = _2238;
                frontier_phi_55_56_ladder_2 = _2234;
                frontier_phi_55_56_ladder_3 = _2232;
                frontier_phi_55_56_ladder_4 = _2230;
                frontier_phi_55_56_ladder_5 = _2228;
            }
            else
            {
                frontier_phi_55_56_ladder = _2112;
                frontier_phi_55_56_ladder_1 = _2114;
                frontier_phi_55_56_ladder_2 = _2110;
                frontier_phi_55_56_ladder_3 = _2108;
                frontier_phi_55_56_ladder_4 = _2106;
                frontier_phi_55_56_ladder_5 = _2104;
            }
            _2227 = frontier_phi_55_56_ladder_5;
            _2229 = frontier_phi_55_56_ladder_4;
            _2231 = frontier_phi_55_56_ladder_3;
            _2233 = frontier_phi_55_56_ladder_2;
            _2235 = frontier_phi_55_56_ladder;
            _2237 = frontier_phi_55_56_ladder_1;
        }
        float _2242 = isnan(1.0) ? _376 : (isnan(_376) ? 1.0 : min(_376, 1.0));
        _1979 = (_2242 * _2233) + _1539;
        _1981 = (_2242 * _2235) + _1541;
        _1983 = (_2242 * _2237) + _1543;
        _1985 = ((_2227 * 0.039999999105930328369140625) * _2242) + _1791;
        _1987 = ((_2229 * 0.039999999105930328369140625) * _2242) + _1793;
        _1989 = ((_2231 * 0.039999999105930328369140625) * _2242) + _1795;
    }
    else
    {
        _1979 = _1539;
        _1981 = _1541;
        _1983 = _1543;
        _1985 = _1791;
        _1987 = _1793;
        _1989 = _1795;
    }
    uint _1995 = _352 + uint(cbMatDynParam._m0[0u].w);
    float _2003 = ((_205.x * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].x) * cbInstanceData._m0[_1995].x;
    float _2006 = ((_205.y * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].y) * cbInstanceData._m0[_1995].y;
    float _2009 = ((_205.z * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].z) * cbInstanceData._m0[_1995].z;
    float _3675 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _3686 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _3697 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _3708 = isnan(0.0) ? _224 : (isnan(_224) ? 0.0 : max(_224, 0.0));
    float _2027 = (((isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * (_1979 + ((isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0))) * _376))) + ((_1985 + ((isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0))) * _1155)) * cbPerFrame._m0[3u].x)) + _2003;
    float _2029 = (_2006 + ((_1987 + ((isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0))) * _1155)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * (_1981 + ((isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0))) * _376)));
    float _2031 = (_2009 + ((_1989 + ((isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0))) * _1155)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * (_1983 + ((isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0))) * _376)));
    float _3734 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2044 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _2049 = cbInstanceData._m0[_351 + 6u].w * (isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0)));
    float _2054 = _310 / cbSceneParam._m0[86u].x;
    float _2055 = _311 / cbSceneParam._m0[86u].y;
    vec4 _2069 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2054, _2055, (log2((isnan(cbSceneParam._m0[77u].w) ? _243 : (isnan(_243) ? cbSceneParam._m0[77u].w : min(_243, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2071 = _2069.x;
    float _2072 = _2069.y;
    float _2073 = _2069.z;
    float _2074 = _2069.w;
    float _2167;
    float _2169;
    float _2171;
    float _2173;
    if (_243 > cbSceneParam._m0[78u].w)
    {
        float _2129 = isnan(_243) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _243 : min(cbSceneParam._m0[80u].w, _243));
        float _2130 = _2129 / _243;
        float _2141 = _2130 * _295;
        float _2142 = _296 * _2130;
        float _2143 = (-0.0) - _2142;
        float _2145 = _2130 * _297;
        float _2147 = (cbSceneParam._m0[77u].w * _2143) / _2129;
        float _2148 = _2147 + cbSceneParam._m0[79u].w;
        float _2149 = cbSceneParam._m0[79u].w - _2142;
        float _2155 = sqrt(((_2141 * _2141) + (_2142 * _2142)) + (_2145 * _2145));
        float _2158 = (1.0 - (cbSceneParam._m0[77u].w / _2129)) * _2155;
        float _2163 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2165 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2325;
        if (abs((_2143 - _2147) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2325 = ((((_2148 > 0.0) ? exp2(_2163 * _2148) : (2.0 - exp2(_2165 * _2148))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2158;
        }
        else
        {
            float _2285 = 1.0 / cbSceneParam._m0[80u].x;
            float _2286 = isnan(_2149) ? _2148 : (isnan(_2148) ? _2149 : max(_2148, _2149));
            float _2287 = isnan(_2149) ? _2148 : (isnan(_2148) ? _2149 : min(_2148, _2149));
            float _2296 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : min(_2286, 0.0));
            float _2297 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : min(_2287, 0.0));
            _2325 = ((abs(_2155 / _2143) * cbSceneParam._m0[80u].y) * ((((_2296 - _2297) * 2.0) - ((exp2(_2163 * (isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0)))) - exp2(_2163 * (isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0))))) * _2285)) - ((exp2(_2165 * _2296) - exp2(_2165 * _2297)) * _2285))) + (_2158 * cbSceneParam._m0[80u].z);
        }
        vec4 _2327 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2054, _2055, 1.0), 0.0);
        float _2336 = exp2((_2325 * (-1.44269502162933349609375)) * (1.0 - _2327.w));
        float _2337 = log2(_2336);
        float _2353 = log2(_2074);
        _2167 = (exp2(_2353 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2337 * cbSceneParam._m0[78u].x)) * _2327.x) / cbSceneParam._m0[78u].x)) + _2071;
        _2169 = (exp2(_2353 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2337 * cbSceneParam._m0[78u].y)) * _2327.y) / cbSceneParam._m0[78u].y)) + _2072;
        _2171 = (exp2(_2353 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2337 * cbSceneParam._m0[78u].z)) * _2327.z) / cbSceneParam._m0[78u].z)) + _2073;
        _2173 = _2336 * _2074;
    }
    else
    {
        _2167 = _2071;
        _2169 = _2072;
        _2171 = _2073;
        _2173 = _2074;
    }
    float _2185 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2186 = _2185 == 3.0;
    float _2188 = log2(_2173);
    float _2192 = exp2(_2188 * cbSceneParam._m0[78u].x);
    float _2193 = exp2(_2188 * cbSceneParam._m0[78u].y);
    float _2194 = exp2(_2188 * cbSceneParam._m0[78u].z);
    float _2195 = _2192 * (isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0)));
    float _2196 = _2193 * (isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0)));
    float _2197 = _2194 * (isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0)));
    float _2206 = (_2185 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2206 * (_2186 ? _2195 : (_2195 + (cbSceneParam._m0[72u].w * _2167)));
    SV_Target.y = _2206 * (_2186 ? _2196 : (_2196 + (cbSceneParam._m0[72u].w * _2169)));
    SV_Target.z = _2206 * (_2186 ? _2197 : (_2197 + (cbSceneParam._m0[72u].w * _2171)));
    SV_Target.w = _2049;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2003) * _2044) * _2192) * _2206;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2006) * _2044) * _2193) * _2206;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2009) * _2044) * _2194) * _2206;
    SV_Target_1.w = _2049;
}


