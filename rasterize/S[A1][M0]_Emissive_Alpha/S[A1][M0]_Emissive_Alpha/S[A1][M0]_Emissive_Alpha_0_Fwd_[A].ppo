#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A1_M0_Emissive_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_A1_M0_Emissive_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _735;
float _2941;
float _2942;
float _2943;
float _2944;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _164 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _165 = _164 * NORMAL.x;
    float _166 = _164 * NORMAL.y;
    float _167 = _164 * NORMAL.z;
    vec4 _187 = texture(sampler2D(S_A1_M0_Emissive_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _193 = _187.w;
    float _194 = _187.x * cbMtdParam._m0[9u].x;
    float _195 = _187.y * cbMtdParam._m0[9u].y;
    float _196 = _187.z * cbMtdParam._m0[9u].z;
    float _197 = _193 * TEXCOORD_1.z;
    vec4 _213 = texture(sampler2D(S_A1_M0_Emissive_Alpha_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _227 = inversesqrt(dot(vec3(_165, _166, _167), vec3(_165, _166, _167)));
    float _228 = _227 * _165;
    float _229 = _227 * _166;
    float _230 = _227 * _167;
    float _2953 = isnan(0.0) ? _197 : (isnan(_197) ? 0.0 : max(_197, 0.0));
    float _232 = isnan(1.0) ? _2953 : (isnan(_2953) ? 1.0 : min(_2953, 1.0));
    float _2964 = isnan(0.0) ? _194 : (isnan(_194) ? 0.0 : max(_194, 0.0));
    float _2975 = isnan(0.0) ? _195 : (isnan(_195) ? 0.0 : max(_195, 0.0));
    float _2986 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _251 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _293 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _303 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _293);
    float _304 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _293);
    float _305 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _293);
    float _309 = inversesqrt(dot(vec3(_303, _304, _305), vec3(_303, _304, _305)));
    float _310 = _303 * _309;
    float _311 = _304 * _309;
    float _312 = _305 * _309;
    vec4 _317 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _319 = _317.w;
    float _325 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _326 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _347 = fma(_230, cbSceneParam._m0[5u].z, fma(_229, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _228));
    float _350 = fma(_230, cbSceneParam._m0[6u].z, fma(_229, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _228));
    float _353 = fma(_230, cbSceneParam._m0[7u].z, fma(_229, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _228));
    uint _366 = uint(roundEven(NORMAL.w)) * 13u;
    uint _367 = _366 + 9u;
    uint _368 = _367 + uint(cbMatDynParam._m0[0u].w);
    float _374 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2964 : (isnan(_2964) ? 1.0 : min(_2964, 1.0)))) * cbInstanceData._m0[_368].x;
    float _375 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2975 : (isnan(_2975) ? 1.0 : min(_2975, 1.0)))) * cbInstanceData._m0[_368].y;
    float _376 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2986 : (isnan(_2986) ? 1.0 : min(_2986, 1.0)))) * cbInstanceData._m0[_368].z;
    float _2997 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _377 = isnan(1.0) ? _2997 : (isnan(_2997) ? 1.0 : min(_2997, 1.0));
    float _3008 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _378 = isnan(1.0) ? _3008 : (isnan(_3008) ? 1.0 : min(_3008, 1.0));
    float _3019 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _379 = isnan(1.0) ? _3019 : (isnan(_3019) ? 1.0 : min(_3019, 1.0));
    vec4 _388 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _325, cbSceneParam._m0[86u].y * _326));
    float _391 = _388.x * TEXCOORD_1.w;
    float _392 = dot(vec3(_228, _229, _230), vec3(_310, _311, _312));
    float _395 = _392 * 2.0;
    float _400 = (_395 * _228) - _310;
    float _401 = (_395 * _229) - _311;
    float _402 = (_395 * _230) - _312;
    float _424 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _428 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _432 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _734;
    float _736;
    float _737;
    float _738;
    float _739;
    float _740;
    float _741;
    float _742;
    float _743;
    float _744;
    float _745;
    float _746;
    float _747;
    float _748;
    float _749;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _459 = fma(_432, cbModelParam._m0[26u].z, fma(_428, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _424));
        float _463 = fma(_432, cbModelParam._m0[27u].z, fma(_428, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _424));
        float _467 = fma(_432, cbModelParam._m0[28u].z, fma(_428, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _424));
        float _492 = _424 + _228;
        float _493 = _428 + _229;
        float _494 = _432 + _230;
        float _504 = fma(_494, cbModelParam._m0[26u].z, fma(_493, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _492)) - _459;
        float _505 = fma(_494, cbModelParam._m0[27u].z, fma(_493, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _492)) - _463;
        float _506 = fma(_494, cbModelParam._m0[28u].z, fma(_493, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _492)) - _467;
        float _510 = inversesqrt(dot(vec3(_504, _505, _506), vec3(_504, _505, _506)));
        float _523 = ((_510 * _504) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_459 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _524 = ((_510 * _505) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_463 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _525 = ((_510 * _506) / cbModelParam._m0[34u].z) + ((((((_467 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _528 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_523, _524, _525), 0.0);
        vec4 _535 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_523, _524, _525), 0.0);
        vec4 _542 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_523, _524, _525), 0.0);
        vec4 _549 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_523, _524, _525), 0.0);
        float _562 = exp2((_528.w + (-0.5)) * 20.0) * 2.0;
        float _563 = _562 * (_528.x + (-0.5));
        float _564 = _562 * (_528.y + (-0.5));
        float _565 = _562 * (_528.z + (-0.5));
        float _572 = exp2((_535.w + (-0.5)) * 20.0) * 2.0;
        float _573 = _572 * (_535.x + (-0.5));
        float _574 = _572 * (_535.y + (-0.5));
        float _575 = _572 * (_535.z + (-0.5));
        float _582 = exp2((_542.w + (-0.5)) * 20.0) * 2.0;
        float _583 = _582 * (_542.x + (-0.5));
        float _584 = _582 * (_542.y + (-0.5));
        float _585 = _582 * (_542.z + (-0.5));
        float _592 = exp2((_549.w + (-0.5)) * 20.0) * 2.0;
        float _593 = _592 * (_549.x + (-0.5));
        float _594 = _592 * (_549.y + (-0.5));
        float _595 = _592 * (_549.z + (-0.5));
        float _596 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
        float _597 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
        float _598 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
        float _599 = _563 * 0.5;
        float _600 = _573 * 0.5;
        float _601 = _583 * 0.5;
        float _602 = dot(vec3(_599, _600, _601), vec3(_599, _600, _601));
        float _607 = (_602 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_602);
        float _616 = (dot(vec3(_228, _229, _230), vec3(_607 * _599, _607 * _600, _607 * _601)) + 1.0) * 0.5;
        float _3045 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
        float _626 = sqrt(((_600 * _600) + (_599 * _599)) + (_601 * _601)) / (_596 + 9.9999997473787516355514526367188e-06);
        float _3056 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
        float _627 = isnan(1.0) ? _3056 : (isnan(_3056) ? 1.0 : min(_3056, 1.0));
        float _628 = _627 * 2.0;
        float _632 = (1.0 - _627) / (_627 + 1.0);
        float _3067 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
        float _633 = isnan(1.0) ? _3067 : (isnan(_3067) ? 1.0 : min(_3067, 1.0));
        float _642 = ((((1.0 - _633) * (_628 + 2.0)) * exp2(log2(isnan(1.0) ? _3045 : (isnan(_3045) ? 1.0 : min(_3045, 1.0))) * (_628 + 1.0))) + _633) * _596;
        float _643 = _564 * 0.5;
        float _644 = _574 * 0.5;
        float _645 = _584 * 0.5;
        float _646 = dot(vec3(_643, _644, _645), vec3(_643, _644, _645));
        float _651 = (_646 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_646);
        float _659 = (dot(vec3(_228, _229, _230), vec3(_651 * _643, _651 * _644, _651 * _645)) + 1.0) * 0.5;
        float _3078 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
        float _668 = sqrt(((_644 * _644) + (_643 * _643)) + (_645 * _645)) / (_597 + 9.9999997473787516355514526367188e-06);
        float _3089 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
        float _669 = isnan(1.0) ? _3089 : (isnan(_3089) ? 1.0 : min(_3089, 1.0));
        float _670 = _669 * 2.0;
        float _674 = (1.0 - _669) / (_669 + 1.0);
        float _3100 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
        float _675 = isnan(1.0) ? _3100 : (isnan(_3100) ? 1.0 : min(_3100, 1.0));
        float _684 = ((((1.0 - _675) * (_670 + 2.0)) * exp2(log2(isnan(1.0) ? _3078 : (isnan(_3078) ? 1.0 : min(_3078, 1.0))) * (_670 + 1.0))) + _675) * _597;
        float _685 = _565 * 0.5;
        float _686 = _575 * 0.5;
        float _687 = _585 * 0.5;
        float _688 = dot(vec3(_685, _686, _687), vec3(_685, _686, _687));
        float _693 = (_688 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_688);
        float _701 = (dot(vec3(_228, _229, _230), vec3(_693 * _685, _693 * _686, _693 * _687)) + 1.0) * 0.5;
        float _3111 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
        float _710 = sqrt(((_686 * _686) + (_685 * _685)) + (_687 * _687)) / (_598 + 9.9999997473787516355514526367188e-06);
        float _3122 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _711 = isnan(1.0) ? _3122 : (isnan(_3122) ? 1.0 : min(_3122, 1.0));
        float _712 = _711 * 2.0;
        float _716 = (1.0 - _711) / (_711 + 1.0);
        float _3133 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _717 = isnan(1.0) ? _3133 : (isnan(_3133) ? 1.0 : min(_3133, 1.0));
        float _726 = ((((1.0 - _717) * (_712 + 2.0)) * exp2(log2(isnan(1.0) ? _3111 : (isnan(_3111) ? 1.0 : min(_3111, 1.0))) * (_712 + 1.0))) + _717) * _598;
        _734 = _565;
        _736 = _564;
        _737 = _563;
        _738 = _575;
        _739 = _574;
        _740 = _573;
        _741 = _585;
        _742 = _584;
        _743 = _583;
        _744 = _598;
        _745 = _597;
        _746 = _596;
        _747 = cbModelParam._m0[36u].z * (isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0)));
        _748 = cbModelParam._m0[36u].z * (isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0)));
        _749 = cbModelParam._m0[36u].z * (isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0)));
    }
    else
    {
        _734 = _735;
        _736 = _735;
        _737 = _735;
        _738 = _735;
        _739 = _735;
        _740 = _735;
        _741 = _735;
        _742 = _735;
        _743 = _735;
        _744 = _735;
        _745 = _735;
        _746 = _735;
        _747 = 0.0;
        _748 = 0.0;
        _749 = 0.0;
    }
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _775 = fma(_432, cbModelParam._m0[30u].z, fma(_428, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _424));
        float _779 = fma(_432, cbModelParam._m0[31u].z, fma(_428, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _424));
        float _783 = fma(_432, cbModelParam._m0[32u].z, fma(_428, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _424));
        float _806 = _424 + _228;
        float _807 = _428 + _229;
        float _808 = _432 + _230;
        float _818 = fma(_808, cbModelParam._m0[30u].z, fma(_807, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _806)) - _775;
        float _819 = fma(_808, cbModelParam._m0[31u].z, fma(_807, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _806)) - _779;
        float _820 = fma(_808, cbModelParam._m0[32u].z, fma(_807, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _806)) - _783;
        float _824 = inversesqrt(dot(vec3(_818, _819, _820), vec3(_818, _819, _820)));
        float _837 = ((_824 * _818) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_775 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _838 = ((_824 * _819) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_779 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _839 = ((_824 * _820) / cbModelParam._m0[35u].z) + ((((((_783 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _841 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_837, _838, _839), 0.0);
        vec4 _848 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_837, _838, _839), 0.0);
        vec4 _855 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_837, _838, _839), 0.0);
        vec4 _862 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_837, _838, _839), 0.0);
        float _874 = exp2((_841.w + (-0.5)) * 20.0) * 2.0;
        float _875 = _874 * (_841.x + (-0.5));
        float _876 = _874 * (_841.y + (-0.5));
        float _877 = _874 * (_841.z + (-0.5));
        float _884 = exp2((_848.w + (-0.5)) * 20.0) * 2.0;
        float _885 = _884 * (_848.x + (-0.5));
        float _886 = _884 * (_848.y + (-0.5));
        float _887 = _884 * (_848.z + (-0.5));
        float _894 = exp2((_855.w + (-0.5)) * 20.0) * 2.0;
        float _895 = _894 * (_855.x + (-0.5));
        float _896 = _894 * (_855.y + (-0.5));
        float _897 = _894 * (_855.z + (-0.5));
        float _904 = exp2((_862.w + (-0.5)) * 20.0) * 2.0;
        float _905 = _904 * (_862.x + (-0.5));
        float _906 = _904 * (_862.y + (-0.5));
        float _907 = _904 * (_862.z + (-0.5));
        float _908 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _909 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _910 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _911 = _875 * 0.5;
        float _912 = _885 * 0.5;
        float _913 = _895 * 0.5;
        float _914 = dot(vec3(_911, _912, _913), vec3(_911, _912, _913));
        float _919 = (_914 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_914);
        float _927 = (dot(vec3(_228, _229, _230), vec3(_919 * _911, _919 * _912, _919 * _913)) + 1.0) * 0.5;
        float _3174 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _936 = sqrt(((_912 * _912) + (_911 * _911)) + (_913 * _913)) / (_908 + 9.9999997473787516355514526367188e-06);
        float _3185 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3185 : (isnan(_3185) ? 1.0 : min(_3185, 1.0));
        float _938 = _937 * 2.0;
        float _942 = (1.0 - _937) / (_937 + 1.0);
        float _3196 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3196 : (isnan(_3196) ? 1.0 : min(_3196, 1.0));
        float _952 = ((((1.0 - _943) * (_938 + 2.0)) * exp2(log2(isnan(1.0) ? _3174 : (isnan(_3174) ? 1.0 : min(_3174, 1.0))) * (_938 + 1.0))) + _943) * _908;
        float _953 = _876 * 0.5;
        float _954 = _886 * 0.5;
        float _955 = _896 * 0.5;
        float _956 = dot(vec3(_953, _954, _955), vec3(_953, _954, _955));
        float _961 = (_956 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_956);
        float _969 = (dot(vec3(_228, _229, _230), vec3(_961 * _953, _961 * _954, _961 * _955)) + 1.0) * 0.5;
        float _3207 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _978 = sqrt(((_954 * _954) + (_953 * _953)) + (_955 * _955)) / (_909 + 9.9999997473787516355514526367188e-06);
        float _3218 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3218 : (isnan(_3218) ? 1.0 : min(_3218, 1.0));
        float _980 = _979 * 2.0;
        float _984 = (1.0 - _979) / (_979 + 1.0);
        float _3229 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3229 : (isnan(_3229) ? 1.0 : min(_3229, 1.0));
        float _994 = ((((1.0 - _985) * (_980 + 2.0)) * exp2(log2(isnan(1.0) ? _3207 : (isnan(_3207) ? 1.0 : min(_3207, 1.0))) * (_980 + 1.0))) + _985) * _909;
        float _995 = _877 * 0.5;
        float _996 = _887 * 0.5;
        float _997 = _897 * 0.5;
        float _998 = dot(vec3(_995, _996, _997), vec3(_995, _996, _997));
        float _1003 = (_998 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_998);
        float _1011 = (dot(vec3(_228, _229, _230), vec3(_1003 * _995, _1003 * _996, _1003 * _997)) + 1.0) * 0.5;
        float _3240 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1020 = sqrt(((_996 * _996) + (_995 * _995)) + (_997 * _997)) / (_910 + 9.9999997473787516355514526367188e-06);
        float _3251 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0));
        float _1022 = _1021 * 2.0;
        float _1026 = (1.0 - _1021) / (_1021 + 1.0);
        float _3262 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0));
        float _1036 = ((((1.0 - _1027) * (_1022 + 2.0)) * exp2(log2(isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0))) * (_1022 + 1.0))) + _1027) * _910;
        _1044 = _877;
        _1045 = _876;
        _1046 = _875;
        _1047 = _887;
        _1048 = _886;
        _1049 = _885;
        _1050 = _897;
        _1051 = _896;
        _1052 = _895;
        _1053 = _910;
        _1054 = _909;
        _1055 = _908;
        _1056 = cbModelParam._m0[36u].w * (isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0)));
        _1057 = cbModelParam._m0[36u].w * (isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0)));
        _1058 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0)));
    }
    else
    {
        _1044 = _735;
        _1045 = _735;
        _1046 = _735;
        _1047 = _735;
        _1048 = _735;
        _1049 = _735;
        _1050 = _735;
        _1051 = _735;
        _1052 = _735;
        _1053 = _735;
        _1054 = _735;
        _1055 = _735;
        _1056 = 0.0;
        _1057 = 0.0;
        _1058 = 0.0;
    }
    float _1068 = (cbModelParam._m0[1u].x * (_1056 - _747)) + _747;
    float _1069 = (cbModelParam._m0[1u].x * (_1057 - _748)) + _748;
    float _1070 = (cbModelParam._m0[1u].x * (_1058 - _749)) + _749;
    float _1091 = fma(_1070, cbSceneParam._m0[89u].z, fma(_1069, cbSceneParam._m0[89u].y, _1068 * cbSceneParam._m0[89u].x));
    float _1094 = fma(_1070, cbSceneParam._m0[90u].z, fma(_1069, cbSceneParam._m0[90u].y, _1068 * cbSceneParam._m0[90u].x));
    float _1097 = fma(_1070, cbSceneParam._m0[91u].z, fma(_1069, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1068));
    float _1112 = _400 * 0.5;
    float _1113 = _401 * 0.5;
    float _1114 = _402 * 0.5;
    float _1115 = dot(vec4(_1112, _1113, _1114, 1.0), vec4(_1046, _1049, _1052, _1055));
    float _1118 = dot(vec4(_1112, _1113, _1114, 1.0), vec4(_1045, _1048, _1051, _1054));
    float _1121 = dot(vec4(_1112, _1113, _1114, 1.0), vec4(_1044, _1047, _1050, _1053));
    float _1155;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1128 = dot(vec4(_1112, _1113, _1114, 1.0), vec4(_734, _738, _741, _744));
        float _1132 = dot(vec4(_1112, _1113, _1114, 1.0), vec4(_736, _739, _742, _745));
        float _1136 = dot(vec4(_1112, _1113, _1114, 1.0), vec4(_737, _740, _743, _746));
        float _1143 = dot(vec4(cbModelParam._m0[39u]), vec4(_1112, _1113, _1114, 1.0));
        _1155 = dot(vec3(isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0)), isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0)), isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1143) ? 0.0 : (isnan(0.0) ? _1143 : max(0.0, _1143))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1155 = 1.0;
    }
    float _1166;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1157 = dot(vec4(cbModelParam._m0[40u]), vec4(_1112, _1113, _1114, 1.0));
        _1166 = dot(vec3(isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)), isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)), isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1157) ? 0.0 : (isnan(0.0) ? _1157 : max(0.0, _1157))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1166 = 1.0;
    }
    float _1170 = (_1166 * cbModelParam._m0[1u].x) + (_1155 * (1.0 - cbModelParam._m0[1u].x));
    float _1179 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1261;
    float _1263;
    float _1265;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1228 = fma(_432, cbModelParam._m0[13u].z, fma(_428, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _424)) + cbModelParam._m0[13u].w;
        float _1232 = fma(_432, cbModelParam._m0[14u].z, fma(_428, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _424)) + cbModelParam._m0[14u].w;
        float _1236 = fma(_432, cbModelParam._m0[15u].z, fma(_428, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _424)) + cbModelParam._m0[15u].w;
        float _1239 = fma(_402, cbModelParam._m0[13u].z, fma(_401, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _400));
        float _1242 = fma(_402, cbModelParam._m0[14u].z, fma(_401, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _400));
        float _1245 = fma(_402, cbModelParam._m0[15u].z, fma(_401, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _400));
        float _1271;
        if (_1239 > 0.0)
        {
            _1271 = abs((1.0 - _1228) / _1239);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1239 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1228 + 1.0) / _1239);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1271 = frontier_phi_14_12_ladder;
        }
        float _1478;
        if (_1242 > 0.0)
        {
            _1478 = abs((1.0 - _1232) / _1242);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1242 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1232 + 1.0) / _1242);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1478 = frontier_phi_23_19_ladder;
        }
        float _1667;
        if (_1245 > 0.0)
        {
            _1667 = abs((1.0 - _1236) / _1245);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1245 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1236 + 1.0) / _1245);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1667 = frontier_phi_35_30_ladder;
        }
        float _1669 = isnan(_1478) ? _1271 : (isnan(_1271) ? _1478 : min(_1271, _1478));
        float _1670 = isnan(_1667) ? _1669 : (isnan(_1669) ? _1667 : min(_1669, _1667));
        float _1674 = (_1670 * _1239) + _1228;
        float _1675 = (_1670 * _1242) + _1232;
        float _1676 = (_1670 * _1245) + _1236;
        float _1677 = _1670 * 9.9999997473787516355514526367188e-05;
        float _1679 = (-1.0) - _1677;
        float _1681 = _1677 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1676 > _1681) || ((_1676 < _1679) || ((_1675 > _1681) || ((_1675 < _1679) || ((_1674 < _1679) || (_1674 > _1681))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1773 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1676, cbModelParam._m0[9u].z, fma(_1675, cbModelParam._m0[9u].y, _1674 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1676, cbModelParam._m0[10u].z, fma(_1675, cbModelParam._m0[10u].y, _1674 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1676, cbModelParam._m0[11u].z, fma(_1675, cbModelParam._m0[11u].y, _1674 * cbModelParam._m0[11u].x))), _1179);
            frontier_phi_13_35_ladder = _1773.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1773.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1773.x * cbModelParam._m0[1u].y;
        }
        _1261 = frontier_phi_13_35_ladder_2;
        _1263 = frontier_phi_13_35_ladder_1;
        _1265 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1249 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_400, _401, _402), _1179);
        _1261 = _1249.x * cbModelParam._m0[1u].y;
        _1263 = _1249.y * cbModelParam._m0[1u].y;
        _1265 = _1249.z * cbModelParam._m0[1u].y;
    }
    float _1268 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1361;
    float _1363;
    float _1365;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1325 = fma(_432, cbModelParam._m0[21u].z, fma(_428, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _424)) + cbModelParam._m0[21u].w;
        float _1329 = fma(_432, cbModelParam._m0[22u].z, fma(_428, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _424)) + cbModelParam._m0[22u].w;
        float _1333 = fma(_432, cbModelParam._m0[23u].z, fma(_428, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _424)) + cbModelParam._m0[23u].w;
        float _1336 = fma(_402, cbModelParam._m0[21u].z, fma(_401, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _400));
        float _1339 = fma(_402, cbModelParam._m0[22u].z, fma(_401, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _400));
        float _1342 = fma(_402, cbModelParam._m0[23u].z, fma(_401, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _400));
        float _1483;
        if (_1336 > 0.0)
        {
            _1483 = abs((1.0 - _1325) / _1336);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1336 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1325 + 1.0) / _1336);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1483 = frontier_phi_25_21_ladder;
        }
        float _1694;
        if (_1339 > 0.0)
        {
            _1694 = abs((1.0 - _1329) / _1339);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1339 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1329 + 1.0) / _1339);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1694 = frontier_phi_37_32_ladder;
        }
        float _1845;
        if (_1342 > 0.0)
        {
            _1845 = abs((1.0 - _1333) / _1342);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1342 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1333 + 1.0) / _1342);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1845 = frontier_phi_46_43_ladder;
        }
        float _1847 = isnan(_1694) ? _1483 : (isnan(_1483) ? _1694 : min(_1483, _1694));
        float _1848 = isnan(_1845) ? _1847 : (isnan(_1847) ? _1845 : min(_1847, _1845));
        float _1852 = (_1848 * _1336) + _1325;
        float _1853 = (_1848 * _1339) + _1329;
        float _1854 = (_1848 * _1342) + _1333;
        float _1855 = _1848 * 9.9999997473787516355514526367188e-05;
        float _1856 = (-1.0) - _1855;
        float _1858 = _1855 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1854 > _1858) || ((_1854 < _1856) || ((_1853 > _1858) || ((_1853 < _1856) || ((_1852 < _1856) || (_1852 > _1858))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2090 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1854, cbModelParam._m0[17u].z, fma(_1853, cbModelParam._m0[17u].y, _1852 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1854, cbModelParam._m0[18u].z, fma(_1853, cbModelParam._m0[18u].y, _1852 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1854, cbModelParam._m0[19u].z, fma(_1853, cbModelParam._m0[19u].y, _1852 * cbModelParam._m0[19u].x))), _1268);
            frontier_phi_22_46_ladder = _2090.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2090.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2090.x * cbModelParam._m0[1u].z;
        }
        _1361 = frontier_phi_22_46_ladder_2;
        _1363 = frontier_phi_22_46_ladder_1;
        _1365 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1345 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_400, _401, _402), _1268);
        _1361 = _1345.x * cbModelParam._m0[1u].z;
        _1363 = _1345.y * cbModelParam._m0[1u].z;
        _1365 = _1345.z * cbModelParam._m0[1u].z;
    }
    float _1377 = _391 * 0.01200000010430812835693359375;
    float _1379 = _1377 * ((cbModelParam._m0[1u].w * (_1361 - _1261)) + _1261);
    float _1380 = _1377 * ((cbModelParam._m0[1u].w * (_1363 - _1263)) + _1263);
    float _1381 = _1377 * ((cbModelParam._m0[1u].w * (_1365 - _1265)) + _1265);
    float _1384 = fma(_1381, cbSceneParam._m0[89u].z, fma(_1380, cbSceneParam._m0[89u].y, _1379 * cbSceneParam._m0[89u].x));
    float _1387 = fma(_1381, cbSceneParam._m0[90u].z, fma(_1380, cbSceneParam._m0[90u].y, _1379 * cbSceneParam._m0[90u].x));
    float _1390 = fma(_1381, cbSceneParam._m0[91u].z, fma(_1380, cbSceneParam._m0[91u].y, _1379 * cbSceneParam._m0[91u].x));
    uvec4 _1400 = floatBitsToUint(cbInstanceData._m0[_366 + 5u]);
    uint _1402 = _1400.x * 14u;
    uint _1403 = _1402 + 13u;
    float _1410 = _391 + (-1.0);
    float _1416 = (cbLight._m0[_1403].x * _1410) + 1.0;
    float _1417 = (cbLight._m0[_1403].y * _1410) + 1.0;
    float _1418 = (cbLight._m0[_1403].z * _1410) + 1.0;
    float _1419 = (cbLight._m0[_1403].w * _1410) + 1.0;
    uint _1420 = _1402 + 5u;
    float _1426 = isnan(1.0) ? _1417 : (isnan(_1417) ? 1.0 : min(_1417, 1.0));
    uint _1430 = _1402 + 4u;
    float _1437 = isnan(1.0) ? _1416 : (isnan(_1416) ? 1.0 : min(_1416, 1.0));
    uint _1441 = _1402 | 1u;
    float _1452 = dot(vec3(cbLight._m0[_1402].xyz), vec3(_228, _229, _230));
    float _1455 = dot(vec3(cbLight._m0[_1441].xyz), vec3(_228, _229, _230));
    float _3398 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
    float _3409 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
    float _1460 = (isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0))) * 0.3183098733425140380859375;
    float _1462 = (isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0))) * 0.3183098733425140380859375;
    float _1469 = ((cbLight._m0[_1420].x * _1426) * _1462) + ((cbLight._m0[_1430].x * _1437) * _1460);
    float _1470 = ((_1426 * cbLight._m0[_1420].y) * _1462) + ((_1437 * cbLight._m0[_1430].y) * _1460);
    float _1471 = ((_1426 * cbLight._m0[_1420].z) * _1462) + ((_1437 * cbLight._m0[_1430].z) * _1460);
    uvec4 _1475 = floatBitsToUint(cbLight._m0[_1402 + 12u]);
    bool _1477 = _1475.x == 0u;
    float _1488;
    float _1490;
    float _1492;
    if (_1477)
    {
        _1488 = _1469;
        _1490 = _1470;
        _1492 = _1471;
    }
    else
    {
        uint _1496 = _1402 + 6u;
        float _1512 = (dot(vec3(cbLight._m0[_1402 + 2u].xyz), vec3(_228, _229, _230)) * 0.5) + 0.5;
        float _1513 = _1512 * _1512;
        float _3420 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
        float _1515 = isnan(1.0) ? _1418 : (isnan(_1418) ? 1.0 : min(_1418, 1.0));
        _1488 = (((cbLight._m0[_1496].x * 0.3183098733425140380859375) * _1514) * _1515) + _1469;
        _1490 = (((cbLight._m0[_1496].y * 0.3183098733425140380859375) * _1514) * _1515) + _1470;
        _1492 = (((cbLight._m0[_1496].z * 0.3183098733425140380859375) * _1514) * _1515) + _1471;
    }
    bool _1495 = _1475.y == 0u;
    float _1533;
    float _1535;
    float _1537;
    if (_1495)
    {
        _1533 = _1488;
        _1535 = _1490;
        _1537 = _1492;
    }
    else
    {
        uint _1638 = _1402 + 7u;
        float _1654 = (dot(vec3(cbLight._m0[_1402 + 3u].xyz), vec3(_228, _229, _230)) * 0.5) + 0.5;
        float _1655 = _1654 * _1654;
        float _3436 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1656 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
        float _1657 = isnan(1.0) ? _1419 : (isnan(_1419) ? 1.0 : min(_1419, 1.0));
        _1533 = (((cbLight._m0[_1638].x * 0.3183098733425140380859375) * _1656) * _1657) + _1488;
        _1535 = (((cbLight._m0[_1638].y * 0.3183098733425140380859375) * _1656) * _1657) + _1490;
        _1537 = (((cbLight._m0[_1638].z * 0.3183098733425140380859375) * _1656) * _1657) + _1492;
    }
    uint _1539 = _1402 + 8u;
    float _1545 = cbLight._m0[_1402].x + _310;
    float _1546 = cbLight._m0[_1402].y + _311;
    float _1547 = cbLight._m0[_1402].z + _312;
    float _1551 = inversesqrt(dot(vec3(_1545, _1546, _1547), vec3(_1545, _1546, _1547)));
    float _1555 = dot(vec3(_228, _229, _230), vec3(cbLight._m0[_1402].xyz));
    float _3452 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
    float _1558 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
    float _3463 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _1559 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
    float _1560 = dot(vec3(cbLight._m0[_1402].xyz), vec3(_1545 * _1551, _1546 * _1551, _1547 * _1551));
    float _3474 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
    float _1571 = (exp2(log2(1.0 - (isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1577 = (0.5 / ((_1558 + 9.9999999392252902907785028219223e-09) + _1559)) * _1558;
    float _3485 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
    float _1579 = (isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0))) * 0.31831014156341552734375;
    uint _1590 = _1402 + 9u;
    float _1596 = cbLight._m0[_1441].x + _310;
    float _1597 = cbLight._m0[_1441].y + _311;
    float _1598 = cbLight._m0[_1441].z + _312;
    float _1602 = inversesqrt(dot(vec3(_1596, _1597, _1598), vec3(_1596, _1597, _1598)));
    float _1606 = dot(vec3(_228, _229, _230), vec3(cbLight._m0[_1441].xyz));
    float _3496 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
    float _1609 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
    float _1610 = dot(vec3(cbLight._m0[_1441].xyz), vec3(_1596 * _1602, _1597 * _1602, _1598 * _1602));
    float _3507 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
    float _1619 = (exp2(log2(1.0 - (isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1623 = (0.5 / ((_1609 + 9.9999999392252902907785028219223e-09) + _1559)) * _1609;
    float _3518 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
    float _1625 = (isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * 0.31831014156341552734375;
    float _1635 = (((_1619 * cbLight._m0[_1590].x) * _1625) * _1426) + (((_1571 * cbLight._m0[_1539].x) * _1579) * _1437);
    float _1636 = (((_1619 * cbLight._m0[_1590].y) * _1625) * _1426) + (((_1571 * cbLight._m0[_1539].y) * _1579) * _1437);
    float _1637 = (((_1619 * cbLight._m0[_1590].z) * _1625) * _1426) + (((_1571 * cbLight._m0[_1539].z) * _1579) * _1437);
    float _1699;
    float _1701;
    float _1703;
    if (_1477)
    {
        _1699 = _1635;
        _1701 = _1636;
        _1703 = _1637;
    }
    else
    {
        uint _1705 = _1402 + 10u;
        uint _1711 = _1402 + 2u;
        float _1717 = cbLight._m0[_1711].x + _310;
        float _1718 = cbLight._m0[_1711].y + _311;
        float _1719 = cbLight._m0[_1711].z + _312;
        float _1723 = inversesqrt(dot(vec3(_1717, _1718, _1719), vec3(_1717, _1718, _1719)));
        float _1727 = dot(vec3(_228, _229, _230), vec3(cbLight._m0[_1711].xyz));
        float _3529 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1730 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _1731 = dot(vec3(cbLight._m0[_1711].xyz), vec3(_1717 * _1723, _1718 * _1723, _1719 * _1723));
        float _3540 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1740 = (exp2(log2(1.0 - (isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1744 = (0.5 / ((_1730 + 9.9999999392252902907785028219223e-09) + _1559)) * _1730;
        float _3551 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1746 = (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * 0.31831014156341552734375;
        float _1747 = isnan(1.0) ? _1418 : (isnan(_1418) ? 1.0 : min(_1418, 1.0));
        _1699 = (((_1740 * cbLight._m0[_1705].x) * _1746) * _1747) + _1635;
        _1701 = (((_1740 * cbLight._m0[_1705].y) * _1746) * _1747) + _1636;
        _1703 = (((_1740 * cbLight._m0[_1705].z) * _1746) * _1747) + _1637;
    }
    float _1782;
    float _1784;
    float _1786;
    if (_1495)
    {
        _1782 = _1699;
        _1784 = _1701;
        _1786 = _1703;
    }
    else
    {
        uint _1793 = _1402 + 11u;
        uint _1799 = _1402 + 3u;
        float _1805 = cbLight._m0[_1799].x + _310;
        float _1806 = cbLight._m0[_1799].y + _311;
        float _1807 = cbLight._m0[_1799].z + _312;
        float _1811 = inversesqrt(dot(vec3(_1805, _1806, _1807), vec3(_1805, _1806, _1807)));
        float _1815 = dot(vec3(_228, _229, _230), vec3(cbLight._m0[_1799].xyz));
        float _3567 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1818 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _1819 = dot(vec3(cbLight._m0[_1799].xyz), vec3(_1805 * _1811, _1806 * _1811, _1807 * _1811));
        float _3578 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
        float _1828 = (exp2(log2(1.0 - (isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1832 = (0.5 / ((_1818 + 9.9999999392252902907785028219223e-09) + _1559)) * _1818;
        float _3589 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
        float _1834 = (isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * 0.31831014156341552734375;
        float _1835 = isnan(1.0) ? _1419 : (isnan(_1419) ? 1.0 : min(_1419, 1.0));
        _1782 = (((_1828 * cbLight._m0[_1793].x) * _1834) * _1835) + _1699;
        _1784 = (((_1828 * cbLight._m0[_1793].y) * _1834) * _1835) + _1701;
        _1786 = (((_1828 * cbLight._m0[_1793].z) * _1834) * _1835) + _1703;
    }
    float _1970;
    float _1972;
    float _1974;
    float _1976;
    float _1978;
    float _1980;
    if (_1400.y == 0u)
    {
        float _1910 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1911 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1910;
        float _1912 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1910;
        float _1913 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1910;
        uvec4 _1925 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1926 = _1925.x;
        uint _1937 = uint((float(_1925.y) * floor(float(uint(cbSceneParam._m0[85u].y * _326) / _1926))) + floor(float(uint(cbSceneParam._m0[85u].x * _325) / _1926)));
        float _1947 = (log2(_1913 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1948 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
        uint _1951 = uint(isnan(14.0) ? _1948 : (isnan(_1948) ? 14.0 : min(_1948, 14.0)));
        uvec4 _1956 = texelFetch(g_lightClusterGridBuffer, int(((_1951 << 2u) + (_1937 << 6u)) >> 2u));
        uint _1957 = _1956.x;
        uint _1958 = _1925.z;
        float _2095;
        float _2097;
        float _2099;
        float _2101;
        float _2103;
        float _2105;
        if (((((1u << ((_1958 >> 4u) & 15u)) + 4294967295u) & _1957) == 0u) || ((_1958 & 240u) == 0u))
        {
            _2095 = 0.0;
            _2097 = 0.0;
            _2099 = 0.0;
            _2101 = 0.0;
            _2103 = 0.0;
            _2105 = 0.0;
        }
        else
        {
            float _2096;
            float _2098;
            float _2100;
            float _2102;
            float _2104;
            float _2106;
            float _2256 = 0.0;
            float _2257 = 0.0;
            float _2258 = 0.0;
            float _2259 = 0.0;
            float _2260 = 0.0;
            float _2261 = 0.0;
            uint _2262 = 0u;
            uint _2271;
            bool _2272;
            for (;;)
            {
                _2271 = texelFetch(g_lightClassification, int((((_1951 << 5u) + (_1937 << 9u)) + (_2262 << 2u)) >> 2u)).x;
                _2272 = _2271 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2272)
                {
                    frontier_phi_63_pred = _2256;
                    frontier_phi_63_pred_1 = _2261;
                    frontier_phi_63_pred_2 = _2260;
                    frontier_phi_63_pred_3 = _2259;
                    frontier_phi_63_pred_4 = _2258;
                    frontier_phi_63_pred_5 = _2257;
                }
                else
                {
                    float _2402;
                    float _2403;
                    float _2404;
                    float _2405;
                    float _2406;
                    float _2407;
                    uint _2408;
                    _2402 = _2256;
                    _2403 = _2257;
                    _2404 = _2258;
                    _2405 = _2259;
                    _2406 = _2260;
                    _2407 = _2261;
                    _2408 = _2271;
                    float _2328;
                    float _2329;
                    float _2330;
                    float _2331;
                    float _2332;
                    float _2333;
                    for (;;)
                    {
                        uint _2412 = uint(findLSB(_2408)) + (_2262 << 5u);
                        uint _2409 = (_2408 + 4294967295u) & _2408;
                        uint _2414 = _2412 * 48u;
                        vec4 _2428 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2414)).x, texelFetch(g_PointLightRenderingBuffer, int(_2414 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2414 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2414 + 3u)).x));
                        uint _2434 = (_2412 * 48u) + 4u;
                        vec4 _2447 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2434)).x, texelFetch(g_PointLightRenderingBuffer, int(_2434 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2434 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2434 + 3u)).x));
                        uint _2453 = (_2412 * 48u) + 8u;
                        vec3 _2464 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2453)).x, texelFetch(g_PointLightRenderingBuffer, int(_2453 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2453 + 2u)).x));
                        float _2468 = _2428.x - _1911;
                        float _2469 = _2428.y - _1912;
                        float _2470 = _2428.z - _1913;
                        float _2471 = dot(vec3(_2468, _2469, _2470), vec3(_2468, _2469, _2470));
                        float _2474 = inversesqrt(_2471);
                        float _2483 = 1.0 - (_2471 * _2428.w);
                        float _3615 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
                        float _2484 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
                        float _2485 = sqrt(_2471) * _2447.w;
                        float _2488 = 1.39999997615814208984375 / (_2485 + 1.39999997615814208984375);
                        float _2489 = _2488 * _2488;
                        float _2492 = ((1.0 - _2489) * dot(vec3(_347, _350, _353), vec3(_2474 * _2468, _2474 * _2469, _2474 * _2470))) + _2489;
                        float _2495 = _2485 * _2485;
                        float _2499 = ((isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0))) * _2484) / ((_2495 * 0.699999988079071044921875) + 1.0);
                        float _2503 = (-0.0) - _1911;
                        float _2504 = (-0.0) - _1912;
                        float _2505 = (-0.0) - _1913;
                        float _2509 = inversesqrt(dot(vec3(_2503, _2504, _2505), vec3(_2503, _2504, _2505)));
                        float _2513 = dot(vec3(_347, _350, _353), vec3(_2509 * _2503, _2509 * _2504, _2509 * _2505));
                        float _3631 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
                        float _3642 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
                        float _2517 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
                        float _2521 = (0.5 / (((isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))) + 9.9999999392252902907785028219223e-09) + _2517)) * _2517;
                        float _3653 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
                        float _2530 = (((isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))) * 3.1415927410125732421875) / ((_2495 * 2.1991131305694580078125) + 3.141590118408203125)) * _2484;
                        _2331 = (_2499 * _2447.x) + _2405;
                        _2332 = (_2499 * _2447.y) + _2406;
                        _2333 = (_2499 * _2447.z) + _2407;
                        _2328 = (_2530 * _2464.x) + _2402;
                        _2329 = (_2530 * _2464.y) + _2403;
                        _2330 = (_2530 * _2464.z) + _2404;
                        if (_2409 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2402 = _2328;
                            _2403 = _2329;
                            _2404 = _2330;
                            _2405 = _2331;
                            _2406 = _2332;
                            _2407 = _2333;
                            _2408 = _2409;
                        }
                    }
                    frontier_phi_63_pred = _2328;
                    frontier_phi_63_pred_1 = _2333;
                    frontier_phi_63_pred_2 = _2332;
                    frontier_phi_63_pred_3 = _2331;
                    frontier_phi_63_pred_4 = _2330;
                    frontier_phi_63_pred_5 = _2329;
                }
                _2096 = frontier_phi_63_pred;
                _2106 = frontier_phi_63_pred_1;
                _2104 = frontier_phi_63_pred_2;
                _2102 = frontier_phi_63_pred_3;
                _2100 = frontier_phi_63_pred_4;
                _2098 = frontier_phi_63_pred_5;
                uint _2263 = _2262 + 1u;
                if (_2263 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2256 = _2096;
                    _2257 = _2098;
                    _2258 = _2100;
                    _2259 = _2102;
                    _2260 = _2104;
                    _2261 = _2106;
                    _2262 = _2263;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2095 = _2096;
            _2097 = _2098;
            _2099 = _2100;
            _2101 = _2102;
            _2103 = _2104;
            _2105 = _2106;
        }
        uvec4 _2109 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2110 = _2109.z;
        uint _2112 = (_2110 >> 8u) & 15u;
        float _2227;
        float _2229;
        float _2231;
        float _2233;
        float _2235;
        float _2237;
        if (((4294967295u << _2112) & _1957) == 0u)
        {
            _2227 = _2095;
            _2229 = _2097;
            _2231 = _2099;
            _2233 = _2101;
            _2235 = _2103;
            _2237 = _2105;
        }
        else
        {
            float _2252 = inversesqrt(dot(vec3(_1911, _1912, _1913), vec3(_1911, _1912, _1913)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2112 < ((_2110 >> 12u) & 15u))
            {
                float _2228;
                float _2230;
                float _2232;
                float _2234;
                float _2236;
                float _2238;
                float _2385 = _2095;
                float _2386 = _2097;
                float _2387 = _2099;
                float _2388 = _2101;
                float _2389 = _2103;
                float _2390 = _2105;
                uint _2391 = _2112;
                uint _2400;
                bool _2401;
                for (;;)
                {
                    _2400 = texelFetch(g_lightClassification, int((((_1951 << 5u) + (_1937 << 9u)) + (_2391 << 2u)) >> 2u)).x;
                    _2401 = _2400 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2401)
                    {
                        frontier_phi_74_pred = _2390;
                        frontier_phi_74_pred_1 = _2389;
                        frontier_phi_74_pred_2 = _2388;
                        frontier_phi_74_pred_3 = _2387;
                        frontier_phi_74_pred_4 = _2386;
                        frontier_phi_74_pred_5 = _2385;
                    }
                    else
                    {
                        float _2546;
                        float _2547;
                        float _2548;
                        float _2549;
                        float _2550;
                        float _2551;
                        float _2798;
                        float _2799;
                        float _2800;
                        float _2801;
                        float _2802;
                        float _2803;
                        float _2559 = _2385;
                        float _2560 = _2386;
                        float _2561 = _2387;
                        float _2562 = _2388;
                        float _2563 = _2389;
                        float _2564 = _2390;
                        uint _2565 = _2400;
                        uint _2566;
                        vec4 _2591;
                        float _2592;
                        vec4 _2607;
                        vec3 _2619;
                        vec4 _2635;
                        vec4 _2651;
                        float _2698;
                        bool _2699;
                        for (;;)
                        {
                            uint _2576 = ((_2391 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2565));
                            _2566 = (_2565 + 4294967295u) & _2565;
                            uint _2578 = _2576 * 40u;
                            _2591 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2578)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2578 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2578 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2578 + 3u)).x));
                            _2592 = _2591.w;
                            uint _2594 = (_2576 * 40u) + 4u;
                            _2607 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2594)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2594 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2594 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2594 + 3u)).x));
                            uint _2609 = (_2576 * 40u) + 8u;
                            _2619 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2609)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2609 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2609 + 2u)).x));
                            uint _2622 = (_2576 * 40u) + 16u;
                            _2635 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2622)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2622 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2622 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2622 + 3u)).x));
                            uint _2638 = (_2576 * 40u) + 20u;
                            _2651 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2638)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2638 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2638 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2638 + 3u)).x));
                            uint _2654 = (_2576 * 40u) + 24u;
                            vec4 _2667 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2654)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2654 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2654 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2654 + 3u)).x));
                            uint _2673 = (_2576 * 40u) + 28u;
                            vec4 _2686 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2673)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2673 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2673 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2673 + 3u)).x));
                            _2698 = fma(_1913, _2686.z, fma(_1912, _2686.y, _2686.x * _1911)) + _2686.w;
                            _2699 = !((fma(_1913, _2667.z, fma(_1912, _2667.y, _2667.x * _1911)) + _2667.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_2699)
                            {
                                float _2726 = _2591.x - _1911;
                                float _2727 = _2591.y - _1912;
                                float _2728 = _2591.z - _1913;
                                float _2729 = dot(vec3(_2726, _2727, _2728), vec3(_2726, _2727, _2728));
                                float _2732 = inversesqrt(_2729);
                                float _2733 = _2732 * _2726;
                                float _2734 = _2732 * _2727;
                                float _2735 = _2732 * _2728;
                                float _2739 = 1.0 - (_2729 / (_2592 * _2592));
                                float _3664 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
                                float _2740 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
                                float _2744 = sqrt(_2729) * _2607.w;
                                float _2746 = 1.39999997615814208984375 / (_2744 + 1.39999997615814208984375);
                                float _2747 = _2746 * _2746;
                                float _2748 = 1.0 - _2747;
                                float _2750 = (_2748 * dot(vec3(_2733, _2734, _2735), vec3(_347, _350, _353))) + _2747;
                                float _2753 = _2744 * _2744;
                                float _2757 = (fma(_1913, _2635.z, fma(_1912, _2635.y, _2635.x * _1911)) + _2635.w) / _2698;
                                float _2758 = (fma(_1913, _2651.z, fma(_1912, _2651.y, _2651.x * _1911)) + _2651.w) / _2698;
                                float _2762 = 1.0 - dot(vec2(_2757, _2758), vec2(_2757, _2758));
                                float _3680 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
                                float _2763 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
                                float _2764 = _2763 * (((isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0))) * _2740) / ((_2753 * 0.699999988079071044921875) + 1.0));
                                float _2774 = dot(vec3(_347, _350, _353), vec3((-0.0) - (_1911 * _2252), (-0.0) - (_1912 * _2252), (-0.0) - (_1913 * _2252)));
                                float _3691 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
                                float _2782 = (_2748 * dot(vec3(_347, _350, _353), vec3(_2733, _2734, _2735))) + _2747;
                                float _3702 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
                                float _2783 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
                                float _2787 = (0.5 / (((isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) + 9.9999999392252902907785028219223e-09) + _2783)) * _2783;
                                float _3713 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
                                float _2794 = (_2763 * _2740) * (((isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * 3.1415927410125732421875) / ((_2753 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_80_pred = _2764 * _2607.y;
                                frontier_phi_80_pred_1 = _2764 * _2607.x;
                                frontier_phi_80_pred_2 = _2794 * _2619.z;
                                frontier_phi_80_pred_3 = _2794 * _2619.y;
                                frontier_phi_80_pred_4 = _2794 * _2619.x;
                                frontier_phi_80_pred_5 = _2764 * _2607.z;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _2802 = frontier_phi_80_pred;
                            _2801 = frontier_phi_80_pred_1;
                            _2800 = frontier_phi_80_pred_2;
                            _2799 = frontier_phi_80_pred_3;
                            _2798 = frontier_phi_80_pred_4;
                            _2803 = frontier_phi_80_pred_5;
                            _2549 = _2801 + _2562;
                            _2550 = _2802 + _2563;
                            _2551 = _2803 + _2564;
                            _2546 = _2798 + _2559;
                            _2547 = _2799 + _2560;
                            _2548 = _2800 + _2561;
                            if (_2566 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2559 = _2546;
                                _2560 = _2547;
                                _2561 = _2548;
                                _2562 = _2549;
                                _2563 = _2550;
                                _2564 = _2551;
                                _2565 = _2566;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _2551;
                        frontier_phi_74_pred_1 = _2550;
                        frontier_phi_74_pred_2 = _2549;
                        frontier_phi_74_pred_3 = _2548;
                        frontier_phi_74_pred_4 = _2547;
                        frontier_phi_74_pred_5 = _2546;
                    }
                    _2238 = frontier_phi_74_pred;
                    _2236 = frontier_phi_74_pred_1;
                    _2234 = frontier_phi_74_pred_2;
                    _2232 = frontier_phi_74_pred_3;
                    _2230 = frontier_phi_74_pred_4;
                    _2228 = frontier_phi_74_pred_5;
                    uint _2392 = _2391 + 1u;
                    if (_2392 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2385 = _2228;
                        _2386 = _2230;
                        _2387 = _2232;
                        _2388 = _2234;
                        _2389 = _2236;
                        _2390 = _2238;
                        _2391 = _2392;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2232;
                frontier_phi_55_56_ladder_1 = _2238;
                frontier_phi_55_56_ladder_2 = _2236;
                frontier_phi_55_56_ladder_3 = _2234;
                frontier_phi_55_56_ladder_4 = _2230;
                frontier_phi_55_56_ladder_5 = _2228;
            }
            else
            {
                frontier_phi_55_56_ladder = _2099;
                frontier_phi_55_56_ladder_1 = _2105;
                frontier_phi_55_56_ladder_2 = _2103;
                frontier_phi_55_56_ladder_3 = _2101;
                frontier_phi_55_56_ladder_4 = _2097;
                frontier_phi_55_56_ladder_5 = _2095;
            }
            _2227 = frontier_phi_55_56_ladder_5;
            _2229 = frontier_phi_55_56_ladder_4;
            _2231 = frontier_phi_55_56_ladder;
            _2233 = frontier_phi_55_56_ladder_3;
            _2235 = frontier_phi_55_56_ladder_2;
            _2237 = frontier_phi_55_56_ladder_1;
        }
        float _2242 = isnan(1.0) ? _391 : (isnan(_391) ? 1.0 : min(_391, 1.0));
        _1970 = (_2242 * _2233) + _1533;
        _1972 = (_2242 * _2235) + _1535;
        _1974 = (_2242 * _2237) + _1537;
        _1976 = ((_2227 * 0.039999999105930328369140625) * _2242) + _1782;
        _1978 = ((_2229 * 0.039999999105930328369140625) * _2242) + _1784;
        _1980 = ((_2231 * 0.039999999105930328369140625) * _2242) + _1786;
    }
    else
    {
        _1970 = _1533;
        _1972 = _1535;
        _1974 = _1537;
        _1976 = _1782;
        _1978 = _1784;
        _1980 = _1786;
    }
    uint _1986 = _367 + uint(cbMatDynParam._m0[0u].w);
    float _1994 = ((_213.x * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].x) * cbInstanceData._m0[_1986].x;
    float _1997 = ((_213.y * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].y) * cbInstanceData._m0[_1986].y;
    float _2000 = ((_213.z * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].z) * cbInstanceData._m0[_1986].z;
    float _3729 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _3740 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _3751 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _3762 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _2018 = (((isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_1970 + ((isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0))) * _391))) + ((_1976 + ((isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0))) * _1170)) * cbPerFrame._m0[3u].x)) + _1994;
    float _2020 = (_1997 + ((_1978 + ((isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0))) * _1170)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * (_1972 + ((isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0))) * _391)));
    float _2022 = (_2000 + ((_1980 + ((isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0))) * _1170)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * (_1974 + ((isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0))) * _391)));
    float _2023 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2024 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
    float _2025 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2031 = cbMtdParam._m0[2u].x * _1994;
    float _2032 = cbMtdParam._m0[2u].y * _1997;
    float _2033 = cbMtdParam._m0[2u].z * _2000;
    float _3788 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2035 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    float _2040 = cbInstanceData._m0[_366 + 6u].w * (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0)));
    float _2045 = _325 / cbSceneParam._m0[86u].x;
    float _2046 = _326 / cbSceneParam._m0[86u].y;
    vec4 _2060 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2045, _2046, (log2((isnan(cbSceneParam._m0[77u].w) ? _251 : (isnan(_251) ? cbSceneParam._m0[77u].w : min(_251, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2062 = _2060.x;
    float _2063 = _2060.y;
    float _2064 = _2060.z;
    float _2065 = _2060.w;
    float _2158;
    float _2160;
    float _2162;
    float _2164;
    if (_251 > cbSceneParam._m0[78u].w)
    {
        float _2120 = isnan(_251) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _251 : min(cbSceneParam._m0[80u].w, _251));
        float _2121 = _2120 / _251;
        float _2132 = _2121 * _303;
        float _2133 = _304 * _2121;
        float _2134 = (-0.0) - _2133;
        float _2136 = _2121 * _305;
        float _2138 = (cbSceneParam._m0[77u].w * _2134) / _2120;
        float _2139 = _2138 + cbSceneParam._m0[79u].w;
        float _2140 = cbSceneParam._m0[79u].w - _2133;
        float _2146 = sqrt(((_2132 * _2132) + (_2133 * _2133)) + (_2136 * _2136));
        float _2149 = (1.0 - (cbSceneParam._m0[77u].w / _2120)) * _2146;
        float _2154 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2156 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2341;
        if (abs((_2134 - _2138) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2341 = ((((_2139 > 0.0) ? exp2(_2154 * _2139) : (2.0 - exp2(_2156 * _2139))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2149;
        }
        else
        {
            float _2285 = 1.0 / cbSceneParam._m0[80u].x;
            float _2286 = isnan(_2140) ? _2139 : (isnan(_2139) ? _2140 : max(_2139, _2140));
            float _2287 = isnan(_2140) ? _2139 : (isnan(_2139) ? _2140 : min(_2139, _2140));
            float _2296 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : min(_2286, 0.0));
            float _2297 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : min(_2287, 0.0));
            _2341 = ((abs(_2146 / _2134) * cbSceneParam._m0[80u].y) * ((((_2296 - _2297) * 2.0) - ((exp2(_2154 * (isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0)))) - exp2(_2154 * (isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0))))) * _2285)) - ((exp2(_2156 * _2296) - exp2(_2156 * _2297)) * _2285))) + (_2149 * cbSceneParam._m0[80u].z);
        }
        vec4 _2343 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2045, _2046, 1.0), 0.0);
        float _2352 = exp2((_2341 * (-1.44269502162933349609375)) * (1.0 - _2343.w));
        float _2353 = log2(_2352);
        float _2369 = log2(_2065);
        _2158 = (exp2(_2369 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2353 * cbSceneParam._m0[78u].x)) * _2343.x) / cbSceneParam._m0[78u].x)) + _2062;
        _2160 = (exp2(_2369 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2353 * cbSceneParam._m0[78u].y)) * _2343.y) / cbSceneParam._m0[78u].y)) + _2063;
        _2162 = (exp2(_2369 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2353 * cbSceneParam._m0[78u].z)) * _2343.z) / cbSceneParam._m0[78u].z)) + _2064;
        _2164 = _2352 * _2065;
    }
    else
    {
        _2158 = _2062;
        _2160 = _2063;
        _2162 = _2064;
        _2164 = _2065;
    }
    bool _2379;
    vec4 _2174;
    vec4 _2197;
    float _2199;
    float _2203;
    float _2204;
    float _2205;
    float _2208;
    float _2211;
    float _2214;
    float _2215;
    bool _2226;
    for (;;)
    {
        _2174 = cbMatDynParam._m0[0u];
        float _2176 = roundEven(_2174.y);
        bool _2177 = _2176 == 3.0;
        float _2179 = log2(_2164);
        float _2183 = exp2(_2179 * cbSceneParam._m0[78u].x);
        float _2184 = exp2(_2179 * cbSceneParam._m0[78u].y);
        float _2185 = exp2(_2179 * cbSceneParam._m0[78u].z);
        float _2186 = _2183 * _2023;
        float _2187 = _2184 * _2024;
        float _2188 = _2185 * _2025;
        float _2195 = _319 + (-0.5);
        _2197 = cbMtdParam._m0[1u];
        _2199 = _2197.y * _2195;
        float _2202 = (_2176 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2203 = _2202 * (_2177 ? _2186 : (_2186 + (cbSceneParam._m0[72u].w * _2158)));
        _2204 = _2202 * (_2177 ? _2187 : (_2187 + (cbSceneParam._m0[72u].w * _2160)));
        _2205 = _2202 * (_2177 ? _2188 : (_2188 + (cbSceneParam._m0[72u].w * _2162)));
        _2208 = ((_2031 * _2035) * _2183) * _2202;
        _2211 = ((_2032 * _2035) * _2184) * _2202;
        _2214 = ((_2033 * _2035) * _2185) * _2202;
        _2215 = _2195 * 0.999000012874603271484375;
        _2226 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2226)
        {
            if ((cbInstanceData._m0[_366 + 7u].x + _2215) < 0.5)
            {
                _2379 = true;
                break;
            }
        }
        uint _2320 = _367 + uint(_2174.w);
        if ((cbInstanceData._m0[_2320].w < 1.0) && ((cbInstanceData._m0[_2320].w + _2215) < 0.5))
        {
            _2379 = true;
            break;
        }
        if ((_2199 + _193) < _2197.x)
        {
            _2379 = true;
            break;
        }
        _2379 = false;
        break;
    }
    float _2537;
    if (_2379)
    {
        discard_state = true;
        _2537 = 0.0;
    }
    else
    {
        _2537 = _2040;
    }
    SV_Target.x = _2203;
    SV_Target.y = _2204;
    SV_Target.z = _2205;
    SV_Target.w = _2537;
    SV_Target_1.x = _2208;
    SV_Target_1.y = _2211;
    SV_Target_1.z = _2214;
    SV_Target_1.w = _2040;
    discard_exit();
}


