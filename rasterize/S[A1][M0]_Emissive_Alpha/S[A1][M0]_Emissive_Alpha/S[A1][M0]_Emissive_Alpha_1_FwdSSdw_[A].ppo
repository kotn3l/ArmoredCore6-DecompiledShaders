#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A1_M0_Emissive_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_A1_M0_Emissive_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _731;
float _2961;
float _2962;
float _2963;
float _2964;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _166 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _167 = _166 * NORMAL.x;
    float _168 = _166 * NORMAL.y;
    float _169 = _166 * NORMAL.z;
    vec4 _189 = texture(sampler2D(S_A1_M0_Emissive_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _192 = _189.w;
    float _193 = _192 * TEXCOORD_1.z;
    vec4 _209 = texture(sampler2D(S_A1_M0_Emissive_Alpha_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _223 = inversesqrt(dot(vec3(_167, _168, _169), vec3(_167, _168, _169)));
    float _224 = _223 * _167;
    float _225 = _223 * _168;
    float _226 = _223 * _169;
    float _2973 = isnan(0.0) ? _193 : (isnan(_193) ? 0.0 : max(_193, 0.0));
    float _228 = isnan(1.0) ? _2973 : (isnan(_2973) ? 1.0 : min(_2973, 1.0));
    float _2984 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _2995 = isnan(0.0) ? cbMtdParam._m0[10u].y : (isnan(cbMtdParam._m0[10u].y) ? 0.0 : max(cbMtdParam._m0[10u].y, 0.0));
    float _3006 = isnan(0.0) ? cbMtdParam._m0[10u].z : (isnan(cbMtdParam._m0[10u].z) ? 0.0 : max(cbMtdParam._m0[10u].z, 0.0));
    float _247 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _289 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _299 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _289);
    float _300 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _289);
    float _301 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _289);
    float _305 = inversesqrt(dot(vec3(_299, _300, _301), vec3(_299, _300, _301)));
    float _306 = _299 * _305;
    float _307 = _300 * _305;
    float _308 = _301 * _305;
    vec4 _313 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _315 = _313.w;
    float _321 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _322 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _343 = fma(_226, cbSceneParam._m0[5u].z, fma(_225, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _224));
    float _346 = fma(_226, cbSceneParam._m0[6u].z, fma(_225, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _224));
    float _349 = fma(_226, cbSceneParam._m0[7u].z, fma(_225, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _224));
    uint _362 = uint(roundEven(NORMAL.w)) * 13u;
    uint _363 = _362 + 9u;
    uint _364 = _363 + uint(cbMatDynParam._m0[0u].w);
    float _370 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2984 : (isnan(_2984) ? 1.0 : min(_2984, 1.0)))) * cbInstanceData._m0[_364].x;
    float _371 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2995 : (isnan(_2995) ? 1.0 : min(_2995, 1.0)))) * cbInstanceData._m0[_364].y;
    float _372 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3006 : (isnan(_3006) ? 1.0 : min(_3006, 1.0)))) * cbInstanceData._m0[_364].z;
    float _3017 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _373 = isnan(1.0) ? _3017 : (isnan(_3017) ? 1.0 : min(_3017, 1.0));
    float _3028 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _374 = isnan(1.0) ? _3028 : (isnan(_3028) ? 1.0 : min(_3028, 1.0));
    float _3039 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _375 = isnan(1.0) ? _3039 : (isnan(_3039) ? 1.0 : min(_3039, 1.0));
    vec4 _384 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _321, cbSceneParam._m0[86u].y * _322));
    float _387 = _384.x * TEXCOORD_1.w;
    float _388 = dot(vec3(_224, _225, _226), vec3(_306, _307, _308));
    float _391 = _388 * 2.0;
    float _396 = (_391 * _224) - _306;
    float _397 = (_391 * _225) - _307;
    float _398 = (_391 * _226) - _308;
    float _420 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _424 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _428 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _730;
    float _732;
    float _733;
    float _734;
    float _735;
    float _736;
    float _737;
    float _738;
    float _739;
    float _740;
    float _741;
    float _742;
    float _743;
    float _744;
    float _745;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _455 = fma(_428, cbModelParam._m0[26u].z, fma(_424, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _420));
        float _459 = fma(_428, cbModelParam._m0[27u].z, fma(_424, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _420));
        float _463 = fma(_428, cbModelParam._m0[28u].z, fma(_424, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _420));
        float _488 = _420 + _224;
        float _489 = _424 + _225;
        float _490 = _428 + _226;
        float _500 = fma(_490, cbModelParam._m0[26u].z, fma(_489, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _488)) - _455;
        float _501 = fma(_490, cbModelParam._m0[27u].z, fma(_489, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _488)) - _459;
        float _502 = fma(_490, cbModelParam._m0[28u].z, fma(_489, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _488)) - _463;
        float _506 = inversesqrt(dot(vec3(_500, _501, _502), vec3(_500, _501, _502)));
        float _519 = ((_506 * _500) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_455 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _520 = ((_506 * _501) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_459 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _521 = ((_506 * _502) / cbModelParam._m0[34u].z) + ((((((_463 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _524 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_519, _520, _521), 0.0);
        vec4 _531 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_519, _520, _521), 0.0);
        vec4 _538 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_519, _520, _521), 0.0);
        vec4 _545 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_519, _520, _521), 0.0);
        float _558 = exp2((_524.w + (-0.5)) * 20.0) * 2.0;
        float _559 = _558 * (_524.x + (-0.5));
        float _560 = _558 * (_524.y + (-0.5));
        float _561 = _558 * (_524.z + (-0.5));
        float _568 = exp2((_531.w + (-0.5)) * 20.0) * 2.0;
        float _569 = _568 * (_531.x + (-0.5));
        float _570 = _568 * (_531.y + (-0.5));
        float _571 = _568 * (_531.z + (-0.5));
        float _578 = exp2((_538.w + (-0.5)) * 20.0) * 2.0;
        float _579 = _578 * (_538.x + (-0.5));
        float _580 = _578 * (_538.y + (-0.5));
        float _581 = _578 * (_538.z + (-0.5));
        float _588 = exp2((_545.w + (-0.5)) * 20.0) * 2.0;
        float _589 = _588 * (_545.x + (-0.5));
        float _590 = _588 * (_545.y + (-0.5));
        float _591 = _588 * (_545.z + (-0.5));
        float _592 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
        float _593 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
        float _594 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
        float _595 = _559 * 0.5;
        float _596 = _569 * 0.5;
        float _597 = _579 * 0.5;
        float _598 = dot(vec3(_595, _596, _597), vec3(_595, _596, _597));
        float _603 = (_598 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_598);
        float _612 = (dot(vec3(_224, _225, _226), vec3(_603 * _595, _603 * _596, _603 * _597)) + 1.0) * 0.5;
        float _3065 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
        float _622 = sqrt(((_596 * _596) + (_595 * _595)) + (_597 * _597)) / (_592 + 9.9999997473787516355514526367188e-06);
        float _3076 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
        float _623 = isnan(1.0) ? _3076 : (isnan(_3076) ? 1.0 : min(_3076, 1.0));
        float _624 = _623 * 2.0;
        float _628 = (1.0 - _623) / (_623 + 1.0);
        float _3087 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
        float _629 = isnan(1.0) ? _3087 : (isnan(_3087) ? 1.0 : min(_3087, 1.0));
        float _638 = ((((1.0 - _629) * (_624 + 2.0)) * exp2(log2(isnan(1.0) ? _3065 : (isnan(_3065) ? 1.0 : min(_3065, 1.0))) * (_624 + 1.0))) + _629) * _592;
        float _639 = _560 * 0.5;
        float _640 = _570 * 0.5;
        float _641 = _580 * 0.5;
        float _642 = dot(vec3(_639, _640, _641), vec3(_639, _640, _641));
        float _647 = (_642 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_642);
        float _655 = (dot(vec3(_224, _225, _226), vec3(_647 * _639, _647 * _640, _647 * _641)) + 1.0) * 0.5;
        float _3098 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
        float _664 = sqrt(((_640 * _640) + (_639 * _639)) + (_641 * _641)) / (_593 + 9.9999997473787516355514526367188e-06);
        float _3109 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
        float _665 = isnan(1.0) ? _3109 : (isnan(_3109) ? 1.0 : min(_3109, 1.0));
        float _666 = _665 * 2.0;
        float _670 = (1.0 - _665) / (_665 + 1.0);
        float _3120 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
        float _671 = isnan(1.0) ? _3120 : (isnan(_3120) ? 1.0 : min(_3120, 1.0));
        float _680 = ((((1.0 - _671) * (_666 + 2.0)) * exp2(log2(isnan(1.0) ? _3098 : (isnan(_3098) ? 1.0 : min(_3098, 1.0))) * (_666 + 1.0))) + _671) * _593;
        float _681 = _561 * 0.5;
        float _682 = _571 * 0.5;
        float _683 = _581 * 0.5;
        float _684 = dot(vec3(_681, _682, _683), vec3(_681, _682, _683));
        float _689 = (_684 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_684);
        float _697 = (dot(vec3(_224, _225, _226), vec3(_689 * _681, _689 * _682, _689 * _683)) + 1.0) * 0.5;
        float _3131 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
        float _706 = sqrt(((_682 * _682) + (_681 * _681)) + (_683 * _683)) / (_594 + 9.9999997473787516355514526367188e-06);
        float _3142 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _707 = isnan(1.0) ? _3142 : (isnan(_3142) ? 1.0 : min(_3142, 1.0));
        float _708 = _707 * 2.0;
        float _712 = (1.0 - _707) / (_707 + 1.0);
        float _3153 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _713 = isnan(1.0) ? _3153 : (isnan(_3153) ? 1.0 : min(_3153, 1.0));
        float _722 = ((((1.0 - _713) * (_708 + 2.0)) * exp2(log2(isnan(1.0) ? _3131 : (isnan(_3131) ? 1.0 : min(_3131, 1.0))) * (_708 + 1.0))) + _713) * _594;
        _730 = _561;
        _732 = _560;
        _733 = _559;
        _734 = _571;
        _735 = _570;
        _736 = _569;
        _737 = _581;
        _738 = _580;
        _739 = _579;
        _740 = _594;
        _741 = _593;
        _742 = _592;
        _743 = cbModelParam._m0[36u].z * (isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0)));
        _744 = cbModelParam._m0[36u].z * (isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0)));
        _745 = cbModelParam._m0[36u].z * (isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0)));
    }
    else
    {
        _730 = _731;
        _732 = _731;
        _733 = _731;
        _734 = _731;
        _735 = _731;
        _736 = _731;
        _737 = _731;
        _738 = _731;
        _739 = _731;
        _740 = _731;
        _741 = _731;
        _742 = _731;
        _743 = 0.0;
        _744 = 0.0;
        _745 = 0.0;
    }
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _771 = fma(_428, cbModelParam._m0[30u].z, fma(_424, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _420));
        float _775 = fma(_428, cbModelParam._m0[31u].z, fma(_424, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _420));
        float _779 = fma(_428, cbModelParam._m0[32u].z, fma(_424, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _420));
        float _802 = _420 + _224;
        float _803 = _424 + _225;
        float _804 = _428 + _226;
        float _814 = fma(_804, cbModelParam._m0[30u].z, fma(_803, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _802)) - _771;
        float _815 = fma(_804, cbModelParam._m0[31u].z, fma(_803, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _802)) - _775;
        float _816 = fma(_804, cbModelParam._m0[32u].z, fma(_803, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _802)) - _779;
        float _820 = inversesqrt(dot(vec3(_814, _815, _816), vec3(_814, _815, _816)));
        float _833 = ((_820 * _814) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_771 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _834 = ((_820 * _815) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_775 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _835 = ((_820 * _816) / cbModelParam._m0[35u].z) + ((((((_779 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _837 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _844 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _851 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        float _870 = exp2((_837.w + (-0.5)) * 20.0) * 2.0;
        float _871 = _870 * (_837.x + (-0.5));
        float _872 = _870 * (_837.y + (-0.5));
        float _873 = _870 * (_837.z + (-0.5));
        float _880 = exp2((_844.w + (-0.5)) * 20.0) * 2.0;
        float _881 = _880 * (_844.x + (-0.5));
        float _882 = _880 * (_844.y + (-0.5));
        float _883 = _880 * (_844.z + (-0.5));
        float _890 = exp2((_851.w + (-0.5)) * 20.0) * 2.0;
        float _891 = _890 * (_851.x + (-0.5));
        float _892 = _890 * (_851.y + (-0.5));
        float _893 = _890 * (_851.z + (-0.5));
        float _900 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _901 = _900 * (_858.x + (-0.5));
        float _902 = _900 * (_858.y + (-0.5));
        float _903 = _900 * (_858.z + (-0.5));
        float _904 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _905 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _906 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _907 = _871 * 0.5;
        float _908 = _881 * 0.5;
        float _909 = _891 * 0.5;
        float _910 = dot(vec3(_907, _908, _909), vec3(_907, _908, _909));
        float _915 = (_910 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_910);
        float _923 = (dot(vec3(_224, _225, _226), vec3(_915 * _907, _915 * _908, _915 * _909)) + 1.0) * 0.5;
        float _3194 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _932 = sqrt(((_908 * _908) + (_907 * _907)) + (_909 * _909)) / (_904 + 9.9999997473787516355514526367188e-06);
        float _3205 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _933 = isnan(1.0) ? _3205 : (isnan(_3205) ? 1.0 : min(_3205, 1.0));
        float _934 = _933 * 2.0;
        float _938 = (1.0 - _933) / (_933 + 1.0);
        float _3216 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3216 : (isnan(_3216) ? 1.0 : min(_3216, 1.0));
        float _948 = ((((1.0 - _939) * (_934 + 2.0)) * exp2(log2(isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0))) * (_934 + 1.0))) + _939) * _904;
        float _949 = _872 * 0.5;
        float _950 = _882 * 0.5;
        float _951 = _892 * 0.5;
        float _952 = dot(vec3(_949, _950, _951), vec3(_949, _950, _951));
        float _957 = (_952 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_952);
        float _965 = (dot(vec3(_224, _225, _226), vec3(_957 * _949, _957 * _950, _957 * _951)) + 1.0) * 0.5;
        float _3227 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _974 = sqrt(((_950 * _950) + (_949 * _949)) + (_951 * _951)) / (_905 + 9.9999997473787516355514526367188e-06);
        float _3238 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _3238 : (isnan(_3238) ? 1.0 : min(_3238, 1.0));
        float _976 = _975 * 2.0;
        float _980 = (1.0 - _975) / (_975 + 1.0);
        float _3249 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0));
        float _990 = ((((1.0 - _981) * (_976 + 2.0)) * exp2(log2(isnan(1.0) ? _3227 : (isnan(_3227) ? 1.0 : min(_3227, 1.0))) * (_976 + 1.0))) + _981) * _905;
        float _991 = _873 * 0.5;
        float _992 = _883 * 0.5;
        float _993 = _893 * 0.5;
        float _994 = dot(vec3(_991, _992, _993), vec3(_991, _992, _993));
        float _999 = (_994 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_994);
        float _1007 = (dot(vec3(_224, _225, _226), vec3(_999 * _991, _999 * _992, _999 * _993)) + 1.0) * 0.5;
        float _3260 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1016 = sqrt(((_992 * _992) + (_991 * _991)) + (_993 * _993)) / (_906 + 9.9999997473787516355514526367188e-06);
        float _3271 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0));
        float _1018 = _1017 * 2.0;
        float _1022 = (1.0 - _1017) / (_1017 + 1.0);
        float _3282 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0));
        float _1032 = ((((1.0 - _1023) * (_1018 + 2.0)) * exp2(log2(isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0))) * (_1018 + 1.0))) + _1023) * _906;
        _1040 = _873;
        _1041 = _872;
        _1042 = _871;
        _1043 = _883;
        _1044 = _882;
        _1045 = _881;
        _1046 = _893;
        _1047 = _892;
        _1048 = _891;
        _1049 = _906;
        _1050 = _905;
        _1051 = _904;
        _1052 = cbModelParam._m0[36u].w * (isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0)));
        _1053 = cbModelParam._m0[36u].w * (isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0)));
        _1054 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0)));
    }
    else
    {
        _1040 = _731;
        _1041 = _731;
        _1042 = _731;
        _1043 = _731;
        _1044 = _731;
        _1045 = _731;
        _1046 = _731;
        _1047 = _731;
        _1048 = _731;
        _1049 = _731;
        _1050 = _731;
        _1051 = _731;
        _1052 = 0.0;
        _1053 = 0.0;
        _1054 = 0.0;
    }
    float _1064 = (cbModelParam._m0[1u].x * (_1052 - _743)) + _743;
    float _1065 = (cbModelParam._m0[1u].x * (_1053 - _744)) + _744;
    float _1066 = (cbModelParam._m0[1u].x * (_1054 - _745)) + _745;
    float _1087 = fma(_1066, cbSceneParam._m0[89u].z, fma(_1065, cbSceneParam._m0[89u].y, _1064 * cbSceneParam._m0[89u].x));
    float _1090 = fma(_1066, cbSceneParam._m0[90u].z, fma(_1065, cbSceneParam._m0[90u].y, _1064 * cbSceneParam._m0[90u].x));
    float _1093 = fma(_1066, cbSceneParam._m0[91u].z, fma(_1065, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1064));
    float _1108 = _396 * 0.5;
    float _1109 = _397 * 0.5;
    float _1110 = _398 * 0.5;
    float _1111 = dot(vec4(_1108, _1109, _1110, 1.0), vec4(_1042, _1045, _1048, _1051));
    float _1114 = dot(vec4(_1108, _1109, _1110, 1.0), vec4(_1041, _1044, _1047, _1050));
    float _1117 = dot(vec4(_1108, _1109, _1110, 1.0), vec4(_1040, _1043, _1046, _1049));
    float _1151;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1124 = dot(vec4(_1108, _1109, _1110, 1.0), vec4(_730, _734, _737, _740));
        float _1128 = dot(vec4(_1108, _1109, _1110, 1.0), vec4(_732, _735, _738, _741));
        float _1132 = dot(vec4(_1108, _1109, _1110, 1.0), vec4(_733, _736, _739, _742));
        float _1139 = dot(vec4(cbModelParam._m0[39u]), vec4(_1108, _1109, _1110, 1.0));
        _1151 = dot(vec3(isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0)), isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)), isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1139) ? 0.0 : (isnan(0.0) ? _1139 : max(0.0, _1139))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1151 = 1.0;
    }
    float _1162;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1153 = dot(vec4(cbModelParam._m0[40u]), vec4(_1108, _1109, _1110, 1.0));
        _1162 = dot(vec3(isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0)), isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0)), isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1153) ? 0.0 : (isnan(0.0) ? _1153 : max(0.0, _1153))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1162 = 1.0;
    }
    float _1166 = (_1162 * cbModelParam._m0[1u].x) + (_1151 * (1.0 - cbModelParam._m0[1u].x));
    float _1175 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1257;
    float _1259;
    float _1261;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1224 = fma(_428, cbModelParam._m0[13u].z, fma(_424, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _420)) + cbModelParam._m0[13u].w;
        float _1228 = fma(_428, cbModelParam._m0[14u].z, fma(_424, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _420)) + cbModelParam._m0[14u].w;
        float _1232 = fma(_428, cbModelParam._m0[15u].z, fma(_424, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _420)) + cbModelParam._m0[15u].w;
        float _1235 = fma(_398, cbModelParam._m0[13u].z, fma(_397, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _396));
        float _1238 = fma(_398, cbModelParam._m0[14u].z, fma(_397, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _396));
        float _1241 = fma(_398, cbModelParam._m0[15u].z, fma(_397, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _396));
        float _1267;
        if (_1235 > 0.0)
        {
            _1267 = abs((1.0 - _1224) / _1235);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1235 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1224 + 1.0) / _1235);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1267 = frontier_phi_14_12_ladder;
        }
        float _1495;
        if (_1238 > 0.0)
        {
            _1495 = abs((1.0 - _1228) / _1238);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1238 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1228 + 1.0) / _1238);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1495 = frontier_phi_23_19_ladder;
        }
        float _1687;
        if (_1241 > 0.0)
        {
            _1687 = abs((1.0 - _1232) / _1241);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1241 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1232 + 1.0) / _1241);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1687 = frontier_phi_35_30_ladder;
        }
        float _1689 = isnan(_1495) ? _1267 : (isnan(_1267) ? _1495 : min(_1267, _1495));
        float _1690 = isnan(_1687) ? _1689 : (isnan(_1689) ? _1687 : min(_1689, _1687));
        float _1694 = (_1690 * _1235) + _1224;
        float _1695 = (_1690 * _1238) + _1228;
        float _1696 = (_1690 * _1241) + _1232;
        float _1697 = _1690 * 9.9999997473787516355514526367188e-05;
        float _1699 = (-1.0) - _1697;
        float _1701 = _1697 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1696 > _1701) || ((_1696 < _1699) || ((_1695 > _1701) || ((_1695 < _1699) || ((_1694 < _1699) || (_1694 > _1701))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1793 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1696, cbModelParam._m0[9u].z, fma(_1695, cbModelParam._m0[9u].y, _1694 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1696, cbModelParam._m0[10u].z, fma(_1695, cbModelParam._m0[10u].y, _1694 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1696, cbModelParam._m0[11u].z, fma(_1695, cbModelParam._m0[11u].y, _1694 * cbModelParam._m0[11u].x))), _1175);
            frontier_phi_13_35_ladder = _1793.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1793.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1793.x * cbModelParam._m0[1u].y;
        }
        _1257 = frontier_phi_13_35_ladder_2;
        _1259 = frontier_phi_13_35_ladder_1;
        _1261 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1245 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_396, _397, _398), _1175);
        _1257 = _1245.x * cbModelParam._m0[1u].y;
        _1259 = _1245.y * cbModelParam._m0[1u].y;
        _1261 = _1245.z * cbModelParam._m0[1u].y;
    }
    float _1264 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1357;
    float _1359;
    float _1361;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1321 = fma(_428, cbModelParam._m0[21u].z, fma(_424, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _420)) + cbModelParam._m0[21u].w;
        float _1325 = fma(_428, cbModelParam._m0[22u].z, fma(_424, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _420)) + cbModelParam._m0[22u].w;
        float _1329 = fma(_428, cbModelParam._m0[23u].z, fma(_424, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _420)) + cbModelParam._m0[23u].w;
        float _1332 = fma(_398, cbModelParam._m0[21u].z, fma(_397, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _396));
        float _1335 = fma(_398, cbModelParam._m0[22u].z, fma(_397, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _396));
        float _1338 = fma(_398, cbModelParam._m0[23u].z, fma(_397, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _396));
        float _1500;
        if (_1332 > 0.0)
        {
            _1500 = abs((1.0 - _1321) / _1332);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1332 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1321 + 1.0) / _1332);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1500 = frontier_phi_25_21_ladder;
        }
        float _1714;
        if (_1335 > 0.0)
        {
            _1714 = abs((1.0 - _1325) / _1335);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1335 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1325 + 1.0) / _1335);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1714 = frontier_phi_37_32_ladder;
        }
        float _1865;
        if (_1338 > 0.0)
        {
            _1865 = abs((1.0 - _1329) / _1338);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1338 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1329 + 1.0) / _1338);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1865 = frontier_phi_46_43_ladder;
        }
        float _1867 = isnan(_1714) ? _1500 : (isnan(_1500) ? _1714 : min(_1500, _1714));
        float _1868 = isnan(_1865) ? _1867 : (isnan(_1867) ? _1865 : min(_1867, _1865));
        float _1872 = (_1868 * _1332) + _1321;
        float _1873 = (_1868 * _1335) + _1325;
        float _1874 = (_1868 * _1338) + _1329;
        float _1875 = _1868 * 9.9999997473787516355514526367188e-05;
        float _1876 = (-1.0) - _1875;
        float _1878 = _1875 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1874 > _1878) || ((_1874 < _1876) || ((_1873 > _1878) || ((_1873 < _1876) || ((_1872 < _1876) || (_1872 > _1878))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2110 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1874, cbModelParam._m0[17u].z, fma(_1873, cbModelParam._m0[17u].y, _1872 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1874, cbModelParam._m0[18u].z, fma(_1873, cbModelParam._m0[18u].y, _1872 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1874, cbModelParam._m0[19u].z, fma(_1873, cbModelParam._m0[19u].y, _1872 * cbModelParam._m0[19u].x))), _1264);
            frontier_phi_22_46_ladder = _2110.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2110.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2110.x * cbModelParam._m0[1u].z;
        }
        _1357 = frontier_phi_22_46_ladder_2;
        _1359 = frontier_phi_22_46_ladder_1;
        _1361 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1341 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_396, _397, _398), _1264);
        _1357 = _1341.x * cbModelParam._m0[1u].z;
        _1359 = _1341.y * cbModelParam._m0[1u].z;
        _1361 = _1341.z * cbModelParam._m0[1u].z;
    }
    float _1373 = _387 * 0.01200000010430812835693359375;
    float _1375 = _1373 * ((cbModelParam._m0[1u].w * (_1357 - _1257)) + _1257);
    float _1376 = _1373 * ((cbModelParam._m0[1u].w * (_1359 - _1259)) + _1259);
    float _1377 = _1373 * ((cbModelParam._m0[1u].w * (_1361 - _1261)) + _1261);
    float _1380 = fma(_1377, cbSceneParam._m0[89u].z, fma(_1376, cbSceneParam._m0[89u].y, _1375 * cbSceneParam._m0[89u].x));
    float _1383 = fma(_1377, cbSceneParam._m0[90u].z, fma(_1376, cbSceneParam._m0[90u].y, _1375 * cbSceneParam._m0[90u].x));
    float _1386 = fma(_1377, cbSceneParam._m0[91u].z, fma(_1376, cbSceneParam._m0[91u].y, _1375 * cbSceneParam._m0[91u].x));
    vec4 _1394 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_321, _322));
    float _1396 = _1394.w;
    float _1408 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1396);
    float _1409 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1396);
    float _1410 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1396);
    uvec4 _1414 = floatBitsToUint(cbInstanceData._m0[_362 + 5u]);
    uint _1416 = _1414.x * 14u;
    uint _1417 = _1416 + 13u;
    float _1424 = _387 + (-1.0);
    float _1430 = (cbLight._m0[_1417].x * _1424) + 1.0;
    float _1431 = (cbLight._m0[_1417].y * _1424) + 1.0;
    float _1432 = (cbLight._m0[_1417].z * _1424) + 1.0;
    float _1433 = (cbLight._m0[_1417].w * _1424) + 1.0;
    uint _1434 = _1416 + 5u;
    float _1440 = isnan(1.0) ? _1431 : (isnan(_1431) ? 1.0 : min(_1431, 1.0));
    uint _1444 = _1416 + 4u;
    float _1454 = isnan(1.0) ? _1430 : (isnan(_1430) ? 1.0 : min(_1430, 1.0));
    uint _1458 = _1416 | 1u;
    float _1469 = dot(vec3(cbLight._m0[_1416].xyz), vec3(_224, _225, _226));
    float _1472 = dot(vec3(cbLight._m0[_1458].xyz), vec3(_224, _225, _226));
    float _3418 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
    float _3429 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
    float _1477 = (isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0))) * 0.3183098733425140380859375;
    float _1479 = (isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0))) * 0.3183098733425140380859375;
    float _1486 = ((cbLight._m0[_1434].x * _1440) * _1479) + (((cbLight._m0[_1444].x * _1408) * _1454) * _1477);
    float _1487 = ((_1440 * cbLight._m0[_1434].y) * _1479) + (((cbLight._m0[_1444].y * _1409) * _1454) * _1477);
    float _1488 = ((_1440 * cbLight._m0[_1434].z) * _1479) + (((cbLight._m0[_1444].z * _1410) * _1454) * _1477);
    uvec4 _1492 = floatBitsToUint(cbLight._m0[_1416 + 12u]);
    bool _1494 = _1492.x == 0u;
    float _1505;
    float _1507;
    float _1509;
    if (_1494)
    {
        _1505 = _1486;
        _1507 = _1487;
        _1509 = _1488;
    }
    else
    {
        uint _1513 = _1416 + 6u;
        float _1529 = (dot(vec3(cbLight._m0[_1416 + 2u].xyz), vec3(_224, _225, _226)) * 0.5) + 0.5;
        float _1530 = _1529 * _1529;
        float _3440 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
        float _1532 = isnan(1.0) ? _1432 : (isnan(_1432) ? 1.0 : min(_1432, 1.0));
        _1505 = (((cbLight._m0[_1513].x * 0.3183098733425140380859375) * _1531) * _1532) + _1486;
        _1507 = (((cbLight._m0[_1513].y * 0.3183098733425140380859375) * _1531) * _1532) + _1487;
        _1509 = (((cbLight._m0[_1513].z * 0.3183098733425140380859375) * _1531) * _1532) + _1488;
    }
    bool _1512 = _1492.y == 0u;
    float _1550;
    float _1552;
    float _1554;
    if (_1512)
    {
        _1550 = _1505;
        _1552 = _1507;
        _1554 = _1509;
    }
    else
    {
        uint _1658 = _1416 + 7u;
        float _1674 = (dot(vec3(cbLight._m0[_1416 + 3u].xyz), vec3(_224, _225, _226)) * 0.5) + 0.5;
        float _1675 = _1674 * _1674;
        float _3456 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1676 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
        float _1677 = isnan(1.0) ? _1433 : (isnan(_1433) ? 1.0 : min(_1433, 1.0));
        _1550 = (((cbLight._m0[_1658].x * 0.3183098733425140380859375) * _1676) * _1677) + _1505;
        _1552 = (((cbLight._m0[_1658].y * 0.3183098733425140380859375) * _1676) * _1677) + _1507;
        _1554 = (((cbLight._m0[_1658].z * 0.3183098733425140380859375) * _1676) * _1677) + _1509;
    }
    uint _1556 = _1416 + 8u;
    float _1562 = cbLight._m0[_1416].x + _306;
    float _1563 = cbLight._m0[_1416].y + _307;
    float _1564 = cbLight._m0[_1416].z + _308;
    float _1568 = inversesqrt(dot(vec3(_1562, _1563, _1564), vec3(_1562, _1563, _1564)));
    float _1572 = dot(vec3(_224, _225, _226), vec3(cbLight._m0[_1416].xyz));
    float _3472 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
    float _1575 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
    float _3483 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _1576 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
    float _1577 = dot(vec3(cbLight._m0[_1416].xyz), vec3(_1562 * _1568, _1563 * _1568, _1564 * _1568));
    float _3494 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
    float _1588 = (exp2(log2(1.0 - (isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1594 = (0.5 / ((_1575 + 9.9999999392252902907785028219223e-09) + _1576)) * _1575;
    float _3505 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
    float _1596 = (isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0))) * 0.31831014156341552734375;
    uint _1610 = _1416 + 9u;
    float _1616 = cbLight._m0[_1458].x + _306;
    float _1617 = cbLight._m0[_1458].y + _307;
    float _1618 = cbLight._m0[_1458].z + _308;
    float _1622 = inversesqrt(dot(vec3(_1616, _1617, _1618), vec3(_1616, _1617, _1618)));
    float _1626 = dot(vec3(_224, _225, _226), vec3(cbLight._m0[_1458].xyz));
    float _3516 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
    float _1629 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
    float _1630 = dot(vec3(cbLight._m0[_1458].xyz), vec3(_1616 * _1622, _1617 * _1622, _1618 * _1622));
    float _3527 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
    float _1639 = (exp2(log2(1.0 - (isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1643 = (0.5 / ((_1629 + 9.9999999392252902907785028219223e-09) + _1576)) * _1629;
    float _3538 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
    float _1645 = (isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))) * 0.31831014156341552734375;
    float _1655 = (((_1639 * cbLight._m0[_1610].x) * _1645) * _1440) + ((((cbLight._m0[_1556].x * _1408) * _1588) * _1596) * _1454);
    float _1656 = (((_1639 * cbLight._m0[_1610].y) * _1645) * _1440) + ((((cbLight._m0[_1556].y * _1409) * _1588) * _1596) * _1454);
    float _1657 = (((_1639 * cbLight._m0[_1610].z) * _1645) * _1440) + ((((cbLight._m0[_1556].z * _1410) * _1588) * _1596) * _1454);
    float _1719;
    float _1721;
    float _1723;
    if (_1494)
    {
        _1719 = _1655;
        _1721 = _1656;
        _1723 = _1657;
    }
    else
    {
        uint _1725 = _1416 + 10u;
        uint _1731 = _1416 + 2u;
        float _1737 = cbLight._m0[_1731].x + _306;
        float _1738 = cbLight._m0[_1731].y + _307;
        float _1739 = cbLight._m0[_1731].z + _308;
        float _1743 = inversesqrt(dot(vec3(_1737, _1738, _1739), vec3(_1737, _1738, _1739)));
        float _1747 = dot(vec3(_224, _225, _226), vec3(cbLight._m0[_1731].xyz));
        float _3549 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1750 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _1751 = dot(vec3(cbLight._m0[_1731].xyz), vec3(_1737 * _1743, _1738 * _1743, _1739 * _1743));
        float _3560 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1760 = (exp2(log2(1.0 - (isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1764 = (0.5 / ((_1750 + 9.9999999392252902907785028219223e-09) + _1576)) * _1750;
        float _3571 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1766 = (isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0))) * 0.31831014156341552734375;
        float _1767 = isnan(1.0) ? _1432 : (isnan(_1432) ? 1.0 : min(_1432, 1.0));
        _1719 = (((_1760 * cbLight._m0[_1725].x) * _1766) * _1767) + _1655;
        _1721 = (((_1760 * cbLight._m0[_1725].y) * _1766) * _1767) + _1656;
        _1723 = (((_1760 * cbLight._m0[_1725].z) * _1766) * _1767) + _1657;
    }
    float _1802;
    float _1804;
    float _1806;
    if (_1512)
    {
        _1802 = _1719;
        _1804 = _1721;
        _1806 = _1723;
    }
    else
    {
        uint _1813 = _1416 + 11u;
        uint _1819 = _1416 + 3u;
        float _1825 = cbLight._m0[_1819].x + _306;
        float _1826 = cbLight._m0[_1819].y + _307;
        float _1827 = cbLight._m0[_1819].z + _308;
        float _1831 = inversesqrt(dot(vec3(_1825, _1826, _1827), vec3(_1825, _1826, _1827)));
        float _1835 = dot(vec3(_224, _225, _226), vec3(cbLight._m0[_1819].xyz));
        float _3587 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
        float _1838 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _1839 = dot(vec3(cbLight._m0[_1819].xyz), vec3(_1825 * _1831, _1826 * _1831, _1827 * _1831));
        float _3598 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
        float _1848 = (exp2(log2(1.0 - (isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1852 = (0.5 / ((_1838 + 9.9999999392252902907785028219223e-09) + _1576)) * _1838;
        float _3609 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
        float _1854 = (isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))) * 0.31831014156341552734375;
        float _1855 = isnan(1.0) ? _1433 : (isnan(_1433) ? 1.0 : min(_1433, 1.0));
        _1802 = (((_1848 * cbLight._m0[_1813].x) * _1854) * _1855) + _1719;
        _1804 = (((_1848 * cbLight._m0[_1813].y) * _1854) * _1855) + _1721;
        _1806 = (((_1848 * cbLight._m0[_1813].z) * _1854) * _1855) + _1723;
    }
    float _1990;
    float _1992;
    float _1994;
    float _1996;
    float _1998;
    float _2000;
    if (_1414.y == 0u)
    {
        float _1930 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1931 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1930;
        float _1932 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1930;
        float _1933 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1930;
        uvec4 _1945 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1946 = _1945.x;
        uint _1957 = uint((float(_1945.y) * floor(float(uint(cbSceneParam._m0[85u].y * _322) / _1946))) + floor(float(uint(cbSceneParam._m0[85u].x * _321) / _1946)));
        float _1967 = (log2(_1933 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1968 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
        uint _1971 = uint(isnan(14.0) ? _1968 : (isnan(_1968) ? 14.0 : min(_1968, 14.0)));
        uvec4 _1976 = texelFetch(g_lightClusterGridBuffer, int(((_1971 << 2u) + (_1957 << 6u)) >> 2u));
        uint _1977 = _1976.x;
        uint _1978 = _1945.z;
        float _2115;
        float _2117;
        float _2119;
        float _2121;
        float _2123;
        float _2125;
        if (((((1u << ((_1978 >> 4u) & 15u)) + 4294967295u) & _1977) == 0u) || ((_1978 & 240u) == 0u))
        {
            _2115 = 0.0;
            _2117 = 0.0;
            _2119 = 0.0;
            _2121 = 0.0;
            _2123 = 0.0;
            _2125 = 0.0;
        }
        else
        {
            float _2116;
            float _2118;
            float _2120;
            float _2122;
            float _2124;
            float _2126;
            float _2276 = 0.0;
            float _2277 = 0.0;
            float _2278 = 0.0;
            float _2279 = 0.0;
            float _2280 = 0.0;
            float _2281 = 0.0;
            uint _2282 = 0u;
            uint _2291;
            bool _2292;
            for (;;)
            {
                _2291 = texelFetch(g_lightClassification, int((((_1971 << 5u) + (_1957 << 9u)) + (_2282 << 2u)) >> 2u)).x;
                _2292 = _2291 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2292)
                {
                    frontier_phi_63_pred = _2276;
                    frontier_phi_63_pred_1 = _2281;
                    frontier_phi_63_pred_2 = _2280;
                    frontier_phi_63_pred_3 = _2279;
                    frontier_phi_63_pred_4 = _2278;
                    frontier_phi_63_pred_5 = _2277;
                }
                else
                {
                    float _2422;
                    float _2423;
                    float _2424;
                    float _2425;
                    float _2426;
                    float _2427;
                    uint _2428;
                    _2422 = _2276;
                    _2423 = _2277;
                    _2424 = _2278;
                    _2425 = _2279;
                    _2426 = _2280;
                    _2427 = _2281;
                    _2428 = _2291;
                    float _2348;
                    float _2349;
                    float _2350;
                    float _2351;
                    float _2352;
                    float _2353;
                    for (;;)
                    {
                        uint _2432 = uint(findLSB(_2428)) + (_2282 << 5u);
                        uint _2429 = (_2428 + 4294967295u) & _2428;
                        uint _2434 = _2432 * 48u;
                        vec4 _2448 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2434)).x, texelFetch(g_PointLightRenderingBuffer, int(_2434 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2434 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2434 + 3u)).x));
                        uint _2454 = (_2432 * 48u) + 4u;
                        vec4 _2467 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2454)).x, texelFetch(g_PointLightRenderingBuffer, int(_2454 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2454 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2454 + 3u)).x));
                        uint _2473 = (_2432 * 48u) + 8u;
                        vec3 _2484 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2473)).x, texelFetch(g_PointLightRenderingBuffer, int(_2473 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2473 + 2u)).x));
                        float _2488 = _2448.x - _1931;
                        float _2489 = _2448.y - _1932;
                        float _2490 = _2448.z - _1933;
                        float _2491 = dot(vec3(_2488, _2489, _2490), vec3(_2488, _2489, _2490));
                        float _2494 = inversesqrt(_2491);
                        float _2503 = 1.0 - (_2491 * _2448.w);
                        float _3635 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
                        float _2504 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
                        float _2505 = sqrt(_2491) * _2467.w;
                        float _2508 = 1.39999997615814208984375 / (_2505 + 1.39999997615814208984375);
                        float _2509 = _2508 * _2508;
                        float _2512 = ((1.0 - _2509) * dot(vec3(_343, _346, _349), vec3(_2494 * _2488, _2494 * _2489, _2494 * _2490))) + _2509;
                        float _2515 = _2505 * _2505;
                        float _2519 = ((isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0))) * _2504) / ((_2515 * 0.699999988079071044921875) + 1.0);
                        float _2523 = (-0.0) - _1931;
                        float _2524 = (-0.0) - _1932;
                        float _2525 = (-0.0) - _1933;
                        float _2529 = inversesqrt(dot(vec3(_2523, _2524, _2525), vec3(_2523, _2524, _2525)));
                        float _2533 = dot(vec3(_343, _346, _349), vec3(_2529 * _2523, _2529 * _2524, _2529 * _2525));
                        float _3651 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
                        float _3662 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
                        float _2537 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
                        float _2541 = (0.5 / (((isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) + 9.9999999392252902907785028219223e-09) + _2537)) * _2537;
                        float _3673 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
                        float _2550 = (((isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) * 3.1415927410125732421875) / ((_2515 * 2.1991131305694580078125) + 3.141590118408203125)) * _2504;
                        _2351 = (_2519 * _2467.x) + _2425;
                        _2352 = (_2519 * _2467.y) + _2426;
                        _2353 = (_2519 * _2467.z) + _2427;
                        _2348 = (_2550 * _2484.x) + _2422;
                        _2349 = (_2550 * _2484.y) + _2423;
                        _2350 = (_2550 * _2484.z) + _2424;
                        if (_2429 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2422 = _2348;
                            _2423 = _2349;
                            _2424 = _2350;
                            _2425 = _2351;
                            _2426 = _2352;
                            _2427 = _2353;
                            _2428 = _2429;
                        }
                    }
                    frontier_phi_63_pred = _2348;
                    frontier_phi_63_pred_1 = _2353;
                    frontier_phi_63_pred_2 = _2352;
                    frontier_phi_63_pred_3 = _2351;
                    frontier_phi_63_pred_4 = _2350;
                    frontier_phi_63_pred_5 = _2349;
                }
                _2116 = frontier_phi_63_pred;
                _2126 = frontier_phi_63_pred_1;
                _2124 = frontier_phi_63_pred_2;
                _2122 = frontier_phi_63_pred_3;
                _2120 = frontier_phi_63_pred_4;
                _2118 = frontier_phi_63_pred_5;
                uint _2283 = _2282 + 1u;
                if (_2283 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2276 = _2116;
                    _2277 = _2118;
                    _2278 = _2120;
                    _2279 = _2122;
                    _2280 = _2124;
                    _2281 = _2126;
                    _2282 = _2283;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2115 = _2116;
            _2117 = _2118;
            _2119 = _2120;
            _2121 = _2122;
            _2123 = _2124;
            _2125 = _2126;
        }
        uvec4 _2129 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2130 = _2129.z;
        uint _2132 = (_2130 >> 8u) & 15u;
        float _2247;
        float _2249;
        float _2251;
        float _2253;
        float _2255;
        float _2257;
        if (((4294967295u << _2132) & _1977) == 0u)
        {
            _2247 = _2115;
            _2249 = _2117;
            _2251 = _2119;
            _2253 = _2121;
            _2255 = _2123;
            _2257 = _2125;
        }
        else
        {
            float _2272 = inversesqrt(dot(vec3(_1931, _1932, _1933), vec3(_1931, _1932, _1933)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2132 < ((_2130 >> 12u) & 15u))
            {
                float _2248;
                float _2250;
                float _2252;
                float _2254;
                float _2256;
                float _2258;
                float _2405 = _2115;
                float _2406 = _2117;
                float _2407 = _2119;
                float _2408 = _2121;
                float _2409 = _2123;
                float _2410 = _2125;
                uint _2411 = _2132;
                uint _2420;
                bool _2421;
                for (;;)
                {
                    _2420 = texelFetch(g_lightClassification, int((((_1971 << 5u) + (_1957 << 9u)) + (_2411 << 2u)) >> 2u)).x;
                    _2421 = _2420 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2421)
                    {
                        frontier_phi_74_pred = _2410;
                        frontier_phi_74_pred_1 = _2409;
                        frontier_phi_74_pred_2 = _2408;
                        frontier_phi_74_pred_3 = _2407;
                        frontier_phi_74_pred_4 = _2406;
                        frontier_phi_74_pred_5 = _2405;
                    }
                    else
                    {
                        float _2566;
                        float _2567;
                        float _2568;
                        float _2569;
                        float _2570;
                        float _2571;
                        float _2818;
                        float _2819;
                        float _2820;
                        float _2821;
                        float _2822;
                        float _2823;
                        float _2579 = _2405;
                        float _2580 = _2406;
                        float _2581 = _2407;
                        float _2582 = _2408;
                        float _2583 = _2409;
                        float _2584 = _2410;
                        uint _2585 = _2420;
                        uint _2586;
                        vec4 _2611;
                        float _2612;
                        vec4 _2627;
                        vec3 _2639;
                        vec4 _2655;
                        vec4 _2671;
                        float _2718;
                        bool _2719;
                        for (;;)
                        {
                            uint _2596 = ((_2411 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2585));
                            _2586 = (_2585 + 4294967295u) & _2585;
                            uint _2598 = _2596 * 40u;
                            _2611 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2598)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2598 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2598 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2598 + 3u)).x));
                            _2612 = _2611.w;
                            uint _2614 = (_2596 * 40u) + 4u;
                            _2627 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2614)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2614 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2614 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2614 + 3u)).x));
                            uint _2629 = (_2596 * 40u) + 8u;
                            _2639 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2629)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2629 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2629 + 2u)).x));
                            uint _2642 = (_2596 * 40u) + 16u;
                            _2655 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2642 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2642 + 3u)).x));
                            uint _2658 = (_2596 * 40u) + 20u;
                            _2671 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2658)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2658 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2658 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2658 + 3u)).x));
                            uint _2674 = (_2596 * 40u) + 24u;
                            vec4 _2687 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2674)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2674 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2674 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2674 + 3u)).x));
                            uint _2693 = (_2596 * 40u) + 28u;
                            vec4 _2706 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2693)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2693 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2693 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2693 + 3u)).x));
                            _2718 = fma(_1933, _2706.z, fma(_1932, _2706.y, _2706.x * _1931)) + _2706.w;
                            _2719 = !((fma(_1933, _2687.z, fma(_1932, _2687.y, _2687.x * _1931)) + _2687.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_2719)
                            {
                                float _2746 = _2611.x - _1931;
                                float _2747 = _2611.y - _1932;
                                float _2748 = _2611.z - _1933;
                                float _2749 = dot(vec3(_2746, _2747, _2748), vec3(_2746, _2747, _2748));
                                float _2752 = inversesqrt(_2749);
                                float _2753 = _2752 * _2746;
                                float _2754 = _2752 * _2747;
                                float _2755 = _2752 * _2748;
                                float _2759 = 1.0 - (_2749 / (_2612 * _2612));
                                float _3684 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
                                float _2760 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
                                float _2764 = sqrt(_2749) * _2627.w;
                                float _2766 = 1.39999997615814208984375 / (_2764 + 1.39999997615814208984375);
                                float _2767 = _2766 * _2766;
                                float _2768 = 1.0 - _2767;
                                float _2770 = (_2768 * dot(vec3(_2753, _2754, _2755), vec3(_343, _346, _349))) + _2767;
                                float _2773 = _2764 * _2764;
                                float _2777 = (fma(_1933, _2655.z, fma(_1932, _2655.y, _2655.x * _1931)) + _2655.w) / _2718;
                                float _2778 = (fma(_1933, _2671.z, fma(_1932, _2671.y, _2671.x * _1931)) + _2671.w) / _2718;
                                float _2782 = 1.0 - dot(vec2(_2777, _2778), vec2(_2777, _2778));
                                float _3700 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
                                float _2783 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
                                float _2784 = _2783 * (((isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0))) * _2760) / ((_2773 * 0.699999988079071044921875) + 1.0));
                                float _2794 = dot(vec3(_343, _346, _349), vec3((-0.0) - (_1931 * _2272), (-0.0) - (_1932 * _2272), (-0.0) - (_1933 * _2272)));
                                float _3711 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
                                float _2802 = (_2768 * dot(vec3(_343, _346, _349), vec3(_2753, _2754, _2755))) + _2767;
                                float _3722 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
                                float _2803 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
                                float _2807 = (0.5 / (((isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) + 9.9999999392252902907785028219223e-09) + _2803)) * _2803;
                                float _3733 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
                                float _2814 = (_2783 * _2760) * (((isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * 3.1415927410125732421875) / ((_2773 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_80_pred = _2784 * _2627.y;
                                frontier_phi_80_pred_1 = _2784 * _2627.x;
                                frontier_phi_80_pred_2 = _2814 * _2639.z;
                                frontier_phi_80_pred_3 = _2814 * _2639.y;
                                frontier_phi_80_pred_4 = _2814 * _2639.x;
                                frontier_phi_80_pred_5 = _2784 * _2627.z;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _2822 = frontier_phi_80_pred;
                            _2821 = frontier_phi_80_pred_1;
                            _2820 = frontier_phi_80_pred_2;
                            _2819 = frontier_phi_80_pred_3;
                            _2818 = frontier_phi_80_pred_4;
                            _2823 = frontier_phi_80_pred_5;
                            _2569 = _2821 + _2582;
                            _2570 = _2822 + _2583;
                            _2571 = _2823 + _2584;
                            _2566 = _2818 + _2579;
                            _2567 = _2819 + _2580;
                            _2568 = _2820 + _2581;
                            if (_2586 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2579 = _2566;
                                _2580 = _2567;
                                _2581 = _2568;
                                _2582 = _2569;
                                _2583 = _2570;
                                _2584 = _2571;
                                _2585 = _2586;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _2571;
                        frontier_phi_74_pred_1 = _2570;
                        frontier_phi_74_pred_2 = _2569;
                        frontier_phi_74_pred_3 = _2568;
                        frontier_phi_74_pred_4 = _2567;
                        frontier_phi_74_pred_5 = _2566;
                    }
                    _2258 = frontier_phi_74_pred;
                    _2256 = frontier_phi_74_pred_1;
                    _2254 = frontier_phi_74_pred_2;
                    _2252 = frontier_phi_74_pred_3;
                    _2250 = frontier_phi_74_pred_4;
                    _2248 = frontier_phi_74_pred_5;
                    uint _2412 = _2411 + 1u;
                    if (_2412 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2405 = _2248;
                        _2406 = _2250;
                        _2407 = _2252;
                        _2408 = _2254;
                        _2409 = _2256;
                        _2410 = _2258;
                        _2411 = _2412;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2252;
                frontier_phi_55_56_ladder_1 = _2258;
                frontier_phi_55_56_ladder_2 = _2256;
                frontier_phi_55_56_ladder_3 = _2254;
                frontier_phi_55_56_ladder_4 = _2250;
                frontier_phi_55_56_ladder_5 = _2248;
            }
            else
            {
                frontier_phi_55_56_ladder = _2119;
                frontier_phi_55_56_ladder_1 = _2125;
                frontier_phi_55_56_ladder_2 = _2123;
                frontier_phi_55_56_ladder_3 = _2121;
                frontier_phi_55_56_ladder_4 = _2117;
                frontier_phi_55_56_ladder_5 = _2115;
            }
            _2247 = frontier_phi_55_56_ladder_5;
            _2249 = frontier_phi_55_56_ladder_4;
            _2251 = frontier_phi_55_56_ladder;
            _2253 = frontier_phi_55_56_ladder_3;
            _2255 = frontier_phi_55_56_ladder_2;
            _2257 = frontier_phi_55_56_ladder_1;
        }
        float _2262 = isnan(1.0) ? _387 : (isnan(_387) ? 1.0 : min(_387, 1.0));
        _1990 = (_2262 * _2253) + _1550;
        _1992 = (_2262 * _2255) + _1552;
        _1994 = (_2262 * _2257) + _1554;
        _1996 = ((_2247 * 0.039999999105930328369140625) * _2262) + _1802;
        _1998 = ((_2249 * 0.039999999105930328369140625) * _2262) + _1804;
        _2000 = ((_2251 * 0.039999999105930328369140625) * _2262) + _1806;
    }
    else
    {
        _1990 = _1550;
        _1992 = _1552;
        _1994 = _1554;
        _1996 = _1802;
        _1998 = _1804;
        _2000 = _1806;
    }
    uint _2006 = _363 + uint(cbMatDynParam._m0[0u].w);
    float _2014 = ((_209.x * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].x) * cbInstanceData._m0[_2006].x;
    float _2017 = ((_209.y * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].y) * cbInstanceData._m0[_2006].y;
    float _2020 = ((_209.z * cbMtdParam._m0[12u].x) * cbMtdParam._m0[11u].z) * cbInstanceData._m0[_2006].z;
    float _3749 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _3760 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _3771 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _3782 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _2038 = (((isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) * (_1990 + ((isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0))) * _387))) + ((_1996 + ((isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0))) * _1166)) * cbPerFrame._m0[3u].x)) + _2014;
    float _2040 = (_2017 + ((_1998 + ((isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0))) * _1166)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * (_1992 + ((isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0))) * _387)));
    float _2042 = (_2020 + ((_2000 + ((isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0))) * _1166)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_1994 + ((isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0))) * _387)));
    float _2043 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2044 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2045 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2051 = cbMtdParam._m0[2u].x * _2014;
    float _2052 = cbMtdParam._m0[2u].y * _2017;
    float _2053 = cbMtdParam._m0[2u].z * _2020;
    float _3808 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2055 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _2060 = cbInstanceData._m0[_362 + 6u].w * (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0)));
    float _2065 = _321 / cbSceneParam._m0[86u].x;
    float _2066 = _322 / cbSceneParam._m0[86u].y;
    vec4 _2080 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2065, _2066, (log2((isnan(cbSceneParam._m0[77u].w) ? _247 : (isnan(_247) ? cbSceneParam._m0[77u].w : min(_247, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2082 = _2080.x;
    float _2083 = _2080.y;
    float _2084 = _2080.z;
    float _2085 = _2080.w;
    float _2178;
    float _2180;
    float _2182;
    float _2184;
    if (_247 > cbSceneParam._m0[78u].w)
    {
        float _2140 = isnan(_247) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _247 : min(cbSceneParam._m0[80u].w, _247));
        float _2141 = _2140 / _247;
        float _2152 = _2141 * _299;
        float _2153 = _300 * _2141;
        float _2154 = (-0.0) - _2153;
        float _2156 = _2141 * _301;
        float _2158 = (cbSceneParam._m0[77u].w * _2154) / _2140;
        float _2159 = _2158 + cbSceneParam._m0[79u].w;
        float _2160 = cbSceneParam._m0[79u].w - _2153;
        float _2166 = sqrt(((_2152 * _2152) + (_2153 * _2153)) + (_2156 * _2156));
        float _2169 = (1.0 - (cbSceneParam._m0[77u].w / _2140)) * _2166;
        float _2174 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2176 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2361;
        if (abs((_2154 - _2158) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2361 = ((((_2159 > 0.0) ? exp2(_2174 * _2159) : (2.0 - exp2(_2176 * _2159))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2169;
        }
        else
        {
            float _2305 = 1.0 / cbSceneParam._m0[80u].x;
            float _2306 = isnan(_2160) ? _2159 : (isnan(_2159) ? _2160 : max(_2159, _2160));
            float _2307 = isnan(_2160) ? _2159 : (isnan(_2159) ? _2160 : min(_2159, _2160));
            float _2316 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : min(_2306, 0.0));
            float _2317 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : min(_2307, 0.0));
            _2361 = ((abs(_2166 / _2154) * cbSceneParam._m0[80u].y) * ((((_2316 - _2317) * 2.0) - ((exp2(_2174 * (isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0)))) - exp2(_2174 * (isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0))))) * _2305)) - ((exp2(_2176 * _2316) - exp2(_2176 * _2317)) * _2305))) + (_2169 * cbSceneParam._m0[80u].z);
        }
        vec4 _2363 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2065, _2066, 1.0), 0.0);
        float _2372 = exp2((_2361 * (-1.44269502162933349609375)) * (1.0 - _2363.w));
        float _2373 = log2(_2372);
        float _2389 = log2(_2085);
        _2178 = (exp2(_2389 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2373 * cbSceneParam._m0[78u].x)) * _2363.x) / cbSceneParam._m0[78u].x)) + _2082;
        _2180 = (exp2(_2389 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2373 * cbSceneParam._m0[78u].y)) * _2363.y) / cbSceneParam._m0[78u].y)) + _2083;
        _2182 = (exp2(_2389 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2373 * cbSceneParam._m0[78u].z)) * _2363.z) / cbSceneParam._m0[78u].z)) + _2084;
        _2184 = _2372 * _2085;
    }
    else
    {
        _2178 = _2082;
        _2180 = _2083;
        _2182 = _2084;
        _2184 = _2085;
    }
    bool _2399;
    vec4 _2194;
    vec4 _2217;
    float _2219;
    float _2223;
    float _2224;
    float _2225;
    float _2228;
    float _2231;
    float _2234;
    float _2235;
    bool _2246;
    for (;;)
    {
        _2194 = cbMatDynParam._m0[0u];
        float _2196 = roundEven(_2194.y);
        bool _2197 = _2196 == 3.0;
        float _2199 = log2(_2184);
        float _2203 = exp2(_2199 * cbSceneParam._m0[78u].x);
        float _2204 = exp2(_2199 * cbSceneParam._m0[78u].y);
        float _2205 = exp2(_2199 * cbSceneParam._m0[78u].z);
        float _2206 = _2203 * _2043;
        float _2207 = _2204 * _2044;
        float _2208 = _2205 * _2045;
        float _2215 = _315 + (-0.5);
        _2217 = cbMtdParam._m0[1u];
        _2219 = _2217.y * _2215;
        float _2222 = (_2196 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2223 = _2222 * (_2197 ? _2206 : (_2206 + (cbSceneParam._m0[72u].w * _2178)));
        _2224 = _2222 * (_2197 ? _2207 : (_2207 + (cbSceneParam._m0[72u].w * _2180)));
        _2225 = _2222 * (_2197 ? _2208 : (_2208 + (cbSceneParam._m0[72u].w * _2182)));
        _2228 = ((_2051 * _2055) * _2203) * _2222;
        _2231 = ((_2052 * _2055) * _2204) * _2222;
        _2234 = ((_2053 * _2055) * _2205) * _2222;
        _2235 = _2215 * 0.999000012874603271484375;
        _2246 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2246)
        {
            if ((cbInstanceData._m0[_362 + 7u].x + _2235) < 0.5)
            {
                _2399 = true;
                break;
            }
        }
        uint _2340 = _363 + uint(_2194.w);
        if ((cbInstanceData._m0[_2340].w < 1.0) && ((cbInstanceData._m0[_2340].w + _2235) < 0.5))
        {
            _2399 = true;
            break;
        }
        if ((_2219 + _192) < _2217.x)
        {
            _2399 = true;
            break;
        }
        _2399 = false;
        break;
    }
    float _2557;
    if (_2399)
    {
        discard_state = true;
        _2557 = 0.0;
    }
    else
    {
        _2557 = _2060;
    }
    SV_Target.x = _2223;
    SV_Target.y = _2224;
    SV_Target.z = _2225;
    SV_Target.w = _2557;
    SV_Target_1.x = _2228;
    SV_Target_1.y = _2231;
    SV_Target_1.z = _2234;
    SV_Target_1.w = _2060;
    discard_exit();
}


