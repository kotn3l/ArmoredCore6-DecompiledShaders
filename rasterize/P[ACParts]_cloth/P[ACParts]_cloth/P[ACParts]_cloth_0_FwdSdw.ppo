#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_snp_0_Texture2D_2;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D P_ACParts_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D P_ACParts_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D P_ACParts_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_snp_0_Texture2D_1;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_snp_0_Texture2D_10;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_snp_0_Texture2D_11;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_snp_0_Texture2D_12;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_snp_0_Texture2D_13;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_snp_0_Texture2D_14;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_snp_0_Texture2D_15;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1374;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253;
    float _254;
    float _255;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _253 = (-0.0) - _239;
        _254 = (-0.0) - _240;
        _255 = (-0.0) - _241;
    }
    else
    {
        _253 = _239;
        _254 = _240;
        _255 = _241;
    }
    vec4 _273 = texture(sampler2D(P_ACParts_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _278 = _273.z;
    float _279 = _273.w;
    float _287 = exp2(log2(_278 * cbMtdParam._m0[20u].w) * cbMtdParam._m0[19u].y);
    float _288 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    float _289 = isnan(1.0) ? _288 : (isnan(_288) ? 1.0 : min(_288, 1.0));
    float _295 = exp2(log2(1.0 - _279) * cbMtdParam._m0[20u].y);
    vec4 _307 = texture(sampler2D(P_ACParts_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _201[6];
    float _202[6];
    float _203[6];
    _201[0u] = cbMtdParam._m0[12u].x;
    _202[0u] = cbMtdParam._m0[12u].y;
    _203[0u] = cbMtdParam._m0[12u].z;
    _201[1u] = cbMtdParam._m0[13u].x;
    _202[1u] = cbMtdParam._m0[13u].y;
    _203[1u] = cbMtdParam._m0[13u].z;
    _201[2u] = cbMtdParam._m0[14u].x;
    _202[2u] = cbMtdParam._m0[14u].y;
    _203[2u] = cbMtdParam._m0[14u].z;
    _201[3u] = cbMtdParam._m0[15u].x;
    _202[3u] = cbMtdParam._m0[15u].y;
    _203[3u] = cbMtdParam._m0[15u].z;
    _201[4u] = cbMtdParam._m0[16u].x;
    _202[4u] = cbMtdParam._m0[16u].y;
    _203[4u] = cbMtdParam._m0[16u].z;
    _201[5u] = cbMtdParam._m0[11u].x;
    _202[5u] = cbMtdParam._m0[11u].y;
    _203[5u] = cbMtdParam._m0[11u].z;
    vec4 _389 = texture(sampler2D(P_ACParts_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _391 = _389.x;
    float _392 = _389.y;
    float _420 = roundEven(((_391 + (-0.02500000037252902984619140625)) + ((_389.z * cbMtdParam._m0[19u].w) * (texture(sampler2D(P_ACParts_snp_0_Texture2D_15, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, ((cbMtdParam._m0[19u].z * TEXCOORD.y) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w)).x - _391))) * 6.0);
    float _421 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    uint _424 = uint(int(isnan(5.0) ? _421 : (isnan(_421) ? 5.0 : min(_421, 5.0))));
    vec4 _454 = texture(sampler2D(P_ACParts_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _464 = cbMtdParam._m0[9u].x * _454.x;
    float _465 = cbMtdParam._m0[9u].y * _454.y;
    float _466 = cbMtdParam._m0[9u].z * _454.z;
    float _473 = ((((((_201[_424] - cbMtdParam._m0[10u].x) * _392) + cbMtdParam._m0[10u].x) * _307.x) - _464) * _295) + _464;
    float _474 = ((((((_202[_424] - cbMtdParam._m0[10u].y) * _392) + cbMtdParam._m0[10u].y) * _307.y) - _465) * _295) + _465;
    float _475 = ((((((_203[_424] - cbMtdParam._m0[10u].z) * _392) + cbMtdParam._m0[10u].z) * _307.z) - _466) * _295) + _466;
    float _482 = exp2(log2(_279) * cbMtdParam._m0[21u].y);
    vec4 _494 = texture(sampler2D(P_ACParts_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _527 = texture(sampler2D(P_ACParts_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _538 = cbMtdParam._m0[18u].x * _527.x;
    float _539 = cbMtdParam._m0[18u].y * _527.y;
    float _540 = cbMtdParam._m0[18u].z * _527.z;
    vec4 _561 = texture(sampler2D(P_ACParts_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _569 = ((((((((cbMtdParam._m0[17u].x * _494.x) - _473) * _482) + _473) - _538) * _289) + _538) * 4.55000019073486328125) * _561.x;
    float _571 = ((((((((cbMtdParam._m0[17u].y * _494.y) - _474) * _482) + _474) - _539) * _289) + _539) * 4.55000019073486328125) * _561.y;
    float _573 = ((((((((cbMtdParam._m0[17u].z * _494.z) - _475) * _482) + _475) - _540) * _289) + _540) * 4.55000019073486328125) * _561.z;
    float _574 = _561.w * _307.w;
    vec4 _586 = texture(sampler2D(P_ACParts_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _588 = _586.x;
    float _606 = (((1.0 - _588) + texture(sampler2D(P_ACParts_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x) * _289) + _588;
    float _625 = (((texture(sampler2D(P_ACParts_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x - _606) + cbMtdParam._m0[20u].z) * _295) + _606;
    float _648 = (((texture(sampler2D(P_ACParts_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - _625) + cbMtdParam._m0[22u].y) * _482) + _625;
    vec4 _660 = texture(sampler2D(P_ACParts_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _678 = texture(sampler2D(P_ACParts_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _680 = _678.x;
    float _681 = _678.y;
    float _684 = cbMtdParam._m0[19u].x + _678.z;
    float _687 = (((cbMtdParam._m0[20u].x + _660.z) - _684) * _295) + _684;
    vec4 _699 = texture(sampler2D(P_ACParts_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    vec4 _723 = texture(sampler2D(P_ACParts_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _725 = _723.x;
    float _726 = _723.y;
    float _729 = cbMtdParam._m0[21u].x + _723.z;
    float _732 = ((((_278 * 2.0) * ((((_699.z - _687) + cbMtdParam._m0[22u].x) * _482) + _687)) - _729) * _289) + _729;
    float _743 = ((_660.x - _680) * _295) + _680;
    float _744 = ((_660.y - _681) * _295) + _681;
    float _759 = (((((((_699.x - _743) * _482) + _743) - _725) * _289) + _725) * 2.0) + (-1.0);
    float _760 = (((((((_699.y - _744) * _482) + _744) - _726) * _289) + _726) * 2.0) + (-1.0);
    float _761 = dot(vec2(_759, _760), vec2(_759, _760));
    float _4006 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _766 = sqrt(1.0 - (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))));
    float _769 = _759 + (cbMtdParam._m0[21u].w * ((_273.x * 2.0) + (-1.0)));
    float _770 = _760 + (cbMtdParam._m0[21u].w * ((_273.y * 2.0) + (-1.0)));
    float _773 = fma(_766, _253, fma(_770, _245 * TANGENT.x, (_231 * _223) * _769));
    float _776 = fma(_766, _254, fma(_770, _245 * TANGENT.y, (_231 * _224) * _769));
    float _779 = fma(_766, _255, fma(_770, _245 * TANGENT.z, (_231 * _225) * _769));
    float _783 = inversesqrt(dot(vec3(_773, _776, _779), vec3(_773, _776, _779)));
    float _784 = _783 * _773;
    float _785 = _783 * _776;
    float _786 = _783 * _779;
    float _4017 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _787 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _4028 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _788 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    float _4039 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _4050 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _4061 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _4072 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _792 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _808 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _848 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _858 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _848);
    float _859 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _848);
    float _860 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _848);
    float _864 = inversesqrt(dot(vec3(_858, _859, _860), vec3(_858, _859, _860)));
    float _865 = _858 * _864;
    float _866 = _859 * _864;
    float _867 = _860 * _864;
    float _873 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _874 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _876 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _878 = _876.w;
    float _896 = fma(_786, cbSceneParam._m0[5u].z, fma(_785, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _784));
    float _899 = fma(_786, cbSceneParam._m0[6u].z, fma(_785, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _784));
    float _902 = fma(_786, cbSceneParam._m0[7u].z, fma(_785, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _784));
    vec4 _904 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _915 = (((_904.y - _788) + (_904.w * _788)) * cbMtdParam._m0[3u].x) + _788;
    uint _928 = uint(roundEven(NORMAL.w)) * 13u;
    uint _930 = (_928 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _936 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) * cbInstanceData._m0[_930].x;
    float _937 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0)))) * cbInstanceData._m0[_930].y;
    float _938 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0)))) * cbInstanceData._m0[_930].z;
    float _4083 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _939 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _4094 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _940 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _4105 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _941 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    vec4 _942 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _947 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _958 = (((_947.x - _792) + (_947.w * _792)) * cbMtdParam._m0[3u].x) + _792;
    float _971 = (cbMtdParam._m0[3u].x * (((_939 * _878) - _939) + _942.x)) + _939;
    float _972 = (cbMtdParam._m0[3u].x * (((_940 * _878) - _940) + _942.y)) + _940;
    float _973 = (cbMtdParam._m0[3u].x * (((_941 * _878) - _941) + _942.z)) + _941;
    float _974 = 1.0 - _958;
    float _975 = _974 * _971;
    float _976 = _974 * _972;
    float _977 = _974 * _973;
    float _982 = (_971 + (-0.039999999105930328369140625)) * _958;
    float _983 = (_972 + (-0.039999999105930328369140625)) * _958;
    float _984 = (_973 + (-0.039999999105930328369140625)) * _958;
    float _985 = _982 + 0.039999999105930328369140625;
    float _987 = _983 + 0.039999999105930328369140625;
    float _988 = _984 + 0.039999999105930328369140625;
    vec4 _997 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _873, cbSceneParam._m0[86u].y * _874));
    float _1000 = _997.x * TEXCOORD_4;
    float _1001 = dot(vec3(_784, _785, _786), vec3(_865, _866, _867));
    float _1004 = _1001 * 2.0;
    float _1008 = (_1004 * _784) - _865;
    float _1009 = (_1004 * _785) - _866;
    float _1010 = (_1004 * _786) - _867;
    float _1014 = abs(dot(vec3(_865, _866, _867), vec3(_784, _785, _786)));
    float _4116 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _1016 = sqrt(_915);
    float _1028 = exp2((_1016 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1016 * 3.0));
    float _1034 = (1.0 - _1028) * ((_1016 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1035 = _1028 * _1016;
    float _1063 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1067 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1071 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1373;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1098 = fma(_1071, cbModelParam._m0[26u].z, fma(_1067, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1063));
        float _1102 = fma(_1071, cbModelParam._m0[27u].z, fma(_1067, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1063));
        float _1106 = fma(_1071, cbModelParam._m0[28u].z, fma(_1067, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1063));
        float _1131 = _1063 + _784;
        float _1132 = _1067 + _785;
        float _1133 = _1071 + _786;
        float _1143 = fma(_1133, cbModelParam._m0[26u].z, fma(_1132, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1131)) - _1098;
        float _1144 = fma(_1133, cbModelParam._m0[27u].z, fma(_1132, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1131)) - _1102;
        float _1145 = fma(_1133, cbModelParam._m0[28u].z, fma(_1132, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1131)) - _1106;
        float _1149 = inversesqrt(dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145)));
        float _1162 = ((_1149 * _1143) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1098 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1163 = ((_1149 * _1144) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1102 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1164 = ((_1149 * _1145) / cbModelParam._m0[34u].z) + ((((((_1106 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        float _1201 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1167.x + (-0.5));
        float _1203 = _1201 * (_1167.y + (-0.5));
        float _1204 = _1201 * (_1167.z + (-0.5));
        float _1211 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1174.x + (-0.5));
        float _1213 = _1211 * (_1174.y + (-0.5));
        float _1214 = _1211 * (_1174.z + (-0.5));
        float _1221 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1181.x + (-0.5));
        float _1223 = _1221 * (_1181.y + (-0.5));
        float _1224 = _1221 * (_1181.z + (-0.5));
        float _1231 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1188.x + (-0.5));
        float _1233 = _1231 * (_1188.y + (-0.5));
        float _1234 = _1231 * (_1188.z + (-0.5));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = _1202 * 0.5;
        float _1239 = _1212 * 0.5;
        float _1240 = _1222 * 0.5;
        float _1241 = dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240));
        float _1246 = (_1241 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1241);
        float _1255 = (dot(vec3(_784, _785, _786), vec3(_1246 * _1238, _1246 * _1239, _1246 * _1240)) + 1.0) * 0.5;
        float _4142 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1265 = sqrt(((_1239 * _1239) + (_1238 * _1238)) + (_1240 * _1240)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _4153 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _4164 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_1267 + 1.0))) + _1272) * _1235;
        float _1282 = _1203 * 0.5;
        float _1283 = _1213 * 0.5;
        float _1284 = _1223 * 0.5;
        float _1285 = dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284));
        float _1290 = (_1285 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1285);
        float _1298 = (dot(vec3(_784, _785, _786), vec3(_1290 * _1282, _1290 * _1283, _1290 * _1284)) + 1.0) * 0.5;
        float _4175 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1307 = sqrt(((_1283 * _1283) + (_1282 * _1282)) + (_1284 * _1284)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _4186 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1309 = _1308 * 2.0;
        float _1313 = (1.0 - _1308) / (_1308 + 1.0);
        float _4197 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1323 = ((((1.0 - _1314) * (_1309 + 2.0)) * exp2(log2(isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_1309 + 1.0))) + _1314) * _1236;
        float _1324 = _1204 * 0.5;
        float _1325 = _1214 * 0.5;
        float _1326 = _1224 * 0.5;
        float _1327 = dot(vec3(_1324, _1325, _1326), vec3(_1324, _1325, _1326));
        float _1332 = (_1327 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1327);
        float _1340 = (dot(vec3(_784, _785, _786), vec3(_1332 * _1324, _1332 * _1325, _1332 * _1326)) + 1.0) * 0.5;
        float _4208 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1349 = sqrt(((_1325 * _1325) + (_1324 * _1324)) + (_1326 * _1326)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _4219 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1351 = _1350 * 2.0;
        float _1355 = (1.0 - _1350) / (_1350 + 1.0);
        float _4230 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1365 = ((((1.0 - _1356) * (_1351 + 2.0)) * exp2(log2(isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_1351 + 1.0))) + _1356) * _1237;
        _1373 = _1204;
        _1375 = _1203;
        _1376 = _1202;
        _1377 = _1214;
        _1378 = _1213;
        _1379 = _1212;
        _1380 = _1224;
        _1381 = _1223;
        _1382 = _1222;
        _1383 = _1237;
        _1384 = _1236;
        _1385 = _1235;
        _1386 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
        _1387 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)));
        _1388 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)));
    }
    else
    {
        _1373 = _1374;
        _1375 = _1374;
        _1376 = _1374;
        _1377 = _1374;
        _1378 = _1374;
        _1379 = _1374;
        _1380 = _1374;
        _1381 = _1374;
        _1382 = _1374;
        _1383 = _1374;
        _1384 = _1374;
        _1385 = _1374;
        _1386 = 0.0;
        _1387 = 0.0;
        _1388 = 0.0;
    }
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1414 = fma(_1071, cbModelParam._m0[30u].z, fma(_1067, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1063));
        float _1418 = fma(_1071, cbModelParam._m0[31u].z, fma(_1067, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1063));
        float _1422 = fma(_1071, cbModelParam._m0[32u].z, fma(_1067, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1063));
        float _1445 = _1063 + _784;
        float _1446 = _1067 + _785;
        float _1447 = _1071 + _786;
        float _1457 = fma(_1447, cbModelParam._m0[30u].z, fma(_1446, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1445)) - _1414;
        float _1458 = fma(_1447, cbModelParam._m0[31u].z, fma(_1446, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1445)) - _1418;
        float _1459 = fma(_1447, cbModelParam._m0[32u].z, fma(_1446, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1445)) - _1422;
        float _1463 = inversesqrt(dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459)));
        float _1476 = ((_1463 * _1457) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1414 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1477 = ((_1463 * _1458) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1418 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1478 = ((_1463 * _1459) / cbModelParam._m0[35u].z) + ((((((_1422 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1480 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        vec4 _1487 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        vec4 _1494 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        vec4 _1501 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        float _1513 = exp2((_1480.w + (-0.5)) * 20.0) * 2.0;
        float _1514 = _1513 * (_1480.x + (-0.5));
        float _1515 = _1513 * (_1480.y + (-0.5));
        float _1516 = _1513 * (_1480.z + (-0.5));
        float _1523 = exp2((_1487.w + (-0.5)) * 20.0) * 2.0;
        float _1524 = _1523 * (_1487.x + (-0.5));
        float _1525 = _1523 * (_1487.y + (-0.5));
        float _1526 = _1523 * (_1487.z + (-0.5));
        float _1533 = exp2((_1494.w + (-0.5)) * 20.0) * 2.0;
        float _1534 = _1533 * (_1494.x + (-0.5));
        float _1535 = _1533 * (_1494.y + (-0.5));
        float _1536 = _1533 * (_1494.z + (-0.5));
        float _1543 = exp2((_1501.w + (-0.5)) * 20.0) * 2.0;
        float _1544 = _1543 * (_1501.x + (-0.5));
        float _1545 = _1543 * (_1501.y + (-0.5));
        float _1546 = _1543 * (_1501.z + (-0.5));
        float _1547 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1548 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1549 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1550 = _1514 * 0.5;
        float _1551 = _1524 * 0.5;
        float _1552 = _1534 * 0.5;
        float _1553 = dot(vec3(_1550, _1551, _1552), vec3(_1550, _1551, _1552));
        float _1558 = (_1553 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1553);
        float _1566 = (dot(vec3(_784, _785, _786), vec3(_1558 * _1550, _1558 * _1551, _1558 * _1552)) + 1.0) * 0.5;
        float _4271 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1575 = sqrt(((_1551 * _1551) + (_1550 * _1550)) + (_1552 * _1552)) / (_1547 + 9.9999997473787516355514526367188e-06);
        float _4282 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1577 = _1576 * 2.0;
        float _1581 = (1.0 - _1576) / (_1576 + 1.0);
        float _4293 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1591 = ((((1.0 - _1582) * (_1577 + 2.0)) * exp2(log2(isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_1577 + 1.0))) + _1582) * _1547;
        float _1592 = _1515 * 0.5;
        float _1593 = _1525 * 0.5;
        float _1594 = _1535 * 0.5;
        float _1595 = dot(vec3(_1592, _1593, _1594), vec3(_1592, _1593, _1594));
        float _1600 = (_1595 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1595);
        float _1608 = (dot(vec3(_784, _785, _786), vec3(_1600 * _1592, _1600 * _1593, _1600 * _1594)) + 1.0) * 0.5;
        float _4304 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1617 = sqrt(((_1593 * _1593) + (_1592 * _1592)) + (_1594 * _1594)) / (_1548 + 9.9999997473787516355514526367188e-06);
        float _4315 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1619 = _1618 * 2.0;
        float _1623 = (1.0 - _1618) / (_1618 + 1.0);
        float _4326 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1633 = ((((1.0 - _1624) * (_1619 + 2.0)) * exp2(log2(isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_1619 + 1.0))) + _1624) * _1548;
        float _1634 = _1516 * 0.5;
        float _1635 = _1526 * 0.5;
        float _1636 = _1536 * 0.5;
        float _1637 = dot(vec3(_1634, _1635, _1636), vec3(_1634, _1635, _1636));
        float _1642 = (_1637 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1637);
        float _1650 = (dot(vec3(_784, _785, _786), vec3(_1642 * _1634, _1642 * _1635, _1642 * _1636)) + 1.0) * 0.5;
        float _4337 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1659 = sqrt(((_1635 * _1635) + (_1634 * _1634)) + (_1636 * _1636)) / (_1549 + 9.9999997473787516355514526367188e-06);
        float _4348 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1660 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _1661 = _1660 * 2.0;
        float _1665 = (1.0 - _1660) / (_1660 + 1.0);
        float _4359 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1675 = ((((1.0 - _1666) * (_1661 + 2.0)) * exp2(log2(isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_1661 + 1.0))) + _1666) * _1549;
        _1683 = _1516;
        _1684 = _1515;
        _1685 = _1514;
        _1686 = _1526;
        _1687 = _1525;
        _1688 = _1524;
        _1689 = _1536;
        _1690 = _1535;
        _1691 = _1534;
        _1692 = _1549;
        _1693 = _1548;
        _1694 = _1547;
        _1695 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)));
        _1696 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)));
        _1697 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)));
    }
    else
    {
        _1683 = _1374;
        _1684 = _1374;
        _1685 = _1374;
        _1686 = _1374;
        _1687 = _1374;
        _1688 = _1374;
        _1689 = _1374;
        _1690 = _1374;
        _1691 = _1374;
        _1692 = _1374;
        _1693 = _1374;
        _1694 = _1374;
        _1695 = 0.0;
        _1696 = 0.0;
        _1697 = 0.0;
    }
    float _1707 = (cbModelParam._m0[1u].x * (_1695 - _1386)) + _1386;
    float _1708 = (cbModelParam._m0[1u].x * (_1696 - _1387)) + _1387;
    float _1709 = (cbModelParam._m0[1u].x * (_1697 - _1388)) + _1388;
    float _1730 = fma(_1709, cbSceneParam._m0[89u].z, fma(_1708, cbSceneParam._m0[89u].y, _1707 * cbSceneParam._m0[89u].x));
    float _1733 = fma(_1709, cbSceneParam._m0[90u].z, fma(_1708, cbSceneParam._m0[90u].y, _1707 * cbSceneParam._m0[90u].x));
    float _1736 = fma(_1709, cbSceneParam._m0[91u].z, fma(_1708, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1707));
    float _1751 = _1008 * 0.5;
    float _1752 = _1009 * 0.5;
    float _1753 = _1010 * 0.5;
    float _1754 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1685, _1688, _1691, _1694));
    float _1757 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1684, _1687, _1690, _1693));
    float _1760 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1683, _1686, _1689, _1692));
    float _1794;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1767 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1373, _1377, _1380, _1383));
        float _1771 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1375, _1378, _1381, _1384));
        float _1775 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1376, _1379, _1382, _1385));
        float _1782 = dot(vec4(cbModelParam._m0[39u]), vec4(_1751, _1752, _1753, 1.0));
        _1794 = dot(vec3(isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0)), isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)), isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1782) ? 0.0 : (isnan(0.0) ? _1782 : max(0.0, _1782))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1794 = 1.0;
    }
    float _1805;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1796 = dot(vec4(cbModelParam._m0[40u]), vec4(_1751, _1752, _1753, 1.0));
        _1805 = dot(vec3(isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)), isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)), isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1796) ? 0.0 : (isnan(0.0) ? _1796 : max(0.0, _1796))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1805 = 1.0;
    }
    float _1809 = (_1805 * cbModelParam._m0[1u].x) + (_1794 * (1.0 - cbModelParam._m0[1u].x));
    float _1819 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _915);
    float _1820 = isnan(_1819) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1819 : min(cbModelParam._m0[25u].z, _1819));
    float _1900;
    float _1902;
    float _1904;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1867 = fma(_1071, cbModelParam._m0[13u].z, fma(_1067, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1063)) + cbModelParam._m0[13u].w;
        float _1871 = fma(_1071, cbModelParam._m0[14u].z, fma(_1067, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1063)) + cbModelParam._m0[14u].w;
        float _1875 = fma(_1071, cbModelParam._m0[15u].z, fma(_1067, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1063)) + cbModelParam._m0[15u].w;
        float _1878 = fma(_1010, cbModelParam._m0[13u].z, fma(_1009, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1008));
        float _1881 = fma(_1010, cbModelParam._m0[14u].z, fma(_1009, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1008));
        float _1884 = fma(_1010, cbModelParam._m0[15u].z, fma(_1009, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1008));
        float _1912;
        if (_1878 > 0.0)
        {
            _1912 = abs((1.0 - _1867) / _1878);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1867 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1912 = frontier_phi_16_14_ladder;
        }
        float _2083;
        if (_1881 > 0.0)
        {
            _2083 = abs((1.0 - _1871) / _1881);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1881 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1871 + 1.0) / _1881);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2083 = frontier_phi_25_21_ladder;
        }
        float _2378;
        if (_1884 > 0.0)
        {
            _2378 = abs((1.0 - _1875) / _1884);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1875 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2378 = frontier_phi_37_32_ladder;
        }
        float _2380 = isnan(_2083) ? _1912 : (isnan(_1912) ? _2083 : min(_1912, _2083));
        float _2381 = isnan(_2378) ? _2380 : (isnan(_2380) ? _2378 : min(_2380, _2378));
        float _2385 = (_2381 * _1878) + _1867;
        float _2386 = (_2381 * _1881) + _1871;
        float _2387 = (_2381 * _1884) + _1875;
        float _2388 = _2381 * 9.9999997473787516355514526367188e-05;
        float _2390 = (-1.0) - _2388;
        float _2392 = _2388 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2387 > _2392) || ((_2387 < _2390) || ((_2386 > _2392) || ((_2386 < _2390) || ((_2385 < _2390) || (_2385 > _2392))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2532 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2387, cbModelParam._m0[9u].z, fma(_2386, cbModelParam._m0[9u].y, _2385 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2387, cbModelParam._m0[10u].z, fma(_2386, cbModelParam._m0[10u].y, _2385 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2387, cbModelParam._m0[11u].z, fma(_2386, cbModelParam._m0[11u].y, _2385 * cbModelParam._m0[11u].x))), _1820);
            frontier_phi_15_37_ladder = _2532.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2532.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2532.z * cbModelParam._m0[1u].y;
        }
        _1900 = frontier_phi_15_37_ladder_1;
        _1902 = frontier_phi_15_37_ladder;
        _1904 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1888 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1008, _1009, _1010), _1820);
        _1900 = _1888.x * cbModelParam._m0[1u].y;
        _1902 = _1888.y * cbModelParam._m0[1u].y;
        _1904 = _1888.z * cbModelParam._m0[1u].y;
    }
    float _1908 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _915);
    float _1909 = isnan(_1908) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1908 : min(cbModelParam._m0[25u].w, _1908));
    float _1998;
    float _2000;
    float _2002;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1962 = fma(_1071, cbModelParam._m0[21u].z, fma(_1067, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1063)) + cbModelParam._m0[21u].w;
        float _1966 = fma(_1071, cbModelParam._m0[22u].z, fma(_1067, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1063)) + cbModelParam._m0[22u].w;
        float _1970 = fma(_1071, cbModelParam._m0[23u].z, fma(_1067, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1063)) + cbModelParam._m0[23u].w;
        float _1973 = fma(_1010, cbModelParam._m0[21u].z, fma(_1009, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1008));
        float _1976 = fma(_1010, cbModelParam._m0[22u].z, fma(_1009, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1008));
        float _1979 = fma(_1010, cbModelParam._m0[23u].z, fma(_1009, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1008));
        float _2088;
        if (_1973 > 0.0)
        {
            _2088 = abs((1.0 - _1962) / _1973);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1973 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1962 + 1.0) / _1973);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2088 = frontier_phi_27_23_ladder;
        }
        float _2405;
        if (_1976 > 0.0)
        {
            _2405 = abs((1.0 - _1966) / _1976);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1976 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1966 + 1.0) / _1976);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2405 = frontier_phi_39_34_ladder;
        }
        float _2743;
        if (_1979 > 0.0)
        {
            _2743 = abs((1.0 - _1970) / _1979);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1979 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1970 + 1.0) / _1979);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2743 = frontier_phi_49_46_ladder;
        }
        float _2745 = isnan(_2405) ? _2088 : (isnan(_2088) ? _2405 : min(_2088, _2405));
        float _2746 = isnan(_2743) ? _2745 : (isnan(_2745) ? _2743 : min(_2745, _2743));
        float _2750 = (_2746 * _1973) + _1962;
        float _2751 = (_2746 * _1976) + _1966;
        float _2752 = (_2746 * _1979) + _1970;
        float _2753 = _2746 * 9.9999997473787516355514526367188e-05;
        float _2754 = (-1.0) - _2753;
        float _2756 = _2753 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2752 > _2756) || ((_2752 < _2754) || ((_2751 > _2756) || ((_2751 < _2754) || ((_2750 < _2754) || (_2750 > _2756))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2874 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2752, cbModelParam._m0[17u].z, fma(_2751, cbModelParam._m0[17u].y, _2750 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2752, cbModelParam._m0[18u].z, fma(_2751, cbModelParam._m0[18u].y, _2750 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2752, cbModelParam._m0[19u].z, fma(_2751, cbModelParam._m0[19u].y, _2750 * cbModelParam._m0[19u].x))), _1909);
            frontier_phi_24_49_ladder = _2874.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2874.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2874.x * cbModelParam._m0[1u].z;
        }
        _1998 = frontier_phi_24_49_ladder_2;
        _2000 = frontier_phi_24_49_ladder_1;
        _2002 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1982 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1008, _1009, _1010), _1909);
        _1998 = _1982.x * cbModelParam._m0[1u].z;
        _2000 = _1982.y * cbModelParam._m0[1u].z;
        _2002 = _1982.z * cbModelParam._m0[1u].z;
    }
    float _2015 = (((_1034 * _985) + _1035) * _1000) * ((cbModelParam._m0[1u].w * (_1998 - _1900)) + _1900);
    float _2017 = (((_1034 * _987) + _1035) * _1000) * ((cbModelParam._m0[1u].w * (_2000 - _1902)) + _1902);
    float _2019 = (((_1034 * _988) + _1035) * _1000) * ((cbModelParam._m0[1u].w * (_2002 - _1904)) + _1904);
    float _2022 = fma(_2019, cbSceneParam._m0[89u].z, fma(_2017, cbSceneParam._m0[89u].y, _2015 * cbSceneParam._m0[89u].x));
    float _2025 = fma(_2019, cbSceneParam._m0[90u].z, fma(_2017, cbSceneParam._m0[90u].y, _2015 * cbSceneParam._m0[90u].x));
    float _2028 = fma(_2019, cbSceneParam._m0[91u].z, fma(_2017, cbSceneParam._m0[91u].y, _2015 * cbSceneParam._m0[91u].x));
    float _2062 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2066 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2070 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2074 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2075 = _2062 / _2074;
    float _2076 = _2066 / _2074;
    float _2077 = _2070 / _2074;
    float _2224;
    float _2225;
    float _2226;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2104 = ((uint(_2077 > cbSceneParam._m0[59u].y) + uint(_2077 > cbSceneParam._m0[59u].x)) + uint(_2077 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2105 = _2104 + 43u;
        uint _2113 = _2104 + 44u;
        uint _2121 = _2104 + 45u;
        uint _2129 = _2104 + 46u;
        float _2140 = fma(_2074, cbSceneParam._m0[_2105].w, fma(_2070, cbSceneParam._m0[_2105].z, fma(_2066, cbSceneParam._m0[_2105].y, _2062 * cbSceneParam._m0[_2105].x)));
        float _2144 = fma(_2074, cbSceneParam._m0[_2113].w, fma(_2070, cbSceneParam._m0[_2113].z, fma(_2066, cbSceneParam._m0[_2113].y, _2062 * cbSceneParam._m0[_2113].x)));
        float _2152 = fma(_2074, cbSceneParam._m0[_2129].w, fma(_2070, cbSceneParam._m0[_2129].z, fma(_2066, cbSceneParam._m0[_2129].y, _2062 * cbSceneParam._m0[_2129].x)));
        float _2157 = cbSceneParam._m0[33u].z * _2152;
        float _2159 = cbSceneParam._m0[33u].w * _2152;
        float _2162 = fma(_2074, cbSceneParam._m0[_2121].w, fma(_2070, cbSceneParam._m0[_2121].z, fma(_2066, cbSceneParam._m0[_2121].y, _2062 * cbSceneParam._m0[_2121].x))) / _2152;
        float _2210 = (cbSceneParam._m0[33u].x - sqrt(((_2076 * _2076) + (_2075 * _2075)) + (_2077 * _2077))) * cbSceneParam._m0[33u].y;
        float _4485 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
        float _2217 = (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2157 + _2140) / _2152, (_2159 + _2144) / _2152), _2162), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2159 + _2140) / _2152, (_2144 - _2157) / _2152), _2162), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2140 - _2157) / _2152, (_2144 - _2159) / _2152), _2162), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2140 - _2159) / _2152, (_2157 + _2144) / _2152), _2162), 0.0)).x), vec4(0.25)));
        _2224 = 1.0 - (_2217 * cbSceneParam._m0[34u].x);
        _2225 = 1.0 - (_2217 * cbSceneParam._m0[34u].y);
        _2226 = 1.0 - (_2217 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2224 = 1.0;
        _2225 = 1.0;
        _2226 = 1.0;
    }
    float _2290;
    float _2292;
    float _2294;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2278 = fma(_2074, cbSceneParam._m0[63u].w, fma(_2070, cbSceneParam._m0[63u].z, fma(_2066, cbSceneParam._m0[63u].y, _2062 * cbSceneParam._m0[63u].x)));
        float _2279 = fma(_2074, cbSceneParam._m0[60u].w, fma(_2070, cbSceneParam._m0[60u].z, fma(_2066, cbSceneParam._m0[60u].y, _2062 * cbSceneParam._m0[60u].x))) / _2278;
        float _2280 = fma(_2074, cbSceneParam._m0[61u].w, fma(_2070, cbSceneParam._m0[61u].z, fma(_2066, cbSceneParam._m0[61u].y, _2062 * cbSceneParam._m0[61u].x))) / _2278;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2279 >= cbSceneParam._m0[64u].x) && (_2280 >= cbSceneParam._m0[64u].y)) && (_2279 <= cbSceneParam._m0[64u].z)) && (_2280 <= cbSceneParam._m0[64u].w))
        {
            float _2418 = fma(_2074, cbSceneParam._m0[62u].w, fma(_2070, cbSceneParam._m0[62u].z, fma(_2066, cbSceneParam._m0[62u].y, _2062 * cbSceneParam._m0[62u].x))) / _2278;
            float _2422 = isnan(cbSceneParam._m0[41u].w) ? _2418 : (isnan(_2418) ? cbSceneParam._m0[41u].w : max(_2418, cbSceneParam._m0[41u].w));
            float _2465 = (cbSceneParam._m0[33u].x - sqrt(((_2076 * _2076) + (_2075 * _2075)) + (_2077 * _2077))) * cbSceneParam._m0[33u].y;
            float _4501 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
            float _2472 = (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2279, cbSceneParam._m0[33u].w + _2280), _2422), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2279, _2280 - cbSceneParam._m0[33u].z), _2422), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2279 - cbSceneParam._m0[33u].z, _2280 - cbSceneParam._m0[33u].w), _2422), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2279 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2280), _2422), 0.0)).x), vec4(0.25)));
            float _2476 = 1.0 - (_2472 * cbSceneParam._m0[34u].x);
            float _2477 = 1.0 - (_2472 * cbSceneParam._m0[34u].y);
            float _2478 = 1.0 - (_2472 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2477) ? _2225 : (isnan(_2225) ? _2477 : min(_2225, _2477));
            frontier_phi_36_35_ladder_1 = isnan(_2478) ? _2226 : (isnan(_2226) ? _2478 : min(_2226, _2478));
            frontier_phi_36_35_ladder_2 = isnan(_2476) ? _2224 : (isnan(_2224) ? _2476 : min(_2224, _2476));
        }
        else
        {
            frontier_phi_36_35_ladder = _2225;
            frontier_phi_36_35_ladder_1 = _2226;
            frontier_phi_36_35_ladder_2 = _2224;
        }
        _2290 = frontier_phi_36_35_ladder_2;
        _2292 = frontier_phi_36_35_ladder;
        _2294 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2290 = _2224;
        _2292 = _2225;
        _2294 = _2226;
    }
    uvec4 _2299 = floatBitsToUint(cbInstanceData._m0[_928 + 5u]);
    uint _2301 = _2299.x * 14u;
    uint _2302 = _2301 + 13u;
    float _2309 = _1000 + (-1.0);
    float _2314 = (cbLight._m0[_2302].x * _2309) + 1.0;
    float _2315 = (cbLight._m0[_2302].y * _2309) + 1.0;
    float _2316 = (cbLight._m0[_2302].z * _2309) + 1.0;
    float _2317 = (cbLight._m0[_2302].w * _2309) + 1.0;
    uint _2318 = _2301 + 5u;
    float _2324 = isnan(1.0) ? _2315 : (isnan(_2315) ? 1.0 : min(_2315, 1.0));
    uint _2328 = _2301 + 4u;
    float _2337 = isnan(1.0) ? _2314 : (isnan(_2314) ? 1.0 : min(_2314, 1.0));
    uint _2341 = _2301 | 1u;
    float _2352 = dot(vec3(cbLight._m0[_2301].xyz), vec3(_784, _785, _786));
    float _2355 = dot(vec3(cbLight._m0[_2341].xyz), vec3(_784, _785, _786));
    float _4537 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _4548 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2360 = (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * 0.3183098733425140380859375;
    float _2362 = (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0))) * 0.3183098733425140380859375;
    float _2369 = ((cbLight._m0[_2318].x * _2324) * _2362) + (((cbLight._m0[_2328].x * _2290) * _2337) * _2360);
    float _2370 = ((_2324 * cbLight._m0[_2318].y) * _2362) + (((cbLight._m0[_2328].y * _2292) * _2337) * _2360);
    float _2371 = ((_2324 * cbLight._m0[_2318].z) * _2362) + (((cbLight._m0[_2328].z * _2294) * _2337) * _2360);
    uvec4 _2375 = floatBitsToUint(cbLight._m0[_2301 + 12u]);
    bool _2377 = _2375.x == 0u;
    float _2479;
    float _2481;
    float _2483;
    if (_2377)
    {
        _2479 = _2369;
        _2481 = _2370;
        _2483 = _2371;
    }
    else
    {
        uint _2487 = _2301 + 6u;
        float _2503 = (dot(vec3(cbLight._m0[_2301 + 2u].xyz), vec3(_784, _785, _786)) * 0.5) + 0.5;
        float _2504 = _2503 * _2503;
        float _4559 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2505 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
        float _2506 = isnan(1.0) ? _2316 : (isnan(_2316) ? 1.0 : min(_2316, 1.0));
        _2479 = (((cbLight._m0[_2487].x * 0.3183098733425140380859375) * _2505) * _2506) + _2369;
        _2481 = (((cbLight._m0[_2487].y * 0.3183098733425140380859375) * _2505) * _2506) + _2370;
        _2483 = (((cbLight._m0[_2487].z * 0.3183098733425140380859375) * _2505) * _2506) + _2371;
    }
    bool _2486 = _2375.y == 0u;
    float _2541;
    float _2543;
    float _2545;
    if (_2486)
    {
        _2541 = _2479;
        _2543 = _2481;
        _2545 = _2483;
    }
    else
    {
        uint _2714 = _2301 + 7u;
        float _2730 = (dot(vec3(cbLight._m0[_2301 + 3u].xyz), vec3(_784, _785, _786)) * 0.5) + 0.5;
        float _2731 = _2730 * _2730;
        float _4575 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
        float _2732 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
        float _2733 = isnan(1.0) ? _2317 : (isnan(_2317) ? 1.0 : min(_2317, 1.0));
        _2541 = (((cbLight._m0[_2714].x * 0.3183098733425140380859375) * _2732) * _2733) + _2479;
        _2543 = (((cbLight._m0[_2714].y * 0.3183098733425140380859375) * _2732) * _2733) + _2481;
        _2545 = (((cbLight._m0[_2714].z * 0.3183098733425140380859375) * _2732) * _2733) + _2483;
    }
    uint _2548 = _2301 + 8u;
    float _2561 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2301].w)) * _915) * 0.949999988079071044921875);
    float _2562 = _2561 * _2561;
    float _2563 = cbLight._m0[_2301].x + _865;
    float _2564 = cbLight._m0[_2301].y + _866;
    float _2565 = cbLight._m0[_2301].z + _867;
    float _2569 = inversesqrt(dot(vec3(_2563, _2564, _2565), vec3(_2563, _2564, _2565)));
    float _2570 = _2569 * _2563;
    float _2571 = _2569 * _2564;
    float _2572 = _2569 * _2565;
    float _2573 = dot(vec3(_784, _785, _786), vec3(cbLight._m0[_2301].xyz));
    float _4591 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
    float _2576 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
    float _4602 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _2577 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
    float _2578 = dot(vec3(_784, _785, _786), vec3(_2570, _2571, _2572));
    float _4613 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
    float _2581 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
    float _2582 = dot(vec3(cbLight._m0[_2301].xyz), vec3(_2570, _2571, _2572));
    float _4624 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
    float _2586 = _2562 * _2562;
    float _2590 = ((_2581 * _2581) * (_2586 + (-1.0))) + 1.0;
    float _2598 = exp2(log2(1.0 - (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0)))) * 5.0);
    float _2599 = 0.959999978542327880859375 - _982;
    float _2601 = 0.959999978542327880859375 - _983;
    float _2602 = 0.959999978542327880859375 - _984;
    float _2609 = 1.0 - _2562;
    float _2620 = (0.5 / (((_2577 * ((_2576 * _2609) + _2562)) + 9.9999999392252902907785028219223e-09) + (((_2577 * _2609) + _2562) * _2576))) * _2576;
    float _4635 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
    float _2622 = (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * (_2586 / ((_2590 * _2590) * 3.141590118408203125));
    uint _2636 = _2301 + 9u;
    float _2647 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2341].w)) * _915) * 0.949999988079071044921875);
    float _2648 = _2647 * _2647;
    float _2649 = cbLight._m0[_2341].x + _865;
    float _2650 = cbLight._m0[_2341].y + _866;
    float _2651 = cbLight._m0[_2341].z + _867;
    float _2655 = inversesqrt(dot(vec3(_2649, _2650, _2651), vec3(_2649, _2650, _2651)));
    float _2656 = _2655 * _2649;
    float _2657 = _2655 * _2650;
    float _2658 = _2655 * _2651;
    float _2659 = dot(vec3(_784, _785, _786), vec3(cbLight._m0[_2341].xyz));
    float _4646 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
    float _2662 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
    float _2663 = dot(vec3(_784, _785, _786), vec3(_2656, _2657, _2658));
    float _4657 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
    float _2666 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
    float _2667 = dot(vec3(cbLight._m0[_2341].xyz), vec3(_2656, _2657, _2658));
    float _4668 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
    float _2671 = _2648 * _2648;
    float _2675 = ((_2666 * _2666) * (_2671 + (-1.0))) + 1.0;
    float _2682 = exp2(log2(1.0 - (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0)))) * 5.0);
    float _2689 = 1.0 - _2648;
    float _2699 = (0.5 / (((_2577 * ((_2662 * _2689) + _2648)) + 9.9999999392252902907785028219223e-09) + (((_2577 * _2689) + _2648) * _2662))) * _2662;
    float _4679 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
    float _2701 = (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0))) * (_2671 / ((_2675 * _2675) * 3.141590118408203125));
    float _2711 = (((((_2682 * _2599) + _985) * cbLight._m0[_2636].x) * _2701) * _2324) + ((((cbLight._m0[_2548].x * _2290) * ((_2598 * _2599) + _985)) * _2622) * _2337);
    float _2712 = (((((_2682 * _2601) + _987) * cbLight._m0[_2636].y) * _2701) * _2324) + ((((cbLight._m0[_2548].y * _2292) * ((_2598 * _2601) + _987)) * _2622) * _2337);
    float _2713 = (((((_2682 * _2602) + _988) * cbLight._m0[_2636].z) * _2701) * _2324) + ((((cbLight._m0[_2548].z * _2294) * ((_2598 * _2602) + _988)) * _2622) * _2337);
    float _2769;
    float _2771;
    float _2773;
    if (_2377)
    {
        _2769 = _2711;
        _2771 = _2712;
        _2773 = _2713;
    }
    else
    {
        uint _2775 = _2301 + 2u;
        uint _2779 = _2301 + 10u;
        float _2793 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2775].w)) * _915) * 0.949999988079071044921875);
        float _2794 = _2793 * _2793;
        float _2795 = cbLight._m0[_2775].x + _865;
        float _2796 = cbLight._m0[_2775].y + _866;
        float _2797 = cbLight._m0[_2775].z + _867;
        float _2801 = inversesqrt(dot(vec3(_2795, _2796, _2797), vec3(_2795, _2796, _2797)));
        float _2802 = _2801 * _2795;
        float _2803 = _2801 * _2796;
        float _2804 = _2801 * _2797;
        float _2805 = dot(vec3(_784, _785, _786), vec3(cbLight._m0[_2775].xyz));
        float _4690 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
        float _2808 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
        float _2809 = dot(vec3(_784, _785, _786), vec3(_2802, _2803, _2804));
        float _4701 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
        float _2812 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
        float _2813 = dot(vec3(cbLight._m0[_2775].xyz), vec3(_2802, _2803, _2804));
        float _4712 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
        float _2817 = _2794 * _2794;
        float _2821 = ((_2812 * _2812) * (_2817 + (-1.0))) + 1.0;
        float _2828 = exp2(log2(1.0 - (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0)))) * 5.0);
        float _2835 = 1.0 - _2794;
        float _2845 = (0.5 / (((_2577 * ((_2808 * _2835) + _2794)) + 9.9999999392252902907785028219223e-09) + (((_2577 * _2835) + _2794) * _2808))) * _2808;
        float _4723 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
        float _2847 = (isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0))) * (_2817 / ((_2821 * _2821) * 3.141590118408203125));
        float _2848 = isnan(1.0) ? _2316 : (isnan(_2316) ? 1.0 : min(_2316, 1.0));
        _2769 = (((((_2828 * _2599) + _985) * cbLight._m0[_2779].x) * _2847) * _2848) + _2711;
        _2771 = (((((_2828 * _2601) + _987) * cbLight._m0[_2779].y) * _2847) * _2848) + _2712;
        _2773 = (((((_2828 * _2602) + _988) * cbLight._m0[_2779].z) * _2847) * _2848) + _2713;
    }
    float _2879;
    float _2881;
    float _2883;
    if (_2486)
    {
        _2879 = _2769;
        _2881 = _2771;
        _2883 = _2773;
    }
    else
    {
        uint _2890 = _2301 + 3u;
        uint _2894 = _2301 + 11u;
        float _2908 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2890].w)) * _915) * 0.949999988079071044921875);
        float _2909 = _2908 * _2908;
        float _2910 = cbLight._m0[_2890].x + _865;
        float _2911 = cbLight._m0[_2890].y + _866;
        float _2912 = cbLight._m0[_2890].z + _867;
        float _2916 = inversesqrt(dot(vec3(_2910, _2911, _2912), vec3(_2910, _2911, _2912)));
        float _2917 = _2916 * _2910;
        float _2918 = _2916 * _2911;
        float _2919 = _2916 * _2912;
        float _2920 = dot(vec3(_784, _785, _786), vec3(cbLight._m0[_2890].xyz));
        float _4739 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
        float _2923 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
        float _2924 = dot(vec3(_784, _785, _786), vec3(_2917, _2918, _2919));
        float _4750 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
        float _2927 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
        float _2928 = dot(vec3(cbLight._m0[_2890].xyz), vec3(_2917, _2918, _2919));
        float _4761 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
        float _2932 = _2909 * _2909;
        float _2936 = ((_2927 * _2927) * (_2932 + (-1.0))) + 1.0;
        float _2943 = exp2(log2(1.0 - (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0)))) * 5.0);
        float _2950 = 1.0 - _2909;
        float _2960 = (0.5 / (((_2577 * ((_2923 * _2950) + _2909)) + 9.9999999392252902907785028219223e-09) + (((_2577 * _2950) + _2909) * _2923))) * _2923;
        float _4772 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
        float _2962 = (isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0))) * (_2932 / ((_2936 * _2936) * 3.141590118408203125));
        float _2963 = isnan(1.0) ? _2317 : (isnan(_2317) ? 1.0 : min(_2317, 1.0));
        _2879 = (((((_2943 * _2599) + _985) * cbLight._m0[_2894].x) * _2962) * _2963) + _2769;
        _2881 = (((((_2943 * _2601) + _987) * cbLight._m0[_2894].y) * _2962) * _2963) + _2771;
        _2883 = (((((_2943 * _2602) + _988) * cbLight._m0[_2894].z) * _2962) * _2963) + _2773;
    }
    float _3028;
    float _3030;
    float _3032;
    float _3034;
    float _3036;
    float _3038;
    if (_2299.y == 0u)
    {
        uvec4 _2984 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2985 = _2984.x;
        uint _2996 = uint((float(_2984.y) * floor(float(uint(cbSceneParam._m0[85u].y * _874) / _2985))) + floor(float(uint(cbSceneParam._m0[85u].x * _873) / _2985)));
        float _3006 = (log2(_2077 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3007 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
        uint _3010 = uint(isnan(14.0) ? _3007 : (isnan(_3007) ? 14.0 : min(_3007, 14.0)));
        uvec4 _3015 = texelFetch(g_lightClusterGridBuffer, int(((_3010 << 2u) + (_2996 << 6u)) >> 2u));
        uint _3016 = _3015.x;
        uint _3017 = _2984.z;
        float _3097;
        float _3099;
        float _3101;
        float _3103;
        float _3105;
        float _3107;
        if (((((1u << ((_3017 >> 4u) & 15u)) + 4294967295u) & _3016) == 0u) || ((_3017 & 240u) == 0u))
        {
            _3097 = 0.0;
            _3099 = 0.0;
            _3101 = 0.0;
            _3103 = 0.0;
            _3105 = 0.0;
            _3107 = 0.0;
        }
        else
        {
            float _3098;
            float _3100;
            float _3102;
            float _3104;
            float _3106;
            float _3108;
            float _3241 = 0.0;
            float _3242 = 0.0;
            float _3243 = 0.0;
            float _3244 = 0.0;
            float _3245 = 0.0;
            float _3246 = 0.0;
            uint _3247 = 0u;
            uint _3256;
            bool _3257;
            for (;;)
            {
                _3256 = texelFetch(g_lightClassification, int((((_3010 << 5u) + (_2996 << 9u)) + (_3247 << 2u)) >> 2u)).x;
                _3257 = _3256 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3257)
                {
                    frontier_phi_68_pred = _3246;
                    frontier_phi_68_pred_1 = _3245;
                    frontier_phi_68_pred_2 = _3244;
                    frontier_phi_68_pred_3 = _3242;
                    frontier_phi_68_pred_4 = _3241;
                    frontier_phi_68_pred_5 = _3243;
                }
                else
                {
                    float _3365;
                    float _3366;
                    float _3367;
                    float _3368;
                    float _3369;
                    float _3370;
                    uint _3371;
                    _3365 = _3241;
                    _3366 = _3242;
                    _3367 = _3243;
                    _3368 = _3244;
                    _3369 = _3245;
                    _3370 = _3246;
                    _3371 = _3256;
                    float _3297;
                    float _3298;
                    float _3299;
                    float _3300;
                    float _3301;
                    float _3302;
                    for (;;)
                    {
                        uint _3375 = uint(findLSB(_3371)) + (_3247 << 5u);
                        uint _3372 = (_3371 + 4294967295u) & _3371;
                        uint _3377 = _3375 * 48u;
                        vec4 _3391 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3377)).x, texelFetch(g_PointLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3377 + 3u)).x));
                        uint _3397 = (_3375 * 48u) + 4u;
                        vec4 _3410 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3397)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 3u)).x));
                        uint _3416 = (_3375 * 48u) + 8u;
                        vec3 _3427 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3416)).x, texelFetch(g_PointLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3416 + 2u)).x));
                        float _3431 = _3391.x - _2075;
                        float _3432 = _3391.y - _2076;
                        float _3433 = _3391.z - _2077;
                        float _3434 = dot(vec3(_3431, _3432, _3433), vec3(_3431, _3432, _3433));
                        float _3437 = inversesqrt(_3434);
                        float _3438 = _3437 * _3431;
                        float _3439 = _3437 * _3432;
                        float _3440 = _3437 * _3433;
                        float _3441 = dot(vec3(_896, _899, _902), vec3(_3438, _3439, _3440));
                        float _3446 = 1.0 - (_3434 * _3391.w);
                        float _4798 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                        float _3447 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                        float _3448 = sqrt(_3434) * _3410.w;
                        float _3451 = 1.39999997615814208984375 / (_3448 + 1.39999997615814208984375);
                        float _3452 = _3451 * _3451;
                        float _3455 = ((1.0 - _3452) * _3441) + _3452;
                        float _3458 = _3448 * _3448;
                        float _3462 = ((isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0))) * _3447) / ((_3458 * 0.699999988079071044921875) + 1.0);
                        float _3466 = (-0.0) - _2075;
                        float _3467 = (-0.0) - _2076;
                        float _3468 = (-0.0) - _2077;
                        float _3472 = inversesqrt(dot(vec3(_3466, _3467, _3468), vec3(_3466, _3467, _3468)));
                        float _3473 = _3472 * _3466;
                        float _3474 = _3472 * _3467;
                        float _3475 = _3472 * _3468;
                        float _3482 = exp2(log2(1.0 / ((_3458 * 3.5) + 5.0)) * 0.25);
                        float _3483 = 1.0 - _1016;
                        float _3490 = sqrt(1.0 - ((1.0 - (_3483 * _3483)) * (1.0 - (_3482 * _3482))));
                        float _3491 = _3490 * _3490;
                        float _3492 = _3491 * _3491;
                        float _3493 = _3473 + _3438;
                        float _3494 = _3474 + _3439;
                        float _3495 = _3475 + _3440;
                        float _3499 = inversesqrt(dot(vec3(_3493, _3494, _3495), vec3(_3493, _3494, _3495)));
                        float _3503 = dot(vec3(_896, _899, _902), vec3(_3473, _3474, _3475));
                        float _4814 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                        float _3506 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
                        float _3507 = dot(vec3(_896, _899, _902), vec3(_3499 * _3493, _3499 * _3494, _3499 * _3495));
                        float _4825 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                        float _3510 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
                        float _3514 = ((_3510 * _3510) * (_3492 + (-1.0))) + 1.0;
                        float _3515 = _3451 * _3491;
                        float _3516 = _3515 * _3515;
                        float _3519 = ((1.0 - _3516) * _3441) + _3516;
                        float _4836 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                        float _3520 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
                        float _3521 = 1.0 - _3491;
                        float _3531 = (0.5 / (((_3520 * ((_3506 * _3521) + _3491)) + 9.9999999392252902907785028219223e-09) + (((_3520 * _3521) + _3491) * _3506))) * _3520;
                        float _4847 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                        float _3542 = (((_3492 * 3.1415927410125732421875) * (isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0)))) / ((_3514 * _3514) * ((_3458 * 2.1991131305694580078125) + 3.141590118408203125))) * _3447;
                        _3300 = (_3462 * _3410.x) + _3368;
                        _3301 = (_3462 * _3410.y) + _3369;
                        _3302 = (_3462 * _3410.z) + _3370;
                        _3297 = (_3542 * _3427.x) + _3365;
                        _3298 = (_3542 * _3427.y) + _3366;
                        _3299 = (_3542 * _3427.z) + _3367;
                        if (_3372 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3365 = _3297;
                            _3366 = _3298;
                            _3367 = _3299;
                            _3368 = _3300;
                            _3369 = _3301;
                            _3370 = _3302;
                            _3371 = _3372;
                        }
                    }
                    frontier_phi_68_pred = _3302;
                    frontier_phi_68_pred_1 = _3301;
                    frontier_phi_68_pred_2 = _3300;
                    frontier_phi_68_pred_3 = _3298;
                    frontier_phi_68_pred_4 = _3297;
                    frontier_phi_68_pred_5 = _3299;
                }
                _3108 = frontier_phi_68_pred;
                _3106 = frontier_phi_68_pred_1;
                _3104 = frontier_phi_68_pred_2;
                _3100 = frontier_phi_68_pred_3;
                _3098 = frontier_phi_68_pred_4;
                _3102 = frontier_phi_68_pred_5;
                uint _3248 = _3247 + 1u;
                if (_3248 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3241 = _3098;
                    _3242 = _3100;
                    _3243 = _3102;
                    _3244 = _3104;
                    _3245 = _3106;
                    _3246 = _3108;
                    _3247 = _3248;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3097 = _3098;
            _3099 = _3100;
            _3101 = _3102;
            _3103 = _3104;
            _3105 = _3106;
            _3107 = _3108;
        }
        uvec4 _3111 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3112 = _3111.z;
        uint _3114 = (_3112 >> 8u) & 15u;
        float _3209;
        float _3211;
        float _3213;
        float _3215;
        float _3217;
        float _3219;
        if (((4294967295u << _3114) & _3016) == 0u)
        {
            _3209 = _3097;
            _3211 = _3099;
            _3213 = _3101;
            _3215 = _3103;
            _3217 = _3105;
            _3219 = _3107;
        }
        else
        {
            float _3234 = inversesqrt(dot(vec3(_2075, _2076, _2077), vec3(_2075, _2076, _2077)));
            float _3235 = _3234 * _2075;
            float _3236 = _3234 * _2076;
            float _3237 = _3234 * _2077;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3114 < ((_3112 >> 12u) & 15u))
            {
                float _3210;
                float _3212;
                float _3214;
                float _3216;
                float _3218;
                float _3220;
                float _3348 = _3097;
                float _3349 = _3099;
                float _3350 = _3101;
                float _3351 = _3103;
                float _3352 = _3105;
                float _3353 = _3107;
                uint _3354 = _3114;
                uint _3363;
                bool _3364;
                for (;;)
                {
                    _3363 = texelFetch(g_lightClassification, int((((_3010 << 5u) + (_2996 << 9u)) + (_3354 << 2u)) >> 2u)).x;
                    _3364 = _3363 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3364)
                    {
                        frontier_phi_74_pred = _3350;
                        frontier_phi_74_pred_1 = _3349;
                        frontier_phi_74_pred_2 = _3348;
                        frontier_phi_74_pred_3 = _3353;
                        frontier_phi_74_pred_4 = _3352;
                        frontier_phi_74_pred_5 = _3351;
                    }
                    else
                    {
                        float _3547;
                        float _3548;
                        float _3549;
                        float _3550;
                        float _3551;
                        float _3552;
                        float _3841;
                        float _3842;
                        float _3843;
                        float _3844;
                        float _3845;
                        float _3846;
                        float _3560 = _3348;
                        float _3561 = _3349;
                        float _3562 = _3350;
                        float _3563 = _3351;
                        float _3564 = _3352;
                        float _3565 = _3353;
                        uint _3566 = _3363;
                        uint _3567;
                        vec4 _3592;
                        float _3593;
                        vec4 _3608;
                        vec3 _3620;
                        vec4 _3635;
                        vec4 _3650;
                        float _3697;
                        bool _3698;
                        for (;;)
                        {
                            uint _3577 = ((_3354 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3566));
                            _3567 = (_3566 + 4294967295u) & _3566;
                            uint _3579 = _3577 * 40u;
                            _3592 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3579)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 3u)).x));
                            _3593 = _3592.w;
                            uint _3595 = (_3577 * 40u) + 4u;
                            _3608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 3u)).x));
                            uint _3610 = (_3577 * 40u) + 8u;
                            _3620 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3610)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 2u)).x));
                            uint _3622 = (_3577 * 40u) + 16u;
                            _3635 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3622)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 3u)).x));
                            uint _3637 = (_3577 * 40u) + 20u;
                            _3650 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3637)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 3u)).x));
                            uint _3653 = (_3577 * 40u) + 24u;
                            vec4 _3666 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3653)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 3u)).x));
                            uint _3672 = (_3577 * 40u) + 28u;
                            vec4 _3685 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 3u)).x));
                            _3697 = fma(_2077, _3685.z, fma(_2076, _3685.y, _3685.x * _2075)) + _3685.w;
                            _3698 = !((fma(_2077, _3666.z, fma(_2076, _3666.y, _3666.x * _2075)) + _3666.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3698)
                            {
                                float _3725 = _3592.x - _2075;
                                float _3726 = _3592.y - _2076;
                                float _3727 = _3592.z - _2077;
                                float _3728 = dot(vec3(_3725, _3726, _3727), vec3(_3725, _3726, _3727));
                                float _3731 = inversesqrt(_3728);
                                float _3732 = _3731 * _3725;
                                float _3733 = _3731 * _3726;
                                float _3734 = _3731 * _3727;
                                float _3738 = 1.0 - (_3728 / (_3593 * _3593));
                                float _4858 = isnan(0.0) ? _3738 : (isnan(_3738) ? 0.0 : max(_3738, 0.0));
                                float _3739 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
                                float _3743 = sqrt(_3728) * _3608.w;
                                float _3745 = 1.39999997615814208984375 / (_3743 + 1.39999997615814208984375);
                                float _3746 = _3745 * _3745;
                                float _3749 = ((1.0 - _3746) * dot(vec3(_3732, _3733, _3734), vec3(_896, _899, _902))) + _3746;
                                float _3752 = _3743 * _3743;
                                float _3756 = (fma(_2077, _3635.z, fma(_2076, _3635.y, _3635.x * _2075)) + _3635.w) / _3697;
                                float _3757 = (fma(_2077, _3650.z, fma(_2076, _3650.y, _3650.x * _2075)) + _3650.w) / _3697;
                                float _3761 = 1.0 - dot(vec2(_3756, _3757), vec2(_3756, _3757));
                                float _4874 = isnan(0.0) ? _3761 : (isnan(_3761) ? 0.0 : max(_3761, 0.0));
                                float _3762 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
                                float _3763 = _3762 * (((isnan(0.0) ? _3749 : (isnan(_3749) ? 0.0 : max(_3749, 0.0))) * _3739) / ((_3752 * 0.699999988079071044921875) + 1.0));
                                float _3775 = exp2(log2(1.0 / ((_3752 * 3.5) + 5.0)) * 0.25);
                                float _3776 = 1.0 - _1016;
                                float _3783 = sqrt(1.0 - ((1.0 - (_3776 * _3776)) * (1.0 - (_3775 * _3775))));
                                float _3784 = _3783 * _3783;
                                float _3785 = _3784 * _3784;
                                float _3786 = _3732 - _3235;
                                float _3787 = _3733 - _3236;
                                float _3788 = _3734 - _3237;
                                float _3792 = inversesqrt(dot(vec3(_3786, _3787, _3788), vec3(_3786, _3787, _3788)));
                                float _3796 = dot(vec3(_896, _899, _902), vec3((-0.0) - _3235, (-0.0) - _3236, (-0.0) - _3237));
                                float _4885 = isnan(0.0) ? _3796 : (isnan(_3796) ? 0.0 : max(_3796, 0.0));
                                float _3799 = isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0));
                                float _3800 = dot(vec3(_896, _899, _902), vec3(_3792 * _3786, _3792 * _3787, _3792 * _3788));
                                float _4896 = isnan(0.0) ? _3800 : (isnan(_3800) ? 0.0 : max(_3800, 0.0));
                                float _3803 = isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0));
                                float _3807 = ((_3803 * _3803) * (_3785 + (-1.0))) + 1.0;
                                float _3808 = _3745 * _3784;
                                float _3809 = _3808 * _3808;
                                float _3815 = ((1.0 - _3809) * dot(vec3(_896, _899, _902), vec3(_3732, _3733, _3734))) + _3809;
                                float _4907 = isnan(0.0) ? _3815 : (isnan(_3815) ? 0.0 : max(_3815, 0.0));
                                float _3816 = isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0));
                                float _3817 = 1.0 - _3784;
                                float _3827 = (0.5 / (((_3816 * ((_3799 * _3817) + _3784)) + 9.9999999392252902907785028219223e-09) + (((_3816 * _3817) + _3784) * _3799))) * _3816;
                                float _4918 = isnan(0.0) ? _3827 : (isnan(_3827) ? 0.0 : max(_3827, 0.0));
                                float _3837 = (_3762 * _3739) * (((_3785 * 3.1415927410125732421875) * (isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0)))) / ((_3807 * _3807) * ((_3752 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3837 * _3620.z;
                                frontier_phi_80_pred_1 = _3837 * _3620.y;
                                frontier_phi_80_pred_2 = _3837 * _3620.x;
                                frontier_phi_80_pred_3 = _3763 * _3608.z;
                                frontier_phi_80_pred_4 = _3763 * _3608.y;
                                frontier_phi_80_pred_5 = _3763 * _3608.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3843 = frontier_phi_80_pred;
                            _3842 = frontier_phi_80_pred_1;
                            _3841 = frontier_phi_80_pred_2;
                            _3846 = frontier_phi_80_pred_3;
                            _3845 = frontier_phi_80_pred_4;
                            _3844 = frontier_phi_80_pred_5;
                            _3550 = _3844 + _3563;
                            _3551 = _3845 + _3564;
                            _3552 = _3846 + _3565;
                            _3547 = _3841 + _3560;
                            _3548 = _3842 + _3561;
                            _3549 = _3843 + _3562;
                            if (_3567 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3560 = _3547;
                                _3561 = _3548;
                                _3562 = _3549;
                                _3563 = _3550;
                                _3564 = _3551;
                                _3565 = _3552;
                                _3566 = _3567;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3549;
                        frontier_phi_74_pred_1 = _3548;
                        frontier_phi_74_pred_2 = _3547;
                        frontier_phi_74_pred_3 = _3552;
                        frontier_phi_74_pred_4 = _3551;
                        frontier_phi_74_pred_5 = _3550;
                    }
                    _3214 = frontier_phi_74_pred;
                    _3212 = frontier_phi_74_pred_1;
                    _3210 = frontier_phi_74_pred_2;
                    _3220 = frontier_phi_74_pred_3;
                    _3218 = frontier_phi_74_pred_4;
                    _3216 = frontier_phi_74_pred_5;
                    uint _3355 = _3354 + 1u;
                    if (_3355 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3348 = _3210;
                        _3349 = _3212;
                        _3350 = _3214;
                        _3351 = _3216;
                        _3352 = _3218;
                        _3353 = _3220;
                        _3354 = _3355;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3218;
                frontier_phi_62_63_ladder_1 = _3216;
                frontier_phi_62_63_ladder_2 = _3214;
                frontier_phi_62_63_ladder_3 = _3220;
                frontier_phi_62_63_ladder_4 = _3212;
                frontier_phi_62_63_ladder_5 = _3210;
            }
            else
            {
                frontier_phi_62_63_ladder = _3105;
                frontier_phi_62_63_ladder_1 = _3103;
                frontier_phi_62_63_ladder_2 = _3101;
                frontier_phi_62_63_ladder_3 = _3107;
                frontier_phi_62_63_ladder_4 = _3099;
                frontier_phi_62_63_ladder_5 = _3097;
            }
            _3209 = frontier_phi_62_63_ladder_5;
            _3211 = frontier_phi_62_63_ladder_4;
            _3213 = frontier_phi_62_63_ladder_2;
            _3215 = frontier_phi_62_63_ladder_1;
            _3217 = frontier_phi_62_63_ladder;
            _3219 = frontier_phi_62_63_ladder_3;
        }
        float _3224 = isnan(1.0) ? _1000 : (isnan(_1000) ? 1.0 : min(_1000, 1.0));
        _3028 = (_3224 * _3215) + _2541;
        _3030 = (_3224 * _3217) + _2543;
        _3032 = (_3224 * _3219) + _2545;
        _3034 = ((_3209 * _985) * _3224) + _2879;
        _3036 = ((_3211 * _987) * _3224) + _2881;
        _3038 = ((_3213 * _988) * _3224) + _2883;
    }
    else
    {
        _3028 = _2541;
        _3030 = _2543;
        _3032 = _2545;
        _3034 = _2879;
        _3036 = _2881;
        _3038 = _2883;
    }
    float _4934 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _4945 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _4956 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _4967 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _3063 = cbInstanceData._m0[_928 + 6u].w * (isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0)));
    float _3068 = _873 / cbSceneParam._m0[86u].x;
    float _3069 = _874 / cbSceneParam._m0[86u].y;
    vec4 _3083 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3068, _3069, (log2((isnan(cbSceneParam._m0[77u].w) ? _808 : (isnan(_808) ? cbSceneParam._m0[77u].w : min(_808, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3085 = _3083.x;
    float _3086 = _3083.y;
    float _3087 = _3083.z;
    float _3088 = _3083.w;
    float _3159;
    float _3161;
    float _3163;
    float _3165;
    if (_808 > cbSceneParam._m0[78u].w)
    {
        float _3122 = isnan(_808) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _808 : min(cbSceneParam._m0[80u].w, _808));
        float _3123 = _3122 / _808;
        float _3134 = _3123 * _858;
        float _3135 = _859 * _3123;
        float _3136 = (-0.0) - _3135;
        float _3137 = _3123 * _860;
        float _3139 = (cbSceneParam._m0[77u].w * _3136) / _3122;
        float _3140 = _3139 + cbSceneParam._m0[79u].w;
        float _3141 = cbSceneParam._m0[79u].w - _3135;
        float _3147 = sqrt(((_3134 * _3134) + (_3135 * _3135)) + (_3137 * _3137));
        float _3150 = (1.0 - (cbSceneParam._m0[77u].w / _3122)) * _3147;
        float _3155 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3157 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3310;
        if (abs((_3136 - _3139) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3310 = ((((_3140 > 0.0) ? exp2(_3155 * _3140) : (2.0 - exp2(_3157 * _3140))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3150;
        }
        else
        {
            float _3270 = 1.0 / cbSceneParam._m0[80u].x;
            float _3271 = isnan(_3141) ? _3140 : (isnan(_3140) ? _3141 : max(_3140, _3141));
            float _3272 = isnan(_3141) ? _3140 : (isnan(_3140) ? _3141 : min(_3140, _3141));
            float _3281 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : min(_3271, 0.0));
            float _3282 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : min(_3272, 0.0));
            _3310 = ((abs(_3147 / _3136) * cbSceneParam._m0[80u].y) * ((((_3281 - _3282) * 2.0) - ((exp2(_3155 * (isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0)))) - exp2(_3155 * (isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0))))) * _3270)) - ((exp2(_3157 * _3281) - exp2(_3157 * _3282)) * _3270))) + (_3150 * cbSceneParam._m0[80u].z);
        }
        vec4 _3312 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3068, _3069, 1.0), 0.0);
        float _3321 = exp2((_3310 * (-1.44269502162933349609375)) * (1.0 - _3312.w));
        float _3322 = log2(_3321);
        float _3338 = log2(_3088);
        _3159 = (exp2(_3338 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3322 * cbSceneParam._m0[78u].x)) * _3312.x) / cbSceneParam._m0[78u].x)) + _3085;
        _3161 = (exp2(_3338 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3322 * cbSceneParam._m0[78u].y)) * _3312.y) / cbSceneParam._m0[78u].y)) + _3086;
        _3163 = (exp2(_3338 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3322 * cbSceneParam._m0[78u].z)) * _3312.z) / cbSceneParam._m0[78u].z)) + _3087;
        _3165 = _3321 * _3088;
    }
    else
    {
        _3159 = _3085;
        _3161 = _3086;
        _3163 = _3087;
        _3165 = _3088;
    }
    float _3177 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3178 = _3177 == 3.0;
    float _3179 = log2(_3165);
    float _3186 = exp2(_3179 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0))) * (_3028 + ((isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))) * _1000))) + ((_3034 + ((isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0))) * _1809)) * cbPerFrame._m0[3u].x));
    float _3187 = exp2(_3179 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0))) * (_3030 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _1000))) + ((_3036 + ((isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0))) * _1809)) * cbPerFrame._m0[3u].x));
    float _3188 = exp2(_3179 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0))) * (_3032 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _1000))) + ((_3038 + ((isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0))) * _1809)) * cbPerFrame._m0[3u].x));
    float _3197 = (_3177 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3197 * (_3178 ? _3186 : (_3186 + (cbSceneParam._m0[72u].w * _3159)));
    SV_Target.y = _3197 * (_3178 ? _3187 : (_3187 + (cbSceneParam._m0[72u].w * _3161)));
    SV_Target.z = _3197 * (_3178 ? _3188 : (_3188 + (cbSceneParam._m0[72u].w * _3163)));
    SV_Target.w = _3063;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3063;
}


