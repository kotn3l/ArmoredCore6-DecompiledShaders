#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_snp_0_Texture2D_2;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D P_ACParts_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D P_ACParts_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D P_ACParts_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_snp_0_Texture2D_1;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_snp_0_Texture2D_10;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_snp_0_Texture2D_11;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_snp_0_Texture2D_12;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_snp_0_Texture2D_13;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1256;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243;
    float _244;
    float _245;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _243 = (-0.0) - _229;
        _244 = (-0.0) - _230;
        _245 = (-0.0) - _231;
    }
    else
    {
        _243 = _229;
        _244 = _230;
        _245 = _231;
    }
    float _255 = cbMtdParam._m0[21u].z + TEXCOORD.y;
    vec4 _268 = texture(sampler2D(P_ACParts_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (_255 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _273 = _268.z;
    float _274 = _268.w;
    float _282 = exp2(log2(_273 * cbMtdParam._m0[20u].w) * cbMtdParam._m0[19u].y);
    float _283 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _284 = isnan(1.0) ? _283 : (isnan(_283) ? 1.0 : min(_283, 1.0));
    float _290 = exp2(log2(1.0 - _274) * cbMtdParam._m0[20u].y);
    vec4 _302 = texture(sampler2D(P_ACParts_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _255) + cbTextureTilingScale._m0[0u].w));
    vec4 _328 = texture(sampler2D(P_ACParts_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _255) + cbTextureTilingScale._m0[3u].w));
    float _339 = cbMtdParam._m0[9u].x * _328.x;
    float _340 = cbMtdParam._m0[9u].y * _328.y;
    float _341 = cbMtdParam._m0[9u].z * _328.z;
    float _348 = (((cbMtdParam._m0[10u].x * _302.x) - _339) * _290) + _339;
    float _349 = (((cbMtdParam._m0[10u].y * _302.y) - _340) * _290) + _340;
    float _350 = (((cbMtdParam._m0[10u].z * _302.z) - _341) * _290) + _341;
    float _354 = exp2(log2(_274) * cbMtdParam._m0[21u].y);
    vec4 _366 = texture(sampler2D(P_ACParts_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _255) + cbTextureTilingScale._m0[10u].w));
    vec4 _400 = texture(sampler2D(P_ACParts_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _255) + cbTextureTilingScale._m0[11u].w));
    float _411 = cbMtdParam._m0[18u].x * _400.x;
    float _412 = cbMtdParam._m0[18u].y * _400.y;
    float _413 = cbMtdParam._m0[18u].z * _400.z;
    vec4 _434 = texture(sampler2D(P_ACParts_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _255) + cbTextureTilingScale._m0[1u].w));
    float _442 = ((((((((cbMtdParam._m0[17u].x * _366.x) - _348) * _354) + _348) - _411) * _284) + _411) * 4.55000019073486328125) * _434.x;
    float _444 = ((((((((cbMtdParam._m0[17u].y * _366.y) - _349) * _354) + _349) - _412) * _284) + _412) * 4.55000019073486328125) * _434.y;
    float _446 = ((((((((cbMtdParam._m0[17u].z * _366.z) - _350) * _354) + _350) - _413) * _284) + _413) * 4.55000019073486328125) * _434.z;
    float _447 = _434.w * _302.w;
    vec4 _460 = texture(sampler2D(P_ACParts_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _255) + cbTextureTilingScale._m0[5u].w));
    float _462 = _460.x;
    float _481 = (((1.0 - _462) + texture(sampler2D(P_ACParts_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _255) + cbTextureTilingScale._m0[4u].w)).x) * _284) + _462;
    float _501 = (((texture(sampler2D(P_ACParts_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _255) + cbTextureTilingScale._m0[6u].w)).x - _481) + cbMtdParam._m0[20u].z) * _290) + _481;
    float _524 = (((texture(sampler2D(P_ACParts_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - _501) + cbMtdParam._m0[22u].y) * _354) + _501;
    vec4 _537 = texture(sampler2D(P_ACParts_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * _255) + cbTextureTilingScale._m0[12u].w));
    vec4 _556 = texture(sampler2D(P_ACParts_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _255) + cbTextureTilingScale._m0[13u].w));
    float _558 = _556.x;
    float _559 = _556.y;
    float _562 = cbMtdParam._m0[19u].x + _556.z;
    float _565 = (((cbMtdParam._m0[20u].x + _537.z) - _562) * _290) + _562;
    vec4 _578 = texture(sampler2D(P_ACParts_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _255) + cbTextureTilingScale._m0[14u].w));
    vec4 _603 = texture(sampler2D(P_ACParts_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _255) + cbTextureTilingScale._m0[15u].w));
    float _605 = _603.x;
    float _606 = _603.y;
    float _609 = cbMtdParam._m0[21u].x + _603.z;
    float _612 = ((((_273 * 2.0) * ((((_578.z - _565) + cbMtdParam._m0[22u].x) * _354) + _565)) - _609) * _284) + _609;
    float _623 = ((_537.x - _558) * _290) + _558;
    float _624 = ((_537.y - _559) * _290) + _559;
    float _639 = (((((((_578.x - _623) * _354) + _623) - _605) * _284) + _605) * 2.0) + (-1.0);
    float _640 = (((((((_578.y - _624) * _354) + _624) - _606) * _284) + _606) * 2.0) + (-1.0);
    float _641 = dot(vec2(_639, _640), vec2(_639, _640));
    float _3879 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _646 = sqrt(1.0 - (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))));
    float _649 = _639 + (cbMtdParam._m0[21u].w * ((_268.x * 2.0) + (-1.0)));
    float _650 = _640 + (cbMtdParam._m0[21u].w * ((_268.y * 2.0) + (-1.0)));
    float _653 = fma(_646, _243, fma(_650, _235 * TANGENT.x, (_221 * _213) * _649));
    float _656 = fma(_646, _244, fma(_650, _235 * TANGENT.y, (_221 * _214) * _649));
    float _659 = fma(_646, _245, fma(_650, _235 * TANGENT.z, (_221 * _215) * _649));
    float _663 = inversesqrt(dot(vec3(_653, _656, _659), vec3(_653, _656, _659)));
    float _664 = _663 * _653;
    float _665 = _663 * _656;
    float _666 = _663 * _659;
    float _3890 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _667 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _3901 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _668 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    float _3912 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _3923 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _3934 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _3945 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _672 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _688 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _729 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _739 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _729);
    float _740 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _729);
    float _741 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _729);
    float _745 = inversesqrt(dot(vec3(_739, _740, _741), vec3(_739, _740, _741)));
    float _746 = _739 * _745;
    float _747 = _740 * _745;
    float _748 = _741 * _745;
    float _754 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _755 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _757 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _759 = _757.w;
    float _777 = fma(_666, cbSceneParam._m0[5u].z, fma(_665, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _664));
    float _780 = fma(_666, cbSceneParam._m0[6u].z, fma(_665, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _664));
    float _783 = fma(_666, cbSceneParam._m0[7u].z, fma(_665, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _664));
    vec4 _785 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _796 = (((_785.y - _668) + (_785.w * _668)) * cbMtdParam._m0[3u].x) + _668;
    uint _809 = uint(roundEven(NORMAL.w)) * 13u;
    uint _811 = (_809 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _817 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0)))) * cbInstanceData._m0[_811].x;
    float _818 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0)))) * cbInstanceData._m0[_811].y;
    float _819 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0)))) * cbInstanceData._m0[_811].z;
    float _3956 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _820 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _3967 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _821 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _3978 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _822 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    vec4 _823 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _828 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _839 = (((_828.x - _672) + (_828.w * _672)) * cbMtdParam._m0[3u].x) + _672;
    float _852 = (cbMtdParam._m0[3u].x * (((_820 * _759) - _820) + _823.x)) + _820;
    float _853 = (cbMtdParam._m0[3u].x * (((_821 * _759) - _821) + _823.y)) + _821;
    float _854 = (cbMtdParam._m0[3u].x * (((_822 * _759) - _822) + _823.z)) + _822;
    float _855 = 1.0 - _839;
    float _856 = _855 * _852;
    float _857 = _855 * _853;
    float _858 = _855 * _854;
    float _863 = (_852 + (-0.039999999105930328369140625)) * _839;
    float _864 = (_853 + (-0.039999999105930328369140625)) * _839;
    float _865 = (_854 + (-0.039999999105930328369140625)) * _839;
    float _866 = _863 + 0.039999999105930328369140625;
    float _868 = _864 + 0.039999999105930328369140625;
    float _869 = _865 + 0.039999999105930328369140625;
    vec4 _878 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _754, cbSceneParam._m0[86u].y * _755));
    float _881 = _878.x * TEXCOORD_4;
    float _882 = dot(vec3(_664, _665, _666), vec3(_746, _747, _748));
    float _885 = _882 * 2.0;
    float _889 = (_885 * _664) - _746;
    float _890 = (_885 * _665) - _747;
    float _891 = (_885 * _666) - _748;
    float _895 = abs(dot(vec3(_746, _747, _748), vec3(_664, _665, _666)));
    float _3989 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _897 = sqrt(_796);
    float _910 = exp2((_897 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_897 * 3.0));
    float _916 = (1.0 - _910) * ((_897 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _917 = _910 * _897;
    float _945 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _949 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _953 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1255;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _980 = fma(_953, cbModelParam._m0[26u].z, fma(_949, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _945));
        float _984 = fma(_953, cbModelParam._m0[27u].z, fma(_949, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _945));
        float _988 = fma(_953, cbModelParam._m0[28u].z, fma(_949, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _945));
        float _1013 = _945 + _664;
        float _1014 = _949 + _665;
        float _1015 = _953 + _666;
        float _1025 = fma(_1015, cbModelParam._m0[26u].z, fma(_1014, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1013)) - _980;
        float _1026 = fma(_1015, cbModelParam._m0[27u].z, fma(_1014, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1013)) - _984;
        float _1027 = fma(_1015, cbModelParam._m0[28u].z, fma(_1014, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1013)) - _988;
        float _1031 = inversesqrt(dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027)));
        float _1044 = ((_1031 * _1025) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_980 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1045 = ((_1031 * _1026) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_984 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1046 = ((_1031 * _1027) / cbModelParam._m0[34u].z) + ((((((_988 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        float _1083 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1049.x + (-0.5));
        float _1085 = _1083 * (_1049.y + (-0.5));
        float _1086 = _1083 * (_1049.z + (-0.5));
        float _1093 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1056.x + (-0.5));
        float _1095 = _1093 * (_1056.y + (-0.5));
        float _1096 = _1093 * (_1056.z + (-0.5));
        float _1103 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1063.x + (-0.5));
        float _1105 = _1103 * (_1063.y + (-0.5));
        float _1106 = _1103 * (_1063.z + (-0.5));
        float _1113 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1070.x + (-0.5));
        float _1115 = _1113 * (_1070.y + (-0.5));
        float _1116 = _1113 * (_1070.z + (-0.5));
        float _1117 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1118 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1119 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1120 = _1084 * 0.5;
        float _1121 = _1094 * 0.5;
        float _1122 = _1104 * 0.5;
        float _1123 = dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122));
        float _1128 = (_1123 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1123);
        float _1137 = (dot(vec3(_664, _665, _666), vec3(_1128 * _1120, _1128 * _1121, _1128 * _1122)) + 1.0) * 0.5;
        float _4015 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1147 = sqrt(((_1121 * _1121) + (_1120 * _1120)) + (_1122 * _1122)) / (_1117 + 9.9999997473787516355514526367188e-06);
        float _4026 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1149 = _1148 * 2.0;
        float _1153 = (1.0 - _1148) / (_1148 + 1.0);
        float _4037 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1163 = ((((1.0 - _1154) * (_1149 + 2.0)) * exp2(log2(isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1149 + 1.0))) + _1154) * _1117;
        float _1164 = _1085 * 0.5;
        float _1165 = _1095 * 0.5;
        float _1166 = _1105 * 0.5;
        float _1167 = dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166));
        float _1172 = (_1167 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1167);
        float _1180 = (dot(vec3(_664, _665, _666), vec3(_1172 * _1164, _1172 * _1165, _1172 * _1166)) + 1.0) * 0.5;
        float _4048 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1189 = sqrt(((_1165 * _1165) + (_1164 * _1164)) + (_1166 * _1166)) / (_1118 + 9.9999997473787516355514526367188e-06);
        float _4059 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1191 = _1190 * 2.0;
        float _1195 = (1.0 - _1190) / (_1190 + 1.0);
        float _4070 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1205 = ((((1.0 - _1196) * (_1191 + 2.0)) * exp2(log2(isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1191 + 1.0))) + _1196) * _1118;
        float _1206 = _1086 * 0.5;
        float _1207 = _1096 * 0.5;
        float _1208 = _1106 * 0.5;
        float _1209 = dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208));
        float _1214 = (_1209 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1209);
        float _1222 = (dot(vec3(_664, _665, _666), vec3(_1214 * _1206, _1214 * _1207, _1214 * _1208)) + 1.0) * 0.5;
        float _4081 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1231 = sqrt(((_1207 * _1207) + (_1206 * _1206)) + (_1208 * _1208)) / (_1119 + 9.9999997473787516355514526367188e-06);
        float _4092 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1233 = _1232 * 2.0;
        float _1237 = (1.0 - _1232) / (_1232 + 1.0);
        float _4103 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1247 = ((((1.0 - _1238) * (_1233 + 2.0)) * exp2(log2(isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_1233 + 1.0))) + _1238) * _1119;
        _1255 = _1086;
        _1257 = _1085;
        _1258 = _1084;
        _1259 = _1096;
        _1260 = _1095;
        _1261 = _1094;
        _1262 = _1106;
        _1263 = _1105;
        _1264 = _1104;
        _1265 = _1119;
        _1266 = _1118;
        _1267 = _1117;
        _1268 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)));
        _1269 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0)));
        _1270 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)));
    }
    else
    {
        _1255 = _1256;
        _1257 = _1256;
        _1258 = _1256;
        _1259 = _1256;
        _1260 = _1256;
        _1261 = _1256;
        _1262 = _1256;
        _1263 = _1256;
        _1264 = _1256;
        _1265 = _1256;
        _1266 = _1256;
        _1267 = _1256;
        _1268 = 0.0;
        _1269 = 0.0;
        _1270 = 0.0;
    }
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1296 = fma(_953, cbModelParam._m0[30u].z, fma(_949, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _945));
        float _1300 = fma(_953, cbModelParam._m0[31u].z, fma(_949, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _945));
        float _1304 = fma(_953, cbModelParam._m0[32u].z, fma(_949, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _945));
        float _1327 = _945 + _664;
        float _1328 = _949 + _665;
        float _1329 = _953 + _666;
        float _1339 = fma(_1329, cbModelParam._m0[30u].z, fma(_1328, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1327)) - _1296;
        float _1340 = fma(_1329, cbModelParam._m0[31u].z, fma(_1328, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1327)) - _1300;
        float _1341 = fma(_1329, cbModelParam._m0[32u].z, fma(_1328, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1327)) - _1304;
        float _1345 = inversesqrt(dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341)));
        float _1358 = ((_1345 * _1339) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1296 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1359 = ((_1345 * _1340) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1300 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1360 = ((_1345 * _1341) / cbModelParam._m0[35u].z) + ((((((_1304 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1362 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1358, _1359, _1360), 0.0);
        vec4 _1369 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1358, _1359, _1360), 0.0);
        vec4 _1376 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1358, _1359, _1360), 0.0);
        vec4 _1383 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1358, _1359, _1360), 0.0);
        float _1395 = exp2((_1362.w + (-0.5)) * 20.0) * 2.0;
        float _1396 = _1395 * (_1362.x + (-0.5));
        float _1397 = _1395 * (_1362.y + (-0.5));
        float _1398 = _1395 * (_1362.z + (-0.5));
        float _1405 = exp2((_1369.w + (-0.5)) * 20.0) * 2.0;
        float _1406 = _1405 * (_1369.x + (-0.5));
        float _1407 = _1405 * (_1369.y + (-0.5));
        float _1408 = _1405 * (_1369.z + (-0.5));
        float _1415 = exp2((_1376.w + (-0.5)) * 20.0) * 2.0;
        float _1416 = _1415 * (_1376.x + (-0.5));
        float _1417 = _1415 * (_1376.y + (-0.5));
        float _1418 = _1415 * (_1376.z + (-0.5));
        float _1425 = exp2((_1383.w + (-0.5)) * 20.0) * 2.0;
        float _1426 = _1425 * (_1383.x + (-0.5));
        float _1427 = _1425 * (_1383.y + (-0.5));
        float _1428 = _1425 * (_1383.z + (-0.5));
        float _1429 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1430 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1431 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1432 = _1396 * 0.5;
        float _1433 = _1406 * 0.5;
        float _1434 = _1416 * 0.5;
        float _1435 = dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434));
        float _1440 = (_1435 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1435);
        float _1448 = (dot(vec3(_664, _665, _666), vec3(_1440 * _1432, _1440 * _1433, _1440 * _1434)) + 1.0) * 0.5;
        float _4144 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1457 = sqrt(((_1433 * _1433) + (_1432 * _1432)) + (_1434 * _1434)) / (_1429 + 9.9999997473787516355514526367188e-06);
        float _4155 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1459 = _1458 * 2.0;
        float _1463 = (1.0 - _1458) / (_1458 + 1.0);
        float _4166 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1473 = ((((1.0 - _1464) * (_1459 + 2.0)) * exp2(log2(isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_1459 + 1.0))) + _1464) * _1429;
        float _1474 = _1397 * 0.5;
        float _1475 = _1407 * 0.5;
        float _1476 = _1417 * 0.5;
        float _1477 = dot(vec3(_1474, _1475, _1476), vec3(_1474, _1475, _1476));
        float _1482 = (_1477 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1477);
        float _1490 = (dot(vec3(_664, _665, _666), vec3(_1482 * _1474, _1482 * _1475, _1482 * _1476)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1499 = sqrt(((_1475 * _1475) + (_1474 * _1474)) + (_1476 * _1476)) / (_1430 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1501 = _1500 * 2.0;
        float _1505 = (1.0 - _1500) / (_1500 + 1.0);
        float _4199 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1515 = ((((1.0 - _1506) * (_1501 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1501 + 1.0))) + _1506) * _1430;
        float _1516 = _1398 * 0.5;
        float _1517 = _1408 * 0.5;
        float _1518 = _1418 * 0.5;
        float _1519 = dot(vec3(_1516, _1517, _1518), vec3(_1516, _1517, _1518));
        float _1524 = (_1519 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1519);
        float _1532 = (dot(vec3(_664, _665, _666), vec3(_1524 * _1516, _1524 * _1517, _1524 * _1518)) + 1.0) * 0.5;
        float _4210 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1541 = sqrt(((_1517 * _1517) + (_1516 * _1516)) + (_1518 * _1518)) / (_1431 + 9.9999997473787516355514526367188e-06);
        float _4221 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1543 = _1542 * 2.0;
        float _1547 = (1.0 - _1542) / (_1542 + 1.0);
        float _4232 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1557 = ((((1.0 - _1548) * (_1543 + 2.0)) * exp2(log2(isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_1543 + 1.0))) + _1548) * _1431;
        _1565 = _1398;
        _1566 = _1397;
        _1567 = _1396;
        _1568 = _1408;
        _1569 = _1407;
        _1570 = _1406;
        _1571 = _1418;
        _1572 = _1417;
        _1573 = _1416;
        _1574 = _1431;
        _1575 = _1430;
        _1576 = _1429;
        _1577 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)));
        _1578 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)));
        _1579 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)));
    }
    else
    {
        _1565 = _1256;
        _1566 = _1256;
        _1567 = _1256;
        _1568 = _1256;
        _1569 = _1256;
        _1570 = _1256;
        _1571 = _1256;
        _1572 = _1256;
        _1573 = _1256;
        _1574 = _1256;
        _1575 = _1256;
        _1576 = _1256;
        _1577 = 0.0;
        _1578 = 0.0;
        _1579 = 0.0;
    }
    float _1589 = (cbModelParam._m0[1u].x * (_1577 - _1268)) + _1268;
    float _1590 = (cbModelParam._m0[1u].x * (_1578 - _1269)) + _1269;
    float _1591 = (cbModelParam._m0[1u].x * (_1579 - _1270)) + _1270;
    float _1612 = fma(_1591, cbSceneParam._m0[89u].z, fma(_1590, cbSceneParam._m0[89u].y, _1589 * cbSceneParam._m0[89u].x));
    float _1615 = fma(_1591, cbSceneParam._m0[90u].z, fma(_1590, cbSceneParam._m0[90u].y, _1589 * cbSceneParam._m0[90u].x));
    float _1618 = fma(_1591, cbSceneParam._m0[91u].z, fma(_1590, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1589));
    float _1633 = _889 * 0.5;
    float _1634 = _890 * 0.5;
    float _1635 = _891 * 0.5;
    float _1636 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1567, _1570, _1573, _1576));
    float _1639 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1566, _1569, _1572, _1575));
    float _1642 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1565, _1568, _1571, _1574));
    float _1676;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1649 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1255, _1259, _1262, _1265));
        float _1653 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1257, _1260, _1263, _1266));
        float _1657 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1258, _1261, _1264, _1267));
        float _1664 = dot(vec4(cbModelParam._m0[39u]), vec4(_1633, _1634, _1635, 1.0));
        _1676 = dot(vec3(isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)), isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)), isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1664) ? 0.0 : (isnan(0.0) ? _1664 : max(0.0, _1664))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1676 = 1.0;
    }
    float _1687;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1678 = dot(vec4(cbModelParam._m0[40u]), vec4(_1633, _1634, _1635, 1.0));
        _1687 = dot(vec3(isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)), isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)), isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1678) ? 0.0 : (isnan(0.0) ? _1678 : max(0.0, _1678))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1687 = 1.0;
    }
    float _1691 = (_1687 * cbModelParam._m0[1u].x) + (_1676 * (1.0 - cbModelParam._m0[1u].x));
    float _1701 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _796);
    float _1702 = isnan(_1701) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1701 : min(cbModelParam._m0[25u].z, _1701));
    float _1782;
    float _1784;
    float _1786;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1749 = fma(_953, cbModelParam._m0[13u].z, fma(_949, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _945)) + cbModelParam._m0[13u].w;
        float _1753 = fma(_953, cbModelParam._m0[14u].z, fma(_949, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _945)) + cbModelParam._m0[14u].w;
        float _1757 = fma(_953, cbModelParam._m0[15u].z, fma(_949, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _945)) + cbModelParam._m0[15u].w;
        float _1760 = fma(_891, cbModelParam._m0[13u].z, fma(_890, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _889));
        float _1763 = fma(_891, cbModelParam._m0[14u].z, fma(_890, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _889));
        float _1766 = fma(_891, cbModelParam._m0[15u].z, fma(_890, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _889));
        float _1794;
        if (_1760 > 0.0)
        {
            _1794 = abs((1.0 - _1749) / _1760);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1760 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1749 + 1.0) / _1760);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1794 = frontier_phi_16_14_ladder;
        }
        float _1965;
        if (_1763 > 0.0)
        {
            _1965 = abs((1.0 - _1753) / _1763);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1763 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1753 + 1.0) / _1763);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1965 = frontier_phi_25_21_ladder;
        }
        float _2260;
        if (_1766 > 0.0)
        {
            _2260 = abs((1.0 - _1757) / _1766);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1757 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2260 = frontier_phi_37_32_ladder;
        }
        float _2262 = isnan(_1965) ? _1794 : (isnan(_1794) ? _1965 : min(_1794, _1965));
        float _2263 = isnan(_2260) ? _2262 : (isnan(_2262) ? _2260 : min(_2262, _2260));
        float _2267 = (_2263 * _1760) + _1749;
        float _2268 = (_2263 * _1763) + _1753;
        float _2269 = (_2263 * _1766) + _1757;
        float _2270 = _2263 * 9.9999997473787516355514526367188e-05;
        float _2272 = (-1.0) - _2270;
        float _2274 = _2270 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2269 > _2274) || ((_2269 < _2272) || ((_2268 > _2274) || ((_2268 < _2272) || ((_2267 < _2272) || (_2267 > _2274))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2414 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2269, cbModelParam._m0[9u].z, fma(_2268, cbModelParam._m0[9u].y, _2267 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2269, cbModelParam._m0[10u].z, fma(_2268, cbModelParam._m0[10u].y, _2267 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2269, cbModelParam._m0[11u].z, fma(_2268, cbModelParam._m0[11u].y, _2267 * cbModelParam._m0[11u].x))), _1702);
            frontier_phi_15_37_ladder = _2414.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2414.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2414.z * cbModelParam._m0[1u].y;
        }
        _1782 = frontier_phi_15_37_ladder_1;
        _1784 = frontier_phi_15_37_ladder;
        _1786 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1770 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_889, _890, _891), _1702);
        _1782 = _1770.x * cbModelParam._m0[1u].y;
        _1784 = _1770.y * cbModelParam._m0[1u].y;
        _1786 = _1770.z * cbModelParam._m0[1u].y;
    }
    float _1790 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _796);
    float _1791 = isnan(_1790) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1790 : min(cbModelParam._m0[25u].w, _1790));
    float _1880;
    float _1882;
    float _1884;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1844 = fma(_953, cbModelParam._m0[21u].z, fma(_949, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _945)) + cbModelParam._m0[21u].w;
        float _1848 = fma(_953, cbModelParam._m0[22u].z, fma(_949, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _945)) + cbModelParam._m0[22u].w;
        float _1852 = fma(_953, cbModelParam._m0[23u].z, fma(_949, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _945)) + cbModelParam._m0[23u].w;
        float _1855 = fma(_891, cbModelParam._m0[21u].z, fma(_890, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _889));
        float _1858 = fma(_891, cbModelParam._m0[22u].z, fma(_890, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _889));
        float _1861 = fma(_891, cbModelParam._m0[23u].z, fma(_890, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _889));
        float _1970;
        if (_1855 > 0.0)
        {
            _1970 = abs((1.0 - _1844) / _1855);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1844 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1970 = frontier_phi_27_23_ladder;
        }
        float _2287;
        if (_1858 > 0.0)
        {
            _2287 = abs((1.0 - _1848) / _1858);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1848 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2287 = frontier_phi_39_34_ladder;
        }
        float _2625;
        if (_1861 > 0.0)
        {
            _2625 = abs((1.0 - _1852) / _1861);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1852 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2625 = frontier_phi_49_46_ladder;
        }
        float _2627 = isnan(_2287) ? _1970 : (isnan(_1970) ? _2287 : min(_1970, _2287));
        float _2628 = isnan(_2625) ? _2627 : (isnan(_2627) ? _2625 : min(_2627, _2625));
        float _2632 = (_2628 * _1855) + _1844;
        float _2633 = (_2628 * _1858) + _1848;
        float _2634 = (_2628 * _1861) + _1852;
        float _2635 = _2628 * 9.9999997473787516355514526367188e-05;
        float _2636 = (-1.0) - _2635;
        float _2638 = _2635 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2634 > _2638) || ((_2634 < _2636) || ((_2633 > _2638) || ((_2633 < _2636) || ((_2632 < _2636) || (_2632 > _2638))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2756 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2634, cbModelParam._m0[17u].z, fma(_2633, cbModelParam._m0[17u].y, _2632 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2634, cbModelParam._m0[18u].z, fma(_2633, cbModelParam._m0[18u].y, _2632 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2634, cbModelParam._m0[19u].z, fma(_2633, cbModelParam._m0[19u].y, _2632 * cbModelParam._m0[19u].x))), _1791);
            frontier_phi_24_49_ladder = _2756.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2756.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2756.x * cbModelParam._m0[1u].z;
        }
        _1880 = frontier_phi_24_49_ladder_2;
        _1882 = frontier_phi_24_49_ladder_1;
        _1884 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1864 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_889, _890, _891), _1791);
        _1880 = _1864.x * cbModelParam._m0[1u].z;
        _1882 = _1864.y * cbModelParam._m0[1u].z;
        _1884 = _1864.z * cbModelParam._m0[1u].z;
    }
    float _1897 = (((_916 * _866) + _917) * _881) * ((cbModelParam._m0[1u].w * (_1880 - _1782)) + _1782);
    float _1899 = (((_916 * _868) + _917) * _881) * ((cbModelParam._m0[1u].w * (_1882 - _1784)) + _1784);
    float _1901 = (((_916 * _869) + _917) * _881) * ((cbModelParam._m0[1u].w * (_1884 - _1786)) + _1786);
    float _1904 = fma(_1901, cbSceneParam._m0[89u].z, fma(_1899, cbSceneParam._m0[89u].y, _1897 * cbSceneParam._m0[89u].x));
    float _1907 = fma(_1901, cbSceneParam._m0[90u].z, fma(_1899, cbSceneParam._m0[90u].y, _1897 * cbSceneParam._m0[90u].x));
    float _1910 = fma(_1901, cbSceneParam._m0[91u].z, fma(_1899, cbSceneParam._m0[91u].y, _1897 * cbSceneParam._m0[91u].x));
    float _1944 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1948 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1952 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1956 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1957 = _1944 / _1956;
    float _1958 = _1948 / _1956;
    float _1959 = _1952 / _1956;
    float _2106;
    float _2107;
    float _2108;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1986 = ((uint(_1959 > cbSceneParam._m0[59u].y) + uint(_1959 > cbSceneParam._m0[59u].x)) + uint(_1959 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1987 = _1986 + 43u;
        uint _1995 = _1986 + 44u;
        uint _2003 = _1986 + 45u;
        uint _2011 = _1986 + 46u;
        float _2022 = fma(_1956, cbSceneParam._m0[_1987].w, fma(_1952, cbSceneParam._m0[_1987].z, fma(_1948, cbSceneParam._m0[_1987].y, _1944 * cbSceneParam._m0[_1987].x)));
        float _2026 = fma(_1956, cbSceneParam._m0[_1995].w, fma(_1952, cbSceneParam._m0[_1995].z, fma(_1948, cbSceneParam._m0[_1995].y, _1944 * cbSceneParam._m0[_1995].x)));
        float _2034 = fma(_1956, cbSceneParam._m0[_2011].w, fma(_1952, cbSceneParam._m0[_2011].z, fma(_1948, cbSceneParam._m0[_2011].y, _1944 * cbSceneParam._m0[_2011].x)));
        float _2039 = cbSceneParam._m0[33u].z * _2034;
        float _2041 = cbSceneParam._m0[33u].w * _2034;
        float _2044 = fma(_1956, cbSceneParam._m0[_2003].w, fma(_1952, cbSceneParam._m0[_2003].z, fma(_1948, cbSceneParam._m0[_2003].y, _1944 * cbSceneParam._m0[_2003].x))) / _2034;
        float _2092 = (cbSceneParam._m0[33u].x - sqrt(((_1958 * _1958) + (_1957 * _1957)) + (_1959 * _1959))) * cbSceneParam._m0[33u].y;
        float _4358 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2099 = (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2039 + _2022) / _2034, (_2041 + _2026) / _2034), _2044), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2041 + _2022) / _2034, (_2026 - _2039) / _2034), _2044), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2022 - _2039) / _2034, (_2026 - _2041) / _2034), _2044), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2022 - _2041) / _2034, (_2039 + _2026) / _2034), _2044), 0.0)).x), vec4(0.25)));
        _2106 = 1.0 - (_2099 * cbSceneParam._m0[34u].x);
        _2107 = 1.0 - (_2099 * cbSceneParam._m0[34u].y);
        _2108 = 1.0 - (_2099 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2106 = 1.0;
        _2107 = 1.0;
        _2108 = 1.0;
    }
    float _2172;
    float _2174;
    float _2176;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2160 = fma(_1956, cbSceneParam._m0[63u].w, fma(_1952, cbSceneParam._m0[63u].z, fma(_1948, cbSceneParam._m0[63u].y, _1944 * cbSceneParam._m0[63u].x)));
        float _2161 = fma(_1956, cbSceneParam._m0[60u].w, fma(_1952, cbSceneParam._m0[60u].z, fma(_1948, cbSceneParam._m0[60u].y, _1944 * cbSceneParam._m0[60u].x))) / _2160;
        float _2162 = fma(_1956, cbSceneParam._m0[61u].w, fma(_1952, cbSceneParam._m0[61u].z, fma(_1948, cbSceneParam._m0[61u].y, _1944 * cbSceneParam._m0[61u].x))) / _2160;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2161 >= cbSceneParam._m0[64u].x) && (_2162 >= cbSceneParam._m0[64u].y)) && (_2161 <= cbSceneParam._m0[64u].z)) && (_2162 <= cbSceneParam._m0[64u].w))
        {
            float _2300 = fma(_1956, cbSceneParam._m0[62u].w, fma(_1952, cbSceneParam._m0[62u].z, fma(_1948, cbSceneParam._m0[62u].y, _1944 * cbSceneParam._m0[62u].x))) / _2160;
            float _2304 = isnan(cbSceneParam._m0[41u].w) ? _2300 : (isnan(_2300) ? cbSceneParam._m0[41u].w : max(_2300, cbSceneParam._m0[41u].w));
            float _2347 = (cbSceneParam._m0[33u].x - sqrt(((_1958 * _1958) + (_1957 * _1957)) + (_1959 * _1959))) * cbSceneParam._m0[33u].y;
            float _4374 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
            float _2354 = (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2161, cbSceneParam._m0[33u].w + _2162), _2304), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2161, _2162 - cbSceneParam._m0[33u].z), _2304), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2161 - cbSceneParam._m0[33u].z, _2162 - cbSceneParam._m0[33u].w), _2304), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2161 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2162), _2304), 0.0)).x), vec4(0.25)));
            float _2358 = 1.0 - (_2354 * cbSceneParam._m0[34u].x);
            float _2359 = 1.0 - (_2354 * cbSceneParam._m0[34u].y);
            float _2360 = 1.0 - (_2354 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2359) ? _2107 : (isnan(_2107) ? _2359 : min(_2107, _2359));
            frontier_phi_36_35_ladder_1 = isnan(_2360) ? _2108 : (isnan(_2108) ? _2360 : min(_2108, _2360));
            frontier_phi_36_35_ladder_2 = isnan(_2358) ? _2106 : (isnan(_2106) ? _2358 : min(_2106, _2358));
        }
        else
        {
            frontier_phi_36_35_ladder = _2107;
            frontier_phi_36_35_ladder_1 = _2108;
            frontier_phi_36_35_ladder_2 = _2106;
        }
        _2172 = frontier_phi_36_35_ladder_2;
        _2174 = frontier_phi_36_35_ladder;
        _2176 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2172 = _2106;
        _2174 = _2107;
        _2176 = _2108;
    }
    uvec4 _2181 = floatBitsToUint(cbInstanceData._m0[_809 + 5u]);
    uint _2183 = _2181.x * 14u;
    uint _2184 = _2183 + 13u;
    float _2191 = _881 + (-1.0);
    float _2196 = (cbLight._m0[_2184].x * _2191) + 1.0;
    float _2197 = (cbLight._m0[_2184].y * _2191) + 1.0;
    float _2198 = (cbLight._m0[_2184].z * _2191) + 1.0;
    float _2199 = (cbLight._m0[_2184].w * _2191) + 1.0;
    uint _2200 = _2183 + 5u;
    float _2206 = isnan(1.0) ? _2197 : (isnan(_2197) ? 1.0 : min(_2197, 1.0));
    uint _2210 = _2183 + 4u;
    float _2219 = isnan(1.0) ? _2196 : (isnan(_2196) ? 1.0 : min(_2196, 1.0));
    uint _2223 = _2183 | 1u;
    float _2234 = dot(vec3(cbLight._m0[_2183].xyz), vec3(_664, _665, _666));
    float _2237 = dot(vec3(cbLight._m0[_2223].xyz), vec3(_664, _665, _666));
    float _4410 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _4421 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
    float _2242 = (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * 0.3183098733425140380859375;
    float _2244 = (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * 0.3183098733425140380859375;
    float _2251 = ((cbLight._m0[_2200].x * _2206) * _2244) + (((cbLight._m0[_2210].x * _2172) * _2219) * _2242);
    float _2252 = ((_2206 * cbLight._m0[_2200].y) * _2244) + (((cbLight._m0[_2210].y * _2174) * _2219) * _2242);
    float _2253 = ((_2206 * cbLight._m0[_2200].z) * _2244) + (((cbLight._m0[_2210].z * _2176) * _2219) * _2242);
    uvec4 _2257 = floatBitsToUint(cbLight._m0[_2183 + 12u]);
    bool _2259 = _2257.x == 0u;
    float _2361;
    float _2363;
    float _2365;
    if (_2259)
    {
        _2361 = _2251;
        _2363 = _2252;
        _2365 = _2253;
    }
    else
    {
        uint _2369 = _2183 + 6u;
        float _2385 = (dot(vec3(cbLight._m0[_2183 + 2u].xyz), vec3(_664, _665, _666)) * 0.5) + 0.5;
        float _2386 = _2385 * _2385;
        float _4432 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2387 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _2388 = isnan(1.0) ? _2198 : (isnan(_2198) ? 1.0 : min(_2198, 1.0));
        _2361 = (((cbLight._m0[_2369].x * 0.3183098733425140380859375) * _2387) * _2388) + _2251;
        _2363 = (((cbLight._m0[_2369].y * 0.3183098733425140380859375) * _2387) * _2388) + _2252;
        _2365 = (((cbLight._m0[_2369].z * 0.3183098733425140380859375) * _2387) * _2388) + _2253;
    }
    bool _2368 = _2257.y == 0u;
    float _2423;
    float _2425;
    float _2427;
    if (_2368)
    {
        _2423 = _2361;
        _2425 = _2363;
        _2427 = _2365;
    }
    else
    {
        uint _2596 = _2183 + 7u;
        float _2612 = (dot(vec3(cbLight._m0[_2183 + 3u].xyz), vec3(_664, _665, _666)) * 0.5) + 0.5;
        float _2613 = _2612 * _2612;
        float _4448 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2614 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _2615 = isnan(1.0) ? _2199 : (isnan(_2199) ? 1.0 : min(_2199, 1.0));
        _2423 = (((cbLight._m0[_2596].x * 0.3183098733425140380859375) * _2614) * _2615) + _2361;
        _2425 = (((cbLight._m0[_2596].y * 0.3183098733425140380859375) * _2614) * _2615) + _2363;
        _2427 = (((cbLight._m0[_2596].z * 0.3183098733425140380859375) * _2614) * _2615) + _2365;
    }
    uint _2430 = _2183 + 8u;
    float _2443 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2183].w)) * _796) * 0.949999988079071044921875);
    float _2444 = _2443 * _2443;
    float _2445 = cbLight._m0[_2183].x + _746;
    float _2446 = cbLight._m0[_2183].y + _747;
    float _2447 = cbLight._m0[_2183].z + _748;
    float _2451 = inversesqrt(dot(vec3(_2445, _2446, _2447), vec3(_2445, _2446, _2447)));
    float _2452 = _2451 * _2445;
    float _2453 = _2451 * _2446;
    float _2454 = _2451 * _2447;
    float _2455 = dot(vec3(_664, _665, _666), vec3(cbLight._m0[_2183].xyz));
    float _4464 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _2458 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
    float _4475 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _2459 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
    float _2460 = dot(vec3(_664, _665, _666), vec3(_2452, _2453, _2454));
    float _4486 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _2463 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
    float _2464 = dot(vec3(cbLight._m0[_2183].xyz), vec3(_2452, _2453, _2454));
    float _4497 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2468 = _2444 * _2444;
    float _2472 = ((_2463 * _2463) * (_2468 + (-1.0))) + 1.0;
    float _2480 = exp2(log2(1.0 - (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0)))) * 5.0);
    float _2481 = 0.959999978542327880859375 - _863;
    float _2483 = 0.959999978542327880859375 - _864;
    float _2484 = 0.959999978542327880859375 - _865;
    float _2491 = 1.0 - _2444;
    float _2502 = (0.5 / (((_2459 * ((_2458 * _2491) + _2444)) + 9.9999999392252902907785028219223e-09) + (((_2459 * _2491) + _2444) * _2458))) * _2458;
    float _4508 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2504 = (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * (_2468 / ((_2472 * _2472) * 3.141590118408203125));
    uint _2518 = _2183 + 9u;
    float _2529 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2223].w)) * _796) * 0.949999988079071044921875);
    float _2530 = _2529 * _2529;
    float _2531 = cbLight._m0[_2223].x + _746;
    float _2532 = cbLight._m0[_2223].y + _747;
    float _2533 = cbLight._m0[_2223].z + _748;
    float _2537 = inversesqrt(dot(vec3(_2531, _2532, _2533), vec3(_2531, _2532, _2533)));
    float _2538 = _2537 * _2531;
    float _2539 = _2537 * _2532;
    float _2540 = _2537 * _2533;
    float _2541 = dot(vec3(_664, _665, _666), vec3(cbLight._m0[_2223].xyz));
    float _4519 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
    float _2544 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
    float _2545 = dot(vec3(_664, _665, _666), vec3(_2538, _2539, _2540));
    float _4530 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
    float _2548 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
    float _2549 = dot(vec3(cbLight._m0[_2223].xyz), vec3(_2538, _2539, _2540));
    float _4541 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
    float _2553 = _2530 * _2530;
    float _2557 = ((_2548 * _2548) * (_2553 + (-1.0))) + 1.0;
    float _2564 = exp2(log2(1.0 - (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0)))) * 5.0);
    float _2571 = 1.0 - _2530;
    float _2581 = (0.5 / (((_2459 * ((_2544 * _2571) + _2530)) + 9.9999999392252902907785028219223e-09) + (((_2459 * _2571) + _2530) * _2544))) * _2544;
    float _4552 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
    float _2583 = (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * (_2553 / ((_2557 * _2557) * 3.141590118408203125));
    float _2593 = (((((_2564 * _2481) + _866) * cbLight._m0[_2518].x) * _2583) * _2206) + ((((cbLight._m0[_2430].x * _2172) * ((_2480 * _2481) + _866)) * _2504) * _2219);
    float _2594 = (((((_2564 * _2483) + _868) * cbLight._m0[_2518].y) * _2583) * _2206) + ((((cbLight._m0[_2430].y * _2174) * ((_2480 * _2483) + _868)) * _2504) * _2219);
    float _2595 = (((((_2564 * _2484) + _869) * cbLight._m0[_2518].z) * _2583) * _2206) + ((((cbLight._m0[_2430].z * _2176) * ((_2480 * _2484) + _869)) * _2504) * _2219);
    float _2651;
    float _2653;
    float _2655;
    if (_2259)
    {
        _2651 = _2593;
        _2653 = _2594;
        _2655 = _2595;
    }
    else
    {
        uint _2657 = _2183 + 2u;
        uint _2661 = _2183 + 10u;
        float _2675 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2657].w)) * _796) * 0.949999988079071044921875);
        float _2676 = _2675 * _2675;
        float _2677 = cbLight._m0[_2657].x + _746;
        float _2678 = cbLight._m0[_2657].y + _747;
        float _2679 = cbLight._m0[_2657].z + _748;
        float _2683 = inversesqrt(dot(vec3(_2677, _2678, _2679), vec3(_2677, _2678, _2679)));
        float _2684 = _2683 * _2677;
        float _2685 = _2683 * _2678;
        float _2686 = _2683 * _2679;
        float _2687 = dot(vec3(_664, _665, _666), vec3(cbLight._m0[_2657].xyz));
        float _4563 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
        float _2690 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
        float _2691 = dot(vec3(_664, _665, _666), vec3(_2684, _2685, _2686));
        float _4574 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        float _2694 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
        float _2695 = dot(vec3(cbLight._m0[_2657].xyz), vec3(_2684, _2685, _2686));
        float _4585 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        float _2699 = _2676 * _2676;
        float _2703 = ((_2694 * _2694) * (_2699 + (-1.0))) + 1.0;
        float _2710 = exp2(log2(1.0 - (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0)))) * 5.0);
        float _2717 = 1.0 - _2676;
        float _2727 = (0.5 / (((_2459 * ((_2690 * _2717) + _2676)) + 9.9999999392252902907785028219223e-09) + (((_2459 * _2717) + _2676) * _2690))) * _2690;
        float _4596 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
        float _2729 = (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (_2699 / ((_2703 * _2703) * 3.141590118408203125));
        float _2730 = isnan(1.0) ? _2198 : (isnan(_2198) ? 1.0 : min(_2198, 1.0));
        _2651 = (((((_2710 * _2481) + _866) * cbLight._m0[_2661].x) * _2729) * _2730) + _2593;
        _2653 = (((((_2710 * _2483) + _868) * cbLight._m0[_2661].y) * _2729) * _2730) + _2594;
        _2655 = (((((_2710 * _2484) + _869) * cbLight._m0[_2661].z) * _2729) * _2730) + _2595;
    }
    float _2761;
    float _2763;
    float _2765;
    if (_2368)
    {
        _2761 = _2651;
        _2763 = _2653;
        _2765 = _2655;
    }
    else
    {
        uint _2772 = _2183 + 3u;
        uint _2776 = _2183 + 11u;
        float _2790 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2772].w)) * _796) * 0.949999988079071044921875);
        float _2791 = _2790 * _2790;
        float _2792 = cbLight._m0[_2772].x + _746;
        float _2793 = cbLight._m0[_2772].y + _747;
        float _2794 = cbLight._m0[_2772].z + _748;
        float _2798 = inversesqrt(dot(vec3(_2792, _2793, _2794), vec3(_2792, _2793, _2794)));
        float _2799 = _2798 * _2792;
        float _2800 = _2798 * _2793;
        float _2801 = _2798 * _2794;
        float _2802 = dot(vec3(_664, _665, _666), vec3(cbLight._m0[_2772].xyz));
        float _4612 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
        float _2805 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
        float _2806 = dot(vec3(_664, _665, _666), vec3(_2799, _2800, _2801));
        float _4623 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
        float _2809 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
        float _2810 = dot(vec3(cbLight._m0[_2772].xyz), vec3(_2799, _2800, _2801));
        float _4634 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        float _2814 = _2791 * _2791;
        float _2818 = ((_2809 * _2809) * (_2814 + (-1.0))) + 1.0;
        float _2825 = exp2(log2(1.0 - (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0)))) * 5.0);
        float _2832 = 1.0 - _2791;
        float _2842 = (0.5 / (((_2459 * ((_2805 * _2832) + _2791)) + 9.9999999392252902907785028219223e-09) + (((_2459 * _2832) + _2791) * _2805))) * _2805;
        float _4645 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
        float _2844 = (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * (_2814 / ((_2818 * _2818) * 3.141590118408203125));
        float _2845 = isnan(1.0) ? _2199 : (isnan(_2199) ? 1.0 : min(_2199, 1.0));
        _2761 = (((((_2825 * _2481) + _866) * cbLight._m0[_2776].x) * _2844) * _2845) + _2651;
        _2763 = (((((_2825 * _2483) + _868) * cbLight._m0[_2776].y) * _2844) * _2845) + _2653;
        _2765 = (((((_2825 * _2484) + _869) * cbLight._m0[_2776].z) * _2844) * _2845) + _2655;
    }
    float _2910;
    float _2912;
    float _2914;
    float _2916;
    float _2918;
    float _2920;
    if (_2181.y == 0u)
    {
        uvec4 _2866 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2867 = _2866.x;
        uint _2878 = uint((float(_2866.y) * floor(float(uint(cbSceneParam._m0[85u].y * _755) / _2867))) + floor(float(uint(cbSceneParam._m0[85u].x * _754) / _2867)));
        float _2888 = (log2(_1959 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2889 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
        uint _2892 = uint(isnan(14.0) ? _2889 : (isnan(_2889) ? 14.0 : min(_2889, 14.0)));
        uvec4 _2897 = texelFetch(g_lightClusterGridBuffer, int(((_2892 << 2u) + (_2878 << 6u)) >> 2u));
        uint _2898 = _2897.x;
        uint _2899 = _2866.z;
        float _2979;
        float _2981;
        float _2983;
        float _2985;
        float _2987;
        float _2989;
        if (((((1u << ((_2899 >> 4u) & 15u)) + 4294967295u) & _2898) == 0u) || ((_2899 & 240u) == 0u))
        {
            _2979 = 0.0;
            _2981 = 0.0;
            _2983 = 0.0;
            _2985 = 0.0;
            _2987 = 0.0;
            _2989 = 0.0;
        }
        else
        {
            float _2980;
            float _2982;
            float _2984;
            float _2986;
            float _2988;
            float _2990;
            float _3123 = 0.0;
            float _3124 = 0.0;
            float _3125 = 0.0;
            float _3126 = 0.0;
            float _3127 = 0.0;
            float _3128 = 0.0;
            uint _3129 = 0u;
            uint _3138;
            bool _3139;
            for (;;)
            {
                _3138 = texelFetch(g_lightClassification, int((((_2892 << 5u) + (_2878 << 9u)) + (_3129 << 2u)) >> 2u)).x;
                _3139 = _3138 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3139)
                {
                    frontier_phi_68_pred = _3128;
                    frontier_phi_68_pred_1 = _3127;
                    frontier_phi_68_pred_2 = _3126;
                    frontier_phi_68_pred_3 = _3124;
                    frontier_phi_68_pred_4 = _3123;
                    frontier_phi_68_pred_5 = _3125;
                }
                else
                {
                    float _3247;
                    float _3248;
                    float _3249;
                    float _3250;
                    float _3251;
                    float _3252;
                    uint _3253;
                    _3247 = _3123;
                    _3248 = _3124;
                    _3249 = _3125;
                    _3250 = _3126;
                    _3251 = _3127;
                    _3252 = _3128;
                    _3253 = _3138;
                    float _3179;
                    float _3180;
                    float _3181;
                    float _3182;
                    float _3183;
                    float _3184;
                    for (;;)
                    {
                        uint _3257 = uint(findLSB(_3253)) + (_3129 << 5u);
                        uint _3254 = (_3253 + 4294967295u) & _3253;
                        uint _3259 = _3257 * 48u;
                        vec4 _3273 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3259)).x, texelFetch(g_PointLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3259 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3259 + 3u)).x));
                        uint _3279 = (_3257 * 48u) + 4u;
                        vec4 _3292 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3279)).x, texelFetch(g_PointLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3279 + 3u)).x));
                        uint _3298 = (_3257 * 48u) + 8u;
                        vec3 _3309 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3298)).x, texelFetch(g_PointLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3298 + 2u)).x));
                        float _3313 = _3273.x - _1957;
                        float _3314 = _3273.y - _1958;
                        float _3315 = _3273.z - _1959;
                        float _3316 = dot(vec3(_3313, _3314, _3315), vec3(_3313, _3314, _3315));
                        float _3319 = inversesqrt(_3316);
                        float _3320 = _3319 * _3313;
                        float _3321 = _3319 * _3314;
                        float _3322 = _3319 * _3315;
                        float _3323 = dot(vec3(_777, _780, _783), vec3(_3320, _3321, _3322));
                        float _3328 = 1.0 - (_3316 * _3273.w);
                        float _4671 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                        float _3329 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                        float _3330 = sqrt(_3316) * _3292.w;
                        float _3333 = 1.39999997615814208984375 / (_3330 + 1.39999997615814208984375);
                        float _3334 = _3333 * _3333;
                        float _3337 = ((1.0 - _3334) * _3323) + _3334;
                        float _3340 = _3330 * _3330;
                        float _3344 = ((isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0))) * _3329) / ((_3340 * 0.699999988079071044921875) + 1.0);
                        float _3348 = (-0.0) - _1957;
                        float _3349 = (-0.0) - _1958;
                        float _3350 = (-0.0) - _1959;
                        float _3354 = inversesqrt(dot(vec3(_3348, _3349, _3350), vec3(_3348, _3349, _3350)));
                        float _3355 = _3354 * _3348;
                        float _3356 = _3354 * _3349;
                        float _3357 = _3354 * _3350;
                        float _3364 = exp2(log2(1.0 / ((_3340 * 3.5) + 5.0)) * 0.25);
                        float _3365 = 1.0 - _897;
                        float _3372 = sqrt(1.0 - ((1.0 - (_3365 * _3365)) * (1.0 - (_3364 * _3364))));
                        float _3373 = _3372 * _3372;
                        float _3374 = _3373 * _3373;
                        float _3375 = _3355 + _3320;
                        float _3376 = _3356 + _3321;
                        float _3377 = _3357 + _3322;
                        float _3381 = inversesqrt(dot(vec3(_3375, _3376, _3377), vec3(_3375, _3376, _3377)));
                        float _3385 = dot(vec3(_777, _780, _783), vec3(_3355, _3356, _3357));
                        float _4687 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                        float _3388 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
                        float _3389 = dot(vec3(_777, _780, _783), vec3(_3381 * _3375, _3381 * _3376, _3381 * _3377));
                        float _4698 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                        float _3392 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                        float _3396 = ((_3392 * _3392) * (_3374 + (-1.0))) + 1.0;
                        float _3397 = _3333 * _3373;
                        float _3398 = _3397 * _3397;
                        float _3401 = ((1.0 - _3398) * _3323) + _3398;
                        float _4709 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                        float _3402 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                        float _3403 = 1.0 - _3373;
                        float _3413 = (0.5 / (((_3402 * ((_3388 * _3403) + _3373)) + 9.9999999392252902907785028219223e-09) + (((_3402 * _3403) + _3373) * _3388))) * _3402;
                        float _4720 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                        float _3424 = (((_3374 * 3.1415927410125732421875) * (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0)))) / ((_3396 * _3396) * ((_3340 * 2.1991131305694580078125) + 3.141590118408203125))) * _3329;
                        _3182 = (_3344 * _3292.x) + _3250;
                        _3183 = (_3344 * _3292.y) + _3251;
                        _3184 = (_3344 * _3292.z) + _3252;
                        _3179 = (_3424 * _3309.x) + _3247;
                        _3180 = (_3424 * _3309.y) + _3248;
                        _3181 = (_3424 * _3309.z) + _3249;
                        if (_3254 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3247 = _3179;
                            _3248 = _3180;
                            _3249 = _3181;
                            _3250 = _3182;
                            _3251 = _3183;
                            _3252 = _3184;
                            _3253 = _3254;
                        }
                    }
                    frontier_phi_68_pred = _3184;
                    frontier_phi_68_pred_1 = _3183;
                    frontier_phi_68_pred_2 = _3182;
                    frontier_phi_68_pred_3 = _3180;
                    frontier_phi_68_pred_4 = _3179;
                    frontier_phi_68_pred_5 = _3181;
                }
                _2990 = frontier_phi_68_pred;
                _2988 = frontier_phi_68_pred_1;
                _2986 = frontier_phi_68_pred_2;
                _2982 = frontier_phi_68_pred_3;
                _2980 = frontier_phi_68_pred_4;
                _2984 = frontier_phi_68_pred_5;
                uint _3130 = _3129 + 1u;
                if (_3130 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3123 = _2980;
                    _3124 = _2982;
                    _3125 = _2984;
                    _3126 = _2986;
                    _3127 = _2988;
                    _3128 = _2990;
                    _3129 = _3130;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2979 = _2980;
            _2981 = _2982;
            _2983 = _2984;
            _2985 = _2986;
            _2987 = _2988;
            _2989 = _2990;
        }
        uvec4 _2993 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2994 = _2993.z;
        uint _2996 = (_2994 >> 8u) & 15u;
        float _3091;
        float _3093;
        float _3095;
        float _3097;
        float _3099;
        float _3101;
        if (((4294967295u << _2996) & _2898) == 0u)
        {
            _3091 = _2979;
            _3093 = _2981;
            _3095 = _2983;
            _3097 = _2985;
            _3099 = _2987;
            _3101 = _2989;
        }
        else
        {
            float _3116 = inversesqrt(dot(vec3(_1957, _1958, _1959), vec3(_1957, _1958, _1959)));
            float _3117 = _3116 * _1957;
            float _3118 = _3116 * _1958;
            float _3119 = _3116 * _1959;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2996 < ((_2994 >> 12u) & 15u))
            {
                float _3092;
                float _3094;
                float _3096;
                float _3098;
                float _3100;
                float _3102;
                float _3230 = _2979;
                float _3231 = _2981;
                float _3232 = _2983;
                float _3233 = _2985;
                float _3234 = _2987;
                float _3235 = _2989;
                uint _3236 = _2996;
                uint _3245;
                bool _3246;
                for (;;)
                {
                    _3245 = texelFetch(g_lightClassification, int((((_2892 << 5u) + (_2878 << 9u)) + (_3236 << 2u)) >> 2u)).x;
                    _3246 = _3245 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3246)
                    {
                        frontier_phi_74_pred = _3232;
                        frontier_phi_74_pred_1 = _3231;
                        frontier_phi_74_pred_2 = _3230;
                        frontier_phi_74_pred_3 = _3235;
                        frontier_phi_74_pred_4 = _3234;
                        frontier_phi_74_pred_5 = _3233;
                    }
                    else
                    {
                        float _3429;
                        float _3430;
                        float _3431;
                        float _3432;
                        float _3433;
                        float _3434;
                        float _3724;
                        float _3725;
                        float _3726;
                        float _3727;
                        float _3728;
                        float _3729;
                        float _3442 = _3230;
                        float _3443 = _3231;
                        float _3444 = _3232;
                        float _3445 = _3233;
                        float _3446 = _3234;
                        float _3447 = _3235;
                        uint _3448 = _3245;
                        uint _3449;
                        vec4 _3474;
                        float _3475;
                        vec4 _3490;
                        vec3 _3502;
                        vec4 _3518;
                        vec4 _3533;
                        float _3580;
                        bool _3581;
                        for (;;)
                        {
                            uint _3459 = ((_3236 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3448));
                            _3449 = (_3448 + 4294967295u) & _3448;
                            uint _3461 = _3459 * 40u;
                            _3474 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3461)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 3u)).x));
                            _3475 = _3474.w;
                            uint _3477 = (_3459 * 40u) + 4u;
                            _3490 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3477)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 3u)).x));
                            uint _3492 = (_3459 * 40u) + 8u;
                            _3502 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3492)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 2u)).x));
                            uint _3505 = (_3459 * 40u) + 16u;
                            _3518 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3505)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 3u)).x));
                            uint _3520 = (_3459 * 40u) + 20u;
                            _3533 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 3u)).x));
                            uint _3536 = (_3459 * 40u) + 24u;
                            vec4 _3549 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3536)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 3u)).x));
                            uint _3555 = (_3459 * 40u) + 28u;
                            vec4 _3568 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3555)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 3u)).x));
                            _3580 = fma(_1959, _3568.z, fma(_1958, _3568.y, _3568.x * _1957)) + _3568.w;
                            _3581 = !((fma(_1959, _3549.z, fma(_1958, _3549.y, _3549.x * _1957)) + _3549.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3581)
                            {
                                float _3608 = _3474.x - _1957;
                                float _3609 = _3474.y - _1958;
                                float _3610 = _3474.z - _1959;
                                float _3611 = dot(vec3(_3608, _3609, _3610), vec3(_3608, _3609, _3610));
                                float _3614 = inversesqrt(_3611);
                                float _3615 = _3614 * _3608;
                                float _3616 = _3614 * _3609;
                                float _3617 = _3614 * _3610;
                                float _3621 = 1.0 - (_3611 / (_3475 * _3475));
                                float _4731 = isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0));
                                float _3622 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                                float _3626 = sqrt(_3611) * _3490.w;
                                float _3628 = 1.39999997615814208984375 / (_3626 + 1.39999997615814208984375);
                                float _3629 = _3628 * _3628;
                                float _3632 = ((1.0 - _3629) * dot(vec3(_3615, _3616, _3617), vec3(_777, _780, _783))) + _3629;
                                float _3635 = _3626 * _3626;
                                float _3639 = (fma(_1959, _3518.z, fma(_1958, _3518.y, _3518.x * _1957)) + _3518.w) / _3580;
                                float _3640 = (fma(_1959, _3533.z, fma(_1958, _3533.y, _3533.x * _1957)) + _3533.w) / _3580;
                                float _3644 = 1.0 - dot(vec2(_3639, _3640), vec2(_3639, _3640));
                                float _4747 = isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0));
                                float _3645 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
                                float _3646 = _3645 * (((isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0))) * _3622) / ((_3635 * 0.699999988079071044921875) + 1.0));
                                float _3658 = exp2(log2(1.0 / ((_3635 * 3.5) + 5.0)) * 0.25);
                                float _3659 = 1.0 - _897;
                                float _3666 = sqrt(1.0 - ((1.0 - (_3659 * _3659)) * (1.0 - (_3658 * _3658))));
                                float _3667 = _3666 * _3666;
                                float _3668 = _3667 * _3667;
                                float _3669 = _3615 - _3117;
                                float _3670 = _3616 - _3118;
                                float _3671 = _3617 - _3119;
                                float _3675 = inversesqrt(dot(vec3(_3669, _3670, _3671), vec3(_3669, _3670, _3671)));
                                float _3679 = dot(vec3(_777, _780, _783), vec3((-0.0) - _3117, (-0.0) - _3118, (-0.0) - _3119));
                                float _4758 = isnan(0.0) ? _3679 : (isnan(_3679) ? 0.0 : max(_3679, 0.0));
                                float _3682 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
                                float _3683 = dot(vec3(_777, _780, _783), vec3(_3675 * _3669, _3675 * _3670, _3675 * _3671));
                                float _4769 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                                float _3686 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
                                float _3690 = ((_3686 * _3686) * (_3668 + (-1.0))) + 1.0;
                                float _3691 = _3628 * _3667;
                                float _3692 = _3691 * _3691;
                                float _3698 = ((1.0 - _3692) * dot(vec3(_777, _780, _783), vec3(_3615, _3616, _3617))) + _3692;
                                float _4780 = isnan(0.0) ? _3698 : (isnan(_3698) ? 0.0 : max(_3698, 0.0));
                                float _3699 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
                                float _3700 = 1.0 - _3667;
                                float _3710 = (0.5 / (((_3699 * ((_3682 * _3700) + _3667)) + 9.9999999392252902907785028219223e-09) + (((_3699 * _3700) + _3667) * _3682))) * _3699;
                                float _4791 = isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0));
                                float _3720 = (_3645 * _3622) * (((_3668 * 3.1415927410125732421875) * (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0)))) / ((_3690 * _3690) * ((_3635 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3720 * _3502.z;
                                frontier_phi_80_pred_1 = _3720 * _3502.y;
                                frontier_phi_80_pred_2 = _3720 * _3502.x;
                                frontier_phi_80_pred_3 = _3646 * _3490.z;
                                frontier_phi_80_pred_4 = _3646 * _3490.y;
                                frontier_phi_80_pred_5 = _3646 * _3490.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3726 = frontier_phi_80_pred;
                            _3725 = frontier_phi_80_pred_1;
                            _3724 = frontier_phi_80_pred_2;
                            _3729 = frontier_phi_80_pred_3;
                            _3728 = frontier_phi_80_pred_4;
                            _3727 = frontier_phi_80_pred_5;
                            _3432 = _3727 + _3445;
                            _3433 = _3728 + _3446;
                            _3434 = _3729 + _3447;
                            _3429 = _3724 + _3442;
                            _3430 = _3725 + _3443;
                            _3431 = _3726 + _3444;
                            if (_3449 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3442 = _3429;
                                _3443 = _3430;
                                _3444 = _3431;
                                _3445 = _3432;
                                _3446 = _3433;
                                _3447 = _3434;
                                _3448 = _3449;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3431;
                        frontier_phi_74_pred_1 = _3430;
                        frontier_phi_74_pred_2 = _3429;
                        frontier_phi_74_pred_3 = _3434;
                        frontier_phi_74_pred_4 = _3433;
                        frontier_phi_74_pred_5 = _3432;
                    }
                    _3096 = frontier_phi_74_pred;
                    _3094 = frontier_phi_74_pred_1;
                    _3092 = frontier_phi_74_pred_2;
                    _3102 = frontier_phi_74_pred_3;
                    _3100 = frontier_phi_74_pred_4;
                    _3098 = frontier_phi_74_pred_5;
                    uint _3237 = _3236 + 1u;
                    if (_3237 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3230 = _3092;
                        _3231 = _3094;
                        _3232 = _3096;
                        _3233 = _3098;
                        _3234 = _3100;
                        _3235 = _3102;
                        _3236 = _3237;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3100;
                frontier_phi_62_63_ladder_1 = _3098;
                frontier_phi_62_63_ladder_2 = _3096;
                frontier_phi_62_63_ladder_3 = _3102;
                frontier_phi_62_63_ladder_4 = _3094;
                frontier_phi_62_63_ladder_5 = _3092;
            }
            else
            {
                frontier_phi_62_63_ladder = _2987;
                frontier_phi_62_63_ladder_1 = _2985;
                frontier_phi_62_63_ladder_2 = _2983;
                frontier_phi_62_63_ladder_3 = _2989;
                frontier_phi_62_63_ladder_4 = _2981;
                frontier_phi_62_63_ladder_5 = _2979;
            }
            _3091 = frontier_phi_62_63_ladder_5;
            _3093 = frontier_phi_62_63_ladder_4;
            _3095 = frontier_phi_62_63_ladder_2;
            _3097 = frontier_phi_62_63_ladder_1;
            _3099 = frontier_phi_62_63_ladder;
            _3101 = frontier_phi_62_63_ladder_3;
        }
        float _3106 = isnan(1.0) ? _881 : (isnan(_881) ? 1.0 : min(_881, 1.0));
        _2910 = (_3106 * _3097) + _2423;
        _2912 = (_3106 * _3099) + _2425;
        _2914 = (_3106 * _3101) + _2427;
        _2916 = ((_3091 * _866) * _3106) + _2761;
        _2918 = ((_3093 * _868) * _3106) + _2763;
        _2920 = ((_3095 * _869) * _3106) + _2765;
    }
    else
    {
        _2910 = _2423;
        _2912 = _2425;
        _2914 = _2427;
        _2916 = _2761;
        _2918 = _2763;
        _2920 = _2765;
    }
    float _4807 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _4818 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _4829 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _4840 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _2945 = cbInstanceData._m0[_809 + 6u].w * (isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0)));
    float _2950 = _754 / cbSceneParam._m0[86u].x;
    float _2951 = _755 / cbSceneParam._m0[86u].y;
    vec4 _2965 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2950, _2951, (log2((isnan(cbSceneParam._m0[77u].w) ? _688 : (isnan(_688) ? cbSceneParam._m0[77u].w : min(_688, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2967 = _2965.x;
    float _2968 = _2965.y;
    float _2969 = _2965.z;
    float _2970 = _2965.w;
    float _3041;
    float _3043;
    float _3045;
    float _3047;
    if (_688 > cbSceneParam._m0[78u].w)
    {
        float _3004 = isnan(_688) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _688 : min(cbSceneParam._m0[80u].w, _688));
        float _3005 = _3004 / _688;
        float _3016 = _3005 * _739;
        float _3017 = _740 * _3005;
        float _3018 = (-0.0) - _3017;
        float _3019 = _3005 * _741;
        float _3021 = (cbSceneParam._m0[77u].w * _3018) / _3004;
        float _3022 = _3021 + cbSceneParam._m0[79u].w;
        float _3023 = cbSceneParam._m0[79u].w - _3017;
        float _3029 = sqrt(((_3016 * _3016) + (_3017 * _3017)) + (_3019 * _3019));
        float _3032 = (1.0 - (cbSceneParam._m0[77u].w / _3004)) * _3029;
        float _3037 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3039 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3192;
        if (abs((_3018 - _3021) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3192 = ((((_3022 > 0.0) ? exp2(_3037 * _3022) : (2.0 - exp2(_3039 * _3022))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3032;
        }
        else
        {
            float _3152 = 1.0 / cbSceneParam._m0[80u].x;
            float _3153 = isnan(_3023) ? _3022 : (isnan(_3022) ? _3023 : max(_3022, _3023));
            float _3154 = isnan(_3023) ? _3022 : (isnan(_3022) ? _3023 : min(_3022, _3023));
            float _3163 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : min(_3153, 0.0));
            float _3164 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : min(_3154, 0.0));
            _3192 = ((abs(_3029 / _3018) * cbSceneParam._m0[80u].y) * ((((_3163 - _3164) * 2.0) - ((exp2(_3037 * (isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0)))) - exp2(_3037 * (isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0))))) * _3152)) - ((exp2(_3039 * _3163) - exp2(_3039 * _3164)) * _3152))) + (_3032 * cbSceneParam._m0[80u].z);
        }
        vec4 _3194 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2950, _2951, 1.0), 0.0);
        float _3203 = exp2((_3192 * (-1.44269502162933349609375)) * (1.0 - _3194.w));
        float _3204 = log2(_3203);
        float _3220 = log2(_2970);
        _3041 = (exp2(_3220 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3204 * cbSceneParam._m0[78u].x)) * _3194.x) / cbSceneParam._m0[78u].x)) + _2967;
        _3043 = (exp2(_3220 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3204 * cbSceneParam._m0[78u].y)) * _3194.y) / cbSceneParam._m0[78u].y)) + _2968;
        _3045 = (exp2(_3220 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3204 * cbSceneParam._m0[78u].z)) * _3194.z) / cbSceneParam._m0[78u].z)) + _2969;
        _3047 = _3203 * _2970;
    }
    else
    {
        _3041 = _2967;
        _3043 = _2968;
        _3045 = _2969;
        _3047 = _2970;
    }
    float _3059 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3060 = _3059 == 3.0;
    float _3061 = log2(_3047);
    float _3068 = exp2(_3061 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0))) * (_2910 + ((isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))) * _881))) + ((_2916 + ((isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0))) * _1691)) * cbPerFrame._m0[3u].x));
    float _3069 = exp2(_3061 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0))) * (_2912 + ((isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))) * _881))) + ((_2918 + ((isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0))) * _1691)) * cbPerFrame._m0[3u].x));
    float _3070 = exp2(_3061 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0))) * (_2914 + ((isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))) * _881))) + ((_2920 + ((isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0))) * _1691)) * cbPerFrame._m0[3u].x));
    float _3079 = (_3059 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3079 * (_3060 ? _3068 : (_3068 + (cbSceneParam._m0[72u].w * _3041)));
    SV_Target.y = _3079 * (_3060 ? _3069 : (_3069 + (cbSceneParam._m0[72u].w * _3043)));
    SV_Target.z = _3079 * (_3060 ? _3070 : (_3070 + (cbSceneParam._m0[72u].w * _3045)));
    SV_Target.w = _2945;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2945;
}


