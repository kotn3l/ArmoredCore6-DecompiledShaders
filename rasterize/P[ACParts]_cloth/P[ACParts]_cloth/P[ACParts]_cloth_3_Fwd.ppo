#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_snp_0_Texture2D_2;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D P_ACParts_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D P_ACParts_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D P_ACParts_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_snp_0_Texture2D_1;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_snp_0_Texture2D_10;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_snp_0_Texture2D_11;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_snp_0_Texture2D_12;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_snp_0_Texture2D_13;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1252;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239;
    float _240;
    float _241;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _239 = (-0.0) - _225;
        _240 = (-0.0) - _226;
        _241 = (-0.0) - _227;
    }
    else
    {
        _239 = _225;
        _240 = _226;
        _241 = _227;
    }
    float _251 = cbMtdParam._m0[21u].z + TEXCOORD.y;
    vec4 _264 = texture(sampler2D(P_ACParts_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (_251 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _269 = _264.z;
    float _270 = _264.w;
    float _278 = exp2(log2(_269 * cbMtdParam._m0[20u].w) * cbMtdParam._m0[19u].y);
    float _279 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _280 = isnan(1.0) ? _279 : (isnan(_279) ? 1.0 : min(_279, 1.0));
    float _286 = exp2(log2(1.0 - _270) * cbMtdParam._m0[20u].y);
    vec4 _298 = texture(sampler2D(P_ACParts_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _251) + cbTextureTilingScale._m0[0u].w));
    vec4 _324 = texture(sampler2D(P_ACParts_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _251) + cbTextureTilingScale._m0[3u].w));
    float _335 = cbMtdParam._m0[9u].x * _324.x;
    float _336 = cbMtdParam._m0[9u].y * _324.y;
    float _337 = cbMtdParam._m0[9u].z * _324.z;
    float _344 = (((cbMtdParam._m0[10u].x * _298.x) - _335) * _286) + _335;
    float _345 = (((cbMtdParam._m0[10u].y * _298.y) - _336) * _286) + _336;
    float _346 = (((cbMtdParam._m0[10u].z * _298.z) - _337) * _286) + _337;
    float _350 = exp2(log2(_270) * cbMtdParam._m0[21u].y);
    vec4 _362 = texture(sampler2D(P_ACParts_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _251) + cbTextureTilingScale._m0[10u].w));
    vec4 _396 = texture(sampler2D(P_ACParts_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _251) + cbTextureTilingScale._m0[11u].w));
    float _407 = cbMtdParam._m0[18u].x * _396.x;
    float _408 = cbMtdParam._m0[18u].y * _396.y;
    float _409 = cbMtdParam._m0[18u].z * _396.z;
    vec4 _430 = texture(sampler2D(P_ACParts_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _251) + cbTextureTilingScale._m0[1u].w));
    float _438 = ((((((((cbMtdParam._m0[17u].x * _362.x) - _344) * _350) + _344) - _407) * _280) + _407) * 4.55000019073486328125) * _430.x;
    float _440 = ((((((((cbMtdParam._m0[17u].y * _362.y) - _345) * _350) + _345) - _408) * _280) + _408) * 4.55000019073486328125) * _430.y;
    float _442 = ((((((((cbMtdParam._m0[17u].z * _362.z) - _346) * _350) + _346) - _409) * _280) + _409) * 4.55000019073486328125) * _430.z;
    float _443 = _430.w * _298.w;
    vec4 _456 = texture(sampler2D(P_ACParts_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _251) + cbTextureTilingScale._m0[5u].w));
    float _458 = _456.x;
    float _477 = (((1.0 - _458) + texture(sampler2D(P_ACParts_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _251) + cbTextureTilingScale._m0[4u].w)).x) * _280) + _458;
    float _497 = (((texture(sampler2D(P_ACParts_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _251) + cbTextureTilingScale._m0[6u].w)).x - _477) + cbMtdParam._m0[20u].z) * _286) + _477;
    float _520 = (((texture(sampler2D(P_ACParts_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - _497) + cbMtdParam._m0[22u].y) * _350) + _497;
    vec4 _533 = texture(sampler2D(P_ACParts_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * _251) + cbTextureTilingScale._m0[12u].w));
    vec4 _552 = texture(sampler2D(P_ACParts_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _251) + cbTextureTilingScale._m0[13u].w));
    float _554 = _552.x;
    float _555 = _552.y;
    float _558 = cbMtdParam._m0[19u].x + _552.z;
    float _561 = (((cbMtdParam._m0[20u].x + _533.z) - _558) * _286) + _558;
    vec4 _574 = texture(sampler2D(P_ACParts_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _251) + cbTextureTilingScale._m0[14u].w));
    vec4 _599 = texture(sampler2D(P_ACParts_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _251) + cbTextureTilingScale._m0[15u].w));
    float _601 = _599.x;
    float _602 = _599.y;
    float _605 = cbMtdParam._m0[21u].x + _599.z;
    float _608 = ((((_269 * 2.0) * ((((_574.z - _561) + cbMtdParam._m0[22u].x) * _350) + _561)) - _605) * _280) + _605;
    float _619 = ((_533.x - _554) * _286) + _554;
    float _620 = ((_533.y - _555) * _286) + _555;
    float _635 = (((((((_574.x - _619) * _350) + _619) - _601) * _280) + _601) * 2.0) + (-1.0);
    float _636 = (((((((_574.y - _620) * _350) + _620) - _602) * _280) + _602) * 2.0) + (-1.0);
    float _637 = dot(vec2(_635, _636), vec2(_635, _636));
    float _3592 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _642 = sqrt(1.0 - (isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0))));
    float _645 = _635 + (cbMtdParam._m0[21u].w * ((_264.x * 2.0) + (-1.0)));
    float _646 = _636 + (cbMtdParam._m0[21u].w * ((_264.y * 2.0) + (-1.0)));
    float _649 = fma(_642, _239, fma(_646, _231 * TANGENT.x, (_217 * _209) * _645));
    float _652 = fma(_642, _240, fma(_646, _231 * TANGENT.y, (_217 * _210) * _645));
    float _655 = fma(_642, _241, fma(_646, _231 * TANGENT.z, (_217 * _211) * _645));
    float _659 = inversesqrt(dot(vec3(_649, _652, _655), vec3(_649, _652, _655)));
    float _660 = _659 * _649;
    float _661 = _659 * _652;
    float _662 = _659 * _655;
    float _3603 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _663 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
    float _3614 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _664 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
    float _3625 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _3636 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _3647 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _3658 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _668 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
    float _684 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _725 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _735 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _725);
    float _736 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _725);
    float _737 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _725);
    float _741 = inversesqrt(dot(vec3(_735, _736, _737), vec3(_735, _736, _737)));
    float _742 = _735 * _741;
    float _743 = _736 * _741;
    float _744 = _737 * _741;
    float _750 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _751 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _753 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _755 = _753.w;
    float _773 = fma(_662, cbSceneParam._m0[5u].z, fma(_661, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _660));
    float _776 = fma(_662, cbSceneParam._m0[6u].z, fma(_661, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _660));
    float _779 = fma(_662, cbSceneParam._m0[7u].z, fma(_661, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _660));
    vec4 _781 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _792 = (((_781.y - _664) + (_781.w * _664)) * cbMtdParam._m0[3u].x) + _664;
    uint _805 = uint(roundEven(NORMAL.w)) * 13u;
    uint _807 = (_805 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _813 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0)))) * cbInstanceData._m0[_807].x;
    float _814 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0)))) * cbInstanceData._m0[_807].y;
    float _815 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0)))) * cbInstanceData._m0[_807].z;
    float _3669 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _816 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _3680 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _817 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
    float _3691 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _818 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    vec4 _819 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _824 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _835 = (((_824.x - _668) + (_824.w * _668)) * cbMtdParam._m0[3u].x) + _668;
    float _848 = (cbMtdParam._m0[3u].x * (((_816 * _755) - _816) + _819.x)) + _816;
    float _849 = (cbMtdParam._m0[3u].x * (((_817 * _755) - _817) + _819.y)) + _817;
    float _850 = (cbMtdParam._m0[3u].x * (((_818 * _755) - _818) + _819.z)) + _818;
    float _851 = 1.0 - _835;
    float _852 = _851 * _848;
    float _853 = _851 * _849;
    float _854 = _851 * _850;
    float _859 = (_848 + (-0.039999999105930328369140625)) * _835;
    float _860 = (_849 + (-0.039999999105930328369140625)) * _835;
    float _861 = (_850 + (-0.039999999105930328369140625)) * _835;
    float _862 = _859 + 0.039999999105930328369140625;
    float _864 = _860 + 0.039999999105930328369140625;
    float _865 = _861 + 0.039999999105930328369140625;
    vec4 _874 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _750, cbSceneParam._m0[86u].y * _751));
    float _877 = _874.x * TEXCOORD_4;
    float _878 = dot(vec3(_660, _661, _662), vec3(_742, _743, _744));
    float _881 = _878 * 2.0;
    float _885 = (_881 * _660) - _742;
    float _886 = (_881 * _661) - _743;
    float _887 = (_881 * _662) - _744;
    float _891 = abs(dot(vec3(_742, _743, _744), vec3(_660, _661, _662)));
    float _3702 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _893 = sqrt(_792);
    float _906 = exp2((_893 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_893 * 3.0));
    float _912 = (1.0 - _906) * ((_893 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _913 = _906 * _893;
    float _941 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _945 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _949 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1251;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _976 = fma(_949, cbModelParam._m0[26u].z, fma(_945, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _941));
        float _980 = fma(_949, cbModelParam._m0[27u].z, fma(_945, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _941));
        float _984 = fma(_949, cbModelParam._m0[28u].z, fma(_945, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _941));
        float _1009 = _941 + _660;
        float _1010 = _945 + _661;
        float _1011 = _949 + _662;
        float _1021 = fma(_1011, cbModelParam._m0[26u].z, fma(_1010, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1009)) - _976;
        float _1022 = fma(_1011, cbModelParam._m0[27u].z, fma(_1010, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1009)) - _980;
        float _1023 = fma(_1011, cbModelParam._m0[28u].z, fma(_1010, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1009)) - _984;
        float _1027 = inversesqrt(dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023)));
        float _1040 = ((_1027 * _1021) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_976 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1041 = ((_1027 * _1022) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_980 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1042 = ((_1027 * _1023) / cbModelParam._m0[34u].z) + ((((((_984 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1045 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        vec4 _1059 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        vec4 _1066 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        float _1079 = exp2((_1045.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1045.x + (-0.5));
        float _1081 = _1079 * (_1045.y + (-0.5));
        float _1082 = _1079 * (_1045.z + (-0.5));
        float _1089 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1052.x + (-0.5));
        float _1091 = _1089 * (_1052.y + (-0.5));
        float _1092 = _1089 * (_1052.z + (-0.5));
        float _1099 = exp2((_1059.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1059.x + (-0.5));
        float _1101 = _1099 * (_1059.y + (-0.5));
        float _1102 = _1099 * (_1059.z + (-0.5));
        float _1109 = exp2((_1066.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1066.x + (-0.5));
        float _1111 = _1109 * (_1066.y + (-0.5));
        float _1112 = _1109 * (_1066.z + (-0.5));
        float _1113 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1114 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1115 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1116 = _1080 * 0.5;
        float _1117 = _1090 * 0.5;
        float _1118 = _1100 * 0.5;
        float _1119 = dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118));
        float _1124 = (_1119 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1119);
        float _1133 = (dot(vec3(_660, _661, _662), vec3(_1124 * _1116, _1124 * _1117, _1124 * _1118)) + 1.0) * 0.5;
        float _3728 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1143 = sqrt(((_1117 * _1117) + (_1116 * _1116)) + (_1118 * _1118)) / (_1113 + 9.9999997473787516355514526367188e-06);
        float _3739 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1145 = _1144 * 2.0;
        float _1149 = (1.0 - _1144) / (_1144 + 1.0);
        float _3750 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1159 = ((((1.0 - _1150) * (_1145 + 2.0)) * exp2(log2(isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * (_1145 + 1.0))) + _1150) * _1113;
        float _1160 = _1081 * 0.5;
        float _1161 = _1091 * 0.5;
        float _1162 = _1101 * 0.5;
        float _1163 = dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162));
        float _1168 = (_1163 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1163);
        float _1176 = (dot(vec3(_660, _661, _662), vec3(_1168 * _1160, _1168 * _1161, _1168 * _1162)) + 1.0) * 0.5;
        float _3761 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1185 = sqrt(((_1161 * _1161) + (_1160 * _1160)) + (_1162 * _1162)) / (_1114 + 9.9999997473787516355514526367188e-06);
        float _3772 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1187 = _1186 * 2.0;
        float _1191 = (1.0 - _1186) / (_1186 + 1.0);
        float _3783 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1201 = ((((1.0 - _1192) * (_1187 + 2.0)) * exp2(log2(isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * (_1187 + 1.0))) + _1192) * _1114;
        float _1202 = _1082 * 0.5;
        float _1203 = _1092 * 0.5;
        float _1204 = _1102 * 0.5;
        float _1205 = dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204));
        float _1210 = (_1205 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1205);
        float _1218 = (dot(vec3(_660, _661, _662), vec3(_1210 * _1202, _1210 * _1203, _1210 * _1204)) + 1.0) * 0.5;
        float _3794 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1227 = sqrt(((_1203 * _1203) + (_1202 * _1202)) + (_1204 * _1204)) / (_1115 + 9.9999997473787516355514526367188e-06);
        float _3805 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1229 = _1228 * 2.0;
        float _1233 = (1.0 - _1228) / (_1228 + 1.0);
        float _3816 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1243 = ((((1.0 - _1234) * (_1229 + 2.0)) * exp2(log2(isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (_1229 + 1.0))) + _1234) * _1115;
        _1251 = _1082;
        _1253 = _1081;
        _1254 = _1080;
        _1255 = _1092;
        _1256 = _1091;
        _1257 = _1090;
        _1258 = _1102;
        _1259 = _1101;
        _1260 = _1100;
        _1261 = _1115;
        _1262 = _1114;
        _1263 = _1113;
        _1264 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)));
        _1265 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)));
        _1266 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)));
    }
    else
    {
        _1251 = _1252;
        _1253 = _1252;
        _1254 = _1252;
        _1255 = _1252;
        _1256 = _1252;
        _1257 = _1252;
        _1258 = _1252;
        _1259 = _1252;
        _1260 = _1252;
        _1261 = _1252;
        _1262 = _1252;
        _1263 = _1252;
        _1264 = 0.0;
        _1265 = 0.0;
        _1266 = 0.0;
    }
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1292 = fma(_949, cbModelParam._m0[30u].z, fma(_945, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _941));
        float _1296 = fma(_949, cbModelParam._m0[31u].z, fma(_945, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _941));
        float _1300 = fma(_949, cbModelParam._m0[32u].z, fma(_945, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _941));
        float _1323 = _941 + _660;
        float _1324 = _945 + _661;
        float _1325 = _949 + _662;
        float _1335 = fma(_1325, cbModelParam._m0[30u].z, fma(_1324, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1323)) - _1292;
        float _1336 = fma(_1325, cbModelParam._m0[31u].z, fma(_1324, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1323)) - _1296;
        float _1337 = fma(_1325, cbModelParam._m0[32u].z, fma(_1324, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1323)) - _1300;
        float _1341 = inversesqrt(dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337)));
        float _1354 = ((_1341 * _1335) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1292 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1355 = ((_1341 * _1336) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1296 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1356 = ((_1341 * _1337) / cbModelParam._m0[35u].z) + ((((((_1300 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1358 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1354, _1355, _1356), 0.0);
        vec4 _1365 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1354, _1355, _1356), 0.0);
        vec4 _1372 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1354, _1355, _1356), 0.0);
        vec4 _1379 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1354, _1355, _1356), 0.0);
        float _1391 = exp2((_1358.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1358.x + (-0.5));
        float _1393 = _1391 * (_1358.y + (-0.5));
        float _1394 = _1391 * (_1358.z + (-0.5));
        float _1401 = exp2((_1365.w + (-0.5)) * 20.0) * 2.0;
        float _1402 = _1401 * (_1365.x + (-0.5));
        float _1403 = _1401 * (_1365.y + (-0.5));
        float _1404 = _1401 * (_1365.z + (-0.5));
        float _1411 = exp2((_1372.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1372.x + (-0.5));
        float _1413 = _1411 * (_1372.y + (-0.5));
        float _1414 = _1411 * (_1372.z + (-0.5));
        float _1421 = exp2((_1379.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1379.x + (-0.5));
        float _1423 = _1421 * (_1379.y + (-0.5));
        float _1424 = _1421 * (_1379.z + (-0.5));
        float _1425 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1426 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1427 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1428 = _1392 * 0.5;
        float _1429 = _1402 * 0.5;
        float _1430 = _1412 * 0.5;
        float _1431 = dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430));
        float _1436 = (_1431 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1431);
        float _1444 = (dot(vec3(_660, _661, _662), vec3(_1436 * _1428, _1436 * _1429, _1436 * _1430)) + 1.0) * 0.5;
        float _3857 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1453 = sqrt(((_1429 * _1429) + (_1428 * _1428)) + (_1430 * _1430)) / (_1425 + 9.9999997473787516355514526367188e-06);
        float _3868 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1455 = _1454 * 2.0;
        float _1459 = (1.0 - _1454) / (_1454 + 1.0);
        float _3879 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1469 = ((((1.0 - _1460) * (_1455 + 2.0)) * exp2(log2(isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * (_1455 + 1.0))) + _1460) * _1425;
        float _1470 = _1393 * 0.5;
        float _1471 = _1403 * 0.5;
        float _1472 = _1413 * 0.5;
        float _1473 = dot(vec3(_1470, _1471, _1472), vec3(_1470, _1471, _1472));
        float _1478 = (_1473 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1473);
        float _1486 = (dot(vec3(_660, _661, _662), vec3(_1478 * _1470, _1478 * _1471, _1478 * _1472)) + 1.0) * 0.5;
        float _3890 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1495 = sqrt(((_1471 * _1471) + (_1470 * _1470)) + (_1472 * _1472)) / (_1426 + 9.9999997473787516355514526367188e-06);
        float _3901 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1497 = _1496 * 2.0;
        float _1501 = (1.0 - _1496) / (_1496 + 1.0);
        float _3912 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1511 = ((((1.0 - _1502) * (_1497 + 2.0)) * exp2(log2(isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * (_1497 + 1.0))) + _1502) * _1426;
        float _1512 = _1394 * 0.5;
        float _1513 = _1404 * 0.5;
        float _1514 = _1414 * 0.5;
        float _1515 = dot(vec3(_1512, _1513, _1514), vec3(_1512, _1513, _1514));
        float _1520 = (_1515 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1515);
        float _1528 = (dot(vec3(_660, _661, _662), vec3(_1520 * _1512, _1520 * _1513, _1520 * _1514)) + 1.0) * 0.5;
        float _3923 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1537 = sqrt(((_1513 * _1513) + (_1512 * _1512)) + (_1514 * _1514)) / (_1427 + 9.9999997473787516355514526367188e-06);
        float _3934 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1539 = _1538 * 2.0;
        float _1543 = (1.0 - _1538) / (_1538 + 1.0);
        float _3945 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1553 = ((((1.0 - _1544) * (_1539 + 2.0)) * exp2(log2(isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * (_1539 + 1.0))) + _1544) * _1427;
        _1561 = _1394;
        _1562 = _1393;
        _1563 = _1392;
        _1564 = _1404;
        _1565 = _1403;
        _1566 = _1402;
        _1567 = _1414;
        _1568 = _1413;
        _1569 = _1412;
        _1570 = _1427;
        _1571 = _1426;
        _1572 = _1425;
        _1573 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)));
        _1574 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)));
        _1575 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)));
    }
    else
    {
        _1561 = _1252;
        _1562 = _1252;
        _1563 = _1252;
        _1564 = _1252;
        _1565 = _1252;
        _1566 = _1252;
        _1567 = _1252;
        _1568 = _1252;
        _1569 = _1252;
        _1570 = _1252;
        _1571 = _1252;
        _1572 = _1252;
        _1573 = 0.0;
        _1574 = 0.0;
        _1575 = 0.0;
    }
    float _1585 = (cbModelParam._m0[1u].x * (_1573 - _1264)) + _1264;
    float _1586 = (cbModelParam._m0[1u].x * (_1574 - _1265)) + _1265;
    float _1587 = (cbModelParam._m0[1u].x * (_1575 - _1266)) + _1266;
    float _1608 = fma(_1587, cbSceneParam._m0[89u].z, fma(_1586, cbSceneParam._m0[89u].y, _1585 * cbSceneParam._m0[89u].x));
    float _1611 = fma(_1587, cbSceneParam._m0[90u].z, fma(_1586, cbSceneParam._m0[90u].y, _1585 * cbSceneParam._m0[90u].x));
    float _1614 = fma(_1587, cbSceneParam._m0[91u].z, fma(_1586, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1585));
    float _1629 = _885 * 0.5;
    float _1630 = _886 * 0.5;
    float _1631 = _887 * 0.5;
    float _1632 = dot(vec4(_1629, _1630, _1631, 1.0), vec4(_1563, _1566, _1569, _1572));
    float _1635 = dot(vec4(_1629, _1630, _1631, 1.0), vec4(_1562, _1565, _1568, _1571));
    float _1638 = dot(vec4(_1629, _1630, _1631, 1.0), vec4(_1561, _1564, _1567, _1570));
    float _1672;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1645 = dot(vec4(_1629, _1630, _1631, 1.0), vec4(_1251, _1255, _1258, _1261));
        float _1649 = dot(vec4(_1629, _1630, _1631, 1.0), vec4(_1253, _1256, _1259, _1262));
        float _1653 = dot(vec4(_1629, _1630, _1631, 1.0), vec4(_1254, _1257, _1260, _1263));
        float _1660 = dot(vec4(cbModelParam._m0[39u]), vec4(_1629, _1630, _1631, 1.0));
        _1672 = dot(vec3(isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)), isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)), isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1660) ? 0.0 : (isnan(0.0) ? _1660 : max(0.0, _1660))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1672 = 1.0;
    }
    float _1683;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1674 = dot(vec4(cbModelParam._m0[40u]), vec4(_1629, _1630, _1631, 1.0));
        _1683 = dot(vec3(isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)), isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)), isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1674) ? 0.0 : (isnan(0.0) ? _1674 : max(0.0, _1674))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1683 = 1.0;
    }
    float _1687 = (_1683 * cbModelParam._m0[1u].x) + (_1672 * (1.0 - cbModelParam._m0[1u].x));
    float _1697 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _792);
    float _1698 = isnan(_1697) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1697 : min(cbModelParam._m0[25u].z, _1697));
    float _1778;
    float _1780;
    float _1782;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1745 = fma(_949, cbModelParam._m0[13u].z, fma(_945, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _941)) + cbModelParam._m0[13u].w;
        float _1749 = fma(_949, cbModelParam._m0[14u].z, fma(_945, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _941)) + cbModelParam._m0[14u].w;
        float _1753 = fma(_949, cbModelParam._m0[15u].z, fma(_945, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _941)) + cbModelParam._m0[15u].w;
        float _1756 = fma(_887, cbModelParam._m0[13u].z, fma(_886, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _885));
        float _1759 = fma(_887, cbModelParam._m0[14u].z, fma(_886, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _885));
        float _1762 = fma(_887, cbModelParam._m0[15u].z, fma(_886, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _885));
        float _1790;
        if (_1756 > 0.0)
        {
            _1790 = abs((1.0 - _1745) / _1756);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1745 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1790 = frontier_phi_16_14_ladder;
        }
        float _1992;
        if (_1759 > 0.0)
        {
            _1992 = abs((1.0 - _1749) / _1759);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1759 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1749 + 1.0) / _1759);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1992 = frontier_phi_25_21_ladder;
        }
        float _2246;
        if (_1762 > 0.0)
        {
            _2246 = abs((1.0 - _1753) / _1762);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1762 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1753 + 1.0) / _1762);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2246 = frontier_phi_37_32_ladder;
        }
        float _2248 = isnan(_1992) ? _1790 : (isnan(_1790) ? _1992 : min(_1790, _1992));
        float _2249 = isnan(_2246) ? _2248 : (isnan(_2248) ? _2246 : min(_2248, _2246));
        float _2253 = (_2249 * _1756) + _1745;
        float _2254 = (_2249 * _1759) + _1749;
        float _2255 = (_2249 * _1762) + _1753;
        float _2256 = _2249 * 9.9999997473787516355514526367188e-05;
        float _2258 = (-1.0) - _2256;
        float _2260 = _2256 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2255 > _2260) || ((_2255 < _2258) || ((_2254 > _2260) || ((_2254 < _2258) || ((_2253 < _2258) || (_2253 > _2260))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2383 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2255, cbModelParam._m0[9u].z, fma(_2254, cbModelParam._m0[9u].y, _2253 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2255, cbModelParam._m0[10u].z, fma(_2254, cbModelParam._m0[10u].y, _2253 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2255, cbModelParam._m0[11u].z, fma(_2254, cbModelParam._m0[11u].y, _2253 * cbModelParam._m0[11u].x))), _1698);
            frontier_phi_15_37_ladder = _2383.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2383.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2383.x * cbModelParam._m0[1u].y;
        }
        _1778 = frontier_phi_15_37_ladder_2;
        _1780 = frontier_phi_15_37_ladder_1;
        _1782 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1766 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_885, _886, _887), _1698);
        _1778 = _1766.x * cbModelParam._m0[1u].y;
        _1780 = _1766.y * cbModelParam._m0[1u].y;
        _1782 = _1766.z * cbModelParam._m0[1u].y;
    }
    float _1786 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _792);
    float _1787 = isnan(_1786) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1786 : min(cbModelParam._m0[25u].w, _1786));
    float _1876;
    float _1878;
    float _1880;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1840 = fma(_949, cbModelParam._m0[21u].z, fma(_945, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _941)) + cbModelParam._m0[21u].w;
        float _1844 = fma(_949, cbModelParam._m0[22u].z, fma(_945, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _941)) + cbModelParam._m0[22u].w;
        float _1848 = fma(_949, cbModelParam._m0[23u].z, fma(_945, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _941)) + cbModelParam._m0[23u].w;
        float _1851 = fma(_887, cbModelParam._m0[21u].z, fma(_886, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _885));
        float _1854 = fma(_887, cbModelParam._m0[22u].z, fma(_886, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _885));
        float _1857 = fma(_887, cbModelParam._m0[23u].z, fma(_886, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _885));
        float _1997;
        if (_1851 > 0.0)
        {
            _1997 = abs((1.0 - _1840) / _1851);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1840 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1997 = frontier_phi_27_23_ladder;
        }
        float _2273;
        if (_1854 > 0.0)
        {
            _2273 = abs((1.0 - _1844) / _1854);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1854 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1844 + 1.0) / _1854);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2273 = frontier_phi_39_34_ladder;
        }
        float _2486;
        if (_1857 > 0.0)
        {
            _2486 = abs((1.0 - _1848) / _1857);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1848 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2486 = frontier_phi_48_45_ladder;
        }
        float _2488 = isnan(_2273) ? _1997 : (isnan(_1997) ? _2273 : min(_1997, _2273));
        float _2489 = isnan(_2486) ? _2488 : (isnan(_2488) ? _2486 : min(_2488, _2486));
        float _2493 = (_2489 * _1851) + _1840;
        float _2494 = (_2489 * _1854) + _1844;
        float _2495 = (_2489 * _1857) + _1848;
        float _2496 = _2489 * 9.9999997473787516355514526367188e-05;
        float _2497 = (-1.0) - _2496;
        float _2499 = _2496 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2495 > _2499) || ((_2495 < _2497) || ((_2494 > _2499) || ((_2494 < _2497) || ((_2493 < _2497) || (_2493 > _2499))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2695 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2495, cbModelParam._m0[17u].z, fma(_2494, cbModelParam._m0[17u].y, _2493 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2495, cbModelParam._m0[18u].z, fma(_2494, cbModelParam._m0[18u].y, _2493 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2495, cbModelParam._m0[19u].z, fma(_2494, cbModelParam._m0[19u].y, _2493 * cbModelParam._m0[19u].x))), _1787);
            frontier_phi_24_48_ladder = _2695.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2695.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2695.x * cbModelParam._m0[1u].z;
        }
        _1876 = frontier_phi_24_48_ladder_2;
        _1878 = frontier_phi_24_48_ladder_1;
        _1880 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1860 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_885, _886, _887), _1787);
        _1876 = _1860.x * cbModelParam._m0[1u].z;
        _1878 = _1860.y * cbModelParam._m0[1u].z;
        _1880 = _1860.z * cbModelParam._m0[1u].z;
    }
    float _1893 = (((_912 * _862) + _913) * _877) * ((cbModelParam._m0[1u].w * (_1876 - _1778)) + _1778);
    float _1895 = (((_912 * _864) + _913) * _877) * ((cbModelParam._m0[1u].w * (_1878 - _1780)) + _1780);
    float _1897 = (((_912 * _865) + _913) * _877) * ((cbModelParam._m0[1u].w * (_1880 - _1782)) + _1782);
    float _1900 = fma(_1897, cbSceneParam._m0[89u].z, fma(_1895, cbSceneParam._m0[89u].y, _1893 * cbSceneParam._m0[89u].x));
    float _1903 = fma(_1897, cbSceneParam._m0[90u].z, fma(_1895, cbSceneParam._m0[90u].y, _1893 * cbSceneParam._m0[90u].x));
    float _1906 = fma(_1897, cbSceneParam._m0[91u].z, fma(_1895, cbSceneParam._m0[91u].y, _1893 * cbSceneParam._m0[91u].x));
    uvec4 _1916 = floatBitsToUint(cbInstanceData._m0[_805 + 5u]);
    uint _1918 = _1916.x * 14u;
    uint _1919 = _1918 + 13u;
    float _1926 = _877 + (-1.0);
    float _1931 = (cbLight._m0[_1919].x * _1926) + 1.0;
    float _1932 = (cbLight._m0[_1919].y * _1926) + 1.0;
    float _1933 = (cbLight._m0[_1919].z * _1926) + 1.0;
    float _1934 = (cbLight._m0[_1919].w * _1926) + 1.0;
    uint _1935 = _1918 + 5u;
    float _1941 = isnan(1.0) ? _1932 : (isnan(_1932) ? 1.0 : min(_1932, 1.0));
    uint _1945 = _1918 + 4u;
    float _1951 = isnan(1.0) ? _1931 : (isnan(_1931) ? 1.0 : min(_1931, 1.0));
    uint _1955 = _1918 | 1u;
    float _1966 = dot(vec3(cbLight._m0[_1918].xyz), vec3(_660, _661, _662));
    float _1969 = dot(vec3(cbLight._m0[_1955].xyz), vec3(_660, _661, _662));
    float _4081 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _4092 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _1974 = (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * 0.3183098733425140380859375;
    float _1976 = (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * 0.3183098733425140380859375;
    float _1983 = ((cbLight._m0[_1935].x * _1941) * _1976) + ((cbLight._m0[_1945].x * _1951) * _1974);
    float _1984 = ((_1941 * cbLight._m0[_1935].y) * _1976) + ((_1951 * cbLight._m0[_1945].y) * _1974);
    float _1985 = ((_1941 * cbLight._m0[_1935].z) * _1976) + ((_1951 * cbLight._m0[_1945].z) * _1974);
    uvec4 _1989 = floatBitsToUint(cbLight._m0[_1918 + 12u]);
    bool _1991 = _1989.x == 0u;
    float _2002;
    float _2004;
    float _2006;
    if (_1991)
    {
        _2002 = _1983;
        _2004 = _1984;
        _2006 = _1985;
    }
    else
    {
        uint _2010 = _1918 + 6u;
        float _2026 = (dot(vec3(cbLight._m0[_1918 + 2u].xyz), vec3(_660, _661, _662)) * 0.5) + 0.5;
        float _2027 = _2026 * _2026;
        float _4103 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
        float _2028 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _2029 = isnan(1.0) ? _1933 : (isnan(_1933) ? 1.0 : min(_1933, 1.0));
        _2002 = (((cbLight._m0[_2010].x * 0.3183098733425140380859375) * _2028) * _2029) + _1983;
        _2004 = (((cbLight._m0[_2010].y * 0.3183098733425140380859375) * _2028) * _2029) + _1984;
        _2006 = (((cbLight._m0[_2010].z * 0.3183098733425140380859375) * _2028) * _2029) + _1985;
    }
    bool _2009 = _1989.y == 0u;
    float _2047;
    float _2049;
    float _2051;
    if (_2009)
    {
        _2047 = _2002;
        _2049 = _2004;
        _2051 = _2006;
    }
    else
    {
        uint _2217 = _1918 + 7u;
        float _2233 = (dot(vec3(cbLight._m0[_1918 + 3u].xyz), vec3(_660, _661, _662)) * 0.5) + 0.5;
        float _2234 = _2233 * _2233;
        float _4119 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2235 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _2236 = isnan(1.0) ? _1934 : (isnan(_1934) ? 1.0 : min(_1934, 1.0));
        _2047 = (((cbLight._m0[_2217].x * 0.3183098733425140380859375) * _2235) * _2236) + _2002;
        _2049 = (((cbLight._m0[_2217].y * 0.3183098733425140380859375) * _2235) * _2236) + _2004;
        _2051 = (((cbLight._m0[_2217].z * 0.3183098733425140380859375) * _2235) * _2236) + _2006;
    }
    uint _2054 = _1918 + 8u;
    float _2067 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1918].w)) * _792) * 0.949999988079071044921875);
    float _2068 = _2067 * _2067;
    float _2069 = cbLight._m0[_1918].x + _742;
    float _2070 = cbLight._m0[_1918].y + _743;
    float _2071 = cbLight._m0[_1918].z + _744;
    float _2075 = inversesqrt(dot(vec3(_2069, _2070, _2071), vec3(_2069, _2070, _2071)));
    float _2076 = _2075 * _2069;
    float _2077 = _2075 * _2070;
    float _2078 = _2075 * _2071;
    float _2079 = dot(vec3(_660, _661, _662), vec3(cbLight._m0[_1918].xyz));
    float _4135 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
    float _2082 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _4146 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _2083 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _2084 = dot(vec3(_660, _661, _662), vec3(_2076, _2077, _2078));
    float _4157 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2087 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
    float _2088 = dot(vec3(cbLight._m0[_1918].xyz), vec3(_2076, _2077, _2078));
    float _4168 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2092 = _2068 * _2068;
    float _2096 = ((_2087 * _2087) * (_2092 + (-1.0))) + 1.0;
    float _2104 = exp2(log2(1.0 - (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0)))) * 5.0);
    float _2105 = 0.959999978542327880859375 - _859;
    float _2107 = 0.959999978542327880859375 - _860;
    float _2108 = 0.959999978542327880859375 - _861;
    float _2115 = 1.0 - _2068;
    float _2126 = (0.5 / (((_2083 * ((_2082 * _2115) + _2068)) + 9.9999999392252902907785028219223e-09) + (((_2083 * _2115) + _2068) * _2082))) * _2082;
    float _4179 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2128 = (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (_2092 / ((_2096 * _2096) * 3.141590118408203125));
    uint _2139 = _1918 + 9u;
    float _2150 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1955].w)) * _792) * 0.949999988079071044921875);
    float _2151 = _2150 * _2150;
    float _2152 = cbLight._m0[_1955].x + _742;
    float _2153 = cbLight._m0[_1955].y + _743;
    float _2154 = cbLight._m0[_1955].z + _744;
    float _2158 = inversesqrt(dot(vec3(_2152, _2153, _2154), vec3(_2152, _2153, _2154)));
    float _2159 = _2158 * _2152;
    float _2160 = _2158 * _2153;
    float _2161 = _2158 * _2154;
    float _2162 = dot(vec3(_660, _661, _662), vec3(cbLight._m0[_1955].xyz));
    float _4190 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2165 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _2166 = dot(vec3(_660, _661, _662), vec3(_2159, _2160, _2161));
    float _4201 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2169 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _2170 = dot(vec3(cbLight._m0[_1955].xyz), vec3(_2159, _2160, _2161));
    float _4212 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2174 = _2151 * _2151;
    float _2178 = ((_2169 * _2169) * (_2174 + (-1.0))) + 1.0;
    float _2185 = exp2(log2(1.0 - (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0)))) * 5.0);
    float _2192 = 1.0 - _2151;
    float _2202 = (0.5 / (((_2083 * ((_2165 * _2192) + _2151)) + 9.9999999392252902907785028219223e-09) + (((_2083 * _2192) + _2151) * _2165))) * _2165;
    float _4223 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _2204 = (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_2174 / ((_2178 * _2178) * 3.141590118408203125));
    float _2214 = (((((_2185 * _2105) + _862) * cbLight._m0[_2139].x) * _2204) * _1941) + (((((_2104 * _2105) + _862) * cbLight._m0[_2054].x) * _2128) * _1951);
    float _2215 = (((((_2185 * _2107) + _864) * cbLight._m0[_2139].y) * _2204) * _1941) + (((((_2104 * _2107) + _864) * cbLight._m0[_2054].y) * _2128) * _1951);
    float _2216 = (((((_2185 * _2108) + _865) * cbLight._m0[_2139].z) * _2204) * _1941) + (((((_2104 * _2108) + _865) * cbLight._m0[_2054].z) * _2128) * _1951);
    float _2278;
    float _2280;
    float _2282;
    if (_1991)
    {
        _2278 = _2214;
        _2280 = _2215;
        _2282 = _2216;
    }
    else
    {
        uint _2284 = _1918 + 2u;
        uint _2288 = _1918 + 10u;
        float _2302 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2284].w)) * _792) * 0.949999988079071044921875);
        float _2303 = _2302 * _2302;
        float _2304 = cbLight._m0[_2284].x + _742;
        float _2305 = cbLight._m0[_2284].y + _743;
        float _2306 = cbLight._m0[_2284].z + _744;
        float _2310 = inversesqrt(dot(vec3(_2304, _2305, _2306), vec3(_2304, _2305, _2306)));
        float _2311 = _2310 * _2304;
        float _2312 = _2310 * _2305;
        float _2313 = _2310 * _2306;
        float _2314 = dot(vec3(_660, _661, _662), vec3(cbLight._m0[_2284].xyz));
        float _4234 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        float _2317 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _2318 = dot(vec3(_660, _661, _662), vec3(_2311, _2312, _2313));
        float _4245 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        float _2321 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _2322 = dot(vec3(cbLight._m0[_2284].xyz), vec3(_2311, _2312, _2313));
        float _4256 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2326 = _2303 * _2303;
        float _2330 = ((_2321 * _2321) * (_2326 + (-1.0))) + 1.0;
        float _2337 = exp2(log2(1.0 - (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) * 5.0);
        float _2344 = 1.0 - _2303;
        float _2354 = (0.5 / (((_2083 * ((_2317 * _2344) + _2303)) + 9.9999999392252902907785028219223e-09) + (((_2083 * _2344) + _2303) * _2317))) * _2317;
        float _4267 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2356 = (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_2326 / ((_2330 * _2330) * 3.141590118408203125));
        float _2357 = isnan(1.0) ? _1933 : (isnan(_1933) ? 1.0 : min(_1933, 1.0));
        _2278 = (((((_2337 * _2105) + _862) * cbLight._m0[_2288].x) * _2356) * _2357) + _2214;
        _2280 = (((((_2337 * _2107) + _864) * cbLight._m0[_2288].y) * _2356) * _2357) + _2215;
        _2282 = (((((_2337 * _2108) + _865) * cbLight._m0[_2288].z) * _2356) * _2357) + _2216;
    }
    float _2392;
    float _2394;
    float _2396;
    if (_2009)
    {
        _2392 = _2278;
        _2394 = _2280;
        _2396 = _2282;
    }
    else
    {
        uint _2403 = _1918 + 3u;
        uint _2407 = _1918 + 11u;
        float _2421 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2403].w)) * _792) * 0.949999988079071044921875);
        float _2422 = _2421 * _2421;
        float _2423 = cbLight._m0[_2403].x + _742;
        float _2424 = cbLight._m0[_2403].y + _743;
        float _2425 = cbLight._m0[_2403].z + _744;
        float _2429 = inversesqrt(dot(vec3(_2423, _2424, _2425), vec3(_2423, _2424, _2425)));
        float _2430 = _2429 * _2423;
        float _2431 = _2429 * _2424;
        float _2432 = _2429 * _2425;
        float _2433 = dot(vec3(_660, _661, _662), vec3(cbLight._m0[_2403].xyz));
        float _4283 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2436 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _2437 = dot(vec3(_660, _661, _662), vec3(_2430, _2431, _2432));
        float _4294 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2440 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _2441 = dot(vec3(cbLight._m0[_2403].xyz), vec3(_2430, _2431, _2432));
        float _4305 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2445 = _2422 * _2422;
        float _2449 = ((_2440 * _2440) * (_2445 + (-1.0))) + 1.0;
        float _2456 = exp2(log2(1.0 - (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)))) * 5.0);
        float _2463 = 1.0 - _2422;
        float _2473 = (0.5 / (((_2083 * ((_2436 * _2463) + _2422)) + 9.9999999392252902907785028219223e-09) + (((_2083 * _2463) + _2422) * _2436))) * _2436;
        float _4316 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        float _2475 = (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2445 / ((_2449 * _2449) * 3.141590118408203125));
        float _2476 = isnan(1.0) ? _1934 : (isnan(_1934) ? 1.0 : min(_1934, 1.0));
        _2392 = (((((_2456 * _2105) + _862) * cbLight._m0[_2407].x) * _2475) * _2476) + _2278;
        _2394 = (((((_2456 * _2107) + _864) * cbLight._m0[_2407].y) * _2475) * _2476) + _2280;
        _2396 = (((((_2456 * _2108) + _865) * cbLight._m0[_2407].z) * _2475) * _2476) + _2282;
    }
    float _2610;
    float _2612;
    float _2614;
    float _2616;
    float _2618;
    float _2620;
    if (_1916.y == 0u)
    {
        float _2551 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2552 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2551;
        float _2553 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2551;
        float _2554 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2551;
        uvec4 _2566 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2567 = _2566.x;
        uint _2578 = uint((float(_2566.y) * floor(float(uint(cbSceneParam._m0[85u].y * _751) / _2567))) + floor(float(uint(cbSceneParam._m0[85u].x * _750) / _2567)));
        float _2588 = (log2(_2554 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2589 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        uint _2592 = uint(isnan(14.0) ? _2589 : (isnan(_2589) ? 14.0 : min(_2589, 14.0)));
        uvec4 _2597 = texelFetch(g_lightClusterGridBuffer, int(((_2592 << 2u) + (_2578 << 6u)) >> 2u));
        uint _2598 = _2597.x;
        uint _2599 = _2566.z;
        float _2700;
        float _2702;
        float _2704;
        float _2706;
        float _2708;
        float _2710;
        if (((((1u << ((_2599 >> 4u) & 15u)) + 4294967295u) & _2598) == 0u) || ((_2599 & 240u) == 0u))
        {
            _2700 = 0.0;
            _2702 = 0.0;
            _2704 = 0.0;
            _2706 = 0.0;
            _2708 = 0.0;
            _2710 = 0.0;
        }
        else
        {
            float _2701;
            float _2703;
            float _2705;
            float _2707;
            float _2709;
            float _2711;
            float _2844 = 0.0;
            float _2845 = 0.0;
            float _2846 = 0.0;
            float _2847 = 0.0;
            float _2848 = 0.0;
            float _2849 = 0.0;
            uint _2850 = 0u;
            uint _2859;
            bool _2860;
            for (;;)
            {
                _2859 = texelFetch(g_lightClassification, int((((_2592 << 5u) + (_2578 << 9u)) + (_2850 << 2u)) >> 2u)).x;
                _2860 = _2859 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2860)
                {
                    frontier_phi_63_pred = _2849;
                    frontier_phi_63_pred_1 = _2848;
                    frontier_phi_63_pred_2 = _2847;
                    frontier_phi_63_pred_3 = _2846;
                    frontier_phi_63_pred_4 = _2845;
                    frontier_phi_63_pred_5 = _2844;
                }
                else
                {
                    float _2968;
                    float _2969;
                    float _2970;
                    float _2971;
                    float _2972;
                    float _2973;
                    uint _2974;
                    _2968 = _2844;
                    _2969 = _2845;
                    _2970 = _2846;
                    _2971 = _2847;
                    _2972 = _2848;
                    _2973 = _2849;
                    _2974 = _2859;
                    float _2900;
                    float _2901;
                    float _2902;
                    float _2903;
                    float _2904;
                    float _2905;
                    for (;;)
                    {
                        uint _2978 = uint(findLSB(_2974)) + (_2850 << 5u);
                        uint _2975 = (_2974 + 4294967295u) & _2974;
                        uint _2980 = _2978 * 48u;
                        vec4 _2994 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2980)).x, texelFetch(g_PointLightRenderingBuffer, int(_2980 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2980 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2980 + 3u)).x));
                        uint _3000 = (_2978 * 48u) + 4u;
                        vec4 _3013 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3000)).x, texelFetch(g_PointLightRenderingBuffer, int(_3000 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3000 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3000 + 3u)).x));
                        uint _3019 = (_2978 * 48u) + 8u;
                        vec3 _3030 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3019)).x, texelFetch(g_PointLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3019 + 2u)).x));
                        float _3034 = _2994.x - _2552;
                        float _3035 = _2994.y - _2553;
                        float _3036 = _2994.z - _2554;
                        float _3037 = dot(vec3(_3034, _3035, _3036), vec3(_3034, _3035, _3036));
                        float _3040 = inversesqrt(_3037);
                        float _3041 = _3040 * _3034;
                        float _3042 = _3040 * _3035;
                        float _3043 = _3040 * _3036;
                        float _3044 = dot(vec3(_773, _776, _779), vec3(_3041, _3042, _3043));
                        float _3049 = 1.0 - (_3037 * _2994.w);
                        float _4342 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                        float _3050 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
                        float _3051 = sqrt(_3037) * _3013.w;
                        float _3054 = 1.39999997615814208984375 / (_3051 + 1.39999997615814208984375);
                        float _3055 = _3054 * _3054;
                        float _3058 = ((1.0 - _3055) * _3044) + _3055;
                        float _3061 = _3051 * _3051;
                        float _3065 = ((isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0))) * _3050) / ((_3061 * 0.699999988079071044921875) + 1.0);
                        float _3069 = (-0.0) - _2552;
                        float _3070 = (-0.0) - _2553;
                        float _3071 = (-0.0) - _2554;
                        float _3075 = inversesqrt(dot(vec3(_3069, _3070, _3071), vec3(_3069, _3070, _3071)));
                        float _3076 = _3075 * _3069;
                        float _3077 = _3075 * _3070;
                        float _3078 = _3075 * _3071;
                        float _3086 = exp2(log2(1.0 / ((_3061 * 3.5) + 5.0)) * 0.25);
                        float _3087 = 1.0 - _893;
                        float _3094 = sqrt(1.0 - ((1.0 - (_3087 * _3087)) * (1.0 - (_3086 * _3086))));
                        float _3095 = _3094 * _3094;
                        float _3096 = _3095 * _3095;
                        float _3097 = _3076 + _3041;
                        float _3098 = _3077 + _3042;
                        float _3099 = _3078 + _3043;
                        float _3103 = inversesqrt(dot(vec3(_3097, _3098, _3099), vec3(_3097, _3098, _3099)));
                        float _3107 = dot(vec3(_773, _776, _779), vec3(_3076, _3077, _3078));
                        float _4358 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                        float _3110 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
                        float _3111 = dot(vec3(_773, _776, _779), vec3(_3103 * _3097, _3103 * _3098, _3103 * _3099));
                        float _4369 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                        float _3114 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
                        float _3118 = ((_3114 * _3114) * (_3096 + (-1.0))) + 1.0;
                        float _3119 = _3054 * _3095;
                        float _3120 = _3119 * _3119;
                        float _3123 = ((1.0 - _3120) * _3044) + _3120;
                        float _4380 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                        float _3124 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
                        float _3125 = 1.0 - _3095;
                        float _3135 = (0.5 / (((_3124 * ((_3110 * _3125) + _3095)) + 9.9999999392252902907785028219223e-09) + (((_3124 * _3125) + _3095) * _3110))) * _3124;
                        float _4391 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                        float _3146 = (((_3096 * 3.1415927410125732421875) * (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0)))) / ((_3118 * _3118) * ((_3061 * 2.1991131305694580078125) + 3.141590118408203125))) * _3050;
                        _2903 = (_3065 * _3013.x) + _2971;
                        _2904 = (_3065 * _3013.y) + _2972;
                        _2905 = (_3065 * _3013.z) + _2973;
                        _2900 = (_3146 * _3030.x) + _2968;
                        _2901 = (_3146 * _3030.y) + _2969;
                        _2902 = (_3146 * _3030.z) + _2970;
                        if (_2975 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2968 = _2900;
                            _2969 = _2901;
                            _2970 = _2902;
                            _2971 = _2903;
                            _2972 = _2904;
                            _2973 = _2905;
                            _2974 = _2975;
                        }
                    }
                    frontier_phi_63_pred = _2905;
                    frontier_phi_63_pred_1 = _2904;
                    frontier_phi_63_pred_2 = _2903;
                    frontier_phi_63_pred_3 = _2902;
                    frontier_phi_63_pred_4 = _2901;
                    frontier_phi_63_pred_5 = _2900;
                }
                _2711 = frontier_phi_63_pred;
                _2709 = frontier_phi_63_pred_1;
                _2707 = frontier_phi_63_pred_2;
                _2705 = frontier_phi_63_pred_3;
                _2703 = frontier_phi_63_pred_4;
                _2701 = frontier_phi_63_pred_5;
                uint _2851 = _2850 + 1u;
                if (_2851 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2844 = _2701;
                    _2845 = _2703;
                    _2846 = _2705;
                    _2847 = _2707;
                    _2848 = _2709;
                    _2849 = _2711;
                    _2850 = _2851;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2700 = _2701;
            _2702 = _2703;
            _2704 = _2705;
            _2706 = _2707;
            _2708 = _2709;
            _2710 = _2711;
        }
        uvec4 _2714 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2715 = _2714.z;
        uint _2717 = (_2715 >> 8u) & 15u;
        float _2812;
        float _2814;
        float _2816;
        float _2818;
        float _2820;
        float _2822;
        if (((4294967295u << _2717) & _2598) == 0u)
        {
            _2812 = _2700;
            _2814 = _2702;
            _2816 = _2704;
            _2818 = _2706;
            _2820 = _2708;
            _2822 = _2710;
        }
        else
        {
            float _2837 = inversesqrt(dot(vec3(_2552, _2553, _2554), vec3(_2552, _2553, _2554)));
            float _2838 = _2837 * _2552;
            float _2839 = _2837 * _2553;
            float _2840 = _2837 * _2554;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2717 < ((_2715 >> 12u) & 15u))
            {
                float _2813;
                float _2815;
                float _2817;
                float _2819;
                float _2821;
                float _2823;
                float _2951 = _2700;
                float _2952 = _2702;
                float _2953 = _2704;
                float _2954 = _2706;
                float _2955 = _2708;
                float _2956 = _2710;
                uint _2957 = _2717;
                uint _2966;
                bool _2967;
                for (;;)
                {
                    _2966 = texelFetch(g_lightClassification, int((((_2592 << 5u) + (_2578 << 9u)) + (_2957 << 2u)) >> 2u)).x;
                    _2967 = _2966 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2967)
                    {
                        frontier_phi_69_pred = _2956;
                        frontier_phi_69_pred_1 = _2955;
                        frontier_phi_69_pred_2 = _2954;
                        frontier_phi_69_pred_3 = _2953;
                        frontier_phi_69_pred_4 = _2952;
                        frontier_phi_69_pred_5 = _2951;
                    }
                    else
                    {
                        float _3151;
                        float _3152;
                        float _3153;
                        float _3154;
                        float _3155;
                        float _3156;
                        float _3446;
                        float _3447;
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3164 = _2951;
                        float _3165 = _2952;
                        float _3166 = _2953;
                        float _3167 = _2954;
                        float _3168 = _2955;
                        float _3169 = _2956;
                        uint _3170 = _2966;
                        uint _3171;
                        vec4 _3196;
                        float _3197;
                        vec4 _3212;
                        vec3 _3224;
                        vec4 _3240;
                        vec4 _3255;
                        float _3302;
                        bool _3303;
                        for (;;)
                        {
                            uint _3181 = ((_2957 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3170));
                            _3171 = (_3170 + 4294967295u) & _3170;
                            uint _3183 = _3181 * 40u;
                            _3196 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3183)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 3u)).x));
                            _3197 = _3196.w;
                            uint _3199 = (_3181 * 40u) + 4u;
                            _3212 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3199)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 3u)).x));
                            uint _3214 = (_3181 * 40u) + 8u;
                            _3224 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x));
                            uint _3227 = (_3181 * 40u) + 16u;
                            _3240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 3u)).x));
                            uint _3242 = (_3181 * 40u) + 20u;
                            _3255 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 3u)).x));
                            uint _3258 = (_3181 * 40u) + 24u;
                            vec4 _3271 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3258)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 3u)).x));
                            uint _3277 = (_3181 * 40u) + 28u;
                            vec4 _3290 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3277)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 3u)).x));
                            _3302 = fma(_2554, _3290.z, fma(_2553, _3290.y, _3290.x * _2552)) + _3290.w;
                            _3303 = !((fma(_2554, _3271.z, fma(_2553, _3271.y, _3271.x * _2552)) + _3271.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3303)
                            {
                                float _3330 = _3196.x - _2552;
                                float _3331 = _3196.y - _2553;
                                float _3332 = _3196.z - _2554;
                                float _3333 = dot(vec3(_3330, _3331, _3332), vec3(_3330, _3331, _3332));
                                float _3336 = inversesqrt(_3333);
                                float _3337 = _3336 * _3330;
                                float _3338 = _3336 * _3331;
                                float _3339 = _3336 * _3332;
                                float _3343 = 1.0 - (_3333 / (_3197 * _3197));
                                float _4402 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                                float _3344 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                                float _3348 = sqrt(_3333) * _3212.w;
                                float _3350 = 1.39999997615814208984375 / (_3348 + 1.39999997615814208984375);
                                float _3351 = _3350 * _3350;
                                float _3354 = ((1.0 - _3351) * dot(vec3(_3337, _3338, _3339), vec3(_773, _776, _779))) + _3351;
                                float _3357 = _3348 * _3348;
                                float _3361 = (fma(_2554, _3240.z, fma(_2553, _3240.y, _3240.x * _2552)) + _3240.w) / _3302;
                                float _3362 = (fma(_2554, _3255.z, fma(_2553, _3255.y, _3255.x * _2552)) + _3255.w) / _3302;
                                float _3366 = 1.0 - dot(vec2(_3361, _3362), vec2(_3361, _3362));
                                float _4418 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                                float _3367 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
                                float _3368 = _3367 * (((isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0))) * _3344) / ((_3357 * 0.699999988079071044921875) + 1.0));
                                float _3380 = exp2(log2(1.0 / ((_3357 * 3.5) + 5.0)) * 0.25);
                                float _3381 = 1.0 - _893;
                                float _3388 = sqrt(1.0 - ((1.0 - (_3381 * _3381)) * (1.0 - (_3380 * _3380))));
                                float _3389 = _3388 * _3388;
                                float _3390 = _3389 * _3389;
                                float _3391 = _3337 - _2838;
                                float _3392 = _3338 - _2839;
                                float _3393 = _3339 - _2840;
                                float _3397 = inversesqrt(dot(vec3(_3391, _3392, _3393), vec3(_3391, _3392, _3393)));
                                float _3401 = dot(vec3(_773, _776, _779), vec3((-0.0) - _2838, (-0.0) - _2839, (-0.0) - _2840));
                                float _4429 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                                float _3404 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
                                float _3405 = dot(vec3(_773, _776, _779), vec3(_3397 * _3391, _3397 * _3392, _3397 * _3393));
                                float _4440 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                                float _3408 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
                                float _3412 = ((_3408 * _3408) * (_3390 + (-1.0))) + 1.0;
                                float _3413 = _3350 * _3389;
                                float _3414 = _3413 * _3413;
                                float _3420 = ((1.0 - _3414) * dot(vec3(_773, _776, _779), vec3(_3337, _3338, _3339))) + _3414;
                                float _4451 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                                float _3421 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
                                float _3422 = 1.0 - _3389;
                                float _3432 = (0.5 / (((_3421 * ((_3404 * _3422) + _3389)) + 9.9999999392252902907785028219223e-09) + (((_3421 * _3422) + _3389) * _3404))) * _3421;
                                float _4462 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3442 = (_3367 * _3344) * (((_3390 * 3.1415927410125732421875) * (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0)))) / ((_3412 * _3412) * ((_3357 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3368 * _3212.z;
                                frontier_phi_75_pred_1 = _3368 * _3212.y;
                                frontier_phi_75_pred_2 = _3368 * _3212.x;
                                frontier_phi_75_pred_3 = _3442 * _3224.z;
                                frontier_phi_75_pred_4 = _3442 * _3224.y;
                                frontier_phi_75_pred_5 = _3442 * _3224.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3451 = frontier_phi_75_pred;
                            _3450 = frontier_phi_75_pred_1;
                            _3449 = frontier_phi_75_pred_2;
                            _3448 = frontier_phi_75_pred_3;
                            _3447 = frontier_phi_75_pred_4;
                            _3446 = frontier_phi_75_pred_5;
                            _3154 = _3449 + _3167;
                            _3155 = _3450 + _3168;
                            _3156 = _3451 + _3169;
                            _3151 = _3446 + _3164;
                            _3152 = _3447 + _3165;
                            _3153 = _3448 + _3166;
                            if (_3171 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3164 = _3151;
                                _3165 = _3152;
                                _3166 = _3153;
                                _3167 = _3154;
                                _3168 = _3155;
                                _3169 = _3156;
                                _3170 = _3171;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3156;
                        frontier_phi_69_pred_1 = _3155;
                        frontier_phi_69_pred_2 = _3154;
                        frontier_phi_69_pred_3 = _3153;
                        frontier_phi_69_pred_4 = _3152;
                        frontier_phi_69_pred_5 = _3151;
                    }
                    _2823 = frontier_phi_69_pred;
                    _2821 = frontier_phi_69_pred_1;
                    _2819 = frontier_phi_69_pred_2;
                    _2817 = frontier_phi_69_pred_3;
                    _2815 = frontier_phi_69_pred_4;
                    _2813 = frontier_phi_69_pred_5;
                    uint _2958 = _2957 + 1u;
                    if (_2958 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2951 = _2813;
                        _2952 = _2815;
                        _2953 = _2817;
                        _2954 = _2819;
                        _2955 = _2821;
                        _2956 = _2823;
                        _2957 = _2958;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2823;
                frontier_phi_57_58_ladder_1 = _2821;
                frontier_phi_57_58_ladder_2 = _2819;
                frontier_phi_57_58_ladder_3 = _2817;
                frontier_phi_57_58_ladder_4 = _2815;
                frontier_phi_57_58_ladder_5 = _2813;
            }
            else
            {
                frontier_phi_57_58_ladder = _2710;
                frontier_phi_57_58_ladder_1 = _2708;
                frontier_phi_57_58_ladder_2 = _2706;
                frontier_phi_57_58_ladder_3 = _2704;
                frontier_phi_57_58_ladder_4 = _2702;
                frontier_phi_57_58_ladder_5 = _2700;
            }
            _2812 = frontier_phi_57_58_ladder_5;
            _2814 = frontier_phi_57_58_ladder_4;
            _2816 = frontier_phi_57_58_ladder_3;
            _2818 = frontier_phi_57_58_ladder_2;
            _2820 = frontier_phi_57_58_ladder_1;
            _2822 = frontier_phi_57_58_ladder;
        }
        float _2827 = isnan(1.0) ? _877 : (isnan(_877) ? 1.0 : min(_877, 1.0));
        _2610 = (_2827 * _2818) + _2047;
        _2612 = (_2827 * _2820) + _2049;
        _2614 = (_2827 * _2822) + _2051;
        _2616 = ((_2812 * _862) * _2827) + _2392;
        _2618 = ((_2814 * _864) * _2827) + _2394;
        _2620 = ((_2816 * _865) * _2827) + _2396;
    }
    else
    {
        _2610 = _2047;
        _2612 = _2049;
        _2614 = _2051;
        _2616 = _2392;
        _2618 = _2394;
        _2620 = _2396;
    }
    float _4478 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _4489 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _4500 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _4511 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _2645 = cbInstanceData._m0[_805 + 6u].w * (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0)));
    float _2650 = _750 / cbSceneParam._m0[86u].x;
    float _2651 = _751 / cbSceneParam._m0[86u].y;
    vec4 _2665 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2650, _2651, (log2((isnan(cbSceneParam._m0[77u].w) ? _684 : (isnan(_684) ? cbSceneParam._m0[77u].w : min(_684, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2667 = _2665.x;
    float _2668 = _2665.y;
    float _2669 = _2665.z;
    float _2670 = _2665.w;
    float _2762;
    float _2764;
    float _2766;
    float _2768;
    if (_684 > cbSceneParam._m0[78u].w)
    {
        float _2725 = isnan(_684) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _684 : min(cbSceneParam._m0[80u].w, _684));
        float _2726 = _2725 / _684;
        float _2737 = _2726 * _735;
        float _2738 = _736 * _2726;
        float _2739 = (-0.0) - _2738;
        float _2740 = _2726 * _737;
        float _2742 = (cbSceneParam._m0[77u].w * _2739) / _2725;
        float _2743 = _2742 + cbSceneParam._m0[79u].w;
        float _2744 = cbSceneParam._m0[79u].w - _2738;
        float _2750 = sqrt(((_2737 * _2737) + (_2738 * _2738)) + (_2740 * _2740));
        float _2753 = (1.0 - (cbSceneParam._m0[77u].w / _2725)) * _2750;
        float _2758 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2760 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2913;
        if (abs((_2739 - _2742) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2913 = ((((_2743 > 0.0) ? exp2(_2758 * _2743) : (2.0 - exp2(_2760 * _2743))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2753;
        }
        else
        {
            float _2873 = 1.0 / cbSceneParam._m0[80u].x;
            float _2874 = isnan(_2744) ? _2743 : (isnan(_2743) ? _2744 : max(_2743, _2744));
            float _2875 = isnan(_2744) ? _2743 : (isnan(_2743) ? _2744 : min(_2743, _2744));
            float _2884 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : min(_2874, 0.0));
            float _2885 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : min(_2875, 0.0));
            _2913 = ((abs(_2750 / _2739) * cbSceneParam._m0[80u].y) * ((((_2884 - _2885) * 2.0) - ((exp2(_2758 * (isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0)))) - exp2(_2758 * (isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0))))) * _2873)) - ((exp2(_2760 * _2884) - exp2(_2760 * _2885)) * _2873))) + (_2753 * cbSceneParam._m0[80u].z);
        }
        vec4 _2915 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2650, _2651, 1.0), 0.0);
        float _2924 = exp2((_2913 * (-1.44269502162933349609375)) * (1.0 - _2915.w));
        float _2925 = log2(_2924);
        float _2941 = log2(_2670);
        _2762 = (exp2(_2941 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2925 * cbSceneParam._m0[78u].x)) * _2915.x) / cbSceneParam._m0[78u].x)) + _2667;
        _2764 = (exp2(_2941 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2925 * cbSceneParam._m0[78u].y)) * _2915.y) / cbSceneParam._m0[78u].y)) + _2668;
        _2766 = (exp2(_2941 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2925 * cbSceneParam._m0[78u].z)) * _2915.z) / cbSceneParam._m0[78u].z)) + _2669;
        _2768 = _2924 * _2670;
    }
    else
    {
        _2762 = _2667;
        _2764 = _2668;
        _2766 = _2669;
        _2768 = _2670;
    }
    float _2780 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2781 = _2780 == 3.0;
    float _2782 = log2(_2768);
    float _2789 = exp2(_2782 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * (_2610 + ((isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))) * _877))) + ((_2616 + ((isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0))) * _1687)) * cbPerFrame._m0[3u].x));
    float _2790 = exp2(_2782 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (_2612 + ((isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))) * _877))) + ((_2618 + ((isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0))) * _1687)) * cbPerFrame._m0[3u].x));
    float _2791 = exp2(_2782 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * (_2614 + ((isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))) * _877))) + ((_2620 + ((isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0))) * _1687)) * cbPerFrame._m0[3u].x));
    float _2800 = (_2780 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2800 * (_2781 ? _2789 : (_2789 + (cbSceneParam._m0[72u].w * _2762)));
    SV_Target.y = _2800 * (_2781 ? _2790 : (_2790 + (cbSceneParam._m0[72u].w * _2764)));
    SV_Target.z = _2800 * (_2781 ? _2791 : (_2791 + (cbSceneParam._m0[72u].w * _2766)));
    SV_Target.w = _2645;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2645;
}


