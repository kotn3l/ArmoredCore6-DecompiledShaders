#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_snp_0_Texture2D_2;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D P_ACParts_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D P_ACParts_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D P_ACParts_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_snp_0_Texture2D_1;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_snp_0_Texture2D_10;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_snp_0_Texture2D_11;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_snp_0_Texture2D_12;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_snp_0_Texture2D_13;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_snp_0_Texture2D_14;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_snp_0_Texture2D_15;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1370;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249;
    float _250;
    float _251;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _249 = (-0.0) - _235;
        _250 = (-0.0) - _236;
        _251 = (-0.0) - _237;
    }
    else
    {
        _249 = _235;
        _250 = _236;
        _251 = _237;
    }
    vec4 _269 = texture(sampler2D(P_ACParts_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _274 = _269.z;
    float _275 = _269.w;
    float _283 = exp2(log2(_274 * cbMtdParam._m0[20u].w) * cbMtdParam._m0[19u].y);
    float _284 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _285 = isnan(1.0) ? _284 : (isnan(_284) ? 1.0 : min(_284, 1.0));
    float _291 = exp2(log2(1.0 - _275) * cbMtdParam._m0[20u].y);
    vec4 _303 = texture(sampler2D(P_ACParts_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _197[6];
    float _198[6];
    float _199[6];
    _197[0u] = cbMtdParam._m0[12u].x;
    _198[0u] = cbMtdParam._m0[12u].y;
    _199[0u] = cbMtdParam._m0[12u].z;
    _197[1u] = cbMtdParam._m0[13u].x;
    _198[1u] = cbMtdParam._m0[13u].y;
    _199[1u] = cbMtdParam._m0[13u].z;
    _197[2u] = cbMtdParam._m0[14u].x;
    _198[2u] = cbMtdParam._m0[14u].y;
    _199[2u] = cbMtdParam._m0[14u].z;
    _197[3u] = cbMtdParam._m0[15u].x;
    _198[3u] = cbMtdParam._m0[15u].y;
    _199[3u] = cbMtdParam._m0[15u].z;
    _197[4u] = cbMtdParam._m0[16u].x;
    _198[4u] = cbMtdParam._m0[16u].y;
    _199[4u] = cbMtdParam._m0[16u].z;
    _197[5u] = cbMtdParam._m0[11u].x;
    _198[5u] = cbMtdParam._m0[11u].y;
    _199[5u] = cbMtdParam._m0[11u].z;
    vec4 _385 = texture(sampler2D(P_ACParts_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _387 = _385.x;
    float _388 = _385.y;
    float _416 = roundEven(((_387 + (-0.02500000037252902984619140625)) + ((_385.z * cbMtdParam._m0[19u].w) * (texture(sampler2D(P_ACParts_snp_0_Texture2D_15, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, ((cbMtdParam._m0[19u].z * TEXCOORD.y) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w)).x - _387))) * 6.0);
    float _417 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    uint _420 = uint(int(isnan(5.0) ? _417 : (isnan(_417) ? 5.0 : min(_417, 5.0))));
    vec4 _450 = texture(sampler2D(P_ACParts_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _460 = cbMtdParam._m0[9u].x * _450.x;
    float _461 = cbMtdParam._m0[9u].y * _450.y;
    float _462 = cbMtdParam._m0[9u].z * _450.z;
    float _469 = ((((((_197[_420] - cbMtdParam._m0[10u].x) * _388) + cbMtdParam._m0[10u].x) * _303.x) - _460) * _291) + _460;
    float _470 = ((((((_198[_420] - cbMtdParam._m0[10u].y) * _388) + cbMtdParam._m0[10u].y) * _303.y) - _461) * _291) + _461;
    float _471 = ((((((_199[_420] - cbMtdParam._m0[10u].z) * _388) + cbMtdParam._m0[10u].z) * _303.z) - _462) * _291) + _462;
    float _478 = exp2(log2(_275) * cbMtdParam._m0[21u].y);
    vec4 _490 = texture(sampler2D(P_ACParts_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _523 = texture(sampler2D(P_ACParts_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _534 = cbMtdParam._m0[18u].x * _523.x;
    float _535 = cbMtdParam._m0[18u].y * _523.y;
    float _536 = cbMtdParam._m0[18u].z * _523.z;
    vec4 _557 = texture(sampler2D(P_ACParts_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _565 = ((((((((cbMtdParam._m0[17u].x * _490.x) - _469) * _478) + _469) - _534) * _285) + _534) * 4.55000019073486328125) * _557.x;
    float _567 = ((((((((cbMtdParam._m0[17u].y * _490.y) - _470) * _478) + _470) - _535) * _285) + _535) * 4.55000019073486328125) * _557.y;
    float _569 = ((((((((cbMtdParam._m0[17u].z * _490.z) - _471) * _478) + _471) - _536) * _285) + _536) * 4.55000019073486328125) * _557.z;
    float _570 = _557.w * _303.w;
    vec4 _582 = texture(sampler2D(P_ACParts_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _584 = _582.x;
    float _602 = (((1.0 - _584) + texture(sampler2D(P_ACParts_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x) * _285) + _584;
    float _621 = (((texture(sampler2D(P_ACParts_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x - _602) + cbMtdParam._m0[20u].z) * _291) + _602;
    float _644 = (((texture(sampler2D(P_ACParts_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - _621) + cbMtdParam._m0[22u].y) * _478) + _621;
    vec4 _656 = texture(sampler2D(P_ACParts_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _674 = texture(sampler2D(P_ACParts_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _676 = _674.x;
    float _677 = _674.y;
    float _680 = cbMtdParam._m0[19u].x + _674.z;
    float _683 = (((cbMtdParam._m0[20u].x + _656.z) - _680) * _291) + _680;
    vec4 _695 = texture(sampler2D(P_ACParts_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    vec4 _719 = texture(sampler2D(P_ACParts_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _721 = _719.x;
    float _722 = _719.y;
    float _725 = cbMtdParam._m0[21u].x + _719.z;
    float _728 = ((((_274 * 2.0) * ((((_695.z - _683) + cbMtdParam._m0[22u].x) * _478) + _683)) - _725) * _285) + _725;
    float _739 = ((_656.x - _676) * _291) + _676;
    float _740 = ((_656.y - _677) * _291) + _677;
    float _755 = (((((((_695.x - _739) * _478) + _739) - _721) * _285) + _721) * 2.0) + (-1.0);
    float _756 = (((((((_695.y - _740) * _478) + _740) - _722) * _285) + _722) * 2.0) + (-1.0);
    float _757 = dot(vec2(_755, _756), vec2(_755, _756));
    float _3719 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _762 = sqrt(1.0 - (isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0))));
    float _765 = _755 + (cbMtdParam._m0[21u].w * ((_269.x * 2.0) + (-1.0)));
    float _766 = _756 + (cbMtdParam._m0[21u].w * ((_269.y * 2.0) + (-1.0)));
    float _769 = fma(_762, _249, fma(_766, _241 * TANGENT.x, (_227 * _219) * _765));
    float _772 = fma(_762, _250, fma(_766, _241 * TANGENT.y, (_227 * _220) * _765));
    float _775 = fma(_762, _251, fma(_766, _241 * TANGENT.z, (_227 * _221) * _765));
    float _779 = inversesqrt(dot(vec3(_769, _772, _775), vec3(_769, _772, _775)));
    float _780 = _779 * _769;
    float _781 = _779 * _772;
    float _782 = _779 * _775;
    float _3730 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _783 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
    float _3741 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _784 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    float _3752 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _3763 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _3774 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _3785 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _788 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _804 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _844 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _854 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _844);
    float _855 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _844);
    float _856 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _844);
    float _860 = inversesqrt(dot(vec3(_854, _855, _856), vec3(_854, _855, _856)));
    float _861 = _854 * _860;
    float _862 = _855 * _860;
    float _863 = _856 * _860;
    float _869 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _870 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _872 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _874 = _872.w;
    float _892 = fma(_782, cbSceneParam._m0[5u].z, fma(_781, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _780));
    float _895 = fma(_782, cbSceneParam._m0[6u].z, fma(_781, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _780));
    float _898 = fma(_782, cbSceneParam._m0[7u].z, fma(_781, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _780));
    vec4 _900 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _911 = (((_900.y - _784) + (_900.w * _784)) * cbMtdParam._m0[3u].x) + _784;
    uint _924 = uint(roundEven(NORMAL.w)) * 13u;
    uint _926 = (_924 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _932 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0)))) * cbInstanceData._m0[_926].x;
    float _933 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0)))) * cbInstanceData._m0[_926].y;
    float _934 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0)))) * cbInstanceData._m0[_926].z;
    float _3796 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _935 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _3807 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _936 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _3818 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _937 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    vec4 _938 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _943 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _954 = (((_943.x - _788) + (_943.w * _788)) * cbMtdParam._m0[3u].x) + _788;
    float _967 = (cbMtdParam._m0[3u].x * (((_935 * _874) - _935) + _938.x)) + _935;
    float _968 = (cbMtdParam._m0[3u].x * (((_936 * _874) - _936) + _938.y)) + _936;
    float _969 = (cbMtdParam._m0[3u].x * (((_937 * _874) - _937) + _938.z)) + _937;
    float _970 = 1.0 - _954;
    float _971 = _970 * _967;
    float _972 = _970 * _968;
    float _973 = _970 * _969;
    float _978 = (_967 + (-0.039999999105930328369140625)) * _954;
    float _979 = (_968 + (-0.039999999105930328369140625)) * _954;
    float _980 = (_969 + (-0.039999999105930328369140625)) * _954;
    float _981 = _978 + 0.039999999105930328369140625;
    float _983 = _979 + 0.039999999105930328369140625;
    float _984 = _980 + 0.039999999105930328369140625;
    vec4 _993 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _869, cbSceneParam._m0[86u].y * _870));
    float _996 = _993.x * TEXCOORD_4;
    float _997 = dot(vec3(_780, _781, _782), vec3(_861, _862, _863));
    float _1000 = _997 * 2.0;
    float _1004 = (_1000 * _780) - _861;
    float _1005 = (_1000 * _781) - _862;
    float _1006 = (_1000 * _782) - _863;
    float _1010 = abs(dot(vec3(_861, _862, _863), vec3(_780, _781, _782)));
    float _3829 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _1012 = sqrt(_911);
    float _1024 = exp2((_1012 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1012 * 3.0));
    float _1030 = (1.0 - _1024) * ((_1012 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1031 = _1024 * _1012;
    float _1059 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1063 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1067 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1369;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1094 = fma(_1067, cbModelParam._m0[26u].z, fma(_1063, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1059));
        float _1098 = fma(_1067, cbModelParam._m0[27u].z, fma(_1063, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1059));
        float _1102 = fma(_1067, cbModelParam._m0[28u].z, fma(_1063, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1059));
        float _1127 = _1059 + _780;
        float _1128 = _1063 + _781;
        float _1129 = _1067 + _782;
        float _1139 = fma(_1129, cbModelParam._m0[26u].z, fma(_1128, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1127)) - _1094;
        float _1140 = fma(_1129, cbModelParam._m0[27u].z, fma(_1128, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1127)) - _1098;
        float _1141 = fma(_1129, cbModelParam._m0[28u].z, fma(_1128, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1127)) - _1102;
        float _1145 = inversesqrt(dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141)));
        float _1158 = ((_1145 * _1139) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1094 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1159 = ((_1145 * _1140) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1098 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1160 = ((_1145 * _1141) / cbModelParam._m0[34u].z) + ((((((_1102 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        float _1197 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1163.x + (-0.5));
        float _1199 = _1197 * (_1163.y + (-0.5));
        float _1200 = _1197 * (_1163.z + (-0.5));
        float _1207 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1170.x + (-0.5));
        float _1209 = _1207 * (_1170.y + (-0.5));
        float _1210 = _1207 * (_1170.z + (-0.5));
        float _1217 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1177.x + (-0.5));
        float _1219 = _1217 * (_1177.y + (-0.5));
        float _1220 = _1217 * (_1177.z + (-0.5));
        float _1227 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1184.x + (-0.5));
        float _1229 = _1227 * (_1184.y + (-0.5));
        float _1230 = _1227 * (_1184.z + (-0.5));
        float _1231 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1234 = _1198 * 0.5;
        float _1235 = _1208 * 0.5;
        float _1236 = _1218 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1251 = (dot(vec3(_780, _781, _782), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _3855 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1261 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1231 + 9.9999997473787516355514526367188e-06);
        float _3866 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1263 = _1262 * 2.0;
        float _1267 = (1.0 - _1262) / (_1262 + 1.0);
        float _3877 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1277 = ((((1.0 - _1268) * (_1263 + 2.0)) * exp2(log2(isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * (_1263 + 1.0))) + _1268) * _1231;
        float _1278 = _1199 * 0.5;
        float _1279 = _1209 * 0.5;
        float _1280 = _1219 * 0.5;
        float _1281 = dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280));
        float _1286 = (_1281 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1281);
        float _1294 = (dot(vec3(_780, _781, _782), vec3(_1286 * _1278, _1286 * _1279, _1286 * _1280)) + 1.0) * 0.5;
        float _3888 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1303 = sqrt(((_1279 * _1279) + (_1278 * _1278)) + (_1280 * _1280)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _3899 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1305 = _1304 * 2.0;
        float _1309 = (1.0 - _1304) / (_1304 + 1.0);
        float _3910 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1319 = ((((1.0 - _1310) * (_1305 + 2.0)) * exp2(log2(isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_1305 + 1.0))) + _1310) * _1232;
        float _1320 = _1200 * 0.5;
        float _1321 = _1210 * 0.5;
        float _1322 = _1220 * 0.5;
        float _1323 = dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322));
        float _1328 = (_1323 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1323);
        float _1336 = (dot(vec3(_780, _781, _782), vec3(_1328 * _1320, _1328 * _1321, _1328 * _1322)) + 1.0) * 0.5;
        float _3921 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1345 = sqrt(((_1321 * _1321) + (_1320 * _1320)) + (_1322 * _1322)) / (_1233 + 9.9999997473787516355514526367188e-06);
        float _3932 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1347 = _1346 * 2.0;
        float _1351 = (1.0 - _1346) / (_1346 + 1.0);
        float _3943 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1361 = ((((1.0 - _1352) * (_1347 + 2.0)) * exp2(log2(isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * (_1347 + 1.0))) + _1352) * _1233;
        _1369 = _1200;
        _1371 = _1199;
        _1372 = _1198;
        _1373 = _1210;
        _1374 = _1209;
        _1375 = _1208;
        _1376 = _1220;
        _1377 = _1219;
        _1378 = _1218;
        _1379 = _1233;
        _1380 = _1232;
        _1381 = _1231;
        _1382 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)));
        _1383 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)));
        _1384 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)));
    }
    else
    {
        _1369 = _1370;
        _1371 = _1370;
        _1372 = _1370;
        _1373 = _1370;
        _1374 = _1370;
        _1375 = _1370;
        _1376 = _1370;
        _1377 = _1370;
        _1378 = _1370;
        _1379 = _1370;
        _1380 = _1370;
        _1381 = _1370;
        _1382 = 0.0;
        _1383 = 0.0;
        _1384 = 0.0;
    }
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1410 = fma(_1067, cbModelParam._m0[30u].z, fma(_1063, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1059));
        float _1414 = fma(_1067, cbModelParam._m0[31u].z, fma(_1063, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1059));
        float _1418 = fma(_1067, cbModelParam._m0[32u].z, fma(_1063, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1059));
        float _1441 = _1059 + _780;
        float _1442 = _1063 + _781;
        float _1443 = _1067 + _782;
        float _1453 = fma(_1443, cbModelParam._m0[30u].z, fma(_1442, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1441)) - _1410;
        float _1454 = fma(_1443, cbModelParam._m0[31u].z, fma(_1442, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1441)) - _1414;
        float _1455 = fma(_1443, cbModelParam._m0[32u].z, fma(_1442, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1441)) - _1418;
        float _1459 = inversesqrt(dot(vec3(_1453, _1454, _1455), vec3(_1453, _1454, _1455)));
        float _1472 = ((_1459 * _1453) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1410 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1473 = ((_1459 * _1454) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1414 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1474 = ((_1459 * _1455) / cbModelParam._m0[35u].z) + ((((((_1418 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1476 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1472, _1473, _1474), 0.0);
        vec4 _1483 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1472, _1473, _1474), 0.0);
        vec4 _1490 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1472, _1473, _1474), 0.0);
        vec4 _1497 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1472, _1473, _1474), 0.0);
        float _1509 = exp2((_1476.w + (-0.5)) * 20.0) * 2.0;
        float _1510 = _1509 * (_1476.x + (-0.5));
        float _1511 = _1509 * (_1476.y + (-0.5));
        float _1512 = _1509 * (_1476.z + (-0.5));
        float _1519 = exp2((_1483.w + (-0.5)) * 20.0) * 2.0;
        float _1520 = _1519 * (_1483.x + (-0.5));
        float _1521 = _1519 * (_1483.y + (-0.5));
        float _1522 = _1519 * (_1483.z + (-0.5));
        float _1529 = exp2((_1490.w + (-0.5)) * 20.0) * 2.0;
        float _1530 = _1529 * (_1490.x + (-0.5));
        float _1531 = _1529 * (_1490.y + (-0.5));
        float _1532 = _1529 * (_1490.z + (-0.5));
        float _1539 = exp2((_1497.w + (-0.5)) * 20.0) * 2.0;
        float _1540 = _1539 * (_1497.x + (-0.5));
        float _1541 = _1539 * (_1497.y + (-0.5));
        float _1542 = _1539 * (_1497.z + (-0.5));
        float _1543 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1544 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1545 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1546 = _1510 * 0.5;
        float _1547 = _1520 * 0.5;
        float _1548 = _1530 * 0.5;
        float _1549 = dot(vec3(_1546, _1547, _1548), vec3(_1546, _1547, _1548));
        float _1554 = (_1549 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1549);
        float _1562 = (dot(vec3(_780, _781, _782), vec3(_1554 * _1546, _1554 * _1547, _1554 * _1548)) + 1.0) * 0.5;
        float _3984 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1571 = sqrt(((_1547 * _1547) + (_1546 * _1546)) + (_1548 * _1548)) / (_1543 + 9.9999997473787516355514526367188e-06);
        float _3995 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1573 = _1572 * 2.0;
        float _1577 = (1.0 - _1572) / (_1572 + 1.0);
        float _4006 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1587 = ((((1.0 - _1578) * (_1573 + 2.0)) * exp2(log2(isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_1573 + 1.0))) + _1578) * _1543;
        float _1588 = _1511 * 0.5;
        float _1589 = _1521 * 0.5;
        float _1590 = _1531 * 0.5;
        float _1591 = dot(vec3(_1588, _1589, _1590), vec3(_1588, _1589, _1590));
        float _1596 = (_1591 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1591);
        float _1604 = (dot(vec3(_780, _781, _782), vec3(_1596 * _1588, _1596 * _1589, _1596 * _1590)) + 1.0) * 0.5;
        float _4017 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1613 = sqrt(((_1589 * _1589) + (_1588 * _1588)) + (_1590 * _1590)) / (_1544 + 9.9999997473787516355514526367188e-06);
        float _4028 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1614 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1615 = _1614 * 2.0;
        float _1619 = (1.0 - _1614) / (_1614 + 1.0);
        float _4039 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1629 = ((((1.0 - _1620) * (_1615 + 2.0)) * exp2(log2(isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_1615 + 1.0))) + _1620) * _1544;
        float _1630 = _1512 * 0.5;
        float _1631 = _1522 * 0.5;
        float _1632 = _1532 * 0.5;
        float _1633 = dot(vec3(_1630, _1631, _1632), vec3(_1630, _1631, _1632));
        float _1638 = (_1633 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1633);
        float _1646 = (dot(vec3(_780, _781, _782), vec3(_1638 * _1630, _1638 * _1631, _1638 * _1632)) + 1.0) * 0.5;
        float _4050 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1655 = sqrt(((_1631 * _1631) + (_1630 * _1630)) + (_1632 * _1632)) / (_1545 + 9.9999997473787516355514526367188e-06);
        float _4061 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1656 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1657 = _1656 * 2.0;
        float _1661 = (1.0 - _1656) / (_1656 + 1.0);
        float _4072 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1671 = ((((1.0 - _1662) * (_1657 + 2.0)) * exp2(log2(isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_1657 + 1.0))) + _1662) * _1545;
        _1679 = _1512;
        _1680 = _1511;
        _1681 = _1510;
        _1682 = _1522;
        _1683 = _1521;
        _1684 = _1520;
        _1685 = _1532;
        _1686 = _1531;
        _1687 = _1530;
        _1688 = _1545;
        _1689 = _1544;
        _1690 = _1543;
        _1691 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)));
        _1692 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)));
        _1693 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0)));
    }
    else
    {
        _1679 = _1370;
        _1680 = _1370;
        _1681 = _1370;
        _1682 = _1370;
        _1683 = _1370;
        _1684 = _1370;
        _1685 = _1370;
        _1686 = _1370;
        _1687 = _1370;
        _1688 = _1370;
        _1689 = _1370;
        _1690 = _1370;
        _1691 = 0.0;
        _1692 = 0.0;
        _1693 = 0.0;
    }
    float _1703 = (cbModelParam._m0[1u].x * (_1691 - _1382)) + _1382;
    float _1704 = (cbModelParam._m0[1u].x * (_1692 - _1383)) + _1383;
    float _1705 = (cbModelParam._m0[1u].x * (_1693 - _1384)) + _1384;
    float _1726 = fma(_1705, cbSceneParam._m0[89u].z, fma(_1704, cbSceneParam._m0[89u].y, _1703 * cbSceneParam._m0[89u].x));
    float _1729 = fma(_1705, cbSceneParam._m0[90u].z, fma(_1704, cbSceneParam._m0[90u].y, _1703 * cbSceneParam._m0[90u].x));
    float _1732 = fma(_1705, cbSceneParam._m0[91u].z, fma(_1704, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1703));
    float _1747 = _1004 * 0.5;
    float _1748 = _1005 * 0.5;
    float _1749 = _1006 * 0.5;
    float _1750 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1681, _1684, _1687, _1690));
    float _1753 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1680, _1683, _1686, _1689));
    float _1756 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1679, _1682, _1685, _1688));
    float _1790;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1763 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1369, _1373, _1376, _1379));
        float _1767 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1371, _1374, _1377, _1380));
        float _1771 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1372, _1375, _1378, _1381));
        float _1778 = dot(vec4(cbModelParam._m0[39u]), vec4(_1747, _1748, _1749, 1.0));
        _1790 = dot(vec3(isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)), isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0)), isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1778) ? 0.0 : (isnan(0.0) ? _1778 : max(0.0, _1778))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1790 = 1.0;
    }
    float _1801;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1792 = dot(vec4(cbModelParam._m0[40u]), vec4(_1747, _1748, _1749, 1.0));
        _1801 = dot(vec3(isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)), isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0)), isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1792) ? 0.0 : (isnan(0.0) ? _1792 : max(0.0, _1792))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1801 = 1.0;
    }
    float _1805 = (_1801 * cbModelParam._m0[1u].x) + (_1790 * (1.0 - cbModelParam._m0[1u].x));
    float _1815 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _911);
    float _1816 = isnan(_1815) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1815 : min(cbModelParam._m0[25u].z, _1815));
    float _1896;
    float _1898;
    float _1900;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1863 = fma(_1067, cbModelParam._m0[13u].z, fma(_1063, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1059)) + cbModelParam._m0[13u].w;
        float _1867 = fma(_1067, cbModelParam._m0[14u].z, fma(_1063, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1059)) + cbModelParam._m0[14u].w;
        float _1871 = fma(_1067, cbModelParam._m0[15u].z, fma(_1063, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1059)) + cbModelParam._m0[15u].w;
        float _1874 = fma(_1006, cbModelParam._m0[13u].z, fma(_1005, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1004));
        float _1877 = fma(_1006, cbModelParam._m0[14u].z, fma(_1005, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1004));
        float _1880 = fma(_1006, cbModelParam._m0[15u].z, fma(_1005, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1004));
        float _1908;
        if (_1874 > 0.0)
        {
            _1908 = abs((1.0 - _1863) / _1874);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1863 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1908 = frontier_phi_16_14_ladder;
        }
        float _2110;
        if (_1877 > 0.0)
        {
            _2110 = abs((1.0 - _1867) / _1877);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1867 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2110 = frontier_phi_25_21_ladder;
        }
        float _2364;
        if (_1880 > 0.0)
        {
            _2364 = abs((1.0 - _1871) / _1880);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1880 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1871 + 1.0) / _1880);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2364 = frontier_phi_37_32_ladder;
        }
        float _2366 = isnan(_2110) ? _1908 : (isnan(_1908) ? _2110 : min(_1908, _2110));
        float _2367 = isnan(_2364) ? _2366 : (isnan(_2366) ? _2364 : min(_2366, _2364));
        float _2371 = (_2367 * _1874) + _1863;
        float _2372 = (_2367 * _1877) + _1867;
        float _2373 = (_2367 * _1880) + _1871;
        float _2374 = _2367 * 9.9999997473787516355514526367188e-05;
        float _2376 = (-1.0) - _2374;
        float _2378 = _2374 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2373 > _2378) || ((_2373 < _2376) || ((_2372 > _2378) || ((_2372 < _2376) || ((_2371 < _2376) || (_2371 > _2378))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2501 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2373, cbModelParam._m0[9u].z, fma(_2372, cbModelParam._m0[9u].y, _2371 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2373, cbModelParam._m0[10u].z, fma(_2372, cbModelParam._m0[10u].y, _2371 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2373, cbModelParam._m0[11u].z, fma(_2372, cbModelParam._m0[11u].y, _2371 * cbModelParam._m0[11u].x))), _1816);
            frontier_phi_15_37_ladder = _2501.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2501.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2501.x * cbModelParam._m0[1u].y;
        }
        _1896 = frontier_phi_15_37_ladder_2;
        _1898 = frontier_phi_15_37_ladder_1;
        _1900 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1884 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1004, _1005, _1006), _1816);
        _1896 = _1884.x * cbModelParam._m0[1u].y;
        _1898 = _1884.y * cbModelParam._m0[1u].y;
        _1900 = _1884.z * cbModelParam._m0[1u].y;
    }
    float _1904 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _911);
    float _1905 = isnan(_1904) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1904 : min(cbModelParam._m0[25u].w, _1904));
    float _1994;
    float _1996;
    float _1998;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1958 = fma(_1067, cbModelParam._m0[21u].z, fma(_1063, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1059)) + cbModelParam._m0[21u].w;
        float _1962 = fma(_1067, cbModelParam._m0[22u].z, fma(_1063, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1059)) + cbModelParam._m0[22u].w;
        float _1966 = fma(_1067, cbModelParam._m0[23u].z, fma(_1063, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1059)) + cbModelParam._m0[23u].w;
        float _1969 = fma(_1006, cbModelParam._m0[21u].z, fma(_1005, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1004));
        float _1972 = fma(_1006, cbModelParam._m0[22u].z, fma(_1005, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1004));
        float _1975 = fma(_1006, cbModelParam._m0[23u].z, fma(_1005, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1004));
        float _2115;
        if (_1969 > 0.0)
        {
            _2115 = abs((1.0 - _1958) / _1969);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1969 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1958 + 1.0) / _1969);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2115 = frontier_phi_27_23_ladder;
        }
        float _2391;
        if (_1972 > 0.0)
        {
            _2391 = abs((1.0 - _1962) / _1972);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1972 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1962 + 1.0) / _1972);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2391 = frontier_phi_39_34_ladder;
        }
        float _2604;
        if (_1975 > 0.0)
        {
            _2604 = abs((1.0 - _1966) / _1975);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1975 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1966 + 1.0) / _1975);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2604 = frontier_phi_48_45_ladder;
        }
        float _2606 = isnan(_2391) ? _2115 : (isnan(_2115) ? _2391 : min(_2115, _2391));
        float _2607 = isnan(_2604) ? _2606 : (isnan(_2606) ? _2604 : min(_2606, _2604));
        float _2611 = (_2607 * _1969) + _1958;
        float _2612 = (_2607 * _1972) + _1962;
        float _2613 = (_2607 * _1975) + _1966;
        float _2614 = _2607 * 9.9999997473787516355514526367188e-05;
        float _2615 = (-1.0) - _2614;
        float _2617 = _2614 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2613 > _2617) || ((_2613 < _2615) || ((_2612 > _2617) || ((_2612 < _2615) || ((_2611 < _2615) || (_2611 > _2617))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2813 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2613, cbModelParam._m0[17u].z, fma(_2612, cbModelParam._m0[17u].y, _2611 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2613, cbModelParam._m0[18u].z, fma(_2612, cbModelParam._m0[18u].y, _2611 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2613, cbModelParam._m0[19u].z, fma(_2612, cbModelParam._m0[19u].y, _2611 * cbModelParam._m0[19u].x))), _1905);
            frontier_phi_24_48_ladder = _2813.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2813.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2813.x * cbModelParam._m0[1u].z;
        }
        _1994 = frontier_phi_24_48_ladder_2;
        _1996 = frontier_phi_24_48_ladder_1;
        _1998 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1978 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1004, _1005, _1006), _1905);
        _1994 = _1978.x * cbModelParam._m0[1u].z;
        _1996 = _1978.y * cbModelParam._m0[1u].z;
        _1998 = _1978.z * cbModelParam._m0[1u].z;
    }
    float _2011 = (((_1030 * _981) + _1031) * _996) * ((cbModelParam._m0[1u].w * (_1994 - _1896)) + _1896);
    float _2013 = (((_1030 * _983) + _1031) * _996) * ((cbModelParam._m0[1u].w * (_1996 - _1898)) + _1898);
    float _2015 = (((_1030 * _984) + _1031) * _996) * ((cbModelParam._m0[1u].w * (_1998 - _1900)) + _1900);
    float _2018 = fma(_2015, cbSceneParam._m0[89u].z, fma(_2013, cbSceneParam._m0[89u].y, _2011 * cbSceneParam._m0[89u].x));
    float _2021 = fma(_2015, cbSceneParam._m0[90u].z, fma(_2013, cbSceneParam._m0[90u].y, _2011 * cbSceneParam._m0[90u].x));
    float _2024 = fma(_2015, cbSceneParam._m0[91u].z, fma(_2013, cbSceneParam._m0[91u].y, _2011 * cbSceneParam._m0[91u].x));
    uvec4 _2034 = floatBitsToUint(cbInstanceData._m0[_924 + 5u]);
    uint _2036 = _2034.x * 14u;
    uint _2037 = _2036 + 13u;
    float _2044 = _996 + (-1.0);
    float _2049 = (cbLight._m0[_2037].x * _2044) + 1.0;
    float _2050 = (cbLight._m0[_2037].y * _2044) + 1.0;
    float _2051 = (cbLight._m0[_2037].z * _2044) + 1.0;
    float _2052 = (cbLight._m0[_2037].w * _2044) + 1.0;
    uint _2053 = _2036 + 5u;
    float _2059 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
    uint _2063 = _2036 + 4u;
    float _2069 = isnan(1.0) ? _2049 : (isnan(_2049) ? 1.0 : min(_2049, 1.0));
    uint _2073 = _2036 | 1u;
    float _2084 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_780, _781, _782));
    float _2087 = dot(vec3(cbLight._m0[_2073].xyz), vec3(_780, _781, _782));
    float _4208 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _4219 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2092 = (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * 0.3183098733425140380859375;
    float _2094 = (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * 0.3183098733425140380859375;
    float _2101 = ((cbLight._m0[_2053].x * _2059) * _2094) + ((cbLight._m0[_2063].x * _2069) * _2092);
    float _2102 = ((_2059 * cbLight._m0[_2053].y) * _2094) + ((_2069 * cbLight._m0[_2063].y) * _2092);
    float _2103 = ((_2059 * cbLight._m0[_2053].z) * _2094) + ((_2069 * cbLight._m0[_2063].z) * _2092);
    uvec4 _2107 = floatBitsToUint(cbLight._m0[_2036 + 12u]);
    bool _2109 = _2107.x == 0u;
    float _2120;
    float _2122;
    float _2124;
    if (_2109)
    {
        _2120 = _2101;
        _2122 = _2102;
        _2124 = _2103;
    }
    else
    {
        uint _2128 = _2036 + 6u;
        float _2144 = (dot(vec3(cbLight._m0[_2036 + 2u].xyz), vec3(_780, _781, _782)) * 0.5) + 0.5;
        float _2145 = _2144 * _2144;
        float _4230 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
        float _2146 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _2147 = isnan(1.0) ? _2051 : (isnan(_2051) ? 1.0 : min(_2051, 1.0));
        _2120 = (((cbLight._m0[_2128].x * 0.3183098733425140380859375) * _2146) * _2147) + _2101;
        _2122 = (((cbLight._m0[_2128].y * 0.3183098733425140380859375) * _2146) * _2147) + _2102;
        _2124 = (((cbLight._m0[_2128].z * 0.3183098733425140380859375) * _2146) * _2147) + _2103;
    }
    bool _2127 = _2107.y == 0u;
    float _2165;
    float _2167;
    float _2169;
    if (_2127)
    {
        _2165 = _2120;
        _2167 = _2122;
        _2169 = _2124;
    }
    else
    {
        uint _2335 = _2036 + 7u;
        float _2351 = (dot(vec3(cbLight._m0[_2036 + 3u].xyz), vec3(_780, _781, _782)) * 0.5) + 0.5;
        float _2352 = _2351 * _2351;
        float _4246 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2353 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _2354 = isnan(1.0) ? _2052 : (isnan(_2052) ? 1.0 : min(_2052, 1.0));
        _2165 = (((cbLight._m0[_2335].x * 0.3183098733425140380859375) * _2353) * _2354) + _2120;
        _2167 = (((cbLight._m0[_2335].y * 0.3183098733425140380859375) * _2353) * _2354) + _2122;
        _2169 = (((cbLight._m0[_2335].z * 0.3183098733425140380859375) * _2353) * _2354) + _2124;
    }
    uint _2172 = _2036 + 8u;
    float _2185 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2036].w)) * _911) * 0.949999988079071044921875);
    float _2186 = _2185 * _2185;
    float _2187 = cbLight._m0[_2036].x + _861;
    float _2188 = cbLight._m0[_2036].y + _862;
    float _2189 = cbLight._m0[_2036].z + _863;
    float _2193 = inversesqrt(dot(vec3(_2187, _2188, _2189), vec3(_2187, _2188, _2189)));
    float _2194 = _2193 * _2187;
    float _2195 = _2193 * _2188;
    float _2196 = _2193 * _2189;
    float _2197 = dot(vec3(_780, _781, _782), vec3(cbLight._m0[_2036].xyz));
    float _4262 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2200 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
    float _4273 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _2201 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
    float _2202 = dot(vec3(_780, _781, _782), vec3(_2194, _2195, _2196));
    float _4284 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _2205 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
    float _2206 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_2194, _2195, _2196));
    float _4295 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2210 = _2186 * _2186;
    float _2214 = ((_2205 * _2205) * (_2210 + (-1.0))) + 1.0;
    float _2222 = exp2(log2(1.0 - (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0)))) * 5.0);
    float _2223 = 0.959999978542327880859375 - _978;
    float _2225 = 0.959999978542327880859375 - _979;
    float _2226 = 0.959999978542327880859375 - _980;
    float _2233 = 1.0 - _2186;
    float _2244 = (0.5 / (((_2201 * ((_2200 * _2233) + _2186)) + 9.9999999392252902907785028219223e-09) + (((_2201 * _2233) + _2186) * _2200))) * _2200;
    float _4306 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2246 = (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_2210 / ((_2214 * _2214) * 3.141590118408203125));
    uint _2257 = _2036 + 9u;
    float _2268 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2073].w)) * _911) * 0.949999988079071044921875);
    float _2269 = _2268 * _2268;
    float _2270 = cbLight._m0[_2073].x + _861;
    float _2271 = cbLight._m0[_2073].y + _862;
    float _2272 = cbLight._m0[_2073].z + _863;
    float _2276 = inversesqrt(dot(vec3(_2270, _2271, _2272), vec3(_2270, _2271, _2272)));
    float _2277 = _2276 * _2270;
    float _2278 = _2276 * _2271;
    float _2279 = _2276 * _2272;
    float _2280 = dot(vec3(_780, _781, _782), vec3(cbLight._m0[_2073].xyz));
    float _4317 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2283 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
    float _2284 = dot(vec3(_780, _781, _782), vec3(_2277, _2278, _2279));
    float _4328 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2287 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
    float _2288 = dot(vec3(cbLight._m0[_2073].xyz), vec3(_2277, _2278, _2279));
    float _4339 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2292 = _2269 * _2269;
    float _2296 = ((_2287 * _2287) * (_2292 + (-1.0))) + 1.0;
    float _2303 = exp2(log2(1.0 - (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0)))) * 5.0);
    float _2310 = 1.0 - _2269;
    float _2320 = (0.5 / (((_2201 * ((_2283 * _2310) + _2269)) + 9.9999999392252902907785028219223e-09) + (((_2201 * _2310) + _2269) * _2283))) * _2283;
    float _4350 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2322 = (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_2292 / ((_2296 * _2296) * 3.141590118408203125));
    float _2332 = (((((_2303 * _2223) + _981) * cbLight._m0[_2257].x) * _2322) * _2059) + (((((_2222 * _2223) + _981) * cbLight._m0[_2172].x) * _2246) * _2069);
    float _2333 = (((((_2303 * _2225) + _983) * cbLight._m0[_2257].y) * _2322) * _2059) + (((((_2222 * _2225) + _983) * cbLight._m0[_2172].y) * _2246) * _2069);
    float _2334 = (((((_2303 * _2226) + _984) * cbLight._m0[_2257].z) * _2322) * _2059) + (((((_2222 * _2226) + _984) * cbLight._m0[_2172].z) * _2246) * _2069);
    float _2396;
    float _2398;
    float _2400;
    if (_2109)
    {
        _2396 = _2332;
        _2398 = _2333;
        _2400 = _2334;
    }
    else
    {
        uint _2402 = _2036 + 2u;
        uint _2406 = _2036 + 10u;
        float _2420 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2402].w)) * _911) * 0.949999988079071044921875);
        float _2421 = _2420 * _2420;
        float _2422 = cbLight._m0[_2402].x + _861;
        float _2423 = cbLight._m0[_2402].y + _862;
        float _2424 = cbLight._m0[_2402].z + _863;
        float _2428 = inversesqrt(dot(vec3(_2422, _2423, _2424), vec3(_2422, _2423, _2424)));
        float _2429 = _2428 * _2422;
        float _2430 = _2428 * _2423;
        float _2431 = _2428 * _2424;
        float _2432 = dot(vec3(_780, _781, _782), vec3(cbLight._m0[_2402].xyz));
        float _4361 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2435 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _2436 = dot(vec3(_780, _781, _782), vec3(_2429, _2430, _2431));
        float _4372 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        float _2439 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _2440 = dot(vec3(cbLight._m0[_2402].xyz), vec3(_2429, _2430, _2431));
        float _4383 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        float _2444 = _2421 * _2421;
        float _2448 = ((_2439 * _2439) * (_2444 + (-1.0))) + 1.0;
        float _2455 = exp2(log2(1.0 - (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0)))) * 5.0);
        float _2462 = 1.0 - _2421;
        float _2472 = (0.5 / (((_2201 * ((_2435 * _2462) + _2421)) + 9.9999999392252902907785028219223e-09) + (((_2201 * _2462) + _2421) * _2435))) * _2435;
        float _4394 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2474 = (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_2444 / ((_2448 * _2448) * 3.141590118408203125));
        float _2475 = isnan(1.0) ? _2051 : (isnan(_2051) ? 1.0 : min(_2051, 1.0));
        _2396 = (((((_2455 * _2223) + _981) * cbLight._m0[_2406].x) * _2474) * _2475) + _2332;
        _2398 = (((((_2455 * _2225) + _983) * cbLight._m0[_2406].y) * _2474) * _2475) + _2333;
        _2400 = (((((_2455 * _2226) + _984) * cbLight._m0[_2406].z) * _2474) * _2475) + _2334;
    }
    float _2510;
    float _2512;
    float _2514;
    if (_2127)
    {
        _2510 = _2396;
        _2512 = _2398;
        _2514 = _2400;
    }
    else
    {
        uint _2521 = _2036 + 3u;
        uint _2525 = _2036 + 11u;
        float _2539 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2521].w)) * _911) * 0.949999988079071044921875);
        float _2540 = _2539 * _2539;
        float _2541 = cbLight._m0[_2521].x + _861;
        float _2542 = cbLight._m0[_2521].y + _862;
        float _2543 = cbLight._m0[_2521].z + _863;
        float _2547 = inversesqrt(dot(vec3(_2541, _2542, _2543), vec3(_2541, _2542, _2543)));
        float _2548 = _2547 * _2541;
        float _2549 = _2547 * _2542;
        float _2550 = _2547 * _2543;
        float _2551 = dot(vec3(_780, _781, _782), vec3(cbLight._m0[_2521].xyz));
        float _4410 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        float _2554 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _2555 = dot(vec3(_780, _781, _782), vec3(_2548, _2549, _2550));
        float _4421 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2558 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _2559 = dot(vec3(cbLight._m0[_2521].xyz), vec3(_2548, _2549, _2550));
        float _4432 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2563 = _2540 * _2540;
        float _2567 = ((_2558 * _2558) * (_2563 + (-1.0))) + 1.0;
        float _2574 = exp2(log2(1.0 - (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0)))) * 5.0);
        float _2581 = 1.0 - _2540;
        float _2591 = (0.5 / (((_2201 * ((_2554 * _2581) + _2540)) + 9.9999999392252902907785028219223e-09) + (((_2201 * _2581) + _2540) * _2554))) * _2554;
        float _4443 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2593 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2563 / ((_2567 * _2567) * 3.141590118408203125));
        float _2594 = isnan(1.0) ? _2052 : (isnan(_2052) ? 1.0 : min(_2052, 1.0));
        _2510 = (((((_2574 * _2223) + _981) * cbLight._m0[_2525].x) * _2593) * _2594) + _2396;
        _2512 = (((((_2574 * _2225) + _983) * cbLight._m0[_2525].y) * _2593) * _2594) + _2398;
        _2514 = (((((_2574 * _2226) + _984) * cbLight._m0[_2525].z) * _2593) * _2594) + _2400;
    }
    float _2728;
    float _2730;
    float _2732;
    float _2734;
    float _2736;
    float _2738;
    if (_2034.y == 0u)
    {
        float _2669 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2670 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2669;
        float _2671 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2669;
        float _2672 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2669;
        uvec4 _2684 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2685 = _2684.x;
        uint _2696 = uint((float(_2684.y) * floor(float(uint(cbSceneParam._m0[85u].y * _870) / _2685))) + floor(float(uint(cbSceneParam._m0[85u].x * _869) / _2685)));
        float _2706 = (log2(_2672 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2707 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        uint _2710 = uint(isnan(14.0) ? _2707 : (isnan(_2707) ? 14.0 : min(_2707, 14.0)));
        uvec4 _2715 = texelFetch(g_lightClusterGridBuffer, int(((_2710 << 2u) + (_2696 << 6u)) >> 2u));
        uint _2716 = _2715.x;
        uint _2717 = _2684.z;
        float _2818;
        float _2820;
        float _2822;
        float _2824;
        float _2826;
        float _2828;
        if (((((1u << ((_2717 >> 4u) & 15u)) + 4294967295u) & _2716) == 0u) || ((_2717 & 240u) == 0u))
        {
            _2818 = 0.0;
            _2820 = 0.0;
            _2822 = 0.0;
            _2824 = 0.0;
            _2826 = 0.0;
            _2828 = 0.0;
        }
        else
        {
            float _2819;
            float _2821;
            float _2823;
            float _2825;
            float _2827;
            float _2829;
            float _2962 = 0.0;
            float _2963 = 0.0;
            float _2964 = 0.0;
            float _2965 = 0.0;
            float _2966 = 0.0;
            float _2967 = 0.0;
            uint _2968 = 0u;
            uint _2977;
            bool _2978;
            for (;;)
            {
                _2977 = texelFetch(g_lightClassification, int((((_2710 << 5u) + (_2696 << 9u)) + (_2968 << 2u)) >> 2u)).x;
                _2978 = _2977 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2978)
                {
                    frontier_phi_63_pred = _2967;
                    frontier_phi_63_pred_1 = _2966;
                    frontier_phi_63_pred_2 = _2965;
                    frontier_phi_63_pred_3 = _2964;
                    frontier_phi_63_pred_4 = _2963;
                    frontier_phi_63_pred_5 = _2962;
                }
                else
                {
                    float _3086;
                    float _3087;
                    float _3088;
                    float _3089;
                    float _3090;
                    float _3091;
                    uint _3092;
                    _3086 = _2962;
                    _3087 = _2963;
                    _3088 = _2964;
                    _3089 = _2965;
                    _3090 = _2966;
                    _3091 = _2967;
                    _3092 = _2977;
                    float _3018;
                    float _3019;
                    float _3020;
                    float _3021;
                    float _3022;
                    float _3023;
                    for (;;)
                    {
                        uint _3096 = uint(findLSB(_3092)) + (_2968 << 5u);
                        uint _3093 = (_3092 + 4294967295u) & _3092;
                        uint _3098 = _3096 * 48u;
                        vec4 _3112 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3098)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 3u)).x));
                        uint _3118 = (_3096 * 48u) + 4u;
                        vec4 _3131 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3118)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 3u)).x));
                        uint _3137 = (_3096 * 48u) + 8u;
                        vec3 _3148 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3137)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 2u)).x));
                        float _3152 = _3112.x - _2670;
                        float _3153 = _3112.y - _2671;
                        float _3154 = _3112.z - _2672;
                        float _3155 = dot(vec3(_3152, _3153, _3154), vec3(_3152, _3153, _3154));
                        float _3158 = inversesqrt(_3155);
                        float _3159 = _3158 * _3152;
                        float _3160 = _3158 * _3153;
                        float _3161 = _3158 * _3154;
                        float _3162 = dot(vec3(_892, _895, _898), vec3(_3159, _3160, _3161));
                        float _3167 = 1.0 - (_3155 * _3112.w);
                        float _4469 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                        float _3168 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
                        float _3169 = sqrt(_3155) * _3131.w;
                        float _3172 = 1.39999997615814208984375 / (_3169 + 1.39999997615814208984375);
                        float _3173 = _3172 * _3172;
                        float _3176 = ((1.0 - _3173) * _3162) + _3173;
                        float _3179 = _3169 * _3169;
                        float _3183 = ((isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0))) * _3168) / ((_3179 * 0.699999988079071044921875) + 1.0);
                        float _3187 = (-0.0) - _2670;
                        float _3188 = (-0.0) - _2671;
                        float _3189 = (-0.0) - _2672;
                        float _3193 = inversesqrt(dot(vec3(_3187, _3188, _3189), vec3(_3187, _3188, _3189)));
                        float _3194 = _3193 * _3187;
                        float _3195 = _3193 * _3188;
                        float _3196 = _3193 * _3189;
                        float _3204 = exp2(log2(1.0 / ((_3179 * 3.5) + 5.0)) * 0.25);
                        float _3205 = 1.0 - _1012;
                        float _3212 = sqrt(1.0 - ((1.0 - (_3205 * _3205)) * (1.0 - (_3204 * _3204))));
                        float _3213 = _3212 * _3212;
                        float _3214 = _3213 * _3213;
                        float _3215 = _3194 + _3159;
                        float _3216 = _3195 + _3160;
                        float _3217 = _3196 + _3161;
                        float _3221 = inversesqrt(dot(vec3(_3215, _3216, _3217), vec3(_3215, _3216, _3217)));
                        float _3225 = dot(vec3(_892, _895, _898), vec3(_3194, _3195, _3196));
                        float _4485 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                        float _3228 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                        float _3229 = dot(vec3(_892, _895, _898), vec3(_3221 * _3215, _3221 * _3216, _3221 * _3217));
                        float _4496 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                        float _3232 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
                        float _3236 = ((_3232 * _3232) * (_3214 + (-1.0))) + 1.0;
                        float _3237 = _3172 * _3213;
                        float _3238 = _3237 * _3237;
                        float _3241 = ((1.0 - _3238) * _3162) + _3238;
                        float _4507 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                        float _3242 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
                        float _3243 = 1.0 - _3213;
                        float _3253 = (0.5 / (((_3242 * ((_3228 * _3243) + _3213)) + 9.9999999392252902907785028219223e-09) + (((_3242 * _3243) + _3213) * _3228))) * _3242;
                        float _4518 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                        float _3264 = (((_3214 * 3.1415927410125732421875) * (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0)))) / ((_3236 * _3236) * ((_3179 * 2.1991131305694580078125) + 3.141590118408203125))) * _3168;
                        _3021 = (_3183 * _3131.x) + _3089;
                        _3022 = (_3183 * _3131.y) + _3090;
                        _3023 = (_3183 * _3131.z) + _3091;
                        _3018 = (_3264 * _3148.x) + _3086;
                        _3019 = (_3264 * _3148.y) + _3087;
                        _3020 = (_3264 * _3148.z) + _3088;
                        if (_3093 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3086 = _3018;
                            _3087 = _3019;
                            _3088 = _3020;
                            _3089 = _3021;
                            _3090 = _3022;
                            _3091 = _3023;
                            _3092 = _3093;
                        }
                    }
                    frontier_phi_63_pred = _3023;
                    frontier_phi_63_pred_1 = _3022;
                    frontier_phi_63_pred_2 = _3021;
                    frontier_phi_63_pred_3 = _3020;
                    frontier_phi_63_pred_4 = _3019;
                    frontier_phi_63_pred_5 = _3018;
                }
                _2829 = frontier_phi_63_pred;
                _2827 = frontier_phi_63_pred_1;
                _2825 = frontier_phi_63_pred_2;
                _2823 = frontier_phi_63_pred_3;
                _2821 = frontier_phi_63_pred_4;
                _2819 = frontier_phi_63_pred_5;
                uint _2969 = _2968 + 1u;
                if (_2969 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2962 = _2819;
                    _2963 = _2821;
                    _2964 = _2823;
                    _2965 = _2825;
                    _2966 = _2827;
                    _2967 = _2829;
                    _2968 = _2969;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2818 = _2819;
            _2820 = _2821;
            _2822 = _2823;
            _2824 = _2825;
            _2826 = _2827;
            _2828 = _2829;
        }
        uvec4 _2832 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2833 = _2832.z;
        uint _2835 = (_2833 >> 8u) & 15u;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        float _2938;
        float _2940;
        if (((4294967295u << _2835) & _2716) == 0u)
        {
            _2930 = _2818;
            _2932 = _2820;
            _2934 = _2822;
            _2936 = _2824;
            _2938 = _2826;
            _2940 = _2828;
        }
        else
        {
            float _2955 = inversesqrt(dot(vec3(_2670, _2671, _2672), vec3(_2670, _2671, _2672)));
            float _2956 = _2955 * _2670;
            float _2957 = _2955 * _2671;
            float _2958 = _2955 * _2672;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2835 < ((_2833 >> 12u) & 15u))
            {
                float _2931;
                float _2933;
                float _2935;
                float _2937;
                float _2939;
                float _2941;
                float _3069 = _2818;
                float _3070 = _2820;
                float _3071 = _2822;
                float _3072 = _2824;
                float _3073 = _2826;
                float _3074 = _2828;
                uint _3075 = _2835;
                uint _3084;
                bool _3085;
                for (;;)
                {
                    _3084 = texelFetch(g_lightClassification, int((((_2710 << 5u) + (_2696 << 9u)) + (_3075 << 2u)) >> 2u)).x;
                    _3085 = _3084 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3085)
                    {
                        frontier_phi_69_pred = _3074;
                        frontier_phi_69_pred_1 = _3073;
                        frontier_phi_69_pred_2 = _3072;
                        frontier_phi_69_pred_3 = _3071;
                        frontier_phi_69_pred_4 = _3070;
                        frontier_phi_69_pred_5 = _3069;
                    }
                    else
                    {
                        float _3269;
                        float _3270;
                        float _3271;
                        float _3272;
                        float _3273;
                        float _3274;
                        float _3563;
                        float _3564;
                        float _3565;
                        float _3566;
                        float _3567;
                        float _3568;
                        float _3282 = _3069;
                        float _3283 = _3070;
                        float _3284 = _3071;
                        float _3285 = _3072;
                        float _3286 = _3073;
                        float _3287 = _3074;
                        uint _3288 = _3084;
                        uint _3289;
                        vec4 _3314;
                        float _3315;
                        vec4 _3330;
                        vec3 _3342;
                        vec4 _3357;
                        vec4 _3372;
                        float _3419;
                        bool _3420;
                        for (;;)
                        {
                            uint _3299 = ((_3075 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3288));
                            _3289 = (_3288 + 4294967295u) & _3288;
                            uint _3301 = _3299 * 40u;
                            _3314 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3301)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 3u)).x));
                            _3315 = _3314.w;
                            uint _3317 = (_3299 * 40u) + 4u;
                            _3330 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3317)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 3u)).x));
                            uint _3332 = (_3299 * 40u) + 8u;
                            _3342 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3332)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 2u)).x));
                            uint _3344 = (_3299 * 40u) + 16u;
                            _3357 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3344)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 3u)).x));
                            uint _3359 = (_3299 * 40u) + 20u;
                            _3372 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3359)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 3u)).x));
                            uint _3375 = (_3299 * 40u) + 24u;
                            vec4 _3388 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3375)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 3u)).x));
                            uint _3394 = (_3299 * 40u) + 28u;
                            vec4 _3407 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3394)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 3u)).x));
                            _3419 = fma(_2672, _3407.z, fma(_2671, _3407.y, _3407.x * _2670)) + _3407.w;
                            _3420 = !((fma(_2672, _3388.z, fma(_2671, _3388.y, _3388.x * _2670)) + _3388.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3420)
                            {
                                float _3447 = _3314.x - _2670;
                                float _3448 = _3314.y - _2671;
                                float _3449 = _3314.z - _2672;
                                float _3450 = dot(vec3(_3447, _3448, _3449), vec3(_3447, _3448, _3449));
                                float _3453 = inversesqrt(_3450);
                                float _3454 = _3453 * _3447;
                                float _3455 = _3453 * _3448;
                                float _3456 = _3453 * _3449;
                                float _3460 = 1.0 - (_3450 / (_3315 * _3315));
                                float _4529 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                                float _3461 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                                float _3465 = sqrt(_3450) * _3330.w;
                                float _3467 = 1.39999997615814208984375 / (_3465 + 1.39999997615814208984375);
                                float _3468 = _3467 * _3467;
                                float _3471 = ((1.0 - _3468) * dot(vec3(_3454, _3455, _3456), vec3(_892, _895, _898))) + _3468;
                                float _3474 = _3465 * _3465;
                                float _3478 = (fma(_2672, _3357.z, fma(_2671, _3357.y, _3357.x * _2670)) + _3357.w) / _3419;
                                float _3479 = (fma(_2672, _3372.z, fma(_2671, _3372.y, _3372.x * _2670)) + _3372.w) / _3419;
                                float _3483 = 1.0 - dot(vec2(_3478, _3479), vec2(_3478, _3479));
                                float _4545 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                                float _3484 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                                float _3485 = _3484 * (((isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0))) * _3461) / ((_3474 * 0.699999988079071044921875) + 1.0));
                                float _3497 = exp2(log2(1.0 / ((_3474 * 3.5) + 5.0)) * 0.25);
                                float _3498 = 1.0 - _1012;
                                float _3505 = sqrt(1.0 - ((1.0 - (_3498 * _3498)) * (1.0 - (_3497 * _3497))));
                                float _3506 = _3505 * _3505;
                                float _3507 = _3506 * _3506;
                                float _3508 = _3454 - _2956;
                                float _3509 = _3455 - _2957;
                                float _3510 = _3456 - _2958;
                                float _3514 = inversesqrt(dot(vec3(_3508, _3509, _3510), vec3(_3508, _3509, _3510)));
                                float _3518 = dot(vec3(_892, _895, _898), vec3((-0.0) - _2956, (-0.0) - _2957, (-0.0) - _2958));
                                float _4556 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                                float _3521 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
                                float _3522 = dot(vec3(_892, _895, _898), vec3(_3514 * _3508, _3514 * _3509, _3514 * _3510));
                                float _4567 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                                float _3525 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
                                float _3529 = ((_3525 * _3525) * (_3507 + (-1.0))) + 1.0;
                                float _3530 = _3467 * _3506;
                                float _3531 = _3530 * _3530;
                                float _3537 = ((1.0 - _3531) * dot(vec3(_892, _895, _898), vec3(_3454, _3455, _3456))) + _3531;
                                float _4578 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                                float _3538 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                                float _3539 = 1.0 - _3506;
                                float _3549 = (0.5 / (((_3538 * ((_3521 * _3539) + _3506)) + 9.9999999392252902907785028219223e-09) + (((_3538 * _3539) + _3506) * _3521))) * _3538;
                                float _4589 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                                float _3559 = (_3484 * _3461) * (((_3507 * 3.1415927410125732421875) * (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0)))) / ((_3529 * _3529) * ((_3474 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3485 * _3330.z;
                                frontier_phi_75_pred_1 = _3485 * _3330.y;
                                frontier_phi_75_pred_2 = _3485 * _3330.x;
                                frontier_phi_75_pred_3 = _3559 * _3342.z;
                                frontier_phi_75_pred_4 = _3559 * _3342.y;
                                frontier_phi_75_pred_5 = _3559 * _3342.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3568 = frontier_phi_75_pred;
                            _3567 = frontier_phi_75_pred_1;
                            _3566 = frontier_phi_75_pred_2;
                            _3565 = frontier_phi_75_pred_3;
                            _3564 = frontier_phi_75_pred_4;
                            _3563 = frontier_phi_75_pred_5;
                            _3272 = _3566 + _3285;
                            _3273 = _3567 + _3286;
                            _3274 = _3568 + _3287;
                            _3269 = _3563 + _3282;
                            _3270 = _3564 + _3283;
                            _3271 = _3565 + _3284;
                            if (_3289 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3282 = _3269;
                                _3283 = _3270;
                                _3284 = _3271;
                                _3285 = _3272;
                                _3286 = _3273;
                                _3287 = _3274;
                                _3288 = _3289;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3274;
                        frontier_phi_69_pred_1 = _3273;
                        frontier_phi_69_pred_2 = _3272;
                        frontier_phi_69_pred_3 = _3271;
                        frontier_phi_69_pred_4 = _3270;
                        frontier_phi_69_pred_5 = _3269;
                    }
                    _2941 = frontier_phi_69_pred;
                    _2939 = frontier_phi_69_pred_1;
                    _2937 = frontier_phi_69_pred_2;
                    _2935 = frontier_phi_69_pred_3;
                    _2933 = frontier_phi_69_pred_4;
                    _2931 = frontier_phi_69_pred_5;
                    uint _3076 = _3075 + 1u;
                    if (_3076 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3069 = _2931;
                        _3070 = _2933;
                        _3071 = _2935;
                        _3072 = _2937;
                        _3073 = _2939;
                        _3074 = _2941;
                        _3075 = _3076;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2941;
                frontier_phi_57_58_ladder_1 = _2939;
                frontier_phi_57_58_ladder_2 = _2937;
                frontier_phi_57_58_ladder_3 = _2935;
                frontier_phi_57_58_ladder_4 = _2933;
                frontier_phi_57_58_ladder_5 = _2931;
            }
            else
            {
                frontier_phi_57_58_ladder = _2828;
                frontier_phi_57_58_ladder_1 = _2826;
                frontier_phi_57_58_ladder_2 = _2824;
                frontier_phi_57_58_ladder_3 = _2822;
                frontier_phi_57_58_ladder_4 = _2820;
                frontier_phi_57_58_ladder_5 = _2818;
            }
            _2930 = frontier_phi_57_58_ladder_5;
            _2932 = frontier_phi_57_58_ladder_4;
            _2934 = frontier_phi_57_58_ladder_3;
            _2936 = frontier_phi_57_58_ladder_2;
            _2938 = frontier_phi_57_58_ladder_1;
            _2940 = frontier_phi_57_58_ladder;
        }
        float _2945 = isnan(1.0) ? _996 : (isnan(_996) ? 1.0 : min(_996, 1.0));
        _2728 = (_2945 * _2936) + _2165;
        _2730 = (_2945 * _2938) + _2167;
        _2732 = (_2945 * _2940) + _2169;
        _2734 = ((_2930 * _981) * _2945) + _2510;
        _2736 = ((_2932 * _983) * _2945) + _2512;
        _2738 = ((_2934 * _984) * _2945) + _2514;
    }
    else
    {
        _2728 = _2165;
        _2730 = _2167;
        _2732 = _2169;
        _2734 = _2510;
        _2736 = _2512;
        _2738 = _2514;
    }
    float _4605 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _4616 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _4627 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _4638 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _2763 = cbInstanceData._m0[_924 + 6u].w * (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0)));
    float _2768 = _869 / cbSceneParam._m0[86u].x;
    float _2769 = _870 / cbSceneParam._m0[86u].y;
    vec4 _2783 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2768, _2769, (log2((isnan(cbSceneParam._m0[77u].w) ? _804 : (isnan(_804) ? cbSceneParam._m0[77u].w : min(_804, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2785 = _2783.x;
    float _2786 = _2783.y;
    float _2787 = _2783.z;
    float _2788 = _2783.w;
    float _2880;
    float _2882;
    float _2884;
    float _2886;
    if (_804 > cbSceneParam._m0[78u].w)
    {
        float _2843 = isnan(_804) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _804 : min(cbSceneParam._m0[80u].w, _804));
        float _2844 = _2843 / _804;
        float _2855 = _2844 * _854;
        float _2856 = _855 * _2844;
        float _2857 = (-0.0) - _2856;
        float _2858 = _2844 * _856;
        float _2860 = (cbSceneParam._m0[77u].w * _2857) / _2843;
        float _2861 = _2860 + cbSceneParam._m0[79u].w;
        float _2862 = cbSceneParam._m0[79u].w - _2856;
        float _2868 = sqrt(((_2855 * _2855) + (_2856 * _2856)) + (_2858 * _2858));
        float _2871 = (1.0 - (cbSceneParam._m0[77u].w / _2843)) * _2868;
        float _2876 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2878 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3031;
        if (abs((_2857 - _2860) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3031 = ((((_2861 > 0.0) ? exp2(_2876 * _2861) : (2.0 - exp2(_2878 * _2861))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2871;
        }
        else
        {
            float _2991 = 1.0 / cbSceneParam._m0[80u].x;
            float _2992 = isnan(_2862) ? _2861 : (isnan(_2861) ? _2862 : max(_2861, _2862));
            float _2993 = isnan(_2862) ? _2861 : (isnan(_2861) ? _2862 : min(_2861, _2862));
            float _3002 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : min(_2992, 0.0));
            float _3003 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : min(_2993, 0.0));
            _3031 = ((abs(_2868 / _2857) * cbSceneParam._m0[80u].y) * ((((_3002 - _3003) * 2.0) - ((exp2(_2876 * (isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0)))) - exp2(_2876 * (isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0))))) * _2991)) - ((exp2(_2878 * _3002) - exp2(_2878 * _3003)) * _2991))) + (_2871 * cbSceneParam._m0[80u].z);
        }
        vec4 _3033 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2768, _2769, 1.0), 0.0);
        float _3042 = exp2((_3031 * (-1.44269502162933349609375)) * (1.0 - _3033.w));
        float _3043 = log2(_3042);
        float _3059 = log2(_2788);
        _2880 = (exp2(_3059 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3043 * cbSceneParam._m0[78u].x)) * _3033.x) / cbSceneParam._m0[78u].x)) + _2785;
        _2882 = (exp2(_3059 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3043 * cbSceneParam._m0[78u].y)) * _3033.y) / cbSceneParam._m0[78u].y)) + _2786;
        _2884 = (exp2(_3059 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3043 * cbSceneParam._m0[78u].z)) * _3033.z) / cbSceneParam._m0[78u].z)) + _2787;
        _2886 = _3042 * _2788;
    }
    else
    {
        _2880 = _2785;
        _2882 = _2786;
        _2884 = _2787;
        _2886 = _2788;
    }
    float _2898 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2899 = _2898 == 3.0;
    float _2900 = log2(_2886);
    float _2907 = exp2(_2900 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * (_2728 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _996))) + ((_2734 + ((isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0))) * _1805)) * cbPerFrame._m0[3u].x));
    float _2908 = exp2(_2900 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (_2730 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _996))) + ((_2736 + ((isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0))) * _1805)) * cbPerFrame._m0[3u].x));
    float _2909 = exp2(_2900 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * (_2732 + ((isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))) * _996))) + ((_2738 + ((isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0))) * _1805)) * cbPerFrame._m0[3u].x));
    float _2918 = (_2898 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2918 * (_2899 ? _2907 : (_2907 + (cbSceneParam._m0[72u].w * _2880)));
    SV_Target.y = _2918 * (_2899 ? _2908 : (_2908 + (cbSceneParam._m0[72u].w * _2882)));
    SV_Target.z = _2918 * (_2899 ? _2909 : (_2909 + (cbSceneParam._m0[72u].w * _2884)));
    SV_Target.w = _2763;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2763;
}


