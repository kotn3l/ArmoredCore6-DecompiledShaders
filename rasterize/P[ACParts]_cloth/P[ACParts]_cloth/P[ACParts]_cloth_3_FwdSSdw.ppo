#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_snp_0_Texture2D_2;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D P_ACParts_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D P_ACParts_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D P_ACParts_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_snp_0_Texture2D_1;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_snp_0_Texture2D_10;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_snp_0_Texture2D_11;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_snp_0_Texture2D_12;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_snp_0_Texture2D_13;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1254;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241;
    float _242;
    float _243;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
        _243 = (-0.0) - _229;
    }
    else
    {
        _241 = _227;
        _242 = _228;
        _243 = _229;
    }
    float _253 = cbMtdParam._m0[21u].z + TEXCOORD.y;
    vec4 _266 = texture(sampler2D(P_ACParts_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (_253 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _271 = _266.z;
    float _272 = _266.w;
    float _280 = exp2(log2(_271 * cbMtdParam._m0[20u].w) * cbMtdParam._m0[19u].y);
    float _281 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _282 = isnan(1.0) ? _281 : (isnan(_281) ? 1.0 : min(_281, 1.0));
    float _288 = exp2(log2(1.0 - _272) * cbMtdParam._m0[20u].y);
    vec4 _300 = texture(sampler2D(P_ACParts_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _253) + cbTextureTilingScale._m0[0u].w));
    vec4 _326 = texture(sampler2D(P_ACParts_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _253) + cbTextureTilingScale._m0[3u].w));
    float _337 = cbMtdParam._m0[9u].x * _326.x;
    float _338 = cbMtdParam._m0[9u].y * _326.y;
    float _339 = cbMtdParam._m0[9u].z * _326.z;
    float _346 = (((cbMtdParam._m0[10u].x * _300.x) - _337) * _288) + _337;
    float _347 = (((cbMtdParam._m0[10u].y * _300.y) - _338) * _288) + _338;
    float _348 = (((cbMtdParam._m0[10u].z * _300.z) - _339) * _288) + _339;
    float _352 = exp2(log2(_272) * cbMtdParam._m0[21u].y);
    vec4 _364 = texture(sampler2D(P_ACParts_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _253) + cbTextureTilingScale._m0[10u].w));
    vec4 _398 = texture(sampler2D(P_ACParts_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _253) + cbTextureTilingScale._m0[11u].w));
    float _409 = cbMtdParam._m0[18u].x * _398.x;
    float _410 = cbMtdParam._m0[18u].y * _398.y;
    float _411 = cbMtdParam._m0[18u].z * _398.z;
    vec4 _432 = texture(sampler2D(P_ACParts_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _253) + cbTextureTilingScale._m0[1u].w));
    float _440 = ((((((((cbMtdParam._m0[17u].x * _364.x) - _346) * _352) + _346) - _409) * _282) + _409) * 4.55000019073486328125) * _432.x;
    float _442 = ((((((((cbMtdParam._m0[17u].y * _364.y) - _347) * _352) + _347) - _410) * _282) + _410) * 4.55000019073486328125) * _432.y;
    float _444 = ((((((((cbMtdParam._m0[17u].z * _364.z) - _348) * _352) + _348) - _411) * _282) + _411) * 4.55000019073486328125) * _432.z;
    float _445 = _432.w * _300.w;
    vec4 _458 = texture(sampler2D(P_ACParts_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _253) + cbTextureTilingScale._m0[5u].w));
    float _460 = _458.x;
    float _479 = (((1.0 - _460) + texture(sampler2D(P_ACParts_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _253) + cbTextureTilingScale._m0[4u].w)).x) * _282) + _460;
    float _499 = (((texture(sampler2D(P_ACParts_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _253) + cbTextureTilingScale._m0[6u].w)).x - _479) + cbMtdParam._m0[20u].z) * _288) + _479;
    float _522 = (((texture(sampler2D(P_ACParts_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - _499) + cbMtdParam._m0[22u].y) * _352) + _499;
    vec4 _535 = texture(sampler2D(P_ACParts_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * _253) + cbTextureTilingScale._m0[12u].w));
    vec4 _554 = texture(sampler2D(P_ACParts_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _253) + cbTextureTilingScale._m0[13u].w));
    float _556 = _554.x;
    float _557 = _554.y;
    float _560 = cbMtdParam._m0[19u].x + _554.z;
    float _563 = (((cbMtdParam._m0[20u].x + _535.z) - _560) * _288) + _560;
    vec4 _576 = texture(sampler2D(P_ACParts_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _253) + cbTextureTilingScale._m0[14u].w));
    vec4 _601 = texture(sampler2D(P_ACParts_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _253) + cbTextureTilingScale._m0[15u].w));
    float _603 = _601.x;
    float _604 = _601.y;
    float _607 = cbMtdParam._m0[21u].x + _601.z;
    float _610 = ((((_271 * 2.0) * ((((_576.z - _563) + cbMtdParam._m0[22u].x) * _352) + _563)) - _607) * _282) + _607;
    float _621 = ((_535.x - _556) * _288) + _556;
    float _622 = ((_535.y - _557) * _288) + _557;
    float _637 = (((((((_576.x - _621) * _352) + _621) - _603) * _282) + _603) * 2.0) + (-1.0);
    float _638 = (((((((_576.y - _622) * _352) + _622) - _604) * _282) + _604) * 2.0) + (-1.0);
    float _639 = dot(vec2(_637, _638), vec2(_637, _638));
    float _3618 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _644 = sqrt(1.0 - (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))));
    float _647 = _637 + (cbMtdParam._m0[21u].w * ((_266.x * 2.0) + (-1.0)));
    float _648 = _638 + (cbMtdParam._m0[21u].w * ((_266.y * 2.0) + (-1.0)));
    float _651 = fma(_644, _241, fma(_648, _233 * TANGENT.x, (_219 * _211) * _647));
    float _654 = fma(_644, _242, fma(_648, _233 * TANGENT.y, (_219 * _212) * _647));
    float _657 = fma(_644, _243, fma(_648, _233 * TANGENT.z, (_219 * _213) * _647));
    float _661 = inversesqrt(dot(vec3(_651, _654, _657), vec3(_651, _654, _657)));
    float _662 = _661 * _651;
    float _663 = _661 * _654;
    float _664 = _661 * _657;
    float _3629 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _665 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
    float _3640 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _666 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
    float _3651 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _3662 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _3673 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _3684 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _670 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _686 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _727 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _737 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _727);
    float _738 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _727);
    float _739 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _727);
    float _743 = inversesqrt(dot(vec3(_737, _738, _739), vec3(_737, _738, _739)));
    float _744 = _737 * _743;
    float _745 = _738 * _743;
    float _746 = _739 * _743;
    float _752 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _753 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _755 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _757 = _755.w;
    float _775 = fma(_664, cbSceneParam._m0[5u].z, fma(_663, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _662));
    float _778 = fma(_664, cbSceneParam._m0[6u].z, fma(_663, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _662));
    float _781 = fma(_664, cbSceneParam._m0[7u].z, fma(_663, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _662));
    vec4 _783 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _794 = (((_783.y - _666) + (_783.w * _666)) * cbMtdParam._m0[3u].x) + _666;
    uint _807 = uint(roundEven(NORMAL.w)) * 13u;
    uint _809 = (_807 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _815 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0)))) * cbInstanceData._m0[_809].x;
    float _816 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0)))) * cbInstanceData._m0[_809].y;
    float _817 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0)))) * cbInstanceData._m0[_809].z;
    float _3695 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _818 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    float _3706 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _819 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    float _3717 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _820 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    vec4 _821 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _826 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _837 = (((_826.x - _670) + (_826.w * _670)) * cbMtdParam._m0[3u].x) + _670;
    float _850 = (cbMtdParam._m0[3u].x * (((_818 * _757) - _818) + _821.x)) + _818;
    float _851 = (cbMtdParam._m0[3u].x * (((_819 * _757) - _819) + _821.y)) + _819;
    float _852 = (cbMtdParam._m0[3u].x * (((_820 * _757) - _820) + _821.z)) + _820;
    float _853 = 1.0 - _837;
    float _854 = _853 * _850;
    float _855 = _853 * _851;
    float _856 = _853 * _852;
    float _861 = (_850 + (-0.039999999105930328369140625)) * _837;
    float _862 = (_851 + (-0.039999999105930328369140625)) * _837;
    float _863 = (_852 + (-0.039999999105930328369140625)) * _837;
    float _864 = _861 + 0.039999999105930328369140625;
    float _866 = _862 + 0.039999999105930328369140625;
    float _867 = _863 + 0.039999999105930328369140625;
    vec4 _876 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _752, cbSceneParam._m0[86u].y * _753));
    float _879 = _876.x * TEXCOORD_4;
    float _880 = dot(vec3(_662, _663, _664), vec3(_744, _745, _746));
    float _883 = _880 * 2.0;
    float _887 = (_883 * _662) - _744;
    float _888 = (_883 * _663) - _745;
    float _889 = (_883 * _664) - _746;
    float _893 = abs(dot(vec3(_744, _745, _746), vec3(_662, _663, _664)));
    float _3728 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _895 = sqrt(_794);
    float _908 = exp2((_895 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_895 * 3.0));
    float _914 = (1.0 - _908) * ((_895 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _915 = _908 * _895;
    float _943 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _947 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _951 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1253;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _978 = fma(_951, cbModelParam._m0[26u].z, fma(_947, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _943));
        float _982 = fma(_951, cbModelParam._m0[27u].z, fma(_947, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _943));
        float _986 = fma(_951, cbModelParam._m0[28u].z, fma(_947, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _943));
        float _1011 = _943 + _662;
        float _1012 = _947 + _663;
        float _1013 = _951 + _664;
        float _1023 = fma(_1013, cbModelParam._m0[26u].z, fma(_1012, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1011)) - _978;
        float _1024 = fma(_1013, cbModelParam._m0[27u].z, fma(_1012, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1011)) - _982;
        float _1025 = fma(_1013, cbModelParam._m0[28u].z, fma(_1012, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1011)) - _986;
        float _1029 = inversesqrt(dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025)));
        float _1042 = ((_1029 * _1023) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_978 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1043 = ((_1029 * _1024) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_982 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1044 = ((_1029 * _1025) / cbModelParam._m0[34u].z) + ((((((_986 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        vec4 _1068 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        float _1081 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1047.x + (-0.5));
        float _1083 = _1081 * (_1047.y + (-0.5));
        float _1084 = _1081 * (_1047.z + (-0.5));
        float _1091 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1054.x + (-0.5));
        float _1093 = _1091 * (_1054.y + (-0.5));
        float _1094 = _1091 * (_1054.z + (-0.5));
        float _1101 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1061.x + (-0.5));
        float _1103 = _1101 * (_1061.y + (-0.5));
        float _1104 = _1101 * (_1061.z + (-0.5));
        float _1111 = exp2((_1068.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1068.x + (-0.5));
        float _1113 = _1111 * (_1068.y + (-0.5));
        float _1114 = _1111 * (_1068.z + (-0.5));
        float _1115 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1116 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1117 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1118 = _1082 * 0.5;
        float _1119 = _1092 * 0.5;
        float _1120 = _1102 * 0.5;
        float _1121 = dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120));
        float _1126 = (_1121 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1121);
        float _1135 = (dot(vec3(_662, _663, _664), vec3(_1126 * _1118, _1126 * _1119, _1126 * _1120)) + 1.0) * 0.5;
        float _3754 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1145 = sqrt(((_1119 * _1119) + (_1118 * _1118)) + (_1120 * _1120)) / (_1115 + 9.9999997473787516355514526367188e-06);
        float _3765 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1147 = _1146 * 2.0;
        float _1151 = (1.0 - _1146) / (_1146 + 1.0);
        float _3776 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1161 = ((((1.0 - _1152) * (_1147 + 2.0)) * exp2(log2(isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * (_1147 + 1.0))) + _1152) * _1115;
        float _1162 = _1083 * 0.5;
        float _1163 = _1093 * 0.5;
        float _1164 = _1103 * 0.5;
        float _1165 = dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164));
        float _1170 = (_1165 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1165);
        float _1178 = (dot(vec3(_662, _663, _664), vec3(_1170 * _1162, _1170 * _1163, _1170 * _1164)) + 1.0) * 0.5;
        float _3787 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1187 = sqrt(((_1163 * _1163) + (_1162 * _1162)) + (_1164 * _1164)) / (_1116 + 9.9999997473787516355514526367188e-06);
        float _3798 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1189 = _1188 * 2.0;
        float _1193 = (1.0 - _1188) / (_1188 + 1.0);
        float _3809 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1203 = ((((1.0 - _1194) * (_1189 + 2.0)) * exp2(log2(isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * (_1189 + 1.0))) + _1194) * _1116;
        float _1204 = _1084 * 0.5;
        float _1205 = _1094 * 0.5;
        float _1206 = _1104 * 0.5;
        float _1207 = dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206));
        float _1212 = (_1207 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1207);
        float _1220 = (dot(vec3(_662, _663, _664), vec3(_1212 * _1204, _1212 * _1205, _1212 * _1206)) + 1.0) * 0.5;
        float _3820 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1229 = sqrt(((_1205 * _1205) + (_1204 * _1204)) + (_1206 * _1206)) / (_1117 + 9.9999997473787516355514526367188e-06);
        float _3831 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1231 = _1230 * 2.0;
        float _1235 = (1.0 - _1230) / (_1230 + 1.0);
        float _3842 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1245 = ((((1.0 - _1236) * (_1231 + 2.0)) * exp2(log2(isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * (_1231 + 1.0))) + _1236) * _1117;
        _1253 = _1084;
        _1255 = _1083;
        _1256 = _1082;
        _1257 = _1094;
        _1258 = _1093;
        _1259 = _1092;
        _1260 = _1104;
        _1261 = _1103;
        _1262 = _1102;
        _1263 = _1117;
        _1264 = _1116;
        _1265 = _1115;
        _1266 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0)));
        _1267 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0)));
        _1268 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)));
    }
    else
    {
        _1253 = _1254;
        _1255 = _1254;
        _1256 = _1254;
        _1257 = _1254;
        _1258 = _1254;
        _1259 = _1254;
        _1260 = _1254;
        _1261 = _1254;
        _1262 = _1254;
        _1263 = _1254;
        _1264 = _1254;
        _1265 = _1254;
        _1266 = 0.0;
        _1267 = 0.0;
        _1268 = 0.0;
    }
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1294 = fma(_951, cbModelParam._m0[30u].z, fma(_947, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _943));
        float _1298 = fma(_951, cbModelParam._m0[31u].z, fma(_947, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _943));
        float _1302 = fma(_951, cbModelParam._m0[32u].z, fma(_947, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _943));
        float _1325 = _943 + _662;
        float _1326 = _947 + _663;
        float _1327 = _951 + _664;
        float _1337 = fma(_1327, cbModelParam._m0[30u].z, fma(_1326, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1325)) - _1294;
        float _1338 = fma(_1327, cbModelParam._m0[31u].z, fma(_1326, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1325)) - _1298;
        float _1339 = fma(_1327, cbModelParam._m0[32u].z, fma(_1326, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1325)) - _1302;
        float _1343 = inversesqrt(dot(vec3(_1337, _1338, _1339), vec3(_1337, _1338, _1339)));
        float _1356 = ((_1343 * _1337) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1294 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1357 = ((_1343 * _1338) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1298 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1358 = ((_1343 * _1339) / cbModelParam._m0[35u].z) + ((((((_1302 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1360 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1356, _1357, _1358), 0.0);
        vec4 _1367 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1356, _1357, _1358), 0.0);
        vec4 _1374 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1356, _1357, _1358), 0.0);
        vec4 _1381 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1356, _1357, _1358), 0.0);
        float _1393 = exp2((_1360.w + (-0.5)) * 20.0) * 2.0;
        float _1394 = _1393 * (_1360.x + (-0.5));
        float _1395 = _1393 * (_1360.y + (-0.5));
        float _1396 = _1393 * (_1360.z + (-0.5));
        float _1403 = exp2((_1367.w + (-0.5)) * 20.0) * 2.0;
        float _1404 = _1403 * (_1367.x + (-0.5));
        float _1405 = _1403 * (_1367.y + (-0.5));
        float _1406 = _1403 * (_1367.z + (-0.5));
        float _1413 = exp2((_1374.w + (-0.5)) * 20.0) * 2.0;
        float _1414 = _1413 * (_1374.x + (-0.5));
        float _1415 = _1413 * (_1374.y + (-0.5));
        float _1416 = _1413 * (_1374.z + (-0.5));
        float _1423 = exp2((_1381.w + (-0.5)) * 20.0) * 2.0;
        float _1424 = _1423 * (_1381.x + (-0.5));
        float _1425 = _1423 * (_1381.y + (-0.5));
        float _1426 = _1423 * (_1381.z + (-0.5));
        float _1427 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1428 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1429 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1430 = _1394 * 0.5;
        float _1431 = _1404 * 0.5;
        float _1432 = _1414 * 0.5;
        float _1433 = dot(vec3(_1430, _1431, _1432), vec3(_1430, _1431, _1432));
        float _1438 = (_1433 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1433);
        float _1446 = (dot(vec3(_662, _663, _664), vec3(_1438 * _1430, _1438 * _1431, _1438 * _1432)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1455 = sqrt(((_1431 * _1431) + (_1430 * _1430)) + (_1432 * _1432)) / (_1427 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1457 = _1456 * 2.0;
        float _1461 = (1.0 - _1456) / (_1456 + 1.0);
        float _3905 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1471 = ((((1.0 - _1462) * (_1457 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1457 + 1.0))) + _1462) * _1427;
        float _1472 = _1395 * 0.5;
        float _1473 = _1405 * 0.5;
        float _1474 = _1415 * 0.5;
        float _1475 = dot(vec3(_1472, _1473, _1474), vec3(_1472, _1473, _1474));
        float _1480 = (_1475 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1475);
        float _1488 = (dot(vec3(_662, _663, _664), vec3(_1480 * _1472, _1480 * _1473, _1480 * _1474)) + 1.0) * 0.5;
        float _3916 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1497 = sqrt(((_1473 * _1473) + (_1472 * _1472)) + (_1474 * _1474)) / (_1428 + 9.9999997473787516355514526367188e-06);
        float _3927 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1499 = _1498 * 2.0;
        float _1503 = (1.0 - _1498) / (_1498 + 1.0);
        float _3938 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1513 = ((((1.0 - _1504) * (_1499 + 2.0)) * exp2(log2(isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1499 + 1.0))) + _1504) * _1428;
        float _1514 = _1396 * 0.5;
        float _1515 = _1406 * 0.5;
        float _1516 = _1416 * 0.5;
        float _1517 = dot(vec3(_1514, _1515, _1516), vec3(_1514, _1515, _1516));
        float _1522 = (_1517 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1517);
        float _1530 = (dot(vec3(_662, _663, _664), vec3(_1522 * _1514, _1522 * _1515, _1522 * _1516)) + 1.0) * 0.5;
        float _3949 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1539 = sqrt(((_1515 * _1515) + (_1514 * _1514)) + (_1516 * _1516)) / (_1429 + 9.9999997473787516355514526367188e-06);
        float _3960 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1541 = _1540 * 2.0;
        float _1545 = (1.0 - _1540) / (_1540 + 1.0);
        float _3971 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1555 = ((((1.0 - _1546) * (_1541 + 2.0)) * exp2(log2(isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_1541 + 1.0))) + _1546) * _1429;
        _1563 = _1396;
        _1564 = _1395;
        _1565 = _1394;
        _1566 = _1406;
        _1567 = _1405;
        _1568 = _1404;
        _1569 = _1416;
        _1570 = _1415;
        _1571 = _1414;
        _1572 = _1429;
        _1573 = _1428;
        _1574 = _1427;
        _1575 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)));
        _1576 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)));
        _1577 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)));
    }
    else
    {
        _1563 = _1254;
        _1564 = _1254;
        _1565 = _1254;
        _1566 = _1254;
        _1567 = _1254;
        _1568 = _1254;
        _1569 = _1254;
        _1570 = _1254;
        _1571 = _1254;
        _1572 = _1254;
        _1573 = _1254;
        _1574 = _1254;
        _1575 = 0.0;
        _1576 = 0.0;
        _1577 = 0.0;
    }
    float _1587 = (cbModelParam._m0[1u].x * (_1575 - _1266)) + _1266;
    float _1588 = (cbModelParam._m0[1u].x * (_1576 - _1267)) + _1267;
    float _1589 = (cbModelParam._m0[1u].x * (_1577 - _1268)) + _1268;
    float _1610 = fma(_1589, cbSceneParam._m0[89u].z, fma(_1588, cbSceneParam._m0[89u].y, _1587 * cbSceneParam._m0[89u].x));
    float _1613 = fma(_1589, cbSceneParam._m0[90u].z, fma(_1588, cbSceneParam._m0[90u].y, _1587 * cbSceneParam._m0[90u].x));
    float _1616 = fma(_1589, cbSceneParam._m0[91u].z, fma(_1588, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1587));
    float _1631 = _887 * 0.5;
    float _1632 = _888 * 0.5;
    float _1633 = _889 * 0.5;
    float _1634 = dot(vec4(_1631, _1632, _1633, 1.0), vec4(_1565, _1568, _1571, _1574));
    float _1637 = dot(vec4(_1631, _1632, _1633, 1.0), vec4(_1564, _1567, _1570, _1573));
    float _1640 = dot(vec4(_1631, _1632, _1633, 1.0), vec4(_1563, _1566, _1569, _1572));
    float _1674;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1647 = dot(vec4(_1631, _1632, _1633, 1.0), vec4(_1253, _1257, _1260, _1263));
        float _1651 = dot(vec4(_1631, _1632, _1633, 1.0), vec4(_1255, _1258, _1261, _1264));
        float _1655 = dot(vec4(_1631, _1632, _1633, 1.0), vec4(_1256, _1259, _1262, _1265));
        float _1662 = dot(vec4(cbModelParam._m0[39u]), vec4(_1631, _1632, _1633, 1.0));
        _1674 = dot(vec3(isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)), isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0)), isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1662) ? 0.0 : (isnan(0.0) ? _1662 : max(0.0, _1662))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1674 = 1.0;
    }
    float _1685;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1676 = dot(vec4(cbModelParam._m0[40u]), vec4(_1631, _1632, _1633, 1.0));
        _1685 = dot(vec3(isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)), isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)), isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1676) ? 0.0 : (isnan(0.0) ? _1676 : max(0.0, _1676))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1685 = 1.0;
    }
    float _1689 = (_1685 * cbModelParam._m0[1u].x) + (_1674 * (1.0 - cbModelParam._m0[1u].x));
    float _1699 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _794);
    float _1700 = isnan(_1699) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1699 : min(cbModelParam._m0[25u].z, _1699));
    float _1780;
    float _1782;
    float _1784;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1747 = fma(_951, cbModelParam._m0[13u].z, fma(_947, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _943)) + cbModelParam._m0[13u].w;
        float _1751 = fma(_951, cbModelParam._m0[14u].z, fma(_947, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _943)) + cbModelParam._m0[14u].w;
        float _1755 = fma(_951, cbModelParam._m0[15u].z, fma(_947, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _943)) + cbModelParam._m0[15u].w;
        float _1758 = fma(_889, cbModelParam._m0[13u].z, fma(_888, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _887));
        float _1761 = fma(_889, cbModelParam._m0[14u].z, fma(_888, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _887));
        float _1764 = fma(_889, cbModelParam._m0[15u].z, fma(_888, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _887));
        float _1792;
        if (_1758 > 0.0)
        {
            _1792 = abs((1.0 - _1747) / _1758);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1758 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1747 + 1.0) / _1758);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1792 = frontier_phi_16_14_ladder;
        }
        float _2015;
        if (_1761 > 0.0)
        {
            _2015 = abs((1.0 - _1751) / _1761);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1761 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1751 + 1.0) / _1761);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2015 = frontier_phi_25_21_ladder;
        }
        float _2272;
        if (_1764 > 0.0)
        {
            _2272 = abs((1.0 - _1755) / _1764);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1755 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2272 = frontier_phi_37_32_ladder;
        }
        float _2274 = isnan(_2015) ? _1792 : (isnan(_1792) ? _2015 : min(_1792, _2015));
        float _2275 = isnan(_2272) ? _2274 : (isnan(_2274) ? _2272 : min(_2274, _2272));
        float _2279 = (_2275 * _1758) + _1747;
        float _2280 = (_2275 * _1761) + _1751;
        float _2281 = (_2275 * _1764) + _1755;
        float _2282 = _2275 * 9.9999997473787516355514526367188e-05;
        float _2284 = (-1.0) - _2282;
        float _2286 = _2282 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2281 > _2286) || ((_2281 < _2284) || ((_2280 > _2286) || ((_2280 < _2284) || ((_2279 < _2284) || (_2279 > _2286))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2409 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2281, cbModelParam._m0[9u].z, fma(_2280, cbModelParam._m0[9u].y, _2279 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2281, cbModelParam._m0[10u].z, fma(_2280, cbModelParam._m0[10u].y, _2279 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2281, cbModelParam._m0[11u].z, fma(_2280, cbModelParam._m0[11u].y, _2279 * cbModelParam._m0[11u].x))), _1700);
            frontier_phi_15_37_ladder = _2409.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2409.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2409.x * cbModelParam._m0[1u].y;
        }
        _1780 = frontier_phi_15_37_ladder_2;
        _1782 = frontier_phi_15_37_ladder_1;
        _1784 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1768 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_887, _888, _889), _1700);
        _1780 = _1768.x * cbModelParam._m0[1u].y;
        _1782 = _1768.y * cbModelParam._m0[1u].y;
        _1784 = _1768.z * cbModelParam._m0[1u].y;
    }
    float _1788 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _794);
    float _1789 = isnan(_1788) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1788 : min(cbModelParam._m0[25u].w, _1788));
    float _1878;
    float _1880;
    float _1882;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1842 = fma(_951, cbModelParam._m0[21u].z, fma(_947, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _943)) + cbModelParam._m0[21u].w;
        float _1846 = fma(_951, cbModelParam._m0[22u].z, fma(_947, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _943)) + cbModelParam._m0[22u].w;
        float _1850 = fma(_951, cbModelParam._m0[23u].z, fma(_947, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _943)) + cbModelParam._m0[23u].w;
        float _1853 = fma(_889, cbModelParam._m0[21u].z, fma(_888, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _887));
        float _1856 = fma(_889, cbModelParam._m0[22u].z, fma(_888, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _887));
        float _1859 = fma(_889, cbModelParam._m0[23u].z, fma(_888, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _887));
        float _2020;
        if (_1853 > 0.0)
        {
            _2020 = abs((1.0 - _1842) / _1853);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1853 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1842 + 1.0) / _1853);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2020 = frontier_phi_27_23_ladder;
        }
        float _2299;
        if (_1856 > 0.0)
        {
            _2299 = abs((1.0 - _1846) / _1856);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1856 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1846 + 1.0) / _1856);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2299 = frontier_phi_39_34_ladder;
        }
        float _2512;
        if (_1859 > 0.0)
        {
            _2512 = abs((1.0 - _1850) / _1859);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1859 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1850 + 1.0) / _1859);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2512 = frontier_phi_48_45_ladder;
        }
        float _2514 = isnan(_2299) ? _2020 : (isnan(_2020) ? _2299 : min(_2020, _2299));
        float _2515 = isnan(_2512) ? _2514 : (isnan(_2514) ? _2512 : min(_2514, _2512));
        float _2519 = (_2515 * _1853) + _1842;
        float _2520 = (_2515 * _1856) + _1846;
        float _2521 = (_2515 * _1859) + _1850;
        float _2522 = _2515 * 9.9999997473787516355514526367188e-05;
        float _2523 = (-1.0) - _2522;
        float _2525 = _2522 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2521 > _2525) || ((_2521 < _2523) || ((_2520 > _2525) || ((_2520 < _2523) || ((_2519 < _2523) || (_2519 > _2525))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2721 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2521, cbModelParam._m0[17u].z, fma(_2520, cbModelParam._m0[17u].y, _2519 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2521, cbModelParam._m0[18u].z, fma(_2520, cbModelParam._m0[18u].y, _2519 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2521, cbModelParam._m0[19u].z, fma(_2520, cbModelParam._m0[19u].y, _2519 * cbModelParam._m0[19u].x))), _1789);
            frontier_phi_24_48_ladder = _2721.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2721.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2721.x * cbModelParam._m0[1u].z;
        }
        _1878 = frontier_phi_24_48_ladder_2;
        _1880 = frontier_phi_24_48_ladder_1;
        _1882 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1862 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_887, _888, _889), _1789);
        _1878 = _1862.x * cbModelParam._m0[1u].z;
        _1880 = _1862.y * cbModelParam._m0[1u].z;
        _1882 = _1862.z * cbModelParam._m0[1u].z;
    }
    float _1895 = (((_914 * _864) + _915) * _879) * ((cbModelParam._m0[1u].w * (_1878 - _1780)) + _1780);
    float _1897 = (((_914 * _866) + _915) * _879) * ((cbModelParam._m0[1u].w * (_1880 - _1782)) + _1782);
    float _1899 = (((_914 * _867) + _915) * _879) * ((cbModelParam._m0[1u].w * (_1882 - _1784)) + _1784);
    float _1902 = fma(_1899, cbSceneParam._m0[89u].z, fma(_1897, cbSceneParam._m0[89u].y, _1895 * cbSceneParam._m0[89u].x));
    float _1905 = fma(_1899, cbSceneParam._m0[90u].z, fma(_1897, cbSceneParam._m0[90u].y, _1895 * cbSceneParam._m0[90u].x));
    float _1908 = fma(_1899, cbSceneParam._m0[91u].z, fma(_1897, cbSceneParam._m0[91u].y, _1895 * cbSceneParam._m0[91u].x));
    vec4 _1916 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_752, _753));
    float _1918 = _1916.w;
    float _1930 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1918);
    float _1931 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1918);
    float _1932 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1918);
    uvec4 _1936 = floatBitsToUint(cbInstanceData._m0[_807 + 5u]);
    uint _1938 = _1936.x * 14u;
    uint _1939 = _1938 + 13u;
    float _1946 = _879 + (-1.0);
    float _1951 = (cbLight._m0[_1939].x * _1946) + 1.0;
    float _1952 = (cbLight._m0[_1939].y * _1946) + 1.0;
    float _1953 = (cbLight._m0[_1939].z * _1946) + 1.0;
    float _1954 = (cbLight._m0[_1939].w * _1946) + 1.0;
    uint _1955 = _1938 + 5u;
    float _1961 = isnan(1.0) ? _1952 : (isnan(_1952) ? 1.0 : min(_1952, 1.0));
    uint _1965 = _1938 + 4u;
    float _1974 = isnan(1.0) ? _1951 : (isnan(_1951) ? 1.0 : min(_1951, 1.0));
    uint _1978 = _1938 | 1u;
    float _1989 = dot(vec3(cbLight._m0[_1938].xyz), vec3(_662, _663, _664));
    float _1992 = dot(vec3(cbLight._m0[_1978].xyz), vec3(_662, _663, _664));
    float _4107 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _4118 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
    float _1997 = (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * 0.3183098733425140380859375;
    float _1999 = (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * 0.3183098733425140380859375;
    float _2006 = ((cbLight._m0[_1955].x * _1961) * _1999) + (((cbLight._m0[_1965].x * _1930) * _1974) * _1997);
    float _2007 = ((_1961 * cbLight._m0[_1955].y) * _1999) + (((cbLight._m0[_1965].y * _1931) * _1974) * _1997);
    float _2008 = ((_1961 * cbLight._m0[_1955].z) * _1999) + (((cbLight._m0[_1965].z * _1932) * _1974) * _1997);
    uvec4 _2012 = floatBitsToUint(cbLight._m0[_1938 + 12u]);
    bool _2014 = _2012.x == 0u;
    float _2025;
    float _2027;
    float _2029;
    if (_2014)
    {
        _2025 = _2006;
        _2027 = _2007;
        _2029 = _2008;
    }
    else
    {
        uint _2033 = _1938 + 6u;
        float _2049 = (dot(vec3(cbLight._m0[_1938 + 2u].xyz), vec3(_662, _663, _664)) * 0.5) + 0.5;
        float _2050 = _2049 * _2049;
        float _4129 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
        float _2051 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _2052 = isnan(1.0) ? _1953 : (isnan(_1953) ? 1.0 : min(_1953, 1.0));
        _2025 = (((cbLight._m0[_2033].x * 0.3183098733425140380859375) * _2051) * _2052) + _2006;
        _2027 = (((cbLight._m0[_2033].y * 0.3183098733425140380859375) * _2051) * _2052) + _2007;
        _2029 = (((cbLight._m0[_2033].z * 0.3183098733425140380859375) * _2051) * _2052) + _2008;
    }
    bool _2032 = _2012.y == 0u;
    float _2070;
    float _2072;
    float _2074;
    if (_2032)
    {
        _2070 = _2025;
        _2072 = _2027;
        _2074 = _2029;
    }
    else
    {
        uint _2243 = _1938 + 7u;
        float _2259 = (dot(vec3(cbLight._m0[_1938 + 3u].xyz), vec3(_662, _663, _664)) * 0.5) + 0.5;
        float _2260 = _2259 * _2259;
        float _4145 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
        float _2261 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _2262 = isnan(1.0) ? _1954 : (isnan(_1954) ? 1.0 : min(_1954, 1.0));
        _2070 = (((cbLight._m0[_2243].x * 0.3183098733425140380859375) * _2261) * _2262) + _2025;
        _2072 = (((cbLight._m0[_2243].y * 0.3183098733425140380859375) * _2261) * _2262) + _2027;
        _2074 = (((cbLight._m0[_2243].z * 0.3183098733425140380859375) * _2261) * _2262) + _2029;
    }
    uint _2077 = _1938 + 8u;
    float _2090 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1938].w)) * _794) * 0.949999988079071044921875);
    float _2091 = _2090 * _2090;
    float _2092 = cbLight._m0[_1938].x + _744;
    float _2093 = cbLight._m0[_1938].y + _745;
    float _2094 = cbLight._m0[_1938].z + _746;
    float _2098 = inversesqrt(dot(vec3(_2092, _2093, _2094), vec3(_2092, _2093, _2094)));
    float _2099 = _2098 * _2092;
    float _2100 = _2098 * _2093;
    float _2101 = _2098 * _2094;
    float _2102 = dot(vec3(_662, _663, _664), vec3(cbLight._m0[_1938].xyz));
    float _4161 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2105 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    float _4172 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _2106 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _2107 = dot(vec3(_662, _663, _664), vec3(_2099, _2100, _2101));
    float _4183 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2110 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _2111 = dot(vec3(cbLight._m0[_1938].xyz), vec3(_2099, _2100, _2101));
    float _4194 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2115 = _2091 * _2091;
    float _2119 = ((_2110 * _2110) * (_2115 + (-1.0))) + 1.0;
    float _2127 = exp2(log2(1.0 - (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0)))) * 5.0);
    float _2128 = 0.959999978542327880859375 - _861;
    float _2130 = 0.959999978542327880859375 - _862;
    float _2131 = 0.959999978542327880859375 - _863;
    float _2138 = 1.0 - _2091;
    float _2149 = (0.5 / (((_2106 * ((_2105 * _2138) + _2091)) + 9.9999999392252902907785028219223e-09) + (((_2106 * _2138) + _2091) * _2105))) * _2105;
    float _4205 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2151 = (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_2115 / ((_2119 * _2119) * 3.141590118408203125));
    uint _2165 = _1938 + 9u;
    float _2176 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1978].w)) * _794) * 0.949999988079071044921875);
    float _2177 = _2176 * _2176;
    float _2178 = cbLight._m0[_1978].x + _744;
    float _2179 = cbLight._m0[_1978].y + _745;
    float _2180 = cbLight._m0[_1978].z + _746;
    float _2184 = inversesqrt(dot(vec3(_2178, _2179, _2180), vec3(_2178, _2179, _2180)));
    float _2185 = _2184 * _2178;
    float _2186 = _2184 * _2179;
    float _2187 = _2184 * _2180;
    float _2188 = dot(vec3(_662, _663, _664), vec3(cbLight._m0[_1978].xyz));
    float _4216 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2191 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
    float _2192 = dot(vec3(_662, _663, _664), vec3(_2185, _2186, _2187));
    float _4227 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _2195 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _2196 = dot(vec3(cbLight._m0[_1978].xyz), vec3(_2185, _2186, _2187));
    float _4238 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2200 = _2177 * _2177;
    float _2204 = ((_2195 * _2195) * (_2200 + (-1.0))) + 1.0;
    float _2211 = exp2(log2(1.0 - (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0)))) * 5.0);
    float _2218 = 1.0 - _2177;
    float _2228 = (0.5 / (((_2106 * ((_2191 * _2218) + _2177)) + 9.9999999392252902907785028219223e-09) + (((_2106 * _2218) + _2177) * _2191))) * _2191;
    float _4249 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2230 = (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_2200 / ((_2204 * _2204) * 3.141590118408203125));
    float _2240 = (((((_2211 * _2128) + _864) * cbLight._m0[_2165].x) * _2230) * _1961) + ((((cbLight._m0[_2077].x * _1930) * ((_2127 * _2128) + _864)) * _2151) * _1974);
    float _2241 = (((((_2211 * _2130) + _866) * cbLight._m0[_2165].y) * _2230) * _1961) + ((((cbLight._m0[_2077].y * _1931) * ((_2127 * _2130) + _866)) * _2151) * _1974);
    float _2242 = (((((_2211 * _2131) + _867) * cbLight._m0[_2165].z) * _2230) * _1961) + ((((cbLight._m0[_2077].z * _1932) * ((_2127 * _2131) + _867)) * _2151) * _1974);
    float _2304;
    float _2306;
    float _2308;
    if (_2014)
    {
        _2304 = _2240;
        _2306 = _2241;
        _2308 = _2242;
    }
    else
    {
        uint _2310 = _1938 + 2u;
        uint _2314 = _1938 + 10u;
        float _2328 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2310].w)) * _794) * 0.949999988079071044921875);
        float _2329 = _2328 * _2328;
        float _2330 = cbLight._m0[_2310].x + _744;
        float _2331 = cbLight._m0[_2310].y + _745;
        float _2332 = cbLight._m0[_2310].z + _746;
        float _2336 = inversesqrt(dot(vec3(_2330, _2331, _2332), vec3(_2330, _2331, _2332)));
        float _2337 = _2336 * _2330;
        float _2338 = _2336 * _2331;
        float _2339 = _2336 * _2332;
        float _2340 = dot(vec3(_662, _663, _664), vec3(cbLight._m0[_2310].xyz));
        float _4260 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2343 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _2344 = dot(vec3(_662, _663, _664), vec3(_2337, _2338, _2339));
        float _4271 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        float _2347 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _2348 = dot(vec3(cbLight._m0[_2310].xyz), vec3(_2337, _2338, _2339));
        float _4282 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2352 = _2329 * _2329;
        float _2356 = ((_2347 * _2347) * (_2352 + (-1.0))) + 1.0;
        float _2363 = exp2(log2(1.0 - (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0)))) * 5.0);
        float _2370 = 1.0 - _2329;
        float _2380 = (0.5 / (((_2106 * ((_2343 * _2370) + _2329)) + 9.9999999392252902907785028219223e-09) + (((_2106 * _2370) + _2329) * _2343))) * _2343;
        float _4293 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2382 = (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_2352 / ((_2356 * _2356) * 3.141590118408203125));
        float _2383 = isnan(1.0) ? _1953 : (isnan(_1953) ? 1.0 : min(_1953, 1.0));
        _2304 = (((((_2363 * _2128) + _864) * cbLight._m0[_2314].x) * _2382) * _2383) + _2240;
        _2306 = (((((_2363 * _2130) + _866) * cbLight._m0[_2314].y) * _2382) * _2383) + _2241;
        _2308 = (((((_2363 * _2131) + _867) * cbLight._m0[_2314].z) * _2382) * _2383) + _2242;
    }
    float _2418;
    float _2420;
    float _2422;
    if (_2032)
    {
        _2418 = _2304;
        _2420 = _2306;
        _2422 = _2308;
    }
    else
    {
        uint _2429 = _1938 + 3u;
        uint _2433 = _1938 + 11u;
        float _2447 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2429].w)) * _794) * 0.949999988079071044921875);
        float _2448 = _2447 * _2447;
        float _2449 = cbLight._m0[_2429].x + _744;
        float _2450 = cbLight._m0[_2429].y + _745;
        float _2451 = cbLight._m0[_2429].z + _746;
        float _2455 = inversesqrt(dot(vec3(_2449, _2450, _2451), vec3(_2449, _2450, _2451)));
        float _2456 = _2455 * _2449;
        float _2457 = _2455 * _2450;
        float _2458 = _2455 * _2451;
        float _2459 = dot(vec3(_662, _663, _664), vec3(cbLight._m0[_2429].xyz));
        float _4309 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2462 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _2463 = dot(vec3(_662, _663, _664), vec3(_2456, _2457, _2458));
        float _4320 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        float _2466 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _2467 = dot(vec3(cbLight._m0[_2429].xyz), vec3(_2456, _2457, _2458));
        float _4331 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2471 = _2448 * _2448;
        float _2475 = ((_2466 * _2466) * (_2471 + (-1.0))) + 1.0;
        float _2482 = exp2(log2(1.0 - (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0)))) * 5.0);
        float _2489 = 1.0 - _2448;
        float _2499 = (0.5 / (((_2106 * ((_2462 * _2489) + _2448)) + 9.9999999392252902907785028219223e-09) + (((_2106 * _2489) + _2448) * _2462))) * _2462;
        float _4342 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2501 = (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_2471 / ((_2475 * _2475) * 3.141590118408203125));
        float _2502 = isnan(1.0) ? _1954 : (isnan(_1954) ? 1.0 : min(_1954, 1.0));
        _2418 = (((((_2482 * _2128) + _864) * cbLight._m0[_2433].x) * _2501) * _2502) + _2304;
        _2420 = (((((_2482 * _2130) + _866) * cbLight._m0[_2433].y) * _2501) * _2502) + _2306;
        _2422 = (((((_2482 * _2131) + _867) * cbLight._m0[_2433].z) * _2501) * _2502) + _2308;
    }
    float _2636;
    float _2638;
    float _2640;
    float _2642;
    float _2644;
    float _2646;
    if (_1936.y == 0u)
    {
        float _2577 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2578 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2577;
        float _2579 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2577;
        float _2580 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2577;
        uvec4 _2592 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2593 = _2592.x;
        uint _2604 = uint((float(_2592.y) * floor(float(uint(cbSceneParam._m0[85u].y * _753) / _2593))) + floor(float(uint(cbSceneParam._m0[85u].x * _752) / _2593)));
        float _2614 = (log2(_2580 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2615 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        uint _2618 = uint(isnan(14.0) ? _2615 : (isnan(_2615) ? 14.0 : min(_2615, 14.0)));
        uvec4 _2623 = texelFetch(g_lightClusterGridBuffer, int(((_2618 << 2u) + (_2604 << 6u)) >> 2u));
        uint _2624 = _2623.x;
        uint _2625 = _2592.z;
        float _2726;
        float _2728;
        float _2730;
        float _2732;
        float _2734;
        float _2736;
        if (((((1u << ((_2625 >> 4u) & 15u)) + 4294967295u) & _2624) == 0u) || ((_2625 & 240u) == 0u))
        {
            _2726 = 0.0;
            _2728 = 0.0;
            _2730 = 0.0;
            _2732 = 0.0;
            _2734 = 0.0;
            _2736 = 0.0;
        }
        else
        {
            float _2727;
            float _2729;
            float _2731;
            float _2733;
            float _2735;
            float _2737;
            float _2870 = 0.0;
            float _2871 = 0.0;
            float _2872 = 0.0;
            float _2873 = 0.0;
            float _2874 = 0.0;
            float _2875 = 0.0;
            uint _2876 = 0u;
            uint _2885;
            bool _2886;
            for (;;)
            {
                _2885 = texelFetch(g_lightClassification, int((((_2618 << 5u) + (_2604 << 9u)) + (_2876 << 2u)) >> 2u)).x;
                _2886 = _2885 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2886)
                {
                    frontier_phi_63_pred = _2875;
                    frontier_phi_63_pred_1 = _2874;
                    frontier_phi_63_pred_2 = _2873;
                    frontier_phi_63_pred_3 = _2872;
                    frontier_phi_63_pred_4 = _2871;
                    frontier_phi_63_pred_5 = _2870;
                }
                else
                {
                    float _2994;
                    float _2995;
                    float _2996;
                    float _2997;
                    float _2998;
                    float _2999;
                    uint _3000;
                    _2994 = _2870;
                    _2995 = _2871;
                    _2996 = _2872;
                    _2997 = _2873;
                    _2998 = _2874;
                    _2999 = _2875;
                    _3000 = _2885;
                    float _2926;
                    float _2927;
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    for (;;)
                    {
                        uint _3004 = uint(findLSB(_3000)) + (_2876 << 5u);
                        uint _3001 = (_3000 + 4294967295u) & _3000;
                        uint _3006 = _3004 * 48u;
                        vec4 _3020 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3006)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 3u)).x));
                        uint _3026 = (_3004 * 48u) + 4u;
                        vec4 _3039 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3026)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 3u)).x));
                        uint _3045 = (_3004 * 48u) + 8u;
                        vec3 _3056 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3045)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 2u)).x));
                        float _3060 = _3020.x - _2578;
                        float _3061 = _3020.y - _2579;
                        float _3062 = _3020.z - _2580;
                        float _3063 = dot(vec3(_3060, _3061, _3062), vec3(_3060, _3061, _3062));
                        float _3066 = inversesqrt(_3063);
                        float _3067 = _3066 * _3060;
                        float _3068 = _3066 * _3061;
                        float _3069 = _3066 * _3062;
                        float _3070 = dot(vec3(_775, _778, _781), vec3(_3067, _3068, _3069));
                        float _3075 = 1.0 - (_3063 * _3020.w);
                        float _4368 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                        float _3076 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
                        float _3077 = sqrt(_3063) * _3039.w;
                        float _3080 = 1.39999997615814208984375 / (_3077 + 1.39999997615814208984375);
                        float _3081 = _3080 * _3080;
                        float _3084 = ((1.0 - _3081) * _3070) + _3081;
                        float _3087 = _3077 * _3077;
                        float _3091 = ((isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0))) * _3076) / ((_3087 * 0.699999988079071044921875) + 1.0);
                        float _3095 = (-0.0) - _2578;
                        float _3096 = (-0.0) - _2579;
                        float _3097 = (-0.0) - _2580;
                        float _3101 = inversesqrt(dot(vec3(_3095, _3096, _3097), vec3(_3095, _3096, _3097)));
                        float _3102 = _3101 * _3095;
                        float _3103 = _3101 * _3096;
                        float _3104 = _3101 * _3097;
                        float _3112 = exp2(log2(1.0 / ((_3087 * 3.5) + 5.0)) * 0.25);
                        float _3113 = 1.0 - _895;
                        float _3120 = sqrt(1.0 - ((1.0 - (_3113 * _3113)) * (1.0 - (_3112 * _3112))));
                        float _3121 = _3120 * _3120;
                        float _3122 = _3121 * _3121;
                        float _3123 = _3102 + _3067;
                        float _3124 = _3103 + _3068;
                        float _3125 = _3104 + _3069;
                        float _3129 = inversesqrt(dot(vec3(_3123, _3124, _3125), vec3(_3123, _3124, _3125)));
                        float _3133 = dot(vec3(_775, _778, _781), vec3(_3102, _3103, _3104));
                        float _4384 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                        float _3136 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
                        float _3137 = dot(vec3(_775, _778, _781), vec3(_3129 * _3123, _3129 * _3124, _3129 * _3125));
                        float _4395 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                        float _3140 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
                        float _3144 = ((_3140 * _3140) * (_3122 + (-1.0))) + 1.0;
                        float _3145 = _3080 * _3121;
                        float _3146 = _3145 * _3145;
                        float _3149 = ((1.0 - _3146) * _3070) + _3146;
                        float _4406 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                        float _3150 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
                        float _3151 = 1.0 - _3121;
                        float _3161 = (0.5 / (((_3150 * ((_3136 * _3151) + _3121)) + 9.9999999392252902907785028219223e-09) + (((_3150 * _3151) + _3121) * _3136))) * _3150;
                        float _4417 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                        float _3172 = (((_3122 * 3.1415927410125732421875) * (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0)))) / ((_3144 * _3144) * ((_3087 * 2.1991131305694580078125) + 3.141590118408203125))) * _3076;
                        _2929 = (_3091 * _3039.x) + _2997;
                        _2930 = (_3091 * _3039.y) + _2998;
                        _2931 = (_3091 * _3039.z) + _2999;
                        _2926 = (_3172 * _3056.x) + _2994;
                        _2927 = (_3172 * _3056.y) + _2995;
                        _2928 = (_3172 * _3056.z) + _2996;
                        if (_3001 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2994 = _2926;
                            _2995 = _2927;
                            _2996 = _2928;
                            _2997 = _2929;
                            _2998 = _2930;
                            _2999 = _2931;
                            _3000 = _3001;
                        }
                    }
                    frontier_phi_63_pred = _2931;
                    frontier_phi_63_pred_1 = _2930;
                    frontier_phi_63_pred_2 = _2929;
                    frontier_phi_63_pred_3 = _2928;
                    frontier_phi_63_pred_4 = _2927;
                    frontier_phi_63_pred_5 = _2926;
                }
                _2737 = frontier_phi_63_pred;
                _2735 = frontier_phi_63_pred_1;
                _2733 = frontier_phi_63_pred_2;
                _2731 = frontier_phi_63_pred_3;
                _2729 = frontier_phi_63_pred_4;
                _2727 = frontier_phi_63_pred_5;
                uint _2877 = _2876 + 1u;
                if (_2877 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2870 = _2727;
                    _2871 = _2729;
                    _2872 = _2731;
                    _2873 = _2733;
                    _2874 = _2735;
                    _2875 = _2737;
                    _2876 = _2877;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2726 = _2727;
            _2728 = _2729;
            _2730 = _2731;
            _2732 = _2733;
            _2734 = _2735;
            _2736 = _2737;
        }
        uvec4 _2740 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2741 = _2740.z;
        uint _2743 = (_2741 >> 8u) & 15u;
        float _2838;
        float _2840;
        float _2842;
        float _2844;
        float _2846;
        float _2848;
        if (((4294967295u << _2743) & _2624) == 0u)
        {
            _2838 = _2726;
            _2840 = _2728;
            _2842 = _2730;
            _2844 = _2732;
            _2846 = _2734;
            _2848 = _2736;
        }
        else
        {
            float _2863 = inversesqrt(dot(vec3(_2578, _2579, _2580), vec3(_2578, _2579, _2580)));
            float _2864 = _2863 * _2578;
            float _2865 = _2863 * _2579;
            float _2866 = _2863 * _2580;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2743 < ((_2741 >> 12u) & 15u))
            {
                float _2839;
                float _2841;
                float _2843;
                float _2845;
                float _2847;
                float _2849;
                float _2977 = _2726;
                float _2978 = _2728;
                float _2979 = _2730;
                float _2980 = _2732;
                float _2981 = _2734;
                float _2982 = _2736;
                uint _2983 = _2743;
                uint _2992;
                bool _2993;
                for (;;)
                {
                    _2992 = texelFetch(g_lightClassification, int((((_2618 << 5u) + (_2604 << 9u)) + (_2983 << 2u)) >> 2u)).x;
                    _2993 = _2992 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2993)
                    {
                        frontier_phi_69_pred = _2982;
                        frontier_phi_69_pred_1 = _2981;
                        frontier_phi_69_pred_2 = _2980;
                        frontier_phi_69_pred_3 = _2979;
                        frontier_phi_69_pred_4 = _2978;
                        frontier_phi_69_pred_5 = _2977;
                    }
                    else
                    {
                        float _3177;
                        float _3178;
                        float _3179;
                        float _3180;
                        float _3181;
                        float _3182;
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3190 = _2977;
                        float _3191 = _2978;
                        float _3192 = _2979;
                        float _3193 = _2980;
                        float _3194 = _2981;
                        float _3195 = _2982;
                        uint _3196 = _2992;
                        uint _3197;
                        vec4 _3222;
                        float _3223;
                        vec4 _3238;
                        vec3 _3250;
                        vec4 _3266;
                        vec4 _3281;
                        float _3328;
                        bool _3329;
                        for (;;)
                        {
                            uint _3207 = ((_2983 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3196));
                            _3197 = (_3196 + 4294967295u) & _3196;
                            uint _3209 = _3207 * 40u;
                            _3222 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3209)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 3u)).x));
                            _3223 = _3222.w;
                            uint _3225 = (_3207 * 40u) + 4u;
                            _3238 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3225)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 3u)).x));
                            uint _3240 = (_3207 * 40u) + 8u;
                            _3250 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3240)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 2u)).x));
                            uint _3253 = (_3207 * 40u) + 16u;
                            _3266 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 3u)).x));
                            uint _3268 = (_3207 * 40u) + 20u;
                            _3281 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3268)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 3u)).x));
                            uint _3284 = (_3207 * 40u) + 24u;
                            vec4 _3297 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 3u)).x));
                            uint _3303 = (_3207 * 40u) + 28u;
                            vec4 _3316 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3303)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 3u)).x));
                            _3328 = fma(_2580, _3316.z, fma(_2579, _3316.y, _3316.x * _2578)) + _3316.w;
                            _3329 = !((fma(_2580, _3297.z, fma(_2579, _3297.y, _3297.x * _2578)) + _3297.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3329)
                            {
                                float _3356 = _3222.x - _2578;
                                float _3357 = _3222.y - _2579;
                                float _3358 = _3222.z - _2580;
                                float _3359 = dot(vec3(_3356, _3357, _3358), vec3(_3356, _3357, _3358));
                                float _3362 = inversesqrt(_3359);
                                float _3363 = _3362 * _3356;
                                float _3364 = _3362 * _3357;
                                float _3365 = _3362 * _3358;
                                float _3369 = 1.0 - (_3359 / (_3223 * _3223));
                                float _4428 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                                float _3370 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
                                float _3374 = sqrt(_3359) * _3238.w;
                                float _3376 = 1.39999997615814208984375 / (_3374 + 1.39999997615814208984375);
                                float _3377 = _3376 * _3376;
                                float _3380 = ((1.0 - _3377) * dot(vec3(_3363, _3364, _3365), vec3(_775, _778, _781))) + _3377;
                                float _3383 = _3374 * _3374;
                                float _3387 = (fma(_2580, _3266.z, fma(_2579, _3266.y, _3266.x * _2578)) + _3266.w) / _3328;
                                float _3388 = (fma(_2580, _3281.z, fma(_2579, _3281.y, _3281.x * _2578)) + _3281.w) / _3328;
                                float _3392 = 1.0 - dot(vec2(_3387, _3388), vec2(_3387, _3388));
                                float _4444 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                                float _3393 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
                                float _3394 = _3393 * (((isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0))) * _3370) / ((_3383 * 0.699999988079071044921875) + 1.0));
                                float _3406 = exp2(log2(1.0 / ((_3383 * 3.5) + 5.0)) * 0.25);
                                float _3407 = 1.0 - _895;
                                float _3414 = sqrt(1.0 - ((1.0 - (_3407 * _3407)) * (1.0 - (_3406 * _3406))));
                                float _3415 = _3414 * _3414;
                                float _3416 = _3415 * _3415;
                                float _3417 = _3363 - _2864;
                                float _3418 = _3364 - _2865;
                                float _3419 = _3365 - _2866;
                                float _3423 = inversesqrt(dot(vec3(_3417, _3418, _3419), vec3(_3417, _3418, _3419)));
                                float _3427 = dot(vec3(_775, _778, _781), vec3((-0.0) - _2864, (-0.0) - _2865, (-0.0) - _2866));
                                float _4455 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                                float _3430 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
                                float _3431 = dot(vec3(_775, _778, _781), vec3(_3423 * _3417, _3423 * _3418, _3423 * _3419));
                                float _4466 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                                float _3434 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
                                float _3438 = ((_3434 * _3434) * (_3416 + (-1.0))) + 1.0;
                                float _3439 = _3376 * _3415;
                                float _3440 = _3439 * _3439;
                                float _3446 = ((1.0 - _3440) * dot(vec3(_775, _778, _781), vec3(_3363, _3364, _3365))) + _3440;
                                float _4477 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                                float _3447 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
                                float _3448 = 1.0 - _3415;
                                float _3458 = (0.5 / (((_3447 * ((_3430 * _3448) + _3415)) + 9.9999999392252902907785028219223e-09) + (((_3447 * _3448) + _3415) * _3430))) * _3447;
                                float _4488 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                                float _3468 = (_3393 * _3370) * (((_3416 * 3.1415927410125732421875) * (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0)))) / ((_3438 * _3438) * ((_3383 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3394 * _3238.z;
                                frontier_phi_75_pred_1 = _3394 * _3238.y;
                                frontier_phi_75_pred_2 = _3394 * _3238.x;
                                frontier_phi_75_pred_3 = _3468 * _3250.z;
                                frontier_phi_75_pred_4 = _3468 * _3250.y;
                                frontier_phi_75_pred_5 = _3468 * _3250.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3477 = frontier_phi_75_pred;
                            _3476 = frontier_phi_75_pred_1;
                            _3475 = frontier_phi_75_pred_2;
                            _3474 = frontier_phi_75_pred_3;
                            _3473 = frontier_phi_75_pred_4;
                            _3472 = frontier_phi_75_pred_5;
                            _3180 = _3475 + _3193;
                            _3181 = _3476 + _3194;
                            _3182 = _3477 + _3195;
                            _3177 = _3472 + _3190;
                            _3178 = _3473 + _3191;
                            _3179 = _3474 + _3192;
                            if (_3197 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3190 = _3177;
                                _3191 = _3178;
                                _3192 = _3179;
                                _3193 = _3180;
                                _3194 = _3181;
                                _3195 = _3182;
                                _3196 = _3197;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3182;
                        frontier_phi_69_pred_1 = _3181;
                        frontier_phi_69_pred_2 = _3180;
                        frontier_phi_69_pred_3 = _3179;
                        frontier_phi_69_pred_4 = _3178;
                        frontier_phi_69_pred_5 = _3177;
                    }
                    _2849 = frontier_phi_69_pred;
                    _2847 = frontier_phi_69_pred_1;
                    _2845 = frontier_phi_69_pred_2;
                    _2843 = frontier_phi_69_pred_3;
                    _2841 = frontier_phi_69_pred_4;
                    _2839 = frontier_phi_69_pred_5;
                    uint _2984 = _2983 + 1u;
                    if (_2984 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2977 = _2839;
                        _2978 = _2841;
                        _2979 = _2843;
                        _2980 = _2845;
                        _2981 = _2847;
                        _2982 = _2849;
                        _2983 = _2984;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2849;
                frontier_phi_57_58_ladder_1 = _2847;
                frontier_phi_57_58_ladder_2 = _2845;
                frontier_phi_57_58_ladder_3 = _2843;
                frontier_phi_57_58_ladder_4 = _2841;
                frontier_phi_57_58_ladder_5 = _2839;
            }
            else
            {
                frontier_phi_57_58_ladder = _2736;
                frontier_phi_57_58_ladder_1 = _2734;
                frontier_phi_57_58_ladder_2 = _2732;
                frontier_phi_57_58_ladder_3 = _2730;
                frontier_phi_57_58_ladder_4 = _2728;
                frontier_phi_57_58_ladder_5 = _2726;
            }
            _2838 = frontier_phi_57_58_ladder_5;
            _2840 = frontier_phi_57_58_ladder_4;
            _2842 = frontier_phi_57_58_ladder_3;
            _2844 = frontier_phi_57_58_ladder_2;
            _2846 = frontier_phi_57_58_ladder_1;
            _2848 = frontier_phi_57_58_ladder;
        }
        float _2853 = isnan(1.0) ? _879 : (isnan(_879) ? 1.0 : min(_879, 1.0));
        _2636 = (_2853 * _2844) + _2070;
        _2638 = (_2853 * _2846) + _2072;
        _2640 = (_2853 * _2848) + _2074;
        _2642 = ((_2838 * _864) * _2853) + _2418;
        _2644 = ((_2840 * _866) * _2853) + _2420;
        _2646 = ((_2842 * _867) * _2853) + _2422;
    }
    else
    {
        _2636 = _2070;
        _2638 = _2072;
        _2640 = _2074;
        _2642 = _2418;
        _2644 = _2420;
        _2646 = _2422;
    }
    float _4504 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _4515 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _4526 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _4537 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _2671 = cbInstanceData._m0[_807 + 6u].w * (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0)));
    float _2676 = _752 / cbSceneParam._m0[86u].x;
    float _2677 = _753 / cbSceneParam._m0[86u].y;
    vec4 _2691 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2676, _2677, (log2((isnan(cbSceneParam._m0[77u].w) ? _686 : (isnan(_686) ? cbSceneParam._m0[77u].w : min(_686, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2693 = _2691.x;
    float _2694 = _2691.y;
    float _2695 = _2691.z;
    float _2696 = _2691.w;
    float _2788;
    float _2790;
    float _2792;
    float _2794;
    if (_686 > cbSceneParam._m0[78u].w)
    {
        float _2751 = isnan(_686) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _686 : min(cbSceneParam._m0[80u].w, _686));
        float _2752 = _2751 / _686;
        float _2763 = _2752 * _737;
        float _2764 = _738 * _2752;
        float _2765 = (-0.0) - _2764;
        float _2766 = _2752 * _739;
        float _2768 = (cbSceneParam._m0[77u].w * _2765) / _2751;
        float _2769 = _2768 + cbSceneParam._m0[79u].w;
        float _2770 = cbSceneParam._m0[79u].w - _2764;
        float _2776 = sqrt(((_2763 * _2763) + (_2764 * _2764)) + (_2766 * _2766));
        float _2779 = (1.0 - (cbSceneParam._m0[77u].w / _2751)) * _2776;
        float _2784 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2786 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2939;
        if (abs((_2765 - _2768) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2939 = ((((_2769 > 0.0) ? exp2(_2784 * _2769) : (2.0 - exp2(_2786 * _2769))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2779;
        }
        else
        {
            float _2899 = 1.0 / cbSceneParam._m0[80u].x;
            float _2900 = isnan(_2770) ? _2769 : (isnan(_2769) ? _2770 : max(_2769, _2770));
            float _2901 = isnan(_2770) ? _2769 : (isnan(_2769) ? _2770 : min(_2769, _2770));
            float _2910 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : min(_2900, 0.0));
            float _2911 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : min(_2901, 0.0));
            _2939 = ((abs(_2776 / _2765) * cbSceneParam._m0[80u].y) * ((((_2910 - _2911) * 2.0) - ((exp2(_2784 * (isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0)))) - exp2(_2784 * (isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0))))) * _2899)) - ((exp2(_2786 * _2910) - exp2(_2786 * _2911)) * _2899))) + (_2779 * cbSceneParam._m0[80u].z);
        }
        vec4 _2941 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2676, _2677, 1.0), 0.0);
        float _2950 = exp2((_2939 * (-1.44269502162933349609375)) * (1.0 - _2941.w));
        float _2951 = log2(_2950);
        float _2967 = log2(_2696);
        _2788 = (exp2(_2967 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2951 * cbSceneParam._m0[78u].x)) * _2941.x) / cbSceneParam._m0[78u].x)) + _2693;
        _2790 = (exp2(_2967 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2951 * cbSceneParam._m0[78u].y)) * _2941.y) / cbSceneParam._m0[78u].y)) + _2694;
        _2792 = (exp2(_2967 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2951 * cbSceneParam._m0[78u].z)) * _2941.z) / cbSceneParam._m0[78u].z)) + _2695;
        _2794 = _2950 * _2696;
    }
    else
    {
        _2788 = _2693;
        _2790 = _2694;
        _2792 = _2695;
        _2794 = _2696;
    }
    float _2806 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2807 = _2806 == 3.0;
    float _2808 = log2(_2794);
    float _2815 = exp2(_2808 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (_2636 + ((isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))) * _879))) + ((_2642 + ((isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0))) * _1689)) * cbPerFrame._m0[3u].x));
    float _2816 = exp2(_2808 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * (_2638 + ((isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))) * _879))) + ((_2644 + ((isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0))) * _1689)) * cbPerFrame._m0[3u].x));
    float _2817 = exp2(_2808 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0))) * (_2640 + ((isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) * _879))) + ((_2646 + ((isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))) * _1689)) * cbPerFrame._m0[3u].x));
    float _2826 = (_2806 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2826 * (_2807 ? _2815 : (_2815 + (cbSceneParam._m0[72u].w * _2788)));
    SV_Target.y = _2826 * (_2807 ? _2816 : (_2816 + (cbSceneParam._m0[72u].w * _2790)));
    SV_Target.z = _2826 * (_2807 ? _2817 : (_2817 + (cbSceneParam._m0[72u].w * _2792)));
    SV_Target.w = _2671;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2671;
}


