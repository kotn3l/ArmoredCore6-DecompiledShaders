#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_snp_0_Texture2D_2;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D P_ACParts_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D P_ACParts_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D P_ACParts_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_snp_0_Texture2D_1;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_snp_0_Texture2D_10;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_snp_0_Texture2D_11;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_snp_0_Texture2D_12;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_snp_0_Texture2D_13;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1297;
float _3681;
float _3682;
float _3683;
float _3684;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243;
    float _244;
    float _245;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _243 = (-0.0) - _229;
        _244 = (-0.0) - _230;
        _245 = (-0.0) - _231;
    }
    else
    {
        _243 = _229;
        _244 = _230;
        _245 = _231;
    }
    float _255 = cbMtdParam._m0[21u].z + TEXCOORD.y;
    vec4 _268 = texture(sampler2D(P_ACParts_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (_255 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _273 = _268.z;
    float _274 = _268.w;
    float _282 = exp2(log2(_273 * cbMtdParam._m0[20u].w) * cbMtdParam._m0[19u].y);
    float _283 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _284 = isnan(1.0) ? _283 : (isnan(_283) ? 1.0 : min(_283, 1.0));
    float _290 = exp2(log2(1.0 - _274) * cbMtdParam._m0[20u].y);
    vec4 _302 = texture(sampler2D(P_ACParts_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _255) + cbTextureTilingScale._m0[0u].w));
    vec4 _328 = texture(sampler2D(P_ACParts_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _255) + cbTextureTilingScale._m0[3u].w));
    float _339 = cbMtdParam._m0[9u].x * _328.x;
    float _340 = cbMtdParam._m0[9u].y * _328.y;
    float _341 = cbMtdParam._m0[9u].z * _328.z;
    float _348 = (((cbMtdParam._m0[10u].x * _302.x) - _339) * _290) + _339;
    float _349 = (((cbMtdParam._m0[10u].y * _302.y) - _340) * _290) + _340;
    float _350 = (((cbMtdParam._m0[10u].z * _302.z) - _341) * _290) + _341;
    float _354 = exp2(log2(_274) * cbMtdParam._m0[21u].y);
    vec4 _366 = texture(sampler2D(P_ACParts_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _255) + cbTextureTilingScale._m0[10u].w));
    vec4 _400 = texture(sampler2D(P_ACParts_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _255) + cbTextureTilingScale._m0[11u].w));
    float _411 = cbMtdParam._m0[18u].x * _400.x;
    float _412 = cbMtdParam._m0[18u].y * _400.y;
    float _413 = cbMtdParam._m0[18u].z * _400.z;
    vec4 _434 = texture(sampler2D(P_ACParts_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _255) + cbTextureTilingScale._m0[1u].w));
    float _442 = ((((((((cbMtdParam._m0[17u].x * _366.x) - _348) * _354) + _348) - _411) * _284) + _411) * 4.55000019073486328125) * _434.x;
    float _444 = ((((((((cbMtdParam._m0[17u].y * _366.y) - _349) * _354) + _349) - _412) * _284) + _412) * 4.55000019073486328125) * _434.y;
    float _446 = ((((((((cbMtdParam._m0[17u].z * _366.z) - _350) * _354) + _350) - _413) * _284) + _413) * 4.55000019073486328125) * _434.z;
    float _447 = _434.w * _302.w;
    vec4 _460 = texture(sampler2D(P_ACParts_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _255) + cbTextureTilingScale._m0[5u].w));
    float _462 = _460.x;
    float _481 = (((1.0 - _462) + texture(sampler2D(P_ACParts_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _255) + cbTextureTilingScale._m0[4u].w)).x) * _284) + _462;
    vec4 _494 = texture(sampler2D(P_ACParts_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _255) + cbTextureTilingScale._m0[6u].w));
    float _501 = (((_494.x - _481) + cbMtdParam._m0[20u].z) * _290) + _481;
    float _524 = (((texture(sampler2D(P_ACParts_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - _501) + cbMtdParam._m0[22u].y) * _354) + _501;
    vec4 _537 = texture(sampler2D(P_ACParts_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * _255) + cbTextureTilingScale._m0[12u].w));
    vec4 _556 = texture(sampler2D(P_ACParts_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _255) + cbTextureTilingScale._m0[13u].w));
    float _558 = _556.x;
    float _559 = _556.y;
    float _562 = cbMtdParam._m0[19u].x + _556.z;
    float _565 = (((cbMtdParam._m0[20u].x + _537.z) - _562) * _290) + _562;
    vec4 _578 = texture(sampler2D(P_ACParts_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _255) + cbTextureTilingScale._m0[14u].w));
    vec4 _603 = texture(sampler2D(P_ACParts_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _255) + cbTextureTilingScale._m0[15u].w));
    float _605 = _603.x;
    float _606 = _603.y;
    float _609 = cbMtdParam._m0[21u].x + _603.z;
    float _612 = ((((_273 * 2.0) * ((((_578.z - _565) + cbMtdParam._m0[22u].x) * _354) + _565)) - _609) * _284) + _609;
    float _623 = ((_537.x - _558) * _290) + _558;
    float _624 = ((_537.y - _559) * _290) + _559;
    float _639 = (((((((_578.x - _623) * _354) + _623) - _605) * _284) + _605) * 2.0) + (-1.0);
    float _640 = (((((((_578.y - _624) * _354) + _624) - _606) * _284) + _606) * 2.0) + (-1.0);
    float _641 = dot(vec2(_639, _640), vec2(_639, _640));
    float _3703 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _646 = sqrt(1.0 - (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))));
    float _649 = _639 + (cbMtdParam._m0[21u].w * ((_268.x * 2.0) + (-1.0)));
    float _650 = _640 + (cbMtdParam._m0[21u].w * ((_268.y * 2.0) + (-1.0)));
    float _653 = fma(_646, _243, fma(_650, _235 * TANGENT.x, (_221 * _213) * _649));
    float _656 = fma(_646, _244, fma(_650, _235 * TANGENT.y, (_221 * _214) * _649));
    float _659 = fma(_646, _245, fma(_650, _235 * TANGENT.z, (_221 * _215) * _649));
    float _663 = inversesqrt(dot(vec3(_653, _656, _659), vec3(_653, _656, _659)));
    float _664 = _663 * _653;
    float _665 = _663 * _656;
    float _666 = _663 * _659;
    float _3714 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _667 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    float _3725 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _668 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _3736 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _3747 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _3758 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _3769 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _672 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
    float _688 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _729 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _739 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _729);
    float _740 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _729);
    float _741 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _729);
    float _745 = inversesqrt(dot(vec3(_739, _740, _741), vec3(_739, _740, _741)));
    float _746 = _739 * _745;
    float _747 = _740 * _745;
    float _748 = _741 * _745;
    vec4 _753 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _755 = _753.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _976 = sqrt(((_739 * _739) + (_740 * _740)) + (_741 * _741));
        float _982 = (cbMatDynParam._m0[5u].x * _976) + cbMatDynParam._m0[5u].y;
        float _3780 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _987 = (cbMatDynParam._m0[5u].z * _976) + cbMatDynParam._m0[5u].w;
        float _3791 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) - _983)) + _983) < ((_755 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _766 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _767 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _769 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _771 = _769.w;
    float _789 = fma(_666, cbSceneParam._m0[5u].z, fma(_665, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _664));
    float _792 = fma(_666, cbSceneParam._m0[6u].z, fma(_665, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _664));
    float _795 = fma(_666, cbSceneParam._m0[7u].z, fma(_665, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _664));
    vec4 _797 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _808 = (((_797.y - _668) + (_797.w * _668)) * cbMtdParam._m0[3u].x) + _668;
    uint _821 = uint(roundEven(NORMAL.w)) * 13u;
    uint _822 = _821 + 9u;
    uint _823 = _822 + uint(cbMatDynParam._m0[0u].w);
    float _829 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0)))) * cbInstanceData._m0[_823].x;
    float _830 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0)))) * cbInstanceData._m0[_823].y;
    float _831 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0)))) * cbInstanceData._m0[_823].z;
    float _3802 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _832 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _3813 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _833 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _3824 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _834 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    vec4 _835 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _840 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _851 = (((_840.x - _672) + (_840.w * _672)) * cbMtdParam._m0[3u].x) + _672;
    float _864 = (cbMtdParam._m0[3u].x * (((_832 * _771) - _832) + _835.x)) + _832;
    float _865 = (cbMtdParam._m0[3u].x * (((_833 * _771) - _833) + _835.y)) + _833;
    float _866 = (cbMtdParam._m0[3u].x * (((_834 * _771) - _834) + _835.z)) + _834;
    float _867 = 1.0 - _851;
    float _868 = _867 * _864;
    float _869 = _867 * _865;
    float _870 = _867 * _866;
    float _875 = (_864 + (-0.039999999105930328369140625)) * _851;
    float _876 = (_865 + (-0.039999999105930328369140625)) * _851;
    float _877 = (_866 + (-0.039999999105930328369140625)) * _851;
    float _878 = _875 + 0.039999999105930328369140625;
    float _880 = _876 + 0.039999999105930328369140625;
    float _881 = _877 + 0.039999999105930328369140625;
    vec4 _890 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _766, cbSceneParam._m0[86u].y * _767));
    float _893 = _890.x * TEXCOORD_4;
    float _894 = dot(vec3(_664, _665, _666), vec3(_746, _747, _748));
    float _897 = _894 * 2.0;
    float _901 = (_897 * _664) - _746;
    float _902 = (_897 * _665) - _747;
    float _903 = (_897 * _666) - _748;
    float _907 = abs(dot(vec3(_746, _747, _748), vec3(_664, _665, _666)));
    float _3835 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _909 = sqrt(_808);
    float _922 = exp2((_909 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_909 * 3.0));
    float _928 = (1.0 - _922) * ((_909 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _929 = _922 * _909;
    float _957 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _961 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _965 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1296;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1021 = fma(_965, cbModelParam._m0[26u].z, fma(_961, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _957));
        float _1025 = fma(_965, cbModelParam._m0[27u].z, fma(_961, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _957));
        float _1029 = fma(_965, cbModelParam._m0[28u].z, fma(_961, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _957));
        float _1054 = _957 + _664;
        float _1055 = _961 + _665;
        float _1056 = _965 + _666;
        float _1066 = fma(_1056, cbModelParam._m0[26u].z, fma(_1055, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1054)) - _1021;
        float _1067 = fma(_1056, cbModelParam._m0[27u].z, fma(_1055, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1054)) - _1025;
        float _1068 = fma(_1056, cbModelParam._m0[28u].z, fma(_1055, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1054)) - _1029;
        float _1072 = inversesqrt(dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068)));
        float _1085 = ((_1072 * _1066) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1021 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1086 = ((_1072 * _1067) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1025 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1087 = ((_1072 * _1068) / cbModelParam._m0[34u].z) + ((((((_1029 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        float _1124 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1090.x + (-0.5));
        float _1126 = _1124 * (_1090.y + (-0.5));
        float _1127 = _1124 * (_1090.z + (-0.5));
        float _1134 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1097.x + (-0.5));
        float _1136 = _1134 * (_1097.y + (-0.5));
        float _1137 = _1134 * (_1097.z + (-0.5));
        float _1144 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1104.x + (-0.5));
        float _1146 = _1144 * (_1104.y + (-0.5));
        float _1147 = _1144 * (_1104.z + (-0.5));
        float _1154 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1111.x + (-0.5));
        float _1156 = _1154 * (_1111.y + (-0.5));
        float _1157 = _1154 * (_1111.z + (-0.5));
        float _1158 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1159 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1160 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1161 = _1125 * 0.5;
        float _1162 = _1135 * 0.5;
        float _1163 = _1145 * 0.5;
        float _1164 = dot(vec3(_1161, _1162, _1163), vec3(_1161, _1162, _1163));
        float _1169 = (_1164 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1164);
        float _1178 = (dot(vec3(_664, _665, _666), vec3(_1169 * _1161, _1169 * _1162, _1169 * _1163)) + 1.0) * 0.5;
        float _3861 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1188 = sqrt(((_1162 * _1162) + (_1161 * _1161)) + (_1163 * _1163)) / (_1158 + 9.9999997473787516355514526367188e-06);
        float _3872 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1190 = _1189 * 2.0;
        float _1194 = (1.0 - _1189) / (_1189 + 1.0);
        float _3883 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1204 = ((((1.0 - _1195) * (_1190 + 2.0)) * exp2(log2(isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (_1190 + 1.0))) + _1195) * _1158;
        float _1205 = _1126 * 0.5;
        float _1206 = _1136 * 0.5;
        float _1207 = _1146 * 0.5;
        float _1208 = dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207));
        float _1213 = (_1208 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1208);
        float _1221 = (dot(vec3(_664, _665, _666), vec3(_1213 * _1205, _1213 * _1206, _1213 * _1207)) + 1.0) * 0.5;
        float _3894 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1230 = sqrt(((_1206 * _1206) + (_1205 * _1205)) + (_1207 * _1207)) / (_1159 + 9.9999997473787516355514526367188e-06);
        float _3905 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1232 = _1231 * 2.0;
        float _1236 = (1.0 - _1231) / (_1231 + 1.0);
        float _3916 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1246 = ((((1.0 - _1237) * (_1232 + 2.0)) * exp2(log2(isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_1232 + 1.0))) + _1237) * _1159;
        float _1247 = _1127 * 0.5;
        float _1248 = _1137 * 0.5;
        float _1249 = _1147 * 0.5;
        float _1250 = dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249));
        float _1255 = (_1250 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1250);
        float _1263 = (dot(vec3(_664, _665, _666), vec3(_1255 * _1247, _1255 * _1248, _1255 * _1249)) + 1.0) * 0.5;
        float _3927 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1272 = sqrt(((_1248 * _1248) + (_1247 * _1247)) + (_1249 * _1249)) / (_1160 + 9.9999997473787516355514526367188e-06);
        float _3938 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1274 = _1273 * 2.0;
        float _1278 = (1.0 - _1273) / (_1273 + 1.0);
        float _3949 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1288 = ((((1.0 - _1279) * (_1274 + 2.0)) * exp2(log2(isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * (_1274 + 1.0))) + _1279) * _1160;
        _1296 = _1127;
        _1298 = _1126;
        _1299 = _1125;
        _1300 = _1137;
        _1301 = _1136;
        _1302 = _1135;
        _1303 = _1147;
        _1304 = _1146;
        _1305 = _1145;
        _1306 = _1160;
        _1307 = _1159;
        _1308 = _1158;
        _1309 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)));
        _1310 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)));
        _1311 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)));
    }
    else
    {
        _1296 = _1297;
        _1298 = _1297;
        _1299 = _1297;
        _1300 = _1297;
        _1301 = _1297;
        _1302 = _1297;
        _1303 = _1297;
        _1304 = _1297;
        _1305 = _1297;
        _1306 = _1297;
        _1307 = _1297;
        _1308 = _1297;
        _1309 = 0.0;
        _1310 = 0.0;
        _1311 = 0.0;
    }
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1340 = fma(_965, cbModelParam._m0[30u].z, fma(_961, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _957));
        float _1344 = fma(_965, cbModelParam._m0[31u].z, fma(_961, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _957));
        float _1348 = fma(_965, cbModelParam._m0[32u].z, fma(_961, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _957));
        float _1371 = _957 + _664;
        float _1372 = _961 + _665;
        float _1373 = _965 + _666;
        float _1383 = fma(_1373, cbModelParam._m0[30u].z, fma(_1372, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1371)) - _1340;
        float _1384 = fma(_1373, cbModelParam._m0[31u].z, fma(_1372, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1371)) - _1344;
        float _1385 = fma(_1373, cbModelParam._m0[32u].z, fma(_1372, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1371)) - _1348;
        float _1389 = inversesqrt(dot(vec3(_1383, _1384, _1385), vec3(_1383, _1384, _1385)));
        float _1402 = ((_1389 * _1383) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1340 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1403 = ((_1389 * _1384) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1344 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1404 = ((_1389 * _1385) / cbModelParam._m0[35u].z) + ((((((_1348 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1406 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1402, _1403, _1404), 0.0);
        vec4 _1413 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1402, _1403, _1404), 0.0);
        vec4 _1420 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1402, _1403, _1404), 0.0);
        vec4 _1427 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1402, _1403, _1404), 0.0);
        float _1439 = exp2((_1406.w + (-0.5)) * 20.0) * 2.0;
        float _1440 = _1439 * (_1406.x + (-0.5));
        float _1441 = _1439 * (_1406.y + (-0.5));
        float _1442 = _1439 * (_1406.z + (-0.5));
        float _1449 = exp2((_1413.w + (-0.5)) * 20.0) * 2.0;
        float _1450 = _1449 * (_1413.x + (-0.5));
        float _1451 = _1449 * (_1413.y + (-0.5));
        float _1452 = _1449 * (_1413.z + (-0.5));
        float _1459 = exp2((_1420.w + (-0.5)) * 20.0) * 2.0;
        float _1460 = _1459 * (_1420.x + (-0.5));
        float _1461 = _1459 * (_1420.y + (-0.5));
        float _1462 = _1459 * (_1420.z + (-0.5));
        float _1469 = exp2((_1427.w + (-0.5)) * 20.0) * 2.0;
        float _1470 = _1469 * (_1427.x + (-0.5));
        float _1471 = _1469 * (_1427.y + (-0.5));
        float _1472 = _1469 * (_1427.z + (-0.5));
        float _1473 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1474 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1475 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1476 = _1440 * 0.5;
        float _1477 = _1450 * 0.5;
        float _1478 = _1460 * 0.5;
        float _1479 = dot(vec3(_1476, _1477, _1478), vec3(_1476, _1477, _1478));
        float _1484 = (_1479 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1479);
        float _1492 = (dot(vec3(_664, _665, _666), vec3(_1484 * _1476, _1484 * _1477, _1484 * _1478)) + 1.0) * 0.5;
        float _3990 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1501 = sqrt(((_1477 * _1477) + (_1476 * _1476)) + (_1478 * _1478)) / (_1473 + 9.9999997473787516355514526367188e-06);
        float _4001 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1503 = _1502 * 2.0;
        float _1507 = (1.0 - _1502) / (_1502 + 1.0);
        float _4012 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1517 = ((((1.0 - _1508) * (_1503 + 2.0)) * exp2(log2(isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_1503 + 1.0))) + _1508) * _1473;
        float _1518 = _1441 * 0.5;
        float _1519 = _1451 * 0.5;
        float _1520 = _1461 * 0.5;
        float _1521 = dot(vec3(_1518, _1519, _1520), vec3(_1518, _1519, _1520));
        float _1526 = (_1521 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1521);
        float _1534 = (dot(vec3(_664, _665, _666), vec3(_1526 * _1518, _1526 * _1519, _1526 * _1520)) + 1.0) * 0.5;
        float _4023 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1543 = sqrt(((_1519 * _1519) + (_1518 * _1518)) + (_1520 * _1520)) / (_1474 + 9.9999997473787516355514526367188e-06);
        float _4034 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1545 = _1544 * 2.0;
        float _1549 = (1.0 - _1544) / (_1544 + 1.0);
        float _4045 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1550 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1559 = ((((1.0 - _1550) * (_1545 + 2.0)) * exp2(log2(isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_1545 + 1.0))) + _1550) * _1474;
        float _1560 = _1442 * 0.5;
        float _1561 = _1452 * 0.5;
        float _1562 = _1462 * 0.5;
        float _1563 = dot(vec3(_1560, _1561, _1562), vec3(_1560, _1561, _1562));
        float _1568 = (_1563 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1563);
        float _1576 = (dot(vec3(_664, _665, _666), vec3(_1568 * _1560, _1568 * _1561, _1568 * _1562)) + 1.0) * 0.5;
        float _4056 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1585 = sqrt(((_1561 * _1561) + (_1560 * _1560)) + (_1562 * _1562)) / (_1475 + 9.9999997473787516355514526367188e-06);
        float _4067 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1587 = _1586 * 2.0;
        float _1591 = (1.0 - _1586) / (_1586 + 1.0);
        float _4078 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1592 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1601 = ((((1.0 - _1592) * (_1587 + 2.0)) * exp2(log2(isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * (_1587 + 1.0))) + _1592) * _1475;
        _1609 = _1442;
        _1610 = _1441;
        _1611 = _1440;
        _1612 = _1452;
        _1613 = _1451;
        _1614 = _1450;
        _1615 = _1462;
        _1616 = _1461;
        _1617 = _1460;
        _1618 = _1475;
        _1619 = _1474;
        _1620 = _1473;
        _1621 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)));
        _1622 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0)));
        _1623 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0)));
    }
    else
    {
        _1609 = _1297;
        _1610 = _1297;
        _1611 = _1297;
        _1612 = _1297;
        _1613 = _1297;
        _1614 = _1297;
        _1615 = _1297;
        _1616 = _1297;
        _1617 = _1297;
        _1618 = _1297;
        _1619 = _1297;
        _1620 = _1297;
        _1621 = 0.0;
        _1622 = 0.0;
        _1623 = 0.0;
    }
    float _1633 = (cbModelParam._m0[1u].x * (_1621 - _1309)) + _1309;
    float _1634 = (cbModelParam._m0[1u].x * (_1622 - _1310)) + _1310;
    float _1635 = (cbModelParam._m0[1u].x * (_1623 - _1311)) + _1311;
    float _1656 = fma(_1635, cbSceneParam._m0[89u].z, fma(_1634, cbSceneParam._m0[89u].y, _1633 * cbSceneParam._m0[89u].x));
    float _1659 = fma(_1635, cbSceneParam._m0[90u].z, fma(_1634, cbSceneParam._m0[90u].y, _1633 * cbSceneParam._m0[90u].x));
    float _1662 = fma(_1635, cbSceneParam._m0[91u].z, fma(_1634, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1633));
    float _1677 = _901 * 0.5;
    float _1678 = _902 * 0.5;
    float _1679 = _903 * 0.5;
    float _1680 = dot(vec4(_1677, _1678, _1679, 1.0), vec4(_1611, _1614, _1617, _1620));
    float _1683 = dot(vec4(_1677, _1678, _1679, 1.0), vec4(_1610, _1613, _1616, _1619));
    float _1686 = dot(vec4(_1677, _1678, _1679, 1.0), vec4(_1609, _1612, _1615, _1618));
    float _1720;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1693 = dot(vec4(_1677, _1678, _1679, 1.0), vec4(_1296, _1300, _1303, _1306));
        float _1697 = dot(vec4(_1677, _1678, _1679, 1.0), vec4(_1298, _1301, _1304, _1307));
        float _1701 = dot(vec4(_1677, _1678, _1679, 1.0), vec4(_1299, _1302, _1305, _1308));
        float _1708 = dot(vec4(cbModelParam._m0[39u]), vec4(_1677, _1678, _1679, 1.0));
        _1720 = dot(vec3(isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)), isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)), isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1708) ? 0.0 : (isnan(0.0) ? _1708 : max(0.0, _1708))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1720 = 1.0;
    }
    float _1731;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1722 = dot(vec4(cbModelParam._m0[40u]), vec4(_1677, _1678, _1679, 1.0));
        _1731 = dot(vec3(isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)), isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)), isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1722) ? 0.0 : (isnan(0.0) ? _1722 : max(0.0, _1722))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1731 = 1.0;
    }
    float _1735 = (_1731 * cbModelParam._m0[1u].x) + (_1720 * (1.0 - cbModelParam._m0[1u].x));
    float _1745 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _808);
    float _1746 = isnan(_1745) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1745 : min(cbModelParam._m0[25u].z, _1745));
    float _1826;
    float _1828;
    float _1830;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1793 = fma(_965, cbModelParam._m0[13u].z, fma(_961, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _957)) + cbModelParam._m0[13u].w;
        float _1797 = fma(_965, cbModelParam._m0[14u].z, fma(_961, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _957)) + cbModelParam._m0[14u].w;
        float _1801 = fma(_965, cbModelParam._m0[15u].z, fma(_961, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _957)) + cbModelParam._m0[15u].w;
        float _1804 = fma(_903, cbModelParam._m0[13u].z, fma(_902, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _901));
        float _1807 = fma(_903, cbModelParam._m0[14u].z, fma(_902, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _901));
        float _1810 = fma(_903, cbModelParam._m0[15u].z, fma(_902, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _901));
        float _1838;
        if (_1804 > 0.0)
        {
            _1838 = abs((1.0 - _1793) / _1804);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1804 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1793 + 1.0) / _1804);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1838 = frontier_phi_19_17_ladder;
        }
        float _2040;
        if (_1807 > 0.0)
        {
            _2040 = abs((1.0 - _1797) / _1807);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1797 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2040 = frontier_phi_28_24_ladder;
        }
        float _2294;
        if (_1810 > 0.0)
        {
            _2294 = abs((1.0 - _1801) / _1810);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1810 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1801 + 1.0) / _1810);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2294 = frontier_phi_40_35_ladder;
        }
        float _2296 = isnan(_2040) ? _1838 : (isnan(_1838) ? _2040 : min(_1838, _2040));
        float _2297 = isnan(_2294) ? _2296 : (isnan(_2296) ? _2294 : min(_2296, _2294));
        float _2301 = (_2297 * _1804) + _1793;
        float _2302 = (_2297 * _1807) + _1797;
        float _2303 = (_2297 * _1810) + _1801;
        float _2304 = _2297 * 9.9999997473787516355514526367188e-05;
        float _2306 = (-1.0) - _2304;
        float _2308 = _2304 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2303 > _2308) || ((_2303 < _2306) || ((_2302 > _2308) || ((_2302 < _2306) || ((_2301 < _2306) || (_2301 > _2308))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2431 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2303, cbModelParam._m0[9u].z, fma(_2302, cbModelParam._m0[9u].y, _2301 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2303, cbModelParam._m0[10u].z, fma(_2302, cbModelParam._m0[10u].y, _2301 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2303, cbModelParam._m0[11u].z, fma(_2302, cbModelParam._m0[11u].y, _2301 * cbModelParam._m0[11u].x))), _1746);
            frontier_phi_18_40_ladder = _2431.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2431.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2431.x * cbModelParam._m0[1u].y;
        }
        _1826 = frontier_phi_18_40_ladder_2;
        _1828 = frontier_phi_18_40_ladder_1;
        _1830 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1814 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_901, _902, _903), _1746);
        _1826 = _1814.x * cbModelParam._m0[1u].y;
        _1828 = _1814.y * cbModelParam._m0[1u].y;
        _1830 = _1814.z * cbModelParam._m0[1u].y;
    }
    float _1834 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _808);
    float _1835 = isnan(_1834) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1834 : min(cbModelParam._m0[25u].w, _1834));
    float _1924;
    float _1926;
    float _1928;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1888 = fma(_965, cbModelParam._m0[21u].z, fma(_961, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _957)) + cbModelParam._m0[21u].w;
        float _1892 = fma(_965, cbModelParam._m0[22u].z, fma(_961, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _957)) + cbModelParam._m0[22u].w;
        float _1896 = fma(_965, cbModelParam._m0[23u].z, fma(_961, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _957)) + cbModelParam._m0[23u].w;
        float _1899 = fma(_903, cbModelParam._m0[21u].z, fma(_902, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _901));
        float _1902 = fma(_903, cbModelParam._m0[22u].z, fma(_902, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _901));
        float _1905 = fma(_903, cbModelParam._m0[23u].z, fma(_902, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _901));
        float _2045;
        if (_1899 > 0.0)
        {
            _2045 = abs((1.0 - _1888) / _1899);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1899 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1888 + 1.0) / _1899);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2045 = frontier_phi_30_26_ladder;
        }
        float _2321;
        if (_1902 > 0.0)
        {
            _2321 = abs((1.0 - _1892) / _1902);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1902 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1892 + 1.0) / _1902);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2321 = frontier_phi_42_37_ladder;
        }
        float _2534;
        if (_1905 > 0.0)
        {
            _2534 = abs((1.0 - _1896) / _1905);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1905 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1896 + 1.0) / _1905);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2534 = frontier_phi_51_48_ladder;
        }
        float _2536 = isnan(_2321) ? _2045 : (isnan(_2045) ? _2321 : min(_2045, _2321));
        float _2537 = isnan(_2534) ? _2536 : (isnan(_2536) ? _2534 : min(_2536, _2534));
        float _2541 = (_2537 * _1899) + _1888;
        float _2542 = (_2537 * _1902) + _1892;
        float _2543 = (_2537 * _1905) + _1896;
        float _2544 = _2537 * 9.9999997473787516355514526367188e-05;
        float _2545 = (-1.0) - _2544;
        float _2547 = _2544 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2543 > _2547) || ((_2543 < _2545) || ((_2542 > _2547) || ((_2542 < _2545) || ((_2541 < _2545) || (_2541 > _2547))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2743 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2543, cbModelParam._m0[17u].z, fma(_2542, cbModelParam._m0[17u].y, _2541 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2543, cbModelParam._m0[18u].z, fma(_2542, cbModelParam._m0[18u].y, _2541 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2543, cbModelParam._m0[19u].z, fma(_2542, cbModelParam._m0[19u].y, _2541 * cbModelParam._m0[19u].x))), _1835);
            frontier_phi_27_51_ladder = _2743.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2743.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2743.x * cbModelParam._m0[1u].z;
        }
        _1924 = frontier_phi_27_51_ladder_2;
        _1926 = frontier_phi_27_51_ladder_1;
        _1928 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1908 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_901, _902, _903), _1835);
        _1924 = _1908.x * cbModelParam._m0[1u].z;
        _1926 = _1908.y * cbModelParam._m0[1u].z;
        _1928 = _1908.z * cbModelParam._m0[1u].z;
    }
    float _1941 = (((_928 * _878) + _929) * _893) * ((cbModelParam._m0[1u].w * (_1924 - _1826)) + _1826);
    float _1943 = (((_928 * _880) + _929) * _893) * ((cbModelParam._m0[1u].w * (_1926 - _1828)) + _1828);
    float _1945 = (((_928 * _881) + _929) * _893) * ((cbModelParam._m0[1u].w * (_1928 - _1830)) + _1830);
    float _1948 = fma(_1945, cbSceneParam._m0[89u].z, fma(_1943, cbSceneParam._m0[89u].y, _1941 * cbSceneParam._m0[89u].x));
    float _1951 = fma(_1945, cbSceneParam._m0[90u].z, fma(_1943, cbSceneParam._m0[90u].y, _1941 * cbSceneParam._m0[90u].x));
    float _1954 = fma(_1945, cbSceneParam._m0[91u].z, fma(_1943, cbSceneParam._m0[91u].y, _1941 * cbSceneParam._m0[91u].x));
    uvec4 _1964 = floatBitsToUint(cbInstanceData._m0[_821 + 5u]);
    uint _1966 = _1964.x * 14u;
    uint _1967 = _1966 + 13u;
    float _1974 = _893 + (-1.0);
    float _1979 = (cbLight._m0[_1967].x * _1974) + 1.0;
    float _1980 = (cbLight._m0[_1967].y * _1974) + 1.0;
    float _1981 = (cbLight._m0[_1967].z * _1974) + 1.0;
    float _1982 = (cbLight._m0[_1967].w * _1974) + 1.0;
    uint _1983 = _1966 + 5u;
    float _1989 = isnan(1.0) ? _1980 : (isnan(_1980) ? 1.0 : min(_1980, 1.0));
    uint _1993 = _1966 + 4u;
    float _1999 = isnan(1.0) ? _1979 : (isnan(_1979) ? 1.0 : min(_1979, 1.0));
    uint _2003 = _1966 | 1u;
    float _2014 = dot(vec3(cbLight._m0[_1966].xyz), vec3(_664, _665, _666));
    float _2017 = dot(vec3(cbLight._m0[_2003].xyz), vec3(_664, _665, _666));
    float _4214 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _4225 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2022 = (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * 0.3183098733425140380859375;
    float _2024 = (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * 0.3183098733425140380859375;
    float _2031 = ((cbLight._m0[_1983].x * _1989) * _2024) + ((cbLight._m0[_1993].x * _1999) * _2022);
    float _2032 = ((_1989 * cbLight._m0[_1983].y) * _2024) + ((_1999 * cbLight._m0[_1993].y) * _2022);
    float _2033 = ((_1989 * cbLight._m0[_1983].z) * _2024) + ((_1999 * cbLight._m0[_1993].z) * _2022);
    uvec4 _2037 = floatBitsToUint(cbLight._m0[_1966 + 12u]);
    bool _2039 = _2037.x == 0u;
    float _2050;
    float _2052;
    float _2054;
    if (_2039)
    {
        _2050 = _2031;
        _2052 = _2032;
        _2054 = _2033;
    }
    else
    {
        uint _2058 = _1966 + 6u;
        float _2074 = (dot(vec3(cbLight._m0[_1966 + 2u].xyz), vec3(_664, _665, _666)) * 0.5) + 0.5;
        float _2075 = _2074 * _2074;
        float _4236 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
        float _2076 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _2077 = isnan(1.0) ? _1981 : (isnan(_1981) ? 1.0 : min(_1981, 1.0));
        _2050 = (((cbLight._m0[_2058].x * 0.3183098733425140380859375) * _2076) * _2077) + _2031;
        _2052 = (((cbLight._m0[_2058].y * 0.3183098733425140380859375) * _2076) * _2077) + _2032;
        _2054 = (((cbLight._m0[_2058].z * 0.3183098733425140380859375) * _2076) * _2077) + _2033;
    }
    bool _2057 = _2037.y == 0u;
    float _2095;
    float _2097;
    float _2099;
    if (_2057)
    {
        _2095 = _2050;
        _2097 = _2052;
        _2099 = _2054;
    }
    else
    {
        uint _2265 = _1966 + 7u;
        float _2281 = (dot(vec3(cbLight._m0[_1966 + 3u].xyz), vec3(_664, _665, _666)) * 0.5) + 0.5;
        float _2282 = _2281 * _2281;
        float _4252 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2283 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _2284 = isnan(1.0) ? _1982 : (isnan(_1982) ? 1.0 : min(_1982, 1.0));
        _2095 = (((cbLight._m0[_2265].x * 0.3183098733425140380859375) * _2283) * _2284) + _2050;
        _2097 = (((cbLight._m0[_2265].y * 0.3183098733425140380859375) * _2283) * _2284) + _2052;
        _2099 = (((cbLight._m0[_2265].z * 0.3183098733425140380859375) * _2283) * _2284) + _2054;
    }
    uint _2102 = _1966 + 8u;
    float _2115 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1966].w)) * _808) * 0.949999988079071044921875);
    float _2116 = _2115 * _2115;
    float _2117 = cbLight._m0[_1966].x + _746;
    float _2118 = cbLight._m0[_1966].y + _747;
    float _2119 = cbLight._m0[_1966].z + _748;
    float _2123 = inversesqrt(dot(vec3(_2117, _2118, _2119), vec3(_2117, _2118, _2119)));
    float _2124 = _2123 * _2117;
    float _2125 = _2123 * _2118;
    float _2126 = _2123 * _2119;
    float _2127 = dot(vec3(_664, _665, _666), vec3(cbLight._m0[_1966].xyz));
    float _4268 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2130 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
    float _4279 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _2131 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
    float _2132 = dot(vec3(_664, _665, _666), vec3(_2124, _2125, _2126));
    float _4290 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2135 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
    float _2136 = dot(vec3(cbLight._m0[_1966].xyz), vec3(_2124, _2125, _2126));
    float _4301 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2140 = _2116 * _2116;
    float _2144 = ((_2135 * _2135) * (_2140 + (-1.0))) + 1.0;
    float _2152 = exp2(log2(1.0 - (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0)))) * 5.0);
    float _2153 = 0.959999978542327880859375 - _875;
    float _2155 = 0.959999978542327880859375 - _876;
    float _2156 = 0.959999978542327880859375 - _877;
    float _2163 = 1.0 - _2116;
    float _2174 = (0.5 / (((_2131 * ((_2130 * _2163) + _2116)) + 9.9999999392252902907785028219223e-09) + (((_2131 * _2163) + _2116) * _2130))) * _2130;
    float _4312 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2176 = (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_2140 / ((_2144 * _2144) * 3.141590118408203125));
    uint _2187 = _1966 + 9u;
    float _2198 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2003].w)) * _808) * 0.949999988079071044921875);
    float _2199 = _2198 * _2198;
    float _2200 = cbLight._m0[_2003].x + _746;
    float _2201 = cbLight._m0[_2003].y + _747;
    float _2202 = cbLight._m0[_2003].z + _748;
    float _2206 = inversesqrt(dot(vec3(_2200, _2201, _2202), vec3(_2200, _2201, _2202)));
    float _2207 = _2206 * _2200;
    float _2208 = _2206 * _2201;
    float _2209 = _2206 * _2202;
    float _2210 = dot(vec3(_664, _665, _666), vec3(cbLight._m0[_2003].xyz));
    float _4323 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2213 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
    float _2214 = dot(vec3(_664, _665, _666), vec3(_2207, _2208, _2209));
    float _4334 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2217 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
    float _2218 = dot(vec3(cbLight._m0[_2003].xyz), vec3(_2207, _2208, _2209));
    float _4345 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2222 = _2199 * _2199;
    float _2226 = ((_2217 * _2217) * (_2222 + (-1.0))) + 1.0;
    float _2233 = exp2(log2(1.0 - (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0)))) * 5.0);
    float _2240 = 1.0 - _2199;
    float _2250 = (0.5 / (((_2131 * ((_2213 * _2240) + _2199)) + 9.9999999392252902907785028219223e-09) + (((_2131 * _2240) + _2199) * _2213))) * _2213;
    float _4356 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2252 = (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * (_2222 / ((_2226 * _2226) * 3.141590118408203125));
    float _2262 = (((((_2233 * _2153) + _878) * cbLight._m0[_2187].x) * _2252) * _1989) + (((((_2152 * _2153) + _878) * cbLight._m0[_2102].x) * _2176) * _1999);
    float _2263 = (((((_2233 * _2155) + _880) * cbLight._m0[_2187].y) * _2252) * _1989) + (((((_2152 * _2155) + _880) * cbLight._m0[_2102].y) * _2176) * _1999);
    float _2264 = (((((_2233 * _2156) + _881) * cbLight._m0[_2187].z) * _2252) * _1989) + (((((_2152 * _2156) + _881) * cbLight._m0[_2102].z) * _2176) * _1999);
    float _2326;
    float _2328;
    float _2330;
    if (_2039)
    {
        _2326 = _2262;
        _2328 = _2263;
        _2330 = _2264;
    }
    else
    {
        uint _2332 = _1966 + 2u;
        uint _2336 = _1966 + 10u;
        float _2350 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2332].w)) * _808) * 0.949999988079071044921875);
        float _2351 = _2350 * _2350;
        float _2352 = cbLight._m0[_2332].x + _746;
        float _2353 = cbLight._m0[_2332].y + _747;
        float _2354 = cbLight._m0[_2332].z + _748;
        float _2358 = inversesqrt(dot(vec3(_2352, _2353, _2354), vec3(_2352, _2353, _2354)));
        float _2359 = _2358 * _2352;
        float _2360 = _2358 * _2353;
        float _2361 = _2358 * _2354;
        float _2362 = dot(vec3(_664, _665, _666), vec3(cbLight._m0[_2332].xyz));
        float _4367 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2365 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _2366 = dot(vec3(_664, _665, _666), vec3(_2359, _2360, _2361));
        float _4378 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2369 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _2370 = dot(vec3(cbLight._m0[_2332].xyz), vec3(_2359, _2360, _2361));
        float _4389 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2374 = _2351 * _2351;
        float _2378 = ((_2369 * _2369) * (_2374 + (-1.0))) + 1.0;
        float _2385 = exp2(log2(1.0 - (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0)))) * 5.0);
        float _2392 = 1.0 - _2351;
        float _2402 = (0.5 / (((_2131 * ((_2365 * _2392) + _2351)) + 9.9999999392252902907785028219223e-09) + (((_2131 * _2392) + _2351) * _2365))) * _2365;
        float _4400 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2404 = (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (_2374 / ((_2378 * _2378) * 3.141590118408203125));
        float _2405 = isnan(1.0) ? _1981 : (isnan(_1981) ? 1.0 : min(_1981, 1.0));
        _2326 = (((((_2385 * _2153) + _878) * cbLight._m0[_2336].x) * _2404) * _2405) + _2262;
        _2328 = (((((_2385 * _2155) + _880) * cbLight._m0[_2336].y) * _2404) * _2405) + _2263;
        _2330 = (((((_2385 * _2156) + _881) * cbLight._m0[_2336].z) * _2404) * _2405) + _2264;
    }
    float _2440;
    float _2442;
    float _2444;
    if (_2057)
    {
        _2440 = _2326;
        _2442 = _2328;
        _2444 = _2330;
    }
    else
    {
        uint _2451 = _1966 + 3u;
        uint _2455 = _1966 + 11u;
        float _2469 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2451].w)) * _808) * 0.949999988079071044921875);
        float _2470 = _2469 * _2469;
        float _2471 = cbLight._m0[_2451].x + _746;
        float _2472 = cbLight._m0[_2451].y + _747;
        float _2473 = cbLight._m0[_2451].z + _748;
        float _2477 = inversesqrt(dot(vec3(_2471, _2472, _2473), vec3(_2471, _2472, _2473)));
        float _2478 = _2477 * _2471;
        float _2479 = _2477 * _2472;
        float _2480 = _2477 * _2473;
        float _2481 = dot(vec3(_664, _665, _666), vec3(cbLight._m0[_2451].xyz));
        float _4416 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2484 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _2485 = dot(vec3(_664, _665, _666), vec3(_2478, _2479, _2480));
        float _4427 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2488 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _2489 = dot(vec3(cbLight._m0[_2451].xyz), vec3(_2478, _2479, _2480));
        float _4438 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2493 = _2470 * _2470;
        float _2497 = ((_2488 * _2488) * (_2493 + (-1.0))) + 1.0;
        float _2504 = exp2(log2(1.0 - (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0)))) * 5.0);
        float _2511 = 1.0 - _2470;
        float _2521 = (0.5 / (((_2131 * ((_2484 * _2511) + _2470)) + 9.9999999392252902907785028219223e-09) + (((_2131 * _2511) + _2470) * _2484))) * _2484;
        float _4449 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        float _2523 = (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_2493 / ((_2497 * _2497) * 3.141590118408203125));
        float _2524 = isnan(1.0) ? _1982 : (isnan(_1982) ? 1.0 : min(_1982, 1.0));
        _2440 = (((((_2504 * _2153) + _878) * cbLight._m0[_2455].x) * _2523) * _2524) + _2326;
        _2442 = (((((_2504 * _2155) + _880) * cbLight._m0[_2455].y) * _2523) * _2524) + _2328;
        _2444 = (((((_2504 * _2156) + _881) * cbLight._m0[_2455].z) * _2523) * _2524) + _2330;
    }
    float _2658;
    float _2660;
    float _2662;
    float _2664;
    float _2666;
    float _2668;
    if (_1964.y == 0u)
    {
        float _2599 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2600 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2599;
        float _2601 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2599;
        float _2602 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2599;
        uvec4 _2614 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2615 = _2614.x;
        uint _2626 = uint((float(_2614.y) * floor(float(uint(cbSceneParam._m0[85u].y * _767) / _2615))) + floor(float(uint(cbSceneParam._m0[85u].x * _766) / _2615)));
        float _2636 = (log2(_2602 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2637 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        uint _2640 = uint(isnan(14.0) ? _2637 : (isnan(_2637) ? 14.0 : min(_2637, 14.0)));
        uvec4 _2645 = texelFetch(g_lightClusterGridBuffer, int(((_2640 << 2u) + (_2626 << 6u)) >> 2u));
        uint _2646 = _2645.x;
        uint _2647 = _2614.z;
        float _2748;
        float _2750;
        float _2752;
        float _2754;
        float _2756;
        float _2758;
        if (((((1u << ((_2647 >> 4u) & 15u)) + 4294967295u) & _2646) == 0u) || ((_2647 & 240u) == 0u))
        {
            _2748 = 0.0;
            _2750 = 0.0;
            _2752 = 0.0;
            _2754 = 0.0;
            _2756 = 0.0;
            _2758 = 0.0;
        }
        else
        {
            float _2749;
            float _2751;
            float _2753;
            float _2755;
            float _2757;
            float _2759;
            float _2900 = 0.0;
            float _2901 = 0.0;
            float _2902 = 0.0;
            float _2903 = 0.0;
            float _2904 = 0.0;
            float _2905 = 0.0;
            uint _2906 = 0u;
            uint _2915;
            bool _2916;
            for (;;)
            {
                _2915 = texelFetch(g_lightClassification, int((((_2640 << 5u) + (_2626 << 9u)) + (_2906 << 2u)) >> 2u)).x;
                _2916 = _2915 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2916)
                {
                    frontier_phi_68_pred = _2902;
                    frontier_phi_68_pred_1 = _2905;
                    frontier_phi_68_pred_2 = _2904;
                    frontier_phi_68_pred_3 = _2903;
                    frontier_phi_68_pred_4 = _2901;
                    frontier_phi_68_pred_5 = _2900;
                }
                else
                {
                    float _3045;
                    float _3046;
                    float _3047;
                    float _3048;
                    float _3049;
                    float _3050;
                    uint _3051;
                    _3045 = _2900;
                    _3046 = _2901;
                    _3047 = _2902;
                    _3048 = _2903;
                    _3049 = _2904;
                    _3050 = _2905;
                    _3051 = _2915;
                    float _2972;
                    float _2973;
                    float _2974;
                    float _2975;
                    float _2976;
                    float _2977;
                    for (;;)
                    {
                        uint _3055 = uint(findLSB(_3051)) + (_2906 << 5u);
                        uint _3052 = (_3051 + 4294967295u) & _3051;
                        uint _3057 = _3055 * 48u;
                        vec4 _3071 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3057)).x, texelFetch(g_PointLightRenderingBuffer, int(_3057 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3057 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3057 + 3u)).x));
                        uint _3077 = (_3055 * 48u) + 4u;
                        vec4 _3090 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3077)).x, texelFetch(g_PointLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3077 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3077 + 3u)).x));
                        uint _3096 = (_3055 * 48u) + 8u;
                        vec3 _3107 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3096)).x, texelFetch(g_PointLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3096 + 2u)).x));
                        float _3111 = _3071.x - _2600;
                        float _3112 = _3071.y - _2601;
                        float _3113 = _3071.z - _2602;
                        float _3114 = dot(vec3(_3111, _3112, _3113), vec3(_3111, _3112, _3113));
                        float _3117 = inversesqrt(_3114);
                        float _3118 = _3117 * _3111;
                        float _3119 = _3117 * _3112;
                        float _3120 = _3117 * _3113;
                        float _3121 = dot(vec3(_789, _792, _795), vec3(_3118, _3119, _3120));
                        float _3126 = 1.0 - (_3114 * _3071.w);
                        float _4475 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                        float _3127 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
                        float _3128 = sqrt(_3114) * _3090.w;
                        float _3131 = 1.39999997615814208984375 / (_3128 + 1.39999997615814208984375);
                        float _3132 = _3131 * _3131;
                        float _3135 = ((1.0 - _3132) * _3121) + _3132;
                        float _3138 = _3128 * _3128;
                        float _3142 = ((isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0))) * _3127) / ((_3138 * 0.699999988079071044921875) + 1.0);
                        float _3146 = (-0.0) - _2600;
                        float _3147 = (-0.0) - _2601;
                        float _3148 = (-0.0) - _2602;
                        float _3152 = inversesqrt(dot(vec3(_3146, _3147, _3148), vec3(_3146, _3147, _3148)));
                        float _3153 = _3152 * _3146;
                        float _3154 = _3152 * _3147;
                        float _3155 = _3152 * _3148;
                        float _3163 = exp2(log2(1.0 / ((_3138 * 3.5) + 5.0)) * 0.25);
                        float _3164 = 1.0 - _909;
                        float _3171 = sqrt(1.0 - ((1.0 - (_3164 * _3164)) * (1.0 - (_3163 * _3163))));
                        float _3172 = _3171 * _3171;
                        float _3173 = _3172 * _3172;
                        float _3174 = _3153 + _3118;
                        float _3175 = _3154 + _3119;
                        float _3176 = _3155 + _3120;
                        float _3180 = inversesqrt(dot(vec3(_3174, _3175, _3176), vec3(_3174, _3175, _3176)));
                        float _3184 = dot(vec3(_789, _792, _795), vec3(_3153, _3154, _3155));
                        float _4491 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                        float _3187 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
                        float _3188 = dot(vec3(_789, _792, _795), vec3(_3180 * _3174, _3180 * _3175, _3180 * _3176));
                        float _4502 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                        float _3191 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
                        float _3195 = ((_3191 * _3191) * (_3173 + (-1.0))) + 1.0;
                        float _3196 = _3131 * _3172;
                        float _3197 = _3196 * _3196;
                        float _3200 = ((1.0 - _3197) * _3121) + _3197;
                        float _4513 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                        float _3201 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                        float _3202 = 1.0 - _3172;
                        float _3212 = (0.5 / (((_3201 * ((_3187 * _3202) + _3172)) + 9.9999999392252902907785028219223e-09) + (((_3201 * _3202) + _3172) * _3187))) * _3201;
                        float _4524 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                        float _3223 = (((_3173 * 3.1415927410125732421875) * (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0)))) / ((_3195 * _3195) * ((_3138 * 2.1991131305694580078125) + 3.141590118408203125))) * _3127;
                        _2975 = (_3142 * _3090.x) + _3048;
                        _2976 = (_3142 * _3090.y) + _3049;
                        _2977 = (_3142 * _3090.z) + _3050;
                        _2972 = (_3223 * _3107.x) + _3045;
                        _2973 = (_3223 * _3107.y) + _3046;
                        _2974 = (_3223 * _3107.z) + _3047;
                        if (_3052 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3045 = _2972;
                            _3046 = _2973;
                            _3047 = _2974;
                            _3048 = _2975;
                            _3049 = _2976;
                            _3050 = _2977;
                            _3051 = _3052;
                        }
                    }
                    frontier_phi_68_pred = _2974;
                    frontier_phi_68_pred_1 = _2977;
                    frontier_phi_68_pred_2 = _2976;
                    frontier_phi_68_pred_3 = _2975;
                    frontier_phi_68_pred_4 = _2973;
                    frontier_phi_68_pred_5 = _2972;
                }
                _2753 = frontier_phi_68_pred;
                _2759 = frontier_phi_68_pred_1;
                _2757 = frontier_phi_68_pred_2;
                _2755 = frontier_phi_68_pred_3;
                _2751 = frontier_phi_68_pred_4;
                _2749 = frontier_phi_68_pred_5;
                uint _2907 = _2906 + 1u;
                if (_2907 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2900 = _2749;
                    _2901 = _2751;
                    _2902 = _2753;
                    _2903 = _2755;
                    _2904 = _2757;
                    _2905 = _2759;
                    _2906 = _2907;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2748 = _2749;
            _2750 = _2751;
            _2752 = _2753;
            _2754 = _2755;
            _2756 = _2757;
            _2758 = _2759;
        }
        uvec4 _2762 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2763 = _2762.z;
        uint _2765 = (_2763 >> 8u) & 15u;
        float _2868;
        float _2870;
        float _2872;
        float _2874;
        float _2876;
        float _2878;
        if (((4294967295u << _2765) & _2646) == 0u)
        {
            _2868 = _2748;
            _2870 = _2750;
            _2872 = _2752;
            _2874 = _2754;
            _2876 = _2756;
            _2878 = _2758;
        }
        else
        {
            float _2893 = inversesqrt(dot(vec3(_2600, _2601, _2602), vec3(_2600, _2601, _2602)));
            float _2894 = _2893 * _2600;
            float _2895 = _2893 * _2601;
            float _2896 = _2893 * _2602;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2765 < ((_2763 >> 12u) & 15u))
            {
                float _2869;
                float _2871;
                float _2873;
                float _2875;
                float _2877;
                float _2879;
                float _3028 = _2748;
                float _3029 = _2750;
                float _3030 = _2752;
                float _3031 = _2754;
                float _3032 = _2756;
                float _3033 = _2758;
                uint _3034 = _2765;
                uint _3043;
                bool _3044;
                for (;;)
                {
                    _3043 = texelFetch(g_lightClassification, int((((_2640 << 5u) + (_2626 << 9u)) + (_3034 << 2u)) >> 2u)).x;
                    _3044 = _3043 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3044)
                    {
                        frontier_phi_79_pred = _3033;
                        frontier_phi_79_pred_1 = _3032;
                        frontier_phi_79_pred_2 = _3031;
                        frontier_phi_79_pred_3 = _3030;
                        frontier_phi_79_pred_4 = _3029;
                        frontier_phi_79_pred_5 = _3028;
                    }
                    else
                    {
                        float _3237;
                        float _3238;
                        float _3239;
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3250 = _3028;
                        float _3251 = _3029;
                        float _3252 = _3030;
                        float _3253 = _3031;
                        float _3254 = _3032;
                        float _3255 = _3033;
                        uint _3256 = _3043;
                        uint _3257;
                        vec4 _3282;
                        float _3283;
                        vec4 _3298;
                        vec3 _3310;
                        vec4 _3326;
                        vec4 _3341;
                        float _3388;
                        bool _3389;
                        for (;;)
                        {
                            uint _3267 = ((_3034 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3256));
                            _3257 = (_3256 + 4294967295u) & _3256;
                            uint _3269 = _3267 * 40u;
                            _3282 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 3u)).x));
                            _3283 = _3282.w;
                            uint _3285 = (_3267 * 40u) + 4u;
                            _3298 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 3u)).x));
                            uint _3300 = (_3267 * 40u) + 8u;
                            _3310 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3300)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 2u)).x));
                            uint _3313 = (_3267 * 40u) + 16u;
                            _3326 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 3u)).x));
                            uint _3328 = (_3267 * 40u) + 20u;
                            _3341 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3328)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 3u)).x));
                            uint _3344 = (_3267 * 40u) + 24u;
                            vec4 _3357 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3344)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 3u)).x));
                            uint _3363 = (_3267 * 40u) + 28u;
                            vec4 _3376 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3363)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 3u)).x));
                            _3388 = fma(_2602, _3376.z, fma(_2601, _3376.y, _3376.x * _2600)) + _3376.w;
                            _3389 = !((fma(_2602, _3357.z, fma(_2601, _3357.y, _3357.x * _2600)) + _3357.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3389)
                            {
                                float _3416 = _3282.x - _2600;
                                float _3417 = _3282.y - _2601;
                                float _3418 = _3282.z - _2602;
                                float _3419 = dot(vec3(_3416, _3417, _3418), vec3(_3416, _3417, _3418));
                                float _3422 = inversesqrt(_3419);
                                float _3423 = _3422 * _3416;
                                float _3424 = _3422 * _3417;
                                float _3425 = _3422 * _3418;
                                float _3429 = 1.0 - (_3419 / (_3283 * _3283));
                                float _4535 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                                float _3430 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                                float _3434 = sqrt(_3419) * _3298.w;
                                float _3436 = 1.39999997615814208984375 / (_3434 + 1.39999997615814208984375);
                                float _3437 = _3436 * _3436;
                                float _3440 = ((1.0 - _3437) * dot(vec3(_3423, _3424, _3425), vec3(_789, _792, _795))) + _3437;
                                float _3443 = _3434 * _3434;
                                float _3447 = (fma(_2602, _3326.z, fma(_2601, _3326.y, _3326.x * _2600)) + _3326.w) / _3388;
                                float _3448 = (fma(_2602, _3341.z, fma(_2601, _3341.y, _3341.x * _2600)) + _3341.w) / _3388;
                                float _3452 = 1.0 - dot(vec2(_3447, _3448), vec2(_3447, _3448));
                                float _4551 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                                float _3453 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
                                float _3454 = _3453 * (((isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0))) * _3430) / ((_3443 * 0.699999988079071044921875) + 1.0));
                                float _3466 = exp2(log2(1.0 / ((_3443 * 3.5) + 5.0)) * 0.25);
                                float _3467 = 1.0 - _909;
                                float _3474 = sqrt(1.0 - ((1.0 - (_3467 * _3467)) * (1.0 - (_3466 * _3466))));
                                float _3475 = _3474 * _3474;
                                float _3476 = _3475 * _3475;
                                float _3477 = _3423 - _2894;
                                float _3478 = _3424 - _2895;
                                float _3479 = _3425 - _2896;
                                float _3483 = inversesqrt(dot(vec3(_3477, _3478, _3479), vec3(_3477, _3478, _3479)));
                                float _3487 = dot(vec3(_789, _792, _795), vec3((-0.0) - _2894, (-0.0) - _2895, (-0.0) - _2896));
                                float _4562 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                                float _3490 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
                                float _3491 = dot(vec3(_789, _792, _795), vec3(_3483 * _3477, _3483 * _3478, _3483 * _3479));
                                float _4573 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                                float _3494 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
                                float _3498 = ((_3494 * _3494) * (_3476 + (-1.0))) + 1.0;
                                float _3499 = _3436 * _3475;
                                float _3500 = _3499 * _3499;
                                float _3506 = ((1.0 - _3500) * dot(vec3(_789, _792, _795), vec3(_3423, _3424, _3425))) + _3500;
                                float _4584 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                                float _3507 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
                                float _3508 = 1.0 - _3475;
                                float _3518 = (0.5 / (((_3507 * ((_3490 * _3508) + _3475)) + 9.9999999392252902907785028219223e-09) + (((_3507 * _3508) + _3475) * _3490))) * _3507;
                                float _4595 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                                float _3528 = (_3453 * _3430) * (((_3476 * 3.1415927410125732421875) * (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0)))) / ((_3498 * _3498) * ((_3443 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3454 * _3298.z;
                                frontier_phi_85_pred_1 = _3454 * _3298.y;
                                frontier_phi_85_pred_2 = _3454 * _3298.x;
                                frontier_phi_85_pred_3 = _3528 * _3310.z;
                                frontier_phi_85_pred_4 = _3528 * _3310.y;
                                frontier_phi_85_pred_5 = _3528 * _3310.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3537 = frontier_phi_85_pred;
                            _3536 = frontier_phi_85_pred_1;
                            _3535 = frontier_phi_85_pred_2;
                            _3534 = frontier_phi_85_pred_3;
                            _3533 = frontier_phi_85_pred_4;
                            _3532 = frontier_phi_85_pred_5;
                            _3240 = _3535 + _3253;
                            _3241 = _3536 + _3254;
                            _3242 = _3537 + _3255;
                            _3237 = _3532 + _3250;
                            _3238 = _3533 + _3251;
                            _3239 = _3534 + _3252;
                            if (_3257 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3250 = _3237;
                                _3251 = _3238;
                                _3252 = _3239;
                                _3253 = _3240;
                                _3254 = _3241;
                                _3255 = _3242;
                                _3256 = _3257;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3242;
                        frontier_phi_79_pred_1 = _3241;
                        frontier_phi_79_pred_2 = _3240;
                        frontier_phi_79_pred_3 = _3239;
                        frontier_phi_79_pred_4 = _3238;
                        frontier_phi_79_pred_5 = _3237;
                    }
                    _2879 = frontier_phi_79_pred;
                    _2877 = frontier_phi_79_pred_1;
                    _2875 = frontier_phi_79_pred_2;
                    _2873 = frontier_phi_79_pred_3;
                    _2871 = frontier_phi_79_pred_4;
                    _2869 = frontier_phi_79_pred_5;
                    uint _3035 = _3034 + 1u;
                    if (_3035 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3028 = _2869;
                        _3029 = _2871;
                        _3030 = _2873;
                        _3031 = _2875;
                        _3032 = _2877;
                        _3033 = _2879;
                        _3034 = _3035;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2875;
                frontier_phi_60_61_ladder_1 = _2879;
                frontier_phi_60_61_ladder_2 = _2877;
                frontier_phi_60_61_ladder_3 = _2873;
                frontier_phi_60_61_ladder_4 = _2871;
                frontier_phi_60_61_ladder_5 = _2869;
            }
            else
            {
                frontier_phi_60_61_ladder = _2754;
                frontier_phi_60_61_ladder_1 = _2758;
                frontier_phi_60_61_ladder_2 = _2756;
                frontier_phi_60_61_ladder_3 = _2752;
                frontier_phi_60_61_ladder_4 = _2750;
                frontier_phi_60_61_ladder_5 = _2748;
            }
            _2868 = frontier_phi_60_61_ladder_5;
            _2870 = frontier_phi_60_61_ladder_4;
            _2872 = frontier_phi_60_61_ladder_3;
            _2874 = frontier_phi_60_61_ladder;
            _2876 = frontier_phi_60_61_ladder_2;
            _2878 = frontier_phi_60_61_ladder_1;
        }
        float _2883 = isnan(1.0) ? _893 : (isnan(_893) ? 1.0 : min(_893, 1.0));
        _2658 = (_2883 * _2874) + _2095;
        _2660 = (_2883 * _2876) + _2097;
        _2662 = (_2883 * _2878) + _2099;
        _2664 = ((_2868 * _878) * _2883) + _2440;
        _2666 = ((_2870 * _880) * _2883) + _2442;
        _2668 = ((_2872 * _881) * _2883) + _2444;
    }
    else
    {
        _2658 = _2095;
        _2660 = _2097;
        _2662 = _2099;
        _2664 = _2440;
        _2666 = _2442;
        _2668 = _2444;
    }
    float _4611 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _4622 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _4633 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _4644 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _2686 = ((isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * (_2658 + ((isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))) * _893))) + ((_2664 + ((isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0))) * _1735)) * cbPerFrame._m0[3u].x);
    float _2687 = ((isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * (_2660 + ((isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))) * _893))) + ((_2666 + ((isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0))) * _1735)) * cbPerFrame._m0[3u].x);
    float _2688 = ((isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (_2662 + ((isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))) * _893))) + ((_2668 + ((isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0))) * _1735)) * cbPerFrame._m0[3u].x);
    float _2693 = cbInstanceData._m0[_821 + 6u].w * (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0)));
    float _2698 = _766 / cbSceneParam._m0[86u].x;
    float _2699 = _767 / cbSceneParam._m0[86u].y;
    vec4 _2713 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2698, _2699, (log2((isnan(cbSceneParam._m0[77u].w) ? _688 : (isnan(_688) ? cbSceneParam._m0[77u].w : min(_688, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2715 = _2713.x;
    float _2716 = _2713.y;
    float _2717 = _2713.z;
    float _2718 = _2713.w;
    float _2810;
    float _2812;
    float _2814;
    float _2816;
    if (_688 > cbSceneParam._m0[78u].w)
    {
        float _2773 = isnan(_688) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _688 : min(cbSceneParam._m0[80u].w, _688));
        float _2774 = _2773 / _688;
        float _2785 = _2774 * _739;
        float _2786 = _740 * _2774;
        float _2787 = (-0.0) - _2786;
        float _2788 = _2774 * _741;
        float _2790 = (cbSceneParam._m0[77u].w * _2787) / _2773;
        float _2791 = _2790 + cbSceneParam._m0[79u].w;
        float _2792 = cbSceneParam._m0[79u].w - _2786;
        float _2798 = sqrt(((_2785 * _2785) + (_2786 * _2786)) + (_2788 * _2788));
        float _2801 = (1.0 - (cbSceneParam._m0[77u].w / _2773)) * _2798;
        float _2806 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2808 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2985;
        if (abs((_2787 - _2790) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2985 = ((((_2791 > 0.0) ? exp2(_2806 * _2791) : (2.0 - exp2(_2808 * _2791))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2801;
        }
        else
        {
            float _2929 = 1.0 / cbSceneParam._m0[80u].x;
            float _2930 = isnan(_2792) ? _2791 : (isnan(_2791) ? _2792 : max(_2791, _2792));
            float _2931 = isnan(_2792) ? _2791 : (isnan(_2791) ? _2792 : min(_2791, _2792));
            float _2940 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : min(_2930, 0.0));
            float _2941 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : min(_2931, 0.0));
            _2985 = ((abs(_2798 / _2787) * cbSceneParam._m0[80u].y) * ((((_2940 - _2941) * 2.0) - ((exp2(_2806 * (isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0)))) - exp2(_2806 * (isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0))))) * _2929)) - ((exp2(_2808 * _2940) - exp2(_2808 * _2941)) * _2929))) + (_2801 * cbSceneParam._m0[80u].z);
        }
        vec4 _2987 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2698, _2699, 1.0), 0.0);
        float _2996 = exp2((_2985 * (-1.44269502162933349609375)) * (1.0 - _2987.w));
        float _2997 = log2(_2996);
        float _3013 = log2(_2718);
        _2810 = (exp2(_3013 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2997 * cbSceneParam._m0[78u].x)) * _2987.x) / cbSceneParam._m0[78u].x)) + _2715;
        _2812 = (exp2(_3013 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2997 * cbSceneParam._m0[78u].y)) * _2987.y) / cbSceneParam._m0[78u].y)) + _2716;
        _2814 = (exp2(_3013 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2997 * cbSceneParam._m0[78u].z)) * _2987.z) / cbSceneParam._m0[78u].z)) + _2717;
        _2816 = _2996 * _2718;
    }
    else
    {
        _2810 = _2715;
        _2812 = _2716;
        _2814 = _2717;
        _2816 = _2718;
    }
    bool _3023;
    vec4 _2826;
    vec4 _2848;
    float _2850;
    float _2854;
    float _2855;
    float _2856;
    float _2857;
    bool _2867;
    for (;;)
    {
        _2826 = cbMatDynParam._m0[0u];
        float _2828 = roundEven(_2826.y);
        bool _2829 = _2828 == 3.0;
        float _2830 = log2(_2816);
        float _2837 = exp2(_2830 * cbSceneParam._m0[78u].x) * _2686;
        float _2838 = exp2(_2830 * cbSceneParam._m0[78u].y) * _2687;
        float _2839 = exp2(_2830 * cbSceneParam._m0[78u].z) * _2688;
        float _2846 = _755 + (-0.5);
        _2848 = cbMtdParam._m0[1u];
        _2850 = _2848.y * _2846;
        float _2853 = (_2828 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2854 = _2853 * (_2829 ? _2837 : (_2837 + (cbSceneParam._m0[72u].w * _2810)));
        _2855 = _2853 * (_2829 ? _2838 : (_2838 + (cbSceneParam._m0[72u].w * _2812)));
        _2856 = _2853 * (_2829 ? _2839 : (_2839 + (cbSceneParam._m0[72u].w * _2814)));
        _2857 = _2846 * 0.999000012874603271484375;
        _2867 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2867)
        {
            if ((cbInstanceData._m0[_821 + 7u].x + _2857) < 0.5)
            {
                _3023 = true;
                break;
            }
        }
        uint _2964 = _822 + uint(_2826.w);
        if ((cbInstanceData._m0[_2964].w < 1.0) && ((cbInstanceData._m0[_2964].w + _2857) < 0.5))
        {
            _3023 = true;
            break;
        }
        if ((_2850 + _447) < _2848.x)
        {
            _3023 = true;
            break;
        }
        _3023 = false;
        break;
    }
    float _3228;
    if (_3023)
    {
        discard_state = true;
        _3228 = 0.0;
    }
    else
    {
        _3228 = _2693;
    }
    SV_Target.x = _2854;
    SV_Target.y = _2855;
    SV_Target.z = _2856;
    SV_Target.w = _3228;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2693;
    discard_exit();
}


