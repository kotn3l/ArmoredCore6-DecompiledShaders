#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_snp_0_Texture2D_2;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D P_ACParts_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D P_ACParts_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D P_ACParts_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_snp_0_Texture2D_1;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_snp_0_Texture2D_10;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_snp_0_Texture2D_11;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_snp_0_Texture2D_12;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_snp_0_Texture2D_13;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_snp_0_Texture2D_14;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_snp_0_Texture2D_15;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1419;
float _4085;
float _4086;
float _4087;
float _4088;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257;
    float _258;
    float _259;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _257 = (-0.0) - _243;
        _258 = (-0.0) - _244;
        _259 = (-0.0) - _245;
    }
    else
    {
        _257 = _243;
        _258 = _244;
        _259 = _245;
    }
    vec4 _277 = texture(sampler2D(P_ACParts_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _282 = _277.z;
    float _283 = _277.w;
    float _291 = exp2(log2(_282 * cbMtdParam._m0[20u].w) * cbMtdParam._m0[19u].y);
    float _292 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    float _293 = isnan(1.0) ? _292 : (isnan(_292) ? 1.0 : min(_292, 1.0));
    float _299 = exp2(log2(1.0 - _283) * cbMtdParam._m0[20u].y);
    vec4 _311 = texture(sampler2D(P_ACParts_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _205[6];
    float _206[6];
    float _207[6];
    _205[0u] = cbMtdParam._m0[12u].x;
    _206[0u] = cbMtdParam._m0[12u].y;
    _207[0u] = cbMtdParam._m0[12u].z;
    _205[1u] = cbMtdParam._m0[13u].x;
    _206[1u] = cbMtdParam._m0[13u].y;
    _207[1u] = cbMtdParam._m0[13u].z;
    _205[2u] = cbMtdParam._m0[14u].x;
    _206[2u] = cbMtdParam._m0[14u].y;
    _207[2u] = cbMtdParam._m0[14u].z;
    _205[3u] = cbMtdParam._m0[15u].x;
    _206[3u] = cbMtdParam._m0[15u].y;
    _207[3u] = cbMtdParam._m0[15u].z;
    _205[4u] = cbMtdParam._m0[16u].x;
    _206[4u] = cbMtdParam._m0[16u].y;
    _207[4u] = cbMtdParam._m0[16u].z;
    _205[5u] = cbMtdParam._m0[11u].x;
    _206[5u] = cbMtdParam._m0[11u].y;
    _207[5u] = cbMtdParam._m0[11u].z;
    vec4 _393 = texture(sampler2D(P_ACParts_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _395 = _393.x;
    float _396 = _393.y;
    float _424 = roundEven(((_395 + (-0.02500000037252902984619140625)) + ((_393.z * cbMtdParam._m0[19u].w) * (texture(sampler2D(P_ACParts_snp_0_Texture2D_15, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, ((cbMtdParam._m0[19u].z * TEXCOORD.y) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w)).x - _395))) * 6.0);
    float _425 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    uint _428 = uint(int(isnan(5.0) ? _425 : (isnan(_425) ? 5.0 : min(_425, 5.0))));
    vec4 _458 = texture(sampler2D(P_ACParts_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _468 = cbMtdParam._m0[9u].x * _458.x;
    float _469 = cbMtdParam._m0[9u].y * _458.y;
    float _470 = cbMtdParam._m0[9u].z * _458.z;
    float _477 = ((((((_205[_428] - cbMtdParam._m0[10u].x) * _396) + cbMtdParam._m0[10u].x) * _311.x) - _468) * _299) + _468;
    float _478 = ((((((_206[_428] - cbMtdParam._m0[10u].y) * _396) + cbMtdParam._m0[10u].y) * _311.y) - _469) * _299) + _469;
    float _479 = ((((((_207[_428] - cbMtdParam._m0[10u].z) * _396) + cbMtdParam._m0[10u].z) * _311.z) - _470) * _299) + _470;
    float _486 = exp2(log2(_283) * cbMtdParam._m0[21u].y);
    vec4 _498 = texture(sampler2D(P_ACParts_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _531 = texture(sampler2D(P_ACParts_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _542 = cbMtdParam._m0[18u].x * _531.x;
    float _543 = cbMtdParam._m0[18u].y * _531.y;
    float _544 = cbMtdParam._m0[18u].z * _531.z;
    vec4 _565 = texture(sampler2D(P_ACParts_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _573 = ((((((((cbMtdParam._m0[17u].x * _498.x) - _477) * _486) + _477) - _542) * _293) + _542) * 4.55000019073486328125) * _565.x;
    float _575 = ((((((((cbMtdParam._m0[17u].y * _498.y) - _478) * _486) + _478) - _543) * _293) + _543) * 4.55000019073486328125) * _565.y;
    float _577 = ((((((((cbMtdParam._m0[17u].z * _498.z) - _479) * _486) + _479) - _544) * _293) + _544) * 4.55000019073486328125) * _565.z;
    float _578 = _565.w * _311.w;
    vec4 _590 = texture(sampler2D(P_ACParts_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _592 = _590.x;
    float _610 = (((1.0 - _592) + texture(sampler2D(P_ACParts_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x) * _293) + _592;
    float _629 = (((texture(sampler2D(P_ACParts_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x - _610) + cbMtdParam._m0[20u].z) * _299) + _610;
    float _652 = (((texture(sampler2D(P_ACParts_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - _629) + cbMtdParam._m0[22u].y) * _486) + _629;
    vec4 _664 = texture(sampler2D(P_ACParts_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _682 = texture(sampler2D(P_ACParts_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _684 = _682.x;
    float _685 = _682.y;
    float _688 = cbMtdParam._m0[19u].x + _682.z;
    float _691 = (((cbMtdParam._m0[20u].x + _664.z) - _688) * _299) + _688;
    vec4 _703 = texture(sampler2D(P_ACParts_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    vec4 _727 = texture(sampler2D(P_ACParts_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _729 = _727.x;
    float _730 = _727.y;
    float _733 = cbMtdParam._m0[21u].x + _727.z;
    float _736 = ((((_282 * 2.0) * ((((_703.z - _691) + cbMtdParam._m0[22u].x) * _486) + _691)) - _733) * _293) + _733;
    float _747 = ((_664.x - _684) * _299) + _684;
    float _748 = ((_664.y - _685) * _299) + _685;
    float _763 = (((((((_703.x - _747) * _486) + _747) - _729) * _293) + _729) * 2.0) + (-1.0);
    float _764 = (((((((_703.y - _748) * _486) + _748) - _730) * _293) + _730) * 2.0) + (-1.0);
    float _765 = dot(vec2(_763, _764), vec2(_763, _764));
    float _4117 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _770 = sqrt(1.0 - (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))));
    float _773 = _763 + (cbMtdParam._m0[21u].w * ((_277.x * 2.0) + (-1.0)));
    float _774 = _764 + (cbMtdParam._m0[21u].w * ((_277.y * 2.0) + (-1.0)));
    float _777 = fma(_770, _257, fma(_774, _249 * TANGENT.x, (_235 * _227) * _773));
    float _780 = fma(_770, _258, fma(_774, _249 * TANGENT.y, (_235 * _228) * _773));
    float _783 = fma(_770, _259, fma(_774, _249 * TANGENT.z, (_235 * _229) * _773));
    float _787 = inversesqrt(dot(vec3(_777, _780, _783), vec3(_777, _780, _783)));
    float _788 = _787 * _777;
    float _789 = _787 * _780;
    float _790 = _787 * _783;
    float _4128 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _791 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    float _4139 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _792 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _4150 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _4161 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _4172 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _4183 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _796 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _812 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _852 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _862 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _852);
    float _863 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _852);
    float _864 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _852);
    float _868 = inversesqrt(dot(vec3(_862, _863, _864), vec3(_862, _863, _864)));
    float _869 = _862 * _868;
    float _870 = _863 * _868;
    float _871 = _864 * _868;
    vec4 _876 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _878 = _876.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1098 = sqrt(((_862 * _862) + (_863 * _863)) + (_864 * _864));
        float _1104 = (cbMatDynParam._m0[5u].x * _1098) + cbMatDynParam._m0[5u].y;
        float _4194 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1109 = (cbMatDynParam._m0[5u].z * _1098) + cbMatDynParam._m0[5u].w;
        float _4205 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) - _1105)) + _1105) < ((_878 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _889 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _890 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _892 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _894 = _892.w;
    float _912 = fma(_790, cbSceneParam._m0[5u].z, fma(_789, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _788));
    float _915 = fma(_790, cbSceneParam._m0[6u].z, fma(_789, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _788));
    float _918 = fma(_790, cbSceneParam._m0[7u].z, fma(_789, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _788));
    vec4 _920 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _931 = (((_920.y - _792) + (_920.w * _792)) * cbMtdParam._m0[3u].x) + _792;
    uint _944 = uint(roundEven(NORMAL.w)) * 13u;
    uint _945 = _944 + 9u;
    uint _946 = _945 + uint(cbMatDynParam._m0[0u].w);
    float _952 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) * cbInstanceData._m0[_946].x;
    float _953 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)))) * cbInstanceData._m0[_946].y;
    float _954 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0)))) * cbInstanceData._m0[_946].z;
    float _4216 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _955 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
    float _4227 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _956 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _4238 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _957 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    vec4 _958 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _963 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _974 = (((_963.x - _796) + (_963.w * _796)) * cbMtdParam._m0[3u].x) + _796;
    float _987 = (cbMtdParam._m0[3u].x * (((_955 * _894) - _955) + _958.x)) + _955;
    float _988 = (cbMtdParam._m0[3u].x * (((_956 * _894) - _956) + _958.y)) + _956;
    float _989 = (cbMtdParam._m0[3u].x * (((_957 * _894) - _957) + _958.z)) + _957;
    float _990 = 1.0 - _974;
    float _991 = _990 * _987;
    float _992 = _990 * _988;
    float _993 = _990 * _989;
    float _998 = (_987 + (-0.039999999105930328369140625)) * _974;
    float _999 = (_988 + (-0.039999999105930328369140625)) * _974;
    float _1000 = (_989 + (-0.039999999105930328369140625)) * _974;
    float _1001 = _998 + 0.039999999105930328369140625;
    float _1003 = _999 + 0.039999999105930328369140625;
    float _1004 = _1000 + 0.039999999105930328369140625;
    vec4 _1013 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _889, cbSceneParam._m0[86u].y * _890));
    float _1016 = _1013.x * TEXCOORD_4;
    float _1017 = dot(vec3(_788, _789, _790), vec3(_869, _870, _871));
    float _1020 = _1017 * 2.0;
    float _1024 = (_1020 * _788) - _869;
    float _1025 = (_1020 * _789) - _870;
    float _1026 = (_1020 * _790) - _871;
    float _1030 = abs(dot(vec3(_869, _870, _871), vec3(_788, _789, _790)));
    float _4249 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _1032 = sqrt(_931);
    float _1044 = exp2((_1032 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1032 * 3.0));
    float _1050 = (1.0 - _1044) * ((_1032 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1051 = _1044 * _1032;
    float _1079 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1083 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1087 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1418;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1143 = fma(_1087, cbModelParam._m0[26u].z, fma(_1083, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1079));
        float _1147 = fma(_1087, cbModelParam._m0[27u].z, fma(_1083, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1079));
        float _1151 = fma(_1087, cbModelParam._m0[28u].z, fma(_1083, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1079));
        float _1176 = _1079 + _788;
        float _1177 = _1083 + _789;
        float _1178 = _1087 + _790;
        float _1188 = fma(_1178, cbModelParam._m0[26u].z, fma(_1177, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1176)) - _1143;
        float _1189 = fma(_1178, cbModelParam._m0[27u].z, fma(_1177, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1176)) - _1147;
        float _1190 = fma(_1178, cbModelParam._m0[28u].z, fma(_1177, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1176)) - _1151;
        float _1194 = inversesqrt(dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190)));
        float _1207 = ((_1194 * _1188) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1143 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1208 = ((_1194 * _1189) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1147 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1209 = ((_1194 * _1190) / cbModelParam._m0[34u].z) + ((((((_1151 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1207, _1208, _1209), 0.0);
        vec4 _1219 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1207, _1208, _1209), 0.0);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1207, _1208, _1209), 0.0);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1207, _1208, _1209), 0.0);
        float _1246 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1247 = _1246 * (_1212.x + (-0.5));
        float _1248 = _1246 * (_1212.y + (-0.5));
        float _1249 = _1246 * (_1212.z + (-0.5));
        float _1256 = exp2((_1219.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1219.x + (-0.5));
        float _1258 = _1256 * (_1219.y + (-0.5));
        float _1259 = _1256 * (_1219.z + (-0.5));
        float _1266 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1226.x + (-0.5));
        float _1268 = _1266 * (_1226.y + (-0.5));
        float _1269 = _1266 * (_1226.z + (-0.5));
        float _1276 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1233.x + (-0.5));
        float _1278 = _1276 * (_1233.y + (-0.5));
        float _1279 = _1276 * (_1233.z + (-0.5));
        float _1280 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1281 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1282 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1283 = _1247 * 0.5;
        float _1284 = _1257 * 0.5;
        float _1285 = _1267 * 0.5;
        float _1286 = dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285));
        float _1291 = (_1286 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1286);
        float _1300 = (dot(vec3(_788, _789, _790), vec3(_1291 * _1283, _1291 * _1284, _1291 * _1285)) + 1.0) * 0.5;
        float _4275 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1310 = sqrt(((_1284 * _1284) + (_1283 * _1283)) + (_1285 * _1285)) / (_1280 + 9.9999997473787516355514526367188e-06);
        float _4286 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1312 = _1311 * 2.0;
        float _1316 = (1.0 - _1311) / (_1311 + 1.0);
        float _4297 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1326 = ((((1.0 - _1317) * (_1312 + 2.0)) * exp2(log2(isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_1312 + 1.0))) + _1317) * _1280;
        float _1327 = _1248 * 0.5;
        float _1328 = _1258 * 0.5;
        float _1329 = _1268 * 0.5;
        float _1330 = dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329));
        float _1335 = (_1330 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1330);
        float _1343 = (dot(vec3(_788, _789, _790), vec3(_1335 * _1327, _1335 * _1328, _1335 * _1329)) + 1.0) * 0.5;
        float _4308 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1352 = sqrt(((_1328 * _1328) + (_1327 * _1327)) + (_1329 * _1329)) / (_1281 + 9.9999997473787516355514526367188e-06);
        float _4319 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _1354 = _1353 * 2.0;
        float _1358 = (1.0 - _1353) / (_1353 + 1.0);
        float _4330 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1368 = ((((1.0 - _1359) * (_1354 + 2.0)) * exp2(log2(isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_1354 + 1.0))) + _1359) * _1281;
        float _1369 = _1249 * 0.5;
        float _1370 = _1259 * 0.5;
        float _1371 = _1269 * 0.5;
        float _1372 = dot(vec3(_1369, _1370, _1371), vec3(_1369, _1370, _1371));
        float _1377 = (_1372 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1372);
        float _1385 = (dot(vec3(_788, _789, _790), vec3(_1377 * _1369, _1377 * _1370, _1377 * _1371)) + 1.0) * 0.5;
        float _4341 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1394 = sqrt(((_1370 * _1370) + (_1369 * _1369)) + (_1371 * _1371)) / (_1282 + 9.9999997473787516355514526367188e-06);
        float _4352 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _1396 = _1395 * 2.0;
        float _1400 = (1.0 - _1395) / (_1395 + 1.0);
        float _4363 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _1410 = ((((1.0 - _1401) * (_1396 + 2.0)) * exp2(log2(isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_1396 + 1.0))) + _1401) * _1282;
        _1418 = _1249;
        _1420 = _1248;
        _1421 = _1247;
        _1422 = _1259;
        _1423 = _1258;
        _1424 = _1257;
        _1425 = _1269;
        _1426 = _1268;
        _1427 = _1267;
        _1428 = _1282;
        _1429 = _1281;
        _1430 = _1280;
        _1431 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)));
        _1432 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)));
        _1433 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)));
    }
    else
    {
        _1418 = _1419;
        _1420 = _1419;
        _1421 = _1419;
        _1422 = _1419;
        _1423 = _1419;
        _1424 = _1419;
        _1425 = _1419;
        _1426 = _1419;
        _1427 = _1419;
        _1428 = _1419;
        _1429 = _1419;
        _1430 = _1419;
        _1431 = 0.0;
        _1432 = 0.0;
        _1433 = 0.0;
    }
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1462 = fma(_1087, cbModelParam._m0[30u].z, fma(_1083, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1079));
        float _1466 = fma(_1087, cbModelParam._m0[31u].z, fma(_1083, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1079));
        float _1470 = fma(_1087, cbModelParam._m0[32u].z, fma(_1083, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1079));
        float _1493 = _1079 + _788;
        float _1494 = _1083 + _789;
        float _1495 = _1087 + _790;
        float _1505 = fma(_1495, cbModelParam._m0[30u].z, fma(_1494, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1493)) - _1462;
        float _1506 = fma(_1495, cbModelParam._m0[31u].z, fma(_1494, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1493)) - _1466;
        float _1507 = fma(_1495, cbModelParam._m0[32u].z, fma(_1494, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1493)) - _1470;
        float _1511 = inversesqrt(dot(vec3(_1505, _1506, _1507), vec3(_1505, _1506, _1507)));
        float _1524 = ((_1511 * _1505) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1462 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1525 = ((_1511 * _1506) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1466 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1526 = ((_1511 * _1507) / cbModelParam._m0[35u].z) + ((((((_1470 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1528 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1524, _1525, _1526), 0.0);
        vec4 _1535 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1524, _1525, _1526), 0.0);
        vec4 _1542 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1524, _1525, _1526), 0.0);
        vec4 _1549 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1524, _1525, _1526), 0.0);
        float _1561 = exp2((_1528.w + (-0.5)) * 20.0) * 2.0;
        float _1562 = _1561 * (_1528.x + (-0.5));
        float _1563 = _1561 * (_1528.y + (-0.5));
        float _1564 = _1561 * (_1528.z + (-0.5));
        float _1571 = exp2((_1535.w + (-0.5)) * 20.0) * 2.0;
        float _1572 = _1571 * (_1535.x + (-0.5));
        float _1573 = _1571 * (_1535.y + (-0.5));
        float _1574 = _1571 * (_1535.z + (-0.5));
        float _1581 = exp2((_1542.w + (-0.5)) * 20.0) * 2.0;
        float _1582 = _1581 * (_1542.x + (-0.5));
        float _1583 = _1581 * (_1542.y + (-0.5));
        float _1584 = _1581 * (_1542.z + (-0.5));
        float _1591 = exp2((_1549.w + (-0.5)) * 20.0) * 2.0;
        float _1592 = _1591 * (_1549.x + (-0.5));
        float _1593 = _1591 * (_1549.y + (-0.5));
        float _1594 = _1591 * (_1549.z + (-0.5));
        float _1595 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1596 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1597 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1598 = _1562 * 0.5;
        float _1599 = _1572 * 0.5;
        float _1600 = _1582 * 0.5;
        float _1601 = dot(vec3(_1598, _1599, _1600), vec3(_1598, _1599, _1600));
        float _1606 = (_1601 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1601);
        float _1614 = (dot(vec3(_788, _789, _790), vec3(_1606 * _1598, _1606 * _1599, _1606 * _1600)) + 1.0) * 0.5;
        float _4404 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1623 = sqrt(((_1599 * _1599) + (_1598 * _1598)) + (_1600 * _1600)) / (_1595 + 9.9999997473787516355514526367188e-06);
        float _4415 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _1625 = _1624 * 2.0;
        float _1629 = (1.0 - _1624) / (_1624 + 1.0);
        float _4426 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _1639 = ((((1.0 - _1630) * (_1625 + 2.0)) * exp2(log2(isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_1625 + 1.0))) + _1630) * _1595;
        float _1640 = _1563 * 0.5;
        float _1641 = _1573 * 0.5;
        float _1642 = _1583 * 0.5;
        float _1643 = dot(vec3(_1640, _1641, _1642), vec3(_1640, _1641, _1642));
        float _1648 = (_1643 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1643);
        float _1656 = (dot(vec3(_788, _789, _790), vec3(_1648 * _1640, _1648 * _1641, _1648 * _1642)) + 1.0) * 0.5;
        float _4437 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1665 = sqrt(((_1641 * _1641) + (_1640 * _1640)) + (_1642 * _1642)) / (_1596 + 9.9999997473787516355514526367188e-06);
        float _4448 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _1667 = _1666 * 2.0;
        float _1671 = (1.0 - _1666) / (_1666 + 1.0);
        float _4459 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1672 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _1681 = ((((1.0 - _1672) * (_1667 + 2.0)) * exp2(log2(isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_1667 + 1.0))) + _1672) * _1596;
        float _1682 = _1564 * 0.5;
        float _1683 = _1574 * 0.5;
        float _1684 = _1584 * 0.5;
        float _1685 = dot(vec3(_1682, _1683, _1684), vec3(_1682, _1683, _1684));
        float _1690 = (_1685 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1685);
        float _1698 = (dot(vec3(_788, _789, _790), vec3(_1690 * _1682, _1690 * _1683, _1690 * _1684)) + 1.0) * 0.5;
        float _4470 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1707 = sqrt(((_1683 * _1683) + (_1682 * _1682)) + (_1684 * _1684)) / (_1597 + 9.9999997473787516355514526367188e-06);
        float _4481 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1708 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
        float _1709 = _1708 * 2.0;
        float _1713 = (1.0 - _1708) / (_1708 + 1.0);
        float _4492 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1714 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _1723 = ((((1.0 - _1714) * (_1709 + 2.0)) * exp2(log2(isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_1709 + 1.0))) + _1714) * _1597;
        _1731 = _1564;
        _1732 = _1563;
        _1733 = _1562;
        _1734 = _1574;
        _1735 = _1573;
        _1736 = _1572;
        _1737 = _1584;
        _1738 = _1583;
        _1739 = _1582;
        _1740 = _1597;
        _1741 = _1596;
        _1742 = _1595;
        _1743 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)));
        _1744 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)));
        _1745 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0)));
    }
    else
    {
        _1731 = _1419;
        _1732 = _1419;
        _1733 = _1419;
        _1734 = _1419;
        _1735 = _1419;
        _1736 = _1419;
        _1737 = _1419;
        _1738 = _1419;
        _1739 = _1419;
        _1740 = _1419;
        _1741 = _1419;
        _1742 = _1419;
        _1743 = 0.0;
        _1744 = 0.0;
        _1745 = 0.0;
    }
    float _1755 = (cbModelParam._m0[1u].x * (_1743 - _1431)) + _1431;
    float _1756 = (cbModelParam._m0[1u].x * (_1744 - _1432)) + _1432;
    float _1757 = (cbModelParam._m0[1u].x * (_1745 - _1433)) + _1433;
    float _1778 = fma(_1757, cbSceneParam._m0[89u].z, fma(_1756, cbSceneParam._m0[89u].y, _1755 * cbSceneParam._m0[89u].x));
    float _1781 = fma(_1757, cbSceneParam._m0[90u].z, fma(_1756, cbSceneParam._m0[90u].y, _1755 * cbSceneParam._m0[90u].x));
    float _1784 = fma(_1757, cbSceneParam._m0[91u].z, fma(_1756, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1755));
    float _1799 = _1024 * 0.5;
    float _1800 = _1025 * 0.5;
    float _1801 = _1026 * 0.5;
    float _1802 = dot(vec4(_1799, _1800, _1801, 1.0), vec4(_1733, _1736, _1739, _1742));
    float _1805 = dot(vec4(_1799, _1800, _1801, 1.0), vec4(_1732, _1735, _1738, _1741));
    float _1808 = dot(vec4(_1799, _1800, _1801, 1.0), vec4(_1731, _1734, _1737, _1740));
    float _1842;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1815 = dot(vec4(_1799, _1800, _1801, 1.0), vec4(_1418, _1422, _1425, _1428));
        float _1819 = dot(vec4(_1799, _1800, _1801, 1.0), vec4(_1420, _1423, _1426, _1429));
        float _1823 = dot(vec4(_1799, _1800, _1801, 1.0), vec4(_1421, _1424, _1427, _1430));
        float _1830 = dot(vec4(cbModelParam._m0[39u]), vec4(_1799, _1800, _1801, 1.0));
        _1842 = dot(vec3(isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0)), isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0)), isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1830) ? 0.0 : (isnan(0.0) ? _1830 : max(0.0, _1830))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1842 = 1.0;
    }
    float _1853;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1844 = dot(vec4(cbModelParam._m0[40u]), vec4(_1799, _1800, _1801, 1.0));
        _1853 = dot(vec3(isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0)), isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0)), isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1844) ? 0.0 : (isnan(0.0) ? _1844 : max(0.0, _1844))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1853 = 1.0;
    }
    float _1857 = (_1853 * cbModelParam._m0[1u].x) + (_1842 * (1.0 - cbModelParam._m0[1u].x));
    float _1867 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _931);
    float _1868 = isnan(_1867) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1867 : min(cbModelParam._m0[25u].z, _1867));
    float _1948;
    float _1950;
    float _1952;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1915 = fma(_1087, cbModelParam._m0[13u].z, fma(_1083, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1079)) + cbModelParam._m0[13u].w;
        float _1919 = fma(_1087, cbModelParam._m0[14u].z, fma(_1083, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1079)) + cbModelParam._m0[14u].w;
        float _1923 = fma(_1087, cbModelParam._m0[15u].z, fma(_1083, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1079)) + cbModelParam._m0[15u].w;
        float _1926 = fma(_1026, cbModelParam._m0[13u].z, fma(_1025, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1024));
        float _1929 = fma(_1026, cbModelParam._m0[14u].z, fma(_1025, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1024));
        float _1932 = fma(_1026, cbModelParam._m0[15u].z, fma(_1025, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1024));
        float _1960;
        if (_1926 > 0.0)
        {
            _1960 = abs((1.0 - _1915) / _1926);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1926 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1915 + 1.0) / _1926);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1960 = frontier_phi_19_17_ladder;
        }
        float _2131;
        if (_1929 > 0.0)
        {
            _2131 = abs((1.0 - _1919) / _1929);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1929 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1919 + 1.0) / _1929);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2131 = frontier_phi_28_24_ladder;
        }
        float _2426;
        if (_1932 > 0.0)
        {
            _2426 = abs((1.0 - _1923) / _1932);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1932 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1923 + 1.0) / _1932);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2426 = frontier_phi_40_35_ladder;
        }
        float _2428 = isnan(_2131) ? _1960 : (isnan(_1960) ? _2131 : min(_1960, _2131));
        float _2429 = isnan(_2426) ? _2428 : (isnan(_2428) ? _2426 : min(_2428, _2426));
        float _2433 = (_2429 * _1926) + _1915;
        float _2434 = (_2429 * _1929) + _1919;
        float _2435 = (_2429 * _1932) + _1923;
        float _2436 = _2429 * 9.9999997473787516355514526367188e-05;
        float _2438 = (-1.0) - _2436;
        float _2440 = _2436 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2435 > _2440) || ((_2435 < _2438) || ((_2434 > _2440) || ((_2434 < _2438) || ((_2433 < _2438) || (_2433 > _2440))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2580 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2435, cbModelParam._m0[9u].z, fma(_2434, cbModelParam._m0[9u].y, _2433 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2435, cbModelParam._m0[10u].z, fma(_2434, cbModelParam._m0[10u].y, _2433 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2435, cbModelParam._m0[11u].z, fma(_2434, cbModelParam._m0[11u].y, _2433 * cbModelParam._m0[11u].x))), _1868);
            frontier_phi_18_40_ladder = _2580.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2580.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2580.x * cbModelParam._m0[1u].y;
        }
        _1948 = frontier_phi_18_40_ladder_2;
        _1950 = frontier_phi_18_40_ladder_1;
        _1952 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1936 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1024, _1025, _1026), _1868);
        _1948 = _1936.x * cbModelParam._m0[1u].y;
        _1950 = _1936.y * cbModelParam._m0[1u].y;
        _1952 = _1936.z * cbModelParam._m0[1u].y;
    }
    float _1956 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _931);
    float _1957 = isnan(_1956) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1956 : min(cbModelParam._m0[25u].w, _1956));
    float _2046;
    float _2048;
    float _2050;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2010 = fma(_1087, cbModelParam._m0[21u].z, fma(_1083, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1079)) + cbModelParam._m0[21u].w;
        float _2014 = fma(_1087, cbModelParam._m0[22u].z, fma(_1083, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1079)) + cbModelParam._m0[22u].w;
        float _2018 = fma(_1087, cbModelParam._m0[23u].z, fma(_1083, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1079)) + cbModelParam._m0[23u].w;
        float _2021 = fma(_1026, cbModelParam._m0[21u].z, fma(_1025, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1024));
        float _2024 = fma(_1026, cbModelParam._m0[22u].z, fma(_1025, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1024));
        float _2027 = fma(_1026, cbModelParam._m0[23u].z, fma(_1025, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1024));
        float _2136;
        if (_2021 > 0.0)
        {
            _2136 = abs((1.0 - _2010) / _2021);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2021 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2010 + 1.0) / _2021);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2136 = frontier_phi_30_26_ladder;
        }
        float _2453;
        if (_2024 > 0.0)
        {
            _2453 = abs((1.0 - _2014) / _2024);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2024 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2014 + 1.0) / _2024);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2453 = frontier_phi_42_37_ladder;
        }
        float _2791;
        if (_2027 > 0.0)
        {
            _2791 = abs((1.0 - _2018) / _2027);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_2027 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_2018 + 1.0) / _2027);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2791 = frontier_phi_52_49_ladder;
        }
        float _2793 = isnan(_2453) ? _2136 : (isnan(_2136) ? _2453 : min(_2136, _2453));
        float _2794 = isnan(_2791) ? _2793 : (isnan(_2793) ? _2791 : min(_2793, _2791));
        float _2798 = (_2794 * _2021) + _2010;
        float _2799 = (_2794 * _2024) + _2014;
        float _2800 = (_2794 * _2027) + _2018;
        float _2801 = _2794 * 9.9999997473787516355514526367188e-05;
        float _2802 = (-1.0) - _2801;
        float _2804 = _2801 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2800 > _2804) || ((_2800 < _2802) || ((_2799 > _2804) || ((_2799 < _2802) || ((_2798 < _2802) || (_2798 > _2804))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2922 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2800, cbModelParam._m0[17u].z, fma(_2799, cbModelParam._m0[17u].y, _2798 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2800, cbModelParam._m0[18u].z, fma(_2799, cbModelParam._m0[18u].y, _2798 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2800, cbModelParam._m0[19u].z, fma(_2799, cbModelParam._m0[19u].y, _2798 * cbModelParam._m0[19u].x))), _1957);
            frontier_phi_27_52_ladder = _2922.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2922.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2922.x * cbModelParam._m0[1u].z;
        }
        _2046 = frontier_phi_27_52_ladder_2;
        _2048 = frontier_phi_27_52_ladder_1;
        _2050 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _2030 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1024, _1025, _1026), _1957);
        _2046 = _2030.x * cbModelParam._m0[1u].z;
        _2048 = _2030.y * cbModelParam._m0[1u].z;
        _2050 = _2030.z * cbModelParam._m0[1u].z;
    }
    float _2063 = (((_1050 * _1001) + _1051) * _1016) * ((cbModelParam._m0[1u].w * (_2046 - _1948)) + _1948);
    float _2065 = (((_1050 * _1003) + _1051) * _1016) * ((cbModelParam._m0[1u].w * (_2048 - _1950)) + _1950);
    float _2067 = (((_1050 * _1004) + _1051) * _1016) * ((cbModelParam._m0[1u].w * (_2050 - _1952)) + _1952);
    float _2070 = fma(_2067, cbSceneParam._m0[89u].z, fma(_2065, cbSceneParam._m0[89u].y, _2063 * cbSceneParam._m0[89u].x));
    float _2073 = fma(_2067, cbSceneParam._m0[90u].z, fma(_2065, cbSceneParam._m0[90u].y, _2063 * cbSceneParam._m0[90u].x));
    float _2076 = fma(_2067, cbSceneParam._m0[91u].z, fma(_2065, cbSceneParam._m0[91u].y, _2063 * cbSceneParam._m0[91u].x));
    float _2110 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2114 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2118 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2122 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2123 = _2110 / _2122;
    float _2124 = _2114 / _2122;
    float _2125 = _2118 / _2122;
    float _2272;
    float _2273;
    float _2274;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2152 = ((uint(_2125 > cbSceneParam._m0[59u].y) + uint(_2125 > cbSceneParam._m0[59u].x)) + uint(_2125 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2153 = _2152 + 43u;
        uint _2161 = _2152 + 44u;
        uint _2169 = _2152 + 45u;
        uint _2177 = _2152 + 46u;
        float _2188 = fma(_2122, cbSceneParam._m0[_2153].w, fma(_2118, cbSceneParam._m0[_2153].z, fma(_2114, cbSceneParam._m0[_2153].y, _2110 * cbSceneParam._m0[_2153].x)));
        float _2192 = fma(_2122, cbSceneParam._m0[_2161].w, fma(_2118, cbSceneParam._m0[_2161].z, fma(_2114, cbSceneParam._m0[_2161].y, _2110 * cbSceneParam._m0[_2161].x)));
        float _2200 = fma(_2122, cbSceneParam._m0[_2177].w, fma(_2118, cbSceneParam._m0[_2177].z, fma(_2114, cbSceneParam._m0[_2177].y, _2110 * cbSceneParam._m0[_2177].x)));
        float _2205 = cbSceneParam._m0[33u].z * _2200;
        float _2207 = cbSceneParam._m0[33u].w * _2200;
        float _2210 = fma(_2122, cbSceneParam._m0[_2169].w, fma(_2118, cbSceneParam._m0[_2169].z, fma(_2114, cbSceneParam._m0[_2169].y, _2110 * cbSceneParam._m0[_2169].x))) / _2200;
        float _2258 = (cbSceneParam._m0[33u].x - sqrt(((_2124 * _2124) + (_2123 * _2123)) + (_2125 * _2125))) * cbSceneParam._m0[33u].y;
        float _4618 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        float _2265 = (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2205 + _2188) / _2200, (_2207 + _2192) / _2200), _2210), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2207 + _2188) / _2200, (_2192 - _2205) / _2200), _2210), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2188 - _2205) / _2200, (_2192 - _2207) / _2200), _2210), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2188 - _2207) / _2200, (_2205 + _2192) / _2200), _2210), 0.0)).x), vec4(0.25)));
        _2272 = 1.0 - (_2265 * cbSceneParam._m0[34u].x);
        _2273 = 1.0 - (_2265 * cbSceneParam._m0[34u].y);
        _2274 = 1.0 - (_2265 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2272 = 1.0;
        _2273 = 1.0;
        _2274 = 1.0;
    }
    float _2338;
    float _2340;
    float _2342;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2326 = fma(_2122, cbSceneParam._m0[63u].w, fma(_2118, cbSceneParam._m0[63u].z, fma(_2114, cbSceneParam._m0[63u].y, _2110 * cbSceneParam._m0[63u].x)));
        float _2327 = fma(_2122, cbSceneParam._m0[60u].w, fma(_2118, cbSceneParam._m0[60u].z, fma(_2114, cbSceneParam._m0[60u].y, _2110 * cbSceneParam._m0[60u].x))) / _2326;
        float _2328 = fma(_2122, cbSceneParam._m0[61u].w, fma(_2118, cbSceneParam._m0[61u].z, fma(_2114, cbSceneParam._m0[61u].y, _2110 * cbSceneParam._m0[61u].x))) / _2326;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2327 >= cbSceneParam._m0[64u].x) && (_2328 >= cbSceneParam._m0[64u].y)) && (_2327 <= cbSceneParam._m0[64u].z)) && (_2328 <= cbSceneParam._m0[64u].w))
        {
            float _2466 = fma(_2122, cbSceneParam._m0[62u].w, fma(_2118, cbSceneParam._m0[62u].z, fma(_2114, cbSceneParam._m0[62u].y, _2110 * cbSceneParam._m0[62u].x))) / _2326;
            float _2470 = isnan(cbSceneParam._m0[41u].w) ? _2466 : (isnan(_2466) ? cbSceneParam._m0[41u].w : max(_2466, cbSceneParam._m0[41u].w));
            float _2513 = (cbSceneParam._m0[33u].x - sqrt(((_2124 * _2124) + (_2123 * _2123)) + (_2125 * _2125))) * cbSceneParam._m0[33u].y;
            float _4634 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
            float _2520 = (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2327, cbSceneParam._m0[33u].w + _2328), _2470), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2327, _2328 - cbSceneParam._m0[33u].z), _2470), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2327 - cbSceneParam._m0[33u].z, _2328 - cbSceneParam._m0[33u].w), _2470), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2327 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2328), _2470), 0.0)).x), vec4(0.25)));
            float _2524 = 1.0 - (_2520 * cbSceneParam._m0[34u].x);
            float _2525 = 1.0 - (_2520 * cbSceneParam._m0[34u].y);
            float _2526 = 1.0 - (_2520 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2525) ? _2273 : (isnan(_2273) ? _2525 : min(_2273, _2525));
            frontier_phi_39_38_ladder_1 = isnan(_2524) ? _2272 : (isnan(_2272) ? _2524 : min(_2272, _2524));
            frontier_phi_39_38_ladder_2 = isnan(_2526) ? _2274 : (isnan(_2274) ? _2526 : min(_2274, _2526));
        }
        else
        {
            frontier_phi_39_38_ladder = _2273;
            frontier_phi_39_38_ladder_1 = _2272;
            frontier_phi_39_38_ladder_2 = _2274;
        }
        _2338 = frontier_phi_39_38_ladder_1;
        _2340 = frontier_phi_39_38_ladder;
        _2342 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2338 = _2272;
        _2340 = _2273;
        _2342 = _2274;
    }
    uvec4 _2347 = floatBitsToUint(cbInstanceData._m0[_944 + 5u]);
    uint _2349 = _2347.x * 14u;
    uint _2350 = _2349 + 13u;
    float _2357 = _1016 + (-1.0);
    float _2362 = (cbLight._m0[_2350].x * _2357) + 1.0;
    float _2363 = (cbLight._m0[_2350].y * _2357) + 1.0;
    float _2364 = (cbLight._m0[_2350].z * _2357) + 1.0;
    float _2365 = (cbLight._m0[_2350].w * _2357) + 1.0;
    uint _2366 = _2349 + 5u;
    float _2372 = isnan(1.0) ? _2363 : (isnan(_2363) ? 1.0 : min(_2363, 1.0));
    uint _2376 = _2349 + 4u;
    float _2385 = isnan(1.0) ? _2362 : (isnan(_2362) ? 1.0 : min(_2362, 1.0));
    uint _2389 = _2349 | 1u;
    float _2400 = dot(vec3(cbLight._m0[_2349].xyz), vec3(_788, _789, _790));
    float _2403 = dot(vec3(cbLight._m0[_2389].xyz), vec3(_788, _789, _790));
    float _4670 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _4681 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2408 = (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0))) * 0.3183098733425140380859375;
    float _2410 = (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0))) * 0.3183098733425140380859375;
    float _2417 = ((cbLight._m0[_2366].x * _2372) * _2410) + (((cbLight._m0[_2376].x * _2338) * _2385) * _2408);
    float _2418 = ((_2372 * cbLight._m0[_2366].y) * _2410) + (((cbLight._m0[_2376].y * _2340) * _2385) * _2408);
    float _2419 = ((_2372 * cbLight._m0[_2366].z) * _2410) + (((cbLight._m0[_2376].z * _2342) * _2385) * _2408);
    uvec4 _2423 = floatBitsToUint(cbLight._m0[_2349 + 12u]);
    bool _2425 = _2423.x == 0u;
    float _2527;
    float _2529;
    float _2531;
    if (_2425)
    {
        _2527 = _2417;
        _2529 = _2418;
        _2531 = _2419;
    }
    else
    {
        uint _2535 = _2349 + 6u;
        float _2551 = (dot(vec3(cbLight._m0[_2349 + 2u].xyz), vec3(_788, _789, _790)) * 0.5) + 0.5;
        float _2552 = _2551 * _2551;
        float _4692 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2553 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
        float _2554 = isnan(1.0) ? _2364 : (isnan(_2364) ? 1.0 : min(_2364, 1.0));
        _2527 = (((cbLight._m0[_2535].x * 0.3183098733425140380859375) * _2553) * _2554) + _2417;
        _2529 = (((cbLight._m0[_2535].y * 0.3183098733425140380859375) * _2553) * _2554) + _2418;
        _2531 = (((cbLight._m0[_2535].z * 0.3183098733425140380859375) * _2553) * _2554) + _2419;
    }
    bool _2534 = _2423.y == 0u;
    float _2589;
    float _2591;
    float _2593;
    if (_2534)
    {
        _2589 = _2527;
        _2591 = _2529;
        _2593 = _2531;
    }
    else
    {
        uint _2762 = _2349 + 7u;
        float _2778 = (dot(vec3(cbLight._m0[_2349 + 3u].xyz), vec3(_788, _789, _790)) * 0.5) + 0.5;
        float _2779 = _2778 * _2778;
        float _4708 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2780 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
        float _2781 = isnan(1.0) ? _2365 : (isnan(_2365) ? 1.0 : min(_2365, 1.0));
        _2589 = (((cbLight._m0[_2762].x * 0.3183098733425140380859375) * _2780) * _2781) + _2527;
        _2591 = (((cbLight._m0[_2762].y * 0.3183098733425140380859375) * _2780) * _2781) + _2529;
        _2593 = (((cbLight._m0[_2762].z * 0.3183098733425140380859375) * _2780) * _2781) + _2531;
    }
    uint _2596 = _2349 + 8u;
    float _2609 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2349].w)) * _931) * 0.949999988079071044921875);
    float _2610 = _2609 * _2609;
    float _2611 = cbLight._m0[_2349].x + _869;
    float _2612 = cbLight._m0[_2349].y + _870;
    float _2613 = cbLight._m0[_2349].z + _871;
    float _2617 = inversesqrt(dot(vec3(_2611, _2612, _2613), vec3(_2611, _2612, _2613)));
    float _2618 = _2617 * _2611;
    float _2619 = _2617 * _2612;
    float _2620 = _2617 * _2613;
    float _2621 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2349].xyz));
    float _4724 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
    float _2624 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
    float _4735 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
    float _2625 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
    float _2626 = dot(vec3(_788, _789, _790), vec3(_2618, _2619, _2620));
    float _4746 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
    float _2629 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
    float _2630 = dot(vec3(cbLight._m0[_2349].xyz), vec3(_2618, _2619, _2620));
    float _4757 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
    float _2634 = _2610 * _2610;
    float _2638 = ((_2629 * _2629) * (_2634 + (-1.0))) + 1.0;
    float _2646 = exp2(log2(1.0 - (isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0)))) * 5.0);
    float _2647 = 0.959999978542327880859375 - _998;
    float _2649 = 0.959999978542327880859375 - _999;
    float _2650 = 0.959999978542327880859375 - _1000;
    float _2657 = 1.0 - _2610;
    float _2668 = (0.5 / (((_2625 * ((_2624 * _2657) + _2610)) + 9.9999999392252902907785028219223e-09) + (((_2625 * _2657) + _2610) * _2624))) * _2624;
    float _4768 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
    float _2670 = (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (_2634 / ((_2638 * _2638) * 3.141590118408203125));
    uint _2684 = _2349 + 9u;
    float _2695 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2389].w)) * _931) * 0.949999988079071044921875);
    float _2696 = _2695 * _2695;
    float _2697 = cbLight._m0[_2389].x + _869;
    float _2698 = cbLight._m0[_2389].y + _870;
    float _2699 = cbLight._m0[_2389].z + _871;
    float _2703 = inversesqrt(dot(vec3(_2697, _2698, _2699), vec3(_2697, _2698, _2699)));
    float _2704 = _2703 * _2697;
    float _2705 = _2703 * _2698;
    float _2706 = _2703 * _2699;
    float _2707 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2389].xyz));
    float _4779 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
    float _2710 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
    float _2711 = dot(vec3(_788, _789, _790), vec3(_2704, _2705, _2706));
    float _4790 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
    float _2714 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
    float _2715 = dot(vec3(cbLight._m0[_2389].xyz), vec3(_2704, _2705, _2706));
    float _4801 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
    float _2719 = _2696 * _2696;
    float _2723 = ((_2714 * _2714) * (_2719 + (-1.0))) + 1.0;
    float _2730 = exp2(log2(1.0 - (isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0)))) * 5.0);
    float _2737 = 1.0 - _2696;
    float _2747 = (0.5 / (((_2625 * ((_2710 * _2737) + _2696)) + 9.9999999392252902907785028219223e-09) + (((_2625 * _2737) + _2696) * _2710))) * _2710;
    float _4812 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
    float _2749 = (isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0))) * (_2719 / ((_2723 * _2723) * 3.141590118408203125));
    float _2759 = (((((_2730 * _2647) + _1001) * cbLight._m0[_2684].x) * _2749) * _2372) + ((((cbLight._m0[_2596].x * _2338) * ((_2646 * _2647) + _1001)) * _2670) * _2385);
    float _2760 = (((((_2730 * _2649) + _1003) * cbLight._m0[_2684].y) * _2749) * _2372) + ((((cbLight._m0[_2596].y * _2340) * ((_2646 * _2649) + _1003)) * _2670) * _2385);
    float _2761 = (((((_2730 * _2650) + _1004) * cbLight._m0[_2684].z) * _2749) * _2372) + ((((cbLight._m0[_2596].z * _2342) * ((_2646 * _2650) + _1004)) * _2670) * _2385);
    float _2817;
    float _2819;
    float _2821;
    if (_2425)
    {
        _2817 = _2759;
        _2819 = _2760;
        _2821 = _2761;
    }
    else
    {
        uint _2823 = _2349 + 2u;
        uint _2827 = _2349 + 10u;
        float _2841 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2823].w)) * _931) * 0.949999988079071044921875);
        float _2842 = _2841 * _2841;
        float _2843 = cbLight._m0[_2823].x + _869;
        float _2844 = cbLight._m0[_2823].y + _870;
        float _2845 = cbLight._m0[_2823].z + _871;
        float _2849 = inversesqrt(dot(vec3(_2843, _2844, _2845), vec3(_2843, _2844, _2845)));
        float _2850 = _2849 * _2843;
        float _2851 = _2849 * _2844;
        float _2852 = _2849 * _2845;
        float _2853 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2823].xyz));
        float _4823 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
        float _2856 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
        float _2857 = dot(vec3(_788, _789, _790), vec3(_2850, _2851, _2852));
        float _4834 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
        float _2860 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
        float _2861 = dot(vec3(cbLight._m0[_2823].xyz), vec3(_2850, _2851, _2852));
        float _4845 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
        float _2865 = _2842 * _2842;
        float _2869 = ((_2860 * _2860) * (_2865 + (-1.0))) + 1.0;
        float _2876 = exp2(log2(1.0 - (isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0)))) * 5.0);
        float _2883 = 1.0 - _2842;
        float _2893 = (0.5 / (((_2625 * ((_2856 * _2883) + _2842)) + 9.9999999392252902907785028219223e-09) + (((_2625 * _2883) + _2842) * _2856))) * _2856;
        float _4856 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
        float _2895 = (isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0))) * (_2865 / ((_2869 * _2869) * 3.141590118408203125));
        float _2896 = isnan(1.0) ? _2364 : (isnan(_2364) ? 1.0 : min(_2364, 1.0));
        _2817 = (((((_2876 * _2647) + _1001) * cbLight._m0[_2827].x) * _2895) * _2896) + _2759;
        _2819 = (((((_2876 * _2649) + _1003) * cbLight._m0[_2827].y) * _2895) * _2896) + _2760;
        _2821 = (((((_2876 * _2650) + _1004) * cbLight._m0[_2827].z) * _2895) * _2896) + _2761;
    }
    float _2927;
    float _2929;
    float _2931;
    if (_2534)
    {
        _2927 = _2817;
        _2929 = _2819;
        _2931 = _2821;
    }
    else
    {
        uint _2938 = _2349 + 3u;
        uint _2942 = _2349 + 11u;
        float _2956 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2938].w)) * _931) * 0.949999988079071044921875);
        float _2957 = _2956 * _2956;
        float _2958 = cbLight._m0[_2938].x + _869;
        float _2959 = cbLight._m0[_2938].y + _870;
        float _2960 = cbLight._m0[_2938].z + _871;
        float _2964 = inversesqrt(dot(vec3(_2958, _2959, _2960), vec3(_2958, _2959, _2960)));
        float _2965 = _2964 * _2958;
        float _2966 = _2964 * _2959;
        float _2967 = _2964 * _2960;
        float _2968 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2938].xyz));
        float _4872 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
        float _2971 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
        float _2972 = dot(vec3(_788, _789, _790), vec3(_2965, _2966, _2967));
        float _4883 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
        float _2975 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
        float _2976 = dot(vec3(cbLight._m0[_2938].xyz), vec3(_2965, _2966, _2967));
        float _4894 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
        float _2980 = _2957 * _2957;
        float _2984 = ((_2975 * _2975) * (_2980 + (-1.0))) + 1.0;
        float _2991 = exp2(log2(1.0 - (isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0)))) * 5.0);
        float _2998 = 1.0 - _2957;
        float _3008 = (0.5 / (((_2625 * ((_2971 * _2998) + _2957)) + 9.9999999392252902907785028219223e-09) + (((_2625 * _2998) + _2957) * _2971))) * _2971;
        float _4905 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
        float _3010 = (isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0))) * (_2980 / ((_2984 * _2984) * 3.141590118408203125));
        float _3011 = isnan(1.0) ? _2365 : (isnan(_2365) ? 1.0 : min(_2365, 1.0));
        _2927 = (((((_2991 * _2647) + _1001) * cbLight._m0[_2942].x) * _3010) * _3011) + _2817;
        _2929 = (((((_2991 * _2649) + _1003) * cbLight._m0[_2942].y) * _3010) * _3011) + _2819;
        _2931 = (((((_2991 * _2650) + _1004) * cbLight._m0[_2942].z) * _3010) * _3011) + _2821;
    }
    float _3076;
    float _3078;
    float _3080;
    float _3082;
    float _3084;
    float _3086;
    if (_2347.y == 0u)
    {
        uvec4 _3032 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3033 = _3032.x;
        uint _3044 = uint((float(_3032.y) * floor(float(uint(cbSceneParam._m0[85u].y * _890) / _3033))) + floor(float(uint(cbSceneParam._m0[85u].x * _889) / _3033)));
        float _3054 = (log2(_2125 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3055 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
        uint _3058 = uint(isnan(14.0) ? _3055 : (isnan(_3055) ? 14.0 : min(_3055, 14.0)));
        uvec4 _3063 = texelFetch(g_lightClusterGridBuffer, int(((_3058 << 2u) + (_3044 << 6u)) >> 2u));
        uint _3064 = _3063.x;
        uint _3065 = _3032.z;
        float _3145;
        float _3147;
        float _3149;
        float _3151;
        float _3153;
        float _3155;
        if (((((1u << ((_3065 >> 4u) & 15u)) + 4294967295u) & _3064) == 0u) || ((_3065 & 240u) == 0u))
        {
            _3145 = 0.0;
            _3147 = 0.0;
            _3149 = 0.0;
            _3151 = 0.0;
            _3153 = 0.0;
            _3155 = 0.0;
        }
        else
        {
            float _3146;
            float _3148;
            float _3150;
            float _3152;
            float _3154;
            float _3156;
            float _3297 = 0.0;
            float _3298 = 0.0;
            float _3299 = 0.0;
            float _3300 = 0.0;
            float _3301 = 0.0;
            float _3302 = 0.0;
            uint _3303 = 0u;
            uint _3312;
            bool _3313;
            for (;;)
            {
                _3312 = texelFetch(g_lightClassification, int((((_3058 << 5u) + (_3044 << 9u)) + (_3303 << 2u)) >> 2u)).x;
                _3313 = _3312 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3313)
                {
                    frontier_phi_73_pred = _3302;
                    frontier_phi_73_pred_1 = _3301;
                    frontier_phi_73_pred_2 = _3300;
                    frontier_phi_73_pred_3 = _3299;
                    frontier_phi_73_pred_4 = _3298;
                    frontier_phi_73_pred_5 = _3297;
                }
                else
                {
                    float _3442;
                    float _3443;
                    float _3444;
                    float _3445;
                    float _3446;
                    float _3447;
                    uint _3448;
                    _3442 = _3297;
                    _3443 = _3298;
                    _3444 = _3299;
                    _3445 = _3300;
                    _3446 = _3301;
                    _3447 = _3302;
                    _3448 = _3312;
                    float _3369;
                    float _3370;
                    float _3371;
                    float _3372;
                    float _3373;
                    float _3374;
                    for (;;)
                    {
                        uint _3452 = uint(findLSB(_3448)) + (_3303 << 5u);
                        uint _3449 = (_3448 + 4294967295u) & _3448;
                        uint _3454 = _3452 * 48u;
                        vec4 _3468 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3454)).x, texelFetch(g_PointLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3454 + 3u)).x));
                        uint _3474 = (_3452 * 48u) + 4u;
                        vec4 _3487 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3474)).x, texelFetch(g_PointLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3474 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3474 + 3u)).x));
                        uint _3493 = (_3452 * 48u) + 8u;
                        vec3 _3504 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3493)).x, texelFetch(g_PointLightRenderingBuffer, int(_3493 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3493 + 2u)).x));
                        float _3508 = _3468.x - _2123;
                        float _3509 = _3468.y - _2124;
                        float _3510 = _3468.z - _2125;
                        float _3511 = dot(vec3(_3508, _3509, _3510), vec3(_3508, _3509, _3510));
                        float _3514 = inversesqrt(_3511);
                        float _3515 = _3514 * _3508;
                        float _3516 = _3514 * _3509;
                        float _3517 = _3514 * _3510;
                        float _3518 = dot(vec3(_912, _915, _918), vec3(_3515, _3516, _3517));
                        float _3523 = 1.0 - (_3511 * _3468.w);
                        float _4931 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                        float _3524 = isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0));
                        float _3525 = sqrt(_3511) * _3487.w;
                        float _3528 = 1.39999997615814208984375 / (_3525 + 1.39999997615814208984375);
                        float _3529 = _3528 * _3528;
                        float _3532 = ((1.0 - _3529) * _3518) + _3529;
                        float _3535 = _3525 * _3525;
                        float _3539 = ((isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0))) * _3524) / ((_3535 * 0.699999988079071044921875) + 1.0);
                        float _3543 = (-0.0) - _2123;
                        float _3544 = (-0.0) - _2124;
                        float _3545 = (-0.0) - _2125;
                        float _3549 = inversesqrt(dot(vec3(_3543, _3544, _3545), vec3(_3543, _3544, _3545)));
                        float _3550 = _3549 * _3543;
                        float _3551 = _3549 * _3544;
                        float _3552 = _3549 * _3545;
                        float _3559 = exp2(log2(1.0 / ((_3535 * 3.5) + 5.0)) * 0.25);
                        float _3560 = 1.0 - _1032;
                        float _3567 = sqrt(1.0 - ((1.0 - (_3560 * _3560)) * (1.0 - (_3559 * _3559))));
                        float _3568 = _3567 * _3567;
                        float _3569 = _3568 * _3568;
                        float _3570 = _3550 + _3515;
                        float _3571 = _3551 + _3516;
                        float _3572 = _3552 + _3517;
                        float _3576 = inversesqrt(dot(vec3(_3570, _3571, _3572), vec3(_3570, _3571, _3572)));
                        float _3580 = dot(vec3(_912, _915, _918), vec3(_3550, _3551, _3552));
                        float _4947 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                        float _3583 = isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0));
                        float _3584 = dot(vec3(_912, _915, _918), vec3(_3576 * _3570, _3576 * _3571, _3576 * _3572));
                        float _4958 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                        float _3587 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
                        float _3591 = ((_3587 * _3587) * (_3569 + (-1.0))) + 1.0;
                        float _3592 = _3528 * _3568;
                        float _3593 = _3592 * _3592;
                        float _3596 = ((1.0 - _3593) * _3518) + _3593;
                        float _4969 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                        float _3597 = isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0));
                        float _3598 = 1.0 - _3568;
                        float _3608 = (0.5 / (((_3597 * ((_3583 * _3598) + _3568)) + 9.9999999392252902907785028219223e-09) + (((_3597 * _3598) + _3568) * _3583))) * _3597;
                        float _4980 = isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0));
                        float _3619 = (((_3569 * 3.1415927410125732421875) * (isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0)))) / ((_3591 * _3591) * ((_3535 * 2.1991131305694580078125) + 3.141590118408203125))) * _3524;
                        _3372 = (_3539 * _3487.x) + _3445;
                        _3373 = (_3539 * _3487.y) + _3446;
                        _3374 = (_3539 * _3487.z) + _3447;
                        _3369 = (_3619 * _3504.x) + _3442;
                        _3370 = (_3619 * _3504.y) + _3443;
                        _3371 = (_3619 * _3504.z) + _3444;
                        if (_3449 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3442 = _3369;
                            _3443 = _3370;
                            _3444 = _3371;
                            _3445 = _3372;
                            _3446 = _3373;
                            _3447 = _3374;
                            _3448 = _3449;
                        }
                    }
                    frontier_phi_73_pred = _3374;
                    frontier_phi_73_pred_1 = _3373;
                    frontier_phi_73_pred_2 = _3372;
                    frontier_phi_73_pred_3 = _3371;
                    frontier_phi_73_pred_4 = _3370;
                    frontier_phi_73_pred_5 = _3369;
                }
                _3156 = frontier_phi_73_pred;
                _3154 = frontier_phi_73_pred_1;
                _3152 = frontier_phi_73_pred_2;
                _3150 = frontier_phi_73_pred_3;
                _3148 = frontier_phi_73_pred_4;
                _3146 = frontier_phi_73_pred_5;
                uint _3304 = _3303 + 1u;
                if (_3304 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3297 = _3146;
                    _3298 = _3148;
                    _3299 = _3150;
                    _3300 = _3152;
                    _3301 = _3154;
                    _3302 = _3156;
                    _3303 = _3304;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3145 = _3146;
            _3147 = _3148;
            _3149 = _3150;
            _3151 = _3152;
            _3153 = _3154;
            _3155 = _3156;
        }
        uvec4 _3159 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3160 = _3159.z;
        uint _3162 = (_3160 >> 8u) & 15u;
        float _3265;
        float _3267;
        float _3269;
        float _3271;
        float _3273;
        float _3275;
        if (((4294967295u << _3162) & _3064) == 0u)
        {
            _3265 = _3145;
            _3267 = _3147;
            _3269 = _3149;
            _3271 = _3151;
            _3273 = _3153;
            _3275 = _3155;
        }
        else
        {
            float _3290 = inversesqrt(dot(vec3(_2123, _2124, _2125), vec3(_2123, _2124, _2125)));
            float _3291 = _3290 * _2123;
            float _3292 = _3290 * _2124;
            float _3293 = _3290 * _2125;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3162 < ((_3160 >> 12u) & 15u))
            {
                float _3266;
                float _3268;
                float _3270;
                float _3272;
                float _3274;
                float _3276;
                float _3425 = _3145;
                float _3426 = _3147;
                float _3427 = _3149;
                float _3428 = _3151;
                float _3429 = _3153;
                float _3430 = _3155;
                uint _3431 = _3162;
                uint _3440;
                bool _3441;
                for (;;)
                {
                    _3440 = texelFetch(g_lightClassification, int((((_3058 << 5u) + (_3044 << 9u)) + (_3431 << 2u)) >> 2u)).x;
                    _3441 = _3440 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3441)
                    {
                        frontier_phi_84_pred = _3429;
                        frontier_phi_84_pred_1 = _3428;
                        frontier_phi_84_pred_2 = _3427;
                        frontier_phi_84_pred_3 = _3426;
                        frontier_phi_84_pred_4 = _3425;
                        frontier_phi_84_pred_5 = _3430;
                    }
                    else
                    {
                        float _3633;
                        float _3634;
                        float _3635;
                        float _3636;
                        float _3637;
                        float _3638;
                        float _3927;
                        float _3928;
                        float _3929;
                        float _3930;
                        float _3931;
                        float _3932;
                        float _3646 = _3425;
                        float _3647 = _3426;
                        float _3648 = _3427;
                        float _3649 = _3428;
                        float _3650 = _3429;
                        float _3651 = _3430;
                        uint _3652 = _3440;
                        uint _3653;
                        vec4 _3678;
                        float _3679;
                        vec4 _3694;
                        vec3 _3706;
                        vec4 _3721;
                        vec4 _3736;
                        float _3783;
                        bool _3784;
                        for (;;)
                        {
                            uint _3663 = ((_3431 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3652));
                            _3653 = (_3652 + 4294967295u) & _3652;
                            uint _3665 = _3663 * 40u;
                            _3678 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3665)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 3u)).x));
                            _3679 = _3678.w;
                            uint _3681 = (_3663 * 40u) + 4u;
                            _3694 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3681)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 3u)).x));
                            uint _3696 = (_3663 * 40u) + 8u;
                            _3706 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3696)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 2u)).x));
                            uint _3708 = (_3663 * 40u) + 16u;
                            _3721 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3708)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 3u)).x));
                            uint _3723 = (_3663 * 40u) + 20u;
                            _3736 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3723)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 3u)).x));
                            uint _3739 = (_3663 * 40u) + 24u;
                            vec4 _3752 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3739)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3739 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3739 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3739 + 3u)).x));
                            uint _3758 = (_3663 * 40u) + 28u;
                            vec4 _3771 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3758)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 3u)).x));
                            _3783 = fma(_2125, _3771.z, fma(_2124, _3771.y, _3771.x * _2123)) + _3771.w;
                            _3784 = !((fma(_2125, _3752.z, fma(_2124, _3752.y, _3752.x * _2123)) + _3752.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3784)
                            {
                                float _3811 = _3678.x - _2123;
                                float _3812 = _3678.y - _2124;
                                float _3813 = _3678.z - _2125;
                                float _3814 = dot(vec3(_3811, _3812, _3813), vec3(_3811, _3812, _3813));
                                float _3817 = inversesqrt(_3814);
                                float _3818 = _3817 * _3811;
                                float _3819 = _3817 * _3812;
                                float _3820 = _3817 * _3813;
                                float _3824 = 1.0 - (_3814 / (_3679 * _3679));
                                float _4991 = isnan(0.0) ? _3824 : (isnan(_3824) ? 0.0 : max(_3824, 0.0));
                                float _3825 = isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0));
                                float _3829 = sqrt(_3814) * _3694.w;
                                float _3831 = 1.39999997615814208984375 / (_3829 + 1.39999997615814208984375);
                                float _3832 = _3831 * _3831;
                                float _3835 = ((1.0 - _3832) * dot(vec3(_3818, _3819, _3820), vec3(_912, _915, _918))) + _3832;
                                float _3838 = _3829 * _3829;
                                float _3842 = (fma(_2125, _3721.z, fma(_2124, _3721.y, _3721.x * _2123)) + _3721.w) / _3783;
                                float _3843 = (fma(_2125, _3736.z, fma(_2124, _3736.y, _3736.x * _2123)) + _3736.w) / _3783;
                                float _3847 = 1.0 - dot(vec2(_3842, _3843), vec2(_3842, _3843));
                                float _5007 = isnan(0.0) ? _3847 : (isnan(_3847) ? 0.0 : max(_3847, 0.0));
                                float _3848 = isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0));
                                float _3849 = _3848 * (((isnan(0.0) ? _3835 : (isnan(_3835) ? 0.0 : max(_3835, 0.0))) * _3825) / ((_3838 * 0.699999988079071044921875) + 1.0));
                                float _3861 = exp2(log2(1.0 / ((_3838 * 3.5) + 5.0)) * 0.25);
                                float _3862 = 1.0 - _1032;
                                float _3869 = sqrt(1.0 - ((1.0 - (_3862 * _3862)) * (1.0 - (_3861 * _3861))));
                                float _3870 = _3869 * _3869;
                                float _3871 = _3870 * _3870;
                                float _3872 = _3818 - _3291;
                                float _3873 = _3819 - _3292;
                                float _3874 = _3820 - _3293;
                                float _3878 = inversesqrt(dot(vec3(_3872, _3873, _3874), vec3(_3872, _3873, _3874)));
                                float _3882 = dot(vec3(_912, _915, _918), vec3((-0.0) - _3291, (-0.0) - _3292, (-0.0) - _3293));
                                float _5018 = isnan(0.0) ? _3882 : (isnan(_3882) ? 0.0 : max(_3882, 0.0));
                                float _3885 = isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0));
                                float _3886 = dot(vec3(_912, _915, _918), vec3(_3878 * _3872, _3878 * _3873, _3878 * _3874));
                                float _5029 = isnan(0.0) ? _3886 : (isnan(_3886) ? 0.0 : max(_3886, 0.0));
                                float _3889 = isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0));
                                float _3893 = ((_3889 * _3889) * (_3871 + (-1.0))) + 1.0;
                                float _3894 = _3831 * _3870;
                                float _3895 = _3894 * _3894;
                                float _3901 = ((1.0 - _3895) * dot(vec3(_912, _915, _918), vec3(_3818, _3819, _3820))) + _3895;
                                float _5040 = isnan(0.0) ? _3901 : (isnan(_3901) ? 0.0 : max(_3901, 0.0));
                                float _3902 = isnan(1.0) ? _5040 : (isnan(_5040) ? 1.0 : min(_5040, 1.0));
                                float _3903 = 1.0 - _3870;
                                float _3913 = (0.5 / (((_3902 * ((_3885 * _3903) + _3870)) + 9.9999999392252902907785028219223e-09) + (((_3902 * _3903) + _3870) * _3885))) * _3902;
                                float _5051 = isnan(0.0) ? _3913 : (isnan(_3913) ? 0.0 : max(_3913, 0.0));
                                float _3923 = (_3848 * _3825) * (((_3871 * 3.1415927410125732421875) * (isnan(1.0) ? _5051 : (isnan(_5051) ? 1.0 : min(_5051, 1.0)))) / ((_3893 * _3893) * ((_3838 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3849 * _3694.y;
                                frontier_phi_90_pred_1 = _3849 * _3694.x;
                                frontier_phi_90_pred_2 = _3923 * _3706.z;
                                frontier_phi_90_pred_3 = _3923 * _3706.y;
                                frontier_phi_90_pred_4 = _3923 * _3706.x;
                                frontier_phi_90_pred_5 = _3849 * _3694.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3931 = frontier_phi_90_pred;
                            _3930 = frontier_phi_90_pred_1;
                            _3929 = frontier_phi_90_pred_2;
                            _3928 = frontier_phi_90_pred_3;
                            _3927 = frontier_phi_90_pred_4;
                            _3932 = frontier_phi_90_pred_5;
                            _3636 = _3930 + _3649;
                            _3637 = _3931 + _3650;
                            _3638 = _3932 + _3651;
                            _3633 = _3927 + _3646;
                            _3634 = _3928 + _3647;
                            _3635 = _3929 + _3648;
                            if (_3653 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3646 = _3633;
                                _3647 = _3634;
                                _3648 = _3635;
                                _3649 = _3636;
                                _3650 = _3637;
                                _3651 = _3638;
                                _3652 = _3653;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3637;
                        frontier_phi_84_pred_1 = _3636;
                        frontier_phi_84_pred_2 = _3635;
                        frontier_phi_84_pred_3 = _3634;
                        frontier_phi_84_pred_4 = _3633;
                        frontier_phi_84_pred_5 = _3638;
                    }
                    _3274 = frontier_phi_84_pred;
                    _3272 = frontier_phi_84_pred_1;
                    _3270 = frontier_phi_84_pred_2;
                    _3268 = frontier_phi_84_pred_3;
                    _3266 = frontier_phi_84_pred_4;
                    _3276 = frontier_phi_84_pred_5;
                    uint _3432 = _3431 + 1u;
                    if (_3432 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3425 = _3266;
                        _3426 = _3268;
                        _3427 = _3270;
                        _3428 = _3272;
                        _3429 = _3274;
                        _3430 = _3276;
                        _3431 = _3432;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3276;
                frontier_phi_65_66_ladder_1 = _3272;
                frontier_phi_65_66_ladder_2 = _3274;
                frontier_phi_65_66_ladder_3 = _3268;
                frontier_phi_65_66_ladder_4 = _3266;
                frontier_phi_65_66_ladder_5 = _3270;
            }
            else
            {
                frontier_phi_65_66_ladder = _3155;
                frontier_phi_65_66_ladder_1 = _3151;
                frontier_phi_65_66_ladder_2 = _3153;
                frontier_phi_65_66_ladder_3 = _3147;
                frontier_phi_65_66_ladder_4 = _3145;
                frontier_phi_65_66_ladder_5 = _3149;
            }
            _3265 = frontier_phi_65_66_ladder_4;
            _3267 = frontier_phi_65_66_ladder_3;
            _3269 = frontier_phi_65_66_ladder_5;
            _3271 = frontier_phi_65_66_ladder_1;
            _3273 = frontier_phi_65_66_ladder_2;
            _3275 = frontier_phi_65_66_ladder;
        }
        float _3280 = isnan(1.0) ? _1016 : (isnan(_1016) ? 1.0 : min(_1016, 1.0));
        _3076 = (_3280 * _3271) + _2589;
        _3078 = (_3280 * _3273) + _2591;
        _3080 = (_3280 * _3275) + _2593;
        _3082 = ((_3265 * _1001) * _3280) + _2927;
        _3084 = ((_3267 * _1003) * _3280) + _2929;
        _3086 = ((_3269 * _1004) * _3280) + _2931;
    }
    else
    {
        _3076 = _2589;
        _3078 = _2591;
        _3080 = _2593;
        _3082 = _2927;
        _3084 = _2929;
        _3086 = _2931;
    }
    float _5067 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _5078 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _5089 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _5100 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _3104 = ((isnan(1.0) ? _5067 : (isnan(_5067) ? 1.0 : min(_5067, 1.0))) * (_3076 + ((isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))) * _1016))) + ((_3082 + ((isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0))) * _1857)) * cbPerFrame._m0[3u].x);
    float _3105 = ((isnan(1.0) ? _5078 : (isnan(_5078) ? 1.0 : min(_5078, 1.0))) * (_3078 + ((isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))) * _1016))) + ((_3084 + ((isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0))) * _1857)) * cbPerFrame._m0[3u].x);
    float _3106 = ((isnan(1.0) ? _5089 : (isnan(_5089) ? 1.0 : min(_5089, 1.0))) * (_3080 + ((isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))) * _1016))) + ((_3086 + ((isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0))) * _1857)) * cbPerFrame._m0[3u].x);
    float _3111 = cbInstanceData._m0[_944 + 6u].w * (isnan(1.0) ? _5100 : (isnan(_5100) ? 1.0 : min(_5100, 1.0)));
    float _3116 = _889 / cbSceneParam._m0[86u].x;
    float _3117 = _890 / cbSceneParam._m0[86u].y;
    vec4 _3131 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3116, _3117, (log2((isnan(cbSceneParam._m0[77u].w) ? _812 : (isnan(_812) ? cbSceneParam._m0[77u].w : min(_812, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3133 = _3131.x;
    float _3134 = _3131.y;
    float _3135 = _3131.z;
    float _3136 = _3131.w;
    float _3207;
    float _3209;
    float _3211;
    float _3213;
    if (_812 > cbSceneParam._m0[78u].w)
    {
        float _3170 = isnan(_812) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _812 : min(cbSceneParam._m0[80u].w, _812));
        float _3171 = _3170 / _812;
        float _3182 = _3171 * _862;
        float _3183 = _863 * _3171;
        float _3184 = (-0.0) - _3183;
        float _3185 = _3171 * _864;
        float _3187 = (cbSceneParam._m0[77u].w * _3184) / _3170;
        float _3188 = _3187 + cbSceneParam._m0[79u].w;
        float _3189 = cbSceneParam._m0[79u].w - _3183;
        float _3195 = sqrt(((_3182 * _3182) + (_3183 * _3183)) + (_3185 * _3185));
        float _3198 = (1.0 - (cbSceneParam._m0[77u].w / _3170)) * _3195;
        float _3203 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3205 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3382;
        if (abs((_3184 - _3187) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3382 = ((((_3188 > 0.0) ? exp2(_3203 * _3188) : (2.0 - exp2(_3205 * _3188))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3198;
        }
        else
        {
            float _3326 = 1.0 / cbSceneParam._m0[80u].x;
            float _3327 = isnan(_3189) ? _3188 : (isnan(_3188) ? _3189 : max(_3188, _3189));
            float _3328 = isnan(_3189) ? _3188 : (isnan(_3188) ? _3189 : min(_3188, _3189));
            float _3337 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : min(_3327, 0.0));
            float _3338 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : min(_3328, 0.0));
            _3382 = ((abs(_3195 / _3184) * cbSceneParam._m0[80u].y) * ((((_3337 - _3338) * 2.0) - ((exp2(_3203 * (isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0)))) - exp2(_3203 * (isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0))))) * _3326)) - ((exp2(_3205 * _3337) - exp2(_3205 * _3338)) * _3326))) + (_3198 * cbSceneParam._m0[80u].z);
        }
        vec4 _3384 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3116, _3117, 1.0), 0.0);
        float _3393 = exp2((_3382 * (-1.44269502162933349609375)) * (1.0 - _3384.w));
        float _3394 = log2(_3393);
        float _3410 = log2(_3136);
        _3207 = (exp2(_3410 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3394 * cbSceneParam._m0[78u].x)) * _3384.x) / cbSceneParam._m0[78u].x)) + _3133;
        _3209 = (exp2(_3410 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3394 * cbSceneParam._m0[78u].y)) * _3384.y) / cbSceneParam._m0[78u].y)) + _3134;
        _3211 = (exp2(_3410 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3394 * cbSceneParam._m0[78u].z)) * _3384.z) / cbSceneParam._m0[78u].z)) + _3135;
        _3213 = _3393 * _3136;
    }
    else
    {
        _3207 = _3133;
        _3209 = _3134;
        _3211 = _3135;
        _3213 = _3136;
    }
    bool _3420;
    vec4 _3223;
    vec4 _3245;
    float _3247;
    float _3251;
    float _3252;
    float _3253;
    float _3254;
    bool _3264;
    for (;;)
    {
        _3223 = cbMatDynParam._m0[0u];
        float _3225 = roundEven(_3223.y);
        bool _3226 = _3225 == 3.0;
        float _3227 = log2(_3213);
        float _3234 = exp2(_3227 * cbSceneParam._m0[78u].x) * _3104;
        float _3235 = exp2(_3227 * cbSceneParam._m0[78u].y) * _3105;
        float _3236 = exp2(_3227 * cbSceneParam._m0[78u].z) * _3106;
        float _3243 = _878 + (-0.5);
        _3245 = cbMtdParam._m0[1u];
        _3247 = _3245.y * _3243;
        float _3250 = (_3225 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3251 = _3250 * (_3226 ? _3234 : (_3234 + (cbSceneParam._m0[72u].w * _3207)));
        _3252 = _3250 * (_3226 ? _3235 : (_3235 + (cbSceneParam._m0[72u].w * _3209)));
        _3253 = _3250 * (_3226 ? _3236 : (_3236 + (cbSceneParam._m0[72u].w * _3211)));
        _3254 = _3243 * 0.999000012874603271484375;
        _3264 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3264)
        {
            if ((cbInstanceData._m0[_944 + 7u].x + _3254) < 0.5)
            {
                _3420 = true;
                break;
            }
        }
        uint _3361 = _945 + uint(_3223.w);
        if ((cbInstanceData._m0[_3361].w < 1.0) && ((cbInstanceData._m0[_3361].w + _3254) < 0.5))
        {
            _3420 = true;
            break;
        }
        if ((_3247 + _578) < _3245.x)
        {
            _3420 = true;
            break;
        }
        _3420 = false;
        break;
    }
    float _3624;
    if (_3420)
    {
        discard_state = true;
        _3624 = 0.0;
    }
    else
    {
        _3624 = _3111;
    }
    SV_Target.x = _3251;
    SV_Target.y = _3252;
    SV_Target.z = _3253;
    SV_Target.w = _3624;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3111;
    discard_exit();
}


