#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_snp_0_Texture2D_2;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D P_ACParts_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D P_ACParts_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D P_ACParts_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_snp_0_Texture2D_1;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_snp_0_Texture2D_10;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_snp_0_Texture2D_11;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_snp_0_Texture2D_12;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_snp_0_Texture2D_13;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_snp_0_Texture2D_14;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_snp_0_Texture2D_15;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1415;
float _3798;
float _3799;
float _3800;
float _3801;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253;
    float _254;
    float _255;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _253 = (-0.0) - _239;
        _254 = (-0.0) - _240;
        _255 = (-0.0) - _241;
    }
    else
    {
        _253 = _239;
        _254 = _240;
        _255 = _241;
    }
    vec4 _273 = texture(sampler2D(P_ACParts_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _278 = _273.z;
    float _279 = _273.w;
    float _287 = exp2(log2(_278 * cbMtdParam._m0[20u].w) * cbMtdParam._m0[19u].y);
    float _288 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    float _289 = isnan(1.0) ? _288 : (isnan(_288) ? 1.0 : min(_288, 1.0));
    float _295 = exp2(log2(1.0 - _279) * cbMtdParam._m0[20u].y);
    vec4 _307 = texture(sampler2D(P_ACParts_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _201[6];
    float _202[6];
    float _203[6];
    _201[0u] = cbMtdParam._m0[12u].x;
    _202[0u] = cbMtdParam._m0[12u].y;
    _203[0u] = cbMtdParam._m0[12u].z;
    _201[1u] = cbMtdParam._m0[13u].x;
    _202[1u] = cbMtdParam._m0[13u].y;
    _203[1u] = cbMtdParam._m0[13u].z;
    _201[2u] = cbMtdParam._m0[14u].x;
    _202[2u] = cbMtdParam._m0[14u].y;
    _203[2u] = cbMtdParam._m0[14u].z;
    _201[3u] = cbMtdParam._m0[15u].x;
    _202[3u] = cbMtdParam._m0[15u].y;
    _203[3u] = cbMtdParam._m0[15u].z;
    _201[4u] = cbMtdParam._m0[16u].x;
    _202[4u] = cbMtdParam._m0[16u].y;
    _203[4u] = cbMtdParam._m0[16u].z;
    _201[5u] = cbMtdParam._m0[11u].x;
    _202[5u] = cbMtdParam._m0[11u].y;
    _203[5u] = cbMtdParam._m0[11u].z;
    vec4 _389 = texture(sampler2D(P_ACParts_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _391 = _389.x;
    float _392 = _389.y;
    float _420 = roundEven(((_391 + (-0.02500000037252902984619140625)) + ((_389.z * cbMtdParam._m0[19u].w) * (texture(sampler2D(P_ACParts_snp_0_Texture2D_15, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, ((cbMtdParam._m0[19u].z * TEXCOORD.y) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w)).x - _391))) * 6.0);
    float _421 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    uint _424 = uint(int(isnan(5.0) ? _421 : (isnan(_421) ? 5.0 : min(_421, 5.0))));
    vec4 _454 = texture(sampler2D(P_ACParts_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _464 = cbMtdParam._m0[9u].x * _454.x;
    float _465 = cbMtdParam._m0[9u].y * _454.y;
    float _466 = cbMtdParam._m0[9u].z * _454.z;
    float _473 = ((((((_201[_424] - cbMtdParam._m0[10u].x) * _392) + cbMtdParam._m0[10u].x) * _307.x) - _464) * _295) + _464;
    float _474 = ((((((_202[_424] - cbMtdParam._m0[10u].y) * _392) + cbMtdParam._m0[10u].y) * _307.y) - _465) * _295) + _465;
    float _475 = ((((((_203[_424] - cbMtdParam._m0[10u].z) * _392) + cbMtdParam._m0[10u].z) * _307.z) - _466) * _295) + _466;
    float _482 = exp2(log2(_279) * cbMtdParam._m0[21u].y);
    vec4 _494 = texture(sampler2D(P_ACParts_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _527 = texture(sampler2D(P_ACParts_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _538 = cbMtdParam._m0[18u].x * _527.x;
    float _539 = cbMtdParam._m0[18u].y * _527.y;
    float _540 = cbMtdParam._m0[18u].z * _527.z;
    vec4 _561 = texture(sampler2D(P_ACParts_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _569 = ((((((((cbMtdParam._m0[17u].x * _494.x) - _473) * _482) + _473) - _538) * _289) + _538) * 4.55000019073486328125) * _561.x;
    float _571 = ((((((((cbMtdParam._m0[17u].y * _494.y) - _474) * _482) + _474) - _539) * _289) + _539) * 4.55000019073486328125) * _561.y;
    float _573 = ((((((((cbMtdParam._m0[17u].z * _494.z) - _475) * _482) + _475) - _540) * _289) + _540) * 4.55000019073486328125) * _561.z;
    float _574 = _561.w * _307.w;
    vec4 _586 = texture(sampler2D(P_ACParts_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _588 = _586.x;
    float _606 = (((1.0 - _588) + texture(sampler2D(P_ACParts_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x) * _289) + _588;
    float _625 = (((texture(sampler2D(P_ACParts_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x - _606) + cbMtdParam._m0[20u].z) * _295) + _606;
    float _648 = (((texture(sampler2D(P_ACParts_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - _625) + cbMtdParam._m0[22u].y) * _482) + _625;
    vec4 _660 = texture(sampler2D(P_ACParts_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _678 = texture(sampler2D(P_ACParts_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _680 = _678.x;
    float _681 = _678.y;
    float _684 = cbMtdParam._m0[19u].x + _678.z;
    float _687 = (((cbMtdParam._m0[20u].x + _660.z) - _684) * _295) + _684;
    vec4 _699 = texture(sampler2D(P_ACParts_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    vec4 _723 = texture(sampler2D(P_ACParts_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _725 = _723.x;
    float _726 = _723.y;
    float _729 = cbMtdParam._m0[21u].x + _723.z;
    float _732 = ((((_278 * 2.0) * ((((_699.z - _687) + cbMtdParam._m0[22u].x) * _482) + _687)) - _729) * _289) + _729;
    float _743 = ((_660.x - _680) * _295) + _680;
    float _744 = ((_660.y - _681) * _295) + _681;
    float _759 = (((((((_699.x - _743) * _482) + _743) - _725) * _289) + _725) * 2.0) + (-1.0);
    float _760 = (((((((_699.y - _744) * _482) + _744) - _726) * _289) + _726) * 2.0) + (-1.0);
    float _761 = dot(vec2(_759, _760), vec2(_759, _760));
    float _3830 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _766 = sqrt(1.0 - (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))));
    float _769 = _759 + (cbMtdParam._m0[21u].w * ((_273.x * 2.0) + (-1.0)));
    float _770 = _760 + (cbMtdParam._m0[21u].w * ((_273.y * 2.0) + (-1.0)));
    float _773 = fma(_766, _253, fma(_770, _245 * TANGENT.x, (_231 * _223) * _769));
    float _776 = fma(_766, _254, fma(_770, _245 * TANGENT.y, (_231 * _224) * _769));
    float _779 = fma(_766, _255, fma(_770, _245 * TANGENT.z, (_231 * _225) * _769));
    float _783 = inversesqrt(dot(vec3(_773, _776, _779), vec3(_773, _776, _779)));
    float _784 = _783 * _773;
    float _785 = _783 * _776;
    float _786 = _783 * _779;
    float _3841 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _787 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    float _3852 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _788 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _3863 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _3874 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _3885 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _3896 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _792 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _808 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _848 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _858 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _848);
    float _859 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _848);
    float _860 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _848);
    float _864 = inversesqrt(dot(vec3(_858, _859, _860), vec3(_858, _859, _860)));
    float _865 = _858 * _864;
    float _866 = _859 * _864;
    float _867 = _860 * _864;
    vec4 _872 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _874 = _872.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1094 = sqrt(((_858 * _858) + (_859 * _859)) + (_860 * _860));
        float _1100 = (cbMatDynParam._m0[5u].x * _1094) + cbMatDynParam._m0[5u].y;
        float _3907 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1105 = (cbMatDynParam._m0[5u].z * _1094) + cbMatDynParam._m0[5u].w;
        float _3918 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) - _1101)) + _1101) < ((_874 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _885 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _886 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _888 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _890 = _888.w;
    float _908 = fma(_786, cbSceneParam._m0[5u].z, fma(_785, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _784));
    float _911 = fma(_786, cbSceneParam._m0[6u].z, fma(_785, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _784));
    float _914 = fma(_786, cbSceneParam._m0[7u].z, fma(_785, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _784));
    vec4 _916 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _927 = (((_916.y - _788) + (_916.w * _788)) * cbMtdParam._m0[3u].x) + _788;
    uint _940 = uint(roundEven(NORMAL.w)) * 13u;
    uint _941 = _940 + 9u;
    uint _942 = _941 + uint(cbMatDynParam._m0[0u].w);
    float _948 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0)))) * cbInstanceData._m0[_942].x;
    float _949 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) * cbInstanceData._m0[_942].y;
    float _950 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) * cbInstanceData._m0[_942].z;
    float _3929 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _951 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _3940 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _952 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _3951 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _953 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    vec4 _954 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _959 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _970 = (((_959.x - _792) + (_959.w * _792)) * cbMtdParam._m0[3u].x) + _792;
    float _983 = (cbMtdParam._m0[3u].x * (((_951 * _890) - _951) + _954.x)) + _951;
    float _984 = (cbMtdParam._m0[3u].x * (((_952 * _890) - _952) + _954.y)) + _952;
    float _985 = (cbMtdParam._m0[3u].x * (((_953 * _890) - _953) + _954.z)) + _953;
    float _986 = 1.0 - _970;
    float _987 = _986 * _983;
    float _988 = _986 * _984;
    float _989 = _986 * _985;
    float _994 = (_983 + (-0.039999999105930328369140625)) * _970;
    float _995 = (_984 + (-0.039999999105930328369140625)) * _970;
    float _996 = (_985 + (-0.039999999105930328369140625)) * _970;
    float _997 = _994 + 0.039999999105930328369140625;
    float _999 = _995 + 0.039999999105930328369140625;
    float _1000 = _996 + 0.039999999105930328369140625;
    vec4 _1009 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _885, cbSceneParam._m0[86u].y * _886));
    float _1012 = _1009.x * TEXCOORD_4;
    float _1013 = dot(vec3(_784, _785, _786), vec3(_865, _866, _867));
    float _1016 = _1013 * 2.0;
    float _1020 = (_1016 * _784) - _865;
    float _1021 = (_1016 * _785) - _866;
    float _1022 = (_1016 * _786) - _867;
    float _1026 = abs(dot(vec3(_865, _866, _867), vec3(_784, _785, _786)));
    float _3962 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _1028 = sqrt(_927);
    float _1040 = exp2((_1028 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1028 * 3.0));
    float _1046 = (1.0 - _1040) * ((_1028 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1047 = _1040 * _1028;
    float _1075 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1079 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1083 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1414;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1139 = fma(_1083, cbModelParam._m0[26u].z, fma(_1079, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1075));
        float _1143 = fma(_1083, cbModelParam._m0[27u].z, fma(_1079, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1075));
        float _1147 = fma(_1083, cbModelParam._m0[28u].z, fma(_1079, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1075));
        float _1172 = _1075 + _784;
        float _1173 = _1079 + _785;
        float _1174 = _1083 + _786;
        float _1184 = fma(_1174, cbModelParam._m0[26u].z, fma(_1173, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1172)) - _1139;
        float _1185 = fma(_1174, cbModelParam._m0[27u].z, fma(_1173, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1172)) - _1143;
        float _1186 = fma(_1174, cbModelParam._m0[28u].z, fma(_1173, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1172)) - _1147;
        float _1190 = inversesqrt(dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186)));
        float _1203 = ((_1190 * _1184) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1139 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1204 = ((_1190 * _1185) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1143 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1205 = ((_1190 * _1186) / cbModelParam._m0[34u].z) + ((((((_1147 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1203, _1204, _1205), 0.0);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1203, _1204, _1205), 0.0);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1203, _1204, _1205), 0.0);
        vec4 _1229 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1203, _1204, _1205), 0.0);
        float _1242 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1208.x + (-0.5));
        float _1244 = _1242 * (_1208.y + (-0.5));
        float _1245 = _1242 * (_1208.z + (-0.5));
        float _1252 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1215.x + (-0.5));
        float _1254 = _1252 * (_1215.y + (-0.5));
        float _1255 = _1252 * (_1215.z + (-0.5));
        float _1262 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1222.x + (-0.5));
        float _1264 = _1262 * (_1222.y + (-0.5));
        float _1265 = _1262 * (_1222.z + (-0.5));
        float _1272 = exp2((_1229.w + (-0.5)) * 20.0) * 2.0;
        float _1273 = _1272 * (_1229.x + (-0.5));
        float _1274 = _1272 * (_1229.y + (-0.5));
        float _1275 = _1272 * (_1229.z + (-0.5));
        float _1276 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1277 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1278 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1279 = _1243 * 0.5;
        float _1280 = _1253 * 0.5;
        float _1281 = _1263 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1296 = (dot(vec3(_784, _785, _786), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _3988 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1306 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1276 + 9.9999997473787516355514526367188e-06);
        float _3999 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1308 = _1307 * 2.0;
        float _1312 = (1.0 - _1307) / (_1307 + 1.0);
        float _4010 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1322 = ((((1.0 - _1313) * (_1308 + 2.0)) * exp2(log2(isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * (_1308 + 1.0))) + _1313) * _1276;
        float _1323 = _1244 * 0.5;
        float _1324 = _1254 * 0.5;
        float _1325 = _1264 * 0.5;
        float _1326 = dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325));
        float _1331 = (_1326 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1326);
        float _1339 = (dot(vec3(_784, _785, _786), vec3(_1331 * _1323, _1331 * _1324, _1331 * _1325)) + 1.0) * 0.5;
        float _4021 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1348 = sqrt(((_1324 * _1324) + (_1323 * _1323)) + (_1325 * _1325)) / (_1277 + 9.9999997473787516355514526367188e-06);
        float _4032 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1350 = _1349 * 2.0;
        float _1354 = (1.0 - _1349) / (_1349 + 1.0);
        float _4043 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1364 = ((((1.0 - _1355) * (_1350 + 2.0)) * exp2(log2(isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_1350 + 1.0))) + _1355) * _1277;
        float _1365 = _1245 * 0.5;
        float _1366 = _1255 * 0.5;
        float _1367 = _1265 * 0.5;
        float _1368 = dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367));
        float _1373 = (_1368 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1368);
        float _1381 = (dot(vec3(_784, _785, _786), vec3(_1373 * _1365, _1373 * _1366, _1373 * _1367)) + 1.0) * 0.5;
        float _4054 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1390 = sqrt(((_1366 * _1366) + (_1365 * _1365)) + (_1367 * _1367)) / (_1278 + 9.9999997473787516355514526367188e-06);
        float _4065 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1392 = _1391 * 2.0;
        float _1396 = (1.0 - _1391) / (_1391 + 1.0);
        float _4076 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1406 = ((((1.0 - _1397) * (_1392 + 2.0)) * exp2(log2(isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_1392 + 1.0))) + _1397) * _1278;
        _1414 = _1245;
        _1416 = _1244;
        _1417 = _1243;
        _1418 = _1255;
        _1419 = _1254;
        _1420 = _1253;
        _1421 = _1265;
        _1422 = _1264;
        _1423 = _1263;
        _1424 = _1278;
        _1425 = _1277;
        _1426 = _1276;
        _1427 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)));
        _1428 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)));
        _1429 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)));
    }
    else
    {
        _1414 = _1415;
        _1416 = _1415;
        _1417 = _1415;
        _1418 = _1415;
        _1419 = _1415;
        _1420 = _1415;
        _1421 = _1415;
        _1422 = _1415;
        _1423 = _1415;
        _1424 = _1415;
        _1425 = _1415;
        _1426 = _1415;
        _1427 = 0.0;
        _1428 = 0.0;
        _1429 = 0.0;
    }
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1458 = fma(_1083, cbModelParam._m0[30u].z, fma(_1079, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1075));
        float _1462 = fma(_1083, cbModelParam._m0[31u].z, fma(_1079, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1075));
        float _1466 = fma(_1083, cbModelParam._m0[32u].z, fma(_1079, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1075));
        float _1489 = _1075 + _784;
        float _1490 = _1079 + _785;
        float _1491 = _1083 + _786;
        float _1501 = fma(_1491, cbModelParam._m0[30u].z, fma(_1490, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1489)) - _1458;
        float _1502 = fma(_1491, cbModelParam._m0[31u].z, fma(_1490, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1489)) - _1462;
        float _1503 = fma(_1491, cbModelParam._m0[32u].z, fma(_1490, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1489)) - _1466;
        float _1507 = inversesqrt(dot(vec3(_1501, _1502, _1503), vec3(_1501, _1502, _1503)));
        float _1520 = ((_1507 * _1501) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1458 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1521 = ((_1507 * _1502) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1462 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1522 = ((_1507 * _1503) / cbModelParam._m0[35u].z) + ((((((_1466 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1524 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1520, _1521, _1522), 0.0);
        vec4 _1531 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1520, _1521, _1522), 0.0);
        vec4 _1538 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1520, _1521, _1522), 0.0);
        vec4 _1545 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1520, _1521, _1522), 0.0);
        float _1557 = exp2((_1524.w + (-0.5)) * 20.0) * 2.0;
        float _1558 = _1557 * (_1524.x + (-0.5));
        float _1559 = _1557 * (_1524.y + (-0.5));
        float _1560 = _1557 * (_1524.z + (-0.5));
        float _1567 = exp2((_1531.w + (-0.5)) * 20.0) * 2.0;
        float _1568 = _1567 * (_1531.x + (-0.5));
        float _1569 = _1567 * (_1531.y + (-0.5));
        float _1570 = _1567 * (_1531.z + (-0.5));
        float _1577 = exp2((_1538.w + (-0.5)) * 20.0) * 2.0;
        float _1578 = _1577 * (_1538.x + (-0.5));
        float _1579 = _1577 * (_1538.y + (-0.5));
        float _1580 = _1577 * (_1538.z + (-0.5));
        float _1587 = exp2((_1545.w + (-0.5)) * 20.0) * 2.0;
        float _1588 = _1587 * (_1545.x + (-0.5));
        float _1589 = _1587 * (_1545.y + (-0.5));
        float _1590 = _1587 * (_1545.z + (-0.5));
        float _1591 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1592 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1593 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1594 = _1558 * 0.5;
        float _1595 = _1568 * 0.5;
        float _1596 = _1578 * 0.5;
        float _1597 = dot(vec3(_1594, _1595, _1596), vec3(_1594, _1595, _1596));
        float _1602 = (_1597 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1597);
        float _1610 = (dot(vec3(_784, _785, _786), vec3(_1602 * _1594, _1602 * _1595, _1602 * _1596)) + 1.0) * 0.5;
        float _4117 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1619 = sqrt(((_1595 * _1595) + (_1594 * _1594)) + (_1596 * _1596)) / (_1591 + 9.9999997473787516355514526367188e-06);
        float _4128 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1621 = _1620 * 2.0;
        float _1625 = (1.0 - _1620) / (_1620 + 1.0);
        float _4139 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1635 = ((((1.0 - _1626) * (_1621 + 2.0)) * exp2(log2(isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_1621 + 1.0))) + _1626) * _1591;
        float _1636 = _1559 * 0.5;
        float _1637 = _1569 * 0.5;
        float _1638 = _1579 * 0.5;
        float _1639 = dot(vec3(_1636, _1637, _1638), vec3(_1636, _1637, _1638));
        float _1644 = (_1639 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1639);
        float _1652 = (dot(vec3(_784, _785, _786), vec3(_1644 * _1636, _1644 * _1637, _1644 * _1638)) + 1.0) * 0.5;
        float _4150 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1661 = sqrt(((_1637 * _1637) + (_1636 * _1636)) + (_1638 * _1638)) / (_1592 + 9.9999997473787516355514526367188e-06);
        float _4161 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1663 = _1662 * 2.0;
        float _1667 = (1.0 - _1662) / (_1662 + 1.0);
        float _4172 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1677 = ((((1.0 - _1668) * (_1663 + 2.0)) * exp2(log2(isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1663 + 1.0))) + _1668) * _1592;
        float _1678 = _1560 * 0.5;
        float _1679 = _1570 * 0.5;
        float _1680 = _1580 * 0.5;
        float _1681 = dot(vec3(_1678, _1679, _1680), vec3(_1678, _1679, _1680));
        float _1686 = (_1681 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1681);
        float _1694 = (dot(vec3(_784, _785, _786), vec3(_1686 * _1678, _1686 * _1679, _1686 * _1680)) + 1.0) * 0.5;
        float _4183 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1703 = sqrt(((_1679 * _1679) + (_1678 * _1678)) + (_1680 * _1680)) / (_1593 + 9.9999997473787516355514526367188e-06);
        float _4194 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1704 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1705 = _1704 * 2.0;
        float _1709 = (1.0 - _1704) / (_1704 + 1.0);
        float _4205 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1719 = ((((1.0 - _1710) * (_1705 + 2.0)) * exp2(log2(isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_1705 + 1.0))) + _1710) * _1593;
        _1727 = _1560;
        _1728 = _1559;
        _1729 = _1558;
        _1730 = _1570;
        _1731 = _1569;
        _1732 = _1568;
        _1733 = _1580;
        _1734 = _1579;
        _1735 = _1578;
        _1736 = _1593;
        _1737 = _1592;
        _1738 = _1591;
        _1739 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)));
        _1740 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)));
        _1741 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)));
    }
    else
    {
        _1727 = _1415;
        _1728 = _1415;
        _1729 = _1415;
        _1730 = _1415;
        _1731 = _1415;
        _1732 = _1415;
        _1733 = _1415;
        _1734 = _1415;
        _1735 = _1415;
        _1736 = _1415;
        _1737 = _1415;
        _1738 = _1415;
        _1739 = 0.0;
        _1740 = 0.0;
        _1741 = 0.0;
    }
    float _1751 = (cbModelParam._m0[1u].x * (_1739 - _1427)) + _1427;
    float _1752 = (cbModelParam._m0[1u].x * (_1740 - _1428)) + _1428;
    float _1753 = (cbModelParam._m0[1u].x * (_1741 - _1429)) + _1429;
    float _1774 = fma(_1753, cbSceneParam._m0[89u].z, fma(_1752, cbSceneParam._m0[89u].y, _1751 * cbSceneParam._m0[89u].x));
    float _1777 = fma(_1753, cbSceneParam._m0[90u].z, fma(_1752, cbSceneParam._m0[90u].y, _1751 * cbSceneParam._m0[90u].x));
    float _1780 = fma(_1753, cbSceneParam._m0[91u].z, fma(_1752, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1751));
    float _1795 = _1020 * 0.5;
    float _1796 = _1021 * 0.5;
    float _1797 = _1022 * 0.5;
    float _1798 = dot(vec4(_1795, _1796, _1797, 1.0), vec4(_1729, _1732, _1735, _1738));
    float _1801 = dot(vec4(_1795, _1796, _1797, 1.0), vec4(_1728, _1731, _1734, _1737));
    float _1804 = dot(vec4(_1795, _1796, _1797, 1.0), vec4(_1727, _1730, _1733, _1736));
    float _1838;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1811 = dot(vec4(_1795, _1796, _1797, 1.0), vec4(_1414, _1418, _1421, _1424));
        float _1815 = dot(vec4(_1795, _1796, _1797, 1.0), vec4(_1416, _1419, _1422, _1425));
        float _1819 = dot(vec4(_1795, _1796, _1797, 1.0), vec4(_1417, _1420, _1423, _1426));
        float _1826 = dot(vec4(cbModelParam._m0[39u]), vec4(_1795, _1796, _1797, 1.0));
        _1838 = dot(vec3(isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0)), isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0)), isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1826) ? 0.0 : (isnan(0.0) ? _1826 : max(0.0, _1826))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1838 = 1.0;
    }
    float _1849;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1840 = dot(vec4(cbModelParam._m0[40u]), vec4(_1795, _1796, _1797, 1.0));
        _1849 = dot(vec3(isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0)), isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0)), isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1840) ? 0.0 : (isnan(0.0) ? _1840 : max(0.0, _1840))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1849 = 1.0;
    }
    float _1853 = (_1849 * cbModelParam._m0[1u].x) + (_1838 * (1.0 - cbModelParam._m0[1u].x));
    float _1863 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _927);
    float _1864 = isnan(_1863) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1863 : min(cbModelParam._m0[25u].z, _1863));
    float _1944;
    float _1946;
    float _1948;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1911 = fma(_1083, cbModelParam._m0[13u].z, fma(_1079, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1075)) + cbModelParam._m0[13u].w;
        float _1915 = fma(_1083, cbModelParam._m0[14u].z, fma(_1079, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1075)) + cbModelParam._m0[14u].w;
        float _1919 = fma(_1083, cbModelParam._m0[15u].z, fma(_1079, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1075)) + cbModelParam._m0[15u].w;
        float _1922 = fma(_1022, cbModelParam._m0[13u].z, fma(_1021, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1020));
        float _1925 = fma(_1022, cbModelParam._m0[14u].z, fma(_1021, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1020));
        float _1928 = fma(_1022, cbModelParam._m0[15u].z, fma(_1021, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1020));
        float _1956;
        if (_1922 > 0.0)
        {
            _1956 = abs((1.0 - _1911) / _1922);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1922 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1911 + 1.0) / _1922);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1956 = frontier_phi_19_17_ladder;
        }
        float _2158;
        if (_1925 > 0.0)
        {
            _2158 = abs((1.0 - _1915) / _1925);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1925 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1915 + 1.0) / _1925);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2158 = frontier_phi_28_24_ladder;
        }
        float _2412;
        if (_1928 > 0.0)
        {
            _2412 = abs((1.0 - _1919) / _1928);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1928 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1919 + 1.0) / _1928);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2412 = frontier_phi_40_35_ladder;
        }
        float _2414 = isnan(_2158) ? _1956 : (isnan(_1956) ? _2158 : min(_1956, _2158));
        float _2415 = isnan(_2412) ? _2414 : (isnan(_2414) ? _2412 : min(_2414, _2412));
        float _2419 = (_2415 * _1922) + _1911;
        float _2420 = (_2415 * _1925) + _1915;
        float _2421 = (_2415 * _1928) + _1919;
        float _2422 = _2415 * 9.9999997473787516355514526367188e-05;
        float _2424 = (-1.0) - _2422;
        float _2426 = _2422 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2421 > _2426) || ((_2421 < _2424) || ((_2420 > _2426) || ((_2420 < _2424) || ((_2419 < _2424) || (_2419 > _2426))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2549 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2421, cbModelParam._m0[9u].z, fma(_2420, cbModelParam._m0[9u].y, _2419 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2421, cbModelParam._m0[10u].z, fma(_2420, cbModelParam._m0[10u].y, _2419 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2421, cbModelParam._m0[11u].z, fma(_2420, cbModelParam._m0[11u].y, _2419 * cbModelParam._m0[11u].x))), _1864);
            frontier_phi_18_40_ladder = _2549.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2549.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2549.x * cbModelParam._m0[1u].y;
        }
        _1944 = frontier_phi_18_40_ladder_2;
        _1946 = frontier_phi_18_40_ladder_1;
        _1948 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1932 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1020, _1021, _1022), _1864);
        _1944 = _1932.x * cbModelParam._m0[1u].y;
        _1946 = _1932.y * cbModelParam._m0[1u].y;
        _1948 = _1932.z * cbModelParam._m0[1u].y;
    }
    float _1952 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _927);
    float _1953 = isnan(_1952) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1952 : min(cbModelParam._m0[25u].w, _1952));
    float _2042;
    float _2044;
    float _2046;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2006 = fma(_1083, cbModelParam._m0[21u].z, fma(_1079, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1075)) + cbModelParam._m0[21u].w;
        float _2010 = fma(_1083, cbModelParam._m0[22u].z, fma(_1079, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1075)) + cbModelParam._m0[22u].w;
        float _2014 = fma(_1083, cbModelParam._m0[23u].z, fma(_1079, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1075)) + cbModelParam._m0[23u].w;
        float _2017 = fma(_1022, cbModelParam._m0[21u].z, fma(_1021, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1020));
        float _2020 = fma(_1022, cbModelParam._m0[22u].z, fma(_1021, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1020));
        float _2023 = fma(_1022, cbModelParam._m0[23u].z, fma(_1021, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1020));
        float _2163;
        if (_2017 > 0.0)
        {
            _2163 = abs((1.0 - _2006) / _2017);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2017 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2006 + 1.0) / _2017);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2163 = frontier_phi_30_26_ladder;
        }
        float _2439;
        if (_2020 > 0.0)
        {
            _2439 = abs((1.0 - _2010) / _2020);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2020 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2010 + 1.0) / _2020);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2439 = frontier_phi_42_37_ladder;
        }
        float _2652;
        if (_2023 > 0.0)
        {
            _2652 = abs((1.0 - _2014) / _2023);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2023 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2014 + 1.0) / _2023);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2652 = frontier_phi_51_48_ladder;
        }
        float _2654 = isnan(_2439) ? _2163 : (isnan(_2163) ? _2439 : min(_2163, _2439));
        float _2655 = isnan(_2652) ? _2654 : (isnan(_2654) ? _2652 : min(_2654, _2652));
        float _2659 = (_2655 * _2017) + _2006;
        float _2660 = (_2655 * _2020) + _2010;
        float _2661 = (_2655 * _2023) + _2014;
        float _2662 = _2655 * 9.9999997473787516355514526367188e-05;
        float _2663 = (-1.0) - _2662;
        float _2665 = _2662 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2661 > _2665) || ((_2661 < _2663) || ((_2660 > _2665) || ((_2660 < _2663) || ((_2659 < _2663) || (_2659 > _2665))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2861 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2661, cbModelParam._m0[17u].z, fma(_2660, cbModelParam._m0[17u].y, _2659 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2661, cbModelParam._m0[18u].z, fma(_2660, cbModelParam._m0[18u].y, _2659 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2661, cbModelParam._m0[19u].z, fma(_2660, cbModelParam._m0[19u].y, _2659 * cbModelParam._m0[19u].x))), _1953);
            frontier_phi_27_51_ladder = _2861.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2861.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2861.x * cbModelParam._m0[1u].z;
        }
        _2042 = frontier_phi_27_51_ladder_2;
        _2044 = frontier_phi_27_51_ladder_1;
        _2046 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2026 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1020, _1021, _1022), _1953);
        _2042 = _2026.x * cbModelParam._m0[1u].z;
        _2044 = _2026.y * cbModelParam._m0[1u].z;
        _2046 = _2026.z * cbModelParam._m0[1u].z;
    }
    float _2059 = (((_1046 * _997) + _1047) * _1012) * ((cbModelParam._m0[1u].w * (_2042 - _1944)) + _1944);
    float _2061 = (((_1046 * _999) + _1047) * _1012) * ((cbModelParam._m0[1u].w * (_2044 - _1946)) + _1946);
    float _2063 = (((_1046 * _1000) + _1047) * _1012) * ((cbModelParam._m0[1u].w * (_2046 - _1948)) + _1948);
    float _2066 = fma(_2063, cbSceneParam._m0[89u].z, fma(_2061, cbSceneParam._m0[89u].y, _2059 * cbSceneParam._m0[89u].x));
    float _2069 = fma(_2063, cbSceneParam._m0[90u].z, fma(_2061, cbSceneParam._m0[90u].y, _2059 * cbSceneParam._m0[90u].x));
    float _2072 = fma(_2063, cbSceneParam._m0[91u].z, fma(_2061, cbSceneParam._m0[91u].y, _2059 * cbSceneParam._m0[91u].x));
    uvec4 _2082 = floatBitsToUint(cbInstanceData._m0[_940 + 5u]);
    uint _2084 = _2082.x * 14u;
    uint _2085 = _2084 + 13u;
    float _2092 = _1012 + (-1.0);
    float _2097 = (cbLight._m0[_2085].x * _2092) + 1.0;
    float _2098 = (cbLight._m0[_2085].y * _2092) + 1.0;
    float _2099 = (cbLight._m0[_2085].z * _2092) + 1.0;
    float _2100 = (cbLight._m0[_2085].w * _2092) + 1.0;
    uint _2101 = _2084 + 5u;
    float _2107 = isnan(1.0) ? _2098 : (isnan(_2098) ? 1.0 : min(_2098, 1.0));
    uint _2111 = _2084 + 4u;
    float _2117 = isnan(1.0) ? _2097 : (isnan(_2097) ? 1.0 : min(_2097, 1.0));
    uint _2121 = _2084 | 1u;
    float _2132 = dot(vec3(cbLight._m0[_2084].xyz), vec3(_784, _785, _786));
    float _2135 = dot(vec3(cbLight._m0[_2121].xyz), vec3(_784, _785, _786));
    float _4341 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _4352 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2140 = (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * 0.3183098733425140380859375;
    float _2142 = (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * 0.3183098733425140380859375;
    float _2149 = ((cbLight._m0[_2101].x * _2107) * _2142) + ((cbLight._m0[_2111].x * _2117) * _2140);
    float _2150 = ((_2107 * cbLight._m0[_2101].y) * _2142) + ((_2117 * cbLight._m0[_2111].y) * _2140);
    float _2151 = ((_2107 * cbLight._m0[_2101].z) * _2142) + ((_2117 * cbLight._m0[_2111].z) * _2140);
    uvec4 _2155 = floatBitsToUint(cbLight._m0[_2084 + 12u]);
    bool _2157 = _2155.x == 0u;
    float _2168;
    float _2170;
    float _2172;
    if (_2157)
    {
        _2168 = _2149;
        _2170 = _2150;
        _2172 = _2151;
    }
    else
    {
        uint _2176 = _2084 + 6u;
        float _2192 = (dot(vec3(cbLight._m0[_2084 + 2u].xyz), vec3(_784, _785, _786)) * 0.5) + 0.5;
        float _2193 = _2192 * _2192;
        float _4363 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2194 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _2195 = isnan(1.0) ? _2099 : (isnan(_2099) ? 1.0 : min(_2099, 1.0));
        _2168 = (((cbLight._m0[_2176].x * 0.3183098733425140380859375) * _2194) * _2195) + _2149;
        _2170 = (((cbLight._m0[_2176].y * 0.3183098733425140380859375) * _2194) * _2195) + _2150;
        _2172 = (((cbLight._m0[_2176].z * 0.3183098733425140380859375) * _2194) * _2195) + _2151;
    }
    bool _2175 = _2155.y == 0u;
    float _2213;
    float _2215;
    float _2217;
    if (_2175)
    {
        _2213 = _2168;
        _2215 = _2170;
        _2217 = _2172;
    }
    else
    {
        uint _2383 = _2084 + 7u;
        float _2399 = (dot(vec3(cbLight._m0[_2084 + 3u].xyz), vec3(_784, _785, _786)) * 0.5) + 0.5;
        float _2400 = _2399 * _2399;
        float _4379 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2401 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _2402 = isnan(1.0) ? _2100 : (isnan(_2100) ? 1.0 : min(_2100, 1.0));
        _2213 = (((cbLight._m0[_2383].x * 0.3183098733425140380859375) * _2401) * _2402) + _2168;
        _2215 = (((cbLight._m0[_2383].y * 0.3183098733425140380859375) * _2401) * _2402) + _2170;
        _2217 = (((cbLight._m0[_2383].z * 0.3183098733425140380859375) * _2401) * _2402) + _2172;
    }
    uint _2220 = _2084 + 8u;
    float _2233 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2084].w)) * _927) * 0.949999988079071044921875);
    float _2234 = _2233 * _2233;
    float _2235 = cbLight._m0[_2084].x + _865;
    float _2236 = cbLight._m0[_2084].y + _866;
    float _2237 = cbLight._m0[_2084].z + _867;
    float _2241 = inversesqrt(dot(vec3(_2235, _2236, _2237), vec3(_2235, _2236, _2237)));
    float _2242 = _2241 * _2235;
    float _2243 = _2241 * _2236;
    float _2244 = _2241 * _2237;
    float _2245 = dot(vec3(_784, _785, _786), vec3(cbLight._m0[_2084].xyz));
    float _4395 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2248 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
    float _4406 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _2249 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
    float _2250 = dot(vec3(_784, _785, _786), vec3(_2242, _2243, _2244));
    float _4417 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2253 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
    float _2254 = dot(vec3(cbLight._m0[_2084].xyz), vec3(_2242, _2243, _2244));
    float _4428 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2258 = _2234 * _2234;
    float _2262 = ((_2253 * _2253) * (_2258 + (-1.0))) + 1.0;
    float _2270 = exp2(log2(1.0 - (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0)))) * 5.0);
    float _2271 = 0.959999978542327880859375 - _994;
    float _2273 = 0.959999978542327880859375 - _995;
    float _2274 = 0.959999978542327880859375 - _996;
    float _2281 = 1.0 - _2234;
    float _2292 = (0.5 / (((_2249 * ((_2248 * _2281) + _2234)) + 9.9999999392252902907785028219223e-09) + (((_2249 * _2281) + _2234) * _2248))) * _2248;
    float _4439 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2294 = (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_2258 / ((_2262 * _2262) * 3.141590118408203125));
    uint _2305 = _2084 + 9u;
    float _2316 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2121].w)) * _927) * 0.949999988079071044921875);
    float _2317 = _2316 * _2316;
    float _2318 = cbLight._m0[_2121].x + _865;
    float _2319 = cbLight._m0[_2121].y + _866;
    float _2320 = cbLight._m0[_2121].z + _867;
    float _2324 = inversesqrt(dot(vec3(_2318, _2319, _2320), vec3(_2318, _2319, _2320)));
    float _2325 = _2324 * _2318;
    float _2326 = _2324 * _2319;
    float _2327 = _2324 * _2320;
    float _2328 = dot(vec3(_784, _785, _786), vec3(cbLight._m0[_2121].xyz));
    float _4450 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2331 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
    float _2332 = dot(vec3(_784, _785, _786), vec3(_2325, _2326, _2327));
    float _4461 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2335 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
    float _2336 = dot(vec3(cbLight._m0[_2121].xyz), vec3(_2325, _2326, _2327));
    float _4472 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2340 = _2317 * _2317;
    float _2344 = ((_2335 * _2335) * (_2340 + (-1.0))) + 1.0;
    float _2351 = exp2(log2(1.0 - (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0)))) * 5.0);
    float _2358 = 1.0 - _2317;
    float _2368 = (0.5 / (((_2249 * ((_2331 * _2358) + _2317)) + 9.9999999392252902907785028219223e-09) + (((_2249 * _2358) + _2317) * _2331))) * _2331;
    float _4483 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2370 = (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (_2340 / ((_2344 * _2344) * 3.141590118408203125));
    float _2380 = (((((_2351 * _2271) + _997) * cbLight._m0[_2305].x) * _2370) * _2107) + (((((_2270 * _2271) + _997) * cbLight._m0[_2220].x) * _2294) * _2117);
    float _2381 = (((((_2351 * _2273) + _999) * cbLight._m0[_2305].y) * _2370) * _2107) + (((((_2270 * _2273) + _999) * cbLight._m0[_2220].y) * _2294) * _2117);
    float _2382 = (((((_2351 * _2274) + _1000) * cbLight._m0[_2305].z) * _2370) * _2107) + (((((_2270 * _2274) + _1000) * cbLight._m0[_2220].z) * _2294) * _2117);
    float _2444;
    float _2446;
    float _2448;
    if (_2157)
    {
        _2444 = _2380;
        _2446 = _2381;
        _2448 = _2382;
    }
    else
    {
        uint _2450 = _2084 + 2u;
        uint _2454 = _2084 + 10u;
        float _2468 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2450].w)) * _927) * 0.949999988079071044921875);
        float _2469 = _2468 * _2468;
        float _2470 = cbLight._m0[_2450].x + _865;
        float _2471 = cbLight._m0[_2450].y + _866;
        float _2472 = cbLight._m0[_2450].z + _867;
        float _2476 = inversesqrt(dot(vec3(_2470, _2471, _2472), vec3(_2470, _2471, _2472)));
        float _2477 = _2476 * _2470;
        float _2478 = _2476 * _2471;
        float _2479 = _2476 * _2472;
        float _2480 = dot(vec3(_784, _785, _786), vec3(cbLight._m0[_2450].xyz));
        float _4494 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2483 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _2484 = dot(vec3(_784, _785, _786), vec3(_2477, _2478, _2479));
        float _4505 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
        float _2487 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _2488 = dot(vec3(cbLight._m0[_2450].xyz), vec3(_2477, _2478, _2479));
        float _4516 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2492 = _2469 * _2469;
        float _2496 = ((_2487 * _2487) * (_2492 + (-1.0))) + 1.0;
        float _2503 = exp2(log2(1.0 - (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0)))) * 5.0);
        float _2510 = 1.0 - _2469;
        float _2520 = (0.5 / (((_2249 * ((_2483 * _2510) + _2469)) + 9.9999999392252902907785028219223e-09) + (((_2249 * _2510) + _2469) * _2483))) * _2483;
        float _4527 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2522 = (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_2492 / ((_2496 * _2496) * 3.141590118408203125));
        float _2523 = isnan(1.0) ? _2099 : (isnan(_2099) ? 1.0 : min(_2099, 1.0));
        _2444 = (((((_2503 * _2271) + _997) * cbLight._m0[_2454].x) * _2522) * _2523) + _2380;
        _2446 = (((((_2503 * _2273) + _999) * cbLight._m0[_2454].y) * _2522) * _2523) + _2381;
        _2448 = (((((_2503 * _2274) + _1000) * cbLight._m0[_2454].z) * _2522) * _2523) + _2382;
    }
    float _2558;
    float _2560;
    float _2562;
    if (_2175)
    {
        _2558 = _2444;
        _2560 = _2446;
        _2562 = _2448;
    }
    else
    {
        uint _2569 = _2084 + 3u;
        uint _2573 = _2084 + 11u;
        float _2587 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2569].w)) * _927) * 0.949999988079071044921875);
        float _2588 = _2587 * _2587;
        float _2589 = cbLight._m0[_2569].x + _865;
        float _2590 = cbLight._m0[_2569].y + _866;
        float _2591 = cbLight._m0[_2569].z + _867;
        float _2595 = inversesqrt(dot(vec3(_2589, _2590, _2591), vec3(_2589, _2590, _2591)));
        float _2596 = _2595 * _2589;
        float _2597 = _2595 * _2590;
        float _2598 = _2595 * _2591;
        float _2599 = dot(vec3(_784, _785, _786), vec3(cbLight._m0[_2569].xyz));
        float _4543 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2602 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _2603 = dot(vec3(_784, _785, _786), vec3(_2596, _2597, _2598));
        float _4554 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2606 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _2607 = dot(vec3(cbLight._m0[_2569].xyz), vec3(_2596, _2597, _2598));
        float _4565 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2611 = _2588 * _2588;
        float _2615 = ((_2606 * _2606) * (_2611 + (-1.0))) + 1.0;
        float _2622 = exp2(log2(1.0 - (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0)))) * 5.0);
        float _2629 = 1.0 - _2588;
        float _2639 = (0.5 / (((_2249 * ((_2602 * _2629) + _2588)) + 9.9999999392252902907785028219223e-09) + (((_2249 * _2629) + _2588) * _2602))) * _2602;
        float _4576 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2641 = (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (_2611 / ((_2615 * _2615) * 3.141590118408203125));
        float _2642 = isnan(1.0) ? _2100 : (isnan(_2100) ? 1.0 : min(_2100, 1.0));
        _2558 = (((((_2622 * _2271) + _997) * cbLight._m0[_2573].x) * _2641) * _2642) + _2444;
        _2560 = (((((_2622 * _2273) + _999) * cbLight._m0[_2573].y) * _2641) * _2642) + _2446;
        _2562 = (((((_2622 * _2274) + _1000) * cbLight._m0[_2573].z) * _2641) * _2642) + _2448;
    }
    float _2776;
    float _2778;
    float _2780;
    float _2782;
    float _2784;
    float _2786;
    if (_2082.y == 0u)
    {
        float _2717 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2718 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2717;
        float _2719 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2717;
        float _2720 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2717;
        uvec4 _2732 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2733 = _2732.x;
        uint _2744 = uint((float(_2732.y) * floor(float(uint(cbSceneParam._m0[85u].y * _886) / _2733))) + floor(float(uint(cbSceneParam._m0[85u].x * _885) / _2733)));
        float _2754 = (log2(_2720 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2755 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
        uint _2758 = uint(isnan(14.0) ? _2755 : (isnan(_2755) ? 14.0 : min(_2755, 14.0)));
        uvec4 _2763 = texelFetch(g_lightClusterGridBuffer, int(((_2758 << 2u) + (_2744 << 6u)) >> 2u));
        uint _2764 = _2763.x;
        uint _2765 = _2732.z;
        float _2866;
        float _2868;
        float _2870;
        float _2872;
        float _2874;
        float _2876;
        if (((((1u << ((_2765 >> 4u) & 15u)) + 4294967295u) & _2764) == 0u) || ((_2765 & 240u) == 0u))
        {
            _2866 = 0.0;
            _2868 = 0.0;
            _2870 = 0.0;
            _2872 = 0.0;
            _2874 = 0.0;
            _2876 = 0.0;
        }
        else
        {
            float _2867;
            float _2869;
            float _2871;
            float _2873;
            float _2875;
            float _2877;
            float _3018 = 0.0;
            float _3019 = 0.0;
            float _3020 = 0.0;
            float _3021 = 0.0;
            float _3022 = 0.0;
            float _3023 = 0.0;
            uint _3024 = 0u;
            uint _3033;
            bool _3034;
            for (;;)
            {
                _3033 = texelFetch(g_lightClassification, int((((_2758 << 5u) + (_2744 << 9u)) + (_3024 << 2u)) >> 2u)).x;
                _3034 = _3033 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3034)
                {
                    frontier_phi_68_pred = _3020;
                    frontier_phi_68_pred_1 = _3023;
                    frontier_phi_68_pred_2 = _3022;
                    frontier_phi_68_pred_3 = _3021;
                    frontier_phi_68_pred_4 = _3019;
                    frontier_phi_68_pred_5 = _3018;
                }
                else
                {
                    float _3163;
                    float _3164;
                    float _3165;
                    float _3166;
                    float _3167;
                    float _3168;
                    uint _3169;
                    _3163 = _3018;
                    _3164 = _3019;
                    _3165 = _3020;
                    _3166 = _3021;
                    _3167 = _3022;
                    _3168 = _3023;
                    _3169 = _3033;
                    float _3090;
                    float _3091;
                    float _3092;
                    float _3093;
                    float _3094;
                    float _3095;
                    for (;;)
                    {
                        uint _3173 = uint(findLSB(_3169)) + (_3024 << 5u);
                        uint _3170 = (_3169 + 4294967295u) & _3169;
                        uint _3175 = _3173 * 48u;
                        vec4 _3189 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3175)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 3u)).x));
                        uint _3195 = (_3173 * 48u) + 4u;
                        vec4 _3208 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3195)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 3u)).x));
                        uint _3214 = (_3173 * 48u) + 8u;
                        vec3 _3225 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3214)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 2u)).x));
                        float _3229 = _3189.x - _2718;
                        float _3230 = _3189.y - _2719;
                        float _3231 = _3189.z - _2720;
                        float _3232 = dot(vec3(_3229, _3230, _3231), vec3(_3229, _3230, _3231));
                        float _3235 = inversesqrt(_3232);
                        float _3236 = _3235 * _3229;
                        float _3237 = _3235 * _3230;
                        float _3238 = _3235 * _3231;
                        float _3239 = dot(vec3(_908, _911, _914), vec3(_3236, _3237, _3238));
                        float _3244 = 1.0 - (_3232 * _3189.w);
                        float _4602 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                        float _3245 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
                        float _3246 = sqrt(_3232) * _3208.w;
                        float _3249 = 1.39999997615814208984375 / (_3246 + 1.39999997615814208984375);
                        float _3250 = _3249 * _3249;
                        float _3253 = ((1.0 - _3250) * _3239) + _3250;
                        float _3256 = _3246 * _3246;
                        float _3260 = ((isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0))) * _3245) / ((_3256 * 0.699999988079071044921875) + 1.0);
                        float _3264 = (-0.0) - _2718;
                        float _3265 = (-0.0) - _2719;
                        float _3266 = (-0.0) - _2720;
                        float _3270 = inversesqrt(dot(vec3(_3264, _3265, _3266), vec3(_3264, _3265, _3266)));
                        float _3271 = _3270 * _3264;
                        float _3272 = _3270 * _3265;
                        float _3273 = _3270 * _3266;
                        float _3281 = exp2(log2(1.0 / ((_3256 * 3.5) + 5.0)) * 0.25);
                        float _3282 = 1.0 - _1028;
                        float _3289 = sqrt(1.0 - ((1.0 - (_3282 * _3282)) * (1.0 - (_3281 * _3281))));
                        float _3290 = _3289 * _3289;
                        float _3291 = _3290 * _3290;
                        float _3292 = _3271 + _3236;
                        float _3293 = _3272 + _3237;
                        float _3294 = _3273 + _3238;
                        float _3298 = inversesqrt(dot(vec3(_3292, _3293, _3294), vec3(_3292, _3293, _3294)));
                        float _3302 = dot(vec3(_908, _911, _914), vec3(_3271, _3272, _3273));
                        float _4618 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                        float _3305 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
                        float _3306 = dot(vec3(_908, _911, _914), vec3(_3298 * _3292, _3298 * _3293, _3298 * _3294));
                        float _4629 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                        float _3309 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                        float _3313 = ((_3309 * _3309) * (_3291 + (-1.0))) + 1.0;
                        float _3314 = _3249 * _3290;
                        float _3315 = _3314 * _3314;
                        float _3318 = ((1.0 - _3315) * _3239) + _3315;
                        float _4640 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                        float _3319 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                        float _3320 = 1.0 - _3290;
                        float _3330 = (0.5 / (((_3319 * ((_3305 * _3320) + _3290)) + 9.9999999392252902907785028219223e-09) + (((_3319 * _3320) + _3290) * _3305))) * _3319;
                        float _4651 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                        float _3341 = (((_3291 * 3.1415927410125732421875) * (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0)))) / ((_3313 * _3313) * ((_3256 * 2.1991131305694580078125) + 3.141590118408203125))) * _3245;
                        _3093 = (_3260 * _3208.x) + _3166;
                        _3094 = (_3260 * _3208.y) + _3167;
                        _3095 = (_3260 * _3208.z) + _3168;
                        _3090 = (_3341 * _3225.x) + _3163;
                        _3091 = (_3341 * _3225.y) + _3164;
                        _3092 = (_3341 * _3225.z) + _3165;
                        if (_3170 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3163 = _3090;
                            _3164 = _3091;
                            _3165 = _3092;
                            _3166 = _3093;
                            _3167 = _3094;
                            _3168 = _3095;
                            _3169 = _3170;
                        }
                    }
                    frontier_phi_68_pred = _3092;
                    frontier_phi_68_pred_1 = _3095;
                    frontier_phi_68_pred_2 = _3094;
                    frontier_phi_68_pred_3 = _3093;
                    frontier_phi_68_pred_4 = _3091;
                    frontier_phi_68_pred_5 = _3090;
                }
                _2871 = frontier_phi_68_pred;
                _2877 = frontier_phi_68_pred_1;
                _2875 = frontier_phi_68_pred_2;
                _2873 = frontier_phi_68_pred_3;
                _2869 = frontier_phi_68_pred_4;
                _2867 = frontier_phi_68_pred_5;
                uint _3025 = _3024 + 1u;
                if (_3025 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3018 = _2867;
                    _3019 = _2869;
                    _3020 = _2871;
                    _3021 = _2873;
                    _3022 = _2875;
                    _3023 = _2877;
                    _3024 = _3025;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2866 = _2867;
            _2868 = _2869;
            _2870 = _2871;
            _2872 = _2873;
            _2874 = _2875;
            _2876 = _2877;
        }
        uvec4 _2880 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2881 = _2880.z;
        uint _2883 = (_2881 >> 8u) & 15u;
        float _2986;
        float _2988;
        float _2990;
        float _2992;
        float _2994;
        float _2996;
        if (((4294967295u << _2883) & _2764) == 0u)
        {
            _2986 = _2866;
            _2988 = _2868;
            _2990 = _2870;
            _2992 = _2872;
            _2994 = _2874;
            _2996 = _2876;
        }
        else
        {
            float _3011 = inversesqrt(dot(vec3(_2718, _2719, _2720), vec3(_2718, _2719, _2720)));
            float _3012 = _3011 * _2718;
            float _3013 = _3011 * _2719;
            float _3014 = _3011 * _2720;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2883 < ((_2881 >> 12u) & 15u))
            {
                float _2987;
                float _2989;
                float _2991;
                float _2993;
                float _2995;
                float _2997;
                float _3146 = _2866;
                float _3147 = _2868;
                float _3148 = _2870;
                float _3149 = _2872;
                float _3150 = _2874;
                float _3151 = _2876;
                uint _3152 = _2883;
                uint _3161;
                bool _3162;
                for (;;)
                {
                    _3161 = texelFetch(g_lightClassification, int((((_2758 << 5u) + (_2744 << 9u)) + (_3152 << 2u)) >> 2u)).x;
                    _3162 = _3161 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3162)
                    {
                        frontier_phi_79_pred = _3151;
                        frontier_phi_79_pred_1 = _3150;
                        frontier_phi_79_pred_2 = _3149;
                        frontier_phi_79_pred_3 = _3148;
                        frontier_phi_79_pred_4 = _3147;
                        frontier_phi_79_pred_5 = _3146;
                    }
                    else
                    {
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3359;
                        float _3360;
                        float _3649;
                        float _3650;
                        float _3651;
                        float _3652;
                        float _3653;
                        float _3654;
                        float _3368 = _3146;
                        float _3369 = _3147;
                        float _3370 = _3148;
                        float _3371 = _3149;
                        float _3372 = _3150;
                        float _3373 = _3151;
                        uint _3374 = _3161;
                        uint _3375;
                        vec4 _3400;
                        float _3401;
                        vec4 _3416;
                        vec3 _3428;
                        vec4 _3443;
                        vec4 _3458;
                        float _3505;
                        bool _3506;
                        for (;;)
                        {
                            uint _3385 = ((_3152 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3374));
                            _3375 = (_3374 + 4294967295u) & _3374;
                            uint _3387 = _3385 * 40u;
                            _3400 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 3u)).x));
                            _3401 = _3400.w;
                            uint _3403 = (_3385 * 40u) + 4u;
                            _3416 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 3u)).x));
                            uint _3418 = (_3385 * 40u) + 8u;
                            _3428 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3418)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 2u)).x));
                            uint _3430 = (_3385 * 40u) + 16u;
                            _3443 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 3u)).x));
                            uint _3445 = (_3385 * 40u) + 20u;
                            _3458 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3445)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 3u)).x));
                            uint _3461 = (_3385 * 40u) + 24u;
                            vec4 _3474 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3461)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 3u)).x));
                            uint _3480 = (_3385 * 40u) + 28u;
                            vec4 _3493 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3480)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 3u)).x));
                            _3505 = fma(_2720, _3493.z, fma(_2719, _3493.y, _3493.x * _2718)) + _3493.w;
                            _3506 = !((fma(_2720, _3474.z, fma(_2719, _3474.y, _3474.x * _2718)) + _3474.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3506)
                            {
                                float _3533 = _3400.x - _2718;
                                float _3534 = _3400.y - _2719;
                                float _3535 = _3400.z - _2720;
                                float _3536 = dot(vec3(_3533, _3534, _3535), vec3(_3533, _3534, _3535));
                                float _3539 = inversesqrt(_3536);
                                float _3540 = _3539 * _3533;
                                float _3541 = _3539 * _3534;
                                float _3542 = _3539 * _3535;
                                float _3546 = 1.0 - (_3536 / (_3401 * _3401));
                                float _4662 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                                float _3547 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
                                float _3551 = sqrt(_3536) * _3416.w;
                                float _3553 = 1.39999997615814208984375 / (_3551 + 1.39999997615814208984375);
                                float _3554 = _3553 * _3553;
                                float _3557 = ((1.0 - _3554) * dot(vec3(_3540, _3541, _3542), vec3(_908, _911, _914))) + _3554;
                                float _3560 = _3551 * _3551;
                                float _3564 = (fma(_2720, _3443.z, fma(_2719, _3443.y, _3443.x * _2718)) + _3443.w) / _3505;
                                float _3565 = (fma(_2720, _3458.z, fma(_2719, _3458.y, _3458.x * _2718)) + _3458.w) / _3505;
                                float _3569 = 1.0 - dot(vec2(_3564, _3565), vec2(_3564, _3565));
                                float _4678 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                                float _3570 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                                float _3571 = _3570 * (((isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0))) * _3547) / ((_3560 * 0.699999988079071044921875) + 1.0));
                                float _3583 = exp2(log2(1.0 / ((_3560 * 3.5) + 5.0)) * 0.25);
                                float _3584 = 1.0 - _1028;
                                float _3591 = sqrt(1.0 - ((1.0 - (_3584 * _3584)) * (1.0 - (_3583 * _3583))));
                                float _3592 = _3591 * _3591;
                                float _3593 = _3592 * _3592;
                                float _3594 = _3540 - _3012;
                                float _3595 = _3541 - _3013;
                                float _3596 = _3542 - _3014;
                                float _3600 = inversesqrt(dot(vec3(_3594, _3595, _3596), vec3(_3594, _3595, _3596)));
                                float _3604 = dot(vec3(_908, _911, _914), vec3((-0.0) - _3012, (-0.0) - _3013, (-0.0) - _3014));
                                float _4689 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                                float _3607 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                                float _3608 = dot(vec3(_908, _911, _914), vec3(_3600 * _3594, _3600 * _3595, _3600 * _3596));
                                float _4700 = isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0));
                                float _3611 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                                float _3615 = ((_3611 * _3611) * (_3593 + (-1.0))) + 1.0;
                                float _3616 = _3553 * _3592;
                                float _3617 = _3616 * _3616;
                                float _3623 = ((1.0 - _3617) * dot(vec3(_908, _911, _914), vec3(_3540, _3541, _3542))) + _3617;
                                float _4711 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                                float _3624 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
                                float _3625 = 1.0 - _3592;
                                float _3635 = (0.5 / (((_3624 * ((_3607 * _3625) + _3592)) + 9.9999999392252902907785028219223e-09) + (((_3624 * _3625) + _3592) * _3607))) * _3624;
                                float _4722 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                                float _3645 = (_3570 * _3547) * (((_3593 * 3.1415927410125732421875) * (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0)))) / ((_3615 * _3615) * ((_3560 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3571 * _3416.z;
                                frontier_phi_85_pred_1 = _3571 * _3416.y;
                                frontier_phi_85_pred_2 = _3571 * _3416.x;
                                frontier_phi_85_pred_3 = _3645 * _3428.z;
                                frontier_phi_85_pred_4 = _3645 * _3428.y;
                                frontier_phi_85_pred_5 = _3645 * _3428.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3654 = frontier_phi_85_pred;
                            _3653 = frontier_phi_85_pred_1;
                            _3652 = frontier_phi_85_pred_2;
                            _3651 = frontier_phi_85_pred_3;
                            _3650 = frontier_phi_85_pred_4;
                            _3649 = frontier_phi_85_pred_5;
                            _3358 = _3652 + _3371;
                            _3359 = _3653 + _3372;
                            _3360 = _3654 + _3373;
                            _3355 = _3649 + _3368;
                            _3356 = _3650 + _3369;
                            _3357 = _3651 + _3370;
                            if (_3375 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3368 = _3355;
                                _3369 = _3356;
                                _3370 = _3357;
                                _3371 = _3358;
                                _3372 = _3359;
                                _3373 = _3360;
                                _3374 = _3375;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3360;
                        frontier_phi_79_pred_1 = _3359;
                        frontier_phi_79_pred_2 = _3358;
                        frontier_phi_79_pred_3 = _3357;
                        frontier_phi_79_pred_4 = _3356;
                        frontier_phi_79_pred_5 = _3355;
                    }
                    _2997 = frontier_phi_79_pred;
                    _2995 = frontier_phi_79_pred_1;
                    _2993 = frontier_phi_79_pred_2;
                    _2991 = frontier_phi_79_pred_3;
                    _2989 = frontier_phi_79_pred_4;
                    _2987 = frontier_phi_79_pred_5;
                    uint _3153 = _3152 + 1u;
                    if (_3153 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3146 = _2987;
                        _3147 = _2989;
                        _3148 = _2991;
                        _3149 = _2993;
                        _3150 = _2995;
                        _3151 = _2997;
                        _3152 = _3153;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2993;
                frontier_phi_60_61_ladder_1 = _2997;
                frontier_phi_60_61_ladder_2 = _2995;
                frontier_phi_60_61_ladder_3 = _2991;
                frontier_phi_60_61_ladder_4 = _2989;
                frontier_phi_60_61_ladder_5 = _2987;
            }
            else
            {
                frontier_phi_60_61_ladder = _2872;
                frontier_phi_60_61_ladder_1 = _2876;
                frontier_phi_60_61_ladder_2 = _2874;
                frontier_phi_60_61_ladder_3 = _2870;
                frontier_phi_60_61_ladder_4 = _2868;
                frontier_phi_60_61_ladder_5 = _2866;
            }
            _2986 = frontier_phi_60_61_ladder_5;
            _2988 = frontier_phi_60_61_ladder_4;
            _2990 = frontier_phi_60_61_ladder_3;
            _2992 = frontier_phi_60_61_ladder;
            _2994 = frontier_phi_60_61_ladder_2;
            _2996 = frontier_phi_60_61_ladder_1;
        }
        float _3001 = isnan(1.0) ? _1012 : (isnan(_1012) ? 1.0 : min(_1012, 1.0));
        _2776 = (_3001 * _2992) + _2213;
        _2778 = (_3001 * _2994) + _2215;
        _2780 = (_3001 * _2996) + _2217;
        _2782 = ((_2986 * _997) * _3001) + _2558;
        _2784 = ((_2988 * _999) * _3001) + _2560;
        _2786 = ((_2990 * _1000) * _3001) + _2562;
    }
    else
    {
        _2776 = _2213;
        _2778 = _2215;
        _2780 = _2217;
        _2782 = _2558;
        _2784 = _2560;
        _2786 = _2562;
    }
    float _4738 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _4749 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _4760 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _4771 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _2804 = ((isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))) * (_2776 + ((isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))) * _1012))) + ((_2782 + ((isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0))) * _1853)) * cbPerFrame._m0[3u].x);
    float _2805 = ((isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0))) * (_2778 + ((isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))) * _1012))) + ((_2784 + ((isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0))) * _1853)) * cbPerFrame._m0[3u].x);
    float _2806 = ((isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0))) * (_2780 + ((isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))) * _1012))) + ((_2786 + ((isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0))) * _1853)) * cbPerFrame._m0[3u].x);
    float _2811 = cbInstanceData._m0[_940 + 6u].w * (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0)));
    float _2816 = _885 / cbSceneParam._m0[86u].x;
    float _2817 = _886 / cbSceneParam._m0[86u].y;
    vec4 _2831 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2816, _2817, (log2((isnan(cbSceneParam._m0[77u].w) ? _808 : (isnan(_808) ? cbSceneParam._m0[77u].w : min(_808, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2833 = _2831.x;
    float _2834 = _2831.y;
    float _2835 = _2831.z;
    float _2836 = _2831.w;
    float _2928;
    float _2930;
    float _2932;
    float _2934;
    if (_808 > cbSceneParam._m0[78u].w)
    {
        float _2891 = isnan(_808) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _808 : min(cbSceneParam._m0[80u].w, _808));
        float _2892 = _2891 / _808;
        float _2903 = _2892 * _858;
        float _2904 = _859 * _2892;
        float _2905 = (-0.0) - _2904;
        float _2906 = _2892 * _860;
        float _2908 = (cbSceneParam._m0[77u].w * _2905) / _2891;
        float _2909 = _2908 + cbSceneParam._m0[79u].w;
        float _2910 = cbSceneParam._m0[79u].w - _2904;
        float _2916 = sqrt(((_2903 * _2903) + (_2904 * _2904)) + (_2906 * _2906));
        float _2919 = (1.0 - (cbSceneParam._m0[77u].w / _2891)) * _2916;
        float _2924 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2926 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3103;
        if (abs((_2905 - _2908) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3103 = ((((_2909 > 0.0) ? exp2(_2924 * _2909) : (2.0 - exp2(_2926 * _2909))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2919;
        }
        else
        {
            float _3047 = 1.0 / cbSceneParam._m0[80u].x;
            float _3048 = isnan(_2910) ? _2909 : (isnan(_2909) ? _2910 : max(_2909, _2910));
            float _3049 = isnan(_2910) ? _2909 : (isnan(_2909) ? _2910 : min(_2909, _2910));
            float _3058 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : min(_3048, 0.0));
            float _3059 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : min(_3049, 0.0));
            _3103 = ((abs(_2916 / _2905) * cbSceneParam._m0[80u].y) * ((((_3058 - _3059) * 2.0) - ((exp2(_2924 * (isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0)))) - exp2(_2924 * (isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0))))) * _3047)) - ((exp2(_2926 * _3058) - exp2(_2926 * _3059)) * _3047))) + (_2919 * cbSceneParam._m0[80u].z);
        }
        vec4 _3105 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2816, _2817, 1.0), 0.0);
        float _3114 = exp2((_3103 * (-1.44269502162933349609375)) * (1.0 - _3105.w));
        float _3115 = log2(_3114);
        float _3131 = log2(_2836);
        _2928 = (exp2(_3131 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3115 * cbSceneParam._m0[78u].x)) * _3105.x) / cbSceneParam._m0[78u].x)) + _2833;
        _2930 = (exp2(_3131 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3115 * cbSceneParam._m0[78u].y)) * _3105.y) / cbSceneParam._m0[78u].y)) + _2834;
        _2932 = (exp2(_3131 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3115 * cbSceneParam._m0[78u].z)) * _3105.z) / cbSceneParam._m0[78u].z)) + _2835;
        _2934 = _3114 * _2836;
    }
    else
    {
        _2928 = _2833;
        _2930 = _2834;
        _2932 = _2835;
        _2934 = _2836;
    }
    bool _3141;
    vec4 _2944;
    vec4 _2966;
    float _2968;
    float _2972;
    float _2973;
    float _2974;
    float _2975;
    bool _2985;
    for (;;)
    {
        _2944 = cbMatDynParam._m0[0u];
        float _2946 = roundEven(_2944.y);
        bool _2947 = _2946 == 3.0;
        float _2948 = log2(_2934);
        float _2955 = exp2(_2948 * cbSceneParam._m0[78u].x) * _2804;
        float _2956 = exp2(_2948 * cbSceneParam._m0[78u].y) * _2805;
        float _2957 = exp2(_2948 * cbSceneParam._m0[78u].z) * _2806;
        float _2964 = _874 + (-0.5);
        _2966 = cbMtdParam._m0[1u];
        _2968 = _2966.y * _2964;
        float _2971 = (_2946 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2972 = _2971 * (_2947 ? _2955 : (_2955 + (cbSceneParam._m0[72u].w * _2928)));
        _2973 = _2971 * (_2947 ? _2956 : (_2956 + (cbSceneParam._m0[72u].w * _2930)));
        _2974 = _2971 * (_2947 ? _2957 : (_2957 + (cbSceneParam._m0[72u].w * _2932)));
        _2975 = _2964 * 0.999000012874603271484375;
        _2985 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2985)
        {
            if ((cbInstanceData._m0[_940 + 7u].x + _2975) < 0.5)
            {
                _3141 = true;
                break;
            }
        }
        uint _3082 = _941 + uint(_2944.w);
        if ((cbInstanceData._m0[_3082].w < 1.0) && ((cbInstanceData._m0[_3082].w + _2975) < 0.5))
        {
            _3141 = true;
            break;
        }
        if ((_2968 + _574) < _2966.x)
        {
            _3141 = true;
            break;
        }
        _3141 = false;
        break;
    }
    float _3346;
    if (_3141)
    {
        discard_state = true;
        _3346 = 0.0;
    }
    else
    {
        _3346 = _2811;
    }
    SV_Target.x = _2972;
    SV_Target.y = _2973;
    SV_Target.z = _2974;
    SV_Target.w = _3346;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2811;
    discard_exit();
}


