#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_snp_0_Texture2D_2;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D P_ACParts_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D P_ACParts_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D P_ACParts_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_snp_0_Texture2D_1;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_snp_0_Texture2D_10;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_snp_0_Texture2D_11;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_snp_0_Texture2D_12;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_snp_0_Texture2D_13;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_snp_0_Texture2D_14;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_snp_0_Texture2D_15;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1374;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = _236 * NORMAL.x;
    float _238 = _236 * NORMAL.y;
    float _239 = _236 * NORMAL.z;
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _251;
    float _252;
    float _253;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _251 = (-0.0) - _237;
        _252 = (-0.0) - _238;
        _253 = (-0.0) - _239;
    }
    else
    {
        _251 = _237;
        _252 = _238;
        _253 = _239;
    }
    float _263 = cbMtdParam._m0[21u].z + TEXCOORD.y;
    vec4 _276 = texture(sampler2D(P_ACParts_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (_263 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _281 = _276.z;
    float _282 = _276.w;
    float _290 = exp2(log2(_281 * cbMtdParam._m0[20u].w) * cbMtdParam._m0[19u].y);
    float _291 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _292 = isnan(1.0) ? _291 : (isnan(_291) ? 1.0 : min(_291, 1.0));
    float _298 = exp2(log2(1.0 - _282) * cbMtdParam._m0[20u].y);
    vec4 _310 = texture(sampler2D(P_ACParts_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _263) + cbTextureTilingScale._m0[0u].w));
    float _199[6];
    float _200[6];
    float _201[6];
    _199[0u] = cbMtdParam._m0[12u].x;
    _200[0u] = cbMtdParam._m0[12u].y;
    _201[0u] = cbMtdParam._m0[12u].z;
    _199[1u] = cbMtdParam._m0[13u].x;
    _200[1u] = cbMtdParam._m0[13u].y;
    _201[1u] = cbMtdParam._m0[13u].z;
    _199[2u] = cbMtdParam._m0[14u].x;
    _200[2u] = cbMtdParam._m0[14u].y;
    _201[2u] = cbMtdParam._m0[14u].z;
    _199[3u] = cbMtdParam._m0[15u].x;
    _200[3u] = cbMtdParam._m0[15u].y;
    _201[3u] = cbMtdParam._m0[15u].z;
    _199[4u] = cbMtdParam._m0[16u].x;
    _200[4u] = cbMtdParam._m0[16u].y;
    _201[4u] = cbMtdParam._m0[16u].z;
    _199[5u] = cbMtdParam._m0[11u].x;
    _200[5u] = cbMtdParam._m0[11u].y;
    _201[5u] = cbMtdParam._m0[11u].z;
    vec4 _392 = texture(sampler2D(P_ACParts_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _394 = _392.x;
    float _395 = _392.y;
    float _423 = roundEven(((_394 + (-0.02500000037252902984619140625)) + ((_392.z * cbMtdParam._m0[19u].w) * (texture(sampler2D(P_ACParts_snp_0_Texture2D_15, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, ((cbMtdParam._m0[19u].z * TEXCOORD.y) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w)).x - _394))) * 6.0);
    float _424 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    uint _427 = uint(int(isnan(5.0) ? _424 : (isnan(_424) ? 5.0 : min(_424, 5.0))));
    vec4 _457 = texture(sampler2D(P_ACParts_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _263) + cbTextureTilingScale._m0[3u].w));
    float _467 = cbMtdParam._m0[9u].x * _457.x;
    float _468 = cbMtdParam._m0[9u].y * _457.y;
    float _469 = cbMtdParam._m0[9u].z * _457.z;
    float _476 = ((((((_199[_427] - cbMtdParam._m0[10u].x) * _395) + cbMtdParam._m0[10u].x) * _310.x) - _467) * _298) + _467;
    float _477 = ((((((_200[_427] - cbMtdParam._m0[10u].y) * _395) + cbMtdParam._m0[10u].y) * _310.y) - _468) * _298) + _468;
    float _478 = ((((((_201[_427] - cbMtdParam._m0[10u].z) * _395) + cbMtdParam._m0[10u].z) * _310.z) - _469) * _298) + _469;
    float _482 = exp2(log2(_282) * cbMtdParam._m0[21u].y);
    vec4 _494 = texture(sampler2D(P_ACParts_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _263) + cbTextureTilingScale._m0[10u].w));
    vec4 _527 = texture(sampler2D(P_ACParts_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _538 = cbMtdParam._m0[18u].x * _527.x;
    float _539 = cbMtdParam._m0[18u].y * _527.y;
    float _540 = cbMtdParam._m0[18u].z * _527.z;
    vec4 _561 = texture(sampler2D(P_ACParts_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _263) + cbTextureTilingScale._m0[1u].w));
    float _569 = ((((((((cbMtdParam._m0[17u].x * _494.x) - _476) * _482) + _476) - _538) * _292) + _538) * 4.55000019073486328125) * _561.x;
    float _571 = ((((((((cbMtdParam._m0[17u].y * _494.y) - _477) * _482) + _477) - _539) * _292) + _539) * 4.55000019073486328125) * _561.y;
    float _573 = ((((((((cbMtdParam._m0[17u].z * _494.z) - _478) * _482) + _478) - _540) * _292) + _540) * 4.55000019073486328125) * _561.z;
    float _574 = _561.w * _310.w;
    vec4 _586 = texture(sampler2D(P_ACParts_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    float _588 = _586.x;
    float _606 = (((1.0 - _588) + texture(sampler2D(P_ACParts_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w)).x) * _292) + _588;
    float _625 = (((texture(sampler2D(P_ACParts_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _263) + cbTextureTilingScale._m0[6u].w)).x - _606) + cbMtdParam._m0[20u].z) * _298) + _606;
    float _648 = (((texture(sampler2D(P_ACParts_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - _625) + cbMtdParam._m0[22u].y) * _482) + _625;
    vec4 _660 = texture(sampler2D(P_ACParts_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * _263) + cbTextureTilingScale._m0[12u].w));
    vec4 _678 = texture(sampler2D(P_ACParts_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _263) + cbTextureTilingScale._m0[13u].w));
    float _680 = _678.x;
    float _681 = _678.y;
    float _684 = cbMtdParam._m0[19u].x + _678.z;
    float _687 = (((cbMtdParam._m0[20u].x + _660.z) - _684) * _298) + _684;
    vec4 _699 = texture(sampler2D(P_ACParts_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _263) + cbTextureTilingScale._m0[14u].w));
    vec4 _723 = texture(sampler2D(P_ACParts_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _725 = _723.x;
    float _726 = _723.y;
    float _729 = cbMtdParam._m0[21u].x + _723.z;
    float _732 = ((((_281 * 2.0) * ((((_699.z - _687) + cbMtdParam._m0[22u].x) * _482) + _687)) - _729) * _292) + _729;
    float _743 = ((_660.x - _680) * _298) + _680;
    float _744 = ((_660.y - _681) * _298) + _681;
    float _759 = (((((((_699.x - _743) * _482) + _743) - _725) * _292) + _725) * 2.0) + (-1.0);
    float _760 = (((((((_699.y - _744) * _482) + _744) - _726) * _292) + _726) * 2.0) + (-1.0);
    float _761 = dot(vec2(_759, _760), vec2(_759, _760));
    float _3747 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _766 = sqrt(1.0 - (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))));
    float _769 = _759 + (cbMtdParam._m0[21u].w * ((_276.x * 2.0) + (-1.0)));
    float _770 = _760 + (cbMtdParam._m0[21u].w * ((_276.y * 2.0) + (-1.0)));
    float _773 = fma(_766, _251, fma(_770, _243 * TANGENT.x, (_229 * _221) * _769));
    float _776 = fma(_766, _252, fma(_770, _243 * TANGENT.y, (_229 * _222) * _769));
    float _779 = fma(_766, _253, fma(_770, _243 * TANGENT.z, (_229 * _223) * _769));
    float _783 = inversesqrt(dot(vec3(_773, _776, _779), vec3(_773, _776, _779)));
    float _784 = _783 * _773;
    float _785 = _783 * _776;
    float _786 = _783 * _779;
    float _3758 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _787 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _3769 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _788 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
    float _3780 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _3791 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _3802 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _3813 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _792 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _808 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _848 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _858 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _848);
    float _859 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _848);
    float _860 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _848);
    float _864 = inversesqrt(dot(vec3(_858, _859, _860), vec3(_858, _859, _860)));
    float _865 = _858 * _864;
    float _866 = _859 * _864;
    float _867 = _860 * _864;
    float _873 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _874 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _876 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _878 = _876.w;
    float _896 = fma(_786, cbSceneParam._m0[5u].z, fma(_785, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _784));
    float _899 = fma(_786, cbSceneParam._m0[6u].z, fma(_785, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _784));
    float _902 = fma(_786, cbSceneParam._m0[7u].z, fma(_785, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _784));
    vec4 _904 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _915 = (((_904.y - _788) + (_904.w * _788)) * cbMtdParam._m0[3u].x) + _788;
    uint _928 = uint(roundEven(NORMAL.w)) * 13u;
    uint _930 = (_928 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _936 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0)))) * cbInstanceData._m0[_930].x;
    float _937 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0)))) * cbInstanceData._m0[_930].y;
    float _938 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0)))) * cbInstanceData._m0[_930].z;
    float _3824 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _939 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _3835 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _940 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _3846 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _941 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    vec4 _942 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _947 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _958 = (((_947.x - _792) + (_947.w * _792)) * cbMtdParam._m0[3u].x) + _792;
    float _971 = (cbMtdParam._m0[3u].x * (((_939 * _878) - _939) + _942.x)) + _939;
    float _972 = (cbMtdParam._m0[3u].x * (((_940 * _878) - _940) + _942.y)) + _940;
    float _973 = (cbMtdParam._m0[3u].x * (((_941 * _878) - _941) + _942.z)) + _941;
    float _974 = 1.0 - _958;
    float _975 = _974 * _971;
    float _976 = _974 * _972;
    float _977 = _974 * _973;
    float _982 = (_971 + (-0.039999999105930328369140625)) * _958;
    float _983 = (_972 + (-0.039999999105930328369140625)) * _958;
    float _984 = (_973 + (-0.039999999105930328369140625)) * _958;
    float _985 = _982 + 0.039999999105930328369140625;
    float _987 = _983 + 0.039999999105930328369140625;
    float _988 = _984 + 0.039999999105930328369140625;
    vec4 _997 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _873, cbSceneParam._m0[86u].y * _874));
    float _1000 = _997.x * TEXCOORD_4;
    float _1001 = dot(vec3(_784, _785, _786), vec3(_865, _866, _867));
    float _1004 = _1001 * 2.0;
    float _1008 = (_1004 * _784) - _865;
    float _1009 = (_1004 * _785) - _866;
    float _1010 = (_1004 * _786) - _867;
    float _1014 = abs(dot(vec3(_865, _866, _867), vec3(_784, _785, _786)));
    float _3857 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _1016 = sqrt(_915);
    float _1028 = exp2((_1016 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1016 * 3.0));
    float _1034 = (1.0 - _1028) * ((_1016 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1035 = _1028 * _1016;
    float _1063 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1067 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1071 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1373;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1098 = fma(_1071, cbModelParam._m0[26u].z, fma(_1067, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1063));
        float _1102 = fma(_1071, cbModelParam._m0[27u].z, fma(_1067, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1063));
        float _1106 = fma(_1071, cbModelParam._m0[28u].z, fma(_1067, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1063));
        float _1131 = _1063 + _784;
        float _1132 = _1067 + _785;
        float _1133 = _1071 + _786;
        float _1143 = fma(_1133, cbModelParam._m0[26u].z, fma(_1132, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1131)) - _1098;
        float _1144 = fma(_1133, cbModelParam._m0[27u].z, fma(_1132, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1131)) - _1102;
        float _1145 = fma(_1133, cbModelParam._m0[28u].z, fma(_1132, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1131)) - _1106;
        float _1149 = inversesqrt(dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145)));
        float _1162 = ((_1149 * _1143) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1098 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1163 = ((_1149 * _1144) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1102 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1164 = ((_1149 * _1145) / cbModelParam._m0[34u].z) + ((((((_1106 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        float _1201 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1167.x + (-0.5));
        float _1203 = _1201 * (_1167.y + (-0.5));
        float _1204 = _1201 * (_1167.z + (-0.5));
        float _1211 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1174.x + (-0.5));
        float _1213 = _1211 * (_1174.y + (-0.5));
        float _1214 = _1211 * (_1174.z + (-0.5));
        float _1221 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1181.x + (-0.5));
        float _1223 = _1221 * (_1181.y + (-0.5));
        float _1224 = _1221 * (_1181.z + (-0.5));
        float _1231 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1188.x + (-0.5));
        float _1233 = _1231 * (_1188.y + (-0.5));
        float _1234 = _1231 * (_1188.z + (-0.5));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = _1202 * 0.5;
        float _1239 = _1212 * 0.5;
        float _1240 = _1222 * 0.5;
        float _1241 = dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240));
        float _1246 = (_1241 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1241);
        float _1255 = (dot(vec3(_784, _785, _786), vec3(_1246 * _1238, _1246 * _1239, _1246 * _1240)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1265 = sqrt(((_1239 * _1239) + (_1238 * _1238)) + (_1240 * _1240)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _3905 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1267 + 1.0))) + _1272) * _1235;
        float _1282 = _1203 * 0.5;
        float _1283 = _1213 * 0.5;
        float _1284 = _1223 * 0.5;
        float _1285 = dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284));
        float _1290 = (_1285 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1285);
        float _1298 = (dot(vec3(_784, _785, _786), vec3(_1290 * _1282, _1290 * _1283, _1290 * _1284)) + 1.0) * 0.5;
        float _3916 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1307 = sqrt(((_1283 * _1283) + (_1282 * _1282)) + (_1284 * _1284)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _3927 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1309 = _1308 * 2.0;
        float _1313 = (1.0 - _1308) / (_1308 + 1.0);
        float _3938 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1323 = ((((1.0 - _1314) * (_1309 + 2.0)) * exp2(log2(isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1309 + 1.0))) + _1314) * _1236;
        float _1324 = _1204 * 0.5;
        float _1325 = _1214 * 0.5;
        float _1326 = _1224 * 0.5;
        float _1327 = dot(vec3(_1324, _1325, _1326), vec3(_1324, _1325, _1326));
        float _1332 = (_1327 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1327);
        float _1340 = (dot(vec3(_784, _785, _786), vec3(_1332 * _1324, _1332 * _1325, _1332 * _1326)) + 1.0) * 0.5;
        float _3949 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1349 = sqrt(((_1325 * _1325) + (_1324 * _1324)) + (_1326 * _1326)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _3960 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1351 = _1350 * 2.0;
        float _1355 = (1.0 - _1350) / (_1350 + 1.0);
        float _3971 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1365 = ((((1.0 - _1356) * (_1351 + 2.0)) * exp2(log2(isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_1351 + 1.0))) + _1356) * _1237;
        _1373 = _1204;
        _1375 = _1203;
        _1376 = _1202;
        _1377 = _1214;
        _1378 = _1213;
        _1379 = _1212;
        _1380 = _1224;
        _1381 = _1223;
        _1382 = _1222;
        _1383 = _1237;
        _1384 = _1236;
        _1385 = _1235;
        _1386 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
        _1387 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)));
        _1388 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)));
    }
    else
    {
        _1373 = _1374;
        _1375 = _1374;
        _1376 = _1374;
        _1377 = _1374;
        _1378 = _1374;
        _1379 = _1374;
        _1380 = _1374;
        _1381 = _1374;
        _1382 = _1374;
        _1383 = _1374;
        _1384 = _1374;
        _1385 = _1374;
        _1386 = 0.0;
        _1387 = 0.0;
        _1388 = 0.0;
    }
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1414 = fma(_1071, cbModelParam._m0[30u].z, fma(_1067, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1063));
        float _1418 = fma(_1071, cbModelParam._m0[31u].z, fma(_1067, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1063));
        float _1422 = fma(_1071, cbModelParam._m0[32u].z, fma(_1067, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1063));
        float _1445 = _1063 + _784;
        float _1446 = _1067 + _785;
        float _1447 = _1071 + _786;
        float _1457 = fma(_1447, cbModelParam._m0[30u].z, fma(_1446, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1445)) - _1414;
        float _1458 = fma(_1447, cbModelParam._m0[31u].z, fma(_1446, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1445)) - _1418;
        float _1459 = fma(_1447, cbModelParam._m0[32u].z, fma(_1446, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1445)) - _1422;
        float _1463 = inversesqrt(dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459)));
        float _1476 = ((_1463 * _1457) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1414 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1477 = ((_1463 * _1458) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1418 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1478 = ((_1463 * _1459) / cbModelParam._m0[35u].z) + ((((((_1422 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1480 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        vec4 _1487 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        vec4 _1494 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        vec4 _1501 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        float _1513 = exp2((_1480.w + (-0.5)) * 20.0) * 2.0;
        float _1514 = _1513 * (_1480.x + (-0.5));
        float _1515 = _1513 * (_1480.y + (-0.5));
        float _1516 = _1513 * (_1480.z + (-0.5));
        float _1523 = exp2((_1487.w + (-0.5)) * 20.0) * 2.0;
        float _1524 = _1523 * (_1487.x + (-0.5));
        float _1525 = _1523 * (_1487.y + (-0.5));
        float _1526 = _1523 * (_1487.z + (-0.5));
        float _1533 = exp2((_1494.w + (-0.5)) * 20.0) * 2.0;
        float _1534 = _1533 * (_1494.x + (-0.5));
        float _1535 = _1533 * (_1494.y + (-0.5));
        float _1536 = _1533 * (_1494.z + (-0.5));
        float _1543 = exp2((_1501.w + (-0.5)) * 20.0) * 2.0;
        float _1544 = _1543 * (_1501.x + (-0.5));
        float _1545 = _1543 * (_1501.y + (-0.5));
        float _1546 = _1543 * (_1501.z + (-0.5));
        float _1547 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1548 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1549 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1550 = _1514 * 0.5;
        float _1551 = _1524 * 0.5;
        float _1552 = _1534 * 0.5;
        float _1553 = dot(vec3(_1550, _1551, _1552), vec3(_1550, _1551, _1552));
        float _1558 = (_1553 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1553);
        float _1566 = (dot(vec3(_784, _785, _786), vec3(_1558 * _1550, _1558 * _1551, _1558 * _1552)) + 1.0) * 0.5;
        float _4012 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1575 = sqrt(((_1551 * _1551) + (_1550 * _1550)) + (_1552 * _1552)) / (_1547 + 9.9999997473787516355514526367188e-06);
        float _4023 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1577 = _1576 * 2.0;
        float _1581 = (1.0 - _1576) / (_1576 + 1.0);
        float _4034 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1591 = ((((1.0 - _1582) * (_1577 + 2.0)) * exp2(log2(isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_1577 + 1.0))) + _1582) * _1547;
        float _1592 = _1515 * 0.5;
        float _1593 = _1525 * 0.5;
        float _1594 = _1535 * 0.5;
        float _1595 = dot(vec3(_1592, _1593, _1594), vec3(_1592, _1593, _1594));
        float _1600 = (_1595 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1595);
        float _1608 = (dot(vec3(_784, _785, _786), vec3(_1600 * _1592, _1600 * _1593, _1600 * _1594)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1617 = sqrt(((_1593 * _1593) + (_1592 * _1592)) + (_1594 * _1594)) / (_1548 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1619 = _1618 * 2.0;
        float _1623 = (1.0 - _1618) / (_1618 + 1.0);
        float _4067 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1633 = ((((1.0 - _1624) * (_1619 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1619 + 1.0))) + _1624) * _1548;
        float _1634 = _1516 * 0.5;
        float _1635 = _1526 * 0.5;
        float _1636 = _1536 * 0.5;
        float _1637 = dot(vec3(_1634, _1635, _1636), vec3(_1634, _1635, _1636));
        float _1642 = (_1637 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1637);
        float _1650 = (dot(vec3(_784, _785, _786), vec3(_1642 * _1634, _1642 * _1635, _1642 * _1636)) + 1.0) * 0.5;
        float _4078 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1659 = sqrt(((_1635 * _1635) + (_1634 * _1634)) + (_1636 * _1636)) / (_1549 + 9.9999997473787516355514526367188e-06);
        float _4089 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1660 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1661 = _1660 * 2.0;
        float _1665 = (1.0 - _1660) / (_1660 + 1.0);
        float _4100 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1675 = ((((1.0 - _1666) * (_1661 + 2.0)) * exp2(log2(isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_1661 + 1.0))) + _1666) * _1549;
        _1683 = _1516;
        _1684 = _1515;
        _1685 = _1514;
        _1686 = _1526;
        _1687 = _1525;
        _1688 = _1524;
        _1689 = _1536;
        _1690 = _1535;
        _1691 = _1534;
        _1692 = _1549;
        _1693 = _1548;
        _1694 = _1547;
        _1695 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)));
        _1696 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)));
        _1697 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)));
    }
    else
    {
        _1683 = _1374;
        _1684 = _1374;
        _1685 = _1374;
        _1686 = _1374;
        _1687 = _1374;
        _1688 = _1374;
        _1689 = _1374;
        _1690 = _1374;
        _1691 = _1374;
        _1692 = _1374;
        _1693 = _1374;
        _1694 = _1374;
        _1695 = 0.0;
        _1696 = 0.0;
        _1697 = 0.0;
    }
    float _1707 = (cbModelParam._m0[1u].x * (_1695 - _1386)) + _1386;
    float _1708 = (cbModelParam._m0[1u].x * (_1696 - _1387)) + _1387;
    float _1709 = (cbModelParam._m0[1u].x * (_1697 - _1388)) + _1388;
    float _1730 = fma(_1709, cbSceneParam._m0[89u].z, fma(_1708, cbSceneParam._m0[89u].y, _1707 * cbSceneParam._m0[89u].x));
    float _1733 = fma(_1709, cbSceneParam._m0[90u].z, fma(_1708, cbSceneParam._m0[90u].y, _1707 * cbSceneParam._m0[90u].x));
    float _1736 = fma(_1709, cbSceneParam._m0[91u].z, fma(_1708, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1707));
    float _1751 = _1008 * 0.5;
    float _1752 = _1009 * 0.5;
    float _1753 = _1010 * 0.5;
    float _1754 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1685, _1688, _1691, _1694));
    float _1757 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1684, _1687, _1690, _1693));
    float _1760 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1683, _1686, _1689, _1692));
    float _1794;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1767 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1373, _1377, _1380, _1383));
        float _1771 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1375, _1378, _1381, _1384));
        float _1775 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1376, _1379, _1382, _1385));
        float _1782 = dot(vec4(cbModelParam._m0[39u]), vec4(_1751, _1752, _1753, 1.0));
        _1794 = dot(vec3(isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0)), isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)), isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1782) ? 0.0 : (isnan(0.0) ? _1782 : max(0.0, _1782))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1794 = 1.0;
    }
    float _1805;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1796 = dot(vec4(cbModelParam._m0[40u]), vec4(_1751, _1752, _1753, 1.0));
        _1805 = dot(vec3(isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)), isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)), isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1796) ? 0.0 : (isnan(0.0) ? _1796 : max(0.0, _1796))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1805 = 1.0;
    }
    float _1809 = (_1805 * cbModelParam._m0[1u].x) + (_1794 * (1.0 - cbModelParam._m0[1u].x));
    float _1819 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _915);
    float _1820 = isnan(_1819) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1819 : min(cbModelParam._m0[25u].z, _1819));
    float _1900;
    float _1902;
    float _1904;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1867 = fma(_1071, cbModelParam._m0[13u].z, fma(_1067, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1063)) + cbModelParam._m0[13u].w;
        float _1871 = fma(_1071, cbModelParam._m0[14u].z, fma(_1067, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1063)) + cbModelParam._m0[14u].w;
        float _1875 = fma(_1071, cbModelParam._m0[15u].z, fma(_1067, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1063)) + cbModelParam._m0[15u].w;
        float _1878 = fma(_1010, cbModelParam._m0[13u].z, fma(_1009, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1008));
        float _1881 = fma(_1010, cbModelParam._m0[14u].z, fma(_1009, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1008));
        float _1884 = fma(_1010, cbModelParam._m0[15u].z, fma(_1009, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1008));
        float _1912;
        if (_1878 > 0.0)
        {
            _1912 = abs((1.0 - _1867) / _1878);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1867 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1912 = frontier_phi_16_14_ladder;
        }
        float _2135;
        if (_1881 > 0.0)
        {
            _2135 = abs((1.0 - _1871) / _1881);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1881 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1871 + 1.0) / _1881);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2135 = frontier_phi_25_21_ladder;
        }
        float _2392;
        if (_1884 > 0.0)
        {
            _2392 = abs((1.0 - _1875) / _1884);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1875 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2392 = frontier_phi_37_32_ladder;
        }
        float _2394 = isnan(_2135) ? _1912 : (isnan(_1912) ? _2135 : min(_1912, _2135));
        float _2395 = isnan(_2392) ? _2394 : (isnan(_2394) ? _2392 : min(_2394, _2392));
        float _2399 = (_2395 * _1878) + _1867;
        float _2400 = (_2395 * _1881) + _1871;
        float _2401 = (_2395 * _1884) + _1875;
        float _2402 = _2395 * 9.9999997473787516355514526367188e-05;
        float _2404 = (-1.0) - _2402;
        float _2406 = _2402 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2401 > _2406) || ((_2401 < _2404) || ((_2400 > _2406) || ((_2400 < _2404) || ((_2399 < _2404) || (_2399 > _2406))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2529 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2401, cbModelParam._m0[9u].z, fma(_2400, cbModelParam._m0[9u].y, _2399 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2401, cbModelParam._m0[10u].z, fma(_2400, cbModelParam._m0[10u].y, _2399 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2401, cbModelParam._m0[11u].z, fma(_2400, cbModelParam._m0[11u].y, _2399 * cbModelParam._m0[11u].x))), _1820);
            frontier_phi_15_37_ladder = _2529.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2529.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2529.x * cbModelParam._m0[1u].y;
        }
        _1900 = frontier_phi_15_37_ladder_2;
        _1902 = frontier_phi_15_37_ladder_1;
        _1904 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1888 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1008, _1009, _1010), _1820);
        _1900 = _1888.x * cbModelParam._m0[1u].y;
        _1902 = _1888.y * cbModelParam._m0[1u].y;
        _1904 = _1888.z * cbModelParam._m0[1u].y;
    }
    float _1908 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _915);
    float _1909 = isnan(_1908) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1908 : min(cbModelParam._m0[25u].w, _1908));
    float _1998;
    float _2000;
    float _2002;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1962 = fma(_1071, cbModelParam._m0[21u].z, fma(_1067, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1063)) + cbModelParam._m0[21u].w;
        float _1966 = fma(_1071, cbModelParam._m0[22u].z, fma(_1067, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1063)) + cbModelParam._m0[22u].w;
        float _1970 = fma(_1071, cbModelParam._m0[23u].z, fma(_1067, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1063)) + cbModelParam._m0[23u].w;
        float _1973 = fma(_1010, cbModelParam._m0[21u].z, fma(_1009, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1008));
        float _1976 = fma(_1010, cbModelParam._m0[22u].z, fma(_1009, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1008));
        float _1979 = fma(_1010, cbModelParam._m0[23u].z, fma(_1009, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1008));
        float _2140;
        if (_1973 > 0.0)
        {
            _2140 = abs((1.0 - _1962) / _1973);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1973 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1962 + 1.0) / _1973);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2140 = frontier_phi_27_23_ladder;
        }
        float _2419;
        if (_1976 > 0.0)
        {
            _2419 = abs((1.0 - _1966) / _1976);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1976 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1966 + 1.0) / _1976);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2419 = frontier_phi_39_34_ladder;
        }
        float _2632;
        if (_1979 > 0.0)
        {
            _2632 = abs((1.0 - _1970) / _1979);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1979 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1970 + 1.0) / _1979);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2632 = frontier_phi_48_45_ladder;
        }
        float _2634 = isnan(_2419) ? _2140 : (isnan(_2140) ? _2419 : min(_2140, _2419));
        float _2635 = isnan(_2632) ? _2634 : (isnan(_2634) ? _2632 : min(_2634, _2632));
        float _2639 = (_2635 * _1973) + _1962;
        float _2640 = (_2635 * _1976) + _1966;
        float _2641 = (_2635 * _1979) + _1970;
        float _2642 = _2635 * 9.9999997473787516355514526367188e-05;
        float _2643 = (-1.0) - _2642;
        float _2645 = _2642 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2641 > _2645) || ((_2641 < _2643) || ((_2640 > _2645) || ((_2640 < _2643) || ((_2639 < _2643) || (_2639 > _2645))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2841 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2641, cbModelParam._m0[17u].z, fma(_2640, cbModelParam._m0[17u].y, _2639 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2641, cbModelParam._m0[18u].z, fma(_2640, cbModelParam._m0[18u].y, _2639 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2641, cbModelParam._m0[19u].z, fma(_2640, cbModelParam._m0[19u].y, _2639 * cbModelParam._m0[19u].x))), _1909);
            frontier_phi_24_48_ladder = _2841.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2841.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2841.x * cbModelParam._m0[1u].z;
        }
        _1998 = frontier_phi_24_48_ladder_2;
        _2000 = frontier_phi_24_48_ladder_1;
        _2002 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1982 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1008, _1009, _1010), _1909);
        _1998 = _1982.x * cbModelParam._m0[1u].z;
        _2000 = _1982.y * cbModelParam._m0[1u].z;
        _2002 = _1982.z * cbModelParam._m0[1u].z;
    }
    float _2015 = (((_1034 * _985) + _1035) * _1000) * ((cbModelParam._m0[1u].w * (_1998 - _1900)) + _1900);
    float _2017 = (((_1034 * _987) + _1035) * _1000) * ((cbModelParam._m0[1u].w * (_2000 - _1902)) + _1902);
    float _2019 = (((_1034 * _988) + _1035) * _1000) * ((cbModelParam._m0[1u].w * (_2002 - _1904)) + _1904);
    float _2022 = fma(_2019, cbSceneParam._m0[89u].z, fma(_2017, cbSceneParam._m0[89u].y, _2015 * cbSceneParam._m0[89u].x));
    float _2025 = fma(_2019, cbSceneParam._m0[90u].z, fma(_2017, cbSceneParam._m0[90u].y, _2015 * cbSceneParam._m0[90u].x));
    float _2028 = fma(_2019, cbSceneParam._m0[91u].z, fma(_2017, cbSceneParam._m0[91u].y, _2015 * cbSceneParam._m0[91u].x));
    vec4 _2036 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_873, _874));
    float _2038 = _2036.w;
    float _2050 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2038);
    float _2051 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2038);
    float _2052 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2038);
    uvec4 _2056 = floatBitsToUint(cbInstanceData._m0[_928 + 5u]);
    uint _2058 = _2056.x * 14u;
    uint _2059 = _2058 + 13u;
    float _2066 = _1000 + (-1.0);
    float _2071 = (cbLight._m0[_2059].x * _2066) + 1.0;
    float _2072 = (cbLight._m0[_2059].y * _2066) + 1.0;
    float _2073 = (cbLight._m0[_2059].z * _2066) + 1.0;
    float _2074 = (cbLight._m0[_2059].w * _2066) + 1.0;
    uint _2075 = _2058 + 5u;
    float _2081 = isnan(1.0) ? _2072 : (isnan(_2072) ? 1.0 : min(_2072, 1.0));
    uint _2085 = _2058 + 4u;
    float _2094 = isnan(1.0) ? _2071 : (isnan(_2071) ? 1.0 : min(_2071, 1.0));
    uint _2098 = _2058 | 1u;
    float _2109 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_784, _785, _786));
    float _2112 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_784, _785, _786));
    float _4236 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _4247 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2117 = (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * 0.3183098733425140380859375;
    float _2119 = (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * 0.3183098733425140380859375;
    float _2126 = ((cbLight._m0[_2075].x * _2081) * _2119) + (((cbLight._m0[_2085].x * _2050) * _2094) * _2117);
    float _2127 = ((_2081 * cbLight._m0[_2075].y) * _2119) + (((cbLight._m0[_2085].y * _2051) * _2094) * _2117);
    float _2128 = ((_2081 * cbLight._m0[_2075].z) * _2119) + (((cbLight._m0[_2085].z * _2052) * _2094) * _2117);
    uvec4 _2132 = floatBitsToUint(cbLight._m0[_2058 + 12u]);
    bool _2134 = _2132.x == 0u;
    float _2145;
    float _2147;
    float _2149;
    if (_2134)
    {
        _2145 = _2126;
        _2147 = _2127;
        _2149 = _2128;
    }
    else
    {
        uint _2153 = _2058 + 6u;
        float _2169 = (dot(vec3(cbLight._m0[_2058 + 2u].xyz), vec3(_784, _785, _786)) * 0.5) + 0.5;
        float _2170 = _2169 * _2169;
        float _4258 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2171 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _2172 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
        _2145 = (((cbLight._m0[_2153].x * 0.3183098733425140380859375) * _2171) * _2172) + _2126;
        _2147 = (((cbLight._m0[_2153].y * 0.3183098733425140380859375) * _2171) * _2172) + _2127;
        _2149 = (((cbLight._m0[_2153].z * 0.3183098733425140380859375) * _2171) * _2172) + _2128;
    }
    bool _2152 = _2132.y == 0u;
    float _2190;
    float _2192;
    float _2194;
    if (_2152)
    {
        _2190 = _2145;
        _2192 = _2147;
        _2194 = _2149;
    }
    else
    {
        uint _2363 = _2058 + 7u;
        float _2379 = (dot(vec3(cbLight._m0[_2058 + 3u].xyz), vec3(_784, _785, _786)) * 0.5) + 0.5;
        float _2380 = _2379 * _2379;
        float _4274 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2381 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _2382 = isnan(1.0) ? _2074 : (isnan(_2074) ? 1.0 : min(_2074, 1.0));
        _2190 = (((cbLight._m0[_2363].x * 0.3183098733425140380859375) * _2381) * _2382) + _2145;
        _2192 = (((cbLight._m0[_2363].y * 0.3183098733425140380859375) * _2381) * _2382) + _2147;
        _2194 = (((cbLight._m0[_2363].z * 0.3183098733425140380859375) * _2381) * _2382) + _2149;
    }
    uint _2197 = _2058 + 8u;
    float _2210 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2058].w)) * _915) * 0.949999988079071044921875);
    float _2211 = _2210 * _2210;
    float _2212 = cbLight._m0[_2058].x + _865;
    float _2213 = cbLight._m0[_2058].y + _866;
    float _2214 = cbLight._m0[_2058].z + _867;
    float _2218 = inversesqrt(dot(vec3(_2212, _2213, _2214), vec3(_2212, _2213, _2214)));
    float _2219 = _2218 * _2212;
    float _2220 = _2218 * _2213;
    float _2221 = _2218 * _2214;
    float _2222 = dot(vec3(_784, _785, _786), vec3(cbLight._m0[_2058].xyz));
    float _4290 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2225 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
    float _4301 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _2226 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
    float _2227 = dot(vec3(_784, _785, _786), vec3(_2219, _2220, _2221));
    float _4312 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2230 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
    float _2231 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_2219, _2220, _2221));
    float _4323 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2235 = _2211 * _2211;
    float _2239 = ((_2230 * _2230) * (_2235 + (-1.0))) + 1.0;
    float _2247 = exp2(log2(1.0 - (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0)))) * 5.0);
    float _2248 = 0.959999978542327880859375 - _982;
    float _2250 = 0.959999978542327880859375 - _983;
    float _2251 = 0.959999978542327880859375 - _984;
    float _2258 = 1.0 - _2211;
    float _2269 = (0.5 / (((_2226 * ((_2225 * _2258) + _2211)) + 9.9999999392252902907785028219223e-09) + (((_2226 * _2258) + _2211) * _2225))) * _2225;
    float _4334 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2271 = (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_2235 / ((_2239 * _2239) * 3.141590118408203125));
    uint _2285 = _2058 + 9u;
    float _2296 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2098].w)) * _915) * 0.949999988079071044921875);
    float _2297 = _2296 * _2296;
    float _2298 = cbLight._m0[_2098].x + _865;
    float _2299 = cbLight._m0[_2098].y + _866;
    float _2300 = cbLight._m0[_2098].z + _867;
    float _2304 = inversesqrt(dot(vec3(_2298, _2299, _2300), vec3(_2298, _2299, _2300)));
    float _2305 = _2304 * _2298;
    float _2306 = _2304 * _2299;
    float _2307 = _2304 * _2300;
    float _2308 = dot(vec3(_784, _785, _786), vec3(cbLight._m0[_2098].xyz));
    float _4345 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2311 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
    float _2312 = dot(vec3(_784, _785, _786), vec3(_2305, _2306, _2307));
    float _4356 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2315 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
    float _2316 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_2305, _2306, _2307));
    float _4367 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2320 = _2297 * _2297;
    float _2324 = ((_2315 * _2315) * (_2320 + (-1.0))) + 1.0;
    float _2331 = exp2(log2(1.0 - (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0)))) * 5.0);
    float _2338 = 1.0 - _2297;
    float _2348 = (0.5 / (((_2226 * ((_2311 * _2338) + _2297)) + 9.9999999392252902907785028219223e-09) + (((_2226 * _2338) + _2297) * _2311))) * _2311;
    float _4378 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2350 = (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_2320 / ((_2324 * _2324) * 3.141590118408203125));
    float _2360 = (((((_2331 * _2248) + _985) * cbLight._m0[_2285].x) * _2350) * _2081) + ((((cbLight._m0[_2197].x * _2050) * ((_2247 * _2248) + _985)) * _2271) * _2094);
    float _2361 = (((((_2331 * _2250) + _987) * cbLight._m0[_2285].y) * _2350) * _2081) + ((((cbLight._m0[_2197].y * _2051) * ((_2247 * _2250) + _987)) * _2271) * _2094);
    float _2362 = (((((_2331 * _2251) + _988) * cbLight._m0[_2285].z) * _2350) * _2081) + ((((cbLight._m0[_2197].z * _2052) * ((_2247 * _2251) + _988)) * _2271) * _2094);
    float _2424;
    float _2426;
    float _2428;
    if (_2134)
    {
        _2424 = _2360;
        _2426 = _2361;
        _2428 = _2362;
    }
    else
    {
        uint _2430 = _2058 + 2u;
        uint _2434 = _2058 + 10u;
        float _2448 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2430].w)) * _915) * 0.949999988079071044921875);
        float _2449 = _2448 * _2448;
        float _2450 = cbLight._m0[_2430].x + _865;
        float _2451 = cbLight._m0[_2430].y + _866;
        float _2452 = cbLight._m0[_2430].z + _867;
        float _2456 = inversesqrt(dot(vec3(_2450, _2451, _2452), vec3(_2450, _2451, _2452)));
        float _2457 = _2456 * _2450;
        float _2458 = _2456 * _2451;
        float _2459 = _2456 * _2452;
        float _2460 = dot(vec3(_784, _785, _786), vec3(cbLight._m0[_2430].xyz));
        float _4389 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2463 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _2464 = dot(vec3(_784, _785, _786), vec3(_2457, _2458, _2459));
        float _4400 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2467 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _2468 = dot(vec3(cbLight._m0[_2430].xyz), vec3(_2457, _2458, _2459));
        float _4411 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2472 = _2449 * _2449;
        float _2476 = ((_2467 * _2467) * (_2472 + (-1.0))) + 1.0;
        float _2483 = exp2(log2(1.0 - (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0)))) * 5.0);
        float _2490 = 1.0 - _2449;
        float _2500 = (0.5 / (((_2226 * ((_2463 * _2490) + _2449)) + 9.9999999392252902907785028219223e-09) + (((_2226 * _2490) + _2449) * _2463))) * _2463;
        float _4422 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        float _2502 = (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_2472 / ((_2476 * _2476) * 3.141590118408203125));
        float _2503 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
        _2424 = (((((_2483 * _2248) + _985) * cbLight._m0[_2434].x) * _2502) * _2503) + _2360;
        _2426 = (((((_2483 * _2250) + _987) * cbLight._m0[_2434].y) * _2502) * _2503) + _2361;
        _2428 = (((((_2483 * _2251) + _988) * cbLight._m0[_2434].z) * _2502) * _2503) + _2362;
    }
    float _2538;
    float _2540;
    float _2542;
    if (_2152)
    {
        _2538 = _2424;
        _2540 = _2426;
        _2542 = _2428;
    }
    else
    {
        uint _2549 = _2058 + 3u;
        uint _2553 = _2058 + 11u;
        float _2567 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2549].w)) * _915) * 0.949999988079071044921875);
        float _2568 = _2567 * _2567;
        float _2569 = cbLight._m0[_2549].x + _865;
        float _2570 = cbLight._m0[_2549].y + _866;
        float _2571 = cbLight._m0[_2549].z + _867;
        float _2575 = inversesqrt(dot(vec3(_2569, _2570, _2571), vec3(_2569, _2570, _2571)));
        float _2576 = _2575 * _2569;
        float _2577 = _2575 * _2570;
        float _2578 = _2575 * _2571;
        float _2579 = dot(vec3(_784, _785, _786), vec3(cbLight._m0[_2549].xyz));
        float _4438 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2582 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _2583 = dot(vec3(_784, _785, _786), vec3(_2576, _2577, _2578));
        float _4449 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        float _2586 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _2587 = dot(vec3(cbLight._m0[_2549].xyz), vec3(_2576, _2577, _2578));
        float _4460 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2591 = _2568 * _2568;
        float _2595 = ((_2586 * _2586) * (_2591 + (-1.0))) + 1.0;
        float _2602 = exp2(log2(1.0 - (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)))) * 5.0);
        float _2609 = 1.0 - _2568;
        float _2619 = (0.5 / (((_2226 * ((_2582 * _2609) + _2568)) + 9.9999999392252902907785028219223e-09) + (((_2226 * _2609) + _2568) * _2582))) * _2582;
        float _4471 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2621 = (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_2591 / ((_2595 * _2595) * 3.141590118408203125));
        float _2622 = isnan(1.0) ? _2074 : (isnan(_2074) ? 1.0 : min(_2074, 1.0));
        _2538 = (((((_2602 * _2248) + _985) * cbLight._m0[_2553].x) * _2621) * _2622) + _2424;
        _2540 = (((((_2602 * _2250) + _987) * cbLight._m0[_2553].y) * _2621) * _2622) + _2426;
        _2542 = (((((_2602 * _2251) + _988) * cbLight._m0[_2553].z) * _2621) * _2622) + _2428;
    }
    float _2756;
    float _2758;
    float _2760;
    float _2762;
    float _2764;
    float _2766;
    if (_2056.y == 0u)
    {
        float _2697 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2698 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2697;
        float _2699 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2697;
        float _2700 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2697;
        uvec4 _2712 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2713 = _2712.x;
        uint _2724 = uint((float(_2712.y) * floor(float(uint(cbSceneParam._m0[85u].y * _874) / _2713))) + floor(float(uint(cbSceneParam._m0[85u].x * _873) / _2713)));
        float _2734 = (log2(_2700 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2735 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
        uint _2738 = uint(isnan(14.0) ? _2735 : (isnan(_2735) ? 14.0 : min(_2735, 14.0)));
        uvec4 _2743 = texelFetch(g_lightClusterGridBuffer, int(((_2738 << 2u) + (_2724 << 6u)) >> 2u));
        uint _2744 = _2743.x;
        uint _2745 = _2712.z;
        float _2846;
        float _2848;
        float _2850;
        float _2852;
        float _2854;
        float _2856;
        if (((((1u << ((_2745 >> 4u) & 15u)) + 4294967295u) & _2744) == 0u) || ((_2745 & 240u) == 0u))
        {
            _2846 = 0.0;
            _2848 = 0.0;
            _2850 = 0.0;
            _2852 = 0.0;
            _2854 = 0.0;
            _2856 = 0.0;
        }
        else
        {
            float _2847;
            float _2849;
            float _2851;
            float _2853;
            float _2855;
            float _2857;
            float _2990 = 0.0;
            float _2991 = 0.0;
            float _2992 = 0.0;
            float _2993 = 0.0;
            float _2994 = 0.0;
            float _2995 = 0.0;
            uint _2996 = 0u;
            uint _3005;
            bool _3006;
            for (;;)
            {
                _3005 = texelFetch(g_lightClassification, int((((_2738 << 5u) + (_2724 << 9u)) + (_2996 << 2u)) >> 2u)).x;
                _3006 = _3005 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_3006)
                {
                    frontier_phi_63_pred = _2995;
                    frontier_phi_63_pred_1 = _2994;
                    frontier_phi_63_pred_2 = _2993;
                    frontier_phi_63_pred_3 = _2992;
                    frontier_phi_63_pred_4 = _2991;
                    frontier_phi_63_pred_5 = _2990;
                }
                else
                {
                    float _3114;
                    float _3115;
                    float _3116;
                    float _3117;
                    float _3118;
                    float _3119;
                    uint _3120;
                    _3114 = _2990;
                    _3115 = _2991;
                    _3116 = _2992;
                    _3117 = _2993;
                    _3118 = _2994;
                    _3119 = _2995;
                    _3120 = _3005;
                    float _3046;
                    float _3047;
                    float _3048;
                    float _3049;
                    float _3050;
                    float _3051;
                    for (;;)
                    {
                        uint _3124 = uint(findLSB(_3120)) + (_2996 << 5u);
                        uint _3121 = (_3120 + 4294967295u) & _3120;
                        uint _3126 = _3124 * 48u;
                        vec4 _3140 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3126)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 3u)).x));
                        uint _3146 = (_3124 * 48u) + 4u;
                        vec4 _3159 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3146)).x, texelFetch(g_PointLightRenderingBuffer, int(_3146 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3146 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3146 + 3u)).x));
                        uint _3165 = (_3124 * 48u) + 8u;
                        vec3 _3176 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3165)).x, texelFetch(g_PointLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3165 + 2u)).x));
                        float _3180 = _3140.x - _2698;
                        float _3181 = _3140.y - _2699;
                        float _3182 = _3140.z - _2700;
                        float _3183 = dot(vec3(_3180, _3181, _3182), vec3(_3180, _3181, _3182));
                        float _3186 = inversesqrt(_3183);
                        float _3187 = _3186 * _3180;
                        float _3188 = _3186 * _3181;
                        float _3189 = _3186 * _3182;
                        float _3190 = dot(vec3(_896, _899, _902), vec3(_3187, _3188, _3189));
                        float _3195 = 1.0 - (_3183 * _3140.w);
                        float _4497 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                        float _3196 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                        float _3197 = sqrt(_3183) * _3159.w;
                        float _3200 = 1.39999997615814208984375 / (_3197 + 1.39999997615814208984375);
                        float _3201 = _3200 * _3200;
                        float _3204 = ((1.0 - _3201) * _3190) + _3201;
                        float _3207 = _3197 * _3197;
                        float _3211 = ((isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0))) * _3196) / ((_3207 * 0.699999988079071044921875) + 1.0);
                        float _3215 = (-0.0) - _2698;
                        float _3216 = (-0.0) - _2699;
                        float _3217 = (-0.0) - _2700;
                        float _3221 = inversesqrt(dot(vec3(_3215, _3216, _3217), vec3(_3215, _3216, _3217)));
                        float _3222 = _3221 * _3215;
                        float _3223 = _3221 * _3216;
                        float _3224 = _3221 * _3217;
                        float _3232 = exp2(log2(1.0 / ((_3207 * 3.5) + 5.0)) * 0.25);
                        float _3233 = 1.0 - _1016;
                        float _3240 = sqrt(1.0 - ((1.0 - (_3233 * _3233)) * (1.0 - (_3232 * _3232))));
                        float _3241 = _3240 * _3240;
                        float _3242 = _3241 * _3241;
                        float _3243 = _3222 + _3187;
                        float _3244 = _3223 + _3188;
                        float _3245 = _3224 + _3189;
                        float _3249 = inversesqrt(dot(vec3(_3243, _3244, _3245), vec3(_3243, _3244, _3245)));
                        float _3253 = dot(vec3(_896, _899, _902), vec3(_3222, _3223, _3224));
                        float _4513 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                        float _3256 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                        float _3257 = dot(vec3(_896, _899, _902), vec3(_3249 * _3243, _3249 * _3244, _3249 * _3245));
                        float _4524 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                        float _3260 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                        float _3264 = ((_3260 * _3260) * (_3242 + (-1.0))) + 1.0;
                        float _3265 = _3200 * _3241;
                        float _3266 = _3265 * _3265;
                        float _3269 = ((1.0 - _3266) * _3190) + _3266;
                        float _4535 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                        float _3270 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                        float _3271 = 1.0 - _3241;
                        float _3281 = (0.5 / (((_3270 * ((_3256 * _3271) + _3241)) + 9.9999999392252902907785028219223e-09) + (((_3270 * _3271) + _3241) * _3256))) * _3270;
                        float _4546 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                        float _3292 = (((_3242 * 3.1415927410125732421875) * (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0)))) / ((_3264 * _3264) * ((_3207 * 2.1991131305694580078125) + 3.141590118408203125))) * _3196;
                        _3049 = (_3211 * _3159.x) + _3117;
                        _3050 = (_3211 * _3159.y) + _3118;
                        _3051 = (_3211 * _3159.z) + _3119;
                        _3046 = (_3292 * _3176.x) + _3114;
                        _3047 = (_3292 * _3176.y) + _3115;
                        _3048 = (_3292 * _3176.z) + _3116;
                        if (_3121 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3114 = _3046;
                            _3115 = _3047;
                            _3116 = _3048;
                            _3117 = _3049;
                            _3118 = _3050;
                            _3119 = _3051;
                            _3120 = _3121;
                        }
                    }
                    frontier_phi_63_pred = _3051;
                    frontier_phi_63_pred_1 = _3050;
                    frontier_phi_63_pred_2 = _3049;
                    frontier_phi_63_pred_3 = _3048;
                    frontier_phi_63_pred_4 = _3047;
                    frontier_phi_63_pred_5 = _3046;
                }
                _2857 = frontier_phi_63_pred;
                _2855 = frontier_phi_63_pred_1;
                _2853 = frontier_phi_63_pred_2;
                _2851 = frontier_phi_63_pred_3;
                _2849 = frontier_phi_63_pred_4;
                _2847 = frontier_phi_63_pred_5;
                uint _2997 = _2996 + 1u;
                if (_2997 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2990 = _2847;
                    _2991 = _2849;
                    _2992 = _2851;
                    _2993 = _2853;
                    _2994 = _2855;
                    _2995 = _2857;
                    _2996 = _2997;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2846 = _2847;
            _2848 = _2849;
            _2850 = _2851;
            _2852 = _2853;
            _2854 = _2855;
            _2856 = _2857;
        }
        uvec4 _2860 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2861 = _2860.z;
        uint _2863 = (_2861 >> 8u) & 15u;
        float _2958;
        float _2960;
        float _2962;
        float _2964;
        float _2966;
        float _2968;
        if (((4294967295u << _2863) & _2744) == 0u)
        {
            _2958 = _2846;
            _2960 = _2848;
            _2962 = _2850;
            _2964 = _2852;
            _2966 = _2854;
            _2968 = _2856;
        }
        else
        {
            float _2983 = inversesqrt(dot(vec3(_2698, _2699, _2700), vec3(_2698, _2699, _2700)));
            float _2984 = _2983 * _2698;
            float _2985 = _2983 * _2699;
            float _2986 = _2983 * _2700;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2863 < ((_2861 >> 12u) & 15u))
            {
                float _2959;
                float _2961;
                float _2963;
                float _2965;
                float _2967;
                float _2969;
                float _3097 = _2846;
                float _3098 = _2848;
                float _3099 = _2850;
                float _3100 = _2852;
                float _3101 = _2854;
                float _3102 = _2856;
                uint _3103 = _2863;
                uint _3112;
                bool _3113;
                for (;;)
                {
                    _3112 = texelFetch(g_lightClassification, int((((_2738 << 5u) + (_2724 << 9u)) + (_3103 << 2u)) >> 2u)).x;
                    _3113 = _3112 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3113)
                    {
                        frontier_phi_69_pred = _3102;
                        frontier_phi_69_pred_1 = _3101;
                        frontier_phi_69_pred_2 = _3100;
                        frontier_phi_69_pred_3 = _3099;
                        frontier_phi_69_pred_4 = _3098;
                        frontier_phi_69_pred_5 = _3097;
                    }
                    else
                    {
                        float _3297;
                        float _3298;
                        float _3299;
                        float _3300;
                        float _3301;
                        float _3302;
                        float _3591;
                        float _3592;
                        float _3593;
                        float _3594;
                        float _3595;
                        float _3596;
                        float _3310 = _3097;
                        float _3311 = _3098;
                        float _3312 = _3099;
                        float _3313 = _3100;
                        float _3314 = _3101;
                        float _3315 = _3102;
                        uint _3316 = _3112;
                        uint _3317;
                        vec4 _3342;
                        float _3343;
                        vec4 _3358;
                        vec3 _3370;
                        vec4 _3385;
                        vec4 _3400;
                        float _3447;
                        bool _3448;
                        for (;;)
                        {
                            uint _3327 = ((_3103 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3316));
                            _3317 = (_3316 + 4294967295u) & _3316;
                            uint _3329 = _3327 * 40u;
                            _3342 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3329)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 3u)).x));
                            _3343 = _3342.w;
                            uint _3345 = (_3327 * 40u) + 4u;
                            _3358 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3345)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 3u)).x));
                            uint _3360 = (_3327 * 40u) + 8u;
                            _3370 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3360)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 2u)).x));
                            uint _3372 = (_3327 * 40u) + 16u;
                            _3385 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3372)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 3u)).x));
                            uint _3387 = (_3327 * 40u) + 20u;
                            _3400 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 3u)).x));
                            uint _3403 = (_3327 * 40u) + 24u;
                            vec4 _3416 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 3u)).x));
                            uint _3422 = (_3327 * 40u) + 28u;
                            vec4 _3435 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3422)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 3u)).x));
                            _3447 = fma(_2700, _3435.z, fma(_2699, _3435.y, _3435.x * _2698)) + _3435.w;
                            _3448 = !((fma(_2700, _3416.z, fma(_2699, _3416.y, _3416.x * _2698)) + _3416.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3448)
                            {
                                float _3475 = _3342.x - _2698;
                                float _3476 = _3342.y - _2699;
                                float _3477 = _3342.z - _2700;
                                float _3478 = dot(vec3(_3475, _3476, _3477), vec3(_3475, _3476, _3477));
                                float _3481 = inversesqrt(_3478);
                                float _3482 = _3481 * _3475;
                                float _3483 = _3481 * _3476;
                                float _3484 = _3481 * _3477;
                                float _3488 = 1.0 - (_3478 / (_3343 * _3343));
                                float _4557 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                                float _3489 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                                float _3493 = sqrt(_3478) * _3358.w;
                                float _3495 = 1.39999997615814208984375 / (_3493 + 1.39999997615814208984375);
                                float _3496 = _3495 * _3495;
                                float _3499 = ((1.0 - _3496) * dot(vec3(_3482, _3483, _3484), vec3(_896, _899, _902))) + _3496;
                                float _3502 = _3493 * _3493;
                                float _3506 = (fma(_2700, _3385.z, fma(_2699, _3385.y, _3385.x * _2698)) + _3385.w) / _3447;
                                float _3507 = (fma(_2700, _3400.z, fma(_2699, _3400.y, _3400.x * _2698)) + _3400.w) / _3447;
                                float _3511 = 1.0 - dot(vec2(_3506, _3507), vec2(_3506, _3507));
                                float _4573 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                                float _3512 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
                                float _3513 = _3512 * (((isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0))) * _3489) / ((_3502 * 0.699999988079071044921875) + 1.0));
                                float _3525 = exp2(log2(1.0 / ((_3502 * 3.5) + 5.0)) * 0.25);
                                float _3526 = 1.0 - _1016;
                                float _3533 = sqrt(1.0 - ((1.0 - (_3526 * _3526)) * (1.0 - (_3525 * _3525))));
                                float _3534 = _3533 * _3533;
                                float _3535 = _3534 * _3534;
                                float _3536 = _3482 - _2984;
                                float _3537 = _3483 - _2985;
                                float _3538 = _3484 - _2986;
                                float _3542 = inversesqrt(dot(vec3(_3536, _3537, _3538), vec3(_3536, _3537, _3538)));
                                float _3546 = dot(vec3(_896, _899, _902), vec3((-0.0) - _2984, (-0.0) - _2985, (-0.0) - _2986));
                                float _4584 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                                float _3549 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
                                float _3550 = dot(vec3(_896, _899, _902), vec3(_3542 * _3536, _3542 * _3537, _3542 * _3538));
                                float _4595 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                                float _3553 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                                float _3557 = ((_3553 * _3553) * (_3535 + (-1.0))) + 1.0;
                                float _3558 = _3495 * _3534;
                                float _3559 = _3558 * _3558;
                                float _3565 = ((1.0 - _3559) * dot(vec3(_896, _899, _902), vec3(_3482, _3483, _3484))) + _3559;
                                float _4606 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                                float _3566 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                                float _3567 = 1.0 - _3534;
                                float _3577 = (0.5 / (((_3566 * ((_3549 * _3567) + _3534)) + 9.9999999392252902907785028219223e-09) + (((_3566 * _3567) + _3534) * _3549))) * _3566;
                                float _4617 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                                float _3587 = (_3512 * _3489) * (((_3535 * 3.1415927410125732421875) * (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0)))) / ((_3557 * _3557) * ((_3502 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3513 * _3358.z;
                                frontier_phi_75_pred_1 = _3513 * _3358.y;
                                frontier_phi_75_pred_2 = _3513 * _3358.x;
                                frontier_phi_75_pred_3 = _3587 * _3370.z;
                                frontier_phi_75_pred_4 = _3587 * _3370.y;
                                frontier_phi_75_pred_5 = _3587 * _3370.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3596 = frontier_phi_75_pred;
                            _3595 = frontier_phi_75_pred_1;
                            _3594 = frontier_phi_75_pred_2;
                            _3593 = frontier_phi_75_pred_3;
                            _3592 = frontier_phi_75_pred_4;
                            _3591 = frontier_phi_75_pred_5;
                            _3300 = _3594 + _3313;
                            _3301 = _3595 + _3314;
                            _3302 = _3596 + _3315;
                            _3297 = _3591 + _3310;
                            _3298 = _3592 + _3311;
                            _3299 = _3593 + _3312;
                            if (_3317 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3310 = _3297;
                                _3311 = _3298;
                                _3312 = _3299;
                                _3313 = _3300;
                                _3314 = _3301;
                                _3315 = _3302;
                                _3316 = _3317;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3302;
                        frontier_phi_69_pred_1 = _3301;
                        frontier_phi_69_pred_2 = _3300;
                        frontier_phi_69_pred_3 = _3299;
                        frontier_phi_69_pred_4 = _3298;
                        frontier_phi_69_pred_5 = _3297;
                    }
                    _2969 = frontier_phi_69_pred;
                    _2967 = frontier_phi_69_pred_1;
                    _2965 = frontier_phi_69_pred_2;
                    _2963 = frontier_phi_69_pred_3;
                    _2961 = frontier_phi_69_pred_4;
                    _2959 = frontier_phi_69_pred_5;
                    uint _3104 = _3103 + 1u;
                    if (_3104 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3097 = _2959;
                        _3098 = _2961;
                        _3099 = _2963;
                        _3100 = _2965;
                        _3101 = _2967;
                        _3102 = _2969;
                        _3103 = _3104;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2969;
                frontier_phi_57_58_ladder_1 = _2967;
                frontier_phi_57_58_ladder_2 = _2965;
                frontier_phi_57_58_ladder_3 = _2963;
                frontier_phi_57_58_ladder_4 = _2961;
                frontier_phi_57_58_ladder_5 = _2959;
            }
            else
            {
                frontier_phi_57_58_ladder = _2856;
                frontier_phi_57_58_ladder_1 = _2854;
                frontier_phi_57_58_ladder_2 = _2852;
                frontier_phi_57_58_ladder_3 = _2850;
                frontier_phi_57_58_ladder_4 = _2848;
                frontier_phi_57_58_ladder_5 = _2846;
            }
            _2958 = frontier_phi_57_58_ladder_5;
            _2960 = frontier_phi_57_58_ladder_4;
            _2962 = frontier_phi_57_58_ladder_3;
            _2964 = frontier_phi_57_58_ladder_2;
            _2966 = frontier_phi_57_58_ladder_1;
            _2968 = frontier_phi_57_58_ladder;
        }
        float _2973 = isnan(1.0) ? _1000 : (isnan(_1000) ? 1.0 : min(_1000, 1.0));
        _2756 = (_2973 * _2964) + _2190;
        _2758 = (_2973 * _2966) + _2192;
        _2760 = (_2973 * _2968) + _2194;
        _2762 = ((_2958 * _985) * _2973) + _2538;
        _2764 = ((_2960 * _987) * _2973) + _2540;
        _2766 = ((_2962 * _988) * _2973) + _2542;
    }
    else
    {
        _2756 = _2190;
        _2758 = _2192;
        _2760 = _2194;
        _2762 = _2538;
        _2764 = _2540;
        _2766 = _2542;
    }
    float _4633 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _4644 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _4655 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _4666 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _2791 = cbInstanceData._m0[_928 + 6u].w * (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0)));
    float _2796 = _873 / cbSceneParam._m0[86u].x;
    float _2797 = _874 / cbSceneParam._m0[86u].y;
    vec4 _2811 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2796, _2797, (log2((isnan(cbSceneParam._m0[77u].w) ? _808 : (isnan(_808) ? cbSceneParam._m0[77u].w : min(_808, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2813 = _2811.x;
    float _2814 = _2811.y;
    float _2815 = _2811.z;
    float _2816 = _2811.w;
    float _2908;
    float _2910;
    float _2912;
    float _2914;
    if (_808 > cbSceneParam._m0[78u].w)
    {
        float _2871 = isnan(_808) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _808 : min(cbSceneParam._m0[80u].w, _808));
        float _2872 = _2871 / _808;
        float _2883 = _2872 * _858;
        float _2884 = _859 * _2872;
        float _2885 = (-0.0) - _2884;
        float _2886 = _2872 * _860;
        float _2888 = (cbSceneParam._m0[77u].w * _2885) / _2871;
        float _2889 = _2888 + cbSceneParam._m0[79u].w;
        float _2890 = cbSceneParam._m0[79u].w - _2884;
        float _2896 = sqrt(((_2883 * _2883) + (_2884 * _2884)) + (_2886 * _2886));
        float _2899 = (1.0 - (cbSceneParam._m0[77u].w / _2871)) * _2896;
        float _2904 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2906 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3059;
        if (abs((_2885 - _2888) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3059 = ((((_2889 > 0.0) ? exp2(_2904 * _2889) : (2.0 - exp2(_2906 * _2889))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2899;
        }
        else
        {
            float _3019 = 1.0 / cbSceneParam._m0[80u].x;
            float _3020 = isnan(_2890) ? _2889 : (isnan(_2889) ? _2890 : max(_2889, _2890));
            float _3021 = isnan(_2890) ? _2889 : (isnan(_2889) ? _2890 : min(_2889, _2890));
            float _3030 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : min(_3020, 0.0));
            float _3031 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : min(_3021, 0.0));
            _3059 = ((abs(_2896 / _2885) * cbSceneParam._m0[80u].y) * ((((_3030 - _3031) * 2.0) - ((exp2(_2904 * (isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0)))) - exp2(_2904 * (isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0))))) * _3019)) - ((exp2(_2906 * _3030) - exp2(_2906 * _3031)) * _3019))) + (_2899 * cbSceneParam._m0[80u].z);
        }
        vec4 _3061 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2796, _2797, 1.0), 0.0);
        float _3070 = exp2((_3059 * (-1.44269502162933349609375)) * (1.0 - _3061.w));
        float _3071 = log2(_3070);
        float _3087 = log2(_2816);
        _2908 = (exp2(_3087 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3071 * cbSceneParam._m0[78u].x)) * _3061.x) / cbSceneParam._m0[78u].x)) + _2813;
        _2910 = (exp2(_3087 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3071 * cbSceneParam._m0[78u].y)) * _3061.y) / cbSceneParam._m0[78u].y)) + _2814;
        _2912 = (exp2(_3087 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3071 * cbSceneParam._m0[78u].z)) * _3061.z) / cbSceneParam._m0[78u].z)) + _2815;
        _2914 = _3070 * _2816;
    }
    else
    {
        _2908 = _2813;
        _2910 = _2814;
        _2912 = _2815;
        _2914 = _2816;
    }
    float _2926 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2927 = _2926 == 3.0;
    float _2928 = log2(_2914);
    float _2935 = exp2(_2928 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (_2756 + ((isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))) * _1000))) + ((_2762 + ((isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0))) * _1809)) * cbPerFrame._m0[3u].x));
    float _2936 = exp2(_2928 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (_2758 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _1000))) + ((_2764 + ((isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0))) * _1809)) * cbPerFrame._m0[3u].x));
    float _2937 = exp2(_2928 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0))) * (_2760 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _1000))) + ((_2766 + ((isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0))) * _1809)) * cbPerFrame._m0[3u].x));
    float _2946 = (_2926 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2946 * (_2927 ? _2935 : (_2935 + (cbSceneParam._m0[72u].w * _2908)));
    SV_Target.y = _2946 * (_2927 ? _2936 : (_2936 + (cbSceneParam._m0[72u].w * _2910)));
    SV_Target.z = _2946 * (_2927 ? _2937 : (_2937 + (cbSceneParam._m0[72u].w * _2912)));
    SV_Target.w = _2791;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2791;
}


