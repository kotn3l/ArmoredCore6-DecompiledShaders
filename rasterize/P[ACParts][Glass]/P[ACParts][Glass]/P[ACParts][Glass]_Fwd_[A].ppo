#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 64) uniform texture2D g_CloudShadowTexture0;
layout(set = 0, binding = 65) uniform texture2D g_CloudShadowTexture1;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_Glass_snp_0_Texture2D_7;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_Glass_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _911;
float _3084;
float _3085;
float _3086;
float _3087;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _227 = ((cbMtdParam._m0[10u].z * TEXCOORD_3.x) * (cbMtdParam._m0[11u].x - cbMtdParam._m0[11u].w)) + cbMtdParam._m0[11u].w;
    vec4 _245 = texture(sampler2D(P_ACParts_Glass_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _254 = (_245.x * 2.0) + (-1.0);
    float _256 = (_245.y * 2.0) + (-1.0);
    float _257 = dot(vec2(_254, _256), vec2(_254, _256));
    float _3096 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _263 = sqrt(1.0 - (isnan(1.0) ? _3096 : (isnan(_3096) ? 1.0 : min(_3096, 1.0))));
    float _268 = ((cbMtdParam._m0[11u].z + _245.z) * 0.5) + cbMtdParam._m0[10u].x;
    float _273 = exp2(log2(cbMtdParam._m0[10u].z) * cbMtdParam._m0[10u].w);
    vec4 _285 = texture(sampler2D(P_ACParts_Glass_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _299 = (((cbMtdParam._m0[10u].y * TEXCOORD_3.x) * _273) * ((_285.x * 2.0) + (-1.0))) + _254;
    float _300 = (((cbMtdParam._m0[10u].y * TEXCOORD_3.y) * _273) * ((_285.y * 2.0) + (-1.0))) + _256;
    float _302 = gl_FragCoord.x * 0.125;
    float _304 = gl_FragCoord.y * 0.125;
    float _315 = fma(_263, _197 * NORMAL.x, fma(_300, _204 * TANGENT.x, (_190 * _182) * _299));
    float _318 = fma(_263, _197 * NORMAL.y, fma(_300, _204 * TANGENT.y, (_190 * _183) * _299));
    float _321 = fma(_263, _197 * NORMAL.z, fma(_300, _204 * TANGENT.z, (_190 * _184) * _299));
    float _325 = inversesqrt(dot(vec3(_315, _318, _321), vec3(_315, _318, _321)));
    float _326 = _325 * _315;
    float _327 = _325 * _318;
    float _328 = _325 * _321;
    float _3107 = isnan(0.0) ? _227 : (isnan(_227) ? 0.0 : max(_227, 0.0));
    float _329 = isnan(1.0) ? _3107 : (isnan(_3107) ? 1.0 : min(_3107, 1.0));
    float _3118 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _330 = isnan(1.0) ? _3118 : (isnan(_3118) ? 1.0 : min(_3118, 1.0));
    float _3129 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _3140 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _3151 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _3162 = isnan(0.0) ? cbMtdParam._m0[12u].x : (isnan(cbMtdParam._m0[12u].x) ? 0.0 : max(cbMtdParam._m0[12u].x, 0.0));
    float _334 = isnan(1.0) ? _3162 : (isnan(_3162) ? 1.0 : min(_3162, 1.0));
    if (!(cbMtdParam._m0[11u].y >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_302, _304)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _354 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _395 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _405 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _395);
    float _406 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _395);
    float _407 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _395);
    float _411 = inversesqrt(dot(vec3(_405, _406, _407), vec3(_405, _406, _407)));
    float _412 = _405 * _411;
    float _413 = _406 * _411;
    float _414 = _407 * _411;
    vec4 _416 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_302, _304));
    float _418 = _416.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _593 = sqrt(((_405 * _405) + (_406 * _406)) + (_407 * _407));
        float _599 = (cbMatDynParam._m0[5u].x * _593) + cbMatDynParam._m0[5u].y;
        float _3173 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
        float _600 = isnan(1.0) ? _3173 : (isnan(_3173) ? 1.0 : min(_3173, 1.0));
        float _604 = (cbMatDynParam._m0[5u].z * _593) + cbMatDynParam._m0[5u].w;
        float _3184 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3184 : (isnan(_3184) ? 1.0 : min(_3184, 1.0))) - _600)) + _600) < ((_418 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _430 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _431 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _451 = fma(_328, cbSceneParam._m0[5u].z, fma(_327, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _326));
    float _454 = fma(_328, cbSceneParam._m0[6u].z, fma(_327, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _326));
    float _457 = fma(_328, cbSceneParam._m0[7u].z, fma(_327, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _326));
    uint _470 = uint(roundEven(NORMAL.w)) * 13u;
    uint _471 = _470 + 9u;
    uint _472 = _471 + uint(cbMatDynParam._m0[0u].w);
    float _478 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3129 : (isnan(_3129) ? 1.0 : min(_3129, 1.0)))) * cbInstanceData._m0[_472].x;
    float _479 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3140 : (isnan(_3140) ? 1.0 : min(_3140, 1.0)))) * cbInstanceData._m0[_472].y;
    float _480 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3151 : (isnan(_3151) ? 1.0 : min(_3151, 1.0)))) * cbInstanceData._m0[_472].z;
    float _3195 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _481 = isnan(1.0) ? _3195 : (isnan(_3195) ? 1.0 : min(_3195, 1.0));
    float _3206 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _482 = isnan(1.0) ? _3206 : (isnan(_3206) ? 1.0 : min(_3206, 1.0));
    float _3217 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _483 = isnan(1.0) ? _3217 : (isnan(_3217) ? 1.0 : min(_3217, 1.0));
    float _484 = 1.0 - _334;
    float _485 = _481 * _484;
    float _486 = _482 * _484;
    float _487 = _483 * _484;
    float _492 = (_481 + (-0.039999999105930328369140625)) * _334;
    float _493 = (_482 + (-0.039999999105930328369140625)) * _334;
    float _494 = (_483 + (-0.039999999105930328369140625)) * _334;
    float _495 = _492 + 0.039999999105930328369140625;
    float _497 = _493 + 0.039999999105930328369140625;
    float _498 = _494 + 0.039999999105930328369140625;
    vec4 _507 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _430, cbSceneParam._m0[86u].y * _431));
    float _510 = _507.x * TEXCOORD_3.w;
    float _511 = dot(vec3(_326, _327, _328), vec3(_412, _413, _414));
    float _514 = _511 * 2.0;
    float _518 = (_514 * _326) - _412;
    float _519 = (_514 * _327) - _413;
    float _520 = (_514 * _328) - _414;
    float _524 = abs(dot(vec3(_412, _413, _414), vec3(_326, _327, _328)));
    float _3228 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _526 = sqrt(_330);
    float _539 = exp2((_526 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_526 * 3.0));
    float _545 = (1.0 - _539) * ((_526 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _546 = _539 * _526;
    float _574 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _578 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _582 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _910;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _636 = fma(_582, cbModelParam._m0[26u].z, fma(_578, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _574));
        float _640 = fma(_582, cbModelParam._m0[27u].z, fma(_578, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _574));
        float _644 = fma(_582, cbModelParam._m0[28u].z, fma(_578, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _574));
        float _668 = _574 + _326;
        float _669 = _578 + _327;
        float _670 = _582 + _328;
        float _680 = fma(_670, cbModelParam._m0[26u].z, fma(_669, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _668)) - _636;
        float _681 = fma(_670, cbModelParam._m0[27u].z, fma(_669, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _668)) - _640;
        float _682 = fma(_670, cbModelParam._m0[28u].z, fma(_669, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _668)) - _644;
        float _686 = inversesqrt(dot(vec3(_680, _681, _682), vec3(_680, _681, _682)));
        float _699 = ((_686 * _680) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_636 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _700 = ((_686 * _681) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_640 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _701 = ((_686 * _682) / cbModelParam._m0[34u].z) + ((((((_644 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _704 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_699, _700, _701), 0.0);
        vec4 _711 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_699, _700, _701), 0.0);
        vec4 _718 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_699, _700, _701), 0.0);
        vec4 _725 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_699, _700, _701), 0.0);
        float _738 = exp2((_704.w + (-0.5)) * 20.0) * 2.0;
        float _739 = _738 * (_704.x + (-0.5));
        float _740 = _738 * (_704.y + (-0.5));
        float _741 = _738 * (_704.z + (-0.5));
        float _748 = exp2((_711.w + (-0.5)) * 20.0) * 2.0;
        float _749 = _748 * (_711.x + (-0.5));
        float _750 = _748 * (_711.y + (-0.5));
        float _751 = _748 * (_711.z + (-0.5));
        float _758 = exp2((_718.w + (-0.5)) * 20.0) * 2.0;
        float _759 = _758 * (_718.x + (-0.5));
        float _760 = _758 * (_718.y + (-0.5));
        float _761 = _758 * (_718.z + (-0.5));
        float _768 = exp2((_725.w + (-0.5)) * 20.0) * 2.0;
        float _769 = _768 * (_725.x + (-0.5));
        float _770 = _768 * (_725.y + (-0.5));
        float _771 = _768 * (_725.z + (-0.5));
        float _772 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _773 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _774 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _775 = _739 * 0.5;
        float _776 = _749 * 0.5;
        float _777 = _759 * 0.5;
        float _778 = dot(vec3(_775, _776, _777), vec3(_775, _776, _777));
        float _783 = (_778 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_778);
        float _792 = (dot(vec3(_326, _327, _328), vec3(_783 * _775, _783 * _776, _783 * _777)) + 1.0) * 0.5;
        float _3254 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _802 = sqrt(((_776 * _776) + (_775 * _775)) + (_777 * _777)) / (_772 + 9.9999997473787516355514526367188e-06);
        float _3265 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _803 = isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0));
        float _804 = _803 * 2.0;
        float _808 = (1.0 - _803) / (_803 + 1.0);
        float _3276 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _809 = isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0));
        float _818 = ((((1.0 - _809) * (_804 + 2.0)) * exp2(log2(isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0))) * (_804 + 1.0))) + _809) * _772;
        float _819 = _740 * 0.5;
        float _820 = _750 * 0.5;
        float _821 = _760 * 0.5;
        float _822 = dot(vec3(_819, _820, _821), vec3(_819, _820, _821));
        float _827 = (_822 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_822);
        float _835 = (dot(vec3(_326, _327, _328), vec3(_827 * _819, _827 * _820, _827 * _821)) + 1.0) * 0.5;
        float _3287 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _844 = sqrt(((_820 * _820) + (_819 * _819)) + (_821 * _821)) / (_773 + 9.9999997473787516355514526367188e-06);
        float _3298 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _845 = isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0));
        float _846 = _845 * 2.0;
        float _850 = (1.0 - _845) / (_845 + 1.0);
        float _3309 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _851 = isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0));
        float _860 = ((((1.0 - _851) * (_846 + 2.0)) * exp2(log2(isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0))) * (_846 + 1.0))) + _851) * _773;
        float _861 = _741 * 0.5;
        float _862 = _751 * 0.5;
        float _863 = _761 * 0.5;
        float _864 = dot(vec3(_861, _862, _863), vec3(_861, _862, _863));
        float _869 = (_864 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_864);
        float _877 = (dot(vec3(_326, _327, _328), vec3(_869 * _861, _869 * _862, _869 * _863)) + 1.0) * 0.5;
        float _3320 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _886 = sqrt(((_862 * _862) + (_861 * _861)) + (_863 * _863)) / (_774 + 9.9999997473787516355514526367188e-06);
        float _3331 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _887 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
        float _888 = _887 * 2.0;
        float _892 = (1.0 - _887) / (_887 + 1.0);
        float _3342 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _893 = isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0));
        float _902 = ((((1.0 - _893) * (_888 + 2.0)) * exp2(log2(isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0))) * (_888 + 1.0))) + _893) * _774;
        _910 = _741;
        _912 = _740;
        _913 = _739;
        _914 = _751;
        _915 = _750;
        _916 = _749;
        _917 = _761;
        _918 = _760;
        _919 = _759;
        _920 = _774;
        _921 = _773;
        _922 = _772;
        _923 = cbModelParam._m0[36u].z * (isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0)));
        _924 = cbModelParam._m0[36u].z * (isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0)));
        _925 = cbModelParam._m0[36u].z * (isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0)));
    }
    else
    {
        _910 = _911;
        _912 = _911;
        _913 = _911;
        _914 = _911;
        _915 = _911;
        _916 = _911;
        _917 = _911;
        _918 = _911;
        _919 = _911;
        _920 = _911;
        _921 = _911;
        _922 = _911;
        _923 = 0.0;
        _924 = 0.0;
        _925 = 0.0;
    }
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _951 = fma(_582, cbModelParam._m0[30u].z, fma(_578, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _574));
        float _955 = fma(_582, cbModelParam._m0[31u].z, fma(_578, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _574));
        float _959 = fma(_582, cbModelParam._m0[32u].z, fma(_578, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _574));
        float _982 = _574 + _326;
        float _983 = _578 + _327;
        float _984 = _582 + _328;
        float _994 = fma(_984, cbModelParam._m0[30u].z, fma(_983, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _982)) - _951;
        float _995 = fma(_984, cbModelParam._m0[31u].z, fma(_983, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _982)) - _955;
        float _996 = fma(_984, cbModelParam._m0[32u].z, fma(_983, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _982)) - _959;
        float _1000 = inversesqrt(dot(vec3(_994, _995, _996), vec3(_994, _995, _996)));
        float _1013 = ((_1000 * _994) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_951 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1014 = ((_1000 * _995) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_955 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1015 = ((_1000 * _996) / cbModelParam._m0[35u].z) + ((((((_959 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        float _1050 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1017.x + (-0.5));
        float _1052 = _1050 * (_1017.y + (-0.5));
        float _1053 = _1050 * (_1017.z + (-0.5));
        float _1060 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1024.x + (-0.5));
        float _1062 = _1060 * (_1024.y + (-0.5));
        float _1063 = _1060 * (_1024.z + (-0.5));
        float _1070 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1031.x + (-0.5));
        float _1072 = _1070 * (_1031.y + (-0.5));
        float _1073 = _1070 * (_1031.z + (-0.5));
        float _1080 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1038.x + (-0.5));
        float _1082 = _1080 * (_1038.y + (-0.5));
        float _1083 = _1080 * (_1038.z + (-0.5));
        float _1084 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1085 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = _1051 * 0.5;
        float _1088 = _1061 * 0.5;
        float _1089 = _1071 * 0.5;
        float _1090 = dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089));
        float _1095 = (_1090 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1090);
        float _1103 = (dot(vec3(_326, _327, _328), vec3(_1095 * _1087, _1095 * _1088, _1095 * _1089)) + 1.0) * 0.5;
        float _3383 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1112 = sqrt(((_1088 * _1088) + (_1087 * _1087)) + (_1089 * _1089)) / (_1084 + 9.9999997473787516355514526367188e-06);
        float _3394 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
        float _1114 = _1113 * 2.0;
        float _1118 = (1.0 - _1113) / (_1113 + 1.0);
        float _3405 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
        float _1128 = ((((1.0 - _1119) * (_1114 + 2.0)) * exp2(log2(isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0))) * (_1114 + 1.0))) + _1119) * _1084;
        float _1129 = _1052 * 0.5;
        float _1130 = _1062 * 0.5;
        float _1131 = _1072 * 0.5;
        float _1132 = dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131));
        float _1137 = (_1132 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1132);
        float _1145 = (dot(vec3(_326, _327, _328), vec3(_1137 * _1129, _1137 * _1130, _1137 * _1131)) + 1.0) * 0.5;
        float _3416 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1154 = sqrt(((_1130 * _1130) + (_1129 * _1129)) + (_1131 * _1131)) / (_1085 + 9.9999997473787516355514526367188e-06);
        float _3427 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
        float _1156 = _1155 * 2.0;
        float _1160 = (1.0 - _1155) / (_1155 + 1.0);
        float _3438 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
        float _1170 = ((((1.0 - _1161) * (_1156 + 2.0)) * exp2(log2(isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0))) * (_1156 + 1.0))) + _1161) * _1085;
        float _1171 = _1053 * 0.5;
        float _1172 = _1063 * 0.5;
        float _1173 = _1073 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1187 = (dot(vec3(_326, _327, _328), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _3449 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1196 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _3460 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
        float _1198 = _1197 * 2.0;
        float _1202 = (1.0 - _1197) / (_1197 + 1.0);
        float _3471 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
        float _1212 = ((((1.0 - _1203) * (_1198 + 2.0)) * exp2(log2(isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0))) * (_1198 + 1.0))) + _1203) * _1086;
        _1220 = _1053;
        _1221 = _1052;
        _1222 = _1051;
        _1223 = _1063;
        _1224 = _1062;
        _1225 = _1061;
        _1226 = _1073;
        _1227 = _1072;
        _1228 = _1071;
        _1229 = _1086;
        _1230 = _1085;
        _1231 = _1084;
        _1232 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)));
        _1233 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)));
        _1234 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)));
    }
    else
    {
        _1220 = _911;
        _1221 = _911;
        _1222 = _911;
        _1223 = _911;
        _1224 = _911;
        _1225 = _911;
        _1226 = _911;
        _1227 = _911;
        _1228 = _911;
        _1229 = _911;
        _1230 = _911;
        _1231 = _911;
        _1232 = 0.0;
        _1233 = 0.0;
        _1234 = 0.0;
    }
    float _1244 = (cbModelParam._m0[1u].x * (_1232 - _923)) + _923;
    float _1245 = (cbModelParam._m0[1u].x * (_1233 - _924)) + _924;
    float _1246 = (cbModelParam._m0[1u].x * (_1234 - _925)) + _925;
    float _1267 = fma(_1246, cbSceneParam._m0[89u].z, fma(_1245, cbSceneParam._m0[89u].y, _1244 * cbSceneParam._m0[89u].x));
    float _1270 = fma(_1246, cbSceneParam._m0[90u].z, fma(_1245, cbSceneParam._m0[90u].y, _1244 * cbSceneParam._m0[90u].x));
    float _1273 = fma(_1246, cbSceneParam._m0[91u].z, fma(_1245, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1244));
    float _1288 = _518 * 0.5;
    float _1289 = _519 * 0.5;
    float _1290 = _520 * 0.5;
    float _1291 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_1222, _1225, _1228, _1231));
    float _1294 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_1221, _1224, _1227, _1230));
    float _1297 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_1220, _1223, _1226, _1229));
    float _1331;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1304 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_910, _914, _917, _920));
        float _1308 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_912, _915, _918, _921));
        float _1312 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_913, _916, _919, _922));
        float _1319 = dot(vec4(cbModelParam._m0[39u]), vec4(_1288, _1289, _1290, 1.0));
        _1331 = dot(vec3(isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)), isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)), isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1319) ? 0.0 : (isnan(0.0) ? _1319 : max(0.0, _1319))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1331 = 1.0;
    }
    float _1342;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1333 = dot(vec4(cbModelParam._m0[40u]), vec4(_1288, _1289, _1290, 1.0));
        _1342 = dot(vec3(isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)), isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)), isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1333) ? 0.0 : (isnan(0.0) ? _1333 : max(0.0, _1333))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1342 = 1.0;
    }
    float _1346 = (_1342 * cbModelParam._m0[1u].x) + (_1331 * (1.0 - cbModelParam._m0[1u].x));
    float _1356 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _330);
    float _1357 = isnan(_1356) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1356 : min(cbModelParam._m0[25u].z, _1356));
    float _1439;
    float _1441;
    float _1443;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1406 = fma(_582, cbModelParam._m0[13u].z, fma(_578, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _574)) + cbModelParam._m0[13u].w;
        float _1410 = fma(_582, cbModelParam._m0[14u].z, fma(_578, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _574)) + cbModelParam._m0[14u].w;
        float _1414 = fma(_582, cbModelParam._m0[15u].z, fma(_578, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _574)) + cbModelParam._m0[15u].w;
        float _1417 = fma(_520, cbModelParam._m0[13u].z, fma(_519, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _518));
        float _1420 = fma(_520, cbModelParam._m0[14u].z, fma(_519, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _518));
        float _1423 = fma(_520, cbModelParam._m0[15u].z, fma(_519, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _518));
        float _1451;
        if (_1417 > 0.0)
        {
            _1451 = abs((1.0 - _1406) / _1417);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1417 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1406 + 1.0) / _1417);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1451 = frontier_phi_19_17_ladder;
        }
        float _1867;
        if (_1420 > 0.0)
        {
            _1867 = abs((1.0 - _1410) / _1420);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1420 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1410 + 1.0) / _1420);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1867 = frontier_phi_28_24_ladder;
        }
        float _2175;
        if (_1423 > 0.0)
        {
            _2175 = abs((1.0 - _1414) / _1423);
        }
        else
        {
            float frontier_phi_42_35_ladder;
            if (_1423 < 0.0)
            {
                frontier_phi_42_35_ladder = abs((_1414 + 1.0) / _1423);
            }
            else
            {
                frontier_phi_42_35_ladder = 5000.0;
            }
            _2175 = frontier_phi_42_35_ladder;
        }
        float _2177 = isnan(_1867) ? _1451 : (isnan(_1451) ? _1867 : min(_1451, _1867));
        float _2178 = isnan(_2175) ? _2177 : (isnan(_2177) ? _2175 : min(_2177, _2175));
        float _2182 = (_2178 * _1417) + _1406;
        float _2183 = (_2178 * _1420) + _1410;
        float _2184 = (_2178 * _1423) + _1414;
        float _2185 = _2178 * 9.9999997473787516355514526367188e-05;
        float _2186 = (-1.0) - _2185;
        float _2188 = _2185 + 1.0;
        float frontier_phi_18_42_ladder;
        float frontier_phi_18_42_ladder_1;
        float frontier_phi_18_42_ladder_2;
        if ((_2184 > _2188) || ((_2184 < _2186) || ((_2183 > _2188) || ((_2183 < _2186) || ((_2182 < _2186) || (_2182 > _2188))))))
        {
            frontier_phi_18_42_ladder = 0.0;
            frontier_phi_18_42_ladder_1 = 0.0;
            frontier_phi_18_42_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2326 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2184, cbModelParam._m0[9u].z, fma(_2183, cbModelParam._m0[9u].y, _2182 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2184, cbModelParam._m0[10u].z, fma(_2183, cbModelParam._m0[10u].y, _2182 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2184, cbModelParam._m0[11u].z, fma(_2183, cbModelParam._m0[11u].y, _2182 * cbModelParam._m0[11u].x))), _1357);
            frontier_phi_18_42_ladder = _2326.z * cbModelParam._m0[1u].y;
            frontier_phi_18_42_ladder_1 = _2326.y * cbModelParam._m0[1u].y;
            frontier_phi_18_42_ladder_2 = _2326.x * cbModelParam._m0[1u].y;
        }
        _1439 = frontier_phi_18_42_ladder_2;
        _1441 = frontier_phi_18_42_ladder_1;
        _1443 = frontier_phi_18_42_ladder;
    }
    else
    {
        vec4 _1427 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_518, _519, _520), _1357);
        _1439 = _1427.x * cbModelParam._m0[1u].y;
        _1441 = _1427.y * cbModelParam._m0[1u].y;
        _1443 = _1427.z * cbModelParam._m0[1u].y;
    }
    float _1447 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _330);
    float _1448 = isnan(_1447) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1447 : min(cbModelParam._m0[25u].w, _1447));
    float _1541;
    float _1543;
    float _1545;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1505 = fma(_582, cbModelParam._m0[21u].z, fma(_578, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _574)) + cbModelParam._m0[21u].w;
        float _1509 = fma(_582, cbModelParam._m0[22u].z, fma(_578, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _574)) + cbModelParam._m0[22u].w;
        float _1513 = fma(_582, cbModelParam._m0[23u].z, fma(_578, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _574)) + cbModelParam._m0[23u].w;
        float _1516 = fma(_520, cbModelParam._m0[21u].z, fma(_519, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _518));
        float _1519 = fma(_520, cbModelParam._m0[22u].z, fma(_519, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _518));
        float _1522 = fma(_520, cbModelParam._m0[23u].z, fma(_519, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _518));
        float _1872;
        if (_1516 > 0.0)
        {
            _1872 = abs((1.0 - _1505) / _1516);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1516 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1505 + 1.0) / _1516);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1872 = frontier_phi_30_26_ladder;
        }
        float _2201;
        if (_1519 > 0.0)
        {
            _2201 = abs((1.0 - _1509) / _1519);
        }
        else
        {
            float frontier_phi_44_37_ladder;
            if (_1519 < 0.0)
            {
                frontier_phi_44_37_ladder = abs((_1509 + 1.0) / _1519);
            }
            else
            {
                frontier_phi_44_37_ladder = 5000.0;
            }
            _2201 = frontier_phi_44_37_ladder;
        }
        float _2391;
        if (_1522 > 0.0)
        {
            _2391 = abs((1.0 - _1513) / _1522);
        }
        else
        {
            float frontier_phi_62_55_ladder;
            if (_1522 < 0.0)
            {
                frontier_phi_62_55_ladder = abs((_1513 + 1.0) / _1522);
            }
            else
            {
                frontier_phi_62_55_ladder = 5000.0;
            }
            _2391 = frontier_phi_62_55_ladder;
        }
        float _2393 = isnan(_2201) ? _1872 : (isnan(_1872) ? _2201 : min(_1872, _2201));
        float _2394 = isnan(_2391) ? _2393 : (isnan(_2393) ? _2391 : min(_2393, _2391));
        float _2398 = (_2394 * _1516) + _1505;
        float _2399 = (_2394 * _1519) + _1509;
        float _2400 = (_2394 * _1522) + _1513;
        float _2401 = _2394 * 9.9999997473787516355514526367188e-05;
        float _2402 = (-1.0) - _2401;
        float _2404 = _2401 + 1.0;
        float frontier_phi_27_62_ladder;
        float frontier_phi_27_62_ladder_1;
        float frontier_phi_27_62_ladder_2;
        if ((_2400 > _2404) || ((_2400 < _2402) || ((_2399 > _2404) || ((_2399 < _2402) || ((_2398 < _2402) || (_2398 > _2404))))))
        {
            frontier_phi_27_62_ladder = 0.0;
            frontier_phi_27_62_ladder_1 = 0.0;
            frontier_phi_27_62_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2642 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2400, cbModelParam._m0[17u].z, fma(_2399, cbModelParam._m0[17u].y, _2398 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2400, cbModelParam._m0[18u].z, fma(_2399, cbModelParam._m0[18u].y, _2398 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2400, cbModelParam._m0[19u].z, fma(_2399, cbModelParam._m0[19u].y, _2398 * cbModelParam._m0[19u].x))), _1448);
            frontier_phi_27_62_ladder = _2642.x * cbModelParam._m0[1u].z;
            frontier_phi_27_62_ladder_1 = _2642.z * cbModelParam._m0[1u].z;
            frontier_phi_27_62_ladder_2 = _2642.y * cbModelParam._m0[1u].z;
        }
        _1541 = frontier_phi_27_62_ladder;
        _1543 = frontier_phi_27_62_ladder_2;
        _1545 = frontier_phi_27_62_ladder_1;
    }
    else
    {
        vec4 _1525 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_518, _519, _520), _1448);
        _1541 = _1525.x * cbModelParam._m0[1u].z;
        _1543 = _1525.y * cbModelParam._m0[1u].z;
        _1545 = _1525.z * cbModelParam._m0[1u].z;
    }
    float _1558 = (((_545 * _495) + _546) * _510) * ((cbModelParam._m0[1u].w * (_1541 - _1439)) + _1439);
    float _1560 = (((_545 * _497) + _546) * _510) * ((cbModelParam._m0[1u].w * (_1543 - _1441)) + _1441);
    float _1562 = (((_545 * _498) + _546) * _510) * ((cbModelParam._m0[1u].w * (_1545 - _1443)) + _1443);
    float _1565 = fma(_1562, cbSceneParam._m0[89u].z, fma(_1560, cbSceneParam._m0[89u].y, _1558 * cbSceneParam._m0[89u].x));
    float _1568 = fma(_1562, cbSceneParam._m0[90u].z, fma(_1560, cbSceneParam._m0[90u].y, _1558 * cbSceneParam._m0[90u].x));
    float _1571 = fma(_1562, cbSceneParam._m0[91u].z, fma(_1560, cbSceneParam._m0[91u].y, _1558 * cbSceneParam._m0[91u].x));
    float _1616 = 1.0 - (cbSceneParam._m0[69u].x * (1.0 - texture(sampler2D(g_CloudShadowTexture0, SS_WrapLinear), vec2(cbSceneParam._m0[67u].x + (cbSceneParam._m0[67u].z * _574), cbSceneParam._m0[67u].y - (cbSceneParam._m0[67u].w * _582))).x));
    float _3597 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
    float _1621 = 1.0 - (cbSceneParam._m0[69u].y * (1.0 - texture(sampler2D(g_CloudShadowTexture1, SS_WrapLinear), vec2(cbSceneParam._m0[68u].x + (cbSceneParam._m0[68u].z * _574), cbSceneParam._m0[68u].y - (cbSceneParam._m0[68u].w * _582))).x));
    float _3608 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
    float _1623 = (isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))) * (isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0)));
    uvec4 _1627 = floatBitsToUint(cbInstanceData._m0[_470 + 5u]);
    uint _1629 = _1627.x * 14u;
    uint _1630 = _1629 + 13u;
    float _1635 = _510 + (-1.0);
    float _1638 = (cbLight._m0[_1630].x * _1635) + 1.0;
    float _1639 = (cbLight._m0[_1630].y * _1635) + 1.0;
    uint _1640 = _1629 + 5u;
    float _1646 = isnan(1.0) ? _1639 : (isnan(_1639) ? 1.0 : min(_1639, 1.0));
    uint _1650 = _1629 + 4u;
    float _1660 = isnan(1.0) ? _1638 : (isnan(_1638) ? 1.0 : min(_1638, 1.0));
    uint _1664 = _1629 | 1u;
    float _1675 = dot(vec3(cbLight._m0[_1629].xyz), vec3(_326, _327, _328));
    float _1678 = dot(vec3(cbLight._m0[_1664].xyz), vec3(_326, _327, _328));
    float _3629 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
    float _3640 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
    float _1683 = (isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * 0.3183098733425140380859375;
    float _1685 = (isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) * 0.3183098733425140380859375;
    float _1692 = ((cbLight._m0[_1640].x * _1646) * _1685) + (((cbLight._m0[_1650].x * _1623) * _1660) * _1683);
    float _1693 = ((_1646 * cbLight._m0[_1640].y) * _1685) + (((cbLight._m0[_1650].y * _1623) * _1660) * _1683);
    float _1694 = ((_1646 * cbLight._m0[_1640].z) * _1685) + (((cbLight._m0[_1650].z * _1623) * _1660) * _1683);
    uint _1696 = _1629 + 8u;
    float _1709 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1629].w)) * _330) * 0.949999988079071044921875);
    float _1710 = _1709 * _1709;
    float _1711 = cbLight._m0[_1629].x + _412;
    float _1712 = cbLight._m0[_1629].y + _413;
    float _1713 = cbLight._m0[_1629].z + _414;
    float _1717 = inversesqrt(dot(vec3(_1711, _1712, _1713), vec3(_1711, _1712, _1713)));
    float _1718 = _1717 * _1711;
    float _1719 = _1717 * _1712;
    float _1720 = _1717 * _1713;
    float _1721 = dot(vec3(_326, _327, _328), vec3(cbLight._m0[_1629].xyz));
    float _3651 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
    float _1724 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
    float _3662 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _1725 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
    float _1726 = dot(vec3(_326, _327, _328), vec3(_1718, _1719, _1720));
    float _3673 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
    float _1729 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    float _1730 = dot(vec3(cbLight._m0[_1629].xyz), vec3(_1718, _1719, _1720));
    float _3684 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
    float _1734 = _1710 * _1710;
    float _1738 = ((_1729 * _1729) * (_1734 + (-1.0))) + 1.0;
    float _1746 = exp2(log2(1.0 - (isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0)))) * 5.0);
    float _1747 = 0.959999978542327880859375 - _492;
    float _1749 = 0.959999978542327880859375 - _493;
    float _1750 = 0.959999978542327880859375 - _494;
    float _1757 = 1.0 - _1710;
    float _1768 = (0.5 / (((_1725 * ((_1724 * _1757) + _1710)) + 9.9999999392252902907785028219223e-09) + (((_1725 * _1757) + _1710) * _1724))) * _1724;
    float _3695 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
    float _1770 = (isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * (_1734 / ((_1738 * _1738) * 3.141590118408203125));
    uint _1784 = _1629 + 9u;
    float _1795 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1664].w)) * _330) * 0.949999988079071044921875);
    float _1796 = _1795 * _1795;
    float _1797 = cbLight._m0[_1664].x + _412;
    float _1798 = cbLight._m0[_1664].y + _413;
    float _1799 = cbLight._m0[_1664].z + _414;
    float _1803 = inversesqrt(dot(vec3(_1797, _1798, _1799), vec3(_1797, _1798, _1799)));
    float _1804 = _1803 * _1797;
    float _1805 = _1803 * _1798;
    float _1806 = _1803 * _1799;
    float _1807 = dot(vec3(_326, _327, _328), vec3(cbLight._m0[_1664].xyz));
    float _3706 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
    float _1810 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    float _1811 = dot(vec3(_326, _327, _328), vec3(_1804, _1805, _1806));
    float _3717 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _1814 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _1815 = dot(vec3(cbLight._m0[_1664].xyz), vec3(_1804, _1805, _1806));
    float _3728 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1819 = _1796 * _1796;
    float _1823 = ((_1814 * _1814) * (_1819 + (-1.0))) + 1.0;
    float _1830 = exp2(log2(1.0 - (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0)))) * 5.0);
    float _1837 = 1.0 - _1796;
    float _1847 = (0.5 / (((_1725 * ((_1810 * _1837) + _1796)) + 9.9999999392252902907785028219223e-09) + (((_1725 * _1837) + _1796) * _1810))) * _1810;
    float _3739 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1849 = (isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * (_1819 / ((_1823 * _1823) * 3.141590118408203125));
    float _1859 = (((((_1830 * _1747) + _495) * cbLight._m0[_1784].x) * _1849) * _1646) + ((((cbLight._m0[_1696].x * _1623) * ((_1746 * _1747) + _495)) * _1770) * _1660);
    float _1860 = (((((_1830 * _1749) + _497) * cbLight._m0[_1784].y) * _1849) * _1646) + ((((cbLight._m0[_1696].y * _1623) * ((_1746 * _1749) + _497)) * _1770) * _1660);
    float _1861 = (((((_1830 * _1750) + _498) * cbLight._m0[_1784].z) * _1849) * _1646) + ((((cbLight._m0[_1696].z * _1623) * ((_1746 * _1750) + _498)) * _1770) * _1660);
    float _1976;
    float _1978;
    float _1980;
    float _1982;
    float _1984;
    float _1986;
    if (_1627.y == 0u)
    {
        float _1916 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1917 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1916;
        float _1918 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1916;
        float _1919 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1916;
        uvec4 _1931 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1932 = _1931.x;
        uint _1943 = uint((float(_1931.y) * floor(float(uint(cbSceneParam._m0[85u].y * _431) / _1932))) + floor(float(uint(cbSceneParam._m0[85u].x * _430) / _1932)));
        float _1953 = (log2(_1919 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1954 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
        uint _1957 = uint(isnan(14.0) ? _1954 : (isnan(_1954) ? 14.0 : min(_1954, 14.0)));
        uvec4 _1962 = texelFetch(g_lightClusterGridBuffer, int(((_1957 << 2u) + (_1943 << 6u)) >> 2u));
        uint _1963 = _1962.x;
        uint _1964 = _1931.z;
        float _2053;
        float _2055;
        float _2057;
        float _2059;
        float _2061;
        float _2063;
        if (((((1u << ((_1964 >> 4u) & 15u)) + 4294967295u) & _1963) == 0u) || ((_1964 & 240u) == 0u))
        {
            _2053 = 0.0;
            _2055 = 0.0;
            _2057 = 0.0;
            _2059 = 0.0;
            _2061 = 0.0;
            _2063 = 0.0;
        }
        else
        {
            float _2054;
            float _2056;
            float _2058;
            float _2060;
            float _2062;
            float _2064;
            float _2238 = 0.0;
            float _2239 = 0.0;
            float _2240 = 0.0;
            float _2241 = 0.0;
            float _2242 = 0.0;
            float _2243 = 0.0;
            uint _2244 = 0u;
            uint _2253;
            bool _2254;
            for (;;)
            {
                _2253 = texelFetch(g_lightClassification, int((((_1957 << 5u) + (_1943 << 9u)) + (_2244 << 2u)) >> 2u)).x;
                _2254 = _2253 == 0u;
                float frontier_phi_57_pred;
                float frontier_phi_57_pred_1;
                float frontier_phi_57_pred_2;
                float frontier_phi_57_pred_3;
                float frontier_phi_57_pred_4;
                float frontier_phi_57_pred_5;
                if (_2254)
                {
                    frontier_phi_57_pred = _2242;
                    frontier_phi_57_pred_1 = _2243;
                    frontier_phi_57_pred_2 = _2241;
                    frontier_phi_57_pred_3 = _2240;
                    frontier_phi_57_pred_4 = _2239;
                    frontier_phi_57_pred_5 = _2238;
                }
                else
                {
                    float _2434;
                    float _2435;
                    float _2436;
                    float _2437;
                    float _2438;
                    float _2439;
                    uint _2440;
                    _2434 = _2238;
                    _2435 = _2239;
                    _2436 = _2240;
                    _2437 = _2241;
                    _2438 = _2242;
                    _2439 = _2243;
                    _2440 = _2253;
                    float _2335;
                    float _2336;
                    float _2337;
                    float _2338;
                    float _2339;
                    float _2340;
                    for (;;)
                    {
                        uint _2444 = uint(findLSB(_2440)) + (_2244 << 5u);
                        uint _2441 = (_2440 + 4294967295u) & _2440;
                        uint _2446 = _2444 * 48u;
                        vec4 _2460 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2446)).x, texelFetch(g_PointLightRenderingBuffer, int(_2446 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2446 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2446 + 3u)).x));
                        uint _2466 = (_2444 * 48u) + 4u;
                        vec4 _2479 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2466)).x, texelFetch(g_PointLightRenderingBuffer, int(_2466 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2466 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2466 + 3u)).x));
                        uint _2485 = (_2444 * 48u) + 8u;
                        vec3 _2496 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2485)).x, texelFetch(g_PointLightRenderingBuffer, int(_2485 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2485 + 2u)).x));
                        float _2500 = _2460.x - _1917;
                        float _2501 = _2460.y - _1918;
                        float _2502 = _2460.z - _1919;
                        float _2503 = dot(vec3(_2500, _2501, _2502), vec3(_2500, _2501, _2502));
                        float _2506 = inversesqrt(_2503);
                        float _2507 = _2506 * _2500;
                        float _2508 = _2506 * _2501;
                        float _2509 = _2506 * _2502;
                        float _2510 = dot(vec3(_451, _454, _457), vec3(_2507, _2508, _2509));
                        float _2515 = 1.0 - (_2503 * _2460.w);
                        float _3760 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
                        float _2516 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
                        float _2517 = sqrt(_2503) * _2479.w;
                        float _2520 = 1.39999997615814208984375 / (_2517 + 1.39999997615814208984375);
                        float _2521 = _2520 * _2520;
                        float _2524 = ((1.0 - _2521) * _2510) + _2521;
                        float _2527 = _2517 * _2517;
                        float _2531 = ((isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0))) * _2516) / ((_2527 * 0.699999988079071044921875) + 1.0);
                        float _2535 = (-0.0) - _1917;
                        float _2536 = (-0.0) - _1918;
                        float _2537 = (-0.0) - _1919;
                        float _2541 = inversesqrt(dot(vec3(_2535, _2536, _2537), vec3(_2535, _2536, _2537)));
                        float _2542 = _2541 * _2535;
                        float _2543 = _2541 * _2536;
                        float _2544 = _2541 * _2537;
                        float _2552 = exp2(log2(1.0 / ((_2527 * 3.5) + 5.0)) * 0.25);
                        float _2553 = 1.0 - _526;
                        float _2560 = sqrt(1.0 - ((1.0 - (_2553 * _2553)) * (1.0 - (_2552 * _2552))));
                        float _2561 = _2560 * _2560;
                        float _2562 = _2561 * _2561;
                        float _2563 = _2542 + _2507;
                        float _2564 = _2543 + _2508;
                        float _2565 = _2544 + _2509;
                        float _2569 = inversesqrt(dot(vec3(_2563, _2564, _2565), vec3(_2563, _2564, _2565)));
                        float _2573 = dot(vec3(_451, _454, _457), vec3(_2542, _2543, _2544));
                        float _3776 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
                        float _2576 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
                        float _2577 = dot(vec3(_451, _454, _457), vec3(_2569 * _2563, _2569 * _2564, _2569 * _2565));
                        float _3787 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
                        float _2580 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
                        float _2584 = ((_2580 * _2580) * (_2562 + (-1.0))) + 1.0;
                        float _2585 = _2520 * _2561;
                        float _2586 = _2585 * _2585;
                        float _2589 = ((1.0 - _2586) * _2510) + _2586;
                        float _3798 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
                        float _2590 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
                        float _2591 = 1.0 - _2561;
                        float _2601 = (0.5 / (((_2590 * ((_2576 * _2591) + _2561)) + 9.9999999392252902907785028219223e-09) + (((_2590 * _2591) + _2561) * _2576))) * _2590;
                        float _3809 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
                        float _2612 = (((_2562 * 3.1415927410125732421875) * (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0)))) / ((_2584 * _2584) * ((_2527 * 2.1991131305694580078125) + 3.141590118408203125))) * _2516;
                        _2338 = (_2531 * _2479.x) + _2437;
                        _2339 = (_2531 * _2479.y) + _2438;
                        _2340 = (_2531 * _2479.z) + _2439;
                        _2335 = (_2612 * _2496.x) + _2434;
                        _2336 = (_2612 * _2496.y) + _2435;
                        _2337 = (_2612 * _2496.z) + _2436;
                        if (_2441 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2434 = _2335;
                            _2435 = _2336;
                            _2436 = _2337;
                            _2437 = _2338;
                            _2438 = _2339;
                            _2439 = _2340;
                            _2440 = _2441;
                        }
                    }
                    frontier_phi_57_pred = _2339;
                    frontier_phi_57_pred_1 = _2340;
                    frontier_phi_57_pred_2 = _2338;
                    frontier_phi_57_pred_3 = _2337;
                    frontier_phi_57_pred_4 = _2336;
                    frontier_phi_57_pred_5 = _2335;
                }
                _2062 = frontier_phi_57_pred;
                _2064 = frontier_phi_57_pred_1;
                _2060 = frontier_phi_57_pred_2;
                _2058 = frontier_phi_57_pred_3;
                _2056 = frontier_phi_57_pred_4;
                _2054 = frontier_phi_57_pred_5;
                uint _2245 = _2244 + 1u;
                if (_2245 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2238 = _2054;
                    _2239 = _2056;
                    _2240 = _2058;
                    _2241 = _2060;
                    _2242 = _2062;
                    _2243 = _2064;
                    _2244 = _2245;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2053 = _2054;
            _2055 = _2056;
            _2057 = _2058;
            _2059 = _2060;
            _2061 = _2062;
            _2063 = _2064;
        }
        uvec4 _2067 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2068 = _2067.z;
        uint _2070 = (_2068 >> 8u) & 15u;
        float _2206;
        float _2208;
        float _2210;
        float _2212;
        float _2214;
        float _2216;
        if (((4294967295u << _2070) & _1963) == 0u)
        {
            _2206 = _2053;
            _2208 = _2055;
            _2210 = _2057;
            _2212 = _2059;
            _2214 = _2061;
            _2216 = _2063;
        }
        else
        {
            float _2231 = inversesqrt(dot(vec3(_1917, _1918, _1919), vec3(_1917, _1918, _1919)));
            float _2232 = _2231 * _1917;
            float _2233 = _2231 * _1918;
            float _2234 = _2231 * _1919;
            float frontier_phi_46_47_ladder;
            float frontier_phi_46_47_ladder_1;
            float frontier_phi_46_47_ladder_2;
            float frontier_phi_46_47_ladder_3;
            float frontier_phi_46_47_ladder_4;
            float frontier_phi_46_47_ladder_5;
            if (_2070 < ((_2068 >> 12u) & 15u))
            {
                float _2207;
                float _2209;
                float _2211;
                float _2213;
                float _2215;
                float _2217;
                float _2417 = _2053;
                float _2418 = _2055;
                float _2419 = _2057;
                float _2420 = _2059;
                float _2421 = _2061;
                float _2422 = _2063;
                uint _2423 = _2070;
                uint _2432;
                bool _2433;
                for (;;)
                {
                    _2432 = texelFetch(g_lightClassification, int((((_1957 << 5u) + (_1943 << 9u)) + (_2423 << 2u)) >> 2u)).x;
                    _2433 = _2432 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2433)
                    {
                        frontier_phi_71_pred = _2422;
                        frontier_phi_71_pred_1 = _2421;
                        frontier_phi_71_pred_2 = _2420;
                        frontier_phi_71_pred_3 = _2419;
                        frontier_phi_71_pred_4 = _2418;
                        frontier_phi_71_pred_5 = _2417;
                    }
                    else
                    {
                        float _2647;
                        float _2648;
                        float _2649;
                        float _2650;
                        float _2651;
                        float _2652;
                        float _2943;
                        float _2944;
                        float _2945;
                        float _2946;
                        float _2947;
                        float _2948;
                        float _2660 = _2417;
                        float _2661 = _2418;
                        float _2662 = _2419;
                        float _2663 = _2420;
                        float _2664 = _2421;
                        float _2665 = _2422;
                        uint _2666 = _2432;
                        uint _2667;
                        vec4 _2692;
                        float _2693;
                        vec4 _2708;
                        vec3 _2720;
                        vec4 _2736;
                        vec4 _2752;
                        float _2799;
                        bool _2800;
                        for (;;)
                        {
                            uint _2677 = ((_2423 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2666));
                            _2667 = (_2666 + 4294967295u) & _2666;
                            uint _2679 = _2677 * 40u;
                            _2692 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2679)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2679 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2679 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2679 + 3u)).x));
                            _2693 = _2692.w;
                            uint _2695 = (_2677 * 40u) + 4u;
                            _2708 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2695)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2695 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2695 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2695 + 3u)).x));
                            uint _2710 = (_2677 * 40u) + 8u;
                            _2720 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2710)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2710 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2710 + 2u)).x));
                            uint _2723 = (_2677 * 40u) + 16u;
                            _2736 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2723)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2723 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2723 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2723 + 3u)).x));
                            uint _2739 = (_2677 * 40u) + 20u;
                            _2752 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2739)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2739 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2739 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2739 + 3u)).x));
                            uint _2755 = (_2677 * 40u) + 24u;
                            vec4 _2768 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2755)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2755 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2755 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2755 + 3u)).x));
                            uint _2774 = (_2677 * 40u) + 28u;
                            vec4 _2787 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2774)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2774 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2774 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2774 + 3u)).x));
                            _2799 = fma(_1919, _2787.z, fma(_1918, _2787.y, _2787.x * _1917)) + _2787.w;
                            _2800 = !((fma(_1919, _2768.z, fma(_1918, _2768.y, _2768.x * _1917)) + _2768.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_2800)
                            {
                                float _2827 = _2692.x - _1917;
                                float _2828 = _2692.y - _1918;
                                float _2829 = _2692.z - _1919;
                                float _2830 = dot(vec3(_2827, _2828, _2829), vec3(_2827, _2828, _2829));
                                float _2833 = inversesqrt(_2830);
                                float _2834 = _2833 * _2827;
                                float _2835 = _2833 * _2828;
                                float _2836 = _2833 * _2829;
                                float _2840 = 1.0 - (_2830 / (_2693 * _2693));
                                float _3820 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
                                float _2841 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
                                float _2845 = sqrt(_2830) * _2708.w;
                                float _2847 = 1.39999997615814208984375 / (_2845 + 1.39999997615814208984375);
                                float _2848 = _2847 * _2847;
                                float _2851 = ((1.0 - _2848) * dot(vec3(_2834, _2835, _2836), vec3(_451, _454, _457))) + _2848;
                                float _2854 = _2845 * _2845;
                                float _2858 = (fma(_1919, _2736.z, fma(_1918, _2736.y, _2736.x * _1917)) + _2736.w) / _2799;
                                float _2859 = (fma(_1919, _2752.z, fma(_1918, _2752.y, _2752.x * _1917)) + _2752.w) / _2799;
                                float _2863 = 1.0 - dot(vec2(_2858, _2859), vec2(_2858, _2859));
                                float _3836 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
                                float _2864 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
                                float _2865 = _2864 * (((isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0))) * _2841) / ((_2854 * 0.699999988079071044921875) + 1.0));
                                float _2877 = exp2(log2(1.0 / ((_2854 * 3.5) + 5.0)) * 0.25);
                                float _2878 = 1.0 - _526;
                                float _2885 = sqrt(1.0 - ((1.0 - (_2878 * _2878)) * (1.0 - (_2877 * _2877))));
                                float _2886 = _2885 * _2885;
                                float _2887 = _2886 * _2886;
                                float _2888 = _2834 - _2232;
                                float _2889 = _2835 - _2233;
                                float _2890 = _2836 - _2234;
                                float _2894 = inversesqrt(dot(vec3(_2888, _2889, _2890), vec3(_2888, _2889, _2890)));
                                float _2898 = dot(vec3(_451, _454, _457), vec3((-0.0) - _2232, (-0.0) - _2233, (-0.0) - _2234));
                                float _3847 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
                                float _2901 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
                                float _2902 = dot(vec3(_451, _454, _457), vec3(_2894 * _2888, _2894 * _2889, _2894 * _2890));
                                float _3858 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
                                float _2905 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
                                float _2909 = ((_2905 * _2905) * (_2887 + (-1.0))) + 1.0;
                                float _2910 = _2847 * _2886;
                                float _2911 = _2910 * _2910;
                                float _2917 = ((1.0 - _2911) * dot(vec3(_451, _454, _457), vec3(_2834, _2835, _2836))) + _2911;
                                float _3869 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
                                float _2918 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
                                float _2919 = 1.0 - _2886;
                                float _2929 = (0.5 / (((_2918 * ((_2901 * _2919) + _2886)) + 9.9999999392252902907785028219223e-09) + (((_2918 * _2919) + _2886) * _2901))) * _2918;
                                float _3880 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
                                float _2939 = (_2864 * _2841) * (((_2887 * 3.1415927410125732421875) * (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0)))) / ((_2909 * _2909) * ((_2854 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _2865 * _2708.x;
                                frontier_phi_77_pred_1 = _2865 * _2708.z;
                                frontier_phi_77_pred_2 = _2865 * _2708.y;
                                frontier_phi_77_pred_3 = _2939 * _2720.z;
                                frontier_phi_77_pred_4 = _2939 * _2720.y;
                                frontier_phi_77_pred_5 = _2939 * _2720.x;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _2946 = frontier_phi_77_pred;
                            _2948 = frontier_phi_77_pred_1;
                            _2947 = frontier_phi_77_pred_2;
                            _2945 = frontier_phi_77_pred_3;
                            _2944 = frontier_phi_77_pred_4;
                            _2943 = frontier_phi_77_pred_5;
                            _2650 = _2946 + _2663;
                            _2651 = _2947 + _2664;
                            _2652 = _2948 + _2665;
                            _2647 = _2943 + _2660;
                            _2648 = _2944 + _2661;
                            _2649 = _2945 + _2662;
                            if (_2667 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2660 = _2647;
                                _2661 = _2648;
                                _2662 = _2649;
                                _2663 = _2650;
                                _2664 = _2651;
                                _2665 = _2652;
                                _2666 = _2667;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2652;
                        frontier_phi_71_pred_1 = _2651;
                        frontier_phi_71_pred_2 = _2650;
                        frontier_phi_71_pred_3 = _2649;
                        frontier_phi_71_pred_4 = _2648;
                        frontier_phi_71_pred_5 = _2647;
                    }
                    _2217 = frontier_phi_71_pred;
                    _2215 = frontier_phi_71_pred_1;
                    _2213 = frontier_phi_71_pred_2;
                    _2211 = frontier_phi_71_pred_3;
                    _2209 = frontier_phi_71_pred_4;
                    _2207 = frontier_phi_71_pred_5;
                    uint _2424 = _2423 + 1u;
                    if (_2424 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2417 = _2207;
                        _2418 = _2209;
                        _2419 = _2211;
                        _2420 = _2213;
                        _2421 = _2215;
                        _2422 = _2217;
                        _2423 = _2424;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_46_47_ladder = _2209;
                frontier_phi_46_47_ladder_1 = _2217;
                frontier_phi_46_47_ladder_2 = _2215;
                frontier_phi_46_47_ladder_3 = _2213;
                frontier_phi_46_47_ladder_4 = _2211;
                frontier_phi_46_47_ladder_5 = _2207;
            }
            else
            {
                frontier_phi_46_47_ladder = _2055;
                frontier_phi_46_47_ladder_1 = _2063;
                frontier_phi_46_47_ladder_2 = _2061;
                frontier_phi_46_47_ladder_3 = _2059;
                frontier_phi_46_47_ladder_4 = _2057;
                frontier_phi_46_47_ladder_5 = _2053;
            }
            _2206 = frontier_phi_46_47_ladder_5;
            _2208 = frontier_phi_46_47_ladder;
            _2210 = frontier_phi_46_47_ladder_4;
            _2212 = frontier_phi_46_47_ladder_3;
            _2214 = frontier_phi_46_47_ladder_2;
            _2216 = frontier_phi_46_47_ladder_1;
        }
        float _2221 = isnan(1.0) ? _510 : (isnan(_510) ? 1.0 : min(_510, 1.0));
        _1976 = (_2221 * _2212) + _1692;
        _1978 = (_2221 * _2214) + _1693;
        _1980 = (_2221 * _2216) + _1694;
        _1982 = ((_2206 * _495) * _2221) + _1859;
        _1984 = ((_2208 * _497) * _2221) + _1860;
        _1986 = ((_2210 * _498) * _2221) + _1861;
    }
    else
    {
        _1976 = _1692;
        _1978 = _1693;
        _1980 = _1694;
        _1982 = _1859;
        _1984 = _1860;
        _1986 = _1861;
    }
    float _3896 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _3907 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _3918 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _3929 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _2004 = ((isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * (_1976 + ((isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0))) * _510))) + ((_1982 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _1346)) * cbPerFrame._m0[3u].x);
    float _2005 = ((isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * (_1978 + ((isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0))) * _510))) + ((_1984 + ((isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))) * _1346)) * cbPerFrame._m0[3u].x);
    float _2006 = ((isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * (_1980 + ((isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0))) * _510))) + ((_1986 + ((isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))) * _1346)) * cbPerFrame._m0[3u].x);
    float _2011 = cbInstanceData._m0[_470 + 6u].w * (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)));
    float _2016 = _430 / cbSceneParam._m0[86u].x;
    float _2017 = _431 / cbSceneParam._m0[86u].y;
    vec4 _2031 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2016, _2017, (log2((isnan(cbSceneParam._m0[77u].w) ? _354 : (isnan(_354) ? cbSceneParam._m0[77u].w : min(_354, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2033 = _2031.x;
    float _2034 = _2031.y;
    float _2035 = _2031.z;
    float _2036 = _2031.w;
    float _2117;
    float _2119;
    float _2121;
    float _2123;
    if (_354 > cbSceneParam._m0[78u].w)
    {
        float _2078 = isnan(_354) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _354 : min(cbSceneParam._m0[80u].w, _354));
        float _2079 = _2078 / _354;
        float _2090 = _2079 * _405;
        float _2091 = _406 * _2079;
        float _2092 = (-0.0) - _2091;
        float _2094 = _2079 * _407;
        float _2096 = (cbSceneParam._m0[77u].w * _2092) / _2078;
        float _2097 = _2096 + cbSceneParam._m0[79u].w;
        float _2098 = cbSceneParam._m0[79u].w - _2091;
        float _2104 = sqrt(((_2090 * _2090) + (_2091 * _2091)) + (_2094 * _2094));
        float _2107 = (1.0 - (cbSceneParam._m0[77u].w / _2078)) * _2104;
        float _2113 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2115 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2348;
        if (abs((_2092 - _2096) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2348 = ((((_2097 > 0.0) ? exp2(_2113 * _2097) : (2.0 - exp2(_2115 * _2097))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2107;
        }
        else
        {
            float _2267 = 1.0 / cbSceneParam._m0[80u].x;
            float _2268 = isnan(_2098) ? _2097 : (isnan(_2097) ? _2098 : max(_2097, _2098));
            float _2269 = isnan(_2098) ? _2097 : (isnan(_2097) ? _2098 : min(_2097, _2098));
            float _2278 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : min(_2268, 0.0));
            float _2279 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : min(_2269, 0.0));
            _2348 = ((abs(_2104 / _2092) * cbSceneParam._m0[80u].y) * ((((_2278 - _2279) * 2.0) - ((exp2(_2113 * (isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0)))) - exp2(_2113 * (isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0))))) * _2267)) - ((exp2(_2115 * _2278) - exp2(_2115 * _2279)) * _2267))) + (_2107 * cbSceneParam._m0[80u].z);
        }
        vec4 _2350 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2016, _2017, 1.0), 0.0);
        float _2359 = exp2((_2348 * (-1.44269502162933349609375)) * (1.0 - _2350.w));
        float _2360 = log2(_2359);
        float _2376 = log2(_2036);
        _2117 = (exp2(_2376 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2360 * cbSceneParam._m0[78u].x)) * _2350.x) / cbSceneParam._m0[78u].x)) + _2033;
        _2119 = (exp2(_2376 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2360 * cbSceneParam._m0[78u].y)) * _2350.y) / cbSceneParam._m0[78u].y)) + _2034;
        _2121 = (exp2(_2376 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2360 * cbSceneParam._m0[78u].z)) * _2350.z) / cbSceneParam._m0[78u].z)) + _2035;
        _2123 = _2359 * _2036;
    }
    else
    {
        _2117 = _2033;
        _2119 = _2034;
        _2121 = _2035;
        _2123 = _2036;
    }
    bool _2386;
    vec4 _2133;
    vec4 _2155;
    float _2157;
    float _2161;
    float _2162;
    float _2163;
    float _2164;
    bool _2174;
    for (;;)
    {
        _2133 = cbMatDynParam._m0[0u];
        float _2135 = roundEven(_2133.y);
        bool _2136 = _2135 == 3.0;
        float _2137 = log2(_2123);
        float _2144 = exp2(_2137 * cbSceneParam._m0[78u].x) * _2004;
        float _2145 = exp2(_2137 * cbSceneParam._m0[78u].y) * _2005;
        float _2146 = exp2(_2137 * cbSceneParam._m0[78u].z) * _2006;
        float _2153 = _418 + (-0.5);
        _2155 = cbMtdParam._m0[1u];
        _2157 = _2155.y * _2153;
        float _2160 = (_2135 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2161 = _2160 * (_2136 ? _2144 : (_2144 + (cbSceneParam._m0[72u].w * _2117)));
        _2162 = _2160 * (_2136 ? _2145 : (_2145 + (cbSceneParam._m0[72u].w * _2119)));
        _2163 = _2160 * (_2136 ? _2146 : (_2146 + (cbSceneParam._m0[72u].w * _2121)));
        _2164 = _2153 * 0.999000012874603271484375;
        _2174 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2174)
        {
            if ((cbInstanceData._m0[_470 + 7u].x + _2164) < 0.5)
            {
                _2386 = true;
                break;
            }
        }
        uint _2302 = _471 + uint(_2133.w);
        if ((cbInstanceData._m0[_2302].w < 1.0) && ((cbInstanceData._m0[_2302].w + _2164) < 0.5))
        {
            _2386 = true;
            break;
        }
        if ((_2157 + 1.0) < _2155.x)
        {
            _2386 = true;
            break;
        }
        _2386 = false;
        break;
    }
    float _2617;
    if (_2386)
    {
        discard_state = true;
        _2617 = 0.0;
    }
    else
    {
        _2617 = _2011;
    }
    SV_Target.x = _2161;
    SV_Target.y = _2162;
    SV_Target.z = _2163;
    SV_Target.w = _2617;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2011;
    discard_exit();
}


