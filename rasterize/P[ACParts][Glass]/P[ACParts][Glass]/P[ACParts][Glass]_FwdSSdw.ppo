#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 64) uniform texture2D g_CloudShadowTexture0;
layout(set = 0, binding = 65) uniform texture2D g_CloudShadowTexture1;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_Glass_snp_0_Texture2D_7;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_Glass_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _857;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _188 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _195 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _225 = ((cbMtdParam._m0[10u].z * TEXCOORD_3.x) * (cbMtdParam._m0[11u].x - cbMtdParam._m0[11u].w)) + cbMtdParam._m0[11u].w;
    vec4 _243 = texture(sampler2D(P_ACParts_Glass_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _252 = (_243.x * 2.0) + (-1.0);
    float _254 = (_243.y * 2.0) + (-1.0);
    float _255 = dot(vec2(_252, _254), vec2(_252, _254));
    float _3018 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _261 = sqrt(1.0 - (isnan(1.0) ? _3018 : (isnan(_3018) ? 1.0 : min(_3018, 1.0))));
    float _266 = ((cbMtdParam._m0[11u].z + _243.z) * 0.5) + cbMtdParam._m0[10u].x;
    float _271 = exp2(log2(cbMtdParam._m0[10u].z) * cbMtdParam._m0[10u].w);
    vec4 _283 = texture(sampler2D(P_ACParts_Glass_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _297 = (((cbMtdParam._m0[10u].y * TEXCOORD_3.x) * _271) * ((_283.x * 2.0) + (-1.0))) + _252;
    float _298 = (((cbMtdParam._m0[10u].y * TEXCOORD_3.y) * _271) * ((_283.y * 2.0) + (-1.0))) + _254;
    float _301 = fma(_261, _195 * NORMAL.x, fma(_298, _202 * TANGENT.x, (_188 * _180) * _297));
    float _304 = fma(_261, _195 * NORMAL.y, fma(_298, _202 * TANGENT.y, (_188 * _181) * _297));
    float _307 = fma(_261, _195 * NORMAL.z, fma(_298, _202 * TANGENT.z, (_188 * _182) * _297));
    float _311 = inversesqrt(dot(vec3(_301, _304, _307), vec3(_301, _304, _307)));
    float _312 = _311 * _301;
    float _313 = _311 * _304;
    float _314 = _311 * _307;
    float _3029 = isnan(0.0) ? _225 : (isnan(_225) ? 0.0 : max(_225, 0.0));
    float _315 = isnan(1.0) ? _3029 : (isnan(_3029) ? 1.0 : min(_3029, 1.0));
    float _3040 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _316 = isnan(1.0) ? _3040 : (isnan(_3040) ? 1.0 : min(_3040, 1.0));
    float _3051 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _3062 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _3073 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _3084 = isnan(0.0) ? cbMtdParam._m0[12u].x : (isnan(cbMtdParam._m0[12u].x) ? 0.0 : max(cbMtdParam._m0[12u].x, 0.0));
    float _320 = isnan(1.0) ? _3084 : (isnan(_3084) ? 1.0 : min(_3084, 1.0));
    float _336 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _377 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _387 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _377);
    float _388 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _377);
    float _389 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _377);
    float _393 = inversesqrt(dot(vec3(_387, _388, _389), vec3(_387, _388, _389)));
    float _394 = _387 * _393;
    float _395 = _388 * _393;
    float _396 = _389 * _393;
    float _402 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _403 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _424 = fma(_314, cbSceneParam._m0[5u].z, fma(_313, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _312));
    float _427 = fma(_314, cbSceneParam._m0[6u].z, fma(_313, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _312));
    float _430 = fma(_314, cbSceneParam._m0[7u].z, fma(_313, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _312));
    uint _443 = uint(roundEven(NORMAL.w)) * 13u;
    uint _445 = (_443 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _451 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3051 : (isnan(_3051) ? 1.0 : min(_3051, 1.0)))) * cbInstanceData._m0[_445].x;
    float _452 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3062 : (isnan(_3062) ? 1.0 : min(_3062, 1.0)))) * cbInstanceData._m0[_445].y;
    float _453 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3073 : (isnan(_3073) ? 1.0 : min(_3073, 1.0)))) * cbInstanceData._m0[_445].z;
    float _3095 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _454 = isnan(1.0) ? _3095 : (isnan(_3095) ? 1.0 : min(_3095, 1.0));
    float _3106 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _455 = isnan(1.0) ? _3106 : (isnan(_3106) ? 1.0 : min(_3106, 1.0));
    float _3117 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _456 = isnan(1.0) ? _3117 : (isnan(_3117) ? 1.0 : min(_3117, 1.0));
    float _457 = 1.0 - _320;
    float _458 = _454 * _457;
    float _459 = _455 * _457;
    float _460 = _456 * _457;
    float _465 = (_454 + (-0.039999999105930328369140625)) * _320;
    float _466 = (_455 + (-0.039999999105930328369140625)) * _320;
    float _467 = (_456 + (-0.039999999105930328369140625)) * _320;
    float _468 = _465 + 0.039999999105930328369140625;
    float _470 = _466 + 0.039999999105930328369140625;
    float _471 = _467 + 0.039999999105930328369140625;
    vec4 _480 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _402, cbSceneParam._m0[86u].y * _403));
    float _483 = _480.x * TEXCOORD_3.w;
    float _484 = dot(vec3(_312, _313, _314), vec3(_394, _395, _396));
    float _487 = _484 * 2.0;
    float _491 = (_487 * _312) - _394;
    float _492 = (_487 * _313) - _395;
    float _493 = (_487 * _314) - _396;
    float _497 = abs(dot(vec3(_394, _395, _396), vec3(_312, _313, _314)));
    float _3128 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _499 = sqrt(_316);
    float _512 = exp2((_499 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3128 : (isnan(_3128) ? 1.0 : min(_3128, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_499 * 3.0));
    float _518 = (1.0 - _512) * ((_499 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _519 = _512 * _499;
    float _547 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _551 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _555 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _856;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _582 = fma(_555, cbModelParam._m0[26u].z, fma(_551, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _547));
        float _586 = fma(_555, cbModelParam._m0[27u].z, fma(_551, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _547));
        float _590 = fma(_555, cbModelParam._m0[28u].z, fma(_551, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _547));
        float _614 = _547 + _312;
        float _615 = _551 + _313;
        float _616 = _555 + _314;
        float _626 = fma(_616, cbModelParam._m0[26u].z, fma(_615, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _614)) - _582;
        float _627 = fma(_616, cbModelParam._m0[27u].z, fma(_615, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _614)) - _586;
        float _628 = fma(_616, cbModelParam._m0[28u].z, fma(_615, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _614)) - _590;
        float _632 = inversesqrt(dot(vec3(_626, _627, _628), vec3(_626, _627, _628)));
        float _645 = ((_632 * _626) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_582 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _646 = ((_632 * _627) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_586 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _647 = ((_632 * _628) / cbModelParam._m0[34u].z) + ((((((_590 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _650 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_645, _646, _647), 0.0);
        vec4 _657 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_645, _646, _647), 0.0);
        vec4 _664 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_645, _646, _647), 0.0);
        vec4 _671 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_645, _646, _647), 0.0);
        float _684 = exp2((_650.w + (-0.5)) * 20.0) * 2.0;
        float _685 = _684 * (_650.x + (-0.5));
        float _686 = _684 * (_650.y + (-0.5));
        float _687 = _684 * (_650.z + (-0.5));
        float _694 = exp2((_657.w + (-0.5)) * 20.0) * 2.0;
        float _695 = _694 * (_657.x + (-0.5));
        float _696 = _694 * (_657.y + (-0.5));
        float _697 = _694 * (_657.z + (-0.5));
        float _704 = exp2((_664.w + (-0.5)) * 20.0) * 2.0;
        float _705 = _704 * (_664.x + (-0.5));
        float _706 = _704 * (_664.y + (-0.5));
        float _707 = _704 * (_664.z + (-0.5));
        float _714 = exp2((_671.w + (-0.5)) * 20.0) * 2.0;
        float _715 = _714 * (_671.x + (-0.5));
        float _716 = _714 * (_671.y + (-0.5));
        float _717 = _714 * (_671.z + (-0.5));
        float _718 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _719 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _720 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _721 = _685 * 0.5;
        float _722 = _695 * 0.5;
        float _723 = _705 * 0.5;
        float _724 = dot(vec3(_721, _722, _723), vec3(_721, _722, _723));
        float _729 = (_724 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_724);
        float _738 = (dot(vec3(_312, _313, _314), vec3(_729 * _721, _729 * _722, _729 * _723)) + 1.0) * 0.5;
        float _3154 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _748 = sqrt(((_722 * _722) + (_721 * _721)) + (_723 * _723)) / (_718 + 9.9999997473787516355514526367188e-06);
        float _3165 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _749 = isnan(1.0) ? _3165 : (isnan(_3165) ? 1.0 : min(_3165, 1.0));
        float _750 = _749 * 2.0;
        float _754 = (1.0 - _749) / (_749 + 1.0);
        float _3176 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _755 = isnan(1.0) ? _3176 : (isnan(_3176) ? 1.0 : min(_3176, 1.0));
        float _764 = ((((1.0 - _755) * (_750 + 2.0)) * exp2(log2(isnan(1.0) ? _3154 : (isnan(_3154) ? 1.0 : min(_3154, 1.0))) * (_750 + 1.0))) + _755) * _718;
        float _765 = _686 * 0.5;
        float _766 = _696 * 0.5;
        float _767 = _706 * 0.5;
        float _768 = dot(vec3(_765, _766, _767), vec3(_765, _766, _767));
        float _773 = (_768 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_768);
        float _781 = (dot(vec3(_312, _313, _314), vec3(_773 * _765, _773 * _766, _773 * _767)) + 1.0) * 0.5;
        float _3187 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _790 = sqrt(((_766 * _766) + (_765 * _765)) + (_767 * _767)) / (_719 + 9.9999997473787516355514526367188e-06);
        float _3198 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _791 = isnan(1.0) ? _3198 : (isnan(_3198) ? 1.0 : min(_3198, 1.0));
        float _792 = _791 * 2.0;
        float _796 = (1.0 - _791) / (_791 + 1.0);
        float _3209 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _797 = isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0));
        float _806 = ((((1.0 - _797) * (_792 + 2.0)) * exp2(log2(isnan(1.0) ? _3187 : (isnan(_3187) ? 1.0 : min(_3187, 1.0))) * (_792 + 1.0))) + _797) * _719;
        float _807 = _687 * 0.5;
        float _808 = _697 * 0.5;
        float _809 = _707 * 0.5;
        float _810 = dot(vec3(_807, _808, _809), vec3(_807, _808, _809));
        float _815 = (_810 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_810);
        float _823 = (dot(vec3(_312, _313, _314), vec3(_815 * _807, _815 * _808, _815 * _809)) + 1.0) * 0.5;
        float _3220 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _832 = sqrt(((_808 * _808) + (_807 * _807)) + (_809 * _809)) / (_720 + 9.9999997473787516355514526367188e-06);
        float _3231 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _833 = isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0));
        float _834 = _833 * 2.0;
        float _838 = (1.0 - _833) / (_833 + 1.0);
        float _3242 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _839 = isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0));
        float _848 = ((((1.0 - _839) * (_834 + 2.0)) * exp2(log2(isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0))) * (_834 + 1.0))) + _839) * _720;
        _856 = _687;
        _858 = _686;
        _859 = _685;
        _860 = _697;
        _861 = _696;
        _862 = _695;
        _863 = _707;
        _864 = _706;
        _865 = _705;
        _866 = _720;
        _867 = _719;
        _868 = _718;
        _869 = cbModelParam._m0[36u].z * (isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0)));
        _870 = cbModelParam._m0[36u].z * (isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0)));
        _871 = cbModelParam._m0[36u].z * (isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0)));
    }
    else
    {
        _856 = _857;
        _858 = _857;
        _859 = _857;
        _860 = _857;
        _861 = _857;
        _862 = _857;
        _863 = _857;
        _864 = _857;
        _865 = _857;
        _866 = _857;
        _867 = _857;
        _868 = _857;
        _869 = 0.0;
        _870 = 0.0;
        _871 = 0.0;
    }
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _897 = fma(_555, cbModelParam._m0[30u].z, fma(_551, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _547));
        float _901 = fma(_555, cbModelParam._m0[31u].z, fma(_551, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _547));
        float _905 = fma(_555, cbModelParam._m0[32u].z, fma(_551, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _547));
        float _928 = _547 + _312;
        float _929 = _551 + _313;
        float _930 = _555 + _314;
        float _940 = fma(_930, cbModelParam._m0[30u].z, fma(_929, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _928)) - _897;
        float _941 = fma(_930, cbModelParam._m0[31u].z, fma(_929, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _928)) - _901;
        float _942 = fma(_930, cbModelParam._m0[32u].z, fma(_929, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _928)) - _905;
        float _946 = inversesqrt(dot(vec3(_940, _941, _942), vec3(_940, _941, _942)));
        float _959 = ((_946 * _940) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_897 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _960 = ((_946 * _941) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_901 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _961 = ((_946 * _942) / cbModelParam._m0[35u].z) + ((((((_905 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        float _996 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_963.x + (-0.5));
        float _998 = _996 * (_963.y + (-0.5));
        float _999 = _996 * (_963.z + (-0.5));
        float _1006 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_970.x + (-0.5));
        float _1008 = _1006 * (_970.y + (-0.5));
        float _1009 = _1006 * (_970.z + (-0.5));
        float _1016 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_977.x + (-0.5));
        float _1018 = _1016 * (_977.y + (-0.5));
        float _1019 = _1016 * (_977.z + (-0.5));
        float _1026 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_984.x + (-0.5));
        float _1028 = _1026 * (_984.y + (-0.5));
        float _1029 = _1026 * (_984.z + (-0.5));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = _997 * 0.5;
        float _1034 = _1007 * 0.5;
        float _1035 = _1017 * 0.5;
        float _1036 = dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035));
        float _1041 = (_1036 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1036);
        float _1049 = (dot(vec3(_312, _313, _314), vec3(_1041 * _1033, _1041 * _1034, _1041 * _1035)) + 1.0) * 0.5;
        float _3283 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1058 = sqrt(((_1034 * _1034) + (_1033 * _1033)) + (_1035 * _1035)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3294 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0));
        float _1060 = _1059 * 2.0;
        float _1064 = (1.0 - _1059) / (_1059 + 1.0);
        float _3305 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
        float _1074 = ((((1.0 - _1065) * (_1060 + 2.0)) * exp2(log2(isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0))) * (_1060 + 1.0))) + _1065) * _1030;
        float _1075 = _998 * 0.5;
        float _1076 = _1008 * 0.5;
        float _1077 = _1018 * 0.5;
        float _1078 = dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077));
        float _1083 = (_1078 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1078);
        float _1091 = (dot(vec3(_312, _313, _314), vec3(_1083 * _1075, _1083 * _1076, _1083 * _1077)) + 1.0) * 0.5;
        float _3316 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1100 = sqrt(((_1076 * _1076) + (_1075 * _1075)) + (_1077 * _1077)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _3327 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0));
        float _1102 = _1101 * 2.0;
        float _1106 = (1.0 - _1101) / (_1101 + 1.0);
        float _3338 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
        float _1116 = ((((1.0 - _1107) * (_1102 + 2.0)) * exp2(log2(isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0))) * (_1102 + 1.0))) + _1107) * _1031;
        float _1117 = _999 * 0.5;
        float _1118 = _1009 * 0.5;
        float _1119 = _1019 * 0.5;
        float _1120 = dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119));
        float _1125 = (_1120 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1120);
        float _1133 = (dot(vec3(_312, _313, _314), vec3(_1125 * _1117, _1125 * _1118, _1125 * _1119)) + 1.0) * 0.5;
        float _3349 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1142 = sqrt(((_1118 * _1118) + (_1117 * _1117)) + (_1119 * _1119)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3360 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0));
        float _1144 = _1143 * 2.0;
        float _1148 = (1.0 - _1143) / (_1143 + 1.0);
        float _3371 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
        float _1158 = ((((1.0 - _1149) * (_1144 + 2.0)) * exp2(log2(isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0))) * (_1144 + 1.0))) + _1149) * _1032;
        _1166 = _999;
        _1167 = _998;
        _1168 = _997;
        _1169 = _1009;
        _1170 = _1008;
        _1171 = _1007;
        _1172 = _1019;
        _1173 = _1018;
        _1174 = _1017;
        _1175 = _1032;
        _1176 = _1031;
        _1177 = _1030;
        _1178 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0)));
        _1179 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)));
        _1180 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)));
    }
    else
    {
        _1166 = _857;
        _1167 = _857;
        _1168 = _857;
        _1169 = _857;
        _1170 = _857;
        _1171 = _857;
        _1172 = _857;
        _1173 = _857;
        _1174 = _857;
        _1175 = _857;
        _1176 = _857;
        _1177 = _857;
        _1178 = 0.0;
        _1179 = 0.0;
        _1180 = 0.0;
    }
    float _1190 = (cbModelParam._m0[1u].x * (_1178 - _869)) + _869;
    float _1191 = (cbModelParam._m0[1u].x * (_1179 - _870)) + _870;
    float _1192 = (cbModelParam._m0[1u].x * (_1180 - _871)) + _871;
    float _1213 = fma(_1192, cbSceneParam._m0[89u].z, fma(_1191, cbSceneParam._m0[89u].y, _1190 * cbSceneParam._m0[89u].x));
    float _1216 = fma(_1192, cbSceneParam._m0[90u].z, fma(_1191, cbSceneParam._m0[90u].y, _1190 * cbSceneParam._m0[90u].x));
    float _1219 = fma(_1192, cbSceneParam._m0[91u].z, fma(_1191, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1190));
    float _1234 = _491 * 0.5;
    float _1235 = _492 * 0.5;
    float _1236 = _493 * 0.5;
    float _1237 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_1168, _1171, _1174, _1177));
    float _1240 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_1167, _1170, _1173, _1176));
    float _1243 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_1166, _1169, _1172, _1175));
    float _1277;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1250 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_856, _860, _863, _866));
        float _1254 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_858, _861, _864, _867));
        float _1258 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_859, _862, _865, _868));
        float _1265 = dot(vec4(cbModelParam._m0[39u]), vec4(_1234, _1235, _1236, 1.0));
        _1277 = dot(vec3(isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)), isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)), isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1265) ? 0.0 : (isnan(0.0) ? _1265 : max(0.0, _1265))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1277 = 1.0;
    }
    float _1288;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1279 = dot(vec4(cbModelParam._m0[40u]), vec4(_1234, _1235, _1236, 1.0));
        _1288 = dot(vec3(isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)), isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)), isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1279) ? 0.0 : (isnan(0.0) ? _1279 : max(0.0, _1279))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1288 = 1.0;
    }
    float _1292 = (_1288 * cbModelParam._m0[1u].x) + (_1277 * (1.0 - cbModelParam._m0[1u].x));
    float _1302 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _316);
    float _1303 = isnan(_1302) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1302 : min(cbModelParam._m0[25u].z, _1302));
    float _1385;
    float _1387;
    float _1389;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1352 = fma(_555, cbModelParam._m0[13u].z, fma(_551, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _547)) + cbModelParam._m0[13u].w;
        float _1356 = fma(_555, cbModelParam._m0[14u].z, fma(_551, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _547)) + cbModelParam._m0[14u].w;
        float _1360 = fma(_555, cbModelParam._m0[15u].z, fma(_551, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _547)) + cbModelParam._m0[15u].w;
        float _1363 = fma(_493, cbModelParam._m0[13u].z, fma(_492, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _491));
        float _1366 = fma(_493, cbModelParam._m0[14u].z, fma(_492, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _491));
        float _1369 = fma(_493, cbModelParam._m0[15u].z, fma(_492, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _491));
        float _1397;
        if (_1363 > 0.0)
        {
            _1397 = abs((1.0 - _1352) / _1363);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1363 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1352 + 1.0) / _1363);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1397 = frontier_phi_14_12_ladder;
        }
        float _1854;
        if (_1366 > 0.0)
        {
            _1854 = abs((1.0 - _1356) / _1366);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1366 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1356 + 1.0) / _1366);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1854 = frontier_phi_23_19_ladder;
        }
        float _2154;
        if (_1369 > 0.0)
        {
            _2154 = abs((1.0 - _1360) / _1369);
        }
        else
        {
            float frontier_phi_37_30_ladder;
            if (_1369 < 0.0)
            {
                frontier_phi_37_30_ladder = abs((_1360 + 1.0) / _1369);
            }
            else
            {
                frontier_phi_37_30_ladder = 5000.0;
            }
            _2154 = frontier_phi_37_30_ladder;
        }
        float _2156 = isnan(_1854) ? _1397 : (isnan(_1397) ? _1854 : min(_1397, _1854));
        float _2157 = isnan(_2154) ? _2156 : (isnan(_2156) ? _2154 : min(_2156, _2154));
        float _2161 = (_2157 * _1363) + _1352;
        float _2162 = (_2157 * _1366) + _1356;
        float _2163 = (_2157 * _1369) + _1360;
        float _2164 = _2157 * 9.9999997473787516355514526367188e-05;
        float _2165 = (-1.0) - _2164;
        float _2167 = _2164 + 1.0;
        float frontier_phi_13_37_ladder;
        float frontier_phi_13_37_ladder_1;
        float frontier_phi_13_37_ladder_2;
        if ((_2163 > _2167) || ((_2163 < _2165) || ((_2162 > _2167) || ((_2162 < _2165) || ((_2161 < _2165) || (_2161 > _2167))))))
        {
            frontier_phi_13_37_ladder = 0.0;
            frontier_phi_13_37_ladder_1 = 0.0;
            frontier_phi_13_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2289 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2163, cbModelParam._m0[9u].z, fma(_2162, cbModelParam._m0[9u].y, _2161 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2163, cbModelParam._m0[10u].z, fma(_2162, cbModelParam._m0[10u].y, _2161 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2163, cbModelParam._m0[11u].z, fma(_2162, cbModelParam._m0[11u].y, _2161 * cbModelParam._m0[11u].x))), _1303);
            frontier_phi_13_37_ladder = _2289.z * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_1 = _2289.y * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_2 = _2289.x * cbModelParam._m0[1u].y;
        }
        _1385 = frontier_phi_13_37_ladder_2;
        _1387 = frontier_phi_13_37_ladder_1;
        _1389 = frontier_phi_13_37_ladder;
    }
    else
    {
        vec4 _1373 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_491, _492, _493), _1303);
        _1385 = _1373.x * cbModelParam._m0[1u].y;
        _1387 = _1373.y * cbModelParam._m0[1u].y;
        _1389 = _1373.z * cbModelParam._m0[1u].y;
    }
    float _1393 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _316);
    float _1394 = isnan(_1393) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1393 : min(cbModelParam._m0[25u].w, _1393));
    float _1487;
    float _1489;
    float _1491;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1451 = fma(_555, cbModelParam._m0[21u].z, fma(_551, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _547)) + cbModelParam._m0[21u].w;
        float _1455 = fma(_555, cbModelParam._m0[22u].z, fma(_551, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _547)) + cbModelParam._m0[22u].w;
        float _1459 = fma(_555, cbModelParam._m0[23u].z, fma(_551, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _547)) + cbModelParam._m0[23u].w;
        float _1462 = fma(_493, cbModelParam._m0[21u].z, fma(_492, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _491));
        float _1465 = fma(_493, cbModelParam._m0[22u].z, fma(_492, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _491));
        float _1468 = fma(_493, cbModelParam._m0[23u].z, fma(_492, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _491));
        float _1859;
        if (_1462 > 0.0)
        {
            _1859 = abs((1.0 - _1451) / _1462);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1462 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1451 + 1.0) / _1462);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1859 = frontier_phi_25_21_ladder;
        }
        float _2180;
        if (_1465 > 0.0)
        {
            _2180 = abs((1.0 - _1455) / _1465);
        }
        else
        {
            float frontier_phi_39_32_ladder;
            if (_1465 < 0.0)
            {
                frontier_phi_39_32_ladder = abs((_1455 + 1.0) / _1465);
            }
            else
            {
                frontier_phi_39_32_ladder = 5000.0;
            }
            _2180 = frontier_phi_39_32_ladder;
        }
        float _2349;
        if (_1468 > 0.0)
        {
            _2349 = abs((1.0 - _1459) / _1468);
        }
        else
        {
            float frontier_phi_53_48_ladder;
            if (_1468 < 0.0)
            {
                frontier_phi_53_48_ladder = abs((_1459 + 1.0) / _1468);
            }
            else
            {
                frontier_phi_53_48_ladder = 5000.0;
            }
            _2349 = frontier_phi_53_48_ladder;
        }
        float _2351 = isnan(_2180) ? _1859 : (isnan(_1859) ? _2180 : min(_1859, _2180));
        float _2352 = isnan(_2349) ? _2351 : (isnan(_2351) ? _2349 : min(_2351, _2349));
        float _2356 = (_2352 * _1462) + _1451;
        float _2357 = (_2352 * _1465) + _1455;
        float _2358 = (_2352 * _1468) + _1459;
        float _2359 = _2352 * 9.9999997473787516355514526367188e-05;
        float _2360 = (-1.0) - _2359;
        float _2362 = _2359 + 1.0;
        float frontier_phi_22_53_ladder;
        float frontier_phi_22_53_ladder_1;
        float frontier_phi_22_53_ladder_2;
        if ((_2358 > _2362) || ((_2358 < _2360) || ((_2357 > _2362) || ((_2357 < _2360) || ((_2356 < _2360) || (_2356 > _2362))))))
        {
            frontier_phi_22_53_ladder = 0.0;
            frontier_phi_22_53_ladder_1 = 0.0;
            frontier_phi_22_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2591 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2358, cbModelParam._m0[17u].z, fma(_2357, cbModelParam._m0[17u].y, _2356 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2358, cbModelParam._m0[18u].z, fma(_2357, cbModelParam._m0[18u].y, _2356 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2358, cbModelParam._m0[19u].z, fma(_2357, cbModelParam._m0[19u].y, _2356 * cbModelParam._m0[19u].x))), _1394);
            frontier_phi_22_53_ladder = _2591.y * cbModelParam._m0[1u].z;
            frontier_phi_22_53_ladder_1 = _2591.z * cbModelParam._m0[1u].z;
            frontier_phi_22_53_ladder_2 = _2591.x * cbModelParam._m0[1u].z;
        }
        _1487 = frontier_phi_22_53_ladder_2;
        _1489 = frontier_phi_22_53_ladder;
        _1491 = frontier_phi_22_53_ladder_1;
    }
    else
    {
        vec4 _1471 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_491, _492, _493), _1394);
        _1487 = _1471.x * cbModelParam._m0[1u].z;
        _1489 = _1471.y * cbModelParam._m0[1u].z;
        _1491 = _1471.z * cbModelParam._m0[1u].z;
    }
    float _1504 = (((_518 * _468) + _519) * _483) * ((cbModelParam._m0[1u].w * (_1487 - _1385)) + _1385);
    float _1506 = (((_518 * _470) + _519) * _483) * ((cbModelParam._m0[1u].w * (_1489 - _1387)) + _1387);
    float _1508 = (((_518 * _471) + _519) * _483) * ((cbModelParam._m0[1u].w * (_1491 - _1389)) + _1389);
    float _1511 = fma(_1508, cbSceneParam._m0[89u].z, fma(_1506, cbSceneParam._m0[89u].y, _1504 * cbSceneParam._m0[89u].x));
    float _1514 = fma(_1508, cbSceneParam._m0[90u].z, fma(_1506, cbSceneParam._m0[90u].y, _1504 * cbSceneParam._m0[90u].x));
    float _1517 = fma(_1508, cbSceneParam._m0[91u].z, fma(_1506, cbSceneParam._m0[91u].y, _1504 * cbSceneParam._m0[91u].x));
    vec4 _1525 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_402, _403));
    float _1527 = _1525.w;
    float _1557 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1561 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1600 = 1.0 - (cbSceneParam._m0[69u].x * (1.0 - texture(sampler2D(g_CloudShadowTexture0, SS_WrapLinear), vec2(cbSceneParam._m0[67u].x + (cbSceneParam._m0[67u].z * _1557), cbSceneParam._m0[67u].y - (cbSceneParam._m0[67u].w * _1561))).x));
    float _3497 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
    float _1605 = 1.0 - (cbSceneParam._m0[69u].y * (1.0 - texture(sampler2D(g_CloudShadowTexture1, SS_WrapLinear), vec2(cbSceneParam._m0[68u].x + (cbSceneParam._m0[68u].z * _1557), cbSceneParam._m0[68u].y - (cbSceneParam._m0[68u].w * _1561))).x));
    float _3508 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
    float _1607 = (isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0))) * (isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0)));
    float _1608 = _1607 * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1527));
    float _1609 = _1607 * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1527));
    float _1610 = _1607 * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1527));
    uvec4 _1614 = floatBitsToUint(cbInstanceData._m0[_443 + 5u]);
    uint _1616 = _1614.x * 14u;
    uint _1617 = _1616 + 13u;
    float _1622 = _483 + (-1.0);
    float _1625 = (cbLight._m0[_1617].x * _1622) + 1.0;
    float _1626 = (cbLight._m0[_1617].y * _1622) + 1.0;
    uint _1627 = _1616 + 5u;
    float _1633 = isnan(1.0) ? _1626 : (isnan(_1626) ? 1.0 : min(_1626, 1.0));
    uint _1637 = _1616 + 4u;
    float _1647 = isnan(1.0) ? _1625 : (isnan(_1625) ? 1.0 : min(_1625, 1.0));
    uint _1651 = _1616 | 1u;
    float _1662 = dot(vec3(cbLight._m0[_1616].xyz), vec3(_312, _313, _314));
    float _1665 = dot(vec3(cbLight._m0[_1651].xyz), vec3(_312, _313, _314));
    float _3529 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
    float _3540 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
    float _1670 = (isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))) * 0.3183098733425140380859375;
    float _1672 = (isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0))) * 0.3183098733425140380859375;
    float _1679 = ((cbLight._m0[_1627].x * _1633) * _1672) + (((cbLight._m0[_1637].x * _1608) * _1647) * _1670);
    float _1680 = ((_1633 * cbLight._m0[_1627].y) * _1672) + (((cbLight._m0[_1637].y * _1609) * _1647) * _1670);
    float _1681 = ((_1633 * cbLight._m0[_1627].z) * _1672) + (((cbLight._m0[_1637].z * _1610) * _1647) * _1670);
    uint _1683 = _1616 + 8u;
    float _1696 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1616].w)) * _316) * 0.949999988079071044921875);
    float _1697 = _1696 * _1696;
    float _1698 = cbLight._m0[_1616].x + _394;
    float _1699 = cbLight._m0[_1616].y + _395;
    float _1700 = cbLight._m0[_1616].z + _396;
    float _1704 = inversesqrt(dot(vec3(_1698, _1699, _1700), vec3(_1698, _1699, _1700)));
    float _1705 = _1704 * _1698;
    float _1706 = _1704 * _1699;
    float _1707 = _1704 * _1700;
    float _1708 = dot(vec3(_312, _313, _314), vec3(cbLight._m0[_1616].xyz));
    float _3551 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
    float _1711 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
    float _3562 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _1712 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
    float _1713 = dot(vec3(_312, _313, _314), vec3(_1705, _1706, _1707));
    float _3573 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
    float _1716 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
    float _1717 = dot(vec3(cbLight._m0[_1616].xyz), vec3(_1705, _1706, _1707));
    float _3584 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
    float _1721 = _1697 * _1697;
    float _1725 = ((_1716 * _1716) * (_1721 + (-1.0))) + 1.0;
    float _1733 = exp2(log2(1.0 - (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0)))) * 5.0);
    float _1734 = 0.959999978542327880859375 - _465;
    float _1736 = 0.959999978542327880859375 - _466;
    float _1737 = 0.959999978542327880859375 - _467;
    float _1744 = 1.0 - _1697;
    float _1755 = (0.5 / (((_1712 * ((_1711 * _1744) + _1697)) + 9.9999999392252902907785028219223e-09) + (((_1712 * _1744) + _1697) * _1711))) * _1711;
    float _3595 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
    float _1757 = (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))) * (_1721 / ((_1725 * _1725) * 3.141590118408203125));
    uint _1771 = _1616 + 9u;
    float _1782 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1651].w)) * _316) * 0.949999988079071044921875);
    float _1783 = _1782 * _1782;
    float _1784 = cbLight._m0[_1651].x + _394;
    float _1785 = cbLight._m0[_1651].y + _395;
    float _1786 = cbLight._m0[_1651].z + _396;
    float _1790 = inversesqrt(dot(vec3(_1784, _1785, _1786), vec3(_1784, _1785, _1786)));
    float _1791 = _1790 * _1784;
    float _1792 = _1790 * _1785;
    float _1793 = _1790 * _1786;
    float _1794 = dot(vec3(_312, _313, _314), vec3(cbLight._m0[_1651].xyz));
    float _3606 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _1797 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _1798 = dot(vec3(_312, _313, _314), vec3(_1791, _1792, _1793));
    float _3617 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
    float _1801 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
    float _1802 = dot(vec3(cbLight._m0[_1651].xyz), vec3(_1791, _1792, _1793));
    float _3628 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
    float _1806 = _1783 * _1783;
    float _1810 = ((_1801 * _1801) * (_1806 + (-1.0))) + 1.0;
    float _1817 = exp2(log2(1.0 - (isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0)))) * 5.0);
    float _1824 = 1.0 - _1783;
    float _1834 = (0.5 / (((_1712 * ((_1797 * _1824) + _1783)) + 9.9999999392252902907785028219223e-09) + (((_1712 * _1824) + _1783) * _1797))) * _1797;
    float _3639 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _1836 = (isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * (_1806 / ((_1810 * _1810) * 3.141590118408203125));
    float _1846 = (((((_1817 * _1734) + _468) * cbLight._m0[_1771].x) * _1836) * _1633) + ((((cbLight._m0[_1683].x * _1608) * ((_1733 * _1734) + _468)) * _1757) * _1647);
    float _1847 = (((((_1817 * _1736) + _470) * cbLight._m0[_1771].y) * _1836) * _1633) + ((((cbLight._m0[_1683].y * _1609) * ((_1733 * _1736) + _470)) * _1757) * _1647);
    float _1848 = (((((_1817 * _1737) + _471) * cbLight._m0[_1771].z) * _1836) * _1633) + ((((cbLight._m0[_1683].z * _1610) * ((_1733 * _1737) + _471)) * _1757) * _1647);
    float _1963;
    float _1965;
    float _1967;
    float _1969;
    float _1971;
    float _1973;
    if (_1614.y == 0u)
    {
        float _1903 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1904 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1903;
        float _1905 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1903;
        float _1906 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1903;
        uvec4 _1918 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1919 = _1918.x;
        uint _1930 = uint((float(_1918.y) * floor(float(uint(cbSceneParam._m0[85u].y * _403) / _1919))) + floor(float(uint(cbSceneParam._m0[85u].x * _402) / _1919)));
        float _1940 = (log2(_1906 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1941 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
        uint _1944 = uint(isnan(14.0) ? _1941 : (isnan(_1941) ? 14.0 : min(_1941, 14.0)));
        uvec4 _1949 = texelFetch(g_lightClusterGridBuffer, int(((_1944 << 2u) + (_1930 << 6u)) >> 2u));
        uint _1950 = _1949.x;
        uint _1951 = _1918.z;
        float _2040;
        float _2042;
        float _2044;
        float _2046;
        float _2048;
        float _2050;
        if (((((1u << ((_1951 >> 4u) & 15u)) + 4294967295u) & _1950) == 0u) || ((_1951 & 240u) == 0u))
        {
            _2040 = 0.0;
            _2042 = 0.0;
            _2044 = 0.0;
            _2046 = 0.0;
            _2048 = 0.0;
            _2050 = 0.0;
        }
        else
        {
            float _2041;
            float _2043;
            float _2045;
            float _2047;
            float _2049;
            float _2051;
            float _2217 = 0.0;
            float _2218 = 0.0;
            float _2219 = 0.0;
            float _2220 = 0.0;
            float _2221 = 0.0;
            float _2222 = 0.0;
            uint _2223 = 0u;
            uint _2232;
            bool _2233;
            for (;;)
            {
                _2232 = texelFetch(g_lightClassification, int((((_1944 << 5u) + (_1930 << 9u)) + (_2223 << 2u)) >> 2u)).x;
                _2233 = _2232 == 0u;
                float frontier_phi_50_pred;
                float frontier_phi_50_pred_1;
                float frontier_phi_50_pred_2;
                float frontier_phi_50_pred_3;
                float frontier_phi_50_pred_4;
                float frontier_phi_50_pred_5;
                if (_2233)
                {
                    frontier_phi_50_pred = _2220;
                    frontier_phi_50_pred_1 = _2222;
                    frontier_phi_50_pred_2 = _2221;
                    frontier_phi_50_pred_3 = _2219;
                    frontier_phi_50_pred_4 = _2218;
                    frontier_phi_50_pred_5 = _2217;
                }
                else
                {
                    float _2392;
                    float _2393;
                    float _2394;
                    float _2395;
                    float _2396;
                    float _2397;
                    uint _2398;
                    _2392 = _2217;
                    _2393 = _2218;
                    _2394 = _2219;
                    _2395 = _2220;
                    _2396 = _2221;
                    _2397 = _2222;
                    _2398 = _2232;
                    float _2298;
                    float _2299;
                    float _2300;
                    float _2301;
                    float _2302;
                    float _2303;
                    for (;;)
                    {
                        uint _2402 = uint(findLSB(_2398)) + (_2223 << 5u);
                        uint _2399 = (_2398 + 4294967295u) & _2398;
                        uint _2404 = _2402 * 48u;
                        vec4 _2418 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2404)).x, texelFetch(g_PointLightRenderingBuffer, int(_2404 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2404 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2404 + 3u)).x));
                        uint _2424 = (_2402 * 48u) + 4u;
                        vec4 _2437 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2424)).x, texelFetch(g_PointLightRenderingBuffer, int(_2424 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2424 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2424 + 3u)).x));
                        uint _2443 = (_2402 * 48u) + 8u;
                        vec3 _2454 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2443)).x, texelFetch(g_PointLightRenderingBuffer, int(_2443 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2443 + 2u)).x));
                        float _2458 = _2418.x - _1904;
                        float _2459 = _2418.y - _1905;
                        float _2460 = _2418.z - _1906;
                        float _2461 = dot(vec3(_2458, _2459, _2460), vec3(_2458, _2459, _2460));
                        float _2464 = inversesqrt(_2461);
                        float _2465 = _2464 * _2458;
                        float _2466 = _2464 * _2459;
                        float _2467 = _2464 * _2460;
                        float _2468 = dot(vec3(_424, _427, _430), vec3(_2465, _2466, _2467));
                        float _2473 = 1.0 - (_2461 * _2418.w);
                        float _3660 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
                        float _2474 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
                        float _2475 = sqrt(_2461) * _2437.w;
                        float _2478 = 1.39999997615814208984375 / (_2475 + 1.39999997615814208984375);
                        float _2479 = _2478 * _2478;
                        float _2482 = ((1.0 - _2479) * _2468) + _2479;
                        float _2485 = _2475 * _2475;
                        float _2489 = ((isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0))) * _2474) / ((_2485 * 0.699999988079071044921875) + 1.0);
                        float _2493 = (-0.0) - _1904;
                        float _2494 = (-0.0) - _1905;
                        float _2495 = (-0.0) - _1906;
                        float _2499 = inversesqrt(dot(vec3(_2493, _2494, _2495), vec3(_2493, _2494, _2495)));
                        float _2500 = _2499 * _2493;
                        float _2501 = _2499 * _2494;
                        float _2502 = _2499 * _2495;
                        float _2510 = exp2(log2(1.0 / ((_2485 * 3.5) + 5.0)) * 0.25);
                        float _2511 = 1.0 - _499;
                        float _2518 = sqrt(1.0 - ((1.0 - (_2511 * _2511)) * (1.0 - (_2510 * _2510))));
                        float _2519 = _2518 * _2518;
                        float _2520 = _2519 * _2519;
                        float _2521 = _2500 + _2465;
                        float _2522 = _2501 + _2466;
                        float _2523 = _2502 + _2467;
                        float _2527 = inversesqrt(dot(vec3(_2521, _2522, _2523), vec3(_2521, _2522, _2523)));
                        float _2531 = dot(vec3(_424, _427, _430), vec3(_2500, _2501, _2502));
                        float _3676 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
                        float _2534 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
                        float _2535 = dot(vec3(_424, _427, _430), vec3(_2527 * _2521, _2527 * _2522, _2527 * _2523));
                        float _3687 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
                        float _2538 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
                        float _2542 = ((_2538 * _2538) * (_2520 + (-1.0))) + 1.0;
                        float _2543 = _2478 * _2519;
                        float _2544 = _2543 * _2543;
                        float _2547 = ((1.0 - _2544) * _2468) + _2544;
                        float _3698 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
                        float _2548 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
                        float _2549 = 1.0 - _2519;
                        float _2559 = (0.5 / (((_2548 * ((_2534 * _2549) + _2519)) + 9.9999999392252902907785028219223e-09) + (((_2548 * _2549) + _2519) * _2534))) * _2548;
                        float _3709 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
                        float _2570 = (((_2520 * 3.1415927410125732421875) * (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0)))) / ((_2542 * _2542) * ((_2485 * 2.1991131305694580078125) + 3.141590118408203125))) * _2474;
                        _2301 = (_2489 * _2437.x) + _2395;
                        _2302 = (_2489 * _2437.y) + _2396;
                        _2303 = (_2489 * _2437.z) + _2397;
                        _2298 = (_2570 * _2454.x) + _2392;
                        _2299 = (_2570 * _2454.y) + _2393;
                        _2300 = (_2570 * _2454.z) + _2394;
                        if (_2399 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2392 = _2298;
                            _2393 = _2299;
                            _2394 = _2300;
                            _2395 = _2301;
                            _2396 = _2302;
                            _2397 = _2303;
                            _2398 = _2399;
                        }
                    }
                    frontier_phi_50_pred = _2301;
                    frontier_phi_50_pred_1 = _2303;
                    frontier_phi_50_pred_2 = _2302;
                    frontier_phi_50_pred_3 = _2300;
                    frontier_phi_50_pred_4 = _2299;
                    frontier_phi_50_pred_5 = _2298;
                }
                _2047 = frontier_phi_50_pred;
                _2051 = frontier_phi_50_pred_1;
                _2049 = frontier_phi_50_pred_2;
                _2045 = frontier_phi_50_pred_3;
                _2043 = frontier_phi_50_pred_4;
                _2041 = frontier_phi_50_pred_5;
                uint _2224 = _2223 + 1u;
                if (_2224 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2217 = _2041;
                    _2218 = _2043;
                    _2219 = _2045;
                    _2220 = _2047;
                    _2221 = _2049;
                    _2222 = _2051;
                    _2223 = _2224;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2040 = _2041;
            _2042 = _2043;
            _2044 = _2045;
            _2046 = _2047;
            _2048 = _2049;
            _2050 = _2051;
        }
        uvec4 _2054 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2055 = _2054.z;
        uint _2057 = (_2055 >> 8u) & 15u;
        float _2185;
        float _2187;
        float _2189;
        float _2191;
        float _2193;
        float _2195;
        if (((4294967295u << _2057) & _1950) == 0u)
        {
            _2185 = _2040;
            _2187 = _2042;
            _2189 = _2044;
            _2191 = _2046;
            _2193 = _2048;
            _2195 = _2050;
        }
        else
        {
            float _2210 = inversesqrt(dot(vec3(_1904, _1905, _1906), vec3(_1904, _1905, _1906)));
            float _2211 = _2210 * _1904;
            float _2212 = _2210 * _1905;
            float _2213 = _2210 * _1906;
            float frontier_phi_41_42_ladder;
            float frontier_phi_41_42_ladder_1;
            float frontier_phi_41_42_ladder_2;
            float frontier_phi_41_42_ladder_3;
            float frontier_phi_41_42_ladder_4;
            float frontier_phi_41_42_ladder_5;
            if (_2057 < ((_2055 >> 12u) & 15u))
            {
                float _2186;
                float _2188;
                float _2190;
                float _2192;
                float _2194;
                float _2196;
                float _2375 = _2040;
                float _2376 = _2042;
                float _2377 = _2044;
                float _2378 = _2046;
                float _2379 = _2048;
                float _2380 = _2050;
                uint _2381 = _2057;
                uint _2390;
                bool _2391;
                for (;;)
                {
                    _2390 = texelFetch(g_lightClassification, int((((_1944 << 5u) + (_1930 << 9u)) + (_2381 << 2u)) >> 2u)).x;
                    _2391 = _2390 == 0u;
                    float frontier_phi_59_pred;
                    float frontier_phi_59_pred_1;
                    float frontier_phi_59_pred_2;
                    float frontier_phi_59_pred_3;
                    float frontier_phi_59_pred_4;
                    float frontier_phi_59_pred_5;
                    if (_2391)
                    {
                        frontier_phi_59_pred = _2380;
                        frontier_phi_59_pred_1 = _2379;
                        frontier_phi_59_pred_2 = _2378;
                        frontier_phi_59_pred_3 = _2377;
                        frontier_phi_59_pred_4 = _2376;
                        frontier_phi_59_pred_5 = _2375;
                    }
                    else
                    {
                        float _2596;
                        float _2597;
                        float _2598;
                        float _2599;
                        float _2600;
                        float _2601;
                        float _2892;
                        float _2893;
                        float _2894;
                        float _2895;
                        float _2896;
                        float _2897;
                        float _2609 = _2375;
                        float _2610 = _2376;
                        float _2611 = _2377;
                        float _2612 = _2378;
                        float _2613 = _2379;
                        float _2614 = _2380;
                        uint _2615 = _2390;
                        uint _2616;
                        vec4 _2641;
                        float _2642;
                        vec4 _2657;
                        vec3 _2669;
                        vec4 _2685;
                        vec4 _2701;
                        float _2748;
                        bool _2749;
                        for (;;)
                        {
                            uint _2626 = ((_2381 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2615));
                            _2616 = (_2615 + 4294967295u) & _2615;
                            uint _2628 = _2626 * 40u;
                            _2641 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2628)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2628 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2628 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2628 + 3u)).x));
                            _2642 = _2641.w;
                            uint _2644 = (_2626 * 40u) + 4u;
                            _2657 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2644)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2644 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2644 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2644 + 3u)).x));
                            uint _2659 = (_2626 * 40u) + 8u;
                            _2669 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2659)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2659 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2659 + 2u)).x));
                            uint _2672 = (_2626 * 40u) + 16u;
                            _2685 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2672 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2672 + 3u)).x));
                            uint _2688 = (_2626 * 40u) + 20u;
                            _2701 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2688)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2688 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2688 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2688 + 3u)).x));
                            uint _2704 = (_2626 * 40u) + 24u;
                            vec4 _2717 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2704)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2704 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2704 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2704 + 3u)).x));
                            uint _2723 = (_2626 * 40u) + 28u;
                            vec4 _2736 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2723)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2723 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2723 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2723 + 3u)).x));
                            _2748 = fma(_1906, _2736.z, fma(_1905, _2736.y, _2736.x * _1904)) + _2736.w;
                            _2749 = !((fma(_1906, _2717.z, fma(_1905, _2717.y, _2717.x * _1904)) + _2717.w) <= 0.0);
                            float frontier_phi_65_pred;
                            float frontier_phi_65_pred_1;
                            float frontier_phi_65_pred_2;
                            float frontier_phi_65_pred_3;
                            float frontier_phi_65_pred_4;
                            float frontier_phi_65_pred_5;
                            if (_2749)
                            {
                                float _2776 = _2641.x - _1904;
                                float _2777 = _2641.y - _1905;
                                float _2778 = _2641.z - _1906;
                                float _2779 = dot(vec3(_2776, _2777, _2778), vec3(_2776, _2777, _2778));
                                float _2782 = inversesqrt(_2779);
                                float _2783 = _2782 * _2776;
                                float _2784 = _2782 * _2777;
                                float _2785 = _2782 * _2778;
                                float _2789 = 1.0 - (_2779 / (_2642 * _2642));
                                float _3720 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
                                float _2790 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
                                float _2794 = sqrt(_2779) * _2657.w;
                                float _2796 = 1.39999997615814208984375 / (_2794 + 1.39999997615814208984375);
                                float _2797 = _2796 * _2796;
                                float _2800 = ((1.0 - _2797) * dot(vec3(_2783, _2784, _2785), vec3(_424, _427, _430))) + _2797;
                                float _2803 = _2794 * _2794;
                                float _2807 = (fma(_1906, _2685.z, fma(_1905, _2685.y, _2685.x * _1904)) + _2685.w) / _2748;
                                float _2808 = (fma(_1906, _2701.z, fma(_1905, _2701.y, _2701.x * _1904)) + _2701.w) / _2748;
                                float _2812 = 1.0 - dot(vec2(_2807, _2808), vec2(_2807, _2808));
                                float _3736 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
                                float _2813 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
                                float _2814 = _2813 * (((isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0))) * _2790) / ((_2803 * 0.699999988079071044921875) + 1.0));
                                float _2826 = exp2(log2(1.0 / ((_2803 * 3.5) + 5.0)) * 0.25);
                                float _2827 = 1.0 - _499;
                                float _2834 = sqrt(1.0 - ((1.0 - (_2827 * _2827)) * (1.0 - (_2826 * _2826))));
                                float _2835 = _2834 * _2834;
                                float _2836 = _2835 * _2835;
                                float _2837 = _2783 - _2211;
                                float _2838 = _2784 - _2212;
                                float _2839 = _2785 - _2213;
                                float _2843 = inversesqrt(dot(vec3(_2837, _2838, _2839), vec3(_2837, _2838, _2839)));
                                float _2847 = dot(vec3(_424, _427, _430), vec3((-0.0) - _2211, (-0.0) - _2212, (-0.0) - _2213));
                                float _3747 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
                                float _2850 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
                                float _2851 = dot(vec3(_424, _427, _430), vec3(_2843 * _2837, _2843 * _2838, _2843 * _2839));
                                float _3758 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
                                float _2854 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
                                float _2858 = ((_2854 * _2854) * (_2836 + (-1.0))) + 1.0;
                                float _2859 = _2796 * _2835;
                                float _2860 = _2859 * _2859;
                                float _2866 = ((1.0 - _2860) * dot(vec3(_424, _427, _430), vec3(_2783, _2784, _2785))) + _2860;
                                float _3769 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
                                float _2867 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
                                float _2868 = 1.0 - _2835;
                                float _2878 = (0.5 / (((_2867 * ((_2850 * _2868) + _2835)) + 9.9999999392252902907785028219223e-09) + (((_2867 * _2868) + _2835) * _2850))) * _2867;
                                float _3780 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
                                float _2888 = (_2813 * _2790) * (((_2836 * 3.1415927410125732421875) * (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0)))) / ((_2858 * _2858) * ((_2803 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_65_pred = _2814 * _2657.z;
                                frontier_phi_65_pred_1 = _2814 * _2657.y;
                                frontier_phi_65_pred_2 = _2814 * _2657.x;
                                frontier_phi_65_pred_3 = _2888 * _2669.z;
                                frontier_phi_65_pred_4 = _2888 * _2669.y;
                                frontier_phi_65_pred_5 = _2888 * _2669.x;
                            }
                            else
                            {
                                frontier_phi_65_pred = 0.0;
                                frontier_phi_65_pred_1 = 0.0;
                                frontier_phi_65_pred_2 = 0.0;
                                frontier_phi_65_pred_3 = 0.0;
                                frontier_phi_65_pred_4 = 0.0;
                                frontier_phi_65_pred_5 = 0.0;
                            }
                            _2897 = frontier_phi_65_pred;
                            _2896 = frontier_phi_65_pred_1;
                            _2895 = frontier_phi_65_pred_2;
                            _2894 = frontier_phi_65_pred_3;
                            _2893 = frontier_phi_65_pred_4;
                            _2892 = frontier_phi_65_pred_5;
                            _2599 = _2895 + _2612;
                            _2600 = _2896 + _2613;
                            _2601 = _2897 + _2614;
                            _2596 = _2892 + _2609;
                            _2597 = _2893 + _2610;
                            _2598 = _2894 + _2611;
                            if (_2616 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2609 = _2596;
                                _2610 = _2597;
                                _2611 = _2598;
                                _2612 = _2599;
                                _2613 = _2600;
                                _2614 = _2601;
                                _2615 = _2616;
                                continue;
                            }
                        }
                        frontier_phi_59_pred = _2601;
                        frontier_phi_59_pred_1 = _2600;
                        frontier_phi_59_pred_2 = _2599;
                        frontier_phi_59_pred_3 = _2598;
                        frontier_phi_59_pred_4 = _2597;
                        frontier_phi_59_pred_5 = _2596;
                    }
                    _2196 = frontier_phi_59_pred;
                    _2194 = frontier_phi_59_pred_1;
                    _2192 = frontier_phi_59_pred_2;
                    _2190 = frontier_phi_59_pred_3;
                    _2188 = frontier_phi_59_pred_4;
                    _2186 = frontier_phi_59_pred_5;
                    uint _2382 = _2381 + 1u;
                    if (_2382 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2375 = _2186;
                        _2376 = _2188;
                        _2377 = _2190;
                        _2378 = _2192;
                        _2379 = _2194;
                        _2380 = _2196;
                        _2381 = _2382;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_41_42_ladder = _2192;
                frontier_phi_41_42_ladder_1 = _2196;
                frontier_phi_41_42_ladder_2 = _2194;
                frontier_phi_41_42_ladder_3 = _2190;
                frontier_phi_41_42_ladder_4 = _2188;
                frontier_phi_41_42_ladder_5 = _2186;
            }
            else
            {
                frontier_phi_41_42_ladder = _2046;
                frontier_phi_41_42_ladder_1 = _2050;
                frontier_phi_41_42_ladder_2 = _2048;
                frontier_phi_41_42_ladder_3 = _2044;
                frontier_phi_41_42_ladder_4 = _2042;
                frontier_phi_41_42_ladder_5 = _2040;
            }
            _2185 = frontier_phi_41_42_ladder_5;
            _2187 = frontier_phi_41_42_ladder_4;
            _2189 = frontier_phi_41_42_ladder_3;
            _2191 = frontier_phi_41_42_ladder;
            _2193 = frontier_phi_41_42_ladder_2;
            _2195 = frontier_phi_41_42_ladder_1;
        }
        float _2200 = isnan(1.0) ? _483 : (isnan(_483) ? 1.0 : min(_483, 1.0));
        _1963 = (_2200 * _2191) + _1679;
        _1965 = (_2200 * _2193) + _1680;
        _1967 = (_2200 * _2195) + _1681;
        _1969 = ((_2185 * _468) * _2200) + _1846;
        _1971 = ((_2187 * _470) * _2200) + _1847;
        _1973 = ((_2189 * _471) * _2200) + _1848;
    }
    else
    {
        _1963 = _1679;
        _1965 = _1680;
        _1967 = _1681;
        _1969 = _1846;
        _1971 = _1847;
        _1973 = _1848;
    }
    float _3796 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _3807 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _3818 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _3829 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _1998 = cbInstanceData._m0[_443 + 6u].w * (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0)));
    float _2003 = _402 / cbSceneParam._m0[86u].x;
    float _2004 = _403 / cbSceneParam._m0[86u].y;
    vec4 _2018 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2003, _2004, (log2((isnan(cbSceneParam._m0[77u].w) ? _336 : (isnan(_336) ? cbSceneParam._m0[77u].w : min(_336, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2020 = _2018.x;
    float _2021 = _2018.y;
    float _2022 = _2018.z;
    float _2023 = _2018.w;
    float _2104;
    float _2106;
    float _2108;
    float _2110;
    if (_336 > cbSceneParam._m0[78u].w)
    {
        float _2065 = isnan(_336) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _336 : min(cbSceneParam._m0[80u].w, _336));
        float _2066 = _2065 / _336;
        float _2077 = _2066 * _387;
        float _2078 = _388 * _2066;
        float _2079 = (-0.0) - _2078;
        float _2081 = _2066 * _389;
        float _2083 = (cbSceneParam._m0[77u].w * _2079) / _2065;
        float _2084 = _2083 + cbSceneParam._m0[79u].w;
        float _2085 = cbSceneParam._m0[79u].w - _2078;
        float _2091 = sqrt(((_2077 * _2077) + (_2078 * _2078)) + (_2081 * _2081));
        float _2094 = (1.0 - (cbSceneParam._m0[77u].w / _2065)) * _2091;
        float _2100 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2102 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2311;
        if (abs((_2079 - _2083) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2311 = ((((_2084 > 0.0) ? exp2(_2100 * _2084) : (2.0 - exp2(_2102 * _2084))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2094;
        }
        else
        {
            float _2246 = 1.0 / cbSceneParam._m0[80u].x;
            float _2247 = isnan(_2085) ? _2084 : (isnan(_2084) ? _2085 : max(_2084, _2085));
            float _2248 = isnan(_2085) ? _2084 : (isnan(_2084) ? _2085 : min(_2084, _2085));
            float _2257 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : min(_2247, 0.0));
            float _2258 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : min(_2248, 0.0));
            _2311 = ((abs(_2091 / _2079) * cbSceneParam._m0[80u].y) * ((((_2257 - _2258) * 2.0) - ((exp2(_2100 * (isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0)))) - exp2(_2100 * (isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0))))) * _2246)) - ((exp2(_2102 * _2257) - exp2(_2102 * _2258)) * _2246))) + (_2094 * cbSceneParam._m0[80u].z);
        }
        vec4 _2313 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2003, _2004, 1.0), 0.0);
        float _2322 = exp2((_2311 * (-1.44269502162933349609375)) * (1.0 - _2313.w));
        float _2323 = log2(_2322);
        float _2339 = log2(_2023);
        _2104 = (exp2(_2339 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2323 * cbSceneParam._m0[78u].x)) * _2313.x) / cbSceneParam._m0[78u].x)) + _2020;
        _2106 = (exp2(_2339 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2323 * cbSceneParam._m0[78u].y)) * _2313.y) / cbSceneParam._m0[78u].y)) + _2021;
        _2108 = (exp2(_2339 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2323 * cbSceneParam._m0[78u].z)) * _2313.z) / cbSceneParam._m0[78u].z)) + _2022;
        _2110 = _2322 * _2023;
    }
    else
    {
        _2104 = _2020;
        _2106 = _2021;
        _2108 = _2022;
        _2110 = _2023;
    }
    float _2122 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2123 = _2122 == 3.0;
    float _2124 = log2(_2110);
    float _2131 = exp2(_2124 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * (_1963 + ((isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0))) * _483))) + ((_1969 + ((isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))) * _1292)) * cbPerFrame._m0[3u].x));
    float _2132 = exp2(_2124 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))) * (_1965 + ((isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0))) * _483))) + ((_1971 + ((isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))) * _1292)) * cbPerFrame._m0[3u].x));
    float _2133 = exp2(_2124 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * (_1967 + ((isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0))) * _483))) + ((_1973 + ((isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))) * _1292)) * cbPerFrame._m0[3u].x));
    float _2142 = (_2122 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2142 * (_2123 ? _2131 : (_2131 + (cbSceneParam._m0[72u].w * _2104)));
    SV_Target.y = _2142 * (_2123 ? _2132 : (_2132 + (cbSceneParam._m0[72u].w * _2106)));
    SV_Target.z = _2142 * (_2123 ? _2133 : (_2133 + (cbSceneParam._m0[72u].w * _2108)));
    SV_Target.w = _1998;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _1998;
}


