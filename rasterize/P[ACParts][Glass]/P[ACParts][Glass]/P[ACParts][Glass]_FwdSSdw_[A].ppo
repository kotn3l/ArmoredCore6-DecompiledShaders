#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 64) uniform texture2D g_CloudShadowTexture0;
layout(set = 0, binding = 65) uniform texture2D g_CloudShadowTexture1;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_Glass_snp_0_Texture2D_7;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_Glass_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _913;
float _3127;
float _3128;
float _3129;
float _3130;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _229 = ((cbMtdParam._m0[10u].z * TEXCOORD_3.x) * (cbMtdParam._m0[11u].x - cbMtdParam._m0[11u].w)) + cbMtdParam._m0[11u].w;
    vec4 _247 = texture(sampler2D(P_ACParts_Glass_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _256 = (_247.x * 2.0) + (-1.0);
    float _258 = (_247.y * 2.0) + (-1.0);
    float _259 = dot(vec2(_256, _258), vec2(_256, _258));
    float _3139 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _265 = sqrt(1.0 - (isnan(1.0) ? _3139 : (isnan(_3139) ? 1.0 : min(_3139, 1.0))));
    float _270 = ((cbMtdParam._m0[11u].z + _247.z) * 0.5) + cbMtdParam._m0[10u].x;
    float _275 = exp2(log2(cbMtdParam._m0[10u].z) * cbMtdParam._m0[10u].w);
    vec4 _287 = texture(sampler2D(P_ACParts_Glass_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _301 = (((cbMtdParam._m0[10u].y * TEXCOORD_3.x) * _275) * ((_287.x * 2.0) + (-1.0))) + _256;
    float _302 = (((cbMtdParam._m0[10u].y * TEXCOORD_3.y) * _275) * ((_287.y * 2.0) + (-1.0))) + _258;
    float _304 = gl_FragCoord.x * 0.125;
    float _306 = gl_FragCoord.y * 0.125;
    float _317 = fma(_265, _199 * NORMAL.x, fma(_302, _206 * TANGENT.x, (_192 * _184) * _301));
    float _320 = fma(_265, _199 * NORMAL.y, fma(_302, _206 * TANGENT.y, (_192 * _185) * _301));
    float _323 = fma(_265, _199 * NORMAL.z, fma(_302, _206 * TANGENT.z, (_192 * _186) * _301));
    float _327 = inversesqrt(dot(vec3(_317, _320, _323), vec3(_317, _320, _323)));
    float _328 = _327 * _317;
    float _329 = _327 * _320;
    float _330 = _327 * _323;
    float _3150 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _331 = isnan(1.0) ? _3150 : (isnan(_3150) ? 1.0 : min(_3150, 1.0));
    float _3161 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _332 = isnan(1.0) ? _3161 : (isnan(_3161) ? 1.0 : min(_3161, 1.0));
    float _3172 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _3183 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _3194 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _3205 = isnan(0.0) ? cbMtdParam._m0[12u].x : (isnan(cbMtdParam._m0[12u].x) ? 0.0 : max(cbMtdParam._m0[12u].x, 0.0));
    float _336 = isnan(1.0) ? _3205 : (isnan(_3205) ? 1.0 : min(_3205, 1.0));
    if (!(cbMtdParam._m0[11u].y >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_304, _306)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _356 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _397 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _407 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _397);
    float _408 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _397);
    float _409 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _397);
    float _413 = inversesqrt(dot(vec3(_407, _408, _409), vec3(_407, _408, _409)));
    float _414 = _407 * _413;
    float _415 = _408 * _413;
    float _416 = _409 * _413;
    vec4 _418 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_304, _306));
    float _420 = _418.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _595 = sqrt(((_407 * _407) + (_408 * _408)) + (_409 * _409));
        float _601 = (cbMatDynParam._m0[5u].x * _595) + cbMatDynParam._m0[5u].y;
        float _3216 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
        float _602 = isnan(1.0) ? _3216 : (isnan(_3216) ? 1.0 : min(_3216, 1.0));
        float _606 = (cbMatDynParam._m0[5u].z * _595) + cbMatDynParam._m0[5u].w;
        float _3227 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3227 : (isnan(_3227) ? 1.0 : min(_3227, 1.0))) - _602)) + _602) < ((_420 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _432 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _433 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _453 = fma(_330, cbSceneParam._m0[5u].z, fma(_329, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _328));
    float _456 = fma(_330, cbSceneParam._m0[6u].z, fma(_329, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _328));
    float _459 = fma(_330, cbSceneParam._m0[7u].z, fma(_329, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _328));
    uint _472 = uint(roundEven(NORMAL.w)) * 13u;
    uint _473 = _472 + 9u;
    uint _474 = _473 + uint(cbMatDynParam._m0[0u].w);
    float _480 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3172 : (isnan(_3172) ? 1.0 : min(_3172, 1.0)))) * cbInstanceData._m0[_474].x;
    float _481 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0)))) * cbInstanceData._m0[_474].y;
    float _482 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0)))) * cbInstanceData._m0[_474].z;
    float _3238 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _483 = isnan(1.0) ? _3238 : (isnan(_3238) ? 1.0 : min(_3238, 1.0));
    float _3249 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _484 = isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0));
    float _3260 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _485 = isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0));
    float _486 = 1.0 - _336;
    float _487 = _483 * _486;
    float _488 = _484 * _486;
    float _489 = _485 * _486;
    float _494 = (_483 + (-0.039999999105930328369140625)) * _336;
    float _495 = (_484 + (-0.039999999105930328369140625)) * _336;
    float _496 = (_485 + (-0.039999999105930328369140625)) * _336;
    float _497 = _494 + 0.039999999105930328369140625;
    float _499 = _495 + 0.039999999105930328369140625;
    float _500 = _496 + 0.039999999105930328369140625;
    vec4 _509 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _432, cbSceneParam._m0[86u].y * _433));
    float _512 = _509.x * TEXCOORD_3.w;
    float _513 = dot(vec3(_328, _329, _330), vec3(_414, _415, _416));
    float _516 = _513 * 2.0;
    float _520 = (_516 * _328) - _414;
    float _521 = (_516 * _329) - _415;
    float _522 = (_516 * _330) - _416;
    float _526 = abs(dot(vec3(_414, _415, _416), vec3(_328, _329, _330)));
    float _3271 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _528 = sqrt(_332);
    float _541 = exp2((_528 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_528 * 3.0));
    float _547 = (1.0 - _541) * ((_528 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _548 = _541 * _528;
    float _576 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _580 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _584 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _912;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _638 = fma(_584, cbModelParam._m0[26u].z, fma(_580, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _576));
        float _642 = fma(_584, cbModelParam._m0[27u].z, fma(_580, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _576));
        float _646 = fma(_584, cbModelParam._m0[28u].z, fma(_580, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _576));
        float _670 = _576 + _328;
        float _671 = _580 + _329;
        float _672 = _584 + _330;
        float _682 = fma(_672, cbModelParam._m0[26u].z, fma(_671, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _670)) - _638;
        float _683 = fma(_672, cbModelParam._m0[27u].z, fma(_671, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _670)) - _642;
        float _684 = fma(_672, cbModelParam._m0[28u].z, fma(_671, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _670)) - _646;
        float _688 = inversesqrt(dot(vec3(_682, _683, _684), vec3(_682, _683, _684)));
        float _701 = ((_688 * _682) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_638 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _702 = ((_688 * _683) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_642 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _703 = ((_688 * _684) / cbModelParam._m0[34u].z) + ((((((_646 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _706 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_701, _702, _703), 0.0);
        vec4 _713 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_701, _702, _703), 0.0);
        vec4 _720 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_701, _702, _703), 0.0);
        vec4 _727 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_701, _702, _703), 0.0);
        float _740 = exp2((_706.w + (-0.5)) * 20.0) * 2.0;
        float _741 = _740 * (_706.x + (-0.5));
        float _742 = _740 * (_706.y + (-0.5));
        float _743 = _740 * (_706.z + (-0.5));
        float _750 = exp2((_713.w + (-0.5)) * 20.0) * 2.0;
        float _751 = _750 * (_713.x + (-0.5));
        float _752 = _750 * (_713.y + (-0.5));
        float _753 = _750 * (_713.z + (-0.5));
        float _760 = exp2((_720.w + (-0.5)) * 20.0) * 2.0;
        float _761 = _760 * (_720.x + (-0.5));
        float _762 = _760 * (_720.y + (-0.5));
        float _763 = _760 * (_720.z + (-0.5));
        float _770 = exp2((_727.w + (-0.5)) * 20.0) * 2.0;
        float _771 = _770 * (_727.x + (-0.5));
        float _772 = _770 * (_727.y + (-0.5));
        float _773 = _770 * (_727.z + (-0.5));
        float _774 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _775 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _776 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _777 = _741 * 0.5;
        float _778 = _751 * 0.5;
        float _779 = _761 * 0.5;
        float _780 = dot(vec3(_777, _778, _779), vec3(_777, _778, _779));
        float _785 = (_780 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_780);
        float _794 = (dot(vec3(_328, _329, _330), vec3(_785 * _777, _785 * _778, _785 * _779)) + 1.0) * 0.5;
        float _3297 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _804 = sqrt(((_778 * _778) + (_777 * _777)) + (_779 * _779)) / (_774 + 9.9999997473787516355514526367188e-06);
        float _3308 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _805 = isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0));
        float _806 = _805 * 2.0;
        float _810 = (1.0 - _805) / (_805 + 1.0);
        float _3319 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _811 = isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0));
        float _820 = ((((1.0 - _811) * (_806 + 2.0)) * exp2(log2(isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0))) * (_806 + 1.0))) + _811) * _774;
        float _821 = _742 * 0.5;
        float _822 = _752 * 0.5;
        float _823 = _762 * 0.5;
        float _824 = dot(vec3(_821, _822, _823), vec3(_821, _822, _823));
        float _829 = (_824 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_824);
        float _837 = (dot(vec3(_328, _329, _330), vec3(_829 * _821, _829 * _822, _829 * _823)) + 1.0) * 0.5;
        float _3330 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _846 = sqrt(((_822 * _822) + (_821 * _821)) + (_823 * _823)) / (_775 + 9.9999997473787516355514526367188e-06);
        float _3341 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _847 = isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0));
        float _848 = _847 * 2.0;
        float _852 = (1.0 - _847) / (_847 + 1.0);
        float _3352 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _853 = isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0));
        float _862 = ((((1.0 - _853) * (_848 + 2.0)) * exp2(log2(isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0))) * (_848 + 1.0))) + _853) * _775;
        float _863 = _743 * 0.5;
        float _864 = _753 * 0.5;
        float _865 = _763 * 0.5;
        float _866 = dot(vec3(_863, _864, _865), vec3(_863, _864, _865));
        float _871 = (_866 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_866);
        float _879 = (dot(vec3(_328, _329, _330), vec3(_871 * _863, _871 * _864, _871 * _865)) + 1.0) * 0.5;
        float _3363 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _888 = sqrt(((_864 * _864) + (_863 * _863)) + (_865 * _865)) / (_776 + 9.9999997473787516355514526367188e-06);
        float _3374 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _889 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
        float _890 = _889 * 2.0;
        float _894 = (1.0 - _889) / (_889 + 1.0);
        float _3385 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _895 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
        float _904 = ((((1.0 - _895) * (_890 + 2.0)) * exp2(log2(isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0))) * (_890 + 1.0))) + _895) * _776;
        _912 = _743;
        _914 = _742;
        _915 = _741;
        _916 = _753;
        _917 = _752;
        _918 = _751;
        _919 = _763;
        _920 = _762;
        _921 = _761;
        _922 = _776;
        _923 = _775;
        _924 = _774;
        _925 = cbModelParam._m0[36u].z * (isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0)));
        _926 = cbModelParam._m0[36u].z * (isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0)));
        _927 = cbModelParam._m0[36u].z * (isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0)));
    }
    else
    {
        _912 = _913;
        _914 = _913;
        _915 = _913;
        _916 = _913;
        _917 = _913;
        _918 = _913;
        _919 = _913;
        _920 = _913;
        _921 = _913;
        _922 = _913;
        _923 = _913;
        _924 = _913;
        _925 = 0.0;
        _926 = 0.0;
        _927 = 0.0;
    }
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _953 = fma(_584, cbModelParam._m0[30u].z, fma(_580, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _576));
        float _957 = fma(_584, cbModelParam._m0[31u].z, fma(_580, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _576));
        float _961 = fma(_584, cbModelParam._m0[32u].z, fma(_580, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _576));
        float _984 = _576 + _328;
        float _985 = _580 + _329;
        float _986 = _584 + _330;
        float _996 = fma(_986, cbModelParam._m0[30u].z, fma(_985, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _984)) - _953;
        float _997 = fma(_986, cbModelParam._m0[31u].z, fma(_985, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _984)) - _957;
        float _998 = fma(_986, cbModelParam._m0[32u].z, fma(_985, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _984)) - _961;
        float _1002 = inversesqrt(dot(vec3(_996, _997, _998), vec3(_996, _997, _998)));
        float _1015 = ((_1002 * _996) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_953 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1016 = ((_1002 * _997) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_957 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1017 = ((_1002 * _998) / cbModelParam._m0[35u].z) + ((((((_961 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        float _1052 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1019.x + (-0.5));
        float _1054 = _1052 * (_1019.y + (-0.5));
        float _1055 = _1052 * (_1019.z + (-0.5));
        float _1062 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1026.x + (-0.5));
        float _1064 = _1062 * (_1026.y + (-0.5));
        float _1065 = _1062 * (_1026.z + (-0.5));
        float _1072 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1033.x + (-0.5));
        float _1074 = _1072 * (_1033.y + (-0.5));
        float _1075 = _1072 * (_1033.z + (-0.5));
        float _1082 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1040.x + (-0.5));
        float _1084 = _1082 * (_1040.y + (-0.5));
        float _1085 = _1082 * (_1040.z + (-0.5));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1088 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1089 = _1053 * 0.5;
        float _1090 = _1063 * 0.5;
        float _1091 = _1073 * 0.5;
        float _1092 = dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091));
        float _1097 = (_1092 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1092);
        float _1105 = (dot(vec3(_328, _329, _330), vec3(_1097 * _1089, _1097 * _1090, _1097 * _1091)) + 1.0) * 0.5;
        float _3426 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1114 = sqrt(((_1090 * _1090) + (_1089 * _1089)) + (_1091 * _1091)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _3437 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
        float _1116 = _1115 * 2.0;
        float _1120 = (1.0 - _1115) / (_1115 + 1.0);
        float _3448 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
        float _1130 = ((((1.0 - _1121) * (_1116 + 2.0)) * exp2(log2(isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0))) * (_1116 + 1.0))) + _1121) * _1086;
        float _1131 = _1054 * 0.5;
        float _1132 = _1064 * 0.5;
        float _1133 = _1074 * 0.5;
        float _1134 = dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133));
        float _1139 = (_1134 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1134);
        float _1147 = (dot(vec3(_328, _329, _330), vec3(_1139 * _1131, _1139 * _1132, _1139 * _1133)) + 1.0) * 0.5;
        float _3459 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1156 = sqrt(((_1132 * _1132) + (_1131 * _1131)) + (_1133 * _1133)) / (_1087 + 9.9999997473787516355514526367188e-06);
        float _3470 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
        float _1158 = _1157 * 2.0;
        float _1162 = (1.0 - _1157) / (_1157 + 1.0);
        float _3481 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
        float _1172 = ((((1.0 - _1163) * (_1158 + 2.0)) * exp2(log2(isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0))) * (_1158 + 1.0))) + _1163) * _1087;
        float _1173 = _1055 * 0.5;
        float _1174 = _1065 * 0.5;
        float _1175 = _1075 * 0.5;
        float _1176 = dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175));
        float _1181 = (_1176 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1176);
        float _1189 = (dot(vec3(_328, _329, _330), vec3(_1181 * _1173, _1181 * _1174, _1181 * _1175)) + 1.0) * 0.5;
        float _3492 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1198 = sqrt(((_1174 * _1174) + (_1173 * _1173)) + (_1175 * _1175)) / (_1088 + 9.9999997473787516355514526367188e-06);
        float _3503 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
        float _1200 = _1199 * 2.0;
        float _1204 = (1.0 - _1199) / (_1199 + 1.0);
        float _3514 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _1214 = ((((1.0 - _1205) * (_1200 + 2.0)) * exp2(log2(isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))) * (_1200 + 1.0))) + _1205) * _1088;
        _1222 = _1055;
        _1223 = _1054;
        _1224 = _1053;
        _1225 = _1065;
        _1226 = _1064;
        _1227 = _1063;
        _1228 = _1075;
        _1229 = _1074;
        _1230 = _1073;
        _1231 = _1088;
        _1232 = _1087;
        _1233 = _1086;
        _1234 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)));
        _1235 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)));
        _1236 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)));
    }
    else
    {
        _1222 = _913;
        _1223 = _913;
        _1224 = _913;
        _1225 = _913;
        _1226 = _913;
        _1227 = _913;
        _1228 = _913;
        _1229 = _913;
        _1230 = _913;
        _1231 = _913;
        _1232 = _913;
        _1233 = _913;
        _1234 = 0.0;
        _1235 = 0.0;
        _1236 = 0.0;
    }
    float _1246 = (cbModelParam._m0[1u].x * (_1234 - _925)) + _925;
    float _1247 = (cbModelParam._m0[1u].x * (_1235 - _926)) + _926;
    float _1248 = (cbModelParam._m0[1u].x * (_1236 - _927)) + _927;
    float _1269 = fma(_1248, cbSceneParam._m0[89u].z, fma(_1247, cbSceneParam._m0[89u].y, _1246 * cbSceneParam._m0[89u].x));
    float _1272 = fma(_1248, cbSceneParam._m0[90u].z, fma(_1247, cbSceneParam._m0[90u].y, _1246 * cbSceneParam._m0[90u].x));
    float _1275 = fma(_1248, cbSceneParam._m0[91u].z, fma(_1247, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1246));
    float _1290 = _520 * 0.5;
    float _1291 = _521 * 0.5;
    float _1292 = _522 * 0.5;
    float _1293 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_1224, _1227, _1230, _1233));
    float _1296 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_1223, _1226, _1229, _1232));
    float _1299 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_1222, _1225, _1228, _1231));
    float _1333;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1306 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_912, _916, _919, _922));
        float _1310 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_914, _917, _920, _923));
        float _1314 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_915, _918, _921, _924));
        float _1321 = dot(vec4(cbModelParam._m0[39u]), vec4(_1290, _1291, _1292, 1.0));
        _1333 = dot(vec3(isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)), isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)), isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1321) ? 0.0 : (isnan(0.0) ? _1321 : max(0.0, _1321))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1333 = 1.0;
    }
    float _1344;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1335 = dot(vec4(cbModelParam._m0[40u]), vec4(_1290, _1291, _1292, 1.0));
        _1344 = dot(vec3(isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)), isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)), isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1335) ? 0.0 : (isnan(0.0) ? _1335 : max(0.0, _1335))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1344 = 1.0;
    }
    float _1348 = (_1344 * cbModelParam._m0[1u].x) + (_1333 * (1.0 - cbModelParam._m0[1u].x));
    float _1358 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _332);
    float _1359 = isnan(_1358) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1358 : min(cbModelParam._m0[25u].z, _1358));
    float _1441;
    float _1443;
    float _1445;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1408 = fma(_584, cbModelParam._m0[13u].z, fma(_580, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _576)) + cbModelParam._m0[13u].w;
        float _1412 = fma(_584, cbModelParam._m0[14u].z, fma(_580, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _576)) + cbModelParam._m0[14u].w;
        float _1416 = fma(_584, cbModelParam._m0[15u].z, fma(_580, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _576)) + cbModelParam._m0[15u].w;
        float _1419 = fma(_522, cbModelParam._m0[13u].z, fma(_521, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _520));
        float _1422 = fma(_522, cbModelParam._m0[14u].z, fma(_521, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _520));
        float _1425 = fma(_522, cbModelParam._m0[15u].z, fma(_521, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _520));
        float _1453;
        if (_1419 > 0.0)
        {
            _1453 = abs((1.0 - _1408) / _1419);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1419 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1408 + 1.0) / _1419);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1453 = frontier_phi_19_17_ladder;
        }
        float _1910;
        if (_1422 > 0.0)
        {
            _1910 = abs((1.0 - _1412) / _1422);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1422 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1412 + 1.0) / _1422);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1910 = frontier_phi_28_24_ladder;
        }
        float _2218;
        if (_1425 > 0.0)
        {
            _2218 = abs((1.0 - _1416) / _1425);
        }
        else
        {
            float frontier_phi_42_35_ladder;
            if (_1425 < 0.0)
            {
                frontier_phi_42_35_ladder = abs((_1416 + 1.0) / _1425);
            }
            else
            {
                frontier_phi_42_35_ladder = 5000.0;
            }
            _2218 = frontier_phi_42_35_ladder;
        }
        float _2220 = isnan(_1910) ? _1453 : (isnan(_1453) ? _1910 : min(_1453, _1910));
        float _2221 = isnan(_2218) ? _2220 : (isnan(_2220) ? _2218 : min(_2220, _2218));
        float _2225 = (_2221 * _1419) + _1408;
        float _2226 = (_2221 * _1422) + _1412;
        float _2227 = (_2221 * _1425) + _1416;
        float _2228 = _2221 * 9.9999997473787516355514526367188e-05;
        float _2229 = (-1.0) - _2228;
        float _2231 = _2228 + 1.0;
        float frontier_phi_18_42_ladder;
        float frontier_phi_18_42_ladder_1;
        float frontier_phi_18_42_ladder_2;
        if ((_2227 > _2231) || ((_2227 < _2229) || ((_2226 > _2231) || ((_2226 < _2229) || ((_2225 < _2229) || (_2225 > _2231))))))
        {
            frontier_phi_18_42_ladder = 0.0;
            frontier_phi_18_42_ladder_1 = 0.0;
            frontier_phi_18_42_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2369 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2227, cbModelParam._m0[9u].z, fma(_2226, cbModelParam._m0[9u].y, _2225 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2227, cbModelParam._m0[10u].z, fma(_2226, cbModelParam._m0[10u].y, _2225 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2227, cbModelParam._m0[11u].z, fma(_2226, cbModelParam._m0[11u].y, _2225 * cbModelParam._m0[11u].x))), _1359);
            frontier_phi_18_42_ladder = _2369.z * cbModelParam._m0[1u].y;
            frontier_phi_18_42_ladder_1 = _2369.y * cbModelParam._m0[1u].y;
            frontier_phi_18_42_ladder_2 = _2369.x * cbModelParam._m0[1u].y;
        }
        _1441 = frontier_phi_18_42_ladder_2;
        _1443 = frontier_phi_18_42_ladder_1;
        _1445 = frontier_phi_18_42_ladder;
    }
    else
    {
        vec4 _1429 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_520, _521, _522), _1359);
        _1441 = _1429.x * cbModelParam._m0[1u].y;
        _1443 = _1429.y * cbModelParam._m0[1u].y;
        _1445 = _1429.z * cbModelParam._m0[1u].y;
    }
    float _1449 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _332);
    float _1450 = isnan(_1449) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1449 : min(cbModelParam._m0[25u].w, _1449));
    float _1543;
    float _1545;
    float _1547;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1507 = fma(_584, cbModelParam._m0[21u].z, fma(_580, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _576)) + cbModelParam._m0[21u].w;
        float _1511 = fma(_584, cbModelParam._m0[22u].z, fma(_580, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _576)) + cbModelParam._m0[22u].w;
        float _1515 = fma(_584, cbModelParam._m0[23u].z, fma(_580, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _576)) + cbModelParam._m0[23u].w;
        float _1518 = fma(_522, cbModelParam._m0[21u].z, fma(_521, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _520));
        float _1521 = fma(_522, cbModelParam._m0[22u].z, fma(_521, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _520));
        float _1524 = fma(_522, cbModelParam._m0[23u].z, fma(_521, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _520));
        float _1915;
        if (_1518 > 0.0)
        {
            _1915 = abs((1.0 - _1507) / _1518);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1507 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1915 = frontier_phi_30_26_ladder;
        }
        float _2244;
        if (_1521 > 0.0)
        {
            _2244 = abs((1.0 - _1511) / _1521);
        }
        else
        {
            float frontier_phi_44_37_ladder;
            if (_1521 < 0.0)
            {
                frontier_phi_44_37_ladder = abs((_1511 + 1.0) / _1521);
            }
            else
            {
                frontier_phi_44_37_ladder = 5000.0;
            }
            _2244 = frontier_phi_44_37_ladder;
        }
        float _2434;
        if (_1524 > 0.0)
        {
            _2434 = abs((1.0 - _1515) / _1524);
        }
        else
        {
            float frontier_phi_62_55_ladder;
            if (_1524 < 0.0)
            {
                frontier_phi_62_55_ladder = abs((_1515 + 1.0) / _1524);
            }
            else
            {
                frontier_phi_62_55_ladder = 5000.0;
            }
            _2434 = frontier_phi_62_55_ladder;
        }
        float _2436 = isnan(_2244) ? _1915 : (isnan(_1915) ? _2244 : min(_1915, _2244));
        float _2437 = isnan(_2434) ? _2436 : (isnan(_2436) ? _2434 : min(_2436, _2434));
        float _2441 = (_2437 * _1518) + _1507;
        float _2442 = (_2437 * _1521) + _1511;
        float _2443 = (_2437 * _1524) + _1515;
        float _2444 = _2437 * 9.9999997473787516355514526367188e-05;
        float _2445 = (-1.0) - _2444;
        float _2447 = _2444 + 1.0;
        float frontier_phi_27_62_ladder;
        float frontier_phi_27_62_ladder_1;
        float frontier_phi_27_62_ladder_2;
        if ((_2443 > _2447) || ((_2443 < _2445) || ((_2442 > _2447) || ((_2442 < _2445) || ((_2441 < _2445) || (_2441 > _2447))))))
        {
            frontier_phi_27_62_ladder = 0.0;
            frontier_phi_27_62_ladder_1 = 0.0;
            frontier_phi_27_62_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2685 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2443, cbModelParam._m0[17u].z, fma(_2442, cbModelParam._m0[17u].y, _2441 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2443, cbModelParam._m0[18u].z, fma(_2442, cbModelParam._m0[18u].y, _2441 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2443, cbModelParam._m0[19u].z, fma(_2442, cbModelParam._m0[19u].y, _2441 * cbModelParam._m0[19u].x))), _1450);
            frontier_phi_27_62_ladder = _2685.x * cbModelParam._m0[1u].z;
            frontier_phi_27_62_ladder_1 = _2685.z * cbModelParam._m0[1u].z;
            frontier_phi_27_62_ladder_2 = _2685.y * cbModelParam._m0[1u].z;
        }
        _1543 = frontier_phi_27_62_ladder;
        _1545 = frontier_phi_27_62_ladder_2;
        _1547 = frontier_phi_27_62_ladder_1;
    }
    else
    {
        vec4 _1527 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_520, _521, _522), _1450);
        _1543 = _1527.x * cbModelParam._m0[1u].z;
        _1545 = _1527.y * cbModelParam._m0[1u].z;
        _1547 = _1527.z * cbModelParam._m0[1u].z;
    }
    float _1560 = (((_547 * _497) + _548) * _512) * ((cbModelParam._m0[1u].w * (_1543 - _1441)) + _1441);
    float _1562 = (((_547 * _499) + _548) * _512) * ((cbModelParam._m0[1u].w * (_1545 - _1443)) + _1443);
    float _1564 = (((_547 * _500) + _548) * _512) * ((cbModelParam._m0[1u].w * (_1547 - _1445)) + _1445);
    float _1567 = fma(_1564, cbSceneParam._m0[89u].z, fma(_1562, cbSceneParam._m0[89u].y, _1560 * cbSceneParam._m0[89u].x));
    float _1570 = fma(_1564, cbSceneParam._m0[90u].z, fma(_1562, cbSceneParam._m0[90u].y, _1560 * cbSceneParam._m0[90u].x));
    float _1573 = fma(_1564, cbSceneParam._m0[91u].z, fma(_1562, cbSceneParam._m0[91u].y, _1560 * cbSceneParam._m0[91u].x));
    vec4 _1581 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_432, _433));
    float _1583 = _1581.w;
    float _1613 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1617 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1656 = 1.0 - (cbSceneParam._m0[69u].x * (1.0 - texture(sampler2D(g_CloudShadowTexture0, SS_WrapLinear), vec2(cbSceneParam._m0[67u].x + (cbSceneParam._m0[67u].z * _1613), cbSceneParam._m0[67u].y - (cbSceneParam._m0[67u].w * _1617))).x));
    float _3640 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
    float _1661 = 1.0 - (cbSceneParam._m0[69u].y * (1.0 - texture(sampler2D(g_CloudShadowTexture1, SS_WrapLinear), vec2(cbSceneParam._m0[68u].x + (cbSceneParam._m0[68u].z * _1613), cbSceneParam._m0[68u].y - (cbSceneParam._m0[68u].w * _1617))).x));
    float _3651 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
    float _1663 = (isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) * (isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0)));
    float _1664 = _1663 * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1583));
    float _1665 = _1663 * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1583));
    float _1666 = _1663 * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1583));
    uvec4 _1670 = floatBitsToUint(cbInstanceData._m0[_472 + 5u]);
    uint _1672 = _1670.x * 14u;
    uint _1673 = _1672 + 13u;
    float _1678 = _512 + (-1.0);
    float _1681 = (cbLight._m0[_1673].x * _1678) + 1.0;
    float _1682 = (cbLight._m0[_1673].y * _1678) + 1.0;
    uint _1683 = _1672 + 5u;
    float _1689 = isnan(1.0) ? _1682 : (isnan(_1682) ? 1.0 : min(_1682, 1.0));
    uint _1693 = _1672 + 4u;
    float _1703 = isnan(1.0) ? _1681 : (isnan(_1681) ? 1.0 : min(_1681, 1.0));
    uint _1707 = _1672 | 1u;
    float _1718 = dot(vec3(cbLight._m0[_1672].xyz), vec3(_328, _329, _330));
    float _1721 = dot(vec3(cbLight._m0[_1707].xyz), vec3(_328, _329, _330));
    float _3672 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
    float _3683 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
    float _1726 = (isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * 0.3183098733425140380859375;
    float _1728 = (isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * 0.3183098733425140380859375;
    float _1735 = ((cbLight._m0[_1683].x * _1689) * _1728) + (((cbLight._m0[_1693].x * _1664) * _1703) * _1726);
    float _1736 = ((_1689 * cbLight._m0[_1683].y) * _1728) + (((cbLight._m0[_1693].y * _1665) * _1703) * _1726);
    float _1737 = ((_1689 * cbLight._m0[_1683].z) * _1728) + (((cbLight._m0[_1693].z * _1666) * _1703) * _1726);
    uint _1739 = _1672 + 8u;
    float _1752 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1672].w)) * _332) * 0.949999988079071044921875);
    float _1753 = _1752 * _1752;
    float _1754 = cbLight._m0[_1672].x + _414;
    float _1755 = cbLight._m0[_1672].y + _415;
    float _1756 = cbLight._m0[_1672].z + _416;
    float _1760 = inversesqrt(dot(vec3(_1754, _1755, _1756), vec3(_1754, _1755, _1756)));
    float _1761 = _1760 * _1754;
    float _1762 = _1760 * _1755;
    float _1763 = _1760 * _1756;
    float _1764 = dot(vec3(_328, _329, _330), vec3(cbLight._m0[_1672].xyz));
    float _3694 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
    float _1767 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
    float _3705 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _1768 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
    float _1769 = dot(vec3(_328, _329, _330), vec3(_1761, _1762, _1763));
    float _3716 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _1772 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
    float _1773 = dot(vec3(cbLight._m0[_1672].xyz), vec3(_1761, _1762, _1763));
    float _3727 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _1777 = _1753 * _1753;
    float _1781 = ((_1772 * _1772) * (_1777 + (-1.0))) + 1.0;
    float _1789 = exp2(log2(1.0 - (isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0)))) * 5.0);
    float _1790 = 0.959999978542327880859375 - _494;
    float _1792 = 0.959999978542327880859375 - _495;
    float _1793 = 0.959999978542327880859375 - _496;
    float _1800 = 1.0 - _1753;
    float _1811 = (0.5 / (((_1768 * ((_1767 * _1800) + _1753)) + 9.9999999392252902907785028219223e-09) + (((_1768 * _1800) + _1753) * _1767))) * _1767;
    float _3738 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _1813 = (isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * (_1777 / ((_1781 * _1781) * 3.141590118408203125));
    uint _1827 = _1672 + 9u;
    float _1838 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1707].w)) * _332) * 0.949999988079071044921875);
    float _1839 = _1838 * _1838;
    float _1840 = cbLight._m0[_1707].x + _414;
    float _1841 = cbLight._m0[_1707].y + _415;
    float _1842 = cbLight._m0[_1707].z + _416;
    float _1846 = inversesqrt(dot(vec3(_1840, _1841, _1842), vec3(_1840, _1841, _1842)));
    float _1847 = _1846 * _1840;
    float _1848 = _1846 * _1841;
    float _1849 = _1846 * _1842;
    float _1850 = dot(vec3(_328, _329, _330), vec3(cbLight._m0[_1707].xyz));
    float _3749 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
    float _1853 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
    float _1854 = dot(vec3(_328, _329, _330), vec3(_1847, _1848, _1849));
    float _3760 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1857 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    float _1858 = dot(vec3(cbLight._m0[_1707].xyz), vec3(_1847, _1848, _1849));
    float _3771 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1862 = _1839 * _1839;
    float _1866 = ((_1857 * _1857) * (_1862 + (-1.0))) + 1.0;
    float _1873 = exp2(log2(1.0 - (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0)))) * 5.0);
    float _1880 = 1.0 - _1839;
    float _1890 = (0.5 / (((_1768 * ((_1853 * _1880) + _1839)) + 9.9999999392252902907785028219223e-09) + (((_1768 * _1880) + _1839) * _1853))) * _1853;
    float _3782 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1892 = (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) * (_1862 / ((_1866 * _1866) * 3.141590118408203125));
    float _1902 = (((((_1873 * _1790) + _497) * cbLight._m0[_1827].x) * _1892) * _1689) + ((((cbLight._m0[_1739].x * _1664) * ((_1789 * _1790) + _497)) * _1813) * _1703);
    float _1903 = (((((_1873 * _1792) + _499) * cbLight._m0[_1827].y) * _1892) * _1689) + ((((cbLight._m0[_1739].y * _1665) * ((_1789 * _1792) + _499)) * _1813) * _1703);
    float _1904 = (((((_1873 * _1793) + _500) * cbLight._m0[_1827].z) * _1892) * _1689) + ((((cbLight._m0[_1739].z * _1666) * ((_1789 * _1793) + _500)) * _1813) * _1703);
    float _2019;
    float _2021;
    float _2023;
    float _2025;
    float _2027;
    float _2029;
    if (_1670.y == 0u)
    {
        float _1959 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1960 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1959;
        float _1961 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1959;
        float _1962 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1959;
        uvec4 _1974 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1975 = _1974.x;
        uint _1986 = uint((float(_1974.y) * floor(float(uint(cbSceneParam._m0[85u].y * _433) / _1975))) + floor(float(uint(cbSceneParam._m0[85u].x * _432) / _1975)));
        float _1996 = (log2(_1962 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1997 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
        uint _2000 = uint(isnan(14.0) ? _1997 : (isnan(_1997) ? 14.0 : min(_1997, 14.0)));
        uvec4 _2005 = texelFetch(g_lightClusterGridBuffer, int(((_2000 << 2u) + (_1986 << 6u)) >> 2u));
        uint _2006 = _2005.x;
        uint _2007 = _1974.z;
        float _2096;
        float _2098;
        float _2100;
        float _2102;
        float _2104;
        float _2106;
        if (((((1u << ((_2007 >> 4u) & 15u)) + 4294967295u) & _2006) == 0u) || ((_2007 & 240u) == 0u))
        {
            _2096 = 0.0;
            _2098 = 0.0;
            _2100 = 0.0;
            _2102 = 0.0;
            _2104 = 0.0;
            _2106 = 0.0;
        }
        else
        {
            float _2097;
            float _2099;
            float _2101;
            float _2103;
            float _2105;
            float _2107;
            float _2281 = 0.0;
            float _2282 = 0.0;
            float _2283 = 0.0;
            float _2284 = 0.0;
            float _2285 = 0.0;
            float _2286 = 0.0;
            uint _2287 = 0u;
            uint _2296;
            bool _2297;
            for (;;)
            {
                _2296 = texelFetch(g_lightClassification, int((((_2000 << 5u) + (_1986 << 9u)) + (_2287 << 2u)) >> 2u)).x;
                _2297 = _2296 == 0u;
                float frontier_phi_57_pred;
                float frontier_phi_57_pred_1;
                float frontier_phi_57_pred_2;
                float frontier_phi_57_pred_3;
                float frontier_phi_57_pred_4;
                float frontier_phi_57_pred_5;
                if (_2297)
                {
                    frontier_phi_57_pred = _2285;
                    frontier_phi_57_pred_1 = _2286;
                    frontier_phi_57_pred_2 = _2284;
                    frontier_phi_57_pred_3 = _2283;
                    frontier_phi_57_pred_4 = _2282;
                    frontier_phi_57_pred_5 = _2281;
                }
                else
                {
                    float _2477;
                    float _2478;
                    float _2479;
                    float _2480;
                    float _2481;
                    float _2482;
                    uint _2483;
                    _2477 = _2281;
                    _2478 = _2282;
                    _2479 = _2283;
                    _2480 = _2284;
                    _2481 = _2285;
                    _2482 = _2286;
                    _2483 = _2296;
                    float _2378;
                    float _2379;
                    float _2380;
                    float _2381;
                    float _2382;
                    float _2383;
                    for (;;)
                    {
                        uint _2487 = uint(findLSB(_2483)) + (_2287 << 5u);
                        uint _2484 = (_2483 + 4294967295u) & _2483;
                        uint _2489 = _2487 * 48u;
                        vec4 _2503 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2489)).x, texelFetch(g_PointLightRenderingBuffer, int(_2489 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2489 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2489 + 3u)).x));
                        uint _2509 = (_2487 * 48u) + 4u;
                        vec4 _2522 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2509)).x, texelFetch(g_PointLightRenderingBuffer, int(_2509 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2509 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2509 + 3u)).x));
                        uint _2528 = (_2487 * 48u) + 8u;
                        vec3 _2539 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2528)).x, texelFetch(g_PointLightRenderingBuffer, int(_2528 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2528 + 2u)).x));
                        float _2543 = _2503.x - _1960;
                        float _2544 = _2503.y - _1961;
                        float _2545 = _2503.z - _1962;
                        float _2546 = dot(vec3(_2543, _2544, _2545), vec3(_2543, _2544, _2545));
                        float _2549 = inversesqrt(_2546);
                        float _2550 = _2549 * _2543;
                        float _2551 = _2549 * _2544;
                        float _2552 = _2549 * _2545;
                        float _2553 = dot(vec3(_453, _456, _459), vec3(_2550, _2551, _2552));
                        float _2558 = 1.0 - (_2546 * _2503.w);
                        float _3803 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
                        float _2559 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
                        float _2560 = sqrt(_2546) * _2522.w;
                        float _2563 = 1.39999997615814208984375 / (_2560 + 1.39999997615814208984375);
                        float _2564 = _2563 * _2563;
                        float _2567 = ((1.0 - _2564) * _2553) + _2564;
                        float _2570 = _2560 * _2560;
                        float _2574 = ((isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0))) * _2559) / ((_2570 * 0.699999988079071044921875) + 1.0);
                        float _2578 = (-0.0) - _1960;
                        float _2579 = (-0.0) - _1961;
                        float _2580 = (-0.0) - _1962;
                        float _2584 = inversesqrt(dot(vec3(_2578, _2579, _2580), vec3(_2578, _2579, _2580)));
                        float _2585 = _2584 * _2578;
                        float _2586 = _2584 * _2579;
                        float _2587 = _2584 * _2580;
                        float _2595 = exp2(log2(1.0 / ((_2570 * 3.5) + 5.0)) * 0.25);
                        float _2596 = 1.0 - _528;
                        float _2603 = sqrt(1.0 - ((1.0 - (_2596 * _2596)) * (1.0 - (_2595 * _2595))));
                        float _2604 = _2603 * _2603;
                        float _2605 = _2604 * _2604;
                        float _2606 = _2585 + _2550;
                        float _2607 = _2586 + _2551;
                        float _2608 = _2587 + _2552;
                        float _2612 = inversesqrt(dot(vec3(_2606, _2607, _2608), vec3(_2606, _2607, _2608)));
                        float _2616 = dot(vec3(_453, _456, _459), vec3(_2585, _2586, _2587));
                        float _3819 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
                        float _2619 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
                        float _2620 = dot(vec3(_453, _456, _459), vec3(_2612 * _2606, _2612 * _2607, _2612 * _2608));
                        float _3830 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
                        float _2623 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
                        float _2627 = ((_2623 * _2623) * (_2605 + (-1.0))) + 1.0;
                        float _2628 = _2563 * _2604;
                        float _2629 = _2628 * _2628;
                        float _2632 = ((1.0 - _2629) * _2553) + _2629;
                        float _3841 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
                        float _2633 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
                        float _2634 = 1.0 - _2604;
                        float _2644 = (0.5 / (((_2633 * ((_2619 * _2634) + _2604)) + 9.9999999392252902907785028219223e-09) + (((_2633 * _2634) + _2604) * _2619))) * _2633;
                        float _3852 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
                        float _2655 = (((_2605 * 3.1415927410125732421875) * (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0)))) / ((_2627 * _2627) * ((_2570 * 2.1991131305694580078125) + 3.141590118408203125))) * _2559;
                        _2381 = (_2574 * _2522.x) + _2480;
                        _2382 = (_2574 * _2522.y) + _2481;
                        _2383 = (_2574 * _2522.z) + _2482;
                        _2378 = (_2655 * _2539.x) + _2477;
                        _2379 = (_2655 * _2539.y) + _2478;
                        _2380 = (_2655 * _2539.z) + _2479;
                        if (_2484 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2477 = _2378;
                            _2478 = _2379;
                            _2479 = _2380;
                            _2480 = _2381;
                            _2481 = _2382;
                            _2482 = _2383;
                            _2483 = _2484;
                        }
                    }
                    frontier_phi_57_pred = _2382;
                    frontier_phi_57_pred_1 = _2383;
                    frontier_phi_57_pred_2 = _2381;
                    frontier_phi_57_pred_3 = _2380;
                    frontier_phi_57_pred_4 = _2379;
                    frontier_phi_57_pred_5 = _2378;
                }
                _2105 = frontier_phi_57_pred;
                _2107 = frontier_phi_57_pred_1;
                _2103 = frontier_phi_57_pred_2;
                _2101 = frontier_phi_57_pred_3;
                _2099 = frontier_phi_57_pred_4;
                _2097 = frontier_phi_57_pred_5;
                uint _2288 = _2287 + 1u;
                if (_2288 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2281 = _2097;
                    _2282 = _2099;
                    _2283 = _2101;
                    _2284 = _2103;
                    _2285 = _2105;
                    _2286 = _2107;
                    _2287 = _2288;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2096 = _2097;
            _2098 = _2099;
            _2100 = _2101;
            _2102 = _2103;
            _2104 = _2105;
            _2106 = _2107;
        }
        uvec4 _2110 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2111 = _2110.z;
        uint _2113 = (_2111 >> 8u) & 15u;
        float _2249;
        float _2251;
        float _2253;
        float _2255;
        float _2257;
        float _2259;
        if (((4294967295u << _2113) & _2006) == 0u)
        {
            _2249 = _2096;
            _2251 = _2098;
            _2253 = _2100;
            _2255 = _2102;
            _2257 = _2104;
            _2259 = _2106;
        }
        else
        {
            float _2274 = inversesqrt(dot(vec3(_1960, _1961, _1962), vec3(_1960, _1961, _1962)));
            float _2275 = _2274 * _1960;
            float _2276 = _2274 * _1961;
            float _2277 = _2274 * _1962;
            float frontier_phi_46_47_ladder;
            float frontier_phi_46_47_ladder_1;
            float frontier_phi_46_47_ladder_2;
            float frontier_phi_46_47_ladder_3;
            float frontier_phi_46_47_ladder_4;
            float frontier_phi_46_47_ladder_5;
            if (_2113 < ((_2111 >> 12u) & 15u))
            {
                float _2250;
                float _2252;
                float _2254;
                float _2256;
                float _2258;
                float _2260;
                float _2460 = _2096;
                float _2461 = _2098;
                float _2462 = _2100;
                float _2463 = _2102;
                float _2464 = _2104;
                float _2465 = _2106;
                uint _2466 = _2113;
                uint _2475;
                bool _2476;
                for (;;)
                {
                    _2475 = texelFetch(g_lightClassification, int((((_2000 << 5u) + (_1986 << 9u)) + (_2466 << 2u)) >> 2u)).x;
                    _2476 = _2475 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2476)
                    {
                        frontier_phi_71_pred = _2465;
                        frontier_phi_71_pred_1 = _2464;
                        frontier_phi_71_pred_2 = _2463;
                        frontier_phi_71_pred_3 = _2462;
                        frontier_phi_71_pred_4 = _2461;
                        frontier_phi_71_pred_5 = _2460;
                    }
                    else
                    {
                        float _2690;
                        float _2691;
                        float _2692;
                        float _2693;
                        float _2694;
                        float _2695;
                        float _2986;
                        float _2987;
                        float _2988;
                        float _2989;
                        float _2990;
                        float _2991;
                        float _2703 = _2460;
                        float _2704 = _2461;
                        float _2705 = _2462;
                        float _2706 = _2463;
                        float _2707 = _2464;
                        float _2708 = _2465;
                        uint _2709 = _2475;
                        uint _2710;
                        vec4 _2735;
                        float _2736;
                        vec4 _2751;
                        vec3 _2763;
                        vec4 _2779;
                        vec4 _2795;
                        float _2842;
                        bool _2843;
                        for (;;)
                        {
                            uint _2720 = ((_2466 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2709));
                            _2710 = (_2709 + 4294967295u) & _2709;
                            uint _2722 = _2720 * 40u;
                            _2735 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2722)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2722 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2722 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2722 + 3u)).x));
                            _2736 = _2735.w;
                            uint _2738 = (_2720 * 40u) + 4u;
                            _2751 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2738)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2738 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2738 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2738 + 3u)).x));
                            uint _2753 = (_2720 * 40u) + 8u;
                            _2763 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2753)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2753 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2753 + 2u)).x));
                            uint _2766 = (_2720 * 40u) + 16u;
                            _2779 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2766)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2766 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2766 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2766 + 3u)).x));
                            uint _2782 = (_2720 * 40u) + 20u;
                            _2795 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2782)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2782 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2782 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2782 + 3u)).x));
                            uint _2798 = (_2720 * 40u) + 24u;
                            vec4 _2811 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2798)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 3u)).x));
                            uint _2817 = (_2720 * 40u) + 28u;
                            vec4 _2830 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2817)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 3u)).x));
                            _2842 = fma(_1962, _2830.z, fma(_1961, _2830.y, _2830.x * _1960)) + _2830.w;
                            _2843 = !((fma(_1962, _2811.z, fma(_1961, _2811.y, _2811.x * _1960)) + _2811.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_2843)
                            {
                                float _2870 = _2735.x - _1960;
                                float _2871 = _2735.y - _1961;
                                float _2872 = _2735.z - _1962;
                                float _2873 = dot(vec3(_2870, _2871, _2872), vec3(_2870, _2871, _2872));
                                float _2876 = inversesqrt(_2873);
                                float _2877 = _2876 * _2870;
                                float _2878 = _2876 * _2871;
                                float _2879 = _2876 * _2872;
                                float _2883 = 1.0 - (_2873 / (_2736 * _2736));
                                float _3863 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
                                float _2884 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
                                float _2888 = sqrt(_2873) * _2751.w;
                                float _2890 = 1.39999997615814208984375 / (_2888 + 1.39999997615814208984375);
                                float _2891 = _2890 * _2890;
                                float _2894 = ((1.0 - _2891) * dot(vec3(_2877, _2878, _2879), vec3(_453, _456, _459))) + _2891;
                                float _2897 = _2888 * _2888;
                                float _2901 = (fma(_1962, _2779.z, fma(_1961, _2779.y, _2779.x * _1960)) + _2779.w) / _2842;
                                float _2902 = (fma(_1962, _2795.z, fma(_1961, _2795.y, _2795.x * _1960)) + _2795.w) / _2842;
                                float _2906 = 1.0 - dot(vec2(_2901, _2902), vec2(_2901, _2902));
                                float _3879 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
                                float _2907 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
                                float _2908 = _2907 * (((isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0))) * _2884) / ((_2897 * 0.699999988079071044921875) + 1.0));
                                float _2920 = exp2(log2(1.0 / ((_2897 * 3.5) + 5.0)) * 0.25);
                                float _2921 = 1.0 - _528;
                                float _2928 = sqrt(1.0 - ((1.0 - (_2921 * _2921)) * (1.0 - (_2920 * _2920))));
                                float _2929 = _2928 * _2928;
                                float _2930 = _2929 * _2929;
                                float _2931 = _2877 - _2275;
                                float _2932 = _2878 - _2276;
                                float _2933 = _2879 - _2277;
                                float _2937 = inversesqrt(dot(vec3(_2931, _2932, _2933), vec3(_2931, _2932, _2933)));
                                float _2941 = dot(vec3(_453, _456, _459), vec3((-0.0) - _2275, (-0.0) - _2276, (-0.0) - _2277));
                                float _3890 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
                                float _2944 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
                                float _2945 = dot(vec3(_453, _456, _459), vec3(_2937 * _2931, _2937 * _2932, _2937 * _2933));
                                float _3901 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
                                float _2948 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
                                float _2952 = ((_2948 * _2948) * (_2930 + (-1.0))) + 1.0;
                                float _2953 = _2890 * _2929;
                                float _2954 = _2953 * _2953;
                                float _2960 = ((1.0 - _2954) * dot(vec3(_453, _456, _459), vec3(_2877, _2878, _2879))) + _2954;
                                float _3912 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                                float _2961 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
                                float _2962 = 1.0 - _2929;
                                float _2972 = (0.5 / (((_2961 * ((_2944 * _2962) + _2929)) + 9.9999999392252902907785028219223e-09) + (((_2961 * _2962) + _2929) * _2944))) * _2961;
                                float _3923 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
                                float _2982 = (_2907 * _2884) * (((_2930 * 3.1415927410125732421875) * (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0)))) / ((_2952 * _2952) * ((_2897 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _2908 * _2751.x;
                                frontier_phi_77_pred_1 = _2908 * _2751.z;
                                frontier_phi_77_pred_2 = _2908 * _2751.y;
                                frontier_phi_77_pred_3 = _2982 * _2763.z;
                                frontier_phi_77_pred_4 = _2982 * _2763.y;
                                frontier_phi_77_pred_5 = _2982 * _2763.x;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _2989 = frontier_phi_77_pred;
                            _2991 = frontier_phi_77_pred_1;
                            _2990 = frontier_phi_77_pred_2;
                            _2988 = frontier_phi_77_pred_3;
                            _2987 = frontier_phi_77_pred_4;
                            _2986 = frontier_phi_77_pred_5;
                            _2693 = _2989 + _2706;
                            _2694 = _2990 + _2707;
                            _2695 = _2991 + _2708;
                            _2690 = _2986 + _2703;
                            _2691 = _2987 + _2704;
                            _2692 = _2988 + _2705;
                            if (_2710 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2703 = _2690;
                                _2704 = _2691;
                                _2705 = _2692;
                                _2706 = _2693;
                                _2707 = _2694;
                                _2708 = _2695;
                                _2709 = _2710;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2695;
                        frontier_phi_71_pred_1 = _2694;
                        frontier_phi_71_pred_2 = _2693;
                        frontier_phi_71_pred_3 = _2692;
                        frontier_phi_71_pred_4 = _2691;
                        frontier_phi_71_pred_5 = _2690;
                    }
                    _2260 = frontier_phi_71_pred;
                    _2258 = frontier_phi_71_pred_1;
                    _2256 = frontier_phi_71_pred_2;
                    _2254 = frontier_phi_71_pred_3;
                    _2252 = frontier_phi_71_pred_4;
                    _2250 = frontier_phi_71_pred_5;
                    uint _2467 = _2466 + 1u;
                    if (_2467 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2460 = _2250;
                        _2461 = _2252;
                        _2462 = _2254;
                        _2463 = _2256;
                        _2464 = _2258;
                        _2465 = _2260;
                        _2466 = _2467;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_46_47_ladder = _2252;
                frontier_phi_46_47_ladder_1 = _2260;
                frontier_phi_46_47_ladder_2 = _2258;
                frontier_phi_46_47_ladder_3 = _2256;
                frontier_phi_46_47_ladder_4 = _2254;
                frontier_phi_46_47_ladder_5 = _2250;
            }
            else
            {
                frontier_phi_46_47_ladder = _2098;
                frontier_phi_46_47_ladder_1 = _2106;
                frontier_phi_46_47_ladder_2 = _2104;
                frontier_phi_46_47_ladder_3 = _2102;
                frontier_phi_46_47_ladder_4 = _2100;
                frontier_phi_46_47_ladder_5 = _2096;
            }
            _2249 = frontier_phi_46_47_ladder_5;
            _2251 = frontier_phi_46_47_ladder;
            _2253 = frontier_phi_46_47_ladder_4;
            _2255 = frontier_phi_46_47_ladder_3;
            _2257 = frontier_phi_46_47_ladder_2;
            _2259 = frontier_phi_46_47_ladder_1;
        }
        float _2264 = isnan(1.0) ? _512 : (isnan(_512) ? 1.0 : min(_512, 1.0));
        _2019 = (_2264 * _2255) + _1735;
        _2021 = (_2264 * _2257) + _1736;
        _2023 = (_2264 * _2259) + _1737;
        _2025 = ((_2249 * _497) * _2264) + _1902;
        _2027 = ((_2251 * _499) * _2264) + _1903;
        _2029 = ((_2253 * _500) * _2264) + _1904;
    }
    else
    {
        _2019 = _1735;
        _2021 = _1736;
        _2023 = _1737;
        _2025 = _1902;
        _2027 = _1903;
        _2029 = _1904;
    }
    float _3939 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _3950 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _3961 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _3972 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _2047 = ((isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * (_2019 + ((isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0))) * _512))) + ((_2025 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _1348)) * cbPerFrame._m0[3u].x);
    float _2048 = ((isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_2021 + ((isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0))) * _512))) + ((_2027 + ((isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))) * _1348)) * cbPerFrame._m0[3u].x);
    float _2049 = ((isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * (_2023 + ((isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0))) * _512))) + ((_2029 + ((isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))) * _1348)) * cbPerFrame._m0[3u].x);
    float _2054 = cbInstanceData._m0[_472 + 6u].w * (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0)));
    float _2059 = _432 / cbSceneParam._m0[86u].x;
    float _2060 = _433 / cbSceneParam._m0[86u].y;
    vec4 _2074 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2059, _2060, (log2((isnan(cbSceneParam._m0[77u].w) ? _356 : (isnan(_356) ? cbSceneParam._m0[77u].w : min(_356, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2076 = _2074.x;
    float _2077 = _2074.y;
    float _2078 = _2074.z;
    float _2079 = _2074.w;
    float _2160;
    float _2162;
    float _2164;
    float _2166;
    if (_356 > cbSceneParam._m0[78u].w)
    {
        float _2121 = isnan(_356) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _356 : min(cbSceneParam._m0[80u].w, _356));
        float _2122 = _2121 / _356;
        float _2133 = _2122 * _407;
        float _2134 = _408 * _2122;
        float _2135 = (-0.0) - _2134;
        float _2137 = _2122 * _409;
        float _2139 = (cbSceneParam._m0[77u].w * _2135) / _2121;
        float _2140 = _2139 + cbSceneParam._m0[79u].w;
        float _2141 = cbSceneParam._m0[79u].w - _2134;
        float _2147 = sqrt(((_2133 * _2133) + (_2134 * _2134)) + (_2137 * _2137));
        float _2150 = (1.0 - (cbSceneParam._m0[77u].w / _2121)) * _2147;
        float _2156 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2158 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2391;
        if (abs((_2135 - _2139) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2391 = ((((_2140 > 0.0) ? exp2(_2156 * _2140) : (2.0 - exp2(_2158 * _2140))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2150;
        }
        else
        {
            float _2310 = 1.0 / cbSceneParam._m0[80u].x;
            float _2311 = isnan(_2141) ? _2140 : (isnan(_2140) ? _2141 : max(_2140, _2141));
            float _2312 = isnan(_2141) ? _2140 : (isnan(_2140) ? _2141 : min(_2140, _2141));
            float _2321 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : min(_2311, 0.0));
            float _2322 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : min(_2312, 0.0));
            _2391 = ((abs(_2147 / _2135) * cbSceneParam._m0[80u].y) * ((((_2321 - _2322) * 2.0) - ((exp2(_2156 * (isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0)))) - exp2(_2156 * (isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0))))) * _2310)) - ((exp2(_2158 * _2321) - exp2(_2158 * _2322)) * _2310))) + (_2150 * cbSceneParam._m0[80u].z);
        }
        vec4 _2393 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2059, _2060, 1.0), 0.0);
        float _2402 = exp2((_2391 * (-1.44269502162933349609375)) * (1.0 - _2393.w));
        float _2403 = log2(_2402);
        float _2419 = log2(_2079);
        _2160 = (exp2(_2419 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2403 * cbSceneParam._m0[78u].x)) * _2393.x) / cbSceneParam._m0[78u].x)) + _2076;
        _2162 = (exp2(_2419 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2403 * cbSceneParam._m0[78u].y)) * _2393.y) / cbSceneParam._m0[78u].y)) + _2077;
        _2164 = (exp2(_2419 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2403 * cbSceneParam._m0[78u].z)) * _2393.z) / cbSceneParam._m0[78u].z)) + _2078;
        _2166 = _2402 * _2079;
    }
    else
    {
        _2160 = _2076;
        _2162 = _2077;
        _2164 = _2078;
        _2166 = _2079;
    }
    bool _2429;
    vec4 _2176;
    vec4 _2198;
    float _2200;
    float _2204;
    float _2205;
    float _2206;
    float _2207;
    bool _2217;
    for (;;)
    {
        _2176 = cbMatDynParam._m0[0u];
        float _2178 = roundEven(_2176.y);
        bool _2179 = _2178 == 3.0;
        float _2180 = log2(_2166);
        float _2187 = exp2(_2180 * cbSceneParam._m0[78u].x) * _2047;
        float _2188 = exp2(_2180 * cbSceneParam._m0[78u].y) * _2048;
        float _2189 = exp2(_2180 * cbSceneParam._m0[78u].z) * _2049;
        float _2196 = _420 + (-0.5);
        _2198 = cbMtdParam._m0[1u];
        _2200 = _2198.y * _2196;
        float _2203 = (_2178 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2204 = _2203 * (_2179 ? _2187 : (_2187 + (cbSceneParam._m0[72u].w * _2160)));
        _2205 = _2203 * (_2179 ? _2188 : (_2188 + (cbSceneParam._m0[72u].w * _2162)));
        _2206 = _2203 * (_2179 ? _2189 : (_2189 + (cbSceneParam._m0[72u].w * _2164)));
        _2207 = _2196 * 0.999000012874603271484375;
        _2217 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2217)
        {
            if ((cbInstanceData._m0[_472 + 7u].x + _2207) < 0.5)
            {
                _2429 = true;
                break;
            }
        }
        uint _2345 = _473 + uint(_2176.w);
        if ((cbInstanceData._m0[_2345].w < 1.0) && ((cbInstanceData._m0[_2345].w + _2207) < 0.5))
        {
            _2429 = true;
            break;
        }
        if ((_2200 + 1.0) < _2198.x)
        {
            _2429 = true;
            break;
        }
        _2429 = false;
        break;
    }
    float _2660;
    if (_2429)
    {
        discard_state = true;
        _2660 = 0.0;
    }
    else
    {
        _2660 = _2054;
    }
    SV_Target.x = _2204;
    SV_Target.y = _2205;
    SV_Target.z = _2206;
    SV_Target.w = _2660;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2054;
    discard_exit();
}


