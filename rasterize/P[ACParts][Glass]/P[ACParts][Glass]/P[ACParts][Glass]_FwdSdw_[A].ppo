#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 64) uniform texture2D g_CloudShadowTexture0;
layout(set = 0, binding = 65) uniform texture2D g_CloudShadowTexture1;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_Glass_snp_0_Texture2D_7;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_Glass_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _915;
float _3411;
float _3412;
float _3413;
float _3414;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _231 = ((cbMtdParam._m0[10u].z * TEXCOORD_3.x) * (cbMtdParam._m0[11u].x - cbMtdParam._m0[11u].w)) + cbMtdParam._m0[11u].w;
    vec4 _249 = texture(sampler2D(P_ACParts_Glass_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _258 = (_249.x * 2.0) + (-1.0);
    float _260 = (_249.y * 2.0) + (-1.0);
    float _261 = dot(vec2(_258, _260), vec2(_258, _260));
    float _3423 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _267 = sqrt(1.0 - (isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0))));
    float _272 = ((cbMtdParam._m0[11u].z + _249.z) * 0.5) + cbMtdParam._m0[10u].x;
    float _277 = exp2(log2(cbMtdParam._m0[10u].z) * cbMtdParam._m0[10u].w);
    vec4 _289 = texture(sampler2D(P_ACParts_Glass_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _303 = (((cbMtdParam._m0[10u].y * TEXCOORD_3.x) * _277) * ((_289.x * 2.0) + (-1.0))) + _258;
    float _304 = (((cbMtdParam._m0[10u].y * TEXCOORD_3.y) * _277) * ((_289.y * 2.0) + (-1.0))) + _260;
    float _306 = gl_FragCoord.x * 0.125;
    float _308 = gl_FragCoord.y * 0.125;
    float _319 = fma(_267, _201 * NORMAL.x, fma(_304, _208 * TANGENT.x, (_194 * _186) * _303));
    float _322 = fma(_267, _201 * NORMAL.y, fma(_304, _208 * TANGENT.y, (_194 * _187) * _303));
    float _325 = fma(_267, _201 * NORMAL.z, fma(_304, _208 * TANGENT.z, (_194 * _188) * _303));
    float _329 = inversesqrt(dot(vec3(_319, _322, _325), vec3(_319, _322, _325)));
    float _330 = _329 * _319;
    float _331 = _329 * _322;
    float _332 = _329 * _325;
    float _3434 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _333 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
    float _3445 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _334 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
    float _3456 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _3467 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _3478 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _3489 = isnan(0.0) ? cbMtdParam._m0[12u].x : (isnan(cbMtdParam._m0[12u].x) ? 0.0 : max(cbMtdParam._m0[12u].x, 0.0));
    float _338 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
    if (!(cbMtdParam._m0[11u].y >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_306, _308)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _358 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _399 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _409 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _399);
    float _410 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _399);
    float _411 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _399);
    float _415 = inversesqrt(dot(vec3(_409, _410, _411), vec3(_409, _410, _411)));
    float _416 = _409 * _415;
    float _417 = _410 * _415;
    float _418 = _411 * _415;
    vec4 _420 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_306, _308));
    float _422 = _420.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _597 = sqrt(((_409 * _409) + (_410 * _410)) + (_411 * _411));
        float _603 = (cbMatDynParam._m0[5u].x * _597) + cbMatDynParam._m0[5u].y;
        float _3500 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
        float _604 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
        float _608 = (cbMatDynParam._m0[5u].z * _597) + cbMatDynParam._m0[5u].w;
        float _3511 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))) - _604)) + _604) < ((_422 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _434 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _435 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _455 = fma(_332, cbSceneParam._m0[5u].z, fma(_331, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _330));
    float _458 = fma(_332, cbSceneParam._m0[6u].z, fma(_331, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _330));
    float _461 = fma(_332, cbSceneParam._m0[7u].z, fma(_331, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _330));
    uint _474 = uint(roundEven(NORMAL.w)) * 13u;
    uint _475 = _474 + 9u;
    uint _476 = _475 + uint(cbMatDynParam._m0[0u].w);
    float _482 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0)))) * cbInstanceData._m0[_476].x;
    float _483 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0)))) * cbInstanceData._m0[_476].y;
    float _484 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0)))) * cbInstanceData._m0[_476].z;
    float _3522 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _485 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
    float _3533 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _486 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
    float _3544 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _487 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
    float _488 = 1.0 - _338;
    float _489 = _485 * _488;
    float _490 = _486 * _488;
    float _491 = _487 * _488;
    float _496 = (_485 + (-0.039999999105930328369140625)) * _338;
    float _497 = (_486 + (-0.039999999105930328369140625)) * _338;
    float _498 = (_487 + (-0.039999999105930328369140625)) * _338;
    float _499 = _496 + 0.039999999105930328369140625;
    float _501 = _497 + 0.039999999105930328369140625;
    float _502 = _498 + 0.039999999105930328369140625;
    vec4 _511 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _434, cbSceneParam._m0[86u].y * _435));
    float _514 = _511.x * TEXCOORD_3.w;
    float _515 = dot(vec3(_330, _331, _332), vec3(_416, _417, _418));
    float _518 = _515 * 2.0;
    float _522 = (_518 * _330) - _416;
    float _523 = (_518 * _331) - _417;
    float _524 = (_518 * _332) - _418;
    float _528 = abs(dot(vec3(_416, _417, _418), vec3(_330, _331, _332)));
    float _3555 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _530 = sqrt(_334);
    float _543 = exp2((_530 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_530 * 3.0));
    float _549 = (1.0 - _543) * ((_530 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _550 = _543 * _530;
    float _578 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _582 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _586 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _914;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _640 = fma(_586, cbModelParam._m0[26u].z, fma(_582, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _578));
        float _644 = fma(_586, cbModelParam._m0[27u].z, fma(_582, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _578));
        float _648 = fma(_586, cbModelParam._m0[28u].z, fma(_582, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _578));
        float _672 = _578 + _330;
        float _673 = _582 + _331;
        float _674 = _586 + _332;
        float _684 = fma(_674, cbModelParam._m0[26u].z, fma(_673, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _672)) - _640;
        float _685 = fma(_674, cbModelParam._m0[27u].z, fma(_673, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _672)) - _644;
        float _686 = fma(_674, cbModelParam._m0[28u].z, fma(_673, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _672)) - _648;
        float _690 = inversesqrt(dot(vec3(_684, _685, _686), vec3(_684, _685, _686)));
        float _703 = ((_690 * _684) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_640 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _704 = ((_690 * _685) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_644 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _705 = ((_690 * _686) / cbModelParam._m0[34u].z) + ((((((_648 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _708 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_703, _704, _705), 0.0);
        vec4 _715 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_703, _704, _705), 0.0);
        vec4 _722 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_703, _704, _705), 0.0);
        vec4 _729 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_703, _704, _705), 0.0);
        float _742 = exp2((_708.w + (-0.5)) * 20.0) * 2.0;
        float _743 = _742 * (_708.x + (-0.5));
        float _744 = _742 * (_708.y + (-0.5));
        float _745 = _742 * (_708.z + (-0.5));
        float _752 = exp2((_715.w + (-0.5)) * 20.0) * 2.0;
        float _753 = _752 * (_715.x + (-0.5));
        float _754 = _752 * (_715.y + (-0.5));
        float _755 = _752 * (_715.z + (-0.5));
        float _762 = exp2((_722.w + (-0.5)) * 20.0) * 2.0;
        float _763 = _762 * (_722.x + (-0.5));
        float _764 = _762 * (_722.y + (-0.5));
        float _765 = _762 * (_722.z + (-0.5));
        float _772 = exp2((_729.w + (-0.5)) * 20.0) * 2.0;
        float _773 = _772 * (_729.x + (-0.5));
        float _774 = _772 * (_729.y + (-0.5));
        float _775 = _772 * (_729.z + (-0.5));
        float _776 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _777 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _778 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _779 = _743 * 0.5;
        float _780 = _753 * 0.5;
        float _781 = _763 * 0.5;
        float _782 = dot(vec3(_779, _780, _781), vec3(_779, _780, _781));
        float _787 = (_782 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_782);
        float _796 = (dot(vec3(_330, _331, _332), vec3(_787 * _779, _787 * _780, _787 * _781)) + 1.0) * 0.5;
        float _3581 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _806 = sqrt(((_780 * _780) + (_779 * _779)) + (_781 * _781)) / (_776 + 9.9999997473787516355514526367188e-06);
        float _3592 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _807 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _808 = _807 * 2.0;
        float _812 = (1.0 - _807) / (_807 + 1.0);
        float _3603 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _813 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _822 = ((((1.0 - _813) * (_808 + 2.0)) * exp2(log2(isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) * (_808 + 1.0))) + _813) * _776;
        float _823 = _744 * 0.5;
        float _824 = _754 * 0.5;
        float _825 = _764 * 0.5;
        float _826 = dot(vec3(_823, _824, _825), vec3(_823, _824, _825));
        float _831 = (_826 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_826);
        float _839 = (dot(vec3(_330, _331, _332), vec3(_831 * _823, _831 * _824, _831 * _825)) + 1.0) * 0.5;
        float _3614 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _848 = sqrt(((_824 * _824) + (_823 * _823)) + (_825 * _825)) / (_777 + 9.9999997473787516355514526367188e-06);
        float _3625 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _849 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _850 = _849 * 2.0;
        float _854 = (1.0 - _849) / (_849 + 1.0);
        float _3636 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _855 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _864 = ((((1.0 - _855) * (_850 + 2.0)) * exp2(log2(isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))) * (_850 + 1.0))) + _855) * _777;
        float _865 = _745 * 0.5;
        float _866 = _755 * 0.5;
        float _867 = _765 * 0.5;
        float _868 = dot(vec3(_865, _866, _867), vec3(_865, _866, _867));
        float _873 = (_868 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_868);
        float _881 = (dot(vec3(_330, _331, _332), vec3(_873 * _865, _873 * _866, _873 * _867)) + 1.0) * 0.5;
        float _3647 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _890 = sqrt(((_866 * _866) + (_865 * _865)) + (_867 * _867)) / (_778 + 9.9999997473787516355514526367188e-06);
        float _3658 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _891 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _892 = _891 * 2.0;
        float _896 = (1.0 - _891) / (_891 + 1.0);
        float _3669 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _897 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _906 = ((((1.0 - _897) * (_892 + 2.0)) * exp2(log2(isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * (_892 + 1.0))) + _897) * _778;
        _914 = _745;
        _916 = _744;
        _917 = _743;
        _918 = _755;
        _919 = _754;
        _920 = _753;
        _921 = _765;
        _922 = _764;
        _923 = _763;
        _924 = _778;
        _925 = _777;
        _926 = _776;
        _927 = cbModelParam._m0[36u].z * (isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0)));
        _928 = cbModelParam._m0[36u].z * (isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0)));
        _929 = cbModelParam._m0[36u].z * (isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0)));
    }
    else
    {
        _914 = _915;
        _916 = _915;
        _917 = _915;
        _918 = _915;
        _919 = _915;
        _920 = _915;
        _921 = _915;
        _922 = _915;
        _923 = _915;
        _924 = _915;
        _925 = _915;
        _926 = _915;
        _927 = 0.0;
        _928 = 0.0;
        _929 = 0.0;
    }
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _955 = fma(_586, cbModelParam._m0[30u].z, fma(_582, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _578));
        float _959 = fma(_586, cbModelParam._m0[31u].z, fma(_582, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _578));
        float _963 = fma(_586, cbModelParam._m0[32u].z, fma(_582, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _578));
        float _986 = _578 + _330;
        float _987 = _582 + _331;
        float _988 = _586 + _332;
        float _998 = fma(_988, cbModelParam._m0[30u].z, fma(_987, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _986)) - _955;
        float _999 = fma(_988, cbModelParam._m0[31u].z, fma(_987, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _986)) - _959;
        float _1000 = fma(_988, cbModelParam._m0[32u].z, fma(_987, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _986)) - _963;
        float _1004 = inversesqrt(dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000)));
        float _1017 = ((_1004 * _998) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_955 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1018 = ((_1004 * _999) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_959 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1019 = ((_1004 * _1000) / cbModelParam._m0[35u].z) + ((((((_963 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1017, _1018, _1019), 0.0);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1017, _1018, _1019), 0.0);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1017, _1018, _1019), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1017, _1018, _1019), 0.0);
        float _1054 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1021.x + (-0.5));
        float _1056 = _1054 * (_1021.y + (-0.5));
        float _1057 = _1054 * (_1021.z + (-0.5));
        float _1064 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1028.x + (-0.5));
        float _1066 = _1064 * (_1028.y + (-0.5));
        float _1067 = _1064 * (_1028.z + (-0.5));
        float _1074 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1035.x + (-0.5));
        float _1076 = _1074 * (_1035.y + (-0.5));
        float _1077 = _1074 * (_1035.z + (-0.5));
        float _1084 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1042.x + (-0.5));
        float _1086 = _1084 * (_1042.y + (-0.5));
        float _1087 = _1084 * (_1042.z + (-0.5));
        float _1088 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1089 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1090 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1091 = _1055 * 0.5;
        float _1092 = _1065 * 0.5;
        float _1093 = _1075 * 0.5;
        float _1094 = dot(vec3(_1091, _1092, _1093), vec3(_1091, _1092, _1093));
        float _1099 = (_1094 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1094);
        float _1107 = (dot(vec3(_330, _331, _332), vec3(_1099 * _1091, _1099 * _1092, _1099 * _1093)) + 1.0) * 0.5;
        float _3710 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1116 = sqrt(((_1092 * _1092) + (_1091 * _1091)) + (_1093 * _1093)) / (_1088 + 9.9999997473787516355514526367188e-06);
        float _3721 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1118 = _1117 * 2.0;
        float _1122 = (1.0 - _1117) / (_1117 + 1.0);
        float _3732 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1132 = ((((1.0 - _1123) * (_1118 + 2.0)) * exp2(log2(isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) * (_1118 + 1.0))) + _1123) * _1088;
        float _1133 = _1056 * 0.5;
        float _1134 = _1066 * 0.5;
        float _1135 = _1076 * 0.5;
        float _1136 = dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135));
        float _1141 = (_1136 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1136);
        float _1149 = (dot(vec3(_330, _331, _332), vec3(_1141 * _1133, _1141 * _1134, _1141 * _1135)) + 1.0) * 0.5;
        float _3743 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1158 = sqrt(((_1134 * _1134) + (_1133 * _1133)) + (_1135 * _1135)) / (_1089 + 9.9999997473787516355514526367188e-06);
        float _3754 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1160 = _1159 * 2.0;
        float _1164 = (1.0 - _1159) / (_1159 + 1.0);
        float _3765 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1174 = ((((1.0 - _1165) * (_1160 + 2.0)) * exp2(log2(isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * (_1160 + 1.0))) + _1165) * _1089;
        float _1175 = _1057 * 0.5;
        float _1176 = _1067 * 0.5;
        float _1177 = _1077 * 0.5;
        float _1178 = dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177));
        float _1183 = (_1178 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1178);
        float _1191 = (dot(vec3(_330, _331, _332), vec3(_1183 * _1175, _1183 * _1176, _1183 * _1177)) + 1.0) * 0.5;
        float _3776 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1200 = sqrt(((_1176 * _1176) + (_1175 * _1175)) + (_1177 * _1177)) / (_1090 + 9.9999997473787516355514526367188e-06);
        float _3787 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1202 = _1201 * 2.0;
        float _1206 = (1.0 - _1201) / (_1201 + 1.0);
        float _3798 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1216 = ((((1.0 - _1207) * (_1202 + 2.0)) * exp2(log2(isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * (_1202 + 1.0))) + _1207) * _1090;
        _1224 = _1057;
        _1225 = _1056;
        _1226 = _1055;
        _1227 = _1067;
        _1228 = _1066;
        _1229 = _1065;
        _1230 = _1077;
        _1231 = _1076;
        _1232 = _1075;
        _1233 = _1090;
        _1234 = _1089;
        _1235 = _1088;
        _1236 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0)));
        _1237 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)));
        _1238 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)));
    }
    else
    {
        _1224 = _915;
        _1225 = _915;
        _1226 = _915;
        _1227 = _915;
        _1228 = _915;
        _1229 = _915;
        _1230 = _915;
        _1231 = _915;
        _1232 = _915;
        _1233 = _915;
        _1234 = _915;
        _1235 = _915;
        _1236 = 0.0;
        _1237 = 0.0;
        _1238 = 0.0;
    }
    float _1248 = (cbModelParam._m0[1u].x * (_1236 - _927)) + _927;
    float _1249 = (cbModelParam._m0[1u].x * (_1237 - _928)) + _928;
    float _1250 = (cbModelParam._m0[1u].x * (_1238 - _929)) + _929;
    float _1271 = fma(_1250, cbSceneParam._m0[89u].z, fma(_1249, cbSceneParam._m0[89u].y, _1248 * cbSceneParam._m0[89u].x));
    float _1274 = fma(_1250, cbSceneParam._m0[90u].z, fma(_1249, cbSceneParam._m0[90u].y, _1248 * cbSceneParam._m0[90u].x));
    float _1277 = fma(_1250, cbSceneParam._m0[91u].z, fma(_1249, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1248));
    float _1292 = _522 * 0.5;
    float _1293 = _523 * 0.5;
    float _1294 = _524 * 0.5;
    float _1295 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_1226, _1229, _1232, _1235));
    float _1298 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_1225, _1228, _1231, _1234));
    float _1301 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_1224, _1227, _1230, _1233));
    float _1335;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1308 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_914, _918, _921, _924));
        float _1312 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_916, _919, _922, _925));
        float _1316 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_917, _920, _923, _926));
        float _1323 = dot(vec4(cbModelParam._m0[39u]), vec4(_1292, _1293, _1294, 1.0));
        _1335 = dot(vec3(isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)), isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)), isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1323) ? 0.0 : (isnan(0.0) ? _1323 : max(0.0, _1323))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1335 = 1.0;
    }
    float _1346;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1337 = dot(vec4(cbModelParam._m0[40u]), vec4(_1292, _1293, _1294, 1.0));
        _1346 = dot(vec3(isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)), isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)), isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1337) ? 0.0 : (isnan(0.0) ? _1337 : max(0.0, _1337))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1346 = 1.0;
    }
    float _1350 = (_1346 * cbModelParam._m0[1u].x) + (_1335 * (1.0 - cbModelParam._m0[1u].x));
    float _1360 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _334);
    float _1361 = isnan(_1360) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1360 : min(cbModelParam._m0[25u].z, _1360));
    float _1443;
    float _1445;
    float _1447;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1410 = fma(_586, cbModelParam._m0[13u].z, fma(_582, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _578)) + cbModelParam._m0[13u].w;
        float _1414 = fma(_586, cbModelParam._m0[14u].z, fma(_582, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _578)) + cbModelParam._m0[14u].w;
        float _1418 = fma(_586, cbModelParam._m0[15u].z, fma(_582, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _578)) + cbModelParam._m0[15u].w;
        float _1421 = fma(_524, cbModelParam._m0[13u].z, fma(_523, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _522));
        float _1424 = fma(_524, cbModelParam._m0[14u].z, fma(_523, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _522));
        float _1427 = fma(_524, cbModelParam._m0[15u].z, fma(_523, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _522));
        float _1455;
        if (_1421 > 0.0)
        {
            _1455 = abs((1.0 - _1410) / _1421);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1421 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1410 + 1.0) / _1421);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1455 = frontier_phi_19_17_ladder;
        }
        float _1630;
        if (_1424 > 0.0)
        {
            _1630 = abs((1.0 - _1414) / _1424);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1424 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1414 + 1.0) / _1424);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1630 = frontier_phi_28_24_ladder;
        }
        float _2135;
        if (_1427 > 0.0)
        {
            _2135 = abs((1.0 - _1418) / _1427);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1427 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1418 + 1.0) / _1427);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2135 = frontier_phi_40_35_ladder;
        }
        float _2137 = isnan(_1630) ? _1455 : (isnan(_1455) ? _1630 : min(_1455, _1630));
        float _2138 = isnan(_2135) ? _2137 : (isnan(_2137) ? _2135 : min(_2137, _2135));
        float _2142 = (_2138 * _1421) + _1410;
        float _2143 = (_2138 * _1424) + _1414;
        float _2144 = (_2138 * _1427) + _1418;
        float _2145 = _2138 * 9.9999997473787516355514526367188e-05;
        float _2147 = (-1.0) - _2145;
        float _2149 = _2145 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2144 > _2149) || ((_2144 < _2147) || ((_2143 > _2149) || ((_2143 < _2147) || ((_2142 < _2147) || (_2142 > _2149))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2420 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2144, cbModelParam._m0[9u].z, fma(_2143, cbModelParam._m0[9u].y, _2142 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2144, cbModelParam._m0[10u].z, fma(_2143, cbModelParam._m0[10u].y, _2142 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2144, cbModelParam._m0[11u].z, fma(_2143, cbModelParam._m0[11u].y, _2142 * cbModelParam._m0[11u].x))), _1361);
            frontier_phi_18_40_ladder = _2420.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2420.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2420.x * cbModelParam._m0[1u].y;
        }
        _1443 = frontier_phi_18_40_ladder_2;
        _1445 = frontier_phi_18_40_ladder_1;
        _1447 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1431 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_522, _523, _524), _1361);
        _1443 = _1431.x * cbModelParam._m0[1u].y;
        _1445 = _1431.y * cbModelParam._m0[1u].y;
        _1447 = _1431.z * cbModelParam._m0[1u].y;
    }
    float _1451 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _334);
    float _1452 = isnan(_1451) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1451 : min(cbModelParam._m0[25u].w, _1451));
    float _1545;
    float _1547;
    float _1549;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1509 = fma(_586, cbModelParam._m0[21u].z, fma(_582, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _578)) + cbModelParam._m0[21u].w;
        float _1513 = fma(_586, cbModelParam._m0[22u].z, fma(_582, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _578)) + cbModelParam._m0[22u].w;
        float _1517 = fma(_586, cbModelParam._m0[23u].z, fma(_582, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _578)) + cbModelParam._m0[23u].w;
        float _1520 = fma(_524, cbModelParam._m0[21u].z, fma(_523, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _522));
        float _1523 = fma(_524, cbModelParam._m0[22u].z, fma(_523, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _522));
        float _1526 = fma(_524, cbModelParam._m0[23u].z, fma(_523, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _522));
        float _1635;
        if (_1520 > 0.0)
        {
            _1635 = abs((1.0 - _1509) / _1520);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1520 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1509 + 1.0) / _1520);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1635 = frontier_phi_30_26_ladder;
        }
        float _2162;
        if (_1523 > 0.0)
        {
            _2162 = abs((1.0 - _1513) / _1523);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1523 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1513 + 1.0) / _1523);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2162 = frontier_phi_42_37_ladder;
        }
        float _2550;
        if (_1526 > 0.0)
        {
            _2550 = abs((1.0 - _1517) / _1526);
        }
        else
        {
            float frontier_phi_54_49_ladder;
            if (_1526 < 0.0)
            {
                frontier_phi_54_49_ladder = abs((_1517 + 1.0) / _1526);
            }
            else
            {
                frontier_phi_54_49_ladder = 5000.0;
            }
            _2550 = frontier_phi_54_49_ladder;
        }
        float _2552 = isnan(_2162) ? _1635 : (isnan(_1635) ? _2162 : min(_1635, _2162));
        float _2553 = isnan(_2550) ? _2552 : (isnan(_2552) ? _2550 : min(_2552, _2550));
        float _2557 = (_2553 * _1520) + _1509;
        float _2558 = (_2553 * _1523) + _1513;
        float _2559 = (_2553 * _1526) + _1517;
        float _2560 = _2553 * 9.9999997473787516355514526367188e-05;
        float _2561 = (-1.0) - _2560;
        float _2563 = _2560 + 1.0;
        float frontier_phi_27_54_ladder;
        float frontier_phi_27_54_ladder_1;
        float frontier_phi_27_54_ladder_2;
        if ((_2559 > _2563) || ((_2559 < _2561) || ((_2558 > _2563) || ((_2558 < _2561) || ((_2557 < _2561) || (_2557 > _2563))))))
        {
            frontier_phi_27_54_ladder = 0.0;
            frontier_phi_27_54_ladder_1 = 0.0;
            frontier_phi_27_54_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2696 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2559, cbModelParam._m0[17u].z, fma(_2558, cbModelParam._m0[17u].y, _2557 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2559, cbModelParam._m0[18u].z, fma(_2558, cbModelParam._m0[18u].y, _2557 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2559, cbModelParam._m0[19u].z, fma(_2558, cbModelParam._m0[19u].y, _2557 * cbModelParam._m0[19u].x))), _1452);
            frontier_phi_27_54_ladder = _2696.z * cbModelParam._m0[1u].z;
            frontier_phi_27_54_ladder_1 = _2696.y * cbModelParam._m0[1u].z;
            frontier_phi_27_54_ladder_2 = _2696.x * cbModelParam._m0[1u].z;
        }
        _1545 = frontier_phi_27_54_ladder_2;
        _1547 = frontier_phi_27_54_ladder_1;
        _1549 = frontier_phi_27_54_ladder;
    }
    else
    {
        vec4 _1529 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_522, _523, _524), _1452);
        _1545 = _1529.x * cbModelParam._m0[1u].z;
        _1547 = _1529.y * cbModelParam._m0[1u].z;
        _1549 = _1529.z * cbModelParam._m0[1u].z;
    }
    float _1562 = (((_549 * _499) + _550) * _514) * ((cbModelParam._m0[1u].w * (_1545 - _1443)) + _1443);
    float _1564 = (((_549 * _501) + _550) * _514) * ((cbModelParam._m0[1u].w * (_1547 - _1445)) + _1445);
    float _1566 = (((_549 * _502) + _550) * _514) * ((cbModelParam._m0[1u].w * (_1549 - _1447)) + _1447);
    float _1569 = fma(_1566, cbSceneParam._m0[89u].z, fma(_1564, cbSceneParam._m0[89u].y, _1562 * cbSceneParam._m0[89u].x));
    float _1572 = fma(_1566, cbSceneParam._m0[90u].z, fma(_1564, cbSceneParam._m0[90u].y, _1562 * cbSceneParam._m0[90u].x));
    float _1575 = fma(_1566, cbSceneParam._m0[91u].z, fma(_1564, cbSceneParam._m0[91u].y, _1562 * cbSceneParam._m0[91u].x));
    float _1609 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1613 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1617 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1621 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1622 = _1609 / _1621;
    float _1623 = _1613 / _1621;
    float _1624 = _1617 / _1621;
    float _1771;
    float _1772;
    float _1773;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1651 = ((uint(_1624 > cbSceneParam._m0[59u].y) + uint(_1624 > cbSceneParam._m0[59u].x)) + uint(_1624 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1652 = _1651 + 43u;
        uint _1660 = _1651 + 44u;
        uint _1668 = _1651 + 45u;
        uint _1676 = _1651 + 46u;
        float _1687 = fma(_1621, cbSceneParam._m0[_1652].w, fma(_1617, cbSceneParam._m0[_1652].z, fma(_1613, cbSceneParam._m0[_1652].y, _1609 * cbSceneParam._m0[_1652].x)));
        float _1691 = fma(_1621, cbSceneParam._m0[_1660].w, fma(_1617, cbSceneParam._m0[_1660].z, fma(_1613, cbSceneParam._m0[_1660].y, _1609 * cbSceneParam._m0[_1660].x)));
        float _1699 = fma(_1621, cbSceneParam._m0[_1676].w, fma(_1617, cbSceneParam._m0[_1676].z, fma(_1613, cbSceneParam._m0[_1676].y, _1609 * cbSceneParam._m0[_1676].x)));
        float _1704 = cbSceneParam._m0[33u].z * _1699;
        float _1706 = cbSceneParam._m0[33u].w * _1699;
        float _1709 = fma(_1621, cbSceneParam._m0[_1668].w, fma(_1617, cbSceneParam._m0[_1668].z, fma(_1613, cbSceneParam._m0[_1668].y, _1609 * cbSceneParam._m0[_1668].x))) / _1699;
        float _1757 = (cbSceneParam._m0[33u].x - sqrt(((_1623 * _1623) + (_1622 * _1622)) + (_1624 * _1624))) * cbSceneParam._m0[33u].y;
        float _3924 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
        float _1764 = (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1704 + _1687) / _1699, (_1706 + _1691) / _1699), _1709), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1706 + _1687) / _1699, (_1691 - _1704) / _1699), _1709), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1687 - _1704) / _1699, (_1691 - _1706) / _1699), _1709), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1687 - _1706) / _1699, (_1704 + _1691) / _1699), _1709), 0.0)).x), vec4(0.25)));
        _1771 = 1.0 - (_1764 * cbSceneParam._m0[34u].x);
        _1772 = 1.0 - (_1764 * cbSceneParam._m0[34u].y);
        _1773 = 1.0 - (_1764 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1771 = 1.0;
        _1772 = 1.0;
        _1773 = 1.0;
    }
    float _1837;
    float _1839;
    float _1841;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1825 = fma(_1621, cbSceneParam._m0[63u].w, fma(_1617, cbSceneParam._m0[63u].z, fma(_1613, cbSceneParam._m0[63u].y, _1609 * cbSceneParam._m0[63u].x)));
        float _1826 = fma(_1621, cbSceneParam._m0[60u].w, fma(_1617, cbSceneParam._m0[60u].z, fma(_1613, cbSceneParam._m0[60u].y, _1609 * cbSceneParam._m0[60u].x))) / _1825;
        float _1827 = fma(_1621, cbSceneParam._m0[61u].w, fma(_1617, cbSceneParam._m0[61u].z, fma(_1613, cbSceneParam._m0[61u].y, _1609 * cbSceneParam._m0[61u].x))) / _1825;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1826 >= cbSceneParam._m0[64u].x) && (_1827 >= cbSceneParam._m0[64u].y)) && (_1826 <= cbSceneParam._m0[64u].z)) && (_1827 <= cbSceneParam._m0[64u].w))
        {
            float _2175 = fma(_1621, cbSceneParam._m0[62u].w, fma(_1617, cbSceneParam._m0[62u].z, fma(_1613, cbSceneParam._m0[62u].y, _1609 * cbSceneParam._m0[62u].x))) / _1825;
            float _2179 = isnan(cbSceneParam._m0[41u].w) ? _2175 : (isnan(_2175) ? cbSceneParam._m0[41u].w : max(_2175, cbSceneParam._m0[41u].w));
            float _2222 = (cbSceneParam._m0[33u].x - sqrt(((_1623 * _1623) + (_1622 * _1622)) + (_1624 * _1624))) * cbSceneParam._m0[33u].y;
            float _3940 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
            float _2229 = (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1826, cbSceneParam._m0[33u].w + _1827), _2179), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1826, _1827 - cbSceneParam._m0[33u].z), _2179), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1826 - cbSceneParam._m0[33u].z, _1827 - cbSceneParam._m0[33u].w), _2179), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1826 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1827), _2179), 0.0)).x), vec4(0.25)));
            float _2233 = 1.0 - (_2229 * cbSceneParam._m0[34u].x);
            float _2234 = 1.0 - (_2229 * cbSceneParam._m0[34u].y);
            float _2235 = 1.0 - (_2229 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2235) ? _1773 : (isnan(_1773) ? _2235 : min(_1773, _2235));
            frontier_phi_39_38_ladder_1 = isnan(_2234) ? _1772 : (isnan(_1772) ? _2234 : min(_1772, _2234));
            frontier_phi_39_38_ladder_2 = isnan(_2233) ? _1771 : (isnan(_1771) ? _2233 : min(_1771, _2233));
        }
        else
        {
            frontier_phi_39_38_ladder = _1773;
            frontier_phi_39_38_ladder_1 = _1772;
            frontier_phi_39_38_ladder_2 = _1771;
        }
        _1837 = frontier_phi_39_38_ladder_2;
        _1839 = frontier_phi_39_38_ladder_1;
        _1841 = frontier_phi_39_38_ladder;
    }
    else
    {
        _1837 = _1771;
        _1839 = _1772;
        _1841 = _1773;
    }
    float _1881 = 1.0 - (cbSceneParam._m0[69u].x * (1.0 - texture(sampler2D(g_CloudShadowTexture0, SS_WrapLinear), vec2(cbSceneParam._m0[67u].x + (cbSceneParam._m0[67u].z * _578), cbSceneParam._m0[67u].y - (cbSceneParam._m0[67u].w * _586))).x));
    float _3966 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
    float _1886 = 1.0 - (cbSceneParam._m0[69u].y * (1.0 - texture(sampler2D(g_CloudShadowTexture1, SS_WrapLinear), vec2(cbSceneParam._m0[68u].x + (cbSceneParam._m0[68u].z * _578), cbSceneParam._m0[68u].y - (cbSceneParam._m0[68u].w * _586))).x));
    float _3977 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _1888 = (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0)));
    float _1889 = _1888 * _1837;
    float _1890 = _1888 * _1839;
    float _1891 = _1888 * _1841;
    uvec4 _1895 = floatBitsToUint(cbInstanceData._m0[_474 + 5u]);
    uint _1897 = _1895.x * 14u;
    uint _1898 = _1897 + 13u;
    float _1903 = _514 + (-1.0);
    float _1906 = (cbLight._m0[_1898].x * _1903) + 1.0;
    float _1907 = (cbLight._m0[_1898].y * _1903) + 1.0;
    uint _1908 = _1897 + 5u;
    float _1914 = isnan(1.0) ? _1907 : (isnan(_1907) ? 1.0 : min(_1907, 1.0));
    uint _1918 = _1897 + 4u;
    float _1928 = isnan(1.0) ? _1906 : (isnan(_1906) ? 1.0 : min(_1906, 1.0));
    uint _1932 = _1897 | 1u;
    float _1943 = dot(vec3(cbLight._m0[_1897].xyz), vec3(_330, _331, _332));
    float _1946 = dot(vec3(cbLight._m0[_1932].xyz), vec3(_330, _331, _332));
    float _3998 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
    float _4009 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _1951 = (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * 0.3183098733425140380859375;
    float _1953 = (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * 0.3183098733425140380859375;
    float _1960 = ((cbLight._m0[_1908].x * _1914) * _1953) + (((cbLight._m0[_1918].x * _1889) * _1928) * _1951);
    float _1961 = ((_1914 * cbLight._m0[_1908].y) * _1953) + (((cbLight._m0[_1918].y * _1890) * _1928) * _1951);
    float _1962 = ((_1914 * cbLight._m0[_1908].z) * _1953) + (((cbLight._m0[_1918].z * _1891) * _1928) * _1951);
    uint _1964 = _1897 + 8u;
    float _1977 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1897].w)) * _334) * 0.949999988079071044921875);
    float _1978 = _1977 * _1977;
    float _1979 = cbLight._m0[_1897].x + _416;
    float _1980 = cbLight._m0[_1897].y + _417;
    float _1981 = cbLight._m0[_1897].z + _418;
    float _1985 = inversesqrt(dot(vec3(_1979, _1980, _1981), vec3(_1979, _1980, _1981)));
    float _1986 = _1985 * _1979;
    float _1987 = _1985 * _1980;
    float _1988 = _1985 * _1981;
    float _1989 = dot(vec3(_330, _331, _332), vec3(cbLight._m0[_1897].xyz));
    float _4020 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1992 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    float _4031 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _1993 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _1994 = dot(vec3(_330, _331, _332), vec3(_1986, _1987, _1988));
    float _4042 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _1997 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _1998 = dot(vec3(cbLight._m0[_1897].xyz), vec3(_1986, _1987, _1988));
    float _4053 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2002 = _1978 * _1978;
    float _2006 = ((_1997 * _1997) * (_2002 + (-1.0))) + 1.0;
    float _2014 = exp2(log2(1.0 - (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)))) * 5.0);
    float _2015 = 0.959999978542327880859375 - _496;
    float _2017 = 0.959999978542327880859375 - _497;
    float _2018 = 0.959999978542327880859375 - _498;
    float _2025 = 1.0 - _1978;
    float _2036 = (0.5 / (((_1993 * ((_1992 * _2025) + _1978)) + 9.9999999392252902907785028219223e-09) + (((_1993 * _2025) + _1978) * _1992))) * _1992;
    float _4064 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2038 = (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (_2002 / ((_2006 * _2006) * 3.141590118408203125));
    uint _2052 = _1897 + 9u;
    float _2063 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1932].w)) * _334) * 0.949999988079071044921875);
    float _2064 = _2063 * _2063;
    float _2065 = cbLight._m0[_1932].x + _416;
    float _2066 = cbLight._m0[_1932].y + _417;
    float _2067 = cbLight._m0[_1932].z + _418;
    float _2071 = inversesqrt(dot(vec3(_2065, _2066, _2067), vec3(_2065, _2066, _2067)));
    float _2072 = _2071 * _2065;
    float _2073 = _2071 * _2066;
    float _2074 = _2071 * _2067;
    float _2075 = dot(vec3(_330, _331, _332), vec3(cbLight._m0[_1932].xyz));
    float _4075 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2078 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _2079 = dot(vec3(_330, _331, _332), vec3(_2072, _2073, _2074));
    float _4086 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
    float _2082 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _2083 = dot(vec3(cbLight._m0[_1932].xyz), vec3(_2072, _2073, _2074));
    float _4097 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _2087 = _2064 * _2064;
    float _2091 = ((_2082 * _2082) * (_2087 + (-1.0))) + 1.0;
    float _2098 = exp2(log2(1.0 - (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0)))) * 5.0);
    float _2105 = 1.0 - _2064;
    float _2115 = (0.5 / (((_1993 * ((_2078 * _2105) + _2064)) + 9.9999999392252902907785028219223e-09) + (((_1993 * _2105) + _2064) * _2078))) * _2078;
    float _4108 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2117 = (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_2087 / ((_2091 * _2091) * 3.141590118408203125));
    float _2127 = (((((_2098 * _2015) + _499) * cbLight._m0[_2052].x) * _2117) * _1914) + ((((cbLight._m0[_1964].x * _1889) * ((_2014 * _2015) + _499)) * _2038) * _1928);
    float _2128 = (((((_2098 * _2017) + _501) * cbLight._m0[_2052].y) * _2117) * _1914) + ((((cbLight._m0[_1964].y * _1890) * ((_2014 * _2017) + _501)) * _2038) * _1928);
    float _2129 = (((((_2098 * _2018) + _502) * cbLight._m0[_2052].z) * _2117) * _1914) + ((((cbLight._m0[_1964].z * _1891) * ((_2014 * _2018) + _502)) * _2038) * _1928);
    float _2335;
    float _2337;
    float _2339;
    float _2341;
    float _2343;
    float _2345;
    if (_1895.y == 0u)
    {
        float _2275 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2276 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2275;
        float _2277 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2275;
        float _2278 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2275;
        uvec4 _2290 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2291 = _2290.x;
        uint _2302 = uint((float(_2290.y) * floor(float(uint(cbSceneParam._m0[85u].y * _435) / _2291))) + floor(float(uint(cbSceneParam._m0[85u].x * _434) / _2291)));
        float _2312 = (log2(_2278 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2313 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        uint _2316 = uint(isnan(14.0) ? _2313 : (isnan(_2313) ? 14.0 : min(_2313, 14.0)));
        uvec4 _2321 = texelFetch(g_lightClusterGridBuffer, int(((_2316 << 2u) + (_2302 << 6u)) >> 2u));
        uint _2322 = _2321.x;
        uint _2323 = _2290.z;
        float _2429;
        float _2431;
        float _2433;
        float _2435;
        float _2437;
        float _2439;
        if (((((1u << ((_2323 >> 4u) & 15u)) + 4294967295u) & _2322) == 0u) || ((_2323 & 240u) == 0u))
        {
            _2429 = 0.0;
            _2431 = 0.0;
            _2433 = 0.0;
            _2435 = 0.0;
            _2437 = 0.0;
            _2439 = 0.0;
        }
        else
        {
            float _2430;
            float _2432;
            float _2434;
            float _2436;
            float _2438;
            float _2440;
            float _2608 = 0.0;
            float _2609 = 0.0;
            float _2610 = 0.0;
            float _2611 = 0.0;
            float _2612 = 0.0;
            float _2613 = 0.0;
            uint _2614 = 0u;
            uint _2623;
            bool _2624;
            for (;;)
            {
                _2623 = texelFetch(g_lightClassification, int((((_2316 << 5u) + (_2302 << 9u)) + (_2614 << 2u)) >> 2u)).x;
                _2624 = _2623 == 0u;
                float frontier_phi_65_pred;
                float frontier_phi_65_pred_1;
                float frontier_phi_65_pred_2;
                float frontier_phi_65_pred_3;
                float frontier_phi_65_pred_4;
                float frontier_phi_65_pred_5;
                if (_2624)
                {
                    frontier_phi_65_pred = _2613;
                    frontier_phi_65_pred_1 = _2612;
                    frontier_phi_65_pred_2 = _2611;
                    frontier_phi_65_pred_3 = _2610;
                    frontier_phi_65_pred_4 = _2609;
                    frontier_phi_65_pred_5 = _2608;
                }
                else
                {
                    float _2774;
                    float _2775;
                    float _2776;
                    float _2777;
                    float _2778;
                    float _2779;
                    uint _2780;
                    _2774 = _2608;
                    _2775 = _2609;
                    _2776 = _2610;
                    _2777 = _2611;
                    _2778 = _2612;
                    _2779 = _2613;
                    _2780 = _2623;
                    float _2701;
                    float _2702;
                    float _2703;
                    float _2704;
                    float _2705;
                    float _2706;
                    for (;;)
                    {
                        uint _2784 = uint(findLSB(_2780)) + (_2614 << 5u);
                        uint _2781 = (_2780 + 4294967295u) & _2780;
                        uint _2786 = _2784 * 48u;
                        vec4 _2800 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2786)).x, texelFetch(g_PointLightRenderingBuffer, int(_2786 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2786 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2786 + 3u)).x));
                        uint _2806 = (_2784 * 48u) + 4u;
                        vec4 _2819 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2806)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 3u)).x));
                        uint _2825 = (_2784 * 48u) + 8u;
                        vec3 _2836 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2825)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 2u)).x));
                        float _2840 = _2800.x - _2276;
                        float _2841 = _2800.y - _2277;
                        float _2842 = _2800.z - _2278;
                        float _2843 = dot(vec3(_2840, _2841, _2842), vec3(_2840, _2841, _2842));
                        float _2846 = inversesqrt(_2843);
                        float _2847 = _2846 * _2840;
                        float _2848 = _2846 * _2841;
                        float _2849 = _2846 * _2842;
                        float _2850 = dot(vec3(_455, _458, _461), vec3(_2847, _2848, _2849));
                        float _2855 = 1.0 - (_2843 * _2800.w);
                        float _4129 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
                        float _2856 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
                        float _2857 = sqrt(_2843) * _2819.w;
                        float _2860 = 1.39999997615814208984375 / (_2857 + 1.39999997615814208984375);
                        float _2861 = _2860 * _2860;
                        float _2864 = ((1.0 - _2861) * _2850) + _2861;
                        float _2867 = _2857 * _2857;
                        float _2871 = ((isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0))) * _2856) / ((_2867 * 0.699999988079071044921875) + 1.0);
                        float _2875 = (-0.0) - _2276;
                        float _2876 = (-0.0) - _2277;
                        float _2877 = (-0.0) - _2278;
                        float _2881 = inversesqrt(dot(vec3(_2875, _2876, _2877), vec3(_2875, _2876, _2877)));
                        float _2882 = _2881 * _2875;
                        float _2883 = _2881 * _2876;
                        float _2884 = _2881 * _2877;
                        float _2891 = exp2(log2(1.0 / ((_2867 * 3.5) + 5.0)) * 0.25);
                        float _2892 = 1.0 - _530;
                        float _2899 = sqrt(1.0 - ((1.0 - (_2892 * _2892)) * (1.0 - (_2891 * _2891))));
                        float _2900 = _2899 * _2899;
                        float _2901 = _2900 * _2900;
                        float _2902 = _2882 + _2847;
                        float _2903 = _2883 + _2848;
                        float _2904 = _2884 + _2849;
                        float _2908 = inversesqrt(dot(vec3(_2902, _2903, _2904), vec3(_2902, _2903, _2904)));
                        float _2912 = dot(vec3(_455, _458, _461), vec3(_2882, _2883, _2884));
                        float _4145 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
                        float _2915 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
                        float _2916 = dot(vec3(_455, _458, _461), vec3(_2908 * _2902, _2908 * _2903, _2908 * _2904));
                        float _4156 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
                        float _2919 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
                        float _2923 = ((_2919 * _2919) * (_2901 + (-1.0))) + 1.0;
                        float _2924 = _2860 * _2900;
                        float _2925 = _2924 * _2924;
                        float _2928 = ((1.0 - _2925) * _2850) + _2925;
                        float _4167 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
                        float _2929 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
                        float _2930 = 1.0 - _2900;
                        float _2940 = (0.5 / (((_2929 * ((_2915 * _2930) + _2900)) + 9.9999999392252902907785028219223e-09) + (((_2929 * _2930) + _2900) * _2915))) * _2929;
                        float _4178 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
                        float _2951 = (((_2901 * 3.1415927410125732421875) * (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0)))) / ((_2923 * _2923) * ((_2867 * 2.1991131305694580078125) + 3.141590118408203125))) * _2856;
                        _2704 = (_2871 * _2819.x) + _2777;
                        _2705 = (_2871 * _2819.y) + _2778;
                        _2706 = (_2871 * _2819.z) + _2779;
                        _2701 = (_2951 * _2836.x) + _2774;
                        _2702 = (_2951 * _2836.y) + _2775;
                        _2703 = (_2951 * _2836.z) + _2776;
                        if (_2781 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2774 = _2701;
                            _2775 = _2702;
                            _2776 = _2703;
                            _2777 = _2704;
                            _2778 = _2705;
                            _2779 = _2706;
                            _2780 = _2781;
                        }
                    }
                    frontier_phi_65_pred = _2706;
                    frontier_phi_65_pred_1 = _2705;
                    frontier_phi_65_pred_2 = _2704;
                    frontier_phi_65_pred_3 = _2703;
                    frontier_phi_65_pred_4 = _2702;
                    frontier_phi_65_pred_5 = _2701;
                }
                _2440 = frontier_phi_65_pred;
                _2438 = frontier_phi_65_pred_1;
                _2436 = frontier_phi_65_pred_2;
                _2434 = frontier_phi_65_pred_3;
                _2432 = frontier_phi_65_pred_4;
                _2430 = frontier_phi_65_pred_5;
                uint _2615 = _2614 + 1u;
                if (_2615 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2608 = _2430;
                    _2609 = _2432;
                    _2610 = _2434;
                    _2611 = _2436;
                    _2612 = _2438;
                    _2613 = _2440;
                    _2614 = _2615;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2429 = _2430;
            _2431 = _2432;
            _2433 = _2434;
            _2435 = _2436;
            _2437 = _2438;
            _2439 = _2440;
        }
        uvec4 _2443 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2444 = _2443.z;
        uint _2446 = (_2444 >> 8u) & 15u;
        float _2576;
        float _2578;
        float _2580;
        float _2582;
        float _2584;
        float _2586;
        if (((4294967295u << _2446) & _2322) == 0u)
        {
            _2576 = _2429;
            _2578 = _2431;
            _2580 = _2433;
            _2582 = _2435;
            _2584 = _2437;
            _2586 = _2439;
        }
        else
        {
            float _2601 = inversesqrt(dot(vec3(_2276, _2277, _2278), vec3(_2276, _2277, _2278)));
            float _2602 = _2601 * _2276;
            float _2603 = _2601 * _2277;
            float _2604 = _2601 * _2278;
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_2446 < ((_2444 >> 12u) & 15u))
            {
                float _2577;
                float _2579;
                float _2581;
                float _2583;
                float _2585;
                float _2587;
                float _2757 = _2429;
                float _2758 = _2431;
                float _2759 = _2433;
                float _2760 = _2435;
                float _2761 = _2437;
                float _2762 = _2439;
                uint _2763 = _2446;
                uint _2772;
                bool _2773;
                for (;;)
                {
                    _2772 = texelFetch(g_lightClassification, int((((_2316 << 5u) + (_2302 << 9u)) + (_2763 << 2u)) >> 2u)).x;
                    _2773 = _2772 == 0u;
                    float frontier_phi_76_pred;
                    float frontier_phi_76_pred_1;
                    float frontier_phi_76_pred_2;
                    float frontier_phi_76_pred_3;
                    float frontier_phi_76_pred_4;
                    float frontier_phi_76_pred_5;
                    if (_2773)
                    {
                        frontier_phi_76_pred = _2761;
                        frontier_phi_76_pred_1 = _2760;
                        frontier_phi_76_pred_2 = _2759;
                        frontier_phi_76_pred_3 = _2758;
                        frontier_phi_76_pred_4 = _2757;
                        frontier_phi_76_pred_5 = _2762;
                    }
                    else
                    {
                        float _2965;
                        float _2966;
                        float _2967;
                        float _2968;
                        float _2969;
                        float _2970;
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3266;
                        float _2978 = _2757;
                        float _2979 = _2758;
                        float _2980 = _2759;
                        float _2981 = _2760;
                        float _2982 = _2761;
                        float _2983 = _2762;
                        uint _2984 = _2772;
                        uint _2985;
                        vec4 _3010;
                        float _3011;
                        vec4 _3026;
                        vec3 _3038;
                        vec4 _3054;
                        vec4 _3070;
                        float _3117;
                        bool _3118;
                        for (;;)
                        {
                            uint _2995 = ((_2763 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2984));
                            _2985 = (_2984 + 4294967295u) & _2984;
                            uint _2997 = _2995 * 40u;
                            _3010 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2997)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 3u)).x));
                            _3011 = _3010.w;
                            uint _3013 = (_2995 * 40u) + 4u;
                            _3026 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3013)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 3u)).x));
                            uint _3028 = (_2995 * 40u) + 8u;
                            _3038 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 2u)).x));
                            uint _3041 = (_2995 * 40u) + 16u;
                            _3054 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3041)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 3u)).x));
                            uint _3057 = (_2995 * 40u) + 20u;
                            _3070 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3057)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 3u)).x));
                            uint _3073 = (_2995 * 40u) + 24u;
                            vec4 _3086 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3073)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 3u)).x));
                            uint _3092 = (_2995 * 40u) + 28u;
                            vec4 _3105 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3092)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 3u)).x));
                            _3117 = fma(_2278, _3105.z, fma(_2277, _3105.y, _3105.x * _2276)) + _3105.w;
                            _3118 = !((fma(_2278, _3086.z, fma(_2277, _3086.y, _3086.x * _2276)) + _3086.w) <= 0.0);
                            float frontier_phi_82_pred;
                            float frontier_phi_82_pred_1;
                            float frontier_phi_82_pred_2;
                            float frontier_phi_82_pred_3;
                            float frontier_phi_82_pred_4;
                            float frontier_phi_82_pred_5;
                            if (_3118)
                            {
                                float _3145 = _3010.x - _2276;
                                float _3146 = _3010.y - _2277;
                                float _3147 = _3010.z - _2278;
                                float _3148 = dot(vec3(_3145, _3146, _3147), vec3(_3145, _3146, _3147));
                                float _3151 = inversesqrt(_3148);
                                float _3152 = _3151 * _3145;
                                float _3153 = _3151 * _3146;
                                float _3154 = _3151 * _3147;
                                float _3158 = 1.0 - (_3148 / (_3011 * _3011));
                                float _4189 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                                float _3159 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
                                float _3163 = sqrt(_3148) * _3026.w;
                                float _3165 = 1.39999997615814208984375 / (_3163 + 1.39999997615814208984375);
                                float _3166 = _3165 * _3165;
                                float _3169 = ((1.0 - _3166) * dot(vec3(_3152, _3153, _3154), vec3(_455, _458, _461))) + _3166;
                                float _3172 = _3163 * _3163;
                                float _3176 = (fma(_2278, _3054.z, fma(_2277, _3054.y, _3054.x * _2276)) + _3054.w) / _3117;
                                float _3177 = (fma(_2278, _3070.z, fma(_2277, _3070.y, _3070.x * _2276)) + _3070.w) / _3117;
                                float _3181 = 1.0 - dot(vec2(_3176, _3177), vec2(_3176, _3177));
                                float _4205 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                                float _3182 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
                                float _3183 = _3182 * (((isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0))) * _3159) / ((_3172 * 0.699999988079071044921875) + 1.0));
                                float _3195 = exp2(log2(1.0 / ((_3172 * 3.5) + 5.0)) * 0.25);
                                float _3196 = 1.0 - _530;
                                float _3203 = sqrt(1.0 - ((1.0 - (_3196 * _3196)) * (1.0 - (_3195 * _3195))));
                                float _3204 = _3203 * _3203;
                                float _3205 = _3204 * _3204;
                                float _3206 = _3152 - _2602;
                                float _3207 = _3153 - _2603;
                                float _3208 = _3154 - _2604;
                                float _3212 = inversesqrt(dot(vec3(_3206, _3207, _3208), vec3(_3206, _3207, _3208)));
                                float _3216 = dot(vec3(_455, _458, _461), vec3((-0.0) - _2602, (-0.0) - _2603, (-0.0) - _2604));
                                float _4216 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                                float _3219 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
                                float _3220 = dot(vec3(_455, _458, _461), vec3(_3212 * _3206, _3212 * _3207, _3212 * _3208));
                                float _4227 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                                float _3223 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
                                float _3227 = ((_3223 * _3223) * (_3205 + (-1.0))) + 1.0;
                                float _3228 = _3165 * _3204;
                                float _3229 = _3228 * _3228;
                                float _3235 = ((1.0 - _3229) * dot(vec3(_455, _458, _461), vec3(_3152, _3153, _3154))) + _3229;
                                float _4238 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                                float _3236 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
                                float _3237 = 1.0 - _3204;
                                float _3247 = (0.5 / (((_3236 * ((_3219 * _3237) + _3204)) + 9.9999999392252902907785028219223e-09) + (((_3236 * _3237) + _3204) * _3219))) * _3236;
                                float _4249 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                                float _3257 = (_3182 * _3159) * (((_3205 * 3.1415927410125732421875) * (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0)))) / ((_3227 * _3227) * ((_3172 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_82_pred = _3183 * _3026.z;
                                frontier_phi_82_pred_1 = _3183 * _3026.y;
                                frontier_phi_82_pred_2 = _3183 * _3026.x;
                                frontier_phi_82_pred_3 = _3257 * _3038.z;
                                frontier_phi_82_pred_4 = _3257 * _3038.y;
                                frontier_phi_82_pred_5 = _3257 * _3038.x;
                            }
                            else
                            {
                                frontier_phi_82_pred = 0.0;
                                frontier_phi_82_pred_1 = 0.0;
                                frontier_phi_82_pred_2 = 0.0;
                                frontier_phi_82_pred_3 = 0.0;
                                frontier_phi_82_pred_4 = 0.0;
                                frontier_phi_82_pred_5 = 0.0;
                            }
                            _3266 = frontier_phi_82_pred;
                            _3265 = frontier_phi_82_pred_1;
                            _3264 = frontier_phi_82_pred_2;
                            _3263 = frontier_phi_82_pred_3;
                            _3262 = frontier_phi_82_pred_4;
                            _3261 = frontier_phi_82_pred_5;
                            _2968 = _3264 + _2981;
                            _2969 = _3265 + _2982;
                            _2970 = _3266 + _2983;
                            _2965 = _3261 + _2978;
                            _2966 = _3262 + _2979;
                            _2967 = _3263 + _2980;
                            if (_2985 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2978 = _2965;
                                _2979 = _2966;
                                _2980 = _2967;
                                _2981 = _2968;
                                _2982 = _2969;
                                _2983 = _2970;
                                _2984 = _2985;
                                continue;
                            }
                        }
                        frontier_phi_76_pred = _2969;
                        frontier_phi_76_pred_1 = _2968;
                        frontier_phi_76_pred_2 = _2967;
                        frontier_phi_76_pred_3 = _2966;
                        frontier_phi_76_pred_4 = _2965;
                        frontier_phi_76_pred_5 = _2970;
                    }
                    _2585 = frontier_phi_76_pred;
                    _2583 = frontier_phi_76_pred_1;
                    _2581 = frontier_phi_76_pred_2;
                    _2579 = frontier_phi_76_pred_3;
                    _2577 = frontier_phi_76_pred_4;
                    _2587 = frontier_phi_76_pred_5;
                    uint _2764 = _2763 + 1u;
                    if (_2764 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2757 = _2577;
                        _2758 = _2579;
                        _2759 = _2581;
                        _2760 = _2583;
                        _2761 = _2585;
                        _2762 = _2587;
                        _2763 = _2764;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _2587;
                frontier_phi_56_57_ladder_1 = _2585;
                frontier_phi_56_57_ladder_2 = _2583;
                frontier_phi_56_57_ladder_3 = _2581;
                frontier_phi_56_57_ladder_4 = _2577;
                frontier_phi_56_57_ladder_5 = _2579;
            }
            else
            {
                frontier_phi_56_57_ladder = _2439;
                frontier_phi_56_57_ladder_1 = _2437;
                frontier_phi_56_57_ladder_2 = _2435;
                frontier_phi_56_57_ladder_3 = _2433;
                frontier_phi_56_57_ladder_4 = _2429;
                frontier_phi_56_57_ladder_5 = _2431;
            }
            _2576 = frontier_phi_56_57_ladder_4;
            _2578 = frontier_phi_56_57_ladder_5;
            _2580 = frontier_phi_56_57_ladder_3;
            _2582 = frontier_phi_56_57_ladder_2;
            _2584 = frontier_phi_56_57_ladder_1;
            _2586 = frontier_phi_56_57_ladder;
        }
        float _2591 = isnan(1.0) ? _514 : (isnan(_514) ? 1.0 : min(_514, 1.0));
        _2335 = (_2591 * _2582) + _1960;
        _2337 = (_2591 * _2584) + _1961;
        _2339 = (_2591 * _2586) + _1962;
        _2341 = ((_2576 * _499) * _2591) + _2127;
        _2343 = ((_2578 * _501) * _2591) + _2128;
        _2345 = ((_2580 * _502) * _2591) + _2129;
    }
    else
    {
        _2335 = _1960;
        _2337 = _1961;
        _2339 = _1962;
        _2341 = _2127;
        _2343 = _2128;
        _2345 = _2129;
    }
    float _4265 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _4276 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _4287 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _4298 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _2363 = ((isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_2335 + ((isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0))) * _514))) + ((_2341 + ((isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))) * _1350)) * cbPerFrame._m0[3u].x);
    float _2364 = ((isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_2337 + ((isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0))) * _514))) + ((_2343 + ((isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))) * _1350)) * cbPerFrame._m0[3u].x);
    float _2365 = ((isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_2339 + ((isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0))) * _514))) + ((_2345 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _1350)) * cbPerFrame._m0[3u].x);
    float _2370 = cbInstanceData._m0[_474 + 6u].w * (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0)));
    float _2375 = _434 / cbSceneParam._m0[86u].x;
    float _2376 = _435 / cbSceneParam._m0[86u].y;
    vec4 _2390 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2375, _2376, (log2((isnan(cbSceneParam._m0[77u].w) ? _358 : (isnan(_358) ? cbSceneParam._m0[77u].w : min(_358, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2392 = _2390.x;
    float _2393 = _2390.y;
    float _2394 = _2390.z;
    float _2395 = _2390.w;
    float _2492;
    float _2494;
    float _2496;
    float _2498;
    if (_358 > cbSceneParam._m0[78u].w)
    {
        float _2454 = isnan(_358) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _358 : min(cbSceneParam._m0[80u].w, _358));
        float _2455 = _2454 / _358;
        float _2466 = _2455 * _409;
        float _2467 = _410 * _2455;
        float _2468 = (-0.0) - _2467;
        float _2470 = _2455 * _411;
        float _2472 = (cbSceneParam._m0[77u].w * _2468) / _2454;
        float _2473 = _2472 + cbSceneParam._m0[79u].w;
        float _2474 = cbSceneParam._m0[79u].w - _2467;
        float _2480 = sqrt(((_2466 * _2466) + (_2467 * _2467)) + (_2470 * _2470));
        float _2483 = (1.0 - (cbSceneParam._m0[77u].w / _2454)) * _2480;
        float _2488 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2490 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2714;
        if (abs((_2468 - _2472) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2714 = ((((_2473 > 0.0) ? exp2(_2488 * _2473) : (2.0 - exp2(_2490 * _2473))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2483;
        }
        else
        {
            float _2637 = 1.0 / cbSceneParam._m0[80u].x;
            float _2638 = isnan(_2474) ? _2473 : (isnan(_2473) ? _2474 : max(_2473, _2474));
            float _2639 = isnan(_2474) ? _2473 : (isnan(_2473) ? _2474 : min(_2473, _2474));
            float _2648 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : min(_2638, 0.0));
            float _2649 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : min(_2639, 0.0));
            _2714 = ((abs(_2480 / _2468) * cbSceneParam._m0[80u].y) * ((((_2648 - _2649) * 2.0) - ((exp2(_2488 * (isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0)))) - exp2(_2488 * (isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0))))) * _2637)) - ((exp2(_2490 * _2648) - exp2(_2490 * _2649)) * _2637))) + (_2483 * cbSceneParam._m0[80u].z);
        }
        vec4 _2716 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2375, _2376, 1.0), 0.0);
        float _2725 = exp2((_2714 * (-1.44269502162933349609375)) * (1.0 - _2716.w));
        float _2726 = log2(_2725);
        float _2742 = log2(_2395);
        _2492 = (exp2(_2742 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2726 * cbSceneParam._m0[78u].x)) * _2716.x) / cbSceneParam._m0[78u].x)) + _2392;
        _2494 = (exp2(_2742 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2726 * cbSceneParam._m0[78u].y)) * _2716.y) / cbSceneParam._m0[78u].y)) + _2393;
        _2496 = (exp2(_2742 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2726 * cbSceneParam._m0[78u].z)) * _2716.z) / cbSceneParam._m0[78u].z)) + _2394;
        _2498 = _2725 * _2395;
    }
    else
    {
        _2492 = _2392;
        _2494 = _2393;
        _2496 = _2394;
        _2498 = _2395;
    }
    bool _2752;
    vec4 _2508;
    vec4 _2530;
    float _2532;
    float _2536;
    float _2537;
    float _2538;
    float _2539;
    bool _2549;
    for (;;)
    {
        _2508 = cbMatDynParam._m0[0u];
        float _2510 = roundEven(_2508.y);
        bool _2511 = _2510 == 3.0;
        float _2512 = log2(_2498);
        float _2519 = exp2(_2512 * cbSceneParam._m0[78u].x) * _2363;
        float _2520 = exp2(_2512 * cbSceneParam._m0[78u].y) * _2364;
        float _2521 = exp2(_2512 * cbSceneParam._m0[78u].z) * _2365;
        float _2528 = _422 + (-0.5);
        _2530 = cbMtdParam._m0[1u];
        _2532 = _2530.y * _2528;
        float _2535 = (_2510 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2536 = _2535 * (_2511 ? _2519 : (_2519 + (cbSceneParam._m0[72u].w * _2492)));
        _2537 = _2535 * (_2511 ? _2520 : (_2520 + (cbSceneParam._m0[72u].w * _2494)));
        _2538 = _2535 * (_2511 ? _2521 : (_2521 + (cbSceneParam._m0[72u].w * _2496)));
        _2539 = _2528 * 0.999000012874603271484375;
        _2549 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2549)
        {
            if ((cbInstanceData._m0[_474 + 7u].x + _2539) < 0.5)
            {
                _2752 = true;
                break;
            }
        }
        uint _2672 = _475 + uint(_2508.w);
        if ((cbInstanceData._m0[_2672].w < 1.0) && ((cbInstanceData._m0[_2672].w + _2539) < 0.5))
        {
            _2752 = true;
            break;
        }
        if ((_2532 + 1.0) < _2530.x)
        {
            _2752 = true;
            break;
        }
        _2752 = false;
        break;
    }
    float _2956;
    if (_2752)
    {
        discard_state = true;
        _2956 = 0.0;
    }
    else
    {
        _2956 = _2370;
    }
    SV_Target.x = _2536;
    SV_Target.y = _2537;
    SV_Target.z = _2538;
    SV_Target.w = _2956;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2370;
    discard_exit();
}


