#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uvec4 BLENDINDICES;
layout(location = 4) in vec4 BLENDWEIGHT;
layout(location = 5) in vec4 COLOR_1;
layout(location = 6) in ivec2 TEXCOORD;
layout(location = 7) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out float TEXCOORD_2;
layout(location = 4, component = 1) out float TEXCOORD_1_1;
layout(location = 5) out vec4 TEXCOORD_3;

void main()
{
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2 = 0.0;
    TEXCOORD_1_1 = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    float _172 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _174 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _175 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _184 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _185 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _186 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _196 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + (uint(gl_InstanceIndex) - uint(gl_BaseInstance));
    uvec4 _198 = texelFetch(g_InstanceIndexBuffer, int(_196));
    uint _199 = _198.x;
    precise float _200 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
    float _205 = isnan(_200) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _200 : max(0.001000000047497451305389404296875, _200));
    precise float _207 = BLENDWEIGHT.x / _205;
    precise float _208 = BLENDWEIGHT.y / _205;
    precise float _209 = BLENDWEIGHT.z / _205;
    precise float _210 = BLENDWEIGHT.w / _205;
    uint _212 = _199 * 13u;
    uvec4 _217 = floatBitsToUint(cbInstanceData._m0[_212 + 4u]);
    uint _218 = _217.x;
    uint _220 = (_218 + uint(float(BLENDINDICES.x))) * 3u;
    uint _227 = _220 + 1u;
    uint _234 = _220 + 2u;
    precise float _241 = _207 * cbObjMatrix._m0[_220].x;
    precise float _242 = _207 * cbObjMatrix._m0[_227].x;
    precise float _243 = _207 * cbObjMatrix._m0[_234].x;
    precise float _244 = _207 * cbObjMatrix._m0[_220].y;
    precise float _245 = _207 * cbObjMatrix._m0[_227].y;
    precise float _246 = _207 * cbObjMatrix._m0[_234].y;
    precise float _247 = _207 * cbObjMatrix._m0[_220].z;
    precise float _248 = _207 * cbObjMatrix._m0[_227].z;
    precise float _249 = _207 * cbObjMatrix._m0[_234].z;
    precise float _250 = _207 * cbObjMatrix._m0[_220].w;
    precise float _251 = _207 * cbObjMatrix._m0[_227].w;
    precise float _252 = _207 * cbObjMatrix._m0[_234].w;
    uint _255 = (_218 + uint(float(BLENDINDICES.y))) * 3u;
    uint _262 = _255 + 1u;
    uint _269 = _255 + 2u;
    precise float _276 = _208 * cbObjMatrix._m0[_255].x;
    precise float _277 = _208 * cbObjMatrix._m0[_262].x;
    precise float _278 = _208 * cbObjMatrix._m0[_269].x;
    precise float _279 = _208 * cbObjMatrix._m0[_255].y;
    precise float _280 = _208 * cbObjMatrix._m0[_262].y;
    precise float _281 = _208 * cbObjMatrix._m0[_269].y;
    precise float _282 = _208 * cbObjMatrix._m0[_255].z;
    precise float _283 = _208 * cbObjMatrix._m0[_262].z;
    precise float _284 = _208 * cbObjMatrix._m0[_269].z;
    precise float _285 = _208 * cbObjMatrix._m0[_255].w;
    precise float _286 = _208 * cbObjMatrix._m0[_262].w;
    precise float _287 = _208 * cbObjMatrix._m0[_269].w;
    precise float _288 = _241 + _276;
    precise float _289 = _242 + _277;
    precise float _290 = _243 + _278;
    precise float _291 = _244 + _279;
    precise float _292 = _245 + _280;
    precise float _293 = _246 + _281;
    precise float _294 = _247 + _282;
    precise float _295 = _248 + _283;
    precise float _296 = _249 + _284;
    precise float _297 = _250 + _285;
    precise float _298 = _251 + _286;
    precise float _299 = _252 + _287;
    uint _302 = (_218 + uint(float(BLENDINDICES.z))) * 3u;
    uint _309 = _302 + 1u;
    uint _316 = _302 + 2u;
    precise float _323 = _209 * cbObjMatrix._m0[_302].x;
    precise float _324 = _209 * cbObjMatrix._m0[_309].x;
    precise float _325 = _209 * cbObjMatrix._m0[_316].x;
    precise float _326 = _209 * cbObjMatrix._m0[_302].y;
    precise float _327 = _209 * cbObjMatrix._m0[_309].y;
    precise float _328 = _209 * cbObjMatrix._m0[_316].y;
    precise float _329 = _209 * cbObjMatrix._m0[_302].z;
    precise float _330 = _209 * cbObjMatrix._m0[_309].z;
    precise float _331 = _209 * cbObjMatrix._m0[_316].z;
    precise float _332 = _209 * cbObjMatrix._m0[_302].w;
    precise float _333 = _209 * cbObjMatrix._m0[_309].w;
    precise float _334 = _209 * cbObjMatrix._m0[_316].w;
    precise float _335 = _288 + _323;
    precise float _336 = _289 + _324;
    precise float _337 = _290 + _325;
    precise float _338 = _291 + _326;
    precise float _339 = _292 + _327;
    precise float _340 = _293 + _328;
    precise float _341 = _294 + _329;
    precise float _342 = _295 + _330;
    precise float _343 = _296 + _331;
    precise float _344 = _297 + _332;
    precise float _345 = _298 + _333;
    precise float _346 = _299 + _334;
    uint _349 = (_218 + uint(float(BLENDINDICES.w))) * 3u;
    uint _356 = _349 + 1u;
    uint _363 = _349 + 2u;
    precise float _370 = _210 * cbObjMatrix._m0[_349].x;
    precise float _371 = _210 * cbObjMatrix._m0[_356].x;
    precise float _372 = _210 * cbObjMatrix._m0[_363].x;
    precise float _373 = _210 * cbObjMatrix._m0[_349].y;
    precise float _374 = _210 * cbObjMatrix._m0[_356].y;
    precise float _375 = _210 * cbObjMatrix._m0[_363].y;
    precise float _376 = _210 * cbObjMatrix._m0[_349].z;
    precise float _377 = _210 * cbObjMatrix._m0[_356].z;
    precise float _378 = _210 * cbObjMatrix._m0[_363].z;
    precise float _379 = _210 * cbObjMatrix._m0[_349].w;
    precise float _380 = _210 * cbObjMatrix._m0[_356].w;
    precise float _381 = _210 * cbObjMatrix._m0[_363].w;
    precise float _382 = _335 + _370;
    precise float _383 = _336 + _371;
    precise float _384 = _337 + _372;
    precise float _385 = _338 + _373;
    precise float _386 = _339 + _374;
    precise float _387 = _340 + _375;
    precise float _388 = _341 + _376;
    precise float _389 = _342 + _377;
    precise float _390 = _343 + _378;
    precise float _391 = _344 + _379;
    precise float _392 = _345 + _380;
    precise float _393 = _346 + _381;
    precise float _394 = POSITION.x * _382;
    precise float _395 = POSITION.y * _385;
    precise float _396 = _395 + _394;
    precise float _397 = POSITION.z * _388;
    precise float _398 = _397 + _396;
    precise float _399 = 1.0 * _391;
    precise float _400 = _399 + _398;
    precise float _401 = POSITION.x * _383;
    precise float _402 = POSITION.y * _386;
    precise float _403 = _402 + _401;
    precise float _404 = POSITION.z * _389;
    precise float _405 = _404 + _403;
    precise float _406 = 1.0 * _392;
    precise float _407 = _406 + _405;
    precise float _408 = POSITION.x * _384;
    precise float _409 = POSITION.y * _387;
    precise float _410 = _409 + _408;
    precise float _411 = POSITION.z * _390;
    precise float _412 = _411 + _410;
    precise float _413 = 1.0 * _393;
    precise float _414 = _413 + _412;
    precise float _439 = _400 - cbSceneParam._m0[3u].x;
    precise float _440 = _407 - cbSceneParam._m0[3u].y;
    precise float _441 = _414 - cbSceneParam._m0[3u].z;
    precise float _469 = _439 * cbSceneParam._m0[24u].x;
    precise float _470 = _440 * cbSceneParam._m0[24u].y;
    precise float _471 = _470 + _469;
    precise float _472 = _441 * cbSceneParam._m0[24u].z;
    precise float _473 = _472 + _471;
    precise float _474 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _475 = _474 + _473;
    precise float _476 = _439 * cbSceneParam._m0[25u].x;
    precise float _477 = _440 * cbSceneParam._m0[25u].y;
    precise float _478 = _477 + _476;
    precise float _479 = _441 * cbSceneParam._m0[25u].z;
    precise float _480 = _479 + _478;
    precise float _481 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _482 = _481 + _480;
    precise float _483 = _439 * cbSceneParam._m0[26u].x;
    precise float _484 = _440 * cbSceneParam._m0[26u].y;
    precise float _485 = _484 + _483;
    precise float _486 = _441 * cbSceneParam._m0[26u].z;
    precise float _487 = _486 + _485;
    precise float _488 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _489 = _488 + _487;
    precise float _490 = _439 * cbSceneParam._m0[27u].x;
    precise float _491 = _440 * cbSceneParam._m0[27u].y;
    precise float _492 = _491 + _490;
    precise float _493 = _441 * cbSceneParam._m0[27u].z;
    precise float _494 = _493 + _492;
    precise float _495 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _496 = _495 + _494;
    gl_Position.x = _475;
    gl_Position.y = _482;
    gl_Position.z = _489;
    gl_Position.w = _496;
    POSITION_1.x = _475;
    POSITION_1.y = _482;
    POSITION_1.z = _489;
    POSITION_1.w = _496;
    NORMAL_1.x = fma(_175, _388, fma(_174, _385, _382 * _172));
    NORMAL_1.y = fma(_175, _389, fma(_174, _386, _383 * _172));
    NORMAL_1.z = fma(_175, _390, fma(_174, _387, _384 * _172));
    NORMAL_1.w = float(_199);
    TANGENT_1.x = fma(_186, _388, fma(_185, _385, _382 * _184));
    TANGENT_1.y = fma(_186, _389, fma(_185, _386, _383 * _184));
    TANGENT_1.z = fma(_186, _390, fma(_185, _387, _384 * _184));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2 = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1_1 = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    gl_ClipDistance[0u] = dot(vec4(_475, _482, _489, _496), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_475, _482, _489, _496), vec4(cbInstanceData._m0[_212 + 3u]));
}


