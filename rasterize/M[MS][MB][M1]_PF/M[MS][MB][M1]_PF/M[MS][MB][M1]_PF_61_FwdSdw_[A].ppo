#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1113;
float _3779;
float _3780;
float _3781;
float _3782;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _236 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _236 + 1u;
    uint _246 = _236 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _277 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _283 = _277.x * cbMtdParam._m0[11u].x;
    float _284 = _277.y * cbMtdParam._m0[11u].y;
    float _285 = _277.z * cbMtdParam._m0[11u].z;
    vec4 _304 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _256) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _257) + cbTextureTilingScale._m0[5u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _342 = _340.x;
    float _354 = dot(vec4(_342, _340.yzw), vec4(cbMtdParam._m0[28u].w, cbMtdParam._m0[29u].xy, 0.0));
    float _371 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_342 - _354) * cbMtdParam._m0[24u].y) + _354) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3791 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _372 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _379 = (_372 * ((_304.x * cbMtdParam._m0[12u].x) - _283)) + _283;
    float _380 = (_372 * ((_304.y * cbMtdParam._m0[12u].y) - _284)) + _284;
    float _381 = (_372 * ((_304.z * cbMtdParam._m0[12u].z) - _285)) + _285;
    vec4 _394 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _256) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _257) + cbTextureTilingScale._m0[4u].w));
    vec4 _411 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _413 = _411.x;
    float _414 = _411.y;
    float _415 = _411.z;
    float _424 = ((_394.z - _415) * _372) + _415;
    float _427 = ((((_394.x - _413) * _372) + _413) * 2.0) + (-1.0);
    float _429 = ((((_394.y - _414) * _372) + _414) * 2.0) + (-1.0);
    float _430 = dot(vec2(_427, _429), vec2(_427, _429));
    float _3802 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _435 = sqrt(1.0 - (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))));
    vec4 _448 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _476 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _478 = _476.x;
    float _496 = ((texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _256) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _257) + cbTextureTilingScale._m0[9u].w)).x - _478) * _372) + _478;
    float _500 = ((texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _496) * cbMtdParam._m0[19u].z) + _496;
    float _505 = cbMtdParam._m0[22u].x + _448.w;
    float _509 = gl_FragCoord.x * 0.125;
    float _511 = gl_FragCoord.y * 0.125;
    float _522 = fma(_435, _223 * NORMAL.x, fma(_429, _230 * TANGENT.x, (_216 * _208) * _427));
    float _525 = fma(_435, _223 * NORMAL.y, fma(_429, _230 * TANGENT.y, (_216 * _209) * _427));
    float _528 = fma(_435, _223 * NORMAL.z, fma(_429, _230 * TANGENT.z, (_216 * _210) * _427));
    float _532 = inversesqrt(dot(vec3(_522, _525, _528), vec3(_522, _525, _528)));
    float _533 = _532 * _522;
    float _534 = _532 * _525;
    float _535 = _532 * _528;
    float _3813 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _536 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _3824 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _3835 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _3846 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _3857 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _3868 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _541 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_509, _511)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _559 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _600 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _610 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _600);
    float _611 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _600);
    float _612 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _600);
    float _616 = inversesqrt(dot(vec3(_610, _611, _612), vec3(_610, _611, _612)));
    float _617 = _610 * _616;
    float _618 = _611 * _616;
    float _619 = _612 * _616;
    vec4 _621 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_509, _511));
    float _623 = _621.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _795 = sqrt(((_610 * _610) + (_611 * _611)) + (_612 * _612));
        float _801 = (cbMatDynParam._m0[5u].x * _795) + cbMatDynParam._m0[5u].y;
        float _3879 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _802 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _806 = (cbMatDynParam._m0[5u].z * _795) + cbMatDynParam._m0[5u].w;
        float _3890 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) - _802)) + _802) < ((_623 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _634 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _635 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _653 = fma(_535, cbSceneParam._m0[5u].z, fma(_534, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _533));
    float _656 = fma(_535, cbSceneParam._m0[6u].z, fma(_534, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _533));
    float _659 = fma(_535, cbSceneParam._m0[7u].z, fma(_534, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _533));
    uint _672 = _236 + 9u;
    uint _673 = _672 + uint(cbMatDynParam._m0[0u].w);
    float _679 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0)))) * cbInstanceData._m0[_673].x;
    float _680 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0)))) * cbInstanceData._m0[_673].y;
    float _681 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0)))) * cbInstanceData._m0[_673].z;
    float _3901 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _682 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    float _3912 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _683 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _3923 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _684 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _685 = 1.0 - _541;
    float _686 = _682 * _685;
    float _687 = _683 * _685;
    float _688 = _684 * _685;
    float _693 = (_682 + (-0.039999999105930328369140625)) * _541;
    float _694 = (_683 + (-0.039999999105930328369140625)) * _541;
    float _695 = (_684 + (-0.039999999105930328369140625)) * _541;
    float _696 = _693 + 0.039999999105930328369140625;
    float _698 = _694 + 0.039999999105930328369140625;
    float _699 = _695 + 0.039999999105930328369140625;
    vec4 _708 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _634, cbSceneParam._m0[86u].y * _635));
    float _712 = ((isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * TEXCOORD_5.w) * _708.x;
    float _713 = dot(vec3(_533, _534, _535), vec3(_617, _618, _619));
    float _716 = _713 * 2.0;
    float _720 = (_716 * _533) - _617;
    float _721 = (_716 * _534) - _618;
    float _722 = (_716 * _535) - _619;
    float _726 = abs(dot(vec3(_617, _618, _619), vec3(_533, _534, _535)));
    float _3934 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _728 = sqrt(_536);
    float _741 = exp2((_728 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_728 * 3.0));
    float _747 = (1.0 - _741) * ((_728 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _748 = _741 * _728;
    float _776 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _780 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _784 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1112;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _837 = fma(_784, cbModelParam._m0[26u].z, fma(_780, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _776));
        float _841 = fma(_784, cbModelParam._m0[27u].z, fma(_780, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _776));
        float _845 = fma(_784, cbModelParam._m0[28u].z, fma(_780, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _776));
        float _870 = _776 + _533;
        float _871 = _780 + _534;
        float _872 = _784 + _535;
        float _882 = fma(_872, cbModelParam._m0[26u].z, fma(_871, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _870)) - _837;
        float _883 = fma(_872, cbModelParam._m0[27u].z, fma(_871, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _870)) - _841;
        float _884 = fma(_872, cbModelParam._m0[28u].z, fma(_871, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _870)) - _845;
        float _888 = inversesqrt(dot(vec3(_882, _883, _884), vec3(_882, _883, _884)));
        float _901 = ((_888 * _882) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_837 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _902 = ((_888 * _883) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_841 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _903 = ((_888 * _884) / cbModelParam._m0[34u].z) + ((((((_845 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _906 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        vec4 _913 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        vec4 _920 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        vec4 _927 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        float _940 = exp2((_906.w + (-0.5)) * 20.0) * 2.0;
        float _941 = _940 * (_906.x + (-0.5));
        float _942 = _940 * (_906.y + (-0.5));
        float _943 = _940 * (_906.z + (-0.5));
        float _950 = exp2((_913.w + (-0.5)) * 20.0) * 2.0;
        float _951 = _950 * (_913.x + (-0.5));
        float _952 = _950 * (_913.y + (-0.5));
        float _953 = _950 * (_913.z + (-0.5));
        float _960 = exp2((_920.w + (-0.5)) * 20.0) * 2.0;
        float _961 = _960 * (_920.x + (-0.5));
        float _962 = _960 * (_920.y + (-0.5));
        float _963 = _960 * (_920.z + (-0.5));
        float _970 = exp2((_927.w + (-0.5)) * 20.0) * 2.0;
        float _971 = _970 * (_927.x + (-0.5));
        float _972 = _970 * (_927.y + (-0.5));
        float _973 = _970 * (_927.z + (-0.5));
        float _974 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _975 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _976 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _977 = _941 * 0.5;
        float _978 = _951 * 0.5;
        float _979 = _961 * 0.5;
        float _980 = dot(vec3(_977, _978, _979), vec3(_977, _978, _979));
        float _985 = (_980 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_980);
        float _994 = (dot(vec3(_533, _534, _535), vec3(_985 * _977, _985 * _978, _985 * _979)) + 1.0) * 0.5;
        float _3960 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _1004 = sqrt(((_978 * _978) + (_977 * _977)) + (_979 * _979)) / (_974 + 9.9999997473787516355514526367188e-06);
        float _3971 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1006 = _1005 * 2.0;
        float _1010 = (1.0 - _1005) / (_1005 + 1.0);
        float _3982 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1020 = ((((1.0 - _1011) * (_1006 + 2.0)) * exp2(log2(isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_1006 + 1.0))) + _1011) * _974;
        float _1021 = _942 * 0.5;
        float _1022 = _952 * 0.5;
        float _1023 = _962 * 0.5;
        float _1024 = dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023));
        float _1029 = (_1024 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1024);
        float _1037 = (dot(vec3(_533, _534, _535), vec3(_1029 * _1021, _1029 * _1022, _1029 * _1023)) + 1.0) * 0.5;
        float _3993 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1046 = sqrt(((_1022 * _1022) + (_1021 * _1021)) + (_1023 * _1023)) / (_975 + 9.9999997473787516355514526367188e-06);
        float _4004 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1048 = _1047 * 2.0;
        float _1052 = (1.0 - _1047) / (_1047 + 1.0);
        float _4015 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1062 = ((((1.0 - _1053) * (_1048 + 2.0)) * exp2(log2(isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * (_1048 + 1.0))) + _1053) * _975;
        float _1063 = _943 * 0.5;
        float _1064 = _953 * 0.5;
        float _1065 = _963 * 0.5;
        float _1066 = dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065));
        float _1071 = (_1066 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1066);
        float _1079 = (dot(vec3(_533, _534, _535), vec3(_1071 * _1063, _1071 * _1064, _1071 * _1065)) + 1.0) * 0.5;
        float _4026 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1088 = sqrt(((_1064 * _1064) + (_1063 * _1063)) + (_1065 * _1065)) / (_976 + 9.9999997473787516355514526367188e-06);
        float _4037 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1090 = _1089 * 2.0;
        float _1094 = (1.0 - _1089) / (_1089 + 1.0);
        float _4048 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1104 = ((((1.0 - _1095) * (_1090 + 2.0)) * exp2(log2(isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_1090 + 1.0))) + _1095) * _976;
        _1112 = _943;
        _1114 = _942;
        _1115 = _941;
        _1116 = _953;
        _1117 = _952;
        _1118 = _951;
        _1119 = _963;
        _1120 = _962;
        _1121 = _961;
        _1122 = _976;
        _1123 = _975;
        _1124 = _974;
        _1125 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0)));
        _1126 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0)));
        _1127 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)));
    }
    else
    {
        _1112 = _1113;
        _1114 = _1113;
        _1115 = _1113;
        _1116 = _1113;
        _1117 = _1113;
        _1118 = _1113;
        _1119 = _1113;
        _1120 = _1113;
        _1121 = _1113;
        _1122 = _1113;
        _1123 = _1113;
        _1124 = _1113;
        _1125 = 0.0;
        _1126 = 0.0;
        _1127 = 0.0;
    }
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1152 = fma(_784, cbModelParam._m0[30u].z, fma(_780, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _776));
        float _1156 = fma(_784, cbModelParam._m0[31u].z, fma(_780, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _776));
        float _1160 = fma(_784, cbModelParam._m0[32u].z, fma(_780, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _776));
        float _1183 = _776 + _533;
        float _1184 = _780 + _534;
        float _1185 = _784 + _535;
        float _1195 = fma(_1185, cbModelParam._m0[30u].z, fma(_1184, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1183)) - _1152;
        float _1196 = fma(_1185, cbModelParam._m0[31u].z, fma(_1184, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1183)) - _1156;
        float _1197 = fma(_1185, cbModelParam._m0[32u].z, fma(_1184, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1183)) - _1160;
        float _1201 = inversesqrt(dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197)));
        float _1214 = ((_1201 * _1195) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1152 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1215 = ((_1201 * _1196) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1156 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1216 = ((_1201 * _1197) / cbModelParam._m0[35u].z) + ((((((_1160 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        float _1251 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1218.x + (-0.5));
        float _1253 = _1251 * (_1218.y + (-0.5));
        float _1254 = _1251 * (_1218.z + (-0.5));
        float _1261 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1225.x + (-0.5));
        float _1263 = _1261 * (_1225.y + (-0.5));
        float _1264 = _1261 * (_1225.z + (-0.5));
        float _1271 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1232.x + (-0.5));
        float _1273 = _1271 * (_1232.y + (-0.5));
        float _1274 = _1271 * (_1232.z + (-0.5));
        float _1281 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1239.x + (-0.5));
        float _1283 = _1281 * (_1239.y + (-0.5));
        float _1284 = _1281 * (_1239.z + (-0.5));
        float _1285 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1286 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1287 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1288 = _1252 * 0.5;
        float _1289 = _1262 * 0.5;
        float _1290 = _1272 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1304 = (dot(vec3(_533, _534, _535), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _4089 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1313 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1285 + 9.9999997473787516355514526367188e-06);
        float _4100 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _4111 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_1315 + 1.0))) + _1320) * _1285;
        float _1330 = _1253 * 0.5;
        float _1331 = _1263 * 0.5;
        float _1332 = _1273 * 0.5;
        float _1333 = dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332));
        float _1338 = (_1333 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1333);
        float _1346 = (dot(vec3(_533, _534, _535), vec3(_1338 * _1330, _1338 * _1331, _1338 * _1332)) + 1.0) * 0.5;
        float _4122 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1355 = sqrt(((_1331 * _1331) + (_1330 * _1330)) + (_1332 * _1332)) / (_1286 + 9.9999997473787516355514526367188e-06);
        float _4133 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1357 = _1356 * 2.0;
        float _1361 = (1.0 - _1356) / (_1356 + 1.0);
        float _4144 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1371 = ((((1.0 - _1362) * (_1357 + 2.0)) * exp2(log2(isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_1357 + 1.0))) + _1362) * _1286;
        float _1372 = _1254 * 0.5;
        float _1373 = _1264 * 0.5;
        float _1374 = _1274 * 0.5;
        float _1375 = dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374));
        float _1380 = (_1375 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1375);
        float _1388 = (dot(vec3(_533, _534, _535), vec3(_1380 * _1372, _1380 * _1373, _1380 * _1374)) + 1.0) * 0.5;
        float _4155 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1397 = sqrt(((_1373 * _1373) + (_1372 * _1372)) + (_1374 * _1374)) / (_1287 + 9.9999997473787516355514526367188e-06);
        float _4166 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1399 = _1398 * 2.0;
        float _1403 = (1.0 - _1398) / (_1398 + 1.0);
        float _4177 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1413 = ((((1.0 - _1404) * (_1399 + 2.0)) * exp2(log2(isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_1399 + 1.0))) + _1404) * _1287;
        _1421 = _1254;
        _1422 = _1253;
        _1423 = _1252;
        _1424 = _1264;
        _1425 = _1263;
        _1426 = _1262;
        _1427 = _1274;
        _1428 = _1273;
        _1429 = _1272;
        _1430 = _1287;
        _1431 = _1286;
        _1432 = _1285;
        _1433 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
        _1434 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)));
        _1435 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)));
    }
    else
    {
        _1421 = _1113;
        _1422 = _1113;
        _1423 = _1113;
        _1424 = _1113;
        _1425 = _1113;
        _1426 = _1113;
        _1427 = _1113;
        _1428 = _1113;
        _1429 = _1113;
        _1430 = _1113;
        _1431 = _1113;
        _1432 = _1113;
        _1433 = 0.0;
        _1434 = 0.0;
        _1435 = 0.0;
    }
    float _1445 = (cbModelParam._m0[1u].x * (_1433 - _1125)) + _1125;
    float _1446 = (cbModelParam._m0[1u].x * (_1434 - _1126)) + _1126;
    float _1447 = (cbModelParam._m0[1u].x * (_1435 - _1127)) + _1127;
    float _1468 = fma(_1447, cbSceneParam._m0[89u].z, fma(_1446, cbSceneParam._m0[89u].y, _1445 * cbSceneParam._m0[89u].x));
    float _1471 = fma(_1447, cbSceneParam._m0[90u].z, fma(_1446, cbSceneParam._m0[90u].y, _1445 * cbSceneParam._m0[90u].x));
    float _1474 = fma(_1447, cbSceneParam._m0[91u].z, fma(_1446, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1445));
    float _1489 = _720 * 0.5;
    float _1490 = _721 * 0.5;
    float _1491 = _722 * 0.5;
    float _1492 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1423, _1426, _1429, _1432));
    float _1495 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1422, _1425, _1428, _1431));
    float _1498 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1421, _1424, _1427, _1430));
    float _1532;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1505 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1112, _1116, _1119, _1122));
        float _1509 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1114, _1117, _1120, _1123));
        float _1513 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1115, _1118, _1121, _1124));
        float _1520 = dot(vec4(cbModelParam._m0[39u]), vec4(_1489, _1490, _1491, 1.0));
        _1532 = dot(vec3(isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)), isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)), isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1520) ? 0.0 : (isnan(0.0) ? _1520 : max(0.0, _1520))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1532 = 1.0;
    }
    float _1543;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1534 = dot(vec4(cbModelParam._m0[40u]), vec4(_1489, _1490, _1491, 1.0));
        _1543 = dot(vec3(isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)), isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)), isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1534) ? 0.0 : (isnan(0.0) ? _1534 : max(0.0, _1534))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1543 = 1.0;
    }
    float _1547 = (_1543 * cbModelParam._m0[1u].x) + (_1532 * (1.0 - cbModelParam._m0[1u].x));
    float _1557 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _536);
    float _1558 = isnan(_1557) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1557 : min(cbModelParam._m0[25u].z, _1557));
    float _1640;
    float _1642;
    float _1644;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1607 = fma(_784, cbModelParam._m0[13u].z, fma(_780, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _776)) + cbModelParam._m0[13u].w;
        float _1611 = fma(_784, cbModelParam._m0[14u].z, fma(_780, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _776)) + cbModelParam._m0[14u].w;
        float _1615 = fma(_784, cbModelParam._m0[15u].z, fma(_780, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _776)) + cbModelParam._m0[15u].w;
        float _1618 = fma(_722, cbModelParam._m0[13u].z, fma(_721, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _720));
        float _1621 = fma(_722, cbModelParam._m0[14u].z, fma(_721, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _720));
        float _1624 = fma(_722, cbModelParam._m0[15u].z, fma(_721, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _720));
        float _1652;
        if (_1618 > 0.0)
        {
            _1652 = abs((1.0 - _1607) / _1618);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1618 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1607 + 1.0) / _1618);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1652 = frontier_phi_19_17_ladder;
        }
        float _1825;
        if (_1621 > 0.0)
        {
            _1825 = abs((1.0 - _1611) / _1621);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1621 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1611 + 1.0) / _1621);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1825 = frontier_phi_28_24_ladder;
        }
        float _2120;
        if (_1624 > 0.0)
        {
            _2120 = abs((1.0 - _1615) / _1624);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1624 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1615 + 1.0) / _1624);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2120 = frontier_phi_40_35_ladder;
        }
        float _2122 = isnan(_1825) ? _1652 : (isnan(_1652) ? _1825 : min(_1652, _1825));
        float _2123 = isnan(_2120) ? _2122 : (isnan(_2122) ? _2120 : min(_2122, _2120));
        float _2127 = (_2123 * _1618) + _1607;
        float _2128 = (_2123 * _1621) + _1611;
        float _2129 = (_2123 * _1624) + _1615;
        float _2130 = _2123 * 9.9999997473787516355514526367188e-05;
        float _2132 = (-1.0) - _2130;
        float _2134 = _2130 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2129 > _2134) || ((_2129 < _2132) || ((_2128 > _2134) || ((_2128 < _2132) || ((_2127 < _2132) || (_2127 > _2134))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2274 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2129, cbModelParam._m0[9u].z, fma(_2128, cbModelParam._m0[9u].y, _2127 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2129, cbModelParam._m0[10u].z, fma(_2128, cbModelParam._m0[10u].y, _2127 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2129, cbModelParam._m0[11u].z, fma(_2128, cbModelParam._m0[11u].y, _2127 * cbModelParam._m0[11u].x))), _1558);
            frontier_phi_18_40_ladder = _2274.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2274.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2274.x * cbModelParam._m0[1u].y;
        }
        _1640 = frontier_phi_18_40_ladder_2;
        _1642 = frontier_phi_18_40_ladder_1;
        _1644 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1628 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_720, _721, _722), _1558);
        _1640 = _1628.x * cbModelParam._m0[1u].y;
        _1642 = _1628.y * cbModelParam._m0[1u].y;
        _1644 = _1628.z * cbModelParam._m0[1u].y;
    }
    float _1648 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _536);
    float _1649 = isnan(_1648) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1648 : min(cbModelParam._m0[25u].w, _1648));
    float _1740;
    float _1742;
    float _1744;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1704 = fma(_784, cbModelParam._m0[21u].z, fma(_780, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _776)) + cbModelParam._m0[21u].w;
        float _1708 = fma(_784, cbModelParam._m0[22u].z, fma(_780, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _776)) + cbModelParam._m0[22u].w;
        float _1712 = fma(_784, cbModelParam._m0[23u].z, fma(_780, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _776)) + cbModelParam._m0[23u].w;
        float _1715 = fma(_722, cbModelParam._m0[21u].z, fma(_721, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _720));
        float _1718 = fma(_722, cbModelParam._m0[22u].z, fma(_721, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _720));
        float _1721 = fma(_722, cbModelParam._m0[23u].z, fma(_721, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _720));
        float _1830;
        if (_1715 > 0.0)
        {
            _1830 = abs((1.0 - _1704) / _1715);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1715 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1704 + 1.0) / _1715);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1830 = frontier_phi_30_26_ladder;
        }
        float _2147;
        if (_1718 > 0.0)
        {
            _2147 = abs((1.0 - _1708) / _1718);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1718 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1708 + 1.0) / _1718);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2147 = frontier_phi_42_37_ladder;
        }
        float _2485;
        if (_1721 > 0.0)
        {
            _2485 = abs((1.0 - _1712) / _1721);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1721 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1712 + 1.0) / _1721);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2485 = frontier_phi_52_49_ladder;
        }
        float _2487 = isnan(_2147) ? _1830 : (isnan(_1830) ? _2147 : min(_1830, _2147));
        float _2488 = isnan(_2485) ? _2487 : (isnan(_2487) ? _2485 : min(_2487, _2485));
        float _2492 = (_2488 * _1715) + _1704;
        float _2493 = (_2488 * _1718) + _1708;
        float _2494 = (_2488 * _1721) + _1712;
        float _2495 = _2488 * 9.9999997473787516355514526367188e-05;
        float _2496 = (-1.0) - _2495;
        float _2498 = _2495 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2494 > _2498) || ((_2494 < _2496) || ((_2493 > _2498) || ((_2493 < _2496) || ((_2492 < _2496) || (_2492 > _2498))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2616 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2494, cbModelParam._m0[17u].z, fma(_2493, cbModelParam._m0[17u].y, _2492 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2494, cbModelParam._m0[18u].z, fma(_2493, cbModelParam._m0[18u].y, _2492 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2494, cbModelParam._m0[19u].z, fma(_2493, cbModelParam._m0[19u].y, _2492 * cbModelParam._m0[19u].x))), _1649);
            frontier_phi_27_52_ladder = _2616.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2616.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2616.x * cbModelParam._m0[1u].z;
        }
        _1740 = frontier_phi_27_52_ladder_2;
        _1742 = frontier_phi_27_52_ladder_1;
        _1744 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1724 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_720, _721, _722), _1649);
        _1740 = _1724.x * cbModelParam._m0[1u].z;
        _1742 = _1724.y * cbModelParam._m0[1u].z;
        _1744 = _1724.z * cbModelParam._m0[1u].z;
    }
    float _1757 = (((_747 * _696) + _748) * _712) * ((cbModelParam._m0[1u].w * (_1740 - _1640)) + _1640);
    float _1759 = (((_747 * _698) + _748) * _712) * ((cbModelParam._m0[1u].w * (_1742 - _1642)) + _1642);
    float _1761 = (((_747 * _699) + _748) * _712) * ((cbModelParam._m0[1u].w * (_1744 - _1644)) + _1644);
    float _1764 = fma(_1761, cbSceneParam._m0[89u].z, fma(_1759, cbSceneParam._m0[89u].y, _1757 * cbSceneParam._m0[89u].x));
    float _1767 = fma(_1761, cbSceneParam._m0[90u].z, fma(_1759, cbSceneParam._m0[90u].y, _1757 * cbSceneParam._m0[90u].x));
    float _1770 = fma(_1761, cbSceneParam._m0[91u].z, fma(_1759, cbSceneParam._m0[91u].y, _1757 * cbSceneParam._m0[91u].x));
    float _1804 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1808 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1812 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1816 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1817 = _1804 / _1816;
    float _1818 = _1808 / _1816;
    float _1819 = _1812 / _1816;
    float _1966;
    float _1967;
    float _1968;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1846 = ((uint(_1819 > cbSceneParam._m0[59u].y) + uint(_1819 > cbSceneParam._m0[59u].x)) + uint(_1819 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1847 = _1846 + 43u;
        uint _1855 = _1846 + 44u;
        uint _1863 = _1846 + 45u;
        uint _1871 = _1846 + 46u;
        float _1882 = fma(_1816, cbSceneParam._m0[_1847].w, fma(_1812, cbSceneParam._m0[_1847].z, fma(_1808, cbSceneParam._m0[_1847].y, _1804 * cbSceneParam._m0[_1847].x)));
        float _1886 = fma(_1816, cbSceneParam._m0[_1855].w, fma(_1812, cbSceneParam._m0[_1855].z, fma(_1808, cbSceneParam._m0[_1855].y, _1804 * cbSceneParam._m0[_1855].x)));
        float _1894 = fma(_1816, cbSceneParam._m0[_1871].w, fma(_1812, cbSceneParam._m0[_1871].z, fma(_1808, cbSceneParam._m0[_1871].y, _1804 * cbSceneParam._m0[_1871].x)));
        float _1899 = cbSceneParam._m0[33u].z * _1894;
        float _1901 = cbSceneParam._m0[33u].w * _1894;
        float _1904 = fma(_1816, cbSceneParam._m0[_1863].w, fma(_1812, cbSceneParam._m0[_1863].z, fma(_1808, cbSceneParam._m0[_1863].y, _1804 * cbSceneParam._m0[_1863].x))) / _1894;
        float _1952 = (cbSceneParam._m0[33u].x - sqrt(((_1818 * _1818) + (_1817 * _1817)) + (_1819 * _1819))) * cbSceneParam._m0[33u].y;
        float _4303 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
        float _1959 = (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1899 + _1882) / _1894, (_1901 + _1886) / _1894), _1904), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1901 + _1882) / _1894, (_1886 - _1899) / _1894), _1904), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1882 - _1899) / _1894, (_1886 - _1901) / _1894), _1904), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1882 - _1901) / _1894, (_1899 + _1886) / _1894), _1904), 0.0)).x), vec4(0.25)));
        _1966 = 1.0 - (_1959 * cbSceneParam._m0[34u].x);
        _1967 = 1.0 - (_1959 * cbSceneParam._m0[34u].y);
        _1968 = 1.0 - (_1959 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1966 = 1.0;
        _1967 = 1.0;
        _1968 = 1.0;
    }
    float _2032;
    float _2034;
    float _2036;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2020 = fma(_1816, cbSceneParam._m0[63u].w, fma(_1812, cbSceneParam._m0[63u].z, fma(_1808, cbSceneParam._m0[63u].y, _1804 * cbSceneParam._m0[63u].x)));
        float _2021 = fma(_1816, cbSceneParam._m0[60u].w, fma(_1812, cbSceneParam._m0[60u].z, fma(_1808, cbSceneParam._m0[60u].y, _1804 * cbSceneParam._m0[60u].x))) / _2020;
        float _2022 = fma(_1816, cbSceneParam._m0[61u].w, fma(_1812, cbSceneParam._m0[61u].z, fma(_1808, cbSceneParam._m0[61u].y, _1804 * cbSceneParam._m0[61u].x))) / _2020;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2021 >= cbSceneParam._m0[64u].x) && (_2022 >= cbSceneParam._m0[64u].y)) && (_2021 <= cbSceneParam._m0[64u].z)) && (_2022 <= cbSceneParam._m0[64u].w))
        {
            float _2160 = fma(_1816, cbSceneParam._m0[62u].w, fma(_1812, cbSceneParam._m0[62u].z, fma(_1808, cbSceneParam._m0[62u].y, _1804 * cbSceneParam._m0[62u].x))) / _2020;
            float _2164 = isnan(cbSceneParam._m0[41u].w) ? _2160 : (isnan(_2160) ? cbSceneParam._m0[41u].w : max(_2160, cbSceneParam._m0[41u].w));
            float _2207 = (cbSceneParam._m0[33u].x - sqrt(((_1818 * _1818) + (_1817 * _1817)) + (_1819 * _1819))) * cbSceneParam._m0[33u].y;
            float _4319 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
            float _2214 = (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2021, cbSceneParam._m0[33u].w + _2022), _2164), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2021, _2022 - cbSceneParam._m0[33u].z), _2164), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2021 - cbSceneParam._m0[33u].z, _2022 - cbSceneParam._m0[33u].w), _2164), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2021 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2022), _2164), 0.0)).x), vec4(0.25)));
            float _2218 = 1.0 - (_2214 * cbSceneParam._m0[34u].x);
            float _2219 = 1.0 - (_2214 * cbSceneParam._m0[34u].y);
            float _2220 = 1.0 - (_2214 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2220) ? _1968 : (isnan(_1968) ? _2220 : min(_1968, _2220));
            frontier_phi_39_38_ladder_1 = isnan(_2219) ? _1967 : (isnan(_1967) ? _2219 : min(_1967, _2219));
            frontier_phi_39_38_ladder_2 = isnan(_2218) ? _1966 : (isnan(_1966) ? _2218 : min(_1966, _2218));
        }
        else
        {
            frontier_phi_39_38_ladder = _1968;
            frontier_phi_39_38_ladder_1 = _1967;
            frontier_phi_39_38_ladder_2 = _1966;
        }
        _2032 = frontier_phi_39_38_ladder_2;
        _2034 = frontier_phi_39_38_ladder_1;
        _2036 = frontier_phi_39_38_ladder;
    }
    else
    {
        _2032 = _1966;
        _2034 = _1967;
        _2036 = _1968;
    }
    uvec4 _2041 = floatBitsToUint(cbInstanceData._m0[_236 + 5u]);
    uint _2043 = _2041.x * 14u;
    uint _2044 = _2043 + 13u;
    float _2051 = _712 + (-1.0);
    float _2056 = (cbLight._m0[_2044].x * _2051) + 1.0;
    float _2057 = (cbLight._m0[_2044].y * _2051) + 1.0;
    float _2058 = (cbLight._m0[_2044].z * _2051) + 1.0;
    float _2059 = (cbLight._m0[_2044].w * _2051) + 1.0;
    uint _2060 = _2043 + 5u;
    float _2066 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
    uint _2070 = _2043 + 4u;
    float _2079 = isnan(1.0) ? _2056 : (isnan(_2056) ? 1.0 : min(_2056, 1.0));
    uint _2083 = _2043 | 1u;
    float _2094 = dot(vec3(cbLight._m0[_2043].xyz), vec3(_533, _534, _535));
    float _2097 = dot(vec3(cbLight._m0[_2083].xyz), vec3(_533, _534, _535));
    float _4355 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _4366 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2102 = (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * 0.3183098733425140380859375;
    float _2104 = (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * 0.3183098733425140380859375;
    float _2111 = ((cbLight._m0[_2060].x * _2066) * _2104) + (((cbLight._m0[_2070].x * _2032) * _2079) * _2102);
    float _2112 = ((_2066 * cbLight._m0[_2060].y) * _2104) + (((cbLight._m0[_2070].y * _2034) * _2079) * _2102);
    float _2113 = ((_2066 * cbLight._m0[_2060].z) * _2104) + (((cbLight._m0[_2070].z * _2036) * _2079) * _2102);
    uvec4 _2117 = floatBitsToUint(cbLight._m0[_2043 + 12u]);
    bool _2119 = _2117.x == 0u;
    float _2221;
    float _2223;
    float _2225;
    if (_2119)
    {
        _2221 = _2111;
        _2223 = _2112;
        _2225 = _2113;
    }
    else
    {
        uint _2229 = _2043 + 6u;
        float _2245 = (dot(vec3(cbLight._m0[_2043 + 2u].xyz), vec3(_533, _534, _535)) * 0.5) + 0.5;
        float _2246 = _2245 * _2245;
        float _4377 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2247 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _2248 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
        _2221 = (((cbLight._m0[_2229].x * 0.3183098733425140380859375) * _2247) * _2248) + _2111;
        _2223 = (((cbLight._m0[_2229].y * 0.3183098733425140380859375) * _2247) * _2248) + _2112;
        _2225 = (((cbLight._m0[_2229].z * 0.3183098733425140380859375) * _2247) * _2248) + _2113;
    }
    bool _2228 = _2117.y == 0u;
    float _2283;
    float _2285;
    float _2287;
    if (_2228)
    {
        _2283 = _2221;
        _2285 = _2223;
        _2287 = _2225;
    }
    else
    {
        uint _2456 = _2043 + 7u;
        float _2472 = (dot(vec3(cbLight._m0[_2043 + 3u].xyz), vec3(_533, _534, _535)) * 0.5) + 0.5;
        float _2473 = _2472 * _2472;
        float _4393 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        float _2474 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _2475 = isnan(1.0) ? _2059 : (isnan(_2059) ? 1.0 : min(_2059, 1.0));
        _2283 = (((cbLight._m0[_2456].x * 0.3183098733425140380859375) * _2474) * _2475) + _2221;
        _2285 = (((cbLight._m0[_2456].y * 0.3183098733425140380859375) * _2474) * _2475) + _2223;
        _2287 = (((cbLight._m0[_2456].z * 0.3183098733425140380859375) * _2474) * _2475) + _2225;
    }
    uint _2290 = _2043 + 8u;
    float _2303 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2043].w)) * _536) * 0.949999988079071044921875);
    float _2304 = _2303 * _2303;
    float _2305 = cbLight._m0[_2043].x + _617;
    float _2306 = cbLight._m0[_2043].y + _618;
    float _2307 = cbLight._m0[_2043].z + _619;
    float _2311 = inversesqrt(dot(vec3(_2305, _2306, _2307), vec3(_2305, _2306, _2307)));
    float _2312 = _2311 * _2305;
    float _2313 = _2311 * _2306;
    float _2314 = _2311 * _2307;
    float _2315 = dot(vec3(_533, _534, _535), vec3(cbLight._m0[_2043].xyz));
    float _4409 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2318 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
    float _4420 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _2319 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
    float _2320 = dot(vec3(_533, _534, _535), vec3(_2312, _2313, _2314));
    float _4431 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2323 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
    float _2324 = dot(vec3(cbLight._m0[_2043].xyz), vec3(_2312, _2313, _2314));
    float _4442 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2328 = _2304 * _2304;
    float _2332 = ((_2323 * _2323) * (_2328 + (-1.0))) + 1.0;
    float _2340 = exp2(log2(1.0 - (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0)))) * 5.0);
    float _2341 = 0.959999978542327880859375 - _693;
    float _2343 = 0.959999978542327880859375 - _694;
    float _2344 = 0.959999978542327880859375 - _695;
    float _2351 = 1.0 - _2304;
    float _2362 = (0.5 / (((_2319 * ((_2318 * _2351) + _2304)) + 9.9999999392252902907785028219223e-09) + (((_2319 * _2351) + _2304) * _2318))) * _2318;
    float _4453 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2364 = (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_2328 / ((_2332 * _2332) * 3.141590118408203125));
    uint _2378 = _2043 + 9u;
    float _2389 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2083].w)) * _536) * 0.949999988079071044921875);
    float _2390 = _2389 * _2389;
    float _2391 = cbLight._m0[_2083].x + _617;
    float _2392 = cbLight._m0[_2083].y + _618;
    float _2393 = cbLight._m0[_2083].z + _619;
    float _2397 = inversesqrt(dot(vec3(_2391, _2392, _2393), vec3(_2391, _2392, _2393)));
    float _2398 = _2397 * _2391;
    float _2399 = _2397 * _2392;
    float _2400 = _2397 * _2393;
    float _2401 = dot(vec3(_533, _534, _535), vec3(cbLight._m0[_2083].xyz));
    float _4464 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2404 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
    float _2405 = dot(vec3(_533, _534, _535), vec3(_2398, _2399, _2400));
    float _4475 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _2408 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
    float _2409 = dot(vec3(cbLight._m0[_2083].xyz), vec3(_2398, _2399, _2400));
    float _4486 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    float _2413 = _2390 * _2390;
    float _2417 = ((_2408 * _2408) * (_2413 + (-1.0))) + 1.0;
    float _2424 = exp2(log2(1.0 - (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0)))) * 5.0);
    float _2431 = 1.0 - _2390;
    float _2441 = (0.5 / (((_2319 * ((_2404 * _2431) + _2390)) + 9.9999999392252902907785028219223e-09) + (((_2319 * _2431) + _2390) * _2404))) * _2404;
    float _4497 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2443 = (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (_2413 / ((_2417 * _2417) * 3.141590118408203125));
    float _2453 = (((((_2424 * _2341) + _696) * cbLight._m0[_2378].x) * _2443) * _2066) + ((((cbLight._m0[_2290].x * _2032) * ((_2340 * _2341) + _696)) * _2364) * _2079);
    float _2454 = (((((_2424 * _2343) + _698) * cbLight._m0[_2378].y) * _2443) * _2066) + ((((cbLight._m0[_2290].y * _2034) * ((_2340 * _2343) + _698)) * _2364) * _2079);
    float _2455 = (((((_2424 * _2344) + _699) * cbLight._m0[_2378].z) * _2443) * _2066) + ((((cbLight._m0[_2290].z * _2036) * ((_2340 * _2344) + _699)) * _2364) * _2079);
    float _2511;
    float _2513;
    float _2515;
    if (_2119)
    {
        _2511 = _2453;
        _2513 = _2454;
        _2515 = _2455;
    }
    else
    {
        uint _2517 = _2043 + 2u;
        uint _2521 = _2043 + 10u;
        float _2535 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2517].w)) * _536) * 0.949999988079071044921875);
        float _2536 = _2535 * _2535;
        float _2537 = cbLight._m0[_2517].x + _617;
        float _2538 = cbLight._m0[_2517].y + _618;
        float _2539 = cbLight._m0[_2517].z + _619;
        float _2543 = inversesqrt(dot(vec3(_2537, _2538, _2539), vec3(_2537, _2538, _2539)));
        float _2544 = _2543 * _2537;
        float _2545 = _2543 * _2538;
        float _2546 = _2543 * _2539;
        float _2547 = dot(vec3(_533, _534, _535), vec3(cbLight._m0[_2517].xyz));
        float _4508 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2550 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
        float _2551 = dot(vec3(_533, _534, _535), vec3(_2544, _2545, _2546));
        float _4519 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        float _2554 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
        float _2555 = dot(vec3(cbLight._m0[_2517].xyz), vec3(_2544, _2545, _2546));
        float _4530 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2559 = _2536 * _2536;
        float _2563 = ((_2554 * _2554) * (_2559 + (-1.0))) + 1.0;
        float _2570 = exp2(log2(1.0 - (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0)))) * 5.0);
        float _2577 = 1.0 - _2536;
        float _2587 = (0.5 / (((_2319 * ((_2550 * _2577) + _2536)) + 9.9999999392252902907785028219223e-09) + (((_2319 * _2577) + _2536) * _2550))) * _2550;
        float _4541 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2589 = (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * (_2559 / ((_2563 * _2563) * 3.141590118408203125));
        float _2590 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
        _2511 = (((((_2570 * _2341) + _696) * cbLight._m0[_2521].x) * _2589) * _2590) + _2453;
        _2513 = (((((_2570 * _2343) + _698) * cbLight._m0[_2521].y) * _2589) * _2590) + _2454;
        _2515 = (((((_2570 * _2344) + _699) * cbLight._m0[_2521].z) * _2589) * _2590) + _2455;
    }
    float _2621;
    float _2623;
    float _2625;
    if (_2228)
    {
        _2621 = _2511;
        _2623 = _2513;
        _2625 = _2515;
    }
    else
    {
        uint _2632 = _2043 + 3u;
        uint _2636 = _2043 + 11u;
        float _2650 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2632].w)) * _536) * 0.949999988079071044921875);
        float _2651 = _2650 * _2650;
        float _2652 = cbLight._m0[_2632].x + _617;
        float _2653 = cbLight._m0[_2632].y + _618;
        float _2654 = cbLight._m0[_2632].z + _619;
        float _2658 = inversesqrt(dot(vec3(_2652, _2653, _2654), vec3(_2652, _2653, _2654)));
        float _2659 = _2658 * _2652;
        float _2660 = _2658 * _2653;
        float _2661 = _2658 * _2654;
        float _2662 = dot(vec3(_533, _534, _535), vec3(cbLight._m0[_2632].xyz));
        float _4557 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
        float _2665 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
        float _2666 = dot(vec3(_533, _534, _535), vec3(_2659, _2660, _2661));
        float _4568 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
        float _2669 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
        float _2670 = dot(vec3(cbLight._m0[_2632].xyz), vec3(_2659, _2660, _2661));
        float _4579 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2674 = _2651 * _2651;
        float _2678 = ((_2669 * _2669) * (_2674 + (-1.0))) + 1.0;
        float _2685 = exp2(log2(1.0 - (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0)))) * 5.0);
        float _2692 = 1.0 - _2651;
        float _2702 = (0.5 / (((_2319 * ((_2665 * _2692) + _2651)) + 9.9999999392252902907785028219223e-09) + (((_2319 * _2692) + _2651) * _2665))) * _2665;
        float _4590 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
        float _2704 = (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (_2674 / ((_2678 * _2678) * 3.141590118408203125));
        float _2705 = isnan(1.0) ? _2059 : (isnan(_2059) ? 1.0 : min(_2059, 1.0));
        _2621 = (((((_2685 * _2341) + _696) * cbLight._m0[_2636].x) * _2704) * _2705) + _2511;
        _2623 = (((((_2685 * _2343) + _698) * cbLight._m0[_2636].y) * _2704) * _2705) + _2513;
        _2625 = (((((_2685 * _2344) + _699) * cbLight._m0[_2636].z) * _2704) * _2705) + _2515;
    }
    float _2771;
    float _2773;
    float _2775;
    float _2777;
    float _2779;
    float _2781;
    if (_2041.y == 0u)
    {
        uvec4 _2726 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2727 = _2726.x;
        uint _2738 = uint((float(_2726.y) * floor(float(uint(cbSceneParam._m0[85u].y * _635) / _2727))) + floor(float(uint(cbSceneParam._m0[85u].x * _634) / _2727)));
        float _2748 = (log2(_1819 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2749 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
        uint _2752 = uint(isnan(14.0) ? _2749 : (isnan(_2749) ? 14.0 : min(_2749, 14.0)));
        uvec4 _2757 = texelFetch(g_lightClusterGridBuffer, int(((_2752 << 2u) + (_2738 << 6u)) >> 2u));
        uint _2758 = _2757.x;
        uint _2759 = _2726.z;
        float _2838;
        float _2840;
        float _2842;
        float _2844;
        float _2846;
        float _2848;
        if (((((1u << ((_2759 >> 4u) & 15u)) + 4294967295u) & _2758) == 0u) || ((_2759 & 240u) == 0u))
        {
            _2838 = 0.0;
            _2840 = 0.0;
            _2842 = 0.0;
            _2844 = 0.0;
            _2846 = 0.0;
            _2848 = 0.0;
        }
        else
        {
            float _2839;
            float _2841;
            float _2843;
            float _2845;
            float _2847;
            float _2849;
            float _2991 = 0.0;
            float _2992 = 0.0;
            float _2993 = 0.0;
            float _2994 = 0.0;
            float _2995 = 0.0;
            float _2996 = 0.0;
            uint _2997 = 0u;
            uint _3006;
            bool _3007;
            for (;;)
            {
                _3006 = texelFetch(g_lightClassification, int((((_2752 << 5u) + (_2738 << 9u)) + (_2997 << 2u)) >> 2u)).x;
                _3007 = _3006 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3007)
                {
                    frontier_phi_73_pred = _2996;
                    frontier_phi_73_pred_1 = _2995;
                    frontier_phi_73_pred_2 = _2994;
                    frontier_phi_73_pred_3 = _2993;
                    frontier_phi_73_pred_4 = _2992;
                    frontier_phi_73_pred_5 = _2991;
                }
                else
                {
                    float _3136;
                    float _3137;
                    float _3138;
                    float _3139;
                    float _3140;
                    float _3141;
                    uint _3142;
                    _3136 = _2991;
                    _3137 = _2992;
                    _3138 = _2993;
                    _3139 = _2994;
                    _3140 = _2995;
                    _3141 = _2996;
                    _3142 = _3006;
                    float _3063;
                    float _3064;
                    float _3065;
                    float _3066;
                    float _3067;
                    float _3068;
                    for (;;)
                    {
                        uint _3146 = uint(findLSB(_3142)) + (_2997 << 5u);
                        uint _3143 = (_3142 + 4294967295u) & _3142;
                        uint _3148 = _3146 * 48u;
                        vec4 _3162 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3148)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 3u)).x));
                        uint _3168 = (_3146 * 48u) + 4u;
                        vec4 _3181 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3168)).x, texelFetch(g_PointLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3168 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3168 + 3u)).x));
                        uint _3187 = (_3146 * 48u) + 8u;
                        vec3 _3198 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3187)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 2u)).x));
                        float _3202 = _3162.x - _1817;
                        float _3203 = _3162.y - _1818;
                        float _3204 = _3162.z - _1819;
                        float _3205 = dot(vec3(_3202, _3203, _3204), vec3(_3202, _3203, _3204));
                        float _3208 = inversesqrt(_3205);
                        float _3209 = _3208 * _3202;
                        float _3210 = _3208 * _3203;
                        float _3211 = _3208 * _3204;
                        float _3212 = dot(vec3(_653, _656, _659), vec3(_3209, _3210, _3211));
                        float _3217 = 1.0 - (_3205 * _3162.w);
                        float _4616 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                        float _3218 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
                        float _3219 = sqrt(_3205) * _3181.w;
                        float _3222 = 1.39999997615814208984375 / (_3219 + 1.39999997615814208984375);
                        float _3223 = _3222 * _3222;
                        float _3226 = ((1.0 - _3223) * _3212) + _3223;
                        float _3229 = _3219 * _3219;
                        float _3233 = ((isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0))) * _3218) / ((_3229 * 0.699999988079071044921875) + 1.0);
                        float _3237 = (-0.0) - _1817;
                        float _3238 = (-0.0) - _1818;
                        float _3239 = (-0.0) - _1819;
                        float _3243 = inversesqrt(dot(vec3(_3237, _3238, _3239), vec3(_3237, _3238, _3239)));
                        float _3244 = _3243 * _3237;
                        float _3245 = _3243 * _3238;
                        float _3246 = _3243 * _3239;
                        float _3253 = exp2(log2(1.0 / ((_3229 * 3.5) + 5.0)) * 0.25);
                        float _3254 = 1.0 - _728;
                        float _3261 = sqrt(1.0 - ((1.0 - (_3254 * _3254)) * (1.0 - (_3253 * _3253))));
                        float _3262 = _3261 * _3261;
                        float _3263 = _3262 * _3262;
                        float _3264 = _3244 + _3209;
                        float _3265 = _3245 + _3210;
                        float _3266 = _3246 + _3211;
                        float _3270 = inversesqrt(dot(vec3(_3264, _3265, _3266), vec3(_3264, _3265, _3266)));
                        float _3274 = dot(vec3(_653, _656, _659), vec3(_3244, _3245, _3246));
                        float _4632 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                        float _3277 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
                        float _3278 = dot(vec3(_653, _656, _659), vec3(_3270 * _3264, _3270 * _3265, _3270 * _3266));
                        float _4643 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                        float _3281 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
                        float _3285 = ((_3281 * _3281) * (_3263 + (-1.0))) + 1.0;
                        float _3286 = _3222 * _3262;
                        float _3287 = _3286 * _3286;
                        float _3290 = ((1.0 - _3287) * _3212) + _3287;
                        float _4654 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                        float _3291 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
                        float _3292 = 1.0 - _3262;
                        float _3302 = (0.5 / (((_3291 * ((_3277 * _3292) + _3262)) + 9.9999999392252902907785028219223e-09) + (((_3291 * _3292) + _3262) * _3277))) * _3291;
                        float _4665 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                        float _3313 = (((_3263 * 3.1415927410125732421875) * (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0)))) / ((_3285 * _3285) * ((_3229 * 2.1991131305694580078125) + 3.141590118408203125))) * _3218;
                        _3066 = (_3233 * _3181.x) + _3139;
                        _3067 = (_3233 * _3181.y) + _3140;
                        _3068 = (_3233 * _3181.z) + _3141;
                        _3063 = (_3313 * _3198.x) + _3136;
                        _3064 = (_3313 * _3198.y) + _3137;
                        _3065 = (_3313 * _3198.z) + _3138;
                        if (_3143 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3136 = _3063;
                            _3137 = _3064;
                            _3138 = _3065;
                            _3139 = _3066;
                            _3140 = _3067;
                            _3141 = _3068;
                            _3142 = _3143;
                        }
                    }
                    frontier_phi_73_pred = _3068;
                    frontier_phi_73_pred_1 = _3067;
                    frontier_phi_73_pred_2 = _3066;
                    frontier_phi_73_pred_3 = _3065;
                    frontier_phi_73_pred_4 = _3064;
                    frontier_phi_73_pred_5 = _3063;
                }
                _2849 = frontier_phi_73_pred;
                _2847 = frontier_phi_73_pred_1;
                _2845 = frontier_phi_73_pred_2;
                _2843 = frontier_phi_73_pred_3;
                _2841 = frontier_phi_73_pred_4;
                _2839 = frontier_phi_73_pred_5;
                uint _2998 = _2997 + 1u;
                if (_2998 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2991 = _2839;
                    _2992 = _2841;
                    _2993 = _2843;
                    _2994 = _2845;
                    _2995 = _2847;
                    _2996 = _2849;
                    _2997 = _2998;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2838 = _2839;
            _2840 = _2841;
            _2842 = _2843;
            _2844 = _2845;
            _2846 = _2847;
            _2848 = _2849;
        }
        uvec4 _2852 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2853 = _2852.z;
        uint _2855 = (_2853 >> 8u) & 15u;
        float _2959;
        float _2961;
        float _2963;
        float _2965;
        float _2967;
        float _2969;
        if (((4294967295u << _2855) & _2758) == 0u)
        {
            _2959 = _2838;
            _2961 = _2840;
            _2963 = _2842;
            _2965 = _2844;
            _2967 = _2846;
            _2969 = _2848;
        }
        else
        {
            float _2984 = inversesqrt(dot(vec3(_1817, _1818, _1819), vec3(_1817, _1818, _1819)));
            float _2985 = _2984 * _1817;
            float _2986 = _2984 * _1818;
            float _2987 = _2984 * _1819;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2855 < ((_2853 >> 12u) & 15u))
            {
                float _2960;
                float _2962;
                float _2964;
                float _2966;
                float _2968;
                float _2970;
                float _3119 = _2838;
                float _3120 = _2840;
                float _3121 = _2842;
                float _3122 = _2844;
                float _3123 = _2846;
                float _3124 = _2848;
                uint _3125 = _2855;
                uint _3134;
                bool _3135;
                for (;;)
                {
                    _3134 = texelFetch(g_lightClassification, int((((_2752 << 5u) + (_2738 << 9u)) + (_3125 << 2u)) >> 2u)).x;
                    _3135 = _3134 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3135)
                    {
                        frontier_phi_84_pred = _3124;
                        frontier_phi_84_pred_1 = _3123;
                        frontier_phi_84_pred_2 = _3122;
                        frontier_phi_84_pred_3 = _3121;
                        frontier_phi_84_pred_4 = _3120;
                        frontier_phi_84_pred_5 = _3119;
                    }
                    else
                    {
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3621;
                        float _3622;
                        float _3623;
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3340 = _3119;
                        float _3341 = _3120;
                        float _3342 = _3121;
                        float _3343 = _3122;
                        float _3344 = _3123;
                        float _3345 = _3124;
                        uint _3346 = _3134;
                        uint _3347;
                        vec4 _3372;
                        float _3373;
                        vec4 _3388;
                        vec3 _3400;
                        vec4 _3415;
                        vec4 _3431;
                        float _3477;
                        bool _3478;
                        for (;;)
                        {
                            uint _3357 = ((_3125 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3346));
                            _3347 = (_3346 + 4294967295u) & _3346;
                            uint _3359 = _3357 * 40u;
                            _3372 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3359)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 3u)).x));
                            _3373 = _3372.w;
                            uint _3375 = (_3357 * 40u) + 4u;
                            _3388 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3375)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 3u)).x));
                            uint _3390 = (_3357 * 40u) + 8u;
                            _3400 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3390)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 2u)).x));
                            uint _3402 = (_3357 * 40u) + 16u;
                            _3415 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3402)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 3u)).x));
                            uint _3418 = (_3357 * 40u) + 20u;
                            _3431 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3418)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 3u)).x));
                            uint _3433 = (_3357 * 40u) + 24u;
                            vec4 _3446 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3433)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 3u)).x));
                            uint _3452 = (_3357 * 40u) + 28u;
                            vec4 _3465 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3452)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 3u)).x));
                            _3477 = fma(_1819, _3465.z, fma(_1818, _3465.y, _3465.x * _1817)) + _3465.w;
                            _3478 = !((fma(_1819, _3446.z, fma(_1818, _3446.y, _3446.x * _1817)) + _3446.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3478)
                            {
                                float _3505 = _3372.x - _1817;
                                float _3506 = _3372.y - _1818;
                                float _3507 = _3372.z - _1819;
                                float _3508 = dot(vec3(_3505, _3506, _3507), vec3(_3505, _3506, _3507));
                                float _3511 = inversesqrt(_3508);
                                float _3512 = _3511 * _3505;
                                float _3513 = _3511 * _3506;
                                float _3514 = _3511 * _3507;
                                float _3518 = 1.0 - (_3508 / (_3373 * _3373));
                                float _4676 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                                float _3519 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
                                float _3523 = sqrt(_3508) * _3388.w;
                                float _3525 = 1.39999997615814208984375 / (_3523 + 1.39999997615814208984375);
                                float _3526 = _3525 * _3525;
                                float _3529 = ((1.0 - _3526) * dot(vec3(_3512, _3513, _3514), vec3(_653, _656, _659))) + _3526;
                                float _3532 = _3523 * _3523;
                                float _3536 = (fma(_1819, _3415.z, fma(_1818, _3415.y, _3415.x * _1817)) + _3415.w) / _3477;
                                float _3537 = (fma(_1819, _3431.z, fma(_1818, _3431.y, _3431.x * _1817)) + _3431.w) / _3477;
                                float _3541 = 1.0 - dot(vec2(_3536, _3537), vec2(_3536, _3537));
                                float _4692 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                                float _3542 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
                                float _3543 = _3542 * (((isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0))) * _3519) / ((_3532 * 0.699999988079071044921875) + 1.0));
                                float _3555 = exp2(log2(1.0 / ((_3532 * 3.5) + 5.0)) * 0.25);
                                float _3556 = 1.0 - _728;
                                float _3563 = sqrt(1.0 - ((1.0 - (_3556 * _3556)) * (1.0 - (_3555 * _3555))));
                                float _3564 = _3563 * _3563;
                                float _3565 = _3564 * _3564;
                                float _3566 = _3512 - _2985;
                                float _3567 = _3513 - _2986;
                                float _3568 = _3514 - _2987;
                                float _3572 = inversesqrt(dot(vec3(_3566, _3567, _3568), vec3(_3566, _3567, _3568)));
                                float _3576 = dot(vec3(_653, _656, _659), vec3((-0.0) - _2985, (-0.0) - _2986, (-0.0) - _2987));
                                float _4703 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                                float _3579 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
                                float _3580 = dot(vec3(_653, _656, _659), vec3(_3572 * _3566, _3572 * _3567, _3572 * _3568));
                                float _4714 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                                float _3583 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
                                float _3587 = ((_3583 * _3583) * (_3565 + (-1.0))) + 1.0;
                                float _3588 = _3525 * _3564;
                                float _3589 = _3588 * _3588;
                                float _3595 = ((1.0 - _3589) * dot(vec3(_653, _656, _659), vec3(_3512, _3513, _3514))) + _3589;
                                float _4725 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                                float _3596 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
                                float _3597 = 1.0 - _3564;
                                float _3607 = (0.5 / (((_3596 * ((_3579 * _3597) + _3564)) + 9.9999999392252902907785028219223e-09) + (((_3596 * _3597) + _3564) * _3579))) * _3596;
                                float _4736 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                                float _3617 = (_3542 * _3519) * (((_3565 * 3.1415927410125732421875) * (isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0)))) / ((_3587 * _3587) * ((_3532 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3543 * _3388.z;
                                frontier_phi_90_pred_1 = _3543 * _3388.y;
                                frontier_phi_90_pred_2 = _3543 * _3388.x;
                                frontier_phi_90_pred_3 = _3617 * _3400.z;
                                frontier_phi_90_pred_4 = _3617 * _3400.y;
                                frontier_phi_90_pred_5 = _3617 * _3400.x;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3626 = frontier_phi_90_pred;
                            _3625 = frontier_phi_90_pred_1;
                            _3624 = frontier_phi_90_pred_2;
                            _3623 = frontier_phi_90_pred_3;
                            _3622 = frontier_phi_90_pred_4;
                            _3621 = frontier_phi_90_pred_5;
                            _3330 = _3624 + _3343;
                            _3331 = _3625 + _3344;
                            _3332 = _3626 + _3345;
                            _3327 = _3621 + _3340;
                            _3328 = _3622 + _3341;
                            _3329 = _3623 + _3342;
                            if (_3347 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3340 = _3327;
                                _3341 = _3328;
                                _3342 = _3329;
                                _3343 = _3330;
                                _3344 = _3331;
                                _3345 = _3332;
                                _3346 = _3347;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3332;
                        frontier_phi_84_pred_1 = _3331;
                        frontier_phi_84_pred_2 = _3330;
                        frontier_phi_84_pred_3 = _3329;
                        frontier_phi_84_pred_4 = _3328;
                        frontier_phi_84_pred_5 = _3327;
                    }
                    _2970 = frontier_phi_84_pred;
                    _2968 = frontier_phi_84_pred_1;
                    _2966 = frontier_phi_84_pred_2;
                    _2964 = frontier_phi_84_pred_3;
                    _2962 = frontier_phi_84_pred_4;
                    _2960 = frontier_phi_84_pred_5;
                    uint _3126 = _3125 + 1u;
                    if (_3126 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3119 = _2960;
                        _3120 = _2962;
                        _3121 = _2964;
                        _3122 = _2966;
                        _3123 = _2968;
                        _3124 = _2970;
                        _3125 = _3126;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2966;
                frontier_phi_65_66_ladder_1 = _2970;
                frontier_phi_65_66_ladder_2 = _2968;
                frontier_phi_65_66_ladder_3 = _2964;
                frontier_phi_65_66_ladder_4 = _2962;
                frontier_phi_65_66_ladder_5 = _2960;
            }
            else
            {
                frontier_phi_65_66_ladder = _2844;
                frontier_phi_65_66_ladder_1 = _2848;
                frontier_phi_65_66_ladder_2 = _2846;
                frontier_phi_65_66_ladder_3 = _2842;
                frontier_phi_65_66_ladder_4 = _2840;
                frontier_phi_65_66_ladder_5 = _2838;
            }
            _2959 = frontier_phi_65_66_ladder_5;
            _2961 = frontier_phi_65_66_ladder_4;
            _2963 = frontier_phi_65_66_ladder_3;
            _2965 = frontier_phi_65_66_ladder;
            _2967 = frontier_phi_65_66_ladder_2;
            _2969 = frontier_phi_65_66_ladder_1;
        }
        float _2974 = isnan(1.0) ? _712 : (isnan(_712) ? 1.0 : min(_712, 1.0));
        _2771 = (_2974 * _2965) + _2283;
        _2773 = (_2974 * _2967) + _2285;
        _2775 = (_2974 * _2969) + _2287;
        _2777 = ((_2959 * _696) * _2974) + _2621;
        _2779 = ((_2961 * _698) * _2974) + _2623;
        _2781 = ((_2963 * _699) * _2974) + _2625;
    }
    else
    {
        _2771 = _2283;
        _2773 = _2285;
        _2775 = _2287;
        _2777 = _2621;
        _2779 = _2623;
        _2781 = _2625;
    }
    float _4752 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _4763 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _4774 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _2798 = ((isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0))) * (_2771 + ((isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0))) * _712))) + ((_2777 + ((isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))) * _1547)) * cbPerFrame._m0[3u].x);
    float _2799 = ((isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0))) * (_2773 + ((isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))) * _712))) + ((_2779 + ((isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))) * _1547)) * cbPerFrame._m0[3u].x);
    float _2800 = ((isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0))) * (_2775 + ((isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))) * _712))) + ((_2781 + ((isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))) * _1547)) * cbPerFrame._m0[3u].x);
    uint _2801 = _236 + 6u;
    float _2809 = _634 / cbSceneParam._m0[86u].x;
    float _2810 = _635 / cbSceneParam._m0[86u].y;
    vec4 _2824 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2809, _2810, (log2((isnan(cbSceneParam._m0[77u].w) ? _559 : (isnan(_559) ? cbSceneParam._m0[77u].w : min(_559, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2826 = _2824.x;
    float _2827 = _2824.y;
    float _2828 = _2824.z;
    float _2829 = _2824.w;
    float _2901;
    float _2903;
    float _2905;
    float _2907;
    if (_559 > cbSceneParam._m0[78u].w)
    {
        float _2863 = isnan(_559) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _559 : min(cbSceneParam._m0[80u].w, _559));
        float _2864 = _2863 / _559;
        float _2875 = _2864 * _610;
        float _2876 = _611 * _2864;
        float _2877 = (-0.0) - _2876;
        float _2879 = _2864 * _612;
        float _2881 = (cbSceneParam._m0[77u].w * _2877) / _2863;
        float _2882 = _2881 + cbSceneParam._m0[79u].w;
        float _2883 = cbSceneParam._m0[79u].w - _2876;
        float _2889 = sqrt(((_2875 * _2875) + (_2876 * _2876)) + (_2879 * _2879));
        float _2892 = (1.0 - (cbSceneParam._m0[77u].w / _2863)) * _2889;
        float _2897 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2899 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3076;
        if (abs((_2877 - _2881) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3076 = ((((_2882 > 0.0) ? exp2(_2897 * _2882) : (2.0 - exp2(_2899 * _2882))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2892;
        }
        else
        {
            float _3020 = 1.0 / cbSceneParam._m0[80u].x;
            float _3021 = isnan(_2883) ? _2882 : (isnan(_2882) ? _2883 : max(_2882, _2883));
            float _3022 = isnan(_2883) ? _2882 : (isnan(_2882) ? _2883 : min(_2882, _2883));
            float _3031 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : min(_3021, 0.0));
            float _3032 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : min(_3022, 0.0));
            _3076 = ((abs(_2889 / _2877) * cbSceneParam._m0[80u].y) * ((((_3031 - _3032) * 2.0) - ((exp2(_2897 * (isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0)))) - exp2(_2897 * (isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0))))) * _3020)) - ((exp2(_2899 * _3031) - exp2(_2899 * _3032)) * _3020))) + (_2892 * cbSceneParam._m0[80u].z);
        }
        vec4 _3078 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2809, _2810, 1.0), 0.0);
        float _3087 = exp2((_3076 * (-1.44269502162933349609375)) * (1.0 - _3078.w));
        float _3088 = log2(_3087);
        float _3104 = log2(_2829);
        _2901 = (exp2(_3104 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3088 * cbSceneParam._m0[78u].x)) * _3078.x) / cbSceneParam._m0[78u].x)) + _2826;
        _2903 = (exp2(_3104 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3088 * cbSceneParam._m0[78u].y)) * _3078.y) / cbSceneParam._m0[78u].y)) + _2827;
        _2905 = (exp2(_3104 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3088 * cbSceneParam._m0[78u].z)) * _3078.z) / cbSceneParam._m0[78u].z)) + _2828;
        _2907 = _3087 * _2829;
    }
    else
    {
        _2901 = _2826;
        _2903 = _2827;
        _2905 = _2828;
        _2907 = _2829;
    }
    bool _3114;
    vec4 _2917;
    vec4 _2939;
    float _2941;
    float _2945;
    float _2946;
    float _2947;
    float _2948;
    bool _2958;
    for (;;)
    {
        _2917 = cbMatDynParam._m0[0u];
        float _2919 = roundEven(_2917.y);
        bool _2920 = _2919 == 3.0;
        float _2921 = log2(_2907);
        float _2928 = exp2(_2921 * cbSceneParam._m0[78u].x) * _2798;
        float _2929 = exp2(_2921 * cbSceneParam._m0[78u].y) * _2799;
        float _2930 = exp2(_2921 * cbSceneParam._m0[78u].z) * _2800;
        float _2937 = _623 + (-0.5);
        _2939 = cbMtdParam._m0[1u];
        _2941 = _2939.y * _2937;
        float _2944 = (_2919 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2945 = _2944 * (_2920 ? _2928 : (_2928 + (cbSceneParam._m0[72u].w * _2901)));
        _2946 = _2944 * (_2920 ? _2929 : (_2929 + (cbSceneParam._m0[72u].w * _2903)));
        _2947 = _2944 * (_2920 ? _2930 : (_2930 + (cbSceneParam._m0[72u].w * _2905)));
        _2948 = _2937 * 0.999000012874603271484375;
        _2958 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2958)
        {
            if ((cbInstanceData._m0[_236 + 7u].x + _2948) < 0.5)
            {
                _3114 = true;
                break;
            }
        }
        uint _3055 = _672 + uint(_2917.w);
        if ((cbInstanceData._m0[_3055].w < 1.0) && ((cbInstanceData._m0[_3055].w + _2948) < 0.5))
        {
            _3114 = true;
            break;
        }
        if ((_2941 + 1.0) < _2939.x)
        {
            _3114 = true;
            break;
        }
        _3114 = false;
        break;
    }
    float _3318;
    if (_3114)
    {
        discard_state = true;
        _3318 = 0.0;
    }
    else
    {
        _3318 = cbInstanceData._m0[_2801].w;
    }
    SV_Target.x = _2945;
    SV_Target.y = _2946;
    SV_Target.z = _2947;
    SV_Target.w = _3318;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2801].w;
    discard_exit();
}


