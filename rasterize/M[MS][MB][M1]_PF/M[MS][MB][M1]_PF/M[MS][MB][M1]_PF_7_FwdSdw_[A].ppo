#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1153;
float _3819;
float _3820;
float _3821;
float _3822;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3831 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _3842 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3853 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    uint _267 = uint(roundEven(NORMAL.w)) * 13u;
    uint _272 = _267 + 1u;
    uint _276 = _267 + 2u;
    float _285 = sqrt(((cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x) + (cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x)) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x));
    float _286 = _285 * TEXCOORD.z;
    float _287 = _285 * TEXCOORD.w;
    vec4 _300 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _286) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _287) + cbTextureTilingScale._m0[13u].w));
    vec4 _323 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _328 = _323.x * cbMtdParam._m0[9u].x;
    float _329 = _323.y * cbMtdParam._m0[9u].y;
    float _330 = _323.z * cbMtdParam._m0[9u].z;
    float _334 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _300.x) * _328;
    float _337 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _300.y) * _329;
    float _340 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _300.z) * _330;
    float _347 = ((_328 - _334) * (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0)))) + _334;
    float _348 = ((_329 - _337) * (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0)))) + _337;
    float _349 = ((_330 - _340) * (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0)))) + _340;
    vec4 _362 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _286) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _287) + cbTextureTilingScale._m0[20u].w));
    vec4 _388 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _392 = _388.z;
    float _396 = (_388.x * 2.0) + (-1.0);
    float _397 = (_388.y * 2.0) + (-1.0);
    float _398 = dot(vec2(_396, _397), vec2(_396, _397));
    float _3864 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _403 = sqrt(1.0 - (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))));
    float _408 = _396 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_362.x * 2.0) + (-1.0)));
    float _409 = _397 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_362.y * 2.0) + (-1.0)));
    vec4 _422 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _286) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _287) + cbTextureTilingScale._m0[19u].w));
    float _424 = _422.x;
    float _425 = 1.0 - _424;
    float _456 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_424 - _425) * cbMtdParam._m0[24u].w) + _425) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3875 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _457 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    float _465 = ((((cbMtdParam._m0[10u].x - _347) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _457) + _347;
    float _466 = ((((cbMtdParam._m0[10u].y - _348) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _457) + _348;
    float _467 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _349)) * _457) + _349;
    vec4 _480 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _482 = _480.x;
    float _484 = _482 - (_482 * _457);
    float _489 = (((_362.z - _392) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _392;
    float _493 = ((cbMtdParam._m0[23u].y - _489) * _457) + _489;
    vec4 _515 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _286) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].w * cbPerFrame._m0[22u].x) + _287) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _521 = (_515.x * 2.0) + (-1.0);
    float _522 = (_515.y * 2.0) + (-1.0);
    float _523 = dot(vec2(_521, _522), vec2(_521, _522));
    float _3886 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _539 = (_457 * (((cbMtdParam._m0[22u].z * _408) - _408) + _521)) + _408;
    float _540 = (_457 * (((cbMtdParam._m0[22u].z * _409) - _409) + _522)) + _409;
    float _541 = (_457 * (sqrt(1.0 - (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0)))) - _403)) + _403;
    float _543 = cbMtdParam._m0[22u].x + _388.w;
    float _547 = gl_FragCoord.x * 0.125;
    float _549 = gl_FragCoord.y * 0.125;
    float _559 = fma(_541, _235 * NORMAL.x, fma(_540, _242 * TANGENT.x, (_228 * _220) * _539));
    float _562 = fma(_541, _235 * NORMAL.y, fma(_540, _242 * TANGENT.y, (_228 * _221) * _539));
    float _565 = fma(_541, _235 * NORMAL.z, fma(_540, _242 * TANGENT.z, (_228 * _222) * _539));
    float _569 = inversesqrt(dot(vec3(_559, _562, _565), vec3(_559, _562, _565)));
    float _570 = _569 * _559;
    float _571 = _569 * _562;
    float _572 = _569 * _565;
    float _3897 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _573 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _3908 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _3919 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _3930 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _3941 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _3952 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _578 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_547, _549)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _596 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _637 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _647 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _637);
    float _648 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _637);
    float _649 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _637);
    float _653 = inversesqrt(dot(vec3(_647, _648, _649), vec3(_647, _648, _649)));
    float _654 = _647 * _653;
    float _655 = _648 * _653;
    float _656 = _649 * _653;
    vec4 _658 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_547, _549));
    float _660 = _658.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _835 = sqrt(((_647 * _647) + (_648 * _648)) + (_649 * _649));
        float _841 = (cbMatDynParam._m0[5u].x * _835) + cbMatDynParam._m0[5u].y;
        float _3963 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _842 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _846 = (cbMatDynParam._m0[5u].z * _835) + cbMatDynParam._m0[5u].w;
        float _3974 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) - _842)) + _842) < ((_660 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _672 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _673 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _693 = fma(_572, cbSceneParam._m0[5u].z, fma(_571, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _570));
    float _696 = fma(_572, cbSceneParam._m0[6u].z, fma(_571, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _570));
    float _699 = fma(_572, cbSceneParam._m0[7u].z, fma(_571, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _570));
    uint _712 = _267 + 9u;
    uint _713 = _712 + uint(cbMatDynParam._m0[0u].w);
    float _719 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0)))) * cbInstanceData._m0[_713].x;
    float _720 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0)))) * cbInstanceData._m0[_713].y;
    float _721 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0)))) * cbInstanceData._m0[_713].z;
    float _3985 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _722 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _3996 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _723 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _4007 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _724 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _725 = 1.0 - _578;
    float _726 = _722 * _725;
    float _727 = _723 * _725;
    float _728 = _724 * _725;
    float _733 = (_722 + (-0.039999999105930328369140625)) * _578;
    float _734 = (_723 + (-0.039999999105930328369140625)) * _578;
    float _735 = (_724 + (-0.039999999105930328369140625)) * _578;
    float _736 = _733 + 0.039999999105930328369140625;
    float _738 = _734 + 0.039999999105930328369140625;
    float _739 = _735 + 0.039999999105930328369140625;
    vec4 _748 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _672, cbSceneParam._m0[86u].y * _673));
    float _752 = ((isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * TEXCOORD_5.w) * _748.x;
    float _753 = dot(vec3(_570, _571, _572), vec3(_654, _655, _656));
    float _756 = _753 * 2.0;
    float _760 = (_756 * _570) - _654;
    float _761 = (_756 * _571) - _655;
    float _762 = (_756 * _572) - _656;
    float _766 = abs(dot(vec3(_654, _655, _656), vec3(_570, _571, _572)));
    float _4018 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _768 = sqrt(_573);
    float _781 = exp2((_768 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_768 * 3.0));
    float _787 = (1.0 - _781) * ((_768 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _788 = _781 * _768;
    float _816 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _820 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _824 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1152;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _877 = fma(_824, cbModelParam._m0[26u].z, fma(_820, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _816));
        float _881 = fma(_824, cbModelParam._m0[27u].z, fma(_820, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _816));
        float _885 = fma(_824, cbModelParam._m0[28u].z, fma(_820, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _816));
        float _910 = _816 + _570;
        float _911 = _820 + _571;
        float _912 = _824 + _572;
        float _922 = fma(_912, cbModelParam._m0[26u].z, fma(_911, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _910)) - _877;
        float _923 = fma(_912, cbModelParam._m0[27u].z, fma(_911, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _910)) - _881;
        float _924 = fma(_912, cbModelParam._m0[28u].z, fma(_911, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _910)) - _885;
        float _928 = inversesqrt(dot(vec3(_922, _923, _924), vec3(_922, _923, _924)));
        float _941 = ((_928 * _922) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_877 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _942 = ((_928 * _923) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_881 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _943 = ((_928 * _924) / cbModelParam._m0[34u].z) + ((((((_885 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _946 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_941, _942, _943), 0.0);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_941, _942, _943), 0.0);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_941, _942, _943), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_941, _942, _943), 0.0);
        float _980 = exp2((_946.w + (-0.5)) * 20.0) * 2.0;
        float _981 = _980 * (_946.x + (-0.5));
        float _982 = _980 * (_946.y + (-0.5));
        float _983 = _980 * (_946.z + (-0.5));
        float _990 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _991 = _990 * (_953.x + (-0.5));
        float _992 = _990 * (_953.y + (-0.5));
        float _993 = _990 * (_953.z + (-0.5));
        float _1000 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _1001 = _1000 * (_960.x + (-0.5));
        float _1002 = _1000 * (_960.y + (-0.5));
        float _1003 = _1000 * (_960.z + (-0.5));
        float _1010 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_967.x + (-0.5));
        float _1012 = _1010 * (_967.y + (-0.5));
        float _1013 = _1010 * (_967.z + (-0.5));
        float _1014 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1015 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1016 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1017 = _981 * 0.5;
        float _1018 = _991 * 0.5;
        float _1019 = _1001 * 0.5;
        float _1020 = dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019));
        float _1025 = (_1020 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1020);
        float _1034 = (dot(vec3(_570, _571, _572), vec3(_1025 * _1017, _1025 * _1018, _1025 * _1019)) + 1.0) * 0.5;
        float _4044 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1044 = sqrt(((_1018 * _1018) + (_1017 * _1017)) + (_1019 * _1019)) / (_1014 + 9.9999997473787516355514526367188e-06);
        float _4055 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1046 = _1045 * 2.0;
        float _1050 = (1.0 - _1045) / (_1045 + 1.0);
        float _4066 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1060 = ((((1.0 - _1051) * (_1046 + 2.0)) * exp2(log2(isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_1046 + 1.0))) + _1051) * _1014;
        float _1061 = _982 * 0.5;
        float _1062 = _992 * 0.5;
        float _1063 = _1002 * 0.5;
        float _1064 = dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063));
        float _1069 = (_1064 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1064);
        float _1077 = (dot(vec3(_570, _571, _572), vec3(_1069 * _1061, _1069 * _1062, _1069 * _1063)) + 1.0) * 0.5;
        float _4077 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1086 = sqrt(((_1062 * _1062) + (_1061 * _1061)) + (_1063 * _1063)) / (_1015 + 9.9999997473787516355514526367188e-06);
        float _4088 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1088 = _1087 * 2.0;
        float _1092 = (1.0 - _1087) / (_1087 + 1.0);
        float _4099 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1102 = ((((1.0 - _1093) * (_1088 + 2.0)) * exp2(log2(isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_1088 + 1.0))) + _1093) * _1015;
        float _1103 = _983 * 0.5;
        float _1104 = _993 * 0.5;
        float _1105 = _1003 * 0.5;
        float _1106 = dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105));
        float _1111 = (_1106 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1106);
        float _1119 = (dot(vec3(_570, _571, _572), vec3(_1111 * _1103, _1111 * _1104, _1111 * _1105)) + 1.0) * 0.5;
        float _4110 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1128 = sqrt(((_1104 * _1104) + (_1103 * _1103)) + (_1105 * _1105)) / (_1016 + 9.9999997473787516355514526367188e-06);
        float _4121 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1130 = _1129 * 2.0;
        float _1134 = (1.0 - _1129) / (_1129 + 1.0);
        float _4132 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1144 = ((((1.0 - _1135) * (_1130 + 2.0)) * exp2(log2(isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_1130 + 1.0))) + _1135) * _1016;
        _1152 = _983;
        _1154 = _982;
        _1155 = _981;
        _1156 = _993;
        _1157 = _992;
        _1158 = _991;
        _1159 = _1003;
        _1160 = _1002;
        _1161 = _1001;
        _1162 = _1016;
        _1163 = _1015;
        _1164 = _1014;
        _1165 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0)));
        _1166 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0)));
        _1167 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0)));
    }
    else
    {
        _1152 = _1153;
        _1154 = _1153;
        _1155 = _1153;
        _1156 = _1153;
        _1157 = _1153;
        _1158 = _1153;
        _1159 = _1153;
        _1160 = _1153;
        _1161 = _1153;
        _1162 = _1153;
        _1163 = _1153;
        _1164 = _1153;
        _1165 = 0.0;
        _1166 = 0.0;
        _1167 = 0.0;
    }
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1192 = fma(_824, cbModelParam._m0[30u].z, fma(_820, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _816));
        float _1196 = fma(_824, cbModelParam._m0[31u].z, fma(_820, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _816));
        float _1200 = fma(_824, cbModelParam._m0[32u].z, fma(_820, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _816));
        float _1223 = _816 + _570;
        float _1224 = _820 + _571;
        float _1225 = _824 + _572;
        float _1235 = fma(_1225, cbModelParam._m0[30u].z, fma(_1224, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1223)) - _1192;
        float _1236 = fma(_1225, cbModelParam._m0[31u].z, fma(_1224, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1223)) - _1196;
        float _1237 = fma(_1225, cbModelParam._m0[32u].z, fma(_1224, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1223)) - _1200;
        float _1241 = inversesqrt(dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237)));
        float _1254 = ((_1241 * _1235) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1192 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1255 = ((_1241 * _1236) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1196 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1256 = ((_1241 * _1237) / cbModelParam._m0[35u].z) + ((((((_1200 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1258 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1254, _1255, _1256), 0.0);
        vec4 _1265 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1254, _1255, _1256), 0.0);
        vec4 _1272 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1254, _1255, _1256), 0.0);
        vec4 _1279 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1254, _1255, _1256), 0.0);
        float _1291 = exp2((_1258.w + (-0.5)) * 20.0) * 2.0;
        float _1292 = _1291 * (_1258.x + (-0.5));
        float _1293 = _1291 * (_1258.y + (-0.5));
        float _1294 = _1291 * (_1258.z + (-0.5));
        float _1301 = exp2((_1265.w + (-0.5)) * 20.0) * 2.0;
        float _1302 = _1301 * (_1265.x + (-0.5));
        float _1303 = _1301 * (_1265.y + (-0.5));
        float _1304 = _1301 * (_1265.z + (-0.5));
        float _1311 = exp2((_1272.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1272.x + (-0.5));
        float _1313 = _1311 * (_1272.y + (-0.5));
        float _1314 = _1311 * (_1272.z + (-0.5));
        float _1321 = exp2((_1279.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1279.x + (-0.5));
        float _1323 = _1321 * (_1279.y + (-0.5));
        float _1324 = _1321 * (_1279.z + (-0.5));
        float _1325 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1326 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1327 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1328 = _1292 * 0.5;
        float _1329 = _1302 * 0.5;
        float _1330 = _1312 * 0.5;
        float _1331 = dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330));
        float _1336 = (_1331 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1331);
        float _1344 = (dot(vec3(_570, _571, _572), vec3(_1336 * _1328, _1336 * _1329, _1336 * _1330)) + 1.0) * 0.5;
        float _4173 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1353 = sqrt(((_1329 * _1329) + (_1328 * _1328)) + (_1330 * _1330)) / (_1325 + 9.9999997473787516355514526367188e-06);
        float _4184 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1355 = _1354 * 2.0;
        float _1359 = (1.0 - _1354) / (_1354 + 1.0);
        float _4195 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1369 = ((((1.0 - _1360) * (_1355 + 2.0)) * exp2(log2(isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_1355 + 1.0))) + _1360) * _1325;
        float _1370 = _1293 * 0.5;
        float _1371 = _1303 * 0.5;
        float _1372 = _1313 * 0.5;
        float _1373 = dot(vec3(_1370, _1371, _1372), vec3(_1370, _1371, _1372));
        float _1378 = (_1373 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1373);
        float _1386 = (dot(vec3(_570, _571, _572), vec3(_1378 * _1370, _1378 * _1371, _1378 * _1372)) + 1.0) * 0.5;
        float _4206 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1395 = sqrt(((_1371 * _1371) + (_1370 * _1370)) + (_1372 * _1372)) / (_1326 + 9.9999997473787516355514526367188e-06);
        float _4217 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1397 = _1396 * 2.0;
        float _1401 = (1.0 - _1396) / (_1396 + 1.0);
        float _4228 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1411 = ((((1.0 - _1402) * (_1397 + 2.0)) * exp2(log2(isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_1397 + 1.0))) + _1402) * _1326;
        float _1412 = _1294 * 0.5;
        float _1413 = _1304 * 0.5;
        float _1414 = _1314 * 0.5;
        float _1415 = dot(vec3(_1412, _1413, _1414), vec3(_1412, _1413, _1414));
        float _1420 = (_1415 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1415);
        float _1428 = (dot(vec3(_570, _571, _572), vec3(_1420 * _1412, _1420 * _1413, _1420 * _1414)) + 1.0) * 0.5;
        float _4239 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1437 = sqrt(((_1413 * _1413) + (_1412 * _1412)) + (_1414 * _1414)) / (_1327 + 9.9999997473787516355514526367188e-06);
        float _4250 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _1439 = _1438 * 2.0;
        float _1443 = (1.0 - _1438) / (_1438 + 1.0);
        float _4261 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1453 = ((((1.0 - _1444) * (_1439 + 2.0)) * exp2(log2(isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_1439 + 1.0))) + _1444) * _1327;
        _1461 = _1294;
        _1462 = _1293;
        _1463 = _1292;
        _1464 = _1304;
        _1465 = _1303;
        _1466 = _1302;
        _1467 = _1314;
        _1468 = _1313;
        _1469 = _1312;
        _1470 = _1327;
        _1471 = _1326;
        _1472 = _1325;
        _1473 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)));
        _1474 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)));
        _1475 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)));
    }
    else
    {
        _1461 = _1153;
        _1462 = _1153;
        _1463 = _1153;
        _1464 = _1153;
        _1465 = _1153;
        _1466 = _1153;
        _1467 = _1153;
        _1468 = _1153;
        _1469 = _1153;
        _1470 = _1153;
        _1471 = _1153;
        _1472 = _1153;
        _1473 = 0.0;
        _1474 = 0.0;
        _1475 = 0.0;
    }
    float _1485 = (cbModelParam._m0[1u].x * (_1473 - _1165)) + _1165;
    float _1486 = (cbModelParam._m0[1u].x * (_1474 - _1166)) + _1166;
    float _1487 = (cbModelParam._m0[1u].x * (_1475 - _1167)) + _1167;
    float _1508 = fma(_1487, cbSceneParam._m0[89u].z, fma(_1486, cbSceneParam._m0[89u].y, _1485 * cbSceneParam._m0[89u].x));
    float _1511 = fma(_1487, cbSceneParam._m0[90u].z, fma(_1486, cbSceneParam._m0[90u].y, _1485 * cbSceneParam._m0[90u].x));
    float _1514 = fma(_1487, cbSceneParam._m0[91u].z, fma(_1486, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1485));
    float _1529 = _760 * 0.5;
    float _1530 = _761 * 0.5;
    float _1531 = _762 * 0.5;
    float _1532 = dot(vec4(_1529, _1530, _1531, 1.0), vec4(_1463, _1466, _1469, _1472));
    float _1535 = dot(vec4(_1529, _1530, _1531, 1.0), vec4(_1462, _1465, _1468, _1471));
    float _1538 = dot(vec4(_1529, _1530, _1531, 1.0), vec4(_1461, _1464, _1467, _1470));
    float _1572;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1545 = dot(vec4(_1529, _1530, _1531, 1.0), vec4(_1152, _1156, _1159, _1162));
        float _1549 = dot(vec4(_1529, _1530, _1531, 1.0), vec4(_1154, _1157, _1160, _1163));
        float _1553 = dot(vec4(_1529, _1530, _1531, 1.0), vec4(_1155, _1158, _1161, _1164));
        float _1560 = dot(vec4(cbModelParam._m0[39u]), vec4(_1529, _1530, _1531, 1.0));
        _1572 = dot(vec3(isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)), isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)), isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1560) ? 0.0 : (isnan(0.0) ? _1560 : max(0.0, _1560))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1572 = 1.0;
    }
    float _1583;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1574 = dot(vec4(cbModelParam._m0[40u]), vec4(_1529, _1530, _1531, 1.0));
        _1583 = dot(vec3(isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)), isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)), isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1574) ? 0.0 : (isnan(0.0) ? _1574 : max(0.0, _1574))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1583 = 1.0;
    }
    float _1587 = (_1583 * cbModelParam._m0[1u].x) + (_1572 * (1.0 - cbModelParam._m0[1u].x));
    float _1597 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _573);
    float _1598 = isnan(_1597) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1597 : min(cbModelParam._m0[25u].z, _1597));
    float _1680;
    float _1682;
    float _1684;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1647 = fma(_824, cbModelParam._m0[13u].z, fma(_820, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _816)) + cbModelParam._m0[13u].w;
        float _1651 = fma(_824, cbModelParam._m0[14u].z, fma(_820, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _816)) + cbModelParam._m0[14u].w;
        float _1655 = fma(_824, cbModelParam._m0[15u].z, fma(_820, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _816)) + cbModelParam._m0[15u].w;
        float _1658 = fma(_762, cbModelParam._m0[13u].z, fma(_761, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _760));
        float _1661 = fma(_762, cbModelParam._m0[14u].z, fma(_761, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _760));
        float _1664 = fma(_762, cbModelParam._m0[15u].z, fma(_761, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _760));
        float _1692;
        if (_1658 > 0.0)
        {
            _1692 = abs((1.0 - _1647) / _1658);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1658 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1647 + 1.0) / _1658);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1692 = frontier_phi_19_17_ladder;
        }
        float _1865;
        if (_1661 > 0.0)
        {
            _1865 = abs((1.0 - _1651) / _1661);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1661 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1651 + 1.0) / _1661);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1865 = frontier_phi_28_24_ladder;
        }
        float _2161;
        if (_1664 > 0.0)
        {
            _2161 = abs((1.0 - _1655) / _1664);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1664 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1655 + 1.0) / _1664);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2161 = frontier_phi_40_35_ladder;
        }
        float _2163 = isnan(_1865) ? _1692 : (isnan(_1692) ? _1865 : min(_1692, _1865));
        float _2164 = isnan(_2161) ? _2163 : (isnan(_2163) ? _2161 : min(_2163, _2161));
        float _2168 = (_2164 * _1658) + _1647;
        float _2169 = (_2164 * _1661) + _1651;
        float _2170 = (_2164 * _1664) + _1655;
        float _2171 = _2164 * 9.9999997473787516355514526367188e-05;
        float _2173 = (-1.0) - _2171;
        float _2175 = _2171 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2170 > _2175) || ((_2170 < _2173) || ((_2169 > _2175) || ((_2169 < _2173) || ((_2168 < _2173) || (_2168 > _2175))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2315 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2170, cbModelParam._m0[9u].z, fma(_2169, cbModelParam._m0[9u].y, _2168 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2170, cbModelParam._m0[10u].z, fma(_2169, cbModelParam._m0[10u].y, _2168 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2170, cbModelParam._m0[11u].z, fma(_2169, cbModelParam._m0[11u].y, _2168 * cbModelParam._m0[11u].x))), _1598);
            frontier_phi_18_40_ladder = _2315.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2315.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2315.x * cbModelParam._m0[1u].y;
        }
        _1680 = frontier_phi_18_40_ladder_2;
        _1682 = frontier_phi_18_40_ladder_1;
        _1684 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1668 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_760, _761, _762), _1598);
        _1680 = _1668.x * cbModelParam._m0[1u].y;
        _1682 = _1668.y * cbModelParam._m0[1u].y;
        _1684 = _1668.z * cbModelParam._m0[1u].y;
    }
    float _1688 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _573);
    float _1689 = isnan(_1688) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1688 : min(cbModelParam._m0[25u].w, _1688));
    float _1780;
    float _1782;
    float _1784;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1744 = fma(_824, cbModelParam._m0[21u].z, fma(_820, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _816)) + cbModelParam._m0[21u].w;
        float _1748 = fma(_824, cbModelParam._m0[22u].z, fma(_820, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _816)) + cbModelParam._m0[22u].w;
        float _1752 = fma(_824, cbModelParam._m0[23u].z, fma(_820, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _816)) + cbModelParam._m0[23u].w;
        float _1755 = fma(_762, cbModelParam._m0[21u].z, fma(_761, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _760));
        float _1758 = fma(_762, cbModelParam._m0[22u].z, fma(_761, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _760));
        float _1761 = fma(_762, cbModelParam._m0[23u].z, fma(_761, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _760));
        float _1870;
        if (_1755 > 0.0)
        {
            _1870 = abs((1.0 - _1744) / _1755);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1755 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1744 + 1.0) / _1755);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1870 = frontier_phi_30_26_ladder;
        }
        float _2188;
        if (_1758 > 0.0)
        {
            _2188 = abs((1.0 - _1748) / _1758);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1758 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1748 + 1.0) / _1758);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2188 = frontier_phi_42_37_ladder;
        }
        float _2526;
        if (_1761 > 0.0)
        {
            _2526 = abs((1.0 - _1752) / _1761);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1761 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1752 + 1.0) / _1761);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2526 = frontier_phi_52_49_ladder;
        }
        float _2528 = isnan(_2188) ? _1870 : (isnan(_1870) ? _2188 : min(_1870, _2188));
        float _2529 = isnan(_2526) ? _2528 : (isnan(_2528) ? _2526 : min(_2528, _2526));
        float _2533 = (_2529 * _1755) + _1744;
        float _2534 = (_2529 * _1758) + _1748;
        float _2535 = (_2529 * _1761) + _1752;
        float _2536 = _2529 * 9.9999997473787516355514526367188e-05;
        float _2537 = (-1.0) - _2536;
        float _2539 = _2536 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2535 > _2539) || ((_2535 < _2537) || ((_2534 > _2539) || ((_2534 < _2537) || ((_2533 < _2537) || (_2533 > _2539))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2657 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2535, cbModelParam._m0[17u].z, fma(_2534, cbModelParam._m0[17u].y, _2533 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2535, cbModelParam._m0[18u].z, fma(_2534, cbModelParam._m0[18u].y, _2533 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2535, cbModelParam._m0[19u].z, fma(_2534, cbModelParam._m0[19u].y, _2533 * cbModelParam._m0[19u].x))), _1689);
            frontier_phi_27_52_ladder = _2657.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2657.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2657.x * cbModelParam._m0[1u].z;
        }
        _1780 = frontier_phi_27_52_ladder_2;
        _1782 = frontier_phi_27_52_ladder_1;
        _1784 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1764 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_760, _761, _762), _1689);
        _1780 = _1764.x * cbModelParam._m0[1u].z;
        _1782 = _1764.y * cbModelParam._m0[1u].z;
        _1784 = _1764.z * cbModelParam._m0[1u].z;
    }
    float _1797 = (((_787 * _736) + _788) * _752) * ((cbModelParam._m0[1u].w * (_1780 - _1680)) + _1680);
    float _1799 = (((_787 * _738) + _788) * _752) * ((cbModelParam._m0[1u].w * (_1782 - _1682)) + _1682);
    float _1801 = (((_787 * _739) + _788) * _752) * ((cbModelParam._m0[1u].w * (_1784 - _1684)) + _1684);
    float _1804 = fma(_1801, cbSceneParam._m0[89u].z, fma(_1799, cbSceneParam._m0[89u].y, _1797 * cbSceneParam._m0[89u].x));
    float _1807 = fma(_1801, cbSceneParam._m0[90u].z, fma(_1799, cbSceneParam._m0[90u].y, _1797 * cbSceneParam._m0[90u].x));
    float _1810 = fma(_1801, cbSceneParam._m0[91u].z, fma(_1799, cbSceneParam._m0[91u].y, _1797 * cbSceneParam._m0[91u].x));
    float _1844 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1848 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1852 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1856 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1857 = _1844 / _1856;
    float _1858 = _1848 / _1856;
    float _1859 = _1852 / _1856;
    float _2006;
    float _2007;
    float _2008;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1886 = ((uint(_1859 > cbSceneParam._m0[59u].y) + uint(_1859 > cbSceneParam._m0[59u].x)) + uint(_1859 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1887 = _1886 + 43u;
        uint _1895 = _1886 + 44u;
        uint _1903 = _1886 + 45u;
        uint _1911 = _1886 + 46u;
        float _1922 = fma(_1856, cbSceneParam._m0[_1887].w, fma(_1852, cbSceneParam._m0[_1887].z, fma(_1848, cbSceneParam._m0[_1887].y, _1844 * cbSceneParam._m0[_1887].x)));
        float _1926 = fma(_1856, cbSceneParam._m0[_1895].w, fma(_1852, cbSceneParam._m0[_1895].z, fma(_1848, cbSceneParam._m0[_1895].y, _1844 * cbSceneParam._m0[_1895].x)));
        float _1934 = fma(_1856, cbSceneParam._m0[_1911].w, fma(_1852, cbSceneParam._m0[_1911].z, fma(_1848, cbSceneParam._m0[_1911].y, _1844 * cbSceneParam._m0[_1911].x)));
        float _1939 = cbSceneParam._m0[33u].z * _1934;
        float _1941 = cbSceneParam._m0[33u].w * _1934;
        float _1944 = fma(_1856, cbSceneParam._m0[_1903].w, fma(_1852, cbSceneParam._m0[_1903].z, fma(_1848, cbSceneParam._m0[_1903].y, _1844 * cbSceneParam._m0[_1903].x))) / _1934;
        float _1992 = (cbSceneParam._m0[33u].x - sqrt(((_1858 * _1858) + (_1857 * _1857)) + (_1859 * _1859))) * cbSceneParam._m0[33u].y;
        float _4387 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
        float _1999 = (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1939 + _1922) / _1934, (_1941 + _1926) / _1934), _1944), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1941 + _1922) / _1934, (_1926 - _1939) / _1934), _1944), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1922 - _1939) / _1934, (_1926 - _1941) / _1934), _1944), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1922 - _1941) / _1934, (_1939 + _1926) / _1934), _1944), 0.0)).x), vec4(0.25)));
        _2006 = 1.0 - (_1999 * cbSceneParam._m0[34u].x);
        _2007 = 1.0 - (_1999 * cbSceneParam._m0[34u].y);
        _2008 = 1.0 - (_1999 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2006 = 1.0;
        _2007 = 1.0;
        _2008 = 1.0;
    }
    float _2072;
    float _2074;
    float _2076;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2060 = fma(_1856, cbSceneParam._m0[63u].w, fma(_1852, cbSceneParam._m0[63u].z, fma(_1848, cbSceneParam._m0[63u].y, _1844 * cbSceneParam._m0[63u].x)));
        float _2061 = fma(_1856, cbSceneParam._m0[60u].w, fma(_1852, cbSceneParam._m0[60u].z, fma(_1848, cbSceneParam._m0[60u].y, _1844 * cbSceneParam._m0[60u].x))) / _2060;
        float _2062 = fma(_1856, cbSceneParam._m0[61u].w, fma(_1852, cbSceneParam._m0[61u].z, fma(_1848, cbSceneParam._m0[61u].y, _1844 * cbSceneParam._m0[61u].x))) / _2060;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2061 >= cbSceneParam._m0[64u].x) && (_2062 >= cbSceneParam._m0[64u].y)) && (_2061 <= cbSceneParam._m0[64u].z)) && (_2062 <= cbSceneParam._m0[64u].w))
        {
            float _2201 = fma(_1856, cbSceneParam._m0[62u].w, fma(_1852, cbSceneParam._m0[62u].z, fma(_1848, cbSceneParam._m0[62u].y, _1844 * cbSceneParam._m0[62u].x))) / _2060;
            float _2205 = isnan(cbSceneParam._m0[41u].w) ? _2201 : (isnan(_2201) ? cbSceneParam._m0[41u].w : max(_2201, cbSceneParam._m0[41u].w));
            float _2248 = (cbSceneParam._m0[33u].x - sqrt(((_1858 * _1858) + (_1857 * _1857)) + (_1859 * _1859))) * cbSceneParam._m0[33u].y;
            float _4403 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
            float _2255 = (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2061, cbSceneParam._m0[33u].w + _2062), _2205), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2061, _2062 - cbSceneParam._m0[33u].z), _2205), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2061 - cbSceneParam._m0[33u].z, _2062 - cbSceneParam._m0[33u].w), _2205), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2061 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2062), _2205), 0.0)).x), vec4(0.25)));
            float _2259 = 1.0 - (_2255 * cbSceneParam._m0[34u].x);
            float _2260 = 1.0 - (_2255 * cbSceneParam._m0[34u].y);
            float _2261 = 1.0 - (_2255 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2261) ? _2008 : (isnan(_2008) ? _2261 : min(_2008, _2261));
            frontier_phi_39_38_ladder_1 = isnan(_2260) ? _2007 : (isnan(_2007) ? _2260 : min(_2007, _2260));
            frontier_phi_39_38_ladder_2 = isnan(_2259) ? _2006 : (isnan(_2006) ? _2259 : min(_2006, _2259));
        }
        else
        {
            frontier_phi_39_38_ladder = _2008;
            frontier_phi_39_38_ladder_1 = _2007;
            frontier_phi_39_38_ladder_2 = _2006;
        }
        _2072 = frontier_phi_39_38_ladder_2;
        _2074 = frontier_phi_39_38_ladder_1;
        _2076 = frontier_phi_39_38_ladder;
    }
    else
    {
        _2072 = _2006;
        _2074 = _2007;
        _2076 = _2008;
    }
    uvec4 _2081 = floatBitsToUint(cbInstanceData._m0[_267 + 5u]);
    uint _2083 = _2081.x * 14u;
    uint _2084 = _2083 + 13u;
    float _2091 = _752 + (-1.0);
    float _2096 = (cbLight._m0[_2084].x * _2091) + 1.0;
    float _2097 = (cbLight._m0[_2084].y * _2091) + 1.0;
    float _2098 = (cbLight._m0[_2084].z * _2091) + 1.0;
    float _2099 = (cbLight._m0[_2084].w * _2091) + 1.0;
    uint _2100 = _2083 + 5u;
    float _2106 = isnan(1.0) ? _2097 : (isnan(_2097) ? 1.0 : min(_2097, 1.0));
    uint _2110 = _2083 + 4u;
    float _2120 = isnan(1.0) ? _2096 : (isnan(_2096) ? 1.0 : min(_2096, 1.0));
    uint _2124 = _2083 | 1u;
    float _2135 = dot(vec3(cbLight._m0[_2083].xyz), vec3(_570, _571, _572));
    float _2138 = dot(vec3(cbLight._m0[_2124].xyz), vec3(_570, _571, _572));
    float _4439 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _4450 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2143 = (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * 0.3183098733425140380859375;
    float _2145 = (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * 0.3183098733425140380859375;
    float _2152 = ((cbLight._m0[_2100].x * _2106) * _2145) + (((cbLight._m0[_2110].x * _2072) * _2120) * _2143);
    float _2153 = ((_2106 * cbLight._m0[_2100].y) * _2145) + (((cbLight._m0[_2110].y * _2074) * _2120) * _2143);
    float _2154 = ((_2106 * cbLight._m0[_2100].z) * _2145) + (((cbLight._m0[_2110].z * _2076) * _2120) * _2143);
    uvec4 _2158 = floatBitsToUint(cbLight._m0[_2083 + 12u]);
    bool _2160 = _2158.x == 0u;
    float _2262;
    float _2264;
    float _2266;
    if (_2160)
    {
        _2262 = _2152;
        _2264 = _2153;
        _2266 = _2154;
    }
    else
    {
        uint _2270 = _2083 + 6u;
        float _2286 = (dot(vec3(cbLight._m0[_2083 + 2u].xyz), vec3(_570, _571, _572)) * 0.5) + 0.5;
        float _2287 = _2286 * _2286;
        float _4461 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2288 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _2289 = isnan(1.0) ? _2098 : (isnan(_2098) ? 1.0 : min(_2098, 1.0));
        _2262 = (((cbLight._m0[_2270].x * 0.3183098733425140380859375) * _2288) * _2289) + _2152;
        _2264 = (((cbLight._m0[_2270].y * 0.3183098733425140380859375) * _2288) * _2289) + _2153;
        _2266 = (((cbLight._m0[_2270].z * 0.3183098733425140380859375) * _2288) * _2289) + _2154;
    }
    bool _2269 = _2158.y == 0u;
    float _2324;
    float _2326;
    float _2328;
    if (_2269)
    {
        _2324 = _2262;
        _2326 = _2264;
        _2328 = _2266;
    }
    else
    {
        uint _2497 = _2083 + 7u;
        float _2513 = (dot(vec3(cbLight._m0[_2083 + 3u].xyz), vec3(_570, _571, _572)) * 0.5) + 0.5;
        float _2514 = _2513 * _2513;
        float _4477 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2515 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _2516 = isnan(1.0) ? _2099 : (isnan(_2099) ? 1.0 : min(_2099, 1.0));
        _2324 = (((cbLight._m0[_2497].x * 0.3183098733425140380859375) * _2515) * _2516) + _2262;
        _2326 = (((cbLight._m0[_2497].y * 0.3183098733425140380859375) * _2515) * _2516) + _2264;
        _2328 = (((cbLight._m0[_2497].z * 0.3183098733425140380859375) * _2515) * _2516) + _2266;
    }
    uint _2331 = _2083 + 8u;
    float _2344 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2083].w)) * _573) * 0.949999988079071044921875);
    float _2345 = _2344 * _2344;
    float _2346 = cbLight._m0[_2083].x + _654;
    float _2347 = cbLight._m0[_2083].y + _655;
    float _2348 = cbLight._m0[_2083].z + _656;
    float _2352 = inversesqrt(dot(vec3(_2346, _2347, _2348), vec3(_2346, _2347, _2348)));
    float _2353 = _2352 * _2346;
    float _2354 = _2352 * _2347;
    float _2355 = _2352 * _2348;
    float _2356 = dot(vec3(_570, _571, _572), vec3(cbLight._m0[_2083].xyz));
    float _4493 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2359 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
    float _4504 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _2360 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
    float _2361 = dot(vec3(_570, _571, _572), vec3(_2353, _2354, _2355));
    float _4515 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2364 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
    float _2365 = dot(vec3(cbLight._m0[_2083].xyz), vec3(_2353, _2354, _2355));
    float _4526 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2369 = _2345 * _2345;
    float _2373 = ((_2364 * _2364) * (_2369 + (-1.0))) + 1.0;
    float _2381 = exp2(log2(1.0 - (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0)))) * 5.0);
    float _2382 = 0.959999978542327880859375 - _733;
    float _2384 = 0.959999978542327880859375 - _734;
    float _2385 = 0.959999978542327880859375 - _735;
    float _2392 = 1.0 - _2345;
    float _2403 = (0.5 / (((_2360 * ((_2359 * _2392) + _2345)) + 9.9999999392252902907785028219223e-09) + (((_2360 * _2392) + _2345) * _2359))) * _2359;
    float _4537 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2405 = (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * (_2369 / ((_2373 * _2373) * 3.141590118408203125));
    uint _2419 = _2083 + 9u;
    float _2430 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2124].w)) * _573) * 0.949999988079071044921875);
    float _2431 = _2430 * _2430;
    float _2432 = cbLight._m0[_2124].x + _654;
    float _2433 = cbLight._m0[_2124].y + _655;
    float _2434 = cbLight._m0[_2124].z + _656;
    float _2438 = inversesqrt(dot(vec3(_2432, _2433, _2434), vec3(_2432, _2433, _2434)));
    float _2439 = _2438 * _2432;
    float _2440 = _2438 * _2433;
    float _2441 = _2438 * _2434;
    float _2442 = dot(vec3(_570, _571, _572), vec3(cbLight._m0[_2124].xyz));
    float _4548 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2445 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
    float _2446 = dot(vec3(_570, _571, _572), vec3(_2439, _2440, _2441));
    float _4559 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2449 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
    float _2450 = dot(vec3(cbLight._m0[_2124].xyz), vec3(_2439, _2440, _2441));
    float _4570 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2454 = _2431 * _2431;
    float _2458 = ((_2449 * _2449) * (_2454 + (-1.0))) + 1.0;
    float _2465 = exp2(log2(1.0 - (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0)))) * 5.0);
    float _2472 = 1.0 - _2431;
    float _2482 = (0.5 / (((_2360 * ((_2445 * _2472) + _2431)) + 9.9999999392252902907785028219223e-09) + (((_2360 * _2472) + _2431) * _2445))) * _2445;
    float _4581 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
    float _2484 = (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (_2454 / ((_2458 * _2458) * 3.141590118408203125));
    float _2494 = (((((_2465 * _2382) + _736) * cbLight._m0[_2419].x) * _2484) * _2106) + ((((cbLight._m0[_2331].x * _2072) * ((_2381 * _2382) + _736)) * _2405) * _2120);
    float _2495 = (((((_2465 * _2384) + _738) * cbLight._m0[_2419].y) * _2484) * _2106) + ((((cbLight._m0[_2331].y * _2074) * ((_2381 * _2384) + _738)) * _2405) * _2120);
    float _2496 = (((((_2465 * _2385) + _739) * cbLight._m0[_2419].z) * _2484) * _2106) + ((((cbLight._m0[_2331].z * _2076) * ((_2381 * _2385) + _739)) * _2405) * _2120);
    float _2552;
    float _2554;
    float _2556;
    if (_2160)
    {
        _2552 = _2494;
        _2554 = _2495;
        _2556 = _2496;
    }
    else
    {
        uint _2558 = _2083 + 2u;
        uint _2562 = _2083 + 10u;
        float _2576 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2558].w)) * _573) * 0.949999988079071044921875);
        float _2577 = _2576 * _2576;
        float _2578 = cbLight._m0[_2558].x + _654;
        float _2579 = cbLight._m0[_2558].y + _655;
        float _2580 = cbLight._m0[_2558].z + _656;
        float _2584 = inversesqrt(dot(vec3(_2578, _2579, _2580), vec3(_2578, _2579, _2580)));
        float _2585 = _2584 * _2578;
        float _2586 = _2584 * _2579;
        float _2587 = _2584 * _2580;
        float _2588 = dot(vec3(_570, _571, _572), vec3(cbLight._m0[_2558].xyz));
        float _4592 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        float _2591 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
        float _2592 = dot(vec3(_570, _571, _572), vec3(_2585, _2586, _2587));
        float _4603 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2595 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _2596 = dot(vec3(cbLight._m0[_2558].xyz), vec3(_2585, _2586, _2587));
        float _4614 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2600 = _2577 * _2577;
        float _2604 = ((_2595 * _2595) * (_2600 + (-1.0))) + 1.0;
        float _2611 = exp2(log2(1.0 - (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0)))) * 5.0);
        float _2618 = 1.0 - _2577;
        float _2628 = (0.5 / (((_2360 * ((_2591 * _2618) + _2577)) + 9.9999999392252902907785028219223e-09) + (((_2360 * _2618) + _2577) * _2591))) * _2591;
        float _4625 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2630 = (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_2600 / ((_2604 * _2604) * 3.141590118408203125));
        float _2631 = isnan(1.0) ? _2098 : (isnan(_2098) ? 1.0 : min(_2098, 1.0));
        _2552 = (((((_2611 * _2382) + _736) * cbLight._m0[_2562].x) * _2630) * _2631) + _2494;
        _2554 = (((((_2611 * _2384) + _738) * cbLight._m0[_2562].y) * _2630) * _2631) + _2495;
        _2556 = (((((_2611 * _2385) + _739) * cbLight._m0[_2562].z) * _2630) * _2631) + _2496;
    }
    float _2662;
    float _2664;
    float _2666;
    if (_2269)
    {
        _2662 = _2552;
        _2664 = _2554;
        _2666 = _2556;
    }
    else
    {
        uint _2673 = _2083 + 3u;
        uint _2677 = _2083 + 11u;
        float _2691 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2673].w)) * _573) * 0.949999988079071044921875);
        float _2692 = _2691 * _2691;
        float _2693 = cbLight._m0[_2673].x + _654;
        float _2694 = cbLight._m0[_2673].y + _655;
        float _2695 = cbLight._m0[_2673].z + _656;
        float _2699 = inversesqrt(dot(vec3(_2693, _2694, _2695), vec3(_2693, _2694, _2695)));
        float _2700 = _2699 * _2693;
        float _2701 = _2699 * _2694;
        float _2702 = _2699 * _2695;
        float _2703 = dot(vec3(_570, _571, _572), vec3(cbLight._m0[_2673].xyz));
        float _4641 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2706 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
        float _2707 = dot(vec3(_570, _571, _572), vec3(_2700, _2701, _2702));
        float _4652 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2710 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
        float _2711 = dot(vec3(cbLight._m0[_2673].xyz), vec3(_2700, _2701, _2702));
        float _4663 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2715 = _2692 * _2692;
        float _2719 = ((_2710 * _2710) * (_2715 + (-1.0))) + 1.0;
        float _2726 = exp2(log2(1.0 - (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0)))) * 5.0);
        float _2733 = 1.0 - _2692;
        float _2743 = (0.5 / (((_2360 * ((_2706 * _2733) + _2692)) + 9.9999999392252902907785028219223e-09) + (((_2360 * _2733) + _2692) * _2706))) * _2706;
        float _4674 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        float _2745 = (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * (_2715 / ((_2719 * _2719) * 3.141590118408203125));
        float _2746 = isnan(1.0) ? _2099 : (isnan(_2099) ? 1.0 : min(_2099, 1.0));
        _2662 = (((((_2726 * _2382) + _736) * cbLight._m0[_2677].x) * _2745) * _2746) + _2552;
        _2664 = (((((_2726 * _2384) + _738) * cbLight._m0[_2677].y) * _2745) * _2746) + _2554;
        _2666 = (((((_2726 * _2385) + _739) * cbLight._m0[_2677].z) * _2745) * _2746) + _2556;
    }
    float _2812;
    float _2814;
    float _2816;
    float _2818;
    float _2820;
    float _2822;
    if (_2081.y == 0u)
    {
        uvec4 _2767 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2768 = _2767.x;
        uint _2779 = uint((float(_2767.y) * floor(float(uint(cbSceneParam._m0[85u].y * _673) / _2768))) + floor(float(uint(cbSceneParam._m0[85u].x * _672) / _2768)));
        float _2789 = (log2(_1859 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2790 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
        uint _2793 = uint(isnan(14.0) ? _2790 : (isnan(_2790) ? 14.0 : min(_2790, 14.0)));
        uvec4 _2798 = texelFetch(g_lightClusterGridBuffer, int(((_2793 << 2u) + (_2779 << 6u)) >> 2u));
        uint _2799 = _2798.x;
        uint _2800 = _2767.z;
        float _2879;
        float _2881;
        float _2883;
        float _2885;
        float _2887;
        float _2889;
        if (((((1u << ((_2800 >> 4u) & 15u)) + 4294967295u) & _2799) == 0u) || ((_2800 & 240u) == 0u))
        {
            _2879 = 0.0;
            _2881 = 0.0;
            _2883 = 0.0;
            _2885 = 0.0;
            _2887 = 0.0;
            _2889 = 0.0;
        }
        else
        {
            float _2880;
            float _2882;
            float _2884;
            float _2886;
            float _2888;
            float _2890;
            float _3032 = 0.0;
            float _3033 = 0.0;
            float _3034 = 0.0;
            float _3035 = 0.0;
            float _3036 = 0.0;
            float _3037 = 0.0;
            uint _3038 = 0u;
            uint _3047;
            bool _3048;
            for (;;)
            {
                _3047 = texelFetch(g_lightClassification, int((((_2793 << 5u) + (_2779 << 9u)) + (_3038 << 2u)) >> 2u)).x;
                _3048 = _3047 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3048)
                {
                    frontier_phi_73_pred = _3037;
                    frontier_phi_73_pred_1 = _3036;
                    frontier_phi_73_pred_2 = _3035;
                    frontier_phi_73_pred_3 = _3034;
                    frontier_phi_73_pred_4 = _3033;
                    frontier_phi_73_pred_5 = _3032;
                }
                else
                {
                    float _3177;
                    float _3178;
                    float _3179;
                    float _3180;
                    float _3181;
                    float _3182;
                    uint _3183;
                    _3177 = _3032;
                    _3178 = _3033;
                    _3179 = _3034;
                    _3180 = _3035;
                    _3181 = _3036;
                    _3182 = _3037;
                    _3183 = _3047;
                    float _3104;
                    float _3105;
                    float _3106;
                    float _3107;
                    float _3108;
                    float _3109;
                    for (;;)
                    {
                        uint _3187 = uint(findLSB(_3183)) + (_3038 << 5u);
                        uint _3184 = (_3183 + 4294967295u) & _3183;
                        uint _3189 = _3187 * 48u;
                        vec4 _3203 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3189)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 3u)).x));
                        uint _3209 = (_3187 * 48u) + 4u;
                        vec4 _3222 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3209)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 3u)).x));
                        uint _3228 = (_3187 * 48u) + 8u;
                        vec3 _3239 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3228)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 2u)).x));
                        float _3243 = _3203.x - _1857;
                        float _3244 = _3203.y - _1858;
                        float _3245 = _3203.z - _1859;
                        float _3246 = dot(vec3(_3243, _3244, _3245), vec3(_3243, _3244, _3245));
                        float _3249 = inversesqrt(_3246);
                        float _3250 = _3249 * _3243;
                        float _3251 = _3249 * _3244;
                        float _3252 = _3249 * _3245;
                        float _3253 = dot(vec3(_693, _696, _699), vec3(_3250, _3251, _3252));
                        float _3258 = 1.0 - (_3246 * _3203.w);
                        float _4700 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                        float _3259 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                        float _3260 = sqrt(_3246) * _3222.w;
                        float _3263 = 1.39999997615814208984375 / (_3260 + 1.39999997615814208984375);
                        float _3264 = _3263 * _3263;
                        float _3267 = ((1.0 - _3264) * _3253) + _3264;
                        float _3270 = _3260 * _3260;
                        float _3274 = ((isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0))) * _3259) / ((_3270 * 0.699999988079071044921875) + 1.0);
                        float _3278 = (-0.0) - _1857;
                        float _3279 = (-0.0) - _1858;
                        float _3280 = (-0.0) - _1859;
                        float _3284 = inversesqrt(dot(vec3(_3278, _3279, _3280), vec3(_3278, _3279, _3280)));
                        float _3285 = _3284 * _3278;
                        float _3286 = _3284 * _3279;
                        float _3287 = _3284 * _3280;
                        float _3294 = exp2(log2(1.0 / ((_3270 * 3.5) + 5.0)) * 0.25);
                        float _3295 = 1.0 - _768;
                        float _3302 = sqrt(1.0 - ((1.0 - (_3295 * _3295)) * (1.0 - (_3294 * _3294))));
                        float _3303 = _3302 * _3302;
                        float _3304 = _3303 * _3303;
                        float _3305 = _3285 + _3250;
                        float _3306 = _3286 + _3251;
                        float _3307 = _3287 + _3252;
                        float _3311 = inversesqrt(dot(vec3(_3305, _3306, _3307), vec3(_3305, _3306, _3307)));
                        float _3315 = dot(vec3(_693, _696, _699), vec3(_3285, _3286, _3287));
                        float _4716 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                        float _3318 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
                        float _3319 = dot(vec3(_693, _696, _699), vec3(_3311 * _3305, _3311 * _3306, _3311 * _3307));
                        float _4727 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                        float _3322 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
                        float _3326 = ((_3322 * _3322) * (_3304 + (-1.0))) + 1.0;
                        float _3327 = _3263 * _3303;
                        float _3328 = _3327 * _3327;
                        float _3331 = ((1.0 - _3328) * _3253) + _3328;
                        float _4738 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                        float _3332 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                        float _3333 = 1.0 - _3303;
                        float _3343 = (0.5 / (((_3332 * ((_3318 * _3333) + _3303)) + 9.9999999392252902907785028219223e-09) + (((_3332 * _3333) + _3303) * _3318))) * _3332;
                        float _4749 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                        float _3354 = (((_3304 * 3.1415927410125732421875) * (isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0)))) / ((_3326 * _3326) * ((_3270 * 2.1991131305694580078125) + 3.141590118408203125))) * _3259;
                        _3107 = (_3274 * _3222.x) + _3180;
                        _3108 = (_3274 * _3222.y) + _3181;
                        _3109 = (_3274 * _3222.z) + _3182;
                        _3104 = (_3354 * _3239.x) + _3177;
                        _3105 = (_3354 * _3239.y) + _3178;
                        _3106 = (_3354 * _3239.z) + _3179;
                        if (_3184 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3177 = _3104;
                            _3178 = _3105;
                            _3179 = _3106;
                            _3180 = _3107;
                            _3181 = _3108;
                            _3182 = _3109;
                            _3183 = _3184;
                        }
                    }
                    frontier_phi_73_pred = _3109;
                    frontier_phi_73_pred_1 = _3108;
                    frontier_phi_73_pred_2 = _3107;
                    frontier_phi_73_pred_3 = _3106;
                    frontier_phi_73_pred_4 = _3105;
                    frontier_phi_73_pred_5 = _3104;
                }
                _2890 = frontier_phi_73_pred;
                _2888 = frontier_phi_73_pred_1;
                _2886 = frontier_phi_73_pred_2;
                _2884 = frontier_phi_73_pred_3;
                _2882 = frontier_phi_73_pred_4;
                _2880 = frontier_phi_73_pred_5;
                uint _3039 = _3038 + 1u;
                if (_3039 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3032 = _2880;
                    _3033 = _2882;
                    _3034 = _2884;
                    _3035 = _2886;
                    _3036 = _2888;
                    _3037 = _2890;
                    _3038 = _3039;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2879 = _2880;
            _2881 = _2882;
            _2883 = _2884;
            _2885 = _2886;
            _2887 = _2888;
            _2889 = _2890;
        }
        uvec4 _2893 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2894 = _2893.z;
        uint _2896 = (_2894 >> 8u) & 15u;
        float _3000;
        float _3002;
        float _3004;
        float _3006;
        float _3008;
        float _3010;
        if (((4294967295u << _2896) & _2799) == 0u)
        {
            _3000 = _2879;
            _3002 = _2881;
            _3004 = _2883;
            _3006 = _2885;
            _3008 = _2887;
            _3010 = _2889;
        }
        else
        {
            float _3025 = inversesqrt(dot(vec3(_1857, _1858, _1859), vec3(_1857, _1858, _1859)));
            float _3026 = _3025 * _1857;
            float _3027 = _3025 * _1858;
            float _3028 = _3025 * _1859;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2896 < ((_2894 >> 12u) & 15u))
            {
                float _3001;
                float _3003;
                float _3005;
                float _3007;
                float _3009;
                float _3011;
                float _3160 = _2879;
                float _3161 = _2881;
                float _3162 = _2883;
                float _3163 = _2885;
                float _3164 = _2887;
                float _3165 = _2889;
                uint _3166 = _2896;
                uint _3175;
                bool _3176;
                for (;;)
                {
                    _3175 = texelFetch(g_lightClassification, int((((_2793 << 5u) + (_2779 << 9u)) + (_3166 << 2u)) >> 2u)).x;
                    _3176 = _3175 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3176)
                    {
                        frontier_phi_84_pred = _3165;
                        frontier_phi_84_pred_1 = _3164;
                        frontier_phi_84_pred_2 = _3163;
                        frontier_phi_84_pred_3 = _3162;
                        frontier_phi_84_pred_4 = _3161;
                        frontier_phi_84_pred_5 = _3160;
                    }
                    else
                    {
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3661;
                        float _3662;
                        float _3663;
                        float _3664;
                        float _3665;
                        float _3666;
                        float _3381 = _3160;
                        float _3382 = _3161;
                        float _3383 = _3162;
                        float _3384 = _3163;
                        float _3385 = _3164;
                        float _3386 = _3165;
                        uint _3387 = _3175;
                        uint _3388;
                        vec4 _3413;
                        float _3414;
                        vec4 _3429;
                        vec3 _3441;
                        vec4 _3456;
                        vec4 _3471;
                        float _3517;
                        bool _3518;
                        for (;;)
                        {
                            uint _3398 = ((_3166 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3387));
                            _3388 = (_3387 + 4294967295u) & _3387;
                            uint _3400 = _3398 * 40u;
                            _3413 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3400)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 3u)).x));
                            _3414 = _3413.w;
                            uint _3416 = (_3398 * 40u) + 4u;
                            _3429 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3416)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 3u)).x));
                            uint _3431 = (_3398 * 40u) + 8u;
                            _3441 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3431)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 2u)).x));
                            uint _3443 = (_3398 * 40u) + 16u;
                            _3456 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3443)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 3u)).x));
                            uint _3458 = (_3398 * 40u) + 20u;
                            _3471 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3458)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 3u)).x));
                            uint _3473 = (_3398 * 40u) + 24u;
                            vec4 _3486 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3473)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 3u)).x));
                            uint _3492 = (_3398 * 40u) + 28u;
                            vec4 _3505 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3492)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 3u)).x));
                            _3517 = fma(_1859, _3505.z, fma(_1858, _3505.y, _3505.x * _1857)) + _3505.w;
                            _3518 = !((fma(_1859, _3486.z, fma(_1858, _3486.y, _3486.x * _1857)) + _3486.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3518)
                            {
                                float _3545 = _3413.x - _1857;
                                float _3546 = _3413.y - _1858;
                                float _3547 = _3413.z - _1859;
                                float _3548 = dot(vec3(_3545, _3546, _3547), vec3(_3545, _3546, _3547));
                                float _3551 = inversesqrt(_3548);
                                float _3552 = _3551 * _3545;
                                float _3553 = _3551 * _3546;
                                float _3554 = _3551 * _3547;
                                float _3558 = 1.0 - (_3548 / (_3414 * _3414));
                                float _4760 = isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0));
                                float _3559 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                                float _3563 = sqrt(_3548) * _3429.w;
                                float _3565 = 1.39999997615814208984375 / (_3563 + 1.39999997615814208984375);
                                float _3566 = _3565 * _3565;
                                float _3569 = ((1.0 - _3566) * dot(vec3(_3552, _3553, _3554), vec3(_693, _696, _699))) + _3566;
                                float _3572 = _3563 * _3563;
                                float _3576 = (fma(_1859, _3456.z, fma(_1858, _3456.y, _3456.x * _1857)) + _3456.w) / _3517;
                                float _3577 = (fma(_1859, _3471.z, fma(_1858, _3471.y, _3471.x * _1857)) + _3471.w) / _3517;
                                float _3581 = 1.0 - dot(vec2(_3576, _3577), vec2(_3576, _3577));
                                float _4776 = isnan(0.0) ? _3581 : (isnan(_3581) ? 0.0 : max(_3581, 0.0));
                                float _3582 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
                                float _3583 = _3582 * (((isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0))) * _3559) / ((_3572 * 0.699999988079071044921875) + 1.0));
                                float _3595 = exp2(log2(1.0 / ((_3572 * 3.5) + 5.0)) * 0.25);
                                float _3596 = 1.0 - _768;
                                float _3603 = sqrt(1.0 - ((1.0 - (_3596 * _3596)) * (1.0 - (_3595 * _3595))));
                                float _3604 = _3603 * _3603;
                                float _3605 = _3604 * _3604;
                                float _3606 = _3552 - _3026;
                                float _3607 = _3553 - _3027;
                                float _3608 = _3554 - _3028;
                                float _3612 = inversesqrt(dot(vec3(_3606, _3607, _3608), vec3(_3606, _3607, _3608)));
                                float _3616 = dot(vec3(_693, _696, _699), vec3((-0.0) - _3026, (-0.0) - _3027, (-0.0) - _3028));
                                float _4787 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0));
                                float _3619 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
                                float _3620 = dot(vec3(_693, _696, _699), vec3(_3612 * _3606, _3612 * _3607, _3612 * _3608));
                                float _4798 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                                float _3623 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                                float _3627 = ((_3623 * _3623) * (_3605 + (-1.0))) + 1.0;
                                float _3628 = _3565 * _3604;
                                float _3629 = _3628 * _3628;
                                float _3635 = ((1.0 - _3629) * dot(vec3(_693, _696, _699), vec3(_3552, _3553, _3554))) + _3629;
                                float _4809 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                                float _3636 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
                                float _3637 = 1.0 - _3604;
                                float _3647 = (0.5 / (((_3636 * ((_3619 * _3637) + _3604)) + 9.9999999392252902907785028219223e-09) + (((_3636 * _3637) + _3604) * _3619))) * _3636;
                                float _4820 = isnan(0.0) ? _3647 : (isnan(_3647) ? 0.0 : max(_3647, 0.0));
                                float _3657 = (_3582 * _3559) * (((_3605 * 3.1415927410125732421875) * (isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0)))) / ((_3627 * _3627) * ((_3572 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3583 * _3429.z;
                                frontier_phi_90_pred_1 = _3583 * _3429.y;
                                frontier_phi_90_pred_2 = _3583 * _3429.x;
                                frontier_phi_90_pred_3 = _3657 * _3441.z;
                                frontier_phi_90_pred_4 = _3657 * _3441.y;
                                frontier_phi_90_pred_5 = _3657 * _3441.x;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3666 = frontier_phi_90_pred;
                            _3665 = frontier_phi_90_pred_1;
                            _3664 = frontier_phi_90_pred_2;
                            _3663 = frontier_phi_90_pred_3;
                            _3662 = frontier_phi_90_pred_4;
                            _3661 = frontier_phi_90_pred_5;
                            _3371 = _3664 + _3384;
                            _3372 = _3665 + _3385;
                            _3373 = _3666 + _3386;
                            _3368 = _3661 + _3381;
                            _3369 = _3662 + _3382;
                            _3370 = _3663 + _3383;
                            if (_3388 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3381 = _3368;
                                _3382 = _3369;
                                _3383 = _3370;
                                _3384 = _3371;
                                _3385 = _3372;
                                _3386 = _3373;
                                _3387 = _3388;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3373;
                        frontier_phi_84_pred_1 = _3372;
                        frontier_phi_84_pred_2 = _3371;
                        frontier_phi_84_pred_3 = _3370;
                        frontier_phi_84_pred_4 = _3369;
                        frontier_phi_84_pred_5 = _3368;
                    }
                    _3011 = frontier_phi_84_pred;
                    _3009 = frontier_phi_84_pred_1;
                    _3007 = frontier_phi_84_pred_2;
                    _3005 = frontier_phi_84_pred_3;
                    _3003 = frontier_phi_84_pred_4;
                    _3001 = frontier_phi_84_pred_5;
                    uint _3167 = _3166 + 1u;
                    if (_3167 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3160 = _3001;
                        _3161 = _3003;
                        _3162 = _3005;
                        _3163 = _3007;
                        _3164 = _3009;
                        _3165 = _3011;
                        _3166 = _3167;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3007;
                frontier_phi_65_66_ladder_1 = _3011;
                frontier_phi_65_66_ladder_2 = _3009;
                frontier_phi_65_66_ladder_3 = _3005;
                frontier_phi_65_66_ladder_4 = _3003;
                frontier_phi_65_66_ladder_5 = _3001;
            }
            else
            {
                frontier_phi_65_66_ladder = _2885;
                frontier_phi_65_66_ladder_1 = _2889;
                frontier_phi_65_66_ladder_2 = _2887;
                frontier_phi_65_66_ladder_3 = _2883;
                frontier_phi_65_66_ladder_4 = _2881;
                frontier_phi_65_66_ladder_5 = _2879;
            }
            _3000 = frontier_phi_65_66_ladder_5;
            _3002 = frontier_phi_65_66_ladder_4;
            _3004 = frontier_phi_65_66_ladder_3;
            _3006 = frontier_phi_65_66_ladder;
            _3008 = frontier_phi_65_66_ladder_2;
            _3010 = frontier_phi_65_66_ladder_1;
        }
        float _3015 = isnan(1.0) ? _752 : (isnan(_752) ? 1.0 : min(_752, 1.0));
        _2812 = (_3015 * _3006) + _2324;
        _2814 = (_3015 * _3008) + _2326;
        _2816 = (_3015 * _3010) + _2328;
        _2818 = ((_3000 * _736) * _3015) + _2662;
        _2820 = ((_3002 * _738) * _3015) + _2664;
        _2822 = ((_3004 * _739) * _3015) + _2666;
    }
    else
    {
        _2812 = _2324;
        _2814 = _2326;
        _2816 = _2328;
        _2818 = _2662;
        _2820 = _2664;
        _2822 = _2666;
    }
    float _4836 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _4847 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _4858 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _2839 = ((isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0))) * (_2812 + ((isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))) * _752))) + ((_2818 + ((isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0))) * _1587)) * cbPerFrame._m0[3u].x);
    float _2840 = ((isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0))) * (_2814 + ((isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))) * _752))) + ((_2820 + ((isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))) * _1587)) * cbPerFrame._m0[3u].x);
    float _2841 = ((isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0))) * (_2816 + ((isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))) * _752))) + ((_2822 + ((isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))) * _1587)) * cbPerFrame._m0[3u].x);
    uint _2842 = _267 + 6u;
    float _2850 = _672 / cbSceneParam._m0[86u].x;
    float _2851 = _673 / cbSceneParam._m0[86u].y;
    vec4 _2865 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2850, _2851, (log2((isnan(cbSceneParam._m0[77u].w) ? _596 : (isnan(_596) ? cbSceneParam._m0[77u].w : min(_596, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2867 = _2865.x;
    float _2868 = _2865.y;
    float _2869 = _2865.z;
    float _2870 = _2865.w;
    float _2942;
    float _2944;
    float _2946;
    float _2948;
    if (_596 > cbSceneParam._m0[78u].w)
    {
        float _2904 = isnan(_596) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _596 : min(cbSceneParam._m0[80u].w, _596));
        float _2905 = _2904 / _596;
        float _2916 = _2905 * _647;
        float _2917 = _648 * _2905;
        float _2918 = (-0.0) - _2917;
        float _2920 = _2905 * _649;
        float _2922 = (cbSceneParam._m0[77u].w * _2918) / _2904;
        float _2923 = _2922 + cbSceneParam._m0[79u].w;
        float _2924 = cbSceneParam._m0[79u].w - _2917;
        float _2930 = sqrt(((_2916 * _2916) + (_2917 * _2917)) + (_2920 * _2920));
        float _2933 = (1.0 - (cbSceneParam._m0[77u].w / _2904)) * _2930;
        float _2938 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2940 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3117;
        if (abs((_2918 - _2922) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3117 = ((((_2923 > 0.0) ? exp2(_2938 * _2923) : (2.0 - exp2(_2940 * _2923))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2933;
        }
        else
        {
            float _3061 = 1.0 / cbSceneParam._m0[80u].x;
            float _3062 = isnan(_2924) ? _2923 : (isnan(_2923) ? _2924 : max(_2923, _2924));
            float _3063 = isnan(_2924) ? _2923 : (isnan(_2923) ? _2924 : min(_2923, _2924));
            float _3072 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : min(_3062, 0.0));
            float _3073 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : min(_3063, 0.0));
            _3117 = ((abs(_2930 / _2918) * cbSceneParam._m0[80u].y) * ((((_3072 - _3073) * 2.0) - ((exp2(_2938 * (isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0)))) - exp2(_2938 * (isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0))))) * _3061)) - ((exp2(_2940 * _3072) - exp2(_2940 * _3073)) * _3061))) + (_2933 * cbSceneParam._m0[80u].z);
        }
        vec4 _3119 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2850, _2851, 1.0), 0.0);
        float _3128 = exp2((_3117 * (-1.44269502162933349609375)) * (1.0 - _3119.w));
        float _3129 = log2(_3128);
        float _3145 = log2(_2870);
        _2942 = (exp2(_3145 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3129 * cbSceneParam._m0[78u].x)) * _3119.x) / cbSceneParam._m0[78u].x)) + _2867;
        _2944 = (exp2(_3145 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3129 * cbSceneParam._m0[78u].y)) * _3119.y) / cbSceneParam._m0[78u].y)) + _2868;
        _2946 = (exp2(_3145 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3129 * cbSceneParam._m0[78u].z)) * _3119.z) / cbSceneParam._m0[78u].z)) + _2869;
        _2948 = _3128 * _2870;
    }
    else
    {
        _2942 = _2867;
        _2944 = _2868;
        _2946 = _2869;
        _2948 = _2870;
    }
    bool _3155;
    vec4 _2958;
    vec4 _2980;
    float _2982;
    float _2986;
    float _2987;
    float _2988;
    float _2989;
    bool _2999;
    for (;;)
    {
        _2958 = cbMatDynParam._m0[0u];
        float _2960 = roundEven(_2958.y);
        bool _2961 = _2960 == 3.0;
        float _2962 = log2(_2948);
        float _2969 = exp2(_2962 * cbSceneParam._m0[78u].x) * _2839;
        float _2970 = exp2(_2962 * cbSceneParam._m0[78u].y) * _2840;
        float _2971 = exp2(_2962 * cbSceneParam._m0[78u].z) * _2841;
        float _2978 = _660 + (-0.5);
        _2980 = cbMtdParam._m0[1u];
        _2982 = _2980.y * _2978;
        float _2985 = (_2960 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2986 = _2985 * (_2961 ? _2969 : (_2969 + (cbSceneParam._m0[72u].w * _2942)));
        _2987 = _2985 * (_2961 ? _2970 : (_2970 + (cbSceneParam._m0[72u].w * _2944)));
        _2988 = _2985 * (_2961 ? _2971 : (_2971 + (cbSceneParam._m0[72u].w * _2946)));
        _2989 = _2978 * 0.999000012874603271484375;
        _2999 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2999)
        {
            if ((cbInstanceData._m0[_267 + 7u].x + _2989) < 0.5)
            {
                _3155 = true;
                break;
            }
        }
        uint _3096 = _712 + uint(_2958.w);
        if ((cbInstanceData._m0[_3096].w < 1.0) && ((cbInstanceData._m0[_3096].w + _2989) < 0.5))
        {
            _3155 = true;
            break;
        }
        if ((_2982 + 1.0) < _2980.x)
        {
            _3155 = true;
            break;
        }
        _3155 = false;
        break;
    }
    float _3359;
    if (_3155)
    {
        discard_state = true;
        _3359 = 0.0;
    }
    else
    {
        _3359 = cbInstanceData._m0[_2842].w;
    }
    SV_Target.x = _2986;
    SV_Target.y = _2987;
    SV_Target.z = _2988;
    SV_Target.w = _3359;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2842].w;
    discard_exit();
}


