#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1053;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _230 = uint(roundEven(NORMAL.w)) * 13u;
    uint _236 = _230 + 1u;
    uint _240 = _230 + 2u;
    float _249 = sqrt(((cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x)) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x));
    float _250 = _249 * TEXCOORD.z;
    float _251 = _249 * TEXCOORD.w;
    vec4 _271 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _277 = _271.x * cbMtdParam._m0[11u].x;
    float _278 = _271.y * cbMtdParam._m0[11u].y;
    float _279 = _271.z * cbMtdParam._m0[11u].z;
    vec4 _298 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _250) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _251) + cbTextureTilingScale._m0[5u].w));
    vec4 _334 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _336 = _334.x;
    float _348 = dot(vec4(_336, _334.yzw), vec4(cbMtdParam._m0[28u].w, cbMtdParam._m0[29u].xy, 0.0));
    float _365 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_336 - _348) * cbMtdParam._m0[24u].y) + _348) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3407 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _366 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
    float _373 = (_366 * ((_298.x * cbMtdParam._m0[12u].x) - _277)) + _277;
    float _374 = (_366 * ((_298.y * cbMtdParam._m0[12u].y) - _278)) + _278;
    float _375 = (_366 * ((_298.z * cbMtdParam._m0[12u].z) - _279)) + _279;
    vec4 _388 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _250) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _251) + cbTextureTilingScale._m0[4u].w));
    vec4 _405 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _407 = _405.x;
    float _408 = _405.y;
    float _409 = _405.z;
    float _418 = ((_388.z - _409) * _366) + _409;
    float _421 = ((((_388.x - _407) * _366) + _407) * 2.0) + (-1.0);
    float _423 = ((((_388.y - _408) * _366) + _408) * 2.0) + (-1.0);
    float _424 = dot(vec2(_421, _423), vec2(_421, _423));
    float _3418 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _429 = sqrt(1.0 - (isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0))));
    vec4 _442 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _470 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _472 = _470.x;
    float _490 = ((texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _250) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _251) + cbTextureTilingScale._m0[9u].w)).x - _472) * _366) + _472;
    float _494 = ((texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _490) * cbMtdParam._m0[19u].z) + _490;
    float _499 = cbMtdParam._m0[22u].x + _442.w;
    float _502 = fma(_429, _217 * NORMAL.x, fma(_423, _224 * TANGENT.x, (_210 * _202) * _421));
    float _505 = fma(_429, _217 * NORMAL.y, fma(_423, _224 * TANGENT.y, (_210 * _203) * _421));
    float _508 = fma(_429, _217 * NORMAL.z, fma(_423, _224 * TANGENT.z, (_210 * _204) * _421));
    float _512 = inversesqrt(dot(vec3(_502, _505, _508), vec3(_502, _505, _508)));
    float _513 = _512 * _502;
    float _514 = _512 * _505;
    float _515 = _512 * _508;
    float _3429 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _516 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
    float _3440 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _3451 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _3462 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _3473 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _3484 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _521 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
    float _535 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _576 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _586 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _576);
    float _587 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _576);
    float _588 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _576);
    float _592 = inversesqrt(dot(vec3(_586, _587, _588), vec3(_586, _587, _588)));
    float _593 = _586 * _592;
    float _594 = _587 * _592;
    float _595 = _588 * _592;
    float _601 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _602 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _620 = fma(_515, cbSceneParam._m0[5u].z, fma(_514, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _513));
    float _623 = fma(_515, cbSceneParam._m0[6u].z, fma(_514, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _513));
    float _626 = fma(_515, cbSceneParam._m0[7u].z, fma(_514, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _513));
    uint _640 = (_230 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _646 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0)))) * cbInstanceData._m0[_640].x;
    float _647 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0)))) * cbInstanceData._m0[_640].y;
    float _648 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0)))) * cbInstanceData._m0[_640].z;
    float _3495 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _649 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
    float _3506 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _650 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
    float _3517 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _651 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
    float _652 = 1.0 - _521;
    float _653 = _649 * _652;
    float _654 = _650 * _652;
    float _655 = _651 * _652;
    float _660 = (_649 + (-0.039999999105930328369140625)) * _521;
    float _661 = (_650 + (-0.039999999105930328369140625)) * _521;
    float _662 = (_651 + (-0.039999999105930328369140625)) * _521;
    float _663 = _660 + 0.039999999105930328369140625;
    float _665 = _661 + 0.039999999105930328369140625;
    float _666 = _662 + 0.039999999105930328369140625;
    vec4 _675 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _601, cbSceneParam._m0[86u].y * _602));
    float _679 = ((isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0))) * TEXCOORD_5.w) * _675.x;
    float _680 = dot(vec3(_513, _514, _515), vec3(_593, _594, _595));
    float _683 = _680 * 2.0;
    float _687 = (_683 * _513) - _593;
    float _688 = (_683 * _514) - _594;
    float _689 = (_683 * _515) - _595;
    float _693 = abs(dot(vec3(_593, _594, _595), vec3(_513, _514, _515)));
    float _3528 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _695 = sqrt(_516);
    float _708 = exp2((_695 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_695 * 3.0));
    float _714 = (1.0 - _708) * ((_695 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _715 = _708 * _695;
    float _743 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _747 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _751 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1052;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _777 = fma(_751, cbModelParam._m0[26u].z, fma(_747, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _743));
        float _781 = fma(_751, cbModelParam._m0[27u].z, fma(_747, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _743));
        float _785 = fma(_751, cbModelParam._m0[28u].z, fma(_747, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _743));
        float _810 = _743 + _513;
        float _811 = _747 + _514;
        float _812 = _751 + _515;
        float _822 = fma(_812, cbModelParam._m0[26u].z, fma(_811, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _810)) - _777;
        float _823 = fma(_812, cbModelParam._m0[27u].z, fma(_811, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _810)) - _781;
        float _824 = fma(_812, cbModelParam._m0[28u].z, fma(_811, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _810)) - _785;
        float _828 = inversesqrt(dot(vec3(_822, _823, _824), vec3(_822, _823, _824)));
        float _841 = ((_828 * _822) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_777 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _842 = ((_828 * _823) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_781 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _843 = ((_828 * _824) / cbModelParam._m0[34u].z) + ((((((_785 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _846 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_841, _842, _843), 0.0);
        vec4 _853 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_841, _842, _843), 0.0);
        vec4 _860 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_841, _842, _843), 0.0);
        vec4 _867 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_841, _842, _843), 0.0);
        float _880 = exp2((_846.w + (-0.5)) * 20.0) * 2.0;
        float _881 = _880 * (_846.x + (-0.5));
        float _882 = _880 * (_846.y + (-0.5));
        float _883 = _880 * (_846.z + (-0.5));
        float _890 = exp2((_853.w + (-0.5)) * 20.0) * 2.0;
        float _891 = _890 * (_853.x + (-0.5));
        float _892 = _890 * (_853.y + (-0.5));
        float _893 = _890 * (_853.z + (-0.5));
        float _900 = exp2((_860.w + (-0.5)) * 20.0) * 2.0;
        float _901 = _900 * (_860.x + (-0.5));
        float _902 = _900 * (_860.y + (-0.5));
        float _903 = _900 * (_860.z + (-0.5));
        float _910 = exp2((_867.w + (-0.5)) * 20.0) * 2.0;
        float _911 = _910 * (_867.x + (-0.5));
        float _912 = _910 * (_867.y + (-0.5));
        float _913 = _910 * (_867.z + (-0.5));
        float _914 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _915 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _916 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _917 = _881 * 0.5;
        float _918 = _891 * 0.5;
        float _919 = _901 * 0.5;
        float _920 = dot(vec3(_917, _918, _919), vec3(_917, _918, _919));
        float _925 = (_920 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_920);
        float _934 = (dot(vec3(_513, _514, _515), vec3(_925 * _917, _925 * _918, _925 * _919)) + 1.0) * 0.5;
        float _3554 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _944 = sqrt(((_918 * _918) + (_917 * _917)) + (_919 * _919)) / (_914 + 9.9999997473787516355514526367188e-06);
        float _3565 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _946 = _945 * 2.0;
        float _950 = (1.0 - _945) / (_945 + 1.0);
        float _3576 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _951 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _960 = ((((1.0 - _951) * (_946 + 2.0)) * exp2(log2(isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0))) * (_946 + 1.0))) + _951) * _914;
        float _961 = _882 * 0.5;
        float _962 = _892 * 0.5;
        float _963 = _902 * 0.5;
        float _964 = dot(vec3(_961, _962, _963), vec3(_961, _962, _963));
        float _969 = (_964 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_964);
        float _977 = (dot(vec3(_513, _514, _515), vec3(_969 * _961, _969 * _962, _969 * _963)) + 1.0) * 0.5;
        float _3587 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _986 = sqrt(((_962 * _962) + (_961 * _961)) + (_963 * _963)) / (_915 + 9.9999997473787516355514526367188e-06);
        float _3598 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
        float _988 = _987 * 2.0;
        float _992 = (1.0 - _987) / (_987 + 1.0);
        float _3609 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _993 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _1002 = ((((1.0 - _993) * (_988 + 2.0)) * exp2(log2(isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))) * (_988 + 1.0))) + _993) * _915;
        float _1003 = _883 * 0.5;
        float _1004 = _893 * 0.5;
        float _1005 = _903 * 0.5;
        float _1006 = dot(vec3(_1003, _1004, _1005), vec3(_1003, _1004, _1005));
        float _1011 = (_1006 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1006);
        float _1019 = (dot(vec3(_513, _514, _515), vec3(_1011 * _1003, _1011 * _1004, _1011 * _1005)) + 1.0) * 0.5;
        float _3620 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1028 = sqrt(((_1004 * _1004) + (_1003 * _1003)) + (_1005 * _1005)) / (_916 + 9.9999997473787516355514526367188e-06);
        float _3631 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _1030 = _1029 * 2.0;
        float _1034 = (1.0 - _1029) / (_1029 + 1.0);
        float _3642 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _1044 = ((((1.0 - _1035) * (_1030 + 2.0)) * exp2(log2(isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0))) * (_1030 + 1.0))) + _1035) * _916;
        _1052 = _883;
        _1054 = _882;
        _1055 = _881;
        _1056 = _893;
        _1057 = _892;
        _1058 = _891;
        _1059 = _903;
        _1060 = _902;
        _1061 = _901;
        _1062 = _916;
        _1063 = _915;
        _1064 = _914;
        _1065 = cbModelParam._m0[36u].z * (isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0)));
        _1066 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0)));
        _1067 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0)));
    }
    else
    {
        _1052 = _1053;
        _1054 = _1053;
        _1055 = _1053;
        _1056 = _1053;
        _1057 = _1053;
        _1058 = _1053;
        _1059 = _1053;
        _1060 = _1053;
        _1061 = _1053;
        _1062 = _1053;
        _1063 = _1053;
        _1064 = _1053;
        _1065 = 0.0;
        _1066 = 0.0;
        _1067 = 0.0;
    }
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1092 = fma(_751, cbModelParam._m0[30u].z, fma(_747, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _743));
        float _1096 = fma(_751, cbModelParam._m0[31u].z, fma(_747, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _743));
        float _1100 = fma(_751, cbModelParam._m0[32u].z, fma(_747, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _743));
        float _1123 = _743 + _513;
        float _1124 = _747 + _514;
        float _1125 = _751 + _515;
        float _1135 = fma(_1125, cbModelParam._m0[30u].z, fma(_1124, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1123)) - _1092;
        float _1136 = fma(_1125, cbModelParam._m0[31u].z, fma(_1124, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1123)) - _1096;
        float _1137 = fma(_1125, cbModelParam._m0[32u].z, fma(_1124, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1123)) - _1100;
        float _1141 = inversesqrt(dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137)));
        float _1154 = ((_1141 * _1135) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1092 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1155 = ((_1141 * _1136) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1096 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1156 = ((_1141 * _1137) / cbModelParam._m0[35u].z) + ((((((_1100 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        float _1191 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1158.x + (-0.5));
        float _1193 = _1191 * (_1158.y + (-0.5));
        float _1194 = _1191 * (_1158.z + (-0.5));
        float _1201 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1165.x + (-0.5));
        float _1203 = _1201 * (_1165.y + (-0.5));
        float _1204 = _1201 * (_1165.z + (-0.5));
        float _1211 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1172.x + (-0.5));
        float _1213 = _1211 * (_1172.y + (-0.5));
        float _1214 = _1211 * (_1172.z + (-0.5));
        float _1221 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1179.x + (-0.5));
        float _1223 = _1221 * (_1179.y + (-0.5));
        float _1224 = _1221 * (_1179.z + (-0.5));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = _1192 * 0.5;
        float _1229 = _1202 * 0.5;
        float _1230 = _1212 * 0.5;
        float _1231 = dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230));
        float _1236 = (_1231 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1231);
        float _1244 = (dot(vec3(_513, _514, _515), vec3(_1236 * _1228, _1236 * _1229, _1236 * _1230)) + 1.0) * 0.5;
        float _3683 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1253 = sqrt(((_1229 * _1229) + (_1228 * _1228)) + (_1230 * _1230)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _3694 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1255 = _1254 * 2.0;
        float _1259 = (1.0 - _1254) / (_1254 + 1.0);
        float _3705 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _1269 = ((((1.0 - _1260) * (_1255 + 2.0)) * exp2(log2(isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * (_1255 + 1.0))) + _1260) * _1225;
        float _1270 = _1193 * 0.5;
        float _1271 = _1203 * 0.5;
        float _1272 = _1213 * 0.5;
        float _1273 = dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272));
        float _1278 = (_1273 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1273);
        float _1286 = (dot(vec3(_513, _514, _515), vec3(_1278 * _1270, _1278 * _1271, _1278 * _1272)) + 1.0) * 0.5;
        float _3716 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1295 = sqrt(((_1271 * _1271) + (_1270 * _1270)) + (_1272 * _1272)) / (_1226 + 9.9999997473787516355514526367188e-06);
        float _3727 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1297 = _1296 * 2.0;
        float _1301 = (1.0 - _1296) / (_1296 + 1.0);
        float _3738 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1311 = ((((1.0 - _1302) * (_1297 + 2.0)) * exp2(log2(isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0))) * (_1297 + 1.0))) + _1302) * _1226;
        float _1312 = _1194 * 0.5;
        float _1313 = _1204 * 0.5;
        float _1314 = _1214 * 0.5;
        float _1315 = dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314));
        float _1320 = (_1315 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1315);
        float _1328 = (dot(vec3(_513, _514, _515), vec3(_1320 * _1312, _1320 * _1313, _1320 * _1314)) + 1.0) * 0.5;
        float _3749 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1337 = sqrt(((_1313 * _1313) + (_1312 * _1312)) + (_1314 * _1314)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _3760 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1339 = _1338 * 2.0;
        float _1343 = (1.0 - _1338) / (_1338 + 1.0);
        float _3771 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1353 = ((((1.0 - _1344) * (_1339 + 2.0)) * exp2(log2(isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) * (_1339 + 1.0))) + _1344) * _1227;
        _1361 = _1194;
        _1362 = _1193;
        _1363 = _1192;
        _1364 = _1204;
        _1365 = _1203;
        _1366 = _1202;
        _1367 = _1214;
        _1368 = _1213;
        _1369 = _1212;
        _1370 = _1227;
        _1371 = _1226;
        _1372 = _1225;
        _1373 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)));
        _1374 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)));
        _1375 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)));
    }
    else
    {
        _1361 = _1053;
        _1362 = _1053;
        _1363 = _1053;
        _1364 = _1053;
        _1365 = _1053;
        _1366 = _1053;
        _1367 = _1053;
        _1368 = _1053;
        _1369 = _1053;
        _1370 = _1053;
        _1371 = _1053;
        _1372 = _1053;
        _1373 = 0.0;
        _1374 = 0.0;
        _1375 = 0.0;
    }
    float _1385 = (cbModelParam._m0[1u].x * (_1373 - _1065)) + _1065;
    float _1386 = (cbModelParam._m0[1u].x * (_1374 - _1066)) + _1066;
    float _1387 = (cbModelParam._m0[1u].x * (_1375 - _1067)) + _1067;
    float _1408 = fma(_1387, cbSceneParam._m0[89u].z, fma(_1386, cbSceneParam._m0[89u].y, _1385 * cbSceneParam._m0[89u].x));
    float _1411 = fma(_1387, cbSceneParam._m0[90u].z, fma(_1386, cbSceneParam._m0[90u].y, _1385 * cbSceneParam._m0[90u].x));
    float _1414 = fma(_1387, cbSceneParam._m0[91u].z, fma(_1386, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1385));
    float _1429 = _687 * 0.5;
    float _1430 = _688 * 0.5;
    float _1431 = _689 * 0.5;
    float _1432 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1363, _1366, _1369, _1372));
    float _1435 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1362, _1365, _1368, _1371));
    float _1438 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1361, _1364, _1367, _1370));
    float _1472;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1445 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1052, _1056, _1059, _1062));
        float _1449 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1054, _1057, _1060, _1063));
        float _1453 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1055, _1058, _1061, _1064));
        float _1460 = dot(vec4(cbModelParam._m0[39u]), vec4(_1429, _1430, _1431, 1.0));
        _1472 = dot(vec3(isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)), isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)), isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1460) ? 0.0 : (isnan(0.0) ? _1460 : max(0.0, _1460))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1472 = 1.0;
    }
    float _1483;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1474 = dot(vec4(cbModelParam._m0[40u]), vec4(_1429, _1430, _1431, 1.0));
        _1483 = dot(vec3(isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)), isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)), isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1474) ? 0.0 : (isnan(0.0) ? _1474 : max(0.0, _1474))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1483 = 1.0;
    }
    float _1487 = (_1483 * cbModelParam._m0[1u].x) + (_1472 * (1.0 - cbModelParam._m0[1u].x));
    float _1497 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _516);
    float _1498 = isnan(_1497) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1497 : min(cbModelParam._m0[25u].z, _1497));
    float _1580;
    float _1582;
    float _1584;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1547 = fma(_751, cbModelParam._m0[13u].z, fma(_747, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _743)) + cbModelParam._m0[13u].w;
        float _1551 = fma(_751, cbModelParam._m0[14u].z, fma(_747, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _743)) + cbModelParam._m0[14u].w;
        float _1555 = fma(_751, cbModelParam._m0[15u].z, fma(_747, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _743)) + cbModelParam._m0[15u].w;
        float _1558 = fma(_689, cbModelParam._m0[13u].z, fma(_688, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _687));
        float _1561 = fma(_689, cbModelParam._m0[14u].z, fma(_688, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _687));
        float _1564 = fma(_689, cbModelParam._m0[15u].z, fma(_688, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _687));
        float _1592;
        if (_1558 > 0.0)
        {
            _1592 = abs((1.0 - _1547) / _1558);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1558 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1547 + 1.0) / _1558);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1592 = frontier_phi_14_12_ladder;
        }
        float _1817;
        if (_1561 > 0.0)
        {
            _1817 = abs((1.0 - _1551) / _1561);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1561 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1551 + 1.0) / _1561);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1817 = frontier_phi_23_19_ladder;
        }
        float _2074;
        if (_1564 > 0.0)
        {
            _2074 = abs((1.0 - _1555) / _1564);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1564 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1555 + 1.0) / _1564);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2074 = frontier_phi_35_30_ladder;
        }
        float _2076 = isnan(_1817) ? _1592 : (isnan(_1592) ? _1817 : min(_1592, _1817));
        float _2077 = isnan(_2074) ? _2076 : (isnan(_2076) ? _2074 : min(_2076, _2074));
        float _2081 = (_2077 * _1558) + _1547;
        float _2082 = (_2077 * _1561) + _1551;
        float _2083 = (_2077 * _1564) + _1555;
        float _2084 = _2077 * 9.9999997473787516355514526367188e-05;
        float _2086 = (-1.0) - _2084;
        float _2088 = _2084 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2083 > _2088) || ((_2083 < _2086) || ((_2082 > _2088) || ((_2082 < _2086) || ((_2081 < _2086) || (_2081 > _2088))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2211 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2083, cbModelParam._m0[9u].z, fma(_2082, cbModelParam._m0[9u].y, _2081 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2083, cbModelParam._m0[10u].z, fma(_2082, cbModelParam._m0[10u].y, _2081 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2083, cbModelParam._m0[11u].z, fma(_2082, cbModelParam._m0[11u].y, _2081 * cbModelParam._m0[11u].x))), _1498);
            frontier_phi_13_35_ladder = _2211.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2211.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2211.x * cbModelParam._m0[1u].y;
        }
        _1580 = frontier_phi_13_35_ladder_2;
        _1582 = frontier_phi_13_35_ladder_1;
        _1584 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1568 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_687, _688, _689), _1498);
        _1580 = _1568.x * cbModelParam._m0[1u].y;
        _1582 = _1568.y * cbModelParam._m0[1u].y;
        _1584 = _1568.z * cbModelParam._m0[1u].y;
    }
    float _1588 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _516);
    float _1589 = isnan(_1588) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1588 : min(cbModelParam._m0[25u].w, _1588));
    float _1680;
    float _1682;
    float _1684;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1644 = fma(_751, cbModelParam._m0[21u].z, fma(_747, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _743)) + cbModelParam._m0[21u].w;
        float _1648 = fma(_751, cbModelParam._m0[22u].z, fma(_747, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _743)) + cbModelParam._m0[22u].w;
        float _1652 = fma(_751, cbModelParam._m0[23u].z, fma(_747, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _743)) + cbModelParam._m0[23u].w;
        float _1655 = fma(_689, cbModelParam._m0[21u].z, fma(_688, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _687));
        float _1658 = fma(_689, cbModelParam._m0[22u].z, fma(_688, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _687));
        float _1661 = fma(_689, cbModelParam._m0[23u].z, fma(_688, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _687));
        float _1822;
        if (_1655 > 0.0)
        {
            _1822 = abs((1.0 - _1644) / _1655);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1644 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1822 = frontier_phi_25_21_ladder;
        }
        float _2101;
        if (_1658 > 0.0)
        {
            _2101 = abs((1.0 - _1648) / _1658);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1658 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1648 + 1.0) / _1658);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2101 = frontier_phi_37_32_ladder;
        }
        float _2314;
        if (_1661 > 0.0)
        {
            _2314 = abs((1.0 - _1652) / _1661);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1661 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1652 + 1.0) / _1661);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2314 = frontier_phi_46_43_ladder;
        }
        float _2316 = isnan(_2101) ? _1822 : (isnan(_1822) ? _2101 : min(_1822, _2101));
        float _2317 = isnan(_2314) ? _2316 : (isnan(_2316) ? _2314 : min(_2316, _2314));
        float _2321 = (_2317 * _1655) + _1644;
        float _2322 = (_2317 * _1658) + _1648;
        float _2323 = (_2317 * _1661) + _1652;
        float _2324 = _2317 * 9.9999997473787516355514526367188e-05;
        float _2325 = (-1.0) - _2324;
        float _2327 = _2324 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2323 > _2327) || ((_2323 < _2325) || ((_2322 > _2327) || ((_2322 < _2325) || ((_2321 < _2325) || (_2321 > _2327))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2522 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2323, cbModelParam._m0[17u].z, fma(_2322, cbModelParam._m0[17u].y, _2321 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2323, cbModelParam._m0[18u].z, fma(_2322, cbModelParam._m0[18u].y, _2321 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2323, cbModelParam._m0[19u].z, fma(_2322, cbModelParam._m0[19u].y, _2321 * cbModelParam._m0[19u].x))), _1589);
            frontier_phi_22_46_ladder = _2522.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2522.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2522.x * cbModelParam._m0[1u].z;
        }
        _1680 = frontier_phi_22_46_ladder_2;
        _1682 = frontier_phi_22_46_ladder_1;
        _1684 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1664 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_687, _688, _689), _1589);
        _1680 = _1664.x * cbModelParam._m0[1u].z;
        _1682 = _1664.y * cbModelParam._m0[1u].z;
        _1684 = _1664.z * cbModelParam._m0[1u].z;
    }
    float _1697 = (((_714 * _663) + _715) * _679) * ((cbModelParam._m0[1u].w * (_1680 - _1580)) + _1580);
    float _1699 = (((_714 * _665) + _715) * _679) * ((cbModelParam._m0[1u].w * (_1682 - _1582)) + _1582);
    float _1701 = (((_714 * _666) + _715) * _679) * ((cbModelParam._m0[1u].w * (_1684 - _1584)) + _1584);
    float _1704 = fma(_1701, cbSceneParam._m0[89u].z, fma(_1699, cbSceneParam._m0[89u].y, _1697 * cbSceneParam._m0[89u].x));
    float _1707 = fma(_1701, cbSceneParam._m0[90u].z, fma(_1699, cbSceneParam._m0[90u].y, _1697 * cbSceneParam._m0[90u].x));
    float _1710 = fma(_1701, cbSceneParam._m0[91u].z, fma(_1699, cbSceneParam._m0[91u].y, _1697 * cbSceneParam._m0[91u].x));
    vec4 _1718 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_601, _602));
    float _1720 = _1718.w;
    float _1732 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1720);
    float _1733 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1720);
    float _1734 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1720);
    uvec4 _1738 = floatBitsToUint(cbInstanceData._m0[_230 + 5u]);
    uint _1740 = _1738.x * 14u;
    uint _1741 = _1740 + 13u;
    float _1748 = _679 + (-1.0);
    float _1753 = (cbLight._m0[_1741].x * _1748) + 1.0;
    float _1754 = (cbLight._m0[_1741].y * _1748) + 1.0;
    float _1755 = (cbLight._m0[_1741].z * _1748) + 1.0;
    float _1756 = (cbLight._m0[_1741].w * _1748) + 1.0;
    uint _1757 = _1740 + 5u;
    float _1763 = isnan(1.0) ? _1754 : (isnan(_1754) ? 1.0 : min(_1754, 1.0));
    uint _1767 = _1740 + 4u;
    float _1776 = isnan(1.0) ? _1753 : (isnan(_1753) ? 1.0 : min(_1753, 1.0));
    uint _1780 = _1740 | 1u;
    float _1791 = dot(vec3(cbLight._m0[_1740].xyz), vec3(_513, _514, _515));
    float _1794 = dot(vec3(cbLight._m0[_1780].xyz), vec3(_513, _514, _515));
    float _3907 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _3918 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _1799 = (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * 0.3183098733425140380859375;
    float _1801 = (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * 0.3183098733425140380859375;
    float _1808 = ((cbLight._m0[_1757].x * _1763) * _1801) + (((cbLight._m0[_1767].x * _1732) * _1776) * _1799);
    float _1809 = ((_1763 * cbLight._m0[_1757].y) * _1801) + (((cbLight._m0[_1767].y * _1733) * _1776) * _1799);
    float _1810 = ((_1763 * cbLight._m0[_1757].z) * _1801) + (((cbLight._m0[_1767].z * _1734) * _1776) * _1799);
    uvec4 _1814 = floatBitsToUint(cbLight._m0[_1740 + 12u]);
    bool _1816 = _1814.x == 0u;
    float _1827;
    float _1829;
    float _1831;
    if (_1816)
    {
        _1827 = _1808;
        _1829 = _1809;
        _1831 = _1810;
    }
    else
    {
        uint _1835 = _1740 + 6u;
        float _1851 = (dot(vec3(cbLight._m0[_1740 + 2u].xyz), vec3(_513, _514, _515)) * 0.5) + 0.5;
        float _1852 = _1851 * _1851;
        float _3929 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
        float _1853 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1854 = isnan(1.0) ? _1755 : (isnan(_1755) ? 1.0 : min(_1755, 1.0));
        _1827 = (((cbLight._m0[_1835].x * 0.3183098733425140380859375) * _1853) * _1854) + _1808;
        _1829 = (((cbLight._m0[_1835].y * 0.3183098733425140380859375) * _1853) * _1854) + _1809;
        _1831 = (((cbLight._m0[_1835].z * 0.3183098733425140380859375) * _1853) * _1854) + _1810;
    }
    bool _1834 = _1814.y == 0u;
    float _1872;
    float _1874;
    float _1876;
    if (_1834)
    {
        _1872 = _1827;
        _1874 = _1829;
        _1876 = _1831;
    }
    else
    {
        uint _2045 = _1740 + 7u;
        float _2061 = (dot(vec3(cbLight._m0[_1740 + 3u].xyz), vec3(_513, _514, _515)) * 0.5) + 0.5;
        float _2062 = _2061 * _2061;
        float _3945 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
        float _2063 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _2064 = isnan(1.0) ? _1756 : (isnan(_1756) ? 1.0 : min(_1756, 1.0));
        _1872 = (((cbLight._m0[_2045].x * 0.3183098733425140380859375) * _2063) * _2064) + _1827;
        _1874 = (((cbLight._m0[_2045].y * 0.3183098733425140380859375) * _2063) * _2064) + _1829;
        _1876 = (((cbLight._m0[_2045].z * 0.3183098733425140380859375) * _2063) * _2064) + _1831;
    }
    uint _1879 = _1740 + 8u;
    float _1892 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1740].w)) * _516) * 0.949999988079071044921875);
    float _1893 = _1892 * _1892;
    float _1894 = cbLight._m0[_1740].x + _593;
    float _1895 = cbLight._m0[_1740].y + _594;
    float _1896 = cbLight._m0[_1740].z + _595;
    float _1900 = inversesqrt(dot(vec3(_1894, _1895, _1896), vec3(_1894, _1895, _1896)));
    float _1901 = _1900 * _1894;
    float _1902 = _1900 * _1895;
    float _1903 = _1900 * _1896;
    float _1904 = dot(vec3(_513, _514, _515), vec3(cbLight._m0[_1740].xyz));
    float _3961 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
    float _1907 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _3972 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _1908 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _1909 = dot(vec3(_513, _514, _515), vec3(_1901, _1902, _1903));
    float _3983 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1912 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _1913 = dot(vec3(cbLight._m0[_1740].xyz), vec3(_1901, _1902, _1903));
    float _3994 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _1917 = _1893 * _1893;
    float _1921 = ((_1912 * _1912) * (_1917 + (-1.0))) + 1.0;
    float _1929 = exp2(log2(1.0 - (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0)))) * 5.0);
    float _1930 = 0.959999978542327880859375 - _660;
    float _1932 = 0.959999978542327880859375 - _661;
    float _1933 = 0.959999978542327880859375 - _662;
    float _1940 = 1.0 - _1893;
    float _1951 = (0.5 / (((_1908 * ((_1907 * _1940) + _1893)) + 9.9999999392252902907785028219223e-09) + (((_1908 * _1940) + _1893) * _1907))) * _1907;
    float _4005 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _1953 = (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * (_1917 / ((_1921 * _1921) * 3.141590118408203125));
    uint _1967 = _1740 + 9u;
    float _1978 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1780].w)) * _516) * 0.949999988079071044921875);
    float _1979 = _1978 * _1978;
    float _1980 = cbLight._m0[_1780].x + _593;
    float _1981 = cbLight._m0[_1780].y + _594;
    float _1982 = cbLight._m0[_1780].z + _595;
    float _1986 = inversesqrt(dot(vec3(_1980, _1981, _1982), vec3(_1980, _1981, _1982)));
    float _1987 = _1986 * _1980;
    float _1988 = _1986 * _1981;
    float _1989 = _1986 * _1982;
    float _1990 = dot(vec3(_513, _514, _515), vec3(cbLight._m0[_1780].xyz));
    float _4016 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _1993 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    float _1994 = dot(vec3(_513, _514, _515), vec3(_1987, _1988, _1989));
    float _4027 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _1997 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _1998 = dot(vec3(cbLight._m0[_1780].xyz), vec3(_1987, _1988, _1989));
    float _4038 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2002 = _1979 * _1979;
    float _2006 = ((_1997 * _1997) * (_2002 + (-1.0))) + 1.0;
    float _2013 = exp2(log2(1.0 - (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)))) * 5.0);
    float _2020 = 1.0 - _1979;
    float _2030 = (0.5 / (((_1908 * ((_1993 * _2020) + _1979)) + 9.9999999392252902907785028219223e-09) + (((_1908 * _2020) + _1979) * _1993))) * _1993;
    float _4049 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2032 = (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_2002 / ((_2006 * _2006) * 3.141590118408203125));
    float _2042 = (((((_2013 * _1930) + _663) * cbLight._m0[_1967].x) * _2032) * _1763) + ((((cbLight._m0[_1879].x * _1732) * ((_1929 * _1930) + _663)) * _1953) * _1776);
    float _2043 = (((((_2013 * _1932) + _665) * cbLight._m0[_1967].y) * _2032) * _1763) + ((((cbLight._m0[_1879].y * _1733) * ((_1929 * _1932) + _665)) * _1953) * _1776);
    float _2044 = (((((_2013 * _1933) + _666) * cbLight._m0[_1967].z) * _2032) * _1763) + ((((cbLight._m0[_1879].z * _1734) * ((_1929 * _1933) + _666)) * _1953) * _1776);
    float _2106;
    float _2108;
    float _2110;
    if (_1816)
    {
        _2106 = _2042;
        _2108 = _2043;
        _2110 = _2044;
    }
    else
    {
        uint _2112 = _1740 + 2u;
        uint _2116 = _1740 + 10u;
        float _2130 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2112].w)) * _516) * 0.949999988079071044921875);
        float _2131 = _2130 * _2130;
        float _2132 = cbLight._m0[_2112].x + _593;
        float _2133 = cbLight._m0[_2112].y + _594;
        float _2134 = cbLight._m0[_2112].z + _595;
        float _2138 = inversesqrt(dot(vec3(_2132, _2133, _2134), vec3(_2132, _2133, _2134)));
        float _2139 = _2138 * _2132;
        float _2140 = _2138 * _2133;
        float _2141 = _2138 * _2134;
        float _2142 = dot(vec3(_513, _514, _515), vec3(cbLight._m0[_2112].xyz));
        float _4060 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2145 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _2146 = dot(vec3(_513, _514, _515), vec3(_2139, _2140, _2141));
        float _4071 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2149 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _2150 = dot(vec3(cbLight._m0[_2112].xyz), vec3(_2139, _2140, _2141));
        float _4082 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2154 = _2131 * _2131;
        float _2158 = ((_2149 * _2149) * (_2154 + (-1.0))) + 1.0;
        float _2165 = exp2(log2(1.0 - (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0)))) * 5.0);
        float _2172 = 1.0 - _2131;
        float _2182 = (0.5 / (((_1908 * ((_2145 * _2172) + _2131)) + 9.9999999392252902907785028219223e-09) + (((_1908 * _2172) + _2131) * _2145))) * _2145;
        float _4093 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2184 = (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * (_2154 / ((_2158 * _2158) * 3.141590118408203125));
        float _2185 = isnan(1.0) ? _1755 : (isnan(_1755) ? 1.0 : min(_1755, 1.0));
        _2106 = (((((_2165 * _1930) + _663) * cbLight._m0[_2116].x) * _2184) * _2185) + _2042;
        _2108 = (((((_2165 * _1932) + _665) * cbLight._m0[_2116].y) * _2184) * _2185) + _2043;
        _2110 = (((((_2165 * _1933) + _666) * cbLight._m0[_2116].z) * _2184) * _2185) + _2044;
    }
    float _2220;
    float _2222;
    float _2224;
    if (_1834)
    {
        _2220 = _2106;
        _2222 = _2108;
        _2224 = _2110;
    }
    else
    {
        uint _2231 = _1740 + 3u;
        uint _2235 = _1740 + 11u;
        float _2249 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2231].w)) * _516) * 0.949999988079071044921875);
        float _2250 = _2249 * _2249;
        float _2251 = cbLight._m0[_2231].x + _593;
        float _2252 = cbLight._m0[_2231].y + _594;
        float _2253 = cbLight._m0[_2231].z + _595;
        float _2257 = inversesqrt(dot(vec3(_2251, _2252, _2253), vec3(_2251, _2252, _2253)));
        float _2258 = _2257 * _2251;
        float _2259 = _2257 * _2252;
        float _2260 = _2257 * _2253;
        float _2261 = dot(vec3(_513, _514, _515), vec3(cbLight._m0[_2231].xyz));
        float _4109 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2264 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _2265 = dot(vec3(_513, _514, _515), vec3(_2258, _2259, _2260));
        float _4120 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2268 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _2269 = dot(vec3(cbLight._m0[_2231].xyz), vec3(_2258, _2259, _2260));
        float _4131 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        float _2273 = _2250 * _2250;
        float _2277 = ((_2268 * _2268) * (_2273 + (-1.0))) + 1.0;
        float _2284 = exp2(log2(1.0 - (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0)))) * 5.0);
        float _2291 = 1.0 - _2250;
        float _2301 = (0.5 / (((_1908 * ((_2264 * _2291) + _2250)) + 9.9999999392252902907785028219223e-09) + (((_1908 * _2291) + _2250) * _2264))) * _2264;
        float _4142 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2303 = (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_2273 / ((_2277 * _2277) * 3.141590118408203125));
        float _2304 = isnan(1.0) ? _1756 : (isnan(_1756) ? 1.0 : min(_1756, 1.0));
        _2220 = (((((_2284 * _1930) + _663) * cbLight._m0[_2235].x) * _2303) * _2304) + _2106;
        _2222 = (((((_2284 * _1932) + _665) * cbLight._m0[_2235].y) * _2303) * _2304) + _2108;
        _2224 = (((((_2284 * _1933) + _666) * cbLight._m0[_2235].z) * _2303) * _2304) + _2110;
    }
    float _2439;
    float _2441;
    float _2443;
    float _2445;
    float _2447;
    float _2449;
    if (_1738.y == 0u)
    {
        float _2379 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2380 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2379;
        float _2381 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2379;
        float _2382 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2379;
        uvec4 _2394 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2395 = _2394.x;
        uint _2406 = uint((float(_2394.y) * floor(float(uint(cbSceneParam._m0[85u].y * _602) / _2395))) + floor(float(uint(cbSceneParam._m0[85u].x * _601) / _2395)));
        float _2416 = (log2(_2382 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2417 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        uint _2420 = uint(isnan(14.0) ? _2417 : (isnan(_2417) ? 14.0 : min(_2417, 14.0)));
        uvec4 _2425 = texelFetch(g_lightClusterGridBuffer, int(((_2420 << 2u) + (_2406 << 6u)) >> 2u));
        uint _2426 = _2425.x;
        uint _2427 = _2394.z;
        float _2527;
        float _2529;
        float _2531;
        float _2533;
        float _2535;
        float _2537;
        if (((((1u << ((_2427 >> 4u) & 15u)) + 4294967295u) & _2426) == 0u) || ((_2427 & 240u) == 0u))
        {
            _2527 = 0.0;
            _2529 = 0.0;
            _2531 = 0.0;
            _2533 = 0.0;
            _2535 = 0.0;
            _2537 = 0.0;
        }
        else
        {
            float _2528;
            float _2530;
            float _2532;
            float _2534;
            float _2536;
            float _2538;
            float _2672 = 0.0;
            float _2673 = 0.0;
            float _2674 = 0.0;
            float _2675 = 0.0;
            float _2676 = 0.0;
            float _2677 = 0.0;
            uint _2678 = 0u;
            uint _2687;
            bool _2688;
            for (;;)
            {
                _2687 = texelFetch(g_lightClassification, int((((_2420 << 5u) + (_2406 << 9u)) + (_2678 << 2u)) >> 2u)).x;
                _2688 = _2687 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2688)
                {
                    frontier_phi_61_pred = _2672;
                    frontier_phi_61_pred_1 = _2677;
                    frontier_phi_61_pred_2 = _2676;
                    frontier_phi_61_pred_3 = _2675;
                    frontier_phi_61_pred_4 = _2674;
                    frontier_phi_61_pred_5 = _2673;
                }
                else
                {
                    float _2796;
                    float _2797;
                    float _2798;
                    float _2799;
                    float _2800;
                    float _2801;
                    uint _2802;
                    _2796 = _2672;
                    _2797 = _2673;
                    _2798 = _2674;
                    _2799 = _2675;
                    _2800 = _2676;
                    _2801 = _2677;
                    _2802 = _2687;
                    float _2728;
                    float _2729;
                    float _2730;
                    float _2731;
                    float _2732;
                    float _2733;
                    for (;;)
                    {
                        uint _2806 = uint(findLSB(_2802)) + (_2678 << 5u);
                        uint _2803 = (_2802 + 4294967295u) & _2802;
                        uint _2808 = _2806 * 48u;
                        vec4 _2822 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2808)).x, texelFetch(g_PointLightRenderingBuffer, int(_2808 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2808 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2808 + 3u)).x));
                        uint _2828 = (_2806 * 48u) + 4u;
                        vec4 _2841 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2828)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 3u)).x));
                        uint _2847 = (_2806 * 48u) + 8u;
                        vec3 _2858 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2847)).x, texelFetch(g_PointLightRenderingBuffer, int(_2847 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2847 + 2u)).x));
                        float _2862 = _2822.x - _2380;
                        float _2863 = _2822.y - _2381;
                        float _2864 = _2822.z - _2382;
                        float _2865 = dot(vec3(_2862, _2863, _2864), vec3(_2862, _2863, _2864));
                        float _2868 = inversesqrt(_2865);
                        float _2869 = _2868 * _2862;
                        float _2870 = _2868 * _2863;
                        float _2871 = _2868 * _2864;
                        float _2872 = dot(vec3(_620, _623, _626), vec3(_2869, _2870, _2871));
                        float _2877 = 1.0 - (_2865 * _2822.w);
                        float _4168 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
                        float _2878 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
                        float _2879 = sqrt(_2865) * _2841.w;
                        float _2882 = 1.39999997615814208984375 / (_2879 + 1.39999997615814208984375);
                        float _2883 = _2882 * _2882;
                        float _2886 = ((1.0 - _2883) * _2872) + _2883;
                        float _2889 = _2879 * _2879;
                        float _2893 = ((isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0))) * _2878) / ((_2889 * 0.699999988079071044921875) + 1.0);
                        float _2897 = (-0.0) - _2380;
                        float _2898 = (-0.0) - _2381;
                        float _2899 = (-0.0) - _2382;
                        float _2903 = inversesqrt(dot(vec3(_2897, _2898, _2899), vec3(_2897, _2898, _2899)));
                        float _2904 = _2903 * _2897;
                        float _2905 = _2903 * _2898;
                        float _2906 = _2903 * _2899;
                        float _2914 = exp2(log2(1.0 / ((_2889 * 3.5) + 5.0)) * 0.25);
                        float _2915 = 1.0 - _695;
                        float _2922 = sqrt(1.0 - ((1.0 - (_2915 * _2915)) * (1.0 - (_2914 * _2914))));
                        float _2923 = _2922 * _2922;
                        float _2924 = _2923 * _2923;
                        float _2925 = _2904 + _2869;
                        float _2926 = _2905 + _2870;
                        float _2927 = _2906 + _2871;
                        float _2931 = inversesqrt(dot(vec3(_2925, _2926, _2927), vec3(_2925, _2926, _2927)));
                        float _2935 = dot(vec3(_620, _623, _626), vec3(_2904, _2905, _2906));
                        float _4184 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
                        float _2938 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
                        float _2939 = dot(vec3(_620, _623, _626), vec3(_2931 * _2925, _2931 * _2926, _2931 * _2927));
                        float _4195 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
                        float _2942 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
                        float _2946 = ((_2942 * _2942) * (_2924 + (-1.0))) + 1.0;
                        float _2947 = _2882 * _2923;
                        float _2948 = _2947 * _2947;
                        float _2951 = ((1.0 - _2948) * _2872) + _2948;
                        float _4206 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
                        float _2952 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
                        float _2953 = 1.0 - _2923;
                        float _2963 = (0.5 / (((_2952 * ((_2938 * _2953) + _2923)) + 9.9999999392252902907785028219223e-09) + (((_2952 * _2953) + _2923) * _2938))) * _2952;
                        float _4217 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
                        float _2974 = (((_2924 * 3.1415927410125732421875) * (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0)))) / ((_2946 * _2946) * ((_2889 * 2.1991131305694580078125) + 3.141590118408203125))) * _2878;
                        _2731 = (_2893 * _2841.x) + _2799;
                        _2732 = (_2893 * _2841.y) + _2800;
                        _2733 = (_2893 * _2841.z) + _2801;
                        _2728 = (_2974 * _2858.x) + _2796;
                        _2729 = (_2974 * _2858.y) + _2797;
                        _2730 = (_2974 * _2858.z) + _2798;
                        if (_2803 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2796 = _2728;
                            _2797 = _2729;
                            _2798 = _2730;
                            _2799 = _2731;
                            _2800 = _2732;
                            _2801 = _2733;
                            _2802 = _2803;
                        }
                    }
                    frontier_phi_61_pred = _2728;
                    frontier_phi_61_pred_1 = _2733;
                    frontier_phi_61_pred_2 = _2732;
                    frontier_phi_61_pred_3 = _2731;
                    frontier_phi_61_pred_4 = _2730;
                    frontier_phi_61_pred_5 = _2729;
                }
                _2528 = frontier_phi_61_pred;
                _2538 = frontier_phi_61_pred_1;
                _2536 = frontier_phi_61_pred_2;
                _2534 = frontier_phi_61_pred_3;
                _2532 = frontier_phi_61_pred_4;
                _2530 = frontier_phi_61_pred_5;
                uint _2679 = _2678 + 1u;
                if (_2679 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2672 = _2528;
                    _2673 = _2530;
                    _2674 = _2532;
                    _2675 = _2534;
                    _2676 = _2536;
                    _2677 = _2538;
                    _2678 = _2679;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2527 = _2528;
            _2529 = _2530;
            _2531 = _2532;
            _2533 = _2534;
            _2535 = _2536;
            _2537 = _2538;
        }
        uvec4 _2541 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2542 = _2541.z;
        uint _2544 = (_2542 >> 8u) & 15u;
        float _2640;
        float _2642;
        float _2644;
        float _2646;
        float _2648;
        float _2650;
        if (((4294967295u << _2544) & _2426) == 0u)
        {
            _2640 = _2527;
            _2642 = _2529;
            _2644 = _2531;
            _2646 = _2533;
            _2648 = _2535;
            _2650 = _2537;
        }
        else
        {
            float _2665 = inversesqrt(dot(vec3(_2380, _2381, _2382), vec3(_2380, _2381, _2382)));
            float _2666 = _2665 * _2380;
            float _2667 = _2665 * _2381;
            float _2668 = _2665 * _2382;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2544 < ((_2542 >> 12u) & 15u))
            {
                float _2641;
                float _2643;
                float _2645;
                float _2647;
                float _2649;
                float _2651;
                float _2779 = _2527;
                float _2780 = _2529;
                float _2781 = _2531;
                float _2782 = _2533;
                float _2783 = _2535;
                float _2784 = _2537;
                uint _2785 = _2544;
                uint _2794;
                bool _2795;
                for (;;)
                {
                    _2794 = texelFetch(g_lightClassification, int((((_2420 << 5u) + (_2406 << 9u)) + (_2785 << 2u)) >> 2u)).x;
                    _2795 = _2794 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2795)
                    {
                        frontier_phi_67_pred = _2782;
                        frontier_phi_67_pred_1 = _2783;
                        frontier_phi_67_pred_2 = _2784;
                        frontier_phi_67_pred_3 = _2781;
                        frontier_phi_67_pred_4 = _2780;
                        frontier_phi_67_pred_5 = _2779;
                    }
                    else
                    {
                        float _2979;
                        float _2980;
                        float _2981;
                        float _2982;
                        float _2983;
                        float _2984;
                        float _3273;
                        float _3274;
                        float _3275;
                        float _3276;
                        float _3277;
                        float _3278;
                        float _2992 = _2779;
                        float _2993 = _2780;
                        float _2994 = _2781;
                        float _2995 = _2782;
                        float _2996 = _2783;
                        float _2997 = _2784;
                        uint _2998 = _2794;
                        uint _2999;
                        vec4 _3024;
                        float _3025;
                        vec4 _3040;
                        vec3 _3052;
                        vec4 _3067;
                        vec4 _3083;
                        float _3129;
                        bool _3130;
                        for (;;)
                        {
                            uint _3009 = ((_2785 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2998));
                            _2999 = (_2998 + 4294967295u) & _2998;
                            uint _3011 = _3009 * 40u;
                            _3024 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3011)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 3u)).x));
                            _3025 = _3024.w;
                            uint _3027 = (_3009 * 40u) + 4u;
                            _3040 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3027)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 3u)).x));
                            uint _3042 = (_3009 * 40u) + 8u;
                            _3052 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3042)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 2u)).x));
                            uint _3054 = (_3009 * 40u) + 16u;
                            _3067 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3054)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 3u)).x));
                            uint _3070 = (_3009 * 40u) + 20u;
                            _3083 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3070)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 3u)).x));
                            uint _3085 = (_3009 * 40u) + 24u;
                            vec4 _3098 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3085)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 3u)).x));
                            uint _3104 = (_3009 * 40u) + 28u;
                            vec4 _3117 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3104)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 3u)).x));
                            _3129 = fma(_2382, _3117.z, fma(_2381, _3117.y, _3117.x * _2380)) + _3117.w;
                            _3130 = !((fma(_2382, _3098.z, fma(_2381, _3098.y, _3098.x * _2380)) + _3098.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3130)
                            {
                                float _3157 = _3024.x - _2380;
                                float _3158 = _3024.y - _2381;
                                float _3159 = _3024.z - _2382;
                                float _3160 = dot(vec3(_3157, _3158, _3159), vec3(_3157, _3158, _3159));
                                float _3163 = inversesqrt(_3160);
                                float _3164 = _3163 * _3157;
                                float _3165 = _3163 * _3158;
                                float _3166 = _3163 * _3159;
                                float _3170 = 1.0 - (_3160 / (_3025 * _3025));
                                float _4228 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                                float _3171 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
                                float _3175 = sqrt(_3160) * _3040.w;
                                float _3177 = 1.39999997615814208984375 / (_3175 + 1.39999997615814208984375);
                                float _3178 = _3177 * _3177;
                                float _3181 = ((1.0 - _3178) * dot(vec3(_3164, _3165, _3166), vec3(_620, _623, _626))) + _3178;
                                float _3184 = _3175 * _3175;
                                float _3188 = (fma(_2382, _3067.z, fma(_2381, _3067.y, _3067.x * _2380)) + _3067.w) / _3129;
                                float _3189 = (fma(_2382, _3083.z, fma(_2381, _3083.y, _3083.x * _2380)) + _3083.w) / _3129;
                                float _3193 = 1.0 - dot(vec2(_3188, _3189), vec2(_3188, _3189));
                                float _4244 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                                float _3194 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
                                float _3195 = _3194 * (((isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0))) * _3171) / ((_3184 * 0.699999988079071044921875) + 1.0));
                                float _3207 = exp2(log2(1.0 / ((_3184 * 3.5) + 5.0)) * 0.25);
                                float _3208 = 1.0 - _695;
                                float _3215 = sqrt(1.0 - ((1.0 - (_3208 * _3208)) * (1.0 - (_3207 * _3207))));
                                float _3216 = _3215 * _3215;
                                float _3217 = _3216 * _3216;
                                float _3218 = _3164 - _2666;
                                float _3219 = _3165 - _2667;
                                float _3220 = _3166 - _2668;
                                float _3224 = inversesqrt(dot(vec3(_3218, _3219, _3220), vec3(_3218, _3219, _3220)));
                                float _3228 = dot(vec3(_620, _623, _626), vec3((-0.0) - _2666, (-0.0) - _2667, (-0.0) - _2668));
                                float _4255 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                                float _3231 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
                                float _3232 = dot(vec3(_620, _623, _626), vec3(_3224 * _3218, _3224 * _3219, _3224 * _3220));
                                float _4266 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                                float _3235 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
                                float _3239 = ((_3235 * _3235) * (_3217 + (-1.0))) + 1.0;
                                float _3240 = _3177 * _3216;
                                float _3241 = _3240 * _3240;
                                float _3247 = ((1.0 - _3241) * dot(vec3(_620, _623, _626), vec3(_3164, _3165, _3166))) + _3241;
                                float _4277 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                                float _3248 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
                                float _3249 = 1.0 - _3216;
                                float _3259 = (0.5 / (((_3248 * ((_3231 * _3249) + _3216)) + 9.9999999392252902907785028219223e-09) + (((_3248 * _3249) + _3216) * _3231))) * _3248;
                                float _4288 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                                float _3269 = (_3194 * _3171) * (((_3217 * 3.1415927410125732421875) * (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0)))) / ((_3239 * _3239) * ((_3184 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3269 * _3052.x;
                                frontier_phi_73_pred_1 = _3269 * _3052.y;
                                frontier_phi_73_pred_2 = _3195 * _3040.z;
                                frontier_phi_73_pred_3 = _3195 * _3040.y;
                                frontier_phi_73_pred_4 = _3195 * _3040.x;
                                frontier_phi_73_pred_5 = _3269 * _3052.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3273 = frontier_phi_73_pred;
                            _3274 = frontier_phi_73_pred_1;
                            _3278 = frontier_phi_73_pred_2;
                            _3277 = frontier_phi_73_pred_3;
                            _3276 = frontier_phi_73_pred_4;
                            _3275 = frontier_phi_73_pred_5;
                            _2982 = _3276 + _2995;
                            _2983 = _3277 + _2996;
                            _2984 = _3278 + _2997;
                            _2979 = _3273 + _2992;
                            _2980 = _3274 + _2993;
                            _2981 = _3275 + _2994;
                            if (_2999 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2992 = _2979;
                                _2993 = _2980;
                                _2994 = _2981;
                                _2995 = _2982;
                                _2996 = _2983;
                                _2997 = _2984;
                                _2998 = _2999;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2982;
                        frontier_phi_67_pred_1 = _2983;
                        frontier_phi_67_pred_2 = _2984;
                        frontier_phi_67_pred_3 = _2981;
                        frontier_phi_67_pred_4 = _2980;
                        frontier_phi_67_pred_5 = _2979;
                    }
                    _2647 = frontier_phi_67_pred;
                    _2649 = frontier_phi_67_pred_1;
                    _2651 = frontier_phi_67_pred_2;
                    _2645 = frontier_phi_67_pred_3;
                    _2643 = frontier_phi_67_pred_4;
                    _2641 = frontier_phi_67_pred_5;
                    uint _2786 = _2785 + 1u;
                    if (_2786 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2779 = _2641;
                        _2780 = _2643;
                        _2781 = _2645;
                        _2782 = _2647;
                        _2783 = _2649;
                        _2784 = _2651;
                        _2785 = _2786;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2649;
                frontier_phi_55_56_ladder_1 = _2651;
                frontier_phi_55_56_ladder_2 = _2647;
                frontier_phi_55_56_ladder_3 = _2645;
                frontier_phi_55_56_ladder_4 = _2643;
                frontier_phi_55_56_ladder_5 = _2641;
            }
            else
            {
                frontier_phi_55_56_ladder = _2535;
                frontier_phi_55_56_ladder_1 = _2537;
                frontier_phi_55_56_ladder_2 = _2533;
                frontier_phi_55_56_ladder_3 = _2531;
                frontier_phi_55_56_ladder_4 = _2529;
                frontier_phi_55_56_ladder_5 = _2527;
            }
            _2640 = frontier_phi_55_56_ladder_5;
            _2642 = frontier_phi_55_56_ladder_4;
            _2644 = frontier_phi_55_56_ladder_3;
            _2646 = frontier_phi_55_56_ladder_2;
            _2648 = frontier_phi_55_56_ladder;
            _2650 = frontier_phi_55_56_ladder_1;
        }
        float _2655 = isnan(1.0) ? _679 : (isnan(_679) ? 1.0 : min(_679, 1.0));
        _2439 = (_2655 * _2646) + _1872;
        _2441 = (_2655 * _2648) + _1874;
        _2443 = (_2655 * _2650) + _1876;
        _2445 = ((_2640 * _663) * _2655) + _2220;
        _2447 = ((_2642 * _665) * _2655) + _2222;
        _2449 = ((_2644 * _666) * _2655) + _2224;
    }
    else
    {
        _2439 = _1872;
        _2441 = _1874;
        _2443 = _1876;
        _2445 = _2220;
        _2447 = _2222;
        _2449 = _2224;
    }
    float _4304 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _4315 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _4326 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    uint _2469 = _230 + 6u;
    float _2477 = _601 / cbSceneParam._m0[86u].x;
    float _2478 = _602 / cbSceneParam._m0[86u].y;
    vec4 _2492 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2477, _2478, (log2((isnan(cbSceneParam._m0[77u].w) ? _535 : (isnan(_535) ? cbSceneParam._m0[77u].w : min(_535, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2494 = _2492.x;
    float _2495 = _2492.y;
    float _2496 = _2492.z;
    float _2497 = _2492.w;
    float _2590;
    float _2592;
    float _2594;
    float _2596;
    if (_535 > cbSceneParam._m0[78u].w)
    {
        float _2552 = isnan(_535) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _535 : min(cbSceneParam._m0[80u].w, _535));
        float _2553 = _2552 / _535;
        float _2564 = _2553 * _586;
        float _2565 = _587 * _2553;
        float _2566 = (-0.0) - _2565;
        float _2568 = _2553 * _588;
        float _2570 = (cbSceneParam._m0[77u].w * _2566) / _2552;
        float _2571 = _2570 + cbSceneParam._m0[79u].w;
        float _2572 = cbSceneParam._m0[79u].w - _2565;
        float _2578 = sqrt(((_2564 * _2564) + (_2565 * _2565)) + (_2568 * _2568));
        float _2581 = (1.0 - (cbSceneParam._m0[77u].w / _2552)) * _2578;
        float _2586 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2588 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2741;
        if (abs((_2566 - _2570) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2741 = ((((_2571 > 0.0) ? exp2(_2586 * _2571) : (2.0 - exp2(_2588 * _2571))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2581;
        }
        else
        {
            float _2701 = 1.0 / cbSceneParam._m0[80u].x;
            float _2702 = isnan(_2572) ? _2571 : (isnan(_2571) ? _2572 : max(_2571, _2572));
            float _2703 = isnan(_2572) ? _2571 : (isnan(_2571) ? _2572 : min(_2571, _2572));
            float _2712 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : min(_2702, 0.0));
            float _2713 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : min(_2703, 0.0));
            _2741 = ((abs(_2578 / _2566) * cbSceneParam._m0[80u].y) * ((((_2712 - _2713) * 2.0) - ((exp2(_2586 * (isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0)))) - exp2(_2586 * (isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0))))) * _2701)) - ((exp2(_2588 * _2712) - exp2(_2588 * _2713)) * _2701))) + (_2581 * cbSceneParam._m0[80u].z);
        }
        vec4 _2743 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2477, _2478, 1.0), 0.0);
        float _2752 = exp2((_2741 * (-1.44269502162933349609375)) * (1.0 - _2743.w));
        float _2753 = log2(_2752);
        float _2769 = log2(_2497);
        _2590 = (exp2(_2769 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2753 * cbSceneParam._m0[78u].x)) * _2743.x) / cbSceneParam._m0[78u].x)) + _2494;
        _2592 = (exp2(_2769 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2753 * cbSceneParam._m0[78u].y)) * _2743.y) / cbSceneParam._m0[78u].y)) + _2495;
        _2594 = (exp2(_2769 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2753 * cbSceneParam._m0[78u].z)) * _2743.z) / cbSceneParam._m0[78u].z)) + _2496;
        _2596 = _2752 * _2497;
    }
    else
    {
        _2590 = _2494;
        _2592 = _2495;
        _2594 = _2496;
        _2596 = _2497;
    }
    float _2608 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2609 = _2608 == 3.0;
    float _2610 = log2(_2596);
    float _2617 = exp2(_2610 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_2439 + ((isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0))) * _679))) + ((_2445 + ((isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))) * _1487)) * cbPerFrame._m0[3u].x));
    float _2618 = exp2(_2610 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_2441 + ((isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0))) * _679))) + ((_2447 + ((isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))) * _1487)) * cbPerFrame._m0[3u].x));
    float _2619 = exp2(_2610 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_2443 + ((isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0))) * _679))) + ((_2449 + ((isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))) * _1487)) * cbPerFrame._m0[3u].x));
    float _2628 = (_2608 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2628 * (_2609 ? _2617 : (_2617 + (cbSceneParam._m0[72u].w * _2590)));
    SV_Target.y = _2628 * (_2609 ? _2618 : (_2618 + (cbSceneParam._m0[72u].w * _2592)));
    SV_Target.z = _2628 * (_2609 ? _2619 : (_2619 + (cbSceneParam._m0[72u].w * _2594)));
    SV_Target.w = cbInstanceData._m0[_2469].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2469].w;
}


