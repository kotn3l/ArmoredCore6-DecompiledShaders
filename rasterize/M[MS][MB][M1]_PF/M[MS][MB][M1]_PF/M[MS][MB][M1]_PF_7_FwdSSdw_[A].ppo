#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1151;
float _3558;
float _3559;
float _3560;
float _3561;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _254 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3570 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _3581 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _3592 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    uint _265 = uint(roundEven(NORMAL.w)) * 13u;
    uint _270 = _265 + 1u;
    uint _274 = _265 + 2u;
    float _283 = sqrt(((cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x)) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x));
    float _284 = _283 * TEXCOORD.z;
    float _285 = _283 * TEXCOORD.w;
    vec4 _298 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _284) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _285) + cbTextureTilingScale._m0[13u].w));
    vec4 _321 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _326 = _321.x * cbMtdParam._m0[9u].x;
    float _327 = _321.y * cbMtdParam._m0[9u].y;
    float _328 = _321.z * cbMtdParam._m0[9u].z;
    float _332 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _298.x) * _326;
    float _335 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _298.y) * _327;
    float _338 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _298.z) * _328;
    float _345 = ((_326 - _332) * (isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0)))) + _332;
    float _346 = ((_327 - _335) * (isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0)))) + _335;
    float _347 = ((_328 - _338) * (isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0)))) + _338;
    vec4 _360 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _284) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _285) + cbTextureTilingScale._m0[20u].w));
    vec4 _386 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _390 = _386.z;
    float _394 = (_386.x * 2.0) + (-1.0);
    float _395 = (_386.y * 2.0) + (-1.0);
    float _396 = dot(vec2(_394, _395), vec2(_394, _395));
    float _3603 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _401 = sqrt(1.0 - (isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))));
    float _406 = _394 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_360.x * 2.0) + (-1.0)));
    float _407 = _395 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_360.y * 2.0) + (-1.0)));
    vec4 _420 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _284) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _285) + cbTextureTilingScale._m0[19u].w));
    float _422 = _420.x;
    float _423 = 1.0 - _422;
    float _454 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_422 - _423) * cbMtdParam._m0[24u].w) + _423) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3614 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _455 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
    float _463 = ((((cbMtdParam._m0[10u].x - _345) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _455) + _345;
    float _464 = ((((cbMtdParam._m0[10u].y - _346) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _455) + _346;
    float _465 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _347)) * _455) + _347;
    vec4 _478 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _480 = _478.x;
    float _482 = _480 - (_480 * _455);
    float _487 = (((_360.z - _390) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _390;
    float _491 = ((cbMtdParam._m0[23u].y - _487) * _455) + _487;
    vec4 _513 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _284) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].w * cbPerFrame._m0[22u].x) + _285) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _519 = (_513.x * 2.0) + (-1.0);
    float _520 = (_513.y * 2.0) + (-1.0);
    float _521 = dot(vec2(_519, _520), vec2(_519, _520));
    float _3625 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _537 = (_455 * (((cbMtdParam._m0[22u].z * _406) - _406) + _519)) + _406;
    float _538 = (_455 * (((cbMtdParam._m0[22u].z * _407) - _407) + _520)) + _407;
    float _539 = (_455 * (sqrt(1.0 - (isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0)))) - _401)) + _401;
    float _541 = cbMtdParam._m0[22u].x + _386.w;
    float _545 = gl_FragCoord.x * 0.125;
    float _547 = gl_FragCoord.y * 0.125;
    float _557 = fma(_539, _233 * NORMAL.x, fma(_538, _240 * TANGENT.x, (_226 * _218) * _537));
    float _560 = fma(_539, _233 * NORMAL.y, fma(_538, _240 * TANGENT.y, (_226 * _219) * _537));
    float _563 = fma(_539, _233 * NORMAL.z, fma(_538, _240 * TANGENT.z, (_226 * _220) * _537));
    float _567 = inversesqrt(dot(vec3(_557, _560, _563), vec3(_557, _560, _563)));
    float _568 = _567 * _557;
    float _569 = _567 * _560;
    float _570 = _567 * _563;
    float _3636 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _571 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
    float _3647 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _3658 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _3669 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _3680 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _3691 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _576 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_545, _547)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _594 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _635 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _645 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _635);
    float _646 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _635);
    float _647 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _635);
    float _651 = inversesqrt(dot(vec3(_645, _646, _647), vec3(_645, _646, _647)));
    float _652 = _645 * _651;
    float _653 = _646 * _651;
    float _654 = _647 * _651;
    vec4 _656 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_545, _547));
    float _658 = _656.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _833 = sqrt(((_645 * _645) + (_646 * _646)) + (_647 * _647));
        float _839 = (cbMatDynParam._m0[5u].x * _833) + cbMatDynParam._m0[5u].y;
        float _3702 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _840 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _844 = (cbMatDynParam._m0[5u].z * _833) + cbMatDynParam._m0[5u].w;
        float _3713 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) - _840)) + _840) < ((_658 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _670 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _671 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _691 = fma(_570, cbSceneParam._m0[5u].z, fma(_569, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _568));
    float _694 = fma(_570, cbSceneParam._m0[6u].z, fma(_569, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _568));
    float _697 = fma(_570, cbSceneParam._m0[7u].z, fma(_569, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _568));
    uint _710 = _265 + 9u;
    uint _711 = _710 + uint(cbMatDynParam._m0[0u].w);
    float _717 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0)))) * cbInstanceData._m0[_711].x;
    float _718 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0)))) * cbInstanceData._m0[_711].y;
    float _719 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0)))) * cbInstanceData._m0[_711].z;
    float _3724 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _720 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _3735 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _721 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _3746 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _722 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _723 = 1.0 - _576;
    float _724 = _720 * _723;
    float _725 = _721 * _723;
    float _726 = _722 * _723;
    float _731 = (_720 + (-0.039999999105930328369140625)) * _576;
    float _732 = (_721 + (-0.039999999105930328369140625)) * _576;
    float _733 = (_722 + (-0.039999999105930328369140625)) * _576;
    float _734 = _731 + 0.039999999105930328369140625;
    float _736 = _732 + 0.039999999105930328369140625;
    float _737 = _733 + 0.039999999105930328369140625;
    vec4 _746 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _670, cbSceneParam._m0[86u].y * _671));
    float _750 = ((isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * TEXCOORD_5.w) * _746.x;
    float _751 = dot(vec3(_568, _569, _570), vec3(_652, _653, _654));
    float _754 = _751 * 2.0;
    float _758 = (_754 * _568) - _652;
    float _759 = (_754 * _569) - _653;
    float _760 = (_754 * _570) - _654;
    float _764 = abs(dot(vec3(_652, _653, _654), vec3(_568, _569, _570)));
    float _3757 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _766 = sqrt(_571);
    float _779 = exp2((_766 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_766 * 3.0));
    float _785 = (1.0 - _779) * ((_766 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _786 = _779 * _766;
    float _814 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _818 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _822 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1150;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _875 = fma(_822, cbModelParam._m0[26u].z, fma(_818, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _814));
        float _879 = fma(_822, cbModelParam._m0[27u].z, fma(_818, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _814));
        float _883 = fma(_822, cbModelParam._m0[28u].z, fma(_818, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _814));
        float _908 = _814 + _568;
        float _909 = _818 + _569;
        float _910 = _822 + _570;
        float _920 = fma(_910, cbModelParam._m0[26u].z, fma(_909, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _908)) - _875;
        float _921 = fma(_910, cbModelParam._m0[27u].z, fma(_909, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _908)) - _879;
        float _922 = fma(_910, cbModelParam._m0[28u].z, fma(_909, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _908)) - _883;
        float _926 = inversesqrt(dot(vec3(_920, _921, _922), vec3(_920, _921, _922)));
        float _939 = ((_926 * _920) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_875 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _940 = ((_926 * _921) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_879 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _941 = ((_926 * _922) / cbModelParam._m0[34u].z) + ((((((_883 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _944 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_939, _940, _941), 0.0);
        vec4 _951 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_939, _940, _941), 0.0);
        vec4 _958 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_939, _940, _941), 0.0);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_939, _940, _941), 0.0);
        float _978 = exp2((_944.w + (-0.5)) * 20.0) * 2.0;
        float _979 = _978 * (_944.x + (-0.5));
        float _980 = _978 * (_944.y + (-0.5));
        float _981 = _978 * (_944.z + (-0.5));
        float _988 = exp2((_951.w + (-0.5)) * 20.0) * 2.0;
        float _989 = _988 * (_951.x + (-0.5));
        float _990 = _988 * (_951.y + (-0.5));
        float _991 = _988 * (_951.z + (-0.5));
        float _998 = exp2((_958.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_958.x + (-0.5));
        float _1000 = _998 * (_958.y + (-0.5));
        float _1001 = _998 * (_958.z + (-0.5));
        float _1008 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_965.x + (-0.5));
        float _1010 = _1008 * (_965.y + (-0.5));
        float _1011 = _1008 * (_965.z + (-0.5));
        float _1012 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1013 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1014 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1015 = _979 * 0.5;
        float _1016 = _989 * 0.5;
        float _1017 = _999 * 0.5;
        float _1018 = dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017));
        float _1023 = (_1018 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1018);
        float _1032 = (dot(vec3(_568, _569, _570), vec3(_1023 * _1015, _1023 * _1016, _1023 * _1017)) + 1.0) * 0.5;
        float _3783 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1042 = sqrt(((_1016 * _1016) + (_1015 * _1015)) + (_1017 * _1017)) / (_1012 + 9.9999997473787516355514526367188e-06);
        float _3794 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1044 = _1043 * 2.0;
        float _1048 = (1.0 - _1043) / (_1043 + 1.0);
        float _3805 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1058 = ((((1.0 - _1049) * (_1044 + 2.0)) * exp2(log2(isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) * (_1044 + 1.0))) + _1049) * _1012;
        float _1059 = _980 * 0.5;
        float _1060 = _990 * 0.5;
        float _1061 = _1000 * 0.5;
        float _1062 = dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061));
        float _1067 = (_1062 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1062);
        float _1075 = (dot(vec3(_568, _569, _570), vec3(_1067 * _1059, _1067 * _1060, _1067 * _1061)) + 1.0) * 0.5;
        float _3816 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1084 = sqrt(((_1060 * _1060) + (_1059 * _1059)) + (_1061 * _1061)) / (_1013 + 9.9999997473787516355514526367188e-06);
        float _3827 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1086 = _1085 * 2.0;
        float _1090 = (1.0 - _1085) / (_1085 + 1.0);
        float _3838 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1100 = ((((1.0 - _1091) * (_1086 + 2.0)) * exp2(log2(isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_1086 + 1.0))) + _1091) * _1013;
        float _1101 = _981 * 0.5;
        float _1102 = _991 * 0.5;
        float _1103 = _1001 * 0.5;
        float _1104 = dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103));
        float _1109 = (_1104 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1104);
        float _1117 = (dot(vec3(_568, _569, _570), vec3(_1109 * _1101, _1109 * _1102, _1109 * _1103)) + 1.0) * 0.5;
        float _3849 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1126 = sqrt(((_1102 * _1102) + (_1101 * _1101)) + (_1103 * _1103)) / (_1014 + 9.9999997473787516355514526367188e-06);
        float _3860 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1128 = _1127 * 2.0;
        float _1132 = (1.0 - _1127) / (_1127 + 1.0);
        float _3871 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1142 = ((((1.0 - _1133) * (_1128 + 2.0)) * exp2(log2(isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_1128 + 1.0))) + _1133) * _1014;
        _1150 = _981;
        _1152 = _980;
        _1153 = _979;
        _1154 = _991;
        _1155 = _990;
        _1156 = _989;
        _1157 = _1001;
        _1158 = _1000;
        _1159 = _999;
        _1160 = _1014;
        _1161 = _1013;
        _1162 = _1012;
        _1163 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0)));
        _1164 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0)));
        _1165 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0)));
    }
    else
    {
        _1150 = _1151;
        _1152 = _1151;
        _1153 = _1151;
        _1154 = _1151;
        _1155 = _1151;
        _1156 = _1151;
        _1157 = _1151;
        _1158 = _1151;
        _1159 = _1151;
        _1160 = _1151;
        _1161 = _1151;
        _1162 = _1151;
        _1163 = 0.0;
        _1164 = 0.0;
        _1165 = 0.0;
    }
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1190 = fma(_822, cbModelParam._m0[30u].z, fma(_818, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _814));
        float _1194 = fma(_822, cbModelParam._m0[31u].z, fma(_818, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _814));
        float _1198 = fma(_822, cbModelParam._m0[32u].z, fma(_818, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _814));
        float _1221 = _814 + _568;
        float _1222 = _818 + _569;
        float _1223 = _822 + _570;
        float _1233 = fma(_1223, cbModelParam._m0[30u].z, fma(_1222, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1221)) - _1190;
        float _1234 = fma(_1223, cbModelParam._m0[31u].z, fma(_1222, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1221)) - _1194;
        float _1235 = fma(_1223, cbModelParam._m0[32u].z, fma(_1222, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1221)) - _1198;
        float _1239 = inversesqrt(dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235)));
        float _1252 = ((_1239 * _1233) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1190 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1253 = ((_1239 * _1234) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1194 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1254 = ((_1239 * _1235) / cbModelParam._m0[35u].z) + ((((((_1198 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1252, _1253, _1254), 0.0);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1252, _1253, _1254), 0.0);
        vec4 _1270 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1252, _1253, _1254), 0.0);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1252, _1253, _1254), 0.0);
        float _1289 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1256.x + (-0.5));
        float _1291 = _1289 * (_1256.y + (-0.5));
        float _1292 = _1289 * (_1256.z + (-0.5));
        float _1299 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1300 = _1299 * (_1263.x + (-0.5));
        float _1301 = _1299 * (_1263.y + (-0.5));
        float _1302 = _1299 * (_1263.z + (-0.5));
        float _1309 = exp2((_1270.w + (-0.5)) * 20.0) * 2.0;
        float _1310 = _1309 * (_1270.x + (-0.5));
        float _1311 = _1309 * (_1270.y + (-0.5));
        float _1312 = _1309 * (_1270.z + (-0.5));
        float _1319 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1320 = _1319 * (_1277.x + (-0.5));
        float _1321 = _1319 * (_1277.y + (-0.5));
        float _1322 = _1319 * (_1277.z + (-0.5));
        float _1323 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1324 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1325 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1326 = _1290 * 0.5;
        float _1327 = _1300 * 0.5;
        float _1328 = _1310 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1342 = (dot(vec3(_568, _569, _570), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _3912 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1351 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1323 + 9.9999997473787516355514526367188e-06);
        float _3923 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _3934 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * (_1353 + 1.0))) + _1358) * _1323;
        float _1368 = _1291 * 0.5;
        float _1369 = _1301 * 0.5;
        float _1370 = _1311 * 0.5;
        float _1371 = dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370));
        float _1376 = (_1371 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1371);
        float _1384 = (dot(vec3(_568, _569, _570), vec3(_1376 * _1368, _1376 * _1369, _1376 * _1370)) + 1.0) * 0.5;
        float _3945 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1393 = sqrt(((_1369 * _1369) + (_1368 * _1368)) + (_1370 * _1370)) / (_1324 + 9.9999997473787516355514526367188e-06);
        float _3956 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1395 = _1394 * 2.0;
        float _1399 = (1.0 - _1394) / (_1394 + 1.0);
        float _3967 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1409 = ((((1.0 - _1400) * (_1395 + 2.0)) * exp2(log2(isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_1395 + 1.0))) + _1400) * _1324;
        float _1410 = _1292 * 0.5;
        float _1411 = _1302 * 0.5;
        float _1412 = _1312 * 0.5;
        float _1413 = dot(vec3(_1410, _1411, _1412), vec3(_1410, _1411, _1412));
        float _1418 = (_1413 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1413);
        float _1426 = (dot(vec3(_568, _569, _570), vec3(_1418 * _1410, _1418 * _1411, _1418 * _1412)) + 1.0) * 0.5;
        float _3978 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1435 = sqrt(((_1411 * _1411) + (_1410 * _1410)) + (_1412 * _1412)) / (_1325 + 9.9999997473787516355514526367188e-06);
        float _3989 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1437 = _1436 * 2.0;
        float _1441 = (1.0 - _1436) / (_1436 + 1.0);
        float _4000 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1451 = ((((1.0 - _1442) * (_1437 + 2.0)) * exp2(log2(isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1437 + 1.0))) + _1442) * _1325;
        _1459 = _1292;
        _1460 = _1291;
        _1461 = _1290;
        _1462 = _1302;
        _1463 = _1301;
        _1464 = _1300;
        _1465 = _1312;
        _1466 = _1311;
        _1467 = _1310;
        _1468 = _1325;
        _1469 = _1324;
        _1470 = _1323;
        _1471 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
        _1472 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)));
        _1473 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)));
    }
    else
    {
        _1459 = _1151;
        _1460 = _1151;
        _1461 = _1151;
        _1462 = _1151;
        _1463 = _1151;
        _1464 = _1151;
        _1465 = _1151;
        _1466 = _1151;
        _1467 = _1151;
        _1468 = _1151;
        _1469 = _1151;
        _1470 = _1151;
        _1471 = 0.0;
        _1472 = 0.0;
        _1473 = 0.0;
    }
    float _1483 = (cbModelParam._m0[1u].x * (_1471 - _1163)) + _1163;
    float _1484 = (cbModelParam._m0[1u].x * (_1472 - _1164)) + _1164;
    float _1485 = (cbModelParam._m0[1u].x * (_1473 - _1165)) + _1165;
    float _1506 = fma(_1485, cbSceneParam._m0[89u].z, fma(_1484, cbSceneParam._m0[89u].y, _1483 * cbSceneParam._m0[89u].x));
    float _1509 = fma(_1485, cbSceneParam._m0[90u].z, fma(_1484, cbSceneParam._m0[90u].y, _1483 * cbSceneParam._m0[90u].x));
    float _1512 = fma(_1485, cbSceneParam._m0[91u].z, fma(_1484, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1483));
    float _1527 = _758 * 0.5;
    float _1528 = _759 * 0.5;
    float _1529 = _760 * 0.5;
    float _1530 = dot(vec4(_1527, _1528, _1529, 1.0), vec4(_1461, _1464, _1467, _1470));
    float _1533 = dot(vec4(_1527, _1528, _1529, 1.0), vec4(_1460, _1463, _1466, _1469));
    float _1536 = dot(vec4(_1527, _1528, _1529, 1.0), vec4(_1459, _1462, _1465, _1468));
    float _1570;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1543 = dot(vec4(_1527, _1528, _1529, 1.0), vec4(_1150, _1154, _1157, _1160));
        float _1547 = dot(vec4(_1527, _1528, _1529, 1.0), vec4(_1152, _1155, _1158, _1161));
        float _1551 = dot(vec4(_1527, _1528, _1529, 1.0), vec4(_1153, _1156, _1159, _1162));
        float _1558 = dot(vec4(cbModelParam._m0[39u]), vec4(_1527, _1528, _1529, 1.0));
        _1570 = dot(vec3(isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)), isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)), isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1558) ? 0.0 : (isnan(0.0) ? _1558 : max(0.0, _1558))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1570 = 1.0;
    }
    float _1581;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1572 = dot(vec4(cbModelParam._m0[40u]), vec4(_1527, _1528, _1529, 1.0));
        _1581 = dot(vec3(isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)), isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)), isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1572) ? 0.0 : (isnan(0.0) ? _1572 : max(0.0, _1572))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1581 = 1.0;
    }
    float _1585 = (_1581 * cbModelParam._m0[1u].x) + (_1570 * (1.0 - cbModelParam._m0[1u].x));
    float _1595 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _571);
    float _1596 = isnan(_1595) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1595 : min(cbModelParam._m0[25u].z, _1595));
    float _1678;
    float _1680;
    float _1682;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1645 = fma(_822, cbModelParam._m0[13u].z, fma(_818, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _814)) + cbModelParam._m0[13u].w;
        float _1649 = fma(_822, cbModelParam._m0[14u].z, fma(_818, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _814)) + cbModelParam._m0[14u].w;
        float _1653 = fma(_822, cbModelParam._m0[15u].z, fma(_818, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _814)) + cbModelParam._m0[15u].w;
        float _1656 = fma(_760, cbModelParam._m0[13u].z, fma(_759, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _758));
        float _1659 = fma(_760, cbModelParam._m0[14u].z, fma(_759, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _758));
        float _1662 = fma(_760, cbModelParam._m0[15u].z, fma(_759, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _758));
        float _1690;
        if (_1656 > 0.0)
        {
            _1690 = abs((1.0 - _1645) / _1656);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1656 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1645 + 1.0) / _1656);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1690 = frontier_phi_19_17_ladder;
        }
        float _1916;
        if (_1659 > 0.0)
        {
            _1916 = abs((1.0 - _1649) / _1659);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1659 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1649 + 1.0) / _1659);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1916 = frontier_phi_28_24_ladder;
        }
        float _2173;
        if (_1662 > 0.0)
        {
            _2173 = abs((1.0 - _1653) / _1662);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1662 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1653 + 1.0) / _1662);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2173 = frontier_phi_40_35_ladder;
        }
        float _2175 = isnan(_1916) ? _1690 : (isnan(_1690) ? _1916 : min(_1690, _1916));
        float _2176 = isnan(_2173) ? _2175 : (isnan(_2175) ? _2173 : min(_2175, _2173));
        float _2180 = (_2176 * _1656) + _1645;
        float _2181 = (_2176 * _1659) + _1649;
        float _2182 = (_2176 * _1662) + _1653;
        float _2183 = _2176 * 9.9999997473787516355514526367188e-05;
        float _2185 = (-1.0) - _2183;
        float _2187 = _2183 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2182 > _2187) || ((_2182 < _2185) || ((_2181 > _2187) || ((_2181 < _2185) || ((_2180 < _2185) || (_2180 > _2187))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2310 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2182, cbModelParam._m0[9u].z, fma(_2181, cbModelParam._m0[9u].y, _2180 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2182, cbModelParam._m0[10u].z, fma(_2181, cbModelParam._m0[10u].y, _2180 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2182, cbModelParam._m0[11u].z, fma(_2181, cbModelParam._m0[11u].y, _2180 * cbModelParam._m0[11u].x))), _1596);
            frontier_phi_18_40_ladder = _2310.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2310.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2310.x * cbModelParam._m0[1u].y;
        }
        _1678 = frontier_phi_18_40_ladder_2;
        _1680 = frontier_phi_18_40_ladder_1;
        _1682 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1666 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_758, _759, _760), _1596);
        _1678 = _1666.x * cbModelParam._m0[1u].y;
        _1680 = _1666.y * cbModelParam._m0[1u].y;
        _1682 = _1666.z * cbModelParam._m0[1u].y;
    }
    float _1686 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _571);
    float _1687 = isnan(_1686) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1686 : min(cbModelParam._m0[25u].w, _1686));
    float _1778;
    float _1780;
    float _1782;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1742 = fma(_822, cbModelParam._m0[21u].z, fma(_818, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _814)) + cbModelParam._m0[21u].w;
        float _1746 = fma(_822, cbModelParam._m0[22u].z, fma(_818, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _814)) + cbModelParam._m0[22u].w;
        float _1750 = fma(_822, cbModelParam._m0[23u].z, fma(_818, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _814)) + cbModelParam._m0[23u].w;
        float _1753 = fma(_760, cbModelParam._m0[21u].z, fma(_759, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _758));
        float _1756 = fma(_760, cbModelParam._m0[22u].z, fma(_759, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _758));
        float _1759 = fma(_760, cbModelParam._m0[23u].z, fma(_759, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _758));
        float _1921;
        if (_1753 > 0.0)
        {
            _1921 = abs((1.0 - _1742) / _1753);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1753 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1742 + 1.0) / _1753);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1921 = frontier_phi_30_26_ladder;
        }
        float _2200;
        if (_1756 > 0.0)
        {
            _2200 = abs((1.0 - _1746) / _1756);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1746 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2200 = frontier_phi_42_37_ladder;
        }
        float _2413;
        if (_1759 > 0.0)
        {
            _2413 = abs((1.0 - _1750) / _1759);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1759 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1750 + 1.0) / _1759);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2413 = frontier_phi_51_48_ladder;
        }
        float _2415 = isnan(_2200) ? _1921 : (isnan(_1921) ? _2200 : min(_1921, _2200));
        float _2416 = isnan(_2413) ? _2415 : (isnan(_2415) ? _2413 : min(_2415, _2413));
        float _2420 = (_2416 * _1753) + _1742;
        float _2421 = (_2416 * _1756) + _1746;
        float _2422 = (_2416 * _1759) + _1750;
        float _2423 = _2416 * 9.9999997473787516355514526367188e-05;
        float _2424 = (-1.0) - _2423;
        float _2426 = _2423 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2422 > _2426) || ((_2422 < _2424) || ((_2421 > _2426) || ((_2421 < _2424) || ((_2420 < _2424) || (_2420 > _2426))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2621 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2422, cbModelParam._m0[17u].z, fma(_2421, cbModelParam._m0[17u].y, _2420 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2422, cbModelParam._m0[18u].z, fma(_2421, cbModelParam._m0[18u].y, _2420 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2422, cbModelParam._m0[19u].z, fma(_2421, cbModelParam._m0[19u].y, _2420 * cbModelParam._m0[19u].x))), _1687);
            frontier_phi_27_51_ladder = _2621.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2621.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2621.x * cbModelParam._m0[1u].z;
        }
        _1778 = frontier_phi_27_51_ladder_2;
        _1780 = frontier_phi_27_51_ladder_1;
        _1782 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1762 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_758, _759, _760), _1687);
        _1778 = _1762.x * cbModelParam._m0[1u].z;
        _1780 = _1762.y * cbModelParam._m0[1u].z;
        _1782 = _1762.z * cbModelParam._m0[1u].z;
    }
    float _1795 = (((_785 * _734) + _786) * _750) * ((cbModelParam._m0[1u].w * (_1778 - _1678)) + _1678);
    float _1797 = (((_785 * _736) + _786) * _750) * ((cbModelParam._m0[1u].w * (_1780 - _1680)) + _1680);
    float _1799 = (((_785 * _737) + _786) * _750) * ((cbModelParam._m0[1u].w * (_1782 - _1682)) + _1682);
    float _1802 = fma(_1799, cbSceneParam._m0[89u].z, fma(_1797, cbSceneParam._m0[89u].y, _1795 * cbSceneParam._m0[89u].x));
    float _1805 = fma(_1799, cbSceneParam._m0[90u].z, fma(_1797, cbSceneParam._m0[90u].y, _1795 * cbSceneParam._m0[90u].x));
    float _1808 = fma(_1799, cbSceneParam._m0[91u].z, fma(_1797, cbSceneParam._m0[91u].y, _1795 * cbSceneParam._m0[91u].x));
    vec4 _1816 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_670, _671));
    float _1818 = _1816.w;
    float _1830 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1818);
    float _1831 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1818);
    float _1832 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1818);
    uvec4 _1836 = floatBitsToUint(cbInstanceData._m0[_265 + 5u]);
    uint _1838 = _1836.x * 14u;
    uint _1839 = _1838 + 13u;
    float _1846 = _750 + (-1.0);
    float _1851 = (cbLight._m0[_1839].x * _1846) + 1.0;
    float _1852 = (cbLight._m0[_1839].y * _1846) + 1.0;
    float _1853 = (cbLight._m0[_1839].z * _1846) + 1.0;
    float _1854 = (cbLight._m0[_1839].w * _1846) + 1.0;
    uint _1855 = _1838 + 5u;
    float _1861 = isnan(1.0) ? _1852 : (isnan(_1852) ? 1.0 : min(_1852, 1.0));
    uint _1865 = _1838 + 4u;
    float _1875 = isnan(1.0) ? _1851 : (isnan(_1851) ? 1.0 : min(_1851, 1.0));
    uint _1879 = _1838 | 1u;
    float _1890 = dot(vec3(cbLight._m0[_1838].xyz), vec3(_568, _569, _570));
    float _1893 = dot(vec3(cbLight._m0[_1879].xyz), vec3(_568, _569, _570));
    float _4136 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _4147 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
    float _1898 = (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * 0.3183098733425140380859375;
    float _1900 = (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * 0.3183098733425140380859375;
    float _1907 = ((cbLight._m0[_1855].x * _1861) * _1900) + (((cbLight._m0[_1865].x * _1830) * _1875) * _1898);
    float _1908 = ((_1861 * cbLight._m0[_1855].y) * _1900) + (((cbLight._m0[_1865].y * _1831) * _1875) * _1898);
    float _1909 = ((_1861 * cbLight._m0[_1855].z) * _1900) + (((cbLight._m0[_1865].z * _1832) * _1875) * _1898);
    uvec4 _1913 = floatBitsToUint(cbLight._m0[_1838 + 12u]);
    bool _1915 = _1913.x == 0u;
    float _1926;
    float _1928;
    float _1930;
    if (_1915)
    {
        _1926 = _1907;
        _1928 = _1908;
        _1930 = _1909;
    }
    else
    {
        uint _1934 = _1838 + 6u;
        float _1950 = (dot(vec3(cbLight._m0[_1838 + 2u].xyz), vec3(_568, _569, _570)) * 0.5) + 0.5;
        float _1951 = _1950 * _1950;
        float _4158 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
        float _1952 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1953 = isnan(1.0) ? _1853 : (isnan(_1853) ? 1.0 : min(_1853, 1.0));
        _1926 = (((cbLight._m0[_1934].x * 0.3183098733425140380859375) * _1952) * _1953) + _1907;
        _1928 = (((cbLight._m0[_1934].y * 0.3183098733425140380859375) * _1952) * _1953) + _1908;
        _1930 = (((cbLight._m0[_1934].z * 0.3183098733425140380859375) * _1952) * _1953) + _1909;
    }
    bool _1933 = _1913.y == 0u;
    float _1971;
    float _1973;
    float _1975;
    if (_1933)
    {
        _1971 = _1926;
        _1973 = _1928;
        _1975 = _1930;
    }
    else
    {
        uint _2144 = _1838 + 7u;
        float _2160 = (dot(vec3(cbLight._m0[_1838 + 3u].xyz), vec3(_568, _569, _570)) * 0.5) + 0.5;
        float _2161 = _2160 * _2160;
        float _4174 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2162 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _2163 = isnan(1.0) ? _1854 : (isnan(_1854) ? 1.0 : min(_1854, 1.0));
        _1971 = (((cbLight._m0[_2144].x * 0.3183098733425140380859375) * _2162) * _2163) + _1926;
        _1973 = (((cbLight._m0[_2144].y * 0.3183098733425140380859375) * _2162) * _2163) + _1928;
        _1975 = (((cbLight._m0[_2144].z * 0.3183098733425140380859375) * _2162) * _2163) + _1930;
    }
    uint _1978 = _1838 + 8u;
    float _1991 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1838].w)) * _571) * 0.949999988079071044921875);
    float _1992 = _1991 * _1991;
    float _1993 = cbLight._m0[_1838].x + _652;
    float _1994 = cbLight._m0[_1838].y + _653;
    float _1995 = cbLight._m0[_1838].z + _654;
    float _1999 = inversesqrt(dot(vec3(_1993, _1994, _1995), vec3(_1993, _1994, _1995)));
    float _2000 = _1999 * _1993;
    float _2001 = _1999 * _1994;
    float _2002 = _1999 * _1995;
    float _2003 = dot(vec3(_568, _569, _570), vec3(cbLight._m0[_1838].xyz));
    float _4190 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2006 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _4201 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _2007 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _2008 = dot(vec3(_568, _569, _570), vec3(_2000, _2001, _2002));
    float _4212 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2011 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _2012 = dot(vec3(cbLight._m0[_1838].xyz), vec3(_2000, _2001, _2002));
    float _4223 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2016 = _1992 * _1992;
    float _2020 = ((_2011 * _2011) * (_2016 + (-1.0))) + 1.0;
    float _2028 = exp2(log2(1.0 - (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0)))) * 5.0);
    float _2029 = 0.959999978542327880859375 - _731;
    float _2031 = 0.959999978542327880859375 - _732;
    float _2032 = 0.959999978542327880859375 - _733;
    float _2039 = 1.0 - _1992;
    float _2050 = (0.5 / (((_2007 * ((_2006 * _2039) + _1992)) + 9.9999999392252902907785028219223e-09) + (((_2007 * _2039) + _1992) * _2006))) * _2006;
    float _4234 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2052 = (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_2016 / ((_2020 * _2020) * 3.141590118408203125));
    uint _2066 = _1838 + 9u;
    float _2077 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1879].w)) * _571) * 0.949999988079071044921875);
    float _2078 = _2077 * _2077;
    float _2079 = cbLight._m0[_1879].x + _652;
    float _2080 = cbLight._m0[_1879].y + _653;
    float _2081 = cbLight._m0[_1879].z + _654;
    float _2085 = inversesqrt(dot(vec3(_2079, _2080, _2081), vec3(_2079, _2080, _2081)));
    float _2086 = _2085 * _2079;
    float _2087 = _2085 * _2080;
    float _2088 = _2085 * _2081;
    float _2089 = dot(vec3(_568, _569, _570), vec3(cbLight._m0[_1879].xyz));
    float _4245 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2092 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _2093 = dot(vec3(_568, _569, _570), vec3(_2086, _2087, _2088));
    float _4256 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2096 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
    float _2097 = dot(vec3(cbLight._m0[_1879].xyz), vec3(_2086, _2087, _2088));
    float _4267 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2101 = _2078 * _2078;
    float _2105 = ((_2096 * _2096) * (_2101 + (-1.0))) + 1.0;
    float _2112 = exp2(log2(1.0 - (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0)))) * 5.0);
    float _2119 = 1.0 - _2078;
    float _2129 = (0.5 / (((_2007 * ((_2092 * _2119) + _2078)) + 9.9999999392252902907785028219223e-09) + (((_2007 * _2119) + _2078) * _2092))) * _2092;
    float _4278 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2131 = (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_2101 / ((_2105 * _2105) * 3.141590118408203125));
    float _2141 = (((((_2112 * _2029) + _734) * cbLight._m0[_2066].x) * _2131) * _1861) + ((((cbLight._m0[_1978].x * _1830) * ((_2028 * _2029) + _734)) * _2052) * _1875);
    float _2142 = (((((_2112 * _2031) + _736) * cbLight._m0[_2066].y) * _2131) * _1861) + ((((cbLight._m0[_1978].y * _1831) * ((_2028 * _2031) + _736)) * _2052) * _1875);
    float _2143 = (((((_2112 * _2032) + _737) * cbLight._m0[_2066].z) * _2131) * _1861) + ((((cbLight._m0[_1978].z * _1832) * ((_2028 * _2032) + _737)) * _2052) * _1875);
    float _2205;
    float _2207;
    float _2209;
    if (_1915)
    {
        _2205 = _2141;
        _2207 = _2142;
        _2209 = _2143;
    }
    else
    {
        uint _2211 = _1838 + 2u;
        uint _2215 = _1838 + 10u;
        float _2229 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2211].w)) * _571) * 0.949999988079071044921875);
        float _2230 = _2229 * _2229;
        float _2231 = cbLight._m0[_2211].x + _652;
        float _2232 = cbLight._m0[_2211].y + _653;
        float _2233 = cbLight._m0[_2211].z + _654;
        float _2237 = inversesqrt(dot(vec3(_2231, _2232, _2233), vec3(_2231, _2232, _2233)));
        float _2238 = _2237 * _2231;
        float _2239 = _2237 * _2232;
        float _2240 = _2237 * _2233;
        float _2241 = dot(vec3(_568, _569, _570), vec3(cbLight._m0[_2211].xyz));
        float _4289 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        float _2244 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _2245 = dot(vec3(_568, _569, _570), vec3(_2238, _2239, _2240));
        float _4300 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2248 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _2249 = dot(vec3(cbLight._m0[_2211].xyz), vec3(_2238, _2239, _2240));
        float _4311 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2253 = _2230 * _2230;
        float _2257 = ((_2248 * _2248) * (_2253 + (-1.0))) + 1.0;
        float _2264 = exp2(log2(1.0 - (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0)))) * 5.0);
        float _2271 = 1.0 - _2230;
        float _2281 = (0.5 / (((_2007 * ((_2244 * _2271) + _2230)) + 9.9999999392252902907785028219223e-09) + (((_2007 * _2271) + _2230) * _2244))) * _2244;
        float _4322 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        float _2283 = (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_2253 / ((_2257 * _2257) * 3.141590118408203125));
        float _2284 = isnan(1.0) ? _1853 : (isnan(_1853) ? 1.0 : min(_1853, 1.0));
        _2205 = (((((_2264 * _2029) + _734) * cbLight._m0[_2215].x) * _2283) * _2284) + _2141;
        _2207 = (((((_2264 * _2031) + _736) * cbLight._m0[_2215].y) * _2283) * _2284) + _2142;
        _2209 = (((((_2264 * _2032) + _737) * cbLight._m0[_2215].z) * _2283) * _2284) + _2143;
    }
    float _2319;
    float _2321;
    float _2323;
    if (_1933)
    {
        _2319 = _2205;
        _2321 = _2207;
        _2323 = _2209;
    }
    else
    {
        uint _2330 = _1838 + 3u;
        uint _2334 = _1838 + 11u;
        float _2348 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2330].w)) * _571) * 0.949999988079071044921875);
        float _2349 = _2348 * _2348;
        float _2350 = cbLight._m0[_2330].x + _652;
        float _2351 = cbLight._m0[_2330].y + _653;
        float _2352 = cbLight._m0[_2330].z + _654;
        float _2356 = inversesqrt(dot(vec3(_2350, _2351, _2352), vec3(_2350, _2351, _2352)));
        float _2357 = _2356 * _2350;
        float _2358 = _2356 * _2351;
        float _2359 = _2356 * _2352;
        float _2360 = dot(vec3(_568, _569, _570), vec3(cbLight._m0[_2330].xyz));
        float _4338 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2363 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _2364 = dot(vec3(_568, _569, _570), vec3(_2357, _2358, _2359));
        float _4349 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2367 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _2368 = dot(vec3(cbLight._m0[_2330].xyz), vec3(_2357, _2358, _2359));
        float _4360 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2372 = _2349 * _2349;
        float _2376 = ((_2367 * _2367) * (_2372 + (-1.0))) + 1.0;
        float _2383 = exp2(log2(1.0 - (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0)))) * 5.0);
        float _2390 = 1.0 - _2349;
        float _2400 = (0.5 / (((_2007 * ((_2363 * _2390) + _2349)) + 9.9999999392252902907785028219223e-09) + (((_2007 * _2390) + _2349) * _2363))) * _2363;
        float _4371 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2402 = (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_2372 / ((_2376 * _2376) * 3.141590118408203125));
        float _2403 = isnan(1.0) ? _1854 : (isnan(_1854) ? 1.0 : min(_1854, 1.0));
        _2319 = (((((_2383 * _2029) + _734) * cbLight._m0[_2334].x) * _2402) * _2403) + _2205;
        _2321 = (((((_2383 * _2031) + _736) * cbLight._m0[_2334].y) * _2402) * _2403) + _2207;
        _2323 = (((((_2383 * _2032) + _737) * cbLight._m0[_2334].z) * _2402) * _2403) + _2209;
    }
    float _2538;
    float _2540;
    float _2542;
    float _2544;
    float _2546;
    float _2548;
    if (_1836.y == 0u)
    {
        float _2478 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2479 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2478;
        float _2480 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2478;
        float _2481 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2478;
        uvec4 _2493 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2494 = _2493.x;
        uint _2505 = uint((float(_2493.y) * floor(float(uint(cbSceneParam._m0[85u].y * _671) / _2494))) + floor(float(uint(cbSceneParam._m0[85u].x * _670) / _2494)));
        float _2515 = (log2(_2481 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2516 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        uint _2519 = uint(isnan(14.0) ? _2516 : (isnan(_2516) ? 14.0 : min(_2516, 14.0)));
        uvec4 _2524 = texelFetch(g_lightClusterGridBuffer, int(((_2519 << 2u) + (_2505 << 6u)) >> 2u));
        uint _2525 = _2524.x;
        uint _2526 = _2493.z;
        float _2626;
        float _2628;
        float _2630;
        float _2632;
        float _2634;
        float _2636;
        if (((((1u << ((_2526 >> 4u) & 15u)) + 4294967295u) & _2525) == 0u) || ((_2526 & 240u) == 0u))
        {
            _2626 = 0.0;
            _2628 = 0.0;
            _2630 = 0.0;
            _2632 = 0.0;
            _2634 = 0.0;
            _2636 = 0.0;
        }
        else
        {
            float _2627;
            float _2629;
            float _2631;
            float _2633;
            float _2635;
            float _2637;
            float _2779 = 0.0;
            float _2780 = 0.0;
            float _2781 = 0.0;
            float _2782 = 0.0;
            float _2783 = 0.0;
            float _2784 = 0.0;
            uint _2785 = 0u;
            uint _2794;
            bool _2795;
            for (;;)
            {
                _2794 = texelFetch(g_lightClassification, int((((_2519 << 5u) + (_2505 << 9u)) + (_2785 << 2u)) >> 2u)).x;
                _2795 = _2794 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2795)
                {
                    frontier_phi_68_pred = _2779;
                    frontier_phi_68_pred_1 = _2784;
                    frontier_phi_68_pred_2 = _2783;
                    frontier_phi_68_pred_3 = _2782;
                    frontier_phi_68_pred_4 = _2781;
                    frontier_phi_68_pred_5 = _2780;
                }
                else
                {
                    float _2924;
                    float _2925;
                    float _2926;
                    float _2927;
                    float _2928;
                    float _2929;
                    uint _2930;
                    _2924 = _2779;
                    _2925 = _2780;
                    _2926 = _2781;
                    _2927 = _2782;
                    _2928 = _2783;
                    _2929 = _2784;
                    _2930 = _2794;
                    float _2851;
                    float _2852;
                    float _2853;
                    float _2854;
                    float _2855;
                    float _2856;
                    for (;;)
                    {
                        uint _2934 = uint(findLSB(_2930)) + (_2785 << 5u);
                        uint _2931 = (_2930 + 4294967295u) & _2930;
                        uint _2936 = _2934 * 48u;
                        vec4 _2950 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2936)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 3u)).x));
                        uint _2956 = (_2934 * 48u) + 4u;
                        vec4 _2969 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2956)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 3u)).x));
                        uint _2975 = (_2934 * 48u) + 8u;
                        vec3 _2986 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2975)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 2u)).x));
                        float _2990 = _2950.x - _2479;
                        float _2991 = _2950.y - _2480;
                        float _2992 = _2950.z - _2481;
                        float _2993 = dot(vec3(_2990, _2991, _2992), vec3(_2990, _2991, _2992));
                        float _2996 = inversesqrt(_2993);
                        float _2997 = _2996 * _2990;
                        float _2998 = _2996 * _2991;
                        float _2999 = _2996 * _2992;
                        float _3000 = dot(vec3(_691, _694, _697), vec3(_2997, _2998, _2999));
                        float _3005 = 1.0 - (_2993 * _2950.w);
                        float _4397 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
                        float _3006 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                        float _3007 = sqrt(_2993) * _2969.w;
                        float _3010 = 1.39999997615814208984375 / (_3007 + 1.39999997615814208984375);
                        float _3011 = _3010 * _3010;
                        float _3014 = ((1.0 - _3011) * _3000) + _3011;
                        float _3017 = _3007 * _3007;
                        float _3021 = ((isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0))) * _3006) / ((_3017 * 0.699999988079071044921875) + 1.0);
                        float _3025 = (-0.0) - _2479;
                        float _3026 = (-0.0) - _2480;
                        float _3027 = (-0.0) - _2481;
                        float _3031 = inversesqrt(dot(vec3(_3025, _3026, _3027), vec3(_3025, _3026, _3027)));
                        float _3032 = _3031 * _3025;
                        float _3033 = _3031 * _3026;
                        float _3034 = _3031 * _3027;
                        float _3042 = exp2(log2(1.0 / ((_3017 * 3.5) + 5.0)) * 0.25);
                        float _3043 = 1.0 - _766;
                        float _3050 = sqrt(1.0 - ((1.0 - (_3043 * _3043)) * (1.0 - (_3042 * _3042))));
                        float _3051 = _3050 * _3050;
                        float _3052 = _3051 * _3051;
                        float _3053 = _3032 + _2997;
                        float _3054 = _3033 + _2998;
                        float _3055 = _3034 + _2999;
                        float _3059 = inversesqrt(dot(vec3(_3053, _3054, _3055), vec3(_3053, _3054, _3055)));
                        float _3063 = dot(vec3(_691, _694, _697), vec3(_3032, _3033, _3034));
                        float _4413 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                        float _3066 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                        float _3067 = dot(vec3(_691, _694, _697), vec3(_3059 * _3053, _3059 * _3054, _3059 * _3055));
                        float _4424 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                        float _3070 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                        float _3074 = ((_3070 * _3070) * (_3052 + (-1.0))) + 1.0;
                        float _3075 = _3010 * _3051;
                        float _3076 = _3075 * _3075;
                        float _3079 = ((1.0 - _3076) * _3000) + _3076;
                        float _4435 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                        float _3080 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                        float _3081 = 1.0 - _3051;
                        float _3091 = (0.5 / (((_3080 * ((_3066 * _3081) + _3051)) + 9.9999999392252902907785028219223e-09) + (((_3080 * _3081) + _3051) * _3066))) * _3080;
                        float _4446 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                        float _3102 = (((_3052 * 3.1415927410125732421875) * (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0)))) / ((_3074 * _3074) * ((_3017 * 2.1991131305694580078125) + 3.141590118408203125))) * _3006;
                        _2854 = (_3021 * _2969.x) + _2927;
                        _2855 = (_3021 * _2969.y) + _2928;
                        _2856 = (_3021 * _2969.z) + _2929;
                        _2851 = (_3102 * _2986.x) + _2924;
                        _2852 = (_3102 * _2986.y) + _2925;
                        _2853 = (_3102 * _2986.z) + _2926;
                        if (_2931 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2924 = _2851;
                            _2925 = _2852;
                            _2926 = _2853;
                            _2927 = _2854;
                            _2928 = _2855;
                            _2929 = _2856;
                            _2930 = _2931;
                        }
                    }
                    frontier_phi_68_pred = _2851;
                    frontier_phi_68_pred_1 = _2856;
                    frontier_phi_68_pred_2 = _2855;
                    frontier_phi_68_pred_3 = _2854;
                    frontier_phi_68_pred_4 = _2853;
                    frontier_phi_68_pred_5 = _2852;
                }
                _2627 = frontier_phi_68_pred;
                _2637 = frontier_phi_68_pred_1;
                _2635 = frontier_phi_68_pred_2;
                _2633 = frontier_phi_68_pred_3;
                _2631 = frontier_phi_68_pred_4;
                _2629 = frontier_phi_68_pred_5;
                uint _2786 = _2785 + 1u;
                if (_2786 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2779 = _2627;
                    _2780 = _2629;
                    _2781 = _2631;
                    _2782 = _2633;
                    _2783 = _2635;
                    _2784 = _2637;
                    _2785 = _2786;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2626 = _2627;
            _2628 = _2629;
            _2630 = _2631;
            _2632 = _2633;
            _2634 = _2635;
            _2636 = _2637;
        }
        uvec4 _2640 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2641 = _2640.z;
        uint _2643 = (_2641 >> 8u) & 15u;
        float _2747;
        float _2749;
        float _2751;
        float _2753;
        float _2755;
        float _2757;
        if (((4294967295u << _2643) & _2525) == 0u)
        {
            _2747 = _2626;
            _2749 = _2628;
            _2751 = _2630;
            _2753 = _2632;
            _2755 = _2634;
            _2757 = _2636;
        }
        else
        {
            float _2772 = inversesqrt(dot(vec3(_2479, _2480, _2481), vec3(_2479, _2480, _2481)));
            float _2773 = _2772 * _2479;
            float _2774 = _2772 * _2480;
            float _2775 = _2772 * _2481;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2643 < ((_2641 >> 12u) & 15u))
            {
                float _2748;
                float _2750;
                float _2752;
                float _2754;
                float _2756;
                float _2758;
                float _2907 = _2626;
                float _2908 = _2628;
                float _2909 = _2630;
                float _2910 = _2632;
                float _2911 = _2634;
                float _2912 = _2636;
                uint _2913 = _2643;
                uint _2922;
                bool _2923;
                for (;;)
                {
                    _2922 = texelFetch(g_lightClassification, int((((_2519 << 5u) + (_2505 << 9u)) + (_2913 << 2u)) >> 2u)).x;
                    _2923 = _2922 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2923)
                    {
                        frontier_phi_79_pred = _2912;
                        frontier_phi_79_pred_1 = _2911;
                        frontier_phi_79_pred_2 = _2910;
                        frontier_phi_79_pred_3 = _2909;
                        frontier_phi_79_pred_4 = _2908;
                        frontier_phi_79_pred_5 = _2907;
                    }
                    else
                    {
                        float _3116;
                        float _3117;
                        float _3118;
                        float _3119;
                        float _3120;
                        float _3121;
                        float _3409;
                        float _3410;
                        float _3411;
                        float _3412;
                        float _3413;
                        float _3414;
                        float _3129 = _2907;
                        float _3130 = _2908;
                        float _3131 = _2909;
                        float _3132 = _2910;
                        float _3133 = _2911;
                        float _3134 = _2912;
                        uint _3135 = _2922;
                        uint _3136;
                        vec4 _3161;
                        float _3162;
                        vec4 _3177;
                        vec3 _3189;
                        vec4 _3204;
                        vec4 _3219;
                        float _3265;
                        bool _3266;
                        for (;;)
                        {
                            uint _3146 = ((_2913 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3135));
                            _3136 = (_3135 + 4294967295u) & _3135;
                            uint _3148 = _3146 * 40u;
                            _3161 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3148)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 3u)).x));
                            _3162 = _3161.w;
                            uint _3164 = (_3146 * 40u) + 4u;
                            _3177 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3164)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 3u)).x));
                            uint _3179 = (_3146 * 40u) + 8u;
                            _3189 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3179)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 2u)).x));
                            uint _3191 = (_3146 * 40u) + 16u;
                            _3204 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3191)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 3u)).x));
                            uint _3206 = (_3146 * 40u) + 20u;
                            _3219 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3206)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 3u)).x));
                            uint _3221 = (_3146 * 40u) + 24u;
                            vec4 _3234 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3221)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 3u)).x));
                            uint _3240 = (_3146 * 40u) + 28u;
                            vec4 _3253 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3240)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 3u)).x));
                            _3265 = fma(_2481, _3253.z, fma(_2480, _3253.y, _3253.x * _2479)) + _3253.w;
                            _3266 = !((fma(_2481, _3234.z, fma(_2480, _3234.y, _3234.x * _2479)) + _3234.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3266)
                            {
                                float _3293 = _3161.x - _2479;
                                float _3294 = _3161.y - _2480;
                                float _3295 = _3161.z - _2481;
                                float _3296 = dot(vec3(_3293, _3294, _3295), vec3(_3293, _3294, _3295));
                                float _3299 = inversesqrt(_3296);
                                float _3300 = _3299 * _3293;
                                float _3301 = _3299 * _3294;
                                float _3302 = _3299 * _3295;
                                float _3306 = 1.0 - (_3296 / (_3162 * _3162));
                                float _4457 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                                float _3307 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
                                float _3311 = sqrt(_3296) * _3177.w;
                                float _3313 = 1.39999997615814208984375 / (_3311 + 1.39999997615814208984375);
                                float _3314 = _3313 * _3313;
                                float _3317 = ((1.0 - _3314) * dot(vec3(_3300, _3301, _3302), vec3(_691, _694, _697))) + _3314;
                                float _3320 = _3311 * _3311;
                                float _3324 = (fma(_2481, _3204.z, fma(_2480, _3204.y, _3204.x * _2479)) + _3204.w) / _3265;
                                float _3325 = (fma(_2481, _3219.z, fma(_2480, _3219.y, _3219.x * _2479)) + _3219.w) / _3265;
                                float _3329 = 1.0 - dot(vec2(_3324, _3325), vec2(_3324, _3325));
                                float _4473 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                                float _3330 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                                float _3331 = _3330 * (((isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0))) * _3307) / ((_3320 * 0.699999988079071044921875) + 1.0));
                                float _3343 = exp2(log2(1.0 / ((_3320 * 3.5) + 5.0)) * 0.25);
                                float _3344 = 1.0 - _766;
                                float _3351 = sqrt(1.0 - ((1.0 - (_3344 * _3344)) * (1.0 - (_3343 * _3343))));
                                float _3352 = _3351 * _3351;
                                float _3353 = _3352 * _3352;
                                float _3354 = _3300 - _2773;
                                float _3355 = _3301 - _2774;
                                float _3356 = _3302 - _2775;
                                float _3360 = inversesqrt(dot(vec3(_3354, _3355, _3356), vec3(_3354, _3355, _3356)));
                                float _3364 = dot(vec3(_691, _694, _697), vec3((-0.0) - _2773, (-0.0) - _2774, (-0.0) - _2775));
                                float _4484 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                                float _3367 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
                                float _3368 = dot(vec3(_691, _694, _697), vec3(_3360 * _3354, _3360 * _3355, _3360 * _3356));
                                float _4495 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                                float _3371 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                                float _3375 = ((_3371 * _3371) * (_3353 + (-1.0))) + 1.0;
                                float _3376 = _3313 * _3352;
                                float _3377 = _3376 * _3376;
                                float _3383 = ((1.0 - _3377) * dot(vec3(_691, _694, _697), vec3(_3300, _3301, _3302))) + _3377;
                                float _4506 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                                float _3384 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                                float _3385 = 1.0 - _3352;
                                float _3395 = (0.5 / (((_3384 * ((_3367 * _3385) + _3352)) + 9.9999999392252902907785028219223e-09) + (((_3384 * _3385) + _3352) * _3367))) * _3384;
                                float _4517 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                                float _3405 = (_3330 * _3307) * (((_3353 * 3.1415927410125732421875) * (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0)))) / ((_3375 * _3375) * ((_3320 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3331 * _3177.y;
                                frontier_phi_85_pred_1 = _3331 * _3177.x;
                                frontier_phi_85_pred_2 = _3405 * _3189.z;
                                frontier_phi_85_pred_3 = _3405 * _3189.y;
                                frontier_phi_85_pred_4 = _3405 * _3189.x;
                                frontier_phi_85_pred_5 = _3331 * _3177.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3413 = frontier_phi_85_pred;
                            _3412 = frontier_phi_85_pred_1;
                            _3411 = frontier_phi_85_pred_2;
                            _3410 = frontier_phi_85_pred_3;
                            _3409 = frontier_phi_85_pred_4;
                            _3414 = frontier_phi_85_pred_5;
                            _3119 = _3412 + _3132;
                            _3120 = _3413 + _3133;
                            _3121 = _3414 + _3134;
                            _3116 = _3409 + _3129;
                            _3117 = _3410 + _3130;
                            _3118 = _3411 + _3131;
                            if (_3136 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3129 = _3116;
                                _3130 = _3117;
                                _3131 = _3118;
                                _3132 = _3119;
                                _3133 = _3120;
                                _3134 = _3121;
                                _3135 = _3136;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3121;
                        frontier_phi_79_pred_1 = _3120;
                        frontier_phi_79_pred_2 = _3119;
                        frontier_phi_79_pred_3 = _3118;
                        frontier_phi_79_pred_4 = _3117;
                        frontier_phi_79_pred_5 = _3116;
                    }
                    _2758 = frontier_phi_79_pred;
                    _2756 = frontier_phi_79_pred_1;
                    _2754 = frontier_phi_79_pred_2;
                    _2752 = frontier_phi_79_pred_3;
                    _2750 = frontier_phi_79_pred_4;
                    _2748 = frontier_phi_79_pred_5;
                    uint _2914 = _2913 + 1u;
                    if (_2914 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2907 = _2748;
                        _2908 = _2750;
                        _2909 = _2752;
                        _2910 = _2754;
                        _2911 = _2756;
                        _2912 = _2758;
                        _2913 = _2914;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2752;
                frontier_phi_60_61_ladder_1 = _2758;
                frontier_phi_60_61_ladder_2 = _2756;
                frontier_phi_60_61_ladder_3 = _2754;
                frontier_phi_60_61_ladder_4 = _2750;
                frontier_phi_60_61_ladder_5 = _2748;
            }
            else
            {
                frontier_phi_60_61_ladder = _2630;
                frontier_phi_60_61_ladder_1 = _2636;
                frontier_phi_60_61_ladder_2 = _2634;
                frontier_phi_60_61_ladder_3 = _2632;
                frontier_phi_60_61_ladder_4 = _2628;
                frontier_phi_60_61_ladder_5 = _2626;
            }
            _2747 = frontier_phi_60_61_ladder_5;
            _2749 = frontier_phi_60_61_ladder_4;
            _2751 = frontier_phi_60_61_ladder;
            _2753 = frontier_phi_60_61_ladder_3;
            _2755 = frontier_phi_60_61_ladder_2;
            _2757 = frontier_phi_60_61_ladder_1;
        }
        float _2762 = isnan(1.0) ? _750 : (isnan(_750) ? 1.0 : min(_750, 1.0));
        _2538 = (_2762 * _2753) + _1971;
        _2540 = (_2762 * _2755) + _1973;
        _2542 = (_2762 * _2757) + _1975;
        _2544 = ((_2747 * _734) * _2762) + _2319;
        _2546 = ((_2749 * _736) * _2762) + _2321;
        _2548 = ((_2751 * _737) * _2762) + _2323;
    }
    else
    {
        _2538 = _1971;
        _2540 = _1973;
        _2542 = _1975;
        _2544 = _2319;
        _2546 = _2321;
        _2548 = _2323;
    }
    float _4533 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _4544 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _4555 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _2565 = ((isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (_2538 + ((isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))) * _750))) + ((_2544 + ((isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0))) * _1585)) * cbPerFrame._m0[3u].x);
    float _2566 = ((isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * (_2540 + ((isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))) * _750))) + ((_2546 + ((isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))) * _1585)) * cbPerFrame._m0[3u].x);
    float _2567 = ((isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (_2542 + ((isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))) * _750))) + ((_2548 + ((isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))) * _1585)) * cbPerFrame._m0[3u].x);
    uint _2568 = _265 + 6u;
    float _2576 = _670 / cbSceneParam._m0[86u].x;
    float _2577 = _671 / cbSceneParam._m0[86u].y;
    vec4 _2591 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2576, _2577, (log2((isnan(cbSceneParam._m0[77u].w) ? _594 : (isnan(_594) ? cbSceneParam._m0[77u].w : min(_594, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2593 = _2591.x;
    float _2594 = _2591.y;
    float _2595 = _2591.z;
    float _2596 = _2591.w;
    float _2689;
    float _2691;
    float _2693;
    float _2695;
    if (_594 > cbSceneParam._m0[78u].w)
    {
        float _2651 = isnan(_594) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _594 : min(cbSceneParam._m0[80u].w, _594));
        float _2652 = _2651 / _594;
        float _2663 = _2652 * _645;
        float _2664 = _646 * _2652;
        float _2665 = (-0.0) - _2664;
        float _2667 = _2652 * _647;
        float _2669 = (cbSceneParam._m0[77u].w * _2665) / _2651;
        float _2670 = _2669 + cbSceneParam._m0[79u].w;
        float _2671 = cbSceneParam._m0[79u].w - _2664;
        float _2677 = sqrt(((_2663 * _2663) + (_2664 * _2664)) + (_2667 * _2667));
        float _2680 = (1.0 - (cbSceneParam._m0[77u].w / _2651)) * _2677;
        float _2685 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2687 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2864;
        if (abs((_2665 - _2669) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2864 = ((((_2670 > 0.0) ? exp2(_2685 * _2670) : (2.0 - exp2(_2687 * _2670))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2680;
        }
        else
        {
            float _2808 = 1.0 / cbSceneParam._m0[80u].x;
            float _2809 = isnan(_2671) ? _2670 : (isnan(_2670) ? _2671 : max(_2670, _2671));
            float _2810 = isnan(_2671) ? _2670 : (isnan(_2670) ? _2671 : min(_2670, _2671));
            float _2819 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : min(_2809, 0.0));
            float _2820 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : min(_2810, 0.0));
            _2864 = ((abs(_2677 / _2665) * cbSceneParam._m0[80u].y) * ((((_2819 - _2820) * 2.0) - ((exp2(_2685 * (isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0)))) - exp2(_2685 * (isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0))))) * _2808)) - ((exp2(_2687 * _2819) - exp2(_2687 * _2820)) * _2808))) + (_2680 * cbSceneParam._m0[80u].z);
        }
        vec4 _2866 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2576, _2577, 1.0), 0.0);
        float _2875 = exp2((_2864 * (-1.44269502162933349609375)) * (1.0 - _2866.w));
        float _2876 = log2(_2875);
        float _2892 = log2(_2596);
        _2689 = (exp2(_2892 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2876 * cbSceneParam._m0[78u].x)) * _2866.x) / cbSceneParam._m0[78u].x)) + _2593;
        _2691 = (exp2(_2892 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2876 * cbSceneParam._m0[78u].y)) * _2866.y) / cbSceneParam._m0[78u].y)) + _2594;
        _2693 = (exp2(_2892 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2876 * cbSceneParam._m0[78u].z)) * _2866.z) / cbSceneParam._m0[78u].z)) + _2595;
        _2695 = _2875 * _2596;
    }
    else
    {
        _2689 = _2593;
        _2691 = _2594;
        _2693 = _2595;
        _2695 = _2596;
    }
    bool _2902;
    vec4 _2705;
    vec4 _2727;
    float _2729;
    float _2733;
    float _2734;
    float _2735;
    float _2736;
    bool _2746;
    for (;;)
    {
        _2705 = cbMatDynParam._m0[0u];
        float _2707 = roundEven(_2705.y);
        bool _2708 = _2707 == 3.0;
        float _2709 = log2(_2695);
        float _2716 = exp2(_2709 * cbSceneParam._m0[78u].x) * _2565;
        float _2717 = exp2(_2709 * cbSceneParam._m0[78u].y) * _2566;
        float _2718 = exp2(_2709 * cbSceneParam._m0[78u].z) * _2567;
        float _2725 = _658 + (-0.5);
        _2727 = cbMtdParam._m0[1u];
        _2729 = _2727.y * _2725;
        float _2732 = (_2707 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2733 = _2732 * (_2708 ? _2716 : (_2716 + (cbSceneParam._m0[72u].w * _2689)));
        _2734 = _2732 * (_2708 ? _2717 : (_2717 + (cbSceneParam._m0[72u].w * _2691)));
        _2735 = _2732 * (_2708 ? _2718 : (_2718 + (cbSceneParam._m0[72u].w * _2693)));
        _2736 = _2725 * 0.999000012874603271484375;
        _2746 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2746)
        {
            if ((cbInstanceData._m0[_265 + 7u].x + _2736) < 0.5)
            {
                _2902 = true;
                break;
            }
        }
        uint _2843 = _710 + uint(_2705.w);
        if ((cbInstanceData._m0[_2843].w < 1.0) && ((cbInstanceData._m0[_2843].w + _2736) < 0.5))
        {
            _2902 = true;
            break;
        }
        if ((_2729 + 1.0) < _2727.x)
        {
            _2902 = true;
            break;
        }
        _2902 = false;
        break;
    }
    float _3107;
    if (_2902)
    {
        discard_state = true;
        _3107 = 0.0;
    }
    else
    {
        _3107 = cbInstanceData._m0[_2568].w;
    }
    SV_Target.x = _2733;
    SV_Target.y = _2734;
    SV_Target.z = _2735;
    SV_Target.w = _3107;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2568].w;
    discard_exit();
}


