#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _909;
float _3320;
float _3321;
float _3322;
float _3323;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _233 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _239 = _233.x * cbMtdParam._m0[9u].x;
    float _240 = _233.y * cbMtdParam._m0[9u].y;
    float _241 = _233.z * cbMtdParam._m0[9u].z;
    vec4 _254 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _258 = _254.z;
    float _263 = (_254.x * 2.0) + (-1.0);
    float _265 = (_254.y * 2.0) + (-1.0);
    float _266 = dot(vec2(_263, _265), vec2(_263, _265));
    float _3332 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _272 = sqrt(1.0 - (isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0))));
    vec4 _285 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _287 = _285.x;
    float _292 = cbMtdParam._m0[22u].x + _254.w;
    float _296 = gl_FragCoord.x * 0.125;
    float _298 = gl_FragCoord.y * 0.125;
    float _309 = fma(_272, _203 * NORMAL.x, fma(_265, _210 * TANGENT.x, (_196 * _188) * _263));
    float _312 = fma(_272, _203 * NORMAL.y, fma(_265, _210 * TANGENT.y, (_196 * _189) * _263));
    float _315 = fma(_272, _203 * NORMAL.z, fma(_265, _210 * TANGENT.z, (_196 * _190) * _263));
    float _319 = inversesqrt(dot(vec3(_309, _312, _315), vec3(_309, _312, _315)));
    float _320 = _319 * _309;
    float _321 = _319 * _312;
    float _322 = _319 * _315;
    float _3343 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _323 = isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0));
    float _3354 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _3365 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3376 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3387 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3398 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    float _328 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_296, _298)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _348 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _390 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _400 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _390);
    float _401 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _390);
    float _402 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _390);
    float _406 = inversesqrt(dot(vec3(_400, _401, _402), vec3(_400, _401, _402)));
    float _407 = _400 * _406;
    float _408 = _401 * _406;
    float _409 = _402 * _406;
    vec4 _411 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_296, _298));
    float _413 = _411.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _590 = sqrt(((_400 * _400) + (_401 * _401)) + (_402 * _402));
        float _596 = (cbMatDynParam._m0[5u].x * _590) + cbMatDynParam._m0[5u].y;
        float _3409 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
        float _597 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
        float _601 = (cbMatDynParam._m0[5u].z * _590) + cbMatDynParam._m0[5u].w;
        float _3420 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0))) - _597)) + _597) < ((_413 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _425 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _426 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _446 = fma(_322, cbSceneParam._m0[5u].z, fma(_321, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _320));
    float _449 = fma(_322, cbSceneParam._m0[6u].z, fma(_321, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _320));
    float _452 = fma(_322, cbSceneParam._m0[7u].z, fma(_321, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _320));
    uint _465 = uint(roundEven(NORMAL.w)) * 13u;
    uint _467 = _465 + 9u;
    uint _468 = _467 + uint(cbMatDynParam._m0[0u].w);
    float _474 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0)))) * cbInstanceData._m0[_468].x;
    float _475 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0)))) * cbInstanceData._m0[_468].y;
    float _476 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0)))) * cbInstanceData._m0[_468].z;
    float _3431 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _477 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
    float _3442 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _478 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
    float _3453 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _479 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
    float _480 = 1.0 - _328;
    float _481 = _477 * _480;
    float _482 = _478 * _480;
    float _483 = _479 * _480;
    float _488 = (_477 + (-0.039999999105930328369140625)) * _328;
    float _489 = (_478 + (-0.039999999105930328369140625)) * _328;
    float _490 = (_479 + (-0.039999999105930328369140625)) * _328;
    float _491 = _488 + 0.039999999105930328369140625;
    float _493 = _489 + 0.039999999105930328369140625;
    float _494 = _490 + 0.039999999105930328369140625;
    vec4 _503 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _425, cbSceneParam._m0[86u].y * _426));
    float _507 = ((isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0))) * TEXCOORD_5.w) * _503.x;
    float _508 = dot(vec3(_320, _321, _322), vec3(_407, _408, _409));
    float _511 = _508 * 2.0;
    float _515 = (_511 * _320) - _407;
    float _516 = (_511 * _321) - _408;
    float _517 = (_511 * _322) - _409;
    float _521 = abs(dot(vec3(_407, _408, _409), vec3(_320, _321, _322)));
    float _3464 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _523 = sqrt(_323);
    float _536 = exp2((_523 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_523 * 3.0));
    float _542 = (1.0 - _536) * ((_523 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _543 = _536 * _523;
    float _571 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _575 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _579 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _908;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _633 = fma(_579, cbModelParam._m0[26u].z, fma(_575, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _571));
        float _637 = fma(_579, cbModelParam._m0[27u].z, fma(_575, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _571));
        float _641 = fma(_579, cbModelParam._m0[28u].z, fma(_575, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _571));
        float _666 = _571 + _320;
        float _667 = _575 + _321;
        float _668 = _579 + _322;
        float _678 = fma(_668, cbModelParam._m0[26u].z, fma(_667, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _666)) - _633;
        float _679 = fma(_668, cbModelParam._m0[27u].z, fma(_667, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _666)) - _637;
        float _680 = fma(_668, cbModelParam._m0[28u].z, fma(_667, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _666)) - _641;
        float _684 = inversesqrt(dot(vec3(_678, _679, _680), vec3(_678, _679, _680)));
        float _697 = ((_684 * _678) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_633 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _698 = ((_684 * _679) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_637 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _699 = ((_684 * _680) / cbModelParam._m0[34u].z) + ((((((_641 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _702 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_697, _698, _699), 0.0);
        vec4 _709 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_697, _698, _699), 0.0);
        vec4 _716 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_697, _698, _699), 0.0);
        vec4 _723 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_697, _698, _699), 0.0);
        float _736 = exp2((_702.w + (-0.5)) * 20.0) * 2.0;
        float _737 = _736 * (_702.x + (-0.5));
        float _738 = _736 * (_702.y + (-0.5));
        float _739 = _736 * (_702.z + (-0.5));
        float _746 = exp2((_709.w + (-0.5)) * 20.0) * 2.0;
        float _747 = _746 * (_709.x + (-0.5));
        float _748 = _746 * (_709.y + (-0.5));
        float _749 = _746 * (_709.z + (-0.5));
        float _756 = exp2((_716.w + (-0.5)) * 20.0) * 2.0;
        float _757 = _756 * (_716.x + (-0.5));
        float _758 = _756 * (_716.y + (-0.5));
        float _759 = _756 * (_716.z + (-0.5));
        float _766 = exp2((_723.w + (-0.5)) * 20.0) * 2.0;
        float _767 = _766 * (_723.x + (-0.5));
        float _768 = _766 * (_723.y + (-0.5));
        float _769 = _766 * (_723.z + (-0.5));
        float _770 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _771 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _772 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _773 = _737 * 0.5;
        float _774 = _747 * 0.5;
        float _775 = _757 * 0.5;
        float _776 = dot(vec3(_773, _774, _775), vec3(_773, _774, _775));
        float _781 = (_776 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_776);
        float _790 = (dot(vec3(_320, _321, _322), vec3(_781 * _773, _781 * _774, _781 * _775)) + 1.0) * 0.5;
        float _3490 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _800 = sqrt(((_774 * _774) + (_773 * _773)) + (_775 * _775)) / (_770 + 9.9999997473787516355514526367188e-06);
        float _3501 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _801 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
        float _802 = _801 * 2.0;
        float _806 = (1.0 - _801) / (_801 + 1.0);
        float _3512 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _807 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
        float _816 = ((((1.0 - _807) * (_802 + 2.0)) * exp2(log2(isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0))) * (_802 + 1.0))) + _807) * _770;
        float _817 = _738 * 0.5;
        float _818 = _748 * 0.5;
        float _819 = _758 * 0.5;
        float _820 = dot(vec3(_817, _818, _819), vec3(_817, _818, _819));
        float _825 = (_820 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_820);
        float _833 = (dot(vec3(_320, _321, _322), vec3(_825 * _817, _825 * _818, _825 * _819)) + 1.0) * 0.5;
        float _3523 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _842 = sqrt(((_818 * _818) + (_817 * _817)) + (_819 * _819)) / (_771 + 9.9999997473787516355514526367188e-06);
        float _3534 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _843 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
        float _844 = _843 * 2.0;
        float _848 = (1.0 - _843) / (_843 + 1.0);
        float _3545 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _849 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _858 = ((((1.0 - _849) * (_844 + 2.0)) * exp2(log2(isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0))) * (_844 + 1.0))) + _849) * _771;
        float _859 = _739 * 0.5;
        float _860 = _749 * 0.5;
        float _861 = _759 * 0.5;
        float _862 = dot(vec3(_859, _860, _861), vec3(_859, _860, _861));
        float _867 = (_862 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_862);
        float _875 = (dot(vec3(_320, _321, _322), vec3(_867 * _859, _867 * _860, _867 * _861)) + 1.0) * 0.5;
        float _3556 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _884 = sqrt(((_860 * _860) + (_859 * _859)) + (_861 * _861)) / (_772 + 9.9999997473787516355514526367188e-06);
        float _3567 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _885 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _886 = _885 * 2.0;
        float _890 = (1.0 - _885) / (_885 + 1.0);
        float _3578 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _891 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _900 = ((((1.0 - _891) * (_886 + 2.0)) * exp2(log2(isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))) * (_886 + 1.0))) + _891) * _772;
        _908 = _739;
        _910 = _738;
        _911 = _737;
        _912 = _749;
        _913 = _748;
        _914 = _747;
        _915 = _759;
        _916 = _758;
        _917 = _757;
        _918 = _772;
        _919 = _771;
        _920 = _770;
        _921 = cbModelParam._m0[36u].z * (isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0)));
        _922 = cbModelParam._m0[36u].z * (isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0)));
        _923 = cbModelParam._m0[36u].z * (isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0)));
    }
    else
    {
        _908 = _909;
        _910 = _909;
        _911 = _909;
        _912 = _909;
        _913 = _909;
        _914 = _909;
        _915 = _909;
        _916 = _909;
        _917 = _909;
        _918 = _909;
        _919 = _909;
        _920 = _909;
        _921 = 0.0;
        _922 = 0.0;
        _923 = 0.0;
    }
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _948 = fma(_579, cbModelParam._m0[30u].z, fma(_575, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _571));
        float _952 = fma(_579, cbModelParam._m0[31u].z, fma(_575, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _571));
        float _956 = fma(_579, cbModelParam._m0[32u].z, fma(_575, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _571));
        float _979 = _571 + _320;
        float _980 = _575 + _321;
        float _981 = _579 + _322;
        float _991 = fma(_981, cbModelParam._m0[30u].z, fma(_980, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _979)) - _948;
        float _992 = fma(_981, cbModelParam._m0[31u].z, fma(_980, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _979)) - _952;
        float _993 = fma(_981, cbModelParam._m0[32u].z, fma(_980, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _979)) - _956;
        float _997 = inversesqrt(dot(vec3(_991, _992, _993), vec3(_991, _992, _993)));
        float _1010 = ((_997 * _991) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_948 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1011 = ((_997 * _992) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_952 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1012 = ((_997 * _993) / cbModelParam._m0[35u].z) + ((((((_956 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1010, _1011, _1012), 0.0);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1010, _1011, _1012), 0.0);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1010, _1011, _1012), 0.0);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1010, _1011, _1012), 0.0);
        float _1047 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1048 = _1047 * (_1014.x + (-0.5));
        float _1049 = _1047 * (_1014.y + (-0.5));
        float _1050 = _1047 * (_1014.z + (-0.5));
        float _1057 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1021.x + (-0.5));
        float _1059 = _1057 * (_1021.y + (-0.5));
        float _1060 = _1057 * (_1021.z + (-0.5));
        float _1067 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1028.x + (-0.5));
        float _1069 = _1067 * (_1028.y + (-0.5));
        float _1070 = _1067 * (_1028.z + (-0.5));
        float _1077 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1078 = _1077 * (_1035.x + (-0.5));
        float _1079 = _1077 * (_1035.y + (-0.5));
        float _1080 = _1077 * (_1035.z + (-0.5));
        float _1081 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1082 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1083 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1084 = _1048 * 0.5;
        float _1085 = _1058 * 0.5;
        float _1086 = _1068 * 0.5;
        float _1087 = dot(vec3(_1084, _1085, _1086), vec3(_1084, _1085, _1086));
        float _1092 = (_1087 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1087);
        float _1100 = (dot(vec3(_320, _321, _322), vec3(_1092 * _1084, _1092 * _1085, _1092 * _1086)) + 1.0) * 0.5;
        float _3619 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1109 = sqrt(((_1085 * _1085) + (_1084 * _1084)) + (_1086 * _1086)) / (_1081 + 9.9999997473787516355514526367188e-06);
        float _3630 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
        float _1111 = _1110 * 2.0;
        float _1115 = (1.0 - _1110) / (_1110 + 1.0);
        float _3641 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
        float _1125 = ((((1.0 - _1116) * (_1111 + 2.0)) * exp2(log2(isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0))) * (_1111 + 1.0))) + _1116) * _1081;
        float _1126 = _1049 * 0.5;
        float _1127 = _1059 * 0.5;
        float _1128 = _1069 * 0.5;
        float _1129 = dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128));
        float _1134 = (_1129 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1129);
        float _1142 = (dot(vec3(_320, _321, _322), vec3(_1134 * _1126, _1134 * _1127, _1134 * _1128)) + 1.0) * 0.5;
        float _3652 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1151 = sqrt(((_1127 * _1127) + (_1126 * _1126)) + (_1128 * _1128)) / (_1082 + 9.9999997473787516355514526367188e-06);
        float _3663 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
        float _1153 = _1152 * 2.0;
        float _1157 = (1.0 - _1152) / (_1152 + 1.0);
        float _3674 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _1167 = ((((1.0 - _1158) * (_1153 + 2.0)) * exp2(log2(isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0))) * (_1153 + 1.0))) + _1158) * _1082;
        float _1168 = _1050 * 0.5;
        float _1169 = _1060 * 0.5;
        float _1170 = _1070 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1184 = (dot(vec3(_320, _321, _322), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _3685 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1193 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1083 + 9.9999997473787516355514526367188e-06);
        float _3696 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _3707 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))) * (_1195 + 1.0))) + _1200) * _1083;
        _1217 = _1050;
        _1218 = _1049;
        _1219 = _1048;
        _1220 = _1060;
        _1221 = _1059;
        _1222 = _1058;
        _1223 = _1070;
        _1224 = _1069;
        _1225 = _1068;
        _1226 = _1083;
        _1227 = _1082;
        _1228 = _1081;
        _1229 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0)));
        _1230 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)));
        _1231 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
    }
    else
    {
        _1217 = _909;
        _1218 = _909;
        _1219 = _909;
        _1220 = _909;
        _1221 = _909;
        _1222 = _909;
        _1223 = _909;
        _1224 = _909;
        _1225 = _909;
        _1226 = _909;
        _1227 = _909;
        _1228 = _909;
        _1229 = 0.0;
        _1230 = 0.0;
        _1231 = 0.0;
    }
    float _1241 = (cbModelParam._m0[1u].x * (_1229 - _921)) + _921;
    float _1242 = (cbModelParam._m0[1u].x * (_1230 - _922)) + _922;
    float _1243 = (cbModelParam._m0[1u].x * (_1231 - _923)) + _923;
    float _1264 = fma(_1243, cbSceneParam._m0[89u].z, fma(_1242, cbSceneParam._m0[89u].y, _1241 * cbSceneParam._m0[89u].x));
    float _1267 = fma(_1243, cbSceneParam._m0[90u].z, fma(_1242, cbSceneParam._m0[90u].y, _1241 * cbSceneParam._m0[90u].x));
    float _1270 = fma(_1243, cbSceneParam._m0[91u].z, fma(_1242, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1241));
    float _1285 = _515 * 0.5;
    float _1286 = _516 * 0.5;
    float _1287 = _517 * 0.5;
    float _1288 = dot(vec4(_1285, _1286, _1287, 1.0), vec4(_1219, _1222, _1225, _1228));
    float _1291 = dot(vec4(_1285, _1286, _1287, 1.0), vec4(_1218, _1221, _1224, _1227));
    float _1294 = dot(vec4(_1285, _1286, _1287, 1.0), vec4(_1217, _1220, _1223, _1226));
    float _1328;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1301 = dot(vec4(_1285, _1286, _1287, 1.0), vec4(_908, _912, _915, _918));
        float _1305 = dot(vec4(_1285, _1286, _1287, 1.0), vec4(_910, _913, _916, _919));
        float _1309 = dot(vec4(_1285, _1286, _1287, 1.0), vec4(_911, _914, _917, _920));
        float _1316 = dot(vec4(cbModelParam._m0[39u]), vec4(_1285, _1286, _1287, 1.0));
        _1328 = dot(vec3(isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)), isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)), isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1316) ? 0.0 : (isnan(0.0) ? _1316 : max(0.0, _1316))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1328 = 1.0;
    }
    float _1339;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1330 = dot(vec4(cbModelParam._m0[40u]), vec4(_1285, _1286, _1287, 1.0));
        _1339 = dot(vec3(isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)), isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)), isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1330) ? 0.0 : (isnan(0.0) ? _1330 : max(0.0, _1330))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1339 = 1.0;
    }
    float _1343 = (_1339 * cbModelParam._m0[1u].x) + (_1328 * (1.0 - cbModelParam._m0[1u].x));
    float _1353 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _323);
    float _1354 = isnan(_1353) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1353 : min(cbModelParam._m0[25u].z, _1353));
    float _1436;
    float _1438;
    float _1440;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1403 = fma(_579, cbModelParam._m0[13u].z, fma(_575, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _571)) + cbModelParam._m0[13u].w;
        float _1407 = fma(_579, cbModelParam._m0[14u].z, fma(_575, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _571)) + cbModelParam._m0[14u].w;
        float _1411 = fma(_579, cbModelParam._m0[15u].z, fma(_575, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _571)) + cbModelParam._m0[15u].w;
        float _1414 = fma(_517, cbModelParam._m0[13u].z, fma(_516, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _515));
        float _1417 = fma(_517, cbModelParam._m0[14u].z, fma(_516, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _515));
        float _1420 = fma(_517, cbModelParam._m0[15u].z, fma(_516, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _515));
        float _1448;
        if (_1414 > 0.0)
        {
            _1448 = abs((1.0 - _1403) / _1414);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1414 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1403 + 1.0) / _1414);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1448 = frontier_phi_19_17_ladder;
        }
        float _1675;
        if (_1417 > 0.0)
        {
            _1675 = abs((1.0 - _1407) / _1417);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1417 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1407 + 1.0) / _1417);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1675 = frontier_phi_28_24_ladder;
        }
        float _1932;
        if (_1420 > 0.0)
        {
            _1932 = abs((1.0 - _1411) / _1420);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1420 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1411 + 1.0) / _1420);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1932 = frontier_phi_40_35_ladder;
        }
        float _1934 = isnan(_1675) ? _1448 : (isnan(_1448) ? _1675 : min(_1448, _1675));
        float _1935 = isnan(_1932) ? _1934 : (isnan(_1934) ? _1932 : min(_1934, _1932));
        float _1939 = (_1935 * _1414) + _1403;
        float _1940 = (_1935 * _1417) + _1407;
        float _1941 = (_1935 * _1420) + _1411;
        float _1942 = _1935 * 9.9999997473787516355514526367188e-05;
        float _1944 = (-1.0) - _1942;
        float _1946 = _1942 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1941 > _1946) || ((_1941 < _1944) || ((_1940 > _1946) || ((_1940 < _1944) || ((_1939 < _1944) || (_1939 > _1946))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2069 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1941, cbModelParam._m0[9u].z, fma(_1940, cbModelParam._m0[9u].y, _1939 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1941, cbModelParam._m0[10u].z, fma(_1940, cbModelParam._m0[10u].y, _1939 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1941, cbModelParam._m0[11u].z, fma(_1940, cbModelParam._m0[11u].y, _1939 * cbModelParam._m0[11u].x))), _1354);
            frontier_phi_18_40_ladder = _2069.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2069.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2069.x * cbModelParam._m0[1u].y;
        }
        _1436 = frontier_phi_18_40_ladder_2;
        _1438 = frontier_phi_18_40_ladder_1;
        _1440 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1424 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_515, _516, _517), _1354);
        _1436 = _1424.x * cbModelParam._m0[1u].y;
        _1438 = _1424.y * cbModelParam._m0[1u].y;
        _1440 = _1424.z * cbModelParam._m0[1u].y;
    }
    float _1444 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _323);
    float _1445 = isnan(_1444) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1444 : min(cbModelParam._m0[25u].w, _1444));
    float _1537;
    float _1539;
    float _1541;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1501 = fma(_579, cbModelParam._m0[21u].z, fma(_575, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _571)) + cbModelParam._m0[21u].w;
        float _1505 = fma(_579, cbModelParam._m0[22u].z, fma(_575, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _571)) + cbModelParam._m0[22u].w;
        float _1509 = fma(_579, cbModelParam._m0[23u].z, fma(_575, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _571)) + cbModelParam._m0[23u].w;
        float _1512 = fma(_517, cbModelParam._m0[21u].z, fma(_516, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _515));
        float _1515 = fma(_517, cbModelParam._m0[22u].z, fma(_516, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _515));
        float _1518 = fma(_517, cbModelParam._m0[23u].z, fma(_516, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _515));
        float _1680;
        if (_1512 > 0.0)
        {
            _1680 = abs((1.0 - _1501) / _1512);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1512 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1501 + 1.0) / _1512);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1680 = frontier_phi_30_26_ladder;
        }
        float _1959;
        if (_1515 > 0.0)
        {
            _1959 = abs((1.0 - _1505) / _1515);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1515 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1505 + 1.0) / _1515);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1959 = frontier_phi_42_37_ladder;
        }
        float _2172;
        if (_1518 > 0.0)
        {
            _2172 = abs((1.0 - _1509) / _1518);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1509 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2172 = frontier_phi_51_48_ladder;
        }
        float _2174 = isnan(_1959) ? _1680 : (isnan(_1680) ? _1959 : min(_1680, _1959));
        float _2175 = isnan(_2172) ? _2174 : (isnan(_2174) ? _2172 : min(_2174, _2172));
        float _2179 = (_2175 * _1512) + _1501;
        float _2180 = (_2175 * _1515) + _1505;
        float _2181 = (_2175 * _1518) + _1509;
        float _2182 = _2175 * 9.9999997473787516355514526367188e-05;
        float _2183 = (-1.0) - _2182;
        float _2185 = _2182 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2181 > _2185) || ((_2181 < _2183) || ((_2180 > _2185) || ((_2180 < _2183) || ((_2179 < _2183) || (_2179 > _2185))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2380 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2181, cbModelParam._m0[17u].z, fma(_2180, cbModelParam._m0[17u].y, _2179 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2181, cbModelParam._m0[18u].z, fma(_2180, cbModelParam._m0[18u].y, _2179 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2181, cbModelParam._m0[19u].z, fma(_2180, cbModelParam._m0[19u].y, _2179 * cbModelParam._m0[19u].x))), _1445);
            frontier_phi_27_51_ladder = _2380.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2380.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2380.x * cbModelParam._m0[1u].z;
        }
        _1537 = frontier_phi_27_51_ladder_2;
        _1539 = frontier_phi_27_51_ladder_1;
        _1541 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1521 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_515, _516, _517), _1445);
        _1537 = _1521.x * cbModelParam._m0[1u].z;
        _1539 = _1521.y * cbModelParam._m0[1u].z;
        _1541 = _1521.z * cbModelParam._m0[1u].z;
    }
    float _1554 = (((_542 * _491) + _543) * _507) * ((cbModelParam._m0[1u].w * (_1537 - _1436)) + _1436);
    float _1556 = (((_542 * _493) + _543) * _507) * ((cbModelParam._m0[1u].w * (_1539 - _1438)) + _1438);
    float _1558 = (((_542 * _494) + _543) * _507) * ((cbModelParam._m0[1u].w * (_1541 - _1440)) + _1440);
    float _1561 = fma(_1558, cbSceneParam._m0[89u].z, fma(_1556, cbSceneParam._m0[89u].y, _1554 * cbSceneParam._m0[89u].x));
    float _1564 = fma(_1558, cbSceneParam._m0[90u].z, fma(_1556, cbSceneParam._m0[90u].y, _1554 * cbSceneParam._m0[90u].x));
    float _1567 = fma(_1558, cbSceneParam._m0[91u].z, fma(_1556, cbSceneParam._m0[91u].y, _1554 * cbSceneParam._m0[91u].x));
    vec4 _1575 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_425, _426));
    float _1577 = _1575.w;
    float _1589 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1577);
    float _1590 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1577);
    float _1591 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1577);
    uvec4 _1595 = floatBitsToUint(cbInstanceData._m0[_465 + 5u]);
    uint _1597 = _1595.x * 14u;
    uint _1598 = _1597 + 13u;
    float _1605 = _507 + (-1.0);
    float _1610 = (cbLight._m0[_1598].x * _1605) + 1.0;
    float _1611 = (cbLight._m0[_1598].y * _1605) + 1.0;
    float _1612 = (cbLight._m0[_1598].z * _1605) + 1.0;
    float _1613 = (cbLight._m0[_1598].w * _1605) + 1.0;
    uint _1614 = _1597 + 5u;
    float _1620 = isnan(1.0) ? _1611 : (isnan(_1611) ? 1.0 : min(_1611, 1.0));
    uint _1624 = _1597 + 4u;
    float _1634 = isnan(1.0) ? _1610 : (isnan(_1610) ? 1.0 : min(_1610, 1.0));
    uint _1638 = _1597 | 1u;
    float _1649 = dot(vec3(cbLight._m0[_1597].xyz), vec3(_320, _321, _322));
    float _1652 = dot(vec3(cbLight._m0[_1638].xyz), vec3(_320, _321, _322));
    float _3843 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
    float _3854 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
    float _1657 = (isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * 0.3183098733425140380859375;
    float _1659 = (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * 0.3183098733425140380859375;
    float _1666 = ((cbLight._m0[_1614].x * _1620) * _1659) + (((cbLight._m0[_1624].x * _1589) * _1634) * _1657);
    float _1667 = ((_1620 * cbLight._m0[_1614].y) * _1659) + (((cbLight._m0[_1624].y * _1590) * _1634) * _1657);
    float _1668 = ((_1620 * cbLight._m0[_1614].z) * _1659) + (((cbLight._m0[_1624].z * _1591) * _1634) * _1657);
    uvec4 _1672 = floatBitsToUint(cbLight._m0[_1597 + 12u]);
    bool _1674 = _1672.x == 0u;
    float _1685;
    float _1687;
    float _1689;
    if (_1674)
    {
        _1685 = _1666;
        _1687 = _1667;
        _1689 = _1668;
    }
    else
    {
        uint _1693 = _1597 + 6u;
        float _1709 = (dot(vec3(cbLight._m0[_1597 + 2u].xyz), vec3(_320, _321, _322)) * 0.5) + 0.5;
        float _1710 = _1709 * _1709;
        float _3865 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1711 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1712 = isnan(1.0) ? _1612 : (isnan(_1612) ? 1.0 : min(_1612, 1.0));
        _1685 = (((cbLight._m0[_1693].x * 0.3183098733425140380859375) * _1711) * _1712) + _1666;
        _1687 = (((cbLight._m0[_1693].y * 0.3183098733425140380859375) * _1711) * _1712) + _1667;
        _1689 = (((cbLight._m0[_1693].z * 0.3183098733425140380859375) * _1711) * _1712) + _1668;
    }
    bool _1692 = _1672.y == 0u;
    float _1730;
    float _1732;
    float _1734;
    if (_1692)
    {
        _1730 = _1685;
        _1732 = _1687;
        _1734 = _1689;
    }
    else
    {
        uint _1903 = _1597 + 7u;
        float _1919 = (dot(vec3(cbLight._m0[_1597 + 3u].xyz), vec3(_320, _321, _322)) * 0.5) + 0.5;
        float _1920 = _1919 * _1919;
        float _3881 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
        float _1921 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1922 = isnan(1.0) ? _1613 : (isnan(_1613) ? 1.0 : min(_1613, 1.0));
        _1730 = (((cbLight._m0[_1903].x * 0.3183098733425140380859375) * _1921) * _1922) + _1685;
        _1732 = (((cbLight._m0[_1903].y * 0.3183098733425140380859375) * _1921) * _1922) + _1687;
        _1734 = (((cbLight._m0[_1903].z * 0.3183098733425140380859375) * _1921) * _1922) + _1689;
    }
    uint _1737 = _1597 + 8u;
    float _1750 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1597].w)) * _323) * 0.949999988079071044921875);
    float _1751 = _1750 * _1750;
    float _1752 = cbLight._m0[_1597].x + _407;
    float _1753 = cbLight._m0[_1597].y + _408;
    float _1754 = cbLight._m0[_1597].z + _409;
    float _1758 = inversesqrt(dot(vec3(_1752, _1753, _1754), vec3(_1752, _1753, _1754)));
    float _1759 = _1758 * _1752;
    float _1760 = _1758 * _1753;
    float _1761 = _1758 * _1754;
    float _1762 = dot(vec3(_320, _321, _322), vec3(cbLight._m0[_1597].xyz));
    float _3897 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
    float _1765 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _3908 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _1766 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _1767 = dot(vec3(_320, _321, _322), vec3(_1759, _1760, _1761));
    float _3919 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
    float _1770 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _1771 = dot(vec3(cbLight._m0[_1597].xyz), vec3(_1759, _1760, _1761));
    float _3930 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _1775 = _1751 * _1751;
    float _1779 = ((_1770 * _1770) * (_1775 + (-1.0))) + 1.0;
    float _1787 = exp2(log2(1.0 - (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0)))) * 5.0);
    float _1788 = 0.959999978542327880859375 - _488;
    float _1790 = 0.959999978542327880859375 - _489;
    float _1791 = 0.959999978542327880859375 - _490;
    float _1798 = 1.0 - _1751;
    float _1809 = (0.5 / (((_1766 * ((_1765 * _1798) + _1751)) + 9.9999999392252902907785028219223e-09) + (((_1766 * _1798) + _1751) * _1765))) * _1765;
    float _3941 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _1811 = (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * (_1775 / ((_1779 * _1779) * 3.141590118408203125));
    uint _1825 = _1597 + 9u;
    float _1836 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1638].w)) * _323) * 0.949999988079071044921875);
    float _1837 = _1836 * _1836;
    float _1838 = cbLight._m0[_1638].x + _407;
    float _1839 = cbLight._m0[_1638].y + _408;
    float _1840 = cbLight._m0[_1638].z + _409;
    float _1844 = inversesqrt(dot(vec3(_1838, _1839, _1840), vec3(_1838, _1839, _1840)));
    float _1845 = _1844 * _1838;
    float _1846 = _1844 * _1839;
    float _1847 = _1844 * _1840;
    float _1848 = dot(vec3(_320, _321, _322), vec3(cbLight._m0[_1638].xyz));
    float _3952 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _1851 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _1852 = dot(vec3(_320, _321, _322), vec3(_1845, _1846, _1847));
    float _3963 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1855 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _1856 = dot(vec3(cbLight._m0[_1638].xyz), vec3(_1845, _1846, _1847));
    float _3974 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
    float _1860 = _1837 * _1837;
    float _1864 = ((_1855 * _1855) * (_1860 + (-1.0))) + 1.0;
    float _1871 = exp2(log2(1.0 - (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0)))) * 5.0);
    float _1878 = 1.0 - _1837;
    float _1888 = (0.5 / (((_1766 * ((_1851 * _1878) + _1837)) + 9.9999999392252902907785028219223e-09) + (((_1766 * _1878) + _1837) * _1851))) * _1851;
    float _3985 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _1890 = (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1860 / ((_1864 * _1864) * 3.141590118408203125));
    float _1900 = (((((_1871 * _1788) + _491) * cbLight._m0[_1825].x) * _1890) * _1620) + ((((cbLight._m0[_1737].x * _1589) * ((_1787 * _1788) + _491)) * _1811) * _1634);
    float _1901 = (((((_1871 * _1790) + _493) * cbLight._m0[_1825].y) * _1890) * _1620) + ((((cbLight._m0[_1737].y * _1590) * ((_1787 * _1790) + _493)) * _1811) * _1634);
    float _1902 = (((((_1871 * _1791) + _494) * cbLight._m0[_1825].z) * _1890) * _1620) + ((((cbLight._m0[_1737].z * _1591) * ((_1787 * _1791) + _494)) * _1811) * _1634);
    float _1964;
    float _1966;
    float _1968;
    if (_1674)
    {
        _1964 = _1900;
        _1966 = _1901;
        _1968 = _1902;
    }
    else
    {
        uint _1970 = _1597 + 2u;
        uint _1974 = _1597 + 10u;
        float _1988 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1970].w)) * _323) * 0.949999988079071044921875);
        float _1989 = _1988 * _1988;
        float _1990 = cbLight._m0[_1970].x + _407;
        float _1991 = cbLight._m0[_1970].y + _408;
        float _1992 = cbLight._m0[_1970].z + _409;
        float _1996 = inversesqrt(dot(vec3(_1990, _1991, _1992), vec3(_1990, _1991, _1992)));
        float _1997 = _1996 * _1990;
        float _1998 = _1996 * _1991;
        float _1999 = _1996 * _1992;
        float _2000 = dot(vec3(_320, _321, _322), vec3(cbLight._m0[_1970].xyz));
        float _3996 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
        float _2003 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _2004 = dot(vec3(_320, _321, _322), vec3(_1997, _1998, _1999));
        float _4007 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
        float _2007 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _2008 = dot(vec3(cbLight._m0[_1970].xyz), vec3(_1997, _1998, _1999));
        float _4018 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
        float _2012 = _1989 * _1989;
        float _2016 = ((_2007 * _2007) * (_2012 + (-1.0))) + 1.0;
        float _2023 = exp2(log2(1.0 - (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0)))) * 5.0);
        float _2030 = 1.0 - _1989;
        float _2040 = (0.5 / (((_1766 * ((_2003 * _2030) + _1989)) + 9.9999999392252902907785028219223e-09) + (((_1766 * _2030) + _1989) * _2003))) * _2003;
        float _4029 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
        float _2042 = (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_2012 / ((_2016 * _2016) * 3.141590118408203125));
        float _2043 = isnan(1.0) ? _1612 : (isnan(_1612) ? 1.0 : min(_1612, 1.0));
        _1964 = (((((_2023 * _1788) + _491) * cbLight._m0[_1974].x) * _2042) * _2043) + _1900;
        _1966 = (((((_2023 * _1790) + _493) * cbLight._m0[_1974].y) * _2042) * _2043) + _1901;
        _1968 = (((((_2023 * _1791) + _494) * cbLight._m0[_1974].z) * _2042) * _2043) + _1902;
    }
    float _2078;
    float _2080;
    float _2082;
    if (_1692)
    {
        _2078 = _1964;
        _2080 = _1966;
        _2082 = _1968;
    }
    else
    {
        uint _2089 = _1597 + 3u;
        uint _2093 = _1597 + 11u;
        float _2107 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2089].w)) * _323) * 0.949999988079071044921875);
        float _2108 = _2107 * _2107;
        float _2109 = cbLight._m0[_2089].x + _407;
        float _2110 = cbLight._m0[_2089].y + _408;
        float _2111 = cbLight._m0[_2089].z + _409;
        float _2115 = inversesqrt(dot(vec3(_2109, _2110, _2111), vec3(_2109, _2110, _2111)));
        float _2116 = _2115 * _2109;
        float _2117 = _2115 * _2110;
        float _2118 = _2115 * _2111;
        float _2119 = dot(vec3(_320, _321, _322), vec3(cbLight._m0[_2089].xyz));
        float _4045 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
        float _2122 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _2123 = dot(vec3(_320, _321, _322), vec3(_2116, _2117, _2118));
        float _4056 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
        float _2126 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _2127 = dot(vec3(cbLight._m0[_2089].xyz), vec3(_2116, _2117, _2118));
        float _4067 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        float _2131 = _2108 * _2108;
        float _2135 = ((_2126 * _2126) * (_2131 + (-1.0))) + 1.0;
        float _2142 = exp2(log2(1.0 - (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0)))) * 5.0);
        float _2149 = 1.0 - _2108;
        float _2159 = (0.5 / (((_1766 * ((_2122 * _2149) + _2108)) + 9.9999999392252902907785028219223e-09) + (((_1766 * _2149) + _2108) * _2122))) * _2122;
        float _4078 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2161 = (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_2131 / ((_2135 * _2135) * 3.141590118408203125));
        float _2162 = isnan(1.0) ? _1613 : (isnan(_1613) ? 1.0 : min(_1613, 1.0));
        _2078 = (((((_2142 * _1788) + _491) * cbLight._m0[_2093].x) * _2161) * _2162) + _1964;
        _2080 = (((((_2142 * _1790) + _493) * cbLight._m0[_2093].y) * _2161) * _2162) + _1966;
        _2082 = (((((_2142 * _1791) + _494) * cbLight._m0[_2093].z) * _2161) * _2162) + _1968;
    }
    float _2297;
    float _2299;
    float _2301;
    float _2303;
    float _2305;
    float _2307;
    if (_1595.y == 0u)
    {
        float _2237 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2238 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2237;
        float _2239 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2237;
        float _2240 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2237;
        uvec4 _2252 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2253 = _2252.x;
        uint _2264 = uint((float(_2252.y) * floor(float(uint(cbSceneParam._m0[85u].y * _426) / _2253))) + floor(float(uint(cbSceneParam._m0[85u].x * _425) / _2253)));
        float _2274 = (log2(_2240 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2275 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        uint _2278 = uint(isnan(14.0) ? _2275 : (isnan(_2275) ? 14.0 : min(_2275, 14.0)));
        uvec4 _2283 = texelFetch(g_lightClusterGridBuffer, int(((_2278 << 2u) + (_2264 << 6u)) >> 2u));
        uint _2284 = _2283.x;
        uint _2285 = _2252.z;
        float _2385;
        float _2387;
        float _2389;
        float _2391;
        float _2393;
        float _2395;
        if (((((1u << ((_2285 >> 4u) & 15u)) + 4294967295u) & _2284) == 0u) || ((_2285 & 240u) == 0u))
        {
            _2385 = 0.0;
            _2387 = 0.0;
            _2389 = 0.0;
            _2391 = 0.0;
            _2393 = 0.0;
            _2395 = 0.0;
        }
        else
        {
            float _2386;
            float _2388;
            float _2390;
            float _2392;
            float _2394;
            float _2396;
            float _2538 = 0.0;
            float _2539 = 0.0;
            float _2540 = 0.0;
            float _2541 = 0.0;
            float _2542 = 0.0;
            float _2543 = 0.0;
            uint _2544 = 0u;
            uint _2553;
            bool _2554;
            for (;;)
            {
                _2553 = texelFetch(g_lightClassification, int((((_2278 << 5u) + (_2264 << 9u)) + (_2544 << 2u)) >> 2u)).x;
                _2554 = _2553 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2554)
                {
                    frontier_phi_68_pred = _2538;
                    frontier_phi_68_pred_1 = _2543;
                    frontier_phi_68_pred_2 = _2542;
                    frontier_phi_68_pred_3 = _2541;
                    frontier_phi_68_pred_4 = _2540;
                    frontier_phi_68_pred_5 = _2539;
                }
                else
                {
                    float _2683;
                    float _2684;
                    float _2685;
                    float _2686;
                    float _2687;
                    float _2688;
                    uint _2689;
                    _2683 = _2538;
                    _2684 = _2539;
                    _2685 = _2540;
                    _2686 = _2541;
                    _2687 = _2542;
                    _2688 = _2543;
                    _2689 = _2553;
                    float _2610;
                    float _2611;
                    float _2612;
                    float _2613;
                    float _2614;
                    float _2615;
                    for (;;)
                    {
                        uint _2693 = uint(findLSB(_2689)) + (_2544 << 5u);
                        uint _2690 = (_2689 + 4294967295u) & _2689;
                        uint _2695 = _2693 * 48u;
                        vec4 _2709 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2695)).x, texelFetch(g_PointLightRenderingBuffer, int(_2695 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2695 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2695 + 3u)).x));
                        uint _2715 = (_2693 * 48u) + 4u;
                        vec4 _2728 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2715)).x, texelFetch(g_PointLightRenderingBuffer, int(_2715 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2715 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2715 + 3u)).x));
                        uint _2734 = (_2693 * 48u) + 8u;
                        vec3 _2745 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2734)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 2u)).x));
                        float _2749 = _2709.x - _2238;
                        float _2750 = _2709.y - _2239;
                        float _2751 = _2709.z - _2240;
                        float _2752 = dot(vec3(_2749, _2750, _2751), vec3(_2749, _2750, _2751));
                        float _2755 = inversesqrt(_2752);
                        float _2756 = _2755 * _2749;
                        float _2757 = _2755 * _2750;
                        float _2758 = _2755 * _2751;
                        float _2759 = dot(vec3(_446, _449, _452), vec3(_2756, _2757, _2758));
                        float _2764 = 1.0 - (_2752 * _2709.w);
                        float _4104 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
                        float _2765 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
                        float _2766 = sqrt(_2752) * _2728.w;
                        float _2769 = 1.39999997615814208984375 / (_2766 + 1.39999997615814208984375);
                        float _2770 = _2769 * _2769;
                        float _2773 = ((1.0 - _2770) * _2759) + _2770;
                        float _2776 = _2766 * _2766;
                        float _2780 = ((isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0))) * _2765) / ((_2776 * 0.699999988079071044921875) + 1.0);
                        float _2784 = (-0.0) - _2238;
                        float _2785 = (-0.0) - _2239;
                        float _2786 = (-0.0) - _2240;
                        float _2790 = inversesqrt(dot(vec3(_2784, _2785, _2786), vec3(_2784, _2785, _2786)));
                        float _2791 = _2790 * _2784;
                        float _2792 = _2790 * _2785;
                        float _2793 = _2790 * _2786;
                        float _2801 = exp2(log2(1.0 / ((_2776 * 3.5) + 5.0)) * 0.25);
                        float _2802 = 1.0 - _523;
                        float _2809 = sqrt(1.0 - ((1.0 - (_2802 * _2802)) * (1.0 - (_2801 * _2801))));
                        float _2810 = _2809 * _2809;
                        float _2811 = _2810 * _2810;
                        float _2812 = _2791 + _2756;
                        float _2813 = _2792 + _2757;
                        float _2814 = _2793 + _2758;
                        float _2818 = inversesqrt(dot(vec3(_2812, _2813, _2814), vec3(_2812, _2813, _2814)));
                        float _2822 = dot(vec3(_446, _449, _452), vec3(_2791, _2792, _2793));
                        float _4120 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
                        float _2825 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
                        float _2826 = dot(vec3(_446, _449, _452), vec3(_2818 * _2812, _2818 * _2813, _2818 * _2814));
                        float _4131 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
                        float _2829 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
                        float _2833 = ((_2829 * _2829) * (_2811 + (-1.0))) + 1.0;
                        float _2834 = _2769 * _2810;
                        float _2835 = _2834 * _2834;
                        float _2838 = ((1.0 - _2835) * _2759) + _2835;
                        float _4142 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
                        float _2839 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
                        float _2840 = 1.0 - _2810;
                        float _2850 = (0.5 / (((_2839 * ((_2825 * _2840) + _2810)) + 9.9999999392252902907785028219223e-09) + (((_2839 * _2840) + _2810) * _2825))) * _2839;
                        float _4153 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
                        float _2861 = (((_2811 * 3.1415927410125732421875) * (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0)))) / ((_2833 * _2833) * ((_2776 * 2.1991131305694580078125) + 3.141590118408203125))) * _2765;
                        _2613 = (_2780 * _2728.x) + _2686;
                        _2614 = (_2780 * _2728.y) + _2687;
                        _2615 = (_2780 * _2728.z) + _2688;
                        _2610 = (_2861 * _2745.x) + _2683;
                        _2611 = (_2861 * _2745.y) + _2684;
                        _2612 = (_2861 * _2745.z) + _2685;
                        if (_2690 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2683 = _2610;
                            _2684 = _2611;
                            _2685 = _2612;
                            _2686 = _2613;
                            _2687 = _2614;
                            _2688 = _2615;
                            _2689 = _2690;
                        }
                    }
                    frontier_phi_68_pred = _2610;
                    frontier_phi_68_pred_1 = _2615;
                    frontier_phi_68_pred_2 = _2614;
                    frontier_phi_68_pred_3 = _2613;
                    frontier_phi_68_pred_4 = _2612;
                    frontier_phi_68_pred_5 = _2611;
                }
                _2386 = frontier_phi_68_pred;
                _2396 = frontier_phi_68_pred_1;
                _2394 = frontier_phi_68_pred_2;
                _2392 = frontier_phi_68_pred_3;
                _2390 = frontier_phi_68_pred_4;
                _2388 = frontier_phi_68_pred_5;
                uint _2545 = _2544 + 1u;
                if (_2545 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2538 = _2386;
                    _2539 = _2388;
                    _2540 = _2390;
                    _2541 = _2392;
                    _2542 = _2394;
                    _2543 = _2396;
                    _2544 = _2545;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2385 = _2386;
            _2387 = _2388;
            _2389 = _2390;
            _2391 = _2392;
            _2393 = _2394;
            _2395 = _2396;
        }
        uvec4 _2399 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2400 = _2399.z;
        uint _2402 = (_2400 >> 8u) & 15u;
        float _2506;
        float _2508;
        float _2510;
        float _2512;
        float _2514;
        float _2516;
        if (((4294967295u << _2402) & _2284) == 0u)
        {
            _2506 = _2385;
            _2508 = _2387;
            _2510 = _2389;
            _2512 = _2391;
            _2514 = _2393;
            _2516 = _2395;
        }
        else
        {
            float _2531 = inversesqrt(dot(vec3(_2238, _2239, _2240), vec3(_2238, _2239, _2240)));
            float _2532 = _2531 * _2238;
            float _2533 = _2531 * _2239;
            float _2534 = _2531 * _2240;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2402 < ((_2400 >> 12u) & 15u))
            {
                float _2507;
                float _2509;
                float _2511;
                float _2513;
                float _2515;
                float _2517;
                float _2666 = _2385;
                float _2667 = _2387;
                float _2668 = _2389;
                float _2669 = _2391;
                float _2670 = _2393;
                float _2671 = _2395;
                uint _2672 = _2402;
                uint _2681;
                bool _2682;
                for (;;)
                {
                    _2681 = texelFetch(g_lightClassification, int((((_2278 << 5u) + (_2264 << 9u)) + (_2672 << 2u)) >> 2u)).x;
                    _2682 = _2681 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2682)
                    {
                        frontier_phi_79_pred = _2671;
                        frontier_phi_79_pred_1 = _2670;
                        frontier_phi_79_pred_2 = _2669;
                        frontier_phi_79_pred_3 = _2668;
                        frontier_phi_79_pred_4 = _2667;
                        frontier_phi_79_pred_5 = _2666;
                    }
                    else
                    {
                        float _2875;
                        float _2876;
                        float _2877;
                        float _2878;
                        float _2879;
                        float _2880;
                        float _3171;
                        float _3172;
                        float _3173;
                        float _3174;
                        float _3175;
                        float _3176;
                        float _2888 = _2666;
                        float _2889 = _2667;
                        float _2890 = _2668;
                        float _2891 = _2669;
                        float _2892 = _2670;
                        float _2893 = _2671;
                        uint _2894 = _2681;
                        uint _2895;
                        vec4 _2920;
                        float _2921;
                        vec4 _2936;
                        vec3 _2948;
                        vec4 _2964;
                        vec4 _2980;
                        float _3027;
                        bool _3028;
                        for (;;)
                        {
                            uint _2905 = ((_2672 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2894));
                            _2895 = (_2894 + 4294967295u) & _2894;
                            uint _2907 = _2905 * 40u;
                            _2920 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2907)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 3u)).x));
                            _2921 = _2920.w;
                            uint _2923 = (_2905 * 40u) + 4u;
                            _2936 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2923)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 3u)).x));
                            uint _2938 = (_2905 * 40u) + 8u;
                            _2948 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2938)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 2u)).x));
                            uint _2951 = (_2905 * 40u) + 16u;
                            _2964 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2951)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 3u)).x));
                            uint _2967 = (_2905 * 40u) + 20u;
                            _2980 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2967)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 3u)).x));
                            uint _2983 = (_2905 * 40u) + 24u;
                            vec4 _2996 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2983)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 3u)).x));
                            uint _3002 = (_2905 * 40u) + 28u;
                            vec4 _3015 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3002)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 3u)).x));
                            _3027 = fma(_2240, _3015.z, fma(_2239, _3015.y, _3015.x * _2238)) + _3015.w;
                            _3028 = !((fma(_2240, _2996.z, fma(_2239, _2996.y, _2996.x * _2238)) + _2996.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3028)
                            {
                                float _3055 = _2920.x - _2238;
                                float _3056 = _2920.y - _2239;
                                float _3057 = _2920.z - _2240;
                                float _3058 = dot(vec3(_3055, _3056, _3057), vec3(_3055, _3056, _3057));
                                float _3061 = inversesqrt(_3058);
                                float _3062 = _3061 * _3055;
                                float _3063 = _3061 * _3056;
                                float _3064 = _3061 * _3057;
                                float _3068 = 1.0 - (_3058 / (_2921 * _2921));
                                float _4164 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                                float _3069 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
                                float _3073 = sqrt(_3058) * _2936.w;
                                float _3075 = 1.39999997615814208984375 / (_3073 + 1.39999997615814208984375);
                                float _3076 = _3075 * _3075;
                                float _3079 = ((1.0 - _3076) * dot(vec3(_3062, _3063, _3064), vec3(_446, _449, _452))) + _3076;
                                float _3082 = _3073 * _3073;
                                float _3086 = (fma(_2240, _2964.z, fma(_2239, _2964.y, _2964.x * _2238)) + _2964.w) / _3027;
                                float _3087 = (fma(_2240, _2980.z, fma(_2239, _2980.y, _2980.x * _2238)) + _2980.w) / _3027;
                                float _3091 = 1.0 - dot(vec2(_3086, _3087), vec2(_3086, _3087));
                                float _4180 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                                float _3092 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
                                float _3093 = _3092 * (((isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0))) * _3069) / ((_3082 * 0.699999988079071044921875) + 1.0));
                                float _3105 = exp2(log2(1.0 / ((_3082 * 3.5) + 5.0)) * 0.25);
                                float _3106 = 1.0 - _523;
                                float _3113 = sqrt(1.0 - ((1.0 - (_3106 * _3106)) * (1.0 - (_3105 * _3105))));
                                float _3114 = _3113 * _3113;
                                float _3115 = _3114 * _3114;
                                float _3116 = _3062 - _2532;
                                float _3117 = _3063 - _2533;
                                float _3118 = _3064 - _2534;
                                float _3122 = inversesqrt(dot(vec3(_3116, _3117, _3118), vec3(_3116, _3117, _3118)));
                                float _3126 = dot(vec3(_446, _449, _452), vec3((-0.0) - _2532, (-0.0) - _2533, (-0.0) - _2534));
                                float _4191 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                                float _3129 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
                                float _3130 = dot(vec3(_446, _449, _452), vec3(_3122 * _3116, _3122 * _3117, _3122 * _3118));
                                float _4202 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                                float _3133 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
                                float _3137 = ((_3133 * _3133) * (_3115 + (-1.0))) + 1.0;
                                float _3138 = _3075 * _3114;
                                float _3139 = _3138 * _3138;
                                float _3145 = ((1.0 - _3139) * dot(vec3(_446, _449, _452), vec3(_3062, _3063, _3064))) + _3139;
                                float _4213 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                                float _3146 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
                                float _3147 = 1.0 - _3114;
                                float _3157 = (0.5 / (((_3146 * ((_3129 * _3147) + _3114)) + 9.9999999392252902907785028219223e-09) + (((_3146 * _3147) + _3114) * _3129))) * _3146;
                                float _4224 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                                float _3167 = (_3092 * _3069) * (((_3115 * 3.1415927410125732421875) * (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0)))) / ((_3137 * _3137) * ((_3082 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3093 * _2936.y;
                                frontier_phi_85_pred_1 = _3093 * _2936.x;
                                frontier_phi_85_pred_2 = _3167 * _2948.z;
                                frontier_phi_85_pred_3 = _3167 * _2948.y;
                                frontier_phi_85_pred_4 = _3167 * _2948.x;
                                frontier_phi_85_pred_5 = _3093 * _2936.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3175 = frontier_phi_85_pred;
                            _3174 = frontier_phi_85_pred_1;
                            _3173 = frontier_phi_85_pred_2;
                            _3172 = frontier_phi_85_pred_3;
                            _3171 = frontier_phi_85_pred_4;
                            _3176 = frontier_phi_85_pred_5;
                            _2878 = _3174 + _2891;
                            _2879 = _3175 + _2892;
                            _2880 = _3176 + _2893;
                            _2875 = _3171 + _2888;
                            _2876 = _3172 + _2889;
                            _2877 = _3173 + _2890;
                            if (_2895 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2888 = _2875;
                                _2889 = _2876;
                                _2890 = _2877;
                                _2891 = _2878;
                                _2892 = _2879;
                                _2893 = _2880;
                                _2894 = _2895;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2880;
                        frontier_phi_79_pred_1 = _2879;
                        frontier_phi_79_pred_2 = _2878;
                        frontier_phi_79_pred_3 = _2877;
                        frontier_phi_79_pred_4 = _2876;
                        frontier_phi_79_pred_5 = _2875;
                    }
                    _2517 = frontier_phi_79_pred;
                    _2515 = frontier_phi_79_pred_1;
                    _2513 = frontier_phi_79_pred_2;
                    _2511 = frontier_phi_79_pred_3;
                    _2509 = frontier_phi_79_pred_4;
                    _2507 = frontier_phi_79_pred_5;
                    uint _2673 = _2672 + 1u;
                    if (_2673 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2666 = _2507;
                        _2667 = _2509;
                        _2668 = _2511;
                        _2669 = _2513;
                        _2670 = _2515;
                        _2671 = _2517;
                        _2672 = _2673;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2511;
                frontier_phi_60_61_ladder_1 = _2517;
                frontier_phi_60_61_ladder_2 = _2515;
                frontier_phi_60_61_ladder_3 = _2513;
                frontier_phi_60_61_ladder_4 = _2509;
                frontier_phi_60_61_ladder_5 = _2507;
            }
            else
            {
                frontier_phi_60_61_ladder = _2389;
                frontier_phi_60_61_ladder_1 = _2395;
                frontier_phi_60_61_ladder_2 = _2393;
                frontier_phi_60_61_ladder_3 = _2391;
                frontier_phi_60_61_ladder_4 = _2387;
                frontier_phi_60_61_ladder_5 = _2385;
            }
            _2506 = frontier_phi_60_61_ladder_5;
            _2508 = frontier_phi_60_61_ladder_4;
            _2510 = frontier_phi_60_61_ladder;
            _2512 = frontier_phi_60_61_ladder_3;
            _2514 = frontier_phi_60_61_ladder_2;
            _2516 = frontier_phi_60_61_ladder_1;
        }
        float _2521 = isnan(1.0) ? _507 : (isnan(_507) ? 1.0 : min(_507, 1.0));
        _2297 = (_2521 * _2512) + _1730;
        _2299 = (_2521 * _2514) + _1732;
        _2301 = (_2521 * _2516) + _1734;
        _2303 = ((_2506 * _491) * _2521) + _2078;
        _2305 = ((_2508 * _493) * _2521) + _2080;
        _2307 = ((_2510 * _494) * _2521) + _2082;
    }
    else
    {
        _2297 = _1730;
        _2299 = _1732;
        _2301 = _1734;
        _2303 = _2078;
        _2305 = _2080;
        _2307 = _2082;
    }
    float _4240 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _4251 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _4262 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _2324 = ((isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (_2297 + ((isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0))) * _507))) + ((_2303 + ((isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))) * _1343)) * cbPerFrame._m0[3u].x);
    float _2325 = ((isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_2299 + ((isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0))) * _507))) + ((_2305 + ((isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))) * _1343)) * cbPerFrame._m0[3u].x);
    float _2326 = ((isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_2301 + ((isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0))) * _507))) + ((_2307 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _1343)) * cbPerFrame._m0[3u].x);
    uint _2327 = _465 + 6u;
    float _2335 = _425 / cbSceneParam._m0[86u].x;
    float _2336 = _426 / cbSceneParam._m0[86u].y;
    vec4 _2350 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2335, _2336, (log2((isnan(cbSceneParam._m0[77u].w) ? _348 : (isnan(_348) ? cbSceneParam._m0[77u].w : min(_348, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2352 = _2350.x;
    float _2353 = _2350.y;
    float _2354 = _2350.z;
    float _2355 = _2350.w;
    float _2448;
    float _2450;
    float _2452;
    float _2454;
    if (_348 > cbSceneParam._m0[78u].w)
    {
        float _2410 = isnan(_348) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _348 : min(cbSceneParam._m0[80u].w, _348));
        float _2411 = _2410 / _348;
        float _2422 = _2411 * _400;
        float _2423 = _401 * _2411;
        float _2424 = (-0.0) - _2423;
        float _2426 = _2411 * _402;
        float _2428 = (cbSceneParam._m0[77u].w * _2424) / _2410;
        float _2429 = _2428 + cbSceneParam._m0[79u].w;
        float _2430 = cbSceneParam._m0[79u].w - _2423;
        float _2436 = sqrt(((_2422 * _2422) + (_2423 * _2423)) + (_2426 * _2426));
        float _2439 = (1.0 - (cbSceneParam._m0[77u].w / _2410)) * _2436;
        float _2444 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2446 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2623;
        if (abs((_2424 - _2428) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2623 = ((((_2429 > 0.0) ? exp2(_2444 * _2429) : (2.0 - exp2(_2446 * _2429))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2439;
        }
        else
        {
            float _2567 = 1.0 / cbSceneParam._m0[80u].x;
            float _2568 = isnan(_2430) ? _2429 : (isnan(_2429) ? _2430 : max(_2429, _2430));
            float _2569 = isnan(_2430) ? _2429 : (isnan(_2429) ? _2430 : min(_2429, _2430));
            float _2578 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : min(_2568, 0.0));
            float _2579 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : min(_2569, 0.0));
            _2623 = ((abs(_2436 / _2424) * cbSceneParam._m0[80u].y) * ((((_2578 - _2579) * 2.0) - ((exp2(_2444 * (isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0)))) - exp2(_2444 * (isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0))))) * _2567)) - ((exp2(_2446 * _2578) - exp2(_2446 * _2579)) * _2567))) + (_2439 * cbSceneParam._m0[80u].z);
        }
        vec4 _2625 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2335, _2336, 1.0), 0.0);
        float _2634 = exp2((_2623 * (-1.44269502162933349609375)) * (1.0 - _2625.w));
        float _2635 = log2(_2634);
        float _2651 = log2(_2355);
        _2448 = (exp2(_2651 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2635 * cbSceneParam._m0[78u].x)) * _2625.x) / cbSceneParam._m0[78u].x)) + _2352;
        _2450 = (exp2(_2651 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2635 * cbSceneParam._m0[78u].y)) * _2625.y) / cbSceneParam._m0[78u].y)) + _2353;
        _2452 = (exp2(_2651 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2635 * cbSceneParam._m0[78u].z)) * _2625.z) / cbSceneParam._m0[78u].z)) + _2354;
        _2454 = _2634 * _2355;
    }
    else
    {
        _2448 = _2352;
        _2450 = _2353;
        _2452 = _2354;
        _2454 = _2355;
    }
    bool _2661;
    vec4 _2464;
    vec4 _2486;
    float _2488;
    float _2492;
    float _2493;
    float _2494;
    float _2495;
    bool _2505;
    for (;;)
    {
        _2464 = cbMatDynParam._m0[0u];
        float _2466 = roundEven(_2464.y);
        bool _2467 = _2466 == 3.0;
        float _2468 = log2(_2454);
        float _2475 = exp2(_2468 * cbSceneParam._m0[78u].x) * _2324;
        float _2476 = exp2(_2468 * cbSceneParam._m0[78u].y) * _2325;
        float _2477 = exp2(_2468 * cbSceneParam._m0[78u].z) * _2326;
        float _2484 = _413 + (-0.5);
        _2486 = cbMtdParam._m0[1u];
        _2488 = _2486.y * _2484;
        float _2491 = (_2466 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2492 = _2491 * (_2467 ? _2475 : (_2475 + (cbSceneParam._m0[72u].w * _2448)));
        _2493 = _2491 * (_2467 ? _2476 : (_2476 + (cbSceneParam._m0[72u].w * _2450)));
        _2494 = _2491 * (_2467 ? _2477 : (_2477 + (cbSceneParam._m0[72u].w * _2452)));
        _2495 = _2484 * 0.999000012874603271484375;
        _2505 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2505)
        {
            if ((cbInstanceData._m0[_465 + 7u].x + _2495) < 0.5)
            {
                _2661 = true;
                break;
            }
        }
        uint _2602 = _467 + uint(_2464.w);
        if ((cbInstanceData._m0[_2602].w < 1.0) && ((cbInstanceData._m0[_2602].w + _2495) < 0.5))
        {
            _2661 = true;
            break;
        }
        if ((_2488 + 1.0) < _2486.x)
        {
            _2661 = true;
            break;
        }
        _2661 = false;
        break;
    }
    float _2866;
    if (_2661)
    {
        discard_state = true;
        _2866 = 0.0;
    }
    else
    {
        _2866 = cbInstanceData._m0[_2327].w;
    }
    SV_Target.x = _2492;
    SV_Target.y = _2493;
    SV_Target.z = _2494;
    SV_Target.w = _2866;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2327].w;
    discard_exit();
}


