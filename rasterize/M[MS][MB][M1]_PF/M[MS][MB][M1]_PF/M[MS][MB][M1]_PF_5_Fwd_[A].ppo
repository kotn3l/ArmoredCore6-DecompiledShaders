#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1093;
float _3477;
float _3478;
float _3479;
float _3480;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _239 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _239 + 1u;
    uint _248 = _239 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_239].x * cbInstanceData._m0[_239].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _278 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _284 = _278.x * cbMtdParam._m0[9u].x;
    float _285 = _278.y * cbMtdParam._m0[9u].y;
    float _286 = _278.z * cbMtdParam._m0[9u].z;
    vec4 _299 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_3, SS_BumpMap), vec2((_258 * cbTextureTilingScale._m0[20u].x) + cbTextureTilingScale._m0[20u].z, (_259 * cbTextureTilingScale._m0[20u].y) + cbTextureTilingScale._m0[20u].w));
    vec4 _325 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _329 = _325.z;
    float _333 = (_325.x * 2.0) + (-1.0);
    float _334 = (_325.y * 2.0) + (-1.0);
    float _335 = dot(vec2(_333, _334), vec2(_333, _334));
    float _3489 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _341 = sqrt(1.0 - (isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0))));
    float _346 = _333 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_299.x * 2.0) + (-1.0)));
    float _347 = _334 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_299.y * 2.0) + (-1.0)));
    vec4 _360 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _258) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _259) + cbTextureTilingScale._m0[19u].w));
    float _362 = _360.x;
    float _363 = 1.0 - _362;
    float _396 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_362 - _363) * cbMtdParam._m0[24u].w) + _363) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3500 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _397 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
    float _405 = ((((cbMtdParam._m0[10u].x - _284) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _397) + _284;
    float _406 = ((((cbMtdParam._m0[10u].y - _285) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _397) + _285;
    float _407 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _286)) * _397) + _286;
    vec4 _420 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _422 = _420.x;
    float _424 = _422 - (_422 * _397);
    float _429 = (((_299.z - _329) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _329;
    float _433 = ((cbMtdParam._m0[23u].y - _429) * _397) + _429;
    vec4 _455 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _258) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].w * cbPerFrame._m0[22u].x) + _259) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _461 = (_455.x * 2.0) + (-1.0);
    float _462 = (_455.y * 2.0) + (-1.0);
    float _463 = dot(vec2(_461, _462), vec2(_461, _462));
    float _3511 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _479 = (_397 * (((cbMtdParam._m0[22u].z * _346) - _346) + _461)) + _346;
    float _480 = (_397 * (((cbMtdParam._m0[22u].z * _347) - _347) + _462)) + _347;
    float _481 = (_397 * (sqrt(1.0 - (isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0)))) - _341)) + _341;
    float _483 = cbMtdParam._m0[22u].x + _325.w;
    float _487 = gl_FragCoord.x * 0.125;
    float _489 = gl_FragCoord.y * 0.125;
    float _499 = fma(_481, _226 * NORMAL.x, fma(_480, _233 * TANGENT.x, (_219 * _211) * _479));
    float _502 = fma(_481, _226 * NORMAL.y, fma(_480, _233 * TANGENT.y, (_219 * _212) * _479));
    float _505 = fma(_481, _226 * NORMAL.z, fma(_480, _233 * TANGENT.z, (_219 * _213) * _479));
    float _509 = inversesqrt(dot(vec3(_499, _502, _505), vec3(_499, _502, _505)));
    float _510 = _509 * _499;
    float _511 = _509 * _502;
    float _512 = _509 * _505;
    float _3522 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _513 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
    float _3533 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _3544 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _3555 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _3566 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _3577 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _518 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_487, _489)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _536 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _577 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _587 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _577);
    float _588 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _577);
    float _589 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _577);
    float _593 = inversesqrt(dot(vec3(_587, _588, _589), vec3(_587, _588, _589)));
    float _594 = _587 * _593;
    float _595 = _588 * _593;
    float _596 = _589 * _593;
    vec4 _598 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_487, _489));
    float _600 = _598.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _775 = sqrt(((_587 * _587) + (_588 * _588)) + (_589 * _589));
        float _781 = (cbMatDynParam._m0[5u].x * _775) + cbMatDynParam._m0[5u].y;
        float _3588 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _782 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _786 = (cbMatDynParam._m0[5u].z * _775) + cbMatDynParam._m0[5u].w;
        float _3599 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))) - _782)) + _782) < ((_600 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _612 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _613 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _633 = fma(_512, cbSceneParam._m0[5u].z, fma(_511, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _510));
    float _636 = fma(_512, cbSceneParam._m0[6u].z, fma(_511, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _510));
    float _639 = fma(_512, cbSceneParam._m0[7u].z, fma(_511, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _510));
    uint _652 = _239 + 9u;
    uint _653 = _652 + uint(cbMatDynParam._m0[0u].w);
    float _659 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0)))) * cbInstanceData._m0[_653].x;
    float _660 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0)))) * cbInstanceData._m0[_653].y;
    float _661 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0)))) * cbInstanceData._m0[_653].z;
    float _3610 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _662 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _3621 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _663 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    float _3632 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _664 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    float _665 = 1.0 - _518;
    float _666 = _662 * _665;
    float _667 = _663 * _665;
    float _668 = _664 * _665;
    float _673 = (_662 + (-0.039999999105930328369140625)) * _518;
    float _674 = (_663 + (-0.039999999105930328369140625)) * _518;
    float _675 = (_664 + (-0.039999999105930328369140625)) * _518;
    float _676 = _673 + 0.039999999105930328369140625;
    float _678 = _674 + 0.039999999105930328369140625;
    float _679 = _675 + 0.039999999105930328369140625;
    vec4 _688 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _612, cbSceneParam._m0[86u].y * _613));
    float _692 = ((isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))) * TEXCOORD_5.w) * _688.x;
    float _693 = dot(vec3(_510, _511, _512), vec3(_594, _595, _596));
    float _696 = _693 * 2.0;
    float _700 = (_696 * _510) - _594;
    float _701 = (_696 * _511) - _595;
    float _702 = (_696 * _512) - _596;
    float _706 = abs(dot(vec3(_594, _595, _596), vec3(_510, _511, _512)));
    float _3643 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _708 = sqrt(_513);
    float _721 = exp2((_708 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_708 * 3.0));
    float _727 = (1.0 - _721) * ((_708 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _728 = _721 * _708;
    float _756 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _760 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _764 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1092;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _817 = fma(_764, cbModelParam._m0[26u].z, fma(_760, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _756));
        float _821 = fma(_764, cbModelParam._m0[27u].z, fma(_760, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _756));
        float _825 = fma(_764, cbModelParam._m0[28u].z, fma(_760, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _756));
        float _850 = _756 + _510;
        float _851 = _760 + _511;
        float _852 = _764 + _512;
        float _862 = fma(_852, cbModelParam._m0[26u].z, fma(_851, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _850)) - _817;
        float _863 = fma(_852, cbModelParam._m0[27u].z, fma(_851, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _850)) - _821;
        float _864 = fma(_852, cbModelParam._m0[28u].z, fma(_851, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _850)) - _825;
        float _868 = inversesqrt(dot(vec3(_862, _863, _864), vec3(_862, _863, _864)));
        float _881 = ((_868 * _862) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_817 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _882 = ((_868 * _863) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_821 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _883 = ((_868 * _864) / cbModelParam._m0[34u].z) + ((((((_825 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _886 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_881, _882, _883), 0.0);
        vec4 _893 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_881, _882, _883), 0.0);
        vec4 _900 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_881, _882, _883), 0.0);
        vec4 _907 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_881, _882, _883), 0.0);
        float _920 = exp2((_886.w + (-0.5)) * 20.0) * 2.0;
        float _921 = _920 * (_886.x + (-0.5));
        float _922 = _920 * (_886.y + (-0.5));
        float _923 = _920 * (_886.z + (-0.5));
        float _930 = exp2((_893.w + (-0.5)) * 20.0) * 2.0;
        float _931 = _930 * (_893.x + (-0.5));
        float _932 = _930 * (_893.y + (-0.5));
        float _933 = _930 * (_893.z + (-0.5));
        float _940 = exp2((_900.w + (-0.5)) * 20.0) * 2.0;
        float _941 = _940 * (_900.x + (-0.5));
        float _942 = _940 * (_900.y + (-0.5));
        float _943 = _940 * (_900.z + (-0.5));
        float _950 = exp2((_907.w + (-0.5)) * 20.0) * 2.0;
        float _951 = _950 * (_907.x + (-0.5));
        float _952 = _950 * (_907.y + (-0.5));
        float _953 = _950 * (_907.z + (-0.5));
        float _954 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _955 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _956 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _957 = _921 * 0.5;
        float _958 = _931 * 0.5;
        float _959 = _941 * 0.5;
        float _960 = dot(vec3(_957, _958, _959), vec3(_957, _958, _959));
        float _965 = (_960 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_960);
        float _974 = (dot(vec3(_510, _511, _512), vec3(_965 * _957, _965 * _958, _965 * _959)) + 1.0) * 0.5;
        float _3669 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _984 = sqrt(((_958 * _958) + (_957 * _957)) + (_959 * _959)) / (_954 + 9.9999997473787516355514526367188e-06);
        float _3680 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _986 = _985 * 2.0;
        float _990 = (1.0 - _985) / (_985 + 1.0);
        float _3691 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _991 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1000 = ((((1.0 - _991) * (_986 + 2.0)) * exp2(log2(isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * (_986 + 1.0))) + _991) * _954;
        float _1001 = _922 * 0.5;
        float _1002 = _932 * 0.5;
        float _1003 = _942 * 0.5;
        float _1004 = dot(vec3(_1001, _1002, _1003), vec3(_1001, _1002, _1003));
        float _1009 = (_1004 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1004);
        float _1017 = (dot(vec3(_510, _511, _512), vec3(_1009 * _1001, _1009 * _1002, _1009 * _1003)) + 1.0) * 0.5;
        float _3702 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1026 = sqrt(((_1002 * _1002) + (_1001 * _1001)) + (_1003 * _1003)) / (_955 + 9.9999997473787516355514526367188e-06);
        float _3713 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1028 = _1027 * 2.0;
        float _1032 = (1.0 - _1027) / (_1027 + 1.0);
        float _3724 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1042 = ((((1.0 - _1033) * (_1028 + 2.0)) * exp2(log2(isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * (_1028 + 1.0))) + _1033) * _955;
        float _1043 = _923 * 0.5;
        float _1044 = _933 * 0.5;
        float _1045 = _943 * 0.5;
        float _1046 = dot(vec3(_1043, _1044, _1045), vec3(_1043, _1044, _1045));
        float _1051 = (_1046 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1046);
        float _1059 = (dot(vec3(_510, _511, _512), vec3(_1051 * _1043, _1051 * _1044, _1051 * _1045)) + 1.0) * 0.5;
        float _3735 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1068 = sqrt(((_1044 * _1044) + (_1043 * _1043)) + (_1045 * _1045)) / (_956 + 9.9999997473787516355514526367188e-06);
        float _3746 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1070 = _1069 * 2.0;
        float _1074 = (1.0 - _1069) / (_1069 + 1.0);
        float _3757 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1084 = ((((1.0 - _1075) * (_1070 + 2.0)) * exp2(log2(isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * (_1070 + 1.0))) + _1075) * _956;
        _1092 = _923;
        _1094 = _922;
        _1095 = _921;
        _1096 = _933;
        _1097 = _932;
        _1098 = _931;
        _1099 = _943;
        _1100 = _942;
        _1101 = _941;
        _1102 = _956;
        _1103 = _955;
        _1104 = _954;
        _1105 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0)));
        _1106 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0)));
        _1107 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0)));
    }
    else
    {
        _1092 = _1093;
        _1094 = _1093;
        _1095 = _1093;
        _1096 = _1093;
        _1097 = _1093;
        _1098 = _1093;
        _1099 = _1093;
        _1100 = _1093;
        _1101 = _1093;
        _1102 = _1093;
        _1103 = _1093;
        _1104 = _1093;
        _1105 = 0.0;
        _1106 = 0.0;
        _1107 = 0.0;
    }
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1132 = fma(_764, cbModelParam._m0[30u].z, fma(_760, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _756));
        float _1136 = fma(_764, cbModelParam._m0[31u].z, fma(_760, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _756));
        float _1140 = fma(_764, cbModelParam._m0[32u].z, fma(_760, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _756));
        float _1163 = _756 + _510;
        float _1164 = _760 + _511;
        float _1165 = _764 + _512;
        float _1175 = fma(_1165, cbModelParam._m0[30u].z, fma(_1164, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1163)) - _1132;
        float _1176 = fma(_1165, cbModelParam._m0[31u].z, fma(_1164, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1163)) - _1136;
        float _1177 = fma(_1165, cbModelParam._m0[32u].z, fma(_1164, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1163)) - _1140;
        float _1181 = inversesqrt(dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177)));
        float _1194 = ((_1181 * _1175) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1132 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1195 = ((_1181 * _1176) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1136 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1196 = ((_1181 * _1177) / cbModelParam._m0[35u].z) + ((((((_1140 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1219 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        float _1231 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1198.x + (-0.5));
        float _1233 = _1231 * (_1198.y + (-0.5));
        float _1234 = _1231 * (_1198.z + (-0.5));
        float _1241 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1205.x + (-0.5));
        float _1243 = _1241 * (_1205.y + (-0.5));
        float _1244 = _1241 * (_1205.z + (-0.5));
        float _1251 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1212.x + (-0.5));
        float _1253 = _1251 * (_1212.y + (-0.5));
        float _1254 = _1251 * (_1212.z + (-0.5));
        float _1261 = exp2((_1219.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1219.x + (-0.5));
        float _1263 = _1261 * (_1219.y + (-0.5));
        float _1264 = _1261 * (_1219.z + (-0.5));
        float _1265 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1266 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = _1232 * 0.5;
        float _1269 = _1242 * 0.5;
        float _1270 = _1252 * 0.5;
        float _1271 = dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270));
        float _1276 = (_1271 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1271);
        float _1284 = (dot(vec3(_510, _511, _512), vec3(_1276 * _1268, _1276 * _1269, _1276 * _1270)) + 1.0) * 0.5;
        float _3798 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1293 = sqrt(((_1269 * _1269) + (_1268 * _1268)) + (_1270 * _1270)) / (_1265 + 9.9999997473787516355514526367188e-06);
        float _3809 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1295 = _1294 * 2.0;
        float _1299 = (1.0 - _1294) / (_1294 + 1.0);
        float _3820 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1309 = ((((1.0 - _1300) * (_1295 + 2.0)) * exp2(log2(isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * (_1295 + 1.0))) + _1300) * _1265;
        float _1310 = _1233 * 0.5;
        float _1311 = _1243 * 0.5;
        float _1312 = _1253 * 0.5;
        float _1313 = dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312));
        float _1318 = (_1313 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1313);
        float _1326 = (dot(vec3(_510, _511, _512), vec3(_1318 * _1310, _1318 * _1311, _1318 * _1312)) + 1.0) * 0.5;
        float _3831 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1335 = sqrt(((_1311 * _1311) + (_1310 * _1310)) + (_1312 * _1312)) / (_1266 + 9.9999997473787516355514526367188e-06);
        float _3842 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1337 = _1336 * 2.0;
        float _1341 = (1.0 - _1336) / (_1336 + 1.0);
        float _3853 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1351 = ((((1.0 - _1342) * (_1337 + 2.0)) * exp2(log2(isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * (_1337 + 1.0))) + _1342) * _1266;
        float _1352 = _1234 * 0.5;
        float _1353 = _1244 * 0.5;
        float _1354 = _1254 * 0.5;
        float _1355 = dot(vec3(_1352, _1353, _1354), vec3(_1352, _1353, _1354));
        float _1360 = (_1355 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1355);
        float _1368 = (dot(vec3(_510, _511, _512), vec3(_1360 * _1352, _1360 * _1353, _1360 * _1354)) + 1.0) * 0.5;
        float _3864 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1377 = sqrt(((_1353 * _1353) + (_1352 * _1352)) + (_1354 * _1354)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _3875 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1379 = _1378 * 2.0;
        float _1383 = (1.0 - _1378) / (_1378 + 1.0);
        float _3886 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1393 = ((((1.0 - _1384) * (_1379 + 2.0)) * exp2(log2(isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (_1379 + 1.0))) + _1384) * _1267;
        _1401 = _1234;
        _1402 = _1233;
        _1403 = _1232;
        _1404 = _1244;
        _1405 = _1243;
        _1406 = _1242;
        _1407 = _1254;
        _1408 = _1253;
        _1409 = _1252;
        _1410 = _1267;
        _1411 = _1266;
        _1412 = _1265;
        _1413 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)));
        _1414 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)));
        _1415 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)));
    }
    else
    {
        _1401 = _1093;
        _1402 = _1093;
        _1403 = _1093;
        _1404 = _1093;
        _1405 = _1093;
        _1406 = _1093;
        _1407 = _1093;
        _1408 = _1093;
        _1409 = _1093;
        _1410 = _1093;
        _1411 = _1093;
        _1412 = _1093;
        _1413 = 0.0;
        _1414 = 0.0;
        _1415 = 0.0;
    }
    float _1425 = (cbModelParam._m0[1u].x * (_1413 - _1105)) + _1105;
    float _1426 = (cbModelParam._m0[1u].x * (_1414 - _1106)) + _1106;
    float _1427 = (cbModelParam._m0[1u].x * (_1415 - _1107)) + _1107;
    float _1448 = fma(_1427, cbSceneParam._m0[89u].z, fma(_1426, cbSceneParam._m0[89u].y, _1425 * cbSceneParam._m0[89u].x));
    float _1451 = fma(_1427, cbSceneParam._m0[90u].z, fma(_1426, cbSceneParam._m0[90u].y, _1425 * cbSceneParam._m0[90u].x));
    float _1454 = fma(_1427, cbSceneParam._m0[91u].z, fma(_1426, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1425));
    float _1469 = _700 * 0.5;
    float _1470 = _701 * 0.5;
    float _1471 = _702 * 0.5;
    float _1472 = dot(vec4(_1469, _1470, _1471, 1.0), vec4(_1403, _1406, _1409, _1412));
    float _1475 = dot(vec4(_1469, _1470, _1471, 1.0), vec4(_1402, _1405, _1408, _1411));
    float _1478 = dot(vec4(_1469, _1470, _1471, 1.0), vec4(_1401, _1404, _1407, _1410));
    float _1512;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1485 = dot(vec4(_1469, _1470, _1471, 1.0), vec4(_1092, _1096, _1099, _1102));
        float _1489 = dot(vec4(_1469, _1470, _1471, 1.0), vec4(_1094, _1097, _1100, _1103));
        float _1493 = dot(vec4(_1469, _1470, _1471, 1.0), vec4(_1095, _1098, _1101, _1104));
        float _1500 = dot(vec4(cbModelParam._m0[39u]), vec4(_1469, _1470, _1471, 1.0));
        _1512 = dot(vec3(isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)), isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)), isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1500) ? 0.0 : (isnan(0.0) ? _1500 : max(0.0, _1500))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1512 = 1.0;
    }
    float _1523;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1514 = dot(vec4(cbModelParam._m0[40u]), vec4(_1469, _1470, _1471, 1.0));
        _1523 = dot(vec3(isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)), isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)), isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1514) ? 0.0 : (isnan(0.0) ? _1514 : max(0.0, _1514))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1523 = 1.0;
    }
    float _1527 = (_1523 * cbModelParam._m0[1u].x) + (_1512 * (1.0 - cbModelParam._m0[1u].x));
    float _1537 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _513);
    float _1538 = isnan(_1537) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1537 : min(cbModelParam._m0[25u].z, _1537));
    float _1620;
    float _1622;
    float _1624;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1587 = fma(_764, cbModelParam._m0[13u].z, fma(_760, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _756)) + cbModelParam._m0[13u].w;
        float _1591 = fma(_764, cbModelParam._m0[14u].z, fma(_760, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _756)) + cbModelParam._m0[14u].w;
        float _1595 = fma(_764, cbModelParam._m0[15u].z, fma(_760, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _756)) + cbModelParam._m0[15u].w;
        float _1598 = fma(_702, cbModelParam._m0[13u].z, fma(_701, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _700));
        float _1601 = fma(_702, cbModelParam._m0[14u].z, fma(_701, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _700));
        float _1604 = fma(_702, cbModelParam._m0[15u].z, fma(_701, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _700));
        float _1632;
        if (_1598 > 0.0)
        {
            _1632 = abs((1.0 - _1587) / _1598);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1598 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1587 + 1.0) / _1598);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1632 = frontier_phi_19_17_ladder;
        }
        float _1837;
        if (_1601 > 0.0)
        {
            _1837 = abs((1.0 - _1591) / _1601);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1601 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1591 + 1.0) / _1601);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1837 = frontier_phi_28_24_ladder;
        }
        float _2091;
        if (_1604 > 0.0)
        {
            _2091 = abs((1.0 - _1595) / _1604);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1604 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1595 + 1.0) / _1604);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2091 = frontier_phi_40_35_ladder;
        }
        float _2093 = isnan(_1837) ? _1632 : (isnan(_1632) ? _1837 : min(_1632, _1837));
        float _2094 = isnan(_2091) ? _2093 : (isnan(_2093) ? _2091 : min(_2093, _2091));
        float _2098 = (_2094 * _1598) + _1587;
        float _2099 = (_2094 * _1601) + _1591;
        float _2100 = (_2094 * _1604) + _1595;
        float _2101 = _2094 * 9.9999997473787516355514526367188e-05;
        float _2103 = (-1.0) - _2101;
        float _2105 = _2101 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2100 > _2105) || ((_2100 < _2103) || ((_2099 > _2105) || ((_2099 < _2103) || ((_2098 < _2103) || (_2098 > _2105))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2228 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2100, cbModelParam._m0[9u].z, fma(_2099, cbModelParam._m0[9u].y, _2098 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2100, cbModelParam._m0[10u].z, fma(_2099, cbModelParam._m0[10u].y, _2098 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2100, cbModelParam._m0[11u].z, fma(_2099, cbModelParam._m0[11u].y, _2098 * cbModelParam._m0[11u].x))), _1538);
            frontier_phi_18_40_ladder = _2228.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2228.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2228.x * cbModelParam._m0[1u].y;
        }
        _1620 = frontier_phi_18_40_ladder_2;
        _1622 = frontier_phi_18_40_ladder_1;
        _1624 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1608 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_700, _701, _702), _1538);
        _1620 = _1608.x * cbModelParam._m0[1u].y;
        _1622 = _1608.y * cbModelParam._m0[1u].y;
        _1624 = _1608.z * cbModelParam._m0[1u].y;
    }
    float _1628 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _513);
    float _1629 = isnan(_1628) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1628 : min(cbModelParam._m0[25u].w, _1628));
    float _1720;
    float _1722;
    float _1724;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1684 = fma(_764, cbModelParam._m0[21u].z, fma(_760, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _756)) + cbModelParam._m0[21u].w;
        float _1688 = fma(_764, cbModelParam._m0[22u].z, fma(_760, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _756)) + cbModelParam._m0[22u].w;
        float _1692 = fma(_764, cbModelParam._m0[23u].z, fma(_760, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _756)) + cbModelParam._m0[23u].w;
        float _1695 = fma(_702, cbModelParam._m0[21u].z, fma(_701, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _700));
        float _1698 = fma(_702, cbModelParam._m0[22u].z, fma(_701, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _700));
        float _1701 = fma(_702, cbModelParam._m0[23u].z, fma(_701, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _700));
        float _1842;
        if (_1695 > 0.0)
        {
            _1842 = abs((1.0 - _1684) / _1695);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1684 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1842 = frontier_phi_30_26_ladder;
        }
        float _2118;
        if (_1698 > 0.0)
        {
            _2118 = abs((1.0 - _1688) / _1698);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1688 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2118 = frontier_phi_42_37_ladder;
        }
        float _2331;
        if (_1701 > 0.0)
        {
            _2331 = abs((1.0 - _1692) / _1701);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1692 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2331 = frontier_phi_51_48_ladder;
        }
        float _2333 = isnan(_2118) ? _1842 : (isnan(_1842) ? _2118 : min(_1842, _2118));
        float _2334 = isnan(_2331) ? _2333 : (isnan(_2333) ? _2331 : min(_2333, _2331));
        float _2338 = (_2334 * _1695) + _1684;
        float _2339 = (_2334 * _1698) + _1688;
        float _2340 = (_2334 * _1701) + _1692;
        float _2341 = _2334 * 9.9999997473787516355514526367188e-05;
        float _2342 = (-1.0) - _2341;
        float _2344 = _2341 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2340 > _2344) || ((_2340 < _2342) || ((_2339 > _2344) || ((_2339 < _2342) || ((_2338 < _2342) || (_2338 > _2344))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2539 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2340, cbModelParam._m0[17u].z, fma(_2339, cbModelParam._m0[17u].y, _2338 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2340, cbModelParam._m0[18u].z, fma(_2339, cbModelParam._m0[18u].y, _2338 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2340, cbModelParam._m0[19u].z, fma(_2339, cbModelParam._m0[19u].y, _2338 * cbModelParam._m0[19u].x))), _1629);
            frontier_phi_27_51_ladder = _2539.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2539.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2539.x * cbModelParam._m0[1u].z;
        }
        _1720 = frontier_phi_27_51_ladder_2;
        _1722 = frontier_phi_27_51_ladder_1;
        _1724 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1704 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_700, _701, _702), _1629);
        _1720 = _1704.x * cbModelParam._m0[1u].z;
        _1722 = _1704.y * cbModelParam._m0[1u].z;
        _1724 = _1704.z * cbModelParam._m0[1u].z;
    }
    float _1737 = (((_727 * _676) + _728) * _692) * ((cbModelParam._m0[1u].w * (_1720 - _1620)) + _1620);
    float _1739 = (((_727 * _678) + _728) * _692) * ((cbModelParam._m0[1u].w * (_1722 - _1622)) + _1622);
    float _1741 = (((_727 * _679) + _728) * _692) * ((cbModelParam._m0[1u].w * (_1724 - _1624)) + _1624);
    float _1744 = fma(_1741, cbSceneParam._m0[89u].z, fma(_1739, cbSceneParam._m0[89u].y, _1737 * cbSceneParam._m0[89u].x));
    float _1747 = fma(_1741, cbSceneParam._m0[90u].z, fma(_1739, cbSceneParam._m0[90u].y, _1737 * cbSceneParam._m0[90u].x));
    float _1750 = fma(_1741, cbSceneParam._m0[91u].z, fma(_1739, cbSceneParam._m0[91u].y, _1737 * cbSceneParam._m0[91u].x));
    uvec4 _1760 = floatBitsToUint(cbInstanceData._m0[_239 + 5u]);
    uint _1762 = _1760.x * 14u;
    uint _1763 = _1762 + 13u;
    float _1770 = _692 + (-1.0);
    float _1775 = (cbLight._m0[_1763].x * _1770) + 1.0;
    float _1776 = (cbLight._m0[_1763].y * _1770) + 1.0;
    float _1777 = (cbLight._m0[_1763].z * _1770) + 1.0;
    float _1778 = (cbLight._m0[_1763].w * _1770) + 1.0;
    uint _1779 = _1762 + 5u;
    float _1785 = isnan(1.0) ? _1776 : (isnan(_1776) ? 1.0 : min(_1776, 1.0));
    uint _1789 = _1762 + 4u;
    float _1796 = isnan(1.0) ? _1775 : (isnan(_1775) ? 1.0 : min(_1775, 1.0));
    uint _1800 = _1762 | 1u;
    float _1811 = dot(vec3(cbLight._m0[_1762].xyz), vec3(_510, _511, _512));
    float _1814 = dot(vec3(cbLight._m0[_1800].xyz), vec3(_510, _511, _512));
    float _4022 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _4033 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1819 = (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * 0.3183098733425140380859375;
    float _1821 = (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * 0.3183098733425140380859375;
    float _1828 = ((cbLight._m0[_1779].x * _1785) * _1821) + ((cbLight._m0[_1789].x * _1796) * _1819);
    float _1829 = ((_1785 * cbLight._m0[_1779].y) * _1821) + ((_1796 * cbLight._m0[_1789].y) * _1819);
    float _1830 = ((_1785 * cbLight._m0[_1779].z) * _1821) + ((_1796 * cbLight._m0[_1789].z) * _1819);
    uvec4 _1834 = floatBitsToUint(cbLight._m0[_1762 + 12u]);
    bool _1836 = _1834.x == 0u;
    float _1847;
    float _1849;
    float _1851;
    if (_1836)
    {
        _1847 = _1828;
        _1849 = _1829;
        _1851 = _1830;
    }
    else
    {
        uint _1855 = _1762 + 6u;
        float _1871 = (dot(vec3(cbLight._m0[_1762 + 2u].xyz), vec3(_510, _511, _512)) * 0.5) + 0.5;
        float _1872 = _1871 * _1871;
        float _4044 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
        float _1873 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1874 = isnan(1.0) ? _1777 : (isnan(_1777) ? 1.0 : min(_1777, 1.0));
        _1847 = (((cbLight._m0[_1855].x * 0.3183098733425140380859375) * _1873) * _1874) + _1828;
        _1849 = (((cbLight._m0[_1855].y * 0.3183098733425140380859375) * _1873) * _1874) + _1829;
        _1851 = (((cbLight._m0[_1855].z * 0.3183098733425140380859375) * _1873) * _1874) + _1830;
    }
    bool _1854 = _1834.y == 0u;
    float _1892;
    float _1894;
    float _1896;
    if (_1854)
    {
        _1892 = _1847;
        _1894 = _1849;
        _1896 = _1851;
    }
    else
    {
        uint _2062 = _1762 + 7u;
        float _2078 = (dot(vec3(cbLight._m0[_1762 + 3u].xyz), vec3(_510, _511, _512)) * 0.5) + 0.5;
        float _2079 = _2078 * _2078;
        float _4060 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2080 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _2081 = isnan(1.0) ? _1778 : (isnan(_1778) ? 1.0 : min(_1778, 1.0));
        _1892 = (((cbLight._m0[_2062].x * 0.3183098733425140380859375) * _2080) * _2081) + _1847;
        _1894 = (((cbLight._m0[_2062].y * 0.3183098733425140380859375) * _2080) * _2081) + _1849;
        _1896 = (((cbLight._m0[_2062].z * 0.3183098733425140380859375) * _2080) * _2081) + _1851;
    }
    uint _1899 = _1762 + 8u;
    float _1912 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1762].w)) * _513) * 0.949999988079071044921875);
    float _1913 = _1912 * _1912;
    float _1914 = cbLight._m0[_1762].x + _594;
    float _1915 = cbLight._m0[_1762].y + _595;
    float _1916 = cbLight._m0[_1762].z + _596;
    float _1920 = inversesqrt(dot(vec3(_1914, _1915, _1916), vec3(_1914, _1915, _1916)));
    float _1921 = _1920 * _1914;
    float _1922 = _1920 * _1915;
    float _1923 = _1920 * _1916;
    float _1924 = dot(vec3(_510, _511, _512), vec3(cbLight._m0[_1762].xyz));
    float _4076 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1927 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _4087 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _1928 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _1929 = dot(vec3(_510, _511, _512), vec3(_1921, _1922, _1923));
    float _4098 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
    float _1932 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
    float _1933 = dot(vec3(cbLight._m0[_1762].xyz), vec3(_1921, _1922, _1923));
    float _4109 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1937 = _1913 * _1913;
    float _1941 = ((_1932 * _1932) * (_1937 + (-1.0))) + 1.0;
    float _1949 = exp2(log2(1.0 - (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0)))) * 5.0);
    float _1950 = 0.959999978542327880859375 - _673;
    float _1952 = 0.959999978542327880859375 - _674;
    float _1953 = 0.959999978542327880859375 - _675;
    float _1960 = 1.0 - _1913;
    float _1971 = (0.5 / (((_1928 * ((_1927 * _1960) + _1913)) + 9.9999999392252902907785028219223e-09) + (((_1928 * _1960) + _1913) * _1927))) * _1927;
    float _4120 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _1973 = (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_1937 / ((_1941 * _1941) * 3.141590118408203125));
    uint _1984 = _1762 + 9u;
    float _1995 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1800].w)) * _513) * 0.949999988079071044921875);
    float _1996 = _1995 * _1995;
    float _1997 = cbLight._m0[_1800].x + _594;
    float _1998 = cbLight._m0[_1800].y + _595;
    float _1999 = cbLight._m0[_1800].z + _596;
    float _2003 = inversesqrt(dot(vec3(_1997, _1998, _1999), vec3(_1997, _1998, _1999)));
    float _2004 = _2003 * _1997;
    float _2005 = _2003 * _1998;
    float _2006 = _2003 * _1999;
    float _2007 = dot(vec3(_510, _511, _512), vec3(cbLight._m0[_1800].xyz));
    float _4131 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2010 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _2011 = dot(vec3(_510, _511, _512), vec3(_2004, _2005, _2006));
    float _4142 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2014 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
    float _2015 = dot(vec3(cbLight._m0[_1800].xyz), vec3(_2004, _2005, _2006));
    float _4153 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2019 = _1996 * _1996;
    float _2023 = ((_2014 * _2014) * (_2019 + (-1.0))) + 1.0;
    float _2030 = exp2(log2(1.0 - (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0)))) * 5.0);
    float _2037 = 1.0 - _1996;
    float _2047 = (0.5 / (((_1928 * ((_2010 * _2037) + _1996)) + 9.9999999392252902907785028219223e-09) + (((_1928 * _2037) + _1996) * _2010))) * _2010;
    float _4164 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2049 = (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_2019 / ((_2023 * _2023) * 3.141590118408203125));
    float _2059 = (((((_2030 * _1950) + _676) * cbLight._m0[_1984].x) * _2049) * _1785) + (((((_1949 * _1950) + _676) * cbLight._m0[_1899].x) * _1973) * _1796);
    float _2060 = (((((_2030 * _1952) + _678) * cbLight._m0[_1984].y) * _2049) * _1785) + (((((_1949 * _1952) + _678) * cbLight._m0[_1899].y) * _1973) * _1796);
    float _2061 = (((((_2030 * _1953) + _679) * cbLight._m0[_1984].z) * _2049) * _1785) + (((((_1949 * _1953) + _679) * cbLight._m0[_1899].z) * _1973) * _1796);
    float _2123;
    float _2125;
    float _2127;
    if (_1836)
    {
        _2123 = _2059;
        _2125 = _2060;
        _2127 = _2061;
    }
    else
    {
        uint _2129 = _1762 + 2u;
        uint _2133 = _1762 + 10u;
        float _2147 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2129].w)) * _513) * 0.949999988079071044921875);
        float _2148 = _2147 * _2147;
        float _2149 = cbLight._m0[_2129].x + _594;
        float _2150 = cbLight._m0[_2129].y + _595;
        float _2151 = cbLight._m0[_2129].z + _596;
        float _2155 = inversesqrt(dot(vec3(_2149, _2150, _2151), vec3(_2149, _2150, _2151)));
        float _2156 = _2155 * _2149;
        float _2157 = _2155 * _2150;
        float _2158 = _2155 * _2151;
        float _2159 = dot(vec3(_510, _511, _512), vec3(cbLight._m0[_2129].xyz));
        float _4175 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2162 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _2163 = dot(vec3(_510, _511, _512), vec3(_2156, _2157, _2158));
        float _4186 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
        float _2166 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _2167 = dot(vec3(cbLight._m0[_2129].xyz), vec3(_2156, _2157, _2158));
        float _4197 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
        float _2171 = _2148 * _2148;
        float _2175 = ((_2166 * _2166) * (_2171 + (-1.0))) + 1.0;
        float _2182 = exp2(log2(1.0 - (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0)))) * 5.0);
        float _2189 = 1.0 - _2148;
        float _2199 = (0.5 / (((_1928 * ((_2162 * _2189) + _2148)) + 9.9999999392252902907785028219223e-09) + (((_1928 * _2189) + _2148) * _2162))) * _2162;
        float _4208 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2201 = (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_2171 / ((_2175 * _2175) * 3.141590118408203125));
        float _2202 = isnan(1.0) ? _1777 : (isnan(_1777) ? 1.0 : min(_1777, 1.0));
        _2123 = (((((_2182 * _1950) + _676) * cbLight._m0[_2133].x) * _2201) * _2202) + _2059;
        _2125 = (((((_2182 * _1952) + _678) * cbLight._m0[_2133].y) * _2201) * _2202) + _2060;
        _2127 = (((((_2182 * _1953) + _679) * cbLight._m0[_2133].z) * _2201) * _2202) + _2061;
    }
    float _2237;
    float _2239;
    float _2241;
    if (_1854)
    {
        _2237 = _2123;
        _2239 = _2125;
        _2241 = _2127;
    }
    else
    {
        uint _2248 = _1762 + 3u;
        uint _2252 = _1762 + 11u;
        float _2266 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2248].w)) * _513) * 0.949999988079071044921875);
        float _2267 = _2266 * _2266;
        float _2268 = cbLight._m0[_2248].x + _594;
        float _2269 = cbLight._m0[_2248].y + _595;
        float _2270 = cbLight._m0[_2248].z + _596;
        float _2274 = inversesqrt(dot(vec3(_2268, _2269, _2270), vec3(_2268, _2269, _2270)));
        float _2275 = _2274 * _2268;
        float _2276 = _2274 * _2269;
        float _2277 = _2274 * _2270;
        float _2278 = dot(vec3(_510, _511, _512), vec3(cbLight._m0[_2248].xyz));
        float _4224 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2281 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _2282 = dot(vec3(_510, _511, _512), vec3(_2275, _2276, _2277));
        float _4235 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2285 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _2286 = dot(vec3(cbLight._m0[_2248].xyz), vec3(_2275, _2276, _2277));
        float _4246 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2290 = _2267 * _2267;
        float _2294 = ((_2285 * _2285) * (_2290 + (-1.0))) + 1.0;
        float _2301 = exp2(log2(1.0 - (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0)))) * 5.0);
        float _2308 = 1.0 - _2267;
        float _2318 = (0.5 / (((_1928 * ((_2281 * _2308) + _2267)) + 9.9999999392252902907785028219223e-09) + (((_1928 * _2308) + _2267) * _2281))) * _2281;
        float _4257 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        float _2320 = (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (_2290 / ((_2294 * _2294) * 3.141590118408203125));
        float _2321 = isnan(1.0) ? _1778 : (isnan(_1778) ? 1.0 : min(_1778, 1.0));
        _2237 = (((((_2301 * _1950) + _676) * cbLight._m0[_2252].x) * _2320) * _2321) + _2123;
        _2239 = (((((_2301 * _1952) + _678) * cbLight._m0[_2252].y) * _2320) * _2321) + _2125;
        _2241 = (((((_2301 * _1953) + _679) * cbLight._m0[_2252].z) * _2320) * _2321) + _2127;
    }
    float _2456;
    float _2458;
    float _2460;
    float _2462;
    float _2464;
    float _2466;
    if (_1760.y == 0u)
    {
        float _2396 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2397 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2396;
        float _2398 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2396;
        float _2399 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2396;
        uvec4 _2411 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2412 = _2411.x;
        uint _2423 = uint((float(_2411.y) * floor(float(uint(cbSceneParam._m0[85u].y * _613) / _2412))) + floor(float(uint(cbSceneParam._m0[85u].x * _612) / _2412)));
        float _2433 = (log2(_2399 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2434 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        uint _2437 = uint(isnan(14.0) ? _2434 : (isnan(_2434) ? 14.0 : min(_2434, 14.0)));
        uvec4 _2442 = texelFetch(g_lightClusterGridBuffer, int(((_2437 << 2u) + (_2423 << 6u)) >> 2u));
        uint _2443 = _2442.x;
        uint _2444 = _2411.z;
        float _2544;
        float _2546;
        float _2548;
        float _2550;
        float _2552;
        float _2554;
        if (((((1u << ((_2444 >> 4u) & 15u)) + 4294967295u) & _2443) == 0u) || ((_2444 & 240u) == 0u))
        {
            _2544 = 0.0;
            _2546 = 0.0;
            _2548 = 0.0;
            _2550 = 0.0;
            _2552 = 0.0;
            _2554 = 0.0;
        }
        else
        {
            float _2545;
            float _2547;
            float _2549;
            float _2551;
            float _2553;
            float _2555;
            float _2697 = 0.0;
            float _2698 = 0.0;
            float _2699 = 0.0;
            float _2700 = 0.0;
            float _2701 = 0.0;
            float _2702 = 0.0;
            uint _2703 = 0u;
            uint _2712;
            bool _2713;
            for (;;)
            {
                _2712 = texelFetch(g_lightClassification, int((((_2437 << 5u) + (_2423 << 9u)) + (_2703 << 2u)) >> 2u)).x;
                _2713 = _2712 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2713)
                {
                    frontier_phi_68_pred = _2697;
                    frontier_phi_68_pred_1 = _2702;
                    frontier_phi_68_pred_2 = _2701;
                    frontier_phi_68_pred_3 = _2700;
                    frontier_phi_68_pred_4 = _2699;
                    frontier_phi_68_pred_5 = _2698;
                }
                else
                {
                    float _2842;
                    float _2843;
                    float _2844;
                    float _2845;
                    float _2846;
                    float _2847;
                    uint _2848;
                    _2842 = _2697;
                    _2843 = _2698;
                    _2844 = _2699;
                    _2845 = _2700;
                    _2846 = _2701;
                    _2847 = _2702;
                    _2848 = _2712;
                    float _2769;
                    float _2770;
                    float _2771;
                    float _2772;
                    float _2773;
                    float _2774;
                    for (;;)
                    {
                        uint _2852 = uint(findLSB(_2848)) + (_2703 << 5u);
                        uint _2849 = (_2848 + 4294967295u) & _2848;
                        uint _2854 = _2852 * 48u;
                        vec4 _2868 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2854)).x, texelFetch(g_PointLightRenderingBuffer, int(_2854 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2854 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2854 + 3u)).x));
                        uint _2874 = (_2852 * 48u) + 4u;
                        vec4 _2887 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2874)).x, texelFetch(g_PointLightRenderingBuffer, int(_2874 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2874 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2874 + 3u)).x));
                        uint _2893 = (_2852 * 48u) + 8u;
                        vec3 _2904 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2893)).x, texelFetch(g_PointLightRenderingBuffer, int(_2893 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2893 + 2u)).x));
                        float _2908 = _2868.x - _2397;
                        float _2909 = _2868.y - _2398;
                        float _2910 = _2868.z - _2399;
                        float _2911 = dot(vec3(_2908, _2909, _2910), vec3(_2908, _2909, _2910));
                        float _2914 = inversesqrt(_2911);
                        float _2915 = _2914 * _2908;
                        float _2916 = _2914 * _2909;
                        float _2917 = _2914 * _2910;
                        float _2918 = dot(vec3(_633, _636, _639), vec3(_2915, _2916, _2917));
                        float _2923 = 1.0 - (_2911 * _2868.w);
                        float _4283 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
                        float _2924 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
                        float _2925 = sqrt(_2911) * _2887.w;
                        float _2928 = 1.39999997615814208984375 / (_2925 + 1.39999997615814208984375);
                        float _2929 = _2928 * _2928;
                        float _2932 = ((1.0 - _2929) * _2918) + _2929;
                        float _2935 = _2925 * _2925;
                        float _2939 = ((isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0))) * _2924) / ((_2935 * 0.699999988079071044921875) + 1.0);
                        float _2943 = (-0.0) - _2397;
                        float _2944 = (-0.0) - _2398;
                        float _2945 = (-0.0) - _2399;
                        float _2949 = inversesqrt(dot(vec3(_2943, _2944, _2945), vec3(_2943, _2944, _2945)));
                        float _2950 = _2949 * _2943;
                        float _2951 = _2949 * _2944;
                        float _2952 = _2949 * _2945;
                        float _2960 = exp2(log2(1.0 / ((_2935 * 3.5) + 5.0)) * 0.25);
                        float _2961 = 1.0 - _708;
                        float _2968 = sqrt(1.0 - ((1.0 - (_2961 * _2961)) * (1.0 - (_2960 * _2960))));
                        float _2969 = _2968 * _2968;
                        float _2970 = _2969 * _2969;
                        float _2971 = _2950 + _2915;
                        float _2972 = _2951 + _2916;
                        float _2973 = _2952 + _2917;
                        float _2977 = inversesqrt(dot(vec3(_2971, _2972, _2973), vec3(_2971, _2972, _2973)));
                        float _2981 = dot(vec3(_633, _636, _639), vec3(_2950, _2951, _2952));
                        float _4299 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
                        float _2984 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
                        float _2985 = dot(vec3(_633, _636, _639), vec3(_2977 * _2971, _2977 * _2972, _2977 * _2973));
                        float _4310 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
                        float _2988 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
                        float _2992 = ((_2988 * _2988) * (_2970 + (-1.0))) + 1.0;
                        float _2993 = _2928 * _2969;
                        float _2994 = _2993 * _2993;
                        float _2997 = ((1.0 - _2994) * _2918) + _2994;
                        float _4321 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                        float _2998 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
                        float _2999 = 1.0 - _2969;
                        float _3009 = (0.5 / (((_2998 * ((_2984 * _2999) + _2969)) + 9.9999999392252902907785028219223e-09) + (((_2998 * _2999) + _2969) * _2984))) * _2998;
                        float _4332 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                        float _3020 = (((_2970 * 3.1415927410125732421875) * (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0)))) / ((_2992 * _2992) * ((_2935 * 2.1991131305694580078125) + 3.141590118408203125))) * _2924;
                        _2772 = (_2939 * _2887.x) + _2845;
                        _2773 = (_2939 * _2887.y) + _2846;
                        _2774 = (_2939 * _2887.z) + _2847;
                        _2769 = (_3020 * _2904.x) + _2842;
                        _2770 = (_3020 * _2904.y) + _2843;
                        _2771 = (_3020 * _2904.z) + _2844;
                        if (_2849 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2842 = _2769;
                            _2843 = _2770;
                            _2844 = _2771;
                            _2845 = _2772;
                            _2846 = _2773;
                            _2847 = _2774;
                            _2848 = _2849;
                        }
                    }
                    frontier_phi_68_pred = _2769;
                    frontier_phi_68_pred_1 = _2774;
                    frontier_phi_68_pred_2 = _2773;
                    frontier_phi_68_pred_3 = _2772;
                    frontier_phi_68_pred_4 = _2771;
                    frontier_phi_68_pred_5 = _2770;
                }
                _2545 = frontier_phi_68_pred;
                _2555 = frontier_phi_68_pred_1;
                _2553 = frontier_phi_68_pred_2;
                _2551 = frontier_phi_68_pred_3;
                _2549 = frontier_phi_68_pred_4;
                _2547 = frontier_phi_68_pred_5;
                uint _2704 = _2703 + 1u;
                if (_2704 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2697 = _2545;
                    _2698 = _2547;
                    _2699 = _2549;
                    _2700 = _2551;
                    _2701 = _2553;
                    _2702 = _2555;
                    _2703 = _2704;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2544 = _2545;
            _2546 = _2547;
            _2548 = _2549;
            _2550 = _2551;
            _2552 = _2553;
            _2554 = _2555;
        }
        uvec4 _2558 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2559 = _2558.z;
        uint _2561 = (_2559 >> 8u) & 15u;
        float _2665;
        float _2667;
        float _2669;
        float _2671;
        float _2673;
        float _2675;
        if (((4294967295u << _2561) & _2443) == 0u)
        {
            _2665 = _2544;
            _2667 = _2546;
            _2669 = _2548;
            _2671 = _2550;
            _2673 = _2552;
            _2675 = _2554;
        }
        else
        {
            float _2690 = inversesqrt(dot(vec3(_2397, _2398, _2399), vec3(_2397, _2398, _2399)));
            float _2691 = _2690 * _2397;
            float _2692 = _2690 * _2398;
            float _2693 = _2690 * _2399;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2561 < ((_2559 >> 12u) & 15u))
            {
                float _2666;
                float _2668;
                float _2670;
                float _2672;
                float _2674;
                float _2676;
                float _2825 = _2544;
                float _2826 = _2546;
                float _2827 = _2548;
                float _2828 = _2550;
                float _2829 = _2552;
                float _2830 = _2554;
                uint _2831 = _2561;
                uint _2840;
                bool _2841;
                for (;;)
                {
                    _2840 = texelFetch(g_lightClassification, int((((_2437 << 5u) + (_2423 << 9u)) + (_2831 << 2u)) >> 2u)).x;
                    _2841 = _2840 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2841)
                    {
                        frontier_phi_79_pred = _2830;
                        frontier_phi_79_pred_1 = _2829;
                        frontier_phi_79_pred_2 = _2828;
                        frontier_phi_79_pred_3 = _2827;
                        frontier_phi_79_pred_4 = _2826;
                        frontier_phi_79_pred_5 = _2825;
                    }
                    else
                    {
                        float _3034;
                        float _3035;
                        float _3036;
                        float _3037;
                        float _3038;
                        float _3039;
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3047 = _2825;
                        float _3048 = _2826;
                        float _3049 = _2827;
                        float _3050 = _2828;
                        float _3051 = _2829;
                        float _3052 = _2830;
                        uint _3053 = _2840;
                        uint _3054;
                        vec4 _3079;
                        float _3080;
                        vec4 _3095;
                        vec3 _3107;
                        vec4 _3123;
                        vec4 _3138;
                        float _3184;
                        bool _3185;
                        for (;;)
                        {
                            uint _3064 = ((_2831 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3053));
                            _3054 = (_3053 + 4294967295u) & _3053;
                            uint _3066 = _3064 * 40u;
                            _3079 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3066)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 3u)).x));
                            _3080 = _3079.w;
                            uint _3082 = (_3064 * 40u) + 4u;
                            _3095 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3082)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 3u)).x));
                            uint _3097 = (_3064 * 40u) + 8u;
                            _3107 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3097)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 2u)).x));
                            uint _3110 = (_3064 * 40u) + 16u;
                            _3123 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3110)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 3u)).x));
                            uint _3125 = (_3064 * 40u) + 20u;
                            _3138 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3125)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 3u)).x));
                            uint _3140 = (_3064 * 40u) + 24u;
                            vec4 _3153 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3140)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 3u)).x));
                            uint _3159 = (_3064 * 40u) + 28u;
                            vec4 _3172 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3159)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 3u)).x));
                            _3184 = fma(_2399, _3172.z, fma(_2398, _3172.y, _3172.x * _2397)) + _3172.w;
                            _3185 = !((fma(_2399, _3153.z, fma(_2398, _3153.y, _3153.x * _2397)) + _3153.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3185)
                            {
                                float _3212 = _3079.x - _2397;
                                float _3213 = _3079.y - _2398;
                                float _3214 = _3079.z - _2399;
                                float _3215 = dot(vec3(_3212, _3213, _3214), vec3(_3212, _3213, _3214));
                                float _3218 = inversesqrt(_3215);
                                float _3219 = _3218 * _3212;
                                float _3220 = _3218 * _3213;
                                float _3221 = _3218 * _3214;
                                float _3225 = 1.0 - (_3215 / (_3080 * _3080));
                                float _4343 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                                float _3226 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
                                float _3230 = sqrt(_3215) * _3095.w;
                                float _3232 = 1.39999997615814208984375 / (_3230 + 1.39999997615814208984375);
                                float _3233 = _3232 * _3232;
                                float _3236 = ((1.0 - _3233) * dot(vec3(_3219, _3220, _3221), vec3(_633, _636, _639))) + _3233;
                                float _3239 = _3230 * _3230;
                                float _3243 = (fma(_2399, _3123.z, fma(_2398, _3123.y, _3123.x * _2397)) + _3123.w) / _3184;
                                float _3244 = (fma(_2399, _3138.z, fma(_2398, _3138.y, _3138.x * _2397)) + _3138.w) / _3184;
                                float _3248 = 1.0 - dot(vec2(_3243, _3244), vec2(_3243, _3244));
                                float _4359 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                                float _3249 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
                                float _3250 = _3249 * (((isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0))) * _3226) / ((_3239 * 0.699999988079071044921875) + 1.0));
                                float _3262 = exp2(log2(1.0 / ((_3239 * 3.5) + 5.0)) * 0.25);
                                float _3263 = 1.0 - _708;
                                float _3270 = sqrt(1.0 - ((1.0 - (_3263 * _3263)) * (1.0 - (_3262 * _3262))));
                                float _3271 = _3270 * _3270;
                                float _3272 = _3271 * _3271;
                                float _3273 = _3219 - _2691;
                                float _3274 = _3220 - _2692;
                                float _3275 = _3221 - _2693;
                                float _3279 = inversesqrt(dot(vec3(_3273, _3274, _3275), vec3(_3273, _3274, _3275)));
                                float _3283 = dot(vec3(_633, _636, _639), vec3((-0.0) - _2691, (-0.0) - _2692, (-0.0) - _2693));
                                float _4370 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                                float _3286 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
                                float _3287 = dot(vec3(_633, _636, _639), vec3(_3279 * _3273, _3279 * _3274, _3279 * _3275));
                                float _4381 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                                float _3290 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                                float _3294 = ((_3290 * _3290) * (_3272 + (-1.0))) + 1.0;
                                float _3295 = _3232 * _3271;
                                float _3296 = _3295 * _3295;
                                float _3302 = ((1.0 - _3296) * dot(vec3(_633, _636, _639), vec3(_3219, _3220, _3221))) + _3296;
                                float _4392 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                                float _3303 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
                                float _3304 = 1.0 - _3271;
                                float _3314 = (0.5 / (((_3303 * ((_3286 * _3304) + _3271)) + 9.9999999392252902907785028219223e-09) + (((_3303 * _3304) + _3271) * _3286))) * _3303;
                                float _4403 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                                float _3324 = (_3249 * _3226) * (((_3272 * 3.1415927410125732421875) * (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0)))) / ((_3294 * _3294) * ((_3239 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3250 * _3095.y;
                                frontier_phi_85_pred_1 = _3250 * _3095.x;
                                frontier_phi_85_pred_2 = _3324 * _3107.z;
                                frontier_phi_85_pred_3 = _3324 * _3107.y;
                                frontier_phi_85_pred_4 = _3324 * _3107.x;
                                frontier_phi_85_pred_5 = _3250 * _3095.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3332 = frontier_phi_85_pred;
                            _3331 = frontier_phi_85_pred_1;
                            _3330 = frontier_phi_85_pred_2;
                            _3329 = frontier_phi_85_pred_3;
                            _3328 = frontier_phi_85_pred_4;
                            _3333 = frontier_phi_85_pred_5;
                            _3037 = _3331 + _3050;
                            _3038 = _3332 + _3051;
                            _3039 = _3333 + _3052;
                            _3034 = _3328 + _3047;
                            _3035 = _3329 + _3048;
                            _3036 = _3330 + _3049;
                            if (_3054 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3047 = _3034;
                                _3048 = _3035;
                                _3049 = _3036;
                                _3050 = _3037;
                                _3051 = _3038;
                                _3052 = _3039;
                                _3053 = _3054;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3039;
                        frontier_phi_79_pred_1 = _3038;
                        frontier_phi_79_pred_2 = _3037;
                        frontier_phi_79_pred_3 = _3036;
                        frontier_phi_79_pred_4 = _3035;
                        frontier_phi_79_pred_5 = _3034;
                    }
                    _2676 = frontier_phi_79_pred;
                    _2674 = frontier_phi_79_pred_1;
                    _2672 = frontier_phi_79_pred_2;
                    _2670 = frontier_phi_79_pred_3;
                    _2668 = frontier_phi_79_pred_4;
                    _2666 = frontier_phi_79_pred_5;
                    uint _2832 = _2831 + 1u;
                    if (_2832 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2825 = _2666;
                        _2826 = _2668;
                        _2827 = _2670;
                        _2828 = _2672;
                        _2829 = _2674;
                        _2830 = _2676;
                        _2831 = _2832;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2670;
                frontier_phi_60_61_ladder_1 = _2676;
                frontier_phi_60_61_ladder_2 = _2674;
                frontier_phi_60_61_ladder_3 = _2672;
                frontier_phi_60_61_ladder_4 = _2668;
                frontier_phi_60_61_ladder_5 = _2666;
            }
            else
            {
                frontier_phi_60_61_ladder = _2548;
                frontier_phi_60_61_ladder_1 = _2554;
                frontier_phi_60_61_ladder_2 = _2552;
                frontier_phi_60_61_ladder_3 = _2550;
                frontier_phi_60_61_ladder_4 = _2546;
                frontier_phi_60_61_ladder_5 = _2544;
            }
            _2665 = frontier_phi_60_61_ladder_5;
            _2667 = frontier_phi_60_61_ladder_4;
            _2669 = frontier_phi_60_61_ladder;
            _2671 = frontier_phi_60_61_ladder_3;
            _2673 = frontier_phi_60_61_ladder_2;
            _2675 = frontier_phi_60_61_ladder_1;
        }
        float _2680 = isnan(1.0) ? _692 : (isnan(_692) ? 1.0 : min(_692, 1.0));
        _2456 = (_2680 * _2671) + _1892;
        _2458 = (_2680 * _2673) + _1894;
        _2460 = (_2680 * _2675) + _1896;
        _2462 = ((_2665 * _676) * _2680) + _2237;
        _2464 = ((_2667 * _678) * _2680) + _2239;
        _2466 = ((_2669 * _679) * _2680) + _2241;
    }
    else
    {
        _2456 = _1892;
        _2458 = _1894;
        _2460 = _1896;
        _2462 = _2237;
        _2464 = _2239;
        _2466 = _2241;
    }
    float _4419 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _4430 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _4441 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _2483 = ((isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * (_2456 + ((isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0))) * _692))) + ((_2462 + ((isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))) * _1527)) * cbPerFrame._m0[3u].x);
    float _2484 = ((isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_2458 + ((isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0))) * _692))) + ((_2464 + ((isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))) * _1527)) * cbPerFrame._m0[3u].x);
    float _2485 = ((isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_2460 + ((isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))) * _692))) + ((_2466 + ((isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))) * _1527)) * cbPerFrame._m0[3u].x);
    uint _2486 = _239 + 6u;
    float _2494 = _612 / cbSceneParam._m0[86u].x;
    float _2495 = _613 / cbSceneParam._m0[86u].y;
    vec4 _2509 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2494, _2495, (log2((isnan(cbSceneParam._m0[77u].w) ? _536 : (isnan(_536) ? cbSceneParam._m0[77u].w : min(_536, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2511 = _2509.x;
    float _2512 = _2509.y;
    float _2513 = _2509.z;
    float _2514 = _2509.w;
    float _2607;
    float _2609;
    float _2611;
    float _2613;
    if (_536 > cbSceneParam._m0[78u].w)
    {
        float _2569 = isnan(_536) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _536 : min(cbSceneParam._m0[80u].w, _536));
        float _2570 = _2569 / _536;
        float _2581 = _2570 * _587;
        float _2582 = _588 * _2570;
        float _2583 = (-0.0) - _2582;
        float _2585 = _2570 * _589;
        float _2587 = (cbSceneParam._m0[77u].w * _2583) / _2569;
        float _2588 = _2587 + cbSceneParam._m0[79u].w;
        float _2589 = cbSceneParam._m0[79u].w - _2582;
        float _2595 = sqrt(((_2581 * _2581) + (_2582 * _2582)) + (_2585 * _2585));
        float _2598 = (1.0 - (cbSceneParam._m0[77u].w / _2569)) * _2595;
        float _2603 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2605 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2782;
        if (abs((_2583 - _2587) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2782 = ((((_2588 > 0.0) ? exp2(_2603 * _2588) : (2.0 - exp2(_2605 * _2588))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2598;
        }
        else
        {
            float _2726 = 1.0 / cbSceneParam._m0[80u].x;
            float _2727 = isnan(_2589) ? _2588 : (isnan(_2588) ? _2589 : max(_2588, _2589));
            float _2728 = isnan(_2589) ? _2588 : (isnan(_2588) ? _2589 : min(_2588, _2589));
            float _2737 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : min(_2727, 0.0));
            float _2738 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : min(_2728, 0.0));
            _2782 = ((abs(_2595 / _2583) * cbSceneParam._m0[80u].y) * ((((_2737 - _2738) * 2.0) - ((exp2(_2603 * (isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0)))) - exp2(_2603 * (isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0))))) * _2726)) - ((exp2(_2605 * _2737) - exp2(_2605 * _2738)) * _2726))) + (_2598 * cbSceneParam._m0[80u].z);
        }
        vec4 _2784 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2494, _2495, 1.0), 0.0);
        float _2793 = exp2((_2782 * (-1.44269502162933349609375)) * (1.0 - _2784.w));
        float _2794 = log2(_2793);
        float _2810 = log2(_2514);
        _2607 = (exp2(_2810 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2794 * cbSceneParam._m0[78u].x)) * _2784.x) / cbSceneParam._m0[78u].x)) + _2511;
        _2609 = (exp2(_2810 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2794 * cbSceneParam._m0[78u].y)) * _2784.y) / cbSceneParam._m0[78u].y)) + _2512;
        _2611 = (exp2(_2810 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2794 * cbSceneParam._m0[78u].z)) * _2784.z) / cbSceneParam._m0[78u].z)) + _2513;
        _2613 = _2793 * _2514;
    }
    else
    {
        _2607 = _2511;
        _2609 = _2512;
        _2611 = _2513;
        _2613 = _2514;
    }
    bool _2820;
    vec4 _2623;
    vec4 _2645;
    float _2647;
    float _2651;
    float _2652;
    float _2653;
    float _2654;
    bool _2664;
    for (;;)
    {
        _2623 = cbMatDynParam._m0[0u];
        float _2625 = roundEven(_2623.y);
        bool _2626 = _2625 == 3.0;
        float _2627 = log2(_2613);
        float _2634 = exp2(_2627 * cbSceneParam._m0[78u].x) * _2483;
        float _2635 = exp2(_2627 * cbSceneParam._m0[78u].y) * _2484;
        float _2636 = exp2(_2627 * cbSceneParam._m0[78u].z) * _2485;
        float _2643 = _600 + (-0.5);
        _2645 = cbMtdParam._m0[1u];
        _2647 = _2645.y * _2643;
        float _2650 = (_2625 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2651 = _2650 * (_2626 ? _2634 : (_2634 + (cbSceneParam._m0[72u].w * _2607)));
        _2652 = _2650 * (_2626 ? _2635 : (_2635 + (cbSceneParam._m0[72u].w * _2609)));
        _2653 = _2650 * (_2626 ? _2636 : (_2636 + (cbSceneParam._m0[72u].w * _2611)));
        _2654 = _2643 * 0.999000012874603271484375;
        _2664 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2664)
        {
            if ((cbInstanceData._m0[_239 + 7u].x + _2654) < 0.5)
            {
                _2820 = true;
                break;
            }
        }
        uint _2761 = _652 + uint(_2623.w);
        if ((cbInstanceData._m0[_2761].w < 1.0) && ((cbInstanceData._m0[_2761].w + _2654) < 0.5))
        {
            _2820 = true;
            break;
        }
        if ((_2647 + 1.0) < _2645.x)
        {
            _2820 = true;
            break;
        }
        _2820 = false;
        break;
    }
    float _3025;
    if (_2820)
    {
        discard_state = true;
        _3025 = 0.0;
    }
    else
    {
        _3025 = cbInstanceData._m0[_2486].w;
    }
    SV_Target.x = _2651;
    SV_Target.y = _2652;
    SV_Target.z = _2653;
    SV_Target.w = _3025;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2486].w;
    discard_exit();
}


