#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1149;
float _3532;
float _3533;
float _3534;
float _3535;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _252 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _253 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3544 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _3555 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _3566 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    uint _263 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _263 + 1u;
    uint _272 = _263 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _296 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _282) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _283) + cbTextureTilingScale._m0[13u].w));
    vec4 _319 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _324 = _319.x * cbMtdParam._m0[9u].x;
    float _325 = _319.y * cbMtdParam._m0[9u].y;
    float _326 = _319.z * cbMtdParam._m0[9u].z;
    float _330 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _296.x) * _324;
    float _333 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _296.y) * _325;
    float _336 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _296.z) * _326;
    float _343 = ((_324 - _330) * (isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0)))) + _330;
    float _344 = ((_325 - _333) * (isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0)))) + _333;
    float _345 = ((_326 - _336) * (isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0)))) + _336;
    vec4 _358 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _282) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _283) + cbTextureTilingScale._m0[20u].w));
    vec4 _384 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _388 = _384.z;
    float _392 = (_384.x * 2.0) + (-1.0);
    float _393 = (_384.y * 2.0) + (-1.0);
    float _394 = dot(vec2(_392, _393), vec2(_392, _393));
    float _3577 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _399 = sqrt(1.0 - (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))));
    float _404 = _392 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_358.x * 2.0) + (-1.0)));
    float _405 = _393 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_358.y * 2.0) + (-1.0)));
    vec4 _418 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _282) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _283) + cbTextureTilingScale._m0[19u].w));
    float _420 = _418.x;
    float _421 = 1.0 - _420;
    float _452 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_420 - _421) * cbMtdParam._m0[24u].w) + _421) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3588 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _453 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
    float _461 = ((((cbMtdParam._m0[10u].x - _343) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _453) + _343;
    float _462 = ((((cbMtdParam._m0[10u].y - _344) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _453) + _344;
    float _463 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _345)) * _453) + _345;
    vec4 _476 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _478 = _476.x;
    float _480 = _478 - (_478 * _453);
    float _485 = (((_358.z - _388) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _388;
    float _489 = ((cbMtdParam._m0[23u].y - _485) * _453) + _485;
    vec4 _511 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _282) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].w * cbPerFrame._m0[22u].x) + _283) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _517 = (_511.x * 2.0) + (-1.0);
    float _518 = (_511.y * 2.0) + (-1.0);
    float _519 = dot(vec2(_517, _518), vec2(_517, _518));
    float _3599 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _535 = (_453 * (((cbMtdParam._m0[22u].z * _404) - _404) + _517)) + _404;
    float _536 = (_453 * (((cbMtdParam._m0[22u].z * _405) - _405) + _518)) + _405;
    float _537 = (_453 * (sqrt(1.0 - (isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0)))) - _399)) + _399;
    float _539 = cbMtdParam._m0[22u].x + _384.w;
    float _543 = gl_FragCoord.x * 0.125;
    float _545 = gl_FragCoord.y * 0.125;
    float _555 = fma(_537, _231 * NORMAL.x, fma(_536, _238 * TANGENT.x, (_224 * _216) * _535));
    float _558 = fma(_537, _231 * NORMAL.y, fma(_536, _238 * TANGENT.y, (_224 * _217) * _535));
    float _561 = fma(_537, _231 * NORMAL.z, fma(_536, _238 * TANGENT.z, (_224 * _218) * _535));
    float _565 = inversesqrt(dot(vec3(_555, _558, _561), vec3(_555, _558, _561)));
    float _566 = _565 * _555;
    float _567 = _565 * _558;
    float _568 = _565 * _561;
    float _3610 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _569 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _3621 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _3632 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _3643 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _3654 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _3665 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _574 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_543, _545)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _592 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _633 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _643 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _633);
    float _644 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _633);
    float _645 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _633);
    float _649 = inversesqrt(dot(vec3(_643, _644, _645), vec3(_643, _644, _645)));
    float _650 = _643 * _649;
    float _651 = _644 * _649;
    float _652 = _645 * _649;
    vec4 _654 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_543, _545));
    float _656 = _654.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _831 = sqrt(((_643 * _643) + (_644 * _644)) + (_645 * _645));
        float _837 = (cbMatDynParam._m0[5u].x * _831) + cbMatDynParam._m0[5u].y;
        float _3676 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _838 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _842 = (cbMatDynParam._m0[5u].z * _831) + cbMatDynParam._m0[5u].w;
        float _3687 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) - _838)) + _838) < ((_656 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _668 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _669 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _689 = fma(_568, cbSceneParam._m0[5u].z, fma(_567, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _566));
    float _692 = fma(_568, cbSceneParam._m0[6u].z, fma(_567, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _566));
    float _695 = fma(_568, cbSceneParam._m0[7u].z, fma(_567, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _566));
    uint _708 = _263 + 9u;
    uint _709 = _708 + uint(cbMatDynParam._m0[0u].w);
    float _715 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0)))) * cbInstanceData._m0[_709].x;
    float _716 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0)))) * cbInstanceData._m0[_709].y;
    float _717 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0)))) * cbInstanceData._m0[_709].z;
    float _3698 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _718 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
    float _3709 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _719 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
    float _3720 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _720 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    float _721 = 1.0 - _574;
    float _722 = _718 * _721;
    float _723 = _719 * _721;
    float _724 = _720 * _721;
    float _729 = (_718 + (-0.039999999105930328369140625)) * _574;
    float _730 = (_719 + (-0.039999999105930328369140625)) * _574;
    float _731 = (_720 + (-0.039999999105930328369140625)) * _574;
    float _732 = _729 + 0.039999999105930328369140625;
    float _734 = _730 + 0.039999999105930328369140625;
    float _735 = _731 + 0.039999999105930328369140625;
    vec4 _744 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _668, cbSceneParam._m0[86u].y * _669));
    float _748 = ((isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * TEXCOORD_5.w) * _744.x;
    float _749 = dot(vec3(_566, _567, _568), vec3(_650, _651, _652));
    float _752 = _749 * 2.0;
    float _756 = (_752 * _566) - _650;
    float _757 = (_752 * _567) - _651;
    float _758 = (_752 * _568) - _652;
    float _762 = abs(dot(vec3(_650, _651, _652), vec3(_566, _567, _568)));
    float _3731 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _764 = sqrt(_569);
    float _777 = exp2((_764 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_764 * 3.0));
    float _783 = (1.0 - _777) * ((_764 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _784 = _777 * _764;
    float _812 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _816 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _820 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1148;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _873 = fma(_820, cbModelParam._m0[26u].z, fma(_816, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _812));
        float _877 = fma(_820, cbModelParam._m0[27u].z, fma(_816, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _812));
        float _881 = fma(_820, cbModelParam._m0[28u].z, fma(_816, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _812));
        float _906 = _812 + _566;
        float _907 = _816 + _567;
        float _908 = _820 + _568;
        float _918 = fma(_908, cbModelParam._m0[26u].z, fma(_907, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _906)) - _873;
        float _919 = fma(_908, cbModelParam._m0[27u].z, fma(_907, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _906)) - _877;
        float _920 = fma(_908, cbModelParam._m0[28u].z, fma(_907, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _906)) - _881;
        float _924 = inversesqrt(dot(vec3(_918, _919, _920), vec3(_918, _919, _920)));
        float _937 = ((_924 * _918) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_873 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _938 = ((_924 * _919) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_877 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _939 = ((_924 * _920) / cbModelParam._m0[34u].z) + ((((((_881 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _942 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_937, _938, _939), 0.0);
        vec4 _949 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_937, _938, _939), 0.0);
        vec4 _956 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_937, _938, _939), 0.0);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_937, _938, _939), 0.0);
        float _976 = exp2((_942.w + (-0.5)) * 20.0) * 2.0;
        float _977 = _976 * (_942.x + (-0.5));
        float _978 = _976 * (_942.y + (-0.5));
        float _979 = _976 * (_942.z + (-0.5));
        float _986 = exp2((_949.w + (-0.5)) * 20.0) * 2.0;
        float _987 = _986 * (_949.x + (-0.5));
        float _988 = _986 * (_949.y + (-0.5));
        float _989 = _986 * (_949.z + (-0.5));
        float _996 = exp2((_956.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_956.x + (-0.5));
        float _998 = _996 * (_956.y + (-0.5));
        float _999 = _996 * (_956.z + (-0.5));
        float _1006 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_963.x + (-0.5));
        float _1008 = _1006 * (_963.y + (-0.5));
        float _1009 = _1006 * (_963.z + (-0.5));
        float _1010 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1011 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1012 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1013 = _977 * 0.5;
        float _1014 = _987 * 0.5;
        float _1015 = _997 * 0.5;
        float _1016 = dot(vec3(_1013, _1014, _1015), vec3(_1013, _1014, _1015));
        float _1021 = (_1016 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1016);
        float _1030 = (dot(vec3(_566, _567, _568), vec3(_1021 * _1013, _1021 * _1014, _1021 * _1015)) + 1.0) * 0.5;
        float _3757 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1040 = sqrt(((_1014 * _1014) + (_1013 * _1013)) + (_1015 * _1015)) / (_1010 + 9.9999997473787516355514526367188e-06);
        float _3768 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1042 = _1041 * 2.0;
        float _1046 = (1.0 - _1041) / (_1041 + 1.0);
        float _3779 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1056 = ((((1.0 - _1047) * (_1042 + 2.0)) * exp2(log2(isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * (_1042 + 1.0))) + _1047) * _1010;
        float _1057 = _978 * 0.5;
        float _1058 = _988 * 0.5;
        float _1059 = _998 * 0.5;
        float _1060 = dot(vec3(_1057, _1058, _1059), vec3(_1057, _1058, _1059));
        float _1065 = (_1060 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1060);
        float _1073 = (dot(vec3(_566, _567, _568), vec3(_1065 * _1057, _1065 * _1058, _1065 * _1059)) + 1.0) * 0.5;
        float _3790 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1082 = sqrt(((_1058 * _1058) + (_1057 * _1057)) + (_1059 * _1059)) / (_1011 + 9.9999997473787516355514526367188e-06);
        float _3801 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1084 = _1083 * 2.0;
        float _1088 = (1.0 - _1083) / (_1083 + 1.0);
        float _3812 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1098 = ((((1.0 - _1089) * (_1084 + 2.0)) * exp2(log2(isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * (_1084 + 1.0))) + _1089) * _1011;
        float _1099 = _979 * 0.5;
        float _1100 = _989 * 0.5;
        float _1101 = _999 * 0.5;
        float _1102 = dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101));
        float _1107 = (_1102 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1102);
        float _1115 = (dot(vec3(_566, _567, _568), vec3(_1107 * _1099, _1107 * _1100, _1107 * _1101)) + 1.0) * 0.5;
        float _3823 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1124 = sqrt(((_1100 * _1100) + (_1099 * _1099)) + (_1101 * _1101)) / (_1012 + 9.9999997473787516355514526367188e-06);
        float _3834 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1126 = _1125 * 2.0;
        float _1130 = (1.0 - _1125) / (_1125 + 1.0);
        float _3845 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1140 = ((((1.0 - _1131) * (_1126 + 2.0)) * exp2(log2(isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * (_1126 + 1.0))) + _1131) * _1012;
        _1148 = _979;
        _1150 = _978;
        _1151 = _977;
        _1152 = _989;
        _1153 = _988;
        _1154 = _987;
        _1155 = _999;
        _1156 = _998;
        _1157 = _997;
        _1158 = _1012;
        _1159 = _1011;
        _1160 = _1010;
        _1161 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0)));
        _1162 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0)));
        _1163 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0)));
    }
    else
    {
        _1148 = _1149;
        _1150 = _1149;
        _1151 = _1149;
        _1152 = _1149;
        _1153 = _1149;
        _1154 = _1149;
        _1155 = _1149;
        _1156 = _1149;
        _1157 = _1149;
        _1158 = _1149;
        _1159 = _1149;
        _1160 = _1149;
        _1161 = 0.0;
        _1162 = 0.0;
        _1163 = 0.0;
    }
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1188 = fma(_820, cbModelParam._m0[30u].z, fma(_816, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _812));
        float _1192 = fma(_820, cbModelParam._m0[31u].z, fma(_816, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _812));
        float _1196 = fma(_820, cbModelParam._m0[32u].z, fma(_816, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _812));
        float _1219 = _812 + _566;
        float _1220 = _816 + _567;
        float _1221 = _820 + _568;
        float _1231 = fma(_1221, cbModelParam._m0[30u].z, fma(_1220, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1219)) - _1188;
        float _1232 = fma(_1221, cbModelParam._m0[31u].z, fma(_1220, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1219)) - _1192;
        float _1233 = fma(_1221, cbModelParam._m0[32u].z, fma(_1220, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1219)) - _1196;
        float _1237 = inversesqrt(dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233)));
        float _1250 = ((_1237 * _1231) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1188 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1251 = ((_1237 * _1232) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1192 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1252 = ((_1237 * _1233) / cbModelParam._m0[35u].z) + ((((((_1196 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        vec4 _1261 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        vec4 _1268 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        vec4 _1275 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        float _1287 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1254.x + (-0.5));
        float _1289 = _1287 * (_1254.y + (-0.5));
        float _1290 = _1287 * (_1254.z + (-0.5));
        float _1297 = exp2((_1261.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1261.x + (-0.5));
        float _1299 = _1297 * (_1261.y + (-0.5));
        float _1300 = _1297 * (_1261.z + (-0.5));
        float _1307 = exp2((_1268.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1268.x + (-0.5));
        float _1309 = _1307 * (_1268.y + (-0.5));
        float _1310 = _1307 * (_1268.z + (-0.5));
        float _1317 = exp2((_1275.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1275.x + (-0.5));
        float _1319 = _1317 * (_1275.y + (-0.5));
        float _1320 = _1317 * (_1275.z + (-0.5));
        float _1321 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1322 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1323 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1324 = _1288 * 0.5;
        float _1325 = _1298 * 0.5;
        float _1326 = _1308 * 0.5;
        float _1327 = dot(vec3(_1324, _1325, _1326), vec3(_1324, _1325, _1326));
        float _1332 = (_1327 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1327);
        float _1340 = (dot(vec3(_566, _567, _568), vec3(_1332 * _1324, _1332 * _1325, _1332 * _1326)) + 1.0) * 0.5;
        float _3886 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1349 = sqrt(((_1325 * _1325) + (_1324 * _1324)) + (_1326 * _1326)) / (_1321 + 9.9999997473787516355514526367188e-06);
        float _3897 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1351 = _1350 * 2.0;
        float _1355 = (1.0 - _1350) / (_1350 + 1.0);
        float _3908 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1365 = ((((1.0 - _1356) * (_1351 + 2.0)) * exp2(log2(isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1351 + 1.0))) + _1356) * _1321;
        float _1366 = _1289 * 0.5;
        float _1367 = _1299 * 0.5;
        float _1368 = _1309 * 0.5;
        float _1369 = dot(vec3(_1366, _1367, _1368), vec3(_1366, _1367, _1368));
        float _1374 = (_1369 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1369);
        float _1382 = (dot(vec3(_566, _567, _568), vec3(_1374 * _1366, _1374 * _1367, _1374 * _1368)) + 1.0) * 0.5;
        float _3919 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1391 = sqrt(((_1367 * _1367) + (_1366 * _1366)) + (_1368 * _1368)) / (_1322 + 9.9999997473787516355514526367188e-06);
        float _3930 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1393 = _1392 * 2.0;
        float _1397 = (1.0 - _1392) / (_1392 + 1.0);
        float _3941 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1407 = ((((1.0 - _1398) * (_1393 + 2.0)) * exp2(log2(isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_1393 + 1.0))) + _1398) * _1322;
        float _1408 = _1290 * 0.5;
        float _1409 = _1300 * 0.5;
        float _1410 = _1310 * 0.5;
        float _1411 = dot(vec3(_1408, _1409, _1410), vec3(_1408, _1409, _1410));
        float _1416 = (_1411 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1411);
        float _1424 = (dot(vec3(_566, _567, _568), vec3(_1416 * _1408, _1416 * _1409, _1416 * _1410)) + 1.0) * 0.5;
        float _3952 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1433 = sqrt(((_1409 * _1409) + (_1408 * _1408)) + (_1410 * _1410)) / (_1323 + 9.9999997473787516355514526367188e-06);
        float _3963 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1435 = _1434 * 2.0;
        float _1439 = (1.0 - _1434) / (_1434 + 1.0);
        float _3974 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1449 = ((((1.0 - _1440) * (_1435 + 2.0)) * exp2(log2(isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1435 + 1.0))) + _1440) * _1323;
        _1457 = _1290;
        _1458 = _1289;
        _1459 = _1288;
        _1460 = _1300;
        _1461 = _1299;
        _1462 = _1298;
        _1463 = _1310;
        _1464 = _1309;
        _1465 = _1308;
        _1466 = _1323;
        _1467 = _1322;
        _1468 = _1321;
        _1469 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)));
        _1470 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)));
        _1471 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)));
    }
    else
    {
        _1457 = _1149;
        _1458 = _1149;
        _1459 = _1149;
        _1460 = _1149;
        _1461 = _1149;
        _1462 = _1149;
        _1463 = _1149;
        _1464 = _1149;
        _1465 = _1149;
        _1466 = _1149;
        _1467 = _1149;
        _1468 = _1149;
        _1469 = 0.0;
        _1470 = 0.0;
        _1471 = 0.0;
    }
    float _1481 = (cbModelParam._m0[1u].x * (_1469 - _1161)) + _1161;
    float _1482 = (cbModelParam._m0[1u].x * (_1470 - _1162)) + _1162;
    float _1483 = (cbModelParam._m0[1u].x * (_1471 - _1163)) + _1163;
    float _1504 = fma(_1483, cbSceneParam._m0[89u].z, fma(_1482, cbSceneParam._m0[89u].y, _1481 * cbSceneParam._m0[89u].x));
    float _1507 = fma(_1483, cbSceneParam._m0[90u].z, fma(_1482, cbSceneParam._m0[90u].y, _1481 * cbSceneParam._m0[90u].x));
    float _1510 = fma(_1483, cbSceneParam._m0[91u].z, fma(_1482, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1481));
    float _1525 = _756 * 0.5;
    float _1526 = _757 * 0.5;
    float _1527 = _758 * 0.5;
    float _1528 = dot(vec4(_1525, _1526, _1527, 1.0), vec4(_1459, _1462, _1465, _1468));
    float _1531 = dot(vec4(_1525, _1526, _1527, 1.0), vec4(_1458, _1461, _1464, _1467));
    float _1534 = dot(vec4(_1525, _1526, _1527, 1.0), vec4(_1457, _1460, _1463, _1466));
    float _1568;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1541 = dot(vec4(_1525, _1526, _1527, 1.0), vec4(_1148, _1152, _1155, _1158));
        float _1545 = dot(vec4(_1525, _1526, _1527, 1.0), vec4(_1150, _1153, _1156, _1159));
        float _1549 = dot(vec4(_1525, _1526, _1527, 1.0), vec4(_1151, _1154, _1157, _1160));
        float _1556 = dot(vec4(cbModelParam._m0[39u]), vec4(_1525, _1526, _1527, 1.0));
        _1568 = dot(vec3(isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)), isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)), isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1556) ? 0.0 : (isnan(0.0) ? _1556 : max(0.0, _1556))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1568 = 1.0;
    }
    float _1579;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1570 = dot(vec4(cbModelParam._m0[40u]), vec4(_1525, _1526, _1527, 1.0));
        _1579 = dot(vec3(isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)), isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)), isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1570) ? 0.0 : (isnan(0.0) ? _1570 : max(0.0, _1570))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1579 = 1.0;
    }
    float _1583 = (_1579 * cbModelParam._m0[1u].x) + (_1568 * (1.0 - cbModelParam._m0[1u].x));
    float _1593 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _569);
    float _1594 = isnan(_1593) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1593 : min(cbModelParam._m0[25u].z, _1593));
    float _1676;
    float _1678;
    float _1680;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1643 = fma(_820, cbModelParam._m0[13u].z, fma(_816, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _812)) + cbModelParam._m0[13u].w;
        float _1647 = fma(_820, cbModelParam._m0[14u].z, fma(_816, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _812)) + cbModelParam._m0[14u].w;
        float _1651 = fma(_820, cbModelParam._m0[15u].z, fma(_816, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _812)) + cbModelParam._m0[15u].w;
        float _1654 = fma(_758, cbModelParam._m0[13u].z, fma(_757, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _756));
        float _1657 = fma(_758, cbModelParam._m0[14u].z, fma(_757, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _756));
        float _1660 = fma(_758, cbModelParam._m0[15u].z, fma(_757, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _756));
        float _1688;
        if (_1654 > 0.0)
        {
            _1688 = abs((1.0 - _1643) / _1654);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1654 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1643 + 1.0) / _1654);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1688 = frontier_phi_19_17_ladder;
        }
        float _1893;
        if (_1657 > 0.0)
        {
            _1893 = abs((1.0 - _1647) / _1657);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1657 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1647 + 1.0) / _1657);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1893 = frontier_phi_28_24_ladder;
        }
        float _2147;
        if (_1660 > 0.0)
        {
            _2147 = abs((1.0 - _1651) / _1660);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1660 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1651 + 1.0) / _1660);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2147 = frontier_phi_40_35_ladder;
        }
        float _2149 = isnan(_1893) ? _1688 : (isnan(_1688) ? _1893 : min(_1688, _1893));
        float _2150 = isnan(_2147) ? _2149 : (isnan(_2149) ? _2147 : min(_2149, _2147));
        float _2154 = (_2150 * _1654) + _1643;
        float _2155 = (_2150 * _1657) + _1647;
        float _2156 = (_2150 * _1660) + _1651;
        float _2157 = _2150 * 9.9999997473787516355514526367188e-05;
        float _2159 = (-1.0) - _2157;
        float _2161 = _2157 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2156 > _2161) || ((_2156 < _2159) || ((_2155 > _2161) || ((_2155 < _2159) || ((_2154 < _2159) || (_2154 > _2161))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2284 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2156, cbModelParam._m0[9u].z, fma(_2155, cbModelParam._m0[9u].y, _2154 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2156, cbModelParam._m0[10u].z, fma(_2155, cbModelParam._m0[10u].y, _2154 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2156, cbModelParam._m0[11u].z, fma(_2155, cbModelParam._m0[11u].y, _2154 * cbModelParam._m0[11u].x))), _1594);
            frontier_phi_18_40_ladder = _2284.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2284.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2284.x * cbModelParam._m0[1u].y;
        }
        _1676 = frontier_phi_18_40_ladder_2;
        _1678 = frontier_phi_18_40_ladder_1;
        _1680 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1664 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_756, _757, _758), _1594);
        _1676 = _1664.x * cbModelParam._m0[1u].y;
        _1678 = _1664.y * cbModelParam._m0[1u].y;
        _1680 = _1664.z * cbModelParam._m0[1u].y;
    }
    float _1684 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _569);
    float _1685 = isnan(_1684) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1684 : min(cbModelParam._m0[25u].w, _1684));
    float _1776;
    float _1778;
    float _1780;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1740 = fma(_820, cbModelParam._m0[21u].z, fma(_816, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _812)) + cbModelParam._m0[21u].w;
        float _1744 = fma(_820, cbModelParam._m0[22u].z, fma(_816, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _812)) + cbModelParam._m0[22u].w;
        float _1748 = fma(_820, cbModelParam._m0[23u].z, fma(_816, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _812)) + cbModelParam._m0[23u].w;
        float _1751 = fma(_758, cbModelParam._m0[21u].z, fma(_757, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _756));
        float _1754 = fma(_758, cbModelParam._m0[22u].z, fma(_757, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _756));
        float _1757 = fma(_758, cbModelParam._m0[23u].z, fma(_757, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _756));
        float _1898;
        if (_1751 > 0.0)
        {
            _1898 = abs((1.0 - _1740) / _1751);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1751 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1740 + 1.0) / _1751);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1898 = frontier_phi_30_26_ladder;
        }
        float _2174;
        if (_1754 > 0.0)
        {
            _2174 = abs((1.0 - _1744) / _1754);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1754 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1744 + 1.0) / _1754);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2174 = frontier_phi_42_37_ladder;
        }
        float _2387;
        if (_1757 > 0.0)
        {
            _2387 = abs((1.0 - _1748) / _1757);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1757 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1748 + 1.0) / _1757);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2387 = frontier_phi_51_48_ladder;
        }
        float _2389 = isnan(_2174) ? _1898 : (isnan(_1898) ? _2174 : min(_1898, _2174));
        float _2390 = isnan(_2387) ? _2389 : (isnan(_2389) ? _2387 : min(_2389, _2387));
        float _2394 = (_2390 * _1751) + _1740;
        float _2395 = (_2390 * _1754) + _1744;
        float _2396 = (_2390 * _1757) + _1748;
        float _2397 = _2390 * 9.9999997473787516355514526367188e-05;
        float _2398 = (-1.0) - _2397;
        float _2400 = _2397 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2396 > _2400) || ((_2396 < _2398) || ((_2395 > _2400) || ((_2395 < _2398) || ((_2394 < _2398) || (_2394 > _2400))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2595 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2396, cbModelParam._m0[17u].z, fma(_2395, cbModelParam._m0[17u].y, _2394 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2396, cbModelParam._m0[18u].z, fma(_2395, cbModelParam._m0[18u].y, _2394 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2396, cbModelParam._m0[19u].z, fma(_2395, cbModelParam._m0[19u].y, _2394 * cbModelParam._m0[19u].x))), _1685);
            frontier_phi_27_51_ladder = _2595.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2595.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2595.x * cbModelParam._m0[1u].z;
        }
        _1776 = frontier_phi_27_51_ladder_2;
        _1778 = frontier_phi_27_51_ladder_1;
        _1780 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1760 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_756, _757, _758), _1685);
        _1776 = _1760.x * cbModelParam._m0[1u].z;
        _1778 = _1760.y * cbModelParam._m0[1u].z;
        _1780 = _1760.z * cbModelParam._m0[1u].z;
    }
    float _1793 = (((_783 * _732) + _784) * _748) * ((cbModelParam._m0[1u].w * (_1776 - _1676)) + _1676);
    float _1795 = (((_783 * _734) + _784) * _748) * ((cbModelParam._m0[1u].w * (_1778 - _1678)) + _1678);
    float _1797 = (((_783 * _735) + _784) * _748) * ((cbModelParam._m0[1u].w * (_1780 - _1680)) + _1680);
    float _1800 = fma(_1797, cbSceneParam._m0[89u].z, fma(_1795, cbSceneParam._m0[89u].y, _1793 * cbSceneParam._m0[89u].x));
    float _1803 = fma(_1797, cbSceneParam._m0[90u].z, fma(_1795, cbSceneParam._m0[90u].y, _1793 * cbSceneParam._m0[90u].x));
    float _1806 = fma(_1797, cbSceneParam._m0[91u].z, fma(_1795, cbSceneParam._m0[91u].y, _1793 * cbSceneParam._m0[91u].x));
    uvec4 _1816 = floatBitsToUint(cbInstanceData._m0[_263 + 5u]);
    uint _1818 = _1816.x * 14u;
    uint _1819 = _1818 + 13u;
    float _1826 = _748 + (-1.0);
    float _1831 = (cbLight._m0[_1819].x * _1826) + 1.0;
    float _1832 = (cbLight._m0[_1819].y * _1826) + 1.0;
    float _1833 = (cbLight._m0[_1819].z * _1826) + 1.0;
    float _1834 = (cbLight._m0[_1819].w * _1826) + 1.0;
    uint _1835 = _1818 + 5u;
    float _1841 = isnan(1.0) ? _1832 : (isnan(_1832) ? 1.0 : min(_1832, 1.0));
    uint _1845 = _1818 + 4u;
    float _1852 = isnan(1.0) ? _1831 : (isnan(_1831) ? 1.0 : min(_1831, 1.0));
    uint _1856 = _1818 | 1u;
    float _1867 = dot(vec3(cbLight._m0[_1818].xyz), vec3(_566, _567, _568));
    float _1870 = dot(vec3(cbLight._m0[_1856].xyz), vec3(_566, _567, _568));
    float _4110 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _4121 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
    float _1875 = (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * 0.3183098733425140380859375;
    float _1877 = (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * 0.3183098733425140380859375;
    float _1884 = ((cbLight._m0[_1835].x * _1841) * _1877) + ((cbLight._m0[_1845].x * _1852) * _1875);
    float _1885 = ((_1841 * cbLight._m0[_1835].y) * _1877) + ((_1852 * cbLight._m0[_1845].y) * _1875);
    float _1886 = ((_1841 * cbLight._m0[_1835].z) * _1877) + ((_1852 * cbLight._m0[_1845].z) * _1875);
    uvec4 _1890 = floatBitsToUint(cbLight._m0[_1818 + 12u]);
    bool _1892 = _1890.x == 0u;
    float _1903;
    float _1905;
    float _1907;
    if (_1892)
    {
        _1903 = _1884;
        _1905 = _1885;
        _1907 = _1886;
    }
    else
    {
        uint _1911 = _1818 + 6u;
        float _1927 = (dot(vec3(cbLight._m0[_1818 + 2u].xyz), vec3(_566, _567, _568)) * 0.5) + 0.5;
        float _1928 = _1927 * _1927;
        float _4132 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
        float _1929 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1930 = isnan(1.0) ? _1833 : (isnan(_1833) ? 1.0 : min(_1833, 1.0));
        _1903 = (((cbLight._m0[_1911].x * 0.3183098733425140380859375) * _1929) * _1930) + _1884;
        _1905 = (((cbLight._m0[_1911].y * 0.3183098733425140380859375) * _1929) * _1930) + _1885;
        _1907 = (((cbLight._m0[_1911].z * 0.3183098733425140380859375) * _1929) * _1930) + _1886;
    }
    bool _1910 = _1890.y == 0u;
    float _1948;
    float _1950;
    float _1952;
    if (_1910)
    {
        _1948 = _1903;
        _1950 = _1905;
        _1952 = _1907;
    }
    else
    {
        uint _2118 = _1818 + 7u;
        float _2134 = (dot(vec3(cbLight._m0[_1818 + 3u].xyz), vec3(_566, _567, _568)) * 0.5) + 0.5;
        float _2135 = _2134 * _2134;
        float _4148 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2136 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _2137 = isnan(1.0) ? _1834 : (isnan(_1834) ? 1.0 : min(_1834, 1.0));
        _1948 = (((cbLight._m0[_2118].x * 0.3183098733425140380859375) * _2136) * _2137) + _1903;
        _1950 = (((cbLight._m0[_2118].y * 0.3183098733425140380859375) * _2136) * _2137) + _1905;
        _1952 = (((cbLight._m0[_2118].z * 0.3183098733425140380859375) * _2136) * _2137) + _1907;
    }
    uint _1955 = _1818 + 8u;
    float _1968 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1818].w)) * _569) * 0.949999988079071044921875);
    float _1969 = _1968 * _1968;
    float _1970 = cbLight._m0[_1818].x + _650;
    float _1971 = cbLight._m0[_1818].y + _651;
    float _1972 = cbLight._m0[_1818].z + _652;
    float _1976 = inversesqrt(dot(vec3(_1970, _1971, _1972), vec3(_1970, _1971, _1972)));
    float _1977 = _1976 * _1970;
    float _1978 = _1976 * _1971;
    float _1979 = _1976 * _1972;
    float _1980 = dot(vec3(_566, _567, _568), vec3(cbLight._m0[_1818].xyz));
    float _4164 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1983 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _4175 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _1984 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    float _1985 = dot(vec3(_566, _567, _568), vec3(_1977, _1978, _1979));
    float _4186 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1988 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _1989 = dot(vec3(cbLight._m0[_1818].xyz), vec3(_1977, _1978, _1979));
    float _4197 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1993 = _1969 * _1969;
    float _1997 = ((_1988 * _1988) * (_1993 + (-1.0))) + 1.0;
    float _2005 = exp2(log2(1.0 - (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0)))) * 5.0);
    float _2006 = 0.959999978542327880859375 - _729;
    float _2008 = 0.959999978542327880859375 - _730;
    float _2009 = 0.959999978542327880859375 - _731;
    float _2016 = 1.0 - _1969;
    float _2027 = (0.5 / (((_1984 * ((_1983 * _2016) + _1969)) + 9.9999999392252902907785028219223e-09) + (((_1984 * _2016) + _1969) * _1983))) * _1983;
    float _4208 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2029 = (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_1993 / ((_1997 * _1997) * 3.141590118408203125));
    uint _2040 = _1818 + 9u;
    float _2051 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1856].w)) * _569) * 0.949999988079071044921875);
    float _2052 = _2051 * _2051;
    float _2053 = cbLight._m0[_1856].x + _650;
    float _2054 = cbLight._m0[_1856].y + _651;
    float _2055 = cbLight._m0[_1856].z + _652;
    float _2059 = inversesqrt(dot(vec3(_2053, _2054, _2055), vec3(_2053, _2054, _2055)));
    float _2060 = _2059 * _2053;
    float _2061 = _2059 * _2054;
    float _2062 = _2059 * _2055;
    float _2063 = dot(vec3(_566, _567, _568), vec3(cbLight._m0[_1856].xyz));
    float _4219 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2066 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _2067 = dot(vec3(_566, _567, _568), vec3(_2060, _2061, _2062));
    float _4230 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2070 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
    float _2071 = dot(vec3(cbLight._m0[_1856].xyz), vec3(_2060, _2061, _2062));
    float _4241 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2075 = _2052 * _2052;
    float _2079 = ((_2070 * _2070) * (_2075 + (-1.0))) + 1.0;
    float _2086 = exp2(log2(1.0 - (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0)))) * 5.0);
    float _2093 = 1.0 - _2052;
    float _2103 = (0.5 / (((_1984 * ((_2066 * _2093) + _2052)) + 9.9999999392252902907785028219223e-09) + (((_1984 * _2093) + _2052) * _2066))) * _2066;
    float _4252 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2105 = (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_2075 / ((_2079 * _2079) * 3.141590118408203125));
    float _2115 = (((((_2086 * _2006) + _732) * cbLight._m0[_2040].x) * _2105) * _1841) + (((((_2005 * _2006) + _732) * cbLight._m0[_1955].x) * _2029) * _1852);
    float _2116 = (((((_2086 * _2008) + _734) * cbLight._m0[_2040].y) * _2105) * _1841) + (((((_2005 * _2008) + _734) * cbLight._m0[_1955].y) * _2029) * _1852);
    float _2117 = (((((_2086 * _2009) + _735) * cbLight._m0[_2040].z) * _2105) * _1841) + (((((_2005 * _2009) + _735) * cbLight._m0[_1955].z) * _2029) * _1852);
    float _2179;
    float _2181;
    float _2183;
    if (_1892)
    {
        _2179 = _2115;
        _2181 = _2116;
        _2183 = _2117;
    }
    else
    {
        uint _2185 = _1818 + 2u;
        uint _2189 = _1818 + 10u;
        float _2203 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2185].w)) * _569) * 0.949999988079071044921875);
        float _2204 = _2203 * _2203;
        float _2205 = cbLight._m0[_2185].x + _650;
        float _2206 = cbLight._m0[_2185].y + _651;
        float _2207 = cbLight._m0[_2185].z + _652;
        float _2211 = inversesqrt(dot(vec3(_2205, _2206, _2207), vec3(_2205, _2206, _2207)));
        float _2212 = _2211 * _2205;
        float _2213 = _2211 * _2206;
        float _2214 = _2211 * _2207;
        float _2215 = dot(vec3(_566, _567, _568), vec3(cbLight._m0[_2185].xyz));
        float _4263 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2218 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _2219 = dot(vec3(_566, _567, _568), vec3(_2212, _2213, _2214));
        float _4274 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2222 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _2223 = dot(vec3(cbLight._m0[_2185].xyz), vec3(_2212, _2213, _2214));
        float _4285 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2227 = _2204 * _2204;
        float _2231 = ((_2222 * _2222) * (_2227 + (-1.0))) + 1.0;
        float _2238 = exp2(log2(1.0 - (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0)))) * 5.0);
        float _2245 = 1.0 - _2204;
        float _2255 = (0.5 / (((_1984 * ((_2218 * _2245) + _2204)) + 9.9999999392252902907785028219223e-09) + (((_1984 * _2245) + _2204) * _2218))) * _2218;
        float _4296 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        float _2257 = (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_2227 / ((_2231 * _2231) * 3.141590118408203125));
        float _2258 = isnan(1.0) ? _1833 : (isnan(_1833) ? 1.0 : min(_1833, 1.0));
        _2179 = (((((_2238 * _2006) + _732) * cbLight._m0[_2189].x) * _2257) * _2258) + _2115;
        _2181 = (((((_2238 * _2008) + _734) * cbLight._m0[_2189].y) * _2257) * _2258) + _2116;
        _2183 = (((((_2238 * _2009) + _735) * cbLight._m0[_2189].z) * _2257) * _2258) + _2117;
    }
    float _2293;
    float _2295;
    float _2297;
    if (_1910)
    {
        _2293 = _2179;
        _2295 = _2181;
        _2297 = _2183;
    }
    else
    {
        uint _2304 = _1818 + 3u;
        uint _2308 = _1818 + 11u;
        float _2322 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2304].w)) * _569) * 0.949999988079071044921875);
        float _2323 = _2322 * _2322;
        float _2324 = cbLight._m0[_2304].x + _650;
        float _2325 = cbLight._m0[_2304].y + _651;
        float _2326 = cbLight._m0[_2304].z + _652;
        float _2330 = inversesqrt(dot(vec3(_2324, _2325, _2326), vec3(_2324, _2325, _2326)));
        float _2331 = _2330 * _2324;
        float _2332 = _2330 * _2325;
        float _2333 = _2330 * _2326;
        float _2334 = dot(vec3(_566, _567, _568), vec3(cbLight._m0[_2304].xyz));
        float _4312 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2337 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _2338 = dot(vec3(_566, _567, _568), vec3(_2331, _2332, _2333));
        float _4323 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2341 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _2342 = dot(vec3(cbLight._m0[_2304].xyz), vec3(_2331, _2332, _2333));
        float _4334 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2346 = _2323 * _2323;
        float _2350 = ((_2341 * _2341) * (_2346 + (-1.0))) + 1.0;
        float _2357 = exp2(log2(1.0 - (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0)))) * 5.0);
        float _2364 = 1.0 - _2323;
        float _2374 = (0.5 / (((_1984 * ((_2337 * _2364) + _2323)) + 9.9999999392252902907785028219223e-09) + (((_1984 * _2364) + _2323) * _2337))) * _2337;
        float _4345 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2376 = (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_2346 / ((_2350 * _2350) * 3.141590118408203125));
        float _2377 = isnan(1.0) ? _1834 : (isnan(_1834) ? 1.0 : min(_1834, 1.0));
        _2293 = (((((_2357 * _2006) + _732) * cbLight._m0[_2308].x) * _2376) * _2377) + _2179;
        _2295 = (((((_2357 * _2008) + _734) * cbLight._m0[_2308].y) * _2376) * _2377) + _2181;
        _2297 = (((((_2357 * _2009) + _735) * cbLight._m0[_2308].z) * _2376) * _2377) + _2183;
    }
    float _2512;
    float _2514;
    float _2516;
    float _2518;
    float _2520;
    float _2522;
    if (_1816.y == 0u)
    {
        float _2452 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2453 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2452;
        float _2454 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2452;
        float _2455 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2452;
        uvec4 _2467 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2468 = _2467.x;
        uint _2479 = uint((float(_2467.y) * floor(float(uint(cbSceneParam._m0[85u].y * _669) / _2468))) + floor(float(uint(cbSceneParam._m0[85u].x * _668) / _2468)));
        float _2489 = (log2(_2455 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2490 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        uint _2493 = uint(isnan(14.0) ? _2490 : (isnan(_2490) ? 14.0 : min(_2490, 14.0)));
        uvec4 _2498 = texelFetch(g_lightClusterGridBuffer, int(((_2493 << 2u) + (_2479 << 6u)) >> 2u));
        uint _2499 = _2498.x;
        uint _2500 = _2467.z;
        float _2600;
        float _2602;
        float _2604;
        float _2606;
        float _2608;
        float _2610;
        if (((((1u << ((_2500 >> 4u) & 15u)) + 4294967295u) & _2499) == 0u) || ((_2500 & 240u) == 0u))
        {
            _2600 = 0.0;
            _2602 = 0.0;
            _2604 = 0.0;
            _2606 = 0.0;
            _2608 = 0.0;
            _2610 = 0.0;
        }
        else
        {
            float _2601;
            float _2603;
            float _2605;
            float _2607;
            float _2609;
            float _2611;
            float _2753 = 0.0;
            float _2754 = 0.0;
            float _2755 = 0.0;
            float _2756 = 0.0;
            float _2757 = 0.0;
            float _2758 = 0.0;
            uint _2759 = 0u;
            uint _2768;
            bool _2769;
            for (;;)
            {
                _2768 = texelFetch(g_lightClassification, int((((_2493 << 5u) + (_2479 << 9u)) + (_2759 << 2u)) >> 2u)).x;
                _2769 = _2768 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2769)
                {
                    frontier_phi_68_pred = _2753;
                    frontier_phi_68_pred_1 = _2758;
                    frontier_phi_68_pred_2 = _2757;
                    frontier_phi_68_pred_3 = _2756;
                    frontier_phi_68_pred_4 = _2755;
                    frontier_phi_68_pred_5 = _2754;
                }
                else
                {
                    float _2898;
                    float _2899;
                    float _2900;
                    float _2901;
                    float _2902;
                    float _2903;
                    uint _2904;
                    _2898 = _2753;
                    _2899 = _2754;
                    _2900 = _2755;
                    _2901 = _2756;
                    _2902 = _2757;
                    _2903 = _2758;
                    _2904 = _2768;
                    float _2825;
                    float _2826;
                    float _2827;
                    float _2828;
                    float _2829;
                    float _2830;
                    for (;;)
                    {
                        uint _2908 = uint(findLSB(_2904)) + (_2759 << 5u);
                        uint _2905 = (_2904 + 4294967295u) & _2904;
                        uint _2910 = _2908 * 48u;
                        vec4 _2924 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2910)).x, texelFetch(g_PointLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2910 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2910 + 3u)).x));
                        uint _2930 = (_2908 * 48u) + 4u;
                        vec4 _2943 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2930)).x, texelFetch(g_PointLightRenderingBuffer, int(_2930 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2930 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2930 + 3u)).x));
                        uint _2949 = (_2908 * 48u) + 8u;
                        vec3 _2960 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2949)).x, texelFetch(g_PointLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2949 + 2u)).x));
                        float _2964 = _2924.x - _2453;
                        float _2965 = _2924.y - _2454;
                        float _2966 = _2924.z - _2455;
                        float _2967 = dot(vec3(_2964, _2965, _2966), vec3(_2964, _2965, _2966));
                        float _2970 = inversesqrt(_2967);
                        float _2971 = _2970 * _2964;
                        float _2972 = _2970 * _2965;
                        float _2973 = _2970 * _2966;
                        float _2974 = dot(vec3(_689, _692, _695), vec3(_2971, _2972, _2973));
                        float _2979 = 1.0 - (_2967 * _2924.w);
                        float _4371 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
                        float _2980 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
                        float _2981 = sqrt(_2967) * _2943.w;
                        float _2984 = 1.39999997615814208984375 / (_2981 + 1.39999997615814208984375);
                        float _2985 = _2984 * _2984;
                        float _2988 = ((1.0 - _2985) * _2974) + _2985;
                        float _2991 = _2981 * _2981;
                        float _2995 = ((isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0))) * _2980) / ((_2991 * 0.699999988079071044921875) + 1.0);
                        float _2999 = (-0.0) - _2453;
                        float _3000 = (-0.0) - _2454;
                        float _3001 = (-0.0) - _2455;
                        float _3005 = inversesqrt(dot(vec3(_2999, _3000, _3001), vec3(_2999, _3000, _3001)));
                        float _3006 = _3005 * _2999;
                        float _3007 = _3005 * _3000;
                        float _3008 = _3005 * _3001;
                        float _3016 = exp2(log2(1.0 / ((_2991 * 3.5) + 5.0)) * 0.25);
                        float _3017 = 1.0 - _764;
                        float _3024 = sqrt(1.0 - ((1.0 - (_3017 * _3017)) * (1.0 - (_3016 * _3016))));
                        float _3025 = _3024 * _3024;
                        float _3026 = _3025 * _3025;
                        float _3027 = _3006 + _2971;
                        float _3028 = _3007 + _2972;
                        float _3029 = _3008 + _2973;
                        float _3033 = inversesqrt(dot(vec3(_3027, _3028, _3029), vec3(_3027, _3028, _3029)));
                        float _3037 = dot(vec3(_689, _692, _695), vec3(_3006, _3007, _3008));
                        float _4387 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                        float _3040 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
                        float _3041 = dot(vec3(_689, _692, _695), vec3(_3033 * _3027, _3033 * _3028, _3033 * _3029));
                        float _4398 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                        float _3044 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
                        float _3048 = ((_3044 * _3044) * (_3026 + (-1.0))) + 1.0;
                        float _3049 = _2984 * _3025;
                        float _3050 = _3049 * _3049;
                        float _3053 = ((1.0 - _3050) * _2974) + _3050;
                        float _4409 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                        float _3054 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
                        float _3055 = 1.0 - _3025;
                        float _3065 = (0.5 / (((_3054 * ((_3040 * _3055) + _3025)) + 9.9999999392252902907785028219223e-09) + (((_3054 * _3055) + _3025) * _3040))) * _3054;
                        float _4420 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                        float _3076 = (((_3026 * 3.1415927410125732421875) * (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0)))) / ((_3048 * _3048) * ((_2991 * 2.1991131305694580078125) + 3.141590118408203125))) * _2980;
                        _2828 = (_2995 * _2943.x) + _2901;
                        _2829 = (_2995 * _2943.y) + _2902;
                        _2830 = (_2995 * _2943.z) + _2903;
                        _2825 = (_3076 * _2960.x) + _2898;
                        _2826 = (_3076 * _2960.y) + _2899;
                        _2827 = (_3076 * _2960.z) + _2900;
                        if (_2905 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2898 = _2825;
                            _2899 = _2826;
                            _2900 = _2827;
                            _2901 = _2828;
                            _2902 = _2829;
                            _2903 = _2830;
                            _2904 = _2905;
                        }
                    }
                    frontier_phi_68_pred = _2825;
                    frontier_phi_68_pred_1 = _2830;
                    frontier_phi_68_pred_2 = _2829;
                    frontier_phi_68_pred_3 = _2828;
                    frontier_phi_68_pred_4 = _2827;
                    frontier_phi_68_pred_5 = _2826;
                }
                _2601 = frontier_phi_68_pred;
                _2611 = frontier_phi_68_pred_1;
                _2609 = frontier_phi_68_pred_2;
                _2607 = frontier_phi_68_pred_3;
                _2605 = frontier_phi_68_pred_4;
                _2603 = frontier_phi_68_pred_5;
                uint _2760 = _2759 + 1u;
                if (_2760 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2753 = _2601;
                    _2754 = _2603;
                    _2755 = _2605;
                    _2756 = _2607;
                    _2757 = _2609;
                    _2758 = _2611;
                    _2759 = _2760;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2600 = _2601;
            _2602 = _2603;
            _2604 = _2605;
            _2606 = _2607;
            _2608 = _2609;
            _2610 = _2611;
        }
        uvec4 _2614 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2615 = _2614.z;
        uint _2617 = (_2615 >> 8u) & 15u;
        float _2721;
        float _2723;
        float _2725;
        float _2727;
        float _2729;
        float _2731;
        if (((4294967295u << _2617) & _2499) == 0u)
        {
            _2721 = _2600;
            _2723 = _2602;
            _2725 = _2604;
            _2727 = _2606;
            _2729 = _2608;
            _2731 = _2610;
        }
        else
        {
            float _2746 = inversesqrt(dot(vec3(_2453, _2454, _2455), vec3(_2453, _2454, _2455)));
            float _2747 = _2746 * _2453;
            float _2748 = _2746 * _2454;
            float _2749 = _2746 * _2455;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2617 < ((_2615 >> 12u) & 15u))
            {
                float _2722;
                float _2724;
                float _2726;
                float _2728;
                float _2730;
                float _2732;
                float _2881 = _2600;
                float _2882 = _2602;
                float _2883 = _2604;
                float _2884 = _2606;
                float _2885 = _2608;
                float _2886 = _2610;
                uint _2887 = _2617;
                uint _2896;
                bool _2897;
                for (;;)
                {
                    _2896 = texelFetch(g_lightClassification, int((((_2493 << 5u) + (_2479 << 9u)) + (_2887 << 2u)) >> 2u)).x;
                    _2897 = _2896 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2897)
                    {
                        frontier_phi_79_pred = _2886;
                        frontier_phi_79_pred_1 = _2885;
                        frontier_phi_79_pred_2 = _2884;
                        frontier_phi_79_pred_3 = _2883;
                        frontier_phi_79_pred_4 = _2882;
                        frontier_phi_79_pred_5 = _2881;
                    }
                    else
                    {
                        float _3090;
                        float _3091;
                        float _3092;
                        float _3093;
                        float _3094;
                        float _3095;
                        float _3383;
                        float _3384;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3103 = _2881;
                        float _3104 = _2882;
                        float _3105 = _2883;
                        float _3106 = _2884;
                        float _3107 = _2885;
                        float _3108 = _2886;
                        uint _3109 = _2896;
                        uint _3110;
                        vec4 _3135;
                        float _3136;
                        vec4 _3151;
                        vec3 _3163;
                        vec4 _3178;
                        vec4 _3193;
                        float _3239;
                        bool _3240;
                        for (;;)
                        {
                            uint _3120 = ((_2887 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3109));
                            _3110 = (_3109 + 4294967295u) & _3109;
                            uint _3122 = _3120 * 40u;
                            _3135 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3122)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 3u)).x));
                            _3136 = _3135.w;
                            uint _3138 = (_3120 * 40u) + 4u;
                            _3151 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3138)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 3u)).x));
                            uint _3153 = (_3120 * 40u) + 8u;
                            _3163 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x));
                            uint _3165 = (_3120 * 40u) + 16u;
                            _3178 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 3u)).x));
                            uint _3180 = (_3120 * 40u) + 20u;
                            _3193 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3180)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 3u)).x));
                            uint _3195 = (_3120 * 40u) + 24u;
                            vec4 _3208 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3195)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 3u)).x));
                            uint _3214 = (_3120 * 40u) + 28u;
                            vec4 _3227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 3u)).x));
                            _3239 = fma(_2455, _3227.z, fma(_2454, _3227.y, _3227.x * _2453)) + _3227.w;
                            _3240 = !((fma(_2455, _3208.z, fma(_2454, _3208.y, _3208.x * _2453)) + _3208.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3240)
                            {
                                float _3267 = _3135.x - _2453;
                                float _3268 = _3135.y - _2454;
                                float _3269 = _3135.z - _2455;
                                float _3270 = dot(vec3(_3267, _3268, _3269), vec3(_3267, _3268, _3269));
                                float _3273 = inversesqrt(_3270);
                                float _3274 = _3273 * _3267;
                                float _3275 = _3273 * _3268;
                                float _3276 = _3273 * _3269;
                                float _3280 = 1.0 - (_3270 / (_3136 * _3136));
                                float _4431 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                                float _3281 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
                                float _3285 = sqrt(_3270) * _3151.w;
                                float _3287 = 1.39999997615814208984375 / (_3285 + 1.39999997615814208984375);
                                float _3288 = _3287 * _3287;
                                float _3291 = ((1.0 - _3288) * dot(vec3(_3274, _3275, _3276), vec3(_689, _692, _695))) + _3288;
                                float _3294 = _3285 * _3285;
                                float _3298 = (fma(_2455, _3178.z, fma(_2454, _3178.y, _3178.x * _2453)) + _3178.w) / _3239;
                                float _3299 = (fma(_2455, _3193.z, fma(_2454, _3193.y, _3193.x * _2453)) + _3193.w) / _3239;
                                float _3303 = 1.0 - dot(vec2(_3298, _3299), vec2(_3298, _3299));
                                float _4447 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                                float _3304 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
                                float _3305 = _3304 * (((isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0))) * _3281) / ((_3294 * 0.699999988079071044921875) + 1.0));
                                float _3317 = exp2(log2(1.0 / ((_3294 * 3.5) + 5.0)) * 0.25);
                                float _3318 = 1.0 - _764;
                                float _3325 = sqrt(1.0 - ((1.0 - (_3318 * _3318)) * (1.0 - (_3317 * _3317))));
                                float _3326 = _3325 * _3325;
                                float _3327 = _3326 * _3326;
                                float _3328 = _3274 - _2747;
                                float _3329 = _3275 - _2748;
                                float _3330 = _3276 - _2749;
                                float _3334 = inversesqrt(dot(vec3(_3328, _3329, _3330), vec3(_3328, _3329, _3330)));
                                float _3338 = dot(vec3(_689, _692, _695), vec3((-0.0) - _2747, (-0.0) - _2748, (-0.0) - _2749));
                                float _4458 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                                float _3341 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
                                float _3342 = dot(vec3(_689, _692, _695), vec3(_3334 * _3328, _3334 * _3329, _3334 * _3330));
                                float _4469 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                                float _3345 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
                                float _3349 = ((_3345 * _3345) * (_3327 + (-1.0))) + 1.0;
                                float _3350 = _3287 * _3326;
                                float _3351 = _3350 * _3350;
                                float _3357 = ((1.0 - _3351) * dot(vec3(_689, _692, _695), vec3(_3274, _3275, _3276))) + _3351;
                                float _4480 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                                float _3358 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
                                float _3359 = 1.0 - _3326;
                                float _3369 = (0.5 / (((_3358 * ((_3341 * _3359) + _3326)) + 9.9999999392252902907785028219223e-09) + (((_3358 * _3359) + _3326) * _3341))) * _3358;
                                float _4491 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                                float _3379 = (_3304 * _3281) * (((_3327 * 3.1415927410125732421875) * (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0)))) / ((_3349 * _3349) * ((_3294 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3305 * _3151.y;
                                frontier_phi_85_pred_1 = _3305 * _3151.x;
                                frontier_phi_85_pred_2 = _3379 * _3163.z;
                                frontier_phi_85_pred_3 = _3379 * _3163.y;
                                frontier_phi_85_pred_4 = _3379 * _3163.x;
                                frontier_phi_85_pred_5 = _3305 * _3151.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3387 = frontier_phi_85_pred;
                            _3386 = frontier_phi_85_pred_1;
                            _3385 = frontier_phi_85_pred_2;
                            _3384 = frontier_phi_85_pred_3;
                            _3383 = frontier_phi_85_pred_4;
                            _3388 = frontier_phi_85_pred_5;
                            _3093 = _3386 + _3106;
                            _3094 = _3387 + _3107;
                            _3095 = _3388 + _3108;
                            _3090 = _3383 + _3103;
                            _3091 = _3384 + _3104;
                            _3092 = _3385 + _3105;
                            if (_3110 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3103 = _3090;
                                _3104 = _3091;
                                _3105 = _3092;
                                _3106 = _3093;
                                _3107 = _3094;
                                _3108 = _3095;
                                _3109 = _3110;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3095;
                        frontier_phi_79_pred_1 = _3094;
                        frontier_phi_79_pred_2 = _3093;
                        frontier_phi_79_pred_3 = _3092;
                        frontier_phi_79_pred_4 = _3091;
                        frontier_phi_79_pred_5 = _3090;
                    }
                    _2732 = frontier_phi_79_pred;
                    _2730 = frontier_phi_79_pred_1;
                    _2728 = frontier_phi_79_pred_2;
                    _2726 = frontier_phi_79_pred_3;
                    _2724 = frontier_phi_79_pred_4;
                    _2722 = frontier_phi_79_pred_5;
                    uint _2888 = _2887 + 1u;
                    if (_2888 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2881 = _2722;
                        _2882 = _2724;
                        _2883 = _2726;
                        _2884 = _2728;
                        _2885 = _2730;
                        _2886 = _2732;
                        _2887 = _2888;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2726;
                frontier_phi_60_61_ladder_1 = _2732;
                frontier_phi_60_61_ladder_2 = _2730;
                frontier_phi_60_61_ladder_3 = _2728;
                frontier_phi_60_61_ladder_4 = _2724;
                frontier_phi_60_61_ladder_5 = _2722;
            }
            else
            {
                frontier_phi_60_61_ladder = _2604;
                frontier_phi_60_61_ladder_1 = _2610;
                frontier_phi_60_61_ladder_2 = _2608;
                frontier_phi_60_61_ladder_3 = _2606;
                frontier_phi_60_61_ladder_4 = _2602;
                frontier_phi_60_61_ladder_5 = _2600;
            }
            _2721 = frontier_phi_60_61_ladder_5;
            _2723 = frontier_phi_60_61_ladder_4;
            _2725 = frontier_phi_60_61_ladder;
            _2727 = frontier_phi_60_61_ladder_3;
            _2729 = frontier_phi_60_61_ladder_2;
            _2731 = frontier_phi_60_61_ladder_1;
        }
        float _2736 = isnan(1.0) ? _748 : (isnan(_748) ? 1.0 : min(_748, 1.0));
        _2512 = (_2736 * _2727) + _1948;
        _2514 = (_2736 * _2729) + _1950;
        _2516 = (_2736 * _2731) + _1952;
        _2518 = ((_2721 * _732) * _2736) + _2293;
        _2520 = ((_2723 * _734) * _2736) + _2295;
        _2522 = ((_2725 * _735) * _2736) + _2297;
    }
    else
    {
        _2512 = _1948;
        _2514 = _1950;
        _2516 = _1952;
        _2518 = _2293;
        _2520 = _2295;
        _2522 = _2297;
    }
    float _4507 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _4518 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _4529 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _2539 = ((isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * (_2512 + ((isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))) * _748))) + ((_2518 + ((isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))) * _1583)) * cbPerFrame._m0[3u].x);
    float _2540 = ((isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0))) * (_2514 + ((isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))) * _748))) + ((_2520 + ((isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))) * _1583)) * cbPerFrame._m0[3u].x);
    float _2541 = ((isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * (_2516 + ((isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))) * _748))) + ((_2522 + ((isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))) * _1583)) * cbPerFrame._m0[3u].x);
    uint _2542 = _263 + 6u;
    float _2550 = _668 / cbSceneParam._m0[86u].x;
    float _2551 = _669 / cbSceneParam._m0[86u].y;
    vec4 _2565 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2550, _2551, (log2((isnan(cbSceneParam._m0[77u].w) ? _592 : (isnan(_592) ? cbSceneParam._m0[77u].w : min(_592, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2567 = _2565.x;
    float _2568 = _2565.y;
    float _2569 = _2565.z;
    float _2570 = _2565.w;
    float _2663;
    float _2665;
    float _2667;
    float _2669;
    if (_592 > cbSceneParam._m0[78u].w)
    {
        float _2625 = isnan(_592) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _592 : min(cbSceneParam._m0[80u].w, _592));
        float _2626 = _2625 / _592;
        float _2637 = _2626 * _643;
        float _2638 = _644 * _2626;
        float _2639 = (-0.0) - _2638;
        float _2641 = _2626 * _645;
        float _2643 = (cbSceneParam._m0[77u].w * _2639) / _2625;
        float _2644 = _2643 + cbSceneParam._m0[79u].w;
        float _2645 = cbSceneParam._m0[79u].w - _2638;
        float _2651 = sqrt(((_2637 * _2637) + (_2638 * _2638)) + (_2641 * _2641));
        float _2654 = (1.0 - (cbSceneParam._m0[77u].w / _2625)) * _2651;
        float _2659 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2661 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2838;
        if (abs((_2639 - _2643) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2838 = ((((_2644 > 0.0) ? exp2(_2659 * _2644) : (2.0 - exp2(_2661 * _2644))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2654;
        }
        else
        {
            float _2782 = 1.0 / cbSceneParam._m0[80u].x;
            float _2783 = isnan(_2645) ? _2644 : (isnan(_2644) ? _2645 : max(_2644, _2645));
            float _2784 = isnan(_2645) ? _2644 : (isnan(_2644) ? _2645 : min(_2644, _2645));
            float _2793 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : min(_2783, 0.0));
            float _2794 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : min(_2784, 0.0));
            _2838 = ((abs(_2651 / _2639) * cbSceneParam._m0[80u].y) * ((((_2793 - _2794) * 2.0) - ((exp2(_2659 * (isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0)))) - exp2(_2659 * (isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0))))) * _2782)) - ((exp2(_2661 * _2793) - exp2(_2661 * _2794)) * _2782))) + (_2654 * cbSceneParam._m0[80u].z);
        }
        vec4 _2840 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2550, _2551, 1.0), 0.0);
        float _2849 = exp2((_2838 * (-1.44269502162933349609375)) * (1.0 - _2840.w));
        float _2850 = log2(_2849);
        float _2866 = log2(_2570);
        _2663 = (exp2(_2866 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2850 * cbSceneParam._m0[78u].x)) * _2840.x) / cbSceneParam._m0[78u].x)) + _2567;
        _2665 = (exp2(_2866 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2850 * cbSceneParam._m0[78u].y)) * _2840.y) / cbSceneParam._m0[78u].y)) + _2568;
        _2667 = (exp2(_2866 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2850 * cbSceneParam._m0[78u].z)) * _2840.z) / cbSceneParam._m0[78u].z)) + _2569;
        _2669 = _2849 * _2570;
    }
    else
    {
        _2663 = _2567;
        _2665 = _2568;
        _2667 = _2569;
        _2669 = _2570;
    }
    bool _2876;
    vec4 _2679;
    vec4 _2701;
    float _2703;
    float _2707;
    float _2708;
    float _2709;
    float _2710;
    bool _2720;
    for (;;)
    {
        _2679 = cbMatDynParam._m0[0u];
        float _2681 = roundEven(_2679.y);
        bool _2682 = _2681 == 3.0;
        float _2683 = log2(_2669);
        float _2690 = exp2(_2683 * cbSceneParam._m0[78u].x) * _2539;
        float _2691 = exp2(_2683 * cbSceneParam._m0[78u].y) * _2540;
        float _2692 = exp2(_2683 * cbSceneParam._m0[78u].z) * _2541;
        float _2699 = _656 + (-0.5);
        _2701 = cbMtdParam._m0[1u];
        _2703 = _2701.y * _2699;
        float _2706 = (_2681 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2707 = _2706 * (_2682 ? _2690 : (_2690 + (cbSceneParam._m0[72u].w * _2663)));
        _2708 = _2706 * (_2682 ? _2691 : (_2691 + (cbSceneParam._m0[72u].w * _2665)));
        _2709 = _2706 * (_2682 ? _2692 : (_2692 + (cbSceneParam._m0[72u].w * _2667)));
        _2710 = _2699 * 0.999000012874603271484375;
        _2720 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2720)
        {
            if ((cbInstanceData._m0[_263 + 7u].x + _2710) < 0.5)
            {
                _2876 = true;
                break;
            }
        }
        uint _2817 = _708 + uint(_2679.w);
        if ((cbInstanceData._m0[_2817].w < 1.0) && ((cbInstanceData._m0[_2817].w + _2710) < 0.5))
        {
            _2876 = true;
            break;
        }
        if ((_2703 + 1.0) < _2701.x)
        {
            _2876 = true;
            break;
        }
        _2876 = false;
        break;
    }
    float _3081;
    if (_2876)
    {
        discard_state = true;
        _3081 = 0.0;
    }
    else
    {
        _3081 = cbInstanceData._m0[_2542].w;
    }
    SV_Target.x = _2707;
    SV_Target.y = _2708;
    SV_Target.z = _2709;
    SV_Target.w = _3081;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2542].w;
    discard_exit();
}


