#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1071;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _230 = uint(roundEven(NORMAL.w)) * 13u;
    uint _236 = _230 + 1u;
    uint _240 = _230 + 2u;
    float _249 = sqrt(((cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x)) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x));
    float _250 = _249 * TEXCOORD.z;
    float _251 = _249 * TEXCOORD.w;
    vec4 _271 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _277 = _271.x * cbMtdParam._m0[11u].x;
    float _278 = _271.y * cbMtdParam._m0[11u].y;
    float _279 = _271.z * cbMtdParam._m0[11u].z;
    vec4 _298 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _250) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _251) + cbTextureTilingScale._m0[5u].w));
    vec4 _334 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _336 = _334.x;
    float _348 = dot(vec4(_336, _334.yzw), vec4(cbMtdParam._m0[28u].w, cbMtdParam._m0[29u].xy, 0.0));
    float _365 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_336 - _348) * cbMtdParam._m0[24u].y) + _348) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3425 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _366 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
    float _373 = (_366 * ((_298.x * cbMtdParam._m0[12u].x) - _277)) + _277;
    float _374 = (_366 * ((_298.y * cbMtdParam._m0[12u].y) - _278)) + _278;
    float _375 = (_366 * ((_298.z * cbMtdParam._m0[12u].z) - _279)) + _279;
    vec4 _388 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _250) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _251) + cbTextureTilingScale._m0[4u].w));
    vec4 _405 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _407 = _405.x;
    float _408 = _405.y;
    float _409 = _405.z;
    float _418 = ((_388.z - _409) * _366) + _409;
    float _421 = ((((_388.x - _407) * _366) + _407) * 2.0) + (-1.0);
    float _423 = ((((_388.y - _408) * _366) + _408) * 2.0) + (-1.0);
    float _424 = dot(vec2(_421, _423), vec2(_421, _423));
    float _3436 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _429 = sqrt(1.0 - (isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0))));
    vec4 _445 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _457 = (((_445.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w) + _421;
    float _458 = (((_445.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w) + _423;
    vec4 _484 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _486 = _484.x;
    float _504 = ((texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _250) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _251) + cbTextureTilingScale._m0[9u].w)).x - _486) * _366) + _486;
    float _508 = ((texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _504) * cbMtdParam._m0[19u].z) + _504;
    float _512 = (cbMtdParam._m0[19u].w * (_445.z - _418)) + _418;
    float _517 = cbMtdParam._m0[22u].x + _445.w;
    float _520 = fma(_429, _217 * NORMAL.x, fma(_458, _224 * TANGENT.x, (_210 * _202) * _457));
    float _523 = fma(_429, _217 * NORMAL.y, fma(_458, _224 * TANGENT.y, (_210 * _203) * _457));
    float _526 = fma(_429, _217 * NORMAL.z, fma(_458, _224 * TANGENT.z, (_210 * _204) * _457));
    float _530 = inversesqrt(dot(vec3(_520, _523, _526), vec3(_520, _523, _526)));
    float _531 = _530 * _520;
    float _532 = _530 * _523;
    float _533 = _530 * _526;
    float _3447 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _534 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
    float _3458 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _3469 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _3480 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _3491 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _3502 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _539 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
    float _553 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _594 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _604 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _594);
    float _605 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _594);
    float _606 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _594);
    float _610 = inversesqrt(dot(vec3(_604, _605, _606), vec3(_604, _605, _606)));
    float _611 = _604 * _610;
    float _612 = _605 * _610;
    float _613 = _606 * _610;
    float _619 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _620 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _638 = fma(_533, cbSceneParam._m0[5u].z, fma(_532, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _531));
    float _641 = fma(_533, cbSceneParam._m0[6u].z, fma(_532, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _531));
    float _644 = fma(_533, cbSceneParam._m0[7u].z, fma(_532, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _531));
    uint _658 = (_230 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _664 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0)))) * cbInstanceData._m0[_658].x;
    float _665 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0)))) * cbInstanceData._m0[_658].y;
    float _666 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0)))) * cbInstanceData._m0[_658].z;
    float _3513 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _667 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
    float _3524 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _668 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
    float _3535 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _669 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
    float _670 = 1.0 - _539;
    float _671 = _667 * _670;
    float _672 = _668 * _670;
    float _673 = _669 * _670;
    float _678 = (_667 + (-0.039999999105930328369140625)) * _539;
    float _679 = (_668 + (-0.039999999105930328369140625)) * _539;
    float _680 = (_669 + (-0.039999999105930328369140625)) * _539;
    float _681 = _678 + 0.039999999105930328369140625;
    float _683 = _679 + 0.039999999105930328369140625;
    float _684 = _680 + 0.039999999105930328369140625;
    vec4 _693 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _619, cbSceneParam._m0[86u].y * _620));
    float _697 = ((isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0))) * TEXCOORD_5.w) * _693.x;
    float _698 = dot(vec3(_531, _532, _533), vec3(_611, _612, _613));
    float _701 = _698 * 2.0;
    float _705 = (_701 * _531) - _611;
    float _706 = (_701 * _532) - _612;
    float _707 = (_701 * _533) - _613;
    float _711 = abs(dot(vec3(_611, _612, _613), vec3(_531, _532, _533)));
    float _3546 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _713 = sqrt(_534);
    float _726 = exp2((_713 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_713 * 3.0));
    float _732 = (1.0 - _726) * ((_713 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _733 = _726 * _713;
    float _761 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _765 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _769 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1070;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _795 = fma(_769, cbModelParam._m0[26u].z, fma(_765, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _761));
        float _799 = fma(_769, cbModelParam._m0[27u].z, fma(_765, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _761));
        float _803 = fma(_769, cbModelParam._m0[28u].z, fma(_765, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _761));
        float _828 = _761 + _531;
        float _829 = _765 + _532;
        float _830 = _769 + _533;
        float _840 = fma(_830, cbModelParam._m0[26u].z, fma(_829, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _828)) - _795;
        float _841 = fma(_830, cbModelParam._m0[27u].z, fma(_829, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _828)) - _799;
        float _842 = fma(_830, cbModelParam._m0[28u].z, fma(_829, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _828)) - _803;
        float _846 = inversesqrt(dot(vec3(_840, _841, _842), vec3(_840, _841, _842)));
        float _859 = ((_846 * _840) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_795 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _860 = ((_846 * _841) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_799 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _861 = ((_846 * _842) / cbModelParam._m0[34u].z) + ((((((_803 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _864 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_859, _860, _861), 0.0);
        vec4 _871 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_859, _860, _861), 0.0);
        vec4 _878 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_859, _860, _861), 0.0);
        vec4 _885 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_859, _860, _861), 0.0);
        float _898 = exp2((_864.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_864.x + (-0.5));
        float _900 = _898 * (_864.y + (-0.5));
        float _901 = _898 * (_864.z + (-0.5));
        float _908 = exp2((_871.w + (-0.5)) * 20.0) * 2.0;
        float _909 = _908 * (_871.x + (-0.5));
        float _910 = _908 * (_871.y + (-0.5));
        float _911 = _908 * (_871.z + (-0.5));
        float _918 = exp2((_878.w + (-0.5)) * 20.0) * 2.0;
        float _919 = _918 * (_878.x + (-0.5));
        float _920 = _918 * (_878.y + (-0.5));
        float _921 = _918 * (_878.z + (-0.5));
        float _928 = exp2((_885.w + (-0.5)) * 20.0) * 2.0;
        float _929 = _928 * (_885.x + (-0.5));
        float _930 = _928 * (_885.y + (-0.5));
        float _931 = _928 * (_885.z + (-0.5));
        float _932 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _933 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _934 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _935 = _899 * 0.5;
        float _936 = _909 * 0.5;
        float _937 = _919 * 0.5;
        float _938 = dot(vec3(_935, _936, _937), vec3(_935, _936, _937));
        float _943 = (_938 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_938);
        float _952 = (dot(vec3(_531, _532, _533), vec3(_943 * _935, _943 * _936, _943 * _937)) + 1.0) * 0.5;
        float _3572 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _962 = sqrt(((_936 * _936) + (_935 * _935)) + (_937 * _937)) / (_932 + 9.9999997473787516355514526367188e-06);
        float _3583 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
        float _964 = _963 * 2.0;
        float _968 = (1.0 - _963) / (_963 + 1.0);
        float _3594 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _978 = ((((1.0 - _969) * (_964 + 2.0)) * exp2(log2(isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) * (_964 + 1.0))) + _969) * _932;
        float _979 = _900 * 0.5;
        float _980 = _910 * 0.5;
        float _981 = _920 * 0.5;
        float _982 = dot(vec3(_979, _980, _981), vec3(_979, _980, _981));
        float _987 = (_982 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_982);
        float _995 = (dot(vec3(_531, _532, _533), vec3(_987 * _979, _987 * _980, _987 * _981)) + 1.0) * 0.5;
        float _3605 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _1004 = sqrt(((_980 * _980) + (_979 * _979)) + (_981 * _981)) / (_933 + 9.9999997473787516355514526367188e-06);
        float _3616 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _1006 = _1005 * 2.0;
        float _1010 = (1.0 - _1005) / (_1005 + 1.0);
        float _3627 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _1020 = ((((1.0 - _1011) * (_1006 + 2.0)) * exp2(log2(isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) * (_1006 + 1.0))) + _1011) * _933;
        float _1021 = _901 * 0.5;
        float _1022 = _911 * 0.5;
        float _1023 = _921 * 0.5;
        float _1024 = dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023));
        float _1029 = (_1024 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1024);
        float _1037 = (dot(vec3(_531, _532, _533), vec3(_1029 * _1021, _1029 * _1022, _1029 * _1023)) + 1.0) * 0.5;
        float _3638 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1046 = sqrt(((_1022 * _1022) + (_1021 * _1021)) + (_1023 * _1023)) / (_934 + 9.9999997473787516355514526367188e-06);
        float _3649 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _1048 = _1047 * 2.0;
        float _1052 = (1.0 - _1047) / (_1047 + 1.0);
        float _3660 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _1062 = ((((1.0 - _1053) * (_1048 + 2.0)) * exp2(log2(isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * (_1048 + 1.0))) + _1053) * _934;
        _1070 = _901;
        _1072 = _900;
        _1073 = _899;
        _1074 = _911;
        _1075 = _910;
        _1076 = _909;
        _1077 = _921;
        _1078 = _920;
        _1079 = _919;
        _1080 = _934;
        _1081 = _933;
        _1082 = _932;
        _1083 = cbModelParam._m0[36u].z * (isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0)));
        _1084 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0)));
        _1085 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0)));
    }
    else
    {
        _1070 = _1071;
        _1072 = _1071;
        _1073 = _1071;
        _1074 = _1071;
        _1075 = _1071;
        _1076 = _1071;
        _1077 = _1071;
        _1078 = _1071;
        _1079 = _1071;
        _1080 = _1071;
        _1081 = _1071;
        _1082 = _1071;
        _1083 = 0.0;
        _1084 = 0.0;
        _1085 = 0.0;
    }
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1110 = fma(_769, cbModelParam._m0[30u].z, fma(_765, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _761));
        float _1114 = fma(_769, cbModelParam._m0[31u].z, fma(_765, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _761));
        float _1118 = fma(_769, cbModelParam._m0[32u].z, fma(_765, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _761));
        float _1141 = _761 + _531;
        float _1142 = _765 + _532;
        float _1143 = _769 + _533;
        float _1153 = fma(_1143, cbModelParam._m0[30u].z, fma(_1142, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1141)) - _1110;
        float _1154 = fma(_1143, cbModelParam._m0[31u].z, fma(_1142, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1141)) - _1114;
        float _1155 = fma(_1143, cbModelParam._m0[32u].z, fma(_1142, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1141)) - _1118;
        float _1159 = inversesqrt(dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155)));
        float _1172 = ((_1159 * _1153) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1110 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1173 = ((_1159 * _1154) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1114 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1174 = ((_1159 * _1155) / cbModelParam._m0[35u].z) + ((((((_1118 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        float _1209 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1176.x + (-0.5));
        float _1211 = _1209 * (_1176.y + (-0.5));
        float _1212 = _1209 * (_1176.z + (-0.5));
        float _1219 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1183.x + (-0.5));
        float _1221 = _1219 * (_1183.y + (-0.5));
        float _1222 = _1219 * (_1183.z + (-0.5));
        float _1229 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1190.x + (-0.5));
        float _1231 = _1229 * (_1190.y + (-0.5));
        float _1232 = _1229 * (_1190.z + (-0.5));
        float _1239 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1197.x + (-0.5));
        float _1241 = _1239 * (_1197.y + (-0.5));
        float _1242 = _1239 * (_1197.z + (-0.5));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1245 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1246 = _1210 * 0.5;
        float _1247 = _1220 * 0.5;
        float _1248 = _1230 * 0.5;
        float _1249 = dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248));
        float _1254 = (_1249 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1249);
        float _1262 = (dot(vec3(_531, _532, _533), vec3(_1254 * _1246, _1254 * _1247, _1254 * _1248)) + 1.0) * 0.5;
        float _3701 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1271 = sqrt(((_1247 * _1247) + (_1246 * _1246)) + (_1248 * _1248)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _3712 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1273 = _1272 * 2.0;
        float _1277 = (1.0 - _1272) / (_1272 + 1.0);
        float _3723 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1287 = ((((1.0 - _1278) * (_1273 + 2.0)) * exp2(log2(isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * (_1273 + 1.0))) + _1278) * _1243;
        float _1288 = _1211 * 0.5;
        float _1289 = _1221 * 0.5;
        float _1290 = _1231 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1304 = (dot(vec3(_531, _532, _533), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _3734 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1313 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1244 + 9.9999997473787516355514526367188e-06);
        float _3745 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _3756 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * (_1315 + 1.0))) + _1320) * _1244;
        float _1330 = _1212 * 0.5;
        float _1331 = _1222 * 0.5;
        float _1332 = _1232 * 0.5;
        float _1333 = dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332));
        float _1338 = (_1333 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1333);
        float _1346 = (dot(vec3(_531, _532, _533), vec3(_1338 * _1330, _1338 * _1331, _1338 * _1332)) + 1.0) * 0.5;
        float _3767 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1355 = sqrt(((_1331 * _1331) + (_1330 * _1330)) + (_1332 * _1332)) / (_1245 + 9.9999997473787516355514526367188e-06);
        float _3778 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1357 = _1356 * 2.0;
        float _1361 = (1.0 - _1356) / (_1356 + 1.0);
        float _3789 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1371 = ((((1.0 - _1362) * (_1357 + 2.0)) * exp2(log2(isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * (_1357 + 1.0))) + _1362) * _1245;
        _1379 = _1212;
        _1380 = _1211;
        _1381 = _1210;
        _1382 = _1222;
        _1383 = _1221;
        _1384 = _1220;
        _1385 = _1232;
        _1386 = _1231;
        _1387 = _1230;
        _1388 = _1245;
        _1389 = _1244;
        _1390 = _1243;
        _1391 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)));
        _1392 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
        _1393 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)));
    }
    else
    {
        _1379 = _1071;
        _1380 = _1071;
        _1381 = _1071;
        _1382 = _1071;
        _1383 = _1071;
        _1384 = _1071;
        _1385 = _1071;
        _1386 = _1071;
        _1387 = _1071;
        _1388 = _1071;
        _1389 = _1071;
        _1390 = _1071;
        _1391 = 0.0;
        _1392 = 0.0;
        _1393 = 0.0;
    }
    float _1403 = (cbModelParam._m0[1u].x * (_1391 - _1083)) + _1083;
    float _1404 = (cbModelParam._m0[1u].x * (_1392 - _1084)) + _1084;
    float _1405 = (cbModelParam._m0[1u].x * (_1393 - _1085)) + _1085;
    float _1426 = fma(_1405, cbSceneParam._m0[89u].z, fma(_1404, cbSceneParam._m0[89u].y, _1403 * cbSceneParam._m0[89u].x));
    float _1429 = fma(_1405, cbSceneParam._m0[90u].z, fma(_1404, cbSceneParam._m0[90u].y, _1403 * cbSceneParam._m0[90u].x));
    float _1432 = fma(_1405, cbSceneParam._m0[91u].z, fma(_1404, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1403));
    float _1447 = _705 * 0.5;
    float _1448 = _706 * 0.5;
    float _1449 = _707 * 0.5;
    float _1450 = dot(vec4(_1447, _1448, _1449, 1.0), vec4(_1381, _1384, _1387, _1390));
    float _1453 = dot(vec4(_1447, _1448, _1449, 1.0), vec4(_1380, _1383, _1386, _1389));
    float _1456 = dot(vec4(_1447, _1448, _1449, 1.0), vec4(_1379, _1382, _1385, _1388));
    float _1490;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1463 = dot(vec4(_1447, _1448, _1449, 1.0), vec4(_1070, _1074, _1077, _1080));
        float _1467 = dot(vec4(_1447, _1448, _1449, 1.0), vec4(_1072, _1075, _1078, _1081));
        float _1471 = dot(vec4(_1447, _1448, _1449, 1.0), vec4(_1073, _1076, _1079, _1082));
        float _1478 = dot(vec4(cbModelParam._m0[39u]), vec4(_1447, _1448, _1449, 1.0));
        _1490 = dot(vec3(isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)), isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)), isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1478) ? 0.0 : (isnan(0.0) ? _1478 : max(0.0, _1478))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1490 = 1.0;
    }
    float _1501;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1492 = dot(vec4(cbModelParam._m0[40u]), vec4(_1447, _1448, _1449, 1.0));
        _1501 = dot(vec3(isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)), isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)), isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1492) ? 0.0 : (isnan(0.0) ? _1492 : max(0.0, _1492))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1501 = 1.0;
    }
    float _1505 = (_1501 * cbModelParam._m0[1u].x) + (_1490 * (1.0 - cbModelParam._m0[1u].x));
    float _1515 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _534);
    float _1516 = isnan(_1515) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1515 : min(cbModelParam._m0[25u].z, _1515));
    float _1598;
    float _1600;
    float _1602;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1565 = fma(_769, cbModelParam._m0[13u].z, fma(_765, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _761)) + cbModelParam._m0[13u].w;
        float _1569 = fma(_769, cbModelParam._m0[14u].z, fma(_765, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _761)) + cbModelParam._m0[14u].w;
        float _1573 = fma(_769, cbModelParam._m0[15u].z, fma(_765, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _761)) + cbModelParam._m0[15u].w;
        float _1576 = fma(_707, cbModelParam._m0[13u].z, fma(_706, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _705));
        float _1579 = fma(_707, cbModelParam._m0[14u].z, fma(_706, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _705));
        float _1582 = fma(_707, cbModelParam._m0[15u].z, fma(_706, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _705));
        float _1610;
        if (_1576 > 0.0)
        {
            _1610 = abs((1.0 - _1565) / _1576);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1576 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1565 + 1.0) / _1576);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1610 = frontier_phi_14_12_ladder;
        }
        float _1835;
        if (_1579 > 0.0)
        {
            _1835 = abs((1.0 - _1569) / _1579);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1579 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1569 + 1.0) / _1579);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1835 = frontier_phi_23_19_ladder;
        }
        float _2092;
        if (_1582 > 0.0)
        {
            _2092 = abs((1.0 - _1573) / _1582);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1582 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1573 + 1.0) / _1582);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2092 = frontier_phi_35_30_ladder;
        }
        float _2094 = isnan(_1835) ? _1610 : (isnan(_1610) ? _1835 : min(_1610, _1835));
        float _2095 = isnan(_2092) ? _2094 : (isnan(_2094) ? _2092 : min(_2094, _2092));
        float _2099 = (_2095 * _1576) + _1565;
        float _2100 = (_2095 * _1579) + _1569;
        float _2101 = (_2095 * _1582) + _1573;
        float _2102 = _2095 * 9.9999997473787516355514526367188e-05;
        float _2104 = (-1.0) - _2102;
        float _2106 = _2102 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2101 > _2106) || ((_2101 < _2104) || ((_2100 > _2106) || ((_2100 < _2104) || ((_2099 < _2104) || (_2099 > _2106))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2229 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2101, cbModelParam._m0[9u].z, fma(_2100, cbModelParam._m0[9u].y, _2099 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2101, cbModelParam._m0[10u].z, fma(_2100, cbModelParam._m0[10u].y, _2099 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2101, cbModelParam._m0[11u].z, fma(_2100, cbModelParam._m0[11u].y, _2099 * cbModelParam._m0[11u].x))), _1516);
            frontier_phi_13_35_ladder = _2229.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2229.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2229.x * cbModelParam._m0[1u].y;
        }
        _1598 = frontier_phi_13_35_ladder_2;
        _1600 = frontier_phi_13_35_ladder_1;
        _1602 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1586 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_705, _706, _707), _1516);
        _1598 = _1586.x * cbModelParam._m0[1u].y;
        _1600 = _1586.y * cbModelParam._m0[1u].y;
        _1602 = _1586.z * cbModelParam._m0[1u].y;
    }
    float _1606 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _534);
    float _1607 = isnan(_1606) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1606 : min(cbModelParam._m0[25u].w, _1606));
    float _1698;
    float _1700;
    float _1702;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1662 = fma(_769, cbModelParam._m0[21u].z, fma(_765, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _761)) + cbModelParam._m0[21u].w;
        float _1666 = fma(_769, cbModelParam._m0[22u].z, fma(_765, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _761)) + cbModelParam._m0[22u].w;
        float _1670 = fma(_769, cbModelParam._m0[23u].z, fma(_765, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _761)) + cbModelParam._m0[23u].w;
        float _1673 = fma(_707, cbModelParam._m0[21u].z, fma(_706, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _705));
        float _1676 = fma(_707, cbModelParam._m0[22u].z, fma(_706, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _705));
        float _1679 = fma(_707, cbModelParam._m0[23u].z, fma(_706, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _705));
        float _1840;
        if (_1673 > 0.0)
        {
            _1840 = abs((1.0 - _1662) / _1673);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1673 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1662 + 1.0) / _1673);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1840 = frontier_phi_25_21_ladder;
        }
        float _2119;
        if (_1676 > 0.0)
        {
            _2119 = abs((1.0 - _1666) / _1676);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1666 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2119 = frontier_phi_37_32_ladder;
        }
        float _2332;
        if (_1679 > 0.0)
        {
            _2332 = abs((1.0 - _1670) / _1679);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1670 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2332 = frontier_phi_46_43_ladder;
        }
        float _2334 = isnan(_2119) ? _1840 : (isnan(_1840) ? _2119 : min(_1840, _2119));
        float _2335 = isnan(_2332) ? _2334 : (isnan(_2334) ? _2332 : min(_2334, _2332));
        float _2339 = (_2335 * _1673) + _1662;
        float _2340 = (_2335 * _1676) + _1666;
        float _2341 = (_2335 * _1679) + _1670;
        float _2342 = _2335 * 9.9999997473787516355514526367188e-05;
        float _2343 = (-1.0) - _2342;
        float _2345 = _2342 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2341 > _2345) || ((_2341 < _2343) || ((_2340 > _2345) || ((_2340 < _2343) || ((_2339 < _2343) || (_2339 > _2345))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2540 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2341, cbModelParam._m0[17u].z, fma(_2340, cbModelParam._m0[17u].y, _2339 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2341, cbModelParam._m0[18u].z, fma(_2340, cbModelParam._m0[18u].y, _2339 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2341, cbModelParam._m0[19u].z, fma(_2340, cbModelParam._m0[19u].y, _2339 * cbModelParam._m0[19u].x))), _1607);
            frontier_phi_22_46_ladder = _2540.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2540.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2540.x * cbModelParam._m0[1u].z;
        }
        _1698 = frontier_phi_22_46_ladder_2;
        _1700 = frontier_phi_22_46_ladder_1;
        _1702 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1682 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_705, _706, _707), _1607);
        _1698 = _1682.x * cbModelParam._m0[1u].z;
        _1700 = _1682.y * cbModelParam._m0[1u].z;
        _1702 = _1682.z * cbModelParam._m0[1u].z;
    }
    float _1715 = (((_732 * _681) + _733) * _697) * ((cbModelParam._m0[1u].w * (_1698 - _1598)) + _1598);
    float _1717 = (((_732 * _683) + _733) * _697) * ((cbModelParam._m0[1u].w * (_1700 - _1600)) + _1600);
    float _1719 = (((_732 * _684) + _733) * _697) * ((cbModelParam._m0[1u].w * (_1702 - _1602)) + _1602);
    float _1722 = fma(_1719, cbSceneParam._m0[89u].z, fma(_1717, cbSceneParam._m0[89u].y, _1715 * cbSceneParam._m0[89u].x));
    float _1725 = fma(_1719, cbSceneParam._m0[90u].z, fma(_1717, cbSceneParam._m0[90u].y, _1715 * cbSceneParam._m0[90u].x));
    float _1728 = fma(_1719, cbSceneParam._m0[91u].z, fma(_1717, cbSceneParam._m0[91u].y, _1715 * cbSceneParam._m0[91u].x));
    vec4 _1736 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_619, _620));
    float _1738 = _1736.w;
    float _1750 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1738);
    float _1751 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1738);
    float _1752 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1738);
    uvec4 _1756 = floatBitsToUint(cbInstanceData._m0[_230 + 5u]);
    uint _1758 = _1756.x * 14u;
    uint _1759 = _1758 + 13u;
    float _1766 = _697 + (-1.0);
    float _1771 = (cbLight._m0[_1759].x * _1766) + 1.0;
    float _1772 = (cbLight._m0[_1759].y * _1766) + 1.0;
    float _1773 = (cbLight._m0[_1759].z * _1766) + 1.0;
    float _1774 = (cbLight._m0[_1759].w * _1766) + 1.0;
    uint _1775 = _1758 + 5u;
    float _1781 = isnan(1.0) ? _1772 : (isnan(_1772) ? 1.0 : min(_1772, 1.0));
    uint _1785 = _1758 + 4u;
    float _1794 = isnan(1.0) ? _1771 : (isnan(_1771) ? 1.0 : min(_1771, 1.0));
    uint _1798 = _1758 | 1u;
    float _1809 = dot(vec3(cbLight._m0[_1758].xyz), vec3(_531, _532, _533));
    float _1812 = dot(vec3(cbLight._m0[_1798].xyz), vec3(_531, _532, _533));
    float _3925 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _3936 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1817 = (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * 0.3183098733425140380859375;
    float _1819 = (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * 0.3183098733425140380859375;
    float _1826 = ((cbLight._m0[_1775].x * _1781) * _1819) + (((cbLight._m0[_1785].x * _1750) * _1794) * _1817);
    float _1827 = ((_1781 * cbLight._m0[_1775].y) * _1819) + (((cbLight._m0[_1785].y * _1751) * _1794) * _1817);
    float _1828 = ((_1781 * cbLight._m0[_1775].z) * _1819) + (((cbLight._m0[_1785].z * _1752) * _1794) * _1817);
    uvec4 _1832 = floatBitsToUint(cbLight._m0[_1758 + 12u]);
    bool _1834 = _1832.x == 0u;
    float _1845;
    float _1847;
    float _1849;
    if (_1834)
    {
        _1845 = _1826;
        _1847 = _1827;
        _1849 = _1828;
    }
    else
    {
        uint _1853 = _1758 + 6u;
        float _1869 = (dot(vec3(cbLight._m0[_1758 + 2u].xyz), vec3(_531, _532, _533)) * 0.5) + 0.5;
        float _1870 = _1869 * _1869;
        float _3947 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
        float _1871 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1872 = isnan(1.0) ? _1773 : (isnan(_1773) ? 1.0 : min(_1773, 1.0));
        _1845 = (((cbLight._m0[_1853].x * 0.3183098733425140380859375) * _1871) * _1872) + _1826;
        _1847 = (((cbLight._m0[_1853].y * 0.3183098733425140380859375) * _1871) * _1872) + _1827;
        _1849 = (((cbLight._m0[_1853].z * 0.3183098733425140380859375) * _1871) * _1872) + _1828;
    }
    bool _1852 = _1832.y == 0u;
    float _1890;
    float _1892;
    float _1894;
    if (_1852)
    {
        _1890 = _1845;
        _1892 = _1847;
        _1894 = _1849;
    }
    else
    {
        uint _2063 = _1758 + 7u;
        float _2079 = (dot(vec3(cbLight._m0[_1758 + 3u].xyz), vec3(_531, _532, _533)) * 0.5) + 0.5;
        float _2080 = _2079 * _2079;
        float _3963 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2081 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _2082 = isnan(1.0) ? _1774 : (isnan(_1774) ? 1.0 : min(_1774, 1.0));
        _1890 = (((cbLight._m0[_2063].x * 0.3183098733425140380859375) * _2081) * _2082) + _1845;
        _1892 = (((cbLight._m0[_2063].y * 0.3183098733425140380859375) * _2081) * _2082) + _1847;
        _1894 = (((cbLight._m0[_2063].z * 0.3183098733425140380859375) * _2081) * _2082) + _1849;
    }
    uint _1897 = _1758 + 8u;
    float _1910 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1758].w)) * _534) * 0.949999988079071044921875);
    float _1911 = _1910 * _1910;
    float _1912 = cbLight._m0[_1758].x + _611;
    float _1913 = cbLight._m0[_1758].y + _612;
    float _1914 = cbLight._m0[_1758].z + _613;
    float _1918 = inversesqrt(dot(vec3(_1912, _1913, _1914), vec3(_1912, _1913, _1914)));
    float _1919 = _1918 * _1912;
    float _1920 = _1918 * _1913;
    float _1921 = _1918 * _1914;
    float _1922 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_1758].xyz));
    float _3979 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
    float _1925 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _3990 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _1926 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _1927 = dot(vec3(_531, _532, _533), vec3(_1919, _1920, _1921));
    float _4001 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1930 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _1931 = dot(vec3(cbLight._m0[_1758].xyz), vec3(_1919, _1920, _1921));
    float _4012 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _1935 = _1911 * _1911;
    float _1939 = ((_1930 * _1930) * (_1935 + (-1.0))) + 1.0;
    float _1947 = exp2(log2(1.0 - (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) * 5.0);
    float _1948 = 0.959999978542327880859375 - _678;
    float _1950 = 0.959999978542327880859375 - _679;
    float _1951 = 0.959999978542327880859375 - _680;
    float _1958 = 1.0 - _1911;
    float _1969 = (0.5 / (((_1926 * ((_1925 * _1958) + _1911)) + 9.9999999392252902907785028219223e-09) + (((_1926 * _1958) + _1911) * _1925))) * _1925;
    float _4023 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _1971 = (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_1935 / ((_1939 * _1939) * 3.141590118408203125));
    uint _1985 = _1758 + 9u;
    float _1996 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1798].w)) * _534) * 0.949999988079071044921875);
    float _1997 = _1996 * _1996;
    float _1998 = cbLight._m0[_1798].x + _611;
    float _1999 = cbLight._m0[_1798].y + _612;
    float _2000 = cbLight._m0[_1798].z + _613;
    float _2004 = inversesqrt(dot(vec3(_1998, _1999, _2000), vec3(_1998, _1999, _2000)));
    float _2005 = _2004 * _1998;
    float _2006 = _2004 * _1999;
    float _2007 = _2004 * _2000;
    float _2008 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_1798].xyz));
    float _4034 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2011 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _2012 = dot(vec3(_531, _532, _533), vec3(_2005, _2006, _2007));
    float _4045 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2015 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _2016 = dot(vec3(cbLight._m0[_1798].xyz), vec3(_2005, _2006, _2007));
    float _4056 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2020 = _1997 * _1997;
    float _2024 = ((_2015 * _2015) * (_2020 + (-1.0))) + 1.0;
    float _2031 = exp2(log2(1.0 - (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) * 5.0);
    float _2038 = 1.0 - _1997;
    float _2048 = (0.5 / (((_1926 * ((_2011 * _2038) + _1997)) + 9.9999999392252902907785028219223e-09) + (((_1926 * _2038) + _1997) * _2011))) * _2011;
    float _4067 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2050 = (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * (_2020 / ((_2024 * _2024) * 3.141590118408203125));
    float _2060 = (((((_2031 * _1948) + _681) * cbLight._m0[_1985].x) * _2050) * _1781) + ((((cbLight._m0[_1897].x * _1750) * ((_1947 * _1948) + _681)) * _1971) * _1794);
    float _2061 = (((((_2031 * _1950) + _683) * cbLight._m0[_1985].y) * _2050) * _1781) + ((((cbLight._m0[_1897].y * _1751) * ((_1947 * _1950) + _683)) * _1971) * _1794);
    float _2062 = (((((_2031 * _1951) + _684) * cbLight._m0[_1985].z) * _2050) * _1781) + ((((cbLight._m0[_1897].z * _1752) * ((_1947 * _1951) + _684)) * _1971) * _1794);
    float _2124;
    float _2126;
    float _2128;
    if (_1834)
    {
        _2124 = _2060;
        _2126 = _2061;
        _2128 = _2062;
    }
    else
    {
        uint _2130 = _1758 + 2u;
        uint _2134 = _1758 + 10u;
        float _2148 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2130].w)) * _534) * 0.949999988079071044921875);
        float _2149 = _2148 * _2148;
        float _2150 = cbLight._m0[_2130].x + _611;
        float _2151 = cbLight._m0[_2130].y + _612;
        float _2152 = cbLight._m0[_2130].z + _613;
        float _2156 = inversesqrt(dot(vec3(_2150, _2151, _2152), vec3(_2150, _2151, _2152)));
        float _2157 = _2156 * _2150;
        float _2158 = _2156 * _2151;
        float _2159 = _2156 * _2152;
        float _2160 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_2130].xyz));
        float _4078 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2163 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _2164 = dot(vec3(_531, _532, _533), vec3(_2157, _2158, _2159));
        float _4089 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2167 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _2168 = dot(vec3(cbLight._m0[_2130].xyz), vec3(_2157, _2158, _2159));
        float _4100 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2172 = _2149 * _2149;
        float _2176 = ((_2167 * _2167) * (_2172 + (-1.0))) + 1.0;
        float _2183 = exp2(log2(1.0 - (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0)))) * 5.0);
        float _2190 = 1.0 - _2149;
        float _2200 = (0.5 / (((_1926 * ((_2163 * _2190) + _2149)) + 9.9999999392252902907785028219223e-09) + (((_1926 * _2190) + _2149) * _2163))) * _2163;
        float _4111 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        float _2202 = (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_2172 / ((_2176 * _2176) * 3.141590118408203125));
        float _2203 = isnan(1.0) ? _1773 : (isnan(_1773) ? 1.0 : min(_1773, 1.0));
        _2124 = (((((_2183 * _1948) + _681) * cbLight._m0[_2134].x) * _2202) * _2203) + _2060;
        _2126 = (((((_2183 * _1950) + _683) * cbLight._m0[_2134].y) * _2202) * _2203) + _2061;
        _2128 = (((((_2183 * _1951) + _684) * cbLight._m0[_2134].z) * _2202) * _2203) + _2062;
    }
    float _2238;
    float _2240;
    float _2242;
    if (_1852)
    {
        _2238 = _2124;
        _2240 = _2126;
        _2242 = _2128;
    }
    else
    {
        uint _2249 = _1758 + 3u;
        uint _2253 = _1758 + 11u;
        float _2267 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2249].w)) * _534) * 0.949999988079071044921875);
        float _2268 = _2267 * _2267;
        float _2269 = cbLight._m0[_2249].x + _611;
        float _2270 = cbLight._m0[_2249].y + _612;
        float _2271 = cbLight._m0[_2249].z + _613;
        float _2275 = inversesqrt(dot(vec3(_2269, _2270, _2271), vec3(_2269, _2270, _2271)));
        float _2276 = _2275 * _2269;
        float _2277 = _2275 * _2270;
        float _2278 = _2275 * _2271;
        float _2279 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_2249].xyz));
        float _4127 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2282 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _2283 = dot(vec3(_531, _532, _533), vec3(_2276, _2277, _2278));
        float _4138 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        float _2286 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _2287 = dot(vec3(cbLight._m0[_2249].xyz), vec3(_2276, _2277, _2278));
        float _4149 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2291 = _2268 * _2268;
        float _2295 = ((_2286 * _2286) * (_2291 + (-1.0))) + 1.0;
        float _2302 = exp2(log2(1.0 - (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0)))) * 5.0);
        float _2309 = 1.0 - _2268;
        float _2319 = (0.5 / (((_1926 * ((_2282 * _2309) + _2268)) + 9.9999999392252902907785028219223e-09) + (((_1926 * _2309) + _2268) * _2282))) * _2282;
        float _4160 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2321 = (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_2291 / ((_2295 * _2295) * 3.141590118408203125));
        float _2322 = isnan(1.0) ? _1774 : (isnan(_1774) ? 1.0 : min(_1774, 1.0));
        _2238 = (((((_2302 * _1948) + _681) * cbLight._m0[_2253].x) * _2321) * _2322) + _2124;
        _2240 = (((((_2302 * _1950) + _683) * cbLight._m0[_2253].y) * _2321) * _2322) + _2126;
        _2242 = (((((_2302 * _1951) + _684) * cbLight._m0[_2253].z) * _2321) * _2322) + _2128;
    }
    float _2457;
    float _2459;
    float _2461;
    float _2463;
    float _2465;
    float _2467;
    if (_1756.y == 0u)
    {
        float _2397 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2398 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2397;
        float _2399 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2397;
        float _2400 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2397;
        uvec4 _2412 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2413 = _2412.x;
        uint _2424 = uint((float(_2412.y) * floor(float(uint(cbSceneParam._m0[85u].y * _620) / _2413))) + floor(float(uint(cbSceneParam._m0[85u].x * _619) / _2413)));
        float _2434 = (log2(_2400 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2435 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        uint _2438 = uint(isnan(14.0) ? _2435 : (isnan(_2435) ? 14.0 : min(_2435, 14.0)));
        uvec4 _2443 = texelFetch(g_lightClusterGridBuffer, int(((_2438 << 2u) + (_2424 << 6u)) >> 2u));
        uint _2444 = _2443.x;
        uint _2445 = _2412.z;
        float _2545;
        float _2547;
        float _2549;
        float _2551;
        float _2553;
        float _2555;
        if (((((1u << ((_2445 >> 4u) & 15u)) + 4294967295u) & _2444) == 0u) || ((_2445 & 240u) == 0u))
        {
            _2545 = 0.0;
            _2547 = 0.0;
            _2549 = 0.0;
            _2551 = 0.0;
            _2553 = 0.0;
            _2555 = 0.0;
        }
        else
        {
            float _2546;
            float _2548;
            float _2550;
            float _2552;
            float _2554;
            float _2556;
            float _2690 = 0.0;
            float _2691 = 0.0;
            float _2692 = 0.0;
            float _2693 = 0.0;
            float _2694 = 0.0;
            float _2695 = 0.0;
            uint _2696 = 0u;
            uint _2705;
            bool _2706;
            for (;;)
            {
                _2705 = texelFetch(g_lightClassification, int((((_2438 << 5u) + (_2424 << 9u)) + (_2696 << 2u)) >> 2u)).x;
                _2706 = _2705 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2706)
                {
                    frontier_phi_61_pred = _2690;
                    frontier_phi_61_pred_1 = _2695;
                    frontier_phi_61_pred_2 = _2694;
                    frontier_phi_61_pred_3 = _2693;
                    frontier_phi_61_pred_4 = _2692;
                    frontier_phi_61_pred_5 = _2691;
                }
                else
                {
                    float _2814;
                    float _2815;
                    float _2816;
                    float _2817;
                    float _2818;
                    float _2819;
                    uint _2820;
                    _2814 = _2690;
                    _2815 = _2691;
                    _2816 = _2692;
                    _2817 = _2693;
                    _2818 = _2694;
                    _2819 = _2695;
                    _2820 = _2705;
                    float _2746;
                    float _2747;
                    float _2748;
                    float _2749;
                    float _2750;
                    float _2751;
                    for (;;)
                    {
                        uint _2824 = uint(findLSB(_2820)) + (_2696 << 5u);
                        uint _2821 = (_2820 + 4294967295u) & _2820;
                        uint _2826 = _2824 * 48u;
                        vec4 _2840 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2826)).x, texelFetch(g_PointLightRenderingBuffer, int(_2826 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2826 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2826 + 3u)).x));
                        uint _2846 = (_2824 * 48u) + 4u;
                        vec4 _2859 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2846)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 3u)).x));
                        uint _2865 = (_2824 * 48u) + 8u;
                        vec3 _2876 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2865)).x, texelFetch(g_PointLightRenderingBuffer, int(_2865 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2865 + 2u)).x));
                        float _2880 = _2840.x - _2398;
                        float _2881 = _2840.y - _2399;
                        float _2882 = _2840.z - _2400;
                        float _2883 = dot(vec3(_2880, _2881, _2882), vec3(_2880, _2881, _2882));
                        float _2886 = inversesqrt(_2883);
                        float _2887 = _2886 * _2880;
                        float _2888 = _2886 * _2881;
                        float _2889 = _2886 * _2882;
                        float _2890 = dot(vec3(_638, _641, _644), vec3(_2887, _2888, _2889));
                        float _2895 = 1.0 - (_2883 * _2840.w);
                        float _4186 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
                        float _2896 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
                        float _2897 = sqrt(_2883) * _2859.w;
                        float _2900 = 1.39999997615814208984375 / (_2897 + 1.39999997615814208984375);
                        float _2901 = _2900 * _2900;
                        float _2904 = ((1.0 - _2901) * _2890) + _2901;
                        float _2907 = _2897 * _2897;
                        float _2911 = ((isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0))) * _2896) / ((_2907 * 0.699999988079071044921875) + 1.0);
                        float _2915 = (-0.0) - _2398;
                        float _2916 = (-0.0) - _2399;
                        float _2917 = (-0.0) - _2400;
                        float _2921 = inversesqrt(dot(vec3(_2915, _2916, _2917), vec3(_2915, _2916, _2917)));
                        float _2922 = _2921 * _2915;
                        float _2923 = _2921 * _2916;
                        float _2924 = _2921 * _2917;
                        float _2932 = exp2(log2(1.0 / ((_2907 * 3.5) + 5.0)) * 0.25);
                        float _2933 = 1.0 - _713;
                        float _2940 = sqrt(1.0 - ((1.0 - (_2933 * _2933)) * (1.0 - (_2932 * _2932))));
                        float _2941 = _2940 * _2940;
                        float _2942 = _2941 * _2941;
                        float _2943 = _2922 + _2887;
                        float _2944 = _2923 + _2888;
                        float _2945 = _2924 + _2889;
                        float _2949 = inversesqrt(dot(vec3(_2943, _2944, _2945), vec3(_2943, _2944, _2945)));
                        float _2953 = dot(vec3(_638, _641, _644), vec3(_2922, _2923, _2924));
                        float _4202 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
                        float _2956 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
                        float _2957 = dot(vec3(_638, _641, _644), vec3(_2949 * _2943, _2949 * _2944, _2949 * _2945));
                        float _4213 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
                        float _2960 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
                        float _2964 = ((_2960 * _2960) * (_2942 + (-1.0))) + 1.0;
                        float _2965 = _2900 * _2941;
                        float _2966 = _2965 * _2965;
                        float _2969 = ((1.0 - _2966) * _2890) + _2966;
                        float _4224 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
                        float _2970 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
                        float _2971 = 1.0 - _2941;
                        float _2981 = (0.5 / (((_2970 * ((_2956 * _2971) + _2941)) + 9.9999999392252902907785028219223e-09) + (((_2970 * _2971) + _2941) * _2956))) * _2970;
                        float _4235 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
                        float _2992 = (((_2942 * 3.1415927410125732421875) * (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0)))) / ((_2964 * _2964) * ((_2907 * 2.1991131305694580078125) + 3.141590118408203125))) * _2896;
                        _2749 = (_2911 * _2859.x) + _2817;
                        _2750 = (_2911 * _2859.y) + _2818;
                        _2751 = (_2911 * _2859.z) + _2819;
                        _2746 = (_2992 * _2876.x) + _2814;
                        _2747 = (_2992 * _2876.y) + _2815;
                        _2748 = (_2992 * _2876.z) + _2816;
                        if (_2821 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2814 = _2746;
                            _2815 = _2747;
                            _2816 = _2748;
                            _2817 = _2749;
                            _2818 = _2750;
                            _2819 = _2751;
                            _2820 = _2821;
                        }
                    }
                    frontier_phi_61_pred = _2746;
                    frontier_phi_61_pred_1 = _2751;
                    frontier_phi_61_pred_2 = _2750;
                    frontier_phi_61_pred_3 = _2749;
                    frontier_phi_61_pred_4 = _2748;
                    frontier_phi_61_pred_5 = _2747;
                }
                _2546 = frontier_phi_61_pred;
                _2556 = frontier_phi_61_pred_1;
                _2554 = frontier_phi_61_pred_2;
                _2552 = frontier_phi_61_pred_3;
                _2550 = frontier_phi_61_pred_4;
                _2548 = frontier_phi_61_pred_5;
                uint _2697 = _2696 + 1u;
                if (_2697 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2690 = _2546;
                    _2691 = _2548;
                    _2692 = _2550;
                    _2693 = _2552;
                    _2694 = _2554;
                    _2695 = _2556;
                    _2696 = _2697;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2545 = _2546;
            _2547 = _2548;
            _2549 = _2550;
            _2551 = _2552;
            _2553 = _2554;
            _2555 = _2556;
        }
        uvec4 _2559 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2560 = _2559.z;
        uint _2562 = (_2560 >> 8u) & 15u;
        float _2658;
        float _2660;
        float _2662;
        float _2664;
        float _2666;
        float _2668;
        if (((4294967295u << _2562) & _2444) == 0u)
        {
            _2658 = _2545;
            _2660 = _2547;
            _2662 = _2549;
            _2664 = _2551;
            _2666 = _2553;
            _2668 = _2555;
        }
        else
        {
            float _2683 = inversesqrt(dot(vec3(_2398, _2399, _2400), vec3(_2398, _2399, _2400)));
            float _2684 = _2683 * _2398;
            float _2685 = _2683 * _2399;
            float _2686 = _2683 * _2400;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2562 < ((_2560 >> 12u) & 15u))
            {
                float _2659;
                float _2661;
                float _2663;
                float _2665;
                float _2667;
                float _2669;
                float _2797 = _2545;
                float _2798 = _2547;
                float _2799 = _2549;
                float _2800 = _2551;
                float _2801 = _2553;
                float _2802 = _2555;
                uint _2803 = _2562;
                uint _2812;
                bool _2813;
                for (;;)
                {
                    _2812 = texelFetch(g_lightClassification, int((((_2438 << 5u) + (_2424 << 9u)) + (_2803 << 2u)) >> 2u)).x;
                    _2813 = _2812 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2813)
                    {
                        frontier_phi_67_pred = _2800;
                        frontier_phi_67_pred_1 = _2801;
                        frontier_phi_67_pred_2 = _2802;
                        frontier_phi_67_pred_3 = _2799;
                        frontier_phi_67_pred_4 = _2798;
                        frontier_phi_67_pred_5 = _2797;
                    }
                    else
                    {
                        float _2997;
                        float _2998;
                        float _2999;
                        float _3000;
                        float _3001;
                        float _3002;
                        float _3291;
                        float _3292;
                        float _3293;
                        float _3294;
                        float _3295;
                        float _3296;
                        float _3010 = _2797;
                        float _3011 = _2798;
                        float _3012 = _2799;
                        float _3013 = _2800;
                        float _3014 = _2801;
                        float _3015 = _2802;
                        uint _3016 = _2812;
                        uint _3017;
                        vec4 _3042;
                        float _3043;
                        vec4 _3058;
                        vec3 _3070;
                        vec4 _3085;
                        vec4 _3101;
                        float _3147;
                        bool _3148;
                        for (;;)
                        {
                            uint _3027 = ((_2803 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3016));
                            _3017 = (_3016 + 4294967295u) & _3016;
                            uint _3029 = _3027 * 40u;
                            _3042 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3029)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 3u)).x));
                            _3043 = _3042.w;
                            uint _3045 = (_3027 * 40u) + 4u;
                            _3058 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 3u)).x));
                            uint _3060 = (_3027 * 40u) + 8u;
                            _3070 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3060)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 2u)).x));
                            uint _3072 = (_3027 * 40u) + 16u;
                            _3085 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 3u)).x));
                            uint _3088 = (_3027 * 40u) + 20u;
                            _3101 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3088)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 3u)).x));
                            uint _3103 = (_3027 * 40u) + 24u;
                            vec4 _3116 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3103)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 3u)).x));
                            uint _3122 = (_3027 * 40u) + 28u;
                            vec4 _3135 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3122)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 3u)).x));
                            _3147 = fma(_2400, _3135.z, fma(_2399, _3135.y, _3135.x * _2398)) + _3135.w;
                            _3148 = !((fma(_2400, _3116.z, fma(_2399, _3116.y, _3116.x * _2398)) + _3116.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3148)
                            {
                                float _3175 = _3042.x - _2398;
                                float _3176 = _3042.y - _2399;
                                float _3177 = _3042.z - _2400;
                                float _3178 = dot(vec3(_3175, _3176, _3177), vec3(_3175, _3176, _3177));
                                float _3181 = inversesqrt(_3178);
                                float _3182 = _3181 * _3175;
                                float _3183 = _3181 * _3176;
                                float _3184 = _3181 * _3177;
                                float _3188 = 1.0 - (_3178 / (_3043 * _3043));
                                float _4246 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                                float _3189 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
                                float _3193 = sqrt(_3178) * _3058.w;
                                float _3195 = 1.39999997615814208984375 / (_3193 + 1.39999997615814208984375);
                                float _3196 = _3195 * _3195;
                                float _3199 = ((1.0 - _3196) * dot(vec3(_3182, _3183, _3184), vec3(_638, _641, _644))) + _3196;
                                float _3202 = _3193 * _3193;
                                float _3206 = (fma(_2400, _3085.z, fma(_2399, _3085.y, _3085.x * _2398)) + _3085.w) / _3147;
                                float _3207 = (fma(_2400, _3101.z, fma(_2399, _3101.y, _3101.x * _2398)) + _3101.w) / _3147;
                                float _3211 = 1.0 - dot(vec2(_3206, _3207), vec2(_3206, _3207));
                                float _4262 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                                float _3212 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
                                float _3213 = _3212 * (((isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0))) * _3189) / ((_3202 * 0.699999988079071044921875) + 1.0));
                                float _3225 = exp2(log2(1.0 / ((_3202 * 3.5) + 5.0)) * 0.25);
                                float _3226 = 1.0 - _713;
                                float _3233 = sqrt(1.0 - ((1.0 - (_3226 * _3226)) * (1.0 - (_3225 * _3225))));
                                float _3234 = _3233 * _3233;
                                float _3235 = _3234 * _3234;
                                float _3236 = _3182 - _2684;
                                float _3237 = _3183 - _2685;
                                float _3238 = _3184 - _2686;
                                float _3242 = inversesqrt(dot(vec3(_3236, _3237, _3238), vec3(_3236, _3237, _3238)));
                                float _3246 = dot(vec3(_638, _641, _644), vec3((-0.0) - _2684, (-0.0) - _2685, (-0.0) - _2686));
                                float _4273 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                                float _3249 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
                                float _3250 = dot(vec3(_638, _641, _644), vec3(_3242 * _3236, _3242 * _3237, _3242 * _3238));
                                float _4284 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                                float _3253 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
                                float _3257 = ((_3253 * _3253) * (_3235 + (-1.0))) + 1.0;
                                float _3258 = _3195 * _3234;
                                float _3259 = _3258 * _3258;
                                float _3265 = ((1.0 - _3259) * dot(vec3(_638, _641, _644), vec3(_3182, _3183, _3184))) + _3259;
                                float _4295 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                                float _3266 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
                                float _3267 = 1.0 - _3234;
                                float _3277 = (0.5 / (((_3266 * ((_3249 * _3267) + _3234)) + 9.9999999392252902907785028219223e-09) + (((_3266 * _3267) + _3234) * _3249))) * _3266;
                                float _4306 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                                float _3287 = (_3212 * _3189) * (((_3235 * 3.1415927410125732421875) * (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0)))) / ((_3257 * _3257) * ((_3202 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3287 * _3070.x;
                                frontier_phi_73_pred_1 = _3287 * _3070.y;
                                frontier_phi_73_pred_2 = _3213 * _3058.z;
                                frontier_phi_73_pred_3 = _3213 * _3058.y;
                                frontier_phi_73_pred_4 = _3213 * _3058.x;
                                frontier_phi_73_pred_5 = _3287 * _3070.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3291 = frontier_phi_73_pred;
                            _3292 = frontier_phi_73_pred_1;
                            _3296 = frontier_phi_73_pred_2;
                            _3295 = frontier_phi_73_pred_3;
                            _3294 = frontier_phi_73_pred_4;
                            _3293 = frontier_phi_73_pred_5;
                            _3000 = _3294 + _3013;
                            _3001 = _3295 + _3014;
                            _3002 = _3296 + _3015;
                            _2997 = _3291 + _3010;
                            _2998 = _3292 + _3011;
                            _2999 = _3293 + _3012;
                            if (_3017 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3010 = _2997;
                                _3011 = _2998;
                                _3012 = _2999;
                                _3013 = _3000;
                                _3014 = _3001;
                                _3015 = _3002;
                                _3016 = _3017;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3000;
                        frontier_phi_67_pred_1 = _3001;
                        frontier_phi_67_pred_2 = _3002;
                        frontier_phi_67_pred_3 = _2999;
                        frontier_phi_67_pred_4 = _2998;
                        frontier_phi_67_pred_5 = _2997;
                    }
                    _2665 = frontier_phi_67_pred;
                    _2667 = frontier_phi_67_pred_1;
                    _2669 = frontier_phi_67_pred_2;
                    _2663 = frontier_phi_67_pred_3;
                    _2661 = frontier_phi_67_pred_4;
                    _2659 = frontier_phi_67_pred_5;
                    uint _2804 = _2803 + 1u;
                    if (_2804 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2797 = _2659;
                        _2798 = _2661;
                        _2799 = _2663;
                        _2800 = _2665;
                        _2801 = _2667;
                        _2802 = _2669;
                        _2803 = _2804;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2667;
                frontier_phi_55_56_ladder_1 = _2669;
                frontier_phi_55_56_ladder_2 = _2665;
                frontier_phi_55_56_ladder_3 = _2663;
                frontier_phi_55_56_ladder_4 = _2661;
                frontier_phi_55_56_ladder_5 = _2659;
            }
            else
            {
                frontier_phi_55_56_ladder = _2553;
                frontier_phi_55_56_ladder_1 = _2555;
                frontier_phi_55_56_ladder_2 = _2551;
                frontier_phi_55_56_ladder_3 = _2549;
                frontier_phi_55_56_ladder_4 = _2547;
                frontier_phi_55_56_ladder_5 = _2545;
            }
            _2658 = frontier_phi_55_56_ladder_5;
            _2660 = frontier_phi_55_56_ladder_4;
            _2662 = frontier_phi_55_56_ladder_3;
            _2664 = frontier_phi_55_56_ladder_2;
            _2666 = frontier_phi_55_56_ladder;
            _2668 = frontier_phi_55_56_ladder_1;
        }
        float _2673 = isnan(1.0) ? _697 : (isnan(_697) ? 1.0 : min(_697, 1.0));
        _2457 = (_2673 * _2664) + _1890;
        _2459 = (_2673 * _2666) + _1892;
        _2461 = (_2673 * _2668) + _1894;
        _2463 = ((_2658 * _681) * _2673) + _2238;
        _2465 = ((_2660 * _683) * _2673) + _2240;
        _2467 = ((_2662 * _684) * _2673) + _2242;
    }
    else
    {
        _2457 = _1890;
        _2459 = _1892;
        _2461 = _1894;
        _2463 = _2238;
        _2465 = _2240;
        _2467 = _2242;
    }
    float _4322 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _4333 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _4344 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    uint _2487 = _230 + 6u;
    float _2495 = _619 / cbSceneParam._m0[86u].x;
    float _2496 = _620 / cbSceneParam._m0[86u].y;
    vec4 _2510 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2495, _2496, (log2((isnan(cbSceneParam._m0[77u].w) ? _553 : (isnan(_553) ? cbSceneParam._m0[77u].w : min(_553, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2512 = _2510.x;
    float _2513 = _2510.y;
    float _2514 = _2510.z;
    float _2515 = _2510.w;
    float _2608;
    float _2610;
    float _2612;
    float _2614;
    if (_553 > cbSceneParam._m0[78u].w)
    {
        float _2570 = isnan(_553) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _553 : min(cbSceneParam._m0[80u].w, _553));
        float _2571 = _2570 / _553;
        float _2582 = _2571 * _604;
        float _2583 = _605 * _2571;
        float _2584 = (-0.0) - _2583;
        float _2586 = _2571 * _606;
        float _2588 = (cbSceneParam._m0[77u].w * _2584) / _2570;
        float _2589 = _2588 + cbSceneParam._m0[79u].w;
        float _2590 = cbSceneParam._m0[79u].w - _2583;
        float _2596 = sqrt(((_2582 * _2582) + (_2583 * _2583)) + (_2586 * _2586));
        float _2599 = (1.0 - (cbSceneParam._m0[77u].w / _2570)) * _2596;
        float _2604 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2606 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2759;
        if (abs((_2584 - _2588) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2759 = ((((_2589 > 0.0) ? exp2(_2604 * _2589) : (2.0 - exp2(_2606 * _2589))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2599;
        }
        else
        {
            float _2719 = 1.0 / cbSceneParam._m0[80u].x;
            float _2720 = isnan(_2590) ? _2589 : (isnan(_2589) ? _2590 : max(_2589, _2590));
            float _2721 = isnan(_2590) ? _2589 : (isnan(_2589) ? _2590 : min(_2589, _2590));
            float _2730 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : min(_2720, 0.0));
            float _2731 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : min(_2721, 0.0));
            _2759 = ((abs(_2596 / _2584) * cbSceneParam._m0[80u].y) * ((((_2730 - _2731) * 2.0) - ((exp2(_2604 * (isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0)))) - exp2(_2604 * (isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0))))) * _2719)) - ((exp2(_2606 * _2730) - exp2(_2606 * _2731)) * _2719))) + (_2599 * cbSceneParam._m0[80u].z);
        }
        vec4 _2761 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2495, _2496, 1.0), 0.0);
        float _2770 = exp2((_2759 * (-1.44269502162933349609375)) * (1.0 - _2761.w));
        float _2771 = log2(_2770);
        float _2787 = log2(_2515);
        _2608 = (exp2(_2787 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2771 * cbSceneParam._m0[78u].x)) * _2761.x) / cbSceneParam._m0[78u].x)) + _2512;
        _2610 = (exp2(_2787 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2771 * cbSceneParam._m0[78u].y)) * _2761.y) / cbSceneParam._m0[78u].y)) + _2513;
        _2612 = (exp2(_2787 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2771 * cbSceneParam._m0[78u].z)) * _2761.z) / cbSceneParam._m0[78u].z)) + _2514;
        _2614 = _2770 * _2515;
    }
    else
    {
        _2608 = _2512;
        _2610 = _2513;
        _2612 = _2514;
        _2614 = _2515;
    }
    float _2626 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2627 = _2626 == 3.0;
    float _2628 = log2(_2614);
    float _2635 = exp2(_2628 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_2457 + ((isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0))) * _697))) + ((_2463 + ((isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))) * _1505)) * cbPerFrame._m0[3u].x));
    float _2636 = exp2(_2628 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_2459 + ((isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))) * _697))) + ((_2465 + ((isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))) * _1505)) * cbPerFrame._m0[3u].x));
    float _2637 = exp2(_2628 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_2461 + ((isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0))) * _697))) + ((_2467 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _1505)) * cbPerFrame._m0[3u].x));
    float _2646 = (_2626 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2646 * (_2627 ? _2635 : (_2635 + (cbSceneParam._m0[72u].w * _2608)));
    SV_Target.y = _2646 * (_2627 ? _2636 : (_2636 + (cbSceneParam._m0[72u].w * _2610)));
    SV_Target.z = _2646 * (_2627 ? _2637 : (_2637 + (cbSceneParam._m0[72u].w * _2612)));
    SV_Target.w = cbInstanceData._m0[_2487].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2487].w;
}


