#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _907;
float _3294;
float _3295;
float _3296;
float _3297;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _231 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _237 = _231.x * cbMtdParam._m0[9u].x;
    float _238 = _231.y * cbMtdParam._m0[9u].y;
    float _239 = _231.z * cbMtdParam._m0[9u].z;
    vec4 _252 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _256 = _252.z;
    float _261 = (_252.x * 2.0) + (-1.0);
    float _263 = (_252.y * 2.0) + (-1.0);
    float _264 = dot(vec2(_261, _263), vec2(_261, _263));
    float _3306 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _270 = sqrt(1.0 - (isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0))));
    vec4 _283 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _285 = _283.x;
    float _290 = cbMtdParam._m0[22u].x + _252.w;
    float _294 = gl_FragCoord.x * 0.125;
    float _296 = gl_FragCoord.y * 0.125;
    float _307 = fma(_270, _201 * NORMAL.x, fma(_263, _208 * TANGENT.x, (_194 * _186) * _261));
    float _310 = fma(_270, _201 * NORMAL.y, fma(_263, _208 * TANGENT.y, (_194 * _187) * _261));
    float _313 = fma(_270, _201 * NORMAL.z, fma(_263, _208 * TANGENT.z, (_194 * _188) * _261));
    float _317 = inversesqrt(dot(vec3(_307, _310, _313), vec3(_307, _310, _313)));
    float _318 = _317 * _307;
    float _319 = _317 * _310;
    float _320 = _317 * _313;
    float _3317 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _321 = isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0));
    float _3328 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _3339 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3350 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3361 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3372 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _326 = isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_294, _296)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _346 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _388 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _398 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _388);
    float _399 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _388);
    float _400 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _388);
    float _404 = inversesqrt(dot(vec3(_398, _399, _400), vec3(_398, _399, _400)));
    float _405 = _398 * _404;
    float _406 = _399 * _404;
    float _407 = _400 * _404;
    vec4 _409 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_294, _296));
    float _411 = _409.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _588 = sqrt(((_398 * _398) + (_399 * _399)) + (_400 * _400));
        float _594 = (cbMatDynParam._m0[5u].x * _588) + cbMatDynParam._m0[5u].y;
        float _3383 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
        float _595 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
        float _599 = (cbMatDynParam._m0[5u].z * _588) + cbMatDynParam._m0[5u].w;
        float _3394 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0))) - _595)) + _595) < ((_411 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _423 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _424 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _444 = fma(_320, cbSceneParam._m0[5u].z, fma(_319, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _318));
    float _447 = fma(_320, cbSceneParam._m0[6u].z, fma(_319, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _318));
    float _450 = fma(_320, cbSceneParam._m0[7u].z, fma(_319, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _318));
    uint _463 = uint(roundEven(NORMAL.w)) * 13u;
    uint _465 = _463 + 9u;
    uint _466 = _465 + uint(cbMatDynParam._m0[0u].w);
    float _472 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0)))) * cbInstanceData._m0[_466].x;
    float _473 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0)))) * cbInstanceData._m0[_466].y;
    float _474 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0)))) * cbInstanceData._m0[_466].z;
    float _3405 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _475 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
    float _3416 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _476 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
    float _3427 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _477 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
    float _478 = 1.0 - _326;
    float _479 = _475 * _478;
    float _480 = _476 * _478;
    float _481 = _477 * _478;
    float _486 = (_475 + (-0.039999999105930328369140625)) * _326;
    float _487 = (_476 + (-0.039999999105930328369140625)) * _326;
    float _488 = (_477 + (-0.039999999105930328369140625)) * _326;
    float _489 = _486 + 0.039999999105930328369140625;
    float _491 = _487 + 0.039999999105930328369140625;
    float _492 = _488 + 0.039999999105930328369140625;
    vec4 _501 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _423, cbSceneParam._m0[86u].y * _424));
    float _505 = ((isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0))) * TEXCOORD_5.w) * _501.x;
    float _506 = dot(vec3(_318, _319, _320), vec3(_405, _406, _407));
    float _509 = _506 * 2.0;
    float _513 = (_509 * _318) - _405;
    float _514 = (_509 * _319) - _406;
    float _515 = (_509 * _320) - _407;
    float _519 = abs(dot(vec3(_405, _406, _407), vec3(_318, _319, _320)));
    float _3438 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _521 = sqrt(_321);
    float _534 = exp2((_521 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_521 * 3.0));
    float _540 = (1.0 - _534) * ((_521 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _541 = _534 * _521;
    float _569 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _573 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _577 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _906;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _631 = fma(_577, cbModelParam._m0[26u].z, fma(_573, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _569));
        float _635 = fma(_577, cbModelParam._m0[27u].z, fma(_573, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _569));
        float _639 = fma(_577, cbModelParam._m0[28u].z, fma(_573, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _569));
        float _664 = _569 + _318;
        float _665 = _573 + _319;
        float _666 = _577 + _320;
        float _676 = fma(_666, cbModelParam._m0[26u].z, fma(_665, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _664)) - _631;
        float _677 = fma(_666, cbModelParam._m0[27u].z, fma(_665, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _664)) - _635;
        float _678 = fma(_666, cbModelParam._m0[28u].z, fma(_665, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _664)) - _639;
        float _682 = inversesqrt(dot(vec3(_676, _677, _678), vec3(_676, _677, _678)));
        float _695 = ((_682 * _676) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_631 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _696 = ((_682 * _677) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_635 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _697 = ((_682 * _678) / cbModelParam._m0[34u].z) + ((((((_639 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _700 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_695, _696, _697), 0.0);
        vec4 _707 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_695, _696, _697), 0.0);
        vec4 _714 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_695, _696, _697), 0.0);
        vec4 _721 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_695, _696, _697), 0.0);
        float _734 = exp2((_700.w + (-0.5)) * 20.0) * 2.0;
        float _735 = _734 * (_700.x + (-0.5));
        float _736 = _734 * (_700.y + (-0.5));
        float _737 = _734 * (_700.z + (-0.5));
        float _744 = exp2((_707.w + (-0.5)) * 20.0) * 2.0;
        float _745 = _744 * (_707.x + (-0.5));
        float _746 = _744 * (_707.y + (-0.5));
        float _747 = _744 * (_707.z + (-0.5));
        float _754 = exp2((_714.w + (-0.5)) * 20.0) * 2.0;
        float _755 = _754 * (_714.x + (-0.5));
        float _756 = _754 * (_714.y + (-0.5));
        float _757 = _754 * (_714.z + (-0.5));
        float _764 = exp2((_721.w + (-0.5)) * 20.0) * 2.0;
        float _765 = _764 * (_721.x + (-0.5));
        float _766 = _764 * (_721.y + (-0.5));
        float _767 = _764 * (_721.z + (-0.5));
        float _768 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _769 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _770 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _771 = _735 * 0.5;
        float _772 = _745 * 0.5;
        float _773 = _755 * 0.5;
        float _774 = dot(vec3(_771, _772, _773), vec3(_771, _772, _773));
        float _779 = (_774 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_774);
        float _788 = (dot(vec3(_318, _319, _320), vec3(_779 * _771, _779 * _772, _779 * _773)) + 1.0) * 0.5;
        float _3464 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _798 = sqrt(((_772 * _772) + (_771 * _771)) + (_773 * _773)) / (_768 + 9.9999997473787516355514526367188e-06);
        float _3475 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _799 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
        float _800 = _799 * 2.0;
        float _804 = (1.0 - _799) / (_799 + 1.0);
        float _3486 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _805 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _814 = ((((1.0 - _805) * (_800 + 2.0)) * exp2(log2(isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0))) * (_800 + 1.0))) + _805) * _768;
        float _815 = _736 * 0.5;
        float _816 = _746 * 0.5;
        float _817 = _756 * 0.5;
        float _818 = dot(vec3(_815, _816, _817), vec3(_815, _816, _817));
        float _823 = (_818 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_818);
        float _831 = (dot(vec3(_318, _319, _320), vec3(_823 * _815, _823 * _816, _823 * _817)) + 1.0) * 0.5;
        float _3497 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _840 = sqrt(((_816 * _816) + (_815 * _815)) + (_817 * _817)) / (_769 + 9.9999997473787516355514526367188e-06);
        float _3508 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _841 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
        float _842 = _841 * 2.0;
        float _846 = (1.0 - _841) / (_841 + 1.0);
        float _3519 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _847 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _856 = ((((1.0 - _847) * (_842 + 2.0)) * exp2(log2(isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0))) * (_842 + 1.0))) + _847) * _769;
        float _857 = _737 * 0.5;
        float _858 = _747 * 0.5;
        float _859 = _757 * 0.5;
        float _860 = dot(vec3(_857, _858, _859), vec3(_857, _858, _859));
        float _865 = (_860 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_860);
        float _873 = (dot(vec3(_318, _319, _320), vec3(_865 * _857, _865 * _858, _865 * _859)) + 1.0) * 0.5;
        float _3530 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _882 = sqrt(((_858 * _858) + (_857 * _857)) + (_859 * _859)) / (_770 + 9.9999997473787516355514526367188e-06);
        float _3541 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _883 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
        float _884 = _883 * 2.0;
        float _888 = (1.0 - _883) / (_883 + 1.0);
        float _3552 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _889 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _898 = ((((1.0 - _889) * (_884 + 2.0)) * exp2(log2(isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))) * (_884 + 1.0))) + _889) * _770;
        _906 = _737;
        _908 = _736;
        _909 = _735;
        _910 = _747;
        _911 = _746;
        _912 = _745;
        _913 = _757;
        _914 = _756;
        _915 = _755;
        _916 = _770;
        _917 = _769;
        _918 = _768;
        _919 = cbModelParam._m0[36u].z * (isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0)));
        _920 = cbModelParam._m0[36u].z * (isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0)));
        _921 = cbModelParam._m0[36u].z * (isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0)));
    }
    else
    {
        _906 = _907;
        _908 = _907;
        _909 = _907;
        _910 = _907;
        _911 = _907;
        _912 = _907;
        _913 = _907;
        _914 = _907;
        _915 = _907;
        _916 = _907;
        _917 = _907;
        _918 = _907;
        _919 = 0.0;
        _920 = 0.0;
        _921 = 0.0;
    }
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _946 = fma(_577, cbModelParam._m0[30u].z, fma(_573, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _569));
        float _950 = fma(_577, cbModelParam._m0[31u].z, fma(_573, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _569));
        float _954 = fma(_577, cbModelParam._m0[32u].z, fma(_573, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _569));
        float _977 = _569 + _318;
        float _978 = _573 + _319;
        float _979 = _577 + _320;
        float _989 = fma(_979, cbModelParam._m0[30u].z, fma(_978, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _977)) - _946;
        float _990 = fma(_979, cbModelParam._m0[31u].z, fma(_978, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _977)) - _950;
        float _991 = fma(_979, cbModelParam._m0[32u].z, fma(_978, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _977)) - _954;
        float _995 = inversesqrt(dot(vec3(_989, _990, _991), vec3(_989, _990, _991)));
        float _1008 = ((_995 * _989) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_946 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1009 = ((_995 * _990) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_950 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1010 = ((_995 * _991) / cbModelParam._m0[35u].z) + ((((((_954 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        float _1045 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1012.x + (-0.5));
        float _1047 = _1045 * (_1012.y + (-0.5));
        float _1048 = _1045 * (_1012.z + (-0.5));
        float _1055 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1019.x + (-0.5));
        float _1057 = _1055 * (_1019.y + (-0.5));
        float _1058 = _1055 * (_1019.z + (-0.5));
        float _1065 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1026.x + (-0.5));
        float _1067 = _1065 * (_1026.y + (-0.5));
        float _1068 = _1065 * (_1026.z + (-0.5));
        float _1075 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1033.x + (-0.5));
        float _1077 = _1075 * (_1033.y + (-0.5));
        float _1078 = _1075 * (_1033.z + (-0.5));
        float _1079 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1082 = _1046 * 0.5;
        float _1083 = _1056 * 0.5;
        float _1084 = _1066 * 0.5;
        float _1085 = dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084));
        float _1090 = (_1085 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1085);
        float _1098 = (dot(vec3(_318, _319, _320), vec3(_1090 * _1082, _1090 * _1083, _1090 * _1084)) + 1.0) * 0.5;
        float _3593 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1107 = sqrt(((_1083 * _1083) + (_1082 * _1082)) + (_1084 * _1084)) / (_1079 + 9.9999997473787516355514526367188e-06);
        float _3604 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
        float _1109 = _1108 * 2.0;
        float _1113 = (1.0 - _1108) / (_1108 + 1.0);
        float _3615 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _1123 = ((((1.0 - _1114) * (_1109 + 2.0)) * exp2(log2(isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))) * (_1109 + 1.0))) + _1114) * _1079;
        float _1124 = _1047 * 0.5;
        float _1125 = _1057 * 0.5;
        float _1126 = _1067 * 0.5;
        float _1127 = dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126));
        float _1132 = (_1127 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1127);
        float _1140 = (dot(vec3(_318, _319, _320), vec3(_1132 * _1124, _1132 * _1125, _1132 * _1126)) + 1.0) * 0.5;
        float _3626 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1149 = sqrt(((_1125 * _1125) + (_1124 * _1124)) + (_1126 * _1126)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _3637 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
        float _1151 = _1150 * 2.0;
        float _1155 = (1.0 - _1150) / (_1150 + 1.0);
        float _3648 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _1165 = ((((1.0 - _1156) * (_1151 + 2.0)) * exp2(log2(isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) * (_1151 + 1.0))) + _1156) * _1080;
        float _1166 = _1048 * 0.5;
        float _1167 = _1058 * 0.5;
        float _1168 = _1068 * 0.5;
        float _1169 = dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168));
        float _1174 = (_1169 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1169);
        float _1182 = (dot(vec3(_318, _319, _320), vec3(_1174 * _1166, _1174 * _1167, _1174 * _1168)) + 1.0) * 0.5;
        float _3659 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1191 = sqrt(((_1167 * _1167) + (_1166 * _1166)) + (_1168 * _1168)) / (_1081 + 9.9999997473787516355514526367188e-06);
        float _3670 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _1193 = _1192 * 2.0;
        float _1197 = (1.0 - _1192) / (_1192 + 1.0);
        float _3681 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _1207 = ((((1.0 - _1198) * (_1193 + 2.0)) * exp2(log2(isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * (_1193 + 1.0))) + _1198) * _1081;
        _1215 = _1048;
        _1216 = _1047;
        _1217 = _1046;
        _1218 = _1058;
        _1219 = _1057;
        _1220 = _1056;
        _1221 = _1068;
        _1222 = _1067;
        _1223 = _1066;
        _1224 = _1081;
        _1225 = _1080;
        _1226 = _1079;
        _1227 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0)));
        _1228 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)));
        _1229 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)));
    }
    else
    {
        _1215 = _907;
        _1216 = _907;
        _1217 = _907;
        _1218 = _907;
        _1219 = _907;
        _1220 = _907;
        _1221 = _907;
        _1222 = _907;
        _1223 = _907;
        _1224 = _907;
        _1225 = _907;
        _1226 = _907;
        _1227 = 0.0;
        _1228 = 0.0;
        _1229 = 0.0;
    }
    float _1239 = (cbModelParam._m0[1u].x * (_1227 - _919)) + _919;
    float _1240 = (cbModelParam._m0[1u].x * (_1228 - _920)) + _920;
    float _1241 = (cbModelParam._m0[1u].x * (_1229 - _921)) + _921;
    float _1262 = fma(_1241, cbSceneParam._m0[89u].z, fma(_1240, cbSceneParam._m0[89u].y, _1239 * cbSceneParam._m0[89u].x));
    float _1265 = fma(_1241, cbSceneParam._m0[90u].z, fma(_1240, cbSceneParam._m0[90u].y, _1239 * cbSceneParam._m0[90u].x));
    float _1268 = fma(_1241, cbSceneParam._m0[91u].z, fma(_1240, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1239));
    float _1283 = _513 * 0.5;
    float _1284 = _514 * 0.5;
    float _1285 = _515 * 0.5;
    float _1286 = dot(vec4(_1283, _1284, _1285, 1.0), vec4(_1217, _1220, _1223, _1226));
    float _1289 = dot(vec4(_1283, _1284, _1285, 1.0), vec4(_1216, _1219, _1222, _1225));
    float _1292 = dot(vec4(_1283, _1284, _1285, 1.0), vec4(_1215, _1218, _1221, _1224));
    float _1326;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1299 = dot(vec4(_1283, _1284, _1285, 1.0), vec4(_906, _910, _913, _916));
        float _1303 = dot(vec4(_1283, _1284, _1285, 1.0), vec4(_908, _911, _914, _917));
        float _1307 = dot(vec4(_1283, _1284, _1285, 1.0), vec4(_909, _912, _915, _918));
        float _1314 = dot(vec4(cbModelParam._m0[39u]), vec4(_1283, _1284, _1285, 1.0));
        _1326 = dot(vec3(isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)), isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)), isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1314) ? 0.0 : (isnan(0.0) ? _1314 : max(0.0, _1314))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1326 = 1.0;
    }
    float _1337;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1328 = dot(vec4(cbModelParam._m0[40u]), vec4(_1283, _1284, _1285, 1.0));
        _1337 = dot(vec3(isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)), isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)), isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1328) ? 0.0 : (isnan(0.0) ? _1328 : max(0.0, _1328))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1337 = 1.0;
    }
    float _1341 = (_1337 * cbModelParam._m0[1u].x) + (_1326 * (1.0 - cbModelParam._m0[1u].x));
    float _1351 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _321);
    float _1352 = isnan(_1351) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1351 : min(cbModelParam._m0[25u].z, _1351));
    float _1434;
    float _1436;
    float _1438;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1401 = fma(_577, cbModelParam._m0[13u].z, fma(_573, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _569)) + cbModelParam._m0[13u].w;
        float _1405 = fma(_577, cbModelParam._m0[14u].z, fma(_573, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _569)) + cbModelParam._m0[14u].w;
        float _1409 = fma(_577, cbModelParam._m0[15u].z, fma(_573, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _569)) + cbModelParam._m0[15u].w;
        float _1412 = fma(_515, cbModelParam._m0[13u].z, fma(_514, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _513));
        float _1415 = fma(_515, cbModelParam._m0[14u].z, fma(_514, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _513));
        float _1418 = fma(_515, cbModelParam._m0[15u].z, fma(_514, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _513));
        float _1446;
        if (_1412 > 0.0)
        {
            _1446 = abs((1.0 - _1401) / _1412);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1412 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1401 + 1.0) / _1412);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1446 = frontier_phi_19_17_ladder;
        }
        float _1652;
        if (_1415 > 0.0)
        {
            _1652 = abs((1.0 - _1405) / _1415);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1415 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1405 + 1.0) / _1415);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1652 = frontier_phi_28_24_ladder;
        }
        float _1906;
        if (_1418 > 0.0)
        {
            _1906 = abs((1.0 - _1409) / _1418);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1418 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1409 + 1.0) / _1418);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1906 = frontier_phi_40_35_ladder;
        }
        float _1908 = isnan(_1652) ? _1446 : (isnan(_1446) ? _1652 : min(_1446, _1652));
        float _1909 = isnan(_1906) ? _1908 : (isnan(_1908) ? _1906 : min(_1908, _1906));
        float _1913 = (_1909 * _1412) + _1401;
        float _1914 = (_1909 * _1415) + _1405;
        float _1915 = (_1909 * _1418) + _1409;
        float _1916 = _1909 * 9.9999997473787516355514526367188e-05;
        float _1918 = (-1.0) - _1916;
        float _1920 = _1916 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1915 > _1920) || ((_1915 < _1918) || ((_1914 > _1920) || ((_1914 < _1918) || ((_1913 < _1918) || (_1913 > _1920))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2043 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1915, cbModelParam._m0[9u].z, fma(_1914, cbModelParam._m0[9u].y, _1913 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1915, cbModelParam._m0[10u].z, fma(_1914, cbModelParam._m0[10u].y, _1913 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1915, cbModelParam._m0[11u].z, fma(_1914, cbModelParam._m0[11u].y, _1913 * cbModelParam._m0[11u].x))), _1352);
            frontier_phi_18_40_ladder = _2043.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2043.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2043.x * cbModelParam._m0[1u].y;
        }
        _1434 = frontier_phi_18_40_ladder_2;
        _1436 = frontier_phi_18_40_ladder_1;
        _1438 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1422 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_513, _514, _515), _1352);
        _1434 = _1422.x * cbModelParam._m0[1u].y;
        _1436 = _1422.y * cbModelParam._m0[1u].y;
        _1438 = _1422.z * cbModelParam._m0[1u].y;
    }
    float _1442 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _321);
    float _1443 = isnan(_1442) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1442 : min(cbModelParam._m0[25u].w, _1442));
    float _1535;
    float _1537;
    float _1539;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1499 = fma(_577, cbModelParam._m0[21u].z, fma(_573, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _569)) + cbModelParam._m0[21u].w;
        float _1503 = fma(_577, cbModelParam._m0[22u].z, fma(_573, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _569)) + cbModelParam._m0[22u].w;
        float _1507 = fma(_577, cbModelParam._m0[23u].z, fma(_573, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _569)) + cbModelParam._m0[23u].w;
        float _1510 = fma(_515, cbModelParam._m0[21u].z, fma(_514, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _513));
        float _1513 = fma(_515, cbModelParam._m0[22u].z, fma(_514, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _513));
        float _1516 = fma(_515, cbModelParam._m0[23u].z, fma(_514, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _513));
        float _1657;
        if (_1510 > 0.0)
        {
            _1657 = abs((1.0 - _1499) / _1510);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1510 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1499 + 1.0) / _1510);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1657 = frontier_phi_30_26_ladder;
        }
        float _1933;
        if (_1513 > 0.0)
        {
            _1933 = abs((1.0 - _1503) / _1513);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1513 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1503 + 1.0) / _1513);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1933 = frontier_phi_42_37_ladder;
        }
        float _2146;
        if (_1516 > 0.0)
        {
            _2146 = abs((1.0 - _1507) / _1516);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1516 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1507 + 1.0) / _1516);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2146 = frontier_phi_51_48_ladder;
        }
        float _2148 = isnan(_1933) ? _1657 : (isnan(_1657) ? _1933 : min(_1657, _1933));
        float _2149 = isnan(_2146) ? _2148 : (isnan(_2148) ? _2146 : min(_2148, _2146));
        float _2153 = (_2149 * _1510) + _1499;
        float _2154 = (_2149 * _1513) + _1503;
        float _2155 = (_2149 * _1516) + _1507;
        float _2156 = _2149 * 9.9999997473787516355514526367188e-05;
        float _2157 = (-1.0) - _2156;
        float _2159 = _2156 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2155 > _2159) || ((_2155 < _2157) || ((_2154 > _2159) || ((_2154 < _2157) || ((_2153 < _2157) || (_2153 > _2159))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2354 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2155, cbModelParam._m0[17u].z, fma(_2154, cbModelParam._m0[17u].y, _2153 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2155, cbModelParam._m0[18u].z, fma(_2154, cbModelParam._m0[18u].y, _2153 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2155, cbModelParam._m0[19u].z, fma(_2154, cbModelParam._m0[19u].y, _2153 * cbModelParam._m0[19u].x))), _1443);
            frontier_phi_27_51_ladder = _2354.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2354.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2354.x * cbModelParam._m0[1u].z;
        }
        _1535 = frontier_phi_27_51_ladder_2;
        _1537 = frontier_phi_27_51_ladder_1;
        _1539 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1519 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_513, _514, _515), _1443);
        _1535 = _1519.x * cbModelParam._m0[1u].z;
        _1537 = _1519.y * cbModelParam._m0[1u].z;
        _1539 = _1519.z * cbModelParam._m0[1u].z;
    }
    float _1552 = (((_540 * _489) + _541) * _505) * ((cbModelParam._m0[1u].w * (_1535 - _1434)) + _1434);
    float _1554 = (((_540 * _491) + _541) * _505) * ((cbModelParam._m0[1u].w * (_1537 - _1436)) + _1436);
    float _1556 = (((_540 * _492) + _541) * _505) * ((cbModelParam._m0[1u].w * (_1539 - _1438)) + _1438);
    float _1559 = fma(_1556, cbSceneParam._m0[89u].z, fma(_1554, cbSceneParam._m0[89u].y, _1552 * cbSceneParam._m0[89u].x));
    float _1562 = fma(_1556, cbSceneParam._m0[90u].z, fma(_1554, cbSceneParam._m0[90u].y, _1552 * cbSceneParam._m0[90u].x));
    float _1565 = fma(_1556, cbSceneParam._m0[91u].z, fma(_1554, cbSceneParam._m0[91u].y, _1552 * cbSceneParam._m0[91u].x));
    uvec4 _1575 = floatBitsToUint(cbInstanceData._m0[_463 + 5u]);
    uint _1577 = _1575.x * 14u;
    uint _1578 = _1577 + 13u;
    float _1585 = _505 + (-1.0);
    float _1590 = (cbLight._m0[_1578].x * _1585) + 1.0;
    float _1591 = (cbLight._m0[_1578].y * _1585) + 1.0;
    float _1592 = (cbLight._m0[_1578].z * _1585) + 1.0;
    float _1593 = (cbLight._m0[_1578].w * _1585) + 1.0;
    uint _1594 = _1577 + 5u;
    float _1600 = isnan(1.0) ? _1591 : (isnan(_1591) ? 1.0 : min(_1591, 1.0));
    uint _1604 = _1577 + 4u;
    float _1611 = isnan(1.0) ? _1590 : (isnan(_1590) ? 1.0 : min(_1590, 1.0));
    uint _1615 = _1577 | 1u;
    float _1626 = dot(vec3(cbLight._m0[_1577].xyz), vec3(_318, _319, _320));
    float _1629 = dot(vec3(cbLight._m0[_1615].xyz), vec3(_318, _319, _320));
    float _3817 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
    float _3828 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
    float _1634 = (isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * 0.3183098733425140380859375;
    float _1636 = (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * 0.3183098733425140380859375;
    float _1643 = ((cbLight._m0[_1594].x * _1600) * _1636) + ((cbLight._m0[_1604].x * _1611) * _1634);
    float _1644 = ((_1600 * cbLight._m0[_1594].y) * _1636) + ((_1611 * cbLight._m0[_1604].y) * _1634);
    float _1645 = ((_1600 * cbLight._m0[_1594].z) * _1636) + ((_1611 * cbLight._m0[_1604].z) * _1634);
    uvec4 _1649 = floatBitsToUint(cbLight._m0[_1577 + 12u]);
    bool _1651 = _1649.x == 0u;
    float _1662;
    float _1664;
    float _1666;
    if (_1651)
    {
        _1662 = _1643;
        _1664 = _1644;
        _1666 = _1645;
    }
    else
    {
        uint _1670 = _1577 + 6u;
        float _1686 = (dot(vec3(cbLight._m0[_1577 + 2u].xyz), vec3(_318, _319, _320)) * 0.5) + 0.5;
        float _1687 = _1686 * _1686;
        float _3839 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1689 = isnan(1.0) ? _1592 : (isnan(_1592) ? 1.0 : min(_1592, 1.0));
        _1662 = (((cbLight._m0[_1670].x * 0.3183098733425140380859375) * _1688) * _1689) + _1643;
        _1664 = (((cbLight._m0[_1670].y * 0.3183098733425140380859375) * _1688) * _1689) + _1644;
        _1666 = (((cbLight._m0[_1670].z * 0.3183098733425140380859375) * _1688) * _1689) + _1645;
    }
    bool _1669 = _1649.y == 0u;
    float _1707;
    float _1709;
    float _1711;
    if (_1669)
    {
        _1707 = _1662;
        _1709 = _1664;
        _1711 = _1666;
    }
    else
    {
        uint _1877 = _1577 + 7u;
        float _1893 = (dot(vec3(cbLight._m0[_1577 + 3u].xyz), vec3(_318, _319, _320)) * 0.5) + 0.5;
        float _1894 = _1893 * _1893;
        float _3855 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
        float _1895 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1896 = isnan(1.0) ? _1593 : (isnan(_1593) ? 1.0 : min(_1593, 1.0));
        _1707 = (((cbLight._m0[_1877].x * 0.3183098733425140380859375) * _1895) * _1896) + _1662;
        _1709 = (((cbLight._m0[_1877].y * 0.3183098733425140380859375) * _1895) * _1896) + _1664;
        _1711 = (((cbLight._m0[_1877].z * 0.3183098733425140380859375) * _1895) * _1896) + _1666;
    }
    uint _1714 = _1577 + 8u;
    float _1727 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1577].w)) * _321) * 0.949999988079071044921875);
    float _1728 = _1727 * _1727;
    float _1729 = cbLight._m0[_1577].x + _405;
    float _1730 = cbLight._m0[_1577].y + _406;
    float _1731 = cbLight._m0[_1577].z + _407;
    float _1735 = inversesqrt(dot(vec3(_1729, _1730, _1731), vec3(_1729, _1730, _1731)));
    float _1736 = _1735 * _1729;
    float _1737 = _1735 * _1730;
    float _1738 = _1735 * _1731;
    float _1739 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_1577].xyz));
    float _3871 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
    float _1742 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _3882 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _1743 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _1744 = dot(vec3(_318, _319, _320), vec3(_1736, _1737, _1738));
    float _3893 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
    float _1747 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _1748 = dot(vec3(cbLight._m0[_1577].xyz), vec3(_1736, _1737, _1738));
    float _3904 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
    float _1752 = _1728 * _1728;
    float _1756 = ((_1747 * _1747) * (_1752 + (-1.0))) + 1.0;
    float _1764 = exp2(log2(1.0 - (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) * 5.0);
    float _1765 = 0.959999978542327880859375 - _486;
    float _1767 = 0.959999978542327880859375 - _487;
    float _1768 = 0.959999978542327880859375 - _488;
    float _1775 = 1.0 - _1728;
    float _1786 = (0.5 / (((_1743 * ((_1742 * _1775) + _1728)) + 9.9999999392252902907785028219223e-09) + (((_1743 * _1775) + _1728) * _1742))) * _1742;
    float _3915 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
    float _1788 = (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_1752 / ((_1756 * _1756) * 3.141590118408203125));
    uint _1799 = _1577 + 9u;
    float _1810 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1615].w)) * _321) * 0.949999988079071044921875);
    float _1811 = _1810 * _1810;
    float _1812 = cbLight._m0[_1615].x + _405;
    float _1813 = cbLight._m0[_1615].y + _406;
    float _1814 = cbLight._m0[_1615].z + _407;
    float _1818 = inversesqrt(dot(vec3(_1812, _1813, _1814), vec3(_1812, _1813, _1814)));
    float _1819 = _1818 * _1812;
    float _1820 = _1818 * _1813;
    float _1821 = _1818 * _1814;
    float _1822 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_1615].xyz));
    float _3926 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
    float _1825 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _1826 = dot(vec3(_318, _319, _320), vec3(_1819, _1820, _1821));
    float _3937 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _1829 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _1830 = dot(vec3(cbLight._m0[_1615].xyz), vec3(_1819, _1820, _1821));
    float _3948 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _1834 = _1811 * _1811;
    float _1838 = ((_1829 * _1829) * (_1834 + (-1.0))) + 1.0;
    float _1845 = exp2(log2(1.0 - (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0)))) * 5.0);
    float _1852 = 1.0 - _1811;
    float _1862 = (0.5 / (((_1743 * ((_1825 * _1852) + _1811)) + 9.9999999392252902907785028219223e-09) + (((_1743 * _1852) + _1811) * _1825))) * _1825;
    float _3959 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _1864 = (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * (_1834 / ((_1838 * _1838) * 3.141590118408203125));
    float _1874 = (((((_1845 * _1765) + _489) * cbLight._m0[_1799].x) * _1864) * _1600) + (((((_1764 * _1765) + _489) * cbLight._m0[_1714].x) * _1788) * _1611);
    float _1875 = (((((_1845 * _1767) + _491) * cbLight._m0[_1799].y) * _1864) * _1600) + (((((_1764 * _1767) + _491) * cbLight._m0[_1714].y) * _1788) * _1611);
    float _1876 = (((((_1845 * _1768) + _492) * cbLight._m0[_1799].z) * _1864) * _1600) + (((((_1764 * _1768) + _492) * cbLight._m0[_1714].z) * _1788) * _1611);
    float _1938;
    float _1940;
    float _1942;
    if (_1651)
    {
        _1938 = _1874;
        _1940 = _1875;
        _1942 = _1876;
    }
    else
    {
        uint _1944 = _1577 + 2u;
        uint _1948 = _1577 + 10u;
        float _1962 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1944].w)) * _321) * 0.949999988079071044921875);
        float _1963 = _1962 * _1962;
        float _1964 = cbLight._m0[_1944].x + _405;
        float _1965 = cbLight._m0[_1944].y + _406;
        float _1966 = cbLight._m0[_1944].z + _407;
        float _1970 = inversesqrt(dot(vec3(_1964, _1965, _1966), vec3(_1964, _1965, _1966)));
        float _1971 = _1970 * _1964;
        float _1972 = _1970 * _1965;
        float _1973 = _1970 * _1966;
        float _1974 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_1944].xyz));
        float _3970 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
        float _1977 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1978 = dot(vec3(_318, _319, _320), vec3(_1971, _1972, _1973));
        float _3981 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
        float _1981 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1982 = dot(vec3(cbLight._m0[_1944].xyz), vec3(_1971, _1972, _1973));
        float _3992 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
        float _1986 = _1963 * _1963;
        float _1990 = ((_1981 * _1981) * (_1986 + (-1.0))) + 1.0;
        float _1997 = exp2(log2(1.0 - (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) * 5.0);
        float _2004 = 1.0 - _1963;
        float _2014 = (0.5 / (((_1743 * ((_1977 * _2004) + _1963)) + 9.9999999392252902907785028219223e-09) + (((_1743 * _2004) + _1963) * _1977))) * _1977;
        float _4003 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
        float _2016 = (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_1986 / ((_1990 * _1990) * 3.141590118408203125));
        float _2017 = isnan(1.0) ? _1592 : (isnan(_1592) ? 1.0 : min(_1592, 1.0));
        _1938 = (((((_1997 * _1765) + _489) * cbLight._m0[_1948].x) * _2016) * _2017) + _1874;
        _1940 = (((((_1997 * _1767) + _491) * cbLight._m0[_1948].y) * _2016) * _2017) + _1875;
        _1942 = (((((_1997 * _1768) + _492) * cbLight._m0[_1948].z) * _2016) * _2017) + _1876;
    }
    float _2052;
    float _2054;
    float _2056;
    if (_1669)
    {
        _2052 = _1938;
        _2054 = _1940;
        _2056 = _1942;
    }
    else
    {
        uint _2063 = _1577 + 3u;
        uint _2067 = _1577 + 11u;
        float _2081 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2063].w)) * _321) * 0.949999988079071044921875);
        float _2082 = _2081 * _2081;
        float _2083 = cbLight._m0[_2063].x + _405;
        float _2084 = cbLight._m0[_2063].y + _406;
        float _2085 = cbLight._m0[_2063].z + _407;
        float _2089 = inversesqrt(dot(vec3(_2083, _2084, _2085), vec3(_2083, _2084, _2085)));
        float _2090 = _2089 * _2083;
        float _2091 = _2089 * _2084;
        float _2092 = _2089 * _2085;
        float _2093 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_2063].xyz));
        float _4019 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2096 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _2097 = dot(vec3(_318, _319, _320), vec3(_2090, _2091, _2092));
        float _4030 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2100 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _2101 = dot(vec3(cbLight._m0[_2063].xyz), vec3(_2090, _2091, _2092));
        float _4041 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
        float _2105 = _2082 * _2082;
        float _2109 = ((_2100 * _2100) * (_2105 + (-1.0))) + 1.0;
        float _2116 = exp2(log2(1.0 - (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) * 5.0);
        float _2123 = 1.0 - _2082;
        float _2133 = (0.5 / (((_1743 * ((_2096 * _2123) + _2082)) + 9.9999999392252902907785028219223e-09) + (((_1743 * _2123) + _2082) * _2096))) * _2096;
        float _4052 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2135 = (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_2105 / ((_2109 * _2109) * 3.141590118408203125));
        float _2136 = isnan(1.0) ? _1593 : (isnan(_1593) ? 1.0 : min(_1593, 1.0));
        _2052 = (((((_2116 * _1765) + _489) * cbLight._m0[_2067].x) * _2135) * _2136) + _1938;
        _2054 = (((((_2116 * _1767) + _491) * cbLight._m0[_2067].y) * _2135) * _2136) + _1940;
        _2056 = (((((_2116 * _1768) + _492) * cbLight._m0[_2067].z) * _2135) * _2136) + _1942;
    }
    float _2271;
    float _2273;
    float _2275;
    float _2277;
    float _2279;
    float _2281;
    if (_1575.y == 0u)
    {
        float _2211 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2212 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2211;
        float _2213 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2211;
        float _2214 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2211;
        uvec4 _2226 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2227 = _2226.x;
        uint _2238 = uint((float(_2226.y) * floor(float(uint(cbSceneParam._m0[85u].y * _424) / _2227))) + floor(float(uint(cbSceneParam._m0[85u].x * _423) / _2227)));
        float _2248 = (log2(_2214 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2249 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        uint _2252 = uint(isnan(14.0) ? _2249 : (isnan(_2249) ? 14.0 : min(_2249, 14.0)));
        uvec4 _2257 = texelFetch(g_lightClusterGridBuffer, int(((_2252 << 2u) + (_2238 << 6u)) >> 2u));
        uint _2258 = _2257.x;
        uint _2259 = _2226.z;
        float _2359;
        float _2361;
        float _2363;
        float _2365;
        float _2367;
        float _2369;
        if (((((1u << ((_2259 >> 4u) & 15u)) + 4294967295u) & _2258) == 0u) || ((_2259 & 240u) == 0u))
        {
            _2359 = 0.0;
            _2361 = 0.0;
            _2363 = 0.0;
            _2365 = 0.0;
            _2367 = 0.0;
            _2369 = 0.0;
        }
        else
        {
            float _2360;
            float _2362;
            float _2364;
            float _2366;
            float _2368;
            float _2370;
            float _2512 = 0.0;
            float _2513 = 0.0;
            float _2514 = 0.0;
            float _2515 = 0.0;
            float _2516 = 0.0;
            float _2517 = 0.0;
            uint _2518 = 0u;
            uint _2527;
            bool _2528;
            for (;;)
            {
                _2527 = texelFetch(g_lightClassification, int((((_2252 << 5u) + (_2238 << 9u)) + (_2518 << 2u)) >> 2u)).x;
                _2528 = _2527 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2528)
                {
                    frontier_phi_68_pred = _2512;
                    frontier_phi_68_pred_1 = _2517;
                    frontier_phi_68_pred_2 = _2516;
                    frontier_phi_68_pred_3 = _2515;
                    frontier_phi_68_pred_4 = _2514;
                    frontier_phi_68_pred_5 = _2513;
                }
                else
                {
                    float _2657;
                    float _2658;
                    float _2659;
                    float _2660;
                    float _2661;
                    float _2662;
                    uint _2663;
                    _2657 = _2512;
                    _2658 = _2513;
                    _2659 = _2514;
                    _2660 = _2515;
                    _2661 = _2516;
                    _2662 = _2517;
                    _2663 = _2527;
                    float _2584;
                    float _2585;
                    float _2586;
                    float _2587;
                    float _2588;
                    float _2589;
                    for (;;)
                    {
                        uint _2667 = uint(findLSB(_2663)) + (_2518 << 5u);
                        uint _2664 = (_2663 + 4294967295u) & _2663;
                        uint _2669 = _2667 * 48u;
                        vec4 _2683 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2669)).x, texelFetch(g_PointLightRenderingBuffer, int(_2669 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2669 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2669 + 3u)).x));
                        uint _2689 = (_2667 * 48u) + 4u;
                        vec4 _2702 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2689)).x, texelFetch(g_PointLightRenderingBuffer, int(_2689 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2689 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2689 + 3u)).x));
                        uint _2708 = (_2667 * 48u) + 8u;
                        vec3 _2719 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2708)).x, texelFetch(g_PointLightRenderingBuffer, int(_2708 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2708 + 2u)).x));
                        float _2723 = _2683.x - _2212;
                        float _2724 = _2683.y - _2213;
                        float _2725 = _2683.z - _2214;
                        float _2726 = dot(vec3(_2723, _2724, _2725), vec3(_2723, _2724, _2725));
                        float _2729 = inversesqrt(_2726);
                        float _2730 = _2729 * _2723;
                        float _2731 = _2729 * _2724;
                        float _2732 = _2729 * _2725;
                        float _2733 = dot(vec3(_444, _447, _450), vec3(_2730, _2731, _2732));
                        float _2738 = 1.0 - (_2726 * _2683.w);
                        float _4078 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
                        float _2739 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
                        float _2740 = sqrt(_2726) * _2702.w;
                        float _2743 = 1.39999997615814208984375 / (_2740 + 1.39999997615814208984375);
                        float _2744 = _2743 * _2743;
                        float _2747 = ((1.0 - _2744) * _2733) + _2744;
                        float _2750 = _2740 * _2740;
                        float _2754 = ((isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0))) * _2739) / ((_2750 * 0.699999988079071044921875) + 1.0);
                        float _2758 = (-0.0) - _2212;
                        float _2759 = (-0.0) - _2213;
                        float _2760 = (-0.0) - _2214;
                        float _2764 = inversesqrt(dot(vec3(_2758, _2759, _2760), vec3(_2758, _2759, _2760)));
                        float _2765 = _2764 * _2758;
                        float _2766 = _2764 * _2759;
                        float _2767 = _2764 * _2760;
                        float _2775 = exp2(log2(1.0 / ((_2750 * 3.5) + 5.0)) * 0.25);
                        float _2776 = 1.0 - _521;
                        float _2783 = sqrt(1.0 - ((1.0 - (_2776 * _2776)) * (1.0 - (_2775 * _2775))));
                        float _2784 = _2783 * _2783;
                        float _2785 = _2784 * _2784;
                        float _2786 = _2765 + _2730;
                        float _2787 = _2766 + _2731;
                        float _2788 = _2767 + _2732;
                        float _2792 = inversesqrt(dot(vec3(_2786, _2787, _2788), vec3(_2786, _2787, _2788)));
                        float _2796 = dot(vec3(_444, _447, _450), vec3(_2765, _2766, _2767));
                        float _4094 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
                        float _2799 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
                        float _2800 = dot(vec3(_444, _447, _450), vec3(_2792 * _2786, _2792 * _2787, _2792 * _2788));
                        float _4105 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
                        float _2803 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
                        float _2807 = ((_2803 * _2803) * (_2785 + (-1.0))) + 1.0;
                        float _2808 = _2743 * _2784;
                        float _2809 = _2808 * _2808;
                        float _2812 = ((1.0 - _2809) * _2733) + _2809;
                        float _4116 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
                        float _2813 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
                        float _2814 = 1.0 - _2784;
                        float _2824 = (0.5 / (((_2813 * ((_2799 * _2814) + _2784)) + 9.9999999392252902907785028219223e-09) + (((_2813 * _2814) + _2784) * _2799))) * _2813;
                        float _4127 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
                        float _2835 = (((_2785 * 3.1415927410125732421875) * (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0)))) / ((_2807 * _2807) * ((_2750 * 2.1991131305694580078125) + 3.141590118408203125))) * _2739;
                        _2587 = (_2754 * _2702.x) + _2660;
                        _2588 = (_2754 * _2702.y) + _2661;
                        _2589 = (_2754 * _2702.z) + _2662;
                        _2584 = (_2835 * _2719.x) + _2657;
                        _2585 = (_2835 * _2719.y) + _2658;
                        _2586 = (_2835 * _2719.z) + _2659;
                        if (_2664 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2657 = _2584;
                            _2658 = _2585;
                            _2659 = _2586;
                            _2660 = _2587;
                            _2661 = _2588;
                            _2662 = _2589;
                            _2663 = _2664;
                        }
                    }
                    frontier_phi_68_pred = _2584;
                    frontier_phi_68_pred_1 = _2589;
                    frontier_phi_68_pred_2 = _2588;
                    frontier_phi_68_pred_3 = _2587;
                    frontier_phi_68_pred_4 = _2586;
                    frontier_phi_68_pred_5 = _2585;
                }
                _2360 = frontier_phi_68_pred;
                _2370 = frontier_phi_68_pred_1;
                _2368 = frontier_phi_68_pred_2;
                _2366 = frontier_phi_68_pred_3;
                _2364 = frontier_phi_68_pred_4;
                _2362 = frontier_phi_68_pred_5;
                uint _2519 = _2518 + 1u;
                if (_2519 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2512 = _2360;
                    _2513 = _2362;
                    _2514 = _2364;
                    _2515 = _2366;
                    _2516 = _2368;
                    _2517 = _2370;
                    _2518 = _2519;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2359 = _2360;
            _2361 = _2362;
            _2363 = _2364;
            _2365 = _2366;
            _2367 = _2368;
            _2369 = _2370;
        }
        uvec4 _2373 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2374 = _2373.z;
        uint _2376 = (_2374 >> 8u) & 15u;
        float _2480;
        float _2482;
        float _2484;
        float _2486;
        float _2488;
        float _2490;
        if (((4294967295u << _2376) & _2258) == 0u)
        {
            _2480 = _2359;
            _2482 = _2361;
            _2484 = _2363;
            _2486 = _2365;
            _2488 = _2367;
            _2490 = _2369;
        }
        else
        {
            float _2505 = inversesqrt(dot(vec3(_2212, _2213, _2214), vec3(_2212, _2213, _2214)));
            float _2506 = _2505 * _2212;
            float _2507 = _2505 * _2213;
            float _2508 = _2505 * _2214;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2376 < ((_2374 >> 12u) & 15u))
            {
                float _2481;
                float _2483;
                float _2485;
                float _2487;
                float _2489;
                float _2491;
                float _2640 = _2359;
                float _2641 = _2361;
                float _2642 = _2363;
                float _2643 = _2365;
                float _2644 = _2367;
                float _2645 = _2369;
                uint _2646 = _2376;
                uint _2655;
                bool _2656;
                for (;;)
                {
                    _2655 = texelFetch(g_lightClassification, int((((_2252 << 5u) + (_2238 << 9u)) + (_2646 << 2u)) >> 2u)).x;
                    _2656 = _2655 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2656)
                    {
                        frontier_phi_79_pred = _2645;
                        frontier_phi_79_pred_1 = _2644;
                        frontier_phi_79_pred_2 = _2643;
                        frontier_phi_79_pred_3 = _2642;
                        frontier_phi_79_pred_4 = _2641;
                        frontier_phi_79_pred_5 = _2640;
                    }
                    else
                    {
                        float _2849;
                        float _2850;
                        float _2851;
                        float _2852;
                        float _2853;
                        float _2854;
                        float _3145;
                        float _3146;
                        float _3147;
                        float _3148;
                        float _3149;
                        float _3150;
                        float _2862 = _2640;
                        float _2863 = _2641;
                        float _2864 = _2642;
                        float _2865 = _2643;
                        float _2866 = _2644;
                        float _2867 = _2645;
                        uint _2868 = _2655;
                        uint _2869;
                        vec4 _2894;
                        float _2895;
                        vec4 _2910;
                        vec3 _2922;
                        vec4 _2938;
                        vec4 _2954;
                        float _3001;
                        bool _3002;
                        for (;;)
                        {
                            uint _2879 = ((_2646 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2868));
                            _2869 = (_2868 + 4294967295u) & _2868;
                            uint _2881 = _2879 * 40u;
                            _2894 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2881)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 3u)).x));
                            _2895 = _2894.w;
                            uint _2897 = (_2879 * 40u) + 4u;
                            _2910 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2897)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 3u)).x));
                            uint _2912 = (_2879 * 40u) + 8u;
                            _2922 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2912)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 2u)).x));
                            uint _2925 = (_2879 * 40u) + 16u;
                            _2938 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2925)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 3u)).x));
                            uint _2941 = (_2879 * 40u) + 20u;
                            _2954 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2941)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 3u)).x));
                            uint _2957 = (_2879 * 40u) + 24u;
                            vec4 _2970 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2957)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 3u)).x));
                            uint _2976 = (_2879 * 40u) + 28u;
                            vec4 _2989 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2976)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 3u)).x));
                            _3001 = fma(_2214, _2989.z, fma(_2213, _2989.y, _2989.x * _2212)) + _2989.w;
                            _3002 = !((fma(_2214, _2970.z, fma(_2213, _2970.y, _2970.x * _2212)) + _2970.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3002)
                            {
                                float _3029 = _2894.x - _2212;
                                float _3030 = _2894.y - _2213;
                                float _3031 = _2894.z - _2214;
                                float _3032 = dot(vec3(_3029, _3030, _3031), vec3(_3029, _3030, _3031));
                                float _3035 = inversesqrt(_3032);
                                float _3036 = _3035 * _3029;
                                float _3037 = _3035 * _3030;
                                float _3038 = _3035 * _3031;
                                float _3042 = 1.0 - (_3032 / (_2895 * _2895));
                                float _4138 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                                float _3043 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
                                float _3047 = sqrt(_3032) * _2910.w;
                                float _3049 = 1.39999997615814208984375 / (_3047 + 1.39999997615814208984375);
                                float _3050 = _3049 * _3049;
                                float _3053 = ((1.0 - _3050) * dot(vec3(_3036, _3037, _3038), vec3(_444, _447, _450))) + _3050;
                                float _3056 = _3047 * _3047;
                                float _3060 = (fma(_2214, _2938.z, fma(_2213, _2938.y, _2938.x * _2212)) + _2938.w) / _3001;
                                float _3061 = (fma(_2214, _2954.z, fma(_2213, _2954.y, _2954.x * _2212)) + _2954.w) / _3001;
                                float _3065 = 1.0 - dot(vec2(_3060, _3061), vec2(_3060, _3061));
                                float _4154 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                                float _3066 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
                                float _3067 = _3066 * (((isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0))) * _3043) / ((_3056 * 0.699999988079071044921875) + 1.0));
                                float _3079 = exp2(log2(1.0 / ((_3056 * 3.5) + 5.0)) * 0.25);
                                float _3080 = 1.0 - _521;
                                float _3087 = sqrt(1.0 - ((1.0 - (_3080 * _3080)) * (1.0 - (_3079 * _3079))));
                                float _3088 = _3087 * _3087;
                                float _3089 = _3088 * _3088;
                                float _3090 = _3036 - _2506;
                                float _3091 = _3037 - _2507;
                                float _3092 = _3038 - _2508;
                                float _3096 = inversesqrt(dot(vec3(_3090, _3091, _3092), vec3(_3090, _3091, _3092)));
                                float _3100 = dot(vec3(_444, _447, _450), vec3((-0.0) - _2506, (-0.0) - _2507, (-0.0) - _2508));
                                float _4165 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                                float _3103 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
                                float _3104 = dot(vec3(_444, _447, _450), vec3(_3096 * _3090, _3096 * _3091, _3096 * _3092));
                                float _4176 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                                float _3107 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
                                float _3111 = ((_3107 * _3107) * (_3089 + (-1.0))) + 1.0;
                                float _3112 = _3049 * _3088;
                                float _3113 = _3112 * _3112;
                                float _3119 = ((1.0 - _3113) * dot(vec3(_444, _447, _450), vec3(_3036, _3037, _3038))) + _3113;
                                float _4187 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
                                float _3120 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
                                float _3121 = 1.0 - _3088;
                                float _3131 = (0.5 / (((_3120 * ((_3103 * _3121) + _3088)) + 9.9999999392252902907785028219223e-09) + (((_3120 * _3121) + _3088) * _3103))) * _3120;
                                float _4198 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                                float _3141 = (_3066 * _3043) * (((_3089 * 3.1415927410125732421875) * (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0)))) / ((_3111 * _3111) * ((_3056 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3067 * _2910.y;
                                frontier_phi_85_pred_1 = _3067 * _2910.x;
                                frontier_phi_85_pred_2 = _3141 * _2922.z;
                                frontier_phi_85_pred_3 = _3141 * _2922.y;
                                frontier_phi_85_pred_4 = _3141 * _2922.x;
                                frontier_phi_85_pred_5 = _3067 * _2910.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3149 = frontier_phi_85_pred;
                            _3148 = frontier_phi_85_pred_1;
                            _3147 = frontier_phi_85_pred_2;
                            _3146 = frontier_phi_85_pred_3;
                            _3145 = frontier_phi_85_pred_4;
                            _3150 = frontier_phi_85_pred_5;
                            _2852 = _3148 + _2865;
                            _2853 = _3149 + _2866;
                            _2854 = _3150 + _2867;
                            _2849 = _3145 + _2862;
                            _2850 = _3146 + _2863;
                            _2851 = _3147 + _2864;
                            if (_2869 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2862 = _2849;
                                _2863 = _2850;
                                _2864 = _2851;
                                _2865 = _2852;
                                _2866 = _2853;
                                _2867 = _2854;
                                _2868 = _2869;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2854;
                        frontier_phi_79_pred_1 = _2853;
                        frontier_phi_79_pred_2 = _2852;
                        frontier_phi_79_pred_3 = _2851;
                        frontier_phi_79_pred_4 = _2850;
                        frontier_phi_79_pred_5 = _2849;
                    }
                    _2491 = frontier_phi_79_pred;
                    _2489 = frontier_phi_79_pred_1;
                    _2487 = frontier_phi_79_pred_2;
                    _2485 = frontier_phi_79_pred_3;
                    _2483 = frontier_phi_79_pred_4;
                    _2481 = frontier_phi_79_pred_5;
                    uint _2647 = _2646 + 1u;
                    if (_2647 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2640 = _2481;
                        _2641 = _2483;
                        _2642 = _2485;
                        _2643 = _2487;
                        _2644 = _2489;
                        _2645 = _2491;
                        _2646 = _2647;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2485;
                frontier_phi_60_61_ladder_1 = _2491;
                frontier_phi_60_61_ladder_2 = _2489;
                frontier_phi_60_61_ladder_3 = _2487;
                frontier_phi_60_61_ladder_4 = _2483;
                frontier_phi_60_61_ladder_5 = _2481;
            }
            else
            {
                frontier_phi_60_61_ladder = _2363;
                frontier_phi_60_61_ladder_1 = _2369;
                frontier_phi_60_61_ladder_2 = _2367;
                frontier_phi_60_61_ladder_3 = _2365;
                frontier_phi_60_61_ladder_4 = _2361;
                frontier_phi_60_61_ladder_5 = _2359;
            }
            _2480 = frontier_phi_60_61_ladder_5;
            _2482 = frontier_phi_60_61_ladder_4;
            _2484 = frontier_phi_60_61_ladder;
            _2486 = frontier_phi_60_61_ladder_3;
            _2488 = frontier_phi_60_61_ladder_2;
            _2490 = frontier_phi_60_61_ladder_1;
        }
        float _2495 = isnan(1.0) ? _505 : (isnan(_505) ? 1.0 : min(_505, 1.0));
        _2271 = (_2495 * _2486) + _1707;
        _2273 = (_2495 * _2488) + _1709;
        _2275 = (_2495 * _2490) + _1711;
        _2277 = ((_2480 * _489) * _2495) + _2052;
        _2279 = ((_2482 * _491) * _2495) + _2054;
        _2281 = ((_2484 * _492) * _2495) + _2056;
    }
    else
    {
        _2271 = _1707;
        _2273 = _1709;
        _2275 = _1711;
        _2277 = _2052;
        _2279 = _2054;
        _2281 = _2056;
    }
    float _4214 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _4225 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _4236 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _2298 = ((isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_2271 + ((isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0))) * _505))) + ((_2277 + ((isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))) * _1341)) * cbPerFrame._m0[3u].x);
    float _2299 = ((isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (_2273 + ((isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0))) * _505))) + ((_2279 + ((isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))) * _1341)) * cbPerFrame._m0[3u].x);
    float _2300 = ((isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_2275 + ((isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0))) * _505))) + ((_2281 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _1341)) * cbPerFrame._m0[3u].x);
    uint _2301 = _463 + 6u;
    float _2309 = _423 / cbSceneParam._m0[86u].x;
    float _2310 = _424 / cbSceneParam._m0[86u].y;
    vec4 _2324 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2309, _2310, (log2((isnan(cbSceneParam._m0[77u].w) ? _346 : (isnan(_346) ? cbSceneParam._m0[77u].w : min(_346, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2326 = _2324.x;
    float _2327 = _2324.y;
    float _2328 = _2324.z;
    float _2329 = _2324.w;
    float _2422;
    float _2424;
    float _2426;
    float _2428;
    if (_346 > cbSceneParam._m0[78u].w)
    {
        float _2384 = isnan(_346) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _346 : min(cbSceneParam._m0[80u].w, _346));
        float _2385 = _2384 / _346;
        float _2396 = _2385 * _398;
        float _2397 = _399 * _2385;
        float _2398 = (-0.0) - _2397;
        float _2400 = _2385 * _400;
        float _2402 = (cbSceneParam._m0[77u].w * _2398) / _2384;
        float _2403 = _2402 + cbSceneParam._m0[79u].w;
        float _2404 = cbSceneParam._m0[79u].w - _2397;
        float _2410 = sqrt(((_2396 * _2396) + (_2397 * _2397)) + (_2400 * _2400));
        float _2413 = (1.0 - (cbSceneParam._m0[77u].w / _2384)) * _2410;
        float _2418 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2420 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2597;
        if (abs((_2398 - _2402) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2597 = ((((_2403 > 0.0) ? exp2(_2418 * _2403) : (2.0 - exp2(_2420 * _2403))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2413;
        }
        else
        {
            float _2541 = 1.0 / cbSceneParam._m0[80u].x;
            float _2542 = isnan(_2404) ? _2403 : (isnan(_2403) ? _2404 : max(_2403, _2404));
            float _2543 = isnan(_2404) ? _2403 : (isnan(_2403) ? _2404 : min(_2403, _2404));
            float _2552 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : min(_2542, 0.0));
            float _2553 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : min(_2543, 0.0));
            _2597 = ((abs(_2410 / _2398) * cbSceneParam._m0[80u].y) * ((((_2552 - _2553) * 2.0) - ((exp2(_2418 * (isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0)))) - exp2(_2418 * (isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0))))) * _2541)) - ((exp2(_2420 * _2552) - exp2(_2420 * _2553)) * _2541))) + (_2413 * cbSceneParam._m0[80u].z);
        }
        vec4 _2599 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2309, _2310, 1.0), 0.0);
        float _2608 = exp2((_2597 * (-1.44269502162933349609375)) * (1.0 - _2599.w));
        float _2609 = log2(_2608);
        float _2625 = log2(_2329);
        _2422 = (exp2(_2625 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2609 * cbSceneParam._m0[78u].x)) * _2599.x) / cbSceneParam._m0[78u].x)) + _2326;
        _2424 = (exp2(_2625 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2609 * cbSceneParam._m0[78u].y)) * _2599.y) / cbSceneParam._m0[78u].y)) + _2327;
        _2426 = (exp2(_2625 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2609 * cbSceneParam._m0[78u].z)) * _2599.z) / cbSceneParam._m0[78u].z)) + _2328;
        _2428 = _2608 * _2329;
    }
    else
    {
        _2422 = _2326;
        _2424 = _2327;
        _2426 = _2328;
        _2428 = _2329;
    }
    bool _2635;
    vec4 _2438;
    vec4 _2460;
    float _2462;
    float _2466;
    float _2467;
    float _2468;
    float _2469;
    bool _2479;
    for (;;)
    {
        _2438 = cbMatDynParam._m0[0u];
        float _2440 = roundEven(_2438.y);
        bool _2441 = _2440 == 3.0;
        float _2442 = log2(_2428);
        float _2449 = exp2(_2442 * cbSceneParam._m0[78u].x) * _2298;
        float _2450 = exp2(_2442 * cbSceneParam._m0[78u].y) * _2299;
        float _2451 = exp2(_2442 * cbSceneParam._m0[78u].z) * _2300;
        float _2458 = _411 + (-0.5);
        _2460 = cbMtdParam._m0[1u];
        _2462 = _2460.y * _2458;
        float _2465 = (_2440 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2466 = _2465 * (_2441 ? _2449 : (_2449 + (cbSceneParam._m0[72u].w * _2422)));
        _2467 = _2465 * (_2441 ? _2450 : (_2450 + (cbSceneParam._m0[72u].w * _2424)));
        _2468 = _2465 * (_2441 ? _2451 : (_2451 + (cbSceneParam._m0[72u].w * _2426)));
        _2469 = _2458 * 0.999000012874603271484375;
        _2479 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2479)
        {
            if ((cbInstanceData._m0[_463 + 7u].x + _2469) < 0.5)
            {
                _2635 = true;
                break;
            }
        }
        uint _2576 = _465 + uint(_2438.w);
        if ((cbInstanceData._m0[_2576].w < 1.0) && ((cbInstanceData._m0[_2576].w + _2469) < 0.5))
        {
            _2635 = true;
            break;
        }
        if ((_2462 + 1.0) < _2460.x)
        {
            _2635 = true;
            break;
        }
        _2635 = false;
        break;
    }
    float _2840;
    if (_2635)
    {
        discard_state = true;
        _2840 = 0.0;
    }
    else
    {
        _2840 = cbInstanceData._m0[_2301].w;
    }
    SV_Target.x = _2466;
    SV_Target.y = _2467;
    SV_Target.z = _2468;
    SV_Target.w = _2840;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2301].w;
    discard_exit();
}


