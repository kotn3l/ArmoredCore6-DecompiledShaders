#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1051;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _228 = uint(roundEven(NORMAL.w)) * 13u;
    uint _234 = _228 + 1u;
    uint _238 = _228 + 2u;
    float _247 = sqrt(((cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x) + (cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x)) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x));
    float _248 = _247 * TEXCOORD.z;
    float _249 = _247 * TEXCOORD.w;
    vec4 _269 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _275 = _269.x * cbMtdParam._m0[11u].x;
    float _276 = _269.y * cbMtdParam._m0[11u].y;
    float _277 = _269.z * cbMtdParam._m0[11u].z;
    vec4 _296 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _248) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _249) + cbTextureTilingScale._m0[5u].w));
    vec4 _332 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _334 = _332.x;
    float _346 = dot(vec4(_334, _332.yzw), vec4(cbMtdParam._m0[28u].w, cbMtdParam._m0[29u].xy, 0.0));
    float _363 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_334 - _346) * cbMtdParam._m0[24u].y) + _346) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3381 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _364 = isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0));
    float _371 = (_364 * ((_296.x * cbMtdParam._m0[12u].x) - _275)) + _275;
    float _372 = (_364 * ((_296.y * cbMtdParam._m0[12u].y) - _276)) + _276;
    float _373 = (_364 * ((_296.z * cbMtdParam._m0[12u].z) - _277)) + _277;
    vec4 _386 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _248) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _249) + cbTextureTilingScale._m0[4u].w));
    vec4 _403 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _405 = _403.x;
    float _406 = _403.y;
    float _407 = _403.z;
    float _416 = ((_386.z - _407) * _364) + _407;
    float _419 = ((((_386.x - _405) * _364) + _405) * 2.0) + (-1.0);
    float _421 = ((((_386.y - _406) * _364) + _406) * 2.0) + (-1.0);
    float _422 = dot(vec2(_419, _421), vec2(_419, _421));
    float _3392 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _427 = sqrt(1.0 - (isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0))));
    vec4 _440 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _468 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _470 = _468.x;
    float _488 = ((texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _248) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _249) + cbTextureTilingScale._m0[9u].w)).x - _470) * _364) + _470;
    float _492 = ((texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _488) * cbMtdParam._m0[19u].z) + _488;
    float _497 = cbMtdParam._m0[22u].x + _440.w;
    float _500 = fma(_427, _215 * NORMAL.x, fma(_421, _222 * TANGENT.x, (_208 * _200) * _419));
    float _503 = fma(_427, _215 * NORMAL.y, fma(_421, _222 * TANGENT.y, (_208 * _201) * _419));
    float _506 = fma(_427, _215 * NORMAL.z, fma(_421, _222 * TANGENT.z, (_208 * _202) * _419));
    float _510 = inversesqrt(dot(vec3(_500, _503, _506), vec3(_500, _503, _506)));
    float _511 = _510 * _500;
    float _512 = _510 * _503;
    float _513 = _510 * _506;
    float _3403 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _514 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
    float _3414 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _3425 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _3436 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _3447 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _3458 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _519 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
    float _533 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _574 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _584 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _574);
    float _585 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _574);
    float _586 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _574);
    float _590 = inversesqrt(dot(vec3(_584, _585, _586), vec3(_584, _585, _586)));
    float _591 = _584 * _590;
    float _592 = _585 * _590;
    float _593 = _586 * _590;
    float _599 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _600 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _618 = fma(_513, cbSceneParam._m0[5u].z, fma(_512, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _511));
    float _621 = fma(_513, cbSceneParam._m0[6u].z, fma(_512, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _511));
    float _624 = fma(_513, cbSceneParam._m0[7u].z, fma(_512, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _511));
    uint _638 = (_228 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _644 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0)))) * cbInstanceData._m0[_638].x;
    float _645 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0)))) * cbInstanceData._m0[_638].y;
    float _646 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0)))) * cbInstanceData._m0[_638].z;
    float _3469 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _647 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
    float _3480 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _648 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
    float _3491 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _649 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
    float _650 = 1.0 - _519;
    float _651 = _647 * _650;
    float _652 = _648 * _650;
    float _653 = _649 * _650;
    float _658 = (_647 + (-0.039999999105930328369140625)) * _519;
    float _659 = (_648 + (-0.039999999105930328369140625)) * _519;
    float _660 = (_649 + (-0.039999999105930328369140625)) * _519;
    float _661 = _658 + 0.039999999105930328369140625;
    float _663 = _659 + 0.039999999105930328369140625;
    float _664 = _660 + 0.039999999105930328369140625;
    vec4 _673 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _599, cbSceneParam._m0[86u].y * _600));
    float _677 = ((isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0))) * TEXCOORD_5.w) * _673.x;
    float _678 = dot(vec3(_511, _512, _513), vec3(_591, _592, _593));
    float _681 = _678 * 2.0;
    float _685 = (_681 * _511) - _591;
    float _686 = (_681 * _512) - _592;
    float _687 = (_681 * _513) - _593;
    float _691 = abs(dot(vec3(_591, _592, _593), vec3(_511, _512, _513)));
    float _3502 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _693 = sqrt(_514);
    float _706 = exp2((_693 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_693 * 3.0));
    float _712 = (1.0 - _706) * ((_693 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _713 = _706 * _693;
    float _741 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _745 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _749 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1050;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _775 = fma(_749, cbModelParam._m0[26u].z, fma(_745, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _741));
        float _779 = fma(_749, cbModelParam._m0[27u].z, fma(_745, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _741));
        float _783 = fma(_749, cbModelParam._m0[28u].z, fma(_745, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _741));
        float _808 = _741 + _511;
        float _809 = _745 + _512;
        float _810 = _749 + _513;
        float _820 = fma(_810, cbModelParam._m0[26u].z, fma(_809, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _808)) - _775;
        float _821 = fma(_810, cbModelParam._m0[27u].z, fma(_809, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _808)) - _779;
        float _822 = fma(_810, cbModelParam._m0[28u].z, fma(_809, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _808)) - _783;
        float _826 = inversesqrt(dot(vec3(_820, _821, _822), vec3(_820, _821, _822)));
        float _839 = ((_826 * _820) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_775 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _840 = ((_826 * _821) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_779 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _841 = ((_826 * _822) / cbModelParam._m0[34u].z) + ((((((_783 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _844 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        vec4 _851 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        vec4 _865 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        float _878 = exp2((_844.w + (-0.5)) * 20.0) * 2.0;
        float _879 = _878 * (_844.x + (-0.5));
        float _880 = _878 * (_844.y + (-0.5));
        float _881 = _878 * (_844.z + (-0.5));
        float _888 = exp2((_851.w + (-0.5)) * 20.0) * 2.0;
        float _889 = _888 * (_851.x + (-0.5));
        float _890 = _888 * (_851.y + (-0.5));
        float _891 = _888 * (_851.z + (-0.5));
        float _898 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_858.x + (-0.5));
        float _900 = _898 * (_858.y + (-0.5));
        float _901 = _898 * (_858.z + (-0.5));
        float _908 = exp2((_865.w + (-0.5)) * 20.0) * 2.0;
        float _909 = _908 * (_865.x + (-0.5));
        float _910 = _908 * (_865.y + (-0.5));
        float _911 = _908 * (_865.z + (-0.5));
        float _912 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _913 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _914 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _915 = _879 * 0.5;
        float _916 = _889 * 0.5;
        float _917 = _899 * 0.5;
        float _918 = dot(vec3(_915, _916, _917), vec3(_915, _916, _917));
        float _923 = (_918 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_918);
        float _932 = (dot(vec3(_511, _512, _513), vec3(_923 * _915, _923 * _916, _923 * _917)) + 1.0) * 0.5;
        float _3528 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _942 = sqrt(((_916 * _916) + (_915 * _915)) + (_917 * _917)) / (_912 + 9.9999997473787516355514526367188e-06);
        float _3539 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
        float _944 = _943 * 2.0;
        float _948 = (1.0 - _943) / (_943 + 1.0);
        float _3550 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _958 = ((((1.0 - _949) * (_944 + 2.0)) * exp2(log2(isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0))) * (_944 + 1.0))) + _949) * _912;
        float _959 = _880 * 0.5;
        float _960 = _890 * 0.5;
        float _961 = _900 * 0.5;
        float _962 = dot(vec3(_959, _960, _961), vec3(_959, _960, _961));
        float _967 = (_962 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_962);
        float _975 = (dot(vec3(_511, _512, _513), vec3(_967 * _959, _967 * _960, _967 * _961)) + 1.0) * 0.5;
        float _3561 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _984 = sqrt(((_960 * _960) + (_959 * _959)) + (_961 * _961)) / (_913 + 9.9999997473787516355514526367188e-06);
        float _3572 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
        float _986 = _985 * 2.0;
        float _990 = (1.0 - _985) / (_985 + 1.0);
        float _3583 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _991 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
        float _1000 = ((((1.0 - _991) * (_986 + 2.0)) * exp2(log2(isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0))) * (_986 + 1.0))) + _991) * _913;
        float _1001 = _881 * 0.5;
        float _1002 = _891 * 0.5;
        float _1003 = _901 * 0.5;
        float _1004 = dot(vec3(_1001, _1002, _1003), vec3(_1001, _1002, _1003));
        float _1009 = (_1004 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1004);
        float _1017 = (dot(vec3(_511, _512, _513), vec3(_1009 * _1001, _1009 * _1002, _1009 * _1003)) + 1.0) * 0.5;
        float _3594 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1026 = sqrt(((_1002 * _1002) + (_1001 * _1001)) + (_1003 * _1003)) / (_914 + 9.9999997473787516355514526367188e-06);
        float _3605 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
        float _1028 = _1027 * 2.0;
        float _1032 = (1.0 - _1027) / (_1027 + 1.0);
        float _3616 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _1042 = ((((1.0 - _1033) * (_1028 + 2.0)) * exp2(log2(isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0))) * (_1028 + 1.0))) + _1033) * _914;
        _1050 = _881;
        _1052 = _880;
        _1053 = _879;
        _1054 = _891;
        _1055 = _890;
        _1056 = _889;
        _1057 = _901;
        _1058 = _900;
        _1059 = _899;
        _1060 = _914;
        _1061 = _913;
        _1062 = _912;
        _1063 = cbModelParam._m0[36u].z * (isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0)));
        _1064 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0)));
        _1065 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0)));
    }
    else
    {
        _1050 = _1051;
        _1052 = _1051;
        _1053 = _1051;
        _1054 = _1051;
        _1055 = _1051;
        _1056 = _1051;
        _1057 = _1051;
        _1058 = _1051;
        _1059 = _1051;
        _1060 = _1051;
        _1061 = _1051;
        _1062 = _1051;
        _1063 = 0.0;
        _1064 = 0.0;
        _1065 = 0.0;
    }
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1090 = fma(_749, cbModelParam._m0[30u].z, fma(_745, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _741));
        float _1094 = fma(_749, cbModelParam._m0[31u].z, fma(_745, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _741));
        float _1098 = fma(_749, cbModelParam._m0[32u].z, fma(_745, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _741));
        float _1121 = _741 + _511;
        float _1122 = _745 + _512;
        float _1123 = _749 + _513;
        float _1133 = fma(_1123, cbModelParam._m0[30u].z, fma(_1122, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1121)) - _1090;
        float _1134 = fma(_1123, cbModelParam._m0[31u].z, fma(_1122, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1121)) - _1094;
        float _1135 = fma(_1123, cbModelParam._m0[32u].z, fma(_1122, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1121)) - _1098;
        float _1139 = inversesqrt(dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135)));
        float _1152 = ((_1139 * _1133) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1090 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1153 = ((_1139 * _1134) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1094 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1154 = ((_1139 * _1135) / cbModelParam._m0[35u].z) + ((((((_1098 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        float _1189 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1156.x + (-0.5));
        float _1191 = _1189 * (_1156.y + (-0.5));
        float _1192 = _1189 * (_1156.z + (-0.5));
        float _1199 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1163.x + (-0.5));
        float _1201 = _1199 * (_1163.y + (-0.5));
        float _1202 = _1199 * (_1163.z + (-0.5));
        float _1209 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1170.x + (-0.5));
        float _1211 = _1209 * (_1170.y + (-0.5));
        float _1212 = _1209 * (_1170.z + (-0.5));
        float _1219 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1177.x + (-0.5));
        float _1221 = _1219 * (_1177.y + (-0.5));
        float _1222 = _1219 * (_1177.z + (-0.5));
        float _1223 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1224 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = _1190 * 0.5;
        float _1227 = _1200 * 0.5;
        float _1228 = _1210 * 0.5;
        float _1229 = dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228));
        float _1234 = (_1229 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1229);
        float _1242 = (dot(vec3(_511, _512, _513), vec3(_1234 * _1226, _1234 * _1227, _1234 * _1228)) + 1.0) * 0.5;
        float _3657 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1251 = sqrt(((_1227 * _1227) + (_1226 * _1226)) + (_1228 * _1228)) / (_1223 + 9.9999997473787516355514526367188e-06);
        float _3668 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _3679 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0))) * (_1253 + 1.0))) + _1258) * _1223;
        float _1268 = _1191 * 0.5;
        float _1269 = _1201 * 0.5;
        float _1270 = _1211 * 0.5;
        float _1271 = dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270));
        float _1276 = (_1271 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1271);
        float _1284 = (dot(vec3(_511, _512, _513), vec3(_1276 * _1268, _1276 * _1269, _1276 * _1270)) + 1.0) * 0.5;
        float _3690 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1293 = sqrt(((_1269 * _1269) + (_1268 * _1268)) + (_1270 * _1270)) / (_1224 + 9.9999997473787516355514526367188e-06);
        float _3701 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _1295 = _1294 * 2.0;
        float _1299 = (1.0 - _1294) / (_1294 + 1.0);
        float _3712 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1309 = ((((1.0 - _1300) * (_1295 + 2.0)) * exp2(log2(isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))) * (_1295 + 1.0))) + _1300) * _1224;
        float _1310 = _1192 * 0.5;
        float _1311 = _1202 * 0.5;
        float _1312 = _1212 * 0.5;
        float _1313 = dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312));
        float _1318 = (_1313 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1313);
        float _1326 = (dot(vec3(_511, _512, _513), vec3(_1318 * _1310, _1318 * _1311, _1318 * _1312)) + 1.0) * 0.5;
        float _3723 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1335 = sqrt(((_1311 * _1311) + (_1310 * _1310)) + (_1312 * _1312)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _3734 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1337 = _1336 * 2.0;
        float _1341 = (1.0 - _1336) / (_1336 + 1.0);
        float _3745 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1351 = ((((1.0 - _1342) * (_1337 + 2.0)) * exp2(log2(isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * (_1337 + 1.0))) + _1342) * _1225;
        _1359 = _1192;
        _1360 = _1191;
        _1361 = _1190;
        _1362 = _1202;
        _1363 = _1201;
        _1364 = _1200;
        _1365 = _1212;
        _1366 = _1211;
        _1367 = _1210;
        _1368 = _1225;
        _1369 = _1224;
        _1370 = _1223;
        _1371 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
        _1372 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)));
        _1373 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)));
    }
    else
    {
        _1359 = _1051;
        _1360 = _1051;
        _1361 = _1051;
        _1362 = _1051;
        _1363 = _1051;
        _1364 = _1051;
        _1365 = _1051;
        _1366 = _1051;
        _1367 = _1051;
        _1368 = _1051;
        _1369 = _1051;
        _1370 = _1051;
        _1371 = 0.0;
        _1372 = 0.0;
        _1373 = 0.0;
    }
    float _1383 = (cbModelParam._m0[1u].x * (_1371 - _1063)) + _1063;
    float _1384 = (cbModelParam._m0[1u].x * (_1372 - _1064)) + _1064;
    float _1385 = (cbModelParam._m0[1u].x * (_1373 - _1065)) + _1065;
    float _1406 = fma(_1385, cbSceneParam._m0[89u].z, fma(_1384, cbSceneParam._m0[89u].y, _1383 * cbSceneParam._m0[89u].x));
    float _1409 = fma(_1385, cbSceneParam._m0[90u].z, fma(_1384, cbSceneParam._m0[90u].y, _1383 * cbSceneParam._m0[90u].x));
    float _1412 = fma(_1385, cbSceneParam._m0[91u].z, fma(_1384, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1383));
    float _1427 = _685 * 0.5;
    float _1428 = _686 * 0.5;
    float _1429 = _687 * 0.5;
    float _1430 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1361, _1364, _1367, _1370));
    float _1433 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1360, _1363, _1366, _1369));
    float _1436 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1359, _1362, _1365, _1368));
    float _1470;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1443 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1050, _1054, _1057, _1060));
        float _1447 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1052, _1055, _1058, _1061));
        float _1451 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1053, _1056, _1059, _1062));
        float _1458 = dot(vec4(cbModelParam._m0[39u]), vec4(_1427, _1428, _1429, 1.0));
        _1470 = dot(vec3(isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)), isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)), isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1458) ? 0.0 : (isnan(0.0) ? _1458 : max(0.0, _1458))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1470 = 1.0;
    }
    float _1481;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1472 = dot(vec4(cbModelParam._m0[40u]), vec4(_1427, _1428, _1429, 1.0));
        _1481 = dot(vec3(isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)), isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)), isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1472) ? 0.0 : (isnan(0.0) ? _1472 : max(0.0, _1472))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1481 = 1.0;
    }
    float _1485 = (_1481 * cbModelParam._m0[1u].x) + (_1470 * (1.0 - cbModelParam._m0[1u].x));
    float _1495 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _514);
    float _1496 = isnan(_1495) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1495 : min(cbModelParam._m0[25u].z, _1495));
    float _1578;
    float _1580;
    float _1582;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1545 = fma(_749, cbModelParam._m0[13u].z, fma(_745, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _741)) + cbModelParam._m0[13u].w;
        float _1549 = fma(_749, cbModelParam._m0[14u].z, fma(_745, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _741)) + cbModelParam._m0[14u].w;
        float _1553 = fma(_749, cbModelParam._m0[15u].z, fma(_745, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _741)) + cbModelParam._m0[15u].w;
        float _1556 = fma(_687, cbModelParam._m0[13u].z, fma(_686, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _685));
        float _1559 = fma(_687, cbModelParam._m0[14u].z, fma(_686, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _685));
        float _1562 = fma(_687, cbModelParam._m0[15u].z, fma(_686, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _685));
        float _1590;
        if (_1556 > 0.0)
        {
            _1590 = abs((1.0 - _1545) / _1556);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1556 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1545 + 1.0) / _1556);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1590 = frontier_phi_14_12_ladder;
        }
        float _1794;
        if (_1559 > 0.0)
        {
            _1794 = abs((1.0 - _1549) / _1559);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1559 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1549 + 1.0) / _1559);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1794 = frontier_phi_23_19_ladder;
        }
        float _2048;
        if (_1562 > 0.0)
        {
            _2048 = abs((1.0 - _1553) / _1562);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1562 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1553 + 1.0) / _1562);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2048 = frontier_phi_35_30_ladder;
        }
        float _2050 = isnan(_1794) ? _1590 : (isnan(_1590) ? _1794 : min(_1590, _1794));
        float _2051 = isnan(_2048) ? _2050 : (isnan(_2050) ? _2048 : min(_2050, _2048));
        float _2055 = (_2051 * _1556) + _1545;
        float _2056 = (_2051 * _1559) + _1549;
        float _2057 = (_2051 * _1562) + _1553;
        float _2058 = _2051 * 9.9999997473787516355514526367188e-05;
        float _2060 = (-1.0) - _2058;
        float _2062 = _2058 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2057 > _2062) || ((_2057 < _2060) || ((_2056 > _2062) || ((_2056 < _2060) || ((_2055 < _2060) || (_2055 > _2062))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2185 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2057, cbModelParam._m0[9u].z, fma(_2056, cbModelParam._m0[9u].y, _2055 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2057, cbModelParam._m0[10u].z, fma(_2056, cbModelParam._m0[10u].y, _2055 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2057, cbModelParam._m0[11u].z, fma(_2056, cbModelParam._m0[11u].y, _2055 * cbModelParam._m0[11u].x))), _1496);
            frontier_phi_13_35_ladder = _2185.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2185.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2185.x * cbModelParam._m0[1u].y;
        }
        _1578 = frontier_phi_13_35_ladder_2;
        _1580 = frontier_phi_13_35_ladder_1;
        _1582 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1566 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_685, _686, _687), _1496);
        _1578 = _1566.x * cbModelParam._m0[1u].y;
        _1580 = _1566.y * cbModelParam._m0[1u].y;
        _1582 = _1566.z * cbModelParam._m0[1u].y;
    }
    float _1586 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _514);
    float _1587 = isnan(_1586) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1586 : min(cbModelParam._m0[25u].w, _1586));
    float _1678;
    float _1680;
    float _1682;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1642 = fma(_749, cbModelParam._m0[21u].z, fma(_745, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _741)) + cbModelParam._m0[21u].w;
        float _1646 = fma(_749, cbModelParam._m0[22u].z, fma(_745, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _741)) + cbModelParam._m0[22u].w;
        float _1650 = fma(_749, cbModelParam._m0[23u].z, fma(_745, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _741)) + cbModelParam._m0[23u].w;
        float _1653 = fma(_687, cbModelParam._m0[21u].z, fma(_686, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _685));
        float _1656 = fma(_687, cbModelParam._m0[22u].z, fma(_686, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _685));
        float _1659 = fma(_687, cbModelParam._m0[23u].z, fma(_686, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _685));
        float _1799;
        if (_1653 > 0.0)
        {
            _1799 = abs((1.0 - _1642) / _1653);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1642 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1799 = frontier_phi_25_21_ladder;
        }
        float _2075;
        if (_1656 > 0.0)
        {
            _2075 = abs((1.0 - _1646) / _1656);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1656 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1646 + 1.0) / _1656);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2075 = frontier_phi_37_32_ladder;
        }
        float _2288;
        if (_1659 > 0.0)
        {
            _2288 = abs((1.0 - _1650) / _1659);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1659 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1650 + 1.0) / _1659);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2288 = frontier_phi_46_43_ladder;
        }
        float _2290 = isnan(_2075) ? _1799 : (isnan(_1799) ? _2075 : min(_1799, _2075));
        float _2291 = isnan(_2288) ? _2290 : (isnan(_2290) ? _2288 : min(_2290, _2288));
        float _2295 = (_2291 * _1653) + _1642;
        float _2296 = (_2291 * _1656) + _1646;
        float _2297 = (_2291 * _1659) + _1650;
        float _2298 = _2291 * 9.9999997473787516355514526367188e-05;
        float _2299 = (-1.0) - _2298;
        float _2301 = _2298 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2297 > _2301) || ((_2297 < _2299) || ((_2296 > _2301) || ((_2296 < _2299) || ((_2295 < _2299) || (_2295 > _2301))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2496 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2297, cbModelParam._m0[17u].z, fma(_2296, cbModelParam._m0[17u].y, _2295 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2297, cbModelParam._m0[18u].z, fma(_2296, cbModelParam._m0[18u].y, _2295 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2297, cbModelParam._m0[19u].z, fma(_2296, cbModelParam._m0[19u].y, _2295 * cbModelParam._m0[19u].x))), _1587);
            frontier_phi_22_46_ladder = _2496.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2496.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2496.x * cbModelParam._m0[1u].z;
        }
        _1678 = frontier_phi_22_46_ladder_2;
        _1680 = frontier_phi_22_46_ladder_1;
        _1682 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1662 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_685, _686, _687), _1587);
        _1678 = _1662.x * cbModelParam._m0[1u].z;
        _1680 = _1662.y * cbModelParam._m0[1u].z;
        _1682 = _1662.z * cbModelParam._m0[1u].z;
    }
    float _1695 = (((_712 * _661) + _713) * _677) * ((cbModelParam._m0[1u].w * (_1678 - _1578)) + _1578);
    float _1697 = (((_712 * _663) + _713) * _677) * ((cbModelParam._m0[1u].w * (_1680 - _1580)) + _1580);
    float _1699 = (((_712 * _664) + _713) * _677) * ((cbModelParam._m0[1u].w * (_1682 - _1582)) + _1582);
    float _1702 = fma(_1699, cbSceneParam._m0[89u].z, fma(_1697, cbSceneParam._m0[89u].y, _1695 * cbSceneParam._m0[89u].x));
    float _1705 = fma(_1699, cbSceneParam._m0[90u].z, fma(_1697, cbSceneParam._m0[90u].y, _1695 * cbSceneParam._m0[90u].x));
    float _1708 = fma(_1699, cbSceneParam._m0[91u].z, fma(_1697, cbSceneParam._m0[91u].y, _1695 * cbSceneParam._m0[91u].x));
    uvec4 _1718 = floatBitsToUint(cbInstanceData._m0[_228 + 5u]);
    uint _1720 = _1718.x * 14u;
    uint _1721 = _1720 + 13u;
    float _1728 = _677 + (-1.0);
    float _1733 = (cbLight._m0[_1721].x * _1728) + 1.0;
    float _1734 = (cbLight._m0[_1721].y * _1728) + 1.0;
    float _1735 = (cbLight._m0[_1721].z * _1728) + 1.0;
    float _1736 = (cbLight._m0[_1721].w * _1728) + 1.0;
    uint _1737 = _1720 + 5u;
    float _1743 = isnan(1.0) ? _1734 : (isnan(_1734) ? 1.0 : min(_1734, 1.0));
    uint _1747 = _1720 + 4u;
    float _1753 = isnan(1.0) ? _1733 : (isnan(_1733) ? 1.0 : min(_1733, 1.0));
    uint _1757 = _1720 | 1u;
    float _1768 = dot(vec3(cbLight._m0[_1720].xyz), vec3(_511, _512, _513));
    float _1771 = dot(vec3(cbLight._m0[_1757].xyz), vec3(_511, _512, _513));
    float _3881 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
    float _3892 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _1776 = (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * 0.3183098733425140380859375;
    float _1778 = (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * 0.3183098733425140380859375;
    float _1785 = ((cbLight._m0[_1737].x * _1743) * _1778) + ((cbLight._m0[_1747].x * _1753) * _1776);
    float _1786 = ((_1743 * cbLight._m0[_1737].y) * _1778) + ((_1753 * cbLight._m0[_1747].y) * _1776);
    float _1787 = ((_1743 * cbLight._m0[_1737].z) * _1778) + ((_1753 * cbLight._m0[_1747].z) * _1776);
    uvec4 _1791 = floatBitsToUint(cbLight._m0[_1720 + 12u]);
    bool _1793 = _1791.x == 0u;
    float _1804;
    float _1806;
    float _1808;
    if (_1793)
    {
        _1804 = _1785;
        _1806 = _1786;
        _1808 = _1787;
    }
    else
    {
        uint _1812 = _1720 + 6u;
        float _1828 = (dot(vec3(cbLight._m0[_1720 + 2u].xyz), vec3(_511, _512, _513)) * 0.5) + 0.5;
        float _1829 = _1828 * _1828;
        float _3903 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
        float _1830 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1831 = isnan(1.0) ? _1735 : (isnan(_1735) ? 1.0 : min(_1735, 1.0));
        _1804 = (((cbLight._m0[_1812].x * 0.3183098733425140380859375) * _1830) * _1831) + _1785;
        _1806 = (((cbLight._m0[_1812].y * 0.3183098733425140380859375) * _1830) * _1831) + _1786;
        _1808 = (((cbLight._m0[_1812].z * 0.3183098733425140380859375) * _1830) * _1831) + _1787;
    }
    bool _1811 = _1791.y == 0u;
    float _1849;
    float _1851;
    float _1853;
    if (_1811)
    {
        _1849 = _1804;
        _1851 = _1806;
        _1853 = _1808;
    }
    else
    {
        uint _2019 = _1720 + 7u;
        float _2035 = (dot(vec3(cbLight._m0[_1720 + 3u].xyz), vec3(_511, _512, _513)) * 0.5) + 0.5;
        float _2036 = _2035 * _2035;
        float _3919 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
        float _2037 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _2038 = isnan(1.0) ? _1736 : (isnan(_1736) ? 1.0 : min(_1736, 1.0));
        _1849 = (((cbLight._m0[_2019].x * 0.3183098733425140380859375) * _2037) * _2038) + _1804;
        _1851 = (((cbLight._m0[_2019].y * 0.3183098733425140380859375) * _2037) * _2038) + _1806;
        _1853 = (((cbLight._m0[_2019].z * 0.3183098733425140380859375) * _2037) * _2038) + _1808;
    }
    uint _1856 = _1720 + 8u;
    float _1869 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1720].w)) * _514) * 0.949999988079071044921875);
    float _1870 = _1869 * _1869;
    float _1871 = cbLight._m0[_1720].x + _591;
    float _1872 = cbLight._m0[_1720].y + _592;
    float _1873 = cbLight._m0[_1720].z + _593;
    float _1877 = inversesqrt(dot(vec3(_1871, _1872, _1873), vec3(_1871, _1872, _1873)));
    float _1878 = _1877 * _1871;
    float _1879 = _1877 * _1872;
    float _1880 = _1877 * _1873;
    float _1881 = dot(vec3(_511, _512, _513), vec3(cbLight._m0[_1720].xyz));
    float _3935 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
    float _1884 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _3946 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _1885 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _1886 = dot(vec3(_511, _512, _513), vec3(_1878, _1879, _1880));
    float _3957 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _1889 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _1890 = dot(vec3(cbLight._m0[_1720].xyz), vec3(_1878, _1879, _1880));
    float _3968 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1894 = _1870 * _1870;
    float _1898 = ((_1889 * _1889) * (_1894 + (-1.0))) + 1.0;
    float _1906 = exp2(log2(1.0 - (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0)))) * 5.0);
    float _1907 = 0.959999978542327880859375 - _658;
    float _1909 = 0.959999978542327880859375 - _659;
    float _1910 = 0.959999978542327880859375 - _660;
    float _1917 = 1.0 - _1870;
    float _1928 = (0.5 / (((_1885 * ((_1884 * _1917) + _1870)) + 9.9999999392252902907785028219223e-09) + (((_1885 * _1917) + _1870) * _1884))) * _1884;
    float _3979 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1930 = (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * (_1894 / ((_1898 * _1898) * 3.141590118408203125));
    uint _1941 = _1720 + 9u;
    float _1952 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1757].w)) * _514) * 0.949999988079071044921875);
    float _1953 = _1952 * _1952;
    float _1954 = cbLight._m0[_1757].x + _591;
    float _1955 = cbLight._m0[_1757].y + _592;
    float _1956 = cbLight._m0[_1757].z + _593;
    float _1960 = inversesqrt(dot(vec3(_1954, _1955, _1956), vec3(_1954, _1955, _1956)));
    float _1961 = _1960 * _1954;
    float _1962 = _1960 * _1955;
    float _1963 = _1960 * _1956;
    float _1964 = dot(vec3(_511, _512, _513), vec3(cbLight._m0[_1757].xyz));
    float _3990 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _1967 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _1968 = dot(vec3(_511, _512, _513), vec3(_1961, _1962, _1963));
    float _4001 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1971 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _1972 = dot(vec3(cbLight._m0[_1757].xyz), vec3(_1961, _1962, _1963));
    float _4012 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1976 = _1953 * _1953;
    float _1980 = ((_1971 * _1971) * (_1976 + (-1.0))) + 1.0;
    float _1987 = exp2(log2(1.0 - (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) * 5.0);
    float _1994 = 1.0 - _1953;
    float _2004 = (0.5 / (((_1885 * ((_1967 * _1994) + _1953)) + 9.9999999392252902907785028219223e-09) + (((_1885 * _1994) + _1953) * _1967))) * _1967;
    float _4023 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2006 = (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_1976 / ((_1980 * _1980) * 3.141590118408203125));
    float _2016 = (((((_1987 * _1907) + _661) * cbLight._m0[_1941].x) * _2006) * _1743) + (((((_1906 * _1907) + _661) * cbLight._m0[_1856].x) * _1930) * _1753);
    float _2017 = (((((_1987 * _1909) + _663) * cbLight._m0[_1941].y) * _2006) * _1743) + (((((_1906 * _1909) + _663) * cbLight._m0[_1856].y) * _1930) * _1753);
    float _2018 = (((((_1987 * _1910) + _664) * cbLight._m0[_1941].z) * _2006) * _1743) + (((((_1906 * _1910) + _664) * cbLight._m0[_1856].z) * _1930) * _1753);
    float _2080;
    float _2082;
    float _2084;
    if (_1793)
    {
        _2080 = _2016;
        _2082 = _2017;
        _2084 = _2018;
    }
    else
    {
        uint _2086 = _1720 + 2u;
        uint _2090 = _1720 + 10u;
        float _2104 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2086].w)) * _514) * 0.949999988079071044921875);
        float _2105 = _2104 * _2104;
        float _2106 = cbLight._m0[_2086].x + _591;
        float _2107 = cbLight._m0[_2086].y + _592;
        float _2108 = cbLight._m0[_2086].z + _593;
        float _2112 = inversesqrt(dot(vec3(_2106, _2107, _2108), vec3(_2106, _2107, _2108)));
        float _2113 = _2112 * _2106;
        float _2114 = _2112 * _2107;
        float _2115 = _2112 * _2108;
        float _2116 = dot(vec3(_511, _512, _513), vec3(cbLight._m0[_2086].xyz));
        float _4034 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
        float _2119 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _2120 = dot(vec3(_511, _512, _513), vec3(_2113, _2114, _2115));
        float _4045 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2123 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _2124 = dot(vec3(cbLight._m0[_2086].xyz), vec3(_2113, _2114, _2115));
        float _4056 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        float _2128 = _2105 * _2105;
        float _2132 = ((_2123 * _2123) * (_2128 + (-1.0))) + 1.0;
        float _2139 = exp2(log2(1.0 - (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) * 5.0);
        float _2146 = 1.0 - _2105;
        float _2156 = (0.5 / (((_1885 * ((_2119 * _2146) + _2105)) + 9.9999999392252902907785028219223e-09) + (((_1885 * _2146) + _2105) * _2119))) * _2119;
        float _4067 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        float _2158 = (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * (_2128 / ((_2132 * _2132) * 3.141590118408203125));
        float _2159 = isnan(1.0) ? _1735 : (isnan(_1735) ? 1.0 : min(_1735, 1.0));
        _2080 = (((((_2139 * _1907) + _661) * cbLight._m0[_2090].x) * _2158) * _2159) + _2016;
        _2082 = (((((_2139 * _1909) + _663) * cbLight._m0[_2090].y) * _2158) * _2159) + _2017;
        _2084 = (((((_2139 * _1910) + _664) * cbLight._m0[_2090].z) * _2158) * _2159) + _2018;
    }
    float _2194;
    float _2196;
    float _2198;
    if (_1811)
    {
        _2194 = _2080;
        _2196 = _2082;
        _2198 = _2084;
    }
    else
    {
        uint _2205 = _1720 + 3u;
        uint _2209 = _1720 + 11u;
        float _2223 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2205].w)) * _514) * 0.949999988079071044921875);
        float _2224 = _2223 * _2223;
        float _2225 = cbLight._m0[_2205].x + _591;
        float _2226 = cbLight._m0[_2205].y + _592;
        float _2227 = cbLight._m0[_2205].z + _593;
        float _2231 = inversesqrt(dot(vec3(_2225, _2226, _2227), vec3(_2225, _2226, _2227)));
        float _2232 = _2231 * _2225;
        float _2233 = _2231 * _2226;
        float _2234 = _2231 * _2227;
        float _2235 = dot(vec3(_511, _512, _513), vec3(cbLight._m0[_2205].xyz));
        float _4083 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2238 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _2239 = dot(vec3(_511, _512, _513), vec3(_2232, _2233, _2234));
        float _4094 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2242 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _2243 = dot(vec3(cbLight._m0[_2205].xyz), vec3(_2232, _2233, _2234));
        float _4105 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2247 = _2224 * _2224;
        float _2251 = ((_2242 * _2242) * (_2247 + (-1.0))) + 1.0;
        float _2258 = exp2(log2(1.0 - (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0)))) * 5.0);
        float _2265 = 1.0 - _2224;
        float _2275 = (0.5 / (((_1885 * ((_2238 * _2265) + _2224)) + 9.9999999392252902907785028219223e-09) + (((_1885 * _2265) + _2224) * _2238))) * _2238;
        float _4116 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2277 = (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_2247 / ((_2251 * _2251) * 3.141590118408203125));
        float _2278 = isnan(1.0) ? _1736 : (isnan(_1736) ? 1.0 : min(_1736, 1.0));
        _2194 = (((((_2258 * _1907) + _661) * cbLight._m0[_2209].x) * _2277) * _2278) + _2080;
        _2196 = (((((_2258 * _1909) + _663) * cbLight._m0[_2209].y) * _2277) * _2278) + _2082;
        _2198 = (((((_2258 * _1910) + _664) * cbLight._m0[_2209].z) * _2277) * _2278) + _2084;
    }
    float _2413;
    float _2415;
    float _2417;
    float _2419;
    float _2421;
    float _2423;
    if (_1718.y == 0u)
    {
        float _2353 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2354 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2353;
        float _2355 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2353;
        float _2356 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2353;
        uvec4 _2368 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2369 = _2368.x;
        uint _2380 = uint((float(_2368.y) * floor(float(uint(cbSceneParam._m0[85u].y * _600) / _2369))) + floor(float(uint(cbSceneParam._m0[85u].x * _599) / _2369)));
        float _2390 = (log2(_2356 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2391 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        uint _2394 = uint(isnan(14.0) ? _2391 : (isnan(_2391) ? 14.0 : min(_2391, 14.0)));
        uvec4 _2399 = texelFetch(g_lightClusterGridBuffer, int(((_2394 << 2u) + (_2380 << 6u)) >> 2u));
        uint _2400 = _2399.x;
        uint _2401 = _2368.z;
        float _2501;
        float _2503;
        float _2505;
        float _2507;
        float _2509;
        float _2511;
        if (((((1u << ((_2401 >> 4u) & 15u)) + 4294967295u) & _2400) == 0u) || ((_2401 & 240u) == 0u))
        {
            _2501 = 0.0;
            _2503 = 0.0;
            _2505 = 0.0;
            _2507 = 0.0;
            _2509 = 0.0;
            _2511 = 0.0;
        }
        else
        {
            float _2502;
            float _2504;
            float _2506;
            float _2508;
            float _2510;
            float _2512;
            float _2646 = 0.0;
            float _2647 = 0.0;
            float _2648 = 0.0;
            float _2649 = 0.0;
            float _2650 = 0.0;
            float _2651 = 0.0;
            uint _2652 = 0u;
            uint _2661;
            bool _2662;
            for (;;)
            {
                _2661 = texelFetch(g_lightClassification, int((((_2394 << 5u) + (_2380 << 9u)) + (_2652 << 2u)) >> 2u)).x;
                _2662 = _2661 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2662)
                {
                    frontier_phi_61_pred = _2646;
                    frontier_phi_61_pred_1 = _2651;
                    frontier_phi_61_pred_2 = _2650;
                    frontier_phi_61_pred_3 = _2649;
                    frontier_phi_61_pred_4 = _2648;
                    frontier_phi_61_pred_5 = _2647;
                }
                else
                {
                    float _2770;
                    float _2771;
                    float _2772;
                    float _2773;
                    float _2774;
                    float _2775;
                    uint _2776;
                    _2770 = _2646;
                    _2771 = _2647;
                    _2772 = _2648;
                    _2773 = _2649;
                    _2774 = _2650;
                    _2775 = _2651;
                    _2776 = _2661;
                    float _2702;
                    float _2703;
                    float _2704;
                    float _2705;
                    float _2706;
                    float _2707;
                    for (;;)
                    {
                        uint _2780 = uint(findLSB(_2776)) + (_2652 << 5u);
                        uint _2777 = (_2776 + 4294967295u) & _2776;
                        uint _2782 = _2780 * 48u;
                        vec4 _2796 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2782)).x, texelFetch(g_PointLightRenderingBuffer, int(_2782 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2782 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2782 + 3u)).x));
                        uint _2802 = (_2780 * 48u) + 4u;
                        vec4 _2815 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2802)).x, texelFetch(g_PointLightRenderingBuffer, int(_2802 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2802 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2802 + 3u)).x));
                        uint _2821 = (_2780 * 48u) + 8u;
                        vec3 _2832 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2821)).x, texelFetch(g_PointLightRenderingBuffer, int(_2821 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2821 + 2u)).x));
                        float _2836 = _2796.x - _2354;
                        float _2837 = _2796.y - _2355;
                        float _2838 = _2796.z - _2356;
                        float _2839 = dot(vec3(_2836, _2837, _2838), vec3(_2836, _2837, _2838));
                        float _2842 = inversesqrt(_2839);
                        float _2843 = _2842 * _2836;
                        float _2844 = _2842 * _2837;
                        float _2845 = _2842 * _2838;
                        float _2846 = dot(vec3(_618, _621, _624), vec3(_2843, _2844, _2845));
                        float _2851 = 1.0 - (_2839 * _2796.w);
                        float _4142 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
                        float _2852 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
                        float _2853 = sqrt(_2839) * _2815.w;
                        float _2856 = 1.39999997615814208984375 / (_2853 + 1.39999997615814208984375);
                        float _2857 = _2856 * _2856;
                        float _2860 = ((1.0 - _2857) * _2846) + _2857;
                        float _2863 = _2853 * _2853;
                        float _2867 = ((isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0))) * _2852) / ((_2863 * 0.699999988079071044921875) + 1.0);
                        float _2871 = (-0.0) - _2354;
                        float _2872 = (-0.0) - _2355;
                        float _2873 = (-0.0) - _2356;
                        float _2877 = inversesqrt(dot(vec3(_2871, _2872, _2873), vec3(_2871, _2872, _2873)));
                        float _2878 = _2877 * _2871;
                        float _2879 = _2877 * _2872;
                        float _2880 = _2877 * _2873;
                        float _2888 = exp2(log2(1.0 / ((_2863 * 3.5) + 5.0)) * 0.25);
                        float _2889 = 1.0 - _693;
                        float _2896 = sqrt(1.0 - ((1.0 - (_2889 * _2889)) * (1.0 - (_2888 * _2888))));
                        float _2897 = _2896 * _2896;
                        float _2898 = _2897 * _2897;
                        float _2899 = _2878 + _2843;
                        float _2900 = _2879 + _2844;
                        float _2901 = _2880 + _2845;
                        float _2905 = inversesqrt(dot(vec3(_2899, _2900, _2901), vec3(_2899, _2900, _2901)));
                        float _2909 = dot(vec3(_618, _621, _624), vec3(_2878, _2879, _2880));
                        float _4158 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
                        float _2912 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
                        float _2913 = dot(vec3(_618, _621, _624), vec3(_2905 * _2899, _2905 * _2900, _2905 * _2901));
                        float _4169 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
                        float _2916 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
                        float _2920 = ((_2916 * _2916) * (_2898 + (-1.0))) + 1.0;
                        float _2921 = _2856 * _2897;
                        float _2922 = _2921 * _2921;
                        float _2925 = ((1.0 - _2922) * _2846) + _2922;
                        float _4180 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
                        float _2926 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
                        float _2927 = 1.0 - _2897;
                        float _2937 = (0.5 / (((_2926 * ((_2912 * _2927) + _2897)) + 9.9999999392252902907785028219223e-09) + (((_2926 * _2927) + _2897) * _2912))) * _2926;
                        float _4191 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
                        float _2948 = (((_2898 * 3.1415927410125732421875) * (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0)))) / ((_2920 * _2920) * ((_2863 * 2.1991131305694580078125) + 3.141590118408203125))) * _2852;
                        _2705 = (_2867 * _2815.x) + _2773;
                        _2706 = (_2867 * _2815.y) + _2774;
                        _2707 = (_2867 * _2815.z) + _2775;
                        _2702 = (_2948 * _2832.x) + _2770;
                        _2703 = (_2948 * _2832.y) + _2771;
                        _2704 = (_2948 * _2832.z) + _2772;
                        if (_2777 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2770 = _2702;
                            _2771 = _2703;
                            _2772 = _2704;
                            _2773 = _2705;
                            _2774 = _2706;
                            _2775 = _2707;
                            _2776 = _2777;
                        }
                    }
                    frontier_phi_61_pred = _2702;
                    frontier_phi_61_pred_1 = _2707;
                    frontier_phi_61_pred_2 = _2706;
                    frontier_phi_61_pred_3 = _2705;
                    frontier_phi_61_pred_4 = _2704;
                    frontier_phi_61_pred_5 = _2703;
                }
                _2502 = frontier_phi_61_pred;
                _2512 = frontier_phi_61_pred_1;
                _2510 = frontier_phi_61_pred_2;
                _2508 = frontier_phi_61_pred_3;
                _2506 = frontier_phi_61_pred_4;
                _2504 = frontier_phi_61_pred_5;
                uint _2653 = _2652 + 1u;
                if (_2653 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2646 = _2502;
                    _2647 = _2504;
                    _2648 = _2506;
                    _2649 = _2508;
                    _2650 = _2510;
                    _2651 = _2512;
                    _2652 = _2653;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2501 = _2502;
            _2503 = _2504;
            _2505 = _2506;
            _2507 = _2508;
            _2509 = _2510;
            _2511 = _2512;
        }
        uvec4 _2515 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2516 = _2515.z;
        uint _2518 = (_2516 >> 8u) & 15u;
        float _2614;
        float _2616;
        float _2618;
        float _2620;
        float _2622;
        float _2624;
        if (((4294967295u << _2518) & _2400) == 0u)
        {
            _2614 = _2501;
            _2616 = _2503;
            _2618 = _2505;
            _2620 = _2507;
            _2622 = _2509;
            _2624 = _2511;
        }
        else
        {
            float _2639 = inversesqrt(dot(vec3(_2354, _2355, _2356), vec3(_2354, _2355, _2356)));
            float _2640 = _2639 * _2354;
            float _2641 = _2639 * _2355;
            float _2642 = _2639 * _2356;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2518 < ((_2516 >> 12u) & 15u))
            {
                float _2615;
                float _2617;
                float _2619;
                float _2621;
                float _2623;
                float _2625;
                float _2753 = _2501;
                float _2754 = _2503;
                float _2755 = _2505;
                float _2756 = _2507;
                float _2757 = _2509;
                float _2758 = _2511;
                uint _2759 = _2518;
                uint _2768;
                bool _2769;
                for (;;)
                {
                    _2768 = texelFetch(g_lightClassification, int((((_2394 << 5u) + (_2380 << 9u)) + (_2759 << 2u)) >> 2u)).x;
                    _2769 = _2768 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2769)
                    {
                        frontier_phi_67_pred = _2756;
                        frontier_phi_67_pred_1 = _2757;
                        frontier_phi_67_pred_2 = _2758;
                        frontier_phi_67_pred_3 = _2755;
                        frontier_phi_67_pred_4 = _2754;
                        frontier_phi_67_pred_5 = _2753;
                    }
                    else
                    {
                        float _2953;
                        float _2954;
                        float _2955;
                        float _2956;
                        float _2957;
                        float _2958;
                        float _3247;
                        float _3248;
                        float _3249;
                        float _3250;
                        float _3251;
                        float _3252;
                        float _2966 = _2753;
                        float _2967 = _2754;
                        float _2968 = _2755;
                        float _2969 = _2756;
                        float _2970 = _2757;
                        float _2971 = _2758;
                        uint _2972 = _2768;
                        uint _2973;
                        vec4 _2998;
                        float _2999;
                        vec4 _3014;
                        vec3 _3026;
                        vec4 _3041;
                        vec4 _3057;
                        float _3103;
                        bool _3104;
                        for (;;)
                        {
                            uint _2983 = ((_2759 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2972));
                            _2973 = (_2972 + 4294967295u) & _2972;
                            uint _2985 = _2983 * 40u;
                            _2998 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2985)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 3u)).x));
                            _2999 = _2998.w;
                            uint _3001 = (_2983 * 40u) + 4u;
                            _3014 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3001)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 3u)).x));
                            uint _3016 = (_2983 * 40u) + 8u;
                            _3026 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3016)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 2u)).x));
                            uint _3028 = (_2983 * 40u) + 16u;
                            _3041 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 3u)).x));
                            uint _3044 = (_2983 * 40u) + 20u;
                            _3057 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3044)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 3u)).x));
                            uint _3059 = (_2983 * 40u) + 24u;
                            vec4 _3072 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3059)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 3u)).x));
                            uint _3078 = (_2983 * 40u) + 28u;
                            vec4 _3091 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3078)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 3u)).x));
                            _3103 = fma(_2356, _3091.z, fma(_2355, _3091.y, _3091.x * _2354)) + _3091.w;
                            _3104 = !((fma(_2356, _3072.z, fma(_2355, _3072.y, _3072.x * _2354)) + _3072.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3104)
                            {
                                float _3131 = _2998.x - _2354;
                                float _3132 = _2998.y - _2355;
                                float _3133 = _2998.z - _2356;
                                float _3134 = dot(vec3(_3131, _3132, _3133), vec3(_3131, _3132, _3133));
                                float _3137 = inversesqrt(_3134);
                                float _3138 = _3137 * _3131;
                                float _3139 = _3137 * _3132;
                                float _3140 = _3137 * _3133;
                                float _3144 = 1.0 - (_3134 / (_2999 * _2999));
                                float _4202 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
                                float _3145 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
                                float _3149 = sqrt(_3134) * _3014.w;
                                float _3151 = 1.39999997615814208984375 / (_3149 + 1.39999997615814208984375);
                                float _3152 = _3151 * _3151;
                                float _3155 = ((1.0 - _3152) * dot(vec3(_3138, _3139, _3140), vec3(_618, _621, _624))) + _3152;
                                float _3158 = _3149 * _3149;
                                float _3162 = (fma(_2356, _3041.z, fma(_2355, _3041.y, _3041.x * _2354)) + _3041.w) / _3103;
                                float _3163 = (fma(_2356, _3057.z, fma(_2355, _3057.y, _3057.x * _2354)) + _3057.w) / _3103;
                                float _3167 = 1.0 - dot(vec2(_3162, _3163), vec2(_3162, _3163));
                                float _4218 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                                float _3168 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
                                float _3169 = _3168 * (((isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0))) * _3145) / ((_3158 * 0.699999988079071044921875) + 1.0));
                                float _3181 = exp2(log2(1.0 / ((_3158 * 3.5) + 5.0)) * 0.25);
                                float _3182 = 1.0 - _693;
                                float _3189 = sqrt(1.0 - ((1.0 - (_3182 * _3182)) * (1.0 - (_3181 * _3181))));
                                float _3190 = _3189 * _3189;
                                float _3191 = _3190 * _3190;
                                float _3192 = _3138 - _2640;
                                float _3193 = _3139 - _2641;
                                float _3194 = _3140 - _2642;
                                float _3198 = inversesqrt(dot(vec3(_3192, _3193, _3194), vec3(_3192, _3193, _3194)));
                                float _3202 = dot(vec3(_618, _621, _624), vec3((-0.0) - _2640, (-0.0) - _2641, (-0.0) - _2642));
                                float _4229 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                                float _3205 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
                                float _3206 = dot(vec3(_618, _621, _624), vec3(_3198 * _3192, _3198 * _3193, _3198 * _3194));
                                float _4240 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                                float _3209 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
                                float _3213 = ((_3209 * _3209) * (_3191 + (-1.0))) + 1.0;
                                float _3214 = _3151 * _3190;
                                float _3215 = _3214 * _3214;
                                float _3221 = ((1.0 - _3215) * dot(vec3(_618, _621, _624), vec3(_3138, _3139, _3140))) + _3215;
                                float _4251 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                                float _3222 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
                                float _3223 = 1.0 - _3190;
                                float _3233 = (0.5 / (((_3222 * ((_3205 * _3223) + _3190)) + 9.9999999392252902907785028219223e-09) + (((_3222 * _3223) + _3190) * _3205))) * _3222;
                                float _4262 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                                float _3243 = (_3168 * _3145) * (((_3191 * 3.1415927410125732421875) * (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0)))) / ((_3213 * _3213) * ((_3158 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3243 * _3026.x;
                                frontier_phi_73_pred_1 = _3243 * _3026.y;
                                frontier_phi_73_pred_2 = _3169 * _3014.z;
                                frontier_phi_73_pred_3 = _3169 * _3014.y;
                                frontier_phi_73_pred_4 = _3169 * _3014.x;
                                frontier_phi_73_pred_5 = _3243 * _3026.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3247 = frontier_phi_73_pred;
                            _3248 = frontier_phi_73_pred_1;
                            _3252 = frontier_phi_73_pred_2;
                            _3251 = frontier_phi_73_pred_3;
                            _3250 = frontier_phi_73_pred_4;
                            _3249 = frontier_phi_73_pred_5;
                            _2956 = _3250 + _2969;
                            _2957 = _3251 + _2970;
                            _2958 = _3252 + _2971;
                            _2953 = _3247 + _2966;
                            _2954 = _3248 + _2967;
                            _2955 = _3249 + _2968;
                            if (_2973 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2966 = _2953;
                                _2967 = _2954;
                                _2968 = _2955;
                                _2969 = _2956;
                                _2970 = _2957;
                                _2971 = _2958;
                                _2972 = _2973;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2956;
                        frontier_phi_67_pred_1 = _2957;
                        frontier_phi_67_pred_2 = _2958;
                        frontier_phi_67_pred_3 = _2955;
                        frontier_phi_67_pred_4 = _2954;
                        frontier_phi_67_pred_5 = _2953;
                    }
                    _2621 = frontier_phi_67_pred;
                    _2623 = frontier_phi_67_pred_1;
                    _2625 = frontier_phi_67_pred_2;
                    _2619 = frontier_phi_67_pred_3;
                    _2617 = frontier_phi_67_pred_4;
                    _2615 = frontier_phi_67_pred_5;
                    uint _2760 = _2759 + 1u;
                    if (_2760 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2753 = _2615;
                        _2754 = _2617;
                        _2755 = _2619;
                        _2756 = _2621;
                        _2757 = _2623;
                        _2758 = _2625;
                        _2759 = _2760;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2623;
                frontier_phi_55_56_ladder_1 = _2625;
                frontier_phi_55_56_ladder_2 = _2621;
                frontier_phi_55_56_ladder_3 = _2619;
                frontier_phi_55_56_ladder_4 = _2617;
                frontier_phi_55_56_ladder_5 = _2615;
            }
            else
            {
                frontier_phi_55_56_ladder = _2509;
                frontier_phi_55_56_ladder_1 = _2511;
                frontier_phi_55_56_ladder_2 = _2507;
                frontier_phi_55_56_ladder_3 = _2505;
                frontier_phi_55_56_ladder_4 = _2503;
                frontier_phi_55_56_ladder_5 = _2501;
            }
            _2614 = frontier_phi_55_56_ladder_5;
            _2616 = frontier_phi_55_56_ladder_4;
            _2618 = frontier_phi_55_56_ladder_3;
            _2620 = frontier_phi_55_56_ladder_2;
            _2622 = frontier_phi_55_56_ladder;
            _2624 = frontier_phi_55_56_ladder_1;
        }
        float _2629 = isnan(1.0) ? _677 : (isnan(_677) ? 1.0 : min(_677, 1.0));
        _2413 = (_2629 * _2620) + _1849;
        _2415 = (_2629 * _2622) + _1851;
        _2417 = (_2629 * _2624) + _1853;
        _2419 = ((_2614 * _661) * _2629) + _2194;
        _2421 = ((_2616 * _663) * _2629) + _2196;
        _2423 = ((_2618 * _664) * _2629) + _2198;
    }
    else
    {
        _2413 = _1849;
        _2415 = _1851;
        _2417 = _1853;
        _2419 = _2194;
        _2421 = _2196;
        _2423 = _2198;
    }
    float _4278 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _4289 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _4300 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    uint _2443 = _228 + 6u;
    float _2451 = _599 / cbSceneParam._m0[86u].x;
    float _2452 = _600 / cbSceneParam._m0[86u].y;
    vec4 _2466 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2451, _2452, (log2((isnan(cbSceneParam._m0[77u].w) ? _533 : (isnan(_533) ? cbSceneParam._m0[77u].w : min(_533, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2468 = _2466.x;
    float _2469 = _2466.y;
    float _2470 = _2466.z;
    float _2471 = _2466.w;
    float _2564;
    float _2566;
    float _2568;
    float _2570;
    if (_533 > cbSceneParam._m0[78u].w)
    {
        float _2526 = isnan(_533) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _533 : min(cbSceneParam._m0[80u].w, _533));
        float _2527 = _2526 / _533;
        float _2538 = _2527 * _584;
        float _2539 = _585 * _2527;
        float _2540 = (-0.0) - _2539;
        float _2542 = _2527 * _586;
        float _2544 = (cbSceneParam._m0[77u].w * _2540) / _2526;
        float _2545 = _2544 + cbSceneParam._m0[79u].w;
        float _2546 = cbSceneParam._m0[79u].w - _2539;
        float _2552 = sqrt(((_2538 * _2538) + (_2539 * _2539)) + (_2542 * _2542));
        float _2555 = (1.0 - (cbSceneParam._m0[77u].w / _2526)) * _2552;
        float _2560 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2562 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2715;
        if (abs((_2540 - _2544) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2715 = ((((_2545 > 0.0) ? exp2(_2560 * _2545) : (2.0 - exp2(_2562 * _2545))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2555;
        }
        else
        {
            float _2675 = 1.0 / cbSceneParam._m0[80u].x;
            float _2676 = isnan(_2546) ? _2545 : (isnan(_2545) ? _2546 : max(_2545, _2546));
            float _2677 = isnan(_2546) ? _2545 : (isnan(_2545) ? _2546 : min(_2545, _2546));
            float _2686 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : min(_2676, 0.0));
            float _2687 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : min(_2677, 0.0));
            _2715 = ((abs(_2552 / _2540) * cbSceneParam._m0[80u].y) * ((((_2686 - _2687) * 2.0) - ((exp2(_2560 * (isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0)))) - exp2(_2560 * (isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0))))) * _2675)) - ((exp2(_2562 * _2686) - exp2(_2562 * _2687)) * _2675))) + (_2555 * cbSceneParam._m0[80u].z);
        }
        vec4 _2717 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2451, _2452, 1.0), 0.0);
        float _2726 = exp2((_2715 * (-1.44269502162933349609375)) * (1.0 - _2717.w));
        float _2727 = log2(_2726);
        float _2743 = log2(_2471);
        _2564 = (exp2(_2743 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2727 * cbSceneParam._m0[78u].x)) * _2717.x) / cbSceneParam._m0[78u].x)) + _2468;
        _2566 = (exp2(_2743 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2727 * cbSceneParam._m0[78u].y)) * _2717.y) / cbSceneParam._m0[78u].y)) + _2469;
        _2568 = (exp2(_2743 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2727 * cbSceneParam._m0[78u].z)) * _2717.z) / cbSceneParam._m0[78u].z)) + _2470;
        _2570 = _2726 * _2471;
    }
    else
    {
        _2564 = _2468;
        _2566 = _2469;
        _2568 = _2470;
        _2570 = _2471;
    }
    float _2582 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2583 = _2582 == 3.0;
    float _2584 = log2(_2570);
    float _2591 = exp2(_2584 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_2413 + ((isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))) * _677))) + ((_2419 + ((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _1485)) * cbPerFrame._m0[3u].x));
    float _2592 = exp2(_2584 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_2415 + ((isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0))) * _677))) + ((_2421 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _1485)) * cbPerFrame._m0[3u].x));
    float _2593 = exp2(_2584 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_2417 + ((isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0))) * _677))) + ((_2423 + ((isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))) * _1485)) * cbPerFrame._m0[3u].x));
    float _2602 = (_2582 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2602 * (_2583 ? _2591 : (_2591 + (cbSceneParam._m0[72u].w * _2564)));
    SV_Target.y = _2602 * (_2583 ? _2592 : (_2592 + (cbSceneParam._m0[72u].w * _2566)));
    SV_Target.z = _2602 * (_2583 ? _2593 : (_2593 + (cbSceneParam._m0[72u].w * _2568)));
    SV_Target.w = cbInstanceData._m0[_2443].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2443].w;
}


