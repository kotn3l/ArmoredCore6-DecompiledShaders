#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _851;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _229 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _235 = _229.x * cbMtdParam._m0[9u].x;
    float _236 = _229.y * cbMtdParam._m0[9u].y;
    float _237 = _229.z * cbMtdParam._m0[9u].z;
    vec4 _250 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _254 = _250.z;
    float _259 = (_250.x * 2.0) + (-1.0);
    float _261 = (_250.y * 2.0) + (-1.0);
    float _262 = dot(vec2(_259, _261), vec2(_259, _261));
    float _3209 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _268 = sqrt(1.0 - (isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0))));
    vec4 _281 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _283 = _281.x;
    float _288 = cbMtdParam._m0[22u].x + _250.w;
    float _291 = fma(_268, _199 * NORMAL.x, fma(_261, _206 * TANGENT.x, (_192 * _184) * _259));
    float _294 = fma(_268, _199 * NORMAL.y, fma(_261, _206 * TANGENT.y, (_192 * _185) * _259));
    float _297 = fma(_268, _199 * NORMAL.z, fma(_261, _206 * TANGENT.z, (_192 * _186) * _259));
    float _301 = inversesqrt(dot(vec3(_291, _294, _297), vec3(_291, _294, _297)));
    float _302 = _301 * _291;
    float _303 = _301 * _294;
    float _304 = _301 * _297;
    float _3220 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _305 = isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0));
    float _3231 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _3242 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3253 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3264 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3275 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _310 = isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0));
    float _326 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _368 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _378 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _368);
    float _379 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _368);
    float _380 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _368);
    float _384 = inversesqrt(dot(vec3(_378, _379, _380), vec3(_378, _379, _380)));
    float _385 = _378 * _384;
    float _386 = _379 * _384;
    float _387 = _380 * _384;
    float _393 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _394 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _415 = fma(_304, cbSceneParam._m0[5u].z, fma(_303, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _302));
    float _418 = fma(_304, cbSceneParam._m0[6u].z, fma(_303, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _302));
    float _421 = fma(_304, cbSceneParam._m0[7u].z, fma(_303, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _302));
    uint _434 = uint(roundEven(NORMAL.w)) * 13u;
    uint _437 = (_434 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _443 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0)))) * cbInstanceData._m0[_437].x;
    float _444 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0)))) * cbInstanceData._m0[_437].y;
    float _445 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0)))) * cbInstanceData._m0[_437].z;
    float _3286 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _446 = isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0));
    float _3297 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _447 = isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0));
    float _3308 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _448 = isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0));
    float _449 = 1.0 - _310;
    float _450 = _446 * _449;
    float _451 = _447 * _449;
    float _452 = _448 * _449;
    float _457 = (_446 + (-0.039999999105930328369140625)) * _310;
    float _458 = (_447 + (-0.039999999105930328369140625)) * _310;
    float _459 = (_448 + (-0.039999999105930328369140625)) * _310;
    float _460 = _457 + 0.039999999105930328369140625;
    float _462 = _458 + 0.039999999105930328369140625;
    float _463 = _459 + 0.039999999105930328369140625;
    vec4 _472 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _393, cbSceneParam._m0[86u].y * _394));
    float _476 = ((isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0))) * TEXCOORD_5.w) * _472.x;
    float _477 = dot(vec3(_302, _303, _304), vec3(_385, _386, _387));
    float _480 = _477 * 2.0;
    float _484 = (_480 * _302) - _385;
    float _485 = (_480 * _303) - _386;
    float _486 = (_480 * _304) - _387;
    float _490 = abs(dot(vec3(_385, _386, _387), vec3(_302, _303, _304)));
    float _3319 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _492 = sqrt(_305);
    float _505 = exp2((_492 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_492 * 3.0));
    float _511 = (1.0 - _505) * ((_492 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _512 = _505 * _492;
    float _540 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _544 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _548 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _850;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _575 = fma(_548, cbModelParam._m0[26u].z, fma(_544, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _540));
        float _579 = fma(_548, cbModelParam._m0[27u].z, fma(_544, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _540));
        float _583 = fma(_548, cbModelParam._m0[28u].z, fma(_544, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _540));
        float _608 = _540 + _302;
        float _609 = _544 + _303;
        float _610 = _548 + _304;
        float _620 = fma(_610, cbModelParam._m0[26u].z, fma(_609, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _608)) - _575;
        float _621 = fma(_610, cbModelParam._m0[27u].z, fma(_609, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _608)) - _579;
        float _622 = fma(_610, cbModelParam._m0[28u].z, fma(_609, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _608)) - _583;
        float _626 = inversesqrt(dot(vec3(_620, _621, _622), vec3(_620, _621, _622)));
        float _639 = ((_626 * _620) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_575 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _640 = ((_626 * _621) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_579 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _641 = ((_626 * _622) / cbModelParam._m0[34u].z) + ((((((_583 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _644 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_639, _640, _641), 0.0);
        vec4 _651 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_639, _640, _641), 0.0);
        vec4 _658 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_639, _640, _641), 0.0);
        vec4 _665 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_639, _640, _641), 0.0);
        float _678 = exp2((_644.w + (-0.5)) * 20.0) * 2.0;
        float _679 = _678 * (_644.x + (-0.5));
        float _680 = _678 * (_644.y + (-0.5));
        float _681 = _678 * (_644.z + (-0.5));
        float _688 = exp2((_651.w + (-0.5)) * 20.0) * 2.0;
        float _689 = _688 * (_651.x + (-0.5));
        float _690 = _688 * (_651.y + (-0.5));
        float _691 = _688 * (_651.z + (-0.5));
        float _698 = exp2((_658.w + (-0.5)) * 20.0) * 2.0;
        float _699 = _698 * (_658.x + (-0.5));
        float _700 = _698 * (_658.y + (-0.5));
        float _701 = _698 * (_658.z + (-0.5));
        float _708 = exp2((_665.w + (-0.5)) * 20.0) * 2.0;
        float _709 = _708 * (_665.x + (-0.5));
        float _710 = _708 * (_665.y + (-0.5));
        float _711 = _708 * (_665.z + (-0.5));
        float _712 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        float _713 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _714 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
        float _715 = _679 * 0.5;
        float _716 = _689 * 0.5;
        float _717 = _699 * 0.5;
        float _718 = dot(vec3(_715, _716, _717), vec3(_715, _716, _717));
        float _723 = (_718 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_718);
        float _732 = (dot(vec3(_302, _303, _304), vec3(_723 * _715, _723 * _716, _723 * _717)) + 1.0) * 0.5;
        float _3345 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _742 = sqrt(((_716 * _716) + (_715 * _715)) + (_717 * _717)) / (_712 + 9.9999997473787516355514526367188e-06);
        float _3356 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _743 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
        float _744 = _743 * 2.0;
        float _748 = (1.0 - _743) / (_743 + 1.0);
        float _3367 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _749 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
        float _758 = ((((1.0 - _749) * (_744 + 2.0)) * exp2(log2(isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0))) * (_744 + 1.0))) + _749) * _712;
        float _759 = _680 * 0.5;
        float _760 = _690 * 0.5;
        float _761 = _700 * 0.5;
        float _762 = dot(vec3(_759, _760, _761), vec3(_759, _760, _761));
        float _767 = (_762 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_762);
        float _775 = (dot(vec3(_302, _303, _304), vec3(_767 * _759, _767 * _760, _767 * _761)) + 1.0) * 0.5;
        float _3378 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _784 = sqrt(((_760 * _760) + (_759 * _759)) + (_761 * _761)) / (_713 + 9.9999997473787516355514526367188e-06);
        float _3389 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _785 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
        float _786 = _785 * 2.0;
        float _790 = (1.0 - _785) / (_785 + 1.0);
        float _3400 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _791 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
        float _800 = ((((1.0 - _791) * (_786 + 2.0)) * exp2(log2(isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0))) * (_786 + 1.0))) + _791) * _713;
        float _801 = _681 * 0.5;
        float _802 = _691 * 0.5;
        float _803 = _701 * 0.5;
        float _804 = dot(vec3(_801, _802, _803), vec3(_801, _802, _803));
        float _809 = (_804 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_804);
        float _817 = (dot(vec3(_302, _303, _304), vec3(_809 * _801, _809 * _802, _809 * _803)) + 1.0) * 0.5;
        float _3411 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _826 = sqrt(((_802 * _802) + (_801 * _801)) + (_803 * _803)) / (_714 + 9.9999997473787516355514526367188e-06);
        float _3422 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _827 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
        float _828 = _827 * 2.0;
        float _832 = (1.0 - _827) / (_827 + 1.0);
        float _3433 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _833 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
        float _842 = ((((1.0 - _833) * (_828 + 2.0)) * exp2(log2(isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0))) * (_828 + 1.0))) + _833) * _714;
        _850 = _681;
        _852 = _680;
        _853 = _679;
        _854 = _691;
        _855 = _690;
        _856 = _689;
        _857 = _701;
        _858 = _700;
        _859 = _699;
        _860 = _714;
        _861 = _713;
        _862 = _712;
        _863 = cbModelParam._m0[36u].z * (isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0)));
        _864 = cbModelParam._m0[36u].z * (isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0)));
        _865 = cbModelParam._m0[36u].z * (isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0)));
    }
    else
    {
        _850 = _851;
        _852 = _851;
        _853 = _851;
        _854 = _851;
        _855 = _851;
        _856 = _851;
        _857 = _851;
        _858 = _851;
        _859 = _851;
        _860 = _851;
        _861 = _851;
        _862 = _851;
        _863 = 0.0;
        _864 = 0.0;
        _865 = 0.0;
    }
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _890 = fma(_548, cbModelParam._m0[30u].z, fma(_544, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _540));
        float _894 = fma(_548, cbModelParam._m0[31u].z, fma(_544, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _540));
        float _898 = fma(_548, cbModelParam._m0[32u].z, fma(_544, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _540));
        float _921 = _540 + _302;
        float _922 = _544 + _303;
        float _923 = _548 + _304;
        float _933 = fma(_923, cbModelParam._m0[30u].z, fma(_922, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _921)) - _890;
        float _934 = fma(_923, cbModelParam._m0[31u].z, fma(_922, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _921)) - _894;
        float _935 = fma(_923, cbModelParam._m0[32u].z, fma(_922, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _921)) - _898;
        float _939 = inversesqrt(dot(vec3(_933, _934, _935), vec3(_933, _934, _935)));
        float _952 = ((_939 * _933) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_890 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _953 = ((_939 * _934) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_894 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _954 = ((_939 * _935) / cbModelParam._m0[35u].z) + ((((((_898 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _956 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        float _989 = exp2((_956.w + (-0.5)) * 20.0) * 2.0;
        float _990 = _989 * (_956.x + (-0.5));
        float _991 = _989 * (_956.y + (-0.5));
        float _992 = _989 * (_956.z + (-0.5));
        float _999 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_963.x + (-0.5));
        float _1001 = _999 * (_963.y + (-0.5));
        float _1002 = _999 * (_963.z + (-0.5));
        float _1009 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_970.x + (-0.5));
        float _1011 = _1009 * (_970.y + (-0.5));
        float _1012 = _1009 * (_970.z + (-0.5));
        float _1019 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_977.x + (-0.5));
        float _1021 = _1019 * (_977.y + (-0.5));
        float _1022 = _1019 * (_977.z + (-0.5));
        float _1023 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1024 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1025 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1026 = _990 * 0.5;
        float _1027 = _1000 * 0.5;
        float _1028 = _1010 * 0.5;
        float _1029 = dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028));
        float _1034 = (_1029 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1029);
        float _1042 = (dot(vec3(_302, _303, _304), vec3(_1034 * _1026, _1034 * _1027, _1034 * _1028)) + 1.0) * 0.5;
        float _3474 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1051 = sqrt(((_1027 * _1027) + (_1026 * _1026)) + (_1028 * _1028)) / (_1023 + 9.9999997473787516355514526367188e-06);
        float _3485 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
        float _1053 = _1052 * 2.0;
        float _1057 = (1.0 - _1052) / (_1052 + 1.0);
        float _3496 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _1067 = ((((1.0 - _1058) * (_1053 + 2.0)) * exp2(log2(isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))) * (_1053 + 1.0))) + _1058) * _1023;
        float _1068 = _991 * 0.5;
        float _1069 = _1001 * 0.5;
        float _1070 = _1011 * 0.5;
        float _1071 = dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070));
        float _1076 = (_1071 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1071);
        float _1084 = (dot(vec3(_302, _303, _304), vec3(_1076 * _1068, _1076 * _1069, _1076 * _1070)) + 1.0) * 0.5;
        float _3507 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1093 = sqrt(((_1069 * _1069) + (_1068 * _1068)) + (_1070 * _1070)) / (_1024 + 9.9999997473787516355514526367188e-06);
        float _3518 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _1095 = _1094 * 2.0;
        float _1099 = (1.0 - _1094) / (_1094 + 1.0);
        float _3529 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _1109 = ((((1.0 - _1100) * (_1095 + 2.0)) * exp2(log2(isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0))) * (_1095 + 1.0))) + _1100) * _1024;
        float _1110 = _992 * 0.5;
        float _1111 = _1002 * 0.5;
        float _1112 = _1012 * 0.5;
        float _1113 = dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112));
        float _1118 = (_1113 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1113);
        float _1126 = (dot(vec3(_302, _303, _304), vec3(_1118 * _1110, _1118 * _1111, _1118 * _1112)) + 1.0) * 0.5;
        float _3540 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1135 = sqrt(((_1111 * _1111) + (_1110 * _1110)) + (_1112 * _1112)) / (_1025 + 9.9999997473787516355514526367188e-06);
        float _3551 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
        float _1137 = _1136 * 2.0;
        float _1141 = (1.0 - _1136) / (_1136 + 1.0);
        float _3562 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _1151 = ((((1.0 - _1142) * (_1137 + 2.0)) * exp2(log2(isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0))) * (_1137 + 1.0))) + _1142) * _1025;
        _1159 = _992;
        _1160 = _991;
        _1161 = _990;
        _1162 = _1002;
        _1163 = _1001;
        _1164 = _1000;
        _1165 = _1012;
        _1166 = _1011;
        _1167 = _1010;
        _1168 = _1025;
        _1169 = _1024;
        _1170 = _1023;
        _1171 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0)));
        _1172 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)));
        _1173 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)));
    }
    else
    {
        _1159 = _851;
        _1160 = _851;
        _1161 = _851;
        _1162 = _851;
        _1163 = _851;
        _1164 = _851;
        _1165 = _851;
        _1166 = _851;
        _1167 = _851;
        _1168 = _851;
        _1169 = _851;
        _1170 = _851;
        _1171 = 0.0;
        _1172 = 0.0;
        _1173 = 0.0;
    }
    float _1183 = (cbModelParam._m0[1u].x * (_1171 - _863)) + _863;
    float _1184 = (cbModelParam._m0[1u].x * (_1172 - _864)) + _864;
    float _1185 = (cbModelParam._m0[1u].x * (_1173 - _865)) + _865;
    float _1206 = fma(_1185, cbSceneParam._m0[89u].z, fma(_1184, cbSceneParam._m0[89u].y, _1183 * cbSceneParam._m0[89u].x));
    float _1209 = fma(_1185, cbSceneParam._m0[90u].z, fma(_1184, cbSceneParam._m0[90u].y, _1183 * cbSceneParam._m0[90u].x));
    float _1212 = fma(_1185, cbSceneParam._m0[91u].z, fma(_1184, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1183));
    float _1227 = _484 * 0.5;
    float _1228 = _485 * 0.5;
    float _1229 = _486 * 0.5;
    float _1230 = dot(vec4(_1227, _1228, _1229, 1.0), vec4(_1161, _1164, _1167, _1170));
    float _1233 = dot(vec4(_1227, _1228, _1229, 1.0), vec4(_1160, _1163, _1166, _1169));
    float _1236 = dot(vec4(_1227, _1228, _1229, 1.0), vec4(_1159, _1162, _1165, _1168));
    float _1270;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1243 = dot(vec4(_1227, _1228, _1229, 1.0), vec4(_850, _854, _857, _860));
        float _1247 = dot(vec4(_1227, _1228, _1229, 1.0), vec4(_852, _855, _858, _861));
        float _1251 = dot(vec4(_1227, _1228, _1229, 1.0), vec4(_853, _856, _859, _862));
        float _1258 = dot(vec4(cbModelParam._m0[39u]), vec4(_1227, _1228, _1229, 1.0));
        _1270 = dot(vec3(isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)), isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)), isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1258) ? 0.0 : (isnan(0.0) ? _1258 : max(0.0, _1258))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1270 = 1.0;
    }
    float _1281;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1272 = dot(vec4(cbModelParam._m0[40u]), vec4(_1227, _1228, _1229, 1.0));
        _1281 = dot(vec3(isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)), isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)), isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1272) ? 0.0 : (isnan(0.0) ? _1272 : max(0.0, _1272))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1281 = 1.0;
    }
    float _1285 = (_1281 * cbModelParam._m0[1u].x) + (_1270 * (1.0 - cbModelParam._m0[1u].x));
    float _1295 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _305);
    float _1296 = isnan(_1295) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1295 : min(cbModelParam._m0[25u].z, _1295));
    float _1378;
    float _1380;
    float _1382;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1345 = fma(_548, cbModelParam._m0[13u].z, fma(_544, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _540)) + cbModelParam._m0[13u].w;
        float _1349 = fma(_548, cbModelParam._m0[14u].z, fma(_544, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _540)) + cbModelParam._m0[14u].w;
        float _1353 = fma(_548, cbModelParam._m0[15u].z, fma(_544, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _540)) + cbModelParam._m0[15u].w;
        float _1356 = fma(_486, cbModelParam._m0[13u].z, fma(_485, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _484));
        float _1359 = fma(_486, cbModelParam._m0[14u].z, fma(_485, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _484));
        float _1362 = fma(_486, cbModelParam._m0[15u].z, fma(_485, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _484));
        float _1390;
        if (_1356 > 0.0)
        {
            _1390 = abs((1.0 - _1345) / _1356);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1356 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1345 + 1.0) / _1356);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1390 = frontier_phi_14_12_ladder;
        }
        float _1617;
        if (_1359 > 0.0)
        {
            _1617 = abs((1.0 - _1349) / _1359);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1359 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1349 + 1.0) / _1359);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1617 = frontier_phi_23_19_ladder;
        }
        float _1874;
        if (_1362 > 0.0)
        {
            _1874 = abs((1.0 - _1353) / _1362);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1362 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1353 + 1.0) / _1362);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1874 = frontier_phi_35_30_ladder;
        }
        float _1876 = isnan(_1617) ? _1390 : (isnan(_1390) ? _1617 : min(_1390, _1617));
        float _1877 = isnan(_1874) ? _1876 : (isnan(_1876) ? _1874 : min(_1876, _1874));
        float _1881 = (_1877 * _1356) + _1345;
        float _1882 = (_1877 * _1359) + _1349;
        float _1883 = (_1877 * _1362) + _1353;
        float _1884 = _1877 * 9.9999997473787516355514526367188e-05;
        float _1886 = (-1.0) - _1884;
        float _1888 = _1884 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1883 > _1888) || ((_1883 < _1886) || ((_1882 > _1888) || ((_1882 < _1886) || ((_1881 < _1886) || (_1881 > _1888))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2011 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1883, cbModelParam._m0[9u].z, fma(_1882, cbModelParam._m0[9u].y, _1881 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1883, cbModelParam._m0[10u].z, fma(_1882, cbModelParam._m0[10u].y, _1881 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1883, cbModelParam._m0[11u].z, fma(_1882, cbModelParam._m0[11u].y, _1881 * cbModelParam._m0[11u].x))), _1296);
            frontier_phi_13_35_ladder = _2011.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2011.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2011.x * cbModelParam._m0[1u].y;
        }
        _1378 = frontier_phi_13_35_ladder_2;
        _1380 = frontier_phi_13_35_ladder_1;
        _1382 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1366 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_484, _485, _486), _1296);
        _1378 = _1366.x * cbModelParam._m0[1u].y;
        _1380 = _1366.y * cbModelParam._m0[1u].y;
        _1382 = _1366.z * cbModelParam._m0[1u].y;
    }
    float _1386 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _305);
    float _1387 = isnan(_1386) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1386 : min(cbModelParam._m0[25u].w, _1386));
    float _1479;
    float _1481;
    float _1483;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1443 = fma(_548, cbModelParam._m0[21u].z, fma(_544, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _540)) + cbModelParam._m0[21u].w;
        float _1447 = fma(_548, cbModelParam._m0[22u].z, fma(_544, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _540)) + cbModelParam._m0[22u].w;
        float _1451 = fma(_548, cbModelParam._m0[23u].z, fma(_544, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _540)) + cbModelParam._m0[23u].w;
        float _1454 = fma(_486, cbModelParam._m0[21u].z, fma(_485, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _484));
        float _1457 = fma(_486, cbModelParam._m0[22u].z, fma(_485, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _484));
        float _1460 = fma(_486, cbModelParam._m0[23u].z, fma(_485, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _484));
        float _1622;
        if (_1454 > 0.0)
        {
            _1622 = abs((1.0 - _1443) / _1454);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1454 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1443 + 1.0) / _1454);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1622 = frontier_phi_25_21_ladder;
        }
        float _1901;
        if (_1457 > 0.0)
        {
            _1901 = abs((1.0 - _1447) / _1457);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1457 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1447 + 1.0) / _1457);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1901 = frontier_phi_37_32_ladder;
        }
        float _2114;
        if (_1460 > 0.0)
        {
            _2114 = abs((1.0 - _1451) / _1460);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1460 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1451 + 1.0) / _1460);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2114 = frontier_phi_46_43_ladder;
        }
        float _2116 = isnan(_1901) ? _1622 : (isnan(_1622) ? _1901 : min(_1622, _1901));
        float _2117 = isnan(_2114) ? _2116 : (isnan(_2116) ? _2114 : min(_2116, _2114));
        float _2121 = (_2117 * _1454) + _1443;
        float _2122 = (_2117 * _1457) + _1447;
        float _2123 = (_2117 * _1460) + _1451;
        float _2124 = _2117 * 9.9999997473787516355514526367188e-05;
        float _2125 = (-1.0) - _2124;
        float _2127 = _2124 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2123 > _2127) || ((_2123 < _2125) || ((_2122 > _2127) || ((_2122 < _2125) || ((_2121 < _2125) || (_2121 > _2127))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2322 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2123, cbModelParam._m0[17u].z, fma(_2122, cbModelParam._m0[17u].y, _2121 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2123, cbModelParam._m0[18u].z, fma(_2122, cbModelParam._m0[18u].y, _2121 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2123, cbModelParam._m0[19u].z, fma(_2122, cbModelParam._m0[19u].y, _2121 * cbModelParam._m0[19u].x))), _1387);
            frontier_phi_22_46_ladder = _2322.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2322.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2322.x * cbModelParam._m0[1u].z;
        }
        _1479 = frontier_phi_22_46_ladder_2;
        _1481 = frontier_phi_22_46_ladder_1;
        _1483 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1463 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_484, _485, _486), _1387);
        _1479 = _1463.x * cbModelParam._m0[1u].z;
        _1481 = _1463.y * cbModelParam._m0[1u].z;
        _1483 = _1463.z * cbModelParam._m0[1u].z;
    }
    float _1496 = (((_511 * _460) + _512) * _476) * ((cbModelParam._m0[1u].w * (_1479 - _1378)) + _1378);
    float _1498 = (((_511 * _462) + _512) * _476) * ((cbModelParam._m0[1u].w * (_1481 - _1380)) + _1380);
    float _1500 = (((_511 * _463) + _512) * _476) * ((cbModelParam._m0[1u].w * (_1483 - _1382)) + _1382);
    float _1503 = fma(_1500, cbSceneParam._m0[89u].z, fma(_1498, cbSceneParam._m0[89u].y, _1496 * cbSceneParam._m0[89u].x));
    float _1506 = fma(_1500, cbSceneParam._m0[90u].z, fma(_1498, cbSceneParam._m0[90u].y, _1496 * cbSceneParam._m0[90u].x));
    float _1509 = fma(_1500, cbSceneParam._m0[91u].z, fma(_1498, cbSceneParam._m0[91u].y, _1496 * cbSceneParam._m0[91u].x));
    vec4 _1517 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_393, _394));
    float _1519 = _1517.w;
    float _1531 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1519);
    float _1532 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1519);
    float _1533 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1519);
    uvec4 _1537 = floatBitsToUint(cbInstanceData._m0[_434 + 5u]);
    uint _1539 = _1537.x * 14u;
    uint _1540 = _1539 + 13u;
    float _1547 = _476 + (-1.0);
    float _1552 = (cbLight._m0[_1540].x * _1547) + 1.0;
    float _1553 = (cbLight._m0[_1540].y * _1547) + 1.0;
    float _1554 = (cbLight._m0[_1540].z * _1547) + 1.0;
    float _1555 = (cbLight._m0[_1540].w * _1547) + 1.0;
    uint _1556 = _1539 + 5u;
    float _1562 = isnan(1.0) ? _1553 : (isnan(_1553) ? 1.0 : min(_1553, 1.0));
    uint _1566 = _1539 + 4u;
    float _1576 = isnan(1.0) ? _1552 : (isnan(_1552) ? 1.0 : min(_1552, 1.0));
    uint _1580 = _1539 | 1u;
    float _1591 = dot(vec3(cbLight._m0[_1539].xyz), vec3(_302, _303, _304));
    float _1594 = dot(vec3(cbLight._m0[_1580].xyz), vec3(_302, _303, _304));
    float _3698 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
    float _3709 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
    float _1599 = (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * 0.3183098733425140380859375;
    float _1601 = (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * 0.3183098733425140380859375;
    float _1608 = ((cbLight._m0[_1556].x * _1562) * _1601) + (((cbLight._m0[_1566].x * _1531) * _1576) * _1599);
    float _1609 = ((_1562 * cbLight._m0[_1556].y) * _1601) + (((cbLight._m0[_1566].y * _1532) * _1576) * _1599);
    float _1610 = ((_1562 * cbLight._m0[_1556].z) * _1601) + (((cbLight._m0[_1566].z * _1533) * _1576) * _1599);
    uvec4 _1614 = floatBitsToUint(cbLight._m0[_1539 + 12u]);
    bool _1616 = _1614.x == 0u;
    float _1627;
    float _1629;
    float _1631;
    if (_1616)
    {
        _1627 = _1608;
        _1629 = _1609;
        _1631 = _1610;
    }
    else
    {
        uint _1635 = _1539 + 6u;
        float _1651 = (dot(vec3(cbLight._m0[_1539 + 2u].xyz), vec3(_302, _303, _304)) * 0.5) + 0.5;
        float _1652 = _1651 * _1651;
        float _3720 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1654 = isnan(1.0) ? _1554 : (isnan(_1554) ? 1.0 : min(_1554, 1.0));
        _1627 = (((cbLight._m0[_1635].x * 0.3183098733425140380859375) * _1653) * _1654) + _1608;
        _1629 = (((cbLight._m0[_1635].y * 0.3183098733425140380859375) * _1653) * _1654) + _1609;
        _1631 = (((cbLight._m0[_1635].z * 0.3183098733425140380859375) * _1653) * _1654) + _1610;
    }
    bool _1634 = _1614.y == 0u;
    float _1672;
    float _1674;
    float _1676;
    if (_1634)
    {
        _1672 = _1627;
        _1674 = _1629;
        _1676 = _1631;
    }
    else
    {
        uint _1845 = _1539 + 7u;
        float _1861 = (dot(vec3(cbLight._m0[_1539 + 3u].xyz), vec3(_302, _303, _304)) * 0.5) + 0.5;
        float _1862 = _1861 * _1861;
        float _3736 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
        float _1863 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1864 = isnan(1.0) ? _1555 : (isnan(_1555) ? 1.0 : min(_1555, 1.0));
        _1672 = (((cbLight._m0[_1845].x * 0.3183098733425140380859375) * _1863) * _1864) + _1627;
        _1674 = (((cbLight._m0[_1845].y * 0.3183098733425140380859375) * _1863) * _1864) + _1629;
        _1676 = (((cbLight._m0[_1845].z * 0.3183098733425140380859375) * _1863) * _1864) + _1631;
    }
    uint _1679 = _1539 + 8u;
    float _1692 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1539].w)) * _305) * 0.949999988079071044921875);
    float _1693 = _1692 * _1692;
    float _1694 = cbLight._m0[_1539].x + _385;
    float _1695 = cbLight._m0[_1539].y + _386;
    float _1696 = cbLight._m0[_1539].z + _387;
    float _1700 = inversesqrt(dot(vec3(_1694, _1695, _1696), vec3(_1694, _1695, _1696)));
    float _1701 = _1700 * _1694;
    float _1702 = _1700 * _1695;
    float _1703 = _1700 * _1696;
    float _1704 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1539].xyz));
    float _3752 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
    float _1707 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
    float _3763 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _1708 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _1709 = dot(vec3(_302, _303, _304), vec3(_1701, _1702, _1703));
    float _3774 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
    float _1712 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _1713 = dot(vec3(cbLight._m0[_1539].xyz), vec3(_1701, _1702, _1703));
    float _3785 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
    float _1717 = _1693 * _1693;
    float _1721 = ((_1712 * _1712) * (_1717 + (-1.0))) + 1.0;
    float _1729 = exp2(log2(1.0 - (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0)))) * 5.0);
    float _1730 = 0.959999978542327880859375 - _457;
    float _1732 = 0.959999978542327880859375 - _458;
    float _1733 = 0.959999978542327880859375 - _459;
    float _1740 = 1.0 - _1693;
    float _1751 = (0.5 / (((_1708 * ((_1707 * _1740) + _1693)) + 9.9999999392252902907785028219223e-09) + (((_1708 * _1740) + _1693) * _1707))) * _1707;
    float _3796 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
    float _1753 = (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * (_1717 / ((_1721 * _1721) * 3.141590118408203125));
    uint _1767 = _1539 + 9u;
    float _1778 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1580].w)) * _305) * 0.949999988079071044921875);
    float _1779 = _1778 * _1778;
    float _1780 = cbLight._m0[_1580].x + _385;
    float _1781 = cbLight._m0[_1580].y + _386;
    float _1782 = cbLight._m0[_1580].z + _387;
    float _1786 = inversesqrt(dot(vec3(_1780, _1781, _1782), vec3(_1780, _1781, _1782)));
    float _1787 = _1786 * _1780;
    float _1788 = _1786 * _1781;
    float _1789 = _1786 * _1782;
    float _1790 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1580].xyz));
    float _3807 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
    float _1793 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _1794 = dot(vec3(_302, _303, _304), vec3(_1787, _1788, _1789));
    float _3818 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _1797 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _1798 = dot(vec3(cbLight._m0[_1580].xyz), vec3(_1787, _1788, _1789));
    float _3829 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
    float _1802 = _1779 * _1779;
    float _1806 = ((_1797 * _1797) * (_1802 + (-1.0))) + 1.0;
    float _1813 = exp2(log2(1.0 - (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0)))) * 5.0);
    float _1820 = 1.0 - _1779;
    float _1830 = (0.5 / (((_1708 * ((_1793 * _1820) + _1779)) + 9.9999999392252902907785028219223e-09) + (((_1708 * _1820) + _1779) * _1793))) * _1793;
    float _3840 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _1832 = (isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * (_1802 / ((_1806 * _1806) * 3.141590118408203125));
    float _1842 = (((((_1813 * _1730) + _460) * cbLight._m0[_1767].x) * _1832) * _1562) + ((((cbLight._m0[_1679].x * _1531) * ((_1729 * _1730) + _460)) * _1753) * _1576);
    float _1843 = (((((_1813 * _1732) + _462) * cbLight._m0[_1767].y) * _1832) * _1562) + ((((cbLight._m0[_1679].y * _1532) * ((_1729 * _1732) + _462)) * _1753) * _1576);
    float _1844 = (((((_1813 * _1733) + _463) * cbLight._m0[_1767].z) * _1832) * _1562) + ((((cbLight._m0[_1679].z * _1533) * ((_1729 * _1733) + _463)) * _1753) * _1576);
    float _1906;
    float _1908;
    float _1910;
    if (_1616)
    {
        _1906 = _1842;
        _1908 = _1843;
        _1910 = _1844;
    }
    else
    {
        uint _1912 = _1539 + 2u;
        uint _1916 = _1539 + 10u;
        float _1930 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1912].w)) * _305) * 0.949999988079071044921875);
        float _1931 = _1930 * _1930;
        float _1932 = cbLight._m0[_1912].x + _385;
        float _1933 = cbLight._m0[_1912].y + _386;
        float _1934 = cbLight._m0[_1912].z + _387;
        float _1938 = inversesqrt(dot(vec3(_1932, _1933, _1934), vec3(_1932, _1933, _1934)));
        float _1939 = _1938 * _1932;
        float _1940 = _1938 * _1933;
        float _1941 = _1938 * _1934;
        float _1942 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1912].xyz));
        float _3851 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
        float _1945 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1946 = dot(vec3(_302, _303, _304), vec3(_1939, _1940, _1941));
        float _3862 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
        float _1949 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1950 = dot(vec3(cbLight._m0[_1912].xyz), vec3(_1939, _1940, _1941));
        float _3873 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
        float _1954 = _1931 * _1931;
        float _1958 = ((_1949 * _1949) * (_1954 + (-1.0))) + 1.0;
        float _1965 = exp2(log2(1.0 - (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0)))) * 5.0);
        float _1972 = 1.0 - _1931;
        float _1982 = (0.5 / (((_1708 * ((_1945 * _1972) + _1931)) + 9.9999999392252902907785028219223e-09) + (((_1708 * _1972) + _1931) * _1945))) * _1945;
        float _3884 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
        float _1984 = (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (_1954 / ((_1958 * _1958) * 3.141590118408203125));
        float _1985 = isnan(1.0) ? _1554 : (isnan(_1554) ? 1.0 : min(_1554, 1.0));
        _1906 = (((((_1965 * _1730) + _460) * cbLight._m0[_1916].x) * _1984) * _1985) + _1842;
        _1908 = (((((_1965 * _1732) + _462) * cbLight._m0[_1916].y) * _1984) * _1985) + _1843;
        _1910 = (((((_1965 * _1733) + _463) * cbLight._m0[_1916].z) * _1984) * _1985) + _1844;
    }
    float _2020;
    float _2022;
    float _2024;
    if (_1634)
    {
        _2020 = _1906;
        _2022 = _1908;
        _2024 = _1910;
    }
    else
    {
        uint _2031 = _1539 + 3u;
        uint _2035 = _1539 + 11u;
        float _2049 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2031].w)) * _305) * 0.949999988079071044921875);
        float _2050 = _2049 * _2049;
        float _2051 = cbLight._m0[_2031].x + _385;
        float _2052 = cbLight._m0[_2031].y + _386;
        float _2053 = cbLight._m0[_2031].z + _387;
        float _2057 = inversesqrt(dot(vec3(_2051, _2052, _2053), vec3(_2051, _2052, _2053)));
        float _2058 = _2057 * _2051;
        float _2059 = _2057 * _2052;
        float _2060 = _2057 * _2053;
        float _2061 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_2031].xyz));
        float _3900 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
        float _2064 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _2065 = dot(vec3(_302, _303, _304), vec3(_2058, _2059, _2060));
        float _3911 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
        float _2068 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _2069 = dot(vec3(cbLight._m0[_2031].xyz), vec3(_2058, _2059, _2060));
        float _3922 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
        float _2073 = _2050 * _2050;
        float _2077 = ((_2068 * _2068) * (_2073 + (-1.0))) + 1.0;
        float _2084 = exp2(log2(1.0 - (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) * 5.0);
        float _2091 = 1.0 - _2050;
        float _2101 = (0.5 / (((_1708 * ((_2064 * _2091) + _2050)) + 9.9999999392252902907785028219223e-09) + (((_1708 * _2091) + _2050) * _2064))) * _2064;
        float _3933 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
        float _2103 = (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_2073 / ((_2077 * _2077) * 3.141590118408203125));
        float _2104 = isnan(1.0) ? _1555 : (isnan(_1555) ? 1.0 : min(_1555, 1.0));
        _2020 = (((((_2084 * _1730) + _460) * cbLight._m0[_2035].x) * _2103) * _2104) + _1906;
        _2022 = (((((_2084 * _1732) + _462) * cbLight._m0[_2035].y) * _2103) * _2104) + _1908;
        _2024 = (((((_2084 * _1733) + _463) * cbLight._m0[_2035].z) * _2103) * _2104) + _1910;
    }
    float _2239;
    float _2241;
    float _2243;
    float _2245;
    float _2247;
    float _2249;
    if (_1537.y == 0u)
    {
        float _2179 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2180 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2179;
        float _2181 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2179;
        float _2182 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2179;
        uvec4 _2194 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2195 = _2194.x;
        uint _2206 = uint((float(_2194.y) * floor(float(uint(cbSceneParam._m0[85u].y * _394) / _2195))) + floor(float(uint(cbSceneParam._m0[85u].x * _393) / _2195)));
        float _2216 = (log2(_2182 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2217 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        uint _2220 = uint(isnan(14.0) ? _2217 : (isnan(_2217) ? 14.0 : min(_2217, 14.0)));
        uvec4 _2225 = texelFetch(g_lightClusterGridBuffer, int(((_2220 << 2u) + (_2206 << 6u)) >> 2u));
        uint _2226 = _2225.x;
        uint _2227 = _2194.z;
        float _2327;
        float _2329;
        float _2331;
        float _2333;
        float _2335;
        float _2337;
        if (((((1u << ((_2227 >> 4u) & 15u)) + 4294967295u) & _2226) == 0u) || ((_2227 & 240u) == 0u))
        {
            _2327 = 0.0;
            _2329 = 0.0;
            _2331 = 0.0;
            _2333 = 0.0;
            _2335 = 0.0;
            _2337 = 0.0;
        }
        else
        {
            float _2328;
            float _2330;
            float _2332;
            float _2334;
            float _2336;
            float _2338;
            float _2472 = 0.0;
            float _2473 = 0.0;
            float _2474 = 0.0;
            float _2475 = 0.0;
            float _2476 = 0.0;
            float _2477 = 0.0;
            uint _2478 = 0u;
            uint _2487;
            bool _2488;
            for (;;)
            {
                _2487 = texelFetch(g_lightClassification, int((((_2220 << 5u) + (_2206 << 9u)) + (_2478 << 2u)) >> 2u)).x;
                _2488 = _2487 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2488)
                {
                    frontier_phi_61_pred = _2472;
                    frontier_phi_61_pred_1 = _2477;
                    frontier_phi_61_pred_2 = _2476;
                    frontier_phi_61_pred_3 = _2475;
                    frontier_phi_61_pred_4 = _2474;
                    frontier_phi_61_pred_5 = _2473;
                }
                else
                {
                    float _2596;
                    float _2597;
                    float _2598;
                    float _2599;
                    float _2600;
                    float _2601;
                    uint _2602;
                    _2596 = _2472;
                    _2597 = _2473;
                    _2598 = _2474;
                    _2599 = _2475;
                    _2600 = _2476;
                    _2601 = _2477;
                    _2602 = _2487;
                    float _2528;
                    float _2529;
                    float _2530;
                    float _2531;
                    float _2532;
                    float _2533;
                    for (;;)
                    {
                        uint _2606 = uint(findLSB(_2602)) + (_2478 << 5u);
                        uint _2603 = (_2602 + 4294967295u) & _2602;
                        uint _2608 = _2606 * 48u;
                        vec4 _2622 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2608)).x, texelFetch(g_PointLightRenderingBuffer, int(_2608 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2608 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2608 + 3u)).x));
                        uint _2628 = (_2606 * 48u) + 4u;
                        vec4 _2641 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2628)).x, texelFetch(g_PointLightRenderingBuffer, int(_2628 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2628 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2628 + 3u)).x));
                        uint _2647 = (_2606 * 48u) + 8u;
                        vec3 _2658 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2647)).x, texelFetch(g_PointLightRenderingBuffer, int(_2647 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2647 + 2u)).x));
                        float _2662 = _2622.x - _2180;
                        float _2663 = _2622.y - _2181;
                        float _2664 = _2622.z - _2182;
                        float _2665 = dot(vec3(_2662, _2663, _2664), vec3(_2662, _2663, _2664));
                        float _2668 = inversesqrt(_2665);
                        float _2669 = _2668 * _2662;
                        float _2670 = _2668 * _2663;
                        float _2671 = _2668 * _2664;
                        float _2672 = dot(vec3(_415, _418, _421), vec3(_2669, _2670, _2671));
                        float _2677 = 1.0 - (_2665 * _2622.w);
                        float _3959 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
                        float _2678 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
                        float _2679 = sqrt(_2665) * _2641.w;
                        float _2682 = 1.39999997615814208984375 / (_2679 + 1.39999997615814208984375);
                        float _2683 = _2682 * _2682;
                        float _2686 = ((1.0 - _2683) * _2672) + _2683;
                        float _2689 = _2679 * _2679;
                        float _2693 = ((isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0))) * _2678) / ((_2689 * 0.699999988079071044921875) + 1.0);
                        float _2697 = (-0.0) - _2180;
                        float _2698 = (-0.0) - _2181;
                        float _2699 = (-0.0) - _2182;
                        float _2703 = inversesqrt(dot(vec3(_2697, _2698, _2699), vec3(_2697, _2698, _2699)));
                        float _2704 = _2703 * _2697;
                        float _2705 = _2703 * _2698;
                        float _2706 = _2703 * _2699;
                        float _2714 = exp2(log2(1.0 / ((_2689 * 3.5) + 5.0)) * 0.25);
                        float _2715 = 1.0 - _492;
                        float _2722 = sqrt(1.0 - ((1.0 - (_2715 * _2715)) * (1.0 - (_2714 * _2714))));
                        float _2723 = _2722 * _2722;
                        float _2724 = _2723 * _2723;
                        float _2725 = _2704 + _2669;
                        float _2726 = _2705 + _2670;
                        float _2727 = _2706 + _2671;
                        float _2731 = inversesqrt(dot(vec3(_2725, _2726, _2727), vec3(_2725, _2726, _2727)));
                        float _2735 = dot(vec3(_415, _418, _421), vec3(_2704, _2705, _2706));
                        float _3975 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
                        float _2738 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
                        float _2739 = dot(vec3(_415, _418, _421), vec3(_2731 * _2725, _2731 * _2726, _2731 * _2727));
                        float _3986 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
                        float _2742 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
                        float _2746 = ((_2742 * _2742) * (_2724 + (-1.0))) + 1.0;
                        float _2747 = _2682 * _2723;
                        float _2748 = _2747 * _2747;
                        float _2751 = ((1.0 - _2748) * _2672) + _2748;
                        float _3997 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
                        float _2752 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
                        float _2753 = 1.0 - _2723;
                        float _2763 = (0.5 / (((_2752 * ((_2738 * _2753) + _2723)) + 9.9999999392252902907785028219223e-09) + (((_2752 * _2753) + _2723) * _2738))) * _2752;
                        float _4008 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
                        float _2774 = (((_2724 * 3.1415927410125732421875) * (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) / ((_2746 * _2746) * ((_2689 * 2.1991131305694580078125) + 3.141590118408203125))) * _2678;
                        _2531 = (_2693 * _2641.x) + _2599;
                        _2532 = (_2693 * _2641.y) + _2600;
                        _2533 = (_2693 * _2641.z) + _2601;
                        _2528 = (_2774 * _2658.x) + _2596;
                        _2529 = (_2774 * _2658.y) + _2597;
                        _2530 = (_2774 * _2658.z) + _2598;
                        if (_2603 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2596 = _2528;
                            _2597 = _2529;
                            _2598 = _2530;
                            _2599 = _2531;
                            _2600 = _2532;
                            _2601 = _2533;
                            _2602 = _2603;
                        }
                    }
                    frontier_phi_61_pred = _2528;
                    frontier_phi_61_pred_1 = _2533;
                    frontier_phi_61_pred_2 = _2532;
                    frontier_phi_61_pred_3 = _2531;
                    frontier_phi_61_pred_4 = _2530;
                    frontier_phi_61_pred_5 = _2529;
                }
                _2328 = frontier_phi_61_pred;
                _2338 = frontier_phi_61_pred_1;
                _2336 = frontier_phi_61_pred_2;
                _2334 = frontier_phi_61_pred_3;
                _2332 = frontier_phi_61_pred_4;
                _2330 = frontier_phi_61_pred_5;
                uint _2479 = _2478 + 1u;
                if (_2479 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2472 = _2328;
                    _2473 = _2330;
                    _2474 = _2332;
                    _2475 = _2334;
                    _2476 = _2336;
                    _2477 = _2338;
                    _2478 = _2479;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2327 = _2328;
            _2329 = _2330;
            _2331 = _2332;
            _2333 = _2334;
            _2335 = _2336;
            _2337 = _2338;
        }
        uvec4 _2341 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2342 = _2341.z;
        uint _2344 = (_2342 >> 8u) & 15u;
        float _2440;
        float _2442;
        float _2444;
        float _2446;
        float _2448;
        float _2450;
        if (((4294967295u << _2344) & _2226) == 0u)
        {
            _2440 = _2327;
            _2442 = _2329;
            _2444 = _2331;
            _2446 = _2333;
            _2448 = _2335;
            _2450 = _2337;
        }
        else
        {
            float _2465 = inversesqrt(dot(vec3(_2180, _2181, _2182), vec3(_2180, _2181, _2182)));
            float _2466 = _2465 * _2180;
            float _2467 = _2465 * _2181;
            float _2468 = _2465 * _2182;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2344 < ((_2342 >> 12u) & 15u))
            {
                float _2441;
                float _2443;
                float _2445;
                float _2447;
                float _2449;
                float _2451;
                float _2579 = _2327;
                float _2580 = _2329;
                float _2581 = _2331;
                float _2582 = _2333;
                float _2583 = _2335;
                float _2584 = _2337;
                uint _2585 = _2344;
                uint _2594;
                bool _2595;
                for (;;)
                {
                    _2594 = texelFetch(g_lightClassification, int((((_2220 << 5u) + (_2206 << 9u)) + (_2585 << 2u)) >> 2u)).x;
                    _2595 = _2594 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2595)
                    {
                        frontier_phi_67_pred = _2582;
                        frontier_phi_67_pred_1 = _2583;
                        frontier_phi_67_pred_2 = _2584;
                        frontier_phi_67_pred_3 = _2581;
                        frontier_phi_67_pred_4 = _2580;
                        frontier_phi_67_pred_5 = _2579;
                    }
                    else
                    {
                        float _2779;
                        float _2780;
                        float _2781;
                        float _2782;
                        float _2783;
                        float _2784;
                        float _3075;
                        float _3076;
                        float _3077;
                        float _3078;
                        float _3079;
                        float _3080;
                        float _2792 = _2579;
                        float _2793 = _2580;
                        float _2794 = _2581;
                        float _2795 = _2582;
                        float _2796 = _2583;
                        float _2797 = _2584;
                        uint _2798 = _2594;
                        uint _2799;
                        vec4 _2824;
                        float _2825;
                        vec4 _2840;
                        vec3 _2852;
                        vec4 _2868;
                        vec4 _2884;
                        float _2931;
                        bool _2932;
                        for (;;)
                        {
                            uint _2809 = ((_2585 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2798));
                            _2799 = (_2798 + 4294967295u) & _2798;
                            uint _2811 = _2809 * 40u;
                            _2824 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2811)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 3u)).x));
                            _2825 = _2824.w;
                            uint _2827 = (_2809 * 40u) + 4u;
                            _2840 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2827)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 3u)).x));
                            uint _2842 = (_2809 * 40u) + 8u;
                            _2852 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2842)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 2u)).x));
                            uint _2855 = (_2809 * 40u) + 16u;
                            _2868 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2855)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 3u)).x));
                            uint _2871 = (_2809 * 40u) + 20u;
                            _2884 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2871)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 3u)).x));
                            uint _2887 = (_2809 * 40u) + 24u;
                            vec4 _2900 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2887)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 3u)).x));
                            uint _2906 = (_2809 * 40u) + 28u;
                            vec4 _2919 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2906)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 3u)).x));
                            _2931 = fma(_2182, _2919.z, fma(_2181, _2919.y, _2919.x * _2180)) + _2919.w;
                            _2932 = !((fma(_2182, _2900.z, fma(_2181, _2900.y, _2900.x * _2180)) + _2900.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2932)
                            {
                                float _2959 = _2824.x - _2180;
                                float _2960 = _2824.y - _2181;
                                float _2961 = _2824.z - _2182;
                                float _2962 = dot(vec3(_2959, _2960, _2961), vec3(_2959, _2960, _2961));
                                float _2965 = inversesqrt(_2962);
                                float _2966 = _2965 * _2959;
                                float _2967 = _2965 * _2960;
                                float _2968 = _2965 * _2961;
                                float _2972 = 1.0 - (_2962 / (_2825 * _2825));
                                float _4019 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
                                float _2973 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
                                float _2977 = sqrt(_2962) * _2840.w;
                                float _2979 = 1.39999997615814208984375 / (_2977 + 1.39999997615814208984375);
                                float _2980 = _2979 * _2979;
                                float _2983 = ((1.0 - _2980) * dot(vec3(_2966, _2967, _2968), vec3(_415, _418, _421))) + _2980;
                                float _2986 = _2977 * _2977;
                                float _2990 = (fma(_2182, _2868.z, fma(_2181, _2868.y, _2868.x * _2180)) + _2868.w) / _2931;
                                float _2991 = (fma(_2182, _2884.z, fma(_2181, _2884.y, _2884.x * _2180)) + _2884.w) / _2931;
                                float _2995 = 1.0 - dot(vec2(_2990, _2991), vec2(_2990, _2991));
                                float _4035 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                                float _2996 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
                                float _2997 = _2996 * (((isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0))) * _2973) / ((_2986 * 0.699999988079071044921875) + 1.0));
                                float _3009 = exp2(log2(1.0 / ((_2986 * 3.5) + 5.0)) * 0.25);
                                float _3010 = 1.0 - _492;
                                float _3017 = sqrt(1.0 - ((1.0 - (_3010 * _3010)) * (1.0 - (_3009 * _3009))));
                                float _3018 = _3017 * _3017;
                                float _3019 = _3018 * _3018;
                                float _3020 = _2966 - _2466;
                                float _3021 = _2967 - _2467;
                                float _3022 = _2968 - _2468;
                                float _3026 = inversesqrt(dot(vec3(_3020, _3021, _3022), vec3(_3020, _3021, _3022)));
                                float _3030 = dot(vec3(_415, _418, _421), vec3((-0.0) - _2466, (-0.0) - _2467, (-0.0) - _2468));
                                float _4046 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                                float _3033 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
                                float _3034 = dot(vec3(_415, _418, _421), vec3(_3026 * _3020, _3026 * _3021, _3026 * _3022));
                                float _4057 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                                float _3037 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
                                float _3041 = ((_3037 * _3037) * (_3019 + (-1.0))) + 1.0;
                                float _3042 = _2979 * _3018;
                                float _3043 = _3042 * _3042;
                                float _3049 = ((1.0 - _3043) * dot(vec3(_415, _418, _421), vec3(_2966, _2967, _2968))) + _3043;
                                float _4068 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                                float _3050 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
                                float _3051 = 1.0 - _3018;
                                float _3061 = (0.5 / (((_3050 * ((_3033 * _3051) + _3018)) + 9.9999999392252902907785028219223e-09) + (((_3050 * _3051) + _3018) * _3033))) * _3050;
                                float _4079 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                                float _3071 = (_2996 * _2973) * (((_3019 * 3.1415927410125732421875) * (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0)))) / ((_3041 * _3041) * ((_2986 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3071 * _2852.x;
                                frontier_phi_73_pred_1 = _3071 * _2852.y;
                                frontier_phi_73_pred_2 = _2997 * _2840.z;
                                frontier_phi_73_pred_3 = _2997 * _2840.y;
                                frontier_phi_73_pred_4 = _2997 * _2840.x;
                                frontier_phi_73_pred_5 = _3071 * _2852.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3075 = frontier_phi_73_pred;
                            _3076 = frontier_phi_73_pred_1;
                            _3080 = frontier_phi_73_pred_2;
                            _3079 = frontier_phi_73_pred_3;
                            _3078 = frontier_phi_73_pred_4;
                            _3077 = frontier_phi_73_pred_5;
                            _2782 = _3078 + _2795;
                            _2783 = _3079 + _2796;
                            _2784 = _3080 + _2797;
                            _2779 = _3075 + _2792;
                            _2780 = _3076 + _2793;
                            _2781 = _3077 + _2794;
                            if (_2799 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2792 = _2779;
                                _2793 = _2780;
                                _2794 = _2781;
                                _2795 = _2782;
                                _2796 = _2783;
                                _2797 = _2784;
                                _2798 = _2799;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2782;
                        frontier_phi_67_pred_1 = _2783;
                        frontier_phi_67_pred_2 = _2784;
                        frontier_phi_67_pred_3 = _2781;
                        frontier_phi_67_pred_4 = _2780;
                        frontier_phi_67_pred_5 = _2779;
                    }
                    _2447 = frontier_phi_67_pred;
                    _2449 = frontier_phi_67_pred_1;
                    _2451 = frontier_phi_67_pred_2;
                    _2445 = frontier_phi_67_pred_3;
                    _2443 = frontier_phi_67_pred_4;
                    _2441 = frontier_phi_67_pred_5;
                    uint _2586 = _2585 + 1u;
                    if (_2586 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2579 = _2441;
                        _2580 = _2443;
                        _2581 = _2445;
                        _2582 = _2447;
                        _2583 = _2449;
                        _2584 = _2451;
                        _2585 = _2586;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2449;
                frontier_phi_55_56_ladder_1 = _2451;
                frontier_phi_55_56_ladder_2 = _2447;
                frontier_phi_55_56_ladder_3 = _2445;
                frontier_phi_55_56_ladder_4 = _2443;
                frontier_phi_55_56_ladder_5 = _2441;
            }
            else
            {
                frontier_phi_55_56_ladder = _2335;
                frontier_phi_55_56_ladder_1 = _2337;
                frontier_phi_55_56_ladder_2 = _2333;
                frontier_phi_55_56_ladder_3 = _2331;
                frontier_phi_55_56_ladder_4 = _2329;
                frontier_phi_55_56_ladder_5 = _2327;
            }
            _2440 = frontier_phi_55_56_ladder_5;
            _2442 = frontier_phi_55_56_ladder_4;
            _2444 = frontier_phi_55_56_ladder_3;
            _2446 = frontier_phi_55_56_ladder_2;
            _2448 = frontier_phi_55_56_ladder;
            _2450 = frontier_phi_55_56_ladder_1;
        }
        float _2455 = isnan(1.0) ? _476 : (isnan(_476) ? 1.0 : min(_476, 1.0));
        _2239 = (_2455 * _2446) + _1672;
        _2241 = (_2455 * _2448) + _1674;
        _2243 = (_2455 * _2450) + _1676;
        _2245 = ((_2440 * _460) * _2455) + _2020;
        _2247 = ((_2442 * _462) * _2455) + _2022;
        _2249 = ((_2444 * _463) * _2455) + _2024;
    }
    else
    {
        _2239 = _1672;
        _2241 = _1674;
        _2243 = _1676;
        _2245 = _2020;
        _2247 = _2022;
        _2249 = _2024;
    }
    float _4095 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _4106 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _4117 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    uint _2269 = _434 + 6u;
    float _2277 = _393 / cbSceneParam._m0[86u].x;
    float _2278 = _394 / cbSceneParam._m0[86u].y;
    vec4 _2292 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2277, _2278, (log2((isnan(cbSceneParam._m0[77u].w) ? _326 : (isnan(_326) ? cbSceneParam._m0[77u].w : min(_326, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2294 = _2292.x;
    float _2295 = _2292.y;
    float _2296 = _2292.z;
    float _2297 = _2292.w;
    float _2390;
    float _2392;
    float _2394;
    float _2396;
    if (_326 > cbSceneParam._m0[78u].w)
    {
        float _2352 = isnan(_326) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _326 : min(cbSceneParam._m0[80u].w, _326));
        float _2353 = _2352 / _326;
        float _2364 = _2353 * _378;
        float _2365 = _379 * _2353;
        float _2366 = (-0.0) - _2365;
        float _2368 = _2353 * _380;
        float _2370 = (cbSceneParam._m0[77u].w * _2366) / _2352;
        float _2371 = _2370 + cbSceneParam._m0[79u].w;
        float _2372 = cbSceneParam._m0[79u].w - _2365;
        float _2378 = sqrt(((_2364 * _2364) + (_2365 * _2365)) + (_2368 * _2368));
        float _2381 = (1.0 - (cbSceneParam._m0[77u].w / _2352)) * _2378;
        float _2386 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2388 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2541;
        if (abs((_2366 - _2370) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2541 = ((((_2371 > 0.0) ? exp2(_2386 * _2371) : (2.0 - exp2(_2388 * _2371))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2381;
        }
        else
        {
            float _2501 = 1.0 / cbSceneParam._m0[80u].x;
            float _2502 = isnan(_2372) ? _2371 : (isnan(_2371) ? _2372 : max(_2371, _2372));
            float _2503 = isnan(_2372) ? _2371 : (isnan(_2371) ? _2372 : min(_2371, _2372));
            float _2512 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : min(_2502, 0.0));
            float _2513 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : min(_2503, 0.0));
            _2541 = ((abs(_2378 / _2366) * cbSceneParam._m0[80u].y) * ((((_2512 - _2513) * 2.0) - ((exp2(_2386 * (isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0)))) - exp2(_2386 * (isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0))))) * _2501)) - ((exp2(_2388 * _2512) - exp2(_2388 * _2513)) * _2501))) + (_2381 * cbSceneParam._m0[80u].z);
        }
        vec4 _2543 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2277, _2278, 1.0), 0.0);
        float _2552 = exp2((_2541 * (-1.44269502162933349609375)) * (1.0 - _2543.w));
        float _2553 = log2(_2552);
        float _2569 = log2(_2297);
        _2390 = (exp2(_2569 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2553 * cbSceneParam._m0[78u].x)) * _2543.x) / cbSceneParam._m0[78u].x)) + _2294;
        _2392 = (exp2(_2569 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2553 * cbSceneParam._m0[78u].y)) * _2543.y) / cbSceneParam._m0[78u].y)) + _2295;
        _2394 = (exp2(_2569 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2553 * cbSceneParam._m0[78u].z)) * _2543.z) / cbSceneParam._m0[78u].z)) + _2296;
        _2396 = _2552 * _2297;
    }
    else
    {
        _2390 = _2294;
        _2392 = _2295;
        _2394 = _2296;
        _2396 = _2297;
    }
    float _2408 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2409 = _2408 == 3.0;
    float _2410 = log2(_2396);
    float _2417 = exp2(_2410 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_2239 + ((isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0))) * _476))) + ((_2245 + ((isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))) * _1285)) * cbPerFrame._m0[3u].x));
    float _2418 = exp2(_2410 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_2241 + ((isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0))) * _476))) + ((_2247 + ((isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))) * _1285)) * cbPerFrame._m0[3u].x));
    float _2419 = exp2(_2410 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_2243 + ((isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0))) * _476))) + ((_2249 + ((isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))) * _1285)) * cbPerFrame._m0[3u].x));
    float _2428 = (_2408 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2428 * (_2409 ? _2417 : (_2417 + (cbSceneParam._m0[72u].w * _2390)));
    SV_Target.y = _2428 * (_2409 ? _2418 : (_2418 + (cbSceneParam._m0[72u].w * _2392)));
    SV_Target.z = _2428 * (_2409 ? _2419 : (_2419 + (cbSceneParam._m0[72u].w * _2394)));
    SV_Target.w = cbInstanceData._m0[_2269].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2269].w;
}


