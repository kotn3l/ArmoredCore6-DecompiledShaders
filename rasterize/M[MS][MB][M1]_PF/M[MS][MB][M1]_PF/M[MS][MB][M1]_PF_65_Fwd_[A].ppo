#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1221;
float _3603;
float _3604;
float _3605;
float _3606;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _251 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _253 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _254 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3615 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _3626 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3637 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    uint _264 = uint(roundEven(NORMAL.w)) * 13u;
    uint _269 = _264 + 1u;
    uint _273 = _264 + 2u;
    float _282 = sqrt(((cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x)) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x));
    float _283 = _282 * TEXCOORD.z;
    float _284 = _282 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _283) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _284) + cbTextureTilingScale._m0[13u].w));
    vec4 _321 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _326 = _321.x * cbMtdParam._m0[11u].x;
    float _327 = _321.y * cbMtdParam._m0[11u].y;
    float _328 = _321.z * cbMtdParam._m0[11u].z;
    vec4 _347 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _283) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _284) + cbTextureTilingScale._m0[5u].w));
    vec4 _381 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _383 = _381.x;
    float _395 = dot(vec4(_383, _381.yzw), vec4(cbMtdParam._m0[28u].w, cbMtdParam._m0[29u].xy, 0.0));
    float _412 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_383 - _395) * cbMtdParam._m0[24u].y) + _395) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3648 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _413 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
    float _420 = (_413 * ((_347.x * cbMtdParam._m0[12u].x) - _326)) + _326;
    float _421 = (_413 * ((_347.y * cbMtdParam._m0[12u].y) - _327)) + _327;
    float _422 = (_413 * ((_347.z * cbMtdParam._m0[12u].z) - _328)) + _328;
    float _426 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _297.x) * _420;
    float _429 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _297.y) * _421;
    float _432 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _297.z) * _422;
    float _439 = ((_420 - _426) * (isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0)))) + _426;
    float _440 = ((_421 - _429) * (isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0)))) + _429;
    float _441 = ((_422 - _432) * (isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0)))) + _432;
    vec4 _454 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _283) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _284) + cbTextureTilingScale._m0[20u].w));
    vec4 _479 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _283) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _284) + cbTextureTilingScale._m0[4u].w));
    vec4 _496 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _498 = _496.x;
    float _499 = _496.y;
    float _500 = _496.z;
    float _509 = ((_479.z - _500) * _413) + _500;
    float _512 = ((((_479.x - _498) * _413) + _498) * 2.0) + (-1.0);
    float _513 = ((((_479.y - _499) * _413) + _499) * 2.0) + (-1.0);
    float _514 = dot(vec2(_512, _513), vec2(_512, _513));
    float _3659 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _519 = sqrt(1.0 - (isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))));
    vec4 _541 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _553 = (_512 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_454.x * 2.0) + (-1.0)))) + (((_541.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _554 = (_513 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_454.y * 2.0) + (-1.0)))) + (((_541.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    vec4 _580 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _582 = _580.x;
    float _600 = ((texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _283) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _284) + cbTextureTilingScale._m0[9u].w)).x - _582) * _413) + _582;
    float _604 = ((texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _600) * cbMtdParam._m0[19u].z) + _600;
    float _609 = (((_454.z - _509) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _509;
    float _613 = ((_541.z - _609) * cbMtdParam._m0[19u].w) + _609;
    float _615 = cbMtdParam._m0[22u].x + _541.w;
    float _617 = gl_FragCoord.x * 0.125;
    float _619 = gl_FragCoord.y * 0.125;
    float _630 = fma(_519, _230 * NORMAL.x, fma(_554, _237 * TANGENT.x, (_223 * _215) * _553));
    float _633 = fma(_519, _230 * NORMAL.y, fma(_554, _237 * TANGENT.y, (_223 * _216) * _553));
    float _636 = fma(_519, _230 * NORMAL.z, fma(_554, _237 * TANGENT.z, (_223 * _217) * _553));
    float _640 = inversesqrt(dot(vec3(_630, _633, _636), vec3(_630, _633, _636)));
    float _641 = _640 * _630;
    float _642 = _640 * _633;
    float _643 = _640 * _636;
    float _3670 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _644 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
    float _3681 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _3692 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _3703 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _3714 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _3725 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _649 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_617, _619)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _667 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _708 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _718 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _708);
    float _719 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _708);
    float _720 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _708);
    float _724 = inversesqrt(dot(vec3(_718, _719, _720), vec3(_718, _719, _720)));
    float _725 = _718 * _724;
    float _726 = _719 * _724;
    float _727 = _720 * _724;
    vec4 _729 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_617, _619));
    float _731 = _729.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _903 = sqrt(((_718 * _718) + (_719 * _719)) + (_720 * _720));
        float _909 = (cbMatDynParam._m0[5u].x * _903) + cbMatDynParam._m0[5u].y;
        float _3736 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _914 = (cbMatDynParam._m0[5u].z * _903) + cbMatDynParam._m0[5u].w;
        float _3747 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) - _910)) + _910) < ((_731 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _742 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _743 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _761 = fma(_643, cbSceneParam._m0[5u].z, fma(_642, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _641));
    float _764 = fma(_643, cbSceneParam._m0[6u].z, fma(_642, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _641));
    float _767 = fma(_643, cbSceneParam._m0[7u].z, fma(_642, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _641));
    uint _780 = _264 + 9u;
    uint _781 = _780 + uint(cbMatDynParam._m0[0u].w);
    float _787 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0)))) * cbInstanceData._m0[_781].x;
    float _788 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0)))) * cbInstanceData._m0[_781].y;
    float _789 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0)))) * cbInstanceData._m0[_781].z;
    float _3758 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _790 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _3769 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _791 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
    float _3780 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _792 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _793 = 1.0 - _649;
    float _794 = _790 * _793;
    float _795 = _791 * _793;
    float _796 = _792 * _793;
    float _801 = (_790 + (-0.039999999105930328369140625)) * _649;
    float _802 = (_791 + (-0.039999999105930328369140625)) * _649;
    float _803 = (_792 + (-0.039999999105930328369140625)) * _649;
    float _804 = _801 + 0.039999999105930328369140625;
    float _806 = _802 + 0.039999999105930328369140625;
    float _807 = _803 + 0.039999999105930328369140625;
    vec4 _816 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _742, cbSceneParam._m0[86u].y * _743));
    float _820 = ((isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) * TEXCOORD_5.w) * _816.x;
    float _821 = dot(vec3(_641, _642, _643), vec3(_725, _726, _727));
    float _824 = _821 * 2.0;
    float _828 = (_824 * _641) - _725;
    float _829 = (_824 * _642) - _726;
    float _830 = (_824 * _643) - _727;
    float _834 = abs(dot(vec3(_725, _726, _727), vec3(_641, _642, _643)));
    float _3791 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _836 = sqrt(_644);
    float _849 = exp2((_836 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_836 * 3.0));
    float _855 = (1.0 - _849) * ((_836 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _856 = _849 * _836;
    float _884 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _888 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _892 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1220;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _945 = fma(_892, cbModelParam._m0[26u].z, fma(_888, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _884));
        float _949 = fma(_892, cbModelParam._m0[27u].z, fma(_888, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _884));
        float _953 = fma(_892, cbModelParam._m0[28u].z, fma(_888, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _884));
        float _978 = _884 + _641;
        float _979 = _888 + _642;
        float _980 = _892 + _643;
        float _990 = fma(_980, cbModelParam._m0[26u].z, fma(_979, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _978)) - _945;
        float _991 = fma(_980, cbModelParam._m0[27u].z, fma(_979, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _978)) - _949;
        float _992 = fma(_980, cbModelParam._m0[28u].z, fma(_979, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _978)) - _953;
        float _996 = inversesqrt(dot(vec3(_990, _991, _992), vec3(_990, _991, _992)));
        float _1009 = ((_996 * _990) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_945 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1010 = ((_996 * _991) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_949 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1011 = ((_996 * _992) / cbModelParam._m0[34u].z) + ((((((_953 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        float _1048 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1014.x + (-0.5));
        float _1050 = _1048 * (_1014.y + (-0.5));
        float _1051 = _1048 * (_1014.z + (-0.5));
        float _1058 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1021.x + (-0.5));
        float _1060 = _1058 * (_1021.y + (-0.5));
        float _1061 = _1058 * (_1021.z + (-0.5));
        float _1068 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1028.x + (-0.5));
        float _1070 = _1068 * (_1028.y + (-0.5));
        float _1071 = _1068 * (_1028.z + (-0.5));
        float _1078 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1035.x + (-0.5));
        float _1080 = _1078 * (_1035.y + (-0.5));
        float _1081 = _1078 * (_1035.z + (-0.5));
        float _1082 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1083 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1084 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1085 = _1049 * 0.5;
        float _1086 = _1059 * 0.5;
        float _1087 = _1069 * 0.5;
        float _1088 = dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087));
        float _1093 = (_1088 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1088);
        float _1102 = (dot(vec3(_641, _642, _643), vec3(_1093 * _1085, _1093 * _1086, _1093 * _1087)) + 1.0) * 0.5;
        float _3817 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1112 = sqrt(((_1086 * _1086) + (_1085 * _1085)) + (_1087 * _1087)) / (_1082 + 9.9999997473787516355514526367188e-06);
        float _3828 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1114 = _1113 * 2.0;
        float _1118 = (1.0 - _1113) / (_1113 + 1.0);
        float _3839 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1128 = ((((1.0 - _1119) * (_1114 + 2.0)) * exp2(log2(isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_1114 + 1.0))) + _1119) * _1082;
        float _1129 = _1050 * 0.5;
        float _1130 = _1060 * 0.5;
        float _1131 = _1070 * 0.5;
        float _1132 = dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131));
        float _1137 = (_1132 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1132);
        float _1145 = (dot(vec3(_641, _642, _643), vec3(_1137 * _1129, _1137 * _1130, _1137 * _1131)) + 1.0) * 0.5;
        float _3850 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1154 = sqrt(((_1130 * _1130) + (_1129 * _1129)) + (_1131 * _1131)) / (_1083 + 9.9999997473787516355514526367188e-06);
        float _3861 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1156 = _1155 * 2.0;
        float _1160 = (1.0 - _1155) / (_1155 + 1.0);
        float _3872 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1170 = ((((1.0 - _1161) * (_1156 + 2.0)) * exp2(log2(isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * (_1156 + 1.0))) + _1161) * _1083;
        float _1171 = _1051 * 0.5;
        float _1172 = _1061 * 0.5;
        float _1173 = _1071 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1187 = (dot(vec3(_641, _642, _643), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1196 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1084 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1198 = _1197 * 2.0;
        float _1202 = (1.0 - _1197) / (_1197 + 1.0);
        float _3905 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1212 = ((((1.0 - _1203) * (_1198 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1198 + 1.0))) + _1203) * _1084;
        _1220 = _1051;
        _1222 = _1050;
        _1223 = _1049;
        _1224 = _1061;
        _1225 = _1060;
        _1226 = _1059;
        _1227 = _1071;
        _1228 = _1070;
        _1229 = _1069;
        _1230 = _1084;
        _1231 = _1083;
        _1232 = _1082;
        _1233 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)));
        _1234 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)));
        _1235 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)));
    }
    else
    {
        _1220 = _1221;
        _1222 = _1221;
        _1223 = _1221;
        _1224 = _1221;
        _1225 = _1221;
        _1226 = _1221;
        _1227 = _1221;
        _1228 = _1221;
        _1229 = _1221;
        _1230 = _1221;
        _1231 = _1221;
        _1232 = _1221;
        _1233 = 0.0;
        _1234 = 0.0;
        _1235 = 0.0;
    }
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1260 = fma(_892, cbModelParam._m0[30u].z, fma(_888, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _884));
        float _1264 = fma(_892, cbModelParam._m0[31u].z, fma(_888, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _884));
        float _1268 = fma(_892, cbModelParam._m0[32u].z, fma(_888, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _884));
        float _1291 = _884 + _641;
        float _1292 = _888 + _642;
        float _1293 = _892 + _643;
        float _1303 = fma(_1293, cbModelParam._m0[30u].z, fma(_1292, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1291)) - _1260;
        float _1304 = fma(_1293, cbModelParam._m0[31u].z, fma(_1292, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1291)) - _1264;
        float _1305 = fma(_1293, cbModelParam._m0[32u].z, fma(_1292, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1291)) - _1268;
        float _1309 = inversesqrt(dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305)));
        float _1322 = ((_1309 * _1303) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1260 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1323 = ((_1309 * _1304) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1264 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1324 = ((_1309 * _1305) / cbModelParam._m0[35u].z) + ((((((_1268 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1326 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        vec4 _1333 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        vec4 _1340 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        float _1359 = exp2((_1326.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1326.x + (-0.5));
        float _1361 = _1359 * (_1326.y + (-0.5));
        float _1362 = _1359 * (_1326.z + (-0.5));
        float _1369 = exp2((_1333.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1333.x + (-0.5));
        float _1371 = _1369 * (_1333.y + (-0.5));
        float _1372 = _1369 * (_1333.z + (-0.5));
        float _1379 = exp2((_1340.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1340.x + (-0.5));
        float _1381 = _1379 * (_1340.y + (-0.5));
        float _1382 = _1379 * (_1340.z + (-0.5));
        float _1389 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1347.x + (-0.5));
        float _1391 = _1389 * (_1347.y + (-0.5));
        float _1392 = _1389 * (_1347.z + (-0.5));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1395 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1396 = _1360 * 0.5;
        float _1397 = _1370 * 0.5;
        float _1398 = _1380 * 0.5;
        float _1399 = dot(vec3(_1396, _1397, _1398), vec3(_1396, _1397, _1398));
        float _1404 = (_1399 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1399);
        float _1412 = (dot(vec3(_641, _642, _643), vec3(_1404 * _1396, _1404 * _1397, _1404 * _1398)) + 1.0) * 0.5;
        float _3946 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1421 = sqrt(((_1397 * _1397) + (_1396 * _1396)) + (_1398 * _1398)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _3957 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1423 = _1422 * 2.0;
        float _1427 = (1.0 - _1422) / (_1422 + 1.0);
        float _3968 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1437 = ((((1.0 - _1428) * (_1423 + 2.0)) * exp2(log2(isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * (_1423 + 1.0))) + _1428) * _1393;
        float _1438 = _1361 * 0.5;
        float _1439 = _1371 * 0.5;
        float _1440 = _1381 * 0.5;
        float _1441 = dot(vec3(_1438, _1439, _1440), vec3(_1438, _1439, _1440));
        float _1446 = (_1441 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1441);
        float _1454 = (dot(vec3(_641, _642, _643), vec3(_1446 * _1438, _1446 * _1439, _1446 * _1440)) + 1.0) * 0.5;
        float _3979 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1463 = sqrt(((_1439 * _1439) + (_1438 * _1438)) + (_1440 * _1440)) / (_1394 + 9.9999997473787516355514526367188e-06);
        float _3990 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1465 = _1464 * 2.0;
        float _1469 = (1.0 - _1464) / (_1464 + 1.0);
        float _4001 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1479 = ((((1.0 - _1470) * (_1465 + 2.0)) * exp2(log2(isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * (_1465 + 1.0))) + _1470) * _1394;
        float _1480 = _1362 * 0.5;
        float _1481 = _1372 * 0.5;
        float _1482 = _1382 * 0.5;
        float _1483 = dot(vec3(_1480, _1481, _1482), vec3(_1480, _1481, _1482));
        float _1488 = (_1483 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1483);
        float _1496 = (dot(vec3(_641, _642, _643), vec3(_1488 * _1480, _1488 * _1481, _1488 * _1482)) + 1.0) * 0.5;
        float _4012 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1505 = sqrt(((_1481 * _1481) + (_1480 * _1480)) + (_1482 * _1482)) / (_1395 + 9.9999997473787516355514526367188e-06);
        float _4023 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1507 = _1506 * 2.0;
        float _1511 = (1.0 - _1506) / (_1506 + 1.0);
        float _4034 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1521 = ((((1.0 - _1512) * (_1507 + 2.0)) * exp2(log2(isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_1507 + 1.0))) + _1512) * _1395;
        _1529 = _1362;
        _1530 = _1361;
        _1531 = _1360;
        _1532 = _1372;
        _1533 = _1371;
        _1534 = _1370;
        _1535 = _1382;
        _1536 = _1381;
        _1537 = _1380;
        _1538 = _1395;
        _1539 = _1394;
        _1540 = _1393;
        _1541 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)));
        _1542 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)));
        _1543 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)));
    }
    else
    {
        _1529 = _1221;
        _1530 = _1221;
        _1531 = _1221;
        _1532 = _1221;
        _1533 = _1221;
        _1534 = _1221;
        _1535 = _1221;
        _1536 = _1221;
        _1537 = _1221;
        _1538 = _1221;
        _1539 = _1221;
        _1540 = _1221;
        _1541 = 0.0;
        _1542 = 0.0;
        _1543 = 0.0;
    }
    float _1553 = (cbModelParam._m0[1u].x * (_1541 - _1233)) + _1233;
    float _1554 = (cbModelParam._m0[1u].x * (_1542 - _1234)) + _1234;
    float _1555 = (cbModelParam._m0[1u].x * (_1543 - _1235)) + _1235;
    float _1576 = fma(_1555, cbSceneParam._m0[89u].z, fma(_1554, cbSceneParam._m0[89u].y, _1553 * cbSceneParam._m0[89u].x));
    float _1579 = fma(_1555, cbSceneParam._m0[90u].z, fma(_1554, cbSceneParam._m0[90u].y, _1553 * cbSceneParam._m0[90u].x));
    float _1582 = fma(_1555, cbSceneParam._m0[91u].z, fma(_1554, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1553));
    float _1597 = _828 * 0.5;
    float _1598 = _829 * 0.5;
    float _1599 = _830 * 0.5;
    float _1600 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1531, _1534, _1537, _1540));
    float _1603 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1530, _1533, _1536, _1539));
    float _1606 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1529, _1532, _1535, _1538));
    float _1640;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1613 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1220, _1224, _1227, _1230));
        float _1617 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1222, _1225, _1228, _1231));
        float _1621 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1223, _1226, _1229, _1232));
        float _1628 = dot(vec4(cbModelParam._m0[39u]), vec4(_1597, _1598, _1599, 1.0));
        _1640 = dot(vec3(isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)), isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)), isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1628) ? 0.0 : (isnan(0.0) ? _1628 : max(0.0, _1628))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1640 = 1.0;
    }
    float _1651;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1642 = dot(vec4(cbModelParam._m0[40u]), vec4(_1597, _1598, _1599, 1.0));
        _1651 = dot(vec3(isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)), isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)), isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1642) ? 0.0 : (isnan(0.0) ? _1642 : max(0.0, _1642))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1651 = 1.0;
    }
    float _1655 = (_1651 * cbModelParam._m0[1u].x) + (_1640 * (1.0 - cbModelParam._m0[1u].x));
    float _1665 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _644);
    float _1666 = isnan(_1665) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1665 : min(cbModelParam._m0[25u].z, _1665));
    float _1748;
    float _1750;
    float _1752;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1715 = fma(_892, cbModelParam._m0[13u].z, fma(_888, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _884)) + cbModelParam._m0[13u].w;
        float _1719 = fma(_892, cbModelParam._m0[14u].z, fma(_888, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _884)) + cbModelParam._m0[14u].w;
        float _1723 = fma(_892, cbModelParam._m0[15u].z, fma(_888, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _884)) + cbModelParam._m0[15u].w;
        float _1726 = fma(_830, cbModelParam._m0[13u].z, fma(_829, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _828));
        float _1729 = fma(_830, cbModelParam._m0[14u].z, fma(_829, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _828));
        float _1732 = fma(_830, cbModelParam._m0[15u].z, fma(_829, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _828));
        float _1760;
        if (_1726 > 0.0)
        {
            _1760 = abs((1.0 - _1715) / _1726);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1726 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1715 + 1.0) / _1726);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1760 = frontier_phi_19_17_ladder;
        }
        float _1964;
        if (_1729 > 0.0)
        {
            _1964 = abs((1.0 - _1719) / _1729);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1729 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1719 + 1.0) / _1729);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1964 = frontier_phi_28_24_ladder;
        }
        float _2218;
        if (_1732 > 0.0)
        {
            _2218 = abs((1.0 - _1723) / _1732);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1732 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1723 + 1.0) / _1732);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2218 = frontier_phi_40_35_ladder;
        }
        float _2220 = isnan(_1964) ? _1760 : (isnan(_1760) ? _1964 : min(_1760, _1964));
        float _2221 = isnan(_2218) ? _2220 : (isnan(_2220) ? _2218 : min(_2220, _2218));
        float _2225 = (_2221 * _1726) + _1715;
        float _2226 = (_2221 * _1729) + _1719;
        float _2227 = (_2221 * _1732) + _1723;
        float _2228 = _2221 * 9.9999997473787516355514526367188e-05;
        float _2230 = (-1.0) - _2228;
        float _2232 = _2228 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2227 > _2232) || ((_2227 < _2230) || ((_2226 > _2232) || ((_2226 < _2230) || ((_2225 < _2230) || (_2225 > _2232))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2355 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2227, cbModelParam._m0[9u].z, fma(_2226, cbModelParam._m0[9u].y, _2225 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2227, cbModelParam._m0[10u].z, fma(_2226, cbModelParam._m0[10u].y, _2225 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2227, cbModelParam._m0[11u].z, fma(_2226, cbModelParam._m0[11u].y, _2225 * cbModelParam._m0[11u].x))), _1666);
            frontier_phi_18_40_ladder = _2355.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2355.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2355.x * cbModelParam._m0[1u].y;
        }
        _1748 = frontier_phi_18_40_ladder_2;
        _1750 = frontier_phi_18_40_ladder_1;
        _1752 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1736 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_828, _829, _830), _1666);
        _1748 = _1736.x * cbModelParam._m0[1u].y;
        _1750 = _1736.y * cbModelParam._m0[1u].y;
        _1752 = _1736.z * cbModelParam._m0[1u].y;
    }
    float _1756 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _644);
    float _1757 = isnan(_1756) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1756 : min(cbModelParam._m0[25u].w, _1756));
    float _1848;
    float _1850;
    float _1852;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1812 = fma(_892, cbModelParam._m0[21u].z, fma(_888, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _884)) + cbModelParam._m0[21u].w;
        float _1816 = fma(_892, cbModelParam._m0[22u].z, fma(_888, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _884)) + cbModelParam._m0[22u].w;
        float _1820 = fma(_892, cbModelParam._m0[23u].z, fma(_888, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _884)) + cbModelParam._m0[23u].w;
        float _1823 = fma(_830, cbModelParam._m0[21u].z, fma(_829, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _828));
        float _1826 = fma(_830, cbModelParam._m0[22u].z, fma(_829, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _828));
        float _1829 = fma(_830, cbModelParam._m0[23u].z, fma(_829, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _828));
        float _1969;
        if (_1823 > 0.0)
        {
            _1969 = abs((1.0 - _1812) / _1823);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1823 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1812 + 1.0) / _1823);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1969 = frontier_phi_30_26_ladder;
        }
        float _2245;
        if (_1826 > 0.0)
        {
            _2245 = abs((1.0 - _1816) / _1826);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1826 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1816 + 1.0) / _1826);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2245 = frontier_phi_42_37_ladder;
        }
        float _2458;
        if (_1829 > 0.0)
        {
            _2458 = abs((1.0 - _1820) / _1829);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1829 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1820 + 1.0) / _1829);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2458 = frontier_phi_51_48_ladder;
        }
        float _2460 = isnan(_2245) ? _1969 : (isnan(_1969) ? _2245 : min(_1969, _2245));
        float _2461 = isnan(_2458) ? _2460 : (isnan(_2460) ? _2458 : min(_2460, _2458));
        float _2465 = (_2461 * _1823) + _1812;
        float _2466 = (_2461 * _1826) + _1816;
        float _2467 = (_2461 * _1829) + _1820;
        float _2468 = _2461 * 9.9999997473787516355514526367188e-05;
        float _2469 = (-1.0) - _2468;
        float _2471 = _2468 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2467 > _2471) || ((_2467 < _2469) || ((_2466 > _2471) || ((_2466 < _2469) || ((_2465 < _2469) || (_2465 > _2471))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2666 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2467, cbModelParam._m0[17u].z, fma(_2466, cbModelParam._m0[17u].y, _2465 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2467, cbModelParam._m0[18u].z, fma(_2466, cbModelParam._m0[18u].y, _2465 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2467, cbModelParam._m0[19u].z, fma(_2466, cbModelParam._m0[19u].y, _2465 * cbModelParam._m0[19u].x))), _1757);
            frontier_phi_27_51_ladder = _2666.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2666.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2666.x * cbModelParam._m0[1u].z;
        }
        _1848 = frontier_phi_27_51_ladder_2;
        _1850 = frontier_phi_27_51_ladder_1;
        _1852 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1832 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_828, _829, _830), _1757);
        _1848 = _1832.x * cbModelParam._m0[1u].z;
        _1850 = _1832.y * cbModelParam._m0[1u].z;
        _1852 = _1832.z * cbModelParam._m0[1u].z;
    }
    float _1865 = (((_855 * _804) + _856) * _820) * ((cbModelParam._m0[1u].w * (_1848 - _1748)) + _1748);
    float _1867 = (((_855 * _806) + _856) * _820) * ((cbModelParam._m0[1u].w * (_1850 - _1750)) + _1750);
    float _1869 = (((_855 * _807) + _856) * _820) * ((cbModelParam._m0[1u].w * (_1852 - _1752)) + _1752);
    float _1872 = fma(_1869, cbSceneParam._m0[89u].z, fma(_1867, cbSceneParam._m0[89u].y, _1865 * cbSceneParam._m0[89u].x));
    float _1875 = fma(_1869, cbSceneParam._m0[90u].z, fma(_1867, cbSceneParam._m0[90u].y, _1865 * cbSceneParam._m0[90u].x));
    float _1878 = fma(_1869, cbSceneParam._m0[91u].z, fma(_1867, cbSceneParam._m0[91u].y, _1865 * cbSceneParam._m0[91u].x));
    uvec4 _1888 = floatBitsToUint(cbInstanceData._m0[_264 + 5u]);
    uint _1890 = _1888.x * 14u;
    uint _1891 = _1890 + 13u;
    float _1898 = _820 + (-1.0);
    float _1903 = (cbLight._m0[_1891].x * _1898) + 1.0;
    float _1904 = (cbLight._m0[_1891].y * _1898) + 1.0;
    float _1905 = (cbLight._m0[_1891].z * _1898) + 1.0;
    float _1906 = (cbLight._m0[_1891].w * _1898) + 1.0;
    uint _1907 = _1890 + 5u;
    float _1913 = isnan(1.0) ? _1904 : (isnan(_1904) ? 1.0 : min(_1904, 1.0));
    uint _1917 = _1890 + 4u;
    float _1923 = isnan(1.0) ? _1903 : (isnan(_1903) ? 1.0 : min(_1903, 1.0));
    uint _1927 = _1890 | 1u;
    float _1938 = dot(vec3(cbLight._m0[_1890].xyz), vec3(_641, _642, _643));
    float _1941 = dot(vec3(cbLight._m0[_1927].xyz), vec3(_641, _642, _643));
    float _4170 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
    float _4181 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _1946 = (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * 0.3183098733425140380859375;
    float _1948 = (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * 0.3183098733425140380859375;
    float _1955 = ((cbLight._m0[_1907].x * _1913) * _1948) + ((cbLight._m0[_1917].x * _1923) * _1946);
    float _1956 = ((_1913 * cbLight._m0[_1907].y) * _1948) + ((_1923 * cbLight._m0[_1917].y) * _1946);
    float _1957 = ((_1913 * cbLight._m0[_1907].z) * _1948) + ((_1923 * cbLight._m0[_1917].z) * _1946);
    uvec4 _1961 = floatBitsToUint(cbLight._m0[_1890 + 12u]);
    bool _1963 = _1961.x == 0u;
    float _1974;
    float _1976;
    float _1978;
    if (_1963)
    {
        _1974 = _1955;
        _1976 = _1956;
        _1978 = _1957;
    }
    else
    {
        uint _1982 = _1890 + 6u;
        float _1998 = (dot(vec3(cbLight._m0[_1890 + 2u].xyz), vec3(_641, _642, _643)) * 0.5) + 0.5;
        float _1999 = _1998 * _1998;
        float _4192 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2000 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _2001 = isnan(1.0) ? _1905 : (isnan(_1905) ? 1.0 : min(_1905, 1.0));
        _1974 = (((cbLight._m0[_1982].x * 0.3183098733425140380859375) * _2000) * _2001) + _1955;
        _1976 = (((cbLight._m0[_1982].y * 0.3183098733425140380859375) * _2000) * _2001) + _1956;
        _1978 = (((cbLight._m0[_1982].z * 0.3183098733425140380859375) * _2000) * _2001) + _1957;
    }
    bool _1981 = _1961.y == 0u;
    float _2019;
    float _2021;
    float _2023;
    if (_1981)
    {
        _2019 = _1974;
        _2021 = _1976;
        _2023 = _1978;
    }
    else
    {
        uint _2189 = _1890 + 7u;
        float _2205 = (dot(vec3(cbLight._m0[_1890 + 3u].xyz), vec3(_641, _642, _643)) * 0.5) + 0.5;
        float _2206 = _2205 * _2205;
        float _4208 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2207 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _2208 = isnan(1.0) ? _1906 : (isnan(_1906) ? 1.0 : min(_1906, 1.0));
        _2019 = (((cbLight._m0[_2189].x * 0.3183098733425140380859375) * _2207) * _2208) + _1974;
        _2021 = (((cbLight._m0[_2189].y * 0.3183098733425140380859375) * _2207) * _2208) + _1976;
        _2023 = (((cbLight._m0[_2189].z * 0.3183098733425140380859375) * _2207) * _2208) + _1978;
    }
    uint _2026 = _1890 + 8u;
    float _2039 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1890].w)) * _644) * 0.949999988079071044921875);
    float _2040 = _2039 * _2039;
    float _2041 = cbLight._m0[_1890].x + _725;
    float _2042 = cbLight._m0[_1890].y + _726;
    float _2043 = cbLight._m0[_1890].z + _727;
    float _2047 = inversesqrt(dot(vec3(_2041, _2042, _2043), vec3(_2041, _2042, _2043)));
    float _2048 = _2047 * _2041;
    float _2049 = _2047 * _2042;
    float _2050 = _2047 * _2043;
    float _2051 = dot(vec3(_641, _642, _643), vec3(cbLight._m0[_1890].xyz));
    float _4224 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _2054 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
    float _4235 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _2055 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
    float _2056 = dot(vec3(_641, _642, _643), vec3(_2048, _2049, _2050));
    float _4246 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2059 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
    float _2060 = dot(vec3(cbLight._m0[_1890].xyz), vec3(_2048, _2049, _2050));
    float _4257 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2064 = _2040 * _2040;
    float _2068 = ((_2059 * _2059) * (_2064 + (-1.0))) + 1.0;
    float _2076 = exp2(log2(1.0 - (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0)))) * 5.0);
    float _2077 = 0.959999978542327880859375 - _801;
    float _2079 = 0.959999978542327880859375 - _802;
    float _2080 = 0.959999978542327880859375 - _803;
    float _2087 = 1.0 - _2040;
    float _2098 = (0.5 / (((_2055 * ((_2054 * _2087) + _2040)) + 9.9999999392252902907785028219223e-09) + (((_2055 * _2087) + _2040) * _2054))) * _2054;
    float _4268 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2100 = (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_2064 / ((_2068 * _2068) * 3.141590118408203125));
    uint _2111 = _1890 + 9u;
    float _2122 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1927].w)) * _644) * 0.949999988079071044921875);
    float _2123 = _2122 * _2122;
    float _2124 = cbLight._m0[_1927].x + _725;
    float _2125 = cbLight._m0[_1927].y + _726;
    float _2126 = cbLight._m0[_1927].z + _727;
    float _2130 = inversesqrt(dot(vec3(_2124, _2125, _2126), vec3(_2124, _2125, _2126)));
    float _2131 = _2130 * _2124;
    float _2132 = _2130 * _2125;
    float _2133 = _2130 * _2126;
    float _2134 = dot(vec3(_641, _642, _643), vec3(cbLight._m0[_1927].xyz));
    float _4279 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2137 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
    float _2138 = dot(vec3(_641, _642, _643), vec3(_2131, _2132, _2133));
    float _4290 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2141 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
    float _2142 = dot(vec3(cbLight._m0[_1927].xyz), vec3(_2131, _2132, _2133));
    float _4301 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2146 = _2123 * _2123;
    float _2150 = ((_2141 * _2141) * (_2146 + (-1.0))) + 1.0;
    float _2157 = exp2(log2(1.0 - (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0)))) * 5.0);
    float _2164 = 1.0 - _2123;
    float _2174 = (0.5 / (((_2055 * ((_2137 * _2164) + _2123)) + 9.9999999392252902907785028219223e-09) + (((_2055 * _2164) + _2123) * _2137))) * _2137;
    float _4312 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2176 = (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_2146 / ((_2150 * _2150) * 3.141590118408203125));
    float _2186 = (((((_2157 * _2077) + _804) * cbLight._m0[_2111].x) * _2176) * _1913) + (((((_2076 * _2077) + _804) * cbLight._m0[_2026].x) * _2100) * _1923);
    float _2187 = (((((_2157 * _2079) + _806) * cbLight._m0[_2111].y) * _2176) * _1913) + (((((_2076 * _2079) + _806) * cbLight._m0[_2026].y) * _2100) * _1923);
    float _2188 = (((((_2157 * _2080) + _807) * cbLight._m0[_2111].z) * _2176) * _1913) + (((((_2076 * _2080) + _807) * cbLight._m0[_2026].z) * _2100) * _1923);
    float _2250;
    float _2252;
    float _2254;
    if (_1963)
    {
        _2250 = _2186;
        _2252 = _2187;
        _2254 = _2188;
    }
    else
    {
        uint _2256 = _1890 + 2u;
        uint _2260 = _1890 + 10u;
        float _2274 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2256].w)) * _644) * 0.949999988079071044921875);
        float _2275 = _2274 * _2274;
        float _2276 = cbLight._m0[_2256].x + _725;
        float _2277 = cbLight._m0[_2256].y + _726;
        float _2278 = cbLight._m0[_2256].z + _727;
        float _2282 = inversesqrt(dot(vec3(_2276, _2277, _2278), vec3(_2276, _2277, _2278)));
        float _2283 = _2282 * _2276;
        float _2284 = _2282 * _2277;
        float _2285 = _2282 * _2278;
        float _2286 = dot(vec3(_641, _642, _643), vec3(cbLight._m0[_2256].xyz));
        float _4323 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2289 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _2290 = dot(vec3(_641, _642, _643), vec3(_2283, _2284, _2285));
        float _4334 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2293 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _2294 = dot(vec3(cbLight._m0[_2256].xyz), vec3(_2283, _2284, _2285));
        float _4345 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
        float _2298 = _2275 * _2275;
        float _2302 = ((_2293 * _2293) * (_2298 + (-1.0))) + 1.0;
        float _2309 = exp2(log2(1.0 - (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0)))) * 5.0);
        float _2316 = 1.0 - _2275;
        float _2326 = (0.5 / (((_2055 * ((_2289 * _2316) + _2275)) + 9.9999999392252902907785028219223e-09) + (((_2055 * _2316) + _2275) * _2289))) * _2289;
        float _4356 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2328 = (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * (_2298 / ((_2302 * _2302) * 3.141590118408203125));
        float _2329 = isnan(1.0) ? _1905 : (isnan(_1905) ? 1.0 : min(_1905, 1.0));
        _2250 = (((((_2309 * _2077) + _804) * cbLight._m0[_2260].x) * _2328) * _2329) + _2186;
        _2252 = (((((_2309 * _2079) + _806) * cbLight._m0[_2260].y) * _2328) * _2329) + _2187;
        _2254 = (((((_2309 * _2080) + _807) * cbLight._m0[_2260].z) * _2328) * _2329) + _2188;
    }
    float _2364;
    float _2366;
    float _2368;
    if (_1981)
    {
        _2364 = _2250;
        _2366 = _2252;
        _2368 = _2254;
    }
    else
    {
        uint _2375 = _1890 + 3u;
        uint _2379 = _1890 + 11u;
        float _2393 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2375].w)) * _644) * 0.949999988079071044921875);
        float _2394 = _2393 * _2393;
        float _2395 = cbLight._m0[_2375].x + _725;
        float _2396 = cbLight._m0[_2375].y + _726;
        float _2397 = cbLight._m0[_2375].z + _727;
        float _2401 = inversesqrt(dot(vec3(_2395, _2396, _2397), vec3(_2395, _2396, _2397)));
        float _2402 = _2401 * _2395;
        float _2403 = _2401 * _2396;
        float _2404 = _2401 * _2397;
        float _2405 = dot(vec3(_641, _642, _643), vec3(cbLight._m0[_2375].xyz));
        float _4372 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2408 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _2409 = dot(vec3(_641, _642, _643), vec3(_2402, _2403, _2404));
        float _4383 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2412 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _2413 = dot(vec3(cbLight._m0[_2375].xyz), vec3(_2402, _2403, _2404));
        float _4394 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2417 = _2394 * _2394;
        float _2421 = ((_2412 * _2412) * (_2417 + (-1.0))) + 1.0;
        float _2428 = exp2(log2(1.0 - (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0)))) * 5.0);
        float _2435 = 1.0 - _2394;
        float _2445 = (0.5 / (((_2055 * ((_2408 * _2435) + _2394)) + 9.9999999392252902907785028219223e-09) + (((_2055 * _2435) + _2394) * _2408))) * _2408;
        float _4405 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2447 = (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * (_2417 / ((_2421 * _2421) * 3.141590118408203125));
        float _2448 = isnan(1.0) ? _1906 : (isnan(_1906) ? 1.0 : min(_1906, 1.0));
        _2364 = (((((_2428 * _2077) + _804) * cbLight._m0[_2379].x) * _2447) * _2448) + _2250;
        _2366 = (((((_2428 * _2079) + _806) * cbLight._m0[_2379].y) * _2447) * _2448) + _2252;
        _2368 = (((((_2428 * _2080) + _807) * cbLight._m0[_2379].z) * _2447) * _2448) + _2254;
    }
    float _2583;
    float _2585;
    float _2587;
    float _2589;
    float _2591;
    float _2593;
    if (_1888.y == 0u)
    {
        float _2523 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2524 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2523;
        float _2525 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2523;
        float _2526 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2523;
        uvec4 _2538 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2539 = _2538.x;
        uint _2550 = uint((float(_2538.y) * floor(float(uint(cbSceneParam._m0[85u].y * _743) / _2539))) + floor(float(uint(cbSceneParam._m0[85u].x * _742) / _2539)));
        float _2560 = (log2(_2526 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2561 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        uint _2564 = uint(isnan(14.0) ? _2561 : (isnan(_2561) ? 14.0 : min(_2561, 14.0)));
        uvec4 _2569 = texelFetch(g_lightClusterGridBuffer, int(((_2564 << 2u) + (_2550 << 6u)) >> 2u));
        uint _2570 = _2569.x;
        uint _2571 = _2538.z;
        float _2671;
        float _2673;
        float _2675;
        float _2677;
        float _2679;
        float _2681;
        if (((((1u << ((_2571 >> 4u) & 15u)) + 4294967295u) & _2570) == 0u) || ((_2571 & 240u) == 0u))
        {
            _2671 = 0.0;
            _2673 = 0.0;
            _2675 = 0.0;
            _2677 = 0.0;
            _2679 = 0.0;
            _2681 = 0.0;
        }
        else
        {
            float _2672;
            float _2674;
            float _2676;
            float _2678;
            float _2680;
            float _2682;
            float _2824 = 0.0;
            float _2825 = 0.0;
            float _2826 = 0.0;
            float _2827 = 0.0;
            float _2828 = 0.0;
            float _2829 = 0.0;
            uint _2830 = 0u;
            uint _2839;
            bool _2840;
            for (;;)
            {
                _2839 = texelFetch(g_lightClassification, int((((_2564 << 5u) + (_2550 << 9u)) + (_2830 << 2u)) >> 2u)).x;
                _2840 = _2839 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2840)
                {
                    frontier_phi_68_pred = _2824;
                    frontier_phi_68_pred_1 = _2829;
                    frontier_phi_68_pred_2 = _2828;
                    frontier_phi_68_pred_3 = _2827;
                    frontier_phi_68_pred_4 = _2826;
                    frontier_phi_68_pred_5 = _2825;
                }
                else
                {
                    float _2969;
                    float _2970;
                    float _2971;
                    float _2972;
                    float _2973;
                    float _2974;
                    uint _2975;
                    _2969 = _2824;
                    _2970 = _2825;
                    _2971 = _2826;
                    _2972 = _2827;
                    _2973 = _2828;
                    _2974 = _2829;
                    _2975 = _2839;
                    float _2896;
                    float _2897;
                    float _2898;
                    float _2899;
                    float _2900;
                    float _2901;
                    for (;;)
                    {
                        uint _2979 = uint(findLSB(_2975)) + (_2830 << 5u);
                        uint _2976 = (_2975 + 4294967295u) & _2975;
                        uint _2981 = _2979 * 48u;
                        vec4 _2995 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2981)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 3u)).x));
                        uint _3001 = (_2979 * 48u) + 4u;
                        vec4 _3014 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3001)).x, texelFetch(g_PointLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3001 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3001 + 3u)).x));
                        uint _3020 = (_2979 * 48u) + 8u;
                        vec3 _3031 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3020)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 2u)).x));
                        float _3035 = _2995.x - _2524;
                        float _3036 = _2995.y - _2525;
                        float _3037 = _2995.z - _2526;
                        float _3038 = dot(vec3(_3035, _3036, _3037), vec3(_3035, _3036, _3037));
                        float _3041 = inversesqrt(_3038);
                        float _3042 = _3041 * _3035;
                        float _3043 = _3041 * _3036;
                        float _3044 = _3041 * _3037;
                        float _3045 = dot(vec3(_761, _764, _767), vec3(_3042, _3043, _3044));
                        float _3050 = 1.0 - (_3038 * _2995.w);
                        float _4431 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                        float _3051 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
                        float _3052 = sqrt(_3038) * _3014.w;
                        float _3055 = 1.39999997615814208984375 / (_3052 + 1.39999997615814208984375);
                        float _3056 = _3055 * _3055;
                        float _3059 = ((1.0 - _3056) * _3045) + _3056;
                        float _3062 = _3052 * _3052;
                        float _3066 = ((isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0))) * _3051) / ((_3062 * 0.699999988079071044921875) + 1.0);
                        float _3070 = (-0.0) - _2524;
                        float _3071 = (-0.0) - _2525;
                        float _3072 = (-0.0) - _2526;
                        float _3076 = inversesqrt(dot(vec3(_3070, _3071, _3072), vec3(_3070, _3071, _3072)));
                        float _3077 = _3076 * _3070;
                        float _3078 = _3076 * _3071;
                        float _3079 = _3076 * _3072;
                        float _3087 = exp2(log2(1.0 / ((_3062 * 3.5) + 5.0)) * 0.25);
                        float _3088 = 1.0 - _836;
                        float _3095 = sqrt(1.0 - ((1.0 - (_3088 * _3088)) * (1.0 - (_3087 * _3087))));
                        float _3096 = _3095 * _3095;
                        float _3097 = _3096 * _3096;
                        float _3098 = _3077 + _3042;
                        float _3099 = _3078 + _3043;
                        float _3100 = _3079 + _3044;
                        float _3104 = inversesqrt(dot(vec3(_3098, _3099, _3100), vec3(_3098, _3099, _3100)));
                        float _3108 = dot(vec3(_761, _764, _767), vec3(_3077, _3078, _3079));
                        float _4447 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                        float _3111 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
                        float _3112 = dot(vec3(_761, _764, _767), vec3(_3104 * _3098, _3104 * _3099, _3104 * _3100));
                        float _4458 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
                        float _3115 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
                        float _3119 = ((_3115 * _3115) * (_3097 + (-1.0))) + 1.0;
                        float _3120 = _3055 * _3096;
                        float _3121 = _3120 * _3120;
                        float _3124 = ((1.0 - _3121) * _3045) + _3121;
                        float _4469 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                        float _3125 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
                        float _3126 = 1.0 - _3096;
                        float _3136 = (0.5 / (((_3125 * ((_3111 * _3126) + _3096)) + 9.9999999392252902907785028219223e-09) + (((_3125 * _3126) + _3096) * _3111))) * _3125;
                        float _4480 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                        float _3147 = (((_3097 * 3.1415927410125732421875) * (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0)))) / ((_3119 * _3119) * ((_3062 * 2.1991131305694580078125) + 3.141590118408203125))) * _3051;
                        _2899 = (_3066 * _3014.x) + _2972;
                        _2900 = (_3066 * _3014.y) + _2973;
                        _2901 = (_3066 * _3014.z) + _2974;
                        _2896 = (_3147 * _3031.x) + _2969;
                        _2897 = (_3147 * _3031.y) + _2970;
                        _2898 = (_3147 * _3031.z) + _2971;
                        if (_2976 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2969 = _2896;
                            _2970 = _2897;
                            _2971 = _2898;
                            _2972 = _2899;
                            _2973 = _2900;
                            _2974 = _2901;
                            _2975 = _2976;
                        }
                    }
                    frontier_phi_68_pred = _2896;
                    frontier_phi_68_pred_1 = _2901;
                    frontier_phi_68_pred_2 = _2900;
                    frontier_phi_68_pred_3 = _2899;
                    frontier_phi_68_pred_4 = _2898;
                    frontier_phi_68_pred_5 = _2897;
                }
                _2672 = frontier_phi_68_pred;
                _2682 = frontier_phi_68_pred_1;
                _2680 = frontier_phi_68_pred_2;
                _2678 = frontier_phi_68_pred_3;
                _2676 = frontier_phi_68_pred_4;
                _2674 = frontier_phi_68_pred_5;
                uint _2831 = _2830 + 1u;
                if (_2831 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2824 = _2672;
                    _2825 = _2674;
                    _2826 = _2676;
                    _2827 = _2678;
                    _2828 = _2680;
                    _2829 = _2682;
                    _2830 = _2831;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2671 = _2672;
            _2673 = _2674;
            _2675 = _2676;
            _2677 = _2678;
            _2679 = _2680;
            _2681 = _2682;
        }
        uvec4 _2685 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2686 = _2685.z;
        uint _2688 = (_2686 >> 8u) & 15u;
        float _2792;
        float _2794;
        float _2796;
        float _2798;
        float _2800;
        float _2802;
        if (((4294967295u << _2688) & _2570) == 0u)
        {
            _2792 = _2671;
            _2794 = _2673;
            _2796 = _2675;
            _2798 = _2677;
            _2800 = _2679;
            _2802 = _2681;
        }
        else
        {
            float _2817 = inversesqrt(dot(vec3(_2524, _2525, _2526), vec3(_2524, _2525, _2526)));
            float _2818 = _2817 * _2524;
            float _2819 = _2817 * _2525;
            float _2820 = _2817 * _2526;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2688 < ((_2686 >> 12u) & 15u))
            {
                float _2793;
                float _2795;
                float _2797;
                float _2799;
                float _2801;
                float _2803;
                float _2952 = _2671;
                float _2953 = _2673;
                float _2954 = _2675;
                float _2955 = _2677;
                float _2956 = _2679;
                float _2957 = _2681;
                uint _2958 = _2688;
                uint _2967;
                bool _2968;
                for (;;)
                {
                    _2967 = texelFetch(g_lightClassification, int((((_2564 << 5u) + (_2550 << 9u)) + (_2958 << 2u)) >> 2u)).x;
                    _2968 = _2967 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2968)
                    {
                        frontier_phi_79_pred = _2957;
                        frontier_phi_79_pred_1 = _2956;
                        frontier_phi_79_pred_2 = _2955;
                        frontier_phi_79_pred_3 = _2954;
                        frontier_phi_79_pred_4 = _2953;
                        frontier_phi_79_pred_5 = _2952;
                    }
                    else
                    {
                        float _3161;
                        float _3162;
                        float _3163;
                        float _3164;
                        float _3165;
                        float _3166;
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3174 = _2952;
                        float _3175 = _2953;
                        float _3176 = _2954;
                        float _3177 = _2955;
                        float _3178 = _2956;
                        float _3179 = _2957;
                        uint _3180 = _2967;
                        uint _3181;
                        vec4 _3206;
                        float _3207;
                        vec4 _3222;
                        vec3 _3234;
                        vec4 _3249;
                        vec4 _3264;
                        float _3310;
                        bool _3311;
                        for (;;)
                        {
                            uint _3191 = ((_2958 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3180));
                            _3181 = (_3180 + 4294967295u) & _3180;
                            uint _3193 = _3191 * 40u;
                            _3206 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3193)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 3u)).x));
                            _3207 = _3206.w;
                            uint _3209 = (_3191 * 40u) + 4u;
                            _3222 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3209)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 3u)).x));
                            uint _3224 = (_3191 * 40u) + 8u;
                            _3234 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3224)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 2u)).x));
                            uint _3236 = (_3191 * 40u) + 16u;
                            _3249 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3236)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 3u)).x));
                            uint _3251 = (_3191 * 40u) + 20u;
                            _3264 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3251)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 3u)).x));
                            uint _3266 = (_3191 * 40u) + 24u;
                            vec4 _3279 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3266)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 3u)).x));
                            uint _3285 = (_3191 * 40u) + 28u;
                            vec4 _3298 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 3u)).x));
                            _3310 = fma(_2526, _3298.z, fma(_2525, _3298.y, _3298.x * _2524)) + _3298.w;
                            _3311 = !((fma(_2526, _3279.z, fma(_2525, _3279.y, _3279.x * _2524)) + _3279.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3311)
                            {
                                float _3338 = _3206.x - _2524;
                                float _3339 = _3206.y - _2525;
                                float _3340 = _3206.z - _2526;
                                float _3341 = dot(vec3(_3338, _3339, _3340), vec3(_3338, _3339, _3340));
                                float _3344 = inversesqrt(_3341);
                                float _3345 = _3344 * _3338;
                                float _3346 = _3344 * _3339;
                                float _3347 = _3344 * _3340;
                                float _3351 = 1.0 - (_3341 / (_3207 * _3207));
                                float _4491 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                                float _3352 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
                                float _3356 = sqrt(_3341) * _3222.w;
                                float _3358 = 1.39999997615814208984375 / (_3356 + 1.39999997615814208984375);
                                float _3359 = _3358 * _3358;
                                float _3362 = ((1.0 - _3359) * dot(vec3(_3345, _3346, _3347), vec3(_761, _764, _767))) + _3359;
                                float _3365 = _3356 * _3356;
                                float _3369 = (fma(_2526, _3249.z, fma(_2525, _3249.y, _3249.x * _2524)) + _3249.w) / _3310;
                                float _3370 = (fma(_2526, _3264.z, fma(_2525, _3264.y, _3264.x * _2524)) + _3264.w) / _3310;
                                float _3374 = 1.0 - dot(vec2(_3369, _3370), vec2(_3369, _3370));
                                float _4507 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                                float _3375 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
                                float _3376 = _3375 * (((isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0))) * _3352) / ((_3365 * 0.699999988079071044921875) + 1.0));
                                float _3388 = exp2(log2(1.0 / ((_3365 * 3.5) + 5.0)) * 0.25);
                                float _3389 = 1.0 - _836;
                                float _3396 = sqrt(1.0 - ((1.0 - (_3389 * _3389)) * (1.0 - (_3388 * _3388))));
                                float _3397 = _3396 * _3396;
                                float _3398 = _3397 * _3397;
                                float _3399 = _3345 - _2818;
                                float _3400 = _3346 - _2819;
                                float _3401 = _3347 - _2820;
                                float _3405 = inversesqrt(dot(vec3(_3399, _3400, _3401), vec3(_3399, _3400, _3401)));
                                float _3409 = dot(vec3(_761, _764, _767), vec3((-0.0) - _2818, (-0.0) - _2819, (-0.0) - _2820));
                                float _4518 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                                float _3412 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                                float _3413 = dot(vec3(_761, _764, _767), vec3(_3405 * _3399, _3405 * _3400, _3405 * _3401));
                                float _4529 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                                float _3416 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                                float _3420 = ((_3416 * _3416) * (_3398 + (-1.0))) + 1.0;
                                float _3421 = _3358 * _3397;
                                float _3422 = _3421 * _3421;
                                float _3428 = ((1.0 - _3422) * dot(vec3(_761, _764, _767), vec3(_3345, _3346, _3347))) + _3422;
                                float _4540 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                                float _3429 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
                                float _3430 = 1.0 - _3397;
                                float _3440 = (0.5 / (((_3429 * ((_3412 * _3430) + _3397)) + 9.9999999392252902907785028219223e-09) + (((_3429 * _3430) + _3397) * _3412))) * _3429;
                                float _4551 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                                float _3450 = (_3375 * _3352) * (((_3398 * 3.1415927410125732421875) * (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0)))) / ((_3420 * _3420) * ((_3365 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3376 * _3222.y;
                                frontier_phi_85_pred_1 = _3376 * _3222.x;
                                frontier_phi_85_pred_2 = _3450 * _3234.z;
                                frontier_phi_85_pred_3 = _3450 * _3234.y;
                                frontier_phi_85_pred_4 = _3450 * _3234.x;
                                frontier_phi_85_pred_5 = _3376 * _3222.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3458 = frontier_phi_85_pred;
                            _3457 = frontier_phi_85_pred_1;
                            _3456 = frontier_phi_85_pred_2;
                            _3455 = frontier_phi_85_pred_3;
                            _3454 = frontier_phi_85_pred_4;
                            _3459 = frontier_phi_85_pred_5;
                            _3164 = _3457 + _3177;
                            _3165 = _3458 + _3178;
                            _3166 = _3459 + _3179;
                            _3161 = _3454 + _3174;
                            _3162 = _3455 + _3175;
                            _3163 = _3456 + _3176;
                            if (_3181 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3174 = _3161;
                                _3175 = _3162;
                                _3176 = _3163;
                                _3177 = _3164;
                                _3178 = _3165;
                                _3179 = _3166;
                                _3180 = _3181;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3166;
                        frontier_phi_79_pred_1 = _3165;
                        frontier_phi_79_pred_2 = _3164;
                        frontier_phi_79_pred_3 = _3163;
                        frontier_phi_79_pred_4 = _3162;
                        frontier_phi_79_pred_5 = _3161;
                    }
                    _2803 = frontier_phi_79_pred;
                    _2801 = frontier_phi_79_pred_1;
                    _2799 = frontier_phi_79_pred_2;
                    _2797 = frontier_phi_79_pred_3;
                    _2795 = frontier_phi_79_pred_4;
                    _2793 = frontier_phi_79_pred_5;
                    uint _2959 = _2958 + 1u;
                    if (_2959 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2952 = _2793;
                        _2953 = _2795;
                        _2954 = _2797;
                        _2955 = _2799;
                        _2956 = _2801;
                        _2957 = _2803;
                        _2958 = _2959;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2797;
                frontier_phi_60_61_ladder_1 = _2803;
                frontier_phi_60_61_ladder_2 = _2801;
                frontier_phi_60_61_ladder_3 = _2799;
                frontier_phi_60_61_ladder_4 = _2795;
                frontier_phi_60_61_ladder_5 = _2793;
            }
            else
            {
                frontier_phi_60_61_ladder = _2675;
                frontier_phi_60_61_ladder_1 = _2681;
                frontier_phi_60_61_ladder_2 = _2679;
                frontier_phi_60_61_ladder_3 = _2677;
                frontier_phi_60_61_ladder_4 = _2673;
                frontier_phi_60_61_ladder_5 = _2671;
            }
            _2792 = frontier_phi_60_61_ladder_5;
            _2794 = frontier_phi_60_61_ladder_4;
            _2796 = frontier_phi_60_61_ladder;
            _2798 = frontier_phi_60_61_ladder_3;
            _2800 = frontier_phi_60_61_ladder_2;
            _2802 = frontier_phi_60_61_ladder_1;
        }
        float _2807 = isnan(1.0) ? _820 : (isnan(_820) ? 1.0 : min(_820, 1.0));
        _2583 = (_2807 * _2798) + _2019;
        _2585 = (_2807 * _2800) + _2021;
        _2587 = (_2807 * _2802) + _2023;
        _2589 = ((_2792 * _804) * _2807) + _2364;
        _2591 = ((_2794 * _806) * _2807) + _2366;
        _2593 = ((_2796 * _807) * _2807) + _2368;
    }
    else
    {
        _2583 = _2019;
        _2585 = _2021;
        _2587 = _2023;
        _2589 = _2364;
        _2591 = _2366;
        _2593 = _2368;
    }
    float _4567 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _4578 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _4589 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _2610 = ((isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0))) * (_2583 + ((isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0))) * _820))) + ((_2589 + ((isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0))) * _1655)) * cbPerFrame._m0[3u].x);
    float _2611 = ((isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (_2585 + ((isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))) * _820))) + ((_2591 + ((isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0))) * _1655)) * cbPerFrame._m0[3u].x);
    float _2612 = ((isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0))) * (_2587 + ((isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))) * _820))) + ((_2593 + ((isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0))) * _1655)) * cbPerFrame._m0[3u].x);
    uint _2613 = _264 + 6u;
    float _2621 = _742 / cbSceneParam._m0[86u].x;
    float _2622 = _743 / cbSceneParam._m0[86u].y;
    vec4 _2636 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2621, _2622, (log2((isnan(cbSceneParam._m0[77u].w) ? _667 : (isnan(_667) ? cbSceneParam._m0[77u].w : min(_667, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2638 = _2636.x;
    float _2639 = _2636.y;
    float _2640 = _2636.z;
    float _2641 = _2636.w;
    float _2734;
    float _2736;
    float _2738;
    float _2740;
    if (_667 > cbSceneParam._m0[78u].w)
    {
        float _2696 = isnan(_667) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _667 : min(cbSceneParam._m0[80u].w, _667));
        float _2697 = _2696 / _667;
        float _2708 = _2697 * _718;
        float _2709 = _719 * _2697;
        float _2710 = (-0.0) - _2709;
        float _2712 = _2697 * _720;
        float _2714 = (cbSceneParam._m0[77u].w * _2710) / _2696;
        float _2715 = _2714 + cbSceneParam._m0[79u].w;
        float _2716 = cbSceneParam._m0[79u].w - _2709;
        float _2722 = sqrt(((_2708 * _2708) + (_2709 * _2709)) + (_2712 * _2712));
        float _2725 = (1.0 - (cbSceneParam._m0[77u].w / _2696)) * _2722;
        float _2730 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2732 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2909;
        if (abs((_2710 - _2714) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2909 = ((((_2715 > 0.0) ? exp2(_2730 * _2715) : (2.0 - exp2(_2732 * _2715))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2725;
        }
        else
        {
            float _2853 = 1.0 / cbSceneParam._m0[80u].x;
            float _2854 = isnan(_2716) ? _2715 : (isnan(_2715) ? _2716 : max(_2715, _2716));
            float _2855 = isnan(_2716) ? _2715 : (isnan(_2715) ? _2716 : min(_2715, _2716));
            float _2864 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : min(_2854, 0.0));
            float _2865 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : min(_2855, 0.0));
            _2909 = ((abs(_2722 / _2710) * cbSceneParam._m0[80u].y) * ((((_2864 - _2865) * 2.0) - ((exp2(_2730 * (isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0)))) - exp2(_2730 * (isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0))))) * _2853)) - ((exp2(_2732 * _2864) - exp2(_2732 * _2865)) * _2853))) + (_2725 * cbSceneParam._m0[80u].z);
        }
        vec4 _2911 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2621, _2622, 1.0), 0.0);
        float _2920 = exp2((_2909 * (-1.44269502162933349609375)) * (1.0 - _2911.w));
        float _2921 = log2(_2920);
        float _2937 = log2(_2641);
        _2734 = (exp2(_2937 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2921 * cbSceneParam._m0[78u].x)) * _2911.x) / cbSceneParam._m0[78u].x)) + _2638;
        _2736 = (exp2(_2937 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2921 * cbSceneParam._m0[78u].y)) * _2911.y) / cbSceneParam._m0[78u].y)) + _2639;
        _2738 = (exp2(_2937 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2921 * cbSceneParam._m0[78u].z)) * _2911.z) / cbSceneParam._m0[78u].z)) + _2640;
        _2740 = _2920 * _2641;
    }
    else
    {
        _2734 = _2638;
        _2736 = _2639;
        _2738 = _2640;
        _2740 = _2641;
    }
    bool _2947;
    vec4 _2750;
    vec4 _2772;
    float _2774;
    float _2778;
    float _2779;
    float _2780;
    float _2781;
    bool _2791;
    for (;;)
    {
        _2750 = cbMatDynParam._m0[0u];
        float _2752 = roundEven(_2750.y);
        bool _2753 = _2752 == 3.0;
        float _2754 = log2(_2740);
        float _2761 = exp2(_2754 * cbSceneParam._m0[78u].x) * _2610;
        float _2762 = exp2(_2754 * cbSceneParam._m0[78u].y) * _2611;
        float _2763 = exp2(_2754 * cbSceneParam._m0[78u].z) * _2612;
        float _2770 = _731 + (-0.5);
        _2772 = cbMtdParam._m0[1u];
        _2774 = _2772.y * _2770;
        float _2777 = (_2752 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2778 = _2777 * (_2753 ? _2761 : (_2761 + (cbSceneParam._m0[72u].w * _2734)));
        _2779 = _2777 * (_2753 ? _2762 : (_2762 + (cbSceneParam._m0[72u].w * _2736)));
        _2780 = _2777 * (_2753 ? _2763 : (_2763 + (cbSceneParam._m0[72u].w * _2738)));
        _2781 = _2770 * 0.999000012874603271484375;
        _2791 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2791)
        {
            if ((cbInstanceData._m0[_264 + 7u].x + _2781) < 0.5)
            {
                _2947 = true;
                break;
            }
        }
        uint _2888 = _780 + uint(_2750.w);
        if ((cbInstanceData._m0[_2888].w < 1.0) && ((cbInstanceData._m0[_2888].w + _2781) < 0.5))
        {
            _2947 = true;
            break;
        }
        if ((_2774 + 1.0) < _2772.x)
        {
            _2947 = true;
            break;
        }
        _2947 = false;
        break;
    }
    float _3152;
    if (_2947)
    {
        discard_state = true;
        _3152 = 0.0;
    }
    else
    {
        _3152 = cbInstanceData._m0[_2613].w;
    }
    SV_Target.x = _2778;
    SV_Target.y = _2779;
    SV_Target.z = _2780;
    SV_Target.w = _3152;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2613].w;
    discard_exit();
}


