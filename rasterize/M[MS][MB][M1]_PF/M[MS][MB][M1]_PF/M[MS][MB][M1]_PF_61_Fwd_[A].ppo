#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1109;
float _3492;
float _3493;
float _3494;
float _3495;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _232 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _232 + 1u;
    uint _242 = _232 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _273 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _279 = _273.x * cbMtdParam._m0[11u].x;
    float _280 = _273.y * cbMtdParam._m0[11u].y;
    float _281 = _273.z * cbMtdParam._m0[11u].z;
    vec4 _300 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _252) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _253) + cbTextureTilingScale._m0[5u].w));
    vec4 _336 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _338 = _336.x;
    float _350 = dot(vec4(_338, _336.yzw), vec4(cbMtdParam._m0[28u].w, cbMtdParam._m0[29u].xy, 0.0));
    float _367 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_338 - _350) * cbMtdParam._m0[24u].y) + _350) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3504 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _368 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
    float _375 = (_368 * ((_300.x * cbMtdParam._m0[12u].x) - _279)) + _279;
    float _376 = (_368 * ((_300.y * cbMtdParam._m0[12u].y) - _280)) + _280;
    float _377 = (_368 * ((_300.z * cbMtdParam._m0[12u].z) - _281)) + _281;
    vec4 _390 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _252) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _253) + cbTextureTilingScale._m0[4u].w));
    vec4 _407 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _409 = _407.x;
    float _410 = _407.y;
    float _411 = _407.z;
    float _420 = ((_390.z - _411) * _368) + _411;
    float _423 = ((((_390.x - _409) * _368) + _409) * 2.0) + (-1.0);
    float _425 = ((((_390.y - _410) * _368) + _410) * 2.0) + (-1.0);
    float _426 = dot(vec2(_423, _425), vec2(_423, _425));
    float _3515 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _431 = sqrt(1.0 - (isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0))));
    vec4 _444 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _472 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _474 = _472.x;
    float _492 = ((texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _252) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _253) + cbTextureTilingScale._m0[9u].w)).x - _474) * _368) + _474;
    float _496 = ((texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _492) * cbMtdParam._m0[19u].z) + _492;
    float _501 = cbMtdParam._m0[22u].x + _444.w;
    float _505 = gl_FragCoord.x * 0.125;
    float _507 = gl_FragCoord.y * 0.125;
    float _518 = fma(_431, _219 * NORMAL.x, fma(_425, _226 * TANGENT.x, (_212 * _204) * _423));
    float _521 = fma(_431, _219 * NORMAL.y, fma(_425, _226 * TANGENT.y, (_212 * _205) * _423));
    float _524 = fma(_431, _219 * NORMAL.z, fma(_425, _226 * TANGENT.z, (_212 * _206) * _423));
    float _528 = inversesqrt(dot(vec3(_518, _521, _524), vec3(_518, _521, _524)));
    float _529 = _528 * _518;
    float _530 = _528 * _521;
    float _531 = _528 * _524;
    float _3526 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _532 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
    float _3537 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _3548 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _3559 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _3570 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _3581 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _537 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_505, _507)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _555 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _596 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _606 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _596);
    float _607 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _596);
    float _608 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _596);
    float _612 = inversesqrt(dot(vec3(_606, _607, _608), vec3(_606, _607, _608)));
    float _613 = _606 * _612;
    float _614 = _607 * _612;
    float _615 = _608 * _612;
    vec4 _617 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_505, _507));
    float _619 = _617.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _791 = sqrt(((_606 * _606) + (_607 * _607)) + (_608 * _608));
        float _797 = (cbMatDynParam._m0[5u].x * _791) + cbMatDynParam._m0[5u].y;
        float _3592 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _798 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _802 = (cbMatDynParam._m0[5u].z * _791) + cbMatDynParam._m0[5u].w;
        float _3603 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) - _798)) + _798) < ((_619 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _630 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _631 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _649 = fma(_531, cbSceneParam._m0[5u].z, fma(_530, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _529));
    float _652 = fma(_531, cbSceneParam._m0[6u].z, fma(_530, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _529));
    float _655 = fma(_531, cbSceneParam._m0[7u].z, fma(_530, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _529));
    uint _668 = _232 + 9u;
    uint _669 = _668 + uint(cbMatDynParam._m0[0u].w);
    float _675 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0)))) * cbInstanceData._m0[_669].x;
    float _676 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0)))) * cbInstanceData._m0[_669].y;
    float _677 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0)))) * cbInstanceData._m0[_669].z;
    float _3614 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _678 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
    float _3625 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _679 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
    float _3636 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _680 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
    float _681 = 1.0 - _537;
    float _682 = _678 * _681;
    float _683 = _679 * _681;
    float _684 = _680 * _681;
    float _689 = (_678 + (-0.039999999105930328369140625)) * _537;
    float _690 = (_679 + (-0.039999999105930328369140625)) * _537;
    float _691 = (_680 + (-0.039999999105930328369140625)) * _537;
    float _692 = _689 + 0.039999999105930328369140625;
    float _694 = _690 + 0.039999999105930328369140625;
    float _695 = _691 + 0.039999999105930328369140625;
    vec4 _704 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _630, cbSceneParam._m0[86u].y * _631));
    float _708 = ((isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0))) * TEXCOORD_5.w) * _704.x;
    float _709 = dot(vec3(_529, _530, _531), vec3(_613, _614, _615));
    float _712 = _709 * 2.0;
    float _716 = (_712 * _529) - _613;
    float _717 = (_712 * _530) - _614;
    float _718 = (_712 * _531) - _615;
    float _722 = abs(dot(vec3(_613, _614, _615), vec3(_529, _530, _531)));
    float _3647 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _724 = sqrt(_532);
    float _737 = exp2((_724 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_724 * 3.0));
    float _743 = (1.0 - _737) * ((_724 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _744 = _737 * _724;
    float _772 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _776 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _780 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1108;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _833 = fma(_780, cbModelParam._m0[26u].z, fma(_776, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _772));
        float _837 = fma(_780, cbModelParam._m0[27u].z, fma(_776, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _772));
        float _841 = fma(_780, cbModelParam._m0[28u].z, fma(_776, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _772));
        float _866 = _772 + _529;
        float _867 = _776 + _530;
        float _868 = _780 + _531;
        float _878 = fma(_868, cbModelParam._m0[26u].z, fma(_867, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _866)) - _833;
        float _879 = fma(_868, cbModelParam._m0[27u].z, fma(_867, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _866)) - _837;
        float _880 = fma(_868, cbModelParam._m0[28u].z, fma(_867, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _866)) - _841;
        float _884 = inversesqrt(dot(vec3(_878, _879, _880), vec3(_878, _879, _880)));
        float _897 = ((_884 * _878) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_833 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _898 = ((_884 * _879) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_837 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _899 = ((_884 * _880) / cbModelParam._m0[34u].z) + ((((((_841 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _902 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_897, _898, _899), 0.0);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_897, _898, _899), 0.0);
        vec4 _916 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_897, _898, _899), 0.0);
        vec4 _923 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_897, _898, _899), 0.0);
        float _936 = exp2((_902.w + (-0.5)) * 20.0) * 2.0;
        float _937 = _936 * (_902.x + (-0.5));
        float _938 = _936 * (_902.y + (-0.5));
        float _939 = _936 * (_902.z + (-0.5));
        float _946 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _947 = _946 * (_909.x + (-0.5));
        float _948 = _946 * (_909.y + (-0.5));
        float _949 = _946 * (_909.z + (-0.5));
        float _956 = exp2((_916.w + (-0.5)) * 20.0) * 2.0;
        float _957 = _956 * (_916.x + (-0.5));
        float _958 = _956 * (_916.y + (-0.5));
        float _959 = _956 * (_916.z + (-0.5));
        float _966 = exp2((_923.w + (-0.5)) * 20.0) * 2.0;
        float _967 = _966 * (_923.x + (-0.5));
        float _968 = _966 * (_923.y + (-0.5));
        float _969 = _966 * (_923.z + (-0.5));
        float _970 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _971 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _972 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _973 = _937 * 0.5;
        float _974 = _947 * 0.5;
        float _975 = _957 * 0.5;
        float _976 = dot(vec3(_973, _974, _975), vec3(_973, _974, _975));
        float _981 = (_976 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_976);
        float _990 = (dot(vec3(_529, _530, _531), vec3(_981 * _973, _981 * _974, _981 * _975)) + 1.0) * 0.5;
        float _3673 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _1000 = sqrt(((_974 * _974) + (_973 * _973)) + (_975 * _975)) / (_970 + 9.9999997473787516355514526367188e-06);
        float _3684 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1002 = _1001 * 2.0;
        float _1006 = (1.0 - _1001) / (_1001 + 1.0);
        float _3695 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1016 = ((((1.0 - _1007) * (_1002 + 2.0)) * exp2(log2(isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) * (_1002 + 1.0))) + _1007) * _970;
        float _1017 = _938 * 0.5;
        float _1018 = _948 * 0.5;
        float _1019 = _958 * 0.5;
        float _1020 = dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019));
        float _1025 = (_1020 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1020);
        float _1033 = (dot(vec3(_529, _530, _531), vec3(_1025 * _1017, _1025 * _1018, _1025 * _1019)) + 1.0) * 0.5;
        float _3706 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1042 = sqrt(((_1018 * _1018) + (_1017 * _1017)) + (_1019 * _1019)) / (_971 + 9.9999997473787516355514526367188e-06);
        float _3717 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1044 = _1043 * 2.0;
        float _1048 = (1.0 - _1043) / (_1043 + 1.0);
        float _3728 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1058 = ((((1.0 - _1049) * (_1044 + 2.0)) * exp2(log2(isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * (_1044 + 1.0))) + _1049) * _971;
        float _1059 = _939 * 0.5;
        float _1060 = _949 * 0.5;
        float _1061 = _959 * 0.5;
        float _1062 = dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061));
        float _1067 = (_1062 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1062);
        float _1075 = (dot(vec3(_529, _530, _531), vec3(_1067 * _1059, _1067 * _1060, _1067 * _1061)) + 1.0) * 0.5;
        float _3739 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1084 = sqrt(((_1060 * _1060) + (_1059 * _1059)) + (_1061 * _1061)) / (_972 + 9.9999997473787516355514526367188e-06);
        float _3750 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1086 = _1085 * 2.0;
        float _1090 = (1.0 - _1085) / (_1085 + 1.0);
        float _3761 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1100 = ((((1.0 - _1091) * (_1086 + 2.0)) * exp2(log2(isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * (_1086 + 1.0))) + _1091) * _972;
        _1108 = _939;
        _1110 = _938;
        _1111 = _937;
        _1112 = _949;
        _1113 = _948;
        _1114 = _947;
        _1115 = _959;
        _1116 = _958;
        _1117 = _957;
        _1118 = _972;
        _1119 = _971;
        _1120 = _970;
        _1121 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0)));
        _1122 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0)));
        _1123 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0)));
    }
    else
    {
        _1108 = _1109;
        _1110 = _1109;
        _1111 = _1109;
        _1112 = _1109;
        _1113 = _1109;
        _1114 = _1109;
        _1115 = _1109;
        _1116 = _1109;
        _1117 = _1109;
        _1118 = _1109;
        _1119 = _1109;
        _1120 = _1109;
        _1121 = 0.0;
        _1122 = 0.0;
        _1123 = 0.0;
    }
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1148 = fma(_780, cbModelParam._m0[30u].z, fma(_776, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _772));
        float _1152 = fma(_780, cbModelParam._m0[31u].z, fma(_776, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _772));
        float _1156 = fma(_780, cbModelParam._m0[32u].z, fma(_776, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _772));
        float _1179 = _772 + _529;
        float _1180 = _776 + _530;
        float _1181 = _780 + _531;
        float _1191 = fma(_1181, cbModelParam._m0[30u].z, fma(_1180, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1179)) - _1148;
        float _1192 = fma(_1181, cbModelParam._m0[31u].z, fma(_1180, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1179)) - _1152;
        float _1193 = fma(_1181, cbModelParam._m0[32u].z, fma(_1180, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1179)) - _1156;
        float _1197 = inversesqrt(dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193)));
        float _1210 = ((_1197 * _1191) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1148 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1211 = ((_1197 * _1192) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1152 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1212 = ((_1197 * _1193) / cbModelParam._m0[35u].z) + ((((((_1156 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        float _1247 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1214.x + (-0.5));
        float _1249 = _1247 * (_1214.y + (-0.5));
        float _1250 = _1247 * (_1214.z + (-0.5));
        float _1257 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1221.x + (-0.5));
        float _1259 = _1257 * (_1221.y + (-0.5));
        float _1260 = _1257 * (_1221.z + (-0.5));
        float _1267 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1228.x + (-0.5));
        float _1269 = _1267 * (_1228.y + (-0.5));
        float _1270 = _1267 * (_1228.z + (-0.5));
        float _1277 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1235.x + (-0.5));
        float _1279 = _1277 * (_1235.y + (-0.5));
        float _1280 = _1277 * (_1235.z + (-0.5));
        float _1281 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1282 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1283 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1284 = _1248 * 0.5;
        float _1285 = _1258 * 0.5;
        float _1286 = _1268 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1300 = (dot(vec3(_529, _530, _531), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _3802 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1309 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1281 + 9.9999997473787516355514526367188e-06);
        float _3813 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _3824 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * (_1311 + 1.0))) + _1316) * _1281;
        float _1326 = _1249 * 0.5;
        float _1327 = _1259 * 0.5;
        float _1328 = _1269 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1342 = (dot(vec3(_529, _530, _531), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _3835 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1351 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1282 + 9.9999997473787516355514526367188e-06);
        float _3846 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _3857 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * (_1353 + 1.0))) + _1358) * _1282;
        float _1368 = _1250 * 0.5;
        float _1369 = _1260 * 0.5;
        float _1370 = _1270 * 0.5;
        float _1371 = dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370));
        float _1376 = (_1371 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1371);
        float _1384 = (dot(vec3(_529, _530, _531), vec3(_1376 * _1368, _1376 * _1369, _1376 * _1370)) + 1.0) * 0.5;
        float _3868 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1393 = sqrt(((_1369 * _1369) + (_1368 * _1368)) + (_1370 * _1370)) / (_1283 + 9.9999997473787516355514526367188e-06);
        float _3879 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1395 = _1394 * 2.0;
        float _1399 = (1.0 - _1394) / (_1394 + 1.0);
        float _3890 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1409 = ((((1.0 - _1400) * (_1395 + 2.0)) * exp2(log2(isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * (_1395 + 1.0))) + _1400) * _1283;
        _1417 = _1250;
        _1418 = _1249;
        _1419 = _1248;
        _1420 = _1260;
        _1421 = _1259;
        _1422 = _1258;
        _1423 = _1270;
        _1424 = _1269;
        _1425 = _1268;
        _1426 = _1283;
        _1427 = _1282;
        _1428 = _1281;
        _1429 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
        _1430 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
        _1431 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)));
    }
    else
    {
        _1417 = _1109;
        _1418 = _1109;
        _1419 = _1109;
        _1420 = _1109;
        _1421 = _1109;
        _1422 = _1109;
        _1423 = _1109;
        _1424 = _1109;
        _1425 = _1109;
        _1426 = _1109;
        _1427 = _1109;
        _1428 = _1109;
        _1429 = 0.0;
        _1430 = 0.0;
        _1431 = 0.0;
    }
    float _1441 = (cbModelParam._m0[1u].x * (_1429 - _1121)) + _1121;
    float _1442 = (cbModelParam._m0[1u].x * (_1430 - _1122)) + _1122;
    float _1443 = (cbModelParam._m0[1u].x * (_1431 - _1123)) + _1123;
    float _1464 = fma(_1443, cbSceneParam._m0[89u].z, fma(_1442, cbSceneParam._m0[89u].y, _1441 * cbSceneParam._m0[89u].x));
    float _1467 = fma(_1443, cbSceneParam._m0[90u].z, fma(_1442, cbSceneParam._m0[90u].y, _1441 * cbSceneParam._m0[90u].x));
    float _1470 = fma(_1443, cbSceneParam._m0[91u].z, fma(_1442, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1441));
    float _1485 = _716 * 0.5;
    float _1486 = _717 * 0.5;
    float _1487 = _718 * 0.5;
    float _1488 = dot(vec4(_1485, _1486, _1487, 1.0), vec4(_1419, _1422, _1425, _1428));
    float _1491 = dot(vec4(_1485, _1486, _1487, 1.0), vec4(_1418, _1421, _1424, _1427));
    float _1494 = dot(vec4(_1485, _1486, _1487, 1.0), vec4(_1417, _1420, _1423, _1426));
    float _1528;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1501 = dot(vec4(_1485, _1486, _1487, 1.0), vec4(_1108, _1112, _1115, _1118));
        float _1505 = dot(vec4(_1485, _1486, _1487, 1.0), vec4(_1110, _1113, _1116, _1119));
        float _1509 = dot(vec4(_1485, _1486, _1487, 1.0), vec4(_1111, _1114, _1117, _1120));
        float _1516 = dot(vec4(cbModelParam._m0[39u]), vec4(_1485, _1486, _1487, 1.0));
        _1528 = dot(vec3(isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)), isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)), isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1516) ? 0.0 : (isnan(0.0) ? _1516 : max(0.0, _1516))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1528 = 1.0;
    }
    float _1539;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1530 = dot(vec4(cbModelParam._m0[40u]), vec4(_1485, _1486, _1487, 1.0));
        _1539 = dot(vec3(isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)), isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)), isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1530) ? 0.0 : (isnan(0.0) ? _1530 : max(0.0, _1530))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1539 = 1.0;
    }
    float _1543 = (_1539 * cbModelParam._m0[1u].x) + (_1528 * (1.0 - cbModelParam._m0[1u].x));
    float _1553 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _532);
    float _1554 = isnan(_1553) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1553 : min(cbModelParam._m0[25u].z, _1553));
    float _1636;
    float _1638;
    float _1640;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1603 = fma(_780, cbModelParam._m0[13u].z, fma(_776, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _772)) + cbModelParam._m0[13u].w;
        float _1607 = fma(_780, cbModelParam._m0[14u].z, fma(_776, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _772)) + cbModelParam._m0[14u].w;
        float _1611 = fma(_780, cbModelParam._m0[15u].z, fma(_776, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _772)) + cbModelParam._m0[15u].w;
        float _1614 = fma(_718, cbModelParam._m0[13u].z, fma(_717, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _716));
        float _1617 = fma(_718, cbModelParam._m0[14u].z, fma(_717, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _716));
        float _1620 = fma(_718, cbModelParam._m0[15u].z, fma(_717, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _716));
        float _1648;
        if (_1614 > 0.0)
        {
            _1648 = abs((1.0 - _1603) / _1614);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1614 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1603 + 1.0) / _1614);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1648 = frontier_phi_19_17_ladder;
        }
        float _1852;
        if (_1617 > 0.0)
        {
            _1852 = abs((1.0 - _1607) / _1617);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1617 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1607 + 1.0) / _1617);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1852 = frontier_phi_28_24_ladder;
        }
        float _2106;
        if (_1620 > 0.0)
        {
            _2106 = abs((1.0 - _1611) / _1620);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1620 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1611 + 1.0) / _1620);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2106 = frontier_phi_40_35_ladder;
        }
        float _2108 = isnan(_1852) ? _1648 : (isnan(_1648) ? _1852 : min(_1648, _1852));
        float _2109 = isnan(_2106) ? _2108 : (isnan(_2108) ? _2106 : min(_2108, _2106));
        float _2113 = (_2109 * _1614) + _1603;
        float _2114 = (_2109 * _1617) + _1607;
        float _2115 = (_2109 * _1620) + _1611;
        float _2116 = _2109 * 9.9999997473787516355514526367188e-05;
        float _2118 = (-1.0) - _2116;
        float _2120 = _2116 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2115 > _2120) || ((_2115 < _2118) || ((_2114 > _2120) || ((_2114 < _2118) || ((_2113 < _2118) || (_2113 > _2120))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2243 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2115, cbModelParam._m0[9u].z, fma(_2114, cbModelParam._m0[9u].y, _2113 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2115, cbModelParam._m0[10u].z, fma(_2114, cbModelParam._m0[10u].y, _2113 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2115, cbModelParam._m0[11u].z, fma(_2114, cbModelParam._m0[11u].y, _2113 * cbModelParam._m0[11u].x))), _1554);
            frontier_phi_18_40_ladder = _2243.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2243.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2243.x * cbModelParam._m0[1u].y;
        }
        _1636 = frontier_phi_18_40_ladder_2;
        _1638 = frontier_phi_18_40_ladder_1;
        _1640 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1624 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_716, _717, _718), _1554);
        _1636 = _1624.x * cbModelParam._m0[1u].y;
        _1638 = _1624.y * cbModelParam._m0[1u].y;
        _1640 = _1624.z * cbModelParam._m0[1u].y;
    }
    float _1644 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _532);
    float _1645 = isnan(_1644) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1644 : min(cbModelParam._m0[25u].w, _1644));
    float _1736;
    float _1738;
    float _1740;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1700 = fma(_780, cbModelParam._m0[21u].z, fma(_776, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _772)) + cbModelParam._m0[21u].w;
        float _1704 = fma(_780, cbModelParam._m0[22u].z, fma(_776, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _772)) + cbModelParam._m0[22u].w;
        float _1708 = fma(_780, cbModelParam._m0[23u].z, fma(_776, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _772)) + cbModelParam._m0[23u].w;
        float _1711 = fma(_718, cbModelParam._m0[21u].z, fma(_717, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _716));
        float _1714 = fma(_718, cbModelParam._m0[22u].z, fma(_717, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _716));
        float _1717 = fma(_718, cbModelParam._m0[23u].z, fma(_717, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _716));
        float _1857;
        if (_1711 > 0.0)
        {
            _1857 = abs((1.0 - _1700) / _1711);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1711 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1700 + 1.0) / _1711);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1857 = frontier_phi_30_26_ladder;
        }
        float _2133;
        if (_1714 > 0.0)
        {
            _2133 = abs((1.0 - _1704) / _1714);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1714 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1704 + 1.0) / _1714);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2133 = frontier_phi_42_37_ladder;
        }
        float _2346;
        if (_1717 > 0.0)
        {
            _2346 = abs((1.0 - _1708) / _1717);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1717 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1708 + 1.0) / _1717);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2346 = frontier_phi_51_48_ladder;
        }
        float _2348 = isnan(_2133) ? _1857 : (isnan(_1857) ? _2133 : min(_1857, _2133));
        float _2349 = isnan(_2346) ? _2348 : (isnan(_2348) ? _2346 : min(_2348, _2346));
        float _2353 = (_2349 * _1711) + _1700;
        float _2354 = (_2349 * _1714) + _1704;
        float _2355 = (_2349 * _1717) + _1708;
        float _2356 = _2349 * 9.9999997473787516355514526367188e-05;
        float _2357 = (-1.0) - _2356;
        float _2359 = _2356 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2355 > _2359) || ((_2355 < _2357) || ((_2354 > _2359) || ((_2354 < _2357) || ((_2353 < _2357) || (_2353 > _2359))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2554 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2355, cbModelParam._m0[17u].z, fma(_2354, cbModelParam._m0[17u].y, _2353 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2355, cbModelParam._m0[18u].z, fma(_2354, cbModelParam._m0[18u].y, _2353 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2355, cbModelParam._m0[19u].z, fma(_2354, cbModelParam._m0[19u].y, _2353 * cbModelParam._m0[19u].x))), _1645);
            frontier_phi_27_51_ladder = _2554.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2554.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2554.x * cbModelParam._m0[1u].z;
        }
        _1736 = frontier_phi_27_51_ladder_2;
        _1738 = frontier_phi_27_51_ladder_1;
        _1740 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1720 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_716, _717, _718), _1645);
        _1736 = _1720.x * cbModelParam._m0[1u].z;
        _1738 = _1720.y * cbModelParam._m0[1u].z;
        _1740 = _1720.z * cbModelParam._m0[1u].z;
    }
    float _1753 = (((_743 * _692) + _744) * _708) * ((cbModelParam._m0[1u].w * (_1736 - _1636)) + _1636);
    float _1755 = (((_743 * _694) + _744) * _708) * ((cbModelParam._m0[1u].w * (_1738 - _1638)) + _1638);
    float _1757 = (((_743 * _695) + _744) * _708) * ((cbModelParam._m0[1u].w * (_1740 - _1640)) + _1640);
    float _1760 = fma(_1757, cbSceneParam._m0[89u].z, fma(_1755, cbSceneParam._m0[89u].y, _1753 * cbSceneParam._m0[89u].x));
    float _1763 = fma(_1757, cbSceneParam._m0[90u].z, fma(_1755, cbSceneParam._m0[90u].y, _1753 * cbSceneParam._m0[90u].x));
    float _1766 = fma(_1757, cbSceneParam._m0[91u].z, fma(_1755, cbSceneParam._m0[91u].y, _1753 * cbSceneParam._m0[91u].x));
    uvec4 _1776 = floatBitsToUint(cbInstanceData._m0[_232 + 5u]);
    uint _1778 = _1776.x * 14u;
    uint _1779 = _1778 + 13u;
    float _1786 = _708 + (-1.0);
    float _1791 = (cbLight._m0[_1779].x * _1786) + 1.0;
    float _1792 = (cbLight._m0[_1779].y * _1786) + 1.0;
    float _1793 = (cbLight._m0[_1779].z * _1786) + 1.0;
    float _1794 = (cbLight._m0[_1779].w * _1786) + 1.0;
    uint _1795 = _1778 + 5u;
    float _1801 = isnan(1.0) ? _1792 : (isnan(_1792) ? 1.0 : min(_1792, 1.0));
    uint _1805 = _1778 + 4u;
    float _1811 = isnan(1.0) ? _1791 : (isnan(_1791) ? 1.0 : min(_1791, 1.0));
    uint _1815 = _1778 | 1u;
    float _1826 = dot(vec3(cbLight._m0[_1778].xyz), vec3(_529, _530, _531));
    float _1829 = dot(vec3(cbLight._m0[_1815].xyz), vec3(_529, _530, _531));
    float _4026 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _4037 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1834 = (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * 0.3183098733425140380859375;
    float _1836 = (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * 0.3183098733425140380859375;
    float _1843 = ((cbLight._m0[_1795].x * _1801) * _1836) + ((cbLight._m0[_1805].x * _1811) * _1834);
    float _1844 = ((_1801 * cbLight._m0[_1795].y) * _1836) + ((_1811 * cbLight._m0[_1805].y) * _1834);
    float _1845 = ((_1801 * cbLight._m0[_1795].z) * _1836) + ((_1811 * cbLight._m0[_1805].z) * _1834);
    uvec4 _1849 = floatBitsToUint(cbLight._m0[_1778 + 12u]);
    bool _1851 = _1849.x == 0u;
    float _1862;
    float _1864;
    float _1866;
    if (_1851)
    {
        _1862 = _1843;
        _1864 = _1844;
        _1866 = _1845;
    }
    else
    {
        uint _1870 = _1778 + 6u;
        float _1886 = (dot(vec3(cbLight._m0[_1778 + 2u].xyz), vec3(_529, _530, _531)) * 0.5) + 0.5;
        float _1887 = _1886 * _1886;
        float _4048 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
        float _1888 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1889 = isnan(1.0) ? _1793 : (isnan(_1793) ? 1.0 : min(_1793, 1.0));
        _1862 = (((cbLight._m0[_1870].x * 0.3183098733425140380859375) * _1888) * _1889) + _1843;
        _1864 = (((cbLight._m0[_1870].y * 0.3183098733425140380859375) * _1888) * _1889) + _1844;
        _1866 = (((cbLight._m0[_1870].z * 0.3183098733425140380859375) * _1888) * _1889) + _1845;
    }
    bool _1869 = _1849.y == 0u;
    float _1907;
    float _1909;
    float _1911;
    if (_1869)
    {
        _1907 = _1862;
        _1909 = _1864;
        _1911 = _1866;
    }
    else
    {
        uint _2077 = _1778 + 7u;
        float _2093 = (dot(vec3(cbLight._m0[_1778 + 3u].xyz), vec3(_529, _530, _531)) * 0.5) + 0.5;
        float _2094 = _2093 * _2093;
        float _4064 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        float _2095 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _2096 = isnan(1.0) ? _1794 : (isnan(_1794) ? 1.0 : min(_1794, 1.0));
        _1907 = (((cbLight._m0[_2077].x * 0.3183098733425140380859375) * _2095) * _2096) + _1862;
        _1909 = (((cbLight._m0[_2077].y * 0.3183098733425140380859375) * _2095) * _2096) + _1864;
        _1911 = (((cbLight._m0[_2077].z * 0.3183098733425140380859375) * _2095) * _2096) + _1866;
    }
    uint _1914 = _1778 + 8u;
    float _1927 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1778].w)) * _532) * 0.949999988079071044921875);
    float _1928 = _1927 * _1927;
    float _1929 = cbLight._m0[_1778].x + _613;
    float _1930 = cbLight._m0[_1778].y + _614;
    float _1931 = cbLight._m0[_1778].z + _615;
    float _1935 = inversesqrt(dot(vec3(_1929, _1930, _1931), vec3(_1929, _1930, _1931)));
    float _1936 = _1935 * _1929;
    float _1937 = _1935 * _1930;
    float _1938 = _1935 * _1931;
    float _1939 = dot(vec3(_529, _530, _531), vec3(cbLight._m0[_1778].xyz));
    float _4080 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
    float _1942 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _4091 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _1943 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _1944 = dot(vec3(_529, _530, _531), vec3(_1936, _1937, _1938));
    float _4102 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1947 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _1948 = dot(vec3(cbLight._m0[_1778].xyz), vec3(_1936, _1937, _1938));
    float _4113 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1952 = _1928 * _1928;
    float _1956 = ((_1947 * _1947) * (_1952 + (-1.0))) + 1.0;
    float _1964 = exp2(log2(1.0 - (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0)))) * 5.0);
    float _1965 = 0.959999978542327880859375 - _689;
    float _1967 = 0.959999978542327880859375 - _690;
    float _1968 = 0.959999978542327880859375 - _691;
    float _1975 = 1.0 - _1928;
    float _1986 = (0.5 / (((_1943 * ((_1942 * _1975) + _1928)) + 9.9999999392252902907785028219223e-09) + (((_1943 * _1975) + _1928) * _1942))) * _1942;
    float _4124 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1988 = (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_1952 / ((_1956 * _1956) * 3.141590118408203125));
    uint _1999 = _1778 + 9u;
    float _2010 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1815].w)) * _532) * 0.949999988079071044921875);
    float _2011 = _2010 * _2010;
    float _2012 = cbLight._m0[_1815].x + _613;
    float _2013 = cbLight._m0[_1815].y + _614;
    float _2014 = cbLight._m0[_1815].z + _615;
    float _2018 = inversesqrt(dot(vec3(_2012, _2013, _2014), vec3(_2012, _2013, _2014)));
    float _2019 = _2018 * _2012;
    float _2020 = _2018 * _2013;
    float _2021 = _2018 * _2014;
    float _2022 = dot(vec3(_529, _530, _531), vec3(cbLight._m0[_1815].xyz));
    float _4135 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2025 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _2026 = dot(vec3(_529, _530, _531), vec3(_2019, _2020, _2021));
    float _4146 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _2029 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _2030 = dot(vec3(cbLight._m0[_1815].xyz), vec3(_2019, _2020, _2021));
    float _4157 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2034 = _2011 * _2011;
    float _2038 = ((_2029 * _2029) * (_2034 + (-1.0))) + 1.0;
    float _2045 = exp2(log2(1.0 - (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0)))) * 5.0);
    float _2052 = 1.0 - _2011;
    float _2062 = (0.5 / (((_1943 * ((_2025 * _2052) + _2011)) + 9.9999999392252902907785028219223e-09) + (((_1943 * _2052) + _2011) * _2025))) * _2025;
    float _4168 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2064 = (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (_2034 / ((_2038 * _2038) * 3.141590118408203125));
    float _2074 = (((((_2045 * _1965) + _692) * cbLight._m0[_1999].x) * _2064) * _1801) + (((((_1964 * _1965) + _692) * cbLight._m0[_1914].x) * _1988) * _1811);
    float _2075 = (((((_2045 * _1967) + _694) * cbLight._m0[_1999].y) * _2064) * _1801) + (((((_1964 * _1967) + _694) * cbLight._m0[_1914].y) * _1988) * _1811);
    float _2076 = (((((_2045 * _1968) + _695) * cbLight._m0[_1999].z) * _2064) * _1801) + (((((_1964 * _1968) + _695) * cbLight._m0[_1914].z) * _1988) * _1811);
    float _2138;
    float _2140;
    float _2142;
    if (_1851)
    {
        _2138 = _2074;
        _2140 = _2075;
        _2142 = _2076;
    }
    else
    {
        uint _2144 = _1778 + 2u;
        uint _2148 = _1778 + 10u;
        float _2162 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2144].w)) * _532) * 0.949999988079071044921875);
        float _2163 = _2162 * _2162;
        float _2164 = cbLight._m0[_2144].x + _613;
        float _2165 = cbLight._m0[_2144].y + _614;
        float _2166 = cbLight._m0[_2144].z + _615;
        float _2170 = inversesqrt(dot(vec3(_2164, _2165, _2166), vec3(_2164, _2165, _2166)));
        float _2171 = _2170 * _2164;
        float _2172 = _2170 * _2165;
        float _2173 = _2170 * _2166;
        float _2174 = dot(vec3(_529, _530, _531), vec3(cbLight._m0[_2144].xyz));
        float _4179 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2177 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _2178 = dot(vec3(_529, _530, _531), vec3(_2171, _2172, _2173));
        float _4190 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
        float _2181 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _2182 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_2171, _2172, _2173));
        float _4201 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2186 = _2163 * _2163;
        float _2190 = ((_2181 * _2181) * (_2186 + (-1.0))) + 1.0;
        float _2197 = exp2(log2(1.0 - (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) * 5.0);
        float _2204 = 1.0 - _2163;
        float _2214 = (0.5 / (((_1943 * ((_2177 * _2204) + _2163)) + 9.9999999392252902907785028219223e-09) + (((_1943 * _2204) + _2163) * _2177))) * _2177;
        float _4212 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
        float _2216 = (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_2186 / ((_2190 * _2190) * 3.141590118408203125));
        float _2217 = isnan(1.0) ? _1793 : (isnan(_1793) ? 1.0 : min(_1793, 1.0));
        _2138 = (((((_2197 * _1965) + _692) * cbLight._m0[_2148].x) * _2216) * _2217) + _2074;
        _2140 = (((((_2197 * _1967) + _694) * cbLight._m0[_2148].y) * _2216) * _2217) + _2075;
        _2142 = (((((_2197 * _1968) + _695) * cbLight._m0[_2148].z) * _2216) * _2217) + _2076;
    }
    float _2252;
    float _2254;
    float _2256;
    if (_1869)
    {
        _2252 = _2138;
        _2254 = _2140;
        _2256 = _2142;
    }
    else
    {
        uint _2263 = _1778 + 3u;
        uint _2267 = _1778 + 11u;
        float _2281 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2263].w)) * _532) * 0.949999988079071044921875);
        float _2282 = _2281 * _2281;
        float _2283 = cbLight._m0[_2263].x + _613;
        float _2284 = cbLight._m0[_2263].y + _614;
        float _2285 = cbLight._m0[_2263].z + _615;
        float _2289 = inversesqrt(dot(vec3(_2283, _2284, _2285), vec3(_2283, _2284, _2285)));
        float _2290 = _2289 * _2283;
        float _2291 = _2289 * _2284;
        float _2292 = _2289 * _2285;
        float _2293 = dot(vec3(_529, _530, _531), vec3(cbLight._m0[_2263].xyz));
        float _4228 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2296 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _2297 = dot(vec3(_529, _530, _531), vec3(_2290, _2291, _2292));
        float _4239 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2300 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _2301 = dot(vec3(cbLight._m0[_2263].xyz), vec3(_2290, _2291, _2292));
        float _4250 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2305 = _2282 * _2282;
        float _2309 = ((_2300 * _2300) * (_2305 + (-1.0))) + 1.0;
        float _2316 = exp2(log2(1.0 - (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0)))) * 5.0);
        float _2323 = 1.0 - _2282;
        float _2333 = (0.5 / (((_1943 * ((_2296 * _2323) + _2282)) + 9.9999999392252902907785028219223e-09) + (((_1943 * _2323) + _2282) * _2296))) * _2296;
        float _4261 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
        float _2335 = (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_2305 / ((_2309 * _2309) * 3.141590118408203125));
        float _2336 = isnan(1.0) ? _1794 : (isnan(_1794) ? 1.0 : min(_1794, 1.0));
        _2252 = (((((_2316 * _1965) + _692) * cbLight._m0[_2267].x) * _2335) * _2336) + _2138;
        _2254 = (((((_2316 * _1967) + _694) * cbLight._m0[_2267].y) * _2335) * _2336) + _2140;
        _2256 = (((((_2316 * _1968) + _695) * cbLight._m0[_2267].z) * _2335) * _2336) + _2142;
    }
    float _2471;
    float _2473;
    float _2475;
    float _2477;
    float _2479;
    float _2481;
    if (_1776.y == 0u)
    {
        float _2411 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2412 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2411;
        float _2413 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2411;
        float _2414 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2411;
        uvec4 _2426 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2427 = _2426.x;
        uint _2438 = uint((float(_2426.y) * floor(float(uint(cbSceneParam._m0[85u].y * _631) / _2427))) + floor(float(uint(cbSceneParam._m0[85u].x * _630) / _2427)));
        float _2448 = (log2(_2414 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2449 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        uint _2452 = uint(isnan(14.0) ? _2449 : (isnan(_2449) ? 14.0 : min(_2449, 14.0)));
        uvec4 _2457 = texelFetch(g_lightClusterGridBuffer, int(((_2452 << 2u) + (_2438 << 6u)) >> 2u));
        uint _2458 = _2457.x;
        uint _2459 = _2426.z;
        float _2559;
        float _2561;
        float _2563;
        float _2565;
        float _2567;
        float _2569;
        if (((((1u << ((_2459 >> 4u) & 15u)) + 4294967295u) & _2458) == 0u) || ((_2459 & 240u) == 0u))
        {
            _2559 = 0.0;
            _2561 = 0.0;
            _2563 = 0.0;
            _2565 = 0.0;
            _2567 = 0.0;
            _2569 = 0.0;
        }
        else
        {
            float _2560;
            float _2562;
            float _2564;
            float _2566;
            float _2568;
            float _2570;
            float _2712 = 0.0;
            float _2713 = 0.0;
            float _2714 = 0.0;
            float _2715 = 0.0;
            float _2716 = 0.0;
            float _2717 = 0.0;
            uint _2718 = 0u;
            uint _2727;
            bool _2728;
            for (;;)
            {
                _2727 = texelFetch(g_lightClassification, int((((_2452 << 5u) + (_2438 << 9u)) + (_2718 << 2u)) >> 2u)).x;
                _2728 = _2727 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2728)
                {
                    frontier_phi_68_pred = _2712;
                    frontier_phi_68_pred_1 = _2717;
                    frontier_phi_68_pred_2 = _2716;
                    frontier_phi_68_pred_3 = _2715;
                    frontier_phi_68_pred_4 = _2714;
                    frontier_phi_68_pred_5 = _2713;
                }
                else
                {
                    float _2857;
                    float _2858;
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    uint _2863;
                    _2857 = _2712;
                    _2858 = _2713;
                    _2859 = _2714;
                    _2860 = _2715;
                    _2861 = _2716;
                    _2862 = _2717;
                    _2863 = _2727;
                    float _2784;
                    float _2785;
                    float _2786;
                    float _2787;
                    float _2788;
                    float _2789;
                    for (;;)
                    {
                        uint _2867 = uint(findLSB(_2863)) + (_2718 << 5u);
                        uint _2864 = (_2863 + 4294967295u) & _2863;
                        uint _2869 = _2867 * 48u;
                        vec4 _2883 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2869)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 3u)).x));
                        uint _2889 = (_2867 * 48u) + 4u;
                        vec4 _2902 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2889)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 3u)).x));
                        uint _2908 = (_2867 * 48u) + 8u;
                        vec3 _2919 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2908)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 2u)).x));
                        float _2923 = _2883.x - _2412;
                        float _2924 = _2883.y - _2413;
                        float _2925 = _2883.z - _2414;
                        float _2926 = dot(vec3(_2923, _2924, _2925), vec3(_2923, _2924, _2925));
                        float _2929 = inversesqrt(_2926);
                        float _2930 = _2929 * _2923;
                        float _2931 = _2929 * _2924;
                        float _2932 = _2929 * _2925;
                        float _2933 = dot(vec3(_649, _652, _655), vec3(_2930, _2931, _2932));
                        float _2938 = 1.0 - (_2926 * _2883.w);
                        float _4287 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
                        float _2939 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
                        float _2940 = sqrt(_2926) * _2902.w;
                        float _2943 = 1.39999997615814208984375 / (_2940 + 1.39999997615814208984375);
                        float _2944 = _2943 * _2943;
                        float _2947 = ((1.0 - _2944) * _2933) + _2944;
                        float _2950 = _2940 * _2940;
                        float _2954 = ((isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0))) * _2939) / ((_2950 * 0.699999988079071044921875) + 1.0);
                        float _2958 = (-0.0) - _2412;
                        float _2959 = (-0.0) - _2413;
                        float _2960 = (-0.0) - _2414;
                        float _2964 = inversesqrt(dot(vec3(_2958, _2959, _2960), vec3(_2958, _2959, _2960)));
                        float _2965 = _2964 * _2958;
                        float _2966 = _2964 * _2959;
                        float _2967 = _2964 * _2960;
                        float _2975 = exp2(log2(1.0 / ((_2950 * 3.5) + 5.0)) * 0.25);
                        float _2976 = 1.0 - _724;
                        float _2983 = sqrt(1.0 - ((1.0 - (_2976 * _2976)) * (1.0 - (_2975 * _2975))));
                        float _2984 = _2983 * _2983;
                        float _2985 = _2984 * _2984;
                        float _2986 = _2965 + _2930;
                        float _2987 = _2966 + _2931;
                        float _2988 = _2967 + _2932;
                        float _2992 = inversesqrt(dot(vec3(_2986, _2987, _2988), vec3(_2986, _2987, _2988)));
                        float _2996 = dot(vec3(_649, _652, _655), vec3(_2965, _2966, _2967));
                        float _4303 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
                        float _2999 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
                        float _3000 = dot(vec3(_649, _652, _655), vec3(_2992 * _2986, _2992 * _2987, _2992 * _2988));
                        float _4314 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
                        float _3003 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
                        float _3007 = ((_3003 * _3003) * (_2985 + (-1.0))) + 1.0;
                        float _3008 = _2943 * _2984;
                        float _3009 = _3008 * _3008;
                        float _3012 = ((1.0 - _3009) * _2933) + _3009;
                        float _4325 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                        float _3013 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                        float _3014 = 1.0 - _2984;
                        float _3024 = (0.5 / (((_3013 * ((_2999 * _3014) + _2984)) + 9.9999999392252902907785028219223e-09) + (((_3013 * _3014) + _2984) * _2999))) * _3013;
                        float _4336 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                        float _3035 = (((_2985 * 3.1415927410125732421875) * (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0)))) / ((_3007 * _3007) * ((_2950 * 2.1991131305694580078125) + 3.141590118408203125))) * _2939;
                        _2787 = (_2954 * _2902.x) + _2860;
                        _2788 = (_2954 * _2902.y) + _2861;
                        _2789 = (_2954 * _2902.z) + _2862;
                        _2784 = (_3035 * _2919.x) + _2857;
                        _2785 = (_3035 * _2919.y) + _2858;
                        _2786 = (_3035 * _2919.z) + _2859;
                        if (_2864 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2857 = _2784;
                            _2858 = _2785;
                            _2859 = _2786;
                            _2860 = _2787;
                            _2861 = _2788;
                            _2862 = _2789;
                            _2863 = _2864;
                        }
                    }
                    frontier_phi_68_pred = _2784;
                    frontier_phi_68_pred_1 = _2789;
                    frontier_phi_68_pred_2 = _2788;
                    frontier_phi_68_pred_3 = _2787;
                    frontier_phi_68_pred_4 = _2786;
                    frontier_phi_68_pred_5 = _2785;
                }
                _2560 = frontier_phi_68_pred;
                _2570 = frontier_phi_68_pred_1;
                _2568 = frontier_phi_68_pred_2;
                _2566 = frontier_phi_68_pred_3;
                _2564 = frontier_phi_68_pred_4;
                _2562 = frontier_phi_68_pred_5;
                uint _2719 = _2718 + 1u;
                if (_2719 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2712 = _2560;
                    _2713 = _2562;
                    _2714 = _2564;
                    _2715 = _2566;
                    _2716 = _2568;
                    _2717 = _2570;
                    _2718 = _2719;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2559 = _2560;
            _2561 = _2562;
            _2563 = _2564;
            _2565 = _2566;
            _2567 = _2568;
            _2569 = _2570;
        }
        uvec4 _2573 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2574 = _2573.z;
        uint _2576 = (_2574 >> 8u) & 15u;
        float _2680;
        float _2682;
        float _2684;
        float _2686;
        float _2688;
        float _2690;
        if (((4294967295u << _2576) & _2458) == 0u)
        {
            _2680 = _2559;
            _2682 = _2561;
            _2684 = _2563;
            _2686 = _2565;
            _2688 = _2567;
            _2690 = _2569;
        }
        else
        {
            float _2705 = inversesqrt(dot(vec3(_2412, _2413, _2414), vec3(_2412, _2413, _2414)));
            float _2706 = _2705 * _2412;
            float _2707 = _2705 * _2413;
            float _2708 = _2705 * _2414;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2576 < ((_2574 >> 12u) & 15u))
            {
                float _2681;
                float _2683;
                float _2685;
                float _2687;
                float _2689;
                float _2691;
                float _2840 = _2559;
                float _2841 = _2561;
                float _2842 = _2563;
                float _2843 = _2565;
                float _2844 = _2567;
                float _2845 = _2569;
                uint _2846 = _2576;
                uint _2855;
                bool _2856;
                for (;;)
                {
                    _2855 = texelFetch(g_lightClassification, int((((_2452 << 5u) + (_2438 << 9u)) + (_2846 << 2u)) >> 2u)).x;
                    _2856 = _2855 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2856)
                    {
                        frontier_phi_79_pred = _2845;
                        frontier_phi_79_pred_1 = _2844;
                        frontier_phi_79_pred_2 = _2843;
                        frontier_phi_79_pred_3 = _2842;
                        frontier_phi_79_pred_4 = _2841;
                        frontier_phi_79_pred_5 = _2840;
                    }
                    else
                    {
                        float _3049;
                        float _3050;
                        float _3051;
                        float _3052;
                        float _3053;
                        float _3054;
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3062 = _2840;
                        float _3063 = _2841;
                        float _3064 = _2842;
                        float _3065 = _2843;
                        float _3066 = _2844;
                        float _3067 = _2845;
                        uint _3068 = _2855;
                        uint _3069;
                        vec4 _3094;
                        float _3095;
                        vec4 _3110;
                        vec3 _3122;
                        vec4 _3137;
                        vec4 _3153;
                        float _3199;
                        bool _3200;
                        for (;;)
                        {
                            uint _3079 = ((_2846 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3068));
                            _3069 = (_3068 + 4294967295u) & _3068;
                            uint _3081 = _3079 * 40u;
                            _3094 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3081)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 3u)).x));
                            _3095 = _3094.w;
                            uint _3097 = (_3079 * 40u) + 4u;
                            _3110 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3097)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 3u)).x));
                            uint _3112 = (_3079 * 40u) + 8u;
                            _3122 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x));
                            uint _3124 = (_3079 * 40u) + 16u;
                            _3137 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 3u)).x));
                            uint _3140 = (_3079 * 40u) + 20u;
                            _3153 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3140)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 3u)).x));
                            uint _3155 = (_3079 * 40u) + 24u;
                            vec4 _3168 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3155)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 3u)).x));
                            uint _3174 = (_3079 * 40u) + 28u;
                            vec4 _3187 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3174)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 3u)).x));
                            _3199 = fma(_2414, _3187.z, fma(_2413, _3187.y, _3187.x * _2412)) + _3187.w;
                            _3200 = !((fma(_2414, _3168.z, fma(_2413, _3168.y, _3168.x * _2412)) + _3168.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3200)
                            {
                                float _3227 = _3094.x - _2412;
                                float _3228 = _3094.y - _2413;
                                float _3229 = _3094.z - _2414;
                                float _3230 = dot(vec3(_3227, _3228, _3229), vec3(_3227, _3228, _3229));
                                float _3233 = inversesqrt(_3230);
                                float _3234 = _3233 * _3227;
                                float _3235 = _3233 * _3228;
                                float _3236 = _3233 * _3229;
                                float _3240 = 1.0 - (_3230 / (_3095 * _3095));
                                float _4347 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                                float _3241 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
                                float _3245 = sqrt(_3230) * _3110.w;
                                float _3247 = 1.39999997615814208984375 / (_3245 + 1.39999997615814208984375);
                                float _3248 = _3247 * _3247;
                                float _3251 = ((1.0 - _3248) * dot(vec3(_3234, _3235, _3236), vec3(_649, _652, _655))) + _3248;
                                float _3254 = _3245 * _3245;
                                float _3258 = (fma(_2414, _3137.z, fma(_2413, _3137.y, _3137.x * _2412)) + _3137.w) / _3199;
                                float _3259 = (fma(_2414, _3153.z, fma(_2413, _3153.y, _3153.x * _2412)) + _3153.w) / _3199;
                                float _3263 = 1.0 - dot(vec2(_3258, _3259), vec2(_3258, _3259));
                                float _4363 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                                float _3264 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
                                float _3265 = _3264 * (((isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0))) * _3241) / ((_3254 * 0.699999988079071044921875) + 1.0));
                                float _3277 = exp2(log2(1.0 / ((_3254 * 3.5) + 5.0)) * 0.25);
                                float _3278 = 1.0 - _724;
                                float _3285 = sqrt(1.0 - ((1.0 - (_3278 * _3278)) * (1.0 - (_3277 * _3277))));
                                float _3286 = _3285 * _3285;
                                float _3287 = _3286 * _3286;
                                float _3288 = _3234 - _2706;
                                float _3289 = _3235 - _2707;
                                float _3290 = _3236 - _2708;
                                float _3294 = inversesqrt(dot(vec3(_3288, _3289, _3290), vec3(_3288, _3289, _3290)));
                                float _3298 = dot(vec3(_649, _652, _655), vec3((-0.0) - _2706, (-0.0) - _2707, (-0.0) - _2708));
                                float _4374 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                                float _3301 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
                                float _3302 = dot(vec3(_649, _652, _655), vec3(_3294 * _3288, _3294 * _3289, _3294 * _3290));
                                float _4385 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                                float _3305 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                                float _3309 = ((_3305 * _3305) * (_3287 + (-1.0))) + 1.0;
                                float _3310 = _3247 * _3286;
                                float _3311 = _3310 * _3310;
                                float _3317 = ((1.0 - _3311) * dot(vec3(_649, _652, _655), vec3(_3234, _3235, _3236))) + _3311;
                                float _4396 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                                float _3318 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
                                float _3319 = 1.0 - _3286;
                                float _3329 = (0.5 / (((_3318 * ((_3301 * _3319) + _3286)) + 9.9999999392252902907785028219223e-09) + (((_3318 * _3319) + _3286) * _3301))) * _3318;
                                float _4407 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                                float _3339 = (_3264 * _3241) * (((_3287 * 3.1415927410125732421875) * (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0)))) / ((_3309 * _3309) * ((_3254 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3265 * _3110.y;
                                frontier_phi_85_pred_1 = _3265 * _3110.x;
                                frontier_phi_85_pred_2 = _3339 * _3122.z;
                                frontier_phi_85_pred_3 = _3339 * _3122.y;
                                frontier_phi_85_pred_4 = _3339 * _3122.x;
                                frontier_phi_85_pred_5 = _3265 * _3110.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3347 = frontier_phi_85_pred;
                            _3346 = frontier_phi_85_pred_1;
                            _3345 = frontier_phi_85_pred_2;
                            _3344 = frontier_phi_85_pred_3;
                            _3343 = frontier_phi_85_pred_4;
                            _3348 = frontier_phi_85_pred_5;
                            _3052 = _3346 + _3065;
                            _3053 = _3347 + _3066;
                            _3054 = _3348 + _3067;
                            _3049 = _3343 + _3062;
                            _3050 = _3344 + _3063;
                            _3051 = _3345 + _3064;
                            if (_3069 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3062 = _3049;
                                _3063 = _3050;
                                _3064 = _3051;
                                _3065 = _3052;
                                _3066 = _3053;
                                _3067 = _3054;
                                _3068 = _3069;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3054;
                        frontier_phi_79_pred_1 = _3053;
                        frontier_phi_79_pred_2 = _3052;
                        frontier_phi_79_pred_3 = _3051;
                        frontier_phi_79_pred_4 = _3050;
                        frontier_phi_79_pred_5 = _3049;
                    }
                    _2691 = frontier_phi_79_pred;
                    _2689 = frontier_phi_79_pred_1;
                    _2687 = frontier_phi_79_pred_2;
                    _2685 = frontier_phi_79_pred_3;
                    _2683 = frontier_phi_79_pred_4;
                    _2681 = frontier_phi_79_pred_5;
                    uint _2847 = _2846 + 1u;
                    if (_2847 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2840 = _2681;
                        _2841 = _2683;
                        _2842 = _2685;
                        _2843 = _2687;
                        _2844 = _2689;
                        _2845 = _2691;
                        _2846 = _2847;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2685;
                frontier_phi_60_61_ladder_1 = _2691;
                frontier_phi_60_61_ladder_2 = _2689;
                frontier_phi_60_61_ladder_3 = _2687;
                frontier_phi_60_61_ladder_4 = _2683;
                frontier_phi_60_61_ladder_5 = _2681;
            }
            else
            {
                frontier_phi_60_61_ladder = _2563;
                frontier_phi_60_61_ladder_1 = _2569;
                frontier_phi_60_61_ladder_2 = _2567;
                frontier_phi_60_61_ladder_3 = _2565;
                frontier_phi_60_61_ladder_4 = _2561;
                frontier_phi_60_61_ladder_5 = _2559;
            }
            _2680 = frontier_phi_60_61_ladder_5;
            _2682 = frontier_phi_60_61_ladder_4;
            _2684 = frontier_phi_60_61_ladder;
            _2686 = frontier_phi_60_61_ladder_3;
            _2688 = frontier_phi_60_61_ladder_2;
            _2690 = frontier_phi_60_61_ladder_1;
        }
        float _2695 = isnan(1.0) ? _708 : (isnan(_708) ? 1.0 : min(_708, 1.0));
        _2471 = (_2695 * _2686) + _1907;
        _2473 = (_2695 * _2688) + _1909;
        _2475 = (_2695 * _2690) + _1911;
        _2477 = ((_2680 * _692) * _2695) + _2252;
        _2479 = ((_2682 * _694) * _2695) + _2254;
        _2481 = ((_2684 * _695) * _2695) + _2256;
    }
    else
    {
        _2471 = _1907;
        _2473 = _1909;
        _2475 = _1911;
        _2477 = _2252;
        _2479 = _2254;
        _2481 = _2256;
    }
    float _4423 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _4434 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _4445 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _2498 = ((isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_2471 + ((isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0))) * _708))) + ((_2477 + ((isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))) * _1543)) * cbPerFrame._m0[3u].x);
    float _2499 = ((isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * (_2473 + ((isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0))) * _708))) + ((_2479 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _1543)) * cbPerFrame._m0[3u].x);
    float _2500 = ((isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_2475 + ((isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0))) * _708))) + ((_2481 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _1543)) * cbPerFrame._m0[3u].x);
    uint _2501 = _232 + 6u;
    float _2509 = _630 / cbSceneParam._m0[86u].x;
    float _2510 = _631 / cbSceneParam._m0[86u].y;
    vec4 _2524 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2509, _2510, (log2((isnan(cbSceneParam._m0[77u].w) ? _555 : (isnan(_555) ? cbSceneParam._m0[77u].w : min(_555, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2526 = _2524.x;
    float _2527 = _2524.y;
    float _2528 = _2524.z;
    float _2529 = _2524.w;
    float _2622;
    float _2624;
    float _2626;
    float _2628;
    if (_555 > cbSceneParam._m0[78u].w)
    {
        float _2584 = isnan(_555) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _555 : min(cbSceneParam._m0[80u].w, _555));
        float _2585 = _2584 / _555;
        float _2596 = _2585 * _606;
        float _2597 = _607 * _2585;
        float _2598 = (-0.0) - _2597;
        float _2600 = _2585 * _608;
        float _2602 = (cbSceneParam._m0[77u].w * _2598) / _2584;
        float _2603 = _2602 + cbSceneParam._m0[79u].w;
        float _2604 = cbSceneParam._m0[79u].w - _2597;
        float _2610 = sqrt(((_2596 * _2596) + (_2597 * _2597)) + (_2600 * _2600));
        float _2613 = (1.0 - (cbSceneParam._m0[77u].w / _2584)) * _2610;
        float _2618 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2620 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2797;
        if (abs((_2598 - _2602) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2797 = ((((_2603 > 0.0) ? exp2(_2618 * _2603) : (2.0 - exp2(_2620 * _2603))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2613;
        }
        else
        {
            float _2741 = 1.0 / cbSceneParam._m0[80u].x;
            float _2742 = isnan(_2604) ? _2603 : (isnan(_2603) ? _2604 : max(_2603, _2604));
            float _2743 = isnan(_2604) ? _2603 : (isnan(_2603) ? _2604 : min(_2603, _2604));
            float _2752 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : min(_2742, 0.0));
            float _2753 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : min(_2743, 0.0));
            _2797 = ((abs(_2610 / _2598) * cbSceneParam._m0[80u].y) * ((((_2752 - _2753) * 2.0) - ((exp2(_2618 * (isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0)))) - exp2(_2618 * (isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0))))) * _2741)) - ((exp2(_2620 * _2752) - exp2(_2620 * _2753)) * _2741))) + (_2613 * cbSceneParam._m0[80u].z);
        }
        vec4 _2799 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2509, _2510, 1.0), 0.0);
        float _2808 = exp2((_2797 * (-1.44269502162933349609375)) * (1.0 - _2799.w));
        float _2809 = log2(_2808);
        float _2825 = log2(_2529);
        _2622 = (exp2(_2825 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2809 * cbSceneParam._m0[78u].x)) * _2799.x) / cbSceneParam._m0[78u].x)) + _2526;
        _2624 = (exp2(_2825 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2809 * cbSceneParam._m0[78u].y)) * _2799.y) / cbSceneParam._m0[78u].y)) + _2527;
        _2626 = (exp2(_2825 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2809 * cbSceneParam._m0[78u].z)) * _2799.z) / cbSceneParam._m0[78u].z)) + _2528;
        _2628 = _2808 * _2529;
    }
    else
    {
        _2622 = _2526;
        _2624 = _2527;
        _2626 = _2528;
        _2628 = _2529;
    }
    bool _2835;
    vec4 _2638;
    vec4 _2660;
    float _2662;
    float _2666;
    float _2667;
    float _2668;
    float _2669;
    bool _2679;
    for (;;)
    {
        _2638 = cbMatDynParam._m0[0u];
        float _2640 = roundEven(_2638.y);
        bool _2641 = _2640 == 3.0;
        float _2642 = log2(_2628);
        float _2649 = exp2(_2642 * cbSceneParam._m0[78u].x) * _2498;
        float _2650 = exp2(_2642 * cbSceneParam._m0[78u].y) * _2499;
        float _2651 = exp2(_2642 * cbSceneParam._m0[78u].z) * _2500;
        float _2658 = _619 + (-0.5);
        _2660 = cbMtdParam._m0[1u];
        _2662 = _2660.y * _2658;
        float _2665 = (_2640 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2666 = _2665 * (_2641 ? _2649 : (_2649 + (cbSceneParam._m0[72u].w * _2622)));
        _2667 = _2665 * (_2641 ? _2650 : (_2650 + (cbSceneParam._m0[72u].w * _2624)));
        _2668 = _2665 * (_2641 ? _2651 : (_2651 + (cbSceneParam._m0[72u].w * _2626)));
        _2669 = _2658 * 0.999000012874603271484375;
        _2679 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2679)
        {
            if ((cbInstanceData._m0[_232 + 7u].x + _2669) < 0.5)
            {
                _2835 = true;
                break;
            }
        }
        uint _2776 = _668 + uint(_2638.w);
        if ((cbInstanceData._m0[_2776].w < 1.0) && ((cbInstanceData._m0[_2776].w + _2669) < 0.5))
        {
            _2835 = true;
            break;
        }
        if ((_2662 + 1.0) < _2660.x)
        {
            _2835 = true;
            break;
        }
        _2835 = false;
        break;
    }
    float _3040;
    if (_2835)
    {
        discard_state = true;
        _3040 = 0.0;
    }
    else
    {
        _3040 = cbInstanceData._m0[_2501].w;
    }
    SV_Target.x = _2666;
    SV_Target.y = _2667;
    SV_Target.z = _2668;
    SV_Target.w = _3040;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2501].w;
    discard_exit();
}


