#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1097;
float _3764;
float _3765;
float _3766;
float _3767;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _243 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _243 + 1u;
    uint _252 = _243 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_243].x * cbInstanceData._m0[_243].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _282 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _288 = _282.x * cbMtdParam._m0[9u].x;
    float _289 = _282.y * cbMtdParam._m0[9u].y;
    float _290 = _282.z * cbMtdParam._m0[9u].z;
    vec4 _303 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_3, SS_BumpMap), vec2((_262 * cbTextureTilingScale._m0[20u].x) + cbTextureTilingScale._m0[20u].z, (_263 * cbTextureTilingScale._m0[20u].y) + cbTextureTilingScale._m0[20u].w));
    vec4 _329 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _333 = _329.z;
    float _337 = (_329.x * 2.0) + (-1.0);
    float _338 = (_329.y * 2.0) + (-1.0);
    float _339 = dot(vec2(_337, _338), vec2(_337, _338));
    float _3776 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _345 = sqrt(1.0 - (isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))));
    float _350 = _337 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_303.x * 2.0) + (-1.0)));
    float _351 = _338 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_303.y * 2.0) + (-1.0)));
    vec4 _364 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _262) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _263) + cbTextureTilingScale._m0[19u].w));
    float _366 = _364.x;
    float _367 = 1.0 - _366;
    float _400 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_366 - _367) * cbMtdParam._m0[24u].w) + _367) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3787 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _401 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _409 = ((((cbMtdParam._m0[10u].x - _288) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _401) + _288;
    float _410 = ((((cbMtdParam._m0[10u].y - _289) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _401) + _289;
    float _411 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _290)) * _401) + _290;
    vec4 _424 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _426 = _424.x;
    float _428 = _426 - (_426 * _401);
    float _433 = (((_303.z - _333) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _333;
    float _437 = ((cbMtdParam._m0[23u].y - _433) * _401) + _433;
    vec4 _459 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _262) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].w * cbPerFrame._m0[22u].x) + _263) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _465 = (_459.x * 2.0) + (-1.0);
    float _466 = (_459.y * 2.0) + (-1.0);
    float _467 = dot(vec2(_465, _466), vec2(_465, _466));
    float _3798 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _483 = (_401 * (((cbMtdParam._m0[22u].z * _350) - _350) + _465)) + _350;
    float _484 = (_401 * (((cbMtdParam._m0[22u].z * _351) - _351) + _466)) + _351;
    float _485 = (_401 * (sqrt(1.0 - (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0)))) - _345)) + _345;
    float _487 = cbMtdParam._m0[22u].x + _329.w;
    float _491 = gl_FragCoord.x * 0.125;
    float _493 = gl_FragCoord.y * 0.125;
    float _503 = fma(_485, _230 * NORMAL.x, fma(_484, _237 * TANGENT.x, (_223 * _215) * _483));
    float _506 = fma(_485, _230 * NORMAL.y, fma(_484, _237 * TANGENT.y, (_223 * _216) * _483));
    float _509 = fma(_485, _230 * NORMAL.z, fma(_484, _237 * TANGENT.z, (_223 * _217) * _483));
    float _513 = inversesqrt(dot(vec3(_503, _506, _509), vec3(_503, _506, _509)));
    float _514 = _513 * _503;
    float _515 = _513 * _506;
    float _516 = _513 * _509;
    float _3809 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _517 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _3820 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _3831 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _3842 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _3853 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _3864 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _522 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_491, _493)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _540 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _581 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _591 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _581);
    float _592 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _581);
    float _593 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _581);
    float _597 = inversesqrt(dot(vec3(_591, _592, _593), vec3(_591, _592, _593)));
    float _598 = _591 * _597;
    float _599 = _592 * _597;
    float _600 = _593 * _597;
    vec4 _602 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_491, _493));
    float _604 = _602.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _779 = sqrt(((_591 * _591) + (_592 * _592)) + (_593 * _593));
        float _785 = (cbMatDynParam._m0[5u].x * _779) + cbMatDynParam._m0[5u].y;
        float _3875 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _786 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _790 = (cbMatDynParam._m0[5u].z * _779) + cbMatDynParam._m0[5u].w;
        float _3886 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) - _786)) + _786) < ((_604 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _616 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _617 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _637 = fma(_516, cbSceneParam._m0[5u].z, fma(_515, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _514));
    float _640 = fma(_516, cbSceneParam._m0[6u].z, fma(_515, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _514));
    float _643 = fma(_516, cbSceneParam._m0[7u].z, fma(_515, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _514));
    uint _656 = _243 + 9u;
    uint _657 = _656 + uint(cbMatDynParam._m0[0u].w);
    float _663 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0)))) * cbInstanceData._m0[_657].x;
    float _664 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0)))) * cbInstanceData._m0[_657].y;
    float _665 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0)))) * cbInstanceData._m0[_657].z;
    float _3897 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _666 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _3908 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _667 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _3919 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _668 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _669 = 1.0 - _522;
    float _670 = _666 * _669;
    float _671 = _667 * _669;
    float _672 = _668 * _669;
    float _677 = (_666 + (-0.039999999105930328369140625)) * _522;
    float _678 = (_667 + (-0.039999999105930328369140625)) * _522;
    float _679 = (_668 + (-0.039999999105930328369140625)) * _522;
    float _680 = _677 + 0.039999999105930328369140625;
    float _682 = _678 + 0.039999999105930328369140625;
    float _683 = _679 + 0.039999999105930328369140625;
    vec4 _692 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _616, cbSceneParam._m0[86u].y * _617));
    float _696 = ((isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * TEXCOORD_5.w) * _692.x;
    float _697 = dot(vec3(_514, _515, _516), vec3(_598, _599, _600));
    float _700 = _697 * 2.0;
    float _704 = (_700 * _514) - _598;
    float _705 = (_700 * _515) - _599;
    float _706 = (_700 * _516) - _600;
    float _710 = abs(dot(vec3(_598, _599, _600), vec3(_514, _515, _516)));
    float _3930 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _712 = sqrt(_517);
    float _725 = exp2((_712 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_712 * 3.0));
    float _731 = (1.0 - _725) * ((_712 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _732 = _725 * _712;
    float _760 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _764 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _768 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1096;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _821 = fma(_768, cbModelParam._m0[26u].z, fma(_764, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _760));
        float _825 = fma(_768, cbModelParam._m0[27u].z, fma(_764, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _760));
        float _829 = fma(_768, cbModelParam._m0[28u].z, fma(_764, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _760));
        float _854 = _760 + _514;
        float _855 = _764 + _515;
        float _856 = _768 + _516;
        float _866 = fma(_856, cbModelParam._m0[26u].z, fma(_855, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _854)) - _821;
        float _867 = fma(_856, cbModelParam._m0[27u].z, fma(_855, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _854)) - _825;
        float _868 = fma(_856, cbModelParam._m0[28u].z, fma(_855, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _854)) - _829;
        float _872 = inversesqrt(dot(vec3(_866, _867, _868), vec3(_866, _867, _868)));
        float _885 = ((_872 * _866) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_821 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _886 = ((_872 * _867) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_825 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _887 = ((_872 * _868) / cbModelParam._m0[34u].z) + ((((((_829 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _890 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_885, _886, _887), 0.0);
        vec4 _897 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_885, _886, _887), 0.0);
        vec4 _904 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_885, _886, _887), 0.0);
        vec4 _911 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_885, _886, _887), 0.0);
        float _924 = exp2((_890.w + (-0.5)) * 20.0) * 2.0;
        float _925 = _924 * (_890.x + (-0.5));
        float _926 = _924 * (_890.y + (-0.5));
        float _927 = _924 * (_890.z + (-0.5));
        float _934 = exp2((_897.w + (-0.5)) * 20.0) * 2.0;
        float _935 = _934 * (_897.x + (-0.5));
        float _936 = _934 * (_897.y + (-0.5));
        float _937 = _934 * (_897.z + (-0.5));
        float _944 = exp2((_904.w + (-0.5)) * 20.0) * 2.0;
        float _945 = _944 * (_904.x + (-0.5));
        float _946 = _944 * (_904.y + (-0.5));
        float _947 = _944 * (_904.z + (-0.5));
        float _954 = exp2((_911.w + (-0.5)) * 20.0) * 2.0;
        float _955 = _954 * (_911.x + (-0.5));
        float _956 = _954 * (_911.y + (-0.5));
        float _957 = _954 * (_911.z + (-0.5));
        float _958 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _959 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _960 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _961 = _925 * 0.5;
        float _962 = _935 * 0.5;
        float _963 = _945 * 0.5;
        float _964 = dot(vec3(_961, _962, _963), vec3(_961, _962, _963));
        float _969 = (_964 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_964);
        float _978 = (dot(vec3(_514, _515, _516), vec3(_969 * _961, _969 * _962, _969 * _963)) + 1.0) * 0.5;
        float _3956 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _988 = sqrt(((_962 * _962) + (_961 * _961)) + (_963 * _963)) / (_958 + 9.9999997473787516355514526367188e-06);
        float _3967 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _990 = _989 * 2.0;
        float _994 = (1.0 - _989) / (_989 + 1.0);
        float _3978 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _995 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1004 = ((((1.0 - _995) * (_990 + 2.0)) * exp2(log2(isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * (_990 + 1.0))) + _995) * _958;
        float _1005 = _926 * 0.5;
        float _1006 = _936 * 0.5;
        float _1007 = _946 * 0.5;
        float _1008 = dot(vec3(_1005, _1006, _1007), vec3(_1005, _1006, _1007));
        float _1013 = (_1008 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1008);
        float _1021 = (dot(vec3(_514, _515, _516), vec3(_1013 * _1005, _1013 * _1006, _1013 * _1007)) + 1.0) * 0.5;
        float _3989 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1030 = sqrt(((_1006 * _1006) + (_1005 * _1005)) + (_1007 * _1007)) / (_959 + 9.9999997473787516355514526367188e-06);
        float _4000 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1032 = _1031 * 2.0;
        float _1036 = (1.0 - _1031) / (_1031 + 1.0);
        float _4011 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1046 = ((((1.0 - _1037) * (_1032 + 2.0)) * exp2(log2(isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_1032 + 1.0))) + _1037) * _959;
        float _1047 = _927 * 0.5;
        float _1048 = _937 * 0.5;
        float _1049 = _947 * 0.5;
        float _1050 = dot(vec3(_1047, _1048, _1049), vec3(_1047, _1048, _1049));
        float _1055 = (_1050 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1050);
        float _1063 = (dot(vec3(_514, _515, _516), vec3(_1055 * _1047, _1055 * _1048, _1055 * _1049)) + 1.0) * 0.5;
        float _4022 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1072 = sqrt(((_1048 * _1048) + (_1047 * _1047)) + (_1049 * _1049)) / (_960 + 9.9999997473787516355514526367188e-06);
        float _4033 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1074 = _1073 * 2.0;
        float _1078 = (1.0 - _1073) / (_1073 + 1.0);
        float _4044 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1088 = ((((1.0 - _1079) * (_1074 + 2.0)) * exp2(log2(isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_1074 + 1.0))) + _1079) * _960;
        _1096 = _927;
        _1098 = _926;
        _1099 = _925;
        _1100 = _937;
        _1101 = _936;
        _1102 = _935;
        _1103 = _947;
        _1104 = _946;
        _1105 = _945;
        _1106 = _960;
        _1107 = _959;
        _1108 = _958;
        _1109 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0)));
        _1110 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0)));
        _1111 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0)));
    }
    else
    {
        _1096 = _1097;
        _1098 = _1097;
        _1099 = _1097;
        _1100 = _1097;
        _1101 = _1097;
        _1102 = _1097;
        _1103 = _1097;
        _1104 = _1097;
        _1105 = _1097;
        _1106 = _1097;
        _1107 = _1097;
        _1108 = _1097;
        _1109 = 0.0;
        _1110 = 0.0;
        _1111 = 0.0;
    }
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1136 = fma(_768, cbModelParam._m0[30u].z, fma(_764, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _760));
        float _1140 = fma(_768, cbModelParam._m0[31u].z, fma(_764, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _760));
        float _1144 = fma(_768, cbModelParam._m0[32u].z, fma(_764, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _760));
        float _1167 = _760 + _514;
        float _1168 = _764 + _515;
        float _1169 = _768 + _516;
        float _1179 = fma(_1169, cbModelParam._m0[30u].z, fma(_1168, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1167)) - _1136;
        float _1180 = fma(_1169, cbModelParam._m0[31u].z, fma(_1168, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1167)) - _1140;
        float _1181 = fma(_1169, cbModelParam._m0[32u].z, fma(_1168, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1167)) - _1144;
        float _1185 = inversesqrt(dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181)));
        float _1198 = ((_1185 * _1179) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1136 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1199 = ((_1185 * _1180) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1140 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1200 = ((_1185 * _1181) / cbModelParam._m0[35u].z) + ((((((_1144 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1202 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        vec4 _1209 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        vec4 _1216 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        vec4 _1223 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        float _1235 = exp2((_1202.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1202.x + (-0.5));
        float _1237 = _1235 * (_1202.y + (-0.5));
        float _1238 = _1235 * (_1202.z + (-0.5));
        float _1245 = exp2((_1209.w + (-0.5)) * 20.0) * 2.0;
        float _1246 = _1245 * (_1209.x + (-0.5));
        float _1247 = _1245 * (_1209.y + (-0.5));
        float _1248 = _1245 * (_1209.z + (-0.5));
        float _1255 = exp2((_1216.w + (-0.5)) * 20.0) * 2.0;
        float _1256 = _1255 * (_1216.x + (-0.5));
        float _1257 = _1255 * (_1216.y + (-0.5));
        float _1258 = _1255 * (_1216.z + (-0.5));
        float _1265 = exp2((_1223.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1223.x + (-0.5));
        float _1267 = _1265 * (_1223.y + (-0.5));
        float _1268 = _1265 * (_1223.z + (-0.5));
        float _1269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1270 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1271 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1272 = _1236 * 0.5;
        float _1273 = _1246 * 0.5;
        float _1274 = _1256 * 0.5;
        float _1275 = dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274));
        float _1280 = (_1275 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1275);
        float _1288 = (dot(vec3(_514, _515, _516), vec3(_1280 * _1272, _1280 * _1273, _1280 * _1274)) + 1.0) * 0.5;
        float _4085 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1297 = sqrt(((_1273 * _1273) + (_1272 * _1272)) + (_1274 * _1274)) / (_1269 + 9.9999997473787516355514526367188e-06);
        float _4096 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1299 = _1298 * 2.0;
        float _1303 = (1.0 - _1298) / (_1298 + 1.0);
        float _4107 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1313 = ((((1.0 - _1304) * (_1299 + 2.0)) * exp2(log2(isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_1299 + 1.0))) + _1304) * _1269;
        float _1314 = _1237 * 0.5;
        float _1315 = _1247 * 0.5;
        float _1316 = _1257 * 0.5;
        float _1317 = dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316));
        float _1322 = (_1317 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1317);
        float _1330 = (dot(vec3(_514, _515, _516), vec3(_1322 * _1314, _1322 * _1315, _1322 * _1316)) + 1.0) * 0.5;
        float _4118 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1339 = sqrt(((_1315 * _1315) + (_1314 * _1314)) + (_1316 * _1316)) / (_1270 + 9.9999997473787516355514526367188e-06);
        float _4129 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1341 = _1340 * 2.0;
        float _1345 = (1.0 - _1340) / (_1340 + 1.0);
        float _4140 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1355 = ((((1.0 - _1346) * (_1341 + 2.0)) * exp2(log2(isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_1341 + 1.0))) + _1346) * _1270;
        float _1356 = _1238 * 0.5;
        float _1357 = _1248 * 0.5;
        float _1358 = _1258 * 0.5;
        float _1359 = dot(vec3(_1356, _1357, _1358), vec3(_1356, _1357, _1358));
        float _1364 = (_1359 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1359);
        float _1372 = (dot(vec3(_514, _515, _516), vec3(_1364 * _1356, _1364 * _1357, _1364 * _1358)) + 1.0) * 0.5;
        float _4151 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1381 = sqrt(((_1357 * _1357) + (_1356 * _1356)) + (_1358 * _1358)) / (_1271 + 9.9999997473787516355514526367188e-06);
        float _4162 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1383 = _1382 * 2.0;
        float _1387 = (1.0 - _1382) / (_1382 + 1.0);
        float _4173 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1397 = ((((1.0 - _1388) * (_1383 + 2.0)) * exp2(log2(isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_1383 + 1.0))) + _1388) * _1271;
        _1405 = _1238;
        _1406 = _1237;
        _1407 = _1236;
        _1408 = _1248;
        _1409 = _1247;
        _1410 = _1246;
        _1411 = _1258;
        _1412 = _1257;
        _1413 = _1256;
        _1414 = _1271;
        _1415 = _1270;
        _1416 = _1269;
        _1417 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)));
        _1418 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)));
        _1419 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)));
    }
    else
    {
        _1405 = _1097;
        _1406 = _1097;
        _1407 = _1097;
        _1408 = _1097;
        _1409 = _1097;
        _1410 = _1097;
        _1411 = _1097;
        _1412 = _1097;
        _1413 = _1097;
        _1414 = _1097;
        _1415 = _1097;
        _1416 = _1097;
        _1417 = 0.0;
        _1418 = 0.0;
        _1419 = 0.0;
    }
    float _1429 = (cbModelParam._m0[1u].x * (_1417 - _1109)) + _1109;
    float _1430 = (cbModelParam._m0[1u].x * (_1418 - _1110)) + _1110;
    float _1431 = (cbModelParam._m0[1u].x * (_1419 - _1111)) + _1111;
    float _1452 = fma(_1431, cbSceneParam._m0[89u].z, fma(_1430, cbSceneParam._m0[89u].y, _1429 * cbSceneParam._m0[89u].x));
    float _1455 = fma(_1431, cbSceneParam._m0[90u].z, fma(_1430, cbSceneParam._m0[90u].y, _1429 * cbSceneParam._m0[90u].x));
    float _1458 = fma(_1431, cbSceneParam._m0[91u].z, fma(_1430, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1429));
    float _1473 = _704 * 0.5;
    float _1474 = _705 * 0.5;
    float _1475 = _706 * 0.5;
    float _1476 = dot(vec4(_1473, _1474, _1475, 1.0), vec4(_1407, _1410, _1413, _1416));
    float _1479 = dot(vec4(_1473, _1474, _1475, 1.0), vec4(_1406, _1409, _1412, _1415));
    float _1482 = dot(vec4(_1473, _1474, _1475, 1.0), vec4(_1405, _1408, _1411, _1414));
    float _1516;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1489 = dot(vec4(_1473, _1474, _1475, 1.0), vec4(_1096, _1100, _1103, _1106));
        float _1493 = dot(vec4(_1473, _1474, _1475, 1.0), vec4(_1098, _1101, _1104, _1107));
        float _1497 = dot(vec4(_1473, _1474, _1475, 1.0), vec4(_1099, _1102, _1105, _1108));
        float _1504 = dot(vec4(cbModelParam._m0[39u]), vec4(_1473, _1474, _1475, 1.0));
        _1516 = dot(vec3(isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)), isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)), isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1504) ? 0.0 : (isnan(0.0) ? _1504 : max(0.0, _1504))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1516 = 1.0;
    }
    float _1527;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1518 = dot(vec4(cbModelParam._m0[40u]), vec4(_1473, _1474, _1475, 1.0));
        _1527 = dot(vec3(isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)), isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)), isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1518) ? 0.0 : (isnan(0.0) ? _1518 : max(0.0, _1518))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1527 = 1.0;
    }
    float _1531 = (_1527 * cbModelParam._m0[1u].x) + (_1516 * (1.0 - cbModelParam._m0[1u].x));
    float _1541 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _517);
    float _1542 = isnan(_1541) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1541 : min(cbModelParam._m0[25u].z, _1541));
    float _1624;
    float _1626;
    float _1628;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1591 = fma(_768, cbModelParam._m0[13u].z, fma(_764, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _760)) + cbModelParam._m0[13u].w;
        float _1595 = fma(_768, cbModelParam._m0[14u].z, fma(_764, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _760)) + cbModelParam._m0[14u].w;
        float _1599 = fma(_768, cbModelParam._m0[15u].z, fma(_764, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _760)) + cbModelParam._m0[15u].w;
        float _1602 = fma(_706, cbModelParam._m0[13u].z, fma(_705, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _704));
        float _1605 = fma(_706, cbModelParam._m0[14u].z, fma(_705, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _704));
        float _1608 = fma(_706, cbModelParam._m0[15u].z, fma(_705, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _704));
        float _1636;
        if (_1602 > 0.0)
        {
            _1636 = abs((1.0 - _1591) / _1602);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1591 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1636 = frontier_phi_19_17_ladder;
        }
        float _1809;
        if (_1605 > 0.0)
        {
            _1809 = abs((1.0 - _1595) / _1605);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1595 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1809 = frontier_phi_28_24_ladder;
        }
        float _2105;
        if (_1608 > 0.0)
        {
            _2105 = abs((1.0 - _1599) / _1608);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1608 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1599 + 1.0) / _1608);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2105 = frontier_phi_40_35_ladder;
        }
        float _2107 = isnan(_1809) ? _1636 : (isnan(_1636) ? _1809 : min(_1636, _1809));
        float _2108 = isnan(_2105) ? _2107 : (isnan(_2107) ? _2105 : min(_2107, _2105));
        float _2112 = (_2108 * _1602) + _1591;
        float _2113 = (_2108 * _1605) + _1595;
        float _2114 = (_2108 * _1608) + _1599;
        float _2115 = _2108 * 9.9999997473787516355514526367188e-05;
        float _2117 = (-1.0) - _2115;
        float _2119 = _2115 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2114 > _2119) || ((_2114 < _2117) || ((_2113 > _2119) || ((_2113 < _2117) || ((_2112 < _2117) || (_2112 > _2119))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2259 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2114, cbModelParam._m0[9u].z, fma(_2113, cbModelParam._m0[9u].y, _2112 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2114, cbModelParam._m0[10u].z, fma(_2113, cbModelParam._m0[10u].y, _2112 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2114, cbModelParam._m0[11u].z, fma(_2113, cbModelParam._m0[11u].y, _2112 * cbModelParam._m0[11u].x))), _1542);
            frontier_phi_18_40_ladder = _2259.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2259.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2259.x * cbModelParam._m0[1u].y;
        }
        _1624 = frontier_phi_18_40_ladder_2;
        _1626 = frontier_phi_18_40_ladder_1;
        _1628 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1612 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_704, _705, _706), _1542);
        _1624 = _1612.x * cbModelParam._m0[1u].y;
        _1626 = _1612.y * cbModelParam._m0[1u].y;
        _1628 = _1612.z * cbModelParam._m0[1u].y;
    }
    float _1632 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _517);
    float _1633 = isnan(_1632) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1632 : min(cbModelParam._m0[25u].w, _1632));
    float _1724;
    float _1726;
    float _1728;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1688 = fma(_768, cbModelParam._m0[21u].z, fma(_764, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _760)) + cbModelParam._m0[21u].w;
        float _1692 = fma(_768, cbModelParam._m0[22u].z, fma(_764, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _760)) + cbModelParam._m0[22u].w;
        float _1696 = fma(_768, cbModelParam._m0[23u].z, fma(_764, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _760)) + cbModelParam._m0[23u].w;
        float _1699 = fma(_706, cbModelParam._m0[21u].z, fma(_705, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _704));
        float _1702 = fma(_706, cbModelParam._m0[22u].z, fma(_705, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _704));
        float _1705 = fma(_706, cbModelParam._m0[23u].z, fma(_705, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _704));
        float _1814;
        if (_1699 > 0.0)
        {
            _1814 = abs((1.0 - _1688) / _1699);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1699 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1688 + 1.0) / _1699);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1814 = frontier_phi_30_26_ladder;
        }
        float _2132;
        if (_1702 > 0.0)
        {
            _2132 = abs((1.0 - _1692) / _1702);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1702 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1692 + 1.0) / _1702);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2132 = frontier_phi_42_37_ladder;
        }
        float _2470;
        if (_1705 > 0.0)
        {
            _2470 = abs((1.0 - _1696) / _1705);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1705 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1696 + 1.0) / _1705);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2470 = frontier_phi_52_49_ladder;
        }
        float _2472 = isnan(_2132) ? _1814 : (isnan(_1814) ? _2132 : min(_1814, _2132));
        float _2473 = isnan(_2470) ? _2472 : (isnan(_2472) ? _2470 : min(_2472, _2470));
        float _2477 = (_2473 * _1699) + _1688;
        float _2478 = (_2473 * _1702) + _1692;
        float _2479 = (_2473 * _1705) + _1696;
        float _2480 = _2473 * 9.9999997473787516355514526367188e-05;
        float _2481 = (-1.0) - _2480;
        float _2483 = _2480 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2479 > _2483) || ((_2479 < _2481) || ((_2478 > _2483) || ((_2478 < _2481) || ((_2477 < _2481) || (_2477 > _2483))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2601 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2479, cbModelParam._m0[17u].z, fma(_2478, cbModelParam._m0[17u].y, _2477 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2479, cbModelParam._m0[18u].z, fma(_2478, cbModelParam._m0[18u].y, _2477 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2479, cbModelParam._m0[19u].z, fma(_2478, cbModelParam._m0[19u].y, _2477 * cbModelParam._m0[19u].x))), _1633);
            frontier_phi_27_52_ladder = _2601.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2601.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2601.x * cbModelParam._m0[1u].z;
        }
        _1724 = frontier_phi_27_52_ladder_2;
        _1726 = frontier_phi_27_52_ladder_1;
        _1728 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1708 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_704, _705, _706), _1633);
        _1724 = _1708.x * cbModelParam._m0[1u].z;
        _1726 = _1708.y * cbModelParam._m0[1u].z;
        _1728 = _1708.z * cbModelParam._m0[1u].z;
    }
    float _1741 = (((_731 * _680) + _732) * _696) * ((cbModelParam._m0[1u].w * (_1724 - _1624)) + _1624);
    float _1743 = (((_731 * _682) + _732) * _696) * ((cbModelParam._m0[1u].w * (_1726 - _1626)) + _1626);
    float _1745 = (((_731 * _683) + _732) * _696) * ((cbModelParam._m0[1u].w * (_1728 - _1628)) + _1628);
    float _1748 = fma(_1745, cbSceneParam._m0[89u].z, fma(_1743, cbSceneParam._m0[89u].y, _1741 * cbSceneParam._m0[89u].x));
    float _1751 = fma(_1745, cbSceneParam._m0[90u].z, fma(_1743, cbSceneParam._m0[90u].y, _1741 * cbSceneParam._m0[90u].x));
    float _1754 = fma(_1745, cbSceneParam._m0[91u].z, fma(_1743, cbSceneParam._m0[91u].y, _1741 * cbSceneParam._m0[91u].x));
    float _1788 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1792 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1796 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1800 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1801 = _1788 / _1800;
    float _1802 = _1792 / _1800;
    float _1803 = _1796 / _1800;
    float _1950;
    float _1951;
    float _1952;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1830 = ((uint(_1803 > cbSceneParam._m0[59u].y) + uint(_1803 > cbSceneParam._m0[59u].x)) + uint(_1803 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1831 = _1830 + 43u;
        uint _1839 = _1830 + 44u;
        uint _1847 = _1830 + 45u;
        uint _1855 = _1830 + 46u;
        float _1866 = fma(_1800, cbSceneParam._m0[_1831].w, fma(_1796, cbSceneParam._m0[_1831].z, fma(_1792, cbSceneParam._m0[_1831].y, _1788 * cbSceneParam._m0[_1831].x)));
        float _1870 = fma(_1800, cbSceneParam._m0[_1839].w, fma(_1796, cbSceneParam._m0[_1839].z, fma(_1792, cbSceneParam._m0[_1839].y, _1788 * cbSceneParam._m0[_1839].x)));
        float _1878 = fma(_1800, cbSceneParam._m0[_1855].w, fma(_1796, cbSceneParam._m0[_1855].z, fma(_1792, cbSceneParam._m0[_1855].y, _1788 * cbSceneParam._m0[_1855].x)));
        float _1883 = cbSceneParam._m0[33u].z * _1878;
        float _1885 = cbSceneParam._m0[33u].w * _1878;
        float _1888 = fma(_1800, cbSceneParam._m0[_1847].w, fma(_1796, cbSceneParam._m0[_1847].z, fma(_1792, cbSceneParam._m0[_1847].y, _1788 * cbSceneParam._m0[_1847].x))) / _1878;
        float _1936 = (cbSceneParam._m0[33u].x - sqrt(((_1802 * _1802) + (_1801 * _1801)) + (_1803 * _1803))) * cbSceneParam._m0[33u].y;
        float _4299 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
        float _1943 = (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1883 + _1866) / _1878, (_1885 + _1870) / _1878), _1888), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1885 + _1866) / _1878, (_1870 - _1883) / _1878), _1888), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1866 - _1883) / _1878, (_1870 - _1885) / _1878), _1888), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1866 - _1885) / _1878, (_1883 + _1870) / _1878), _1888), 0.0)).x), vec4(0.25)));
        _1950 = 1.0 - (_1943 * cbSceneParam._m0[34u].x);
        _1951 = 1.0 - (_1943 * cbSceneParam._m0[34u].y);
        _1952 = 1.0 - (_1943 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1950 = 1.0;
        _1951 = 1.0;
        _1952 = 1.0;
    }
    float _2016;
    float _2018;
    float _2020;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2004 = fma(_1800, cbSceneParam._m0[63u].w, fma(_1796, cbSceneParam._m0[63u].z, fma(_1792, cbSceneParam._m0[63u].y, _1788 * cbSceneParam._m0[63u].x)));
        float _2005 = fma(_1800, cbSceneParam._m0[60u].w, fma(_1796, cbSceneParam._m0[60u].z, fma(_1792, cbSceneParam._m0[60u].y, _1788 * cbSceneParam._m0[60u].x))) / _2004;
        float _2006 = fma(_1800, cbSceneParam._m0[61u].w, fma(_1796, cbSceneParam._m0[61u].z, fma(_1792, cbSceneParam._m0[61u].y, _1788 * cbSceneParam._m0[61u].x))) / _2004;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2005 >= cbSceneParam._m0[64u].x) && (_2006 >= cbSceneParam._m0[64u].y)) && (_2005 <= cbSceneParam._m0[64u].z)) && (_2006 <= cbSceneParam._m0[64u].w))
        {
            float _2145 = fma(_1800, cbSceneParam._m0[62u].w, fma(_1796, cbSceneParam._m0[62u].z, fma(_1792, cbSceneParam._m0[62u].y, _1788 * cbSceneParam._m0[62u].x))) / _2004;
            float _2149 = isnan(cbSceneParam._m0[41u].w) ? _2145 : (isnan(_2145) ? cbSceneParam._m0[41u].w : max(_2145, cbSceneParam._m0[41u].w));
            float _2192 = (cbSceneParam._m0[33u].x - sqrt(((_1802 * _1802) + (_1801 * _1801)) + (_1803 * _1803))) * cbSceneParam._m0[33u].y;
            float _4315 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
            float _2199 = (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2005, cbSceneParam._m0[33u].w + _2006), _2149), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2005, _2006 - cbSceneParam._m0[33u].z), _2149), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2005 - cbSceneParam._m0[33u].z, _2006 - cbSceneParam._m0[33u].w), _2149), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2005 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2006), _2149), 0.0)).x), vec4(0.25)));
            float _2203 = 1.0 - (_2199 * cbSceneParam._m0[34u].x);
            float _2204 = 1.0 - (_2199 * cbSceneParam._m0[34u].y);
            float _2205 = 1.0 - (_2199 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2205) ? _1952 : (isnan(_1952) ? _2205 : min(_1952, _2205));
            frontier_phi_39_38_ladder_1 = isnan(_2204) ? _1951 : (isnan(_1951) ? _2204 : min(_1951, _2204));
            frontier_phi_39_38_ladder_2 = isnan(_2203) ? _1950 : (isnan(_1950) ? _2203 : min(_1950, _2203));
        }
        else
        {
            frontier_phi_39_38_ladder = _1952;
            frontier_phi_39_38_ladder_1 = _1951;
            frontier_phi_39_38_ladder_2 = _1950;
        }
        _2016 = frontier_phi_39_38_ladder_2;
        _2018 = frontier_phi_39_38_ladder_1;
        _2020 = frontier_phi_39_38_ladder;
    }
    else
    {
        _2016 = _1950;
        _2018 = _1951;
        _2020 = _1952;
    }
    uvec4 _2025 = floatBitsToUint(cbInstanceData._m0[_243 + 5u]);
    uint _2027 = _2025.x * 14u;
    uint _2028 = _2027 + 13u;
    float _2035 = _696 + (-1.0);
    float _2040 = (cbLight._m0[_2028].x * _2035) + 1.0;
    float _2041 = (cbLight._m0[_2028].y * _2035) + 1.0;
    float _2042 = (cbLight._m0[_2028].z * _2035) + 1.0;
    float _2043 = (cbLight._m0[_2028].w * _2035) + 1.0;
    uint _2044 = _2027 + 5u;
    float _2050 = isnan(1.0) ? _2041 : (isnan(_2041) ? 1.0 : min(_2041, 1.0));
    uint _2054 = _2027 + 4u;
    float _2064 = isnan(1.0) ? _2040 : (isnan(_2040) ? 1.0 : min(_2040, 1.0));
    uint _2068 = _2027 | 1u;
    float _2079 = dot(vec3(cbLight._m0[_2027].xyz), vec3(_514, _515, _516));
    float _2082 = dot(vec3(cbLight._m0[_2068].xyz), vec3(_514, _515, _516));
    float _4351 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
    float _4362 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2087 = (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * 0.3183098733425140380859375;
    float _2089 = (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * 0.3183098733425140380859375;
    float _2096 = ((cbLight._m0[_2044].x * _2050) * _2089) + (((cbLight._m0[_2054].x * _2016) * _2064) * _2087);
    float _2097 = ((_2050 * cbLight._m0[_2044].y) * _2089) + (((cbLight._m0[_2054].y * _2018) * _2064) * _2087);
    float _2098 = ((_2050 * cbLight._m0[_2044].z) * _2089) + (((cbLight._m0[_2054].z * _2020) * _2064) * _2087);
    uvec4 _2102 = floatBitsToUint(cbLight._m0[_2027 + 12u]);
    bool _2104 = _2102.x == 0u;
    float _2206;
    float _2208;
    float _2210;
    if (_2104)
    {
        _2206 = _2096;
        _2208 = _2097;
        _2210 = _2098;
    }
    else
    {
        uint _2214 = _2027 + 6u;
        float _2230 = (dot(vec3(cbLight._m0[_2027 + 2u].xyz), vec3(_514, _515, _516)) * 0.5) + 0.5;
        float _2231 = _2230 * _2230;
        float _4373 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        float _2232 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _2233 = isnan(1.0) ? _2042 : (isnan(_2042) ? 1.0 : min(_2042, 1.0));
        _2206 = (((cbLight._m0[_2214].x * 0.3183098733425140380859375) * _2232) * _2233) + _2096;
        _2208 = (((cbLight._m0[_2214].y * 0.3183098733425140380859375) * _2232) * _2233) + _2097;
        _2210 = (((cbLight._m0[_2214].z * 0.3183098733425140380859375) * _2232) * _2233) + _2098;
    }
    bool _2213 = _2102.y == 0u;
    float _2268;
    float _2270;
    float _2272;
    if (_2213)
    {
        _2268 = _2206;
        _2270 = _2208;
        _2272 = _2210;
    }
    else
    {
        uint _2441 = _2027 + 7u;
        float _2457 = (dot(vec3(cbLight._m0[_2027 + 3u].xyz), vec3(_514, _515, _516)) * 0.5) + 0.5;
        float _2458 = _2457 * _2457;
        float _4389 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2459 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _2460 = isnan(1.0) ? _2043 : (isnan(_2043) ? 1.0 : min(_2043, 1.0));
        _2268 = (((cbLight._m0[_2441].x * 0.3183098733425140380859375) * _2459) * _2460) + _2206;
        _2270 = (((cbLight._m0[_2441].y * 0.3183098733425140380859375) * _2459) * _2460) + _2208;
        _2272 = (((cbLight._m0[_2441].z * 0.3183098733425140380859375) * _2459) * _2460) + _2210;
    }
    uint _2275 = _2027 + 8u;
    float _2288 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2027].w)) * _517) * 0.949999988079071044921875);
    float _2289 = _2288 * _2288;
    float _2290 = cbLight._m0[_2027].x + _598;
    float _2291 = cbLight._m0[_2027].y + _599;
    float _2292 = cbLight._m0[_2027].z + _600;
    float _2296 = inversesqrt(dot(vec3(_2290, _2291, _2292), vec3(_2290, _2291, _2292)));
    float _2297 = _2296 * _2290;
    float _2298 = _2296 * _2291;
    float _2299 = _2296 * _2292;
    float _2300 = dot(vec3(_514, _515, _516), vec3(cbLight._m0[_2027].xyz));
    float _4405 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
    float _2303 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
    float _4416 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _2304 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
    float _2305 = dot(vec3(_514, _515, _516), vec3(_2297, _2298, _2299));
    float _4427 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2308 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
    float _2309 = dot(vec3(cbLight._m0[_2027].xyz), vec3(_2297, _2298, _2299));
    float _4438 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2313 = _2289 * _2289;
    float _2317 = ((_2308 * _2308) * (_2313 + (-1.0))) + 1.0;
    float _2325 = exp2(log2(1.0 - (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0)))) * 5.0);
    float _2326 = 0.959999978542327880859375 - _677;
    float _2328 = 0.959999978542327880859375 - _678;
    float _2329 = 0.959999978542327880859375 - _679;
    float _2336 = 1.0 - _2289;
    float _2347 = (0.5 / (((_2304 * ((_2303 * _2336) + _2289)) + 9.9999999392252902907785028219223e-09) + (((_2304 * _2336) + _2289) * _2303))) * _2303;
    float _4449 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2349 = (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_2313 / ((_2317 * _2317) * 3.141590118408203125));
    uint _2363 = _2027 + 9u;
    float _2374 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2068].w)) * _517) * 0.949999988079071044921875);
    float _2375 = _2374 * _2374;
    float _2376 = cbLight._m0[_2068].x + _598;
    float _2377 = cbLight._m0[_2068].y + _599;
    float _2378 = cbLight._m0[_2068].z + _600;
    float _2382 = inversesqrt(dot(vec3(_2376, _2377, _2378), vec3(_2376, _2377, _2378)));
    float _2383 = _2382 * _2376;
    float _2384 = _2382 * _2377;
    float _2385 = _2382 * _2378;
    float _2386 = dot(vec3(_514, _515, _516), vec3(cbLight._m0[_2068].xyz));
    float _4460 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2389 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
    float _2390 = dot(vec3(_514, _515, _516), vec3(_2383, _2384, _2385));
    float _4471 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2393 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
    float _2394 = dot(vec3(cbLight._m0[_2068].xyz), vec3(_2383, _2384, _2385));
    float _4482 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2398 = _2375 * _2375;
    float _2402 = ((_2393 * _2393) * (_2398 + (-1.0))) + 1.0;
    float _2409 = exp2(log2(1.0 - (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0)))) * 5.0);
    float _2416 = 1.0 - _2375;
    float _2426 = (0.5 / (((_2304 * ((_2389 * _2416) + _2375)) + 9.9999999392252902907785028219223e-09) + (((_2304 * _2416) + _2375) * _2389))) * _2389;
    float _4493 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
    float _2428 = (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * (_2398 / ((_2402 * _2402) * 3.141590118408203125));
    float _2438 = (((((_2409 * _2326) + _680) * cbLight._m0[_2363].x) * _2428) * _2050) + ((((cbLight._m0[_2275].x * _2016) * ((_2325 * _2326) + _680)) * _2349) * _2064);
    float _2439 = (((((_2409 * _2328) + _682) * cbLight._m0[_2363].y) * _2428) * _2050) + ((((cbLight._m0[_2275].y * _2018) * ((_2325 * _2328) + _682)) * _2349) * _2064);
    float _2440 = (((((_2409 * _2329) + _683) * cbLight._m0[_2363].z) * _2428) * _2050) + ((((cbLight._m0[_2275].z * _2020) * ((_2325 * _2329) + _683)) * _2349) * _2064);
    float _2496;
    float _2498;
    float _2500;
    if (_2104)
    {
        _2496 = _2438;
        _2498 = _2439;
        _2500 = _2440;
    }
    else
    {
        uint _2502 = _2027 + 2u;
        uint _2506 = _2027 + 10u;
        float _2520 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2502].w)) * _517) * 0.949999988079071044921875);
        float _2521 = _2520 * _2520;
        float _2522 = cbLight._m0[_2502].x + _598;
        float _2523 = cbLight._m0[_2502].y + _599;
        float _2524 = cbLight._m0[_2502].z + _600;
        float _2528 = inversesqrt(dot(vec3(_2522, _2523, _2524), vec3(_2522, _2523, _2524)));
        float _2529 = _2528 * _2522;
        float _2530 = _2528 * _2523;
        float _2531 = _2528 * _2524;
        float _2532 = dot(vec3(_514, _515, _516), vec3(cbLight._m0[_2502].xyz));
        float _4504 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        float _2535 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _2536 = dot(vec3(_514, _515, _516), vec3(_2529, _2530, _2531));
        float _4515 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2539 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _2540 = dot(vec3(cbLight._m0[_2502].xyz), vec3(_2529, _2530, _2531));
        float _4526 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2544 = _2521 * _2521;
        float _2548 = ((_2539 * _2539) * (_2544 + (-1.0))) + 1.0;
        float _2555 = exp2(log2(1.0 - (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0)))) * 5.0);
        float _2562 = 1.0 - _2521;
        float _2572 = (0.5 / (((_2304 * ((_2535 * _2562) + _2521)) + 9.9999999392252902907785028219223e-09) + (((_2304 * _2562) + _2521) * _2535))) * _2535;
        float _4537 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        float _2574 = (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * (_2544 / ((_2548 * _2548) * 3.141590118408203125));
        float _2575 = isnan(1.0) ? _2042 : (isnan(_2042) ? 1.0 : min(_2042, 1.0));
        _2496 = (((((_2555 * _2326) + _680) * cbLight._m0[_2506].x) * _2574) * _2575) + _2438;
        _2498 = (((((_2555 * _2328) + _682) * cbLight._m0[_2506].y) * _2574) * _2575) + _2439;
        _2500 = (((((_2555 * _2329) + _683) * cbLight._m0[_2506].z) * _2574) * _2575) + _2440;
    }
    float _2606;
    float _2608;
    float _2610;
    if (_2213)
    {
        _2606 = _2496;
        _2608 = _2498;
        _2610 = _2500;
    }
    else
    {
        uint _2617 = _2027 + 3u;
        uint _2621 = _2027 + 11u;
        float _2635 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2617].w)) * _517) * 0.949999988079071044921875);
        float _2636 = _2635 * _2635;
        float _2637 = cbLight._m0[_2617].x + _598;
        float _2638 = cbLight._m0[_2617].y + _599;
        float _2639 = cbLight._m0[_2617].z + _600;
        float _2643 = inversesqrt(dot(vec3(_2637, _2638, _2639), vec3(_2637, _2638, _2639)));
        float _2644 = _2643 * _2637;
        float _2645 = _2643 * _2638;
        float _2646 = _2643 * _2639;
        float _2647 = dot(vec3(_514, _515, _516), vec3(cbLight._m0[_2617].xyz));
        float _4553 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
        float _2650 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
        float _2651 = dot(vec3(_514, _515, _516), vec3(_2644, _2645, _2646));
        float _4564 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
        float _2654 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
        float _2655 = dot(vec3(cbLight._m0[_2617].xyz), vec3(_2644, _2645, _2646));
        float _4575 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2659 = _2636 * _2636;
        float _2663 = ((_2654 * _2654) * (_2659 + (-1.0))) + 1.0;
        float _2670 = exp2(log2(1.0 - (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0)))) * 5.0);
        float _2677 = 1.0 - _2636;
        float _2687 = (0.5 / (((_2304 * ((_2650 * _2677) + _2636)) + 9.9999999392252902907785028219223e-09) + (((_2304 * _2677) + _2636) * _2650))) * _2650;
        float _4586 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
        float _2689 = (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0))) * (_2659 / ((_2663 * _2663) * 3.141590118408203125));
        float _2690 = isnan(1.0) ? _2043 : (isnan(_2043) ? 1.0 : min(_2043, 1.0));
        _2606 = (((((_2670 * _2326) + _680) * cbLight._m0[_2621].x) * _2689) * _2690) + _2496;
        _2608 = (((((_2670 * _2328) + _682) * cbLight._m0[_2621].y) * _2689) * _2690) + _2498;
        _2610 = (((((_2670 * _2329) + _683) * cbLight._m0[_2621].z) * _2689) * _2690) + _2500;
    }
    float _2756;
    float _2758;
    float _2760;
    float _2762;
    float _2764;
    float _2766;
    if (_2025.y == 0u)
    {
        uvec4 _2711 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2712 = _2711.x;
        uint _2723 = uint((float(_2711.y) * floor(float(uint(cbSceneParam._m0[85u].y * _617) / _2712))) + floor(float(uint(cbSceneParam._m0[85u].x * _616) / _2712)));
        float _2733 = (log2(_1803 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2734 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        uint _2737 = uint(isnan(14.0) ? _2734 : (isnan(_2734) ? 14.0 : min(_2734, 14.0)));
        uvec4 _2742 = texelFetch(g_lightClusterGridBuffer, int(((_2737 << 2u) + (_2723 << 6u)) >> 2u));
        uint _2743 = _2742.x;
        uint _2744 = _2711.z;
        float _2823;
        float _2825;
        float _2827;
        float _2829;
        float _2831;
        float _2833;
        if (((((1u << ((_2744 >> 4u) & 15u)) + 4294967295u) & _2743) == 0u) || ((_2744 & 240u) == 0u))
        {
            _2823 = 0.0;
            _2825 = 0.0;
            _2827 = 0.0;
            _2829 = 0.0;
            _2831 = 0.0;
            _2833 = 0.0;
        }
        else
        {
            float _2824;
            float _2826;
            float _2828;
            float _2830;
            float _2832;
            float _2834;
            float _2976 = 0.0;
            float _2977 = 0.0;
            float _2978 = 0.0;
            float _2979 = 0.0;
            float _2980 = 0.0;
            float _2981 = 0.0;
            uint _2982 = 0u;
            uint _2991;
            bool _2992;
            for (;;)
            {
                _2991 = texelFetch(g_lightClassification, int((((_2737 << 5u) + (_2723 << 9u)) + (_2982 << 2u)) >> 2u)).x;
                _2992 = _2991 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2992)
                {
                    frontier_phi_73_pred = _2981;
                    frontier_phi_73_pred_1 = _2980;
                    frontier_phi_73_pred_2 = _2979;
                    frontier_phi_73_pred_3 = _2978;
                    frontier_phi_73_pred_4 = _2977;
                    frontier_phi_73_pred_5 = _2976;
                }
                else
                {
                    float _3121;
                    float _3122;
                    float _3123;
                    float _3124;
                    float _3125;
                    float _3126;
                    uint _3127;
                    _3121 = _2976;
                    _3122 = _2977;
                    _3123 = _2978;
                    _3124 = _2979;
                    _3125 = _2980;
                    _3126 = _2981;
                    _3127 = _2991;
                    float _3048;
                    float _3049;
                    float _3050;
                    float _3051;
                    float _3052;
                    float _3053;
                    for (;;)
                    {
                        uint _3131 = uint(findLSB(_3127)) + (_2982 << 5u);
                        uint _3128 = (_3127 + 4294967295u) & _3127;
                        uint _3133 = _3131 * 48u;
                        vec4 _3147 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3133)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 3u)).x));
                        uint _3153 = (_3131 * 48u) + 4u;
                        vec4 _3166 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3153)).x, texelFetch(g_PointLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3153 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3153 + 3u)).x));
                        uint _3172 = (_3131 * 48u) + 8u;
                        vec3 _3183 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3172)).x, texelFetch(g_PointLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3172 + 2u)).x));
                        float _3187 = _3147.x - _1801;
                        float _3188 = _3147.y - _1802;
                        float _3189 = _3147.z - _1803;
                        float _3190 = dot(vec3(_3187, _3188, _3189), vec3(_3187, _3188, _3189));
                        float _3193 = inversesqrt(_3190);
                        float _3194 = _3193 * _3187;
                        float _3195 = _3193 * _3188;
                        float _3196 = _3193 * _3189;
                        float _3197 = dot(vec3(_637, _640, _643), vec3(_3194, _3195, _3196));
                        float _3202 = 1.0 - (_3190 * _3147.w);
                        float _4612 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                        float _3203 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
                        float _3204 = sqrt(_3190) * _3166.w;
                        float _3207 = 1.39999997615814208984375 / (_3204 + 1.39999997615814208984375);
                        float _3208 = _3207 * _3207;
                        float _3211 = ((1.0 - _3208) * _3197) + _3208;
                        float _3214 = _3204 * _3204;
                        float _3218 = ((isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0))) * _3203) / ((_3214 * 0.699999988079071044921875) + 1.0);
                        float _3222 = (-0.0) - _1801;
                        float _3223 = (-0.0) - _1802;
                        float _3224 = (-0.0) - _1803;
                        float _3228 = inversesqrt(dot(vec3(_3222, _3223, _3224), vec3(_3222, _3223, _3224)));
                        float _3229 = _3228 * _3222;
                        float _3230 = _3228 * _3223;
                        float _3231 = _3228 * _3224;
                        float _3238 = exp2(log2(1.0 / ((_3214 * 3.5) + 5.0)) * 0.25);
                        float _3239 = 1.0 - _712;
                        float _3246 = sqrt(1.0 - ((1.0 - (_3239 * _3239)) * (1.0 - (_3238 * _3238))));
                        float _3247 = _3246 * _3246;
                        float _3248 = _3247 * _3247;
                        float _3249 = _3229 + _3194;
                        float _3250 = _3230 + _3195;
                        float _3251 = _3231 + _3196;
                        float _3255 = inversesqrt(dot(vec3(_3249, _3250, _3251), vec3(_3249, _3250, _3251)));
                        float _3259 = dot(vec3(_637, _640, _643), vec3(_3229, _3230, _3231));
                        float _4628 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                        float _3262 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                        float _3263 = dot(vec3(_637, _640, _643), vec3(_3255 * _3249, _3255 * _3250, _3255 * _3251));
                        float _4639 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                        float _3266 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                        float _3270 = ((_3266 * _3266) * (_3248 + (-1.0))) + 1.0;
                        float _3271 = _3207 * _3247;
                        float _3272 = _3271 * _3271;
                        float _3275 = ((1.0 - _3272) * _3197) + _3272;
                        float _4650 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                        float _3276 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
                        float _3277 = 1.0 - _3247;
                        float _3287 = (0.5 / (((_3276 * ((_3262 * _3277) + _3247)) + 9.9999999392252902907785028219223e-09) + (((_3276 * _3277) + _3247) * _3262))) * _3276;
                        float _4661 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                        float _3298 = (((_3248 * 3.1415927410125732421875) * (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0)))) / ((_3270 * _3270) * ((_3214 * 2.1991131305694580078125) + 3.141590118408203125))) * _3203;
                        _3051 = (_3218 * _3166.x) + _3124;
                        _3052 = (_3218 * _3166.y) + _3125;
                        _3053 = (_3218 * _3166.z) + _3126;
                        _3048 = (_3298 * _3183.x) + _3121;
                        _3049 = (_3298 * _3183.y) + _3122;
                        _3050 = (_3298 * _3183.z) + _3123;
                        if (_3128 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3121 = _3048;
                            _3122 = _3049;
                            _3123 = _3050;
                            _3124 = _3051;
                            _3125 = _3052;
                            _3126 = _3053;
                            _3127 = _3128;
                        }
                    }
                    frontier_phi_73_pred = _3053;
                    frontier_phi_73_pred_1 = _3052;
                    frontier_phi_73_pred_2 = _3051;
                    frontier_phi_73_pred_3 = _3050;
                    frontier_phi_73_pred_4 = _3049;
                    frontier_phi_73_pred_5 = _3048;
                }
                _2834 = frontier_phi_73_pred;
                _2832 = frontier_phi_73_pred_1;
                _2830 = frontier_phi_73_pred_2;
                _2828 = frontier_phi_73_pred_3;
                _2826 = frontier_phi_73_pred_4;
                _2824 = frontier_phi_73_pred_5;
                uint _2983 = _2982 + 1u;
                if (_2983 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2976 = _2824;
                    _2977 = _2826;
                    _2978 = _2828;
                    _2979 = _2830;
                    _2980 = _2832;
                    _2981 = _2834;
                    _2982 = _2983;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2823 = _2824;
            _2825 = _2826;
            _2827 = _2828;
            _2829 = _2830;
            _2831 = _2832;
            _2833 = _2834;
        }
        uvec4 _2837 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2838 = _2837.z;
        uint _2840 = (_2838 >> 8u) & 15u;
        float _2944;
        float _2946;
        float _2948;
        float _2950;
        float _2952;
        float _2954;
        if (((4294967295u << _2840) & _2743) == 0u)
        {
            _2944 = _2823;
            _2946 = _2825;
            _2948 = _2827;
            _2950 = _2829;
            _2952 = _2831;
            _2954 = _2833;
        }
        else
        {
            float _2969 = inversesqrt(dot(vec3(_1801, _1802, _1803), vec3(_1801, _1802, _1803)));
            float _2970 = _2969 * _1801;
            float _2971 = _2969 * _1802;
            float _2972 = _2969 * _1803;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2840 < ((_2838 >> 12u) & 15u))
            {
                float _2945;
                float _2947;
                float _2949;
                float _2951;
                float _2953;
                float _2955;
                float _3104 = _2823;
                float _3105 = _2825;
                float _3106 = _2827;
                float _3107 = _2829;
                float _3108 = _2831;
                float _3109 = _2833;
                uint _3110 = _2840;
                uint _3119;
                bool _3120;
                for (;;)
                {
                    _3119 = texelFetch(g_lightClassification, int((((_2737 << 5u) + (_2723 << 9u)) + (_3110 << 2u)) >> 2u)).x;
                    _3120 = _3119 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3120)
                    {
                        frontier_phi_84_pred = _3109;
                        frontier_phi_84_pred_1 = _3108;
                        frontier_phi_84_pred_2 = _3107;
                        frontier_phi_84_pred_3 = _3106;
                        frontier_phi_84_pred_4 = _3105;
                        frontier_phi_84_pred_5 = _3104;
                    }
                    else
                    {
                        float _3312;
                        float _3313;
                        float _3314;
                        float _3315;
                        float _3316;
                        float _3317;
                        float _3606;
                        float _3607;
                        float _3608;
                        float _3609;
                        float _3610;
                        float _3611;
                        float _3325 = _3104;
                        float _3326 = _3105;
                        float _3327 = _3106;
                        float _3328 = _3107;
                        float _3329 = _3108;
                        float _3330 = _3109;
                        uint _3331 = _3119;
                        uint _3332;
                        vec4 _3357;
                        float _3358;
                        vec4 _3373;
                        vec3 _3385;
                        vec4 _3401;
                        vec4 _3416;
                        float _3462;
                        bool _3463;
                        for (;;)
                        {
                            uint _3342 = ((_3110 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3331));
                            _3332 = (_3331 + 4294967295u) & _3331;
                            uint _3344 = _3342 * 40u;
                            _3357 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3344)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 3u)).x));
                            _3358 = _3357.w;
                            uint _3360 = (_3342 * 40u) + 4u;
                            _3373 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3360)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 3u)).x));
                            uint _3375 = (_3342 * 40u) + 8u;
                            _3385 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3375)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 2u)).x));
                            uint _3388 = (_3342 * 40u) + 16u;
                            _3401 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3388)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 3u)).x));
                            uint _3403 = (_3342 * 40u) + 20u;
                            _3416 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 3u)).x));
                            uint _3418 = (_3342 * 40u) + 24u;
                            vec4 _3431 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3418)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 3u)).x));
                            uint _3437 = (_3342 * 40u) + 28u;
                            vec4 _3450 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3437)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 3u)).x));
                            _3462 = fma(_1803, _3450.z, fma(_1802, _3450.y, _3450.x * _1801)) + _3450.w;
                            _3463 = !((fma(_1803, _3431.z, fma(_1802, _3431.y, _3431.x * _1801)) + _3431.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3463)
                            {
                                float _3490 = _3357.x - _1801;
                                float _3491 = _3357.y - _1802;
                                float _3492 = _3357.z - _1803;
                                float _3493 = dot(vec3(_3490, _3491, _3492), vec3(_3490, _3491, _3492));
                                float _3496 = inversesqrt(_3493);
                                float _3497 = _3496 * _3490;
                                float _3498 = _3496 * _3491;
                                float _3499 = _3496 * _3492;
                                float _3503 = 1.0 - (_3493 / (_3358 * _3358));
                                float _4672 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                                float _3504 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
                                float _3508 = sqrt(_3493) * _3373.w;
                                float _3510 = 1.39999997615814208984375 / (_3508 + 1.39999997615814208984375);
                                float _3511 = _3510 * _3510;
                                float _3514 = ((1.0 - _3511) * dot(vec3(_3497, _3498, _3499), vec3(_637, _640, _643))) + _3511;
                                float _3517 = _3508 * _3508;
                                float _3521 = (fma(_1803, _3401.z, fma(_1802, _3401.y, _3401.x * _1801)) + _3401.w) / _3462;
                                float _3522 = (fma(_1803, _3416.z, fma(_1802, _3416.y, _3416.x * _1801)) + _3416.w) / _3462;
                                float _3526 = 1.0 - dot(vec2(_3521, _3522), vec2(_3521, _3522));
                                float _4688 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                                float _3527 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                                float _3528 = _3527 * (((isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0))) * _3504) / ((_3517 * 0.699999988079071044921875) + 1.0));
                                float _3540 = exp2(log2(1.0 / ((_3517 * 3.5) + 5.0)) * 0.25);
                                float _3541 = 1.0 - _712;
                                float _3548 = sqrt(1.0 - ((1.0 - (_3541 * _3541)) * (1.0 - (_3540 * _3540))));
                                float _3549 = _3548 * _3548;
                                float _3550 = _3549 * _3549;
                                float _3551 = _3497 - _2970;
                                float _3552 = _3498 - _2971;
                                float _3553 = _3499 - _2972;
                                float _3557 = inversesqrt(dot(vec3(_3551, _3552, _3553), vec3(_3551, _3552, _3553)));
                                float _3561 = dot(vec3(_637, _640, _643), vec3((-0.0) - _2970, (-0.0) - _2971, (-0.0) - _2972));
                                float _4699 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                                float _3564 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                                float _3565 = dot(vec3(_637, _640, _643), vec3(_3557 * _3551, _3557 * _3552, _3557 * _3553));
                                float _4710 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                                float _3568 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                                float _3572 = ((_3568 * _3568) * (_3550 + (-1.0))) + 1.0;
                                float _3573 = _3510 * _3549;
                                float _3574 = _3573 * _3573;
                                float _3580 = ((1.0 - _3574) * dot(vec3(_637, _640, _643), vec3(_3497, _3498, _3499))) + _3574;
                                float _4721 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                                float _3581 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
                                float _3582 = 1.0 - _3549;
                                float _3592 = (0.5 / (((_3581 * ((_3564 * _3582) + _3549)) + 9.9999999392252902907785028219223e-09) + (((_3581 * _3582) + _3549) * _3564))) * _3581;
                                float _4732 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                                float _3602 = (_3527 * _3504) * (((_3550 * 3.1415927410125732421875) * (isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0)))) / ((_3572 * _3572) * ((_3517 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3528 * _3373.z;
                                frontier_phi_90_pred_1 = _3528 * _3373.y;
                                frontier_phi_90_pred_2 = _3528 * _3373.x;
                                frontier_phi_90_pred_3 = _3602 * _3385.z;
                                frontier_phi_90_pred_4 = _3602 * _3385.y;
                                frontier_phi_90_pred_5 = _3602 * _3385.x;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3611 = frontier_phi_90_pred;
                            _3610 = frontier_phi_90_pred_1;
                            _3609 = frontier_phi_90_pred_2;
                            _3608 = frontier_phi_90_pred_3;
                            _3607 = frontier_phi_90_pred_4;
                            _3606 = frontier_phi_90_pred_5;
                            _3315 = _3609 + _3328;
                            _3316 = _3610 + _3329;
                            _3317 = _3611 + _3330;
                            _3312 = _3606 + _3325;
                            _3313 = _3607 + _3326;
                            _3314 = _3608 + _3327;
                            if (_3332 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3325 = _3312;
                                _3326 = _3313;
                                _3327 = _3314;
                                _3328 = _3315;
                                _3329 = _3316;
                                _3330 = _3317;
                                _3331 = _3332;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3317;
                        frontier_phi_84_pred_1 = _3316;
                        frontier_phi_84_pred_2 = _3315;
                        frontier_phi_84_pred_3 = _3314;
                        frontier_phi_84_pred_4 = _3313;
                        frontier_phi_84_pred_5 = _3312;
                    }
                    _2955 = frontier_phi_84_pred;
                    _2953 = frontier_phi_84_pred_1;
                    _2951 = frontier_phi_84_pred_2;
                    _2949 = frontier_phi_84_pred_3;
                    _2947 = frontier_phi_84_pred_4;
                    _2945 = frontier_phi_84_pred_5;
                    uint _3111 = _3110 + 1u;
                    if (_3111 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3104 = _2945;
                        _3105 = _2947;
                        _3106 = _2949;
                        _3107 = _2951;
                        _3108 = _2953;
                        _3109 = _2955;
                        _3110 = _3111;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2951;
                frontier_phi_65_66_ladder_1 = _2955;
                frontier_phi_65_66_ladder_2 = _2953;
                frontier_phi_65_66_ladder_3 = _2949;
                frontier_phi_65_66_ladder_4 = _2947;
                frontier_phi_65_66_ladder_5 = _2945;
            }
            else
            {
                frontier_phi_65_66_ladder = _2829;
                frontier_phi_65_66_ladder_1 = _2833;
                frontier_phi_65_66_ladder_2 = _2831;
                frontier_phi_65_66_ladder_3 = _2827;
                frontier_phi_65_66_ladder_4 = _2825;
                frontier_phi_65_66_ladder_5 = _2823;
            }
            _2944 = frontier_phi_65_66_ladder_5;
            _2946 = frontier_phi_65_66_ladder_4;
            _2948 = frontier_phi_65_66_ladder_3;
            _2950 = frontier_phi_65_66_ladder;
            _2952 = frontier_phi_65_66_ladder_2;
            _2954 = frontier_phi_65_66_ladder_1;
        }
        float _2959 = isnan(1.0) ? _696 : (isnan(_696) ? 1.0 : min(_696, 1.0));
        _2756 = (_2959 * _2950) + _2268;
        _2758 = (_2959 * _2952) + _2270;
        _2760 = (_2959 * _2954) + _2272;
        _2762 = ((_2944 * _680) * _2959) + _2606;
        _2764 = ((_2946 * _682) * _2959) + _2608;
        _2766 = ((_2948 * _683) * _2959) + _2610;
    }
    else
    {
        _2756 = _2268;
        _2758 = _2270;
        _2760 = _2272;
        _2762 = _2606;
        _2764 = _2608;
        _2766 = _2610;
    }
    float _4748 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _4759 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _4770 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _2783 = ((isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0))) * (_2756 + ((isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))) * _696))) + ((_2762 + ((isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))) * _1531)) * cbPerFrame._m0[3u].x);
    float _2784 = ((isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * (_2758 + ((isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0))) * _696))) + ((_2764 + ((isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0))) * _1531)) * cbPerFrame._m0[3u].x);
    float _2785 = ((isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0))) * (_2760 + ((isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0))) * _696))) + ((_2766 + ((isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0))) * _1531)) * cbPerFrame._m0[3u].x);
    uint _2786 = _243 + 6u;
    float _2794 = _616 / cbSceneParam._m0[86u].x;
    float _2795 = _617 / cbSceneParam._m0[86u].y;
    vec4 _2809 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2794, _2795, (log2((isnan(cbSceneParam._m0[77u].w) ? _540 : (isnan(_540) ? cbSceneParam._m0[77u].w : min(_540, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2811 = _2809.x;
    float _2812 = _2809.y;
    float _2813 = _2809.z;
    float _2814 = _2809.w;
    float _2886;
    float _2888;
    float _2890;
    float _2892;
    if (_540 > cbSceneParam._m0[78u].w)
    {
        float _2848 = isnan(_540) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _540 : min(cbSceneParam._m0[80u].w, _540));
        float _2849 = _2848 / _540;
        float _2860 = _2849 * _591;
        float _2861 = _592 * _2849;
        float _2862 = (-0.0) - _2861;
        float _2864 = _2849 * _593;
        float _2866 = (cbSceneParam._m0[77u].w * _2862) / _2848;
        float _2867 = _2866 + cbSceneParam._m0[79u].w;
        float _2868 = cbSceneParam._m0[79u].w - _2861;
        float _2874 = sqrt(((_2860 * _2860) + (_2861 * _2861)) + (_2864 * _2864));
        float _2877 = (1.0 - (cbSceneParam._m0[77u].w / _2848)) * _2874;
        float _2882 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2884 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3061;
        if (abs((_2862 - _2866) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3061 = ((((_2867 > 0.0) ? exp2(_2882 * _2867) : (2.0 - exp2(_2884 * _2867))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2877;
        }
        else
        {
            float _3005 = 1.0 / cbSceneParam._m0[80u].x;
            float _3006 = isnan(_2868) ? _2867 : (isnan(_2867) ? _2868 : max(_2867, _2868));
            float _3007 = isnan(_2868) ? _2867 : (isnan(_2867) ? _2868 : min(_2867, _2868));
            float _3016 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : min(_3006, 0.0));
            float _3017 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : min(_3007, 0.0));
            _3061 = ((abs(_2874 / _2862) * cbSceneParam._m0[80u].y) * ((((_3016 - _3017) * 2.0) - ((exp2(_2882 * (isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0)))) - exp2(_2882 * (isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0))))) * _3005)) - ((exp2(_2884 * _3016) - exp2(_2884 * _3017)) * _3005))) + (_2877 * cbSceneParam._m0[80u].z);
        }
        vec4 _3063 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2794, _2795, 1.0), 0.0);
        float _3072 = exp2((_3061 * (-1.44269502162933349609375)) * (1.0 - _3063.w));
        float _3073 = log2(_3072);
        float _3089 = log2(_2814);
        _2886 = (exp2(_3089 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3073 * cbSceneParam._m0[78u].x)) * _3063.x) / cbSceneParam._m0[78u].x)) + _2811;
        _2888 = (exp2(_3089 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3073 * cbSceneParam._m0[78u].y)) * _3063.y) / cbSceneParam._m0[78u].y)) + _2812;
        _2890 = (exp2(_3089 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3073 * cbSceneParam._m0[78u].z)) * _3063.z) / cbSceneParam._m0[78u].z)) + _2813;
        _2892 = _3072 * _2814;
    }
    else
    {
        _2886 = _2811;
        _2888 = _2812;
        _2890 = _2813;
        _2892 = _2814;
    }
    bool _3099;
    vec4 _2902;
    vec4 _2924;
    float _2926;
    float _2930;
    float _2931;
    float _2932;
    float _2933;
    bool _2943;
    for (;;)
    {
        _2902 = cbMatDynParam._m0[0u];
        float _2904 = roundEven(_2902.y);
        bool _2905 = _2904 == 3.0;
        float _2906 = log2(_2892);
        float _2913 = exp2(_2906 * cbSceneParam._m0[78u].x) * _2783;
        float _2914 = exp2(_2906 * cbSceneParam._m0[78u].y) * _2784;
        float _2915 = exp2(_2906 * cbSceneParam._m0[78u].z) * _2785;
        float _2922 = _604 + (-0.5);
        _2924 = cbMtdParam._m0[1u];
        _2926 = _2924.y * _2922;
        float _2929 = (_2904 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2930 = _2929 * (_2905 ? _2913 : (_2913 + (cbSceneParam._m0[72u].w * _2886)));
        _2931 = _2929 * (_2905 ? _2914 : (_2914 + (cbSceneParam._m0[72u].w * _2888)));
        _2932 = _2929 * (_2905 ? _2915 : (_2915 + (cbSceneParam._m0[72u].w * _2890)));
        _2933 = _2922 * 0.999000012874603271484375;
        _2943 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2943)
        {
            if ((cbInstanceData._m0[_243 + 7u].x + _2933) < 0.5)
            {
                _3099 = true;
                break;
            }
        }
        uint _3040 = _656 + uint(_2902.w);
        if ((cbInstanceData._m0[_3040].w < 1.0) && ((cbInstanceData._m0[_3040].w + _2933) < 0.5))
        {
            _3099 = true;
            break;
        }
        if ((_2926 + 1.0) < _2924.x)
        {
            _3099 = true;
            break;
        }
        _3099 = false;
        break;
    }
    float _3303;
    if (_3099)
    {
        discard_state = true;
        _3303 = 0.0;
    }
    else
    {
        _3303 = cbInstanceData._m0[_2786].w;
    }
    SV_Target.x = _2930;
    SV_Target.y = _2931;
    SV_Target.z = _2932;
    SV_Target.w = _3303;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2786].w;
    discard_exit();
}


