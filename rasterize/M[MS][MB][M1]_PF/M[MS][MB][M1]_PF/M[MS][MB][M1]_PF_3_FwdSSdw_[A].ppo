#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1029;
float _3438;
float _3439;
float _3440;
float _3441;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _241 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _242 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3450 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3461 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3472 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    uint _252 = uint(roundEven(NORMAL.w)) * 13u;
    uint _257 = _252 + 1u;
    uint _261 = _252 + 2u;
    float _270 = sqrt(((cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x)) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x));
    float _271 = _270 * TEXCOORD.z;
    float _272 = _270 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _271) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _272) + cbTextureTilingScale._m0[13u].w));
    vec4 _308 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _313 = _308.x * cbMtdParam._m0[9u].x;
    float _314 = _308.y * cbMtdParam._m0[9u].y;
    float _315 = _308.z * cbMtdParam._m0[9u].z;
    float _319 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _285.x) * _313;
    float _322 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _285.y) * _314;
    float _325 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _285.z) * _315;
    float _332 = ((_313 - _319) * (isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0)))) + _319;
    float _333 = ((_314 - _322) * (isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0)))) + _322;
    float _334 = ((_315 - _325) * (isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0)))) + _325;
    vec4 _347 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _271) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _272) + cbTextureTilingScale._m0[20u].w));
    vec4 _373 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _377 = _373.z;
    float _381 = (_373.x * 2.0) + (-1.0);
    float _382 = (_373.y * 2.0) + (-1.0);
    float _383 = dot(vec2(_381, _382), vec2(_381, _382));
    float _3483 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _388 = sqrt(1.0 - (isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0))));
    float _393 = _381 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_347.x * 2.0) + (-1.0)));
    float _394 = _382 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_347.y * 2.0) + (-1.0)));
    vec4 _407 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _409 = _407.x;
    float _414 = (((_347.z - _377) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _377;
    float _416 = cbMtdParam._m0[22u].x + _373.w;
    float _420 = gl_FragCoord.x * 0.125;
    float _422 = gl_FragCoord.y * 0.125;
    float _433 = fma(_388, _218 * NORMAL.x, fma(_394, _225 * TANGENT.x, (_211 * _203) * _393));
    float _436 = fma(_388, _218 * NORMAL.y, fma(_394, _225 * TANGENT.y, (_211 * _204) * _393));
    float _439 = fma(_388, _218 * NORMAL.z, fma(_394, _225 * TANGENT.z, (_211 * _205) * _393));
    float _443 = inversesqrt(dot(vec3(_433, _436, _439), vec3(_433, _436, _439)));
    float _444 = _443 * _433;
    float _445 = _443 * _436;
    float _446 = _443 * _439;
    float _3494 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _447 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
    float _3505 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _3516 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _3527 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _3538 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _3549 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _452 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_420, _422)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _470 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _512 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _522 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _512);
    float _523 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _512);
    float _524 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _512);
    float _528 = inversesqrt(dot(vec3(_522, _523, _524), vec3(_522, _523, _524)));
    float _529 = _522 * _528;
    float _530 = _523 * _528;
    float _531 = _524 * _528;
    vec4 _533 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_420, _422));
    float _535 = _533.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _710 = sqrt(((_522 * _522) + (_523 * _523)) + (_524 * _524));
        float _716 = (cbMatDynParam._m0[5u].x * _710) + cbMatDynParam._m0[5u].y;
        float _3560 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _717 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
        float _721 = (cbMatDynParam._m0[5u].z * _710) + cbMatDynParam._m0[5u].w;
        float _3571 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0))) - _717)) + _717) < ((_535 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _547 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _548 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _568 = fma(_446, cbSceneParam._m0[5u].z, fma(_445, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _444));
    float _571 = fma(_446, cbSceneParam._m0[6u].z, fma(_445, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _444));
    float _574 = fma(_446, cbSceneParam._m0[7u].z, fma(_445, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _444));
    uint _587 = _252 + 9u;
    uint _588 = _587 + uint(cbMatDynParam._m0[0u].w);
    float _594 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0)))) * cbInstanceData._m0[_588].x;
    float _595 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0)))) * cbInstanceData._m0[_588].y;
    float _596 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0)))) * cbInstanceData._m0[_588].z;
    float _3582 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _597 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
    float _3593 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _598 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
    float _3604 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _599 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
    float _600 = 1.0 - _452;
    float _601 = _597 * _600;
    float _602 = _598 * _600;
    float _603 = _599 * _600;
    float _608 = (_597 + (-0.039999999105930328369140625)) * _452;
    float _609 = (_598 + (-0.039999999105930328369140625)) * _452;
    float _610 = (_599 + (-0.039999999105930328369140625)) * _452;
    float _611 = _608 + 0.039999999105930328369140625;
    float _613 = _609 + 0.039999999105930328369140625;
    float _614 = _610 + 0.039999999105930328369140625;
    vec4 _623 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _547, cbSceneParam._m0[86u].y * _548));
    float _627 = ((isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0))) * TEXCOORD_5.w) * _623.x;
    float _628 = dot(vec3(_444, _445, _446), vec3(_529, _530, _531));
    float _631 = _628 * 2.0;
    float _635 = (_631 * _444) - _529;
    float _636 = (_631 * _445) - _530;
    float _637 = (_631 * _446) - _531;
    float _641 = abs(dot(vec3(_529, _530, _531), vec3(_444, _445, _446)));
    float _3615 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _643 = sqrt(_447);
    float _656 = exp2((_643 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_643 * 3.0));
    float _662 = (1.0 - _656) * ((_643 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _663 = _656 * _643;
    float _691 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _695 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _699 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1028;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _753 = fma(_699, cbModelParam._m0[26u].z, fma(_695, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _691));
        float _757 = fma(_699, cbModelParam._m0[27u].z, fma(_695, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _691));
        float _761 = fma(_699, cbModelParam._m0[28u].z, fma(_695, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _691));
        float _786 = _691 + _444;
        float _787 = _695 + _445;
        float _788 = _699 + _446;
        float _798 = fma(_788, cbModelParam._m0[26u].z, fma(_787, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _786)) - _753;
        float _799 = fma(_788, cbModelParam._m0[27u].z, fma(_787, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _786)) - _757;
        float _800 = fma(_788, cbModelParam._m0[28u].z, fma(_787, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _786)) - _761;
        float _804 = inversesqrt(dot(vec3(_798, _799, _800), vec3(_798, _799, _800)));
        float _817 = ((_804 * _798) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_753 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _818 = ((_804 * _799) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_757 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _819 = ((_804 * _800) / cbModelParam._m0[34u].z) + ((((((_761 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _822 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_817, _818, _819), 0.0);
        vec4 _829 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_817, _818, _819), 0.0);
        vec4 _836 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_817, _818, _819), 0.0);
        vec4 _843 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_817, _818, _819), 0.0);
        float _856 = exp2((_822.w + (-0.5)) * 20.0) * 2.0;
        float _857 = _856 * (_822.x + (-0.5));
        float _858 = _856 * (_822.y + (-0.5));
        float _859 = _856 * (_822.z + (-0.5));
        float _866 = exp2((_829.w + (-0.5)) * 20.0) * 2.0;
        float _867 = _866 * (_829.x + (-0.5));
        float _868 = _866 * (_829.y + (-0.5));
        float _869 = _866 * (_829.z + (-0.5));
        float _876 = exp2((_836.w + (-0.5)) * 20.0) * 2.0;
        float _877 = _876 * (_836.x + (-0.5));
        float _878 = _876 * (_836.y + (-0.5));
        float _879 = _876 * (_836.z + (-0.5));
        float _886 = exp2((_843.w + (-0.5)) * 20.0) * 2.0;
        float _887 = _886 * (_843.x + (-0.5));
        float _888 = _886 * (_843.y + (-0.5));
        float _889 = _886 * (_843.z + (-0.5));
        float _890 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _891 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _892 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _893 = _857 * 0.5;
        float _894 = _867 * 0.5;
        float _895 = _877 * 0.5;
        float _896 = dot(vec3(_893, _894, _895), vec3(_893, _894, _895));
        float _901 = (_896 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_896);
        float _910 = (dot(vec3(_444, _445, _446), vec3(_901 * _893, _901 * _894, _901 * _895)) + 1.0) * 0.5;
        float _3641 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _920 = sqrt(((_894 * _894) + (_893 * _893)) + (_895 * _895)) / (_890 + 9.9999997473787516355514526367188e-06);
        float _3652 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _921 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _922 = _921 * 2.0;
        float _926 = (1.0 - _921) / (_921 + 1.0);
        float _3663 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _927 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
        float _936 = ((((1.0 - _927) * (_922 + 2.0)) * exp2(log2(isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0))) * (_922 + 1.0))) + _927) * _890;
        float _937 = _858 * 0.5;
        float _938 = _868 * 0.5;
        float _939 = _878 * 0.5;
        float _940 = dot(vec3(_937, _938, _939), vec3(_937, _938, _939));
        float _945 = (_940 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_940);
        float _953 = (dot(vec3(_444, _445, _446), vec3(_945 * _937, _945 * _938, _945 * _939)) + 1.0) * 0.5;
        float _3674 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _962 = sqrt(((_938 * _938) + (_937 * _937)) + (_939 * _939)) / (_891 + 9.9999997473787516355514526367188e-06);
        float _3685 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _964 = _963 * 2.0;
        float _968 = (1.0 - _963) / (_963 + 1.0);
        float _3696 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
        float _978 = ((((1.0 - _969) * (_964 + 2.0)) * exp2(log2(isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))) * (_964 + 1.0))) + _969) * _891;
        float _979 = _859 * 0.5;
        float _980 = _869 * 0.5;
        float _981 = _879 * 0.5;
        float _982 = dot(vec3(_979, _980, _981), vec3(_979, _980, _981));
        float _987 = (_982 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_982);
        float _995 = (dot(vec3(_444, _445, _446), vec3(_987 * _979, _987 * _980, _987 * _981)) + 1.0) * 0.5;
        float _3707 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _1004 = sqrt(((_980 * _980) + (_979 * _979)) + (_981 * _981)) / (_892 + 9.9999997473787516355514526367188e-06);
        float _3718 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1006 = _1005 * 2.0;
        float _1010 = (1.0 - _1005) / (_1005 + 1.0);
        float _3729 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _1020 = ((((1.0 - _1011) * (_1006 + 2.0)) * exp2(log2(isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))) * (_1006 + 1.0))) + _1011) * _892;
        _1028 = _859;
        _1030 = _858;
        _1031 = _857;
        _1032 = _869;
        _1033 = _868;
        _1034 = _867;
        _1035 = _879;
        _1036 = _878;
        _1037 = _877;
        _1038 = _892;
        _1039 = _891;
        _1040 = _890;
        _1041 = cbModelParam._m0[36u].z * (isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0)));
        _1042 = cbModelParam._m0[36u].z * (isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0)));
        _1043 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0)));
    }
    else
    {
        _1028 = _1029;
        _1030 = _1029;
        _1031 = _1029;
        _1032 = _1029;
        _1033 = _1029;
        _1034 = _1029;
        _1035 = _1029;
        _1036 = _1029;
        _1037 = _1029;
        _1038 = _1029;
        _1039 = _1029;
        _1040 = _1029;
        _1041 = 0.0;
        _1042 = 0.0;
        _1043 = 0.0;
    }
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1068 = fma(_699, cbModelParam._m0[30u].z, fma(_695, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _691));
        float _1072 = fma(_699, cbModelParam._m0[31u].z, fma(_695, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _691));
        float _1076 = fma(_699, cbModelParam._m0[32u].z, fma(_695, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _691));
        float _1099 = _691 + _444;
        float _1100 = _695 + _445;
        float _1101 = _699 + _446;
        float _1111 = fma(_1101, cbModelParam._m0[30u].z, fma(_1100, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1099)) - _1068;
        float _1112 = fma(_1101, cbModelParam._m0[31u].z, fma(_1100, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1099)) - _1072;
        float _1113 = fma(_1101, cbModelParam._m0[32u].z, fma(_1100, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1099)) - _1076;
        float _1117 = inversesqrt(dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113)));
        float _1130 = ((_1117 * _1111) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1068 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1131 = ((_1117 * _1112) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1072 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1132 = ((_1117 * _1113) / cbModelParam._m0[35u].z) + ((((((_1076 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        float _1167 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1134.x + (-0.5));
        float _1169 = _1167 * (_1134.y + (-0.5));
        float _1170 = _1167 * (_1134.z + (-0.5));
        float _1177 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1141.x + (-0.5));
        float _1179 = _1177 * (_1141.y + (-0.5));
        float _1180 = _1177 * (_1141.z + (-0.5));
        float _1187 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1148.x + (-0.5));
        float _1189 = _1187 * (_1148.y + (-0.5));
        float _1190 = _1187 * (_1148.z + (-0.5));
        float _1197 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1155.x + (-0.5));
        float _1199 = _1197 * (_1155.y + (-0.5));
        float _1200 = _1197 * (_1155.z + (-0.5));
        float _1201 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1202 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1203 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1204 = _1168 * 0.5;
        float _1205 = _1178 * 0.5;
        float _1206 = _1188 * 0.5;
        float _1207 = dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206));
        float _1212 = (_1207 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1207);
        float _1220 = (dot(vec3(_444, _445, _446), vec3(_1212 * _1204, _1212 * _1205, _1212 * _1206)) + 1.0) * 0.5;
        float _3770 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1229 = sqrt(((_1205 * _1205) + (_1204 * _1204)) + (_1206 * _1206)) / (_1201 + 9.9999997473787516355514526367188e-06);
        float _3781 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1231 = _1230 * 2.0;
        float _1235 = (1.0 - _1230) / (_1230 + 1.0);
        float _3792 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1245 = ((((1.0 - _1236) * (_1231 + 2.0)) * exp2(log2(isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * (_1231 + 1.0))) + _1236) * _1201;
        float _1246 = _1169 * 0.5;
        float _1247 = _1179 * 0.5;
        float _1248 = _1189 * 0.5;
        float _1249 = dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248));
        float _1254 = (_1249 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1249);
        float _1262 = (dot(vec3(_444, _445, _446), vec3(_1254 * _1246, _1254 * _1247, _1254 * _1248)) + 1.0) * 0.5;
        float _3803 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1271 = sqrt(((_1247 * _1247) + (_1246 * _1246)) + (_1248 * _1248)) / (_1202 + 9.9999997473787516355514526367188e-06);
        float _3814 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1273 = _1272 * 2.0;
        float _1277 = (1.0 - _1272) / (_1272 + 1.0);
        float _3825 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1287 = ((((1.0 - _1278) * (_1273 + 2.0)) * exp2(log2(isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * (_1273 + 1.0))) + _1278) * _1202;
        float _1288 = _1170 * 0.5;
        float _1289 = _1180 * 0.5;
        float _1290 = _1190 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1304 = (dot(vec3(_444, _445, _446), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _3836 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1313 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1203 + 9.9999997473787516355514526367188e-06);
        float _3847 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _3858 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * (_1315 + 1.0))) + _1320) * _1203;
        _1337 = _1170;
        _1338 = _1169;
        _1339 = _1168;
        _1340 = _1180;
        _1341 = _1179;
        _1342 = _1178;
        _1343 = _1190;
        _1344 = _1189;
        _1345 = _1188;
        _1346 = _1203;
        _1347 = _1202;
        _1348 = _1201;
        _1349 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)));
        _1350 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)));
        _1351 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
    }
    else
    {
        _1337 = _1029;
        _1338 = _1029;
        _1339 = _1029;
        _1340 = _1029;
        _1341 = _1029;
        _1342 = _1029;
        _1343 = _1029;
        _1344 = _1029;
        _1345 = _1029;
        _1346 = _1029;
        _1347 = _1029;
        _1348 = _1029;
        _1349 = 0.0;
        _1350 = 0.0;
        _1351 = 0.0;
    }
    float _1361 = (cbModelParam._m0[1u].x * (_1349 - _1041)) + _1041;
    float _1362 = (cbModelParam._m0[1u].x * (_1350 - _1042)) + _1042;
    float _1363 = (cbModelParam._m0[1u].x * (_1351 - _1043)) + _1043;
    float _1384 = fma(_1363, cbSceneParam._m0[89u].z, fma(_1362, cbSceneParam._m0[89u].y, _1361 * cbSceneParam._m0[89u].x));
    float _1387 = fma(_1363, cbSceneParam._m0[90u].z, fma(_1362, cbSceneParam._m0[90u].y, _1361 * cbSceneParam._m0[90u].x));
    float _1390 = fma(_1363, cbSceneParam._m0[91u].z, fma(_1362, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1361));
    float _1405 = _635 * 0.5;
    float _1406 = _636 * 0.5;
    float _1407 = _637 * 0.5;
    float _1408 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1339, _1342, _1345, _1348));
    float _1411 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1338, _1341, _1344, _1347));
    float _1414 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1337, _1340, _1343, _1346));
    float _1448;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1421 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1028, _1032, _1035, _1038));
        float _1425 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1030, _1033, _1036, _1039));
        float _1429 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1031, _1034, _1037, _1040));
        float _1436 = dot(vec4(cbModelParam._m0[39u]), vec4(_1405, _1406, _1407, 1.0));
        _1448 = dot(vec3(isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)), isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)), isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1436) ? 0.0 : (isnan(0.0) ? _1436 : max(0.0, _1436))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1448 = 1.0;
    }
    float _1459;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1450 = dot(vec4(cbModelParam._m0[40u]), vec4(_1405, _1406, _1407, 1.0));
        _1459 = dot(vec3(isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)), isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)), isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1450) ? 0.0 : (isnan(0.0) ? _1450 : max(0.0, _1450))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1459 = 1.0;
    }
    float _1463 = (_1459 * cbModelParam._m0[1u].x) + (_1448 * (1.0 - cbModelParam._m0[1u].x));
    float _1473 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _447);
    float _1474 = isnan(_1473) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1473 : min(cbModelParam._m0[25u].z, _1473));
    float _1556;
    float _1558;
    float _1560;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1523 = fma(_699, cbModelParam._m0[13u].z, fma(_695, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _691)) + cbModelParam._m0[13u].w;
        float _1527 = fma(_699, cbModelParam._m0[14u].z, fma(_695, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _691)) + cbModelParam._m0[14u].w;
        float _1531 = fma(_699, cbModelParam._m0[15u].z, fma(_695, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _691)) + cbModelParam._m0[15u].w;
        float _1534 = fma(_637, cbModelParam._m0[13u].z, fma(_636, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _635));
        float _1537 = fma(_637, cbModelParam._m0[14u].z, fma(_636, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _635));
        float _1540 = fma(_637, cbModelParam._m0[15u].z, fma(_636, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _635));
        float _1568;
        if (_1534 > 0.0)
        {
            _1568 = abs((1.0 - _1523) / _1534);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1534 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1523 + 1.0) / _1534);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1568 = frontier_phi_19_17_ladder;
        }
        float _1795;
        if (_1537 > 0.0)
        {
            _1795 = abs((1.0 - _1527) / _1537);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1537 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1527 + 1.0) / _1537);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1795 = frontier_phi_28_24_ladder;
        }
        float _2052;
        if (_1540 > 0.0)
        {
            _2052 = abs((1.0 - _1531) / _1540);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1531 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2052 = frontier_phi_40_35_ladder;
        }
        float _2054 = isnan(_1795) ? _1568 : (isnan(_1568) ? _1795 : min(_1568, _1795));
        float _2055 = isnan(_2052) ? _2054 : (isnan(_2054) ? _2052 : min(_2054, _2052));
        float _2059 = (_2055 * _1534) + _1523;
        float _2060 = (_2055 * _1537) + _1527;
        float _2061 = (_2055 * _1540) + _1531;
        float _2062 = _2055 * 9.9999997473787516355514526367188e-05;
        float _2064 = (-1.0) - _2062;
        float _2066 = _2062 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2061 > _2066) || ((_2061 < _2064) || ((_2060 > _2066) || ((_2060 < _2064) || ((_2059 < _2064) || (_2059 > _2066))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2189 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2061, cbModelParam._m0[9u].z, fma(_2060, cbModelParam._m0[9u].y, _2059 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2061, cbModelParam._m0[10u].z, fma(_2060, cbModelParam._m0[10u].y, _2059 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2061, cbModelParam._m0[11u].z, fma(_2060, cbModelParam._m0[11u].y, _2059 * cbModelParam._m0[11u].x))), _1474);
            frontier_phi_18_40_ladder = _2189.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2189.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2189.x * cbModelParam._m0[1u].y;
        }
        _1556 = frontier_phi_18_40_ladder_2;
        _1558 = frontier_phi_18_40_ladder_1;
        _1560 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1544 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_635, _636, _637), _1474);
        _1556 = _1544.x * cbModelParam._m0[1u].y;
        _1558 = _1544.y * cbModelParam._m0[1u].y;
        _1560 = _1544.z * cbModelParam._m0[1u].y;
    }
    float _1564 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _447);
    float _1565 = isnan(_1564) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1564 : min(cbModelParam._m0[25u].w, _1564));
    float _1657;
    float _1659;
    float _1661;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1621 = fma(_699, cbModelParam._m0[21u].z, fma(_695, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _691)) + cbModelParam._m0[21u].w;
        float _1625 = fma(_699, cbModelParam._m0[22u].z, fma(_695, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _691)) + cbModelParam._m0[22u].w;
        float _1629 = fma(_699, cbModelParam._m0[23u].z, fma(_695, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _691)) + cbModelParam._m0[23u].w;
        float _1632 = fma(_637, cbModelParam._m0[21u].z, fma(_636, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _635));
        float _1635 = fma(_637, cbModelParam._m0[22u].z, fma(_636, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _635));
        float _1638 = fma(_637, cbModelParam._m0[23u].z, fma(_636, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _635));
        float _1800;
        if (_1632 > 0.0)
        {
            _1800 = abs((1.0 - _1621) / _1632);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1632 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1621 + 1.0) / _1632);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1800 = frontier_phi_30_26_ladder;
        }
        float _2079;
        if (_1635 > 0.0)
        {
            _2079 = abs((1.0 - _1625) / _1635);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1635 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1625 + 1.0) / _1635);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2079 = frontier_phi_42_37_ladder;
        }
        float _2292;
        if (_1638 > 0.0)
        {
            _2292 = abs((1.0 - _1629) / _1638);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1629 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2292 = frontier_phi_51_48_ladder;
        }
        float _2294 = isnan(_2079) ? _1800 : (isnan(_1800) ? _2079 : min(_1800, _2079));
        float _2295 = isnan(_2292) ? _2294 : (isnan(_2294) ? _2292 : min(_2294, _2292));
        float _2299 = (_2295 * _1632) + _1621;
        float _2300 = (_2295 * _1635) + _1625;
        float _2301 = (_2295 * _1638) + _1629;
        float _2302 = _2295 * 9.9999997473787516355514526367188e-05;
        float _2303 = (-1.0) - _2302;
        float _2305 = _2302 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2301 > _2305) || ((_2301 < _2303) || ((_2300 > _2305) || ((_2300 < _2303) || ((_2299 < _2303) || (_2299 > _2305))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2500 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2301, cbModelParam._m0[17u].z, fma(_2300, cbModelParam._m0[17u].y, _2299 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2301, cbModelParam._m0[18u].z, fma(_2300, cbModelParam._m0[18u].y, _2299 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2301, cbModelParam._m0[19u].z, fma(_2300, cbModelParam._m0[19u].y, _2299 * cbModelParam._m0[19u].x))), _1565);
            frontier_phi_27_51_ladder = _2500.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2500.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2500.x * cbModelParam._m0[1u].z;
        }
        _1657 = frontier_phi_27_51_ladder_2;
        _1659 = frontier_phi_27_51_ladder_1;
        _1661 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1641 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_635, _636, _637), _1565);
        _1657 = _1641.x * cbModelParam._m0[1u].z;
        _1659 = _1641.y * cbModelParam._m0[1u].z;
        _1661 = _1641.z * cbModelParam._m0[1u].z;
    }
    float _1674 = (((_662 * _611) + _663) * _627) * ((cbModelParam._m0[1u].w * (_1657 - _1556)) + _1556);
    float _1676 = (((_662 * _613) + _663) * _627) * ((cbModelParam._m0[1u].w * (_1659 - _1558)) + _1558);
    float _1678 = (((_662 * _614) + _663) * _627) * ((cbModelParam._m0[1u].w * (_1661 - _1560)) + _1560);
    float _1681 = fma(_1678, cbSceneParam._m0[89u].z, fma(_1676, cbSceneParam._m0[89u].y, _1674 * cbSceneParam._m0[89u].x));
    float _1684 = fma(_1678, cbSceneParam._m0[90u].z, fma(_1676, cbSceneParam._m0[90u].y, _1674 * cbSceneParam._m0[90u].x));
    float _1687 = fma(_1678, cbSceneParam._m0[91u].z, fma(_1676, cbSceneParam._m0[91u].y, _1674 * cbSceneParam._m0[91u].x));
    vec4 _1695 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_547, _548));
    float _1697 = _1695.w;
    float _1709 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1697);
    float _1710 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1697);
    float _1711 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1697);
    uvec4 _1715 = floatBitsToUint(cbInstanceData._m0[_252 + 5u]);
    uint _1717 = _1715.x * 14u;
    uint _1718 = _1717 + 13u;
    float _1725 = _627 + (-1.0);
    float _1730 = (cbLight._m0[_1718].x * _1725) + 1.0;
    float _1731 = (cbLight._m0[_1718].y * _1725) + 1.0;
    float _1732 = (cbLight._m0[_1718].z * _1725) + 1.0;
    float _1733 = (cbLight._m0[_1718].w * _1725) + 1.0;
    uint _1734 = _1717 + 5u;
    float _1740 = isnan(1.0) ? _1731 : (isnan(_1731) ? 1.0 : min(_1731, 1.0));
    uint _1744 = _1717 + 4u;
    float _1754 = isnan(1.0) ? _1730 : (isnan(_1730) ? 1.0 : min(_1730, 1.0));
    uint _1758 = _1717 | 1u;
    float _1769 = dot(vec3(cbLight._m0[_1717].xyz), vec3(_444, _445, _446));
    float _1772 = dot(vec3(cbLight._m0[_1758].xyz), vec3(_444, _445, _446));
    float _3994 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _4005 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    float _1777 = (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * 0.3183098733425140380859375;
    float _1779 = (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * 0.3183098733425140380859375;
    float _1786 = ((cbLight._m0[_1734].x * _1740) * _1779) + (((cbLight._m0[_1744].x * _1709) * _1754) * _1777);
    float _1787 = ((_1740 * cbLight._m0[_1734].y) * _1779) + (((cbLight._m0[_1744].y * _1710) * _1754) * _1777);
    float _1788 = ((_1740 * cbLight._m0[_1734].z) * _1779) + (((cbLight._m0[_1744].z * _1711) * _1754) * _1777);
    uvec4 _1792 = floatBitsToUint(cbLight._m0[_1717 + 12u]);
    bool _1794 = _1792.x == 0u;
    float _1805;
    float _1807;
    float _1809;
    if (_1794)
    {
        _1805 = _1786;
        _1807 = _1787;
        _1809 = _1788;
    }
    else
    {
        uint _1813 = _1717 + 6u;
        float _1829 = (dot(vec3(cbLight._m0[_1717 + 2u].xyz), vec3(_444, _445, _446)) * 0.5) + 0.5;
        float _1830 = _1829 * _1829;
        float _4016 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
        float _1831 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1832 = isnan(1.0) ? _1732 : (isnan(_1732) ? 1.0 : min(_1732, 1.0));
        _1805 = (((cbLight._m0[_1813].x * 0.3183098733425140380859375) * _1831) * _1832) + _1786;
        _1807 = (((cbLight._m0[_1813].y * 0.3183098733425140380859375) * _1831) * _1832) + _1787;
        _1809 = (((cbLight._m0[_1813].z * 0.3183098733425140380859375) * _1831) * _1832) + _1788;
    }
    bool _1812 = _1792.y == 0u;
    float _1850;
    float _1852;
    float _1854;
    if (_1812)
    {
        _1850 = _1805;
        _1852 = _1807;
        _1854 = _1809;
    }
    else
    {
        uint _2023 = _1717 + 7u;
        float _2039 = (dot(vec3(cbLight._m0[_1717 + 3u].xyz), vec3(_444, _445, _446)) * 0.5) + 0.5;
        float _2040 = _2039 * _2039;
        float _4032 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
        float _2041 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _2042 = isnan(1.0) ? _1733 : (isnan(_1733) ? 1.0 : min(_1733, 1.0));
        _1850 = (((cbLight._m0[_2023].x * 0.3183098733425140380859375) * _2041) * _2042) + _1805;
        _1852 = (((cbLight._m0[_2023].y * 0.3183098733425140380859375) * _2041) * _2042) + _1807;
        _1854 = (((cbLight._m0[_2023].z * 0.3183098733425140380859375) * _2041) * _2042) + _1809;
    }
    uint _1857 = _1717 + 8u;
    float _1870 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1717].w)) * _447) * 0.949999988079071044921875);
    float _1871 = _1870 * _1870;
    float _1872 = cbLight._m0[_1717].x + _529;
    float _1873 = cbLight._m0[_1717].y + _530;
    float _1874 = cbLight._m0[_1717].z + _531;
    float _1878 = inversesqrt(dot(vec3(_1872, _1873, _1874), vec3(_1872, _1873, _1874)));
    float _1879 = _1878 * _1872;
    float _1880 = _1878 * _1873;
    float _1881 = _1878 * _1874;
    float _1882 = dot(vec3(_444, _445, _446), vec3(cbLight._m0[_1717].xyz));
    float _4048 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _1885 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _4059 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _1886 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _1887 = dot(vec3(_444, _445, _446), vec3(_1879, _1880, _1881));
    float _4070 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _1890 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _1891 = dot(vec3(cbLight._m0[_1717].xyz), vec3(_1879, _1880, _1881));
    float _4081 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1895 = _1871 * _1871;
    float _1899 = ((_1890 * _1890) * (_1895 + (-1.0))) + 1.0;
    float _1907 = exp2(log2(1.0 - (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0)))) * 5.0);
    float _1908 = 0.959999978542327880859375 - _608;
    float _1910 = 0.959999978542327880859375 - _609;
    float _1911 = 0.959999978542327880859375 - _610;
    float _1918 = 1.0 - _1871;
    float _1929 = (0.5 / (((_1886 * ((_1885 * _1918) + _1871)) + 9.9999999392252902907785028219223e-09) + (((_1886 * _1918) + _1871) * _1885))) * _1885;
    float _4092 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
    float _1931 = (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (_1895 / ((_1899 * _1899) * 3.141590118408203125));
    uint _1945 = _1717 + 9u;
    float _1956 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1758].w)) * _447) * 0.949999988079071044921875);
    float _1957 = _1956 * _1956;
    float _1958 = cbLight._m0[_1758].x + _529;
    float _1959 = cbLight._m0[_1758].y + _530;
    float _1960 = cbLight._m0[_1758].z + _531;
    float _1964 = inversesqrt(dot(vec3(_1958, _1959, _1960), vec3(_1958, _1959, _1960)));
    float _1965 = _1964 * _1958;
    float _1966 = _1964 * _1959;
    float _1967 = _1964 * _1960;
    float _1968 = dot(vec3(_444, _445, _446), vec3(cbLight._m0[_1758].xyz));
    float _4103 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1971 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _1972 = dot(vec3(_444, _445, _446), vec3(_1965, _1966, _1967));
    float _4114 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1975 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _1976 = dot(vec3(cbLight._m0[_1758].xyz), vec3(_1965, _1966, _1967));
    float _4125 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1980 = _1957 * _1957;
    float _1984 = ((_1975 * _1975) * (_1980 + (-1.0))) + 1.0;
    float _1991 = exp2(log2(1.0 - (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0)))) * 5.0);
    float _1998 = 1.0 - _1957;
    float _2008 = (0.5 / (((_1886 * ((_1971 * _1998) + _1957)) + 9.9999999392252902907785028219223e-09) + (((_1886 * _1998) + _1957) * _1971))) * _1971;
    float _4136 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2010 = (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_1980 / ((_1984 * _1984) * 3.141590118408203125));
    float _2020 = (((((_1991 * _1908) + _611) * cbLight._m0[_1945].x) * _2010) * _1740) + ((((cbLight._m0[_1857].x * _1709) * ((_1907 * _1908) + _611)) * _1931) * _1754);
    float _2021 = (((((_1991 * _1910) + _613) * cbLight._m0[_1945].y) * _2010) * _1740) + ((((cbLight._m0[_1857].y * _1710) * ((_1907 * _1910) + _613)) * _1931) * _1754);
    float _2022 = (((((_1991 * _1911) + _614) * cbLight._m0[_1945].z) * _2010) * _1740) + ((((cbLight._m0[_1857].z * _1711) * ((_1907 * _1911) + _614)) * _1931) * _1754);
    float _2084;
    float _2086;
    float _2088;
    if (_1794)
    {
        _2084 = _2020;
        _2086 = _2021;
        _2088 = _2022;
    }
    else
    {
        uint _2090 = _1717 + 2u;
        uint _2094 = _1717 + 10u;
        float _2108 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2090].w)) * _447) * 0.949999988079071044921875);
        float _2109 = _2108 * _2108;
        float _2110 = cbLight._m0[_2090].x + _529;
        float _2111 = cbLight._m0[_2090].y + _530;
        float _2112 = cbLight._m0[_2090].z + _531;
        float _2116 = inversesqrt(dot(vec3(_2110, _2111, _2112), vec3(_2110, _2111, _2112)));
        float _2117 = _2116 * _2110;
        float _2118 = _2116 * _2111;
        float _2119 = _2116 * _2112;
        float _2120 = dot(vec3(_444, _445, _446), vec3(cbLight._m0[_2090].xyz));
        float _4147 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2123 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _2124 = dot(vec3(_444, _445, _446), vec3(_2117, _2118, _2119));
        float _4158 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        float _2127 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _2128 = dot(vec3(cbLight._m0[_2090].xyz), vec3(_2117, _2118, _2119));
        float _4169 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2132 = _2109 * _2109;
        float _2136 = ((_2127 * _2127) * (_2132 + (-1.0))) + 1.0;
        float _2143 = exp2(log2(1.0 - (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0)))) * 5.0);
        float _2150 = 1.0 - _2109;
        float _2160 = (0.5 / (((_1886 * ((_2123 * _2150) + _2109)) + 9.9999999392252902907785028219223e-09) + (((_1886 * _2150) + _2109) * _2123))) * _2123;
        float _4180 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2162 = (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_2132 / ((_2136 * _2136) * 3.141590118408203125));
        float _2163 = isnan(1.0) ? _1732 : (isnan(_1732) ? 1.0 : min(_1732, 1.0));
        _2084 = (((((_2143 * _1908) + _611) * cbLight._m0[_2094].x) * _2162) * _2163) + _2020;
        _2086 = (((((_2143 * _1910) + _613) * cbLight._m0[_2094].y) * _2162) * _2163) + _2021;
        _2088 = (((((_2143 * _1911) + _614) * cbLight._m0[_2094].z) * _2162) * _2163) + _2022;
    }
    float _2198;
    float _2200;
    float _2202;
    if (_1812)
    {
        _2198 = _2084;
        _2200 = _2086;
        _2202 = _2088;
    }
    else
    {
        uint _2209 = _1717 + 3u;
        uint _2213 = _1717 + 11u;
        float _2227 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2209].w)) * _447) * 0.949999988079071044921875);
        float _2228 = _2227 * _2227;
        float _2229 = cbLight._m0[_2209].x + _529;
        float _2230 = cbLight._m0[_2209].y + _530;
        float _2231 = cbLight._m0[_2209].z + _531;
        float _2235 = inversesqrt(dot(vec3(_2229, _2230, _2231), vec3(_2229, _2230, _2231)));
        float _2236 = _2235 * _2229;
        float _2237 = _2235 * _2230;
        float _2238 = _2235 * _2231;
        float _2239 = dot(vec3(_444, _445, _446), vec3(cbLight._m0[_2209].xyz));
        float _4196 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2242 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _2243 = dot(vec3(_444, _445, _446), vec3(_2236, _2237, _2238));
        float _4207 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2246 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _2247 = dot(vec3(cbLight._m0[_2209].xyz), vec3(_2236, _2237, _2238));
        float _4218 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2251 = _2228 * _2228;
        float _2255 = ((_2246 * _2246) * (_2251 + (-1.0))) + 1.0;
        float _2262 = exp2(log2(1.0 - (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0)))) * 5.0);
        float _2269 = 1.0 - _2228;
        float _2279 = (0.5 / (((_1886 * ((_2242 * _2269) + _2228)) + 9.9999999392252902907785028219223e-09) + (((_1886 * _2269) + _2228) * _2242))) * _2242;
        float _4229 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2281 = (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_2251 / ((_2255 * _2255) * 3.141590118408203125));
        float _2282 = isnan(1.0) ? _1733 : (isnan(_1733) ? 1.0 : min(_1733, 1.0));
        _2198 = (((((_2262 * _1908) + _611) * cbLight._m0[_2213].x) * _2281) * _2282) + _2084;
        _2200 = (((((_2262 * _1910) + _613) * cbLight._m0[_2213].y) * _2281) * _2282) + _2086;
        _2202 = (((((_2262 * _1911) + _614) * cbLight._m0[_2213].z) * _2281) * _2282) + _2088;
    }
    float _2417;
    float _2419;
    float _2421;
    float _2423;
    float _2425;
    float _2427;
    if (_1715.y == 0u)
    {
        float _2357 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2358 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2357;
        float _2359 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2357;
        float _2360 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2357;
        uvec4 _2372 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2373 = _2372.x;
        uint _2384 = uint((float(_2372.y) * floor(float(uint(cbSceneParam._m0[85u].y * _548) / _2373))) + floor(float(uint(cbSceneParam._m0[85u].x * _547) / _2373)));
        float _2394 = (log2(_2360 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2395 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        uint _2398 = uint(isnan(14.0) ? _2395 : (isnan(_2395) ? 14.0 : min(_2395, 14.0)));
        uvec4 _2403 = texelFetch(g_lightClusterGridBuffer, int(((_2398 << 2u) + (_2384 << 6u)) >> 2u));
        uint _2404 = _2403.x;
        uint _2405 = _2372.z;
        float _2505;
        float _2507;
        float _2509;
        float _2511;
        float _2513;
        float _2515;
        if (((((1u << ((_2405 >> 4u) & 15u)) + 4294967295u) & _2404) == 0u) || ((_2405 & 240u) == 0u))
        {
            _2505 = 0.0;
            _2507 = 0.0;
            _2509 = 0.0;
            _2511 = 0.0;
            _2513 = 0.0;
            _2515 = 0.0;
        }
        else
        {
            float _2506;
            float _2508;
            float _2510;
            float _2512;
            float _2514;
            float _2516;
            float _2658 = 0.0;
            float _2659 = 0.0;
            float _2660 = 0.0;
            float _2661 = 0.0;
            float _2662 = 0.0;
            float _2663 = 0.0;
            uint _2664 = 0u;
            uint _2673;
            bool _2674;
            for (;;)
            {
                _2673 = texelFetch(g_lightClassification, int((((_2398 << 5u) + (_2384 << 9u)) + (_2664 << 2u)) >> 2u)).x;
                _2674 = _2673 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2674)
                {
                    frontier_phi_68_pred = _2658;
                    frontier_phi_68_pred_1 = _2663;
                    frontier_phi_68_pred_2 = _2662;
                    frontier_phi_68_pred_3 = _2661;
                    frontier_phi_68_pred_4 = _2660;
                    frontier_phi_68_pred_5 = _2659;
                }
                else
                {
                    float _2803;
                    float _2804;
                    float _2805;
                    float _2806;
                    float _2807;
                    float _2808;
                    uint _2809;
                    _2803 = _2658;
                    _2804 = _2659;
                    _2805 = _2660;
                    _2806 = _2661;
                    _2807 = _2662;
                    _2808 = _2663;
                    _2809 = _2673;
                    float _2730;
                    float _2731;
                    float _2732;
                    float _2733;
                    float _2734;
                    float _2735;
                    for (;;)
                    {
                        uint _2813 = uint(findLSB(_2809)) + (_2664 << 5u);
                        uint _2810 = (_2809 + 4294967295u) & _2809;
                        uint _2815 = _2813 * 48u;
                        vec4 _2829 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2815)).x, texelFetch(g_PointLightRenderingBuffer, int(_2815 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2815 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2815 + 3u)).x));
                        uint _2835 = (_2813 * 48u) + 4u;
                        vec4 _2848 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2835)).x, texelFetch(g_PointLightRenderingBuffer, int(_2835 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2835 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2835 + 3u)).x));
                        uint _2854 = (_2813 * 48u) + 8u;
                        vec3 _2865 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2854)).x, texelFetch(g_PointLightRenderingBuffer, int(_2854 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2854 + 2u)).x));
                        float _2869 = _2829.x - _2358;
                        float _2870 = _2829.y - _2359;
                        float _2871 = _2829.z - _2360;
                        float _2872 = dot(vec3(_2869, _2870, _2871), vec3(_2869, _2870, _2871));
                        float _2875 = inversesqrt(_2872);
                        float _2876 = _2875 * _2869;
                        float _2877 = _2875 * _2870;
                        float _2878 = _2875 * _2871;
                        float _2879 = dot(vec3(_568, _571, _574), vec3(_2876, _2877, _2878));
                        float _2884 = 1.0 - (_2872 * _2829.w);
                        float _4255 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
                        float _2885 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
                        float _2886 = sqrt(_2872) * _2848.w;
                        float _2889 = 1.39999997615814208984375 / (_2886 + 1.39999997615814208984375);
                        float _2890 = _2889 * _2889;
                        float _2893 = ((1.0 - _2890) * _2879) + _2890;
                        float _2896 = _2886 * _2886;
                        float _2900 = ((isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0))) * _2885) / ((_2896 * 0.699999988079071044921875) + 1.0);
                        float _2904 = (-0.0) - _2358;
                        float _2905 = (-0.0) - _2359;
                        float _2906 = (-0.0) - _2360;
                        float _2910 = inversesqrt(dot(vec3(_2904, _2905, _2906), vec3(_2904, _2905, _2906)));
                        float _2911 = _2910 * _2904;
                        float _2912 = _2910 * _2905;
                        float _2913 = _2910 * _2906;
                        float _2921 = exp2(log2(1.0 / ((_2896 * 3.5) + 5.0)) * 0.25);
                        float _2922 = 1.0 - _643;
                        float _2929 = sqrt(1.0 - ((1.0 - (_2922 * _2922)) * (1.0 - (_2921 * _2921))));
                        float _2930 = _2929 * _2929;
                        float _2931 = _2930 * _2930;
                        float _2932 = _2911 + _2876;
                        float _2933 = _2912 + _2877;
                        float _2934 = _2913 + _2878;
                        float _2938 = inversesqrt(dot(vec3(_2932, _2933, _2934), vec3(_2932, _2933, _2934)));
                        float _2942 = dot(vec3(_568, _571, _574), vec3(_2911, _2912, _2913));
                        float _4271 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
                        float _2945 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
                        float _2946 = dot(vec3(_568, _571, _574), vec3(_2938 * _2932, _2938 * _2933, _2938 * _2934));
                        float _4282 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
                        float _2949 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
                        float _2953 = ((_2949 * _2949) * (_2931 + (-1.0))) + 1.0;
                        float _2954 = _2889 * _2930;
                        float _2955 = _2954 * _2954;
                        float _2958 = ((1.0 - _2955) * _2879) + _2955;
                        float _4293 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
                        float _2959 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                        float _2960 = 1.0 - _2930;
                        float _2970 = (0.5 / (((_2959 * ((_2945 * _2960) + _2930)) + 9.9999999392252902907785028219223e-09) + (((_2959 * _2960) + _2930) * _2945))) * _2959;
                        float _4304 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
                        float _2981 = (((_2931 * 3.1415927410125732421875) * (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0)))) / ((_2953 * _2953) * ((_2896 * 2.1991131305694580078125) + 3.141590118408203125))) * _2885;
                        _2733 = (_2900 * _2848.x) + _2806;
                        _2734 = (_2900 * _2848.y) + _2807;
                        _2735 = (_2900 * _2848.z) + _2808;
                        _2730 = (_2981 * _2865.x) + _2803;
                        _2731 = (_2981 * _2865.y) + _2804;
                        _2732 = (_2981 * _2865.z) + _2805;
                        if (_2810 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2803 = _2730;
                            _2804 = _2731;
                            _2805 = _2732;
                            _2806 = _2733;
                            _2807 = _2734;
                            _2808 = _2735;
                            _2809 = _2810;
                        }
                    }
                    frontier_phi_68_pred = _2730;
                    frontier_phi_68_pred_1 = _2735;
                    frontier_phi_68_pred_2 = _2734;
                    frontier_phi_68_pred_3 = _2733;
                    frontier_phi_68_pred_4 = _2732;
                    frontier_phi_68_pred_5 = _2731;
                }
                _2506 = frontier_phi_68_pred;
                _2516 = frontier_phi_68_pred_1;
                _2514 = frontier_phi_68_pred_2;
                _2512 = frontier_phi_68_pred_3;
                _2510 = frontier_phi_68_pred_4;
                _2508 = frontier_phi_68_pred_5;
                uint _2665 = _2664 + 1u;
                if (_2665 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2658 = _2506;
                    _2659 = _2508;
                    _2660 = _2510;
                    _2661 = _2512;
                    _2662 = _2514;
                    _2663 = _2516;
                    _2664 = _2665;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2505 = _2506;
            _2507 = _2508;
            _2509 = _2510;
            _2511 = _2512;
            _2513 = _2514;
            _2515 = _2516;
        }
        uvec4 _2519 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2520 = _2519.z;
        uint _2522 = (_2520 >> 8u) & 15u;
        float _2626;
        float _2628;
        float _2630;
        float _2632;
        float _2634;
        float _2636;
        if (((4294967295u << _2522) & _2404) == 0u)
        {
            _2626 = _2505;
            _2628 = _2507;
            _2630 = _2509;
            _2632 = _2511;
            _2634 = _2513;
            _2636 = _2515;
        }
        else
        {
            float _2651 = inversesqrt(dot(vec3(_2358, _2359, _2360), vec3(_2358, _2359, _2360)));
            float _2652 = _2651 * _2358;
            float _2653 = _2651 * _2359;
            float _2654 = _2651 * _2360;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2522 < ((_2520 >> 12u) & 15u))
            {
                float _2627;
                float _2629;
                float _2631;
                float _2633;
                float _2635;
                float _2637;
                float _2786 = _2505;
                float _2787 = _2507;
                float _2788 = _2509;
                float _2789 = _2511;
                float _2790 = _2513;
                float _2791 = _2515;
                uint _2792 = _2522;
                uint _2801;
                bool _2802;
                for (;;)
                {
                    _2801 = texelFetch(g_lightClassification, int((((_2398 << 5u) + (_2384 << 9u)) + (_2792 << 2u)) >> 2u)).x;
                    _2802 = _2801 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2802)
                    {
                        frontier_phi_79_pred = _2791;
                        frontier_phi_79_pred_1 = _2790;
                        frontier_phi_79_pred_2 = _2789;
                        frontier_phi_79_pred_3 = _2788;
                        frontier_phi_79_pred_4 = _2787;
                        frontier_phi_79_pred_5 = _2786;
                    }
                    else
                    {
                        float _2995;
                        float _2996;
                        float _2997;
                        float _2998;
                        float _2999;
                        float _3000;
                        float _3289;
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3293;
                        float _3294;
                        float _3008 = _2786;
                        float _3009 = _2787;
                        float _3010 = _2788;
                        float _3011 = _2789;
                        float _3012 = _2790;
                        float _3013 = _2791;
                        uint _3014 = _2801;
                        uint _3015;
                        vec4 _3040;
                        float _3041;
                        vec4 _3056;
                        vec3 _3068;
                        vec4 _3083;
                        vec4 _3098;
                        float _3145;
                        bool _3146;
                        for (;;)
                        {
                            uint _3025 = ((_2792 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3014));
                            _3015 = (_3014 + 4294967295u) & _3014;
                            uint _3027 = _3025 * 40u;
                            _3040 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3027)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 3u)).x));
                            _3041 = _3040.w;
                            uint _3043 = (_3025 * 40u) + 4u;
                            _3056 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3043)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 3u)).x));
                            uint _3058 = (_3025 * 40u) + 8u;
                            _3068 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3058)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 2u)).x));
                            uint _3070 = (_3025 * 40u) + 16u;
                            _3083 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3070)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 3u)).x));
                            uint _3085 = (_3025 * 40u) + 20u;
                            _3098 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3085)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 3u)).x));
                            uint _3101 = (_3025 * 40u) + 24u;
                            vec4 _3114 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3101)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 3u)).x));
                            uint _3120 = (_3025 * 40u) + 28u;
                            vec4 _3133 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3120)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 3u)).x));
                            _3145 = fma(_2360, _3133.z, fma(_2359, _3133.y, _3133.x * _2358)) + _3133.w;
                            _3146 = !((fma(_2360, _3114.z, fma(_2359, _3114.y, _3114.x * _2358)) + _3114.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3146)
                            {
                                float _3173 = _3040.x - _2358;
                                float _3174 = _3040.y - _2359;
                                float _3175 = _3040.z - _2360;
                                float _3176 = dot(vec3(_3173, _3174, _3175), vec3(_3173, _3174, _3175));
                                float _3179 = inversesqrt(_3176);
                                float _3180 = _3179 * _3173;
                                float _3181 = _3179 * _3174;
                                float _3182 = _3179 * _3175;
                                float _3186 = 1.0 - (_3176 / (_3041 * _3041));
                                float _4315 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                                float _3187 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
                                float _3191 = sqrt(_3176) * _3056.w;
                                float _3193 = 1.39999997615814208984375 / (_3191 + 1.39999997615814208984375);
                                float _3194 = _3193 * _3193;
                                float _3197 = ((1.0 - _3194) * dot(vec3(_3180, _3181, _3182), vec3(_568, _571, _574))) + _3194;
                                float _3200 = _3191 * _3191;
                                float _3204 = (fma(_2360, _3083.z, fma(_2359, _3083.y, _3083.x * _2358)) + _3083.w) / _3145;
                                float _3205 = (fma(_2360, _3098.z, fma(_2359, _3098.y, _3098.x * _2358)) + _3098.w) / _3145;
                                float _3209 = 1.0 - dot(vec2(_3204, _3205), vec2(_3204, _3205));
                                float _4331 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                                float _3210 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
                                float _3211 = _3210 * (((isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0))) * _3187) / ((_3200 * 0.699999988079071044921875) + 1.0));
                                float _3223 = exp2(log2(1.0 / ((_3200 * 3.5) + 5.0)) * 0.25);
                                float _3224 = 1.0 - _643;
                                float _3231 = sqrt(1.0 - ((1.0 - (_3224 * _3224)) * (1.0 - (_3223 * _3223))));
                                float _3232 = _3231 * _3231;
                                float _3233 = _3232 * _3232;
                                float _3234 = _3180 - _2652;
                                float _3235 = _3181 - _2653;
                                float _3236 = _3182 - _2654;
                                float _3240 = inversesqrt(dot(vec3(_3234, _3235, _3236), vec3(_3234, _3235, _3236)));
                                float _3244 = dot(vec3(_568, _571, _574), vec3((-0.0) - _2652, (-0.0) - _2653, (-0.0) - _2654));
                                float _4342 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                                float _3247 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
                                float _3248 = dot(vec3(_568, _571, _574), vec3(_3240 * _3234, _3240 * _3235, _3240 * _3236));
                                float _4353 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                                float _3251 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                                float _3255 = ((_3251 * _3251) * (_3233 + (-1.0))) + 1.0;
                                float _3256 = _3193 * _3232;
                                float _3257 = _3256 * _3256;
                                float _3263 = ((1.0 - _3257) * dot(vec3(_568, _571, _574), vec3(_3180, _3181, _3182))) + _3257;
                                float _4364 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                                float _3264 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                                float _3265 = 1.0 - _3232;
                                float _3275 = (0.5 / (((_3264 * ((_3247 * _3265) + _3232)) + 9.9999999392252902907785028219223e-09) + (((_3264 * _3265) + _3232) * _3247))) * _3264;
                                float _4375 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                                float _3285 = (_3210 * _3187) * (((_3233 * 3.1415927410125732421875) * (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0)))) / ((_3255 * _3255) * ((_3200 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3211 * _3056.y;
                                frontier_phi_85_pred_1 = _3211 * _3056.x;
                                frontier_phi_85_pred_2 = _3285 * _3068.z;
                                frontier_phi_85_pred_3 = _3285 * _3068.y;
                                frontier_phi_85_pred_4 = _3285 * _3068.x;
                                frontier_phi_85_pred_5 = _3211 * _3056.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3293 = frontier_phi_85_pred;
                            _3292 = frontier_phi_85_pred_1;
                            _3291 = frontier_phi_85_pred_2;
                            _3290 = frontier_phi_85_pred_3;
                            _3289 = frontier_phi_85_pred_4;
                            _3294 = frontier_phi_85_pred_5;
                            _2998 = _3292 + _3011;
                            _2999 = _3293 + _3012;
                            _3000 = _3294 + _3013;
                            _2995 = _3289 + _3008;
                            _2996 = _3290 + _3009;
                            _2997 = _3291 + _3010;
                            if (_3015 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3008 = _2995;
                                _3009 = _2996;
                                _3010 = _2997;
                                _3011 = _2998;
                                _3012 = _2999;
                                _3013 = _3000;
                                _3014 = _3015;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3000;
                        frontier_phi_79_pred_1 = _2999;
                        frontier_phi_79_pred_2 = _2998;
                        frontier_phi_79_pred_3 = _2997;
                        frontier_phi_79_pred_4 = _2996;
                        frontier_phi_79_pred_5 = _2995;
                    }
                    _2637 = frontier_phi_79_pred;
                    _2635 = frontier_phi_79_pred_1;
                    _2633 = frontier_phi_79_pred_2;
                    _2631 = frontier_phi_79_pred_3;
                    _2629 = frontier_phi_79_pred_4;
                    _2627 = frontier_phi_79_pred_5;
                    uint _2793 = _2792 + 1u;
                    if (_2793 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2786 = _2627;
                        _2787 = _2629;
                        _2788 = _2631;
                        _2789 = _2633;
                        _2790 = _2635;
                        _2791 = _2637;
                        _2792 = _2793;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2631;
                frontier_phi_60_61_ladder_1 = _2637;
                frontier_phi_60_61_ladder_2 = _2635;
                frontier_phi_60_61_ladder_3 = _2633;
                frontier_phi_60_61_ladder_4 = _2629;
                frontier_phi_60_61_ladder_5 = _2627;
            }
            else
            {
                frontier_phi_60_61_ladder = _2509;
                frontier_phi_60_61_ladder_1 = _2515;
                frontier_phi_60_61_ladder_2 = _2513;
                frontier_phi_60_61_ladder_3 = _2511;
                frontier_phi_60_61_ladder_4 = _2507;
                frontier_phi_60_61_ladder_5 = _2505;
            }
            _2626 = frontier_phi_60_61_ladder_5;
            _2628 = frontier_phi_60_61_ladder_4;
            _2630 = frontier_phi_60_61_ladder;
            _2632 = frontier_phi_60_61_ladder_3;
            _2634 = frontier_phi_60_61_ladder_2;
            _2636 = frontier_phi_60_61_ladder_1;
        }
        float _2641 = isnan(1.0) ? _627 : (isnan(_627) ? 1.0 : min(_627, 1.0));
        _2417 = (_2641 * _2632) + _1850;
        _2419 = (_2641 * _2634) + _1852;
        _2421 = (_2641 * _2636) + _1854;
        _2423 = ((_2626 * _611) * _2641) + _2198;
        _2425 = ((_2628 * _613) * _2641) + _2200;
        _2427 = ((_2630 * _614) * _2641) + _2202;
    }
    else
    {
        _2417 = _1850;
        _2419 = _1852;
        _2421 = _1854;
        _2423 = _2198;
        _2425 = _2200;
        _2427 = _2202;
    }
    float _4391 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _4402 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _4413 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _2444 = ((isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * (_2417 + ((isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0))) * _627))) + ((_2423 + ((isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))) * _1463)) * cbPerFrame._m0[3u].x);
    float _2445 = ((isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * (_2419 + ((isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0))) * _627))) + ((_2425 + ((isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))) * _1463)) * cbPerFrame._m0[3u].x);
    float _2446 = ((isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (_2421 + ((isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0))) * _627))) + ((_2427 + ((isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))) * _1463)) * cbPerFrame._m0[3u].x);
    uint _2447 = _252 + 6u;
    float _2455 = _547 / cbSceneParam._m0[86u].x;
    float _2456 = _548 / cbSceneParam._m0[86u].y;
    vec4 _2470 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2455, _2456, (log2((isnan(cbSceneParam._m0[77u].w) ? _470 : (isnan(_470) ? cbSceneParam._m0[77u].w : min(_470, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2472 = _2470.x;
    float _2473 = _2470.y;
    float _2474 = _2470.z;
    float _2475 = _2470.w;
    float _2568;
    float _2570;
    float _2572;
    float _2574;
    if (_470 > cbSceneParam._m0[78u].w)
    {
        float _2530 = isnan(_470) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _470 : min(cbSceneParam._m0[80u].w, _470));
        float _2531 = _2530 / _470;
        float _2542 = _2531 * _522;
        float _2543 = _523 * _2531;
        float _2544 = (-0.0) - _2543;
        float _2546 = _2531 * _524;
        float _2548 = (cbSceneParam._m0[77u].w * _2544) / _2530;
        float _2549 = _2548 + cbSceneParam._m0[79u].w;
        float _2550 = cbSceneParam._m0[79u].w - _2543;
        float _2556 = sqrt(((_2542 * _2542) + (_2543 * _2543)) + (_2546 * _2546));
        float _2559 = (1.0 - (cbSceneParam._m0[77u].w / _2530)) * _2556;
        float _2564 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2566 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2743;
        if (abs((_2544 - _2548) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2743 = ((((_2549 > 0.0) ? exp2(_2564 * _2549) : (2.0 - exp2(_2566 * _2549))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2559;
        }
        else
        {
            float _2687 = 1.0 / cbSceneParam._m0[80u].x;
            float _2688 = isnan(_2550) ? _2549 : (isnan(_2549) ? _2550 : max(_2549, _2550));
            float _2689 = isnan(_2550) ? _2549 : (isnan(_2549) ? _2550 : min(_2549, _2550));
            float _2698 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : min(_2688, 0.0));
            float _2699 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : min(_2689, 0.0));
            _2743 = ((abs(_2556 / _2544) * cbSceneParam._m0[80u].y) * ((((_2698 - _2699) * 2.0) - ((exp2(_2564 * (isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0)))) - exp2(_2564 * (isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0))))) * _2687)) - ((exp2(_2566 * _2698) - exp2(_2566 * _2699)) * _2687))) + (_2559 * cbSceneParam._m0[80u].z);
        }
        vec4 _2745 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2455, _2456, 1.0), 0.0);
        float _2754 = exp2((_2743 * (-1.44269502162933349609375)) * (1.0 - _2745.w));
        float _2755 = log2(_2754);
        float _2771 = log2(_2475);
        _2568 = (exp2(_2771 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2755 * cbSceneParam._m0[78u].x)) * _2745.x) / cbSceneParam._m0[78u].x)) + _2472;
        _2570 = (exp2(_2771 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2755 * cbSceneParam._m0[78u].y)) * _2745.y) / cbSceneParam._m0[78u].y)) + _2473;
        _2572 = (exp2(_2771 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2755 * cbSceneParam._m0[78u].z)) * _2745.z) / cbSceneParam._m0[78u].z)) + _2474;
        _2574 = _2754 * _2475;
    }
    else
    {
        _2568 = _2472;
        _2570 = _2473;
        _2572 = _2474;
        _2574 = _2475;
    }
    bool _2781;
    vec4 _2584;
    vec4 _2606;
    float _2608;
    float _2612;
    float _2613;
    float _2614;
    float _2615;
    bool _2625;
    for (;;)
    {
        _2584 = cbMatDynParam._m0[0u];
        float _2586 = roundEven(_2584.y);
        bool _2587 = _2586 == 3.0;
        float _2588 = log2(_2574);
        float _2595 = exp2(_2588 * cbSceneParam._m0[78u].x) * _2444;
        float _2596 = exp2(_2588 * cbSceneParam._m0[78u].y) * _2445;
        float _2597 = exp2(_2588 * cbSceneParam._m0[78u].z) * _2446;
        float _2604 = _535 + (-0.5);
        _2606 = cbMtdParam._m0[1u];
        _2608 = _2606.y * _2604;
        float _2611 = (_2586 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2612 = _2611 * (_2587 ? _2595 : (_2595 + (cbSceneParam._m0[72u].w * _2568)));
        _2613 = _2611 * (_2587 ? _2596 : (_2596 + (cbSceneParam._m0[72u].w * _2570)));
        _2614 = _2611 * (_2587 ? _2597 : (_2597 + (cbSceneParam._m0[72u].w * _2572)));
        _2615 = _2604 * 0.999000012874603271484375;
        _2625 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2625)
        {
            if ((cbInstanceData._m0[_252 + 7u].x + _2615) < 0.5)
            {
                _2781 = true;
                break;
            }
        }
        uint _2722 = _587 + uint(_2584.w);
        if ((cbInstanceData._m0[_2722].w < 1.0) && ((cbInstanceData._m0[_2722].w + _2615) < 0.5))
        {
            _2781 = true;
            break;
        }
        if ((_2608 + 1.0) < _2606.x)
        {
            _2781 = true;
            break;
        }
        _2781 = false;
        break;
    }
    float _2986;
    if (_2781)
    {
        discard_state = true;
        _2986 = 0.0;
    }
    else
    {
        _2986 = cbInstanceData._m0[_2447].w;
    }
    SV_Target.x = _2612;
    SV_Target.y = _2613;
    SV_Target.z = _2614;
    SV_Target.w = _2986;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2447].w;
    discard_exit();
}


