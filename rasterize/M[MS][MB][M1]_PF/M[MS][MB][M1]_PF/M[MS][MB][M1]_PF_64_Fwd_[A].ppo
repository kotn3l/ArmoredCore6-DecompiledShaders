#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1205;
float _3587;
float _3588;
float _3589;
float _3590;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _251 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _253 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _254 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3599 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _3610 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3621 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    uint _264 = uint(roundEven(NORMAL.w)) * 13u;
    uint _269 = _264 + 1u;
    uint _273 = _264 + 2u;
    float _282 = sqrt(((cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x)) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x));
    float _283 = _282 * TEXCOORD.z;
    float _284 = _282 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _283) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _284) + cbTextureTilingScale._m0[13u].w));
    vec4 _321 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _326 = _321.x * cbMtdParam._m0[11u].x;
    float _327 = _321.y * cbMtdParam._m0[11u].y;
    float _328 = _321.z * cbMtdParam._m0[11u].z;
    vec4 _347 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _283) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _284) + cbTextureTilingScale._m0[5u].w));
    vec4 _381 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _383 = _381.x;
    float _395 = dot(vec4(_383, _381.yzw), vec4(cbMtdParam._m0[28u].w, cbMtdParam._m0[29u].xy, 0.0));
    float _412 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_383 - _395) * cbMtdParam._m0[24u].y) + _395) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3632 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _413 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    float _420 = (_413 * ((_347.x * cbMtdParam._m0[12u].x) - _326)) + _326;
    float _421 = (_413 * ((_347.y * cbMtdParam._m0[12u].y) - _327)) + _327;
    float _422 = (_413 * ((_347.z * cbMtdParam._m0[12u].z) - _328)) + _328;
    float _426 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _297.x) * _420;
    float _429 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _297.y) * _421;
    float _432 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _297.z) * _422;
    float _439 = ((_420 - _426) * (isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0)))) + _426;
    float _440 = ((_421 - _429) * (isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0)))) + _429;
    float _441 = ((_422 - _432) * (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0)))) + _432;
    vec4 _454 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _283) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _284) + cbTextureTilingScale._m0[20u].w));
    vec4 _479 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _283) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _284) + cbTextureTilingScale._m0[4u].w));
    vec4 _496 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _498 = _496.x;
    float _499 = _496.y;
    float _500 = _496.z;
    float _509 = ((_479.z - _500) * _413) + _500;
    float _512 = ((((_479.x - _498) * _413) + _498) * 2.0) + (-1.0);
    float _513 = ((((_479.y - _499) * _413) + _499) * 2.0) + (-1.0);
    float _514 = dot(vec2(_512, _513), vec2(_512, _513));
    float _3643 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _519 = sqrt(1.0 - (isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))));
    float _524 = _512 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_454.x * 2.0) + (-1.0)));
    float _525 = _513 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_454.y * 2.0) + (-1.0)));
    vec4 _538 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _566 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _568 = _566.x;
    float _586 = ((texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _283) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _284) + cbTextureTilingScale._m0[9u].w)).x - _568) * _413) + _568;
    float _590 = ((texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _586) * cbMtdParam._m0[19u].z) + _586;
    float _595 = (((_454.z - _509) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _509;
    float _597 = cbMtdParam._m0[22u].x + _538.w;
    float _601 = gl_FragCoord.x * 0.125;
    float _603 = gl_FragCoord.y * 0.125;
    float _614 = fma(_519, _230 * NORMAL.x, fma(_525, _237 * TANGENT.x, (_223 * _215) * _524));
    float _617 = fma(_519, _230 * NORMAL.y, fma(_525, _237 * TANGENT.y, (_223 * _216) * _524));
    float _620 = fma(_519, _230 * NORMAL.z, fma(_525, _237 * TANGENT.z, (_223 * _217) * _524));
    float _624 = inversesqrt(dot(vec3(_614, _617, _620), vec3(_614, _617, _620)));
    float _625 = _624 * _614;
    float _626 = _624 * _617;
    float _627 = _624 * _620;
    float _3654 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _628 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _3665 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _3676 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _3687 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _3698 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _3709 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _633 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_601, _603)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _651 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _692 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _702 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _692);
    float _703 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _692);
    float _704 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _692);
    float _708 = inversesqrt(dot(vec3(_702, _703, _704), vec3(_702, _703, _704)));
    float _709 = _702 * _708;
    float _710 = _703 * _708;
    float _711 = _704 * _708;
    vec4 _713 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_601, _603));
    float _715 = _713.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _887 = sqrt(((_702 * _702) + (_703 * _703)) + (_704 * _704));
        float _893 = (cbMatDynParam._m0[5u].x * _887) + cbMatDynParam._m0[5u].y;
        float _3720 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _894 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _898 = (cbMatDynParam._m0[5u].z * _887) + cbMatDynParam._m0[5u].w;
        float _3731 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) - _894)) + _894) < ((_715 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _726 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _727 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _745 = fma(_627, cbSceneParam._m0[5u].z, fma(_626, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _625));
    float _748 = fma(_627, cbSceneParam._m0[6u].z, fma(_626, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _625));
    float _751 = fma(_627, cbSceneParam._m0[7u].z, fma(_626, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _625));
    uint _764 = _264 + 9u;
    uint _765 = _764 + uint(cbMatDynParam._m0[0u].w);
    float _771 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0)))) * cbInstanceData._m0[_765].x;
    float _772 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0)))) * cbInstanceData._m0[_765].y;
    float _773 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0)))) * cbInstanceData._m0[_765].z;
    float _3742 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _774 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    float _3753 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _775 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
    float _3764 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _776 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
    float _777 = 1.0 - _633;
    float _778 = _774 * _777;
    float _779 = _775 * _777;
    float _780 = _776 * _777;
    float _785 = (_774 + (-0.039999999105930328369140625)) * _633;
    float _786 = (_775 + (-0.039999999105930328369140625)) * _633;
    float _787 = (_776 + (-0.039999999105930328369140625)) * _633;
    float _788 = _785 + 0.039999999105930328369140625;
    float _790 = _786 + 0.039999999105930328369140625;
    float _791 = _787 + 0.039999999105930328369140625;
    vec4 _800 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _726, cbSceneParam._m0[86u].y * _727));
    float _804 = ((isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * TEXCOORD_5.w) * _800.x;
    float _805 = dot(vec3(_625, _626, _627), vec3(_709, _710, _711));
    float _808 = _805 * 2.0;
    float _812 = (_808 * _625) - _709;
    float _813 = (_808 * _626) - _710;
    float _814 = (_808 * _627) - _711;
    float _818 = abs(dot(vec3(_709, _710, _711), vec3(_625, _626, _627)));
    float _3775 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _820 = sqrt(_628);
    float _833 = exp2((_820 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_820 * 3.0));
    float _839 = (1.0 - _833) * ((_820 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _840 = _833 * _820;
    float _868 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _872 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _876 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1204;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _929 = fma(_876, cbModelParam._m0[26u].z, fma(_872, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _868));
        float _933 = fma(_876, cbModelParam._m0[27u].z, fma(_872, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _868));
        float _937 = fma(_876, cbModelParam._m0[28u].z, fma(_872, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _868));
        float _962 = _868 + _625;
        float _963 = _872 + _626;
        float _964 = _876 + _627;
        float _974 = fma(_964, cbModelParam._m0[26u].z, fma(_963, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _962)) - _929;
        float _975 = fma(_964, cbModelParam._m0[27u].z, fma(_963, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _962)) - _933;
        float _976 = fma(_964, cbModelParam._m0[28u].z, fma(_963, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _962)) - _937;
        float _980 = inversesqrt(dot(vec3(_974, _975, _976), vec3(_974, _975, _976)));
        float _993 = ((_980 * _974) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_929 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _994 = ((_980 * _975) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_933 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _995 = ((_980 * _976) / cbModelParam._m0[34u].z) + ((((((_937 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_993, _994, _995), 0.0);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_993, _994, _995), 0.0);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_993, _994, _995), 0.0);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_993, _994, _995), 0.0);
        float _1032 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_998.x + (-0.5));
        float _1034 = _1032 * (_998.y + (-0.5));
        float _1035 = _1032 * (_998.z + (-0.5));
        float _1042 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1043 = _1042 * (_1005.x + (-0.5));
        float _1044 = _1042 * (_1005.y + (-0.5));
        float _1045 = _1042 * (_1005.z + (-0.5));
        float _1052 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1012.x + (-0.5));
        float _1054 = _1052 * (_1012.y + (-0.5));
        float _1055 = _1052 * (_1012.z + (-0.5));
        float _1062 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1019.x + (-0.5));
        float _1064 = _1062 * (_1019.y + (-0.5));
        float _1065 = _1062 * (_1019.z + (-0.5));
        float _1066 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1067 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1068 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1069 = _1033 * 0.5;
        float _1070 = _1043 * 0.5;
        float _1071 = _1053 * 0.5;
        float _1072 = dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071));
        float _1077 = (_1072 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1072);
        float _1086 = (dot(vec3(_625, _626, _627), vec3(_1077 * _1069, _1077 * _1070, _1077 * _1071)) + 1.0) * 0.5;
        float _3801 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1096 = sqrt(((_1070 * _1070) + (_1069 * _1069)) + (_1071 * _1071)) / (_1066 + 9.9999997473787516355514526367188e-06);
        float _3812 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1098 = _1097 * 2.0;
        float _1102 = (1.0 - _1097) / (_1097 + 1.0);
        float _3823 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1112 = ((((1.0 - _1103) * (_1098 + 2.0)) * exp2(log2(isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * (_1098 + 1.0))) + _1103) * _1066;
        float _1113 = _1034 * 0.5;
        float _1114 = _1044 * 0.5;
        float _1115 = _1054 * 0.5;
        float _1116 = dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115));
        float _1121 = (_1116 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1116);
        float _1129 = (dot(vec3(_625, _626, _627), vec3(_1121 * _1113, _1121 * _1114, _1121 * _1115)) + 1.0) * 0.5;
        float _3834 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1138 = sqrt(((_1114 * _1114) + (_1113 * _1113)) + (_1115 * _1115)) / (_1067 + 9.9999997473787516355514526367188e-06);
        float _3845 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1140 = _1139 * 2.0;
        float _1144 = (1.0 - _1139) / (_1139 + 1.0);
        float _3856 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1154 = ((((1.0 - _1145) * (_1140 + 2.0)) * exp2(log2(isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_1140 + 1.0))) + _1145) * _1067;
        float _1155 = _1035 * 0.5;
        float _1156 = _1045 * 0.5;
        float _1157 = _1055 * 0.5;
        float _1158 = dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157));
        float _1163 = (_1158 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1158);
        float _1171 = (dot(vec3(_625, _626, _627), vec3(_1163 * _1155, _1163 * _1156, _1163 * _1157)) + 1.0) * 0.5;
        float _3867 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1180 = sqrt(((_1156 * _1156) + (_1155 * _1155)) + (_1157 * _1157)) / (_1068 + 9.9999997473787516355514526367188e-06);
        float _3878 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1182 = _1181 * 2.0;
        float _1186 = (1.0 - _1181) / (_1181 + 1.0);
        float _3889 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1196 = ((((1.0 - _1187) * (_1182 + 2.0)) * exp2(log2(isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * (_1182 + 1.0))) + _1187) * _1068;
        _1204 = _1035;
        _1206 = _1034;
        _1207 = _1033;
        _1208 = _1045;
        _1209 = _1044;
        _1210 = _1043;
        _1211 = _1055;
        _1212 = _1054;
        _1213 = _1053;
        _1214 = _1068;
        _1215 = _1067;
        _1216 = _1066;
        _1217 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0)));
        _1218 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)));
        _1219 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0)));
    }
    else
    {
        _1204 = _1205;
        _1206 = _1205;
        _1207 = _1205;
        _1208 = _1205;
        _1209 = _1205;
        _1210 = _1205;
        _1211 = _1205;
        _1212 = _1205;
        _1213 = _1205;
        _1214 = _1205;
        _1215 = _1205;
        _1216 = _1205;
        _1217 = 0.0;
        _1218 = 0.0;
        _1219 = 0.0;
    }
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1244 = fma(_876, cbModelParam._m0[30u].z, fma(_872, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _868));
        float _1248 = fma(_876, cbModelParam._m0[31u].z, fma(_872, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _868));
        float _1252 = fma(_876, cbModelParam._m0[32u].z, fma(_872, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _868));
        float _1275 = _868 + _625;
        float _1276 = _872 + _626;
        float _1277 = _876 + _627;
        float _1287 = fma(_1277, cbModelParam._m0[30u].z, fma(_1276, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1275)) - _1244;
        float _1288 = fma(_1277, cbModelParam._m0[31u].z, fma(_1276, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1275)) - _1248;
        float _1289 = fma(_1277, cbModelParam._m0[32u].z, fma(_1276, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1275)) - _1252;
        float _1293 = inversesqrt(dot(vec3(_1287, _1288, _1289), vec3(_1287, _1288, _1289)));
        float _1306 = ((_1293 * _1287) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1244 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1307 = ((_1293 * _1288) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1248 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1308 = ((_1293 * _1289) / cbModelParam._m0[35u].z) + ((((((_1252 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1310 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1306, _1307, _1308), 0.0);
        vec4 _1317 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1306, _1307, _1308), 0.0);
        vec4 _1324 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1306, _1307, _1308), 0.0);
        vec4 _1331 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1306, _1307, _1308), 0.0);
        float _1343 = exp2((_1310.w + (-0.5)) * 20.0) * 2.0;
        float _1344 = _1343 * (_1310.x + (-0.5));
        float _1345 = _1343 * (_1310.y + (-0.5));
        float _1346 = _1343 * (_1310.z + (-0.5));
        float _1353 = exp2((_1317.w + (-0.5)) * 20.0) * 2.0;
        float _1354 = _1353 * (_1317.x + (-0.5));
        float _1355 = _1353 * (_1317.y + (-0.5));
        float _1356 = _1353 * (_1317.z + (-0.5));
        float _1363 = exp2((_1324.w + (-0.5)) * 20.0) * 2.0;
        float _1364 = _1363 * (_1324.x + (-0.5));
        float _1365 = _1363 * (_1324.y + (-0.5));
        float _1366 = _1363 * (_1324.z + (-0.5));
        float _1373 = exp2((_1331.w + (-0.5)) * 20.0) * 2.0;
        float _1374 = _1373 * (_1331.x + (-0.5));
        float _1375 = _1373 * (_1331.y + (-0.5));
        float _1376 = _1373 * (_1331.z + (-0.5));
        float _1377 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1378 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1379 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1380 = _1344 * 0.5;
        float _1381 = _1354 * 0.5;
        float _1382 = _1364 * 0.5;
        float _1383 = dot(vec3(_1380, _1381, _1382), vec3(_1380, _1381, _1382));
        float _1388 = (_1383 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1383);
        float _1396 = (dot(vec3(_625, _626, _627), vec3(_1388 * _1380, _1388 * _1381, _1388 * _1382)) + 1.0) * 0.5;
        float _3930 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1405 = sqrt(((_1381 * _1381) + (_1380 * _1380)) + (_1382 * _1382)) / (_1377 + 9.9999997473787516355514526367188e-06);
        float _3941 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1407 = _1406 * 2.0;
        float _1411 = (1.0 - _1406) / (_1406 + 1.0);
        float _3952 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1421 = ((((1.0 - _1412) * (_1407 + 2.0)) * exp2(log2(isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * (_1407 + 1.0))) + _1412) * _1377;
        float _1422 = _1345 * 0.5;
        float _1423 = _1355 * 0.5;
        float _1424 = _1365 * 0.5;
        float _1425 = dot(vec3(_1422, _1423, _1424), vec3(_1422, _1423, _1424));
        float _1430 = (_1425 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1425);
        float _1438 = (dot(vec3(_625, _626, _627), vec3(_1430 * _1422, _1430 * _1423, _1430 * _1424)) + 1.0) * 0.5;
        float _3963 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1447 = sqrt(((_1423 * _1423) + (_1422 * _1422)) + (_1424 * _1424)) / (_1378 + 9.9999997473787516355514526367188e-06);
        float _3974 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1449 = _1448 * 2.0;
        float _1453 = (1.0 - _1448) / (_1448 + 1.0);
        float _3985 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1463 = ((((1.0 - _1454) * (_1449 + 2.0)) * exp2(log2(isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_1449 + 1.0))) + _1454) * _1378;
        float _1464 = _1346 * 0.5;
        float _1465 = _1356 * 0.5;
        float _1466 = _1366 * 0.5;
        float _1467 = dot(vec3(_1464, _1465, _1466), vec3(_1464, _1465, _1466));
        float _1472 = (_1467 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1467);
        float _1480 = (dot(vec3(_625, _626, _627), vec3(_1472 * _1464, _1472 * _1465, _1472 * _1466)) + 1.0) * 0.5;
        float _3996 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1489 = sqrt(((_1465 * _1465) + (_1464 * _1464)) + (_1466 * _1466)) / (_1379 + 9.9999997473787516355514526367188e-06);
        float _4007 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1491 = _1490 * 2.0;
        float _1495 = (1.0 - _1490) / (_1490 + 1.0);
        float _4018 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1505 = ((((1.0 - _1496) * (_1491 + 2.0)) * exp2(log2(isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_1491 + 1.0))) + _1496) * _1379;
        _1513 = _1346;
        _1514 = _1345;
        _1515 = _1344;
        _1516 = _1356;
        _1517 = _1355;
        _1518 = _1354;
        _1519 = _1366;
        _1520 = _1365;
        _1521 = _1364;
        _1522 = _1379;
        _1523 = _1378;
        _1524 = _1377;
        _1525 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)));
        _1526 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)));
        _1527 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)));
    }
    else
    {
        _1513 = _1205;
        _1514 = _1205;
        _1515 = _1205;
        _1516 = _1205;
        _1517 = _1205;
        _1518 = _1205;
        _1519 = _1205;
        _1520 = _1205;
        _1521 = _1205;
        _1522 = _1205;
        _1523 = _1205;
        _1524 = _1205;
        _1525 = 0.0;
        _1526 = 0.0;
        _1527 = 0.0;
    }
    float _1537 = (cbModelParam._m0[1u].x * (_1525 - _1217)) + _1217;
    float _1538 = (cbModelParam._m0[1u].x * (_1526 - _1218)) + _1218;
    float _1539 = (cbModelParam._m0[1u].x * (_1527 - _1219)) + _1219;
    float _1560 = fma(_1539, cbSceneParam._m0[89u].z, fma(_1538, cbSceneParam._m0[89u].y, _1537 * cbSceneParam._m0[89u].x));
    float _1563 = fma(_1539, cbSceneParam._m0[90u].z, fma(_1538, cbSceneParam._m0[90u].y, _1537 * cbSceneParam._m0[90u].x));
    float _1566 = fma(_1539, cbSceneParam._m0[91u].z, fma(_1538, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1537));
    float _1581 = _812 * 0.5;
    float _1582 = _813 * 0.5;
    float _1583 = _814 * 0.5;
    float _1584 = dot(vec4(_1581, _1582, _1583, 1.0), vec4(_1515, _1518, _1521, _1524));
    float _1587 = dot(vec4(_1581, _1582, _1583, 1.0), vec4(_1514, _1517, _1520, _1523));
    float _1590 = dot(vec4(_1581, _1582, _1583, 1.0), vec4(_1513, _1516, _1519, _1522));
    float _1624;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1597 = dot(vec4(_1581, _1582, _1583, 1.0), vec4(_1204, _1208, _1211, _1214));
        float _1601 = dot(vec4(_1581, _1582, _1583, 1.0), vec4(_1206, _1209, _1212, _1215));
        float _1605 = dot(vec4(_1581, _1582, _1583, 1.0), vec4(_1207, _1210, _1213, _1216));
        float _1612 = dot(vec4(cbModelParam._m0[39u]), vec4(_1581, _1582, _1583, 1.0));
        _1624 = dot(vec3(isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)), isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0)), isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1612) ? 0.0 : (isnan(0.0) ? _1612 : max(0.0, _1612))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1624 = 1.0;
    }
    float _1635;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1626 = dot(vec4(cbModelParam._m0[40u]), vec4(_1581, _1582, _1583, 1.0));
        _1635 = dot(vec3(isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)), isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)), isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1626) ? 0.0 : (isnan(0.0) ? _1626 : max(0.0, _1626))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1635 = 1.0;
    }
    float _1639 = (_1635 * cbModelParam._m0[1u].x) + (_1624 * (1.0 - cbModelParam._m0[1u].x));
    float _1649 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _628);
    float _1650 = isnan(_1649) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1649 : min(cbModelParam._m0[25u].z, _1649));
    float _1732;
    float _1734;
    float _1736;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1699 = fma(_876, cbModelParam._m0[13u].z, fma(_872, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _868)) + cbModelParam._m0[13u].w;
        float _1703 = fma(_876, cbModelParam._m0[14u].z, fma(_872, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _868)) + cbModelParam._m0[14u].w;
        float _1707 = fma(_876, cbModelParam._m0[15u].z, fma(_872, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _868)) + cbModelParam._m0[15u].w;
        float _1710 = fma(_814, cbModelParam._m0[13u].z, fma(_813, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _812));
        float _1713 = fma(_814, cbModelParam._m0[14u].z, fma(_813, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _812));
        float _1716 = fma(_814, cbModelParam._m0[15u].z, fma(_813, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _812));
        float _1744;
        if (_1710 > 0.0)
        {
            _1744 = abs((1.0 - _1699) / _1710);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1710 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1699 + 1.0) / _1710);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1744 = frontier_phi_19_17_ladder;
        }
        float _1948;
        if (_1713 > 0.0)
        {
            _1948 = abs((1.0 - _1703) / _1713);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1713 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1703 + 1.0) / _1713);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1948 = frontier_phi_28_24_ladder;
        }
        float _2202;
        if (_1716 > 0.0)
        {
            _2202 = abs((1.0 - _1707) / _1716);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1716 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1707 + 1.0) / _1716);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2202 = frontier_phi_40_35_ladder;
        }
        float _2204 = isnan(_1948) ? _1744 : (isnan(_1744) ? _1948 : min(_1744, _1948));
        float _2205 = isnan(_2202) ? _2204 : (isnan(_2204) ? _2202 : min(_2204, _2202));
        float _2209 = (_2205 * _1710) + _1699;
        float _2210 = (_2205 * _1713) + _1703;
        float _2211 = (_2205 * _1716) + _1707;
        float _2212 = _2205 * 9.9999997473787516355514526367188e-05;
        float _2214 = (-1.0) - _2212;
        float _2216 = _2212 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2211 > _2216) || ((_2211 < _2214) || ((_2210 > _2216) || ((_2210 < _2214) || ((_2209 < _2214) || (_2209 > _2216))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2339 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2211, cbModelParam._m0[9u].z, fma(_2210, cbModelParam._m0[9u].y, _2209 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2211, cbModelParam._m0[10u].z, fma(_2210, cbModelParam._m0[10u].y, _2209 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2211, cbModelParam._m0[11u].z, fma(_2210, cbModelParam._m0[11u].y, _2209 * cbModelParam._m0[11u].x))), _1650);
            frontier_phi_18_40_ladder = _2339.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2339.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2339.x * cbModelParam._m0[1u].y;
        }
        _1732 = frontier_phi_18_40_ladder_2;
        _1734 = frontier_phi_18_40_ladder_1;
        _1736 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1720 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_812, _813, _814), _1650);
        _1732 = _1720.x * cbModelParam._m0[1u].y;
        _1734 = _1720.y * cbModelParam._m0[1u].y;
        _1736 = _1720.z * cbModelParam._m0[1u].y;
    }
    float _1740 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _628);
    float _1741 = isnan(_1740) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1740 : min(cbModelParam._m0[25u].w, _1740));
    float _1832;
    float _1834;
    float _1836;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1796 = fma(_876, cbModelParam._m0[21u].z, fma(_872, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _868)) + cbModelParam._m0[21u].w;
        float _1800 = fma(_876, cbModelParam._m0[22u].z, fma(_872, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _868)) + cbModelParam._m0[22u].w;
        float _1804 = fma(_876, cbModelParam._m0[23u].z, fma(_872, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _868)) + cbModelParam._m0[23u].w;
        float _1807 = fma(_814, cbModelParam._m0[21u].z, fma(_813, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _812));
        float _1810 = fma(_814, cbModelParam._m0[22u].z, fma(_813, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _812));
        float _1813 = fma(_814, cbModelParam._m0[23u].z, fma(_813, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _812));
        float _1953;
        if (_1807 > 0.0)
        {
            _1953 = abs((1.0 - _1796) / _1807);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1796 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1953 = frontier_phi_30_26_ladder;
        }
        float _2229;
        if (_1810 > 0.0)
        {
            _2229 = abs((1.0 - _1800) / _1810);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1810 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1800 + 1.0) / _1810);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2229 = frontier_phi_42_37_ladder;
        }
        float _2442;
        if (_1813 > 0.0)
        {
            _2442 = abs((1.0 - _1804) / _1813);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1813 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1804 + 1.0) / _1813);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2442 = frontier_phi_51_48_ladder;
        }
        float _2444 = isnan(_2229) ? _1953 : (isnan(_1953) ? _2229 : min(_1953, _2229));
        float _2445 = isnan(_2442) ? _2444 : (isnan(_2444) ? _2442 : min(_2444, _2442));
        float _2449 = (_2445 * _1807) + _1796;
        float _2450 = (_2445 * _1810) + _1800;
        float _2451 = (_2445 * _1813) + _1804;
        float _2452 = _2445 * 9.9999997473787516355514526367188e-05;
        float _2453 = (-1.0) - _2452;
        float _2455 = _2452 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2451 > _2455) || ((_2451 < _2453) || ((_2450 > _2455) || ((_2450 < _2453) || ((_2449 < _2453) || (_2449 > _2455))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2650 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2451, cbModelParam._m0[17u].z, fma(_2450, cbModelParam._m0[17u].y, _2449 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2451, cbModelParam._m0[18u].z, fma(_2450, cbModelParam._m0[18u].y, _2449 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2451, cbModelParam._m0[19u].z, fma(_2450, cbModelParam._m0[19u].y, _2449 * cbModelParam._m0[19u].x))), _1741);
            frontier_phi_27_51_ladder = _2650.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2650.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2650.x * cbModelParam._m0[1u].z;
        }
        _1832 = frontier_phi_27_51_ladder_2;
        _1834 = frontier_phi_27_51_ladder_1;
        _1836 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1816 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_812, _813, _814), _1741);
        _1832 = _1816.x * cbModelParam._m0[1u].z;
        _1834 = _1816.y * cbModelParam._m0[1u].z;
        _1836 = _1816.z * cbModelParam._m0[1u].z;
    }
    float _1849 = (((_839 * _788) + _840) * _804) * ((cbModelParam._m0[1u].w * (_1832 - _1732)) + _1732);
    float _1851 = (((_839 * _790) + _840) * _804) * ((cbModelParam._m0[1u].w * (_1834 - _1734)) + _1734);
    float _1853 = (((_839 * _791) + _840) * _804) * ((cbModelParam._m0[1u].w * (_1836 - _1736)) + _1736);
    float _1856 = fma(_1853, cbSceneParam._m0[89u].z, fma(_1851, cbSceneParam._m0[89u].y, _1849 * cbSceneParam._m0[89u].x));
    float _1859 = fma(_1853, cbSceneParam._m0[90u].z, fma(_1851, cbSceneParam._m0[90u].y, _1849 * cbSceneParam._m0[90u].x));
    float _1862 = fma(_1853, cbSceneParam._m0[91u].z, fma(_1851, cbSceneParam._m0[91u].y, _1849 * cbSceneParam._m0[91u].x));
    uvec4 _1872 = floatBitsToUint(cbInstanceData._m0[_264 + 5u]);
    uint _1874 = _1872.x * 14u;
    uint _1875 = _1874 + 13u;
    float _1882 = _804 + (-1.0);
    float _1887 = (cbLight._m0[_1875].x * _1882) + 1.0;
    float _1888 = (cbLight._m0[_1875].y * _1882) + 1.0;
    float _1889 = (cbLight._m0[_1875].z * _1882) + 1.0;
    float _1890 = (cbLight._m0[_1875].w * _1882) + 1.0;
    uint _1891 = _1874 + 5u;
    float _1897 = isnan(1.0) ? _1888 : (isnan(_1888) ? 1.0 : min(_1888, 1.0));
    uint _1901 = _1874 + 4u;
    float _1907 = isnan(1.0) ? _1887 : (isnan(_1887) ? 1.0 : min(_1887, 1.0));
    uint _1911 = _1874 | 1u;
    float _1922 = dot(vec3(cbLight._m0[_1874].xyz), vec3(_625, _626, _627));
    float _1925 = dot(vec3(cbLight._m0[_1911].xyz), vec3(_625, _626, _627));
    float _4154 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
    float _4165 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _1930 = (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * 0.3183098733425140380859375;
    float _1932 = (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * 0.3183098733425140380859375;
    float _1939 = ((cbLight._m0[_1891].x * _1897) * _1932) + ((cbLight._m0[_1901].x * _1907) * _1930);
    float _1940 = ((_1897 * cbLight._m0[_1891].y) * _1932) + ((_1907 * cbLight._m0[_1901].y) * _1930);
    float _1941 = ((_1897 * cbLight._m0[_1891].z) * _1932) + ((_1907 * cbLight._m0[_1901].z) * _1930);
    uvec4 _1945 = floatBitsToUint(cbLight._m0[_1874 + 12u]);
    bool _1947 = _1945.x == 0u;
    float _1958;
    float _1960;
    float _1962;
    if (_1947)
    {
        _1958 = _1939;
        _1960 = _1940;
        _1962 = _1941;
    }
    else
    {
        uint _1966 = _1874 + 6u;
        float _1982 = (dot(vec3(cbLight._m0[_1874 + 2u].xyz), vec3(_625, _626, _627)) * 0.5) + 0.5;
        float _1983 = _1982 * _1982;
        float _4176 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
        float _1984 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1985 = isnan(1.0) ? _1889 : (isnan(_1889) ? 1.0 : min(_1889, 1.0));
        _1958 = (((cbLight._m0[_1966].x * 0.3183098733425140380859375) * _1984) * _1985) + _1939;
        _1960 = (((cbLight._m0[_1966].y * 0.3183098733425140380859375) * _1984) * _1985) + _1940;
        _1962 = (((cbLight._m0[_1966].z * 0.3183098733425140380859375) * _1984) * _1985) + _1941;
    }
    bool _1965 = _1945.y == 0u;
    float _2003;
    float _2005;
    float _2007;
    if (_1965)
    {
        _2003 = _1958;
        _2005 = _1960;
        _2007 = _1962;
    }
    else
    {
        uint _2173 = _1874 + 7u;
        float _2189 = (dot(vec3(cbLight._m0[_1874 + 3u].xyz), vec3(_625, _626, _627)) * 0.5) + 0.5;
        float _2190 = _2189 * _2189;
        float _4192 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
        float _2191 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _2192 = isnan(1.0) ? _1890 : (isnan(_1890) ? 1.0 : min(_1890, 1.0));
        _2003 = (((cbLight._m0[_2173].x * 0.3183098733425140380859375) * _2191) * _2192) + _1958;
        _2005 = (((cbLight._m0[_2173].y * 0.3183098733425140380859375) * _2191) * _2192) + _1960;
        _2007 = (((cbLight._m0[_2173].z * 0.3183098733425140380859375) * _2191) * _2192) + _1962;
    }
    uint _2010 = _1874 + 8u;
    float _2023 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1874].w)) * _628) * 0.949999988079071044921875);
    float _2024 = _2023 * _2023;
    float _2025 = cbLight._m0[_1874].x + _709;
    float _2026 = cbLight._m0[_1874].y + _710;
    float _2027 = cbLight._m0[_1874].z + _711;
    float _2031 = inversesqrt(dot(vec3(_2025, _2026, _2027), vec3(_2025, _2026, _2027)));
    float _2032 = _2031 * _2025;
    float _2033 = _2031 * _2026;
    float _2034 = _2031 * _2027;
    float _2035 = dot(vec3(_625, _626, _627), vec3(cbLight._m0[_1874].xyz));
    float _4208 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
    float _2038 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
    float _4219 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _2039 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _2040 = dot(vec3(_625, _626, _627), vec3(_2032, _2033, _2034));
    float _4230 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2043 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
    float _2044 = dot(vec3(cbLight._m0[_1874].xyz), vec3(_2032, _2033, _2034));
    float _4241 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2048 = _2024 * _2024;
    float _2052 = ((_2043 * _2043) * (_2048 + (-1.0))) + 1.0;
    float _2060 = exp2(log2(1.0 - (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0)))) * 5.0);
    float _2061 = 0.959999978542327880859375 - _785;
    float _2063 = 0.959999978542327880859375 - _786;
    float _2064 = 0.959999978542327880859375 - _787;
    float _2071 = 1.0 - _2024;
    float _2082 = (0.5 / (((_2039 * ((_2038 * _2071) + _2024)) + 9.9999999392252902907785028219223e-09) + (((_2039 * _2071) + _2024) * _2038))) * _2038;
    float _4252 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2084 = (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_2048 / ((_2052 * _2052) * 3.141590118408203125));
    uint _2095 = _1874 + 9u;
    float _2106 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1911].w)) * _628) * 0.949999988079071044921875);
    float _2107 = _2106 * _2106;
    float _2108 = cbLight._m0[_1911].x + _709;
    float _2109 = cbLight._m0[_1911].y + _710;
    float _2110 = cbLight._m0[_1911].z + _711;
    float _2114 = inversesqrt(dot(vec3(_2108, _2109, _2110), vec3(_2108, _2109, _2110)));
    float _2115 = _2114 * _2108;
    float _2116 = _2114 * _2109;
    float _2117 = _2114 * _2110;
    float _2118 = dot(vec3(_625, _626, _627), vec3(cbLight._m0[_1911].xyz));
    float _4263 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2121 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    float _2122 = dot(vec3(_625, _626, _627), vec3(_2115, _2116, _2117));
    float _4274 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2125 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
    float _2126 = dot(vec3(cbLight._m0[_1911].xyz), vec3(_2115, _2116, _2117));
    float _4285 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2130 = _2107 * _2107;
    float _2134 = ((_2125 * _2125) * (_2130 + (-1.0))) + 1.0;
    float _2141 = exp2(log2(1.0 - (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0)))) * 5.0);
    float _2148 = 1.0 - _2107;
    float _2158 = (0.5 / (((_2039 * ((_2121 * _2148) + _2107)) + 9.9999999392252902907785028219223e-09) + (((_2039 * _2148) + _2107) * _2121))) * _2121;
    float _4296 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2160 = (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_2130 / ((_2134 * _2134) * 3.141590118408203125));
    float _2170 = (((((_2141 * _2061) + _788) * cbLight._m0[_2095].x) * _2160) * _1897) + (((((_2060 * _2061) + _788) * cbLight._m0[_2010].x) * _2084) * _1907);
    float _2171 = (((((_2141 * _2063) + _790) * cbLight._m0[_2095].y) * _2160) * _1897) + (((((_2060 * _2063) + _790) * cbLight._m0[_2010].y) * _2084) * _1907);
    float _2172 = (((((_2141 * _2064) + _791) * cbLight._m0[_2095].z) * _2160) * _1897) + (((((_2060 * _2064) + _791) * cbLight._m0[_2010].z) * _2084) * _1907);
    float _2234;
    float _2236;
    float _2238;
    if (_1947)
    {
        _2234 = _2170;
        _2236 = _2171;
        _2238 = _2172;
    }
    else
    {
        uint _2240 = _1874 + 2u;
        uint _2244 = _1874 + 10u;
        float _2258 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2240].w)) * _628) * 0.949999988079071044921875);
        float _2259 = _2258 * _2258;
        float _2260 = cbLight._m0[_2240].x + _709;
        float _2261 = cbLight._m0[_2240].y + _710;
        float _2262 = cbLight._m0[_2240].z + _711;
        float _2266 = inversesqrt(dot(vec3(_2260, _2261, _2262), vec3(_2260, _2261, _2262)));
        float _2267 = _2266 * _2260;
        float _2268 = _2266 * _2261;
        float _2269 = _2266 * _2262;
        float _2270 = dot(vec3(_625, _626, _627), vec3(cbLight._m0[_2240].xyz));
        float _4307 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2273 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _2274 = dot(vec3(_625, _626, _627), vec3(_2267, _2268, _2269));
        float _4318 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2277 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _2278 = dot(vec3(cbLight._m0[_2240].xyz), vec3(_2267, _2268, _2269));
        float _4329 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2282 = _2259 * _2259;
        float _2286 = ((_2277 * _2277) * (_2282 + (-1.0))) + 1.0;
        float _2293 = exp2(log2(1.0 - (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0)))) * 5.0);
        float _2300 = 1.0 - _2259;
        float _2310 = (0.5 / (((_2039 * ((_2273 * _2300) + _2259)) + 9.9999999392252902907785028219223e-09) + (((_2039 * _2300) + _2259) * _2273))) * _2273;
        float _4340 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
        float _2312 = (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_2282 / ((_2286 * _2286) * 3.141590118408203125));
        float _2313 = isnan(1.0) ? _1889 : (isnan(_1889) ? 1.0 : min(_1889, 1.0));
        _2234 = (((((_2293 * _2061) + _788) * cbLight._m0[_2244].x) * _2312) * _2313) + _2170;
        _2236 = (((((_2293 * _2063) + _790) * cbLight._m0[_2244].y) * _2312) * _2313) + _2171;
        _2238 = (((((_2293 * _2064) + _791) * cbLight._m0[_2244].z) * _2312) * _2313) + _2172;
    }
    float _2348;
    float _2350;
    float _2352;
    if (_1965)
    {
        _2348 = _2234;
        _2350 = _2236;
        _2352 = _2238;
    }
    else
    {
        uint _2359 = _1874 + 3u;
        uint _2363 = _1874 + 11u;
        float _2377 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2359].w)) * _628) * 0.949999988079071044921875);
        float _2378 = _2377 * _2377;
        float _2379 = cbLight._m0[_2359].x + _709;
        float _2380 = cbLight._m0[_2359].y + _710;
        float _2381 = cbLight._m0[_2359].z + _711;
        float _2385 = inversesqrt(dot(vec3(_2379, _2380, _2381), vec3(_2379, _2380, _2381)));
        float _2386 = _2385 * _2379;
        float _2387 = _2385 * _2380;
        float _2388 = _2385 * _2381;
        float _2389 = dot(vec3(_625, _626, _627), vec3(cbLight._m0[_2359].xyz));
        float _4356 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2392 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _2393 = dot(vec3(_625, _626, _627), vec3(_2386, _2387, _2388));
        float _4367 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2396 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _2397 = dot(vec3(cbLight._m0[_2359].xyz), vec3(_2386, _2387, _2388));
        float _4378 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2401 = _2378 * _2378;
        float _2405 = ((_2396 * _2396) * (_2401 + (-1.0))) + 1.0;
        float _2412 = exp2(log2(1.0 - (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0)))) * 5.0);
        float _2419 = 1.0 - _2378;
        float _2429 = (0.5 / (((_2039 * ((_2392 * _2419) + _2378)) + 9.9999999392252902907785028219223e-09) + (((_2039 * _2419) + _2378) * _2392))) * _2392;
        float _4389 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2431 = (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (_2401 / ((_2405 * _2405) * 3.141590118408203125));
        float _2432 = isnan(1.0) ? _1890 : (isnan(_1890) ? 1.0 : min(_1890, 1.0));
        _2348 = (((((_2412 * _2061) + _788) * cbLight._m0[_2363].x) * _2431) * _2432) + _2234;
        _2350 = (((((_2412 * _2063) + _790) * cbLight._m0[_2363].y) * _2431) * _2432) + _2236;
        _2352 = (((((_2412 * _2064) + _791) * cbLight._m0[_2363].z) * _2431) * _2432) + _2238;
    }
    float _2567;
    float _2569;
    float _2571;
    float _2573;
    float _2575;
    float _2577;
    if (_1872.y == 0u)
    {
        float _2507 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2508 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2507;
        float _2509 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2507;
        float _2510 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2507;
        uvec4 _2522 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2523 = _2522.x;
        uint _2534 = uint((float(_2522.y) * floor(float(uint(cbSceneParam._m0[85u].y * _727) / _2523))) + floor(float(uint(cbSceneParam._m0[85u].x * _726) / _2523)));
        float _2544 = (log2(_2510 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2545 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        uint _2548 = uint(isnan(14.0) ? _2545 : (isnan(_2545) ? 14.0 : min(_2545, 14.0)));
        uvec4 _2553 = texelFetch(g_lightClusterGridBuffer, int(((_2548 << 2u) + (_2534 << 6u)) >> 2u));
        uint _2554 = _2553.x;
        uint _2555 = _2522.z;
        float _2655;
        float _2657;
        float _2659;
        float _2661;
        float _2663;
        float _2665;
        if (((((1u << ((_2555 >> 4u) & 15u)) + 4294967295u) & _2554) == 0u) || ((_2555 & 240u) == 0u))
        {
            _2655 = 0.0;
            _2657 = 0.0;
            _2659 = 0.0;
            _2661 = 0.0;
            _2663 = 0.0;
            _2665 = 0.0;
        }
        else
        {
            float _2656;
            float _2658;
            float _2660;
            float _2662;
            float _2664;
            float _2666;
            float _2808 = 0.0;
            float _2809 = 0.0;
            float _2810 = 0.0;
            float _2811 = 0.0;
            float _2812 = 0.0;
            float _2813 = 0.0;
            uint _2814 = 0u;
            uint _2823;
            bool _2824;
            for (;;)
            {
                _2823 = texelFetch(g_lightClassification, int((((_2548 << 5u) + (_2534 << 9u)) + (_2814 << 2u)) >> 2u)).x;
                _2824 = _2823 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2824)
                {
                    frontier_phi_68_pred = _2808;
                    frontier_phi_68_pred_1 = _2813;
                    frontier_phi_68_pred_2 = _2812;
                    frontier_phi_68_pred_3 = _2811;
                    frontier_phi_68_pred_4 = _2810;
                    frontier_phi_68_pred_5 = _2809;
                }
                else
                {
                    float _2953;
                    float _2954;
                    float _2955;
                    float _2956;
                    float _2957;
                    float _2958;
                    uint _2959;
                    _2953 = _2808;
                    _2954 = _2809;
                    _2955 = _2810;
                    _2956 = _2811;
                    _2957 = _2812;
                    _2958 = _2813;
                    _2959 = _2823;
                    float _2880;
                    float _2881;
                    float _2882;
                    float _2883;
                    float _2884;
                    float _2885;
                    for (;;)
                    {
                        uint _2963 = uint(findLSB(_2959)) + (_2814 << 5u);
                        uint _2960 = (_2959 + 4294967295u) & _2959;
                        uint _2965 = _2963 * 48u;
                        vec4 _2979 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2965)).x, texelFetch(g_PointLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2965 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2965 + 3u)).x));
                        uint _2985 = (_2963 * 48u) + 4u;
                        vec4 _2998 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2985)).x, texelFetch(g_PointLightRenderingBuffer, int(_2985 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2985 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2985 + 3u)).x));
                        uint _3004 = (_2963 * 48u) + 8u;
                        vec3 _3015 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3004)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 2u)).x));
                        float _3019 = _2979.x - _2508;
                        float _3020 = _2979.y - _2509;
                        float _3021 = _2979.z - _2510;
                        float _3022 = dot(vec3(_3019, _3020, _3021), vec3(_3019, _3020, _3021));
                        float _3025 = inversesqrt(_3022);
                        float _3026 = _3025 * _3019;
                        float _3027 = _3025 * _3020;
                        float _3028 = _3025 * _3021;
                        float _3029 = dot(vec3(_745, _748, _751), vec3(_3026, _3027, _3028));
                        float _3034 = 1.0 - (_3022 * _2979.w);
                        float _4415 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                        float _3035 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
                        float _3036 = sqrt(_3022) * _2998.w;
                        float _3039 = 1.39999997615814208984375 / (_3036 + 1.39999997615814208984375);
                        float _3040 = _3039 * _3039;
                        float _3043 = ((1.0 - _3040) * _3029) + _3040;
                        float _3046 = _3036 * _3036;
                        float _3050 = ((isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0))) * _3035) / ((_3046 * 0.699999988079071044921875) + 1.0);
                        float _3054 = (-0.0) - _2508;
                        float _3055 = (-0.0) - _2509;
                        float _3056 = (-0.0) - _2510;
                        float _3060 = inversesqrt(dot(vec3(_3054, _3055, _3056), vec3(_3054, _3055, _3056)));
                        float _3061 = _3060 * _3054;
                        float _3062 = _3060 * _3055;
                        float _3063 = _3060 * _3056;
                        float _3071 = exp2(log2(1.0 / ((_3046 * 3.5) + 5.0)) * 0.25);
                        float _3072 = 1.0 - _820;
                        float _3079 = sqrt(1.0 - ((1.0 - (_3072 * _3072)) * (1.0 - (_3071 * _3071))));
                        float _3080 = _3079 * _3079;
                        float _3081 = _3080 * _3080;
                        float _3082 = _3061 + _3026;
                        float _3083 = _3062 + _3027;
                        float _3084 = _3063 + _3028;
                        float _3088 = inversesqrt(dot(vec3(_3082, _3083, _3084), vec3(_3082, _3083, _3084)));
                        float _3092 = dot(vec3(_745, _748, _751), vec3(_3061, _3062, _3063));
                        float _4431 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                        float _3095 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
                        float _3096 = dot(vec3(_745, _748, _751), vec3(_3088 * _3082, _3088 * _3083, _3088 * _3084));
                        float _4442 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
                        float _3099 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
                        float _3103 = ((_3099 * _3099) * (_3081 + (-1.0))) + 1.0;
                        float _3104 = _3039 * _3080;
                        float _3105 = _3104 * _3104;
                        float _3108 = ((1.0 - _3105) * _3029) + _3105;
                        float _4453 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                        float _3109 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
                        float _3110 = 1.0 - _3080;
                        float _3120 = (0.5 / (((_3109 * ((_3095 * _3110) + _3080)) + 9.9999999392252902907785028219223e-09) + (((_3109 * _3110) + _3080) * _3095))) * _3109;
                        float _4464 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                        float _3131 = (((_3081 * 3.1415927410125732421875) * (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0)))) / ((_3103 * _3103) * ((_3046 * 2.1991131305694580078125) + 3.141590118408203125))) * _3035;
                        _2883 = (_3050 * _2998.x) + _2956;
                        _2884 = (_3050 * _2998.y) + _2957;
                        _2885 = (_3050 * _2998.z) + _2958;
                        _2880 = (_3131 * _3015.x) + _2953;
                        _2881 = (_3131 * _3015.y) + _2954;
                        _2882 = (_3131 * _3015.z) + _2955;
                        if (_2960 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2953 = _2880;
                            _2954 = _2881;
                            _2955 = _2882;
                            _2956 = _2883;
                            _2957 = _2884;
                            _2958 = _2885;
                            _2959 = _2960;
                        }
                    }
                    frontier_phi_68_pred = _2880;
                    frontier_phi_68_pred_1 = _2885;
                    frontier_phi_68_pred_2 = _2884;
                    frontier_phi_68_pred_3 = _2883;
                    frontier_phi_68_pred_4 = _2882;
                    frontier_phi_68_pred_5 = _2881;
                }
                _2656 = frontier_phi_68_pred;
                _2666 = frontier_phi_68_pred_1;
                _2664 = frontier_phi_68_pred_2;
                _2662 = frontier_phi_68_pred_3;
                _2660 = frontier_phi_68_pred_4;
                _2658 = frontier_phi_68_pred_5;
                uint _2815 = _2814 + 1u;
                if (_2815 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2808 = _2656;
                    _2809 = _2658;
                    _2810 = _2660;
                    _2811 = _2662;
                    _2812 = _2664;
                    _2813 = _2666;
                    _2814 = _2815;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2655 = _2656;
            _2657 = _2658;
            _2659 = _2660;
            _2661 = _2662;
            _2663 = _2664;
            _2665 = _2666;
        }
        uvec4 _2669 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2670 = _2669.z;
        uint _2672 = (_2670 >> 8u) & 15u;
        float _2776;
        float _2778;
        float _2780;
        float _2782;
        float _2784;
        float _2786;
        if (((4294967295u << _2672) & _2554) == 0u)
        {
            _2776 = _2655;
            _2778 = _2657;
            _2780 = _2659;
            _2782 = _2661;
            _2784 = _2663;
            _2786 = _2665;
        }
        else
        {
            float _2801 = inversesqrt(dot(vec3(_2508, _2509, _2510), vec3(_2508, _2509, _2510)));
            float _2802 = _2801 * _2508;
            float _2803 = _2801 * _2509;
            float _2804 = _2801 * _2510;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2672 < ((_2670 >> 12u) & 15u))
            {
                float _2777;
                float _2779;
                float _2781;
                float _2783;
                float _2785;
                float _2787;
                float _2936 = _2655;
                float _2937 = _2657;
                float _2938 = _2659;
                float _2939 = _2661;
                float _2940 = _2663;
                float _2941 = _2665;
                uint _2942 = _2672;
                uint _2951;
                bool _2952;
                for (;;)
                {
                    _2951 = texelFetch(g_lightClassification, int((((_2548 << 5u) + (_2534 << 9u)) + (_2942 << 2u)) >> 2u)).x;
                    _2952 = _2951 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2952)
                    {
                        frontier_phi_79_pred = _2941;
                        frontier_phi_79_pred_1 = _2940;
                        frontier_phi_79_pred_2 = _2939;
                        frontier_phi_79_pred_3 = _2938;
                        frontier_phi_79_pred_4 = _2937;
                        frontier_phi_79_pred_5 = _2936;
                    }
                    else
                    {
                        float _3145;
                        float _3146;
                        float _3147;
                        float _3148;
                        float _3149;
                        float _3150;
                        float _3438;
                        float _3439;
                        float _3440;
                        float _3441;
                        float _3442;
                        float _3443;
                        float _3158 = _2936;
                        float _3159 = _2937;
                        float _3160 = _2938;
                        float _3161 = _2939;
                        float _3162 = _2940;
                        float _3163 = _2941;
                        uint _3164 = _2951;
                        uint _3165;
                        vec4 _3190;
                        float _3191;
                        vec4 _3206;
                        vec3 _3218;
                        vec4 _3233;
                        vec4 _3248;
                        float _3294;
                        bool _3295;
                        for (;;)
                        {
                            uint _3175 = ((_2942 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3164));
                            _3165 = (_3164 + 4294967295u) & _3164;
                            uint _3177 = _3175 * 40u;
                            _3190 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3177)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 3u)).x));
                            _3191 = _3190.w;
                            uint _3193 = (_3175 * 40u) + 4u;
                            _3206 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3193)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 3u)).x));
                            uint _3208 = (_3175 * 40u) + 8u;
                            _3218 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3208)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 2u)).x));
                            uint _3220 = (_3175 * 40u) + 16u;
                            _3233 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3220)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 3u)).x));
                            uint _3235 = (_3175 * 40u) + 20u;
                            _3248 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3235)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 3u)).x));
                            uint _3250 = (_3175 * 40u) + 24u;
                            vec4 _3263 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3250)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 3u)).x));
                            uint _3269 = (_3175 * 40u) + 28u;
                            vec4 _3282 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 3u)).x));
                            _3294 = fma(_2510, _3282.z, fma(_2509, _3282.y, _3282.x * _2508)) + _3282.w;
                            _3295 = !((fma(_2510, _3263.z, fma(_2509, _3263.y, _3263.x * _2508)) + _3263.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3295)
                            {
                                float _3322 = _3190.x - _2508;
                                float _3323 = _3190.y - _2509;
                                float _3324 = _3190.z - _2510;
                                float _3325 = dot(vec3(_3322, _3323, _3324), vec3(_3322, _3323, _3324));
                                float _3328 = inversesqrt(_3325);
                                float _3329 = _3328 * _3322;
                                float _3330 = _3328 * _3323;
                                float _3331 = _3328 * _3324;
                                float _3335 = 1.0 - (_3325 / (_3191 * _3191));
                                float _4475 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                                float _3336 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
                                float _3340 = sqrt(_3325) * _3206.w;
                                float _3342 = 1.39999997615814208984375 / (_3340 + 1.39999997615814208984375);
                                float _3343 = _3342 * _3342;
                                float _3346 = ((1.0 - _3343) * dot(vec3(_3329, _3330, _3331), vec3(_745, _748, _751))) + _3343;
                                float _3349 = _3340 * _3340;
                                float _3353 = (fma(_2510, _3233.z, fma(_2509, _3233.y, _3233.x * _2508)) + _3233.w) / _3294;
                                float _3354 = (fma(_2510, _3248.z, fma(_2509, _3248.y, _3248.x * _2508)) + _3248.w) / _3294;
                                float _3358 = 1.0 - dot(vec2(_3353, _3354), vec2(_3353, _3354));
                                float _4491 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                                float _3359 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
                                float _3360 = _3359 * (((isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0))) * _3336) / ((_3349 * 0.699999988079071044921875) + 1.0));
                                float _3372 = exp2(log2(1.0 / ((_3349 * 3.5) + 5.0)) * 0.25);
                                float _3373 = 1.0 - _820;
                                float _3380 = sqrt(1.0 - ((1.0 - (_3373 * _3373)) * (1.0 - (_3372 * _3372))));
                                float _3381 = _3380 * _3380;
                                float _3382 = _3381 * _3381;
                                float _3383 = _3329 - _2802;
                                float _3384 = _3330 - _2803;
                                float _3385 = _3331 - _2804;
                                float _3389 = inversesqrt(dot(vec3(_3383, _3384, _3385), vec3(_3383, _3384, _3385)));
                                float _3393 = dot(vec3(_745, _748, _751), vec3((-0.0) - _2802, (-0.0) - _2803, (-0.0) - _2804));
                                float _4502 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                                float _3396 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
                                float _3397 = dot(vec3(_745, _748, _751), vec3(_3389 * _3383, _3389 * _3384, _3389 * _3385));
                                float _4513 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                                float _3400 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                                float _3404 = ((_3400 * _3400) * (_3382 + (-1.0))) + 1.0;
                                float _3405 = _3342 * _3381;
                                float _3406 = _3405 * _3405;
                                float _3412 = ((1.0 - _3406) * dot(vec3(_745, _748, _751), vec3(_3329, _3330, _3331))) + _3406;
                                float _4524 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                                float _3413 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                                float _3414 = 1.0 - _3381;
                                float _3424 = (0.5 / (((_3413 * ((_3396 * _3414) + _3381)) + 9.9999999392252902907785028219223e-09) + (((_3413 * _3414) + _3381) * _3396))) * _3413;
                                float _4535 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                                float _3434 = (_3359 * _3336) * (((_3382 * 3.1415927410125732421875) * (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0)))) / ((_3404 * _3404) * ((_3349 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3360 * _3206.y;
                                frontier_phi_85_pred_1 = _3360 * _3206.x;
                                frontier_phi_85_pred_2 = _3434 * _3218.z;
                                frontier_phi_85_pred_3 = _3434 * _3218.y;
                                frontier_phi_85_pred_4 = _3434 * _3218.x;
                                frontier_phi_85_pred_5 = _3360 * _3206.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3442 = frontier_phi_85_pred;
                            _3441 = frontier_phi_85_pred_1;
                            _3440 = frontier_phi_85_pred_2;
                            _3439 = frontier_phi_85_pred_3;
                            _3438 = frontier_phi_85_pred_4;
                            _3443 = frontier_phi_85_pred_5;
                            _3148 = _3441 + _3161;
                            _3149 = _3442 + _3162;
                            _3150 = _3443 + _3163;
                            _3145 = _3438 + _3158;
                            _3146 = _3439 + _3159;
                            _3147 = _3440 + _3160;
                            if (_3165 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3158 = _3145;
                                _3159 = _3146;
                                _3160 = _3147;
                                _3161 = _3148;
                                _3162 = _3149;
                                _3163 = _3150;
                                _3164 = _3165;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3150;
                        frontier_phi_79_pred_1 = _3149;
                        frontier_phi_79_pred_2 = _3148;
                        frontier_phi_79_pred_3 = _3147;
                        frontier_phi_79_pred_4 = _3146;
                        frontier_phi_79_pred_5 = _3145;
                    }
                    _2787 = frontier_phi_79_pred;
                    _2785 = frontier_phi_79_pred_1;
                    _2783 = frontier_phi_79_pred_2;
                    _2781 = frontier_phi_79_pred_3;
                    _2779 = frontier_phi_79_pred_4;
                    _2777 = frontier_phi_79_pred_5;
                    uint _2943 = _2942 + 1u;
                    if (_2943 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2936 = _2777;
                        _2937 = _2779;
                        _2938 = _2781;
                        _2939 = _2783;
                        _2940 = _2785;
                        _2941 = _2787;
                        _2942 = _2943;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2781;
                frontier_phi_60_61_ladder_1 = _2787;
                frontier_phi_60_61_ladder_2 = _2785;
                frontier_phi_60_61_ladder_3 = _2783;
                frontier_phi_60_61_ladder_4 = _2779;
                frontier_phi_60_61_ladder_5 = _2777;
            }
            else
            {
                frontier_phi_60_61_ladder = _2659;
                frontier_phi_60_61_ladder_1 = _2665;
                frontier_phi_60_61_ladder_2 = _2663;
                frontier_phi_60_61_ladder_3 = _2661;
                frontier_phi_60_61_ladder_4 = _2657;
                frontier_phi_60_61_ladder_5 = _2655;
            }
            _2776 = frontier_phi_60_61_ladder_5;
            _2778 = frontier_phi_60_61_ladder_4;
            _2780 = frontier_phi_60_61_ladder;
            _2782 = frontier_phi_60_61_ladder_3;
            _2784 = frontier_phi_60_61_ladder_2;
            _2786 = frontier_phi_60_61_ladder_1;
        }
        float _2791 = isnan(1.0) ? _804 : (isnan(_804) ? 1.0 : min(_804, 1.0));
        _2567 = (_2791 * _2782) + _2003;
        _2569 = (_2791 * _2784) + _2005;
        _2571 = (_2791 * _2786) + _2007;
        _2573 = ((_2776 * _788) * _2791) + _2348;
        _2575 = ((_2778 * _790) * _2791) + _2350;
        _2577 = ((_2780 * _791) * _2791) + _2352;
    }
    else
    {
        _2567 = _2003;
        _2569 = _2005;
        _2571 = _2007;
        _2573 = _2348;
        _2575 = _2350;
        _2577 = _2352;
    }
    float _4551 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _4562 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _4573 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _2594 = ((isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0))) * (_2567 + ((isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))) * _804))) + ((_2573 + ((isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0))) * _1639)) * cbPerFrame._m0[3u].x);
    float _2595 = ((isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (_2569 + ((isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))) * _804))) + ((_2575 + ((isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0))) * _1639)) * cbPerFrame._m0[3u].x);
    float _2596 = ((isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (_2571 + ((isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))) * _804))) + ((_2577 + ((isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0))) * _1639)) * cbPerFrame._m0[3u].x);
    uint _2597 = _264 + 6u;
    float _2605 = _726 / cbSceneParam._m0[86u].x;
    float _2606 = _727 / cbSceneParam._m0[86u].y;
    vec4 _2620 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2605, _2606, (log2((isnan(cbSceneParam._m0[77u].w) ? _651 : (isnan(_651) ? cbSceneParam._m0[77u].w : min(_651, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2622 = _2620.x;
    float _2623 = _2620.y;
    float _2624 = _2620.z;
    float _2625 = _2620.w;
    float _2718;
    float _2720;
    float _2722;
    float _2724;
    if (_651 > cbSceneParam._m0[78u].w)
    {
        float _2680 = isnan(_651) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _651 : min(cbSceneParam._m0[80u].w, _651));
        float _2681 = _2680 / _651;
        float _2692 = _2681 * _702;
        float _2693 = _703 * _2681;
        float _2694 = (-0.0) - _2693;
        float _2696 = _2681 * _704;
        float _2698 = (cbSceneParam._m0[77u].w * _2694) / _2680;
        float _2699 = _2698 + cbSceneParam._m0[79u].w;
        float _2700 = cbSceneParam._m0[79u].w - _2693;
        float _2706 = sqrt(((_2692 * _2692) + (_2693 * _2693)) + (_2696 * _2696));
        float _2709 = (1.0 - (cbSceneParam._m0[77u].w / _2680)) * _2706;
        float _2714 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2716 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2893;
        if (abs((_2694 - _2698) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2893 = ((((_2699 > 0.0) ? exp2(_2714 * _2699) : (2.0 - exp2(_2716 * _2699))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2709;
        }
        else
        {
            float _2837 = 1.0 / cbSceneParam._m0[80u].x;
            float _2838 = isnan(_2700) ? _2699 : (isnan(_2699) ? _2700 : max(_2699, _2700));
            float _2839 = isnan(_2700) ? _2699 : (isnan(_2699) ? _2700 : min(_2699, _2700));
            float _2848 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : min(_2838, 0.0));
            float _2849 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : min(_2839, 0.0));
            _2893 = ((abs(_2706 / _2694) * cbSceneParam._m0[80u].y) * ((((_2848 - _2849) * 2.0) - ((exp2(_2714 * (isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0)))) - exp2(_2714 * (isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0))))) * _2837)) - ((exp2(_2716 * _2848) - exp2(_2716 * _2849)) * _2837))) + (_2709 * cbSceneParam._m0[80u].z);
        }
        vec4 _2895 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2605, _2606, 1.0), 0.0);
        float _2904 = exp2((_2893 * (-1.44269502162933349609375)) * (1.0 - _2895.w));
        float _2905 = log2(_2904);
        float _2921 = log2(_2625);
        _2718 = (exp2(_2921 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2905 * cbSceneParam._m0[78u].x)) * _2895.x) / cbSceneParam._m0[78u].x)) + _2622;
        _2720 = (exp2(_2921 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2905 * cbSceneParam._m0[78u].y)) * _2895.y) / cbSceneParam._m0[78u].y)) + _2623;
        _2722 = (exp2(_2921 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2905 * cbSceneParam._m0[78u].z)) * _2895.z) / cbSceneParam._m0[78u].z)) + _2624;
        _2724 = _2904 * _2625;
    }
    else
    {
        _2718 = _2622;
        _2720 = _2623;
        _2722 = _2624;
        _2724 = _2625;
    }
    bool _2931;
    vec4 _2734;
    vec4 _2756;
    float _2758;
    float _2762;
    float _2763;
    float _2764;
    float _2765;
    bool _2775;
    for (;;)
    {
        _2734 = cbMatDynParam._m0[0u];
        float _2736 = roundEven(_2734.y);
        bool _2737 = _2736 == 3.0;
        float _2738 = log2(_2724);
        float _2745 = exp2(_2738 * cbSceneParam._m0[78u].x) * _2594;
        float _2746 = exp2(_2738 * cbSceneParam._m0[78u].y) * _2595;
        float _2747 = exp2(_2738 * cbSceneParam._m0[78u].z) * _2596;
        float _2754 = _715 + (-0.5);
        _2756 = cbMtdParam._m0[1u];
        _2758 = _2756.y * _2754;
        float _2761 = (_2736 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2762 = _2761 * (_2737 ? _2745 : (_2745 + (cbSceneParam._m0[72u].w * _2718)));
        _2763 = _2761 * (_2737 ? _2746 : (_2746 + (cbSceneParam._m0[72u].w * _2720)));
        _2764 = _2761 * (_2737 ? _2747 : (_2747 + (cbSceneParam._m0[72u].w * _2722)));
        _2765 = _2754 * 0.999000012874603271484375;
        _2775 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2775)
        {
            if ((cbInstanceData._m0[_264 + 7u].x + _2765) < 0.5)
            {
                _2931 = true;
                break;
            }
        }
        uint _2872 = _764 + uint(_2734.w);
        if ((cbInstanceData._m0[_2872].w < 1.0) && ((cbInstanceData._m0[_2872].w + _2765) < 0.5))
        {
            _2931 = true;
            break;
        }
        if ((_2758 + 1.0) < _2756.x)
        {
            _2931 = true;
            break;
        }
        _2931 = false;
        break;
    }
    float _3136;
    if (_2931)
    {
        discard_state = true;
        _3136 = 0.0;
    }
    else
    {
        _3136 = cbInstanceData._m0[_2597].w;
    }
    SV_Target.x = _2762;
    SV_Target.y = _2763;
    SV_Target.z = _2764;
    SV_Target.w = _3136;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2597].w;
    discard_exit();
}


