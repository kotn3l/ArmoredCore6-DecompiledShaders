#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _973;
float _3383;
float _3384;
float _3385;
float _3386;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _226 = uint(roundEven(NORMAL.w)) * 13u;
    uint _232 = _226 + 1u;
    uint _236 = _226 + 2u;
    float _245 = sqrt(((cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x) + (cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x)) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x));
    vec4 _266 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _272 = _266.x * cbMtdParam._m0[9u].x;
    float _273 = _266.y * cbMtdParam._m0[9u].y;
    float _274 = _266.z * cbMtdParam._m0[9u].z;
    vec4 _287 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_3, SS_BumpMap), vec2(((_245 * TEXCOORD.z) * cbTextureTilingScale._m0[20u].x) + cbTextureTilingScale._m0[20u].z, ((_245 * TEXCOORD.w) * cbTextureTilingScale._m0[20u].y) + cbTextureTilingScale._m0[20u].w));
    vec4 _313 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _317 = _313.z;
    float _321 = (_313.x * 2.0) + (-1.0);
    float _322 = (_313.y * 2.0) + (-1.0);
    float _323 = dot(vec2(_321, _322), vec2(_321, _322));
    float _3395 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _329 = sqrt(1.0 - (isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0))));
    float _334 = _321 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_287.x * 2.0) + (-1.0)));
    float _335 = _322 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_287.y * 2.0) + (-1.0)));
    vec4 _348 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _350 = _348.x;
    float _355 = (((_287.z - _317) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _317;
    float _360 = cbMtdParam._m0[22u].x + _313.w;
    float _364 = gl_FragCoord.x * 0.125;
    float _366 = gl_FragCoord.y * 0.125;
    float _377 = fma(_329, _213 * NORMAL.x, fma(_335, _220 * TANGENT.x, (_206 * _198) * _334));
    float _380 = fma(_329, _213 * NORMAL.y, fma(_335, _220 * TANGENT.y, (_206 * _199) * _334));
    float _383 = fma(_329, _213 * NORMAL.z, fma(_335, _220 * TANGENT.z, (_206 * _200) * _334));
    float _387 = inversesqrt(dot(vec3(_377, _380, _383), vec3(_377, _380, _383)));
    float _388 = _387 * _377;
    float _389 = _387 * _380;
    float _390 = _387 * _383;
    float _3406 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _391 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
    float _3417 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _3428 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3439 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _3450 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3461 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _396 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_364, _366)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _414 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _456 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _466 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _456);
    float _467 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _456);
    float _468 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _456);
    float _472 = inversesqrt(dot(vec3(_466, _467, _468), vec3(_466, _467, _468)));
    float _473 = _466 * _472;
    float _474 = _467 * _472;
    float _475 = _468 * _472;
    vec4 _477 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_364, _366));
    float _479 = _477.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _654 = sqrt(((_466 * _466) + (_467 * _467)) + (_468 * _468));
        float _660 = (cbMatDynParam._m0[5u].x * _654) + cbMatDynParam._m0[5u].y;
        float _3472 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
        float _661 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
        float _665 = (cbMatDynParam._m0[5u].z * _654) + cbMatDynParam._m0[5u].w;
        float _3483 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0))) - _661)) + _661) < ((_479 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _491 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _492 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _512 = fma(_390, cbSceneParam._m0[5u].z, fma(_389, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _388));
    float _515 = fma(_390, cbSceneParam._m0[6u].z, fma(_389, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _388));
    float _518 = fma(_390, cbSceneParam._m0[7u].z, fma(_389, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _388));
    uint _531 = _226 + 9u;
    uint _532 = _531 + uint(cbMatDynParam._m0[0u].w);
    float _538 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0)))) * cbInstanceData._m0[_532].x;
    float _539 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0)))) * cbInstanceData._m0[_532].y;
    float _540 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0)))) * cbInstanceData._m0[_532].z;
    float _3494 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _541 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
    float _3505 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _542 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
    float _3516 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _543 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
    float _544 = 1.0 - _396;
    float _545 = _541 * _544;
    float _546 = _542 * _544;
    float _547 = _543 * _544;
    float _552 = (_541 + (-0.039999999105930328369140625)) * _396;
    float _553 = (_542 + (-0.039999999105930328369140625)) * _396;
    float _554 = (_543 + (-0.039999999105930328369140625)) * _396;
    float _555 = _552 + 0.039999999105930328369140625;
    float _557 = _553 + 0.039999999105930328369140625;
    float _558 = _554 + 0.039999999105930328369140625;
    vec4 _567 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _491, cbSceneParam._m0[86u].y * _492));
    float _571 = ((isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0))) * TEXCOORD_5.w) * _567.x;
    float _572 = dot(vec3(_388, _389, _390), vec3(_473, _474, _475));
    float _575 = _572 * 2.0;
    float _579 = (_575 * _388) - _473;
    float _580 = (_575 * _389) - _474;
    float _581 = (_575 * _390) - _475;
    float _585 = abs(dot(vec3(_473, _474, _475), vec3(_388, _389, _390)));
    float _3527 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _587 = sqrt(_391);
    float _600 = exp2((_587 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_587 * 3.0));
    float _606 = (1.0 - _600) * ((_587 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _607 = _600 * _587;
    float _635 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _639 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _643 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _972;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _697 = fma(_643, cbModelParam._m0[26u].z, fma(_639, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _635));
        float _701 = fma(_643, cbModelParam._m0[27u].z, fma(_639, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _635));
        float _705 = fma(_643, cbModelParam._m0[28u].z, fma(_639, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _635));
        float _730 = _635 + _388;
        float _731 = _639 + _389;
        float _732 = _643 + _390;
        float _742 = fma(_732, cbModelParam._m0[26u].z, fma(_731, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _730)) - _697;
        float _743 = fma(_732, cbModelParam._m0[27u].z, fma(_731, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _730)) - _701;
        float _744 = fma(_732, cbModelParam._m0[28u].z, fma(_731, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _730)) - _705;
        float _748 = inversesqrt(dot(vec3(_742, _743, _744), vec3(_742, _743, _744)));
        float _761 = ((_748 * _742) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_697 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _762 = ((_748 * _743) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_701 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _763 = ((_748 * _744) / cbModelParam._m0[34u].z) + ((((((_705 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _766 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_761, _762, _763), 0.0);
        vec4 _773 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_761, _762, _763), 0.0);
        vec4 _780 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_761, _762, _763), 0.0);
        vec4 _787 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_761, _762, _763), 0.0);
        float _800 = exp2((_766.w + (-0.5)) * 20.0) * 2.0;
        float _801 = _800 * (_766.x + (-0.5));
        float _802 = _800 * (_766.y + (-0.5));
        float _803 = _800 * (_766.z + (-0.5));
        float _810 = exp2((_773.w + (-0.5)) * 20.0) * 2.0;
        float _811 = _810 * (_773.x + (-0.5));
        float _812 = _810 * (_773.y + (-0.5));
        float _813 = _810 * (_773.z + (-0.5));
        float _820 = exp2((_780.w + (-0.5)) * 20.0) * 2.0;
        float _821 = _820 * (_780.x + (-0.5));
        float _822 = _820 * (_780.y + (-0.5));
        float _823 = _820 * (_780.z + (-0.5));
        float _830 = exp2((_787.w + (-0.5)) * 20.0) * 2.0;
        float _831 = _830 * (_787.x + (-0.5));
        float _832 = _830 * (_787.y + (-0.5));
        float _833 = _830 * (_787.z + (-0.5));
        float _834 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _835 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _836 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _837 = _801 * 0.5;
        float _838 = _811 * 0.5;
        float _839 = _821 * 0.5;
        float _840 = dot(vec3(_837, _838, _839), vec3(_837, _838, _839));
        float _845 = (_840 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_840);
        float _854 = (dot(vec3(_388, _389, _390), vec3(_845 * _837, _845 * _838, _845 * _839)) + 1.0) * 0.5;
        float _3553 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _864 = sqrt(((_838 * _838) + (_837 * _837)) + (_839 * _839)) / (_834 + 9.9999997473787516355514526367188e-06);
        float _3564 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _865 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
        float _866 = _865 * 2.0;
        float _870 = (1.0 - _865) / (_865 + 1.0);
        float _3575 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _871 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
        float _880 = ((((1.0 - _871) * (_866 + 2.0)) * exp2(log2(isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0))) * (_866 + 1.0))) + _871) * _834;
        float _881 = _802 * 0.5;
        float _882 = _812 * 0.5;
        float _883 = _822 * 0.5;
        float _884 = dot(vec3(_881, _882, _883), vec3(_881, _882, _883));
        float _889 = (_884 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_884);
        float _897 = (dot(vec3(_388, _389, _390), vec3(_889 * _881, _889 * _882, _889 * _883)) + 1.0) * 0.5;
        float _3586 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _906 = sqrt(((_882 * _882) + (_881 * _881)) + (_883 * _883)) / (_835 + 9.9999997473787516355514526367188e-06);
        float _3597 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _907 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
        float _908 = _907 * 2.0;
        float _912 = (1.0 - _907) / (_907 + 1.0);
        float _3608 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _913 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _922 = ((((1.0 - _913) * (_908 + 2.0)) * exp2(log2(isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0))) * (_908 + 1.0))) + _913) * _835;
        float _923 = _803 * 0.5;
        float _924 = _813 * 0.5;
        float _925 = _823 * 0.5;
        float _926 = dot(vec3(_923, _924, _925), vec3(_923, _924, _925));
        float _931 = (_926 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_926);
        float _939 = (dot(vec3(_388, _389, _390), vec3(_931 * _923, _931 * _924, _931 * _925)) + 1.0) * 0.5;
        float _3619 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _948 = sqrt(((_924 * _924) + (_923 * _923)) + (_925 * _925)) / (_836 + 9.9999997473787516355514526367188e-06);
        float _3630 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
        float _950 = _949 * 2.0;
        float _954 = (1.0 - _949) / (_949 + 1.0);
        float _3641 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _955 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
        float _964 = ((((1.0 - _955) * (_950 + 2.0)) * exp2(log2(isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0))) * (_950 + 1.0))) + _955) * _836;
        _972 = _803;
        _974 = _802;
        _975 = _801;
        _976 = _813;
        _977 = _812;
        _978 = _811;
        _979 = _823;
        _980 = _822;
        _981 = _821;
        _982 = _836;
        _983 = _835;
        _984 = _834;
        _985 = cbModelParam._m0[36u].z * (isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0)));
        _986 = cbModelParam._m0[36u].z * (isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0)));
        _987 = cbModelParam._m0[36u].z * (isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0)));
    }
    else
    {
        _972 = _973;
        _974 = _973;
        _975 = _973;
        _976 = _973;
        _977 = _973;
        _978 = _973;
        _979 = _973;
        _980 = _973;
        _981 = _973;
        _982 = _973;
        _983 = _973;
        _984 = _973;
        _985 = 0.0;
        _986 = 0.0;
        _987 = 0.0;
    }
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1012 = fma(_643, cbModelParam._m0[30u].z, fma(_639, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _635));
        float _1016 = fma(_643, cbModelParam._m0[31u].z, fma(_639, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _635));
        float _1020 = fma(_643, cbModelParam._m0[32u].z, fma(_639, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _635));
        float _1043 = _635 + _388;
        float _1044 = _639 + _389;
        float _1045 = _643 + _390;
        float _1055 = fma(_1045, cbModelParam._m0[30u].z, fma(_1044, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1043)) - _1012;
        float _1056 = fma(_1045, cbModelParam._m0[31u].z, fma(_1044, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1043)) - _1016;
        float _1057 = fma(_1045, cbModelParam._m0[32u].z, fma(_1044, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1043)) - _1020;
        float _1061 = inversesqrt(dot(vec3(_1055, _1056, _1057), vec3(_1055, _1056, _1057)));
        float _1074 = ((_1061 * _1055) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1012 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1075 = ((_1061 * _1056) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1016 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1076 = ((_1061 * _1057) / cbModelParam._m0[35u].z) + ((((((_1020 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        vec4 _1085 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        float _1111 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1078.x + (-0.5));
        float _1113 = _1111 * (_1078.y + (-0.5));
        float _1114 = _1111 * (_1078.z + (-0.5));
        float _1121 = exp2((_1085.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1085.x + (-0.5));
        float _1123 = _1121 * (_1085.y + (-0.5));
        float _1124 = _1121 * (_1085.z + (-0.5));
        float _1131 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1092.x + (-0.5));
        float _1133 = _1131 * (_1092.y + (-0.5));
        float _1134 = _1131 * (_1092.z + (-0.5));
        float _1141 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1099.x + (-0.5));
        float _1143 = _1141 * (_1099.y + (-0.5));
        float _1144 = _1141 * (_1099.z + (-0.5));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1148 = _1112 * 0.5;
        float _1149 = _1122 * 0.5;
        float _1150 = _1132 * 0.5;
        float _1151 = dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150));
        float _1156 = (_1151 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1151);
        float _1164 = (dot(vec3(_388, _389, _390), vec3(_1156 * _1148, _1156 * _1149, _1156 * _1150)) + 1.0) * 0.5;
        float _3682 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1173 = sqrt(((_1149 * _1149) + (_1148 * _1148)) + (_1150 * _1150)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _3693 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _1175 = _1174 * 2.0;
        float _1179 = (1.0 - _1174) / (_1174 + 1.0);
        float _3704 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
        float _1189 = ((((1.0 - _1180) * (_1175 + 2.0)) * exp2(log2(isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * (_1175 + 1.0))) + _1180) * _1145;
        float _1190 = _1113 * 0.5;
        float _1191 = _1123 * 0.5;
        float _1192 = _1133 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1206 = (dot(vec3(_388, _389, _390), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _3715 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1215 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1146 + 9.9999997473787516355514526367188e-06);
        float _3726 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _1217 = _1216 * 2.0;
        float _1221 = (1.0 - _1216) / (_1216 + 1.0);
        float _3737 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _1231 = ((((1.0 - _1222) * (_1217 + 2.0)) * exp2(log2(isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0))) * (_1217 + 1.0))) + _1222) * _1146;
        float _1232 = _1114 * 0.5;
        float _1233 = _1124 * 0.5;
        float _1234 = _1134 * 0.5;
        float _1235 = dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234));
        float _1240 = (_1235 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1235);
        float _1248 = (dot(vec3(_388, _389, _390), vec3(_1240 * _1232, _1240 * _1233, _1240 * _1234)) + 1.0) * 0.5;
        float _3748 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1257 = sqrt(((_1233 * _1233) + (_1232 * _1232)) + (_1234 * _1234)) / (_1147 + 9.9999997473787516355514526367188e-06);
        float _3759 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _1259 = _1258 * 2.0;
        float _1263 = (1.0 - _1258) / (_1258 + 1.0);
        float _3770 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1273 = ((((1.0 - _1264) * (_1259 + 2.0)) * exp2(log2(isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))) * (_1259 + 1.0))) + _1264) * _1147;
        _1281 = _1114;
        _1282 = _1113;
        _1283 = _1112;
        _1284 = _1124;
        _1285 = _1123;
        _1286 = _1122;
        _1287 = _1134;
        _1288 = _1133;
        _1289 = _1132;
        _1290 = _1147;
        _1291 = _1146;
        _1292 = _1145;
        _1293 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)));
        _1294 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)));
        _1295 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)));
    }
    else
    {
        _1281 = _973;
        _1282 = _973;
        _1283 = _973;
        _1284 = _973;
        _1285 = _973;
        _1286 = _973;
        _1287 = _973;
        _1288 = _973;
        _1289 = _973;
        _1290 = _973;
        _1291 = _973;
        _1292 = _973;
        _1293 = 0.0;
        _1294 = 0.0;
        _1295 = 0.0;
    }
    float _1305 = (cbModelParam._m0[1u].x * (_1293 - _985)) + _985;
    float _1306 = (cbModelParam._m0[1u].x * (_1294 - _986)) + _986;
    float _1307 = (cbModelParam._m0[1u].x * (_1295 - _987)) + _987;
    float _1328 = fma(_1307, cbSceneParam._m0[89u].z, fma(_1306, cbSceneParam._m0[89u].y, _1305 * cbSceneParam._m0[89u].x));
    float _1331 = fma(_1307, cbSceneParam._m0[90u].z, fma(_1306, cbSceneParam._m0[90u].y, _1305 * cbSceneParam._m0[90u].x));
    float _1334 = fma(_1307, cbSceneParam._m0[91u].z, fma(_1306, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1305));
    float _1349 = _579 * 0.5;
    float _1350 = _580 * 0.5;
    float _1351 = _581 * 0.5;
    float _1352 = dot(vec4(_1349, _1350, _1351, 1.0), vec4(_1283, _1286, _1289, _1292));
    float _1355 = dot(vec4(_1349, _1350, _1351, 1.0), vec4(_1282, _1285, _1288, _1291));
    float _1358 = dot(vec4(_1349, _1350, _1351, 1.0), vec4(_1281, _1284, _1287, _1290));
    float _1392;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1365 = dot(vec4(_1349, _1350, _1351, 1.0), vec4(_972, _976, _979, _982));
        float _1369 = dot(vec4(_1349, _1350, _1351, 1.0), vec4(_974, _977, _980, _983));
        float _1373 = dot(vec4(_1349, _1350, _1351, 1.0), vec4(_975, _978, _981, _984));
        float _1380 = dot(vec4(cbModelParam._m0[39u]), vec4(_1349, _1350, _1351, 1.0));
        _1392 = dot(vec3(isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)), isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)), isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1380) ? 0.0 : (isnan(0.0) ? _1380 : max(0.0, _1380))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1392 = 1.0;
    }
    float _1403;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1394 = dot(vec4(cbModelParam._m0[40u]), vec4(_1349, _1350, _1351, 1.0));
        _1403 = dot(vec3(isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)), isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)), isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1394) ? 0.0 : (isnan(0.0) ? _1394 : max(0.0, _1394))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1403 = 1.0;
    }
    float _1407 = (_1403 * cbModelParam._m0[1u].x) + (_1392 * (1.0 - cbModelParam._m0[1u].x));
    float _1417 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _391);
    float _1418 = isnan(_1417) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1417 : min(cbModelParam._m0[25u].z, _1417));
    float _1500;
    float _1502;
    float _1504;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1467 = fma(_643, cbModelParam._m0[13u].z, fma(_639, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _635)) + cbModelParam._m0[13u].w;
        float _1471 = fma(_643, cbModelParam._m0[14u].z, fma(_639, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _635)) + cbModelParam._m0[14u].w;
        float _1475 = fma(_643, cbModelParam._m0[15u].z, fma(_639, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _635)) + cbModelParam._m0[15u].w;
        float _1478 = fma(_581, cbModelParam._m0[13u].z, fma(_580, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _579));
        float _1481 = fma(_581, cbModelParam._m0[14u].z, fma(_580, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _579));
        float _1484 = fma(_581, cbModelParam._m0[15u].z, fma(_580, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _579));
        float _1512;
        if (_1478 > 0.0)
        {
            _1512 = abs((1.0 - _1467) / _1478);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1478 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1467 + 1.0) / _1478);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1512 = frontier_phi_19_17_ladder;
        }
        float _1739;
        if (_1481 > 0.0)
        {
            _1739 = abs((1.0 - _1471) / _1481);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1481 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1471 + 1.0) / _1481);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1739 = frontier_phi_28_24_ladder;
        }
        float _1996;
        if (_1484 > 0.0)
        {
            _1996 = abs((1.0 - _1475) / _1484);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1484 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1475 + 1.0) / _1484);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1996 = frontier_phi_40_35_ladder;
        }
        float _1998 = isnan(_1739) ? _1512 : (isnan(_1512) ? _1739 : min(_1512, _1739));
        float _1999 = isnan(_1996) ? _1998 : (isnan(_1998) ? _1996 : min(_1998, _1996));
        float _2003 = (_1999 * _1478) + _1467;
        float _2004 = (_1999 * _1481) + _1471;
        float _2005 = (_1999 * _1484) + _1475;
        float _2006 = _1999 * 9.9999997473787516355514526367188e-05;
        float _2008 = (-1.0) - _2006;
        float _2010 = _2006 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2005 > _2010) || ((_2005 < _2008) || ((_2004 > _2010) || ((_2004 < _2008) || ((_2003 < _2008) || (_2003 > _2010))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2133 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2005, cbModelParam._m0[9u].z, fma(_2004, cbModelParam._m0[9u].y, _2003 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2005, cbModelParam._m0[10u].z, fma(_2004, cbModelParam._m0[10u].y, _2003 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2005, cbModelParam._m0[11u].z, fma(_2004, cbModelParam._m0[11u].y, _2003 * cbModelParam._m0[11u].x))), _1418);
            frontier_phi_18_40_ladder = _2133.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2133.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2133.x * cbModelParam._m0[1u].y;
        }
        _1500 = frontier_phi_18_40_ladder_2;
        _1502 = frontier_phi_18_40_ladder_1;
        _1504 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1488 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_579, _580, _581), _1418);
        _1500 = _1488.x * cbModelParam._m0[1u].y;
        _1502 = _1488.y * cbModelParam._m0[1u].y;
        _1504 = _1488.z * cbModelParam._m0[1u].y;
    }
    float _1508 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _391);
    float _1509 = isnan(_1508) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1508 : min(cbModelParam._m0[25u].w, _1508));
    float _1601;
    float _1603;
    float _1605;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1565 = fma(_643, cbModelParam._m0[21u].z, fma(_639, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _635)) + cbModelParam._m0[21u].w;
        float _1569 = fma(_643, cbModelParam._m0[22u].z, fma(_639, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _635)) + cbModelParam._m0[22u].w;
        float _1573 = fma(_643, cbModelParam._m0[23u].z, fma(_639, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _635)) + cbModelParam._m0[23u].w;
        float _1576 = fma(_581, cbModelParam._m0[21u].z, fma(_580, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _579));
        float _1579 = fma(_581, cbModelParam._m0[22u].z, fma(_580, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _579));
        float _1582 = fma(_581, cbModelParam._m0[23u].z, fma(_580, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _579));
        float _1744;
        if (_1576 > 0.0)
        {
            _1744 = abs((1.0 - _1565) / _1576);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1576 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1565 + 1.0) / _1576);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1744 = frontier_phi_30_26_ladder;
        }
        float _2023;
        if (_1579 > 0.0)
        {
            _2023 = abs((1.0 - _1569) / _1579);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1579 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1569 + 1.0) / _1579);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2023 = frontier_phi_42_37_ladder;
        }
        float _2236;
        if (_1582 > 0.0)
        {
            _2236 = abs((1.0 - _1573) / _1582);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1582 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1573 + 1.0) / _1582);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2236 = frontier_phi_51_48_ladder;
        }
        float _2238 = isnan(_2023) ? _1744 : (isnan(_1744) ? _2023 : min(_1744, _2023));
        float _2239 = isnan(_2236) ? _2238 : (isnan(_2238) ? _2236 : min(_2238, _2236));
        float _2243 = (_2239 * _1576) + _1565;
        float _2244 = (_2239 * _1579) + _1569;
        float _2245 = (_2239 * _1582) + _1573;
        float _2246 = _2239 * 9.9999997473787516355514526367188e-05;
        float _2247 = (-1.0) - _2246;
        float _2249 = _2246 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2245 > _2249) || ((_2245 < _2247) || ((_2244 > _2249) || ((_2244 < _2247) || ((_2243 < _2247) || (_2243 > _2249))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2444 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2245, cbModelParam._m0[17u].z, fma(_2244, cbModelParam._m0[17u].y, _2243 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2245, cbModelParam._m0[18u].z, fma(_2244, cbModelParam._m0[18u].y, _2243 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2245, cbModelParam._m0[19u].z, fma(_2244, cbModelParam._m0[19u].y, _2243 * cbModelParam._m0[19u].x))), _1509);
            frontier_phi_27_51_ladder = _2444.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2444.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2444.x * cbModelParam._m0[1u].z;
        }
        _1601 = frontier_phi_27_51_ladder_2;
        _1603 = frontier_phi_27_51_ladder_1;
        _1605 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1585 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_579, _580, _581), _1509);
        _1601 = _1585.x * cbModelParam._m0[1u].z;
        _1603 = _1585.y * cbModelParam._m0[1u].z;
        _1605 = _1585.z * cbModelParam._m0[1u].z;
    }
    float _1618 = (((_606 * _555) + _607) * _571) * ((cbModelParam._m0[1u].w * (_1601 - _1500)) + _1500);
    float _1620 = (((_606 * _557) + _607) * _571) * ((cbModelParam._m0[1u].w * (_1603 - _1502)) + _1502);
    float _1622 = (((_606 * _558) + _607) * _571) * ((cbModelParam._m0[1u].w * (_1605 - _1504)) + _1504);
    float _1625 = fma(_1622, cbSceneParam._m0[89u].z, fma(_1620, cbSceneParam._m0[89u].y, _1618 * cbSceneParam._m0[89u].x));
    float _1628 = fma(_1622, cbSceneParam._m0[90u].z, fma(_1620, cbSceneParam._m0[90u].y, _1618 * cbSceneParam._m0[90u].x));
    float _1631 = fma(_1622, cbSceneParam._m0[91u].z, fma(_1620, cbSceneParam._m0[91u].y, _1618 * cbSceneParam._m0[91u].x));
    vec4 _1639 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_491, _492));
    float _1641 = _1639.w;
    float _1653 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1641);
    float _1654 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1641);
    float _1655 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1641);
    uvec4 _1659 = floatBitsToUint(cbInstanceData._m0[_226 + 5u]);
    uint _1661 = _1659.x * 14u;
    uint _1662 = _1661 + 13u;
    float _1669 = _571 + (-1.0);
    float _1674 = (cbLight._m0[_1662].x * _1669) + 1.0;
    float _1675 = (cbLight._m0[_1662].y * _1669) + 1.0;
    float _1676 = (cbLight._m0[_1662].z * _1669) + 1.0;
    float _1677 = (cbLight._m0[_1662].w * _1669) + 1.0;
    uint _1678 = _1661 + 5u;
    float _1684 = isnan(1.0) ? _1675 : (isnan(_1675) ? 1.0 : min(_1675, 1.0));
    uint _1688 = _1661 + 4u;
    float _1698 = isnan(1.0) ? _1674 : (isnan(_1674) ? 1.0 : min(_1674, 1.0));
    uint _1702 = _1661 | 1u;
    float _1713 = dot(vec3(cbLight._m0[_1661].xyz), vec3(_388, _389, _390));
    float _1716 = dot(vec3(cbLight._m0[_1702].xyz), vec3(_388, _389, _390));
    float _3906 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
    float _3917 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
    float _1721 = (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * 0.3183098733425140380859375;
    float _1723 = (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * 0.3183098733425140380859375;
    float _1730 = ((cbLight._m0[_1678].x * _1684) * _1723) + (((cbLight._m0[_1688].x * _1653) * _1698) * _1721);
    float _1731 = ((_1684 * cbLight._m0[_1678].y) * _1723) + (((cbLight._m0[_1688].y * _1654) * _1698) * _1721);
    float _1732 = ((_1684 * cbLight._m0[_1678].z) * _1723) + (((cbLight._m0[_1688].z * _1655) * _1698) * _1721);
    uvec4 _1736 = floatBitsToUint(cbLight._m0[_1661 + 12u]);
    bool _1738 = _1736.x == 0u;
    float _1749;
    float _1751;
    float _1753;
    if (_1738)
    {
        _1749 = _1730;
        _1751 = _1731;
        _1753 = _1732;
    }
    else
    {
        uint _1757 = _1661 + 6u;
        float _1773 = (dot(vec3(cbLight._m0[_1661 + 2u].xyz), vec3(_388, _389, _390)) * 0.5) + 0.5;
        float _1774 = _1773 * _1773;
        float _3928 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1775 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1776 = isnan(1.0) ? _1676 : (isnan(_1676) ? 1.0 : min(_1676, 1.0));
        _1749 = (((cbLight._m0[_1757].x * 0.3183098733425140380859375) * _1775) * _1776) + _1730;
        _1751 = (((cbLight._m0[_1757].y * 0.3183098733425140380859375) * _1775) * _1776) + _1731;
        _1753 = (((cbLight._m0[_1757].z * 0.3183098733425140380859375) * _1775) * _1776) + _1732;
    }
    bool _1756 = _1736.y == 0u;
    float _1794;
    float _1796;
    float _1798;
    if (_1756)
    {
        _1794 = _1749;
        _1796 = _1751;
        _1798 = _1753;
    }
    else
    {
        uint _1967 = _1661 + 7u;
        float _1983 = (dot(vec3(cbLight._m0[_1661 + 3u].xyz), vec3(_388, _389, _390)) * 0.5) + 0.5;
        float _1984 = _1983 * _1983;
        float _3944 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
        float _1985 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1986 = isnan(1.0) ? _1677 : (isnan(_1677) ? 1.0 : min(_1677, 1.0));
        _1794 = (((cbLight._m0[_1967].x * 0.3183098733425140380859375) * _1985) * _1986) + _1749;
        _1796 = (((cbLight._m0[_1967].y * 0.3183098733425140380859375) * _1985) * _1986) + _1751;
        _1798 = (((cbLight._m0[_1967].z * 0.3183098733425140380859375) * _1985) * _1986) + _1753;
    }
    uint _1801 = _1661 + 8u;
    float _1814 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1661].w)) * _391) * 0.949999988079071044921875);
    float _1815 = _1814 * _1814;
    float _1816 = cbLight._m0[_1661].x + _473;
    float _1817 = cbLight._m0[_1661].y + _474;
    float _1818 = cbLight._m0[_1661].z + _475;
    float _1822 = inversesqrt(dot(vec3(_1816, _1817, _1818), vec3(_1816, _1817, _1818)));
    float _1823 = _1822 * _1816;
    float _1824 = _1822 * _1817;
    float _1825 = _1822 * _1818;
    float _1826 = dot(vec3(_388, _389, _390), vec3(cbLight._m0[_1661].xyz));
    float _3960 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _1829 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _3971 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _1830 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _1831 = dot(vec3(_388, _389, _390), vec3(_1823, _1824, _1825));
    float _3982 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _1834 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _1835 = dot(vec3(cbLight._m0[_1661].xyz), vec3(_1823, _1824, _1825));
    float _3993 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _1839 = _1815 * _1815;
    float _1843 = ((_1834 * _1834) * (_1839 + (-1.0))) + 1.0;
    float _1851 = exp2(log2(1.0 - (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)))) * 5.0);
    float _1852 = 0.959999978542327880859375 - _552;
    float _1854 = 0.959999978542327880859375 - _553;
    float _1855 = 0.959999978542327880859375 - _554;
    float _1862 = 1.0 - _1815;
    float _1873 = (0.5 / (((_1830 * ((_1829 * _1862) + _1815)) + 9.9999999392252902907785028219223e-09) + (((_1830 * _1862) + _1815) * _1829))) * _1829;
    float _4004 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1875 = (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_1839 / ((_1843 * _1843) * 3.141590118408203125));
    uint _1889 = _1661 + 9u;
    float _1900 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1702].w)) * _391) * 0.949999988079071044921875);
    float _1901 = _1900 * _1900;
    float _1902 = cbLight._m0[_1702].x + _473;
    float _1903 = cbLight._m0[_1702].y + _474;
    float _1904 = cbLight._m0[_1702].z + _475;
    float _1908 = inversesqrt(dot(vec3(_1902, _1903, _1904), vec3(_1902, _1903, _1904)));
    float _1909 = _1908 * _1902;
    float _1910 = _1908 * _1903;
    float _1911 = _1908 * _1904;
    float _1912 = dot(vec3(_388, _389, _390), vec3(cbLight._m0[_1702].xyz));
    float _4015 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _1915 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _1916 = dot(vec3(_388, _389, _390), vec3(_1909, _1910, _1911));
    float _4026 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
    float _1919 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _1920 = dot(vec3(cbLight._m0[_1702].xyz), vec3(_1909, _1910, _1911));
    float _4037 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _1924 = _1901 * _1901;
    float _1928 = ((_1919 * _1919) * (_1924 + (-1.0))) + 1.0;
    float _1935 = exp2(log2(1.0 - (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) * 5.0);
    float _1942 = 1.0 - _1901;
    float _1952 = (0.5 / (((_1830 * ((_1915 * _1942) + _1901)) + 9.9999999392252902907785028219223e-09) + (((_1830 * _1942) + _1901) * _1915))) * _1915;
    float _4048 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _1954 = (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1924 / ((_1928 * _1928) * 3.141590118408203125));
    float _1964 = (((((_1935 * _1852) + _555) * cbLight._m0[_1889].x) * _1954) * _1684) + ((((cbLight._m0[_1801].x * _1653) * ((_1851 * _1852) + _555)) * _1875) * _1698);
    float _1965 = (((((_1935 * _1854) + _557) * cbLight._m0[_1889].y) * _1954) * _1684) + ((((cbLight._m0[_1801].y * _1654) * ((_1851 * _1854) + _557)) * _1875) * _1698);
    float _1966 = (((((_1935 * _1855) + _558) * cbLight._m0[_1889].z) * _1954) * _1684) + ((((cbLight._m0[_1801].z * _1655) * ((_1851 * _1855) + _558)) * _1875) * _1698);
    float _2028;
    float _2030;
    float _2032;
    if (_1738)
    {
        _2028 = _1964;
        _2030 = _1965;
        _2032 = _1966;
    }
    else
    {
        uint _2034 = _1661 + 2u;
        uint _2038 = _1661 + 10u;
        float _2052 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2034].w)) * _391) * 0.949999988079071044921875);
        float _2053 = _2052 * _2052;
        float _2054 = cbLight._m0[_2034].x + _473;
        float _2055 = cbLight._m0[_2034].y + _474;
        float _2056 = cbLight._m0[_2034].z + _475;
        float _2060 = inversesqrt(dot(vec3(_2054, _2055, _2056), vec3(_2054, _2055, _2056)));
        float _2061 = _2060 * _2054;
        float _2062 = _2060 * _2055;
        float _2063 = _2060 * _2056;
        float _2064 = dot(vec3(_388, _389, _390), vec3(cbLight._m0[_2034].xyz));
        float _4059 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
        float _2067 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _2068 = dot(vec3(_388, _389, _390), vec3(_2061, _2062, _2063));
        float _4070 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
        float _2071 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _2072 = dot(vec3(cbLight._m0[_2034].xyz), vec3(_2061, _2062, _2063));
        float _4081 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
        float _2076 = _2053 * _2053;
        float _2080 = ((_2071 * _2071) * (_2076 + (-1.0))) + 1.0;
        float _2087 = exp2(log2(1.0 - (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0)))) * 5.0);
        float _2094 = 1.0 - _2053;
        float _2104 = (0.5 / (((_1830 * ((_2067 * _2094) + _2053)) + 9.9999999392252902907785028219223e-09) + (((_1830 * _2094) + _2053) * _2067))) * _2067;
        float _4092 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
        float _2106 = (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (_2076 / ((_2080 * _2080) * 3.141590118408203125));
        float _2107 = isnan(1.0) ? _1676 : (isnan(_1676) ? 1.0 : min(_1676, 1.0));
        _2028 = (((((_2087 * _1852) + _555) * cbLight._m0[_2038].x) * _2106) * _2107) + _1964;
        _2030 = (((((_2087 * _1854) + _557) * cbLight._m0[_2038].y) * _2106) * _2107) + _1965;
        _2032 = (((((_2087 * _1855) + _558) * cbLight._m0[_2038].z) * _2106) * _2107) + _1966;
    }
    float _2142;
    float _2144;
    float _2146;
    if (_1756)
    {
        _2142 = _2028;
        _2144 = _2030;
        _2146 = _2032;
    }
    else
    {
        uint _2153 = _1661 + 3u;
        uint _2157 = _1661 + 11u;
        float _2171 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2153].w)) * _391) * 0.949999988079071044921875);
        float _2172 = _2171 * _2171;
        float _2173 = cbLight._m0[_2153].x + _473;
        float _2174 = cbLight._m0[_2153].y + _474;
        float _2175 = cbLight._m0[_2153].z + _475;
        float _2179 = inversesqrt(dot(vec3(_2173, _2174, _2175), vec3(_2173, _2174, _2175)));
        float _2180 = _2179 * _2173;
        float _2181 = _2179 * _2174;
        float _2182 = _2179 * _2175;
        float _2183 = dot(vec3(_388, _389, _390), vec3(cbLight._m0[_2153].xyz));
        float _4108 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
        float _2186 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _2187 = dot(vec3(_388, _389, _390), vec3(_2180, _2181, _2182));
        float _4119 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        float _2190 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _2191 = dot(vec3(cbLight._m0[_2153].xyz), vec3(_2180, _2181, _2182));
        float _4130 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2195 = _2172 * _2172;
        float _2199 = ((_2190 * _2190) * (_2195 + (-1.0))) + 1.0;
        float _2206 = exp2(log2(1.0 - (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0)))) * 5.0);
        float _2213 = 1.0 - _2172;
        float _2223 = (0.5 / (((_1830 * ((_2186 * _2213) + _2172)) + 9.9999999392252902907785028219223e-09) + (((_1830 * _2213) + _2172) * _2186))) * _2186;
        float _4141 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2225 = (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_2195 / ((_2199 * _2199) * 3.141590118408203125));
        float _2226 = isnan(1.0) ? _1677 : (isnan(_1677) ? 1.0 : min(_1677, 1.0));
        _2142 = (((((_2206 * _1852) + _555) * cbLight._m0[_2157].x) * _2225) * _2226) + _2028;
        _2144 = (((((_2206 * _1854) + _557) * cbLight._m0[_2157].y) * _2225) * _2226) + _2030;
        _2146 = (((((_2206 * _1855) + _558) * cbLight._m0[_2157].z) * _2225) * _2226) + _2032;
    }
    float _2361;
    float _2363;
    float _2365;
    float _2367;
    float _2369;
    float _2371;
    if (_1659.y == 0u)
    {
        float _2301 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2302 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2301;
        float _2303 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2301;
        float _2304 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2301;
        uvec4 _2316 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2317 = _2316.x;
        uint _2328 = uint((float(_2316.y) * floor(float(uint(cbSceneParam._m0[85u].y * _492) / _2317))) + floor(float(uint(cbSceneParam._m0[85u].x * _491) / _2317)));
        float _2338 = (log2(_2304 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2339 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        uint _2342 = uint(isnan(14.0) ? _2339 : (isnan(_2339) ? 14.0 : min(_2339, 14.0)));
        uvec4 _2347 = texelFetch(g_lightClusterGridBuffer, int(((_2342 << 2u) + (_2328 << 6u)) >> 2u));
        uint _2348 = _2347.x;
        uint _2349 = _2316.z;
        float _2449;
        float _2451;
        float _2453;
        float _2455;
        float _2457;
        float _2459;
        if (((((1u << ((_2349 >> 4u) & 15u)) + 4294967295u) & _2348) == 0u) || ((_2349 & 240u) == 0u))
        {
            _2449 = 0.0;
            _2451 = 0.0;
            _2453 = 0.0;
            _2455 = 0.0;
            _2457 = 0.0;
            _2459 = 0.0;
        }
        else
        {
            float _2450;
            float _2452;
            float _2454;
            float _2456;
            float _2458;
            float _2460;
            float _2602 = 0.0;
            float _2603 = 0.0;
            float _2604 = 0.0;
            float _2605 = 0.0;
            float _2606 = 0.0;
            float _2607 = 0.0;
            uint _2608 = 0u;
            uint _2617;
            bool _2618;
            for (;;)
            {
                _2617 = texelFetch(g_lightClassification, int((((_2342 << 5u) + (_2328 << 9u)) + (_2608 << 2u)) >> 2u)).x;
                _2618 = _2617 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2618)
                {
                    frontier_phi_68_pred = _2602;
                    frontier_phi_68_pred_1 = _2607;
                    frontier_phi_68_pred_2 = _2606;
                    frontier_phi_68_pred_3 = _2605;
                    frontier_phi_68_pred_4 = _2604;
                    frontier_phi_68_pred_5 = _2603;
                }
                else
                {
                    float _2747;
                    float _2748;
                    float _2749;
                    float _2750;
                    float _2751;
                    float _2752;
                    uint _2753;
                    _2747 = _2602;
                    _2748 = _2603;
                    _2749 = _2604;
                    _2750 = _2605;
                    _2751 = _2606;
                    _2752 = _2607;
                    _2753 = _2617;
                    float _2674;
                    float _2675;
                    float _2676;
                    float _2677;
                    float _2678;
                    float _2679;
                    for (;;)
                    {
                        uint _2757 = uint(findLSB(_2753)) + (_2608 << 5u);
                        uint _2754 = (_2753 + 4294967295u) & _2753;
                        uint _2759 = _2757 * 48u;
                        vec4 _2773 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2759)).x, texelFetch(g_PointLightRenderingBuffer, int(_2759 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2759 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2759 + 3u)).x));
                        uint _2779 = (_2757 * 48u) + 4u;
                        vec4 _2792 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2779)).x, texelFetch(g_PointLightRenderingBuffer, int(_2779 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2779 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2779 + 3u)).x));
                        uint _2798 = (_2757 * 48u) + 8u;
                        vec3 _2809 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2798)).x, texelFetch(g_PointLightRenderingBuffer, int(_2798 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2798 + 2u)).x));
                        float _2813 = _2773.x - _2302;
                        float _2814 = _2773.y - _2303;
                        float _2815 = _2773.z - _2304;
                        float _2816 = dot(vec3(_2813, _2814, _2815), vec3(_2813, _2814, _2815));
                        float _2819 = inversesqrt(_2816);
                        float _2820 = _2819 * _2813;
                        float _2821 = _2819 * _2814;
                        float _2822 = _2819 * _2815;
                        float _2823 = dot(vec3(_512, _515, _518), vec3(_2820, _2821, _2822));
                        float _2828 = 1.0 - (_2816 * _2773.w);
                        float _4167 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
                        float _2829 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
                        float _2830 = sqrt(_2816) * _2792.w;
                        float _2833 = 1.39999997615814208984375 / (_2830 + 1.39999997615814208984375);
                        float _2834 = _2833 * _2833;
                        float _2837 = ((1.0 - _2834) * _2823) + _2834;
                        float _2840 = _2830 * _2830;
                        float _2844 = ((isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0))) * _2829) / ((_2840 * 0.699999988079071044921875) + 1.0);
                        float _2848 = (-0.0) - _2302;
                        float _2849 = (-0.0) - _2303;
                        float _2850 = (-0.0) - _2304;
                        float _2854 = inversesqrt(dot(vec3(_2848, _2849, _2850), vec3(_2848, _2849, _2850)));
                        float _2855 = _2854 * _2848;
                        float _2856 = _2854 * _2849;
                        float _2857 = _2854 * _2850;
                        float _2865 = exp2(log2(1.0 / ((_2840 * 3.5) + 5.0)) * 0.25);
                        float _2866 = 1.0 - _587;
                        float _2873 = sqrt(1.0 - ((1.0 - (_2866 * _2866)) * (1.0 - (_2865 * _2865))));
                        float _2874 = _2873 * _2873;
                        float _2875 = _2874 * _2874;
                        float _2876 = _2855 + _2820;
                        float _2877 = _2856 + _2821;
                        float _2878 = _2857 + _2822;
                        float _2882 = inversesqrt(dot(vec3(_2876, _2877, _2878), vec3(_2876, _2877, _2878)));
                        float _2886 = dot(vec3(_512, _515, _518), vec3(_2855, _2856, _2857));
                        float _4183 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
                        float _2889 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
                        float _2890 = dot(vec3(_512, _515, _518), vec3(_2882 * _2876, _2882 * _2877, _2882 * _2878));
                        float _4194 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
                        float _2893 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
                        float _2897 = ((_2893 * _2893) * (_2875 + (-1.0))) + 1.0;
                        float _2898 = _2833 * _2874;
                        float _2899 = _2898 * _2898;
                        float _2902 = ((1.0 - _2899) * _2823) + _2899;
                        float _4205 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
                        float _2903 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
                        float _2904 = 1.0 - _2874;
                        float _2914 = (0.5 / (((_2903 * ((_2889 * _2904) + _2874)) + 9.9999999392252902907785028219223e-09) + (((_2903 * _2904) + _2874) * _2889))) * _2903;
                        float _4216 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
                        float _2925 = (((_2875 * 3.1415927410125732421875) * (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0)))) / ((_2897 * _2897) * ((_2840 * 2.1991131305694580078125) + 3.141590118408203125))) * _2829;
                        _2677 = (_2844 * _2792.x) + _2750;
                        _2678 = (_2844 * _2792.y) + _2751;
                        _2679 = (_2844 * _2792.z) + _2752;
                        _2674 = (_2925 * _2809.x) + _2747;
                        _2675 = (_2925 * _2809.y) + _2748;
                        _2676 = (_2925 * _2809.z) + _2749;
                        if (_2754 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2747 = _2674;
                            _2748 = _2675;
                            _2749 = _2676;
                            _2750 = _2677;
                            _2751 = _2678;
                            _2752 = _2679;
                            _2753 = _2754;
                        }
                    }
                    frontier_phi_68_pred = _2674;
                    frontier_phi_68_pred_1 = _2679;
                    frontier_phi_68_pred_2 = _2678;
                    frontier_phi_68_pred_3 = _2677;
                    frontier_phi_68_pred_4 = _2676;
                    frontier_phi_68_pred_5 = _2675;
                }
                _2450 = frontier_phi_68_pred;
                _2460 = frontier_phi_68_pred_1;
                _2458 = frontier_phi_68_pred_2;
                _2456 = frontier_phi_68_pred_3;
                _2454 = frontier_phi_68_pred_4;
                _2452 = frontier_phi_68_pred_5;
                uint _2609 = _2608 + 1u;
                if (_2609 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2602 = _2450;
                    _2603 = _2452;
                    _2604 = _2454;
                    _2605 = _2456;
                    _2606 = _2458;
                    _2607 = _2460;
                    _2608 = _2609;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2449 = _2450;
            _2451 = _2452;
            _2453 = _2454;
            _2455 = _2456;
            _2457 = _2458;
            _2459 = _2460;
        }
        uvec4 _2463 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2464 = _2463.z;
        uint _2466 = (_2464 >> 8u) & 15u;
        float _2570;
        float _2572;
        float _2574;
        float _2576;
        float _2578;
        float _2580;
        if (((4294967295u << _2466) & _2348) == 0u)
        {
            _2570 = _2449;
            _2572 = _2451;
            _2574 = _2453;
            _2576 = _2455;
            _2578 = _2457;
            _2580 = _2459;
        }
        else
        {
            float _2595 = inversesqrt(dot(vec3(_2302, _2303, _2304), vec3(_2302, _2303, _2304)));
            float _2596 = _2595 * _2302;
            float _2597 = _2595 * _2303;
            float _2598 = _2595 * _2304;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2466 < ((_2464 >> 12u) & 15u))
            {
                float _2571;
                float _2573;
                float _2575;
                float _2577;
                float _2579;
                float _2581;
                float _2730 = _2449;
                float _2731 = _2451;
                float _2732 = _2453;
                float _2733 = _2455;
                float _2734 = _2457;
                float _2735 = _2459;
                uint _2736 = _2466;
                uint _2745;
                bool _2746;
                for (;;)
                {
                    _2745 = texelFetch(g_lightClassification, int((((_2342 << 5u) + (_2328 << 9u)) + (_2736 << 2u)) >> 2u)).x;
                    _2746 = _2745 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2746)
                    {
                        frontier_phi_79_pred = _2735;
                        frontier_phi_79_pred_1 = _2734;
                        frontier_phi_79_pred_2 = _2733;
                        frontier_phi_79_pred_3 = _2732;
                        frontier_phi_79_pred_4 = _2731;
                        frontier_phi_79_pred_5 = _2730;
                    }
                    else
                    {
                        float _2939;
                        float _2940;
                        float _2941;
                        float _2942;
                        float _2943;
                        float _2944;
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3237;
                        float _3238;
                        float _3239;
                        float _2952 = _2730;
                        float _2953 = _2731;
                        float _2954 = _2732;
                        float _2955 = _2733;
                        float _2956 = _2734;
                        float _2957 = _2735;
                        uint _2958 = _2745;
                        uint _2959;
                        vec4 _2984;
                        float _2985;
                        vec4 _3000;
                        vec3 _3012;
                        vec4 _3028;
                        vec4 _3043;
                        float _3090;
                        bool _3091;
                        for (;;)
                        {
                            uint _2969 = ((_2736 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2958));
                            _2959 = (_2958 + 4294967295u) & _2958;
                            uint _2971 = _2969 * 40u;
                            _2984 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2971)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 3u)).x));
                            _2985 = _2984.w;
                            uint _2987 = (_2969 * 40u) + 4u;
                            _3000 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2987)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 3u)).x));
                            uint _3002 = (_2969 * 40u) + 8u;
                            _3012 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3002)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 2u)).x));
                            uint _3015 = (_2969 * 40u) + 16u;
                            _3028 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3015)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 3u)).x));
                            uint _3030 = (_2969 * 40u) + 20u;
                            _3043 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3030)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 3u)).x));
                            uint _3046 = (_2969 * 40u) + 24u;
                            vec4 _3059 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3046)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 3u)).x));
                            uint _3065 = (_2969 * 40u) + 28u;
                            vec4 _3078 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3065)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 3u)).x));
                            _3090 = fma(_2304, _3078.z, fma(_2303, _3078.y, _3078.x * _2302)) + _3078.w;
                            _3091 = !((fma(_2304, _3059.z, fma(_2303, _3059.y, _3059.x * _2302)) + _3059.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3091)
                            {
                                float _3118 = _2984.x - _2302;
                                float _3119 = _2984.y - _2303;
                                float _3120 = _2984.z - _2304;
                                float _3121 = dot(vec3(_3118, _3119, _3120), vec3(_3118, _3119, _3120));
                                float _3124 = inversesqrt(_3121);
                                float _3125 = _3124 * _3118;
                                float _3126 = _3124 * _3119;
                                float _3127 = _3124 * _3120;
                                float _3131 = 1.0 - (_3121 / (_2985 * _2985));
                                float _4227 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                                float _3132 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
                                float _3136 = sqrt(_3121) * _3000.w;
                                float _3138 = 1.39999997615814208984375 / (_3136 + 1.39999997615814208984375);
                                float _3139 = _3138 * _3138;
                                float _3142 = ((1.0 - _3139) * dot(vec3(_3125, _3126, _3127), vec3(_512, _515, _518))) + _3139;
                                float _3145 = _3136 * _3136;
                                float _3149 = (fma(_2304, _3028.z, fma(_2303, _3028.y, _3028.x * _2302)) + _3028.w) / _3090;
                                float _3150 = (fma(_2304, _3043.z, fma(_2303, _3043.y, _3043.x * _2302)) + _3043.w) / _3090;
                                float _3154 = 1.0 - dot(vec2(_3149, _3150), vec2(_3149, _3150));
                                float _4243 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                                float _3155 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
                                float _3156 = _3155 * (((isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0))) * _3132) / ((_3145 * 0.699999988079071044921875) + 1.0));
                                float _3168 = exp2(log2(1.0 / ((_3145 * 3.5) + 5.0)) * 0.25);
                                float _3169 = 1.0 - _587;
                                float _3176 = sqrt(1.0 - ((1.0 - (_3169 * _3169)) * (1.0 - (_3168 * _3168))));
                                float _3177 = _3176 * _3176;
                                float _3178 = _3177 * _3177;
                                float _3179 = _3125 - _2596;
                                float _3180 = _3126 - _2597;
                                float _3181 = _3127 - _2598;
                                float _3185 = inversesqrt(dot(vec3(_3179, _3180, _3181), vec3(_3179, _3180, _3181)));
                                float _3189 = dot(vec3(_512, _515, _518), vec3((-0.0) - _2596, (-0.0) - _2597, (-0.0) - _2598));
                                float _4254 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                                float _3192 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
                                float _3193 = dot(vec3(_512, _515, _518), vec3(_3185 * _3179, _3185 * _3180, _3185 * _3181));
                                float _4265 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                                float _3196 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
                                float _3200 = ((_3196 * _3196) * (_3178 + (-1.0))) + 1.0;
                                float _3201 = _3138 * _3177;
                                float _3202 = _3201 * _3201;
                                float _3208 = ((1.0 - _3202) * dot(vec3(_512, _515, _518), vec3(_3125, _3126, _3127))) + _3202;
                                float _4276 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                                float _3209 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
                                float _3210 = 1.0 - _3177;
                                float _3220 = (0.5 / (((_3209 * ((_3192 * _3210) + _3177)) + 9.9999999392252902907785028219223e-09) + (((_3209 * _3210) + _3177) * _3192))) * _3209;
                                float _4287 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                                float _3230 = (_3155 * _3132) * (((_3178 * 3.1415927410125732421875) * (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0)))) / ((_3200 * _3200) * ((_3145 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3156 * _3000.y;
                                frontier_phi_85_pred_1 = _3156 * _3000.x;
                                frontier_phi_85_pred_2 = _3230 * _3012.z;
                                frontier_phi_85_pred_3 = _3230 * _3012.y;
                                frontier_phi_85_pred_4 = _3230 * _3012.x;
                                frontier_phi_85_pred_5 = _3156 * _3000.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3238 = frontier_phi_85_pred;
                            _3237 = frontier_phi_85_pred_1;
                            _3236 = frontier_phi_85_pred_2;
                            _3235 = frontier_phi_85_pred_3;
                            _3234 = frontier_phi_85_pred_4;
                            _3239 = frontier_phi_85_pred_5;
                            _2942 = _3237 + _2955;
                            _2943 = _3238 + _2956;
                            _2944 = _3239 + _2957;
                            _2939 = _3234 + _2952;
                            _2940 = _3235 + _2953;
                            _2941 = _3236 + _2954;
                            if (_2959 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2952 = _2939;
                                _2953 = _2940;
                                _2954 = _2941;
                                _2955 = _2942;
                                _2956 = _2943;
                                _2957 = _2944;
                                _2958 = _2959;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2944;
                        frontier_phi_79_pred_1 = _2943;
                        frontier_phi_79_pred_2 = _2942;
                        frontier_phi_79_pred_3 = _2941;
                        frontier_phi_79_pred_4 = _2940;
                        frontier_phi_79_pred_5 = _2939;
                    }
                    _2581 = frontier_phi_79_pred;
                    _2579 = frontier_phi_79_pred_1;
                    _2577 = frontier_phi_79_pred_2;
                    _2575 = frontier_phi_79_pred_3;
                    _2573 = frontier_phi_79_pred_4;
                    _2571 = frontier_phi_79_pred_5;
                    uint _2737 = _2736 + 1u;
                    if (_2737 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2730 = _2571;
                        _2731 = _2573;
                        _2732 = _2575;
                        _2733 = _2577;
                        _2734 = _2579;
                        _2735 = _2581;
                        _2736 = _2737;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2575;
                frontier_phi_60_61_ladder_1 = _2581;
                frontier_phi_60_61_ladder_2 = _2579;
                frontier_phi_60_61_ladder_3 = _2577;
                frontier_phi_60_61_ladder_4 = _2573;
                frontier_phi_60_61_ladder_5 = _2571;
            }
            else
            {
                frontier_phi_60_61_ladder = _2453;
                frontier_phi_60_61_ladder_1 = _2459;
                frontier_phi_60_61_ladder_2 = _2457;
                frontier_phi_60_61_ladder_3 = _2455;
                frontier_phi_60_61_ladder_4 = _2451;
                frontier_phi_60_61_ladder_5 = _2449;
            }
            _2570 = frontier_phi_60_61_ladder_5;
            _2572 = frontier_phi_60_61_ladder_4;
            _2574 = frontier_phi_60_61_ladder;
            _2576 = frontier_phi_60_61_ladder_3;
            _2578 = frontier_phi_60_61_ladder_2;
            _2580 = frontier_phi_60_61_ladder_1;
        }
        float _2585 = isnan(1.0) ? _571 : (isnan(_571) ? 1.0 : min(_571, 1.0));
        _2361 = (_2585 * _2576) + _1794;
        _2363 = (_2585 * _2578) + _1796;
        _2365 = (_2585 * _2580) + _1798;
        _2367 = ((_2570 * _555) * _2585) + _2142;
        _2369 = ((_2572 * _557) * _2585) + _2144;
        _2371 = ((_2574 * _558) * _2585) + _2146;
    }
    else
    {
        _2361 = _1794;
        _2363 = _1796;
        _2365 = _1798;
        _2367 = _2142;
        _2369 = _2144;
        _2371 = _2146;
    }
    float _4303 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _4314 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _4325 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _2388 = ((isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_2361 + ((isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0))) * _571))) + ((_2367 + ((isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))) * _1407)) * cbPerFrame._m0[3u].x);
    float _2389 = ((isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_2363 + ((isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0))) * _571))) + ((_2369 + ((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _1407)) * cbPerFrame._m0[3u].x);
    float _2390 = ((isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * (_2365 + ((isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0))) * _571))) + ((_2371 + ((isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))) * _1407)) * cbPerFrame._m0[3u].x);
    uint _2391 = _226 + 6u;
    float _2399 = _491 / cbSceneParam._m0[86u].x;
    float _2400 = _492 / cbSceneParam._m0[86u].y;
    vec4 _2414 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2399, _2400, (log2((isnan(cbSceneParam._m0[77u].w) ? _414 : (isnan(_414) ? cbSceneParam._m0[77u].w : min(_414, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2416 = _2414.x;
    float _2417 = _2414.y;
    float _2418 = _2414.z;
    float _2419 = _2414.w;
    float _2512;
    float _2514;
    float _2516;
    float _2518;
    if (_414 > cbSceneParam._m0[78u].w)
    {
        float _2474 = isnan(_414) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _414 : min(cbSceneParam._m0[80u].w, _414));
        float _2475 = _2474 / _414;
        float _2486 = _2475 * _466;
        float _2487 = _467 * _2475;
        float _2488 = (-0.0) - _2487;
        float _2490 = _2475 * _468;
        float _2492 = (cbSceneParam._m0[77u].w * _2488) / _2474;
        float _2493 = _2492 + cbSceneParam._m0[79u].w;
        float _2494 = cbSceneParam._m0[79u].w - _2487;
        float _2500 = sqrt(((_2486 * _2486) + (_2487 * _2487)) + (_2490 * _2490));
        float _2503 = (1.0 - (cbSceneParam._m0[77u].w / _2474)) * _2500;
        float _2508 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2510 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2687;
        if (abs((_2488 - _2492) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2687 = ((((_2493 > 0.0) ? exp2(_2508 * _2493) : (2.0 - exp2(_2510 * _2493))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2503;
        }
        else
        {
            float _2631 = 1.0 / cbSceneParam._m0[80u].x;
            float _2632 = isnan(_2494) ? _2493 : (isnan(_2493) ? _2494 : max(_2493, _2494));
            float _2633 = isnan(_2494) ? _2493 : (isnan(_2493) ? _2494 : min(_2493, _2494));
            float _2642 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : min(_2632, 0.0));
            float _2643 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : min(_2633, 0.0));
            _2687 = ((abs(_2500 / _2488) * cbSceneParam._m0[80u].y) * ((((_2642 - _2643) * 2.0) - ((exp2(_2508 * (isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0)))) - exp2(_2508 * (isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0))))) * _2631)) - ((exp2(_2510 * _2642) - exp2(_2510 * _2643)) * _2631))) + (_2503 * cbSceneParam._m0[80u].z);
        }
        vec4 _2689 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2399, _2400, 1.0), 0.0);
        float _2698 = exp2((_2687 * (-1.44269502162933349609375)) * (1.0 - _2689.w));
        float _2699 = log2(_2698);
        float _2715 = log2(_2419);
        _2512 = (exp2(_2715 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2699 * cbSceneParam._m0[78u].x)) * _2689.x) / cbSceneParam._m0[78u].x)) + _2416;
        _2514 = (exp2(_2715 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2699 * cbSceneParam._m0[78u].y)) * _2689.y) / cbSceneParam._m0[78u].y)) + _2417;
        _2516 = (exp2(_2715 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2699 * cbSceneParam._m0[78u].z)) * _2689.z) / cbSceneParam._m0[78u].z)) + _2418;
        _2518 = _2698 * _2419;
    }
    else
    {
        _2512 = _2416;
        _2514 = _2417;
        _2516 = _2418;
        _2518 = _2419;
    }
    bool _2725;
    vec4 _2528;
    vec4 _2550;
    float _2552;
    float _2556;
    float _2557;
    float _2558;
    float _2559;
    bool _2569;
    for (;;)
    {
        _2528 = cbMatDynParam._m0[0u];
        float _2530 = roundEven(_2528.y);
        bool _2531 = _2530 == 3.0;
        float _2532 = log2(_2518);
        float _2539 = exp2(_2532 * cbSceneParam._m0[78u].x) * _2388;
        float _2540 = exp2(_2532 * cbSceneParam._m0[78u].y) * _2389;
        float _2541 = exp2(_2532 * cbSceneParam._m0[78u].z) * _2390;
        float _2548 = _479 + (-0.5);
        _2550 = cbMtdParam._m0[1u];
        _2552 = _2550.y * _2548;
        float _2555 = (_2530 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2556 = _2555 * (_2531 ? _2539 : (_2539 + (cbSceneParam._m0[72u].w * _2512)));
        _2557 = _2555 * (_2531 ? _2540 : (_2540 + (cbSceneParam._m0[72u].w * _2514)));
        _2558 = _2555 * (_2531 ? _2541 : (_2541 + (cbSceneParam._m0[72u].w * _2516)));
        _2559 = _2548 * 0.999000012874603271484375;
        _2569 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2569)
        {
            if ((cbInstanceData._m0[_226 + 7u].x + _2559) < 0.5)
            {
                _2725 = true;
                break;
            }
        }
        uint _2666 = _531 + uint(_2528.w);
        if ((cbInstanceData._m0[_2666].w < 1.0) && ((cbInstanceData._m0[_2666].w + _2559) < 0.5))
        {
            _2725 = true;
            break;
        }
        if ((_2552 + 1.0) < _2550.x)
        {
            _2725 = true;
            break;
        }
        _2725 = false;
        break;
    }
    float _2930;
    if (_2725)
    {
        discard_state = true;
        _2930 = 0.0;
    }
    else
    {
        _2930 = cbInstanceData._m0[_2391].w;
    }
    SV_Target.x = _2556;
    SV_Target.y = _2557;
    SV_Target.z = _2558;
    SV_Target.w = _2930;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2391].w;
    discard_exit();
}


