#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1027;
float _3412;
float _3413;
float _3414;
float _3415;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _239 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _240 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3424 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3435 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3446 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    uint _250 = uint(roundEven(NORMAL.w)) * 13u;
    uint _255 = _250 + 1u;
    uint _259 = _250 + 2u;
    float _268 = sqrt(((cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x)) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x));
    float _269 = _268 * TEXCOORD.z;
    float _270 = _268 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _269) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _270) + cbTextureTilingScale._m0[13u].w));
    vec4 _306 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _311 = _306.x * cbMtdParam._m0[9u].x;
    float _312 = _306.y * cbMtdParam._m0[9u].y;
    float _313 = _306.z * cbMtdParam._m0[9u].z;
    float _317 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _283.x) * _311;
    float _320 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _283.y) * _312;
    float _323 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _283.z) * _313;
    float _330 = ((_311 - _317) * (isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0)))) + _317;
    float _331 = ((_312 - _320) * (isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0)))) + _320;
    float _332 = ((_313 - _323) * (isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0)))) + _323;
    vec4 _345 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _269) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _270) + cbTextureTilingScale._m0[20u].w));
    vec4 _371 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _375 = _371.z;
    float _379 = (_371.x * 2.0) + (-1.0);
    float _380 = (_371.y * 2.0) + (-1.0);
    float _381 = dot(vec2(_379, _380), vec2(_379, _380));
    float _3457 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _386 = sqrt(1.0 - (isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0))));
    float _391 = _379 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_345.x * 2.0) + (-1.0)));
    float _392 = _380 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_345.y * 2.0) + (-1.0)));
    vec4 _405 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _407 = _405.x;
    float _412 = (((_345.z - _375) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _375;
    float _414 = cbMtdParam._m0[22u].x + _371.w;
    float _418 = gl_FragCoord.x * 0.125;
    float _420 = gl_FragCoord.y * 0.125;
    float _431 = fma(_386, _216 * NORMAL.x, fma(_392, _223 * TANGENT.x, (_209 * _201) * _391));
    float _434 = fma(_386, _216 * NORMAL.y, fma(_392, _223 * TANGENT.y, (_209 * _202) * _391));
    float _437 = fma(_386, _216 * NORMAL.z, fma(_392, _223 * TANGENT.z, (_209 * _203) * _391));
    float _441 = inversesqrt(dot(vec3(_431, _434, _437), vec3(_431, _434, _437)));
    float _442 = _441 * _431;
    float _443 = _441 * _434;
    float _444 = _441 * _437;
    float _3468 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _445 = isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0));
    float _3479 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _3490 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _3501 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _3512 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _3523 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _450 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_418, _420)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _468 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _510 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _520 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _510);
    float _521 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _510);
    float _522 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _510);
    float _526 = inversesqrt(dot(vec3(_520, _521, _522), vec3(_520, _521, _522)));
    float _527 = _520 * _526;
    float _528 = _521 * _526;
    float _529 = _522 * _526;
    vec4 _531 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_418, _420));
    float _533 = _531.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _708 = sqrt(((_520 * _520) + (_521 * _521)) + (_522 * _522));
        float _714 = (cbMatDynParam._m0[5u].x * _708) + cbMatDynParam._m0[5u].y;
        float _3534 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _715 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
        float _719 = (cbMatDynParam._m0[5u].z * _708) + cbMatDynParam._m0[5u].w;
        float _3545 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0))) - _715)) + _715) < ((_533 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _545 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _546 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _566 = fma(_444, cbSceneParam._m0[5u].z, fma(_443, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _442));
    float _569 = fma(_444, cbSceneParam._m0[6u].z, fma(_443, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _442));
    float _572 = fma(_444, cbSceneParam._m0[7u].z, fma(_443, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _442));
    uint _585 = _250 + 9u;
    uint _586 = _585 + uint(cbMatDynParam._m0[0u].w);
    float _592 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0)))) * cbInstanceData._m0[_586].x;
    float _593 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0)))) * cbInstanceData._m0[_586].y;
    float _594 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0)))) * cbInstanceData._m0[_586].z;
    float _3556 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _595 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
    float _3567 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _596 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
    float _3578 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _597 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
    float _598 = 1.0 - _450;
    float _599 = _595 * _598;
    float _600 = _596 * _598;
    float _601 = _597 * _598;
    float _606 = (_595 + (-0.039999999105930328369140625)) * _450;
    float _607 = (_596 + (-0.039999999105930328369140625)) * _450;
    float _608 = (_597 + (-0.039999999105930328369140625)) * _450;
    float _609 = _606 + 0.039999999105930328369140625;
    float _611 = _607 + 0.039999999105930328369140625;
    float _612 = _608 + 0.039999999105930328369140625;
    vec4 _621 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _545, cbSceneParam._m0[86u].y * _546));
    float _625 = ((isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0))) * TEXCOORD_5.w) * _621.x;
    float _626 = dot(vec3(_442, _443, _444), vec3(_527, _528, _529));
    float _629 = _626 * 2.0;
    float _633 = (_629 * _442) - _527;
    float _634 = (_629 * _443) - _528;
    float _635 = (_629 * _444) - _529;
    float _639 = abs(dot(vec3(_527, _528, _529), vec3(_442, _443, _444)));
    float _3589 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _641 = sqrt(_445);
    float _654 = exp2((_641 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_641 * 3.0));
    float _660 = (1.0 - _654) * ((_641 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _661 = _654 * _641;
    float _689 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _693 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _697 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1026;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _751 = fma(_697, cbModelParam._m0[26u].z, fma(_693, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _689));
        float _755 = fma(_697, cbModelParam._m0[27u].z, fma(_693, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _689));
        float _759 = fma(_697, cbModelParam._m0[28u].z, fma(_693, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _689));
        float _784 = _689 + _442;
        float _785 = _693 + _443;
        float _786 = _697 + _444;
        float _796 = fma(_786, cbModelParam._m0[26u].z, fma(_785, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _784)) - _751;
        float _797 = fma(_786, cbModelParam._m0[27u].z, fma(_785, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _784)) - _755;
        float _798 = fma(_786, cbModelParam._m0[28u].z, fma(_785, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _784)) - _759;
        float _802 = inversesqrt(dot(vec3(_796, _797, _798), vec3(_796, _797, _798)));
        float _815 = ((_802 * _796) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_751 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _816 = ((_802 * _797) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_755 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _817 = ((_802 * _798) / cbModelParam._m0[34u].z) + ((((((_759 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _820 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_815, _816, _817), 0.0);
        vec4 _827 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_815, _816, _817), 0.0);
        vec4 _834 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_815, _816, _817), 0.0);
        vec4 _841 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_815, _816, _817), 0.0);
        float _854 = exp2((_820.w + (-0.5)) * 20.0) * 2.0;
        float _855 = _854 * (_820.x + (-0.5));
        float _856 = _854 * (_820.y + (-0.5));
        float _857 = _854 * (_820.z + (-0.5));
        float _864 = exp2((_827.w + (-0.5)) * 20.0) * 2.0;
        float _865 = _864 * (_827.x + (-0.5));
        float _866 = _864 * (_827.y + (-0.5));
        float _867 = _864 * (_827.z + (-0.5));
        float _874 = exp2((_834.w + (-0.5)) * 20.0) * 2.0;
        float _875 = _874 * (_834.x + (-0.5));
        float _876 = _874 * (_834.y + (-0.5));
        float _877 = _874 * (_834.z + (-0.5));
        float _884 = exp2((_841.w + (-0.5)) * 20.0) * 2.0;
        float _885 = _884 * (_841.x + (-0.5));
        float _886 = _884 * (_841.y + (-0.5));
        float _887 = _884 * (_841.z + (-0.5));
        float _888 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _889 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _890 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _891 = _855 * 0.5;
        float _892 = _865 * 0.5;
        float _893 = _875 * 0.5;
        float _894 = dot(vec3(_891, _892, _893), vec3(_891, _892, _893));
        float _899 = (_894 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_894);
        float _908 = (dot(vec3(_442, _443, _444), vec3(_899 * _891, _899 * _892, _899 * _893)) + 1.0) * 0.5;
        float _3615 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _918 = sqrt(((_892 * _892) + (_891 * _891)) + (_893 * _893)) / (_888 + 9.9999997473787516355514526367188e-06);
        float _3626 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _919 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
        float _920 = _919 * 2.0;
        float _924 = (1.0 - _919) / (_919 + 1.0);
        float _3637 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _925 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
        float _934 = ((((1.0 - _925) * (_920 + 2.0)) * exp2(log2(isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0))) * (_920 + 1.0))) + _925) * _888;
        float _935 = _856 * 0.5;
        float _936 = _866 * 0.5;
        float _937 = _876 * 0.5;
        float _938 = dot(vec3(_935, _936, _937), vec3(_935, _936, _937));
        float _943 = (_938 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_938);
        float _951 = (dot(vec3(_442, _443, _444), vec3(_943 * _935, _943 * _936, _943 * _937)) + 1.0) * 0.5;
        float _3648 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _960 = sqrt(((_936 * _936) + (_935 * _935)) + (_937 * _937)) / (_889 + 9.9999997473787516355514526367188e-06);
        float _3659 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _961 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _962 = _961 * 2.0;
        float _966 = (1.0 - _961) / (_961 + 1.0);
        float _3670 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _976 = ((((1.0 - _967) * (_962 + 2.0)) * exp2(log2(isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0))) * (_962 + 1.0))) + _967) * _889;
        float _977 = _857 * 0.5;
        float _978 = _867 * 0.5;
        float _979 = _877 * 0.5;
        float _980 = dot(vec3(_977, _978, _979), vec3(_977, _978, _979));
        float _985 = (_980 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_980);
        float _993 = (dot(vec3(_442, _443, _444), vec3(_985 * _977, _985 * _978, _985 * _979)) + 1.0) * 0.5;
        float _3681 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _1002 = sqrt(((_978 * _978) + (_977 * _977)) + (_979 * _979)) / (_890 + 9.9999997473787516355514526367188e-06);
        float _3692 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _1004 = _1003 * 2.0;
        float _1008 = (1.0 - _1003) / (_1003 + 1.0);
        float _3703 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _1018 = ((((1.0 - _1009) * (_1004 + 2.0)) * exp2(log2(isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) * (_1004 + 1.0))) + _1009) * _890;
        _1026 = _857;
        _1028 = _856;
        _1029 = _855;
        _1030 = _867;
        _1031 = _866;
        _1032 = _865;
        _1033 = _877;
        _1034 = _876;
        _1035 = _875;
        _1036 = _890;
        _1037 = _889;
        _1038 = _888;
        _1039 = cbModelParam._m0[36u].z * (isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0)));
        _1040 = cbModelParam._m0[36u].z * (isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0)));
        _1041 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0)));
    }
    else
    {
        _1026 = _1027;
        _1028 = _1027;
        _1029 = _1027;
        _1030 = _1027;
        _1031 = _1027;
        _1032 = _1027;
        _1033 = _1027;
        _1034 = _1027;
        _1035 = _1027;
        _1036 = _1027;
        _1037 = _1027;
        _1038 = _1027;
        _1039 = 0.0;
        _1040 = 0.0;
        _1041 = 0.0;
    }
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1066 = fma(_697, cbModelParam._m0[30u].z, fma(_693, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _689));
        float _1070 = fma(_697, cbModelParam._m0[31u].z, fma(_693, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _689));
        float _1074 = fma(_697, cbModelParam._m0[32u].z, fma(_693, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _689));
        float _1097 = _689 + _442;
        float _1098 = _693 + _443;
        float _1099 = _697 + _444;
        float _1109 = fma(_1099, cbModelParam._m0[30u].z, fma(_1098, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1097)) - _1066;
        float _1110 = fma(_1099, cbModelParam._m0[31u].z, fma(_1098, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1097)) - _1070;
        float _1111 = fma(_1099, cbModelParam._m0[32u].z, fma(_1098, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1097)) - _1074;
        float _1115 = inversesqrt(dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111)));
        float _1128 = ((_1115 * _1109) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1066 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1129 = ((_1115 * _1110) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1070 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1130 = ((_1115 * _1111) / cbModelParam._m0[35u].z) + ((((((_1074 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        float _1165 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1132.x + (-0.5));
        float _1167 = _1165 * (_1132.y + (-0.5));
        float _1168 = _1165 * (_1132.z + (-0.5));
        float _1175 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1139.x + (-0.5));
        float _1177 = _1175 * (_1139.y + (-0.5));
        float _1178 = _1175 * (_1139.z + (-0.5));
        float _1185 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1146.x + (-0.5));
        float _1187 = _1185 * (_1146.y + (-0.5));
        float _1188 = _1185 * (_1146.z + (-0.5));
        float _1195 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1153.x + (-0.5));
        float _1197 = _1195 * (_1153.y + (-0.5));
        float _1198 = _1195 * (_1153.z + (-0.5));
        float _1199 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1200 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1201 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1202 = _1166 * 0.5;
        float _1203 = _1176 * 0.5;
        float _1204 = _1186 * 0.5;
        float _1205 = dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204));
        float _1210 = (_1205 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1205);
        float _1218 = (dot(vec3(_442, _443, _444), vec3(_1210 * _1202, _1210 * _1203, _1210 * _1204)) + 1.0) * 0.5;
        float _3744 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1227 = sqrt(((_1203 * _1203) + (_1202 * _1202)) + (_1204 * _1204)) / (_1199 + 9.9999997473787516355514526367188e-06);
        float _3755 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1229 = _1228 * 2.0;
        float _1233 = (1.0 - _1228) / (_1228 + 1.0);
        float _3766 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1243 = ((((1.0 - _1234) * (_1229 + 2.0)) * exp2(log2(isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))) * (_1229 + 1.0))) + _1234) * _1199;
        float _1244 = _1167 * 0.5;
        float _1245 = _1177 * 0.5;
        float _1246 = _1187 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1260 = (dot(vec3(_442, _443, _444), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _3777 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1269 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1200 + 9.9999997473787516355514526367188e-06);
        float _3788 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _3799 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * (_1271 + 1.0))) + _1276) * _1200;
        float _1286 = _1168 * 0.5;
        float _1287 = _1178 * 0.5;
        float _1288 = _1188 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1302 = (dot(vec3(_442, _443, _444), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _3810 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1311 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1201 + 9.9999997473787516355514526367188e-06);
        float _3821 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _3832 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) * (_1313 + 1.0))) + _1318) * _1201;
        _1335 = _1168;
        _1336 = _1167;
        _1337 = _1166;
        _1338 = _1178;
        _1339 = _1177;
        _1340 = _1176;
        _1341 = _1188;
        _1342 = _1187;
        _1343 = _1186;
        _1344 = _1201;
        _1345 = _1200;
        _1346 = _1199;
        _1347 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)));
        _1348 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
        _1349 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
    }
    else
    {
        _1335 = _1027;
        _1336 = _1027;
        _1337 = _1027;
        _1338 = _1027;
        _1339 = _1027;
        _1340 = _1027;
        _1341 = _1027;
        _1342 = _1027;
        _1343 = _1027;
        _1344 = _1027;
        _1345 = _1027;
        _1346 = _1027;
        _1347 = 0.0;
        _1348 = 0.0;
        _1349 = 0.0;
    }
    float _1359 = (cbModelParam._m0[1u].x * (_1347 - _1039)) + _1039;
    float _1360 = (cbModelParam._m0[1u].x * (_1348 - _1040)) + _1040;
    float _1361 = (cbModelParam._m0[1u].x * (_1349 - _1041)) + _1041;
    float _1382 = fma(_1361, cbSceneParam._m0[89u].z, fma(_1360, cbSceneParam._m0[89u].y, _1359 * cbSceneParam._m0[89u].x));
    float _1385 = fma(_1361, cbSceneParam._m0[90u].z, fma(_1360, cbSceneParam._m0[90u].y, _1359 * cbSceneParam._m0[90u].x));
    float _1388 = fma(_1361, cbSceneParam._m0[91u].z, fma(_1360, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1359));
    float _1403 = _633 * 0.5;
    float _1404 = _634 * 0.5;
    float _1405 = _635 * 0.5;
    float _1406 = dot(vec4(_1403, _1404, _1405, 1.0), vec4(_1337, _1340, _1343, _1346));
    float _1409 = dot(vec4(_1403, _1404, _1405, 1.0), vec4(_1336, _1339, _1342, _1345));
    float _1412 = dot(vec4(_1403, _1404, _1405, 1.0), vec4(_1335, _1338, _1341, _1344));
    float _1446;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1419 = dot(vec4(_1403, _1404, _1405, 1.0), vec4(_1026, _1030, _1033, _1036));
        float _1423 = dot(vec4(_1403, _1404, _1405, 1.0), vec4(_1028, _1031, _1034, _1037));
        float _1427 = dot(vec4(_1403, _1404, _1405, 1.0), vec4(_1029, _1032, _1035, _1038));
        float _1434 = dot(vec4(cbModelParam._m0[39u]), vec4(_1403, _1404, _1405, 1.0));
        _1446 = dot(vec3(isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)), isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)), isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1434) ? 0.0 : (isnan(0.0) ? _1434 : max(0.0, _1434))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1446 = 1.0;
    }
    float _1457;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1448 = dot(vec4(cbModelParam._m0[40u]), vec4(_1403, _1404, _1405, 1.0));
        _1457 = dot(vec3(isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)), isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)), isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1448) ? 0.0 : (isnan(0.0) ? _1448 : max(0.0, _1448))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1457 = 1.0;
    }
    float _1461 = (_1457 * cbModelParam._m0[1u].x) + (_1446 * (1.0 - cbModelParam._m0[1u].x));
    float _1471 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _445);
    float _1472 = isnan(_1471) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1471 : min(cbModelParam._m0[25u].z, _1471));
    float _1554;
    float _1556;
    float _1558;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1521 = fma(_697, cbModelParam._m0[13u].z, fma(_693, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _689)) + cbModelParam._m0[13u].w;
        float _1525 = fma(_697, cbModelParam._m0[14u].z, fma(_693, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _689)) + cbModelParam._m0[14u].w;
        float _1529 = fma(_697, cbModelParam._m0[15u].z, fma(_693, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _689)) + cbModelParam._m0[15u].w;
        float _1532 = fma(_635, cbModelParam._m0[13u].z, fma(_634, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _633));
        float _1535 = fma(_635, cbModelParam._m0[14u].z, fma(_634, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _633));
        float _1538 = fma(_635, cbModelParam._m0[15u].z, fma(_634, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _633));
        float _1566;
        if (_1532 > 0.0)
        {
            _1566 = abs((1.0 - _1521) / _1532);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1532 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1521 + 1.0) / _1532);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1566 = frontier_phi_19_17_ladder;
        }
        float _1772;
        if (_1535 > 0.0)
        {
            _1772 = abs((1.0 - _1525) / _1535);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1535 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1525 + 1.0) / _1535);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1772 = frontier_phi_28_24_ladder;
        }
        float _2026;
        if (_1538 > 0.0)
        {
            _2026 = abs((1.0 - _1529) / _1538);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1538 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1529 + 1.0) / _1538);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2026 = frontier_phi_40_35_ladder;
        }
        float _2028 = isnan(_1772) ? _1566 : (isnan(_1566) ? _1772 : min(_1566, _1772));
        float _2029 = isnan(_2026) ? _2028 : (isnan(_2028) ? _2026 : min(_2028, _2026));
        float _2033 = (_2029 * _1532) + _1521;
        float _2034 = (_2029 * _1535) + _1525;
        float _2035 = (_2029 * _1538) + _1529;
        float _2036 = _2029 * 9.9999997473787516355514526367188e-05;
        float _2038 = (-1.0) - _2036;
        float _2040 = _2036 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2035 > _2040) || ((_2035 < _2038) || ((_2034 > _2040) || ((_2034 < _2038) || ((_2033 < _2038) || (_2033 > _2040))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2163 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2035, cbModelParam._m0[9u].z, fma(_2034, cbModelParam._m0[9u].y, _2033 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2035, cbModelParam._m0[10u].z, fma(_2034, cbModelParam._m0[10u].y, _2033 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2035, cbModelParam._m0[11u].z, fma(_2034, cbModelParam._m0[11u].y, _2033 * cbModelParam._m0[11u].x))), _1472);
            frontier_phi_18_40_ladder = _2163.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2163.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2163.x * cbModelParam._m0[1u].y;
        }
        _1554 = frontier_phi_18_40_ladder_2;
        _1556 = frontier_phi_18_40_ladder_1;
        _1558 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1542 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_633, _634, _635), _1472);
        _1554 = _1542.x * cbModelParam._m0[1u].y;
        _1556 = _1542.y * cbModelParam._m0[1u].y;
        _1558 = _1542.z * cbModelParam._m0[1u].y;
    }
    float _1562 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _445);
    float _1563 = isnan(_1562) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1562 : min(cbModelParam._m0[25u].w, _1562));
    float _1655;
    float _1657;
    float _1659;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1619 = fma(_697, cbModelParam._m0[21u].z, fma(_693, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _689)) + cbModelParam._m0[21u].w;
        float _1623 = fma(_697, cbModelParam._m0[22u].z, fma(_693, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _689)) + cbModelParam._m0[22u].w;
        float _1627 = fma(_697, cbModelParam._m0[23u].z, fma(_693, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _689)) + cbModelParam._m0[23u].w;
        float _1630 = fma(_635, cbModelParam._m0[21u].z, fma(_634, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _633));
        float _1633 = fma(_635, cbModelParam._m0[22u].z, fma(_634, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _633));
        float _1636 = fma(_635, cbModelParam._m0[23u].z, fma(_634, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _633));
        float _1777;
        if (_1630 > 0.0)
        {
            _1777 = abs((1.0 - _1619) / _1630);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1630 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1619 + 1.0) / _1630);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1777 = frontier_phi_30_26_ladder;
        }
        float _2053;
        if (_1633 > 0.0)
        {
            _2053 = abs((1.0 - _1623) / _1633);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1633 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1623 + 1.0) / _1633);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2053 = frontier_phi_42_37_ladder;
        }
        float _2266;
        if (_1636 > 0.0)
        {
            _2266 = abs((1.0 - _1627) / _1636);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1636 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1627 + 1.0) / _1636);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2266 = frontier_phi_51_48_ladder;
        }
        float _2268 = isnan(_2053) ? _1777 : (isnan(_1777) ? _2053 : min(_1777, _2053));
        float _2269 = isnan(_2266) ? _2268 : (isnan(_2268) ? _2266 : min(_2268, _2266));
        float _2273 = (_2269 * _1630) + _1619;
        float _2274 = (_2269 * _1633) + _1623;
        float _2275 = (_2269 * _1636) + _1627;
        float _2276 = _2269 * 9.9999997473787516355514526367188e-05;
        float _2277 = (-1.0) - _2276;
        float _2279 = _2276 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2275 > _2279) || ((_2275 < _2277) || ((_2274 > _2279) || ((_2274 < _2277) || ((_2273 < _2277) || (_2273 > _2279))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2474 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2275, cbModelParam._m0[17u].z, fma(_2274, cbModelParam._m0[17u].y, _2273 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2275, cbModelParam._m0[18u].z, fma(_2274, cbModelParam._m0[18u].y, _2273 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2275, cbModelParam._m0[19u].z, fma(_2274, cbModelParam._m0[19u].y, _2273 * cbModelParam._m0[19u].x))), _1563);
            frontier_phi_27_51_ladder = _2474.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2474.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2474.x * cbModelParam._m0[1u].z;
        }
        _1655 = frontier_phi_27_51_ladder_2;
        _1657 = frontier_phi_27_51_ladder_1;
        _1659 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1639 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_633, _634, _635), _1563);
        _1655 = _1639.x * cbModelParam._m0[1u].z;
        _1657 = _1639.y * cbModelParam._m0[1u].z;
        _1659 = _1639.z * cbModelParam._m0[1u].z;
    }
    float _1672 = (((_660 * _609) + _661) * _625) * ((cbModelParam._m0[1u].w * (_1655 - _1554)) + _1554);
    float _1674 = (((_660 * _611) + _661) * _625) * ((cbModelParam._m0[1u].w * (_1657 - _1556)) + _1556);
    float _1676 = (((_660 * _612) + _661) * _625) * ((cbModelParam._m0[1u].w * (_1659 - _1558)) + _1558);
    float _1679 = fma(_1676, cbSceneParam._m0[89u].z, fma(_1674, cbSceneParam._m0[89u].y, _1672 * cbSceneParam._m0[89u].x));
    float _1682 = fma(_1676, cbSceneParam._m0[90u].z, fma(_1674, cbSceneParam._m0[90u].y, _1672 * cbSceneParam._m0[90u].x));
    float _1685 = fma(_1676, cbSceneParam._m0[91u].z, fma(_1674, cbSceneParam._m0[91u].y, _1672 * cbSceneParam._m0[91u].x));
    uvec4 _1695 = floatBitsToUint(cbInstanceData._m0[_250 + 5u]);
    uint _1697 = _1695.x * 14u;
    uint _1698 = _1697 + 13u;
    float _1705 = _625 + (-1.0);
    float _1710 = (cbLight._m0[_1698].x * _1705) + 1.0;
    float _1711 = (cbLight._m0[_1698].y * _1705) + 1.0;
    float _1712 = (cbLight._m0[_1698].z * _1705) + 1.0;
    float _1713 = (cbLight._m0[_1698].w * _1705) + 1.0;
    uint _1714 = _1697 + 5u;
    float _1720 = isnan(1.0) ? _1711 : (isnan(_1711) ? 1.0 : min(_1711, 1.0));
    uint _1724 = _1697 + 4u;
    float _1731 = isnan(1.0) ? _1710 : (isnan(_1710) ? 1.0 : min(_1710, 1.0));
    uint _1735 = _1697 | 1u;
    float _1746 = dot(vec3(cbLight._m0[_1697].xyz), vec3(_442, _443, _444));
    float _1749 = dot(vec3(cbLight._m0[_1735].xyz), vec3(_442, _443, _444));
    float _3968 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
    float _3979 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
    float _1754 = (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * 0.3183098733425140380859375;
    float _1756 = (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * 0.3183098733425140380859375;
    float _1763 = ((cbLight._m0[_1714].x * _1720) * _1756) + ((cbLight._m0[_1724].x * _1731) * _1754);
    float _1764 = ((_1720 * cbLight._m0[_1714].y) * _1756) + ((_1731 * cbLight._m0[_1724].y) * _1754);
    float _1765 = ((_1720 * cbLight._m0[_1714].z) * _1756) + ((_1731 * cbLight._m0[_1724].z) * _1754);
    uvec4 _1769 = floatBitsToUint(cbLight._m0[_1697 + 12u]);
    bool _1771 = _1769.x == 0u;
    float _1782;
    float _1784;
    float _1786;
    if (_1771)
    {
        _1782 = _1763;
        _1784 = _1764;
        _1786 = _1765;
    }
    else
    {
        uint _1790 = _1697 + 6u;
        float _1806 = (dot(vec3(cbLight._m0[_1697 + 2u].xyz), vec3(_442, _443, _444)) * 0.5) + 0.5;
        float _1807 = _1806 * _1806;
        float _3990 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
        float _1808 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1809 = isnan(1.0) ? _1712 : (isnan(_1712) ? 1.0 : min(_1712, 1.0));
        _1782 = (((cbLight._m0[_1790].x * 0.3183098733425140380859375) * _1808) * _1809) + _1763;
        _1784 = (((cbLight._m0[_1790].y * 0.3183098733425140380859375) * _1808) * _1809) + _1764;
        _1786 = (((cbLight._m0[_1790].z * 0.3183098733425140380859375) * _1808) * _1809) + _1765;
    }
    bool _1789 = _1769.y == 0u;
    float _1827;
    float _1829;
    float _1831;
    if (_1789)
    {
        _1827 = _1782;
        _1829 = _1784;
        _1831 = _1786;
    }
    else
    {
        uint _1997 = _1697 + 7u;
        float _2013 = (dot(vec3(cbLight._m0[_1697 + 3u].xyz), vec3(_442, _443, _444)) * 0.5) + 0.5;
        float _2014 = _2013 * _2013;
        float _4006 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
        float _2015 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _2016 = isnan(1.0) ? _1713 : (isnan(_1713) ? 1.0 : min(_1713, 1.0));
        _1827 = (((cbLight._m0[_1997].x * 0.3183098733425140380859375) * _2015) * _2016) + _1782;
        _1829 = (((cbLight._m0[_1997].y * 0.3183098733425140380859375) * _2015) * _2016) + _1784;
        _1831 = (((cbLight._m0[_1997].z * 0.3183098733425140380859375) * _2015) * _2016) + _1786;
    }
    uint _1834 = _1697 + 8u;
    float _1847 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1697].w)) * _445) * 0.949999988079071044921875);
    float _1848 = _1847 * _1847;
    float _1849 = cbLight._m0[_1697].x + _527;
    float _1850 = cbLight._m0[_1697].y + _528;
    float _1851 = cbLight._m0[_1697].z + _529;
    float _1855 = inversesqrt(dot(vec3(_1849, _1850, _1851), vec3(_1849, _1850, _1851)));
    float _1856 = _1855 * _1849;
    float _1857 = _1855 * _1850;
    float _1858 = _1855 * _1851;
    float _1859 = dot(vec3(_442, _443, _444), vec3(cbLight._m0[_1697].xyz));
    float _4022 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
    float _1862 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _4033 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _1863 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    float _1864 = dot(vec3(_442, _443, _444), vec3(_1856, _1857, _1858));
    float _4044 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _1867 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _1868 = dot(vec3(cbLight._m0[_1697].xyz), vec3(_1856, _1857, _1858));
    float _4055 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _1872 = _1848 * _1848;
    float _1876 = ((_1867 * _1867) * (_1872 + (-1.0))) + 1.0;
    float _1884 = exp2(log2(1.0 - (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0)))) * 5.0);
    float _1885 = 0.959999978542327880859375 - _606;
    float _1887 = 0.959999978542327880859375 - _607;
    float _1888 = 0.959999978542327880859375 - _608;
    float _1895 = 1.0 - _1848;
    float _1906 = (0.5 / (((_1863 * ((_1862 * _1895) + _1848)) + 9.9999999392252902907785028219223e-09) + (((_1863 * _1895) + _1848) * _1862))) * _1862;
    float _4066 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _1908 = (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_1872 / ((_1876 * _1876) * 3.141590118408203125));
    uint _1919 = _1697 + 9u;
    float _1930 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1735].w)) * _445) * 0.949999988079071044921875);
    float _1931 = _1930 * _1930;
    float _1932 = cbLight._m0[_1735].x + _527;
    float _1933 = cbLight._m0[_1735].y + _528;
    float _1934 = cbLight._m0[_1735].z + _529;
    float _1938 = inversesqrt(dot(vec3(_1932, _1933, _1934), vec3(_1932, _1933, _1934)));
    float _1939 = _1938 * _1932;
    float _1940 = _1938 * _1933;
    float _1941 = _1938 * _1934;
    float _1942 = dot(vec3(_442, _443, _444), vec3(cbLight._m0[_1735].xyz));
    float _4077 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _1945 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _1946 = dot(vec3(_442, _443, _444), vec3(_1939, _1940, _1941));
    float _4088 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _1949 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _1950 = dot(vec3(cbLight._m0[_1735].xyz), vec3(_1939, _1940, _1941));
    float _4099 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _1954 = _1931 * _1931;
    float _1958 = ((_1949 * _1949) * (_1954 + (-1.0))) + 1.0;
    float _1965 = exp2(log2(1.0 - (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0)))) * 5.0);
    float _1972 = 1.0 - _1931;
    float _1982 = (0.5 / (((_1863 * ((_1945 * _1972) + _1931)) + 9.9999999392252902907785028219223e-09) + (((_1863 * _1972) + _1931) * _1945))) * _1945;
    float _4110 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _1984 = (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_1954 / ((_1958 * _1958) * 3.141590118408203125));
    float _1994 = (((((_1965 * _1885) + _609) * cbLight._m0[_1919].x) * _1984) * _1720) + (((((_1884 * _1885) + _609) * cbLight._m0[_1834].x) * _1908) * _1731);
    float _1995 = (((((_1965 * _1887) + _611) * cbLight._m0[_1919].y) * _1984) * _1720) + (((((_1884 * _1887) + _611) * cbLight._m0[_1834].y) * _1908) * _1731);
    float _1996 = (((((_1965 * _1888) + _612) * cbLight._m0[_1919].z) * _1984) * _1720) + (((((_1884 * _1888) + _612) * cbLight._m0[_1834].z) * _1908) * _1731);
    float _2058;
    float _2060;
    float _2062;
    if (_1771)
    {
        _2058 = _1994;
        _2060 = _1995;
        _2062 = _1996;
    }
    else
    {
        uint _2064 = _1697 + 2u;
        uint _2068 = _1697 + 10u;
        float _2082 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2064].w)) * _445) * 0.949999988079071044921875);
        float _2083 = _2082 * _2082;
        float _2084 = cbLight._m0[_2064].x + _527;
        float _2085 = cbLight._m0[_2064].y + _528;
        float _2086 = cbLight._m0[_2064].z + _529;
        float _2090 = inversesqrt(dot(vec3(_2084, _2085, _2086), vec3(_2084, _2085, _2086)));
        float _2091 = _2090 * _2084;
        float _2092 = _2090 * _2085;
        float _2093 = _2090 * _2086;
        float _2094 = dot(vec3(_442, _443, _444), vec3(cbLight._m0[_2064].xyz));
        float _4121 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        float _2097 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _2098 = dot(vec3(_442, _443, _444), vec3(_2091, _2092, _2093));
        float _4132 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        float _2101 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _2102 = dot(vec3(cbLight._m0[_2064].xyz), vec3(_2091, _2092, _2093));
        float _4143 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
        float _2106 = _2083 * _2083;
        float _2110 = ((_2101 * _2101) * (_2106 + (-1.0))) + 1.0;
        float _2117 = exp2(log2(1.0 - (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0)))) * 5.0);
        float _2124 = 1.0 - _2083;
        float _2134 = (0.5 / (((_1863 * ((_2097 * _2124) + _2083)) + 9.9999999392252902907785028219223e-09) + (((_1863 * _2124) + _2083) * _2097))) * _2097;
        float _4154 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        float _2136 = (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_2106 / ((_2110 * _2110) * 3.141590118408203125));
        float _2137 = isnan(1.0) ? _1712 : (isnan(_1712) ? 1.0 : min(_1712, 1.0));
        _2058 = (((((_2117 * _1885) + _609) * cbLight._m0[_2068].x) * _2136) * _2137) + _1994;
        _2060 = (((((_2117 * _1887) + _611) * cbLight._m0[_2068].y) * _2136) * _2137) + _1995;
        _2062 = (((((_2117 * _1888) + _612) * cbLight._m0[_2068].z) * _2136) * _2137) + _1996;
    }
    float _2172;
    float _2174;
    float _2176;
    if (_1789)
    {
        _2172 = _2058;
        _2174 = _2060;
        _2176 = _2062;
    }
    else
    {
        uint _2183 = _1697 + 3u;
        uint _2187 = _1697 + 11u;
        float _2201 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2183].w)) * _445) * 0.949999988079071044921875);
        float _2202 = _2201 * _2201;
        float _2203 = cbLight._m0[_2183].x + _527;
        float _2204 = cbLight._m0[_2183].y + _528;
        float _2205 = cbLight._m0[_2183].z + _529;
        float _2209 = inversesqrt(dot(vec3(_2203, _2204, _2205), vec3(_2203, _2204, _2205)));
        float _2210 = _2209 * _2203;
        float _2211 = _2209 * _2204;
        float _2212 = _2209 * _2205;
        float _2213 = dot(vec3(_442, _443, _444), vec3(cbLight._m0[_2183].xyz));
        float _4170 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        float _2216 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _2217 = dot(vec3(_442, _443, _444), vec3(_2210, _2211, _2212));
        float _4181 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2220 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _2221 = dot(vec3(cbLight._m0[_2183].xyz), vec3(_2210, _2211, _2212));
        float _4192 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2225 = _2202 * _2202;
        float _2229 = ((_2220 * _2220) * (_2225 + (-1.0))) + 1.0;
        float _2236 = exp2(log2(1.0 - (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0)))) * 5.0);
        float _2243 = 1.0 - _2202;
        float _2253 = (0.5 / (((_1863 * ((_2216 * _2243) + _2202)) + 9.9999999392252902907785028219223e-09) + (((_1863 * _2243) + _2202) * _2216))) * _2216;
        float _4203 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2255 = (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_2225 / ((_2229 * _2229) * 3.141590118408203125));
        float _2256 = isnan(1.0) ? _1713 : (isnan(_1713) ? 1.0 : min(_1713, 1.0));
        _2172 = (((((_2236 * _1885) + _609) * cbLight._m0[_2187].x) * _2255) * _2256) + _2058;
        _2174 = (((((_2236 * _1887) + _611) * cbLight._m0[_2187].y) * _2255) * _2256) + _2060;
        _2176 = (((((_2236 * _1888) + _612) * cbLight._m0[_2187].z) * _2255) * _2256) + _2062;
    }
    float _2391;
    float _2393;
    float _2395;
    float _2397;
    float _2399;
    float _2401;
    if (_1695.y == 0u)
    {
        float _2331 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2332 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2331;
        float _2333 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2331;
        float _2334 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2331;
        uvec4 _2346 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2347 = _2346.x;
        uint _2358 = uint((float(_2346.y) * floor(float(uint(cbSceneParam._m0[85u].y * _546) / _2347))) + floor(float(uint(cbSceneParam._m0[85u].x * _545) / _2347)));
        float _2368 = (log2(_2334 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2369 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        uint _2372 = uint(isnan(14.0) ? _2369 : (isnan(_2369) ? 14.0 : min(_2369, 14.0)));
        uvec4 _2377 = texelFetch(g_lightClusterGridBuffer, int(((_2372 << 2u) + (_2358 << 6u)) >> 2u));
        uint _2378 = _2377.x;
        uint _2379 = _2346.z;
        float _2479;
        float _2481;
        float _2483;
        float _2485;
        float _2487;
        float _2489;
        if (((((1u << ((_2379 >> 4u) & 15u)) + 4294967295u) & _2378) == 0u) || ((_2379 & 240u) == 0u))
        {
            _2479 = 0.0;
            _2481 = 0.0;
            _2483 = 0.0;
            _2485 = 0.0;
            _2487 = 0.0;
            _2489 = 0.0;
        }
        else
        {
            float _2480;
            float _2482;
            float _2484;
            float _2486;
            float _2488;
            float _2490;
            float _2632 = 0.0;
            float _2633 = 0.0;
            float _2634 = 0.0;
            float _2635 = 0.0;
            float _2636 = 0.0;
            float _2637 = 0.0;
            uint _2638 = 0u;
            uint _2647;
            bool _2648;
            for (;;)
            {
                _2647 = texelFetch(g_lightClassification, int((((_2372 << 5u) + (_2358 << 9u)) + (_2638 << 2u)) >> 2u)).x;
                _2648 = _2647 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2648)
                {
                    frontier_phi_68_pred = _2632;
                    frontier_phi_68_pred_1 = _2637;
                    frontier_phi_68_pred_2 = _2636;
                    frontier_phi_68_pred_3 = _2635;
                    frontier_phi_68_pred_4 = _2634;
                    frontier_phi_68_pred_5 = _2633;
                }
                else
                {
                    float _2777;
                    float _2778;
                    float _2779;
                    float _2780;
                    float _2781;
                    float _2782;
                    uint _2783;
                    _2777 = _2632;
                    _2778 = _2633;
                    _2779 = _2634;
                    _2780 = _2635;
                    _2781 = _2636;
                    _2782 = _2637;
                    _2783 = _2647;
                    float _2704;
                    float _2705;
                    float _2706;
                    float _2707;
                    float _2708;
                    float _2709;
                    for (;;)
                    {
                        uint _2787 = uint(findLSB(_2783)) + (_2638 << 5u);
                        uint _2784 = (_2783 + 4294967295u) & _2783;
                        uint _2789 = _2787 * 48u;
                        vec4 _2803 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2789)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 3u)).x));
                        uint _2809 = (_2787 * 48u) + 4u;
                        vec4 _2822 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2809)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 3u)).x));
                        uint _2828 = (_2787 * 48u) + 8u;
                        vec3 _2839 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2828)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 2u)).x));
                        float _2843 = _2803.x - _2332;
                        float _2844 = _2803.y - _2333;
                        float _2845 = _2803.z - _2334;
                        float _2846 = dot(vec3(_2843, _2844, _2845), vec3(_2843, _2844, _2845));
                        float _2849 = inversesqrt(_2846);
                        float _2850 = _2849 * _2843;
                        float _2851 = _2849 * _2844;
                        float _2852 = _2849 * _2845;
                        float _2853 = dot(vec3(_566, _569, _572), vec3(_2850, _2851, _2852));
                        float _2858 = 1.0 - (_2846 * _2803.w);
                        float _4229 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
                        float _2859 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
                        float _2860 = sqrt(_2846) * _2822.w;
                        float _2863 = 1.39999997615814208984375 / (_2860 + 1.39999997615814208984375);
                        float _2864 = _2863 * _2863;
                        float _2867 = ((1.0 - _2864) * _2853) + _2864;
                        float _2870 = _2860 * _2860;
                        float _2874 = ((isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0))) * _2859) / ((_2870 * 0.699999988079071044921875) + 1.0);
                        float _2878 = (-0.0) - _2332;
                        float _2879 = (-0.0) - _2333;
                        float _2880 = (-0.0) - _2334;
                        float _2884 = inversesqrt(dot(vec3(_2878, _2879, _2880), vec3(_2878, _2879, _2880)));
                        float _2885 = _2884 * _2878;
                        float _2886 = _2884 * _2879;
                        float _2887 = _2884 * _2880;
                        float _2895 = exp2(log2(1.0 / ((_2870 * 3.5) + 5.0)) * 0.25);
                        float _2896 = 1.0 - _641;
                        float _2903 = sqrt(1.0 - ((1.0 - (_2896 * _2896)) * (1.0 - (_2895 * _2895))));
                        float _2904 = _2903 * _2903;
                        float _2905 = _2904 * _2904;
                        float _2906 = _2885 + _2850;
                        float _2907 = _2886 + _2851;
                        float _2908 = _2887 + _2852;
                        float _2912 = inversesqrt(dot(vec3(_2906, _2907, _2908), vec3(_2906, _2907, _2908)));
                        float _2916 = dot(vec3(_566, _569, _572), vec3(_2885, _2886, _2887));
                        float _4245 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
                        float _2919 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
                        float _2920 = dot(vec3(_566, _569, _572), vec3(_2912 * _2906, _2912 * _2907, _2912 * _2908));
                        float _4256 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
                        float _2923 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                        float _2927 = ((_2923 * _2923) * (_2905 + (-1.0))) + 1.0;
                        float _2928 = _2863 * _2904;
                        float _2929 = _2928 * _2928;
                        float _2932 = ((1.0 - _2929) * _2853) + _2929;
                        float _4267 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
                        float _2933 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                        float _2934 = 1.0 - _2904;
                        float _2944 = (0.5 / (((_2933 * ((_2919 * _2934) + _2904)) + 9.9999999392252902907785028219223e-09) + (((_2933 * _2934) + _2904) * _2919))) * _2933;
                        float _4278 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
                        float _2955 = (((_2905 * 3.1415927410125732421875) * (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0)))) / ((_2927 * _2927) * ((_2870 * 2.1991131305694580078125) + 3.141590118408203125))) * _2859;
                        _2707 = (_2874 * _2822.x) + _2780;
                        _2708 = (_2874 * _2822.y) + _2781;
                        _2709 = (_2874 * _2822.z) + _2782;
                        _2704 = (_2955 * _2839.x) + _2777;
                        _2705 = (_2955 * _2839.y) + _2778;
                        _2706 = (_2955 * _2839.z) + _2779;
                        if (_2784 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2777 = _2704;
                            _2778 = _2705;
                            _2779 = _2706;
                            _2780 = _2707;
                            _2781 = _2708;
                            _2782 = _2709;
                            _2783 = _2784;
                        }
                    }
                    frontier_phi_68_pred = _2704;
                    frontier_phi_68_pred_1 = _2709;
                    frontier_phi_68_pred_2 = _2708;
                    frontier_phi_68_pred_3 = _2707;
                    frontier_phi_68_pred_4 = _2706;
                    frontier_phi_68_pred_5 = _2705;
                }
                _2480 = frontier_phi_68_pred;
                _2490 = frontier_phi_68_pred_1;
                _2488 = frontier_phi_68_pred_2;
                _2486 = frontier_phi_68_pred_3;
                _2484 = frontier_phi_68_pred_4;
                _2482 = frontier_phi_68_pred_5;
                uint _2639 = _2638 + 1u;
                if (_2639 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2632 = _2480;
                    _2633 = _2482;
                    _2634 = _2484;
                    _2635 = _2486;
                    _2636 = _2488;
                    _2637 = _2490;
                    _2638 = _2639;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2479 = _2480;
            _2481 = _2482;
            _2483 = _2484;
            _2485 = _2486;
            _2487 = _2488;
            _2489 = _2490;
        }
        uvec4 _2493 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2494 = _2493.z;
        uint _2496 = (_2494 >> 8u) & 15u;
        float _2600;
        float _2602;
        float _2604;
        float _2606;
        float _2608;
        float _2610;
        if (((4294967295u << _2496) & _2378) == 0u)
        {
            _2600 = _2479;
            _2602 = _2481;
            _2604 = _2483;
            _2606 = _2485;
            _2608 = _2487;
            _2610 = _2489;
        }
        else
        {
            float _2625 = inversesqrt(dot(vec3(_2332, _2333, _2334), vec3(_2332, _2333, _2334)));
            float _2626 = _2625 * _2332;
            float _2627 = _2625 * _2333;
            float _2628 = _2625 * _2334;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2496 < ((_2494 >> 12u) & 15u))
            {
                float _2601;
                float _2603;
                float _2605;
                float _2607;
                float _2609;
                float _2611;
                float _2760 = _2479;
                float _2761 = _2481;
                float _2762 = _2483;
                float _2763 = _2485;
                float _2764 = _2487;
                float _2765 = _2489;
                uint _2766 = _2496;
                uint _2775;
                bool _2776;
                for (;;)
                {
                    _2775 = texelFetch(g_lightClassification, int((((_2372 << 5u) + (_2358 << 9u)) + (_2766 << 2u)) >> 2u)).x;
                    _2776 = _2775 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2776)
                    {
                        frontier_phi_79_pred = _2765;
                        frontier_phi_79_pred_1 = _2764;
                        frontier_phi_79_pred_2 = _2763;
                        frontier_phi_79_pred_3 = _2762;
                        frontier_phi_79_pred_4 = _2761;
                        frontier_phi_79_pred_5 = _2760;
                    }
                    else
                    {
                        float _2969;
                        float _2970;
                        float _2971;
                        float _2972;
                        float _2973;
                        float _2974;
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3266;
                        float _3267;
                        float _3268;
                        float _2982 = _2760;
                        float _2983 = _2761;
                        float _2984 = _2762;
                        float _2985 = _2763;
                        float _2986 = _2764;
                        float _2987 = _2765;
                        uint _2988 = _2775;
                        uint _2989;
                        vec4 _3014;
                        float _3015;
                        vec4 _3030;
                        vec3 _3042;
                        vec4 _3057;
                        vec4 _3072;
                        float _3119;
                        bool _3120;
                        for (;;)
                        {
                            uint _2999 = ((_2766 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2988));
                            _2989 = (_2988 + 4294967295u) & _2988;
                            uint _3001 = _2999 * 40u;
                            _3014 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3001)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 3u)).x));
                            _3015 = _3014.w;
                            uint _3017 = (_2999 * 40u) + 4u;
                            _3030 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3017)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 3u)).x));
                            uint _3032 = (_2999 * 40u) + 8u;
                            _3042 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3032)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 2u)).x));
                            uint _3044 = (_2999 * 40u) + 16u;
                            _3057 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3044)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 3u)).x));
                            uint _3059 = (_2999 * 40u) + 20u;
                            _3072 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3059)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 3u)).x));
                            uint _3075 = (_2999 * 40u) + 24u;
                            vec4 _3088 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3075)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 3u)).x));
                            uint _3094 = (_2999 * 40u) + 28u;
                            vec4 _3107 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3094)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 3u)).x));
                            _3119 = fma(_2334, _3107.z, fma(_2333, _3107.y, _3107.x * _2332)) + _3107.w;
                            _3120 = !((fma(_2334, _3088.z, fma(_2333, _3088.y, _3088.x * _2332)) + _3088.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3120)
                            {
                                float _3147 = _3014.x - _2332;
                                float _3148 = _3014.y - _2333;
                                float _3149 = _3014.z - _2334;
                                float _3150 = dot(vec3(_3147, _3148, _3149), vec3(_3147, _3148, _3149));
                                float _3153 = inversesqrt(_3150);
                                float _3154 = _3153 * _3147;
                                float _3155 = _3153 * _3148;
                                float _3156 = _3153 * _3149;
                                float _3160 = 1.0 - (_3150 / (_3015 * _3015));
                                float _4289 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                                float _3161 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
                                float _3165 = sqrt(_3150) * _3030.w;
                                float _3167 = 1.39999997615814208984375 / (_3165 + 1.39999997615814208984375);
                                float _3168 = _3167 * _3167;
                                float _3171 = ((1.0 - _3168) * dot(vec3(_3154, _3155, _3156), vec3(_566, _569, _572))) + _3168;
                                float _3174 = _3165 * _3165;
                                float _3178 = (fma(_2334, _3057.z, fma(_2333, _3057.y, _3057.x * _2332)) + _3057.w) / _3119;
                                float _3179 = (fma(_2334, _3072.z, fma(_2333, _3072.y, _3072.x * _2332)) + _3072.w) / _3119;
                                float _3183 = 1.0 - dot(vec2(_3178, _3179), vec2(_3178, _3179));
                                float _4305 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
                                float _3184 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
                                float _3185 = _3184 * (((isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0))) * _3161) / ((_3174 * 0.699999988079071044921875) + 1.0));
                                float _3197 = exp2(log2(1.0 / ((_3174 * 3.5) + 5.0)) * 0.25);
                                float _3198 = 1.0 - _641;
                                float _3205 = sqrt(1.0 - ((1.0 - (_3198 * _3198)) * (1.0 - (_3197 * _3197))));
                                float _3206 = _3205 * _3205;
                                float _3207 = _3206 * _3206;
                                float _3208 = _3154 - _2626;
                                float _3209 = _3155 - _2627;
                                float _3210 = _3156 - _2628;
                                float _3214 = inversesqrt(dot(vec3(_3208, _3209, _3210), vec3(_3208, _3209, _3210)));
                                float _3218 = dot(vec3(_566, _569, _572), vec3((-0.0) - _2626, (-0.0) - _2627, (-0.0) - _2628));
                                float _4316 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                                float _3221 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
                                float _3222 = dot(vec3(_566, _569, _572), vec3(_3214 * _3208, _3214 * _3209, _3214 * _3210));
                                float _4327 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                                float _3225 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
                                float _3229 = ((_3225 * _3225) * (_3207 + (-1.0))) + 1.0;
                                float _3230 = _3167 * _3206;
                                float _3231 = _3230 * _3230;
                                float _3237 = ((1.0 - _3231) * dot(vec3(_566, _569, _572), vec3(_3154, _3155, _3156))) + _3231;
                                float _4338 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                                float _3238 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
                                float _3239 = 1.0 - _3206;
                                float _3249 = (0.5 / (((_3238 * ((_3221 * _3239) + _3206)) + 9.9999999392252902907785028219223e-09) + (((_3238 * _3239) + _3206) * _3221))) * _3238;
                                float _4349 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                                float _3259 = (_3184 * _3161) * (((_3207 * 3.1415927410125732421875) * (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0)))) / ((_3229 * _3229) * ((_3174 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3185 * _3030.y;
                                frontier_phi_85_pred_1 = _3185 * _3030.x;
                                frontier_phi_85_pred_2 = _3259 * _3042.z;
                                frontier_phi_85_pred_3 = _3259 * _3042.y;
                                frontier_phi_85_pred_4 = _3259 * _3042.x;
                                frontier_phi_85_pred_5 = _3185 * _3030.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3267 = frontier_phi_85_pred;
                            _3266 = frontier_phi_85_pred_1;
                            _3265 = frontier_phi_85_pred_2;
                            _3264 = frontier_phi_85_pred_3;
                            _3263 = frontier_phi_85_pred_4;
                            _3268 = frontier_phi_85_pred_5;
                            _2972 = _3266 + _2985;
                            _2973 = _3267 + _2986;
                            _2974 = _3268 + _2987;
                            _2969 = _3263 + _2982;
                            _2970 = _3264 + _2983;
                            _2971 = _3265 + _2984;
                            if (_2989 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2982 = _2969;
                                _2983 = _2970;
                                _2984 = _2971;
                                _2985 = _2972;
                                _2986 = _2973;
                                _2987 = _2974;
                                _2988 = _2989;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2974;
                        frontier_phi_79_pred_1 = _2973;
                        frontier_phi_79_pred_2 = _2972;
                        frontier_phi_79_pred_3 = _2971;
                        frontier_phi_79_pred_4 = _2970;
                        frontier_phi_79_pred_5 = _2969;
                    }
                    _2611 = frontier_phi_79_pred;
                    _2609 = frontier_phi_79_pred_1;
                    _2607 = frontier_phi_79_pred_2;
                    _2605 = frontier_phi_79_pred_3;
                    _2603 = frontier_phi_79_pred_4;
                    _2601 = frontier_phi_79_pred_5;
                    uint _2767 = _2766 + 1u;
                    if (_2767 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2760 = _2601;
                        _2761 = _2603;
                        _2762 = _2605;
                        _2763 = _2607;
                        _2764 = _2609;
                        _2765 = _2611;
                        _2766 = _2767;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2605;
                frontier_phi_60_61_ladder_1 = _2611;
                frontier_phi_60_61_ladder_2 = _2609;
                frontier_phi_60_61_ladder_3 = _2607;
                frontier_phi_60_61_ladder_4 = _2603;
                frontier_phi_60_61_ladder_5 = _2601;
            }
            else
            {
                frontier_phi_60_61_ladder = _2483;
                frontier_phi_60_61_ladder_1 = _2489;
                frontier_phi_60_61_ladder_2 = _2487;
                frontier_phi_60_61_ladder_3 = _2485;
                frontier_phi_60_61_ladder_4 = _2481;
                frontier_phi_60_61_ladder_5 = _2479;
            }
            _2600 = frontier_phi_60_61_ladder_5;
            _2602 = frontier_phi_60_61_ladder_4;
            _2604 = frontier_phi_60_61_ladder;
            _2606 = frontier_phi_60_61_ladder_3;
            _2608 = frontier_phi_60_61_ladder_2;
            _2610 = frontier_phi_60_61_ladder_1;
        }
        float _2615 = isnan(1.0) ? _625 : (isnan(_625) ? 1.0 : min(_625, 1.0));
        _2391 = (_2615 * _2606) + _1827;
        _2393 = (_2615 * _2608) + _1829;
        _2395 = (_2615 * _2610) + _1831;
        _2397 = ((_2600 * _609) * _2615) + _2172;
        _2399 = ((_2602 * _611) * _2615) + _2174;
        _2401 = ((_2604 * _612) * _2615) + _2176;
    }
    else
    {
        _2391 = _1827;
        _2393 = _1829;
        _2395 = _1831;
        _2397 = _2172;
        _2399 = _2174;
        _2401 = _2176;
    }
    float _4365 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _4376 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _4387 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _2418 = ((isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_2391 + ((isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0))) * _625))) + ((_2397 + ((isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))) * _1461)) * cbPerFrame._m0[3u].x);
    float _2419 = ((isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_2393 + ((isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0))) * _625))) + ((_2399 + ((isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))) * _1461)) * cbPerFrame._m0[3u].x);
    float _2420 = ((isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_2395 + ((isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0))) * _625))) + ((_2401 + ((isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0))) * _1461)) * cbPerFrame._m0[3u].x);
    uint _2421 = _250 + 6u;
    float _2429 = _545 / cbSceneParam._m0[86u].x;
    float _2430 = _546 / cbSceneParam._m0[86u].y;
    vec4 _2444 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2429, _2430, (log2((isnan(cbSceneParam._m0[77u].w) ? _468 : (isnan(_468) ? cbSceneParam._m0[77u].w : min(_468, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2446 = _2444.x;
    float _2447 = _2444.y;
    float _2448 = _2444.z;
    float _2449 = _2444.w;
    float _2542;
    float _2544;
    float _2546;
    float _2548;
    if (_468 > cbSceneParam._m0[78u].w)
    {
        float _2504 = isnan(_468) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _468 : min(cbSceneParam._m0[80u].w, _468));
        float _2505 = _2504 / _468;
        float _2516 = _2505 * _520;
        float _2517 = _521 * _2505;
        float _2518 = (-0.0) - _2517;
        float _2520 = _2505 * _522;
        float _2522 = (cbSceneParam._m0[77u].w * _2518) / _2504;
        float _2523 = _2522 + cbSceneParam._m0[79u].w;
        float _2524 = cbSceneParam._m0[79u].w - _2517;
        float _2530 = sqrt(((_2516 * _2516) + (_2517 * _2517)) + (_2520 * _2520));
        float _2533 = (1.0 - (cbSceneParam._m0[77u].w / _2504)) * _2530;
        float _2538 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2540 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2717;
        if (abs((_2518 - _2522) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2717 = ((((_2523 > 0.0) ? exp2(_2538 * _2523) : (2.0 - exp2(_2540 * _2523))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2533;
        }
        else
        {
            float _2661 = 1.0 / cbSceneParam._m0[80u].x;
            float _2662 = isnan(_2524) ? _2523 : (isnan(_2523) ? _2524 : max(_2523, _2524));
            float _2663 = isnan(_2524) ? _2523 : (isnan(_2523) ? _2524 : min(_2523, _2524));
            float _2672 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : min(_2662, 0.0));
            float _2673 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : min(_2663, 0.0));
            _2717 = ((abs(_2530 / _2518) * cbSceneParam._m0[80u].y) * ((((_2672 - _2673) * 2.0) - ((exp2(_2538 * (isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0)))) - exp2(_2538 * (isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0))))) * _2661)) - ((exp2(_2540 * _2672) - exp2(_2540 * _2673)) * _2661))) + (_2533 * cbSceneParam._m0[80u].z);
        }
        vec4 _2719 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2429, _2430, 1.0), 0.0);
        float _2728 = exp2((_2717 * (-1.44269502162933349609375)) * (1.0 - _2719.w));
        float _2729 = log2(_2728);
        float _2745 = log2(_2449);
        _2542 = (exp2(_2745 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2729 * cbSceneParam._m0[78u].x)) * _2719.x) / cbSceneParam._m0[78u].x)) + _2446;
        _2544 = (exp2(_2745 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2729 * cbSceneParam._m0[78u].y)) * _2719.y) / cbSceneParam._m0[78u].y)) + _2447;
        _2546 = (exp2(_2745 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2729 * cbSceneParam._m0[78u].z)) * _2719.z) / cbSceneParam._m0[78u].z)) + _2448;
        _2548 = _2728 * _2449;
    }
    else
    {
        _2542 = _2446;
        _2544 = _2447;
        _2546 = _2448;
        _2548 = _2449;
    }
    bool _2755;
    vec4 _2558;
    vec4 _2580;
    float _2582;
    float _2586;
    float _2587;
    float _2588;
    float _2589;
    bool _2599;
    for (;;)
    {
        _2558 = cbMatDynParam._m0[0u];
        float _2560 = roundEven(_2558.y);
        bool _2561 = _2560 == 3.0;
        float _2562 = log2(_2548);
        float _2569 = exp2(_2562 * cbSceneParam._m0[78u].x) * _2418;
        float _2570 = exp2(_2562 * cbSceneParam._m0[78u].y) * _2419;
        float _2571 = exp2(_2562 * cbSceneParam._m0[78u].z) * _2420;
        float _2578 = _533 + (-0.5);
        _2580 = cbMtdParam._m0[1u];
        _2582 = _2580.y * _2578;
        float _2585 = (_2560 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2586 = _2585 * (_2561 ? _2569 : (_2569 + (cbSceneParam._m0[72u].w * _2542)));
        _2587 = _2585 * (_2561 ? _2570 : (_2570 + (cbSceneParam._m0[72u].w * _2544)));
        _2588 = _2585 * (_2561 ? _2571 : (_2571 + (cbSceneParam._m0[72u].w * _2546)));
        _2589 = _2578 * 0.999000012874603271484375;
        _2599 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2599)
        {
            if ((cbInstanceData._m0[_250 + 7u].x + _2589) < 0.5)
            {
                _2755 = true;
                break;
            }
        }
        uint _2696 = _585 + uint(_2558.w);
        if ((cbInstanceData._m0[_2696].w < 1.0) && ((cbInstanceData._m0[_2696].w + _2589) < 0.5))
        {
            _2755 = true;
            break;
        }
        if ((_2582 + 1.0) < _2580.x)
        {
            _2755 = true;
            break;
        }
        _2755 = false;
        break;
    }
    float _2960;
    if (_2755)
    {
        discard_state = true;
        _2960 = 0.0;
    }
    else
    {
        _2960 = cbInstanceData._m0[_2421].w;
    }
    SV_Target.x = _2586;
    SV_Target.y = _2587;
    SV_Target.z = _2588;
    SV_Target.w = _2960;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2421].w;
    discard_exit();
}


