#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1111;
float _3518;
float _3519;
float _3520;
float _3521;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _234 + 1u;
    uint _244 = _234 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _275 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _281 = _275.x * cbMtdParam._m0[11u].x;
    float _282 = _275.y * cbMtdParam._m0[11u].y;
    float _283 = _275.z * cbMtdParam._m0[11u].z;
    vec4 _302 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _254) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _255) + cbTextureTilingScale._m0[5u].w));
    vec4 _338 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _340 = _338.x;
    float _352 = dot(vec4(_340, _338.yzw), vec4(cbMtdParam._m0[28u].w, cbMtdParam._m0[29u].xy, 0.0));
    float _369 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_340 - _352) * cbMtdParam._m0[24u].y) + _352) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3530 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _370 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
    float _377 = (_370 * ((_302.x * cbMtdParam._m0[12u].x) - _281)) + _281;
    float _378 = (_370 * ((_302.y * cbMtdParam._m0[12u].y) - _282)) + _282;
    float _379 = (_370 * ((_302.z * cbMtdParam._m0[12u].z) - _283)) + _283;
    vec4 _392 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _254) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _255) + cbTextureTilingScale._m0[4u].w));
    vec4 _409 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _411 = _409.x;
    float _412 = _409.y;
    float _413 = _409.z;
    float _422 = ((_392.z - _413) * _370) + _413;
    float _425 = ((((_392.x - _411) * _370) + _411) * 2.0) + (-1.0);
    float _427 = ((((_392.y - _412) * _370) + _412) * 2.0) + (-1.0);
    float _428 = dot(vec2(_425, _427), vec2(_425, _427));
    float _3541 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _433 = sqrt(1.0 - (isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0))));
    vec4 _446 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _474 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _476 = _474.x;
    float _494 = ((texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _254) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _255) + cbTextureTilingScale._m0[9u].w)).x - _476) * _370) + _476;
    float _498 = ((texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _494) * cbMtdParam._m0[19u].z) + _494;
    float _503 = cbMtdParam._m0[22u].x + _446.w;
    float _507 = gl_FragCoord.x * 0.125;
    float _509 = gl_FragCoord.y * 0.125;
    float _520 = fma(_433, _221 * NORMAL.x, fma(_427, _228 * TANGENT.x, (_214 * _206) * _425));
    float _523 = fma(_433, _221 * NORMAL.y, fma(_427, _228 * TANGENT.y, (_214 * _207) * _425));
    float _526 = fma(_433, _221 * NORMAL.z, fma(_427, _228 * TANGENT.z, (_214 * _208) * _425));
    float _530 = inversesqrt(dot(vec3(_520, _523, _526), vec3(_520, _523, _526)));
    float _531 = _530 * _520;
    float _532 = _530 * _523;
    float _533 = _530 * _526;
    float _3552 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _534 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
    float _3563 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _3574 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _3585 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _3596 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _3607 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _539 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_507, _509)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _557 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _598 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _608 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _598);
    float _609 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _598);
    float _610 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _598);
    float _614 = inversesqrt(dot(vec3(_608, _609, _610), vec3(_608, _609, _610)));
    float _615 = _608 * _614;
    float _616 = _609 * _614;
    float _617 = _610 * _614;
    vec4 _619 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_507, _509));
    float _621 = _619.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _793 = sqrt(((_608 * _608) + (_609 * _609)) + (_610 * _610));
        float _799 = (cbMatDynParam._m0[5u].x * _793) + cbMatDynParam._m0[5u].y;
        float _3618 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _800 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _804 = (cbMatDynParam._m0[5u].z * _793) + cbMatDynParam._m0[5u].w;
        float _3629 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) - _800)) + _800) < ((_621 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _632 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _633 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _651 = fma(_533, cbSceneParam._m0[5u].z, fma(_532, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _531));
    float _654 = fma(_533, cbSceneParam._m0[6u].z, fma(_532, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _531));
    float _657 = fma(_533, cbSceneParam._m0[7u].z, fma(_532, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _531));
    uint _670 = _234 + 9u;
    uint _671 = _670 + uint(cbMatDynParam._m0[0u].w);
    float _677 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0)))) * cbInstanceData._m0[_671].x;
    float _678 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0)))) * cbInstanceData._m0[_671].y;
    float _679 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0)))) * cbInstanceData._m0[_671].z;
    float _3640 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _680 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
    float _3651 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _681 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
    float _3662 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _682 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
    float _683 = 1.0 - _539;
    float _684 = _680 * _683;
    float _685 = _681 * _683;
    float _686 = _682 * _683;
    float _691 = (_680 + (-0.039999999105930328369140625)) * _539;
    float _692 = (_681 + (-0.039999999105930328369140625)) * _539;
    float _693 = (_682 + (-0.039999999105930328369140625)) * _539;
    float _694 = _691 + 0.039999999105930328369140625;
    float _696 = _692 + 0.039999999105930328369140625;
    float _697 = _693 + 0.039999999105930328369140625;
    vec4 _706 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _632, cbSceneParam._m0[86u].y * _633));
    float _710 = ((isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))) * TEXCOORD_5.w) * _706.x;
    float _711 = dot(vec3(_531, _532, _533), vec3(_615, _616, _617));
    float _714 = _711 * 2.0;
    float _718 = (_714 * _531) - _615;
    float _719 = (_714 * _532) - _616;
    float _720 = (_714 * _533) - _617;
    float _724 = abs(dot(vec3(_615, _616, _617), vec3(_531, _532, _533)));
    float _3673 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _726 = sqrt(_534);
    float _739 = exp2((_726 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_726 * 3.0));
    float _745 = (1.0 - _739) * ((_726 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _746 = _739 * _726;
    float _774 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _778 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _782 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1110;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _835 = fma(_782, cbModelParam._m0[26u].z, fma(_778, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _774));
        float _839 = fma(_782, cbModelParam._m0[27u].z, fma(_778, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _774));
        float _843 = fma(_782, cbModelParam._m0[28u].z, fma(_778, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _774));
        float _868 = _774 + _531;
        float _869 = _778 + _532;
        float _870 = _782 + _533;
        float _880 = fma(_870, cbModelParam._m0[26u].z, fma(_869, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _868)) - _835;
        float _881 = fma(_870, cbModelParam._m0[27u].z, fma(_869, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _868)) - _839;
        float _882 = fma(_870, cbModelParam._m0[28u].z, fma(_869, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _868)) - _843;
        float _886 = inversesqrt(dot(vec3(_880, _881, _882), vec3(_880, _881, _882)));
        float _899 = ((_886 * _880) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_835 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _900 = ((_886 * _881) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_839 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _901 = ((_886 * _882) / cbModelParam._m0[34u].z) + ((((((_843 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _904 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_899, _900, _901), 0.0);
        vec4 _911 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_899, _900, _901), 0.0);
        vec4 _918 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_899, _900, _901), 0.0);
        vec4 _925 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_899, _900, _901), 0.0);
        float _938 = exp2((_904.w + (-0.5)) * 20.0) * 2.0;
        float _939 = _938 * (_904.x + (-0.5));
        float _940 = _938 * (_904.y + (-0.5));
        float _941 = _938 * (_904.z + (-0.5));
        float _948 = exp2((_911.w + (-0.5)) * 20.0) * 2.0;
        float _949 = _948 * (_911.x + (-0.5));
        float _950 = _948 * (_911.y + (-0.5));
        float _951 = _948 * (_911.z + (-0.5));
        float _958 = exp2((_918.w + (-0.5)) * 20.0) * 2.0;
        float _959 = _958 * (_918.x + (-0.5));
        float _960 = _958 * (_918.y + (-0.5));
        float _961 = _958 * (_918.z + (-0.5));
        float _968 = exp2((_925.w + (-0.5)) * 20.0) * 2.0;
        float _969 = _968 * (_925.x + (-0.5));
        float _970 = _968 * (_925.y + (-0.5));
        float _971 = _968 * (_925.z + (-0.5));
        float _972 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _973 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _974 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _975 = _939 * 0.5;
        float _976 = _949 * 0.5;
        float _977 = _959 * 0.5;
        float _978 = dot(vec3(_975, _976, _977), vec3(_975, _976, _977));
        float _983 = (_978 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_978);
        float _992 = (dot(vec3(_531, _532, _533), vec3(_983 * _975, _983 * _976, _983 * _977)) + 1.0) * 0.5;
        float _3699 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _1002 = sqrt(((_976 * _976) + (_975 * _975)) + (_977 * _977)) / (_972 + 9.9999997473787516355514526367188e-06);
        float _3710 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1004 = _1003 * 2.0;
        float _1008 = (1.0 - _1003) / (_1003 + 1.0);
        float _3721 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1018 = ((((1.0 - _1009) * (_1004 + 2.0)) * exp2(log2(isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * (_1004 + 1.0))) + _1009) * _972;
        float _1019 = _940 * 0.5;
        float _1020 = _950 * 0.5;
        float _1021 = _960 * 0.5;
        float _1022 = dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021));
        float _1027 = (_1022 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1022);
        float _1035 = (dot(vec3(_531, _532, _533), vec3(_1027 * _1019, _1027 * _1020, _1027 * _1021)) + 1.0) * 0.5;
        float _3732 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1044 = sqrt(((_1020 * _1020) + (_1019 * _1019)) + (_1021 * _1021)) / (_973 + 9.9999997473787516355514526367188e-06);
        float _3743 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1046 = _1045 * 2.0;
        float _1050 = (1.0 - _1045) / (_1045 + 1.0);
        float _3754 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1060 = ((((1.0 - _1051) * (_1046 + 2.0)) * exp2(log2(isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * (_1046 + 1.0))) + _1051) * _973;
        float _1061 = _941 * 0.5;
        float _1062 = _951 * 0.5;
        float _1063 = _961 * 0.5;
        float _1064 = dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063));
        float _1069 = (_1064 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1064);
        float _1077 = (dot(vec3(_531, _532, _533), vec3(_1069 * _1061, _1069 * _1062, _1069 * _1063)) + 1.0) * 0.5;
        float _3765 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1086 = sqrt(((_1062 * _1062) + (_1061 * _1061)) + (_1063 * _1063)) / (_974 + 9.9999997473787516355514526367188e-06);
        float _3776 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1088 = _1087 * 2.0;
        float _1092 = (1.0 - _1087) / (_1087 + 1.0);
        float _3787 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1102 = ((((1.0 - _1093) * (_1088 + 2.0)) * exp2(log2(isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * (_1088 + 1.0))) + _1093) * _974;
        _1110 = _941;
        _1112 = _940;
        _1113 = _939;
        _1114 = _951;
        _1115 = _950;
        _1116 = _949;
        _1117 = _961;
        _1118 = _960;
        _1119 = _959;
        _1120 = _974;
        _1121 = _973;
        _1122 = _972;
        _1123 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0)));
        _1124 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0)));
        _1125 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0)));
    }
    else
    {
        _1110 = _1111;
        _1112 = _1111;
        _1113 = _1111;
        _1114 = _1111;
        _1115 = _1111;
        _1116 = _1111;
        _1117 = _1111;
        _1118 = _1111;
        _1119 = _1111;
        _1120 = _1111;
        _1121 = _1111;
        _1122 = _1111;
        _1123 = 0.0;
        _1124 = 0.0;
        _1125 = 0.0;
    }
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1150 = fma(_782, cbModelParam._m0[30u].z, fma(_778, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _774));
        float _1154 = fma(_782, cbModelParam._m0[31u].z, fma(_778, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _774));
        float _1158 = fma(_782, cbModelParam._m0[32u].z, fma(_778, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _774));
        float _1181 = _774 + _531;
        float _1182 = _778 + _532;
        float _1183 = _782 + _533;
        float _1193 = fma(_1183, cbModelParam._m0[30u].z, fma(_1182, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1181)) - _1150;
        float _1194 = fma(_1183, cbModelParam._m0[31u].z, fma(_1182, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1181)) - _1154;
        float _1195 = fma(_1183, cbModelParam._m0[32u].z, fma(_1182, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1181)) - _1158;
        float _1199 = inversesqrt(dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195)));
        float _1212 = ((_1199 * _1193) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1150 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1213 = ((_1199 * _1194) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1154 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1214 = ((_1199 * _1195) / cbModelParam._m0[35u].z) + ((((((_1158 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1216 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        vec4 _1223 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        float _1249 = exp2((_1216.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1216.x + (-0.5));
        float _1251 = _1249 * (_1216.y + (-0.5));
        float _1252 = _1249 * (_1216.z + (-0.5));
        float _1259 = exp2((_1223.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1223.x + (-0.5));
        float _1261 = _1259 * (_1223.y + (-0.5));
        float _1262 = _1259 * (_1223.z + (-0.5));
        float _1269 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1230.x + (-0.5));
        float _1271 = _1269 * (_1230.y + (-0.5));
        float _1272 = _1269 * (_1230.z + (-0.5));
        float _1279 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1237.x + (-0.5));
        float _1281 = _1279 * (_1237.y + (-0.5));
        float _1282 = _1279 * (_1237.z + (-0.5));
        float _1283 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1284 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1285 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1286 = _1250 * 0.5;
        float _1287 = _1260 * 0.5;
        float _1288 = _1270 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1302 = (dot(vec3(_531, _532, _533), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _3828 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1311 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1283 + 9.9999997473787516355514526367188e-06);
        float _3839 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _3850 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_1313 + 1.0))) + _1318) * _1283;
        float _1328 = _1251 * 0.5;
        float _1329 = _1261 * 0.5;
        float _1330 = _1271 * 0.5;
        float _1331 = dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330));
        float _1336 = (_1331 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1331);
        float _1344 = (dot(vec3(_531, _532, _533), vec3(_1336 * _1328, _1336 * _1329, _1336 * _1330)) + 1.0) * 0.5;
        float _3861 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1353 = sqrt(((_1329 * _1329) + (_1328 * _1328)) + (_1330 * _1330)) / (_1284 + 9.9999997473787516355514526367188e-06);
        float _3872 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1355 = _1354 * 2.0;
        float _1359 = (1.0 - _1354) / (_1354 + 1.0);
        float _3883 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1369 = ((((1.0 - _1360) * (_1355 + 2.0)) * exp2(log2(isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (_1355 + 1.0))) + _1360) * _1284;
        float _1370 = _1252 * 0.5;
        float _1371 = _1262 * 0.5;
        float _1372 = _1272 * 0.5;
        float _1373 = dot(vec3(_1370, _1371, _1372), vec3(_1370, _1371, _1372));
        float _1378 = (_1373 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1373);
        float _1386 = (dot(vec3(_531, _532, _533), vec3(_1378 * _1370, _1378 * _1371, _1378 * _1372)) + 1.0) * 0.5;
        float _3894 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1395 = sqrt(((_1371 * _1371) + (_1370 * _1370)) + (_1372 * _1372)) / (_1285 + 9.9999997473787516355514526367188e-06);
        float _3905 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1397 = _1396 * 2.0;
        float _1401 = (1.0 - _1396) / (_1396 + 1.0);
        float _3916 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1411 = ((((1.0 - _1402) * (_1397 + 2.0)) * exp2(log2(isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_1397 + 1.0))) + _1402) * _1285;
        _1419 = _1252;
        _1420 = _1251;
        _1421 = _1250;
        _1422 = _1262;
        _1423 = _1261;
        _1424 = _1260;
        _1425 = _1272;
        _1426 = _1271;
        _1427 = _1270;
        _1428 = _1285;
        _1429 = _1284;
        _1430 = _1283;
        _1431 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
        _1432 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)));
        _1433 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)));
    }
    else
    {
        _1419 = _1111;
        _1420 = _1111;
        _1421 = _1111;
        _1422 = _1111;
        _1423 = _1111;
        _1424 = _1111;
        _1425 = _1111;
        _1426 = _1111;
        _1427 = _1111;
        _1428 = _1111;
        _1429 = _1111;
        _1430 = _1111;
        _1431 = 0.0;
        _1432 = 0.0;
        _1433 = 0.0;
    }
    float _1443 = (cbModelParam._m0[1u].x * (_1431 - _1123)) + _1123;
    float _1444 = (cbModelParam._m0[1u].x * (_1432 - _1124)) + _1124;
    float _1445 = (cbModelParam._m0[1u].x * (_1433 - _1125)) + _1125;
    float _1466 = fma(_1445, cbSceneParam._m0[89u].z, fma(_1444, cbSceneParam._m0[89u].y, _1443 * cbSceneParam._m0[89u].x));
    float _1469 = fma(_1445, cbSceneParam._m0[90u].z, fma(_1444, cbSceneParam._m0[90u].y, _1443 * cbSceneParam._m0[90u].x));
    float _1472 = fma(_1445, cbSceneParam._m0[91u].z, fma(_1444, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1443));
    float _1487 = _718 * 0.5;
    float _1488 = _719 * 0.5;
    float _1489 = _720 * 0.5;
    float _1490 = dot(vec4(_1487, _1488, _1489, 1.0), vec4(_1421, _1424, _1427, _1430));
    float _1493 = dot(vec4(_1487, _1488, _1489, 1.0), vec4(_1420, _1423, _1426, _1429));
    float _1496 = dot(vec4(_1487, _1488, _1489, 1.0), vec4(_1419, _1422, _1425, _1428));
    float _1530;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1503 = dot(vec4(_1487, _1488, _1489, 1.0), vec4(_1110, _1114, _1117, _1120));
        float _1507 = dot(vec4(_1487, _1488, _1489, 1.0), vec4(_1112, _1115, _1118, _1121));
        float _1511 = dot(vec4(_1487, _1488, _1489, 1.0), vec4(_1113, _1116, _1119, _1122));
        float _1518 = dot(vec4(cbModelParam._m0[39u]), vec4(_1487, _1488, _1489, 1.0));
        _1530 = dot(vec3(isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)), isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)), isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1518) ? 0.0 : (isnan(0.0) ? _1518 : max(0.0, _1518))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1530 = 1.0;
    }
    float _1541;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1532 = dot(vec4(cbModelParam._m0[40u]), vec4(_1487, _1488, _1489, 1.0));
        _1541 = dot(vec3(isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)), isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)), isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1532) ? 0.0 : (isnan(0.0) ? _1532 : max(0.0, _1532))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1541 = 1.0;
    }
    float _1545 = (_1541 * cbModelParam._m0[1u].x) + (_1530 * (1.0 - cbModelParam._m0[1u].x));
    float _1555 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _534);
    float _1556 = isnan(_1555) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1555 : min(cbModelParam._m0[25u].z, _1555));
    float _1638;
    float _1640;
    float _1642;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1605 = fma(_782, cbModelParam._m0[13u].z, fma(_778, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _774)) + cbModelParam._m0[13u].w;
        float _1609 = fma(_782, cbModelParam._m0[14u].z, fma(_778, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _774)) + cbModelParam._m0[14u].w;
        float _1613 = fma(_782, cbModelParam._m0[15u].z, fma(_778, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _774)) + cbModelParam._m0[15u].w;
        float _1616 = fma(_720, cbModelParam._m0[13u].z, fma(_719, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _718));
        float _1619 = fma(_720, cbModelParam._m0[14u].z, fma(_719, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _718));
        float _1622 = fma(_720, cbModelParam._m0[15u].z, fma(_719, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _718));
        float _1650;
        if (_1616 > 0.0)
        {
            _1650 = abs((1.0 - _1605) / _1616);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1616 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1605 + 1.0) / _1616);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1650 = frontier_phi_19_17_ladder;
        }
        float _1875;
        if (_1619 > 0.0)
        {
            _1875 = abs((1.0 - _1609) / _1619);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1619 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1609 + 1.0) / _1619);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1875 = frontier_phi_28_24_ladder;
        }
        float _2132;
        if (_1622 > 0.0)
        {
            _2132 = abs((1.0 - _1613) / _1622);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1613 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2132 = frontier_phi_40_35_ladder;
        }
        float _2134 = isnan(_1875) ? _1650 : (isnan(_1650) ? _1875 : min(_1650, _1875));
        float _2135 = isnan(_2132) ? _2134 : (isnan(_2134) ? _2132 : min(_2134, _2132));
        float _2139 = (_2135 * _1616) + _1605;
        float _2140 = (_2135 * _1619) + _1609;
        float _2141 = (_2135 * _1622) + _1613;
        float _2142 = _2135 * 9.9999997473787516355514526367188e-05;
        float _2144 = (-1.0) - _2142;
        float _2146 = _2142 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2141 > _2146) || ((_2141 < _2144) || ((_2140 > _2146) || ((_2140 < _2144) || ((_2139 < _2144) || (_2139 > _2146))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2269 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2141, cbModelParam._m0[9u].z, fma(_2140, cbModelParam._m0[9u].y, _2139 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2141, cbModelParam._m0[10u].z, fma(_2140, cbModelParam._m0[10u].y, _2139 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2141, cbModelParam._m0[11u].z, fma(_2140, cbModelParam._m0[11u].y, _2139 * cbModelParam._m0[11u].x))), _1556);
            frontier_phi_18_40_ladder = _2269.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2269.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2269.x * cbModelParam._m0[1u].y;
        }
        _1638 = frontier_phi_18_40_ladder_2;
        _1640 = frontier_phi_18_40_ladder_1;
        _1642 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1626 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_718, _719, _720), _1556);
        _1638 = _1626.x * cbModelParam._m0[1u].y;
        _1640 = _1626.y * cbModelParam._m0[1u].y;
        _1642 = _1626.z * cbModelParam._m0[1u].y;
    }
    float _1646 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _534);
    float _1647 = isnan(_1646) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1646 : min(cbModelParam._m0[25u].w, _1646));
    float _1738;
    float _1740;
    float _1742;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1702 = fma(_782, cbModelParam._m0[21u].z, fma(_778, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _774)) + cbModelParam._m0[21u].w;
        float _1706 = fma(_782, cbModelParam._m0[22u].z, fma(_778, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _774)) + cbModelParam._m0[22u].w;
        float _1710 = fma(_782, cbModelParam._m0[23u].z, fma(_778, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _774)) + cbModelParam._m0[23u].w;
        float _1713 = fma(_720, cbModelParam._m0[21u].z, fma(_719, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _718));
        float _1716 = fma(_720, cbModelParam._m0[22u].z, fma(_719, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _718));
        float _1719 = fma(_720, cbModelParam._m0[23u].z, fma(_719, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _718));
        float _1880;
        if (_1713 > 0.0)
        {
            _1880 = abs((1.0 - _1702) / _1713);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1713 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1702 + 1.0) / _1713);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1880 = frontier_phi_30_26_ladder;
        }
        float _2159;
        if (_1716 > 0.0)
        {
            _2159 = abs((1.0 - _1706) / _1716);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1716 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1706 + 1.0) / _1716);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2159 = frontier_phi_42_37_ladder;
        }
        float _2372;
        if (_1719 > 0.0)
        {
            _2372 = abs((1.0 - _1710) / _1719);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1719 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1710 + 1.0) / _1719);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2372 = frontier_phi_51_48_ladder;
        }
        float _2374 = isnan(_2159) ? _1880 : (isnan(_1880) ? _2159 : min(_1880, _2159));
        float _2375 = isnan(_2372) ? _2374 : (isnan(_2374) ? _2372 : min(_2374, _2372));
        float _2379 = (_2375 * _1713) + _1702;
        float _2380 = (_2375 * _1716) + _1706;
        float _2381 = (_2375 * _1719) + _1710;
        float _2382 = _2375 * 9.9999997473787516355514526367188e-05;
        float _2383 = (-1.0) - _2382;
        float _2385 = _2382 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2381 > _2385) || ((_2381 < _2383) || ((_2380 > _2385) || ((_2380 < _2383) || ((_2379 < _2383) || (_2379 > _2385))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2580 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2381, cbModelParam._m0[17u].z, fma(_2380, cbModelParam._m0[17u].y, _2379 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2381, cbModelParam._m0[18u].z, fma(_2380, cbModelParam._m0[18u].y, _2379 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2381, cbModelParam._m0[19u].z, fma(_2380, cbModelParam._m0[19u].y, _2379 * cbModelParam._m0[19u].x))), _1647);
            frontier_phi_27_51_ladder = _2580.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2580.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2580.x * cbModelParam._m0[1u].z;
        }
        _1738 = frontier_phi_27_51_ladder_2;
        _1740 = frontier_phi_27_51_ladder_1;
        _1742 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1722 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_718, _719, _720), _1647);
        _1738 = _1722.x * cbModelParam._m0[1u].z;
        _1740 = _1722.y * cbModelParam._m0[1u].z;
        _1742 = _1722.z * cbModelParam._m0[1u].z;
    }
    float _1755 = (((_745 * _694) + _746) * _710) * ((cbModelParam._m0[1u].w * (_1738 - _1638)) + _1638);
    float _1757 = (((_745 * _696) + _746) * _710) * ((cbModelParam._m0[1u].w * (_1740 - _1640)) + _1640);
    float _1759 = (((_745 * _697) + _746) * _710) * ((cbModelParam._m0[1u].w * (_1742 - _1642)) + _1642);
    float _1762 = fma(_1759, cbSceneParam._m0[89u].z, fma(_1757, cbSceneParam._m0[89u].y, _1755 * cbSceneParam._m0[89u].x));
    float _1765 = fma(_1759, cbSceneParam._m0[90u].z, fma(_1757, cbSceneParam._m0[90u].y, _1755 * cbSceneParam._m0[90u].x));
    float _1768 = fma(_1759, cbSceneParam._m0[91u].z, fma(_1757, cbSceneParam._m0[91u].y, _1755 * cbSceneParam._m0[91u].x));
    vec4 _1776 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_632, _633));
    float _1778 = _1776.w;
    float _1790 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1778);
    float _1791 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1778);
    float _1792 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1778);
    uvec4 _1796 = floatBitsToUint(cbInstanceData._m0[_234 + 5u]);
    uint _1798 = _1796.x * 14u;
    uint _1799 = _1798 + 13u;
    float _1806 = _710 + (-1.0);
    float _1811 = (cbLight._m0[_1799].x * _1806) + 1.0;
    float _1812 = (cbLight._m0[_1799].y * _1806) + 1.0;
    float _1813 = (cbLight._m0[_1799].z * _1806) + 1.0;
    float _1814 = (cbLight._m0[_1799].w * _1806) + 1.0;
    uint _1815 = _1798 + 5u;
    float _1821 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
    uint _1825 = _1798 + 4u;
    float _1834 = isnan(1.0) ? _1811 : (isnan(_1811) ? 1.0 : min(_1811, 1.0));
    uint _1838 = _1798 | 1u;
    float _1849 = dot(vec3(cbLight._m0[_1798].xyz), vec3(_531, _532, _533));
    float _1852 = dot(vec3(cbLight._m0[_1838].xyz), vec3(_531, _532, _533));
    float _4052 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
    float _4063 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1857 = (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * 0.3183098733425140380859375;
    float _1859 = (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * 0.3183098733425140380859375;
    float _1866 = ((cbLight._m0[_1815].x * _1821) * _1859) + (((cbLight._m0[_1825].x * _1790) * _1834) * _1857);
    float _1867 = ((_1821 * cbLight._m0[_1815].y) * _1859) + (((cbLight._m0[_1825].y * _1791) * _1834) * _1857);
    float _1868 = ((_1821 * cbLight._m0[_1815].z) * _1859) + (((cbLight._m0[_1825].z * _1792) * _1834) * _1857);
    uvec4 _1872 = floatBitsToUint(cbLight._m0[_1798 + 12u]);
    bool _1874 = _1872.x == 0u;
    float _1885;
    float _1887;
    float _1889;
    if (_1874)
    {
        _1885 = _1866;
        _1887 = _1867;
        _1889 = _1868;
    }
    else
    {
        uint _1893 = _1798 + 6u;
        float _1909 = (dot(vec3(cbLight._m0[_1798 + 2u].xyz), vec3(_531, _532, _533)) * 0.5) + 0.5;
        float _1910 = _1909 * _1909;
        float _4074 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
        float _1911 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1912 = isnan(1.0) ? _1813 : (isnan(_1813) ? 1.0 : min(_1813, 1.0));
        _1885 = (((cbLight._m0[_1893].x * 0.3183098733425140380859375) * _1911) * _1912) + _1866;
        _1887 = (((cbLight._m0[_1893].y * 0.3183098733425140380859375) * _1911) * _1912) + _1867;
        _1889 = (((cbLight._m0[_1893].z * 0.3183098733425140380859375) * _1911) * _1912) + _1868;
    }
    bool _1892 = _1872.y == 0u;
    float _1930;
    float _1932;
    float _1934;
    if (_1892)
    {
        _1930 = _1885;
        _1932 = _1887;
        _1934 = _1889;
    }
    else
    {
        uint _2103 = _1798 + 7u;
        float _2119 = (dot(vec3(cbLight._m0[_1798 + 3u].xyz), vec3(_531, _532, _533)) * 0.5) + 0.5;
        float _2120 = _2119 * _2119;
        float _4090 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2121 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _2122 = isnan(1.0) ? _1814 : (isnan(_1814) ? 1.0 : min(_1814, 1.0));
        _1930 = (((cbLight._m0[_2103].x * 0.3183098733425140380859375) * _2121) * _2122) + _1885;
        _1932 = (((cbLight._m0[_2103].y * 0.3183098733425140380859375) * _2121) * _2122) + _1887;
        _1934 = (((cbLight._m0[_2103].z * 0.3183098733425140380859375) * _2121) * _2122) + _1889;
    }
    uint _1937 = _1798 + 8u;
    float _1950 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1798].w)) * _534) * 0.949999988079071044921875);
    float _1951 = _1950 * _1950;
    float _1952 = cbLight._m0[_1798].x + _615;
    float _1953 = cbLight._m0[_1798].y + _616;
    float _1954 = cbLight._m0[_1798].z + _617;
    float _1958 = inversesqrt(dot(vec3(_1952, _1953, _1954), vec3(_1952, _1953, _1954)));
    float _1959 = _1958 * _1952;
    float _1960 = _1958 * _1953;
    float _1961 = _1958 * _1954;
    float _1962 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_1798].xyz));
    float _4106 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _1965 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _4117 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _1966 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _1967 = dot(vec3(_531, _532, _533), vec3(_1959, _1960, _1961));
    float _4128 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1970 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    float _1971 = dot(vec3(cbLight._m0[_1798].xyz), vec3(_1959, _1960, _1961));
    float _4139 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _1975 = _1951 * _1951;
    float _1979 = ((_1970 * _1970) * (_1975 + (-1.0))) + 1.0;
    float _1987 = exp2(log2(1.0 - (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0)))) * 5.0);
    float _1988 = 0.959999978542327880859375 - _691;
    float _1990 = 0.959999978542327880859375 - _692;
    float _1991 = 0.959999978542327880859375 - _693;
    float _1998 = 1.0 - _1951;
    float _2009 = (0.5 / (((_1966 * ((_1965 * _1998) + _1951)) + 9.9999999392252902907785028219223e-09) + (((_1966 * _1998) + _1951) * _1965))) * _1965;
    float _4150 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _2011 = (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1975 / ((_1979 * _1979) * 3.141590118408203125));
    uint _2025 = _1798 + 9u;
    float _2036 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1838].w)) * _534) * 0.949999988079071044921875);
    float _2037 = _2036 * _2036;
    float _2038 = cbLight._m0[_1838].x + _615;
    float _2039 = cbLight._m0[_1838].y + _616;
    float _2040 = cbLight._m0[_1838].z + _617;
    float _2044 = inversesqrt(dot(vec3(_2038, _2039, _2040), vec3(_2038, _2039, _2040)));
    float _2045 = _2044 * _2038;
    float _2046 = _2044 * _2039;
    float _2047 = _2044 * _2040;
    float _2048 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_1838].xyz));
    float _4161 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2051 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    float _2052 = dot(vec3(_531, _532, _533), vec3(_2045, _2046, _2047));
    float _4172 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _2055 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _2056 = dot(vec3(cbLight._m0[_1838].xyz), vec3(_2045, _2046, _2047));
    float _4183 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2060 = _2037 * _2037;
    float _2064 = ((_2055 * _2055) * (_2060 + (-1.0))) + 1.0;
    float _2071 = exp2(log2(1.0 - (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0)))) * 5.0);
    float _2078 = 1.0 - _2037;
    float _2088 = (0.5 / (((_1966 * ((_2051 * _2078) + _2037)) + 9.9999999392252902907785028219223e-09) + (((_1966 * _2078) + _2037) * _2051))) * _2051;
    float _4194 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2090 = (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (_2060 / ((_2064 * _2064) * 3.141590118408203125));
    float _2100 = (((((_2071 * _1988) + _694) * cbLight._m0[_2025].x) * _2090) * _1821) + ((((cbLight._m0[_1937].x * _1790) * ((_1987 * _1988) + _694)) * _2011) * _1834);
    float _2101 = (((((_2071 * _1990) + _696) * cbLight._m0[_2025].y) * _2090) * _1821) + ((((cbLight._m0[_1937].y * _1791) * ((_1987 * _1990) + _696)) * _2011) * _1834);
    float _2102 = (((((_2071 * _1991) + _697) * cbLight._m0[_2025].z) * _2090) * _1821) + ((((cbLight._m0[_1937].z * _1792) * ((_1987 * _1991) + _697)) * _2011) * _1834);
    float _2164;
    float _2166;
    float _2168;
    if (_1874)
    {
        _2164 = _2100;
        _2166 = _2101;
        _2168 = _2102;
    }
    else
    {
        uint _2170 = _1798 + 2u;
        uint _2174 = _1798 + 10u;
        float _2188 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2170].w)) * _534) * 0.949999988079071044921875);
        float _2189 = _2188 * _2188;
        float _2190 = cbLight._m0[_2170].x + _615;
        float _2191 = cbLight._m0[_2170].y + _616;
        float _2192 = cbLight._m0[_2170].z + _617;
        float _2196 = inversesqrt(dot(vec3(_2190, _2191, _2192), vec3(_2190, _2191, _2192)));
        float _2197 = _2196 * _2190;
        float _2198 = _2196 * _2191;
        float _2199 = _2196 * _2192;
        float _2200 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_2170].xyz));
        float _4205 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        float _2203 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _2204 = dot(vec3(_531, _532, _533), vec3(_2197, _2198, _2199));
        float _4216 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
        float _2207 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _2208 = dot(vec3(cbLight._m0[_2170].xyz), vec3(_2197, _2198, _2199));
        float _4227 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2212 = _2189 * _2189;
        float _2216 = ((_2207 * _2207) * (_2212 + (-1.0))) + 1.0;
        float _2223 = exp2(log2(1.0 - (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0)))) * 5.0);
        float _2230 = 1.0 - _2189;
        float _2240 = (0.5 / (((_1966 * ((_2203 * _2230) + _2189)) + 9.9999999392252902907785028219223e-09) + (((_1966 * _2230) + _2189) * _2203))) * _2203;
        float _4238 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2242 = (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_2212 / ((_2216 * _2216) * 3.141590118408203125));
        float _2243 = isnan(1.0) ? _1813 : (isnan(_1813) ? 1.0 : min(_1813, 1.0));
        _2164 = (((((_2223 * _1988) + _694) * cbLight._m0[_2174].x) * _2242) * _2243) + _2100;
        _2166 = (((((_2223 * _1990) + _696) * cbLight._m0[_2174].y) * _2242) * _2243) + _2101;
        _2168 = (((((_2223 * _1991) + _697) * cbLight._m0[_2174].z) * _2242) * _2243) + _2102;
    }
    float _2278;
    float _2280;
    float _2282;
    if (_1892)
    {
        _2278 = _2164;
        _2280 = _2166;
        _2282 = _2168;
    }
    else
    {
        uint _2289 = _1798 + 3u;
        uint _2293 = _1798 + 11u;
        float _2307 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2289].w)) * _534) * 0.949999988079071044921875);
        float _2308 = _2307 * _2307;
        float _2309 = cbLight._m0[_2289].x + _615;
        float _2310 = cbLight._m0[_2289].y + _616;
        float _2311 = cbLight._m0[_2289].z + _617;
        float _2315 = inversesqrt(dot(vec3(_2309, _2310, _2311), vec3(_2309, _2310, _2311)));
        float _2316 = _2315 * _2309;
        float _2317 = _2315 * _2310;
        float _2318 = _2315 * _2311;
        float _2319 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_2289].xyz));
        float _4254 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2322 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _2323 = dot(vec3(_531, _532, _533), vec3(_2316, _2317, _2318));
        float _4265 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2326 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _2327 = dot(vec3(cbLight._m0[_2289].xyz), vec3(_2316, _2317, _2318));
        float _4276 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2331 = _2308 * _2308;
        float _2335 = ((_2326 * _2326) * (_2331 + (-1.0))) + 1.0;
        float _2342 = exp2(log2(1.0 - (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0)))) * 5.0);
        float _2349 = 1.0 - _2308;
        float _2359 = (0.5 / (((_1966 * ((_2322 * _2349) + _2308)) + 9.9999999392252902907785028219223e-09) + (((_1966 * _2349) + _2308) * _2322))) * _2322;
        float _4287 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2361 = (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_2331 / ((_2335 * _2335) * 3.141590118408203125));
        float _2362 = isnan(1.0) ? _1814 : (isnan(_1814) ? 1.0 : min(_1814, 1.0));
        _2278 = (((((_2342 * _1988) + _694) * cbLight._m0[_2293].x) * _2361) * _2362) + _2164;
        _2280 = (((((_2342 * _1990) + _696) * cbLight._m0[_2293].y) * _2361) * _2362) + _2166;
        _2282 = (((((_2342 * _1991) + _697) * cbLight._m0[_2293].z) * _2361) * _2362) + _2168;
    }
    float _2497;
    float _2499;
    float _2501;
    float _2503;
    float _2505;
    float _2507;
    if (_1796.y == 0u)
    {
        float _2437 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2438 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2437;
        float _2439 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2437;
        float _2440 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2437;
        uvec4 _2452 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2453 = _2452.x;
        uint _2464 = uint((float(_2452.y) * floor(float(uint(cbSceneParam._m0[85u].y * _633) / _2453))) + floor(float(uint(cbSceneParam._m0[85u].x * _632) / _2453)));
        float _2474 = (log2(_2440 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2475 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        uint _2478 = uint(isnan(14.0) ? _2475 : (isnan(_2475) ? 14.0 : min(_2475, 14.0)));
        uvec4 _2483 = texelFetch(g_lightClusterGridBuffer, int(((_2478 << 2u) + (_2464 << 6u)) >> 2u));
        uint _2484 = _2483.x;
        uint _2485 = _2452.z;
        float _2585;
        float _2587;
        float _2589;
        float _2591;
        float _2593;
        float _2595;
        if (((((1u << ((_2485 >> 4u) & 15u)) + 4294967295u) & _2484) == 0u) || ((_2485 & 240u) == 0u))
        {
            _2585 = 0.0;
            _2587 = 0.0;
            _2589 = 0.0;
            _2591 = 0.0;
            _2593 = 0.0;
            _2595 = 0.0;
        }
        else
        {
            float _2586;
            float _2588;
            float _2590;
            float _2592;
            float _2594;
            float _2596;
            float _2738 = 0.0;
            float _2739 = 0.0;
            float _2740 = 0.0;
            float _2741 = 0.0;
            float _2742 = 0.0;
            float _2743 = 0.0;
            uint _2744 = 0u;
            uint _2753;
            bool _2754;
            for (;;)
            {
                _2753 = texelFetch(g_lightClassification, int((((_2478 << 5u) + (_2464 << 9u)) + (_2744 << 2u)) >> 2u)).x;
                _2754 = _2753 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2754)
                {
                    frontier_phi_68_pred = _2738;
                    frontier_phi_68_pred_1 = _2743;
                    frontier_phi_68_pred_2 = _2742;
                    frontier_phi_68_pred_3 = _2741;
                    frontier_phi_68_pred_4 = _2740;
                    frontier_phi_68_pred_5 = _2739;
                }
                else
                {
                    float _2883;
                    float _2884;
                    float _2885;
                    float _2886;
                    float _2887;
                    float _2888;
                    uint _2889;
                    _2883 = _2738;
                    _2884 = _2739;
                    _2885 = _2740;
                    _2886 = _2741;
                    _2887 = _2742;
                    _2888 = _2743;
                    _2889 = _2753;
                    float _2810;
                    float _2811;
                    float _2812;
                    float _2813;
                    float _2814;
                    float _2815;
                    for (;;)
                    {
                        uint _2893 = uint(findLSB(_2889)) + (_2744 << 5u);
                        uint _2890 = (_2889 + 4294967295u) & _2889;
                        uint _2895 = _2893 * 48u;
                        vec4 _2909 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2895)).x, texelFetch(g_PointLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2895 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2895 + 3u)).x));
                        uint _2915 = (_2893 * 48u) + 4u;
                        vec4 _2928 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2915)).x, texelFetch(g_PointLightRenderingBuffer, int(_2915 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2915 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2915 + 3u)).x));
                        uint _2934 = (_2893 * 48u) + 8u;
                        vec3 _2945 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2934)).x, texelFetch(g_PointLightRenderingBuffer, int(_2934 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2934 + 2u)).x));
                        float _2949 = _2909.x - _2438;
                        float _2950 = _2909.y - _2439;
                        float _2951 = _2909.z - _2440;
                        float _2952 = dot(vec3(_2949, _2950, _2951), vec3(_2949, _2950, _2951));
                        float _2955 = inversesqrt(_2952);
                        float _2956 = _2955 * _2949;
                        float _2957 = _2955 * _2950;
                        float _2958 = _2955 * _2951;
                        float _2959 = dot(vec3(_651, _654, _657), vec3(_2956, _2957, _2958));
                        float _2964 = 1.0 - (_2952 * _2909.w);
                        float _4313 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
                        float _2965 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
                        float _2966 = sqrt(_2952) * _2928.w;
                        float _2969 = 1.39999997615814208984375 / (_2966 + 1.39999997615814208984375);
                        float _2970 = _2969 * _2969;
                        float _2973 = ((1.0 - _2970) * _2959) + _2970;
                        float _2976 = _2966 * _2966;
                        float _2980 = ((isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0))) * _2965) / ((_2976 * 0.699999988079071044921875) + 1.0);
                        float _2984 = (-0.0) - _2438;
                        float _2985 = (-0.0) - _2439;
                        float _2986 = (-0.0) - _2440;
                        float _2990 = inversesqrt(dot(vec3(_2984, _2985, _2986), vec3(_2984, _2985, _2986)));
                        float _2991 = _2990 * _2984;
                        float _2992 = _2990 * _2985;
                        float _2993 = _2990 * _2986;
                        float _3001 = exp2(log2(1.0 / ((_2976 * 3.5) + 5.0)) * 0.25);
                        float _3002 = 1.0 - _726;
                        float _3009 = sqrt(1.0 - ((1.0 - (_3002 * _3002)) * (1.0 - (_3001 * _3001))));
                        float _3010 = _3009 * _3009;
                        float _3011 = _3010 * _3010;
                        float _3012 = _2991 + _2956;
                        float _3013 = _2992 + _2957;
                        float _3014 = _2993 + _2958;
                        float _3018 = inversesqrt(dot(vec3(_3012, _3013, _3014), vec3(_3012, _3013, _3014)));
                        float _3022 = dot(vec3(_651, _654, _657), vec3(_2991, _2992, _2993));
                        float _4329 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
                        float _3025 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
                        float _3026 = dot(vec3(_651, _654, _657), vec3(_3018 * _3012, _3018 * _3013, _3018 * _3014));
                        float _4340 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
                        float _3029 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                        float _3033 = ((_3029 * _3029) * (_3011 + (-1.0))) + 1.0;
                        float _3034 = _2969 * _3010;
                        float _3035 = _3034 * _3034;
                        float _3038 = ((1.0 - _3035) * _2959) + _3035;
                        float _4351 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                        float _3039 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
                        float _3040 = 1.0 - _3010;
                        float _3050 = (0.5 / (((_3039 * ((_3025 * _3040) + _3010)) + 9.9999999392252902907785028219223e-09) + (((_3039 * _3040) + _3010) * _3025))) * _3039;
                        float _4362 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                        float _3061 = (((_3011 * 3.1415927410125732421875) * (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0)))) / ((_3033 * _3033) * ((_2976 * 2.1991131305694580078125) + 3.141590118408203125))) * _2965;
                        _2813 = (_2980 * _2928.x) + _2886;
                        _2814 = (_2980 * _2928.y) + _2887;
                        _2815 = (_2980 * _2928.z) + _2888;
                        _2810 = (_3061 * _2945.x) + _2883;
                        _2811 = (_3061 * _2945.y) + _2884;
                        _2812 = (_3061 * _2945.z) + _2885;
                        if (_2890 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2883 = _2810;
                            _2884 = _2811;
                            _2885 = _2812;
                            _2886 = _2813;
                            _2887 = _2814;
                            _2888 = _2815;
                            _2889 = _2890;
                        }
                    }
                    frontier_phi_68_pred = _2810;
                    frontier_phi_68_pred_1 = _2815;
                    frontier_phi_68_pred_2 = _2814;
                    frontier_phi_68_pred_3 = _2813;
                    frontier_phi_68_pred_4 = _2812;
                    frontier_phi_68_pred_5 = _2811;
                }
                _2586 = frontier_phi_68_pred;
                _2596 = frontier_phi_68_pred_1;
                _2594 = frontier_phi_68_pred_2;
                _2592 = frontier_phi_68_pred_3;
                _2590 = frontier_phi_68_pred_4;
                _2588 = frontier_phi_68_pred_5;
                uint _2745 = _2744 + 1u;
                if (_2745 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2738 = _2586;
                    _2739 = _2588;
                    _2740 = _2590;
                    _2741 = _2592;
                    _2742 = _2594;
                    _2743 = _2596;
                    _2744 = _2745;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2585 = _2586;
            _2587 = _2588;
            _2589 = _2590;
            _2591 = _2592;
            _2593 = _2594;
            _2595 = _2596;
        }
        uvec4 _2599 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2600 = _2599.z;
        uint _2602 = (_2600 >> 8u) & 15u;
        float _2706;
        float _2708;
        float _2710;
        float _2712;
        float _2714;
        float _2716;
        if (((4294967295u << _2602) & _2484) == 0u)
        {
            _2706 = _2585;
            _2708 = _2587;
            _2710 = _2589;
            _2712 = _2591;
            _2714 = _2593;
            _2716 = _2595;
        }
        else
        {
            float _2731 = inversesqrt(dot(vec3(_2438, _2439, _2440), vec3(_2438, _2439, _2440)));
            float _2732 = _2731 * _2438;
            float _2733 = _2731 * _2439;
            float _2734 = _2731 * _2440;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2602 < ((_2600 >> 12u) & 15u))
            {
                float _2707;
                float _2709;
                float _2711;
                float _2713;
                float _2715;
                float _2717;
                float _2866 = _2585;
                float _2867 = _2587;
                float _2868 = _2589;
                float _2869 = _2591;
                float _2870 = _2593;
                float _2871 = _2595;
                uint _2872 = _2602;
                uint _2881;
                bool _2882;
                for (;;)
                {
                    _2881 = texelFetch(g_lightClassification, int((((_2478 << 5u) + (_2464 << 9u)) + (_2872 << 2u)) >> 2u)).x;
                    _2882 = _2881 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2882)
                    {
                        frontier_phi_79_pred = _2871;
                        frontier_phi_79_pred_1 = _2870;
                        frontier_phi_79_pred_2 = _2869;
                        frontier_phi_79_pred_3 = _2868;
                        frontier_phi_79_pred_4 = _2867;
                        frontier_phi_79_pred_5 = _2866;
                    }
                    else
                    {
                        float _3075;
                        float _3076;
                        float _3077;
                        float _3078;
                        float _3079;
                        float _3080;
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3088 = _2866;
                        float _3089 = _2867;
                        float _3090 = _2868;
                        float _3091 = _2869;
                        float _3092 = _2870;
                        float _3093 = _2871;
                        uint _3094 = _2881;
                        uint _3095;
                        vec4 _3120;
                        float _3121;
                        vec4 _3136;
                        vec3 _3148;
                        vec4 _3163;
                        vec4 _3179;
                        float _3225;
                        bool _3226;
                        for (;;)
                        {
                            uint _3105 = ((_2872 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3094));
                            _3095 = (_3094 + 4294967295u) & _3094;
                            uint _3107 = _3105 * 40u;
                            _3120 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3107)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 3u)).x));
                            _3121 = _3120.w;
                            uint _3123 = (_3105 * 40u) + 4u;
                            _3136 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3123)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 3u)).x));
                            uint _3138 = (_3105 * 40u) + 8u;
                            _3148 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3138)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 2u)).x));
                            uint _3150 = (_3105 * 40u) + 16u;
                            _3163 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 3u)).x));
                            uint _3166 = (_3105 * 40u) + 20u;
                            _3179 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3166)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 3u)).x));
                            uint _3181 = (_3105 * 40u) + 24u;
                            vec4 _3194 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3181)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 3u)).x));
                            uint _3200 = (_3105 * 40u) + 28u;
                            vec4 _3213 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3200)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 3u)).x));
                            _3225 = fma(_2440, _3213.z, fma(_2439, _3213.y, _3213.x * _2438)) + _3213.w;
                            _3226 = !((fma(_2440, _3194.z, fma(_2439, _3194.y, _3194.x * _2438)) + _3194.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3226)
                            {
                                float _3253 = _3120.x - _2438;
                                float _3254 = _3120.y - _2439;
                                float _3255 = _3120.z - _2440;
                                float _3256 = dot(vec3(_3253, _3254, _3255), vec3(_3253, _3254, _3255));
                                float _3259 = inversesqrt(_3256);
                                float _3260 = _3259 * _3253;
                                float _3261 = _3259 * _3254;
                                float _3262 = _3259 * _3255;
                                float _3266 = 1.0 - (_3256 / (_3121 * _3121));
                                float _4373 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                                float _3267 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
                                float _3271 = sqrt(_3256) * _3136.w;
                                float _3273 = 1.39999997615814208984375 / (_3271 + 1.39999997615814208984375);
                                float _3274 = _3273 * _3273;
                                float _3277 = ((1.0 - _3274) * dot(vec3(_3260, _3261, _3262), vec3(_651, _654, _657))) + _3274;
                                float _3280 = _3271 * _3271;
                                float _3284 = (fma(_2440, _3163.z, fma(_2439, _3163.y, _3163.x * _2438)) + _3163.w) / _3225;
                                float _3285 = (fma(_2440, _3179.z, fma(_2439, _3179.y, _3179.x * _2438)) + _3179.w) / _3225;
                                float _3289 = 1.0 - dot(vec2(_3284, _3285), vec2(_3284, _3285));
                                float _4389 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                                float _3290 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
                                float _3291 = _3290 * (((isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0))) * _3267) / ((_3280 * 0.699999988079071044921875) + 1.0));
                                float _3303 = exp2(log2(1.0 / ((_3280 * 3.5) + 5.0)) * 0.25);
                                float _3304 = 1.0 - _726;
                                float _3311 = sqrt(1.0 - ((1.0 - (_3304 * _3304)) * (1.0 - (_3303 * _3303))));
                                float _3312 = _3311 * _3311;
                                float _3313 = _3312 * _3312;
                                float _3314 = _3260 - _2732;
                                float _3315 = _3261 - _2733;
                                float _3316 = _3262 - _2734;
                                float _3320 = inversesqrt(dot(vec3(_3314, _3315, _3316), vec3(_3314, _3315, _3316)));
                                float _3324 = dot(vec3(_651, _654, _657), vec3((-0.0) - _2732, (-0.0) - _2733, (-0.0) - _2734));
                                float _4400 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                                float _3327 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                                float _3328 = dot(vec3(_651, _654, _657), vec3(_3320 * _3314, _3320 * _3315, _3320 * _3316));
                                float _4411 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                                float _3331 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                                float _3335 = ((_3331 * _3331) * (_3313 + (-1.0))) + 1.0;
                                float _3336 = _3273 * _3312;
                                float _3337 = _3336 * _3336;
                                float _3343 = ((1.0 - _3337) * dot(vec3(_651, _654, _657), vec3(_3260, _3261, _3262))) + _3337;
                                float _4422 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                                float _3344 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
                                float _3345 = 1.0 - _3312;
                                float _3355 = (0.5 / (((_3344 * ((_3327 * _3345) + _3312)) + 9.9999999392252902907785028219223e-09) + (((_3344 * _3345) + _3312) * _3327))) * _3344;
                                float _4433 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                                float _3365 = (_3290 * _3267) * (((_3313 * 3.1415927410125732421875) * (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0)))) / ((_3335 * _3335) * ((_3280 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3291 * _3136.y;
                                frontier_phi_85_pred_1 = _3291 * _3136.x;
                                frontier_phi_85_pred_2 = _3365 * _3148.z;
                                frontier_phi_85_pred_3 = _3365 * _3148.y;
                                frontier_phi_85_pred_4 = _3365 * _3148.x;
                                frontier_phi_85_pred_5 = _3291 * _3136.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3373 = frontier_phi_85_pred;
                            _3372 = frontier_phi_85_pred_1;
                            _3371 = frontier_phi_85_pred_2;
                            _3370 = frontier_phi_85_pred_3;
                            _3369 = frontier_phi_85_pred_4;
                            _3374 = frontier_phi_85_pred_5;
                            _3078 = _3372 + _3091;
                            _3079 = _3373 + _3092;
                            _3080 = _3374 + _3093;
                            _3075 = _3369 + _3088;
                            _3076 = _3370 + _3089;
                            _3077 = _3371 + _3090;
                            if (_3095 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3088 = _3075;
                                _3089 = _3076;
                                _3090 = _3077;
                                _3091 = _3078;
                                _3092 = _3079;
                                _3093 = _3080;
                                _3094 = _3095;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3080;
                        frontier_phi_79_pred_1 = _3079;
                        frontier_phi_79_pred_2 = _3078;
                        frontier_phi_79_pred_3 = _3077;
                        frontier_phi_79_pred_4 = _3076;
                        frontier_phi_79_pred_5 = _3075;
                    }
                    _2717 = frontier_phi_79_pred;
                    _2715 = frontier_phi_79_pred_1;
                    _2713 = frontier_phi_79_pred_2;
                    _2711 = frontier_phi_79_pred_3;
                    _2709 = frontier_phi_79_pred_4;
                    _2707 = frontier_phi_79_pred_5;
                    uint _2873 = _2872 + 1u;
                    if (_2873 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2866 = _2707;
                        _2867 = _2709;
                        _2868 = _2711;
                        _2869 = _2713;
                        _2870 = _2715;
                        _2871 = _2717;
                        _2872 = _2873;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2711;
                frontier_phi_60_61_ladder_1 = _2717;
                frontier_phi_60_61_ladder_2 = _2715;
                frontier_phi_60_61_ladder_3 = _2713;
                frontier_phi_60_61_ladder_4 = _2709;
                frontier_phi_60_61_ladder_5 = _2707;
            }
            else
            {
                frontier_phi_60_61_ladder = _2589;
                frontier_phi_60_61_ladder_1 = _2595;
                frontier_phi_60_61_ladder_2 = _2593;
                frontier_phi_60_61_ladder_3 = _2591;
                frontier_phi_60_61_ladder_4 = _2587;
                frontier_phi_60_61_ladder_5 = _2585;
            }
            _2706 = frontier_phi_60_61_ladder_5;
            _2708 = frontier_phi_60_61_ladder_4;
            _2710 = frontier_phi_60_61_ladder;
            _2712 = frontier_phi_60_61_ladder_3;
            _2714 = frontier_phi_60_61_ladder_2;
            _2716 = frontier_phi_60_61_ladder_1;
        }
        float _2721 = isnan(1.0) ? _710 : (isnan(_710) ? 1.0 : min(_710, 1.0));
        _2497 = (_2721 * _2712) + _1930;
        _2499 = (_2721 * _2714) + _1932;
        _2501 = (_2721 * _2716) + _1934;
        _2503 = ((_2706 * _694) * _2721) + _2278;
        _2505 = ((_2708 * _696) * _2721) + _2280;
        _2507 = ((_2710 * _697) * _2721) + _2282;
    }
    else
    {
        _2497 = _1930;
        _2499 = _1932;
        _2501 = _1934;
        _2503 = _2278;
        _2505 = _2280;
        _2507 = _2282;
    }
    float _4449 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _4460 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _4471 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _2524 = ((isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_2497 + ((isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0))) * _710))) + ((_2503 + ((isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))) * _1545)) * cbPerFrame._m0[3u].x);
    float _2525 = ((isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * (_2499 + ((isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))) * _710))) + ((_2505 + ((isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))) * _1545)) * cbPerFrame._m0[3u].x);
    float _2526 = ((isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_2501 + ((isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0))) * _710))) + ((_2507 + ((isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))) * _1545)) * cbPerFrame._m0[3u].x);
    uint _2527 = _234 + 6u;
    float _2535 = _632 / cbSceneParam._m0[86u].x;
    float _2536 = _633 / cbSceneParam._m0[86u].y;
    vec4 _2550 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2535, _2536, (log2((isnan(cbSceneParam._m0[77u].w) ? _557 : (isnan(_557) ? cbSceneParam._m0[77u].w : min(_557, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2552 = _2550.x;
    float _2553 = _2550.y;
    float _2554 = _2550.z;
    float _2555 = _2550.w;
    float _2648;
    float _2650;
    float _2652;
    float _2654;
    if (_557 > cbSceneParam._m0[78u].w)
    {
        float _2610 = isnan(_557) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _557 : min(cbSceneParam._m0[80u].w, _557));
        float _2611 = _2610 / _557;
        float _2622 = _2611 * _608;
        float _2623 = _609 * _2611;
        float _2624 = (-0.0) - _2623;
        float _2626 = _2611 * _610;
        float _2628 = (cbSceneParam._m0[77u].w * _2624) / _2610;
        float _2629 = _2628 + cbSceneParam._m0[79u].w;
        float _2630 = cbSceneParam._m0[79u].w - _2623;
        float _2636 = sqrt(((_2622 * _2622) + (_2623 * _2623)) + (_2626 * _2626));
        float _2639 = (1.0 - (cbSceneParam._m0[77u].w / _2610)) * _2636;
        float _2644 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2646 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2823;
        if (abs((_2624 - _2628) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2823 = ((((_2629 > 0.0) ? exp2(_2644 * _2629) : (2.0 - exp2(_2646 * _2629))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2639;
        }
        else
        {
            float _2767 = 1.0 / cbSceneParam._m0[80u].x;
            float _2768 = isnan(_2630) ? _2629 : (isnan(_2629) ? _2630 : max(_2629, _2630));
            float _2769 = isnan(_2630) ? _2629 : (isnan(_2629) ? _2630 : min(_2629, _2630));
            float _2778 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : min(_2768, 0.0));
            float _2779 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : min(_2769, 0.0));
            _2823 = ((abs(_2636 / _2624) * cbSceneParam._m0[80u].y) * ((((_2778 - _2779) * 2.0) - ((exp2(_2644 * (isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0)))) - exp2(_2644 * (isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0))))) * _2767)) - ((exp2(_2646 * _2778) - exp2(_2646 * _2779)) * _2767))) + (_2639 * cbSceneParam._m0[80u].z);
        }
        vec4 _2825 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2535, _2536, 1.0), 0.0);
        float _2834 = exp2((_2823 * (-1.44269502162933349609375)) * (1.0 - _2825.w));
        float _2835 = log2(_2834);
        float _2851 = log2(_2555);
        _2648 = (exp2(_2851 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2835 * cbSceneParam._m0[78u].x)) * _2825.x) / cbSceneParam._m0[78u].x)) + _2552;
        _2650 = (exp2(_2851 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2835 * cbSceneParam._m0[78u].y)) * _2825.y) / cbSceneParam._m0[78u].y)) + _2553;
        _2652 = (exp2(_2851 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2835 * cbSceneParam._m0[78u].z)) * _2825.z) / cbSceneParam._m0[78u].z)) + _2554;
        _2654 = _2834 * _2555;
    }
    else
    {
        _2648 = _2552;
        _2650 = _2553;
        _2652 = _2554;
        _2654 = _2555;
    }
    bool _2861;
    vec4 _2664;
    vec4 _2686;
    float _2688;
    float _2692;
    float _2693;
    float _2694;
    float _2695;
    bool _2705;
    for (;;)
    {
        _2664 = cbMatDynParam._m0[0u];
        float _2666 = roundEven(_2664.y);
        bool _2667 = _2666 == 3.0;
        float _2668 = log2(_2654);
        float _2675 = exp2(_2668 * cbSceneParam._m0[78u].x) * _2524;
        float _2676 = exp2(_2668 * cbSceneParam._m0[78u].y) * _2525;
        float _2677 = exp2(_2668 * cbSceneParam._m0[78u].z) * _2526;
        float _2684 = _621 + (-0.5);
        _2686 = cbMtdParam._m0[1u];
        _2688 = _2686.y * _2684;
        float _2691 = (_2666 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2692 = _2691 * (_2667 ? _2675 : (_2675 + (cbSceneParam._m0[72u].w * _2648)));
        _2693 = _2691 * (_2667 ? _2676 : (_2676 + (cbSceneParam._m0[72u].w * _2650)));
        _2694 = _2691 * (_2667 ? _2677 : (_2677 + (cbSceneParam._m0[72u].w * _2652)));
        _2695 = _2684 * 0.999000012874603271484375;
        _2705 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2705)
        {
            if ((cbInstanceData._m0[_234 + 7u].x + _2695) < 0.5)
            {
                _2861 = true;
                break;
            }
        }
        uint _2802 = _670 + uint(_2664.w);
        if ((cbInstanceData._m0[_2802].w < 1.0) && ((cbInstanceData._m0[_2802].w + _2695) < 0.5))
        {
            _2861 = true;
            break;
        }
        if ((_2688 + 1.0) < _2686.x)
        {
            _2861 = true;
            break;
        }
        _2861 = false;
        break;
    }
    float _3066;
    if (_2861)
    {
        discard_state = true;
        _3066 = 0.0;
    }
    else
    {
        _3066 = cbInstanceData._m0[_2527].w;
    }
    SV_Target.x = _2692;
    SV_Target.y = _2693;
    SV_Target.z = _2694;
    SV_Target.w = _3066;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2527].w;
    discard_exit();
}


