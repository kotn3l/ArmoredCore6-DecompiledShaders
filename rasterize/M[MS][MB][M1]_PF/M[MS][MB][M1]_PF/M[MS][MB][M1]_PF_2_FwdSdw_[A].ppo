#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _975;
float _3644;
float _3645;
float _3646;
float _3647;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _228 = uint(roundEven(NORMAL.w)) * 13u;
    uint _234 = _228 + 1u;
    uint _238 = _228 + 2u;
    float _247 = sqrt(((cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x) + (cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x)) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x));
    vec4 _268 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _274 = _268.x * cbMtdParam._m0[9u].x;
    float _275 = _268.y * cbMtdParam._m0[9u].y;
    float _276 = _268.z * cbMtdParam._m0[9u].z;
    vec4 _289 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_3, SS_BumpMap), vec2(((_247 * TEXCOORD.z) * cbTextureTilingScale._m0[20u].x) + cbTextureTilingScale._m0[20u].z, ((_247 * TEXCOORD.w) * cbTextureTilingScale._m0[20u].y) + cbTextureTilingScale._m0[20u].w));
    vec4 _315 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _319 = _315.z;
    float _323 = (_315.x * 2.0) + (-1.0);
    float _324 = (_315.y * 2.0) + (-1.0);
    float _325 = dot(vec2(_323, _324), vec2(_323, _324));
    float _3656 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _331 = sqrt(1.0 - (isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0))));
    float _336 = _323 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_289.x * 2.0) + (-1.0)));
    float _337 = _324 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_289.y * 2.0) + (-1.0)));
    vec4 _350 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _352 = _350.x;
    float _357 = (((_289.z - _319) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _319;
    float _362 = cbMtdParam._m0[22u].x + _315.w;
    float _366 = gl_FragCoord.x * 0.125;
    float _368 = gl_FragCoord.y * 0.125;
    float _379 = fma(_331, _215 * NORMAL.x, fma(_337, _222 * TANGENT.x, (_208 * _200) * _336));
    float _382 = fma(_331, _215 * NORMAL.y, fma(_337, _222 * TANGENT.y, (_208 * _201) * _336));
    float _385 = fma(_331, _215 * NORMAL.z, fma(_337, _222 * TANGENT.z, (_208 * _202) * _336));
    float _389 = inversesqrt(dot(vec3(_379, _382, _385), vec3(_379, _382, _385)));
    float _390 = _389 * _379;
    float _391 = _389 * _382;
    float _392 = _389 * _385;
    float _3667 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _393 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
    float _3678 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _3689 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3700 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _3711 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3722 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _398 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_366, _368)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _416 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _458 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _468 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _458);
    float _469 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _458);
    float _470 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _458);
    float _474 = inversesqrt(dot(vec3(_468, _469, _470), vec3(_468, _469, _470)));
    float _475 = _468 * _474;
    float _476 = _469 * _474;
    float _477 = _470 * _474;
    vec4 _479 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_366, _368));
    float _481 = _479.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _656 = sqrt(((_468 * _468) + (_469 * _469)) + (_470 * _470));
        float _662 = (cbMatDynParam._m0[5u].x * _656) + cbMatDynParam._m0[5u].y;
        float _3733 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
        float _663 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _667 = (cbMatDynParam._m0[5u].z * _656) + cbMatDynParam._m0[5u].w;
        float _3744 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))) - _663)) + _663) < ((_481 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _493 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _494 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _514 = fma(_392, cbSceneParam._m0[5u].z, fma(_391, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _390));
    float _517 = fma(_392, cbSceneParam._m0[6u].z, fma(_391, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _390));
    float _520 = fma(_392, cbSceneParam._m0[7u].z, fma(_391, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _390));
    uint _533 = _228 + 9u;
    uint _534 = _533 + uint(cbMatDynParam._m0[0u].w);
    float _540 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0)))) * cbInstanceData._m0[_534].x;
    float _541 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0)))) * cbInstanceData._m0[_534].y;
    float _542 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0)))) * cbInstanceData._m0[_534].z;
    float _3755 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _543 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
    float _3766 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _544 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
    float _3777 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _545 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
    float _546 = 1.0 - _398;
    float _547 = _543 * _546;
    float _548 = _544 * _546;
    float _549 = _545 * _546;
    float _554 = (_543 + (-0.039999999105930328369140625)) * _398;
    float _555 = (_544 + (-0.039999999105930328369140625)) * _398;
    float _556 = (_545 + (-0.039999999105930328369140625)) * _398;
    float _557 = _554 + 0.039999999105930328369140625;
    float _559 = _555 + 0.039999999105930328369140625;
    float _560 = _556 + 0.039999999105930328369140625;
    vec4 _569 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _493, cbSceneParam._m0[86u].y * _494));
    float _573 = ((isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0))) * TEXCOORD_5.w) * _569.x;
    float _574 = dot(vec3(_390, _391, _392), vec3(_475, _476, _477));
    float _577 = _574 * 2.0;
    float _581 = (_577 * _390) - _475;
    float _582 = (_577 * _391) - _476;
    float _583 = (_577 * _392) - _477;
    float _587 = abs(dot(vec3(_475, _476, _477), vec3(_390, _391, _392)));
    float _3788 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _589 = sqrt(_393);
    float _602 = exp2((_589 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_589 * 3.0));
    float _608 = (1.0 - _602) * ((_589 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _609 = _602 * _589;
    float _637 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _641 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _645 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _974;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _699 = fma(_645, cbModelParam._m0[26u].z, fma(_641, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _637));
        float _703 = fma(_645, cbModelParam._m0[27u].z, fma(_641, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _637));
        float _707 = fma(_645, cbModelParam._m0[28u].z, fma(_641, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _637));
        float _732 = _637 + _390;
        float _733 = _641 + _391;
        float _734 = _645 + _392;
        float _744 = fma(_734, cbModelParam._m0[26u].z, fma(_733, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _732)) - _699;
        float _745 = fma(_734, cbModelParam._m0[27u].z, fma(_733, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _732)) - _703;
        float _746 = fma(_734, cbModelParam._m0[28u].z, fma(_733, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _732)) - _707;
        float _750 = inversesqrt(dot(vec3(_744, _745, _746), vec3(_744, _745, _746)));
        float _763 = ((_750 * _744) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_699 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _764 = ((_750 * _745) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_703 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _765 = ((_750 * _746) / cbModelParam._m0[34u].z) + ((((((_707 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _768 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_763, _764, _765), 0.0);
        vec4 _775 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_763, _764, _765), 0.0);
        vec4 _782 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_763, _764, _765), 0.0);
        vec4 _789 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_763, _764, _765), 0.0);
        float _802 = exp2((_768.w + (-0.5)) * 20.0) * 2.0;
        float _803 = _802 * (_768.x + (-0.5));
        float _804 = _802 * (_768.y + (-0.5));
        float _805 = _802 * (_768.z + (-0.5));
        float _812 = exp2((_775.w + (-0.5)) * 20.0) * 2.0;
        float _813 = _812 * (_775.x + (-0.5));
        float _814 = _812 * (_775.y + (-0.5));
        float _815 = _812 * (_775.z + (-0.5));
        float _822 = exp2((_782.w + (-0.5)) * 20.0) * 2.0;
        float _823 = _822 * (_782.x + (-0.5));
        float _824 = _822 * (_782.y + (-0.5));
        float _825 = _822 * (_782.z + (-0.5));
        float _832 = exp2((_789.w + (-0.5)) * 20.0) * 2.0;
        float _833 = _832 * (_789.x + (-0.5));
        float _834 = _832 * (_789.y + (-0.5));
        float _835 = _832 * (_789.z + (-0.5));
        float _836 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _837 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _838 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _839 = _803 * 0.5;
        float _840 = _813 * 0.5;
        float _841 = _823 * 0.5;
        float _842 = dot(vec3(_839, _840, _841), vec3(_839, _840, _841));
        float _847 = (_842 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_842);
        float _856 = (dot(vec3(_390, _391, _392), vec3(_847 * _839, _847 * _840, _847 * _841)) + 1.0) * 0.5;
        float _3814 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _866 = sqrt(((_840 * _840) + (_839 * _839)) + (_841 * _841)) / (_836 + 9.9999997473787516355514526367188e-06);
        float _3825 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _867 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _868 = _867 * 2.0;
        float _872 = (1.0 - _867) / (_867 + 1.0);
        float _3836 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _873 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _882 = ((((1.0 - _873) * (_868 + 2.0)) * exp2(log2(isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) * (_868 + 1.0))) + _873) * _836;
        float _883 = _804 * 0.5;
        float _884 = _814 * 0.5;
        float _885 = _824 * 0.5;
        float _886 = dot(vec3(_883, _884, _885), vec3(_883, _884, _885));
        float _891 = (_886 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_886);
        float _899 = (dot(vec3(_390, _391, _392), vec3(_891 * _883, _891 * _884, _891 * _885)) + 1.0) * 0.5;
        float _3847 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _908 = sqrt(((_884 * _884) + (_883 * _883)) + (_885 * _885)) / (_837 + 9.9999997473787516355514526367188e-06);
        float _3858 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _909 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _910 = _909 * 2.0;
        float _914 = (1.0 - _909) / (_909 + 1.0);
        float _3869 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _915 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _924 = ((((1.0 - _915) * (_910 + 2.0)) * exp2(log2(isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * (_910 + 1.0))) + _915) * _837;
        float _925 = _805 * 0.5;
        float _926 = _815 * 0.5;
        float _927 = _825 * 0.5;
        float _928 = dot(vec3(_925, _926, _927), vec3(_925, _926, _927));
        float _933 = (_928 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_928);
        float _941 = (dot(vec3(_390, _391, _392), vec3(_933 * _925, _933 * _926, _933 * _927)) + 1.0) * 0.5;
        float _3880 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _950 = sqrt(((_926 * _926) + (_925 * _925)) + (_927 * _927)) / (_838 + 9.9999997473787516355514526367188e-06);
        float _3891 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _951 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _952 = _951 * 2.0;
        float _956 = (1.0 - _951) / (_951 + 1.0);
        float _3902 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _966 = ((((1.0 - _957) * (_952 + 2.0)) * exp2(log2(isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * (_952 + 1.0))) + _957) * _838;
        _974 = _805;
        _976 = _804;
        _977 = _803;
        _978 = _815;
        _979 = _814;
        _980 = _813;
        _981 = _825;
        _982 = _824;
        _983 = _823;
        _984 = _838;
        _985 = _837;
        _986 = _836;
        _987 = cbModelParam._m0[36u].z * (isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0)));
        _988 = cbModelParam._m0[36u].z * (isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0)));
        _989 = cbModelParam._m0[36u].z * (isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0)));
    }
    else
    {
        _974 = _975;
        _976 = _975;
        _977 = _975;
        _978 = _975;
        _979 = _975;
        _980 = _975;
        _981 = _975;
        _982 = _975;
        _983 = _975;
        _984 = _975;
        _985 = _975;
        _986 = _975;
        _987 = 0.0;
        _988 = 0.0;
        _989 = 0.0;
    }
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1014 = fma(_645, cbModelParam._m0[30u].z, fma(_641, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _637));
        float _1018 = fma(_645, cbModelParam._m0[31u].z, fma(_641, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _637));
        float _1022 = fma(_645, cbModelParam._m0[32u].z, fma(_641, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _637));
        float _1045 = _637 + _390;
        float _1046 = _641 + _391;
        float _1047 = _645 + _392;
        float _1057 = fma(_1047, cbModelParam._m0[30u].z, fma(_1046, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1045)) - _1014;
        float _1058 = fma(_1047, cbModelParam._m0[31u].z, fma(_1046, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1045)) - _1018;
        float _1059 = fma(_1047, cbModelParam._m0[32u].z, fma(_1046, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1045)) - _1022;
        float _1063 = inversesqrt(dot(vec3(_1057, _1058, _1059), vec3(_1057, _1058, _1059)));
        float _1076 = ((_1063 * _1057) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1014 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1077 = ((_1063 * _1058) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1018 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1078 = ((_1063 * _1059) / cbModelParam._m0[35u].z) + ((((((_1022 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1076, _1077, _1078), 0.0);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1076, _1077, _1078), 0.0);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1076, _1077, _1078), 0.0);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1076, _1077, _1078), 0.0);
        float _1113 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1080.x + (-0.5));
        float _1115 = _1113 * (_1080.y + (-0.5));
        float _1116 = _1113 * (_1080.z + (-0.5));
        float _1123 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1087.x + (-0.5));
        float _1125 = _1123 * (_1087.y + (-0.5));
        float _1126 = _1123 * (_1087.z + (-0.5));
        float _1133 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1094.x + (-0.5));
        float _1135 = _1133 * (_1094.y + (-0.5));
        float _1136 = _1133 * (_1094.z + (-0.5));
        float _1143 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1101.x + (-0.5));
        float _1145 = _1143 * (_1101.y + (-0.5));
        float _1146 = _1143 * (_1101.z + (-0.5));
        float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1148 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1149 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1150 = _1114 * 0.5;
        float _1151 = _1124 * 0.5;
        float _1152 = _1134 * 0.5;
        float _1153 = dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152));
        float _1158 = (_1153 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1153);
        float _1166 = (dot(vec3(_390, _391, _392), vec3(_1158 * _1150, _1158 * _1151, _1158 * _1152)) + 1.0) * 0.5;
        float _3943 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1175 = sqrt(((_1151 * _1151) + (_1150 * _1150)) + (_1152 * _1152)) / (_1147 + 9.9999997473787516355514526367188e-06);
        float _3954 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1177 = _1176 * 2.0;
        float _1181 = (1.0 - _1176) / (_1176 + 1.0);
        float _3965 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1191 = ((((1.0 - _1182) * (_1177 + 2.0)) * exp2(log2(isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * (_1177 + 1.0))) + _1182) * _1147;
        float _1192 = _1115 * 0.5;
        float _1193 = _1125 * 0.5;
        float _1194 = _1135 * 0.5;
        float _1195 = dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194));
        float _1200 = (_1195 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1195);
        float _1208 = (dot(vec3(_390, _391, _392), vec3(_1200 * _1192, _1200 * _1193, _1200 * _1194)) + 1.0) * 0.5;
        float _3976 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1217 = sqrt(((_1193 * _1193) + (_1192 * _1192)) + (_1194 * _1194)) / (_1148 + 9.9999997473787516355514526367188e-06);
        float _3987 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _3998 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_1219 + 1.0))) + _1224) * _1148;
        float _1234 = _1116 * 0.5;
        float _1235 = _1126 * 0.5;
        float _1236 = _1136 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1250 = (dot(vec3(_390, _391, _392), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _4009 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1259 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1149 + 9.9999997473787516355514526367188e-06);
        float _4020 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _4031 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * (_1261 + 1.0))) + _1266) * _1149;
        _1283 = _1116;
        _1284 = _1115;
        _1285 = _1114;
        _1286 = _1126;
        _1287 = _1125;
        _1288 = _1124;
        _1289 = _1136;
        _1290 = _1135;
        _1291 = _1134;
        _1292 = _1149;
        _1293 = _1148;
        _1294 = _1147;
        _1295 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)));
        _1296 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
        _1297 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
    }
    else
    {
        _1283 = _975;
        _1284 = _975;
        _1285 = _975;
        _1286 = _975;
        _1287 = _975;
        _1288 = _975;
        _1289 = _975;
        _1290 = _975;
        _1291 = _975;
        _1292 = _975;
        _1293 = _975;
        _1294 = _975;
        _1295 = 0.0;
        _1296 = 0.0;
        _1297 = 0.0;
    }
    float _1307 = (cbModelParam._m0[1u].x * (_1295 - _987)) + _987;
    float _1308 = (cbModelParam._m0[1u].x * (_1296 - _988)) + _988;
    float _1309 = (cbModelParam._m0[1u].x * (_1297 - _989)) + _989;
    float _1330 = fma(_1309, cbSceneParam._m0[89u].z, fma(_1308, cbSceneParam._m0[89u].y, _1307 * cbSceneParam._m0[89u].x));
    float _1333 = fma(_1309, cbSceneParam._m0[90u].z, fma(_1308, cbSceneParam._m0[90u].y, _1307 * cbSceneParam._m0[90u].x));
    float _1336 = fma(_1309, cbSceneParam._m0[91u].z, fma(_1308, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1307));
    float _1351 = _581 * 0.5;
    float _1352 = _582 * 0.5;
    float _1353 = _583 * 0.5;
    float _1354 = dot(vec4(_1351, _1352, _1353, 1.0), vec4(_1285, _1288, _1291, _1294));
    float _1357 = dot(vec4(_1351, _1352, _1353, 1.0), vec4(_1284, _1287, _1290, _1293));
    float _1360 = dot(vec4(_1351, _1352, _1353, 1.0), vec4(_1283, _1286, _1289, _1292));
    float _1394;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1367 = dot(vec4(_1351, _1352, _1353, 1.0), vec4(_974, _978, _981, _984));
        float _1371 = dot(vec4(_1351, _1352, _1353, 1.0), vec4(_976, _979, _982, _985));
        float _1375 = dot(vec4(_1351, _1352, _1353, 1.0), vec4(_977, _980, _983, _986));
        float _1382 = dot(vec4(cbModelParam._m0[39u]), vec4(_1351, _1352, _1353, 1.0));
        _1394 = dot(vec3(isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)), isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)), isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1382) ? 0.0 : (isnan(0.0) ? _1382 : max(0.0, _1382))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1394 = 1.0;
    }
    float _1405;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1396 = dot(vec4(cbModelParam._m0[40u]), vec4(_1351, _1352, _1353, 1.0));
        _1405 = dot(vec3(isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)), isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)), isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1396) ? 0.0 : (isnan(0.0) ? _1396 : max(0.0, _1396))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1405 = 1.0;
    }
    float _1409 = (_1405 * cbModelParam._m0[1u].x) + (_1394 * (1.0 - cbModelParam._m0[1u].x));
    float _1419 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _393);
    float _1420 = isnan(_1419) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1419 : min(cbModelParam._m0[25u].z, _1419));
    float _1502;
    float _1504;
    float _1506;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1469 = fma(_645, cbModelParam._m0[13u].z, fma(_641, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _637)) + cbModelParam._m0[13u].w;
        float _1473 = fma(_645, cbModelParam._m0[14u].z, fma(_641, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _637)) + cbModelParam._m0[14u].w;
        float _1477 = fma(_645, cbModelParam._m0[15u].z, fma(_641, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _637)) + cbModelParam._m0[15u].w;
        float _1480 = fma(_583, cbModelParam._m0[13u].z, fma(_582, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _581));
        float _1483 = fma(_583, cbModelParam._m0[14u].z, fma(_582, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _581));
        float _1486 = fma(_583, cbModelParam._m0[15u].z, fma(_582, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _581));
        float _1514;
        if (_1480 > 0.0)
        {
            _1514 = abs((1.0 - _1469) / _1480);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1480 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1469 + 1.0) / _1480);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1514 = frontier_phi_19_17_ladder;
        }
        float _1688;
        if (_1483 > 0.0)
        {
            _1688 = abs((1.0 - _1473) / _1483);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1483 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1473 + 1.0) / _1483);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1688 = frontier_phi_28_24_ladder;
        }
        float _1984;
        if (_1486 > 0.0)
        {
            _1984 = abs((1.0 - _1477) / _1486);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1486 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1477 + 1.0) / _1486);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1984 = frontier_phi_40_35_ladder;
        }
        float _1986 = isnan(_1688) ? _1514 : (isnan(_1514) ? _1688 : min(_1514, _1688));
        float _1987 = isnan(_1984) ? _1986 : (isnan(_1986) ? _1984 : min(_1986, _1984));
        float _1991 = (_1987 * _1480) + _1469;
        float _1992 = (_1987 * _1483) + _1473;
        float _1993 = (_1987 * _1486) + _1477;
        float _1994 = _1987 * 9.9999997473787516355514526367188e-05;
        float _1996 = (-1.0) - _1994;
        float _1998 = _1994 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1993 > _1998) || ((_1993 < _1996) || ((_1992 > _1998) || ((_1992 < _1996) || ((_1991 < _1996) || (_1991 > _1998))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2138 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1993, cbModelParam._m0[9u].z, fma(_1992, cbModelParam._m0[9u].y, _1991 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1993, cbModelParam._m0[10u].z, fma(_1992, cbModelParam._m0[10u].y, _1991 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1993, cbModelParam._m0[11u].z, fma(_1992, cbModelParam._m0[11u].y, _1991 * cbModelParam._m0[11u].x))), _1420);
            frontier_phi_18_40_ladder = _2138.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2138.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2138.x * cbModelParam._m0[1u].y;
        }
        _1502 = frontier_phi_18_40_ladder_2;
        _1504 = frontier_phi_18_40_ladder_1;
        _1506 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1490 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_581, _582, _583), _1420);
        _1502 = _1490.x * cbModelParam._m0[1u].y;
        _1504 = _1490.y * cbModelParam._m0[1u].y;
        _1506 = _1490.z * cbModelParam._m0[1u].y;
    }
    float _1510 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _393);
    float _1511 = isnan(_1510) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1510 : min(cbModelParam._m0[25u].w, _1510));
    float _1603;
    float _1605;
    float _1607;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1567 = fma(_645, cbModelParam._m0[21u].z, fma(_641, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _637)) + cbModelParam._m0[21u].w;
        float _1571 = fma(_645, cbModelParam._m0[22u].z, fma(_641, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _637)) + cbModelParam._m0[22u].w;
        float _1575 = fma(_645, cbModelParam._m0[23u].z, fma(_641, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _637)) + cbModelParam._m0[23u].w;
        float _1578 = fma(_583, cbModelParam._m0[21u].z, fma(_582, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _581));
        float _1581 = fma(_583, cbModelParam._m0[22u].z, fma(_582, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _581));
        float _1584 = fma(_583, cbModelParam._m0[23u].z, fma(_582, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _581));
        float _1693;
        if (_1578 > 0.0)
        {
            _1693 = abs((1.0 - _1567) / _1578);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1578 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1567 + 1.0) / _1578);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1693 = frontier_phi_30_26_ladder;
        }
        float _2011;
        if (_1581 > 0.0)
        {
            _2011 = abs((1.0 - _1571) / _1581);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1581 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1571 + 1.0) / _1581);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2011 = frontier_phi_42_37_ladder;
        }
        float _2349;
        if (_1584 > 0.0)
        {
            _2349 = abs((1.0 - _1575) / _1584);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1584 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1575 + 1.0) / _1584);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2349 = frontier_phi_52_49_ladder;
        }
        float _2351 = isnan(_2011) ? _1693 : (isnan(_1693) ? _2011 : min(_1693, _2011));
        float _2352 = isnan(_2349) ? _2351 : (isnan(_2351) ? _2349 : min(_2351, _2349));
        float _2356 = (_2352 * _1578) + _1567;
        float _2357 = (_2352 * _1581) + _1571;
        float _2358 = (_2352 * _1584) + _1575;
        float _2359 = _2352 * 9.9999997473787516355514526367188e-05;
        float _2360 = (-1.0) - _2359;
        float _2362 = _2359 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2358 > _2362) || ((_2358 < _2360) || ((_2357 > _2362) || ((_2357 < _2360) || ((_2356 < _2360) || (_2356 > _2362))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2480 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2358, cbModelParam._m0[17u].z, fma(_2357, cbModelParam._m0[17u].y, _2356 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2358, cbModelParam._m0[18u].z, fma(_2357, cbModelParam._m0[18u].y, _2356 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2358, cbModelParam._m0[19u].z, fma(_2357, cbModelParam._m0[19u].y, _2356 * cbModelParam._m0[19u].x))), _1511);
            frontier_phi_27_52_ladder = _2480.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2480.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2480.x * cbModelParam._m0[1u].z;
        }
        _1603 = frontier_phi_27_52_ladder_2;
        _1605 = frontier_phi_27_52_ladder_1;
        _1607 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1587 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_581, _582, _583), _1511);
        _1603 = _1587.x * cbModelParam._m0[1u].z;
        _1605 = _1587.y * cbModelParam._m0[1u].z;
        _1607 = _1587.z * cbModelParam._m0[1u].z;
    }
    float _1620 = (((_608 * _557) + _609) * _573) * ((cbModelParam._m0[1u].w * (_1603 - _1502)) + _1502);
    float _1622 = (((_608 * _559) + _609) * _573) * ((cbModelParam._m0[1u].w * (_1605 - _1504)) + _1504);
    float _1624 = (((_608 * _560) + _609) * _573) * ((cbModelParam._m0[1u].w * (_1607 - _1506)) + _1506);
    float _1627 = fma(_1624, cbSceneParam._m0[89u].z, fma(_1622, cbSceneParam._m0[89u].y, _1620 * cbSceneParam._m0[89u].x));
    float _1630 = fma(_1624, cbSceneParam._m0[90u].z, fma(_1622, cbSceneParam._m0[90u].y, _1620 * cbSceneParam._m0[90u].x));
    float _1633 = fma(_1624, cbSceneParam._m0[91u].z, fma(_1622, cbSceneParam._m0[91u].y, _1620 * cbSceneParam._m0[91u].x));
    float _1667 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1671 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1675 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1679 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1680 = _1667 / _1679;
    float _1681 = _1671 / _1679;
    float _1682 = _1675 / _1679;
    float _1829;
    float _1830;
    float _1831;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1709 = ((uint(_1682 > cbSceneParam._m0[59u].y) + uint(_1682 > cbSceneParam._m0[59u].x)) + uint(_1682 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1710 = _1709 + 43u;
        uint _1718 = _1709 + 44u;
        uint _1726 = _1709 + 45u;
        uint _1734 = _1709 + 46u;
        float _1745 = fma(_1679, cbSceneParam._m0[_1710].w, fma(_1675, cbSceneParam._m0[_1710].z, fma(_1671, cbSceneParam._m0[_1710].y, _1667 * cbSceneParam._m0[_1710].x)));
        float _1749 = fma(_1679, cbSceneParam._m0[_1718].w, fma(_1675, cbSceneParam._m0[_1718].z, fma(_1671, cbSceneParam._m0[_1718].y, _1667 * cbSceneParam._m0[_1718].x)));
        float _1757 = fma(_1679, cbSceneParam._m0[_1734].w, fma(_1675, cbSceneParam._m0[_1734].z, fma(_1671, cbSceneParam._m0[_1734].y, _1667 * cbSceneParam._m0[_1734].x)));
        float _1762 = cbSceneParam._m0[33u].z * _1757;
        float _1764 = cbSceneParam._m0[33u].w * _1757;
        float _1767 = fma(_1679, cbSceneParam._m0[_1726].w, fma(_1675, cbSceneParam._m0[_1726].z, fma(_1671, cbSceneParam._m0[_1726].y, _1667 * cbSceneParam._m0[_1726].x))) / _1757;
        float _1815 = (cbSceneParam._m0[33u].x - sqrt(((_1681 * _1681) + (_1680 * _1680)) + (_1682 * _1682))) * cbSceneParam._m0[33u].y;
        float _4157 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1822 = (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1762 + _1745) / _1757, (_1764 + _1749) / _1757), _1767), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1764 + _1745) / _1757, (_1749 - _1762) / _1757), _1767), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1745 - _1762) / _1757, (_1749 - _1764) / _1757), _1767), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1745 - _1764) / _1757, (_1762 + _1749) / _1757), _1767), 0.0)).x), vec4(0.25)));
        _1829 = 1.0 - (_1822 * cbSceneParam._m0[34u].x);
        _1830 = 1.0 - (_1822 * cbSceneParam._m0[34u].y);
        _1831 = 1.0 - (_1822 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1829 = 1.0;
        _1830 = 1.0;
        _1831 = 1.0;
    }
    float _1895;
    float _1897;
    float _1899;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1883 = fma(_1679, cbSceneParam._m0[63u].w, fma(_1675, cbSceneParam._m0[63u].z, fma(_1671, cbSceneParam._m0[63u].y, _1667 * cbSceneParam._m0[63u].x)));
        float _1884 = fma(_1679, cbSceneParam._m0[60u].w, fma(_1675, cbSceneParam._m0[60u].z, fma(_1671, cbSceneParam._m0[60u].y, _1667 * cbSceneParam._m0[60u].x))) / _1883;
        float _1885 = fma(_1679, cbSceneParam._m0[61u].w, fma(_1675, cbSceneParam._m0[61u].z, fma(_1671, cbSceneParam._m0[61u].y, _1667 * cbSceneParam._m0[61u].x))) / _1883;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1884 >= cbSceneParam._m0[64u].x) && (_1885 >= cbSceneParam._m0[64u].y)) && (_1884 <= cbSceneParam._m0[64u].z)) && (_1885 <= cbSceneParam._m0[64u].w))
        {
            float _2024 = fma(_1679, cbSceneParam._m0[62u].w, fma(_1675, cbSceneParam._m0[62u].z, fma(_1671, cbSceneParam._m0[62u].y, _1667 * cbSceneParam._m0[62u].x))) / _1883;
            float _2028 = isnan(cbSceneParam._m0[41u].w) ? _2024 : (isnan(_2024) ? cbSceneParam._m0[41u].w : max(_2024, cbSceneParam._m0[41u].w));
            float _2071 = (cbSceneParam._m0[33u].x - sqrt(((_1681 * _1681) + (_1680 * _1680)) + (_1682 * _1682))) * cbSceneParam._m0[33u].y;
            float _4173 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
            float _2078 = (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1884, cbSceneParam._m0[33u].w + _1885), _2028), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1884, _1885 - cbSceneParam._m0[33u].z), _2028), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1884 - cbSceneParam._m0[33u].z, _1885 - cbSceneParam._m0[33u].w), _2028), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1884 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1885), _2028), 0.0)).x), vec4(0.25)));
            float _2082 = 1.0 - (_2078 * cbSceneParam._m0[34u].x);
            float _2083 = 1.0 - (_2078 * cbSceneParam._m0[34u].y);
            float _2084 = 1.0 - (_2078 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2084) ? _1831 : (isnan(_1831) ? _2084 : min(_1831, _2084));
            frontier_phi_39_38_ladder_1 = isnan(_2083) ? _1830 : (isnan(_1830) ? _2083 : min(_1830, _2083));
            frontier_phi_39_38_ladder_2 = isnan(_2082) ? _1829 : (isnan(_1829) ? _2082 : min(_1829, _2082));
        }
        else
        {
            frontier_phi_39_38_ladder = _1831;
            frontier_phi_39_38_ladder_1 = _1830;
            frontier_phi_39_38_ladder_2 = _1829;
        }
        _1895 = frontier_phi_39_38_ladder_2;
        _1897 = frontier_phi_39_38_ladder_1;
        _1899 = frontier_phi_39_38_ladder;
    }
    else
    {
        _1895 = _1829;
        _1897 = _1830;
        _1899 = _1831;
    }
    uvec4 _1904 = floatBitsToUint(cbInstanceData._m0[_228 + 5u]);
    uint _1906 = _1904.x * 14u;
    uint _1907 = _1906 + 13u;
    float _1914 = _573 + (-1.0);
    float _1919 = (cbLight._m0[_1907].x * _1914) + 1.0;
    float _1920 = (cbLight._m0[_1907].y * _1914) + 1.0;
    float _1921 = (cbLight._m0[_1907].z * _1914) + 1.0;
    float _1922 = (cbLight._m0[_1907].w * _1914) + 1.0;
    uint _1923 = _1906 + 5u;
    float _1929 = isnan(1.0) ? _1920 : (isnan(_1920) ? 1.0 : min(_1920, 1.0));
    uint _1933 = _1906 + 4u;
    float _1943 = isnan(1.0) ? _1919 : (isnan(_1919) ? 1.0 : min(_1919, 1.0));
    uint _1947 = _1906 | 1u;
    float _1958 = dot(vec3(cbLight._m0[_1906].xyz), vec3(_390, _391, _392));
    float _1961 = dot(vec3(cbLight._m0[_1947].xyz), vec3(_390, _391, _392));
    float _4209 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _4220 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1966 = (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * 0.3183098733425140380859375;
    float _1968 = (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * 0.3183098733425140380859375;
    float _1975 = ((cbLight._m0[_1923].x * _1929) * _1968) + (((cbLight._m0[_1933].x * _1895) * _1943) * _1966);
    float _1976 = ((_1929 * cbLight._m0[_1923].y) * _1968) + (((cbLight._m0[_1933].y * _1897) * _1943) * _1966);
    float _1977 = ((_1929 * cbLight._m0[_1923].z) * _1968) + (((cbLight._m0[_1933].z * _1899) * _1943) * _1966);
    uvec4 _1981 = floatBitsToUint(cbLight._m0[_1906 + 12u]);
    bool _1983 = _1981.x == 0u;
    float _2085;
    float _2087;
    float _2089;
    if (_1983)
    {
        _2085 = _1975;
        _2087 = _1976;
        _2089 = _1977;
    }
    else
    {
        uint _2093 = _1906 + 6u;
        float _2109 = (dot(vec3(cbLight._m0[_1906 + 2u].xyz), vec3(_390, _391, _392)) * 0.5) + 0.5;
        float _2110 = _2109 * _2109;
        float _4231 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2111 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _2112 = isnan(1.0) ? _1921 : (isnan(_1921) ? 1.0 : min(_1921, 1.0));
        _2085 = (((cbLight._m0[_2093].x * 0.3183098733425140380859375) * _2111) * _2112) + _1975;
        _2087 = (((cbLight._m0[_2093].y * 0.3183098733425140380859375) * _2111) * _2112) + _1976;
        _2089 = (((cbLight._m0[_2093].z * 0.3183098733425140380859375) * _2111) * _2112) + _1977;
    }
    bool _2092 = _1981.y == 0u;
    float _2147;
    float _2149;
    float _2151;
    if (_2092)
    {
        _2147 = _2085;
        _2149 = _2087;
        _2151 = _2089;
    }
    else
    {
        uint _2320 = _1906 + 7u;
        float _2336 = (dot(vec3(cbLight._m0[_1906 + 3u].xyz), vec3(_390, _391, _392)) * 0.5) + 0.5;
        float _2337 = _2336 * _2336;
        float _4247 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        float _2338 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _2339 = isnan(1.0) ? _1922 : (isnan(_1922) ? 1.0 : min(_1922, 1.0));
        _2147 = (((cbLight._m0[_2320].x * 0.3183098733425140380859375) * _2338) * _2339) + _2085;
        _2149 = (((cbLight._m0[_2320].y * 0.3183098733425140380859375) * _2338) * _2339) + _2087;
        _2151 = (((cbLight._m0[_2320].z * 0.3183098733425140380859375) * _2338) * _2339) + _2089;
    }
    uint _2154 = _1906 + 8u;
    float _2167 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1906].w)) * _393) * 0.949999988079071044921875);
    float _2168 = _2167 * _2167;
    float _2169 = cbLight._m0[_1906].x + _475;
    float _2170 = cbLight._m0[_1906].y + _476;
    float _2171 = cbLight._m0[_1906].z + _477;
    float _2175 = inversesqrt(dot(vec3(_2169, _2170, _2171), vec3(_2169, _2170, _2171)));
    float _2176 = _2175 * _2169;
    float _2177 = _2175 * _2170;
    float _2178 = _2175 * _2171;
    float _2179 = dot(vec3(_390, _391, _392), vec3(cbLight._m0[_1906].xyz));
    float _4263 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2182 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    float _4274 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _2183 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
    float _2184 = dot(vec3(_390, _391, _392), vec3(_2176, _2177, _2178));
    float _4285 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2187 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
    float _2188 = dot(vec3(cbLight._m0[_1906].xyz), vec3(_2176, _2177, _2178));
    float _4296 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2192 = _2168 * _2168;
    float _2196 = ((_2187 * _2187) * (_2192 + (-1.0))) + 1.0;
    float _2204 = exp2(log2(1.0 - (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0)))) * 5.0);
    float _2205 = 0.959999978542327880859375 - _554;
    float _2207 = 0.959999978542327880859375 - _555;
    float _2208 = 0.959999978542327880859375 - _556;
    float _2215 = 1.0 - _2168;
    float _2226 = (0.5 / (((_2183 * ((_2182 * _2215) + _2168)) + 9.9999999392252902907785028219223e-09) + (((_2183 * _2215) + _2168) * _2182))) * _2182;
    float _4307 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2228 = (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_2192 / ((_2196 * _2196) * 3.141590118408203125));
    uint _2242 = _1906 + 9u;
    float _2253 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1947].w)) * _393) * 0.949999988079071044921875);
    float _2254 = _2253 * _2253;
    float _2255 = cbLight._m0[_1947].x + _475;
    float _2256 = cbLight._m0[_1947].y + _476;
    float _2257 = cbLight._m0[_1947].z + _477;
    float _2261 = inversesqrt(dot(vec3(_2255, _2256, _2257), vec3(_2255, _2256, _2257)));
    float _2262 = _2261 * _2255;
    float _2263 = _2261 * _2256;
    float _2264 = _2261 * _2257;
    float _2265 = dot(vec3(_390, _391, _392), vec3(cbLight._m0[_1947].xyz));
    float _4318 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
    float _2268 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
    float _2269 = dot(vec3(_390, _391, _392), vec3(_2262, _2263, _2264));
    float _4329 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2272 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
    float _2273 = dot(vec3(cbLight._m0[_1947].xyz), vec3(_2262, _2263, _2264));
    float _4340 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2277 = _2254 * _2254;
    float _2281 = ((_2272 * _2272) * (_2277 + (-1.0))) + 1.0;
    float _2288 = exp2(log2(1.0 - (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0)))) * 5.0);
    float _2295 = 1.0 - _2254;
    float _2305 = (0.5 / (((_2183 * ((_2268 * _2295) + _2254)) + 9.9999999392252902907785028219223e-09) + (((_2183 * _2295) + _2254) * _2268))) * _2268;
    float _4351 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2307 = (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * (_2277 / ((_2281 * _2281) * 3.141590118408203125));
    float _2317 = (((((_2288 * _2205) + _557) * cbLight._m0[_2242].x) * _2307) * _1929) + ((((cbLight._m0[_2154].x * _1895) * ((_2204 * _2205) + _557)) * _2228) * _1943);
    float _2318 = (((((_2288 * _2207) + _559) * cbLight._m0[_2242].y) * _2307) * _1929) + ((((cbLight._m0[_2154].y * _1897) * ((_2204 * _2207) + _559)) * _2228) * _1943);
    float _2319 = (((((_2288 * _2208) + _560) * cbLight._m0[_2242].z) * _2307) * _1929) + ((((cbLight._m0[_2154].z * _1899) * ((_2204 * _2208) + _560)) * _2228) * _1943);
    float _2375;
    float _2377;
    float _2379;
    if (_1983)
    {
        _2375 = _2317;
        _2377 = _2318;
        _2379 = _2319;
    }
    else
    {
        uint _2381 = _1906 + 2u;
        uint _2385 = _1906 + 10u;
        float _2399 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2381].w)) * _393) * 0.949999988079071044921875);
        float _2400 = _2399 * _2399;
        float _2401 = cbLight._m0[_2381].x + _475;
        float _2402 = cbLight._m0[_2381].y + _476;
        float _2403 = cbLight._m0[_2381].z + _477;
        float _2407 = inversesqrt(dot(vec3(_2401, _2402, _2403), vec3(_2401, _2402, _2403)));
        float _2408 = _2407 * _2401;
        float _2409 = _2407 * _2402;
        float _2410 = _2407 * _2403;
        float _2411 = dot(vec3(_390, _391, _392), vec3(cbLight._m0[_2381].xyz));
        float _4362 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        float _2414 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _2415 = dot(vec3(_390, _391, _392), vec3(_2408, _2409, _2410));
        float _4373 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2418 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _2419 = dot(vec3(cbLight._m0[_2381].xyz), vec3(_2408, _2409, _2410));
        float _4384 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2423 = _2400 * _2400;
        float _2427 = ((_2418 * _2418) * (_2423 + (-1.0))) + 1.0;
        float _2434 = exp2(log2(1.0 - (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0)))) * 5.0);
        float _2441 = 1.0 - _2400;
        float _2451 = (0.5 / (((_2183 * ((_2414 * _2441) + _2400)) + 9.9999999392252902907785028219223e-09) + (((_2183 * _2441) + _2400) * _2414))) * _2414;
        float _4395 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2453 = (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * (_2423 / ((_2427 * _2427) * 3.141590118408203125));
        float _2454 = isnan(1.0) ? _1921 : (isnan(_1921) ? 1.0 : min(_1921, 1.0));
        _2375 = (((((_2434 * _2205) + _557) * cbLight._m0[_2385].x) * _2453) * _2454) + _2317;
        _2377 = (((((_2434 * _2207) + _559) * cbLight._m0[_2385].y) * _2453) * _2454) + _2318;
        _2379 = (((((_2434 * _2208) + _560) * cbLight._m0[_2385].z) * _2453) * _2454) + _2319;
    }
    float _2485;
    float _2487;
    float _2489;
    if (_2092)
    {
        _2485 = _2375;
        _2487 = _2377;
        _2489 = _2379;
    }
    else
    {
        uint _2496 = _1906 + 3u;
        uint _2500 = _1906 + 11u;
        float _2514 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2496].w)) * _393) * 0.949999988079071044921875);
        float _2515 = _2514 * _2514;
        float _2516 = cbLight._m0[_2496].x + _475;
        float _2517 = cbLight._m0[_2496].y + _476;
        float _2518 = cbLight._m0[_2496].z + _477;
        float _2522 = inversesqrt(dot(vec3(_2516, _2517, _2518), vec3(_2516, _2517, _2518)));
        float _2523 = _2522 * _2516;
        float _2524 = _2522 * _2517;
        float _2525 = _2522 * _2518;
        float _2526 = dot(vec3(_390, _391, _392), vec3(cbLight._m0[_2496].xyz));
        float _4411 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2529 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _2530 = dot(vec3(_390, _391, _392), vec3(_2523, _2524, _2525));
        float _4422 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2533 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _2534 = dot(vec3(cbLight._m0[_2496].xyz), vec3(_2523, _2524, _2525));
        float _4433 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2538 = _2515 * _2515;
        float _2542 = ((_2533 * _2533) * (_2538 + (-1.0))) + 1.0;
        float _2549 = exp2(log2(1.0 - (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0)))) * 5.0);
        float _2556 = 1.0 - _2515;
        float _2566 = (0.5 / (((_2183 * ((_2529 * _2556) + _2515)) + 9.9999999392252902907785028219223e-09) + (((_2183 * _2556) + _2515) * _2529))) * _2529;
        float _4444 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2568 = (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_2538 / ((_2542 * _2542) * 3.141590118408203125));
        float _2569 = isnan(1.0) ? _1922 : (isnan(_1922) ? 1.0 : min(_1922, 1.0));
        _2485 = (((((_2549 * _2205) + _557) * cbLight._m0[_2500].x) * _2568) * _2569) + _2375;
        _2487 = (((((_2549 * _2207) + _559) * cbLight._m0[_2500].y) * _2568) * _2569) + _2377;
        _2489 = (((((_2549 * _2208) + _560) * cbLight._m0[_2500].z) * _2568) * _2569) + _2379;
    }
    float _2635;
    float _2637;
    float _2639;
    float _2641;
    float _2643;
    float _2645;
    if (_1904.y == 0u)
    {
        uvec4 _2590 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2591 = _2590.x;
        uint _2602 = uint((float(_2590.y) * floor(float(uint(cbSceneParam._m0[85u].y * _494) / _2591))) + floor(float(uint(cbSceneParam._m0[85u].x * _493) / _2591)));
        float _2612 = (log2(_1682 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2613 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        uint _2616 = uint(isnan(14.0) ? _2613 : (isnan(_2613) ? 14.0 : min(_2613, 14.0)));
        uvec4 _2621 = texelFetch(g_lightClusterGridBuffer, int(((_2616 << 2u) + (_2602 << 6u)) >> 2u));
        uint _2622 = _2621.x;
        uint _2623 = _2590.z;
        float _2702;
        float _2704;
        float _2706;
        float _2708;
        float _2710;
        float _2712;
        if (((((1u << ((_2623 >> 4u) & 15u)) + 4294967295u) & _2622) == 0u) || ((_2623 & 240u) == 0u))
        {
            _2702 = 0.0;
            _2704 = 0.0;
            _2706 = 0.0;
            _2708 = 0.0;
            _2710 = 0.0;
            _2712 = 0.0;
        }
        else
        {
            float _2703;
            float _2705;
            float _2707;
            float _2709;
            float _2711;
            float _2713;
            float _2855 = 0.0;
            float _2856 = 0.0;
            float _2857 = 0.0;
            float _2858 = 0.0;
            float _2859 = 0.0;
            float _2860 = 0.0;
            uint _2861 = 0u;
            uint _2870;
            bool _2871;
            for (;;)
            {
                _2870 = texelFetch(g_lightClassification, int((((_2616 << 5u) + (_2602 << 9u)) + (_2861 << 2u)) >> 2u)).x;
                _2871 = _2870 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2871)
                {
                    frontier_phi_73_pred = _2860;
                    frontier_phi_73_pred_1 = _2859;
                    frontier_phi_73_pred_2 = _2858;
                    frontier_phi_73_pred_3 = _2857;
                    frontier_phi_73_pred_4 = _2856;
                    frontier_phi_73_pred_5 = _2855;
                }
                else
                {
                    float _3000;
                    float _3001;
                    float _3002;
                    float _3003;
                    float _3004;
                    float _3005;
                    uint _3006;
                    _3000 = _2855;
                    _3001 = _2856;
                    _3002 = _2857;
                    _3003 = _2858;
                    _3004 = _2859;
                    _3005 = _2860;
                    _3006 = _2870;
                    float _2927;
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    float _2932;
                    for (;;)
                    {
                        uint _3010 = uint(findLSB(_3006)) + (_2861 << 5u);
                        uint _3007 = (_3006 + 4294967295u) & _3006;
                        uint _3012 = _3010 * 48u;
                        vec4 _3026 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3012)).x, texelFetch(g_PointLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3012 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3012 + 3u)).x));
                        uint _3032 = (_3010 * 48u) + 4u;
                        vec4 _3045 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3032)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 3u)).x));
                        uint _3051 = (_3010 * 48u) + 8u;
                        vec3 _3062 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3051)).x, texelFetch(g_PointLightRenderingBuffer, int(_3051 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3051 + 2u)).x));
                        float _3066 = _3026.x - _1680;
                        float _3067 = _3026.y - _1681;
                        float _3068 = _3026.z - _1682;
                        float _3069 = dot(vec3(_3066, _3067, _3068), vec3(_3066, _3067, _3068));
                        float _3072 = inversesqrt(_3069);
                        float _3073 = _3072 * _3066;
                        float _3074 = _3072 * _3067;
                        float _3075 = _3072 * _3068;
                        float _3076 = dot(vec3(_514, _517, _520), vec3(_3073, _3074, _3075));
                        float _3081 = 1.0 - (_3069 * _3026.w);
                        float _4470 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                        float _3082 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                        float _3083 = sqrt(_3069) * _3045.w;
                        float _3086 = 1.39999997615814208984375 / (_3083 + 1.39999997615814208984375);
                        float _3087 = _3086 * _3086;
                        float _3090 = ((1.0 - _3087) * _3076) + _3087;
                        float _3093 = _3083 * _3083;
                        float _3097 = ((isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0))) * _3082) / ((_3093 * 0.699999988079071044921875) + 1.0);
                        float _3101 = (-0.0) - _1680;
                        float _3102 = (-0.0) - _1681;
                        float _3103 = (-0.0) - _1682;
                        float _3107 = inversesqrt(dot(vec3(_3101, _3102, _3103), vec3(_3101, _3102, _3103)));
                        float _3108 = _3107 * _3101;
                        float _3109 = _3107 * _3102;
                        float _3110 = _3107 * _3103;
                        float _3117 = exp2(log2(1.0 / ((_3093 * 3.5) + 5.0)) * 0.25);
                        float _3118 = 1.0 - _589;
                        float _3125 = sqrt(1.0 - ((1.0 - (_3118 * _3118)) * (1.0 - (_3117 * _3117))));
                        float _3126 = _3125 * _3125;
                        float _3127 = _3126 * _3126;
                        float _3128 = _3108 + _3073;
                        float _3129 = _3109 + _3074;
                        float _3130 = _3110 + _3075;
                        float _3134 = inversesqrt(dot(vec3(_3128, _3129, _3130), vec3(_3128, _3129, _3130)));
                        float _3138 = dot(vec3(_514, _517, _520), vec3(_3108, _3109, _3110));
                        float _4486 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                        float _3141 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                        float _3142 = dot(vec3(_514, _517, _520), vec3(_3134 * _3128, _3134 * _3129, _3134 * _3130));
                        float _4497 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
                        float _3145 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                        float _3149 = ((_3145 * _3145) * (_3127 + (-1.0))) + 1.0;
                        float _3150 = _3086 * _3126;
                        float _3151 = _3150 * _3150;
                        float _3154 = ((1.0 - _3151) * _3076) + _3151;
                        float _4508 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                        float _3155 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
                        float _3156 = 1.0 - _3126;
                        float _3166 = (0.5 / (((_3155 * ((_3141 * _3156) + _3126)) + 9.9999999392252902907785028219223e-09) + (((_3155 * _3156) + _3126) * _3141))) * _3155;
                        float _4519 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                        float _3177 = (((_3127 * 3.1415927410125732421875) * (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0)))) / ((_3149 * _3149) * ((_3093 * 2.1991131305694580078125) + 3.141590118408203125))) * _3082;
                        _2930 = (_3097 * _3045.x) + _3003;
                        _2931 = (_3097 * _3045.y) + _3004;
                        _2932 = (_3097 * _3045.z) + _3005;
                        _2927 = (_3177 * _3062.x) + _3000;
                        _2928 = (_3177 * _3062.y) + _3001;
                        _2929 = (_3177 * _3062.z) + _3002;
                        if (_3007 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3000 = _2927;
                            _3001 = _2928;
                            _3002 = _2929;
                            _3003 = _2930;
                            _3004 = _2931;
                            _3005 = _2932;
                            _3006 = _3007;
                        }
                    }
                    frontier_phi_73_pred = _2932;
                    frontier_phi_73_pred_1 = _2931;
                    frontier_phi_73_pred_2 = _2930;
                    frontier_phi_73_pred_3 = _2929;
                    frontier_phi_73_pred_4 = _2928;
                    frontier_phi_73_pred_5 = _2927;
                }
                _2713 = frontier_phi_73_pred;
                _2711 = frontier_phi_73_pred_1;
                _2709 = frontier_phi_73_pred_2;
                _2707 = frontier_phi_73_pred_3;
                _2705 = frontier_phi_73_pred_4;
                _2703 = frontier_phi_73_pred_5;
                uint _2862 = _2861 + 1u;
                if (_2862 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2855 = _2703;
                    _2856 = _2705;
                    _2857 = _2707;
                    _2858 = _2709;
                    _2859 = _2711;
                    _2860 = _2713;
                    _2861 = _2862;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2702 = _2703;
            _2704 = _2705;
            _2706 = _2707;
            _2708 = _2709;
            _2710 = _2711;
            _2712 = _2713;
        }
        uvec4 _2716 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2717 = _2716.z;
        uint _2719 = (_2717 >> 8u) & 15u;
        float _2823;
        float _2825;
        float _2827;
        float _2829;
        float _2831;
        float _2833;
        if (((4294967295u << _2719) & _2622) == 0u)
        {
            _2823 = _2702;
            _2825 = _2704;
            _2827 = _2706;
            _2829 = _2708;
            _2831 = _2710;
            _2833 = _2712;
        }
        else
        {
            float _2848 = inversesqrt(dot(vec3(_1680, _1681, _1682), vec3(_1680, _1681, _1682)));
            float _2849 = _2848 * _1680;
            float _2850 = _2848 * _1681;
            float _2851 = _2848 * _1682;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2719 < ((_2717 >> 12u) & 15u))
            {
                float _2824;
                float _2826;
                float _2828;
                float _2830;
                float _2832;
                float _2834;
                float _2983 = _2702;
                float _2984 = _2704;
                float _2985 = _2706;
                float _2986 = _2708;
                float _2987 = _2710;
                float _2988 = _2712;
                uint _2989 = _2719;
                uint _2998;
                bool _2999;
                for (;;)
                {
                    _2998 = texelFetch(g_lightClassification, int((((_2616 << 5u) + (_2602 << 9u)) + (_2989 << 2u)) >> 2u)).x;
                    _2999 = _2998 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2999)
                    {
                        frontier_phi_84_pred = _2988;
                        frontier_phi_84_pred_1 = _2987;
                        frontier_phi_84_pred_2 = _2986;
                        frontier_phi_84_pred_3 = _2985;
                        frontier_phi_84_pred_4 = _2984;
                        frontier_phi_84_pred_5 = _2983;
                    }
                    else
                    {
                        float _3191;
                        float _3192;
                        float _3193;
                        float _3194;
                        float _3195;
                        float _3196;
                        float _3486;
                        float _3487;
                        float _3488;
                        float _3489;
                        float _3490;
                        float _3491;
                        float _3204 = _2983;
                        float _3205 = _2984;
                        float _3206 = _2985;
                        float _3207 = _2986;
                        float _3208 = _2987;
                        float _3209 = _2988;
                        uint _3210 = _2998;
                        uint _3211;
                        vec4 _3236;
                        float _3237;
                        vec4 _3252;
                        vec3 _3264;
                        vec4 _3280;
                        vec4 _3295;
                        float _3342;
                        bool _3343;
                        for (;;)
                        {
                            uint _3221 = ((_2989 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3210));
                            _3211 = (_3210 + 4294967295u) & _3210;
                            uint _3223 = _3221 * 40u;
                            _3236 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3223)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 3u)).x));
                            _3237 = _3236.w;
                            uint _3239 = (_3221 * 40u) + 4u;
                            _3252 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3239)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 3u)).x));
                            uint _3254 = (_3221 * 40u) + 8u;
                            _3264 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3254)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 2u)).x));
                            uint _3267 = (_3221 * 40u) + 16u;
                            _3280 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3267)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 3u)).x));
                            uint _3282 = (_3221 * 40u) + 20u;
                            _3295 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 3u)).x));
                            uint _3298 = (_3221 * 40u) + 24u;
                            vec4 _3311 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3298)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 3u)).x));
                            uint _3317 = (_3221 * 40u) + 28u;
                            vec4 _3330 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3317)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 3u)).x));
                            _3342 = fma(_1682, _3330.z, fma(_1681, _3330.y, _3330.x * _1680)) + _3330.w;
                            _3343 = !((fma(_1682, _3311.z, fma(_1681, _3311.y, _3311.x * _1680)) + _3311.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3343)
                            {
                                float _3370 = _3236.x - _1680;
                                float _3371 = _3236.y - _1681;
                                float _3372 = _3236.z - _1682;
                                float _3373 = dot(vec3(_3370, _3371, _3372), vec3(_3370, _3371, _3372));
                                float _3376 = inversesqrt(_3373);
                                float _3377 = _3376 * _3370;
                                float _3378 = _3376 * _3371;
                                float _3379 = _3376 * _3372;
                                float _3383 = 1.0 - (_3373 / (_3237 * _3237));
                                float _4530 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                                float _3384 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
                                float _3388 = sqrt(_3373) * _3252.w;
                                float _3390 = 1.39999997615814208984375 / (_3388 + 1.39999997615814208984375);
                                float _3391 = _3390 * _3390;
                                float _3394 = ((1.0 - _3391) * dot(vec3(_3377, _3378, _3379), vec3(_514, _517, _520))) + _3391;
                                float _3397 = _3388 * _3388;
                                float _3401 = (fma(_1682, _3280.z, fma(_1681, _3280.y, _3280.x * _1680)) + _3280.w) / _3342;
                                float _3402 = (fma(_1682, _3295.z, fma(_1681, _3295.y, _3295.x * _1680)) + _3295.w) / _3342;
                                float _3406 = 1.0 - dot(vec2(_3401, _3402), vec2(_3401, _3402));
                                float _4546 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                                float _3407 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                                float _3408 = _3407 * (((isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0))) * _3384) / ((_3397 * 0.699999988079071044921875) + 1.0));
                                float _3420 = exp2(log2(1.0 / ((_3397 * 3.5) + 5.0)) * 0.25);
                                float _3421 = 1.0 - _589;
                                float _3428 = sqrt(1.0 - ((1.0 - (_3421 * _3421)) * (1.0 - (_3420 * _3420))));
                                float _3429 = _3428 * _3428;
                                float _3430 = _3429 * _3429;
                                float _3431 = _3377 - _2849;
                                float _3432 = _3378 - _2850;
                                float _3433 = _3379 - _2851;
                                float _3437 = inversesqrt(dot(vec3(_3431, _3432, _3433), vec3(_3431, _3432, _3433)));
                                float _3441 = dot(vec3(_514, _517, _520), vec3((-0.0) - _2849, (-0.0) - _2850, (-0.0) - _2851));
                                float _4557 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                                float _3444 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                                float _3445 = dot(vec3(_514, _517, _520), vec3(_3437 * _3431, _3437 * _3432, _3437 * _3433));
                                float _4568 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                                float _3448 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
                                float _3452 = ((_3448 * _3448) * (_3430 + (-1.0))) + 1.0;
                                float _3453 = _3390 * _3429;
                                float _3454 = _3453 * _3453;
                                float _3460 = ((1.0 - _3454) * dot(vec3(_514, _517, _520), vec3(_3377, _3378, _3379))) + _3454;
                                float _4579 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                                float _3461 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
                                float _3462 = 1.0 - _3429;
                                float _3472 = (0.5 / (((_3461 * ((_3444 * _3462) + _3429)) + 9.9999999392252902907785028219223e-09) + (((_3461 * _3462) + _3429) * _3444))) * _3461;
                                float _4590 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                                float _3482 = (_3407 * _3384) * (((_3430 * 3.1415927410125732421875) * (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0)))) / ((_3452 * _3452) * ((_3397 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3408 * _3252.z;
                                frontier_phi_90_pred_1 = _3408 * _3252.y;
                                frontier_phi_90_pred_2 = _3408 * _3252.x;
                                frontier_phi_90_pred_3 = _3482 * _3264.z;
                                frontier_phi_90_pred_4 = _3482 * _3264.y;
                                frontier_phi_90_pred_5 = _3482 * _3264.x;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3491 = frontier_phi_90_pred;
                            _3490 = frontier_phi_90_pred_1;
                            _3489 = frontier_phi_90_pred_2;
                            _3488 = frontier_phi_90_pred_3;
                            _3487 = frontier_phi_90_pred_4;
                            _3486 = frontier_phi_90_pred_5;
                            _3194 = _3489 + _3207;
                            _3195 = _3490 + _3208;
                            _3196 = _3491 + _3209;
                            _3191 = _3486 + _3204;
                            _3192 = _3487 + _3205;
                            _3193 = _3488 + _3206;
                            if (_3211 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3204 = _3191;
                                _3205 = _3192;
                                _3206 = _3193;
                                _3207 = _3194;
                                _3208 = _3195;
                                _3209 = _3196;
                                _3210 = _3211;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3196;
                        frontier_phi_84_pred_1 = _3195;
                        frontier_phi_84_pred_2 = _3194;
                        frontier_phi_84_pred_3 = _3193;
                        frontier_phi_84_pred_4 = _3192;
                        frontier_phi_84_pred_5 = _3191;
                    }
                    _2834 = frontier_phi_84_pred;
                    _2832 = frontier_phi_84_pred_1;
                    _2830 = frontier_phi_84_pred_2;
                    _2828 = frontier_phi_84_pred_3;
                    _2826 = frontier_phi_84_pred_4;
                    _2824 = frontier_phi_84_pred_5;
                    uint _2990 = _2989 + 1u;
                    if (_2990 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2983 = _2824;
                        _2984 = _2826;
                        _2985 = _2828;
                        _2986 = _2830;
                        _2987 = _2832;
                        _2988 = _2834;
                        _2989 = _2990;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2830;
                frontier_phi_65_66_ladder_1 = _2834;
                frontier_phi_65_66_ladder_2 = _2832;
                frontier_phi_65_66_ladder_3 = _2828;
                frontier_phi_65_66_ladder_4 = _2826;
                frontier_phi_65_66_ladder_5 = _2824;
            }
            else
            {
                frontier_phi_65_66_ladder = _2708;
                frontier_phi_65_66_ladder_1 = _2712;
                frontier_phi_65_66_ladder_2 = _2710;
                frontier_phi_65_66_ladder_3 = _2706;
                frontier_phi_65_66_ladder_4 = _2704;
                frontier_phi_65_66_ladder_5 = _2702;
            }
            _2823 = frontier_phi_65_66_ladder_5;
            _2825 = frontier_phi_65_66_ladder_4;
            _2827 = frontier_phi_65_66_ladder_3;
            _2829 = frontier_phi_65_66_ladder;
            _2831 = frontier_phi_65_66_ladder_2;
            _2833 = frontier_phi_65_66_ladder_1;
        }
        float _2838 = isnan(1.0) ? _573 : (isnan(_573) ? 1.0 : min(_573, 1.0));
        _2635 = (_2838 * _2829) + _2147;
        _2637 = (_2838 * _2831) + _2149;
        _2639 = (_2838 * _2833) + _2151;
        _2641 = ((_2823 * _557) * _2838) + _2485;
        _2643 = ((_2825 * _559) * _2838) + _2487;
        _2645 = ((_2827 * _560) * _2838) + _2489;
    }
    else
    {
        _2635 = _2147;
        _2637 = _2149;
        _2639 = _2151;
        _2641 = _2485;
        _2643 = _2487;
        _2645 = _2489;
    }
    float _4606 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _4617 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _4628 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _2662 = ((isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (_2635 + ((isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0))) * _573))) + ((_2641 + ((isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))) * _1409)) * cbPerFrame._m0[3u].x);
    float _2663 = ((isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (_2637 + ((isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0))) * _573))) + ((_2643 + ((isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))) * _1409)) * cbPerFrame._m0[3u].x);
    float _2664 = ((isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * (_2639 + ((isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0))) * _573))) + ((_2645 + ((isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))) * _1409)) * cbPerFrame._m0[3u].x);
    uint _2665 = _228 + 6u;
    float _2673 = _493 / cbSceneParam._m0[86u].x;
    float _2674 = _494 / cbSceneParam._m0[86u].y;
    vec4 _2688 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2673, _2674, (log2((isnan(cbSceneParam._m0[77u].w) ? _416 : (isnan(_416) ? cbSceneParam._m0[77u].w : min(_416, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2690 = _2688.x;
    float _2691 = _2688.y;
    float _2692 = _2688.z;
    float _2693 = _2688.w;
    float _2765;
    float _2767;
    float _2769;
    float _2771;
    if (_416 > cbSceneParam._m0[78u].w)
    {
        float _2727 = isnan(_416) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _416 : min(cbSceneParam._m0[80u].w, _416));
        float _2728 = _2727 / _416;
        float _2739 = _2728 * _468;
        float _2740 = _469 * _2728;
        float _2741 = (-0.0) - _2740;
        float _2743 = _2728 * _470;
        float _2745 = (cbSceneParam._m0[77u].w * _2741) / _2727;
        float _2746 = _2745 + cbSceneParam._m0[79u].w;
        float _2747 = cbSceneParam._m0[79u].w - _2740;
        float _2753 = sqrt(((_2739 * _2739) + (_2740 * _2740)) + (_2743 * _2743));
        float _2756 = (1.0 - (cbSceneParam._m0[77u].w / _2727)) * _2753;
        float _2761 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2763 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2940;
        if (abs((_2741 - _2745) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2940 = ((((_2746 > 0.0) ? exp2(_2761 * _2746) : (2.0 - exp2(_2763 * _2746))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2756;
        }
        else
        {
            float _2884 = 1.0 / cbSceneParam._m0[80u].x;
            float _2885 = isnan(_2747) ? _2746 : (isnan(_2746) ? _2747 : max(_2746, _2747));
            float _2886 = isnan(_2747) ? _2746 : (isnan(_2746) ? _2747 : min(_2746, _2747));
            float _2895 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : min(_2885, 0.0));
            float _2896 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : min(_2886, 0.0));
            _2940 = ((abs(_2753 / _2741) * cbSceneParam._m0[80u].y) * ((((_2895 - _2896) * 2.0) - ((exp2(_2761 * (isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0)))) - exp2(_2761 * (isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0))))) * _2884)) - ((exp2(_2763 * _2895) - exp2(_2763 * _2896)) * _2884))) + (_2756 * cbSceneParam._m0[80u].z);
        }
        vec4 _2942 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2673, _2674, 1.0), 0.0);
        float _2951 = exp2((_2940 * (-1.44269502162933349609375)) * (1.0 - _2942.w));
        float _2952 = log2(_2951);
        float _2968 = log2(_2693);
        _2765 = (exp2(_2968 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2952 * cbSceneParam._m0[78u].x)) * _2942.x) / cbSceneParam._m0[78u].x)) + _2690;
        _2767 = (exp2(_2968 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2952 * cbSceneParam._m0[78u].y)) * _2942.y) / cbSceneParam._m0[78u].y)) + _2691;
        _2769 = (exp2(_2968 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2952 * cbSceneParam._m0[78u].z)) * _2942.z) / cbSceneParam._m0[78u].z)) + _2692;
        _2771 = _2951 * _2693;
    }
    else
    {
        _2765 = _2690;
        _2767 = _2691;
        _2769 = _2692;
        _2771 = _2693;
    }
    bool _2978;
    vec4 _2781;
    vec4 _2803;
    float _2805;
    float _2809;
    float _2810;
    float _2811;
    float _2812;
    bool _2822;
    for (;;)
    {
        _2781 = cbMatDynParam._m0[0u];
        float _2783 = roundEven(_2781.y);
        bool _2784 = _2783 == 3.0;
        float _2785 = log2(_2771);
        float _2792 = exp2(_2785 * cbSceneParam._m0[78u].x) * _2662;
        float _2793 = exp2(_2785 * cbSceneParam._m0[78u].y) * _2663;
        float _2794 = exp2(_2785 * cbSceneParam._m0[78u].z) * _2664;
        float _2801 = _481 + (-0.5);
        _2803 = cbMtdParam._m0[1u];
        _2805 = _2803.y * _2801;
        float _2808 = (_2783 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2809 = _2808 * (_2784 ? _2792 : (_2792 + (cbSceneParam._m0[72u].w * _2765)));
        _2810 = _2808 * (_2784 ? _2793 : (_2793 + (cbSceneParam._m0[72u].w * _2767)));
        _2811 = _2808 * (_2784 ? _2794 : (_2794 + (cbSceneParam._m0[72u].w * _2769)));
        _2812 = _2801 * 0.999000012874603271484375;
        _2822 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2822)
        {
            if ((cbInstanceData._m0[_228 + 7u].x + _2812) < 0.5)
            {
                _2978 = true;
                break;
            }
        }
        uint _2919 = _533 + uint(_2781.w);
        if ((cbInstanceData._m0[_2919].w < 1.0) && ((cbInstanceData._m0[_2919].w + _2812) < 0.5))
        {
            _2978 = true;
            break;
        }
        if ((_2805 + 1.0) < _2803.x)
        {
            _2978 = true;
            break;
        }
        _2978 = false;
        break;
    }
    float _3182;
    if (_2978)
    {
        discard_state = true;
        _3182 = 0.0;
    }
    else
    {
        _3182 = cbInstanceData._m0[_2665].w;
    }
    SV_Target.x = _2809;
    SV_Target.y = _2810;
    SV_Target.z = _2811;
    SV_Target.w = _3182;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2665].w;
    discard_exit();
}


