#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1225;
float _3890;
float _3891;
float _3892;
float _3893;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3902 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3913 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3924 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    uint _268 = uint(roundEven(NORMAL.w)) * 13u;
    uint _273 = _268 + 1u;
    uint _277 = _268 + 2u;
    float _286 = sqrt(((cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x)) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x));
    float _287 = _286 * TEXCOORD.z;
    float _288 = _286 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _287) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _288) + cbTextureTilingScale._m0[13u].w));
    vec4 _325 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _330 = _325.x * cbMtdParam._m0[11u].x;
    float _331 = _325.y * cbMtdParam._m0[11u].y;
    float _332 = _325.z * cbMtdParam._m0[11u].z;
    vec4 _351 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _287) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _288) + cbTextureTilingScale._m0[5u].w));
    vec4 _385 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _387 = _385.x;
    float _399 = dot(vec4(_387, _385.yzw), vec4(cbMtdParam._m0[28u].w, cbMtdParam._m0[29u].xy, 0.0));
    float _416 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_387 - _399) * cbMtdParam._m0[24u].y) + _399) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3935 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _417 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _424 = (_417 * ((_351.x * cbMtdParam._m0[12u].x) - _330)) + _330;
    float _425 = (_417 * ((_351.y * cbMtdParam._m0[12u].y) - _331)) + _331;
    float _426 = (_417 * ((_351.z * cbMtdParam._m0[12u].z) - _332)) + _332;
    float _430 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _301.x) * _424;
    float _433 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _301.y) * _425;
    float _436 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _301.z) * _426;
    float _443 = ((_424 - _430) * (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) + _430;
    float _444 = ((_425 - _433) * (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0)))) + _433;
    float _445 = ((_426 - _436) * (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0)))) + _436;
    vec4 _458 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _287) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _288) + cbTextureTilingScale._m0[20u].w));
    vec4 _483 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _287) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _288) + cbTextureTilingScale._m0[4u].w));
    vec4 _500 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _502 = _500.x;
    float _503 = _500.y;
    float _504 = _500.z;
    float _513 = ((_483.z - _504) * _417) + _504;
    float _516 = ((((_483.x - _502) * _417) + _502) * 2.0) + (-1.0);
    float _517 = ((((_483.y - _503) * _417) + _503) * 2.0) + (-1.0);
    float _518 = dot(vec2(_516, _517), vec2(_516, _517));
    float _3946 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _523 = sqrt(1.0 - (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))));
    vec4 _545 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _557 = (_516 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_458.x * 2.0) + (-1.0)))) + (((_545.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _558 = (_517 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_458.y * 2.0) + (-1.0)))) + (((_545.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    vec4 _584 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _586 = _584.x;
    float _604 = ((texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _287) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _288) + cbTextureTilingScale._m0[9u].w)).x - _586) * _417) + _586;
    float _608 = ((texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _604) * cbMtdParam._m0[19u].z) + _604;
    float _613 = (((_458.z - _513) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _513;
    float _617 = ((_545.z - _613) * cbMtdParam._m0[19u].w) + _613;
    float _619 = cbMtdParam._m0[22u].x + _545.w;
    float _621 = gl_FragCoord.x * 0.125;
    float _623 = gl_FragCoord.y * 0.125;
    float _634 = fma(_523, _234 * NORMAL.x, fma(_558, _241 * TANGENT.x, (_227 * _219) * _557));
    float _637 = fma(_523, _234 * NORMAL.y, fma(_558, _241 * TANGENT.y, (_227 * _220) * _557));
    float _640 = fma(_523, _234 * NORMAL.z, fma(_558, _241 * TANGENT.z, (_227 * _221) * _557));
    float _644 = inversesqrt(dot(vec3(_634, _637, _640), vec3(_634, _637, _640)));
    float _645 = _644 * _634;
    float _646 = _644 * _637;
    float _647 = _644 * _640;
    float _3957 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _648 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _3968 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _3979 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _3990 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _4001 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _4012 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _653 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_621, _623)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _671 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _712 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _722 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _712);
    float _723 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _712);
    float _724 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _712);
    float _728 = inversesqrt(dot(vec3(_722, _723, _724), vec3(_722, _723, _724)));
    float _729 = _722 * _728;
    float _730 = _723 * _728;
    float _731 = _724 * _728;
    vec4 _733 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_621, _623));
    float _735 = _733.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _907 = sqrt(((_722 * _722) + (_723 * _723)) + (_724 * _724));
        float _913 = (cbMatDynParam._m0[5u].x * _907) + cbMatDynParam._m0[5u].y;
        float _4023 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _918 = (cbMatDynParam._m0[5u].z * _907) + cbMatDynParam._m0[5u].w;
        float _4034 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) - _914)) + _914) < ((_735 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _746 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _747 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _765 = fma(_647, cbSceneParam._m0[5u].z, fma(_646, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _645));
    float _768 = fma(_647, cbSceneParam._m0[6u].z, fma(_646, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _645));
    float _771 = fma(_647, cbSceneParam._m0[7u].z, fma(_646, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _645));
    uint _784 = _268 + 9u;
    uint _785 = _784 + uint(cbMatDynParam._m0[0u].w);
    float _791 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0)))) * cbInstanceData._m0[_785].x;
    float _792 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0)))) * cbInstanceData._m0[_785].y;
    float _793 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0)))) * cbInstanceData._m0[_785].z;
    float _4045 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _794 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _4056 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _795 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _4067 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _796 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _797 = 1.0 - _653;
    float _798 = _794 * _797;
    float _799 = _795 * _797;
    float _800 = _796 * _797;
    float _805 = (_794 + (-0.039999999105930328369140625)) * _653;
    float _806 = (_795 + (-0.039999999105930328369140625)) * _653;
    float _807 = (_796 + (-0.039999999105930328369140625)) * _653;
    float _808 = _805 + 0.039999999105930328369140625;
    float _810 = _806 + 0.039999999105930328369140625;
    float _811 = _807 + 0.039999999105930328369140625;
    vec4 _820 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _746, cbSceneParam._m0[86u].y * _747));
    float _824 = ((isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * TEXCOORD_5.w) * _820.x;
    float _825 = dot(vec3(_645, _646, _647), vec3(_729, _730, _731));
    float _828 = _825 * 2.0;
    float _832 = (_828 * _645) - _729;
    float _833 = (_828 * _646) - _730;
    float _834 = (_828 * _647) - _731;
    float _838 = abs(dot(vec3(_729, _730, _731), vec3(_645, _646, _647)));
    float _4078 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _840 = sqrt(_648);
    float _853 = exp2((_840 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_840 * 3.0));
    float _859 = (1.0 - _853) * ((_840 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _860 = _853 * _840;
    float _888 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _892 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _896 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1224;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _949 = fma(_896, cbModelParam._m0[26u].z, fma(_892, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _888));
        float _953 = fma(_896, cbModelParam._m0[27u].z, fma(_892, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _888));
        float _957 = fma(_896, cbModelParam._m0[28u].z, fma(_892, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _888));
        float _982 = _888 + _645;
        float _983 = _892 + _646;
        float _984 = _896 + _647;
        float _994 = fma(_984, cbModelParam._m0[26u].z, fma(_983, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _982)) - _949;
        float _995 = fma(_984, cbModelParam._m0[27u].z, fma(_983, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _982)) - _953;
        float _996 = fma(_984, cbModelParam._m0[28u].z, fma(_983, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _982)) - _957;
        float _1000 = inversesqrt(dot(vec3(_994, _995, _996), vec3(_994, _995, _996)));
        float _1013 = ((_1000 * _994) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_949 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1014 = ((_1000 * _995) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_953 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1015 = ((_1000 * _996) / cbModelParam._m0[34u].z) + ((((((_957 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        float _1052 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1018.x + (-0.5));
        float _1054 = _1052 * (_1018.y + (-0.5));
        float _1055 = _1052 * (_1018.z + (-0.5));
        float _1062 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1025.x + (-0.5));
        float _1064 = _1062 * (_1025.y + (-0.5));
        float _1065 = _1062 * (_1025.z + (-0.5));
        float _1072 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1032.x + (-0.5));
        float _1074 = _1072 * (_1032.y + (-0.5));
        float _1075 = _1072 * (_1032.z + (-0.5));
        float _1082 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1039.x + (-0.5));
        float _1084 = _1082 * (_1039.y + (-0.5));
        float _1085 = _1082 * (_1039.z + (-0.5));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1088 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1089 = _1053 * 0.5;
        float _1090 = _1063 * 0.5;
        float _1091 = _1073 * 0.5;
        float _1092 = dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091));
        float _1097 = (_1092 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1092);
        float _1106 = (dot(vec3(_645, _646, _647), vec3(_1097 * _1089, _1097 * _1090, _1097 * _1091)) + 1.0) * 0.5;
        float _4104 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1116 = sqrt(((_1090 * _1090) + (_1089 * _1089)) + (_1091 * _1091)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _4115 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1118 = _1117 * 2.0;
        float _1122 = (1.0 - _1117) / (_1117 + 1.0);
        float _4126 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1132 = ((((1.0 - _1123) * (_1118 + 2.0)) * exp2(log2(isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_1118 + 1.0))) + _1123) * _1086;
        float _1133 = _1054 * 0.5;
        float _1134 = _1064 * 0.5;
        float _1135 = _1074 * 0.5;
        float _1136 = dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135));
        float _1141 = (_1136 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1136);
        float _1149 = (dot(vec3(_645, _646, _647), vec3(_1141 * _1133, _1141 * _1134, _1141 * _1135)) + 1.0) * 0.5;
        float _4137 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1158 = sqrt(((_1134 * _1134) + (_1133 * _1133)) + (_1135 * _1135)) / (_1087 + 9.9999997473787516355514526367188e-06);
        float _4148 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1160 = _1159 * 2.0;
        float _1164 = (1.0 - _1159) / (_1159 + 1.0);
        float _4159 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1174 = ((((1.0 - _1165) * (_1160 + 2.0)) * exp2(log2(isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_1160 + 1.0))) + _1165) * _1087;
        float _1175 = _1055 * 0.5;
        float _1176 = _1065 * 0.5;
        float _1177 = _1075 * 0.5;
        float _1178 = dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177));
        float _1183 = (_1178 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1178);
        float _1191 = (dot(vec3(_645, _646, _647), vec3(_1183 * _1175, _1183 * _1176, _1183 * _1177)) + 1.0) * 0.5;
        float _4170 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1200 = sqrt(((_1176 * _1176) + (_1175 * _1175)) + (_1177 * _1177)) / (_1088 + 9.9999997473787516355514526367188e-06);
        float _4181 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1202 = _1201 * 2.0;
        float _1206 = (1.0 - _1201) / (_1201 + 1.0);
        float _4192 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1216 = ((((1.0 - _1207) * (_1202 + 2.0)) * exp2(log2(isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_1202 + 1.0))) + _1207) * _1088;
        _1224 = _1055;
        _1226 = _1054;
        _1227 = _1053;
        _1228 = _1065;
        _1229 = _1064;
        _1230 = _1063;
        _1231 = _1075;
        _1232 = _1074;
        _1233 = _1073;
        _1234 = _1088;
        _1235 = _1087;
        _1236 = _1086;
        _1237 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0)));
        _1238 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)));
        _1239 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)));
    }
    else
    {
        _1224 = _1225;
        _1226 = _1225;
        _1227 = _1225;
        _1228 = _1225;
        _1229 = _1225;
        _1230 = _1225;
        _1231 = _1225;
        _1232 = _1225;
        _1233 = _1225;
        _1234 = _1225;
        _1235 = _1225;
        _1236 = _1225;
        _1237 = 0.0;
        _1238 = 0.0;
        _1239 = 0.0;
    }
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1264 = fma(_896, cbModelParam._m0[30u].z, fma(_892, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _888));
        float _1268 = fma(_896, cbModelParam._m0[31u].z, fma(_892, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _888));
        float _1272 = fma(_896, cbModelParam._m0[32u].z, fma(_892, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _888));
        float _1295 = _888 + _645;
        float _1296 = _892 + _646;
        float _1297 = _896 + _647;
        float _1307 = fma(_1297, cbModelParam._m0[30u].z, fma(_1296, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1295)) - _1264;
        float _1308 = fma(_1297, cbModelParam._m0[31u].z, fma(_1296, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1295)) - _1268;
        float _1309 = fma(_1297, cbModelParam._m0[32u].z, fma(_1296, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1295)) - _1272;
        float _1313 = inversesqrt(dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309)));
        float _1326 = ((_1313 * _1307) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1264 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1327 = ((_1313 * _1308) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1268 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1328 = ((_1313 * _1309) / cbModelParam._m0[35u].z) + ((((((_1272 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1330 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        vec4 _1337 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        vec4 _1344 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        vec4 _1351 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        float _1363 = exp2((_1330.w + (-0.5)) * 20.0) * 2.0;
        float _1364 = _1363 * (_1330.x + (-0.5));
        float _1365 = _1363 * (_1330.y + (-0.5));
        float _1366 = _1363 * (_1330.z + (-0.5));
        float _1373 = exp2((_1337.w + (-0.5)) * 20.0) * 2.0;
        float _1374 = _1373 * (_1337.x + (-0.5));
        float _1375 = _1373 * (_1337.y + (-0.5));
        float _1376 = _1373 * (_1337.z + (-0.5));
        float _1383 = exp2((_1344.w + (-0.5)) * 20.0) * 2.0;
        float _1384 = _1383 * (_1344.x + (-0.5));
        float _1385 = _1383 * (_1344.y + (-0.5));
        float _1386 = _1383 * (_1344.z + (-0.5));
        float _1393 = exp2((_1351.w + (-0.5)) * 20.0) * 2.0;
        float _1394 = _1393 * (_1351.x + (-0.5));
        float _1395 = _1393 * (_1351.y + (-0.5));
        float _1396 = _1393 * (_1351.z + (-0.5));
        float _1397 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1398 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1399 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1400 = _1364 * 0.5;
        float _1401 = _1374 * 0.5;
        float _1402 = _1384 * 0.5;
        float _1403 = dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402));
        float _1408 = (_1403 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1403);
        float _1416 = (dot(vec3(_645, _646, _647), vec3(_1408 * _1400, _1408 * _1401, _1408 * _1402)) + 1.0) * 0.5;
        float _4233 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1425 = sqrt(((_1401 * _1401) + (_1400 * _1400)) + (_1402 * _1402)) / (_1397 + 9.9999997473787516355514526367188e-06);
        float _4244 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _1427 = _1426 * 2.0;
        float _1431 = (1.0 - _1426) / (_1426 + 1.0);
        float _4255 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1441 = ((((1.0 - _1432) * (_1427 + 2.0)) * exp2(log2(isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_1427 + 1.0))) + _1432) * _1397;
        float _1442 = _1365 * 0.5;
        float _1443 = _1375 * 0.5;
        float _1444 = _1385 * 0.5;
        float _1445 = dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444));
        float _1450 = (_1445 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1445);
        float _1458 = (dot(vec3(_645, _646, _647), vec3(_1450 * _1442, _1450 * _1443, _1450 * _1444)) + 1.0) * 0.5;
        float _4266 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1467 = sqrt(((_1443 * _1443) + (_1442 * _1442)) + (_1444 * _1444)) / (_1398 + 9.9999997473787516355514526367188e-06);
        float _4277 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1469 = _1468 * 2.0;
        float _1473 = (1.0 - _1468) / (_1468 + 1.0);
        float _4288 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1483 = ((((1.0 - _1474) * (_1469 + 2.0)) * exp2(log2(isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_1469 + 1.0))) + _1474) * _1398;
        float _1484 = _1366 * 0.5;
        float _1485 = _1376 * 0.5;
        float _1486 = _1386 * 0.5;
        float _1487 = dot(vec3(_1484, _1485, _1486), vec3(_1484, _1485, _1486));
        float _1492 = (_1487 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1487);
        float _1500 = (dot(vec3(_645, _646, _647), vec3(_1492 * _1484, _1492 * _1485, _1492 * _1486)) + 1.0) * 0.5;
        float _4299 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1509 = sqrt(((_1485 * _1485) + (_1484 * _1484)) + (_1486 * _1486)) / (_1399 + 9.9999997473787516355514526367188e-06);
        float _4310 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1511 = _1510 * 2.0;
        float _1515 = (1.0 - _1510) / (_1510 + 1.0);
        float _4321 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1525 = ((((1.0 - _1516) * (_1511 + 2.0)) * exp2(log2(isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_1511 + 1.0))) + _1516) * _1399;
        _1533 = _1366;
        _1534 = _1365;
        _1535 = _1364;
        _1536 = _1376;
        _1537 = _1375;
        _1538 = _1374;
        _1539 = _1386;
        _1540 = _1385;
        _1541 = _1384;
        _1542 = _1399;
        _1543 = _1398;
        _1544 = _1397;
        _1545 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)));
        _1546 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)));
        _1547 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)));
    }
    else
    {
        _1533 = _1225;
        _1534 = _1225;
        _1535 = _1225;
        _1536 = _1225;
        _1537 = _1225;
        _1538 = _1225;
        _1539 = _1225;
        _1540 = _1225;
        _1541 = _1225;
        _1542 = _1225;
        _1543 = _1225;
        _1544 = _1225;
        _1545 = 0.0;
        _1546 = 0.0;
        _1547 = 0.0;
    }
    float _1557 = (cbModelParam._m0[1u].x * (_1545 - _1237)) + _1237;
    float _1558 = (cbModelParam._m0[1u].x * (_1546 - _1238)) + _1238;
    float _1559 = (cbModelParam._m0[1u].x * (_1547 - _1239)) + _1239;
    float _1580 = fma(_1559, cbSceneParam._m0[89u].z, fma(_1558, cbSceneParam._m0[89u].y, _1557 * cbSceneParam._m0[89u].x));
    float _1583 = fma(_1559, cbSceneParam._m0[90u].z, fma(_1558, cbSceneParam._m0[90u].y, _1557 * cbSceneParam._m0[90u].x));
    float _1586 = fma(_1559, cbSceneParam._m0[91u].z, fma(_1558, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1557));
    float _1601 = _832 * 0.5;
    float _1602 = _833 * 0.5;
    float _1603 = _834 * 0.5;
    float _1604 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1535, _1538, _1541, _1544));
    float _1607 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1534, _1537, _1540, _1543));
    float _1610 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1533, _1536, _1539, _1542));
    float _1644;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1617 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1224, _1228, _1231, _1234));
        float _1621 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1226, _1229, _1232, _1235));
        float _1625 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1227, _1230, _1233, _1236));
        float _1632 = dot(vec4(cbModelParam._m0[39u]), vec4(_1601, _1602, _1603, 1.0));
        _1644 = dot(vec3(isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)), isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)), isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1632) ? 0.0 : (isnan(0.0) ? _1632 : max(0.0, _1632))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1644 = 1.0;
    }
    float _1655;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1646 = dot(vec4(cbModelParam._m0[40u]), vec4(_1601, _1602, _1603, 1.0));
        _1655 = dot(vec3(isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)), isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)), isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1646) ? 0.0 : (isnan(0.0) ? _1646 : max(0.0, _1646))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1655 = 1.0;
    }
    float _1659 = (_1655 * cbModelParam._m0[1u].x) + (_1644 * (1.0 - cbModelParam._m0[1u].x));
    float _1669 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _648);
    float _1670 = isnan(_1669) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1669 : min(cbModelParam._m0[25u].z, _1669));
    float _1752;
    float _1754;
    float _1756;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1719 = fma(_896, cbModelParam._m0[13u].z, fma(_892, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _888)) + cbModelParam._m0[13u].w;
        float _1723 = fma(_896, cbModelParam._m0[14u].z, fma(_892, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _888)) + cbModelParam._m0[14u].w;
        float _1727 = fma(_896, cbModelParam._m0[15u].z, fma(_892, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _888)) + cbModelParam._m0[15u].w;
        float _1730 = fma(_834, cbModelParam._m0[13u].z, fma(_833, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _832));
        float _1733 = fma(_834, cbModelParam._m0[14u].z, fma(_833, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _832));
        float _1736 = fma(_834, cbModelParam._m0[15u].z, fma(_833, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _832));
        float _1764;
        if (_1730 > 0.0)
        {
            _1764 = abs((1.0 - _1719) / _1730);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1730 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1719 + 1.0) / _1730);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1764 = frontier_phi_19_17_ladder;
        }
        float _1937;
        if (_1733 > 0.0)
        {
            _1937 = abs((1.0 - _1723) / _1733);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1733 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1723 + 1.0) / _1733);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1937 = frontier_phi_28_24_ladder;
        }
        float _2232;
        if (_1736 > 0.0)
        {
            _2232 = abs((1.0 - _1727) / _1736);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1736 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1727 + 1.0) / _1736);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2232 = frontier_phi_40_35_ladder;
        }
        float _2234 = isnan(_1937) ? _1764 : (isnan(_1764) ? _1937 : min(_1764, _1937));
        float _2235 = isnan(_2232) ? _2234 : (isnan(_2234) ? _2232 : min(_2234, _2232));
        float _2239 = (_2235 * _1730) + _1719;
        float _2240 = (_2235 * _1733) + _1723;
        float _2241 = (_2235 * _1736) + _1727;
        float _2242 = _2235 * 9.9999997473787516355514526367188e-05;
        float _2244 = (-1.0) - _2242;
        float _2246 = _2242 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2241 > _2246) || ((_2241 < _2244) || ((_2240 > _2246) || ((_2240 < _2244) || ((_2239 < _2244) || (_2239 > _2246))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2386 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2241, cbModelParam._m0[9u].z, fma(_2240, cbModelParam._m0[9u].y, _2239 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2241, cbModelParam._m0[10u].z, fma(_2240, cbModelParam._m0[10u].y, _2239 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2241, cbModelParam._m0[11u].z, fma(_2240, cbModelParam._m0[11u].y, _2239 * cbModelParam._m0[11u].x))), _1670);
            frontier_phi_18_40_ladder = _2386.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2386.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2386.x * cbModelParam._m0[1u].y;
        }
        _1752 = frontier_phi_18_40_ladder_2;
        _1754 = frontier_phi_18_40_ladder_1;
        _1756 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1740 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_832, _833, _834), _1670);
        _1752 = _1740.x * cbModelParam._m0[1u].y;
        _1754 = _1740.y * cbModelParam._m0[1u].y;
        _1756 = _1740.z * cbModelParam._m0[1u].y;
    }
    float _1760 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _648);
    float _1761 = isnan(_1760) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1760 : min(cbModelParam._m0[25u].w, _1760));
    float _1852;
    float _1854;
    float _1856;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1816 = fma(_896, cbModelParam._m0[21u].z, fma(_892, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _888)) + cbModelParam._m0[21u].w;
        float _1820 = fma(_896, cbModelParam._m0[22u].z, fma(_892, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _888)) + cbModelParam._m0[22u].w;
        float _1824 = fma(_896, cbModelParam._m0[23u].z, fma(_892, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _888)) + cbModelParam._m0[23u].w;
        float _1827 = fma(_834, cbModelParam._m0[21u].z, fma(_833, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _832));
        float _1830 = fma(_834, cbModelParam._m0[22u].z, fma(_833, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _832));
        float _1833 = fma(_834, cbModelParam._m0[23u].z, fma(_833, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _832));
        float _1942;
        if (_1827 > 0.0)
        {
            _1942 = abs((1.0 - _1816) / _1827);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1827 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1816 + 1.0) / _1827);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1942 = frontier_phi_30_26_ladder;
        }
        float _2259;
        if (_1830 > 0.0)
        {
            _2259 = abs((1.0 - _1820) / _1830);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1830 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1820 + 1.0) / _1830);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2259 = frontier_phi_42_37_ladder;
        }
        float _2597;
        if (_1833 > 0.0)
        {
            _2597 = abs((1.0 - _1824) / _1833);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1833 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1824 + 1.0) / _1833);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2597 = frontier_phi_52_49_ladder;
        }
        float _2599 = isnan(_2259) ? _1942 : (isnan(_1942) ? _2259 : min(_1942, _2259));
        float _2600 = isnan(_2597) ? _2599 : (isnan(_2599) ? _2597 : min(_2599, _2597));
        float _2604 = (_2600 * _1827) + _1816;
        float _2605 = (_2600 * _1830) + _1820;
        float _2606 = (_2600 * _1833) + _1824;
        float _2607 = _2600 * 9.9999997473787516355514526367188e-05;
        float _2608 = (-1.0) - _2607;
        float _2610 = _2607 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2606 > _2610) || ((_2606 < _2608) || ((_2605 > _2610) || ((_2605 < _2608) || ((_2604 < _2608) || (_2604 > _2610))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2728 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2606, cbModelParam._m0[17u].z, fma(_2605, cbModelParam._m0[17u].y, _2604 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2606, cbModelParam._m0[18u].z, fma(_2605, cbModelParam._m0[18u].y, _2604 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2606, cbModelParam._m0[19u].z, fma(_2605, cbModelParam._m0[19u].y, _2604 * cbModelParam._m0[19u].x))), _1761);
            frontier_phi_27_52_ladder = _2728.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2728.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2728.x * cbModelParam._m0[1u].z;
        }
        _1852 = frontier_phi_27_52_ladder_2;
        _1854 = frontier_phi_27_52_ladder_1;
        _1856 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1836 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_832, _833, _834), _1761);
        _1852 = _1836.x * cbModelParam._m0[1u].z;
        _1854 = _1836.y * cbModelParam._m0[1u].z;
        _1856 = _1836.z * cbModelParam._m0[1u].z;
    }
    float _1869 = (((_859 * _808) + _860) * _824) * ((cbModelParam._m0[1u].w * (_1852 - _1752)) + _1752);
    float _1871 = (((_859 * _810) + _860) * _824) * ((cbModelParam._m0[1u].w * (_1854 - _1754)) + _1754);
    float _1873 = (((_859 * _811) + _860) * _824) * ((cbModelParam._m0[1u].w * (_1856 - _1756)) + _1756);
    float _1876 = fma(_1873, cbSceneParam._m0[89u].z, fma(_1871, cbSceneParam._m0[89u].y, _1869 * cbSceneParam._m0[89u].x));
    float _1879 = fma(_1873, cbSceneParam._m0[90u].z, fma(_1871, cbSceneParam._m0[90u].y, _1869 * cbSceneParam._m0[90u].x));
    float _1882 = fma(_1873, cbSceneParam._m0[91u].z, fma(_1871, cbSceneParam._m0[91u].y, _1869 * cbSceneParam._m0[91u].x));
    float _1916 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1920 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1924 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1928 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1929 = _1916 / _1928;
    float _1930 = _1920 / _1928;
    float _1931 = _1924 / _1928;
    float _2078;
    float _2079;
    float _2080;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1958 = ((uint(_1931 > cbSceneParam._m0[59u].y) + uint(_1931 > cbSceneParam._m0[59u].x)) + uint(_1931 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1959 = _1958 + 43u;
        uint _1967 = _1958 + 44u;
        uint _1975 = _1958 + 45u;
        uint _1983 = _1958 + 46u;
        float _1994 = fma(_1928, cbSceneParam._m0[_1959].w, fma(_1924, cbSceneParam._m0[_1959].z, fma(_1920, cbSceneParam._m0[_1959].y, _1916 * cbSceneParam._m0[_1959].x)));
        float _1998 = fma(_1928, cbSceneParam._m0[_1967].w, fma(_1924, cbSceneParam._m0[_1967].z, fma(_1920, cbSceneParam._m0[_1967].y, _1916 * cbSceneParam._m0[_1967].x)));
        float _2006 = fma(_1928, cbSceneParam._m0[_1983].w, fma(_1924, cbSceneParam._m0[_1983].z, fma(_1920, cbSceneParam._m0[_1983].y, _1916 * cbSceneParam._m0[_1983].x)));
        float _2011 = cbSceneParam._m0[33u].z * _2006;
        float _2013 = cbSceneParam._m0[33u].w * _2006;
        float _2016 = fma(_1928, cbSceneParam._m0[_1975].w, fma(_1924, cbSceneParam._m0[_1975].z, fma(_1920, cbSceneParam._m0[_1975].y, _1916 * cbSceneParam._m0[_1975].x))) / _2006;
        float _2064 = (cbSceneParam._m0[33u].x - sqrt(((_1930 * _1930) + (_1929 * _1929)) + (_1931 * _1931))) * cbSceneParam._m0[33u].y;
        float _4447 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
        float _2071 = (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2011 + _1994) / _2006, (_2013 + _1998) / _2006), _2016), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2013 + _1994) / _2006, (_1998 - _2011) / _2006), _2016), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1994 - _2011) / _2006, (_1998 - _2013) / _2006), _2016), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1994 - _2013) / _2006, (_2011 + _1998) / _2006), _2016), 0.0)).x), vec4(0.25)));
        _2078 = 1.0 - (_2071 * cbSceneParam._m0[34u].x);
        _2079 = 1.0 - (_2071 * cbSceneParam._m0[34u].y);
        _2080 = 1.0 - (_2071 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2078 = 1.0;
        _2079 = 1.0;
        _2080 = 1.0;
    }
    float _2144;
    float _2146;
    float _2148;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2132 = fma(_1928, cbSceneParam._m0[63u].w, fma(_1924, cbSceneParam._m0[63u].z, fma(_1920, cbSceneParam._m0[63u].y, _1916 * cbSceneParam._m0[63u].x)));
        float _2133 = fma(_1928, cbSceneParam._m0[60u].w, fma(_1924, cbSceneParam._m0[60u].z, fma(_1920, cbSceneParam._m0[60u].y, _1916 * cbSceneParam._m0[60u].x))) / _2132;
        float _2134 = fma(_1928, cbSceneParam._m0[61u].w, fma(_1924, cbSceneParam._m0[61u].z, fma(_1920, cbSceneParam._m0[61u].y, _1916 * cbSceneParam._m0[61u].x))) / _2132;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2133 >= cbSceneParam._m0[64u].x) && (_2134 >= cbSceneParam._m0[64u].y)) && (_2133 <= cbSceneParam._m0[64u].z)) && (_2134 <= cbSceneParam._m0[64u].w))
        {
            float _2272 = fma(_1928, cbSceneParam._m0[62u].w, fma(_1924, cbSceneParam._m0[62u].z, fma(_1920, cbSceneParam._m0[62u].y, _1916 * cbSceneParam._m0[62u].x))) / _2132;
            float _2276 = isnan(cbSceneParam._m0[41u].w) ? _2272 : (isnan(_2272) ? cbSceneParam._m0[41u].w : max(_2272, cbSceneParam._m0[41u].w));
            float _2319 = (cbSceneParam._m0[33u].x - sqrt(((_1930 * _1930) + (_1929 * _1929)) + (_1931 * _1931))) * cbSceneParam._m0[33u].y;
            float _4463 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
            float _2326 = (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2133, cbSceneParam._m0[33u].w + _2134), _2276), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2133, _2134 - cbSceneParam._m0[33u].z), _2276), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2133 - cbSceneParam._m0[33u].z, _2134 - cbSceneParam._m0[33u].w), _2276), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2133 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2134), _2276), 0.0)).x), vec4(0.25)));
            float _2330 = 1.0 - (_2326 * cbSceneParam._m0[34u].x);
            float _2331 = 1.0 - (_2326 * cbSceneParam._m0[34u].y);
            float _2332 = 1.0 - (_2326 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2332) ? _2080 : (isnan(_2080) ? _2332 : min(_2080, _2332));
            frontier_phi_39_38_ladder_1 = isnan(_2331) ? _2079 : (isnan(_2079) ? _2331 : min(_2079, _2331));
            frontier_phi_39_38_ladder_2 = isnan(_2330) ? _2078 : (isnan(_2078) ? _2330 : min(_2078, _2330));
        }
        else
        {
            frontier_phi_39_38_ladder = _2080;
            frontier_phi_39_38_ladder_1 = _2079;
            frontier_phi_39_38_ladder_2 = _2078;
        }
        _2144 = frontier_phi_39_38_ladder_2;
        _2146 = frontier_phi_39_38_ladder_1;
        _2148 = frontier_phi_39_38_ladder;
    }
    else
    {
        _2144 = _2078;
        _2146 = _2079;
        _2148 = _2080;
    }
    uvec4 _2153 = floatBitsToUint(cbInstanceData._m0[_268 + 5u]);
    uint _2155 = _2153.x * 14u;
    uint _2156 = _2155 + 13u;
    float _2163 = _824 + (-1.0);
    float _2168 = (cbLight._m0[_2156].x * _2163) + 1.0;
    float _2169 = (cbLight._m0[_2156].y * _2163) + 1.0;
    float _2170 = (cbLight._m0[_2156].z * _2163) + 1.0;
    float _2171 = (cbLight._m0[_2156].w * _2163) + 1.0;
    uint _2172 = _2155 + 5u;
    float _2178 = isnan(1.0) ? _2169 : (isnan(_2169) ? 1.0 : min(_2169, 1.0));
    uint _2182 = _2155 + 4u;
    float _2191 = isnan(1.0) ? _2168 : (isnan(_2168) ? 1.0 : min(_2168, 1.0));
    uint _2195 = _2155 | 1u;
    float _2206 = dot(vec3(cbLight._m0[_2155].xyz), vec3(_645, _646, _647));
    float _2209 = dot(vec3(cbLight._m0[_2195].xyz), vec3(_645, _646, _647));
    float _4499 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _4510 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2214 = (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * 0.3183098733425140380859375;
    float _2216 = (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * 0.3183098733425140380859375;
    float _2223 = ((cbLight._m0[_2172].x * _2178) * _2216) + (((cbLight._m0[_2182].x * _2144) * _2191) * _2214);
    float _2224 = ((_2178 * cbLight._m0[_2172].y) * _2216) + (((cbLight._m0[_2182].y * _2146) * _2191) * _2214);
    float _2225 = ((_2178 * cbLight._m0[_2172].z) * _2216) + (((cbLight._m0[_2182].z * _2148) * _2191) * _2214);
    uvec4 _2229 = floatBitsToUint(cbLight._m0[_2155 + 12u]);
    bool _2231 = _2229.x == 0u;
    float _2333;
    float _2335;
    float _2337;
    if (_2231)
    {
        _2333 = _2223;
        _2335 = _2224;
        _2337 = _2225;
    }
    else
    {
        uint _2341 = _2155 + 6u;
        float _2357 = (dot(vec3(cbLight._m0[_2155 + 2u].xyz), vec3(_645, _646, _647)) * 0.5) + 0.5;
        float _2358 = _2357 * _2357;
        float _4521 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2359 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _2360 = isnan(1.0) ? _2170 : (isnan(_2170) ? 1.0 : min(_2170, 1.0));
        _2333 = (((cbLight._m0[_2341].x * 0.3183098733425140380859375) * _2359) * _2360) + _2223;
        _2335 = (((cbLight._m0[_2341].y * 0.3183098733425140380859375) * _2359) * _2360) + _2224;
        _2337 = (((cbLight._m0[_2341].z * 0.3183098733425140380859375) * _2359) * _2360) + _2225;
    }
    bool _2340 = _2229.y == 0u;
    float _2395;
    float _2397;
    float _2399;
    if (_2340)
    {
        _2395 = _2333;
        _2397 = _2335;
        _2399 = _2337;
    }
    else
    {
        uint _2568 = _2155 + 7u;
        float _2584 = (dot(vec3(cbLight._m0[_2155 + 3u].xyz), vec3(_645, _646, _647)) * 0.5) + 0.5;
        float _2585 = _2584 * _2584;
        float _4537 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2586 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
        float _2587 = isnan(1.0) ? _2171 : (isnan(_2171) ? 1.0 : min(_2171, 1.0));
        _2395 = (((cbLight._m0[_2568].x * 0.3183098733425140380859375) * _2586) * _2587) + _2333;
        _2397 = (((cbLight._m0[_2568].y * 0.3183098733425140380859375) * _2586) * _2587) + _2335;
        _2399 = (((cbLight._m0[_2568].z * 0.3183098733425140380859375) * _2586) * _2587) + _2337;
    }
    uint _2402 = _2155 + 8u;
    float _2415 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2155].w)) * _648) * 0.949999988079071044921875);
    float _2416 = _2415 * _2415;
    float _2417 = cbLight._m0[_2155].x + _729;
    float _2418 = cbLight._m0[_2155].y + _730;
    float _2419 = cbLight._m0[_2155].z + _731;
    float _2423 = inversesqrt(dot(vec3(_2417, _2418, _2419), vec3(_2417, _2418, _2419)));
    float _2424 = _2423 * _2417;
    float _2425 = _2423 * _2418;
    float _2426 = _2423 * _2419;
    float _2427 = dot(vec3(_645, _646, _647), vec3(cbLight._m0[_2155].xyz));
    float _4553 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
    float _2430 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
    float _4564 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _2431 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
    float _2432 = dot(vec3(_645, _646, _647), vec3(_2424, _2425, _2426));
    float _4575 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
    float _2435 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
    float _2436 = dot(vec3(cbLight._m0[_2155].xyz), vec3(_2424, _2425, _2426));
    float _4586 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
    float _2440 = _2416 * _2416;
    float _2444 = ((_2435 * _2435) * (_2440 + (-1.0))) + 1.0;
    float _2452 = exp2(log2(1.0 - (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0)))) * 5.0);
    float _2453 = 0.959999978542327880859375 - _805;
    float _2455 = 0.959999978542327880859375 - _806;
    float _2456 = 0.959999978542327880859375 - _807;
    float _2463 = 1.0 - _2416;
    float _2474 = (0.5 / (((_2431 * ((_2430 * _2463) + _2416)) + 9.9999999392252902907785028219223e-09) + (((_2431 * _2463) + _2416) * _2430))) * _2430;
    float _4597 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
    float _2476 = (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (_2440 / ((_2444 * _2444) * 3.141590118408203125));
    uint _2490 = _2155 + 9u;
    float _2501 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2195].w)) * _648) * 0.949999988079071044921875);
    float _2502 = _2501 * _2501;
    float _2503 = cbLight._m0[_2195].x + _729;
    float _2504 = cbLight._m0[_2195].y + _730;
    float _2505 = cbLight._m0[_2195].z + _731;
    float _2509 = inversesqrt(dot(vec3(_2503, _2504, _2505), vec3(_2503, _2504, _2505)));
    float _2510 = _2509 * _2503;
    float _2511 = _2509 * _2504;
    float _2512 = _2509 * _2505;
    float _2513 = dot(vec3(_645, _646, _647), vec3(cbLight._m0[_2195].xyz));
    float _4608 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
    float _2516 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
    float _2517 = dot(vec3(_645, _646, _647), vec3(_2510, _2511, _2512));
    float _4619 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
    float _2520 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
    float _2521 = dot(vec3(cbLight._m0[_2195].xyz), vec3(_2510, _2511, _2512));
    float _4630 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
    float _2525 = _2502 * _2502;
    float _2529 = ((_2520 * _2520) * (_2525 + (-1.0))) + 1.0;
    float _2536 = exp2(log2(1.0 - (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0)))) * 5.0);
    float _2543 = 1.0 - _2502;
    float _2553 = (0.5 / (((_2431 * ((_2516 * _2543) + _2502)) + 9.9999999392252902907785028219223e-09) + (((_2431 * _2543) + _2502) * _2516))) * _2516;
    float _4641 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
    float _2555 = (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * (_2525 / ((_2529 * _2529) * 3.141590118408203125));
    float _2565 = (((((_2536 * _2453) + _808) * cbLight._m0[_2490].x) * _2555) * _2178) + ((((cbLight._m0[_2402].x * _2144) * ((_2452 * _2453) + _808)) * _2476) * _2191);
    float _2566 = (((((_2536 * _2455) + _810) * cbLight._m0[_2490].y) * _2555) * _2178) + ((((cbLight._m0[_2402].y * _2146) * ((_2452 * _2455) + _810)) * _2476) * _2191);
    float _2567 = (((((_2536 * _2456) + _811) * cbLight._m0[_2490].z) * _2555) * _2178) + ((((cbLight._m0[_2402].z * _2148) * ((_2452 * _2456) + _811)) * _2476) * _2191);
    float _2623;
    float _2625;
    float _2627;
    if (_2231)
    {
        _2623 = _2565;
        _2625 = _2566;
        _2627 = _2567;
    }
    else
    {
        uint _2629 = _2155 + 2u;
        uint _2633 = _2155 + 10u;
        float _2647 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2629].w)) * _648) * 0.949999988079071044921875);
        float _2648 = _2647 * _2647;
        float _2649 = cbLight._m0[_2629].x + _729;
        float _2650 = cbLight._m0[_2629].y + _730;
        float _2651 = cbLight._m0[_2629].z + _731;
        float _2655 = inversesqrt(dot(vec3(_2649, _2650, _2651), vec3(_2649, _2650, _2651)));
        float _2656 = _2655 * _2649;
        float _2657 = _2655 * _2650;
        float _2658 = _2655 * _2651;
        float _2659 = dot(vec3(_645, _646, _647), vec3(cbLight._m0[_2629].xyz));
        float _4652 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2662 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
        float _2663 = dot(vec3(_645, _646, _647), vec3(_2656, _2657, _2658));
        float _4663 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2666 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
        float _2667 = dot(vec3(cbLight._m0[_2629].xyz), vec3(_2656, _2657, _2658));
        float _4674 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2671 = _2648 * _2648;
        float _2675 = ((_2666 * _2666) * (_2671 + (-1.0))) + 1.0;
        float _2682 = exp2(log2(1.0 - (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0)))) * 5.0);
        float _2689 = 1.0 - _2648;
        float _2699 = (0.5 / (((_2431 * ((_2662 * _2689) + _2648)) + 9.9999999392252902907785028219223e-09) + (((_2431 * _2689) + _2648) * _2662))) * _2662;
        float _4685 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
        float _2701 = (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0))) * (_2671 / ((_2675 * _2675) * 3.141590118408203125));
        float _2702 = isnan(1.0) ? _2170 : (isnan(_2170) ? 1.0 : min(_2170, 1.0));
        _2623 = (((((_2682 * _2453) + _808) * cbLight._m0[_2633].x) * _2701) * _2702) + _2565;
        _2625 = (((((_2682 * _2455) + _810) * cbLight._m0[_2633].y) * _2701) * _2702) + _2566;
        _2627 = (((((_2682 * _2456) + _811) * cbLight._m0[_2633].z) * _2701) * _2702) + _2567;
    }
    float _2733;
    float _2735;
    float _2737;
    if (_2340)
    {
        _2733 = _2623;
        _2735 = _2625;
        _2737 = _2627;
    }
    else
    {
        uint _2744 = _2155 + 3u;
        uint _2748 = _2155 + 11u;
        float _2762 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2744].w)) * _648) * 0.949999988079071044921875);
        float _2763 = _2762 * _2762;
        float _2764 = cbLight._m0[_2744].x + _729;
        float _2765 = cbLight._m0[_2744].y + _730;
        float _2766 = cbLight._m0[_2744].z + _731;
        float _2770 = inversesqrt(dot(vec3(_2764, _2765, _2766), vec3(_2764, _2765, _2766)));
        float _2771 = _2770 * _2764;
        float _2772 = _2770 * _2765;
        float _2773 = _2770 * _2766;
        float _2774 = dot(vec3(_645, _646, _647), vec3(cbLight._m0[_2744].xyz));
        float _4701 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
        float _2777 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
        float _2778 = dot(vec3(_645, _646, _647), vec3(_2771, _2772, _2773));
        float _4712 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
        float _2781 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
        float _2782 = dot(vec3(cbLight._m0[_2744].xyz), vec3(_2771, _2772, _2773));
        float _4723 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
        float _2786 = _2763 * _2763;
        float _2790 = ((_2781 * _2781) * (_2786 + (-1.0))) + 1.0;
        float _2797 = exp2(log2(1.0 - (isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0)))) * 5.0);
        float _2804 = 1.0 - _2763;
        float _2814 = (0.5 / (((_2431 * ((_2777 * _2804) + _2763)) + 9.9999999392252902907785028219223e-09) + (((_2431 * _2804) + _2763) * _2777))) * _2777;
        float _4734 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        float _2816 = (isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0))) * (_2786 / ((_2790 * _2790) * 3.141590118408203125));
        float _2817 = isnan(1.0) ? _2171 : (isnan(_2171) ? 1.0 : min(_2171, 1.0));
        _2733 = (((((_2797 * _2453) + _808) * cbLight._m0[_2748].x) * _2816) * _2817) + _2623;
        _2735 = (((((_2797 * _2455) + _810) * cbLight._m0[_2748].y) * _2816) * _2817) + _2625;
        _2737 = (((((_2797 * _2456) + _811) * cbLight._m0[_2748].z) * _2816) * _2817) + _2627;
    }
    float _2883;
    float _2885;
    float _2887;
    float _2889;
    float _2891;
    float _2893;
    if (_2153.y == 0u)
    {
        uvec4 _2838 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2839 = _2838.x;
        uint _2850 = uint((float(_2838.y) * floor(float(uint(cbSceneParam._m0[85u].y * _747) / _2839))) + floor(float(uint(cbSceneParam._m0[85u].x * _746) / _2839)));
        float _2860 = (log2(_1931 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2861 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
        uint _2864 = uint(isnan(14.0) ? _2861 : (isnan(_2861) ? 14.0 : min(_2861, 14.0)));
        uvec4 _2869 = texelFetch(g_lightClusterGridBuffer, int(((_2864 << 2u) + (_2850 << 6u)) >> 2u));
        uint _2870 = _2869.x;
        uint _2871 = _2838.z;
        float _2950;
        float _2952;
        float _2954;
        float _2956;
        float _2958;
        float _2960;
        if (((((1u << ((_2871 >> 4u) & 15u)) + 4294967295u) & _2870) == 0u) || ((_2871 & 240u) == 0u))
        {
            _2950 = 0.0;
            _2952 = 0.0;
            _2954 = 0.0;
            _2956 = 0.0;
            _2958 = 0.0;
            _2960 = 0.0;
        }
        else
        {
            float _2951;
            float _2953;
            float _2955;
            float _2957;
            float _2959;
            float _2961;
            float _3103 = 0.0;
            float _3104 = 0.0;
            float _3105 = 0.0;
            float _3106 = 0.0;
            float _3107 = 0.0;
            float _3108 = 0.0;
            uint _3109 = 0u;
            uint _3118;
            bool _3119;
            for (;;)
            {
                _3118 = texelFetch(g_lightClassification, int((((_2864 << 5u) + (_2850 << 9u)) + (_3109 << 2u)) >> 2u)).x;
                _3119 = _3118 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3119)
                {
                    frontier_phi_73_pred = _3108;
                    frontier_phi_73_pred_1 = _3107;
                    frontier_phi_73_pred_2 = _3106;
                    frontier_phi_73_pred_3 = _3105;
                    frontier_phi_73_pred_4 = _3104;
                    frontier_phi_73_pred_5 = _3103;
                }
                else
                {
                    float _3248;
                    float _3249;
                    float _3250;
                    float _3251;
                    float _3252;
                    float _3253;
                    uint _3254;
                    _3248 = _3103;
                    _3249 = _3104;
                    _3250 = _3105;
                    _3251 = _3106;
                    _3252 = _3107;
                    _3253 = _3108;
                    _3254 = _3118;
                    float _3175;
                    float _3176;
                    float _3177;
                    float _3178;
                    float _3179;
                    float _3180;
                    for (;;)
                    {
                        uint _3258 = uint(findLSB(_3254)) + (_3109 << 5u);
                        uint _3255 = (_3254 + 4294967295u) & _3254;
                        uint _3260 = _3258 * 48u;
                        vec4 _3274 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3260)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 3u)).x));
                        uint _3280 = (_3258 * 48u) + 4u;
                        vec4 _3293 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3280)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 3u)).x));
                        uint _3299 = (_3258 * 48u) + 8u;
                        vec3 _3310 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3299)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 2u)).x));
                        float _3314 = _3274.x - _1929;
                        float _3315 = _3274.y - _1930;
                        float _3316 = _3274.z - _1931;
                        float _3317 = dot(vec3(_3314, _3315, _3316), vec3(_3314, _3315, _3316));
                        float _3320 = inversesqrt(_3317);
                        float _3321 = _3320 * _3314;
                        float _3322 = _3320 * _3315;
                        float _3323 = _3320 * _3316;
                        float _3324 = dot(vec3(_765, _768, _771), vec3(_3321, _3322, _3323));
                        float _3329 = 1.0 - (_3317 * _3274.w);
                        float _4760 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                        float _3330 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                        float _3331 = sqrt(_3317) * _3293.w;
                        float _3334 = 1.39999997615814208984375 / (_3331 + 1.39999997615814208984375);
                        float _3335 = _3334 * _3334;
                        float _3338 = ((1.0 - _3335) * _3324) + _3335;
                        float _3341 = _3331 * _3331;
                        float _3345 = ((isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0))) * _3330) / ((_3341 * 0.699999988079071044921875) + 1.0);
                        float _3349 = (-0.0) - _1929;
                        float _3350 = (-0.0) - _1930;
                        float _3351 = (-0.0) - _1931;
                        float _3355 = inversesqrt(dot(vec3(_3349, _3350, _3351), vec3(_3349, _3350, _3351)));
                        float _3356 = _3355 * _3349;
                        float _3357 = _3355 * _3350;
                        float _3358 = _3355 * _3351;
                        float _3365 = exp2(log2(1.0 / ((_3341 * 3.5) + 5.0)) * 0.25);
                        float _3366 = 1.0 - _840;
                        float _3373 = sqrt(1.0 - ((1.0 - (_3366 * _3366)) * (1.0 - (_3365 * _3365))));
                        float _3374 = _3373 * _3373;
                        float _3375 = _3374 * _3374;
                        float _3376 = _3356 + _3321;
                        float _3377 = _3357 + _3322;
                        float _3378 = _3358 + _3323;
                        float _3382 = inversesqrt(dot(vec3(_3376, _3377, _3378), vec3(_3376, _3377, _3378)));
                        float _3386 = dot(vec3(_765, _768, _771), vec3(_3356, _3357, _3358));
                        float _4776 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                        float _3389 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
                        float _3390 = dot(vec3(_765, _768, _771), vec3(_3382 * _3376, _3382 * _3377, _3382 * _3378));
                        float _4787 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                        float _3393 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
                        float _3397 = ((_3393 * _3393) * (_3375 + (-1.0))) + 1.0;
                        float _3398 = _3334 * _3374;
                        float _3399 = _3398 * _3398;
                        float _3402 = ((1.0 - _3399) * _3324) + _3399;
                        float _4798 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                        float _3403 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                        float _3404 = 1.0 - _3374;
                        float _3414 = (0.5 / (((_3403 * ((_3389 * _3404) + _3374)) + 9.9999999392252902907785028219223e-09) + (((_3403 * _3404) + _3374) * _3389))) * _3403;
                        float _4809 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                        float _3425 = (((_3375 * 3.1415927410125732421875) * (isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0)))) / ((_3397 * _3397) * ((_3341 * 2.1991131305694580078125) + 3.141590118408203125))) * _3330;
                        _3178 = (_3345 * _3293.x) + _3251;
                        _3179 = (_3345 * _3293.y) + _3252;
                        _3180 = (_3345 * _3293.z) + _3253;
                        _3175 = (_3425 * _3310.x) + _3248;
                        _3176 = (_3425 * _3310.y) + _3249;
                        _3177 = (_3425 * _3310.z) + _3250;
                        if (_3255 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3248 = _3175;
                            _3249 = _3176;
                            _3250 = _3177;
                            _3251 = _3178;
                            _3252 = _3179;
                            _3253 = _3180;
                            _3254 = _3255;
                        }
                    }
                    frontier_phi_73_pred = _3180;
                    frontier_phi_73_pred_1 = _3179;
                    frontier_phi_73_pred_2 = _3178;
                    frontier_phi_73_pred_3 = _3177;
                    frontier_phi_73_pred_4 = _3176;
                    frontier_phi_73_pred_5 = _3175;
                }
                _2961 = frontier_phi_73_pred;
                _2959 = frontier_phi_73_pred_1;
                _2957 = frontier_phi_73_pred_2;
                _2955 = frontier_phi_73_pred_3;
                _2953 = frontier_phi_73_pred_4;
                _2951 = frontier_phi_73_pred_5;
                uint _3110 = _3109 + 1u;
                if (_3110 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3103 = _2951;
                    _3104 = _2953;
                    _3105 = _2955;
                    _3106 = _2957;
                    _3107 = _2959;
                    _3108 = _2961;
                    _3109 = _3110;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2950 = _2951;
            _2952 = _2953;
            _2954 = _2955;
            _2956 = _2957;
            _2958 = _2959;
            _2960 = _2961;
        }
        uvec4 _2964 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2965 = _2964.z;
        uint _2967 = (_2965 >> 8u) & 15u;
        float _3071;
        float _3073;
        float _3075;
        float _3077;
        float _3079;
        float _3081;
        if (((4294967295u << _2967) & _2870) == 0u)
        {
            _3071 = _2950;
            _3073 = _2952;
            _3075 = _2954;
            _3077 = _2956;
            _3079 = _2958;
            _3081 = _2960;
        }
        else
        {
            float _3096 = inversesqrt(dot(vec3(_1929, _1930, _1931), vec3(_1929, _1930, _1931)));
            float _3097 = _3096 * _1929;
            float _3098 = _3096 * _1930;
            float _3099 = _3096 * _1931;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2967 < ((_2965 >> 12u) & 15u))
            {
                float _3072;
                float _3074;
                float _3076;
                float _3078;
                float _3080;
                float _3082;
                float _3231 = _2950;
                float _3232 = _2952;
                float _3233 = _2954;
                float _3234 = _2956;
                float _3235 = _2958;
                float _3236 = _2960;
                uint _3237 = _2967;
                uint _3246;
                bool _3247;
                for (;;)
                {
                    _3246 = texelFetch(g_lightClassification, int((((_2864 << 5u) + (_2850 << 9u)) + (_3237 << 2u)) >> 2u)).x;
                    _3247 = _3246 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3247)
                    {
                        frontier_phi_84_pred = _3236;
                        frontier_phi_84_pred_1 = _3235;
                        frontier_phi_84_pred_2 = _3234;
                        frontier_phi_84_pred_3 = _3233;
                        frontier_phi_84_pred_4 = _3232;
                        frontier_phi_84_pred_5 = _3231;
                    }
                    else
                    {
                        float _3439;
                        float _3440;
                        float _3441;
                        float _3442;
                        float _3443;
                        float _3444;
                        float _3732;
                        float _3733;
                        float _3734;
                        float _3735;
                        float _3736;
                        float _3737;
                        float _3452 = _3231;
                        float _3453 = _3232;
                        float _3454 = _3233;
                        float _3455 = _3234;
                        float _3456 = _3235;
                        float _3457 = _3236;
                        uint _3458 = _3246;
                        uint _3459;
                        vec4 _3484;
                        float _3485;
                        vec4 _3500;
                        vec3 _3512;
                        vec4 _3527;
                        vec4 _3542;
                        float _3588;
                        bool _3589;
                        for (;;)
                        {
                            uint _3469 = ((_3237 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3458));
                            _3459 = (_3458 + 4294967295u) & _3458;
                            uint _3471 = _3469 * 40u;
                            _3484 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3471)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 3u)).x));
                            _3485 = _3484.w;
                            uint _3487 = (_3469 * 40u) + 4u;
                            _3500 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3487)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 3u)).x));
                            uint _3502 = (_3469 * 40u) + 8u;
                            _3512 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3502)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 2u)).x));
                            uint _3514 = (_3469 * 40u) + 16u;
                            _3527 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3514)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 3u)).x));
                            uint _3529 = (_3469 * 40u) + 20u;
                            _3542 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3529)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 3u)).x));
                            uint _3544 = (_3469 * 40u) + 24u;
                            vec4 _3557 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3544)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 3u)).x));
                            uint _3563 = (_3469 * 40u) + 28u;
                            vec4 _3576 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3563)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 3u)).x));
                            _3588 = fma(_1931, _3576.z, fma(_1930, _3576.y, _3576.x * _1929)) + _3576.w;
                            _3589 = !((fma(_1931, _3557.z, fma(_1930, _3557.y, _3557.x * _1929)) + _3557.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3589)
                            {
                                float _3616 = _3484.x - _1929;
                                float _3617 = _3484.y - _1930;
                                float _3618 = _3484.z - _1931;
                                float _3619 = dot(vec3(_3616, _3617, _3618), vec3(_3616, _3617, _3618));
                                float _3622 = inversesqrt(_3619);
                                float _3623 = _3622 * _3616;
                                float _3624 = _3622 * _3617;
                                float _3625 = _3622 * _3618;
                                float _3629 = 1.0 - (_3619 / (_3485 * _3485));
                                float _4820 = isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0));
                                float _3630 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
                                float _3634 = sqrt(_3619) * _3500.w;
                                float _3636 = 1.39999997615814208984375 / (_3634 + 1.39999997615814208984375);
                                float _3637 = _3636 * _3636;
                                float _3640 = ((1.0 - _3637) * dot(vec3(_3623, _3624, _3625), vec3(_765, _768, _771))) + _3637;
                                float _3643 = _3634 * _3634;
                                float _3647 = (fma(_1931, _3527.z, fma(_1930, _3527.y, _3527.x * _1929)) + _3527.w) / _3588;
                                float _3648 = (fma(_1931, _3542.z, fma(_1930, _3542.y, _3542.x * _1929)) + _3542.w) / _3588;
                                float _3652 = 1.0 - dot(vec2(_3647, _3648), vec2(_3647, _3648));
                                float _4836 = isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0));
                                float _3653 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
                                float _3654 = _3653 * (((isnan(0.0) ? _3640 : (isnan(_3640) ? 0.0 : max(_3640, 0.0))) * _3630) / ((_3643 * 0.699999988079071044921875) + 1.0));
                                float _3666 = exp2(log2(1.0 / ((_3643 * 3.5) + 5.0)) * 0.25);
                                float _3667 = 1.0 - _840;
                                float _3674 = sqrt(1.0 - ((1.0 - (_3667 * _3667)) * (1.0 - (_3666 * _3666))));
                                float _3675 = _3674 * _3674;
                                float _3676 = _3675 * _3675;
                                float _3677 = _3623 - _3097;
                                float _3678 = _3624 - _3098;
                                float _3679 = _3625 - _3099;
                                float _3683 = inversesqrt(dot(vec3(_3677, _3678, _3679), vec3(_3677, _3678, _3679)));
                                float _3687 = dot(vec3(_765, _768, _771), vec3((-0.0) - _3097, (-0.0) - _3098, (-0.0) - _3099));
                                float _4847 = isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0));
                                float _3690 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
                                float _3691 = dot(vec3(_765, _768, _771), vec3(_3683 * _3677, _3683 * _3678, _3683 * _3679));
                                float _4858 = isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0));
                                float _3694 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
                                float _3698 = ((_3694 * _3694) * (_3676 + (-1.0))) + 1.0;
                                float _3699 = _3636 * _3675;
                                float _3700 = _3699 * _3699;
                                float _3706 = ((1.0 - _3700) * dot(vec3(_765, _768, _771), vec3(_3623, _3624, _3625))) + _3700;
                                float _4869 = isnan(0.0) ? _3706 : (isnan(_3706) ? 0.0 : max(_3706, 0.0));
                                float _3707 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
                                float _3708 = 1.0 - _3675;
                                float _3718 = (0.5 / (((_3707 * ((_3690 * _3708) + _3675)) + 9.9999999392252902907785028219223e-09) + (((_3707 * _3708) + _3675) * _3690))) * _3707;
                                float _4880 = isnan(0.0) ? _3718 : (isnan(_3718) ? 0.0 : max(_3718, 0.0));
                                float _3728 = (_3653 * _3630) * (((_3676 * 3.1415927410125732421875) * (isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0)))) / ((_3698 * _3698) * ((_3643 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3654 * _3500.z;
                                frontier_phi_90_pred_1 = _3654 * _3500.y;
                                frontier_phi_90_pred_2 = _3654 * _3500.x;
                                frontier_phi_90_pred_3 = _3728 * _3512.z;
                                frontier_phi_90_pred_4 = _3728 * _3512.y;
                                frontier_phi_90_pred_5 = _3728 * _3512.x;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3737 = frontier_phi_90_pred;
                            _3736 = frontier_phi_90_pred_1;
                            _3735 = frontier_phi_90_pred_2;
                            _3734 = frontier_phi_90_pred_3;
                            _3733 = frontier_phi_90_pred_4;
                            _3732 = frontier_phi_90_pred_5;
                            _3442 = _3735 + _3455;
                            _3443 = _3736 + _3456;
                            _3444 = _3737 + _3457;
                            _3439 = _3732 + _3452;
                            _3440 = _3733 + _3453;
                            _3441 = _3734 + _3454;
                            if (_3459 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3452 = _3439;
                                _3453 = _3440;
                                _3454 = _3441;
                                _3455 = _3442;
                                _3456 = _3443;
                                _3457 = _3444;
                                _3458 = _3459;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3444;
                        frontier_phi_84_pred_1 = _3443;
                        frontier_phi_84_pred_2 = _3442;
                        frontier_phi_84_pred_3 = _3441;
                        frontier_phi_84_pred_4 = _3440;
                        frontier_phi_84_pred_5 = _3439;
                    }
                    _3082 = frontier_phi_84_pred;
                    _3080 = frontier_phi_84_pred_1;
                    _3078 = frontier_phi_84_pred_2;
                    _3076 = frontier_phi_84_pred_3;
                    _3074 = frontier_phi_84_pred_4;
                    _3072 = frontier_phi_84_pred_5;
                    uint _3238 = _3237 + 1u;
                    if (_3238 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3231 = _3072;
                        _3232 = _3074;
                        _3233 = _3076;
                        _3234 = _3078;
                        _3235 = _3080;
                        _3236 = _3082;
                        _3237 = _3238;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3078;
                frontier_phi_65_66_ladder_1 = _3082;
                frontier_phi_65_66_ladder_2 = _3080;
                frontier_phi_65_66_ladder_3 = _3076;
                frontier_phi_65_66_ladder_4 = _3074;
                frontier_phi_65_66_ladder_5 = _3072;
            }
            else
            {
                frontier_phi_65_66_ladder = _2956;
                frontier_phi_65_66_ladder_1 = _2960;
                frontier_phi_65_66_ladder_2 = _2958;
                frontier_phi_65_66_ladder_3 = _2954;
                frontier_phi_65_66_ladder_4 = _2952;
                frontier_phi_65_66_ladder_5 = _2950;
            }
            _3071 = frontier_phi_65_66_ladder_5;
            _3073 = frontier_phi_65_66_ladder_4;
            _3075 = frontier_phi_65_66_ladder_3;
            _3077 = frontier_phi_65_66_ladder;
            _3079 = frontier_phi_65_66_ladder_2;
            _3081 = frontier_phi_65_66_ladder_1;
        }
        float _3086 = isnan(1.0) ? _824 : (isnan(_824) ? 1.0 : min(_824, 1.0));
        _2883 = (_3086 * _3077) + _2395;
        _2885 = (_3086 * _3079) + _2397;
        _2887 = (_3086 * _3081) + _2399;
        _2889 = ((_3071 * _808) * _3086) + _2733;
        _2891 = ((_3073 * _810) * _3086) + _2735;
        _2893 = ((_3075 * _811) * _3086) + _2737;
    }
    else
    {
        _2883 = _2395;
        _2885 = _2397;
        _2887 = _2399;
        _2889 = _2733;
        _2891 = _2735;
        _2893 = _2737;
    }
    float _4896 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _4907 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _4918 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _2910 = ((isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0))) * (_2883 + ((isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))) * _824))) + ((_2889 + ((isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0))) * _1659)) * cbPerFrame._m0[3u].x);
    float _2911 = ((isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0))) * (_2885 + ((isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))) * _824))) + ((_2891 + ((isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0))) * _1659)) * cbPerFrame._m0[3u].x);
    float _2912 = ((isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0))) * (_2887 + ((isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))) * _824))) + ((_2893 + ((isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0))) * _1659)) * cbPerFrame._m0[3u].x);
    uint _2913 = _268 + 6u;
    float _2921 = _746 / cbSceneParam._m0[86u].x;
    float _2922 = _747 / cbSceneParam._m0[86u].y;
    vec4 _2936 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2921, _2922, (log2((isnan(cbSceneParam._m0[77u].w) ? _671 : (isnan(_671) ? cbSceneParam._m0[77u].w : min(_671, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2938 = _2936.x;
    float _2939 = _2936.y;
    float _2940 = _2936.z;
    float _2941 = _2936.w;
    float _3013;
    float _3015;
    float _3017;
    float _3019;
    if (_671 > cbSceneParam._m0[78u].w)
    {
        float _2975 = isnan(_671) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _671 : min(cbSceneParam._m0[80u].w, _671));
        float _2976 = _2975 / _671;
        float _2987 = _2976 * _722;
        float _2988 = _723 * _2976;
        float _2989 = (-0.0) - _2988;
        float _2991 = _2976 * _724;
        float _2993 = (cbSceneParam._m0[77u].w * _2989) / _2975;
        float _2994 = _2993 + cbSceneParam._m0[79u].w;
        float _2995 = cbSceneParam._m0[79u].w - _2988;
        float _3001 = sqrt(((_2987 * _2987) + (_2988 * _2988)) + (_2991 * _2991));
        float _3004 = (1.0 - (cbSceneParam._m0[77u].w / _2975)) * _3001;
        float _3009 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3011 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3188;
        if (abs((_2989 - _2993) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3188 = ((((_2994 > 0.0) ? exp2(_3009 * _2994) : (2.0 - exp2(_3011 * _2994))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3004;
        }
        else
        {
            float _3132 = 1.0 / cbSceneParam._m0[80u].x;
            float _3133 = isnan(_2995) ? _2994 : (isnan(_2994) ? _2995 : max(_2994, _2995));
            float _3134 = isnan(_2995) ? _2994 : (isnan(_2994) ? _2995 : min(_2994, _2995));
            float _3143 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : min(_3133, 0.0));
            float _3144 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : min(_3134, 0.0));
            _3188 = ((abs(_3001 / _2989) * cbSceneParam._m0[80u].y) * ((((_3143 - _3144) * 2.0) - ((exp2(_3009 * (isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0)))) - exp2(_3009 * (isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0))))) * _3132)) - ((exp2(_3011 * _3143) - exp2(_3011 * _3144)) * _3132))) + (_3004 * cbSceneParam._m0[80u].z);
        }
        vec4 _3190 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2921, _2922, 1.0), 0.0);
        float _3199 = exp2((_3188 * (-1.44269502162933349609375)) * (1.0 - _3190.w));
        float _3200 = log2(_3199);
        float _3216 = log2(_2941);
        _3013 = (exp2(_3216 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3200 * cbSceneParam._m0[78u].x)) * _3190.x) / cbSceneParam._m0[78u].x)) + _2938;
        _3015 = (exp2(_3216 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3200 * cbSceneParam._m0[78u].y)) * _3190.y) / cbSceneParam._m0[78u].y)) + _2939;
        _3017 = (exp2(_3216 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3200 * cbSceneParam._m0[78u].z)) * _3190.z) / cbSceneParam._m0[78u].z)) + _2940;
        _3019 = _3199 * _2941;
    }
    else
    {
        _3013 = _2938;
        _3015 = _2939;
        _3017 = _2940;
        _3019 = _2941;
    }
    bool _3226;
    vec4 _3029;
    vec4 _3051;
    float _3053;
    float _3057;
    float _3058;
    float _3059;
    float _3060;
    bool _3070;
    for (;;)
    {
        _3029 = cbMatDynParam._m0[0u];
        float _3031 = roundEven(_3029.y);
        bool _3032 = _3031 == 3.0;
        float _3033 = log2(_3019);
        float _3040 = exp2(_3033 * cbSceneParam._m0[78u].x) * _2910;
        float _3041 = exp2(_3033 * cbSceneParam._m0[78u].y) * _2911;
        float _3042 = exp2(_3033 * cbSceneParam._m0[78u].z) * _2912;
        float _3049 = _735 + (-0.5);
        _3051 = cbMtdParam._m0[1u];
        _3053 = _3051.y * _3049;
        float _3056 = (_3031 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3057 = _3056 * (_3032 ? _3040 : (_3040 + (cbSceneParam._m0[72u].w * _3013)));
        _3058 = _3056 * (_3032 ? _3041 : (_3041 + (cbSceneParam._m0[72u].w * _3015)));
        _3059 = _3056 * (_3032 ? _3042 : (_3042 + (cbSceneParam._m0[72u].w * _3017)));
        _3060 = _3049 * 0.999000012874603271484375;
        _3070 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3070)
        {
            if ((cbInstanceData._m0[_268 + 7u].x + _3060) < 0.5)
            {
                _3226 = true;
                break;
            }
        }
        uint _3167 = _784 + uint(_3029.w);
        if ((cbInstanceData._m0[_3167].w < 1.0) && ((cbInstanceData._m0[_3167].w + _3060) < 0.5))
        {
            _3226 = true;
            break;
        }
        if ((_3053 + 1.0) < _3051.x)
        {
            _3226 = true;
            break;
        }
        _3226 = false;
        break;
    }
    float _3430;
    if (_3226)
    {
        discard_state = true;
        _3430 = 0.0;
    }
    else
    {
        _3430 = cbInstanceData._m0[_2913].w;
    }
    SV_Target.x = _3057;
    SV_Target.y = _3058;
    SV_Target.z = _3059;
    SV_Target.w = _3430;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2913].w;
    discard_exit();
}


