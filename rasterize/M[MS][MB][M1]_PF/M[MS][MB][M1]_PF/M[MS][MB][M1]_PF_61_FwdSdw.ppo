#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1055;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _232 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _232 + 1u;
    uint _242 = _232 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _273 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _279 = _273.x * cbMtdParam._m0[11u].x;
    float _280 = _273.y * cbMtdParam._m0[11u].y;
    float _281 = _273.z * cbMtdParam._m0[11u].z;
    vec4 _300 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _252) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _253) + cbTextureTilingScale._m0[5u].w));
    vec4 _336 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _338 = _336.x;
    float _350 = dot(vec4(_338, _336.yzw), vec4(cbMtdParam._m0[28u].w, cbMtdParam._m0[29u].xy, 0.0));
    float _367 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_338 - _350) * cbMtdParam._m0[24u].y) + _350) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3668 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _368 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
    float _375 = (_368 * ((_300.x * cbMtdParam._m0[12u].x) - _279)) + _279;
    float _376 = (_368 * ((_300.y * cbMtdParam._m0[12u].y) - _280)) + _280;
    float _377 = (_368 * ((_300.z * cbMtdParam._m0[12u].z) - _281)) + _281;
    vec4 _390 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _252) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _253) + cbTextureTilingScale._m0[4u].w));
    vec4 _407 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _409 = _407.x;
    float _410 = _407.y;
    float _411 = _407.z;
    float _420 = ((_390.z - _411) * _368) + _411;
    float _423 = ((((_390.x - _409) * _368) + _409) * 2.0) + (-1.0);
    float _425 = ((((_390.y - _410) * _368) + _410) * 2.0) + (-1.0);
    float _426 = dot(vec2(_423, _425), vec2(_423, _425));
    float _3679 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _431 = sqrt(1.0 - (isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))));
    vec4 _444 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _472 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _474 = _472.x;
    float _492 = ((texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _252) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _253) + cbTextureTilingScale._m0[9u].w)).x - _474) * _368) + _474;
    float _496 = ((texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _492) * cbMtdParam._m0[19u].z) + _492;
    float _501 = cbMtdParam._m0[22u].x + _444.w;
    float _504 = fma(_431, _219 * NORMAL.x, fma(_425, _226 * TANGENT.x, (_212 * _204) * _423));
    float _507 = fma(_431, _219 * NORMAL.y, fma(_425, _226 * TANGENT.y, (_212 * _205) * _423));
    float _510 = fma(_431, _219 * NORMAL.z, fma(_425, _226 * TANGENT.z, (_212 * _206) * _423));
    float _514 = inversesqrt(dot(vec3(_504, _507, _510), vec3(_504, _507, _510)));
    float _515 = _514 * _504;
    float _516 = _514 * _507;
    float _517 = _514 * _510;
    float _3690 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _518 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
    float _3701 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _3712 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _3723 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _3734 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _3745 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _523 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _537 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _578 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _588 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _578);
    float _589 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _578);
    float _590 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _578);
    float _594 = inversesqrt(dot(vec3(_588, _589, _590), vec3(_588, _589, _590)));
    float _595 = _588 * _594;
    float _596 = _589 * _594;
    float _597 = _590 * _594;
    float _603 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _604 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _622 = fma(_517, cbSceneParam._m0[5u].z, fma(_516, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _515));
    float _625 = fma(_517, cbSceneParam._m0[6u].z, fma(_516, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _515));
    float _628 = fma(_517, cbSceneParam._m0[7u].z, fma(_516, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _515));
    uint _642 = (_232 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _648 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0)))) * cbInstanceData._m0[_642].x;
    float _649 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0)))) * cbInstanceData._m0[_642].y;
    float _650 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0)))) * cbInstanceData._m0[_642].z;
    float _3756 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _651 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _3767 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _652 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    float _3778 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _653 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _654 = 1.0 - _523;
    float _655 = _651 * _654;
    float _656 = _652 * _654;
    float _657 = _653 * _654;
    float _662 = (_651 + (-0.039999999105930328369140625)) * _523;
    float _663 = (_652 + (-0.039999999105930328369140625)) * _523;
    float _664 = (_653 + (-0.039999999105930328369140625)) * _523;
    float _665 = _662 + 0.039999999105930328369140625;
    float _667 = _663 + 0.039999999105930328369140625;
    float _668 = _664 + 0.039999999105930328369140625;
    vec4 _677 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _603, cbSceneParam._m0[86u].y * _604));
    float _681 = ((isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * TEXCOORD_5.w) * _677.x;
    float _682 = dot(vec3(_515, _516, _517), vec3(_595, _596, _597));
    float _685 = _682 * 2.0;
    float _689 = (_685 * _515) - _595;
    float _690 = (_685 * _516) - _596;
    float _691 = (_685 * _517) - _597;
    float _695 = abs(dot(vec3(_595, _596, _597), vec3(_515, _516, _517)));
    float _3789 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _697 = sqrt(_518);
    float _710 = exp2((_697 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_697 * 3.0));
    float _716 = (1.0 - _710) * ((_697 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _717 = _710 * _697;
    float _745 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _749 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _753 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1054;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _779 = fma(_753, cbModelParam._m0[26u].z, fma(_749, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _745));
        float _783 = fma(_753, cbModelParam._m0[27u].z, fma(_749, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _745));
        float _787 = fma(_753, cbModelParam._m0[28u].z, fma(_749, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _745));
        float _812 = _745 + _515;
        float _813 = _749 + _516;
        float _814 = _753 + _517;
        float _824 = fma(_814, cbModelParam._m0[26u].z, fma(_813, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _812)) - _779;
        float _825 = fma(_814, cbModelParam._m0[27u].z, fma(_813, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _812)) - _783;
        float _826 = fma(_814, cbModelParam._m0[28u].z, fma(_813, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _812)) - _787;
        float _830 = inversesqrt(dot(vec3(_824, _825, _826), vec3(_824, _825, _826)));
        float _843 = ((_830 * _824) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_779 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _844 = ((_830 * _825) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_783 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _845 = ((_830 * _826) / cbModelParam._m0[34u].z) + ((((((_787 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _848 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_843, _844, _845), 0.0);
        vec4 _855 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_843, _844, _845), 0.0);
        vec4 _862 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_843, _844, _845), 0.0);
        vec4 _869 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_843, _844, _845), 0.0);
        float _882 = exp2((_848.w + (-0.5)) * 20.0) * 2.0;
        float _883 = _882 * (_848.x + (-0.5));
        float _884 = _882 * (_848.y + (-0.5));
        float _885 = _882 * (_848.z + (-0.5));
        float _892 = exp2((_855.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_855.x + (-0.5));
        float _894 = _892 * (_855.y + (-0.5));
        float _895 = _892 * (_855.z + (-0.5));
        float _902 = exp2((_862.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_862.x + (-0.5));
        float _904 = _902 * (_862.y + (-0.5));
        float _905 = _902 * (_862.z + (-0.5));
        float _912 = exp2((_869.w + (-0.5)) * 20.0) * 2.0;
        float _913 = _912 * (_869.x + (-0.5));
        float _914 = _912 * (_869.y + (-0.5));
        float _915 = _912 * (_869.z + (-0.5));
        float _916 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _917 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _918 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _919 = _883 * 0.5;
        float _920 = _893 * 0.5;
        float _921 = _903 * 0.5;
        float _922 = dot(vec3(_919, _920, _921), vec3(_919, _920, _921));
        float _927 = (_922 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_922);
        float _936 = (dot(vec3(_515, _516, _517), vec3(_927 * _919, _927 * _920, _927 * _921)) + 1.0) * 0.5;
        float _3815 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _946 = sqrt(((_920 * _920) + (_919 * _919)) + (_921 * _921)) / (_916 + 9.9999997473787516355514526367188e-06);
        float _3826 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _947 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _948 = _947 * 2.0;
        float _952 = (1.0 - _947) / (_947 + 1.0);
        float _3837 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _953 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _962 = ((((1.0 - _953) * (_948 + 2.0)) * exp2(log2(isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * (_948 + 1.0))) + _953) * _916;
        float _963 = _884 * 0.5;
        float _964 = _894 * 0.5;
        float _965 = _904 * 0.5;
        float _966 = dot(vec3(_963, _964, _965), vec3(_963, _964, _965));
        float _971 = (_966 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_966);
        float _979 = (dot(vec3(_515, _516, _517), vec3(_971 * _963, _971 * _964, _971 * _965)) + 1.0) * 0.5;
        float _3848 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _988 = sqrt(((_964 * _964) + (_963 * _963)) + (_965 * _965)) / (_917 + 9.9999997473787516355514526367188e-06);
        float _3859 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _990 = _989 * 2.0;
        float _994 = (1.0 - _989) / (_989 + 1.0);
        float _3870 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _995 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1004 = ((((1.0 - _995) * (_990 + 2.0)) * exp2(log2(isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * (_990 + 1.0))) + _995) * _917;
        float _1005 = _885 * 0.5;
        float _1006 = _895 * 0.5;
        float _1007 = _905 * 0.5;
        float _1008 = dot(vec3(_1005, _1006, _1007), vec3(_1005, _1006, _1007));
        float _1013 = (_1008 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1008);
        float _1021 = (dot(vec3(_515, _516, _517), vec3(_1013 * _1005, _1013 * _1006, _1013 * _1007)) + 1.0) * 0.5;
        float _3881 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1030 = sqrt(((_1006 * _1006) + (_1005 * _1005)) + (_1007 * _1007)) / (_918 + 9.9999997473787516355514526367188e-06);
        float _3892 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1032 = _1031 * 2.0;
        float _1036 = (1.0 - _1031) / (_1031 + 1.0);
        float _3903 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1046 = ((((1.0 - _1037) * (_1032 + 2.0)) * exp2(log2(isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * (_1032 + 1.0))) + _1037) * _918;
        _1054 = _885;
        _1056 = _884;
        _1057 = _883;
        _1058 = _895;
        _1059 = _894;
        _1060 = _893;
        _1061 = _905;
        _1062 = _904;
        _1063 = _903;
        _1064 = _918;
        _1065 = _917;
        _1066 = _916;
        _1067 = cbModelParam._m0[36u].z * (isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0)));
        _1068 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0)));
        _1069 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0)));
    }
    else
    {
        _1054 = _1055;
        _1056 = _1055;
        _1057 = _1055;
        _1058 = _1055;
        _1059 = _1055;
        _1060 = _1055;
        _1061 = _1055;
        _1062 = _1055;
        _1063 = _1055;
        _1064 = _1055;
        _1065 = _1055;
        _1066 = _1055;
        _1067 = 0.0;
        _1068 = 0.0;
        _1069 = 0.0;
    }
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1094 = fma(_753, cbModelParam._m0[30u].z, fma(_749, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _745));
        float _1098 = fma(_753, cbModelParam._m0[31u].z, fma(_749, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _745));
        float _1102 = fma(_753, cbModelParam._m0[32u].z, fma(_749, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _745));
        float _1125 = _745 + _515;
        float _1126 = _749 + _516;
        float _1127 = _753 + _517;
        float _1137 = fma(_1127, cbModelParam._m0[30u].z, fma(_1126, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1125)) - _1094;
        float _1138 = fma(_1127, cbModelParam._m0[31u].z, fma(_1126, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1125)) - _1098;
        float _1139 = fma(_1127, cbModelParam._m0[32u].z, fma(_1126, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1125)) - _1102;
        float _1143 = inversesqrt(dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139)));
        float _1156 = ((_1143 * _1137) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1094 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1157 = ((_1143 * _1138) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1098 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1158 = ((_1143 * _1139) / cbModelParam._m0[35u].z) + ((((((_1102 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        float _1193 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1160.x + (-0.5));
        float _1195 = _1193 * (_1160.y + (-0.5));
        float _1196 = _1193 * (_1160.z + (-0.5));
        float _1203 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1167.x + (-0.5));
        float _1205 = _1203 * (_1167.y + (-0.5));
        float _1206 = _1203 * (_1167.z + (-0.5));
        float _1213 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1174.x + (-0.5));
        float _1215 = _1213 * (_1174.y + (-0.5));
        float _1216 = _1213 * (_1174.z + (-0.5));
        float _1223 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1181.x + (-0.5));
        float _1225 = _1223 * (_1181.y + (-0.5));
        float _1226 = _1223 * (_1181.z + (-0.5));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = _1194 * 0.5;
        float _1231 = _1204 * 0.5;
        float _1232 = _1214 * 0.5;
        float _1233 = dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232));
        float _1238 = (_1233 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1233);
        float _1246 = (dot(vec3(_515, _516, _517), vec3(_1238 * _1230, _1238 * _1231, _1238 * _1232)) + 1.0) * 0.5;
        float _3944 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1255 = sqrt(((_1231 * _1231) + (_1230 * _1230)) + (_1232 * _1232)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _3955 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1257 = _1256 * 2.0;
        float _1261 = (1.0 - _1256) / (_1256 + 1.0);
        float _3966 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1271 = ((((1.0 - _1262) * (_1257 + 2.0)) * exp2(log2(isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * (_1257 + 1.0))) + _1262) * _1227;
        float _1272 = _1195 * 0.5;
        float _1273 = _1205 * 0.5;
        float _1274 = _1215 * 0.5;
        float _1275 = dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274));
        float _1280 = (_1275 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1275);
        float _1288 = (dot(vec3(_515, _516, _517), vec3(_1280 * _1272, _1280 * _1273, _1280 * _1274)) + 1.0) * 0.5;
        float _3977 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1297 = sqrt(((_1273 * _1273) + (_1272 * _1272)) + (_1274 * _1274)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _3988 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1299 = _1298 * 2.0;
        float _1303 = (1.0 - _1298) / (_1298 + 1.0);
        float _3999 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1313 = ((((1.0 - _1304) * (_1299 + 2.0)) * exp2(log2(isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (_1299 + 1.0))) + _1304) * _1228;
        float _1314 = _1196 * 0.5;
        float _1315 = _1206 * 0.5;
        float _1316 = _1216 * 0.5;
        float _1317 = dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316));
        float _1322 = (_1317 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1317);
        float _1330 = (dot(vec3(_515, _516, _517), vec3(_1322 * _1314, _1322 * _1315, _1322 * _1316)) + 1.0) * 0.5;
        float _4010 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1339 = sqrt(((_1315 * _1315) + (_1314 * _1314)) + (_1316 * _1316)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _4021 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1341 = _1340 * 2.0;
        float _1345 = (1.0 - _1340) / (_1340 + 1.0);
        float _4032 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1355 = ((((1.0 - _1346) * (_1341 + 2.0)) * exp2(log2(isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (_1341 + 1.0))) + _1346) * _1229;
        _1363 = _1196;
        _1364 = _1195;
        _1365 = _1194;
        _1366 = _1206;
        _1367 = _1205;
        _1368 = _1204;
        _1369 = _1216;
        _1370 = _1215;
        _1371 = _1214;
        _1372 = _1229;
        _1373 = _1228;
        _1374 = _1227;
        _1375 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)));
        _1376 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)));
        _1377 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)));
    }
    else
    {
        _1363 = _1055;
        _1364 = _1055;
        _1365 = _1055;
        _1366 = _1055;
        _1367 = _1055;
        _1368 = _1055;
        _1369 = _1055;
        _1370 = _1055;
        _1371 = _1055;
        _1372 = _1055;
        _1373 = _1055;
        _1374 = _1055;
        _1375 = 0.0;
        _1376 = 0.0;
        _1377 = 0.0;
    }
    float _1387 = (cbModelParam._m0[1u].x * (_1375 - _1067)) + _1067;
    float _1388 = (cbModelParam._m0[1u].x * (_1376 - _1068)) + _1068;
    float _1389 = (cbModelParam._m0[1u].x * (_1377 - _1069)) + _1069;
    float _1410 = fma(_1389, cbSceneParam._m0[89u].z, fma(_1388, cbSceneParam._m0[89u].y, _1387 * cbSceneParam._m0[89u].x));
    float _1413 = fma(_1389, cbSceneParam._m0[90u].z, fma(_1388, cbSceneParam._m0[90u].y, _1387 * cbSceneParam._m0[90u].x));
    float _1416 = fma(_1389, cbSceneParam._m0[91u].z, fma(_1388, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1387));
    float _1431 = _689 * 0.5;
    float _1432 = _690 * 0.5;
    float _1433 = _691 * 0.5;
    float _1434 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1365, _1368, _1371, _1374));
    float _1437 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1364, _1367, _1370, _1373));
    float _1440 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1363, _1366, _1369, _1372));
    float _1474;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1447 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1054, _1058, _1061, _1064));
        float _1451 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1056, _1059, _1062, _1065));
        float _1455 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1057, _1060, _1063, _1066));
        float _1462 = dot(vec4(cbModelParam._m0[39u]), vec4(_1431, _1432, _1433, 1.0));
        _1474 = dot(vec3(isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)), isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)), isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1462) ? 0.0 : (isnan(0.0) ? _1462 : max(0.0, _1462))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1474 = 1.0;
    }
    float _1485;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1476 = dot(vec4(cbModelParam._m0[40u]), vec4(_1431, _1432, _1433, 1.0));
        _1485 = dot(vec3(isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)), isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)), isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1476) ? 0.0 : (isnan(0.0) ? _1476 : max(0.0, _1476))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1485 = 1.0;
    }
    float _1489 = (_1485 * cbModelParam._m0[1u].x) + (_1474 * (1.0 - cbModelParam._m0[1u].x));
    float _1499 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _518);
    float _1500 = isnan(_1499) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1499 : min(cbModelParam._m0[25u].z, _1499));
    float _1582;
    float _1584;
    float _1586;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1549 = fma(_753, cbModelParam._m0[13u].z, fma(_749, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _745)) + cbModelParam._m0[13u].w;
        float _1553 = fma(_753, cbModelParam._m0[14u].z, fma(_749, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _745)) + cbModelParam._m0[14u].w;
        float _1557 = fma(_753, cbModelParam._m0[15u].z, fma(_749, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _745)) + cbModelParam._m0[15u].w;
        float _1560 = fma(_691, cbModelParam._m0[13u].z, fma(_690, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _689));
        float _1563 = fma(_691, cbModelParam._m0[14u].z, fma(_690, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _689));
        float _1566 = fma(_691, cbModelParam._m0[15u].z, fma(_690, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _689));
        float _1594;
        if (_1560 > 0.0)
        {
            _1594 = abs((1.0 - _1549) / _1560);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1560 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1549 + 1.0) / _1560);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1594 = frontier_phi_14_12_ladder;
        }
        float _1767;
        if (_1563 > 0.0)
        {
            _1767 = abs((1.0 - _1553) / _1563);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1563 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1553 + 1.0) / _1563);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1767 = frontier_phi_23_19_ladder;
        }
        float _2062;
        if (_1566 > 0.0)
        {
            _2062 = abs((1.0 - _1557) / _1566);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1566 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1557 + 1.0) / _1566);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2062 = frontier_phi_35_30_ladder;
        }
        float _2064 = isnan(_1767) ? _1594 : (isnan(_1594) ? _1767 : min(_1594, _1767));
        float _2065 = isnan(_2062) ? _2064 : (isnan(_2064) ? _2062 : min(_2064, _2062));
        float _2069 = (_2065 * _1560) + _1549;
        float _2070 = (_2065 * _1563) + _1553;
        float _2071 = (_2065 * _1566) + _1557;
        float _2072 = _2065 * 9.9999997473787516355514526367188e-05;
        float _2074 = (-1.0) - _2072;
        float _2076 = _2072 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2071 > _2076) || ((_2071 < _2074) || ((_2070 > _2076) || ((_2070 < _2074) || ((_2069 < _2074) || (_2069 > _2076))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2216 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2071, cbModelParam._m0[9u].z, fma(_2070, cbModelParam._m0[9u].y, _2069 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2071, cbModelParam._m0[10u].z, fma(_2070, cbModelParam._m0[10u].y, _2069 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2071, cbModelParam._m0[11u].z, fma(_2070, cbModelParam._m0[11u].y, _2069 * cbModelParam._m0[11u].x))), _1500);
            frontier_phi_13_35_ladder = _2216.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2216.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2216.x * cbModelParam._m0[1u].y;
        }
        _1582 = frontier_phi_13_35_ladder_2;
        _1584 = frontier_phi_13_35_ladder_1;
        _1586 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1570 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_689, _690, _691), _1500);
        _1582 = _1570.x * cbModelParam._m0[1u].y;
        _1584 = _1570.y * cbModelParam._m0[1u].y;
        _1586 = _1570.z * cbModelParam._m0[1u].y;
    }
    float _1590 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _518);
    float _1591 = isnan(_1590) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1590 : min(cbModelParam._m0[25u].w, _1590));
    float _1682;
    float _1684;
    float _1686;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1646 = fma(_753, cbModelParam._m0[21u].z, fma(_749, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _745)) + cbModelParam._m0[21u].w;
        float _1650 = fma(_753, cbModelParam._m0[22u].z, fma(_749, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _745)) + cbModelParam._m0[22u].w;
        float _1654 = fma(_753, cbModelParam._m0[23u].z, fma(_749, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _745)) + cbModelParam._m0[23u].w;
        float _1657 = fma(_691, cbModelParam._m0[21u].z, fma(_690, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _689));
        float _1660 = fma(_691, cbModelParam._m0[22u].z, fma(_690, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _689));
        float _1663 = fma(_691, cbModelParam._m0[23u].z, fma(_690, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _689));
        float _1772;
        if (_1657 > 0.0)
        {
            _1772 = abs((1.0 - _1646) / _1657);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1657 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1646 + 1.0) / _1657);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1772 = frontier_phi_25_21_ladder;
        }
        float _2089;
        if (_1660 > 0.0)
        {
            _2089 = abs((1.0 - _1650) / _1660);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1660 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1650 + 1.0) / _1660);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2089 = frontier_phi_37_32_ladder;
        }
        float _2427;
        if (_1663 > 0.0)
        {
            _2427 = abs((1.0 - _1654) / _1663);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1663 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1654 + 1.0) / _1663);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2427 = frontier_phi_47_44_ladder;
        }
        float _2429 = isnan(_2089) ? _1772 : (isnan(_1772) ? _2089 : min(_1772, _2089));
        float _2430 = isnan(_2427) ? _2429 : (isnan(_2429) ? _2427 : min(_2429, _2427));
        float _2434 = (_2430 * _1657) + _1646;
        float _2435 = (_2430 * _1660) + _1650;
        float _2436 = (_2430 * _1663) + _1654;
        float _2437 = _2430 * 9.9999997473787516355514526367188e-05;
        float _2438 = (-1.0) - _2437;
        float _2440 = _2437 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2436 > _2440) || ((_2436 < _2438) || ((_2435 > _2440) || ((_2435 < _2438) || ((_2434 < _2438) || (_2434 > _2440))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2558 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2436, cbModelParam._m0[17u].z, fma(_2435, cbModelParam._m0[17u].y, _2434 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2436, cbModelParam._m0[18u].z, fma(_2435, cbModelParam._m0[18u].y, _2434 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2436, cbModelParam._m0[19u].z, fma(_2435, cbModelParam._m0[19u].y, _2434 * cbModelParam._m0[19u].x))), _1591);
            frontier_phi_22_47_ladder = _2558.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2558.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2558.x * cbModelParam._m0[1u].z;
        }
        _1682 = frontier_phi_22_47_ladder_2;
        _1684 = frontier_phi_22_47_ladder_1;
        _1686 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1666 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_689, _690, _691), _1591);
        _1682 = _1666.x * cbModelParam._m0[1u].z;
        _1684 = _1666.y * cbModelParam._m0[1u].z;
        _1686 = _1666.z * cbModelParam._m0[1u].z;
    }
    float _1699 = (((_716 * _665) + _717) * _681) * ((cbModelParam._m0[1u].w * (_1682 - _1582)) + _1582);
    float _1701 = (((_716 * _667) + _717) * _681) * ((cbModelParam._m0[1u].w * (_1684 - _1584)) + _1584);
    float _1703 = (((_716 * _668) + _717) * _681) * ((cbModelParam._m0[1u].w * (_1686 - _1586)) + _1586);
    float _1706 = fma(_1703, cbSceneParam._m0[89u].z, fma(_1701, cbSceneParam._m0[89u].y, _1699 * cbSceneParam._m0[89u].x));
    float _1709 = fma(_1703, cbSceneParam._m0[90u].z, fma(_1701, cbSceneParam._m0[90u].y, _1699 * cbSceneParam._m0[90u].x));
    float _1712 = fma(_1703, cbSceneParam._m0[91u].z, fma(_1701, cbSceneParam._m0[91u].y, _1699 * cbSceneParam._m0[91u].x));
    float _1746 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1750 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1754 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1758 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1759 = _1746 / _1758;
    float _1760 = _1750 / _1758;
    float _1761 = _1754 / _1758;
    float _1908;
    float _1909;
    float _1910;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1788 = ((uint(_1761 > cbSceneParam._m0[59u].y) + uint(_1761 > cbSceneParam._m0[59u].x)) + uint(_1761 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1789 = _1788 + 43u;
        uint _1797 = _1788 + 44u;
        uint _1805 = _1788 + 45u;
        uint _1813 = _1788 + 46u;
        float _1824 = fma(_1758, cbSceneParam._m0[_1789].w, fma(_1754, cbSceneParam._m0[_1789].z, fma(_1750, cbSceneParam._m0[_1789].y, _1746 * cbSceneParam._m0[_1789].x)));
        float _1828 = fma(_1758, cbSceneParam._m0[_1797].w, fma(_1754, cbSceneParam._m0[_1797].z, fma(_1750, cbSceneParam._m0[_1797].y, _1746 * cbSceneParam._m0[_1797].x)));
        float _1836 = fma(_1758, cbSceneParam._m0[_1813].w, fma(_1754, cbSceneParam._m0[_1813].z, fma(_1750, cbSceneParam._m0[_1813].y, _1746 * cbSceneParam._m0[_1813].x)));
        float _1841 = cbSceneParam._m0[33u].z * _1836;
        float _1843 = cbSceneParam._m0[33u].w * _1836;
        float _1846 = fma(_1758, cbSceneParam._m0[_1805].w, fma(_1754, cbSceneParam._m0[_1805].z, fma(_1750, cbSceneParam._m0[_1805].y, _1746 * cbSceneParam._m0[_1805].x))) / _1836;
        float _1894 = (cbSceneParam._m0[33u].x - sqrt(((_1760 * _1760) + (_1759 * _1759)) + (_1761 * _1761))) * cbSceneParam._m0[33u].y;
        float _4158 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
        float _1901 = (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1841 + _1824) / _1836, (_1843 + _1828) / _1836), _1846), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1843 + _1824) / _1836, (_1828 - _1841) / _1836), _1846), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1824 - _1841) / _1836, (_1828 - _1843) / _1836), _1846), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1824 - _1843) / _1836, (_1841 + _1828) / _1836), _1846), 0.0)).x), vec4(0.25)));
        _1908 = 1.0 - (_1901 * cbSceneParam._m0[34u].x);
        _1909 = 1.0 - (_1901 * cbSceneParam._m0[34u].y);
        _1910 = 1.0 - (_1901 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1908 = 1.0;
        _1909 = 1.0;
        _1910 = 1.0;
    }
    float _1974;
    float _1976;
    float _1978;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1962 = fma(_1758, cbSceneParam._m0[63u].w, fma(_1754, cbSceneParam._m0[63u].z, fma(_1750, cbSceneParam._m0[63u].y, _1746 * cbSceneParam._m0[63u].x)));
        float _1963 = fma(_1758, cbSceneParam._m0[60u].w, fma(_1754, cbSceneParam._m0[60u].z, fma(_1750, cbSceneParam._m0[60u].y, _1746 * cbSceneParam._m0[60u].x))) / _1962;
        float _1964 = fma(_1758, cbSceneParam._m0[61u].w, fma(_1754, cbSceneParam._m0[61u].z, fma(_1750, cbSceneParam._m0[61u].y, _1746 * cbSceneParam._m0[61u].x))) / _1962;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1963 >= cbSceneParam._m0[64u].x) && (_1964 >= cbSceneParam._m0[64u].y)) && (_1963 <= cbSceneParam._m0[64u].z)) && (_1964 <= cbSceneParam._m0[64u].w))
        {
            float _2102 = fma(_1758, cbSceneParam._m0[62u].w, fma(_1754, cbSceneParam._m0[62u].z, fma(_1750, cbSceneParam._m0[62u].y, _1746 * cbSceneParam._m0[62u].x))) / _1962;
            float _2106 = isnan(cbSceneParam._m0[41u].w) ? _2102 : (isnan(_2102) ? cbSceneParam._m0[41u].w : max(_2102, cbSceneParam._m0[41u].w));
            float _2149 = (cbSceneParam._m0[33u].x - sqrt(((_1760 * _1760) + (_1759 * _1759)) + (_1761 * _1761))) * cbSceneParam._m0[33u].y;
            float _4174 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
            float _2156 = (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1963, cbSceneParam._m0[33u].w + _1964), _2106), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1963, _1964 - cbSceneParam._m0[33u].z), _2106), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1963 - cbSceneParam._m0[33u].z, _1964 - cbSceneParam._m0[33u].w), _2106), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1963 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1964), _2106), 0.0)).x), vec4(0.25)));
            float _2160 = 1.0 - (_2156 * cbSceneParam._m0[34u].x);
            float _2161 = 1.0 - (_2156 * cbSceneParam._m0[34u].y);
            float _2162 = 1.0 - (_2156 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2162) ? _1910 : (isnan(_1910) ? _2162 : min(_1910, _2162));
            frontier_phi_34_33_ladder_1 = isnan(_2161) ? _1909 : (isnan(_1909) ? _2161 : min(_1909, _2161));
            frontier_phi_34_33_ladder_2 = isnan(_2160) ? _1908 : (isnan(_1908) ? _2160 : min(_1908, _2160));
        }
        else
        {
            frontier_phi_34_33_ladder = _1910;
            frontier_phi_34_33_ladder_1 = _1909;
            frontier_phi_34_33_ladder_2 = _1908;
        }
        _1974 = frontier_phi_34_33_ladder_2;
        _1976 = frontier_phi_34_33_ladder_1;
        _1978 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1974 = _1908;
        _1976 = _1909;
        _1978 = _1910;
    }
    uvec4 _1983 = floatBitsToUint(cbInstanceData._m0[_232 + 5u]);
    uint _1985 = _1983.x * 14u;
    uint _1986 = _1985 + 13u;
    float _1993 = _681 + (-1.0);
    float _1998 = (cbLight._m0[_1986].x * _1993) + 1.0;
    float _1999 = (cbLight._m0[_1986].y * _1993) + 1.0;
    float _2000 = (cbLight._m0[_1986].z * _1993) + 1.0;
    float _2001 = (cbLight._m0[_1986].w * _1993) + 1.0;
    uint _2002 = _1985 + 5u;
    float _2008 = isnan(1.0) ? _1999 : (isnan(_1999) ? 1.0 : min(_1999, 1.0));
    uint _2012 = _1985 + 4u;
    float _2021 = isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0));
    uint _2025 = _1985 | 1u;
    float _2036 = dot(vec3(cbLight._m0[_1985].xyz), vec3(_515, _516, _517));
    float _2039 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_515, _516, _517));
    float _4210 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _4221 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2044 = (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * 0.3183098733425140380859375;
    float _2046 = (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * 0.3183098733425140380859375;
    float _2053 = ((cbLight._m0[_2002].x * _2008) * _2046) + (((cbLight._m0[_2012].x * _1974) * _2021) * _2044);
    float _2054 = ((_2008 * cbLight._m0[_2002].y) * _2046) + (((cbLight._m0[_2012].y * _1976) * _2021) * _2044);
    float _2055 = ((_2008 * cbLight._m0[_2002].z) * _2046) + (((cbLight._m0[_2012].z * _1978) * _2021) * _2044);
    uvec4 _2059 = floatBitsToUint(cbLight._m0[_1985 + 12u]);
    bool _2061 = _2059.x == 0u;
    float _2163;
    float _2165;
    float _2167;
    if (_2061)
    {
        _2163 = _2053;
        _2165 = _2054;
        _2167 = _2055;
    }
    else
    {
        uint _2171 = _1985 + 6u;
        float _2187 = (dot(vec3(cbLight._m0[_1985 + 2u].xyz), vec3(_515, _516, _517)) * 0.5) + 0.5;
        float _2188 = _2187 * _2187;
        float _4232 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2189 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _2190 = isnan(1.0) ? _2000 : (isnan(_2000) ? 1.0 : min(_2000, 1.0));
        _2163 = (((cbLight._m0[_2171].x * 0.3183098733425140380859375) * _2189) * _2190) + _2053;
        _2165 = (((cbLight._m0[_2171].y * 0.3183098733425140380859375) * _2189) * _2190) + _2054;
        _2167 = (((cbLight._m0[_2171].z * 0.3183098733425140380859375) * _2189) * _2190) + _2055;
    }
    bool _2170 = _2059.y == 0u;
    float _2225;
    float _2227;
    float _2229;
    if (_2170)
    {
        _2225 = _2163;
        _2227 = _2165;
        _2229 = _2167;
    }
    else
    {
        uint _2398 = _1985 + 7u;
        float _2414 = (dot(vec3(cbLight._m0[_1985 + 3u].xyz), vec3(_515, _516, _517)) * 0.5) + 0.5;
        float _2415 = _2414 * _2414;
        float _4248 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2416 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _2417 = isnan(1.0) ? _2001 : (isnan(_2001) ? 1.0 : min(_2001, 1.0));
        _2225 = (((cbLight._m0[_2398].x * 0.3183098733425140380859375) * _2416) * _2417) + _2163;
        _2227 = (((cbLight._m0[_2398].y * 0.3183098733425140380859375) * _2416) * _2417) + _2165;
        _2229 = (((cbLight._m0[_2398].z * 0.3183098733425140380859375) * _2416) * _2417) + _2167;
    }
    uint _2232 = _1985 + 8u;
    float _2245 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1985].w)) * _518) * 0.949999988079071044921875);
    float _2246 = _2245 * _2245;
    float _2247 = cbLight._m0[_1985].x + _595;
    float _2248 = cbLight._m0[_1985].y + _596;
    float _2249 = cbLight._m0[_1985].z + _597;
    float _2253 = inversesqrt(dot(vec3(_2247, _2248, _2249), vec3(_2247, _2248, _2249)));
    float _2254 = _2253 * _2247;
    float _2255 = _2253 * _2248;
    float _2256 = _2253 * _2249;
    float _2257 = dot(vec3(_515, _516, _517), vec3(cbLight._m0[_1985].xyz));
    float _4264 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _2260 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
    float _4275 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _2261 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
    float _2262 = dot(vec3(_515, _516, _517), vec3(_2254, _2255, _2256));
    float _4286 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2265 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
    float _2266 = dot(vec3(cbLight._m0[_1985].xyz), vec3(_2254, _2255, _2256));
    float _4297 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2270 = _2246 * _2246;
    float _2274 = ((_2265 * _2265) * (_2270 + (-1.0))) + 1.0;
    float _2282 = exp2(log2(1.0 - (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0)))) * 5.0);
    float _2283 = 0.959999978542327880859375 - _662;
    float _2285 = 0.959999978542327880859375 - _663;
    float _2286 = 0.959999978542327880859375 - _664;
    float _2293 = 1.0 - _2246;
    float _2304 = (0.5 / (((_2261 * ((_2260 * _2293) + _2246)) + 9.9999999392252902907785028219223e-09) + (((_2261 * _2293) + _2246) * _2260))) * _2260;
    float _4308 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2306 = (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_2270 / ((_2274 * _2274) * 3.141590118408203125));
    uint _2320 = _1985 + 9u;
    float _2331 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2025].w)) * _518) * 0.949999988079071044921875);
    float _2332 = _2331 * _2331;
    float _2333 = cbLight._m0[_2025].x + _595;
    float _2334 = cbLight._m0[_2025].y + _596;
    float _2335 = cbLight._m0[_2025].z + _597;
    float _2339 = inversesqrt(dot(vec3(_2333, _2334, _2335), vec3(_2333, _2334, _2335)));
    float _2340 = _2339 * _2333;
    float _2341 = _2339 * _2334;
    float _2342 = _2339 * _2335;
    float _2343 = dot(vec3(_515, _516, _517), vec3(cbLight._m0[_2025].xyz));
    float _4319 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2346 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
    float _2347 = dot(vec3(_515, _516, _517), vec3(_2340, _2341, _2342));
    float _4330 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2350 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
    float _2351 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_2340, _2341, _2342));
    float _4341 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2355 = _2332 * _2332;
    float _2359 = ((_2350 * _2350) * (_2355 + (-1.0))) + 1.0;
    float _2366 = exp2(log2(1.0 - (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0)))) * 5.0);
    float _2373 = 1.0 - _2332;
    float _2383 = (0.5 / (((_2261 * ((_2346 * _2373) + _2332)) + 9.9999999392252902907785028219223e-09) + (((_2261 * _2373) + _2332) * _2346))) * _2346;
    float _4352 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2385 = (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_2355 / ((_2359 * _2359) * 3.141590118408203125));
    float _2395 = (((((_2366 * _2283) + _665) * cbLight._m0[_2320].x) * _2385) * _2008) + ((((cbLight._m0[_2232].x * _1974) * ((_2282 * _2283) + _665)) * _2306) * _2021);
    float _2396 = (((((_2366 * _2285) + _667) * cbLight._m0[_2320].y) * _2385) * _2008) + ((((cbLight._m0[_2232].y * _1976) * ((_2282 * _2285) + _667)) * _2306) * _2021);
    float _2397 = (((((_2366 * _2286) + _668) * cbLight._m0[_2320].z) * _2385) * _2008) + ((((cbLight._m0[_2232].z * _1978) * ((_2282 * _2286) + _668)) * _2306) * _2021);
    float _2453;
    float _2455;
    float _2457;
    if (_2061)
    {
        _2453 = _2395;
        _2455 = _2396;
        _2457 = _2397;
    }
    else
    {
        uint _2459 = _1985 + 2u;
        uint _2463 = _1985 + 10u;
        float _2477 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2459].w)) * _518) * 0.949999988079071044921875);
        float _2478 = _2477 * _2477;
        float _2479 = cbLight._m0[_2459].x + _595;
        float _2480 = cbLight._m0[_2459].y + _596;
        float _2481 = cbLight._m0[_2459].z + _597;
        float _2485 = inversesqrt(dot(vec3(_2479, _2480, _2481), vec3(_2479, _2480, _2481)));
        float _2486 = _2485 * _2479;
        float _2487 = _2485 * _2480;
        float _2488 = _2485 * _2481;
        float _2489 = dot(vec3(_515, _516, _517), vec3(cbLight._m0[_2459].xyz));
        float _4363 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2492 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _2493 = dot(vec3(_515, _516, _517), vec3(_2486, _2487, _2488));
        float _4374 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2496 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _2497 = dot(vec3(cbLight._m0[_2459].xyz), vec3(_2486, _2487, _2488));
        float _4385 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2501 = _2478 * _2478;
        float _2505 = ((_2496 * _2496) * (_2501 + (-1.0))) + 1.0;
        float _2512 = exp2(log2(1.0 - (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0)))) * 5.0);
        float _2519 = 1.0 - _2478;
        float _2529 = (0.5 / (((_2261 * ((_2492 * _2519) + _2478)) + 9.9999999392252902907785028219223e-09) + (((_2261 * _2519) + _2478) * _2492))) * _2492;
        float _4396 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2531 = (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_2501 / ((_2505 * _2505) * 3.141590118408203125));
        float _2532 = isnan(1.0) ? _2000 : (isnan(_2000) ? 1.0 : min(_2000, 1.0));
        _2453 = (((((_2512 * _2283) + _665) * cbLight._m0[_2463].x) * _2531) * _2532) + _2395;
        _2455 = (((((_2512 * _2285) + _667) * cbLight._m0[_2463].y) * _2531) * _2532) + _2396;
        _2457 = (((((_2512 * _2286) + _668) * cbLight._m0[_2463].z) * _2531) * _2532) + _2397;
    }
    float _2563;
    float _2565;
    float _2567;
    if (_2170)
    {
        _2563 = _2453;
        _2565 = _2455;
        _2567 = _2457;
    }
    else
    {
        uint _2574 = _1985 + 3u;
        uint _2578 = _1985 + 11u;
        float _2592 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2574].w)) * _518) * 0.949999988079071044921875);
        float _2593 = _2592 * _2592;
        float _2594 = cbLight._m0[_2574].x + _595;
        float _2595 = cbLight._m0[_2574].y + _596;
        float _2596 = cbLight._m0[_2574].z + _597;
        float _2600 = inversesqrt(dot(vec3(_2594, _2595, _2596), vec3(_2594, _2595, _2596)));
        float _2601 = _2600 * _2594;
        float _2602 = _2600 * _2595;
        float _2603 = _2600 * _2596;
        float _2604 = dot(vec3(_515, _516, _517), vec3(cbLight._m0[_2574].xyz));
        float _4412 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
        float _2607 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _2608 = dot(vec3(_515, _516, _517), vec3(_2601, _2602, _2603));
        float _4423 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2611 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _2612 = dot(vec3(cbLight._m0[_2574].xyz), vec3(_2601, _2602, _2603));
        float _4434 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2616 = _2593 * _2593;
        float _2620 = ((_2611 * _2611) * (_2616 + (-1.0))) + 1.0;
        float _2627 = exp2(log2(1.0 - (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) * 5.0);
        float _2634 = 1.0 - _2593;
        float _2644 = (0.5 / (((_2261 * ((_2607 * _2634) + _2593)) + 9.9999999392252902907785028219223e-09) + (((_2261 * _2634) + _2593) * _2607))) * _2607;
        float _4445 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        float _2646 = (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_2616 / ((_2620 * _2620) * 3.141590118408203125));
        float _2647 = isnan(1.0) ? _2001 : (isnan(_2001) ? 1.0 : min(_2001, 1.0));
        _2563 = (((((_2627 * _2283) + _665) * cbLight._m0[_2578].x) * _2646) * _2647) + _2453;
        _2565 = (((((_2627 * _2285) + _667) * cbLight._m0[_2578].y) * _2646) * _2647) + _2455;
        _2567 = (((((_2627 * _2286) + _668) * cbLight._m0[_2578].z) * _2646) * _2647) + _2457;
    }
    float _2713;
    float _2715;
    float _2717;
    float _2719;
    float _2721;
    float _2723;
    if (_1983.y == 0u)
    {
        uvec4 _2668 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2669 = _2668.x;
        uint _2680 = uint((float(_2668.y) * floor(float(uint(cbSceneParam._m0[85u].y * _604) / _2669))) + floor(float(uint(cbSceneParam._m0[85u].x * _603) / _2669)));
        float _2690 = (log2(_1761 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2691 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
        uint _2694 = uint(isnan(14.0) ? _2691 : (isnan(_2691) ? 14.0 : min(_2691, 14.0)));
        uvec4 _2699 = texelFetch(g_lightClusterGridBuffer, int(((_2694 << 2u) + (_2680 << 6u)) >> 2u));
        uint _2700 = _2699.x;
        uint _2701 = _2668.z;
        float _2780;
        float _2782;
        float _2784;
        float _2786;
        float _2788;
        float _2790;
        if (((((1u << ((_2701 >> 4u) & 15u)) + 4294967295u) & _2700) == 0u) || ((_2701 & 240u) == 0u))
        {
            _2780 = 0.0;
            _2782 = 0.0;
            _2784 = 0.0;
            _2786 = 0.0;
            _2788 = 0.0;
            _2790 = 0.0;
        }
        else
        {
            float _2781;
            float _2783;
            float _2785;
            float _2787;
            float _2789;
            float _2791;
            float _2925 = 0.0;
            float _2926 = 0.0;
            float _2927 = 0.0;
            float _2928 = 0.0;
            float _2929 = 0.0;
            float _2930 = 0.0;
            uint _2931 = 0u;
            uint _2940;
            bool _2941;
            for (;;)
            {
                _2940 = texelFetch(g_lightClassification, int((((_2694 << 5u) + (_2680 << 9u)) + (_2931 << 2u)) >> 2u)).x;
                _2941 = _2940 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2941)
                {
                    frontier_phi_66_pred = _2930;
                    frontier_phi_66_pred_1 = _2929;
                    frontier_phi_66_pred_2 = _2928;
                    frontier_phi_66_pred_3 = _2927;
                    frontier_phi_66_pred_4 = _2926;
                    frontier_phi_66_pred_5 = _2925;
                }
                else
                {
                    float _3049;
                    float _3050;
                    float _3051;
                    float _3052;
                    float _3053;
                    float _3054;
                    uint _3055;
                    _3049 = _2925;
                    _3050 = _2926;
                    _3051 = _2927;
                    _3052 = _2928;
                    _3053 = _2929;
                    _3054 = _2930;
                    _3055 = _2940;
                    float _2981;
                    float _2982;
                    float _2983;
                    float _2984;
                    float _2985;
                    float _2986;
                    for (;;)
                    {
                        uint _3059 = uint(findLSB(_3055)) + (_2931 << 5u);
                        uint _3056 = (_3055 + 4294967295u) & _3055;
                        uint _3061 = _3059 * 48u;
                        vec4 _3075 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3061)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 3u)).x));
                        uint _3081 = (_3059 * 48u) + 4u;
                        vec4 _3094 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3081)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 3u)).x));
                        uint _3100 = (_3059 * 48u) + 8u;
                        vec3 _3111 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3100)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 2u)).x));
                        float _3115 = _3075.x - _1759;
                        float _3116 = _3075.y - _1760;
                        float _3117 = _3075.z - _1761;
                        float _3118 = dot(vec3(_3115, _3116, _3117), vec3(_3115, _3116, _3117));
                        float _3121 = inversesqrt(_3118);
                        float _3122 = _3121 * _3115;
                        float _3123 = _3121 * _3116;
                        float _3124 = _3121 * _3117;
                        float _3125 = dot(vec3(_622, _625, _628), vec3(_3122, _3123, _3124));
                        float _3130 = 1.0 - (_3118 * _3075.w);
                        float _4471 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                        float _3131 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                        float _3132 = sqrt(_3118) * _3094.w;
                        float _3135 = 1.39999997615814208984375 / (_3132 + 1.39999997615814208984375);
                        float _3136 = _3135 * _3135;
                        float _3139 = ((1.0 - _3136) * _3125) + _3136;
                        float _3142 = _3132 * _3132;
                        float _3146 = ((isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0))) * _3131) / ((_3142 * 0.699999988079071044921875) + 1.0);
                        float _3150 = (-0.0) - _1759;
                        float _3151 = (-0.0) - _1760;
                        float _3152 = (-0.0) - _1761;
                        float _3156 = inversesqrt(dot(vec3(_3150, _3151, _3152), vec3(_3150, _3151, _3152)));
                        float _3157 = _3156 * _3150;
                        float _3158 = _3156 * _3151;
                        float _3159 = _3156 * _3152;
                        float _3166 = exp2(log2(1.0 / ((_3142 * 3.5) + 5.0)) * 0.25);
                        float _3167 = 1.0 - _697;
                        float _3174 = sqrt(1.0 - ((1.0 - (_3167 * _3167)) * (1.0 - (_3166 * _3166))));
                        float _3175 = _3174 * _3174;
                        float _3176 = _3175 * _3175;
                        float _3177 = _3157 + _3122;
                        float _3178 = _3158 + _3123;
                        float _3179 = _3159 + _3124;
                        float _3183 = inversesqrt(dot(vec3(_3177, _3178, _3179), vec3(_3177, _3178, _3179)));
                        float _3187 = dot(vec3(_622, _625, _628), vec3(_3157, _3158, _3159));
                        float _4487 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                        float _3190 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                        float _3191 = dot(vec3(_622, _625, _628), vec3(_3183 * _3177, _3183 * _3178, _3183 * _3179));
                        float _4498 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                        float _3194 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                        float _3198 = ((_3194 * _3194) * (_3176 + (-1.0))) + 1.0;
                        float _3199 = _3135 * _3175;
                        float _3200 = _3199 * _3199;
                        float _3203 = ((1.0 - _3200) * _3125) + _3200;
                        float _4509 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                        float _3204 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                        float _3205 = 1.0 - _3175;
                        float _3215 = (0.5 / (((_3204 * ((_3190 * _3205) + _3175)) + 9.9999999392252902907785028219223e-09) + (((_3204 * _3205) + _3175) * _3190))) * _3204;
                        float _4520 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                        float _3226 = (((_3176 * 3.1415927410125732421875) * (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) / ((_3198 * _3198) * ((_3142 * 2.1991131305694580078125) + 3.141590118408203125))) * _3131;
                        _2984 = (_3146 * _3094.x) + _3052;
                        _2985 = (_3146 * _3094.y) + _3053;
                        _2986 = (_3146 * _3094.z) + _3054;
                        _2981 = (_3226 * _3111.x) + _3049;
                        _2982 = (_3226 * _3111.y) + _3050;
                        _2983 = (_3226 * _3111.z) + _3051;
                        if (_3056 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3049 = _2981;
                            _3050 = _2982;
                            _3051 = _2983;
                            _3052 = _2984;
                            _3053 = _2985;
                            _3054 = _2986;
                            _3055 = _3056;
                        }
                    }
                    frontier_phi_66_pred = _2986;
                    frontier_phi_66_pred_1 = _2985;
                    frontier_phi_66_pred_2 = _2984;
                    frontier_phi_66_pred_3 = _2983;
                    frontier_phi_66_pred_4 = _2982;
                    frontier_phi_66_pred_5 = _2981;
                }
                _2791 = frontier_phi_66_pred;
                _2789 = frontier_phi_66_pred_1;
                _2787 = frontier_phi_66_pred_2;
                _2785 = frontier_phi_66_pred_3;
                _2783 = frontier_phi_66_pred_4;
                _2781 = frontier_phi_66_pred_5;
                uint _2932 = _2931 + 1u;
                if (_2932 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2925 = _2781;
                    _2926 = _2783;
                    _2927 = _2785;
                    _2928 = _2787;
                    _2929 = _2789;
                    _2930 = _2791;
                    _2931 = _2932;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2780 = _2781;
            _2782 = _2783;
            _2784 = _2785;
            _2786 = _2787;
            _2788 = _2789;
            _2790 = _2791;
        }
        uvec4 _2794 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2795 = _2794.z;
        uint _2797 = (_2795 >> 8u) & 15u;
        float _2893;
        float _2895;
        float _2897;
        float _2899;
        float _2901;
        float _2903;
        if (((4294967295u << _2797) & _2700) == 0u)
        {
            _2893 = _2780;
            _2895 = _2782;
            _2897 = _2784;
            _2899 = _2786;
            _2901 = _2788;
            _2903 = _2790;
        }
        else
        {
            float _2918 = inversesqrt(dot(vec3(_1759, _1760, _1761), vec3(_1759, _1760, _1761)));
            float _2919 = _2918 * _1759;
            float _2920 = _2918 * _1760;
            float _2921 = _2918 * _1761;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2797 < ((_2795 >> 12u) & 15u))
            {
                float _2894;
                float _2896;
                float _2898;
                float _2900;
                float _2902;
                float _2904;
                float _3032 = _2780;
                float _3033 = _2782;
                float _3034 = _2784;
                float _3035 = _2786;
                float _3036 = _2788;
                float _3037 = _2790;
                uint _3038 = _2797;
                uint _3047;
                bool _3048;
                for (;;)
                {
                    _3047 = texelFetch(g_lightClassification, int((((_2694 << 5u) + (_2680 << 9u)) + (_3038 << 2u)) >> 2u)).x;
                    _3048 = _3047 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3048)
                    {
                        frontier_phi_72_pred = _3037;
                        frontier_phi_72_pred_1 = _3036;
                        frontier_phi_72_pred_2 = _3035;
                        frontier_phi_72_pred_3 = _3034;
                        frontier_phi_72_pred_4 = _3033;
                        frontier_phi_72_pred_5 = _3032;
                    }
                    else
                    {
                        float _3231;
                        float _3232;
                        float _3233;
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3525;
                        float _3526;
                        float _3527;
                        float _3528;
                        float _3529;
                        float _3530;
                        float _3244 = _3032;
                        float _3245 = _3033;
                        float _3246 = _3034;
                        float _3247 = _3035;
                        float _3248 = _3036;
                        float _3249 = _3037;
                        uint _3250 = _3047;
                        uint _3251;
                        vec4 _3276;
                        float _3277;
                        vec4 _3292;
                        vec3 _3304;
                        vec4 _3319;
                        vec4 _3335;
                        float _3381;
                        bool _3382;
                        for (;;)
                        {
                            uint _3261 = ((_3038 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3250));
                            _3251 = (_3250 + 4294967295u) & _3250;
                            uint _3263 = _3261 * 40u;
                            _3276 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3263)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 3u)).x));
                            _3277 = _3276.w;
                            uint _3279 = (_3261 * 40u) + 4u;
                            _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            uint _3294 = (_3261 * 40u) + 8u;
                            _3304 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3294)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 2u)).x));
                            uint _3306 = (_3261 * 40u) + 16u;
                            _3319 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 3u)).x));
                            uint _3322 = (_3261 * 40u) + 20u;
                            _3335 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3322)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 3u)).x));
                            uint _3337 = (_3261 * 40u) + 24u;
                            vec4 _3350 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3337)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 3u)).x));
                            uint _3356 = (_3261 * 40u) + 28u;
                            vec4 _3369 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 3u)).x));
                            _3381 = fma(_1761, _3369.z, fma(_1760, _3369.y, _3369.x * _1759)) + _3369.w;
                            _3382 = !((fma(_1761, _3350.z, fma(_1760, _3350.y, _3350.x * _1759)) + _3350.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3382)
                            {
                                float _3409 = _3276.x - _1759;
                                float _3410 = _3276.y - _1760;
                                float _3411 = _3276.z - _1761;
                                float _3412 = dot(vec3(_3409, _3410, _3411), vec3(_3409, _3410, _3411));
                                float _3415 = inversesqrt(_3412);
                                float _3416 = _3415 * _3409;
                                float _3417 = _3415 * _3410;
                                float _3418 = _3415 * _3411;
                                float _3422 = 1.0 - (_3412 / (_3277 * _3277));
                                float _4531 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                                float _3423 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                                float _3427 = sqrt(_3412) * _3292.w;
                                float _3429 = 1.39999997615814208984375 / (_3427 + 1.39999997615814208984375);
                                float _3430 = _3429 * _3429;
                                float _3433 = ((1.0 - _3430) * dot(vec3(_3416, _3417, _3418), vec3(_622, _625, _628))) + _3430;
                                float _3436 = _3427 * _3427;
                                float _3440 = (fma(_1761, _3319.z, fma(_1760, _3319.y, _3319.x * _1759)) + _3319.w) / _3381;
                                float _3441 = (fma(_1761, _3335.z, fma(_1760, _3335.y, _3335.x * _1759)) + _3335.w) / _3381;
                                float _3445 = 1.0 - dot(vec2(_3440, _3441), vec2(_3440, _3441));
                                float _4547 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                                float _3446 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
                                float _3447 = _3446 * (((isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0))) * _3423) / ((_3436 * 0.699999988079071044921875) + 1.0));
                                float _3459 = exp2(log2(1.0 / ((_3436 * 3.5) + 5.0)) * 0.25);
                                float _3460 = 1.0 - _697;
                                float _3467 = sqrt(1.0 - ((1.0 - (_3460 * _3460)) * (1.0 - (_3459 * _3459))));
                                float _3468 = _3467 * _3467;
                                float _3469 = _3468 * _3468;
                                float _3470 = _3416 - _2919;
                                float _3471 = _3417 - _2920;
                                float _3472 = _3418 - _2921;
                                float _3476 = inversesqrt(dot(vec3(_3470, _3471, _3472), vec3(_3470, _3471, _3472)));
                                float _3480 = dot(vec3(_622, _625, _628), vec3((-0.0) - _2919, (-0.0) - _2920, (-0.0) - _2921));
                                float _4558 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                                float _3483 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                                float _3484 = dot(vec3(_622, _625, _628), vec3(_3476 * _3470, _3476 * _3471, _3476 * _3472));
                                float _4569 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                                float _3487 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                                float _3491 = ((_3487 * _3487) * (_3469 + (-1.0))) + 1.0;
                                float _3492 = _3429 * _3468;
                                float _3493 = _3492 * _3492;
                                float _3499 = ((1.0 - _3493) * dot(vec3(_622, _625, _628), vec3(_3416, _3417, _3418))) + _3493;
                                float _4580 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                                float _3500 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                                float _3501 = 1.0 - _3468;
                                float _3511 = (0.5 / (((_3500 * ((_3483 * _3501) + _3468)) + 9.9999999392252902907785028219223e-09) + (((_3500 * _3501) + _3468) * _3483))) * _3500;
                                float _4591 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                                float _3521 = (_3446 * _3423) * (((_3469 * 3.1415927410125732421875) * (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0)))) / ((_3491 * _3491) * ((_3436 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3447 * _3292.y;
                                frontier_phi_78_pred_1 = _3447 * _3292.x;
                                frontier_phi_78_pred_2 = _3521 * _3304.z;
                                frontier_phi_78_pred_3 = _3521 * _3304.y;
                                frontier_phi_78_pred_4 = _3521 * _3304.x;
                                frontier_phi_78_pred_5 = _3447 * _3292.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3529 = frontier_phi_78_pred;
                            _3528 = frontier_phi_78_pred_1;
                            _3527 = frontier_phi_78_pred_2;
                            _3526 = frontier_phi_78_pred_3;
                            _3525 = frontier_phi_78_pred_4;
                            _3530 = frontier_phi_78_pred_5;
                            _3234 = _3528 + _3247;
                            _3235 = _3529 + _3248;
                            _3236 = _3530 + _3249;
                            _3231 = _3525 + _3244;
                            _3232 = _3526 + _3245;
                            _3233 = _3527 + _3246;
                            if (_3251 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3244 = _3231;
                                _3245 = _3232;
                                _3246 = _3233;
                                _3247 = _3234;
                                _3248 = _3235;
                                _3249 = _3236;
                                _3250 = _3251;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3236;
                        frontier_phi_72_pred_1 = _3235;
                        frontier_phi_72_pred_2 = _3234;
                        frontier_phi_72_pred_3 = _3233;
                        frontier_phi_72_pred_4 = _3232;
                        frontier_phi_72_pred_5 = _3231;
                    }
                    _2904 = frontier_phi_72_pred;
                    _2902 = frontier_phi_72_pred_1;
                    _2900 = frontier_phi_72_pred_2;
                    _2898 = frontier_phi_72_pred_3;
                    _2896 = frontier_phi_72_pred_4;
                    _2894 = frontier_phi_72_pred_5;
                    uint _3039 = _3038 + 1u;
                    if (_3039 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3032 = _2894;
                        _3033 = _2896;
                        _3034 = _2898;
                        _3035 = _2900;
                        _3036 = _2902;
                        _3037 = _2904;
                        _3038 = _3039;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2904;
                frontier_phi_60_61_ladder_1 = _2902;
                frontier_phi_60_61_ladder_2 = _2898;
                frontier_phi_60_61_ladder_3 = _2896;
                frontier_phi_60_61_ladder_4 = _2894;
                frontier_phi_60_61_ladder_5 = _2900;
            }
            else
            {
                frontier_phi_60_61_ladder = _2790;
                frontier_phi_60_61_ladder_1 = _2788;
                frontier_phi_60_61_ladder_2 = _2784;
                frontier_phi_60_61_ladder_3 = _2782;
                frontier_phi_60_61_ladder_4 = _2780;
                frontier_phi_60_61_ladder_5 = _2786;
            }
            _2893 = frontier_phi_60_61_ladder_4;
            _2895 = frontier_phi_60_61_ladder_3;
            _2897 = frontier_phi_60_61_ladder_2;
            _2899 = frontier_phi_60_61_ladder_5;
            _2901 = frontier_phi_60_61_ladder_1;
            _2903 = frontier_phi_60_61_ladder;
        }
        float _2908 = isnan(1.0) ? _681 : (isnan(_681) ? 1.0 : min(_681, 1.0));
        _2713 = (_2908 * _2899) + _2225;
        _2715 = (_2908 * _2901) + _2227;
        _2717 = (_2908 * _2903) + _2229;
        _2719 = ((_2893 * _665) * _2908) + _2563;
        _2721 = ((_2895 * _667) * _2908) + _2565;
        _2723 = ((_2897 * _668) * _2908) + _2567;
    }
    else
    {
        _2713 = _2225;
        _2715 = _2227;
        _2717 = _2229;
        _2719 = _2563;
        _2721 = _2565;
        _2723 = _2567;
    }
    float _4607 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _4618 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _4629 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    uint _2743 = _232 + 6u;
    float _2751 = _603 / cbSceneParam._m0[86u].x;
    float _2752 = _604 / cbSceneParam._m0[86u].y;
    vec4 _2766 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2751, _2752, (log2((isnan(cbSceneParam._m0[77u].w) ? _537 : (isnan(_537) ? cbSceneParam._m0[77u].w : min(_537, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2768 = _2766.x;
    float _2769 = _2766.y;
    float _2770 = _2766.z;
    float _2771 = _2766.w;
    float _2843;
    float _2845;
    float _2847;
    float _2849;
    if (_537 > cbSceneParam._m0[78u].w)
    {
        float _2805 = isnan(_537) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _537 : min(cbSceneParam._m0[80u].w, _537));
        float _2806 = _2805 / _537;
        float _2817 = _2806 * _588;
        float _2818 = _589 * _2806;
        float _2819 = (-0.0) - _2818;
        float _2821 = _2806 * _590;
        float _2823 = (cbSceneParam._m0[77u].w * _2819) / _2805;
        float _2824 = _2823 + cbSceneParam._m0[79u].w;
        float _2825 = cbSceneParam._m0[79u].w - _2818;
        float _2831 = sqrt(((_2817 * _2817) + (_2818 * _2818)) + (_2821 * _2821));
        float _2834 = (1.0 - (cbSceneParam._m0[77u].w / _2805)) * _2831;
        float _2839 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2841 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2994;
        if (abs((_2819 - _2823) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2994 = ((((_2824 > 0.0) ? exp2(_2839 * _2824) : (2.0 - exp2(_2841 * _2824))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2834;
        }
        else
        {
            float _2954 = 1.0 / cbSceneParam._m0[80u].x;
            float _2955 = isnan(_2825) ? _2824 : (isnan(_2824) ? _2825 : max(_2824, _2825));
            float _2956 = isnan(_2825) ? _2824 : (isnan(_2824) ? _2825 : min(_2824, _2825));
            float _2965 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : min(_2955, 0.0));
            float _2966 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : min(_2956, 0.0));
            _2994 = ((abs(_2831 / _2819) * cbSceneParam._m0[80u].y) * ((((_2965 - _2966) * 2.0) - ((exp2(_2839 * (isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0)))) - exp2(_2839 * (isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0))))) * _2954)) - ((exp2(_2841 * _2965) - exp2(_2841 * _2966)) * _2954))) + (_2834 * cbSceneParam._m0[80u].z);
        }
        vec4 _2996 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2751, _2752, 1.0), 0.0);
        float _3005 = exp2((_2994 * (-1.44269502162933349609375)) * (1.0 - _2996.w));
        float _3006 = log2(_3005);
        float _3022 = log2(_2771);
        _2843 = (exp2(_3022 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3006 * cbSceneParam._m0[78u].x)) * _2996.x) / cbSceneParam._m0[78u].x)) + _2768;
        _2845 = (exp2(_3022 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3006 * cbSceneParam._m0[78u].y)) * _2996.y) / cbSceneParam._m0[78u].y)) + _2769;
        _2847 = (exp2(_3022 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3006 * cbSceneParam._m0[78u].z)) * _2996.z) / cbSceneParam._m0[78u].z)) + _2770;
        _2849 = _3005 * _2771;
    }
    else
    {
        _2843 = _2768;
        _2845 = _2769;
        _2847 = _2770;
        _2849 = _2771;
    }
    float _2861 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2862 = _2861 == 3.0;
    float _2863 = log2(_2849);
    float _2870 = exp2(_2863 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * (_2713 + ((isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0))) * _681))) + ((_2719 + ((isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))) * _1489)) * cbPerFrame._m0[3u].x));
    float _2871 = exp2(_2863 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (_2715 + ((isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0))) * _681))) + ((_2721 + ((isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))) * _1489)) * cbPerFrame._m0[3u].x));
    float _2872 = exp2(_2863 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_2717 + ((isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0))) * _681))) + ((_2723 + ((isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))) * _1489)) * cbPerFrame._m0[3u].x));
    float _2881 = (_2861 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2881 * (_2862 ? _2870 : (_2870 + (cbSceneParam._m0[72u].w * _2843)));
    SV_Target.y = _2881 * (_2862 ? _2871 : (_2871 + (cbSceneParam._m0[72u].w * _2845)));
    SV_Target.z = _2881 * (_2862 ? _2872 : (_2872 + (cbSceneParam._m0[72u].w * _2847)));
    SV_Target.w = cbInstanceData._m0[_2743].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2743].w;
}


