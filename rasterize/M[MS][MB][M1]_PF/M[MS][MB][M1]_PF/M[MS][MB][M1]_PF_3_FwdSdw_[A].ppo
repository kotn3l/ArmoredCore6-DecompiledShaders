#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1031;
float _3699;
float _3700;
float _3701;
float _3702;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _243 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _244 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3711 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3722 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3733 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    uint _254 = uint(roundEven(NORMAL.w)) * 13u;
    uint _259 = _254 + 1u;
    uint _263 = _254 + 2u;
    float _272 = sqrt(((cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x)) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x));
    float _273 = _272 * TEXCOORD.z;
    float _274 = _272 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _273) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _274) + cbTextureTilingScale._m0[13u].w));
    vec4 _310 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _315 = _310.x * cbMtdParam._m0[9u].x;
    float _316 = _310.y * cbMtdParam._m0[9u].y;
    float _317 = _310.z * cbMtdParam._m0[9u].z;
    float _321 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _287.x) * _315;
    float _324 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _287.y) * _316;
    float _327 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _287.z) * _317;
    float _334 = ((_315 - _321) * (isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0)))) + _321;
    float _335 = ((_316 - _324) * (isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0)))) + _324;
    float _336 = ((_317 - _327) * (isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0)))) + _327;
    vec4 _349 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _273) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _274) + cbTextureTilingScale._m0[20u].w));
    vec4 _375 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _379 = _375.z;
    float _383 = (_375.x * 2.0) + (-1.0);
    float _384 = (_375.y * 2.0) + (-1.0);
    float _385 = dot(vec2(_383, _384), vec2(_383, _384));
    float _3744 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _390 = sqrt(1.0 - (isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))));
    float _395 = _383 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_349.x * 2.0) + (-1.0)));
    float _396 = _384 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_349.y * 2.0) + (-1.0)));
    vec4 _409 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _411 = _409.x;
    float _416 = (((_349.z - _379) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _379;
    float _418 = cbMtdParam._m0[22u].x + _375.w;
    float _422 = gl_FragCoord.x * 0.125;
    float _424 = gl_FragCoord.y * 0.125;
    float _435 = fma(_390, _220 * NORMAL.x, fma(_396, _227 * TANGENT.x, (_213 * _205) * _395));
    float _438 = fma(_390, _220 * NORMAL.y, fma(_396, _227 * TANGENT.y, (_213 * _206) * _395));
    float _441 = fma(_390, _220 * NORMAL.z, fma(_396, _227 * TANGENT.z, (_213 * _207) * _395));
    float _445 = inversesqrt(dot(vec3(_435, _438, _441), vec3(_435, _438, _441)));
    float _446 = _445 * _435;
    float _447 = _445 * _438;
    float _448 = _445 * _441;
    float _3755 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _449 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
    float _3766 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _3777 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _3788 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _3799 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _3810 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _454 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_422, _424)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _472 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _514 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _524 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _514);
    float _525 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _514);
    float _526 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _514);
    float _530 = inversesqrt(dot(vec3(_524, _525, _526), vec3(_524, _525, _526)));
    float _531 = _524 * _530;
    float _532 = _525 * _530;
    float _533 = _526 * _530;
    vec4 _535 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_422, _424));
    float _537 = _535.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _712 = sqrt(((_524 * _524) + (_525 * _525)) + (_526 * _526));
        float _718 = (cbMatDynParam._m0[5u].x * _712) + cbMatDynParam._m0[5u].y;
        float _3821 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        float _719 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _723 = (cbMatDynParam._m0[5u].z * _712) + cbMatDynParam._m0[5u].w;
        float _3832 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) - _719)) + _719) < ((_537 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _549 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _550 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _570 = fma(_448, cbSceneParam._m0[5u].z, fma(_447, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _446));
    float _573 = fma(_448, cbSceneParam._m0[6u].z, fma(_447, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _446));
    float _576 = fma(_448, cbSceneParam._m0[7u].z, fma(_447, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _446));
    uint _589 = _254 + 9u;
    uint _590 = _589 + uint(cbMatDynParam._m0[0u].w);
    float _596 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0)))) * cbInstanceData._m0[_590].x;
    float _597 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0)))) * cbInstanceData._m0[_590].y;
    float _598 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0)))) * cbInstanceData._m0[_590].z;
    float _3843 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _599 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _3854 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _600 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
    float _3865 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _601 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
    float _602 = 1.0 - _454;
    float _603 = _599 * _602;
    float _604 = _600 * _602;
    float _605 = _601 * _602;
    float _610 = (_599 + (-0.039999999105930328369140625)) * _454;
    float _611 = (_600 + (-0.039999999105930328369140625)) * _454;
    float _612 = (_601 + (-0.039999999105930328369140625)) * _454;
    float _613 = _610 + 0.039999999105930328369140625;
    float _615 = _611 + 0.039999999105930328369140625;
    float _616 = _612 + 0.039999999105930328369140625;
    vec4 _625 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _549, cbSceneParam._m0[86u].y * _550));
    float _629 = ((isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * TEXCOORD_5.w) * _625.x;
    float _630 = dot(vec3(_446, _447, _448), vec3(_531, _532, _533));
    float _633 = _630 * 2.0;
    float _637 = (_633 * _446) - _531;
    float _638 = (_633 * _447) - _532;
    float _639 = (_633 * _448) - _533;
    float _643 = abs(dot(vec3(_531, _532, _533), vec3(_446, _447, _448)));
    float _3876 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _645 = sqrt(_449);
    float _658 = exp2((_645 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_645 * 3.0));
    float _664 = (1.0 - _658) * ((_645 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _665 = _658 * _645;
    float _693 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _697 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _701 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1030;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _755 = fma(_701, cbModelParam._m0[26u].z, fma(_697, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _693));
        float _759 = fma(_701, cbModelParam._m0[27u].z, fma(_697, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _693));
        float _763 = fma(_701, cbModelParam._m0[28u].z, fma(_697, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _693));
        float _788 = _693 + _446;
        float _789 = _697 + _447;
        float _790 = _701 + _448;
        float _800 = fma(_790, cbModelParam._m0[26u].z, fma(_789, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _788)) - _755;
        float _801 = fma(_790, cbModelParam._m0[27u].z, fma(_789, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _788)) - _759;
        float _802 = fma(_790, cbModelParam._m0[28u].z, fma(_789, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _788)) - _763;
        float _806 = inversesqrt(dot(vec3(_800, _801, _802), vec3(_800, _801, _802)));
        float _819 = ((_806 * _800) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_755 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _820 = ((_806 * _801) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_759 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _821 = ((_806 * _802) / cbModelParam._m0[34u].z) + ((((((_763 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _824 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_819, _820, _821), 0.0);
        vec4 _831 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_819, _820, _821), 0.0);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_819, _820, _821), 0.0);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_819, _820, _821), 0.0);
        float _858 = exp2((_824.w + (-0.5)) * 20.0) * 2.0;
        float _859 = _858 * (_824.x + (-0.5));
        float _860 = _858 * (_824.y + (-0.5));
        float _861 = _858 * (_824.z + (-0.5));
        float _868 = exp2((_831.w + (-0.5)) * 20.0) * 2.0;
        float _869 = _868 * (_831.x + (-0.5));
        float _870 = _868 * (_831.y + (-0.5));
        float _871 = _868 * (_831.z + (-0.5));
        float _878 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _879 = _878 * (_838.x + (-0.5));
        float _880 = _878 * (_838.y + (-0.5));
        float _881 = _878 * (_838.z + (-0.5));
        float _888 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _889 = _888 * (_845.x + (-0.5));
        float _890 = _888 * (_845.y + (-0.5));
        float _891 = _888 * (_845.z + (-0.5));
        float _892 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _893 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _894 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _895 = _859 * 0.5;
        float _896 = _869 * 0.5;
        float _897 = _879 * 0.5;
        float _898 = dot(vec3(_895, _896, _897), vec3(_895, _896, _897));
        float _903 = (_898 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_898);
        float _912 = (dot(vec3(_446, _447, _448), vec3(_903 * _895, _903 * _896, _903 * _897)) + 1.0) * 0.5;
        float _3902 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _922 = sqrt(((_896 * _896) + (_895 * _895)) + (_897 * _897)) / (_892 + 9.9999997473787516355514526367188e-06);
        float _3913 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _923 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _924 = _923 * 2.0;
        float _928 = (1.0 - _923) / (_923 + 1.0);
        float _3924 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _929 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _938 = ((((1.0 - _929) * (_924 + 2.0)) * exp2(log2(isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * (_924 + 1.0))) + _929) * _892;
        float _939 = _860 * 0.5;
        float _940 = _870 * 0.5;
        float _941 = _880 * 0.5;
        float _942 = dot(vec3(_939, _940, _941), vec3(_939, _940, _941));
        float _947 = (_942 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_942);
        float _955 = (dot(vec3(_446, _447, _448), vec3(_947 * _939, _947 * _940, _947 * _941)) + 1.0) * 0.5;
        float _3935 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _964 = sqrt(((_940 * _940) + (_939 * _939)) + (_941 * _941)) / (_893 + 9.9999997473787516355514526367188e-06);
        float _3946 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _966 = _965 * 2.0;
        float _970 = (1.0 - _965) / (_965 + 1.0);
        float _3957 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _980 = ((((1.0 - _971) * (_966 + 2.0)) * exp2(log2(isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * (_966 + 1.0))) + _971) * _893;
        float _981 = _861 * 0.5;
        float _982 = _871 * 0.5;
        float _983 = _881 * 0.5;
        float _984 = dot(vec3(_981, _982, _983), vec3(_981, _982, _983));
        float _989 = (_984 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_984);
        float _997 = (dot(vec3(_446, _447, _448), vec3(_989 * _981, _989 * _982, _989 * _983)) + 1.0) * 0.5;
        float _3968 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1006 = sqrt(((_982 * _982) + (_981 * _981)) + (_983 * _983)) / (_894 + 9.9999997473787516355514526367188e-06);
        float _3979 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1008 = _1007 * 2.0;
        float _1012 = (1.0 - _1007) / (_1007 + 1.0);
        float _3990 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1022 = ((((1.0 - _1013) * (_1008 + 2.0)) * exp2(log2(isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * (_1008 + 1.0))) + _1013) * _894;
        _1030 = _861;
        _1032 = _860;
        _1033 = _859;
        _1034 = _871;
        _1035 = _870;
        _1036 = _869;
        _1037 = _881;
        _1038 = _880;
        _1039 = _879;
        _1040 = _894;
        _1041 = _893;
        _1042 = _892;
        _1043 = cbModelParam._m0[36u].z * (isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0)));
        _1044 = cbModelParam._m0[36u].z * (isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0)));
        _1045 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0)));
    }
    else
    {
        _1030 = _1031;
        _1032 = _1031;
        _1033 = _1031;
        _1034 = _1031;
        _1035 = _1031;
        _1036 = _1031;
        _1037 = _1031;
        _1038 = _1031;
        _1039 = _1031;
        _1040 = _1031;
        _1041 = _1031;
        _1042 = _1031;
        _1043 = 0.0;
        _1044 = 0.0;
        _1045 = 0.0;
    }
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1070 = fma(_701, cbModelParam._m0[30u].z, fma(_697, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _693));
        float _1074 = fma(_701, cbModelParam._m0[31u].z, fma(_697, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _693));
        float _1078 = fma(_701, cbModelParam._m0[32u].z, fma(_697, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _693));
        float _1101 = _693 + _446;
        float _1102 = _697 + _447;
        float _1103 = _701 + _448;
        float _1113 = fma(_1103, cbModelParam._m0[30u].z, fma(_1102, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1101)) - _1070;
        float _1114 = fma(_1103, cbModelParam._m0[31u].z, fma(_1102, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1101)) - _1074;
        float _1115 = fma(_1103, cbModelParam._m0[32u].z, fma(_1102, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1101)) - _1078;
        float _1119 = inversesqrt(dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115)));
        float _1132 = ((_1119 * _1113) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1070 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1133 = ((_1119 * _1114) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1074 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1134 = ((_1119 * _1115) / cbModelParam._m0[35u].z) + ((((((_1078 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        vec4 _1143 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        float _1169 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1136.x + (-0.5));
        float _1171 = _1169 * (_1136.y + (-0.5));
        float _1172 = _1169 * (_1136.z + (-0.5));
        float _1179 = exp2((_1143.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1143.x + (-0.5));
        float _1181 = _1179 * (_1143.y + (-0.5));
        float _1182 = _1179 * (_1143.z + (-0.5));
        float _1189 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1150.x + (-0.5));
        float _1191 = _1189 * (_1150.y + (-0.5));
        float _1192 = _1189 * (_1150.z + (-0.5));
        float _1199 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1157.x + (-0.5));
        float _1201 = _1199 * (_1157.y + (-0.5));
        float _1202 = _1199 * (_1157.z + (-0.5));
        float _1203 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1204 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1205 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1206 = _1170 * 0.5;
        float _1207 = _1180 * 0.5;
        float _1208 = _1190 * 0.5;
        float _1209 = dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208));
        float _1214 = (_1209 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1209);
        float _1222 = (dot(vec3(_446, _447, _448), vec3(_1214 * _1206, _1214 * _1207, _1214 * _1208)) + 1.0) * 0.5;
        float _4031 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1231 = sqrt(((_1207 * _1207) + (_1206 * _1206)) + (_1208 * _1208)) / (_1203 + 9.9999997473787516355514526367188e-06);
        float _4042 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1233 = _1232 * 2.0;
        float _1237 = (1.0 - _1232) / (_1232 + 1.0);
        float _4053 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1247 = ((((1.0 - _1238) * (_1233 + 2.0)) * exp2(log2(isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * (_1233 + 1.0))) + _1238) * _1203;
        float _1248 = _1171 * 0.5;
        float _1249 = _1181 * 0.5;
        float _1250 = _1191 * 0.5;
        float _1251 = dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250));
        float _1256 = (_1251 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1251);
        float _1264 = (dot(vec3(_446, _447, _448), vec3(_1256 * _1248, _1256 * _1249, _1256 * _1250)) + 1.0) * 0.5;
        float _4064 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1273 = sqrt(((_1249 * _1249) + (_1248 * _1248)) + (_1250 * _1250)) / (_1204 + 9.9999997473787516355514526367188e-06);
        float _4075 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1275 = _1274 * 2.0;
        float _1279 = (1.0 - _1274) / (_1274 + 1.0);
        float _4086 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1289 = ((((1.0 - _1280) * (_1275 + 2.0)) * exp2(log2(isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (_1275 + 1.0))) + _1280) * _1204;
        float _1290 = _1172 * 0.5;
        float _1291 = _1182 * 0.5;
        float _1292 = _1192 * 0.5;
        float _1293 = dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292));
        float _1298 = (_1293 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1293);
        float _1306 = (dot(vec3(_446, _447, _448), vec3(_1298 * _1290, _1298 * _1291, _1298 * _1292)) + 1.0) * 0.5;
        float _4097 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1315 = sqrt(((_1291 * _1291) + (_1290 * _1290)) + (_1292 * _1292)) / (_1205 + 9.9999997473787516355514526367188e-06);
        float _4108 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1317 = _1316 * 2.0;
        float _1321 = (1.0 - _1316) / (_1316 + 1.0);
        float _4119 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _1331 = ((((1.0 - _1322) * (_1317 + 2.0)) * exp2(log2(isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (_1317 + 1.0))) + _1322) * _1205;
        _1339 = _1172;
        _1340 = _1171;
        _1341 = _1170;
        _1342 = _1182;
        _1343 = _1181;
        _1344 = _1180;
        _1345 = _1192;
        _1346 = _1191;
        _1347 = _1190;
        _1348 = _1205;
        _1349 = _1204;
        _1350 = _1203;
        _1351 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)));
        _1352 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)));
        _1353 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)));
    }
    else
    {
        _1339 = _1031;
        _1340 = _1031;
        _1341 = _1031;
        _1342 = _1031;
        _1343 = _1031;
        _1344 = _1031;
        _1345 = _1031;
        _1346 = _1031;
        _1347 = _1031;
        _1348 = _1031;
        _1349 = _1031;
        _1350 = _1031;
        _1351 = 0.0;
        _1352 = 0.0;
        _1353 = 0.0;
    }
    float _1363 = (cbModelParam._m0[1u].x * (_1351 - _1043)) + _1043;
    float _1364 = (cbModelParam._m0[1u].x * (_1352 - _1044)) + _1044;
    float _1365 = (cbModelParam._m0[1u].x * (_1353 - _1045)) + _1045;
    float _1386 = fma(_1365, cbSceneParam._m0[89u].z, fma(_1364, cbSceneParam._m0[89u].y, _1363 * cbSceneParam._m0[89u].x));
    float _1389 = fma(_1365, cbSceneParam._m0[90u].z, fma(_1364, cbSceneParam._m0[90u].y, _1363 * cbSceneParam._m0[90u].x));
    float _1392 = fma(_1365, cbSceneParam._m0[91u].z, fma(_1364, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1363));
    float _1407 = _637 * 0.5;
    float _1408 = _638 * 0.5;
    float _1409 = _639 * 0.5;
    float _1410 = dot(vec4(_1407, _1408, _1409, 1.0), vec4(_1341, _1344, _1347, _1350));
    float _1413 = dot(vec4(_1407, _1408, _1409, 1.0), vec4(_1340, _1343, _1346, _1349));
    float _1416 = dot(vec4(_1407, _1408, _1409, 1.0), vec4(_1339, _1342, _1345, _1348));
    float _1450;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1423 = dot(vec4(_1407, _1408, _1409, 1.0), vec4(_1030, _1034, _1037, _1040));
        float _1427 = dot(vec4(_1407, _1408, _1409, 1.0), vec4(_1032, _1035, _1038, _1041));
        float _1431 = dot(vec4(_1407, _1408, _1409, 1.0), vec4(_1033, _1036, _1039, _1042));
        float _1438 = dot(vec4(cbModelParam._m0[39u]), vec4(_1407, _1408, _1409, 1.0));
        _1450 = dot(vec3(isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)), isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)), isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1438) ? 0.0 : (isnan(0.0) ? _1438 : max(0.0, _1438))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1450 = 1.0;
    }
    float _1461;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1452 = dot(vec4(cbModelParam._m0[40u]), vec4(_1407, _1408, _1409, 1.0));
        _1461 = dot(vec3(isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)), isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)), isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1452) ? 0.0 : (isnan(0.0) ? _1452 : max(0.0, _1452))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1461 = 1.0;
    }
    float _1465 = (_1461 * cbModelParam._m0[1u].x) + (_1450 * (1.0 - cbModelParam._m0[1u].x));
    float _1475 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _449);
    float _1476 = isnan(_1475) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1475 : min(cbModelParam._m0[25u].z, _1475));
    float _1558;
    float _1560;
    float _1562;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1525 = fma(_701, cbModelParam._m0[13u].z, fma(_697, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _693)) + cbModelParam._m0[13u].w;
        float _1529 = fma(_701, cbModelParam._m0[14u].z, fma(_697, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _693)) + cbModelParam._m0[14u].w;
        float _1533 = fma(_701, cbModelParam._m0[15u].z, fma(_697, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _693)) + cbModelParam._m0[15u].w;
        float _1536 = fma(_639, cbModelParam._m0[13u].z, fma(_638, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _637));
        float _1539 = fma(_639, cbModelParam._m0[14u].z, fma(_638, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _637));
        float _1542 = fma(_639, cbModelParam._m0[15u].z, fma(_638, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _637));
        float _1570;
        if (_1536 > 0.0)
        {
            _1570 = abs((1.0 - _1525) / _1536);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1536 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1525 + 1.0) / _1536);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1570 = frontier_phi_19_17_ladder;
        }
        float _1744;
        if (_1539 > 0.0)
        {
            _1744 = abs((1.0 - _1529) / _1539);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1539 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1529 + 1.0) / _1539);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1744 = frontier_phi_28_24_ladder;
        }
        float _2040;
        if (_1542 > 0.0)
        {
            _2040 = abs((1.0 - _1533) / _1542);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1533 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2040 = frontier_phi_40_35_ladder;
        }
        float _2042 = isnan(_1744) ? _1570 : (isnan(_1570) ? _1744 : min(_1570, _1744));
        float _2043 = isnan(_2040) ? _2042 : (isnan(_2042) ? _2040 : min(_2042, _2040));
        float _2047 = (_2043 * _1536) + _1525;
        float _2048 = (_2043 * _1539) + _1529;
        float _2049 = (_2043 * _1542) + _1533;
        float _2050 = _2043 * 9.9999997473787516355514526367188e-05;
        float _2052 = (-1.0) - _2050;
        float _2054 = _2050 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2049 > _2054) || ((_2049 < _2052) || ((_2048 > _2054) || ((_2048 < _2052) || ((_2047 < _2052) || (_2047 > _2054))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2194 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2049, cbModelParam._m0[9u].z, fma(_2048, cbModelParam._m0[9u].y, _2047 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2049, cbModelParam._m0[10u].z, fma(_2048, cbModelParam._m0[10u].y, _2047 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2049, cbModelParam._m0[11u].z, fma(_2048, cbModelParam._m0[11u].y, _2047 * cbModelParam._m0[11u].x))), _1476);
            frontier_phi_18_40_ladder = _2194.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2194.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2194.x * cbModelParam._m0[1u].y;
        }
        _1558 = frontier_phi_18_40_ladder_2;
        _1560 = frontier_phi_18_40_ladder_1;
        _1562 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1546 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_637, _638, _639), _1476);
        _1558 = _1546.x * cbModelParam._m0[1u].y;
        _1560 = _1546.y * cbModelParam._m0[1u].y;
        _1562 = _1546.z * cbModelParam._m0[1u].y;
    }
    float _1566 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _449);
    float _1567 = isnan(_1566) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1566 : min(cbModelParam._m0[25u].w, _1566));
    float _1659;
    float _1661;
    float _1663;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1623 = fma(_701, cbModelParam._m0[21u].z, fma(_697, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _693)) + cbModelParam._m0[21u].w;
        float _1627 = fma(_701, cbModelParam._m0[22u].z, fma(_697, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _693)) + cbModelParam._m0[22u].w;
        float _1631 = fma(_701, cbModelParam._m0[23u].z, fma(_697, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _693)) + cbModelParam._m0[23u].w;
        float _1634 = fma(_639, cbModelParam._m0[21u].z, fma(_638, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _637));
        float _1637 = fma(_639, cbModelParam._m0[22u].z, fma(_638, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _637));
        float _1640 = fma(_639, cbModelParam._m0[23u].z, fma(_638, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _637));
        float _1749;
        if (_1634 > 0.0)
        {
            _1749 = abs((1.0 - _1623) / _1634);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1623 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1749 = frontier_phi_30_26_ladder;
        }
        float _2067;
        if (_1637 > 0.0)
        {
            _2067 = abs((1.0 - _1627) / _1637);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1627 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2067 = frontier_phi_42_37_ladder;
        }
        float _2405;
        if (_1640 > 0.0)
        {
            _2405 = abs((1.0 - _1631) / _1640);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1640 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1631 + 1.0) / _1640);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2405 = frontier_phi_52_49_ladder;
        }
        float _2407 = isnan(_2067) ? _1749 : (isnan(_1749) ? _2067 : min(_1749, _2067));
        float _2408 = isnan(_2405) ? _2407 : (isnan(_2407) ? _2405 : min(_2407, _2405));
        float _2412 = (_2408 * _1634) + _1623;
        float _2413 = (_2408 * _1637) + _1627;
        float _2414 = (_2408 * _1640) + _1631;
        float _2415 = _2408 * 9.9999997473787516355514526367188e-05;
        float _2416 = (-1.0) - _2415;
        float _2418 = _2415 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2414 > _2418) || ((_2414 < _2416) || ((_2413 > _2418) || ((_2413 < _2416) || ((_2412 < _2416) || (_2412 > _2418))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2536 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2414, cbModelParam._m0[17u].z, fma(_2413, cbModelParam._m0[17u].y, _2412 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2414, cbModelParam._m0[18u].z, fma(_2413, cbModelParam._m0[18u].y, _2412 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2414, cbModelParam._m0[19u].z, fma(_2413, cbModelParam._m0[19u].y, _2412 * cbModelParam._m0[19u].x))), _1567);
            frontier_phi_27_52_ladder = _2536.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2536.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2536.x * cbModelParam._m0[1u].z;
        }
        _1659 = frontier_phi_27_52_ladder_2;
        _1661 = frontier_phi_27_52_ladder_1;
        _1663 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1643 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_637, _638, _639), _1567);
        _1659 = _1643.x * cbModelParam._m0[1u].z;
        _1661 = _1643.y * cbModelParam._m0[1u].z;
        _1663 = _1643.z * cbModelParam._m0[1u].z;
    }
    float _1676 = (((_664 * _613) + _665) * _629) * ((cbModelParam._m0[1u].w * (_1659 - _1558)) + _1558);
    float _1678 = (((_664 * _615) + _665) * _629) * ((cbModelParam._m0[1u].w * (_1661 - _1560)) + _1560);
    float _1680 = (((_664 * _616) + _665) * _629) * ((cbModelParam._m0[1u].w * (_1663 - _1562)) + _1562);
    float _1683 = fma(_1680, cbSceneParam._m0[89u].z, fma(_1678, cbSceneParam._m0[89u].y, _1676 * cbSceneParam._m0[89u].x));
    float _1686 = fma(_1680, cbSceneParam._m0[90u].z, fma(_1678, cbSceneParam._m0[90u].y, _1676 * cbSceneParam._m0[90u].x));
    float _1689 = fma(_1680, cbSceneParam._m0[91u].z, fma(_1678, cbSceneParam._m0[91u].y, _1676 * cbSceneParam._m0[91u].x));
    float _1723 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1727 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1731 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1735 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1736 = _1723 / _1735;
    float _1737 = _1727 / _1735;
    float _1738 = _1731 / _1735;
    float _1885;
    float _1886;
    float _1887;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1765 = ((uint(_1738 > cbSceneParam._m0[59u].y) + uint(_1738 > cbSceneParam._m0[59u].x)) + uint(_1738 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1766 = _1765 + 43u;
        uint _1774 = _1765 + 44u;
        uint _1782 = _1765 + 45u;
        uint _1790 = _1765 + 46u;
        float _1801 = fma(_1735, cbSceneParam._m0[_1766].w, fma(_1731, cbSceneParam._m0[_1766].z, fma(_1727, cbSceneParam._m0[_1766].y, _1723 * cbSceneParam._m0[_1766].x)));
        float _1805 = fma(_1735, cbSceneParam._m0[_1774].w, fma(_1731, cbSceneParam._m0[_1774].z, fma(_1727, cbSceneParam._m0[_1774].y, _1723 * cbSceneParam._m0[_1774].x)));
        float _1813 = fma(_1735, cbSceneParam._m0[_1790].w, fma(_1731, cbSceneParam._m0[_1790].z, fma(_1727, cbSceneParam._m0[_1790].y, _1723 * cbSceneParam._m0[_1790].x)));
        float _1818 = cbSceneParam._m0[33u].z * _1813;
        float _1820 = cbSceneParam._m0[33u].w * _1813;
        float _1823 = fma(_1735, cbSceneParam._m0[_1782].w, fma(_1731, cbSceneParam._m0[_1782].z, fma(_1727, cbSceneParam._m0[_1782].y, _1723 * cbSceneParam._m0[_1782].x))) / _1813;
        float _1871 = (cbSceneParam._m0[33u].x - sqrt(((_1737 * _1737) + (_1736 * _1736)) + (_1738 * _1738))) * cbSceneParam._m0[33u].y;
        float _4245 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
        float _1878 = (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1818 + _1801) / _1813, (_1820 + _1805) / _1813), _1823), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1820 + _1801) / _1813, (_1805 - _1818) / _1813), _1823), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1801 - _1818) / _1813, (_1805 - _1820) / _1813), _1823), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1801 - _1820) / _1813, (_1818 + _1805) / _1813), _1823), 0.0)).x), vec4(0.25)));
        _1885 = 1.0 - (_1878 * cbSceneParam._m0[34u].x);
        _1886 = 1.0 - (_1878 * cbSceneParam._m0[34u].y);
        _1887 = 1.0 - (_1878 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1885 = 1.0;
        _1886 = 1.0;
        _1887 = 1.0;
    }
    float _1951;
    float _1953;
    float _1955;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1939 = fma(_1735, cbSceneParam._m0[63u].w, fma(_1731, cbSceneParam._m0[63u].z, fma(_1727, cbSceneParam._m0[63u].y, _1723 * cbSceneParam._m0[63u].x)));
        float _1940 = fma(_1735, cbSceneParam._m0[60u].w, fma(_1731, cbSceneParam._m0[60u].z, fma(_1727, cbSceneParam._m0[60u].y, _1723 * cbSceneParam._m0[60u].x))) / _1939;
        float _1941 = fma(_1735, cbSceneParam._m0[61u].w, fma(_1731, cbSceneParam._m0[61u].z, fma(_1727, cbSceneParam._m0[61u].y, _1723 * cbSceneParam._m0[61u].x))) / _1939;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1940 >= cbSceneParam._m0[64u].x) && (_1941 >= cbSceneParam._m0[64u].y)) && (_1940 <= cbSceneParam._m0[64u].z)) && (_1941 <= cbSceneParam._m0[64u].w))
        {
            float _2080 = fma(_1735, cbSceneParam._m0[62u].w, fma(_1731, cbSceneParam._m0[62u].z, fma(_1727, cbSceneParam._m0[62u].y, _1723 * cbSceneParam._m0[62u].x))) / _1939;
            float _2084 = isnan(cbSceneParam._m0[41u].w) ? _2080 : (isnan(_2080) ? cbSceneParam._m0[41u].w : max(_2080, cbSceneParam._m0[41u].w));
            float _2127 = (cbSceneParam._m0[33u].x - sqrt(((_1737 * _1737) + (_1736 * _1736)) + (_1738 * _1738))) * cbSceneParam._m0[33u].y;
            float _4261 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
            float _2134 = (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1940, cbSceneParam._m0[33u].w + _1941), _2084), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1940, _1941 - cbSceneParam._m0[33u].z), _2084), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1940 - cbSceneParam._m0[33u].z, _1941 - cbSceneParam._m0[33u].w), _2084), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1940 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1941), _2084), 0.0)).x), vec4(0.25)));
            float _2138 = 1.0 - (_2134 * cbSceneParam._m0[34u].x);
            float _2139 = 1.0 - (_2134 * cbSceneParam._m0[34u].y);
            float _2140 = 1.0 - (_2134 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2140) ? _1887 : (isnan(_1887) ? _2140 : min(_1887, _2140));
            frontier_phi_39_38_ladder_1 = isnan(_2139) ? _1886 : (isnan(_1886) ? _2139 : min(_1886, _2139));
            frontier_phi_39_38_ladder_2 = isnan(_2138) ? _1885 : (isnan(_1885) ? _2138 : min(_1885, _2138));
        }
        else
        {
            frontier_phi_39_38_ladder = _1887;
            frontier_phi_39_38_ladder_1 = _1886;
            frontier_phi_39_38_ladder_2 = _1885;
        }
        _1951 = frontier_phi_39_38_ladder_2;
        _1953 = frontier_phi_39_38_ladder_1;
        _1955 = frontier_phi_39_38_ladder;
    }
    else
    {
        _1951 = _1885;
        _1953 = _1886;
        _1955 = _1887;
    }
    uvec4 _1960 = floatBitsToUint(cbInstanceData._m0[_254 + 5u]);
    uint _1962 = _1960.x * 14u;
    uint _1963 = _1962 + 13u;
    float _1970 = _629 + (-1.0);
    float _1975 = (cbLight._m0[_1963].x * _1970) + 1.0;
    float _1976 = (cbLight._m0[_1963].y * _1970) + 1.0;
    float _1977 = (cbLight._m0[_1963].z * _1970) + 1.0;
    float _1978 = (cbLight._m0[_1963].w * _1970) + 1.0;
    uint _1979 = _1962 + 5u;
    float _1985 = isnan(1.0) ? _1976 : (isnan(_1976) ? 1.0 : min(_1976, 1.0));
    uint _1989 = _1962 + 4u;
    float _1999 = isnan(1.0) ? _1975 : (isnan(_1975) ? 1.0 : min(_1975, 1.0));
    uint _2003 = _1962 | 1u;
    float _2014 = dot(vec3(cbLight._m0[_1962].xyz), vec3(_446, _447, _448));
    float _2017 = dot(vec3(cbLight._m0[_2003].xyz), vec3(_446, _447, _448));
    float _4297 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _4308 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2022 = (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * 0.3183098733425140380859375;
    float _2024 = (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * 0.3183098733425140380859375;
    float _2031 = ((cbLight._m0[_1979].x * _1985) * _2024) + (((cbLight._m0[_1989].x * _1951) * _1999) * _2022);
    float _2032 = ((_1985 * cbLight._m0[_1979].y) * _2024) + (((cbLight._m0[_1989].y * _1953) * _1999) * _2022);
    float _2033 = ((_1985 * cbLight._m0[_1979].z) * _2024) + (((cbLight._m0[_1989].z * _1955) * _1999) * _2022);
    uvec4 _2037 = floatBitsToUint(cbLight._m0[_1962 + 12u]);
    bool _2039 = _2037.x == 0u;
    float _2141;
    float _2143;
    float _2145;
    if (_2039)
    {
        _2141 = _2031;
        _2143 = _2032;
        _2145 = _2033;
    }
    else
    {
        uint _2149 = _1962 + 6u;
        float _2165 = (dot(vec3(cbLight._m0[_1962 + 2u].xyz), vec3(_446, _447, _448)) * 0.5) + 0.5;
        float _2166 = _2165 * _2165;
        float _4319 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2167 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _2168 = isnan(1.0) ? _1977 : (isnan(_1977) ? 1.0 : min(_1977, 1.0));
        _2141 = (((cbLight._m0[_2149].x * 0.3183098733425140380859375) * _2167) * _2168) + _2031;
        _2143 = (((cbLight._m0[_2149].y * 0.3183098733425140380859375) * _2167) * _2168) + _2032;
        _2145 = (((cbLight._m0[_2149].z * 0.3183098733425140380859375) * _2167) * _2168) + _2033;
    }
    bool _2148 = _2037.y == 0u;
    float _2203;
    float _2205;
    float _2207;
    if (_2148)
    {
        _2203 = _2141;
        _2205 = _2143;
        _2207 = _2145;
    }
    else
    {
        uint _2376 = _1962 + 7u;
        float _2392 = (dot(vec3(cbLight._m0[_1962 + 3u].xyz), vec3(_446, _447, _448)) * 0.5) + 0.5;
        float _2393 = _2392 * _2392;
        float _4335 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2394 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _2395 = isnan(1.0) ? _1978 : (isnan(_1978) ? 1.0 : min(_1978, 1.0));
        _2203 = (((cbLight._m0[_2376].x * 0.3183098733425140380859375) * _2394) * _2395) + _2141;
        _2205 = (((cbLight._m0[_2376].y * 0.3183098733425140380859375) * _2394) * _2395) + _2143;
        _2207 = (((cbLight._m0[_2376].z * 0.3183098733425140380859375) * _2394) * _2395) + _2145;
    }
    uint _2210 = _1962 + 8u;
    float _2223 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1962].w)) * _449) * 0.949999988079071044921875);
    float _2224 = _2223 * _2223;
    float _2225 = cbLight._m0[_1962].x + _531;
    float _2226 = cbLight._m0[_1962].y + _532;
    float _2227 = cbLight._m0[_1962].z + _533;
    float _2231 = inversesqrt(dot(vec3(_2225, _2226, _2227), vec3(_2225, _2226, _2227)));
    float _2232 = _2231 * _2225;
    float _2233 = _2231 * _2226;
    float _2234 = _2231 * _2227;
    float _2235 = dot(vec3(_446, _447, _448), vec3(cbLight._m0[_1962].xyz));
    float _4351 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2238 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
    float _4362 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _2239 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
    float _2240 = dot(vec3(_446, _447, _448), vec3(_2232, _2233, _2234));
    float _4373 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2243 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
    float _2244 = dot(vec3(cbLight._m0[_1962].xyz), vec3(_2232, _2233, _2234));
    float _4384 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2248 = _2224 * _2224;
    float _2252 = ((_2243 * _2243) * (_2248 + (-1.0))) + 1.0;
    float _2260 = exp2(log2(1.0 - (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0)))) * 5.0);
    float _2261 = 0.959999978542327880859375 - _610;
    float _2263 = 0.959999978542327880859375 - _611;
    float _2264 = 0.959999978542327880859375 - _612;
    float _2271 = 1.0 - _2224;
    float _2282 = (0.5 / (((_2239 * ((_2238 * _2271) + _2224)) + 9.9999999392252902907785028219223e-09) + (((_2239 * _2271) + _2224) * _2238))) * _2238;
    float _4395 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2284 = (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * (_2248 / ((_2252 * _2252) * 3.141590118408203125));
    uint _2298 = _1962 + 9u;
    float _2309 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2003].w)) * _449) * 0.949999988079071044921875);
    float _2310 = _2309 * _2309;
    float _2311 = cbLight._m0[_2003].x + _531;
    float _2312 = cbLight._m0[_2003].y + _532;
    float _2313 = cbLight._m0[_2003].z + _533;
    float _2317 = inversesqrt(dot(vec3(_2311, _2312, _2313), vec3(_2311, _2312, _2313)));
    float _2318 = _2317 * _2311;
    float _2319 = _2317 * _2312;
    float _2320 = _2317 * _2313;
    float _2321 = dot(vec3(_446, _447, _448), vec3(cbLight._m0[_2003].xyz));
    float _4406 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2324 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
    float _2325 = dot(vec3(_446, _447, _448), vec3(_2318, _2319, _2320));
    float _4417 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2328 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
    float _2329 = dot(vec3(cbLight._m0[_2003].xyz), vec3(_2318, _2319, _2320));
    float _4428 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2333 = _2310 * _2310;
    float _2337 = ((_2328 * _2328) * (_2333 + (-1.0))) + 1.0;
    float _2344 = exp2(log2(1.0 - (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0)))) * 5.0);
    float _2351 = 1.0 - _2310;
    float _2361 = (0.5 / (((_2239 * ((_2324 * _2351) + _2310)) + 9.9999999392252902907785028219223e-09) + (((_2239 * _2351) + _2310) * _2324))) * _2324;
    float _4439 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2363 = (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_2333 / ((_2337 * _2337) * 3.141590118408203125));
    float _2373 = (((((_2344 * _2261) + _613) * cbLight._m0[_2298].x) * _2363) * _1985) + ((((cbLight._m0[_2210].x * _1951) * ((_2260 * _2261) + _613)) * _2284) * _1999);
    float _2374 = (((((_2344 * _2263) + _615) * cbLight._m0[_2298].y) * _2363) * _1985) + ((((cbLight._m0[_2210].y * _1953) * ((_2260 * _2263) + _615)) * _2284) * _1999);
    float _2375 = (((((_2344 * _2264) + _616) * cbLight._m0[_2298].z) * _2363) * _1985) + ((((cbLight._m0[_2210].z * _1955) * ((_2260 * _2264) + _616)) * _2284) * _1999);
    float _2431;
    float _2433;
    float _2435;
    if (_2039)
    {
        _2431 = _2373;
        _2433 = _2374;
        _2435 = _2375;
    }
    else
    {
        uint _2437 = _1962 + 2u;
        uint _2441 = _1962 + 10u;
        float _2455 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2437].w)) * _449) * 0.949999988079071044921875);
        float _2456 = _2455 * _2455;
        float _2457 = cbLight._m0[_2437].x + _531;
        float _2458 = cbLight._m0[_2437].y + _532;
        float _2459 = cbLight._m0[_2437].z + _533;
        float _2463 = inversesqrt(dot(vec3(_2457, _2458, _2459), vec3(_2457, _2458, _2459)));
        float _2464 = _2463 * _2457;
        float _2465 = _2463 * _2458;
        float _2466 = _2463 * _2459;
        float _2467 = dot(vec3(_446, _447, _448), vec3(cbLight._m0[_2437].xyz));
        float _4450 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2470 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _2471 = dot(vec3(_446, _447, _448), vec3(_2464, _2465, _2466));
        float _4461 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
        float _2474 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _2475 = dot(vec3(cbLight._m0[_2437].xyz), vec3(_2464, _2465, _2466));
        float _4472 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2479 = _2456 * _2456;
        float _2483 = ((_2474 * _2474) * (_2479 + (-1.0))) + 1.0;
        float _2490 = exp2(log2(1.0 - (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0)))) * 5.0);
        float _2497 = 1.0 - _2456;
        float _2507 = (0.5 / (((_2239 * ((_2470 * _2497) + _2456)) + 9.9999999392252902907785028219223e-09) + (((_2239 * _2497) + _2456) * _2470))) * _2470;
        float _4483 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        float _2509 = (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (_2479 / ((_2483 * _2483) * 3.141590118408203125));
        float _2510 = isnan(1.0) ? _1977 : (isnan(_1977) ? 1.0 : min(_1977, 1.0));
        _2431 = (((((_2490 * _2261) + _613) * cbLight._m0[_2441].x) * _2509) * _2510) + _2373;
        _2433 = (((((_2490 * _2263) + _615) * cbLight._m0[_2441].y) * _2509) * _2510) + _2374;
        _2435 = (((((_2490 * _2264) + _616) * cbLight._m0[_2441].z) * _2509) * _2510) + _2375;
    }
    float _2541;
    float _2543;
    float _2545;
    if (_2148)
    {
        _2541 = _2431;
        _2543 = _2433;
        _2545 = _2435;
    }
    else
    {
        uint _2552 = _1962 + 3u;
        uint _2556 = _1962 + 11u;
        float _2570 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2552].w)) * _449) * 0.949999988079071044921875);
        float _2571 = _2570 * _2570;
        float _2572 = cbLight._m0[_2552].x + _531;
        float _2573 = cbLight._m0[_2552].y + _532;
        float _2574 = cbLight._m0[_2552].z + _533;
        float _2578 = inversesqrt(dot(vec3(_2572, _2573, _2574), vec3(_2572, _2573, _2574)));
        float _2579 = _2578 * _2572;
        float _2580 = _2578 * _2573;
        float _2581 = _2578 * _2574;
        float _2582 = dot(vec3(_446, _447, _448), vec3(cbLight._m0[_2552].xyz));
        float _4499 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        float _2585 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _2586 = dot(vec3(_446, _447, _448), vec3(_2579, _2580, _2581));
        float _4510 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2589 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
        float _2590 = dot(vec3(cbLight._m0[_2552].xyz), vec3(_2579, _2580, _2581));
        float _4521 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        float _2594 = _2571 * _2571;
        float _2598 = ((_2589 * _2589) * (_2594 + (-1.0))) + 1.0;
        float _2605 = exp2(log2(1.0 - (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0)))) * 5.0);
        float _2612 = 1.0 - _2571;
        float _2622 = (0.5 / (((_2239 * ((_2585 * _2612) + _2571)) + 9.9999999392252902907785028219223e-09) + (((_2239 * _2612) + _2571) * _2585))) * _2585;
        float _4532 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        float _2624 = (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (_2594 / ((_2598 * _2598) * 3.141590118408203125));
        float _2625 = isnan(1.0) ? _1978 : (isnan(_1978) ? 1.0 : min(_1978, 1.0));
        _2541 = (((((_2605 * _2261) + _613) * cbLight._m0[_2556].x) * _2624) * _2625) + _2431;
        _2543 = (((((_2605 * _2263) + _615) * cbLight._m0[_2556].y) * _2624) * _2625) + _2433;
        _2545 = (((((_2605 * _2264) + _616) * cbLight._m0[_2556].z) * _2624) * _2625) + _2435;
    }
    float _2691;
    float _2693;
    float _2695;
    float _2697;
    float _2699;
    float _2701;
    if (_1960.y == 0u)
    {
        uvec4 _2646 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2647 = _2646.x;
        uint _2658 = uint((float(_2646.y) * floor(float(uint(cbSceneParam._m0[85u].y * _550) / _2647))) + floor(float(uint(cbSceneParam._m0[85u].x * _549) / _2647)));
        float _2668 = (log2(_1738 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2669 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
        uint _2672 = uint(isnan(14.0) ? _2669 : (isnan(_2669) ? 14.0 : min(_2669, 14.0)));
        uvec4 _2677 = texelFetch(g_lightClusterGridBuffer, int(((_2672 << 2u) + (_2658 << 6u)) >> 2u));
        uint _2678 = _2677.x;
        uint _2679 = _2646.z;
        float _2758;
        float _2760;
        float _2762;
        float _2764;
        float _2766;
        float _2768;
        if (((((1u << ((_2679 >> 4u) & 15u)) + 4294967295u) & _2678) == 0u) || ((_2679 & 240u) == 0u))
        {
            _2758 = 0.0;
            _2760 = 0.0;
            _2762 = 0.0;
            _2764 = 0.0;
            _2766 = 0.0;
            _2768 = 0.0;
        }
        else
        {
            float _2759;
            float _2761;
            float _2763;
            float _2765;
            float _2767;
            float _2769;
            float _2911 = 0.0;
            float _2912 = 0.0;
            float _2913 = 0.0;
            float _2914 = 0.0;
            float _2915 = 0.0;
            float _2916 = 0.0;
            uint _2917 = 0u;
            uint _2926;
            bool _2927;
            for (;;)
            {
                _2926 = texelFetch(g_lightClassification, int((((_2672 << 5u) + (_2658 << 9u)) + (_2917 << 2u)) >> 2u)).x;
                _2927 = _2926 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2927)
                {
                    frontier_phi_73_pred = _2916;
                    frontier_phi_73_pred_1 = _2915;
                    frontier_phi_73_pred_2 = _2914;
                    frontier_phi_73_pred_3 = _2913;
                    frontier_phi_73_pred_4 = _2912;
                    frontier_phi_73_pred_5 = _2911;
                }
                else
                {
                    float _3056;
                    float _3057;
                    float _3058;
                    float _3059;
                    float _3060;
                    float _3061;
                    uint _3062;
                    _3056 = _2911;
                    _3057 = _2912;
                    _3058 = _2913;
                    _3059 = _2914;
                    _3060 = _2915;
                    _3061 = _2916;
                    _3062 = _2926;
                    float _2983;
                    float _2984;
                    float _2985;
                    float _2986;
                    float _2987;
                    float _2988;
                    for (;;)
                    {
                        uint _3066 = uint(findLSB(_3062)) + (_2917 << 5u);
                        uint _3063 = (_3062 + 4294967295u) & _3062;
                        uint _3068 = _3066 * 48u;
                        vec4 _3082 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3068)).x, texelFetch(g_PointLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3068 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3068 + 3u)).x));
                        uint _3088 = (_3066 * 48u) + 4u;
                        vec4 _3101 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3088)).x, texelFetch(g_PointLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3088 + 3u)).x));
                        uint _3107 = (_3066 * 48u) + 8u;
                        vec3 _3118 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3107)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 2u)).x));
                        float _3122 = _3082.x - _1736;
                        float _3123 = _3082.y - _1737;
                        float _3124 = _3082.z - _1738;
                        float _3125 = dot(vec3(_3122, _3123, _3124), vec3(_3122, _3123, _3124));
                        float _3128 = inversesqrt(_3125);
                        float _3129 = _3128 * _3122;
                        float _3130 = _3128 * _3123;
                        float _3131 = _3128 * _3124;
                        float _3132 = dot(vec3(_570, _573, _576), vec3(_3129, _3130, _3131));
                        float _3137 = 1.0 - (_3125 * _3082.w);
                        float _4558 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                        float _3138 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                        float _3139 = sqrt(_3125) * _3101.w;
                        float _3142 = 1.39999997615814208984375 / (_3139 + 1.39999997615814208984375);
                        float _3143 = _3142 * _3142;
                        float _3146 = ((1.0 - _3143) * _3132) + _3143;
                        float _3149 = _3139 * _3139;
                        float _3153 = ((isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0))) * _3138) / ((_3149 * 0.699999988079071044921875) + 1.0);
                        float _3157 = (-0.0) - _1736;
                        float _3158 = (-0.0) - _1737;
                        float _3159 = (-0.0) - _1738;
                        float _3163 = inversesqrt(dot(vec3(_3157, _3158, _3159), vec3(_3157, _3158, _3159)));
                        float _3164 = _3163 * _3157;
                        float _3165 = _3163 * _3158;
                        float _3166 = _3163 * _3159;
                        float _3173 = exp2(log2(1.0 / ((_3149 * 3.5) + 5.0)) * 0.25);
                        float _3174 = 1.0 - _645;
                        float _3181 = sqrt(1.0 - ((1.0 - (_3174 * _3174)) * (1.0 - (_3173 * _3173))));
                        float _3182 = _3181 * _3181;
                        float _3183 = _3182 * _3182;
                        float _3184 = _3164 + _3129;
                        float _3185 = _3165 + _3130;
                        float _3186 = _3166 + _3131;
                        float _3190 = inversesqrt(dot(vec3(_3184, _3185, _3186), vec3(_3184, _3185, _3186)));
                        float _3194 = dot(vec3(_570, _573, _576), vec3(_3164, _3165, _3166));
                        float _4574 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                        float _3197 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
                        float _3198 = dot(vec3(_570, _573, _576), vec3(_3190 * _3184, _3190 * _3185, _3190 * _3186));
                        float _4585 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                        float _3201 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                        float _3205 = ((_3201 * _3201) * (_3183 + (-1.0))) + 1.0;
                        float _3206 = _3142 * _3182;
                        float _3207 = _3206 * _3206;
                        float _3210 = ((1.0 - _3207) * _3132) + _3207;
                        float _4596 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                        float _3211 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                        float _3212 = 1.0 - _3182;
                        float _3222 = (0.5 / (((_3211 * ((_3197 * _3212) + _3182)) + 9.9999999392252902907785028219223e-09) + (((_3211 * _3212) + _3182) * _3197))) * _3211;
                        float _4607 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                        float _3233 = (((_3183 * 3.1415927410125732421875) * (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0)))) / ((_3205 * _3205) * ((_3149 * 2.1991131305694580078125) + 3.141590118408203125))) * _3138;
                        _2986 = (_3153 * _3101.x) + _3059;
                        _2987 = (_3153 * _3101.y) + _3060;
                        _2988 = (_3153 * _3101.z) + _3061;
                        _2983 = (_3233 * _3118.x) + _3056;
                        _2984 = (_3233 * _3118.y) + _3057;
                        _2985 = (_3233 * _3118.z) + _3058;
                        if (_3063 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3056 = _2983;
                            _3057 = _2984;
                            _3058 = _2985;
                            _3059 = _2986;
                            _3060 = _2987;
                            _3061 = _2988;
                            _3062 = _3063;
                        }
                    }
                    frontier_phi_73_pred = _2988;
                    frontier_phi_73_pred_1 = _2987;
                    frontier_phi_73_pred_2 = _2986;
                    frontier_phi_73_pred_3 = _2985;
                    frontier_phi_73_pred_4 = _2984;
                    frontier_phi_73_pred_5 = _2983;
                }
                _2769 = frontier_phi_73_pred;
                _2767 = frontier_phi_73_pred_1;
                _2765 = frontier_phi_73_pred_2;
                _2763 = frontier_phi_73_pred_3;
                _2761 = frontier_phi_73_pred_4;
                _2759 = frontier_phi_73_pred_5;
                uint _2918 = _2917 + 1u;
                if (_2918 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2911 = _2759;
                    _2912 = _2761;
                    _2913 = _2763;
                    _2914 = _2765;
                    _2915 = _2767;
                    _2916 = _2769;
                    _2917 = _2918;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2758 = _2759;
            _2760 = _2761;
            _2762 = _2763;
            _2764 = _2765;
            _2766 = _2767;
            _2768 = _2769;
        }
        uvec4 _2772 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2773 = _2772.z;
        uint _2775 = (_2773 >> 8u) & 15u;
        float _2879;
        float _2881;
        float _2883;
        float _2885;
        float _2887;
        float _2889;
        if (((4294967295u << _2775) & _2678) == 0u)
        {
            _2879 = _2758;
            _2881 = _2760;
            _2883 = _2762;
            _2885 = _2764;
            _2887 = _2766;
            _2889 = _2768;
        }
        else
        {
            float _2904 = inversesqrt(dot(vec3(_1736, _1737, _1738), vec3(_1736, _1737, _1738)));
            float _2905 = _2904 * _1736;
            float _2906 = _2904 * _1737;
            float _2907 = _2904 * _1738;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2775 < ((_2773 >> 12u) & 15u))
            {
                float _2880;
                float _2882;
                float _2884;
                float _2886;
                float _2888;
                float _2890;
                float _3039 = _2758;
                float _3040 = _2760;
                float _3041 = _2762;
                float _3042 = _2764;
                float _3043 = _2766;
                float _3044 = _2768;
                uint _3045 = _2775;
                uint _3054;
                bool _3055;
                for (;;)
                {
                    _3054 = texelFetch(g_lightClassification, int((((_2672 << 5u) + (_2658 << 9u)) + (_3045 << 2u)) >> 2u)).x;
                    _3055 = _3054 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3055)
                    {
                        frontier_phi_84_pred = _3044;
                        frontier_phi_84_pred_1 = _3043;
                        frontier_phi_84_pred_2 = _3042;
                        frontier_phi_84_pred_3 = _3041;
                        frontier_phi_84_pred_4 = _3040;
                        frontier_phi_84_pred_5 = _3039;
                    }
                    else
                    {
                        float _3247;
                        float _3248;
                        float _3249;
                        float _3250;
                        float _3251;
                        float _3252;
                        float _3541;
                        float _3542;
                        float _3543;
                        float _3544;
                        float _3545;
                        float _3546;
                        float _3260 = _3039;
                        float _3261 = _3040;
                        float _3262 = _3041;
                        float _3263 = _3042;
                        float _3264 = _3043;
                        float _3265 = _3044;
                        uint _3266 = _3054;
                        uint _3267;
                        vec4 _3292;
                        float _3293;
                        vec4 _3308;
                        vec3 _3320;
                        vec4 _3335;
                        vec4 _3350;
                        float _3397;
                        bool _3398;
                        for (;;)
                        {
                            uint _3277 = ((_3045 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3266));
                            _3267 = (_3266 + 4294967295u) & _3266;
                            uint _3279 = _3277 * 40u;
                            _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            _3293 = _3292.w;
                            uint _3295 = (_3277 * 40u) + 4u;
                            _3308 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 3u)).x));
                            uint _3310 = (_3277 * 40u) + 8u;
                            _3320 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3310)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 2u)).x));
                            uint _3322 = (_3277 * 40u) + 16u;
                            _3335 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3322)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 3u)).x));
                            uint _3337 = (_3277 * 40u) + 20u;
                            _3350 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3337)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 3u)).x));
                            uint _3353 = (_3277 * 40u) + 24u;
                            vec4 _3366 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3353)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 3u)).x));
                            uint _3372 = (_3277 * 40u) + 28u;
                            vec4 _3385 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3372)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 3u)).x));
                            _3397 = fma(_1738, _3385.z, fma(_1737, _3385.y, _3385.x * _1736)) + _3385.w;
                            _3398 = !((fma(_1738, _3366.z, fma(_1737, _3366.y, _3366.x * _1736)) + _3366.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3398)
                            {
                                float _3425 = _3292.x - _1736;
                                float _3426 = _3292.y - _1737;
                                float _3427 = _3292.z - _1738;
                                float _3428 = dot(vec3(_3425, _3426, _3427), vec3(_3425, _3426, _3427));
                                float _3431 = inversesqrt(_3428);
                                float _3432 = _3431 * _3425;
                                float _3433 = _3431 * _3426;
                                float _3434 = _3431 * _3427;
                                float _3438 = 1.0 - (_3428 / (_3293 * _3293));
                                float _4618 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                                float _3439 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
                                float _3443 = sqrt(_3428) * _3308.w;
                                float _3445 = 1.39999997615814208984375 / (_3443 + 1.39999997615814208984375);
                                float _3446 = _3445 * _3445;
                                float _3449 = ((1.0 - _3446) * dot(vec3(_3432, _3433, _3434), vec3(_570, _573, _576))) + _3446;
                                float _3452 = _3443 * _3443;
                                float _3456 = (fma(_1738, _3335.z, fma(_1737, _3335.y, _3335.x * _1736)) + _3335.w) / _3397;
                                float _3457 = (fma(_1738, _3350.z, fma(_1737, _3350.y, _3350.x * _1736)) + _3350.w) / _3397;
                                float _3461 = 1.0 - dot(vec2(_3456, _3457), vec2(_3456, _3457));
                                float _4634 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                                float _3462 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
                                float _3463 = _3462 * (((isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0))) * _3439) / ((_3452 * 0.699999988079071044921875) + 1.0));
                                float _3475 = exp2(log2(1.0 / ((_3452 * 3.5) + 5.0)) * 0.25);
                                float _3476 = 1.0 - _645;
                                float _3483 = sqrt(1.0 - ((1.0 - (_3476 * _3476)) * (1.0 - (_3475 * _3475))));
                                float _3484 = _3483 * _3483;
                                float _3485 = _3484 * _3484;
                                float _3486 = _3432 - _2905;
                                float _3487 = _3433 - _2906;
                                float _3488 = _3434 - _2907;
                                float _3492 = inversesqrt(dot(vec3(_3486, _3487, _3488), vec3(_3486, _3487, _3488)));
                                float _3496 = dot(vec3(_570, _573, _576), vec3((-0.0) - _2905, (-0.0) - _2906, (-0.0) - _2907));
                                float _4645 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                                float _3499 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
                                float _3500 = dot(vec3(_570, _573, _576), vec3(_3492 * _3486, _3492 * _3487, _3492 * _3488));
                                float _4656 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0));
                                float _3503 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
                                float _3507 = ((_3503 * _3503) * (_3485 + (-1.0))) + 1.0;
                                float _3508 = _3445 * _3484;
                                float _3509 = _3508 * _3508;
                                float _3515 = ((1.0 - _3509) * dot(vec3(_570, _573, _576), vec3(_3432, _3433, _3434))) + _3509;
                                float _4667 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                                float _3516 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                                float _3517 = 1.0 - _3484;
                                float _3527 = (0.5 / (((_3516 * ((_3499 * _3517) + _3484)) + 9.9999999392252902907785028219223e-09) + (((_3516 * _3517) + _3484) * _3499))) * _3516;
                                float _4678 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                                float _3537 = (_3462 * _3439) * (((_3485 * 3.1415927410125732421875) * (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0)))) / ((_3507 * _3507) * ((_3452 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3463 * _3308.z;
                                frontier_phi_90_pred_1 = _3463 * _3308.y;
                                frontier_phi_90_pred_2 = _3463 * _3308.x;
                                frontier_phi_90_pred_3 = _3537 * _3320.z;
                                frontier_phi_90_pred_4 = _3537 * _3320.y;
                                frontier_phi_90_pred_5 = _3537 * _3320.x;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3546 = frontier_phi_90_pred;
                            _3545 = frontier_phi_90_pred_1;
                            _3544 = frontier_phi_90_pred_2;
                            _3543 = frontier_phi_90_pred_3;
                            _3542 = frontier_phi_90_pred_4;
                            _3541 = frontier_phi_90_pred_5;
                            _3250 = _3544 + _3263;
                            _3251 = _3545 + _3264;
                            _3252 = _3546 + _3265;
                            _3247 = _3541 + _3260;
                            _3248 = _3542 + _3261;
                            _3249 = _3543 + _3262;
                            if (_3267 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3260 = _3247;
                                _3261 = _3248;
                                _3262 = _3249;
                                _3263 = _3250;
                                _3264 = _3251;
                                _3265 = _3252;
                                _3266 = _3267;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3252;
                        frontier_phi_84_pred_1 = _3251;
                        frontier_phi_84_pred_2 = _3250;
                        frontier_phi_84_pred_3 = _3249;
                        frontier_phi_84_pred_4 = _3248;
                        frontier_phi_84_pred_5 = _3247;
                    }
                    _2890 = frontier_phi_84_pred;
                    _2888 = frontier_phi_84_pred_1;
                    _2886 = frontier_phi_84_pred_2;
                    _2884 = frontier_phi_84_pred_3;
                    _2882 = frontier_phi_84_pred_4;
                    _2880 = frontier_phi_84_pred_5;
                    uint _3046 = _3045 + 1u;
                    if (_3046 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3039 = _2880;
                        _3040 = _2882;
                        _3041 = _2884;
                        _3042 = _2886;
                        _3043 = _2888;
                        _3044 = _2890;
                        _3045 = _3046;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2886;
                frontier_phi_65_66_ladder_1 = _2890;
                frontier_phi_65_66_ladder_2 = _2888;
                frontier_phi_65_66_ladder_3 = _2884;
                frontier_phi_65_66_ladder_4 = _2882;
                frontier_phi_65_66_ladder_5 = _2880;
            }
            else
            {
                frontier_phi_65_66_ladder = _2764;
                frontier_phi_65_66_ladder_1 = _2768;
                frontier_phi_65_66_ladder_2 = _2766;
                frontier_phi_65_66_ladder_3 = _2762;
                frontier_phi_65_66_ladder_4 = _2760;
                frontier_phi_65_66_ladder_5 = _2758;
            }
            _2879 = frontier_phi_65_66_ladder_5;
            _2881 = frontier_phi_65_66_ladder_4;
            _2883 = frontier_phi_65_66_ladder_3;
            _2885 = frontier_phi_65_66_ladder;
            _2887 = frontier_phi_65_66_ladder_2;
            _2889 = frontier_phi_65_66_ladder_1;
        }
        float _2894 = isnan(1.0) ? _629 : (isnan(_629) ? 1.0 : min(_629, 1.0));
        _2691 = (_2894 * _2885) + _2203;
        _2693 = (_2894 * _2887) + _2205;
        _2695 = (_2894 * _2889) + _2207;
        _2697 = ((_2879 * _613) * _2894) + _2541;
        _2699 = ((_2881 * _615) * _2894) + _2543;
        _2701 = ((_2883 * _616) * _2894) + _2545;
    }
    else
    {
        _2691 = _2203;
        _2693 = _2205;
        _2695 = _2207;
        _2697 = _2541;
        _2699 = _2543;
        _2701 = _2545;
    }
    float _4694 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _4705 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _4716 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _2718 = ((isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0))) * (_2691 + ((isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0))) * _629))) + ((_2697 + ((isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))) * _1465)) * cbPerFrame._m0[3u].x);
    float _2719 = ((isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0))) * (_2693 + ((isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0))) * _629))) + ((_2699 + ((isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))) * _1465)) * cbPerFrame._m0[3u].x);
    float _2720 = ((isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0))) * (_2695 + ((isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0))) * _629))) + ((_2701 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _1465)) * cbPerFrame._m0[3u].x);
    uint _2721 = _254 + 6u;
    float _2729 = _549 / cbSceneParam._m0[86u].x;
    float _2730 = _550 / cbSceneParam._m0[86u].y;
    vec4 _2744 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2729, _2730, (log2((isnan(cbSceneParam._m0[77u].w) ? _472 : (isnan(_472) ? cbSceneParam._m0[77u].w : min(_472, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2746 = _2744.x;
    float _2747 = _2744.y;
    float _2748 = _2744.z;
    float _2749 = _2744.w;
    float _2821;
    float _2823;
    float _2825;
    float _2827;
    if (_472 > cbSceneParam._m0[78u].w)
    {
        float _2783 = isnan(_472) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _472 : min(cbSceneParam._m0[80u].w, _472));
        float _2784 = _2783 / _472;
        float _2795 = _2784 * _524;
        float _2796 = _525 * _2784;
        float _2797 = (-0.0) - _2796;
        float _2799 = _2784 * _526;
        float _2801 = (cbSceneParam._m0[77u].w * _2797) / _2783;
        float _2802 = _2801 + cbSceneParam._m0[79u].w;
        float _2803 = cbSceneParam._m0[79u].w - _2796;
        float _2809 = sqrt(((_2795 * _2795) + (_2796 * _2796)) + (_2799 * _2799));
        float _2812 = (1.0 - (cbSceneParam._m0[77u].w / _2783)) * _2809;
        float _2817 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2819 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2996;
        if (abs((_2797 - _2801) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2996 = ((((_2802 > 0.0) ? exp2(_2817 * _2802) : (2.0 - exp2(_2819 * _2802))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2812;
        }
        else
        {
            float _2940 = 1.0 / cbSceneParam._m0[80u].x;
            float _2941 = isnan(_2803) ? _2802 : (isnan(_2802) ? _2803 : max(_2802, _2803));
            float _2942 = isnan(_2803) ? _2802 : (isnan(_2802) ? _2803 : min(_2802, _2803));
            float _2951 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : min(_2941, 0.0));
            float _2952 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : min(_2942, 0.0));
            _2996 = ((abs(_2809 / _2797) * cbSceneParam._m0[80u].y) * ((((_2951 - _2952) * 2.0) - ((exp2(_2817 * (isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0)))) - exp2(_2817 * (isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0))))) * _2940)) - ((exp2(_2819 * _2951) - exp2(_2819 * _2952)) * _2940))) + (_2812 * cbSceneParam._m0[80u].z);
        }
        vec4 _2998 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2729, _2730, 1.0), 0.0);
        float _3007 = exp2((_2996 * (-1.44269502162933349609375)) * (1.0 - _2998.w));
        float _3008 = log2(_3007);
        float _3024 = log2(_2749);
        _2821 = (exp2(_3024 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3008 * cbSceneParam._m0[78u].x)) * _2998.x) / cbSceneParam._m0[78u].x)) + _2746;
        _2823 = (exp2(_3024 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3008 * cbSceneParam._m0[78u].y)) * _2998.y) / cbSceneParam._m0[78u].y)) + _2747;
        _2825 = (exp2(_3024 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3008 * cbSceneParam._m0[78u].z)) * _2998.z) / cbSceneParam._m0[78u].z)) + _2748;
        _2827 = _3007 * _2749;
    }
    else
    {
        _2821 = _2746;
        _2823 = _2747;
        _2825 = _2748;
        _2827 = _2749;
    }
    bool _3034;
    vec4 _2837;
    vec4 _2859;
    float _2861;
    float _2865;
    float _2866;
    float _2867;
    float _2868;
    bool _2878;
    for (;;)
    {
        _2837 = cbMatDynParam._m0[0u];
        float _2839 = roundEven(_2837.y);
        bool _2840 = _2839 == 3.0;
        float _2841 = log2(_2827);
        float _2848 = exp2(_2841 * cbSceneParam._m0[78u].x) * _2718;
        float _2849 = exp2(_2841 * cbSceneParam._m0[78u].y) * _2719;
        float _2850 = exp2(_2841 * cbSceneParam._m0[78u].z) * _2720;
        float _2857 = _537 + (-0.5);
        _2859 = cbMtdParam._m0[1u];
        _2861 = _2859.y * _2857;
        float _2864 = (_2839 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2865 = _2864 * (_2840 ? _2848 : (_2848 + (cbSceneParam._m0[72u].w * _2821)));
        _2866 = _2864 * (_2840 ? _2849 : (_2849 + (cbSceneParam._m0[72u].w * _2823)));
        _2867 = _2864 * (_2840 ? _2850 : (_2850 + (cbSceneParam._m0[72u].w * _2825)));
        _2868 = _2857 * 0.999000012874603271484375;
        _2878 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2878)
        {
            if ((cbInstanceData._m0[_254 + 7u].x + _2868) < 0.5)
            {
                _3034 = true;
                break;
            }
        }
        uint _2975 = _589 + uint(_2837.w);
        if ((cbInstanceData._m0[_2975].w < 1.0) && ((cbInstanceData._m0[_2975].w + _2868) < 0.5))
        {
            _3034 = true;
            break;
        }
        if ((_2861 + 1.0) < _2859.x)
        {
            _3034 = true;
            break;
        }
        _3034 = false;
        break;
    }
    float _3238;
    if (_3034)
    {
        discard_state = true;
        _3238 = 0.0;
    }
    else
    {
        _3238 = cbInstanceData._m0[_2721].w;
    }
    SV_Target.x = _2865;
    SV_Target.y = _2866;
    SV_Target.z = _2867;
    SV_Target.w = _3238;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2721].w;
    discard_exit();
}


