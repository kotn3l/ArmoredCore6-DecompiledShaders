#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1073;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _232 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _232 + 1u;
    uint _242 = _232 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _273 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _279 = _273.x * cbMtdParam._m0[11u].x;
    float _280 = _273.y * cbMtdParam._m0[11u].y;
    float _281 = _273.z * cbMtdParam._m0[11u].z;
    vec4 _300 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _252) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _253) + cbTextureTilingScale._m0[5u].w));
    vec4 _336 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _338 = _336.x;
    float _350 = dot(vec4(_338, _336.yzw), vec4(cbMtdParam._m0[28u].w, cbMtdParam._m0[29u].xy, 0.0));
    float _367 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_338 - _350) * cbMtdParam._m0[24u].y) + _350) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3686 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _368 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
    float _375 = (_368 * ((_300.x * cbMtdParam._m0[12u].x) - _279)) + _279;
    float _376 = (_368 * ((_300.y * cbMtdParam._m0[12u].y) - _280)) + _280;
    float _377 = (_368 * ((_300.z * cbMtdParam._m0[12u].z) - _281)) + _281;
    vec4 _390 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _252) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _253) + cbTextureTilingScale._m0[4u].w));
    vec4 _407 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _409 = _407.x;
    float _410 = _407.y;
    float _411 = _407.z;
    float _420 = ((_390.z - _411) * _368) + _411;
    float _423 = ((((_390.x - _409) * _368) + _409) * 2.0) + (-1.0);
    float _425 = ((((_390.y - _410) * _368) + _410) * 2.0) + (-1.0);
    float _426 = dot(vec2(_423, _425), vec2(_423, _425));
    float _3697 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _431 = sqrt(1.0 - (isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))));
    vec4 _447 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _459 = (((_447.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w) + _423;
    float _460 = (((_447.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w) + _425;
    vec4 _486 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _488 = _486.x;
    float _506 = ((texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _252) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _253) + cbTextureTilingScale._m0[9u].w)).x - _488) * _368) + _488;
    float _510 = ((texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _506) * cbMtdParam._m0[19u].z) + _506;
    float _514 = (cbMtdParam._m0[19u].w * (_447.z - _420)) + _420;
    float _519 = cbMtdParam._m0[22u].x + _447.w;
    float _522 = fma(_431, _219 * NORMAL.x, fma(_460, _226 * TANGENT.x, (_212 * _204) * _459));
    float _525 = fma(_431, _219 * NORMAL.y, fma(_460, _226 * TANGENT.y, (_212 * _205) * _459));
    float _528 = fma(_431, _219 * NORMAL.z, fma(_460, _226 * TANGENT.z, (_212 * _206) * _459));
    float _532 = inversesqrt(dot(vec3(_522, _525, _528), vec3(_522, _525, _528)));
    float _533 = _532 * _522;
    float _534 = _532 * _525;
    float _535 = _532 * _528;
    float _3708 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _536 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
    float _3719 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _3730 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _3741 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _3752 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _3763 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _541 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _555 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _596 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _606 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _596);
    float _607 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _596);
    float _608 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _596);
    float _612 = inversesqrt(dot(vec3(_606, _607, _608), vec3(_606, _607, _608)));
    float _613 = _606 * _612;
    float _614 = _607 * _612;
    float _615 = _608 * _612;
    float _621 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _622 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _640 = fma(_535, cbSceneParam._m0[5u].z, fma(_534, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _533));
    float _643 = fma(_535, cbSceneParam._m0[6u].z, fma(_534, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _533));
    float _646 = fma(_535, cbSceneParam._m0[7u].z, fma(_534, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _533));
    uint _660 = (_232 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _666 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0)))) * cbInstanceData._m0[_660].x;
    float _667 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0)))) * cbInstanceData._m0[_660].y;
    float _668 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0)))) * cbInstanceData._m0[_660].z;
    float _3774 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _669 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _3785 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _670 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _3796 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _671 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _672 = 1.0 - _541;
    float _673 = _669 * _672;
    float _674 = _670 * _672;
    float _675 = _671 * _672;
    float _680 = (_669 + (-0.039999999105930328369140625)) * _541;
    float _681 = (_670 + (-0.039999999105930328369140625)) * _541;
    float _682 = (_671 + (-0.039999999105930328369140625)) * _541;
    float _683 = _680 + 0.039999999105930328369140625;
    float _685 = _681 + 0.039999999105930328369140625;
    float _686 = _682 + 0.039999999105930328369140625;
    vec4 _695 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _621, cbSceneParam._m0[86u].y * _622));
    float _699 = ((isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0))) * TEXCOORD_5.w) * _695.x;
    float _700 = dot(vec3(_533, _534, _535), vec3(_613, _614, _615));
    float _703 = _700 * 2.0;
    float _707 = (_703 * _533) - _613;
    float _708 = (_703 * _534) - _614;
    float _709 = (_703 * _535) - _615;
    float _713 = abs(dot(vec3(_613, _614, _615), vec3(_533, _534, _535)));
    float _3807 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _715 = sqrt(_536);
    float _728 = exp2((_715 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_715 * 3.0));
    float _734 = (1.0 - _728) * ((_715 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _735 = _728 * _715;
    float _763 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _767 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _771 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1072;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _797 = fma(_771, cbModelParam._m0[26u].z, fma(_767, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _763));
        float _801 = fma(_771, cbModelParam._m0[27u].z, fma(_767, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _763));
        float _805 = fma(_771, cbModelParam._m0[28u].z, fma(_767, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _763));
        float _830 = _763 + _533;
        float _831 = _767 + _534;
        float _832 = _771 + _535;
        float _842 = fma(_832, cbModelParam._m0[26u].z, fma(_831, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _830)) - _797;
        float _843 = fma(_832, cbModelParam._m0[27u].z, fma(_831, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _830)) - _801;
        float _844 = fma(_832, cbModelParam._m0[28u].z, fma(_831, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _830)) - _805;
        float _848 = inversesqrt(dot(vec3(_842, _843, _844), vec3(_842, _843, _844)));
        float _861 = ((_848 * _842) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_797 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _862 = ((_848 * _843) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_801 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _863 = ((_848 * _844) / cbModelParam._m0[34u].z) + ((((((_805 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _866 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        vec4 _873 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        vec4 _880 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        float _900 = exp2((_866.w + (-0.5)) * 20.0) * 2.0;
        float _901 = _900 * (_866.x + (-0.5));
        float _902 = _900 * (_866.y + (-0.5));
        float _903 = _900 * (_866.z + (-0.5));
        float _910 = exp2((_873.w + (-0.5)) * 20.0) * 2.0;
        float _911 = _910 * (_873.x + (-0.5));
        float _912 = _910 * (_873.y + (-0.5));
        float _913 = _910 * (_873.z + (-0.5));
        float _920 = exp2((_880.w + (-0.5)) * 20.0) * 2.0;
        float _921 = _920 * (_880.x + (-0.5));
        float _922 = _920 * (_880.y + (-0.5));
        float _923 = _920 * (_880.z + (-0.5));
        float _930 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _931 = _930 * (_887.x + (-0.5));
        float _932 = _930 * (_887.y + (-0.5));
        float _933 = _930 * (_887.z + (-0.5));
        float _934 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _935 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _936 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _937 = _901 * 0.5;
        float _938 = _911 * 0.5;
        float _939 = _921 * 0.5;
        float _940 = dot(vec3(_937, _938, _939), vec3(_937, _938, _939));
        float _945 = (_940 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_940);
        float _954 = (dot(vec3(_533, _534, _535), vec3(_945 * _937, _945 * _938, _945 * _939)) + 1.0) * 0.5;
        float _3833 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _964 = sqrt(((_938 * _938) + (_937 * _937)) + (_939 * _939)) / (_934 + 9.9999997473787516355514526367188e-06);
        float _3844 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _966 = _965 * 2.0;
        float _970 = (1.0 - _965) / (_965 + 1.0);
        float _3855 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _980 = ((((1.0 - _971) * (_966 + 2.0)) * exp2(log2(isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * (_966 + 1.0))) + _971) * _934;
        float _981 = _902 * 0.5;
        float _982 = _912 * 0.5;
        float _983 = _922 * 0.5;
        float _984 = dot(vec3(_981, _982, _983), vec3(_981, _982, _983));
        float _989 = (_984 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_984);
        float _997 = (dot(vec3(_533, _534, _535), vec3(_989 * _981, _989 * _982, _989 * _983)) + 1.0) * 0.5;
        float _3866 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1006 = sqrt(((_982 * _982) + (_981 * _981)) + (_983 * _983)) / (_935 + 9.9999997473787516355514526367188e-06);
        float _3877 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1008 = _1007 * 2.0;
        float _1012 = (1.0 - _1007) / (_1007 + 1.0);
        float _3888 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1022 = ((((1.0 - _1013) * (_1008 + 2.0)) * exp2(log2(isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * (_1008 + 1.0))) + _1013) * _935;
        float _1023 = _903 * 0.5;
        float _1024 = _913 * 0.5;
        float _1025 = _923 * 0.5;
        float _1026 = dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025));
        float _1031 = (_1026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1026);
        float _1039 = (dot(vec3(_533, _534, _535), vec3(_1031 * _1023, _1031 * _1024, _1031 * _1025)) + 1.0) * 0.5;
        float _3899 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1048 = sqrt(((_1024 * _1024) + (_1023 * _1023)) + (_1025 * _1025)) / (_936 + 9.9999997473787516355514526367188e-06);
        float _3910 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1050 = _1049 * 2.0;
        float _1054 = (1.0 - _1049) / (_1049 + 1.0);
        float _3921 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1064 = ((((1.0 - _1055) * (_1050 + 2.0)) * exp2(log2(isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * (_1050 + 1.0))) + _1055) * _936;
        _1072 = _903;
        _1074 = _902;
        _1075 = _901;
        _1076 = _913;
        _1077 = _912;
        _1078 = _911;
        _1079 = _923;
        _1080 = _922;
        _1081 = _921;
        _1082 = _936;
        _1083 = _935;
        _1084 = _934;
        _1085 = cbModelParam._m0[36u].z * (isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0)));
        _1086 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0)));
        _1087 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0)));
    }
    else
    {
        _1072 = _1073;
        _1074 = _1073;
        _1075 = _1073;
        _1076 = _1073;
        _1077 = _1073;
        _1078 = _1073;
        _1079 = _1073;
        _1080 = _1073;
        _1081 = _1073;
        _1082 = _1073;
        _1083 = _1073;
        _1084 = _1073;
        _1085 = 0.0;
        _1086 = 0.0;
        _1087 = 0.0;
    }
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1112 = fma(_771, cbModelParam._m0[30u].z, fma(_767, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _763));
        float _1116 = fma(_771, cbModelParam._m0[31u].z, fma(_767, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _763));
        float _1120 = fma(_771, cbModelParam._m0[32u].z, fma(_767, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _763));
        float _1143 = _763 + _533;
        float _1144 = _767 + _534;
        float _1145 = _771 + _535;
        float _1155 = fma(_1145, cbModelParam._m0[30u].z, fma(_1144, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1143)) - _1112;
        float _1156 = fma(_1145, cbModelParam._m0[31u].z, fma(_1144, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1143)) - _1116;
        float _1157 = fma(_1145, cbModelParam._m0[32u].z, fma(_1144, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1143)) - _1120;
        float _1161 = inversesqrt(dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157)));
        float _1174 = ((_1161 * _1155) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1112 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1175 = ((_1161 * _1156) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1116 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1176 = ((_1161 * _1157) / cbModelParam._m0[35u].z) + ((((((_1120 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        float _1211 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1178.x + (-0.5));
        float _1213 = _1211 * (_1178.y + (-0.5));
        float _1214 = _1211 * (_1178.z + (-0.5));
        float _1221 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1185.x + (-0.5));
        float _1223 = _1221 * (_1185.y + (-0.5));
        float _1224 = _1221 * (_1185.z + (-0.5));
        float _1231 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1192.x + (-0.5));
        float _1233 = _1231 * (_1192.y + (-0.5));
        float _1234 = _1231 * (_1192.z + (-0.5));
        float _1241 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1199.x + (-0.5));
        float _1243 = _1241 * (_1199.y + (-0.5));
        float _1244 = _1241 * (_1199.z + (-0.5));
        float _1245 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1246 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1247 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1248 = _1212 * 0.5;
        float _1249 = _1222 * 0.5;
        float _1250 = _1232 * 0.5;
        float _1251 = dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250));
        float _1256 = (_1251 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1251);
        float _1264 = (dot(vec3(_533, _534, _535), vec3(_1256 * _1248, _1256 * _1249, _1256 * _1250)) + 1.0) * 0.5;
        float _3962 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1273 = sqrt(((_1249 * _1249) + (_1248 * _1248)) + (_1250 * _1250)) / (_1245 + 9.9999997473787516355514526367188e-06);
        float _3973 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1275 = _1274 * 2.0;
        float _1279 = (1.0 - _1274) / (_1274 + 1.0);
        float _3984 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1289 = ((((1.0 - _1280) * (_1275 + 2.0)) * exp2(log2(isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_1275 + 1.0))) + _1280) * _1245;
        float _1290 = _1213 * 0.5;
        float _1291 = _1223 * 0.5;
        float _1292 = _1233 * 0.5;
        float _1293 = dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292));
        float _1298 = (_1293 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1293);
        float _1306 = (dot(vec3(_533, _534, _535), vec3(_1298 * _1290, _1298 * _1291, _1298 * _1292)) + 1.0) * 0.5;
        float _3995 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1315 = sqrt(((_1291 * _1291) + (_1290 * _1290)) + (_1292 * _1292)) / (_1246 + 9.9999997473787516355514526367188e-06);
        float _4006 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1317 = _1316 * 2.0;
        float _1321 = (1.0 - _1316) / (_1316 + 1.0);
        float _4017 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1331 = ((((1.0 - _1322) * (_1317 + 2.0)) * exp2(log2(isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1317 + 1.0))) + _1322) * _1246;
        float _1332 = _1214 * 0.5;
        float _1333 = _1224 * 0.5;
        float _1334 = _1234 * 0.5;
        float _1335 = dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334));
        float _1340 = (_1335 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1335);
        float _1348 = (dot(vec3(_533, _534, _535), vec3(_1340 * _1332, _1340 * _1333, _1340 * _1334)) + 1.0) * 0.5;
        float _4028 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1357 = sqrt(((_1333 * _1333) + (_1332 * _1332)) + (_1334 * _1334)) / (_1247 + 9.9999997473787516355514526367188e-06);
        float _4039 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1359 = _1358 * 2.0;
        float _1363 = (1.0 - _1358) / (_1358 + 1.0);
        float _4050 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1373 = ((((1.0 - _1364) * (_1359 + 2.0)) * exp2(log2(isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_1359 + 1.0))) + _1364) * _1247;
        _1381 = _1214;
        _1382 = _1213;
        _1383 = _1212;
        _1384 = _1224;
        _1385 = _1223;
        _1386 = _1222;
        _1387 = _1234;
        _1388 = _1233;
        _1389 = _1232;
        _1390 = _1247;
        _1391 = _1246;
        _1392 = _1245;
        _1393 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)));
        _1394 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)));
        _1395 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)));
    }
    else
    {
        _1381 = _1073;
        _1382 = _1073;
        _1383 = _1073;
        _1384 = _1073;
        _1385 = _1073;
        _1386 = _1073;
        _1387 = _1073;
        _1388 = _1073;
        _1389 = _1073;
        _1390 = _1073;
        _1391 = _1073;
        _1392 = _1073;
        _1393 = 0.0;
        _1394 = 0.0;
        _1395 = 0.0;
    }
    float _1405 = (cbModelParam._m0[1u].x * (_1393 - _1085)) + _1085;
    float _1406 = (cbModelParam._m0[1u].x * (_1394 - _1086)) + _1086;
    float _1407 = (cbModelParam._m0[1u].x * (_1395 - _1087)) + _1087;
    float _1428 = fma(_1407, cbSceneParam._m0[89u].z, fma(_1406, cbSceneParam._m0[89u].y, _1405 * cbSceneParam._m0[89u].x));
    float _1431 = fma(_1407, cbSceneParam._m0[90u].z, fma(_1406, cbSceneParam._m0[90u].y, _1405 * cbSceneParam._m0[90u].x));
    float _1434 = fma(_1407, cbSceneParam._m0[91u].z, fma(_1406, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1405));
    float _1449 = _707 * 0.5;
    float _1450 = _708 * 0.5;
    float _1451 = _709 * 0.5;
    float _1452 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1383, _1386, _1389, _1392));
    float _1455 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1382, _1385, _1388, _1391));
    float _1458 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1381, _1384, _1387, _1390));
    float _1492;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1465 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1072, _1076, _1079, _1082));
        float _1469 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1074, _1077, _1080, _1083));
        float _1473 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1075, _1078, _1081, _1084));
        float _1480 = dot(vec4(cbModelParam._m0[39u]), vec4(_1449, _1450, _1451, 1.0));
        _1492 = dot(vec3(isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)), isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)), isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1480) ? 0.0 : (isnan(0.0) ? _1480 : max(0.0, _1480))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1492 = 1.0;
    }
    float _1503;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1494 = dot(vec4(cbModelParam._m0[40u]), vec4(_1449, _1450, _1451, 1.0));
        _1503 = dot(vec3(isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)), isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)), isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1494) ? 0.0 : (isnan(0.0) ? _1494 : max(0.0, _1494))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1503 = 1.0;
    }
    float _1507 = (_1503 * cbModelParam._m0[1u].x) + (_1492 * (1.0 - cbModelParam._m0[1u].x));
    float _1517 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _536);
    float _1518 = isnan(_1517) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1517 : min(cbModelParam._m0[25u].z, _1517));
    float _1600;
    float _1602;
    float _1604;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1567 = fma(_771, cbModelParam._m0[13u].z, fma(_767, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _763)) + cbModelParam._m0[13u].w;
        float _1571 = fma(_771, cbModelParam._m0[14u].z, fma(_767, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _763)) + cbModelParam._m0[14u].w;
        float _1575 = fma(_771, cbModelParam._m0[15u].z, fma(_767, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _763)) + cbModelParam._m0[15u].w;
        float _1578 = fma(_709, cbModelParam._m0[13u].z, fma(_708, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _707));
        float _1581 = fma(_709, cbModelParam._m0[14u].z, fma(_708, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _707));
        float _1584 = fma(_709, cbModelParam._m0[15u].z, fma(_708, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _707));
        float _1612;
        if (_1578 > 0.0)
        {
            _1612 = abs((1.0 - _1567) / _1578);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1578 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1567 + 1.0) / _1578);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1612 = frontier_phi_14_12_ladder;
        }
        float _1785;
        if (_1581 > 0.0)
        {
            _1785 = abs((1.0 - _1571) / _1581);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1581 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1571 + 1.0) / _1581);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1785 = frontier_phi_23_19_ladder;
        }
        float _2080;
        if (_1584 > 0.0)
        {
            _2080 = abs((1.0 - _1575) / _1584);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1584 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1575 + 1.0) / _1584);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2080 = frontier_phi_35_30_ladder;
        }
        float _2082 = isnan(_1785) ? _1612 : (isnan(_1612) ? _1785 : min(_1612, _1785));
        float _2083 = isnan(_2080) ? _2082 : (isnan(_2082) ? _2080 : min(_2082, _2080));
        float _2087 = (_2083 * _1578) + _1567;
        float _2088 = (_2083 * _1581) + _1571;
        float _2089 = (_2083 * _1584) + _1575;
        float _2090 = _2083 * 9.9999997473787516355514526367188e-05;
        float _2092 = (-1.0) - _2090;
        float _2094 = _2090 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2089 > _2094) || ((_2089 < _2092) || ((_2088 > _2094) || ((_2088 < _2092) || ((_2087 < _2092) || (_2087 > _2094))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2234 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2089, cbModelParam._m0[9u].z, fma(_2088, cbModelParam._m0[9u].y, _2087 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2089, cbModelParam._m0[10u].z, fma(_2088, cbModelParam._m0[10u].y, _2087 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2089, cbModelParam._m0[11u].z, fma(_2088, cbModelParam._m0[11u].y, _2087 * cbModelParam._m0[11u].x))), _1518);
            frontier_phi_13_35_ladder = _2234.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2234.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2234.x * cbModelParam._m0[1u].y;
        }
        _1600 = frontier_phi_13_35_ladder_2;
        _1602 = frontier_phi_13_35_ladder_1;
        _1604 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1588 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_707, _708, _709), _1518);
        _1600 = _1588.x * cbModelParam._m0[1u].y;
        _1602 = _1588.y * cbModelParam._m0[1u].y;
        _1604 = _1588.z * cbModelParam._m0[1u].y;
    }
    float _1608 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _536);
    float _1609 = isnan(_1608) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1608 : min(cbModelParam._m0[25u].w, _1608));
    float _1700;
    float _1702;
    float _1704;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1664 = fma(_771, cbModelParam._m0[21u].z, fma(_767, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _763)) + cbModelParam._m0[21u].w;
        float _1668 = fma(_771, cbModelParam._m0[22u].z, fma(_767, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _763)) + cbModelParam._m0[22u].w;
        float _1672 = fma(_771, cbModelParam._m0[23u].z, fma(_767, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _763)) + cbModelParam._m0[23u].w;
        float _1675 = fma(_709, cbModelParam._m0[21u].z, fma(_708, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _707));
        float _1678 = fma(_709, cbModelParam._m0[22u].z, fma(_708, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _707));
        float _1681 = fma(_709, cbModelParam._m0[23u].z, fma(_708, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _707));
        float _1790;
        if (_1675 > 0.0)
        {
            _1790 = abs((1.0 - _1664) / _1675);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1675 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1664 + 1.0) / _1675);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1790 = frontier_phi_25_21_ladder;
        }
        float _2107;
        if (_1678 > 0.0)
        {
            _2107 = abs((1.0 - _1668) / _1678);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1668 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2107 = frontier_phi_37_32_ladder;
        }
        float _2445;
        if (_1681 > 0.0)
        {
            _2445 = abs((1.0 - _1672) / _1681);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1681 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1672 + 1.0) / _1681);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2445 = frontier_phi_47_44_ladder;
        }
        float _2447 = isnan(_2107) ? _1790 : (isnan(_1790) ? _2107 : min(_1790, _2107));
        float _2448 = isnan(_2445) ? _2447 : (isnan(_2447) ? _2445 : min(_2447, _2445));
        float _2452 = (_2448 * _1675) + _1664;
        float _2453 = (_2448 * _1678) + _1668;
        float _2454 = (_2448 * _1681) + _1672;
        float _2455 = _2448 * 9.9999997473787516355514526367188e-05;
        float _2456 = (-1.0) - _2455;
        float _2458 = _2455 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2454 > _2458) || ((_2454 < _2456) || ((_2453 > _2458) || ((_2453 < _2456) || ((_2452 < _2456) || (_2452 > _2458))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2576 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2454, cbModelParam._m0[17u].z, fma(_2453, cbModelParam._m0[17u].y, _2452 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2454, cbModelParam._m0[18u].z, fma(_2453, cbModelParam._m0[18u].y, _2452 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2454, cbModelParam._m0[19u].z, fma(_2453, cbModelParam._m0[19u].y, _2452 * cbModelParam._m0[19u].x))), _1609);
            frontier_phi_22_47_ladder = _2576.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2576.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2576.x * cbModelParam._m0[1u].z;
        }
        _1700 = frontier_phi_22_47_ladder_2;
        _1702 = frontier_phi_22_47_ladder_1;
        _1704 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1684 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_707, _708, _709), _1609);
        _1700 = _1684.x * cbModelParam._m0[1u].z;
        _1702 = _1684.y * cbModelParam._m0[1u].z;
        _1704 = _1684.z * cbModelParam._m0[1u].z;
    }
    float _1717 = (((_734 * _683) + _735) * _699) * ((cbModelParam._m0[1u].w * (_1700 - _1600)) + _1600);
    float _1719 = (((_734 * _685) + _735) * _699) * ((cbModelParam._m0[1u].w * (_1702 - _1602)) + _1602);
    float _1721 = (((_734 * _686) + _735) * _699) * ((cbModelParam._m0[1u].w * (_1704 - _1604)) + _1604);
    float _1724 = fma(_1721, cbSceneParam._m0[89u].z, fma(_1719, cbSceneParam._m0[89u].y, _1717 * cbSceneParam._m0[89u].x));
    float _1727 = fma(_1721, cbSceneParam._m0[90u].z, fma(_1719, cbSceneParam._m0[90u].y, _1717 * cbSceneParam._m0[90u].x));
    float _1730 = fma(_1721, cbSceneParam._m0[91u].z, fma(_1719, cbSceneParam._m0[91u].y, _1717 * cbSceneParam._m0[91u].x));
    float _1764 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1768 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1772 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1776 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1777 = _1764 / _1776;
    float _1778 = _1768 / _1776;
    float _1779 = _1772 / _1776;
    float _1926;
    float _1927;
    float _1928;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1806 = ((uint(_1779 > cbSceneParam._m0[59u].y) + uint(_1779 > cbSceneParam._m0[59u].x)) + uint(_1779 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1807 = _1806 + 43u;
        uint _1815 = _1806 + 44u;
        uint _1823 = _1806 + 45u;
        uint _1831 = _1806 + 46u;
        float _1842 = fma(_1776, cbSceneParam._m0[_1807].w, fma(_1772, cbSceneParam._m0[_1807].z, fma(_1768, cbSceneParam._m0[_1807].y, _1764 * cbSceneParam._m0[_1807].x)));
        float _1846 = fma(_1776, cbSceneParam._m0[_1815].w, fma(_1772, cbSceneParam._m0[_1815].z, fma(_1768, cbSceneParam._m0[_1815].y, _1764 * cbSceneParam._m0[_1815].x)));
        float _1854 = fma(_1776, cbSceneParam._m0[_1831].w, fma(_1772, cbSceneParam._m0[_1831].z, fma(_1768, cbSceneParam._m0[_1831].y, _1764 * cbSceneParam._m0[_1831].x)));
        float _1859 = cbSceneParam._m0[33u].z * _1854;
        float _1861 = cbSceneParam._m0[33u].w * _1854;
        float _1864 = fma(_1776, cbSceneParam._m0[_1823].w, fma(_1772, cbSceneParam._m0[_1823].z, fma(_1768, cbSceneParam._m0[_1823].y, _1764 * cbSceneParam._m0[_1823].x))) / _1854;
        float _1912 = (cbSceneParam._m0[33u].x - sqrt(((_1778 * _1778) + (_1777 * _1777)) + (_1779 * _1779))) * cbSceneParam._m0[33u].y;
        float _4176 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
        float _1919 = (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1859 + _1842) / _1854, (_1861 + _1846) / _1854), _1864), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1861 + _1842) / _1854, (_1846 - _1859) / _1854), _1864), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1842 - _1859) / _1854, (_1846 - _1861) / _1854), _1864), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1842 - _1861) / _1854, (_1859 + _1846) / _1854), _1864), 0.0)).x), vec4(0.25)));
        _1926 = 1.0 - (_1919 * cbSceneParam._m0[34u].x);
        _1927 = 1.0 - (_1919 * cbSceneParam._m0[34u].y);
        _1928 = 1.0 - (_1919 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1926 = 1.0;
        _1927 = 1.0;
        _1928 = 1.0;
    }
    float _1992;
    float _1994;
    float _1996;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1980 = fma(_1776, cbSceneParam._m0[63u].w, fma(_1772, cbSceneParam._m0[63u].z, fma(_1768, cbSceneParam._m0[63u].y, _1764 * cbSceneParam._m0[63u].x)));
        float _1981 = fma(_1776, cbSceneParam._m0[60u].w, fma(_1772, cbSceneParam._m0[60u].z, fma(_1768, cbSceneParam._m0[60u].y, _1764 * cbSceneParam._m0[60u].x))) / _1980;
        float _1982 = fma(_1776, cbSceneParam._m0[61u].w, fma(_1772, cbSceneParam._m0[61u].z, fma(_1768, cbSceneParam._m0[61u].y, _1764 * cbSceneParam._m0[61u].x))) / _1980;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1981 >= cbSceneParam._m0[64u].x) && (_1982 >= cbSceneParam._m0[64u].y)) && (_1981 <= cbSceneParam._m0[64u].z)) && (_1982 <= cbSceneParam._m0[64u].w))
        {
            float _2120 = fma(_1776, cbSceneParam._m0[62u].w, fma(_1772, cbSceneParam._m0[62u].z, fma(_1768, cbSceneParam._m0[62u].y, _1764 * cbSceneParam._m0[62u].x))) / _1980;
            float _2124 = isnan(cbSceneParam._m0[41u].w) ? _2120 : (isnan(_2120) ? cbSceneParam._m0[41u].w : max(_2120, cbSceneParam._m0[41u].w));
            float _2167 = (cbSceneParam._m0[33u].x - sqrt(((_1778 * _1778) + (_1777 * _1777)) + (_1779 * _1779))) * cbSceneParam._m0[33u].y;
            float _4192 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
            float _2174 = (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1981, cbSceneParam._m0[33u].w + _1982), _2124), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1981, _1982 - cbSceneParam._m0[33u].z), _2124), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1981 - cbSceneParam._m0[33u].z, _1982 - cbSceneParam._m0[33u].w), _2124), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1981 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1982), _2124), 0.0)).x), vec4(0.25)));
            float _2178 = 1.0 - (_2174 * cbSceneParam._m0[34u].x);
            float _2179 = 1.0 - (_2174 * cbSceneParam._m0[34u].y);
            float _2180 = 1.0 - (_2174 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2180) ? _1928 : (isnan(_1928) ? _2180 : min(_1928, _2180));
            frontier_phi_34_33_ladder_1 = isnan(_2179) ? _1927 : (isnan(_1927) ? _2179 : min(_1927, _2179));
            frontier_phi_34_33_ladder_2 = isnan(_2178) ? _1926 : (isnan(_1926) ? _2178 : min(_1926, _2178));
        }
        else
        {
            frontier_phi_34_33_ladder = _1928;
            frontier_phi_34_33_ladder_1 = _1927;
            frontier_phi_34_33_ladder_2 = _1926;
        }
        _1992 = frontier_phi_34_33_ladder_2;
        _1994 = frontier_phi_34_33_ladder_1;
        _1996 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1992 = _1926;
        _1994 = _1927;
        _1996 = _1928;
    }
    uvec4 _2001 = floatBitsToUint(cbInstanceData._m0[_232 + 5u]);
    uint _2003 = _2001.x * 14u;
    uint _2004 = _2003 + 13u;
    float _2011 = _699 + (-1.0);
    float _2016 = (cbLight._m0[_2004].x * _2011) + 1.0;
    float _2017 = (cbLight._m0[_2004].y * _2011) + 1.0;
    float _2018 = (cbLight._m0[_2004].z * _2011) + 1.0;
    float _2019 = (cbLight._m0[_2004].w * _2011) + 1.0;
    uint _2020 = _2003 + 5u;
    float _2026 = isnan(1.0) ? _2017 : (isnan(_2017) ? 1.0 : min(_2017, 1.0));
    uint _2030 = _2003 + 4u;
    float _2039 = isnan(1.0) ? _2016 : (isnan(_2016) ? 1.0 : min(_2016, 1.0));
    uint _2043 = _2003 | 1u;
    float _2054 = dot(vec3(cbLight._m0[_2003].xyz), vec3(_533, _534, _535));
    float _2057 = dot(vec3(cbLight._m0[_2043].xyz), vec3(_533, _534, _535));
    float _4228 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _4239 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2062 = (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * 0.3183098733425140380859375;
    float _2064 = (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * 0.3183098733425140380859375;
    float _2071 = ((cbLight._m0[_2020].x * _2026) * _2064) + (((cbLight._m0[_2030].x * _1992) * _2039) * _2062);
    float _2072 = ((_2026 * cbLight._m0[_2020].y) * _2064) + (((cbLight._m0[_2030].y * _1994) * _2039) * _2062);
    float _2073 = ((_2026 * cbLight._m0[_2020].z) * _2064) + (((cbLight._m0[_2030].z * _1996) * _2039) * _2062);
    uvec4 _2077 = floatBitsToUint(cbLight._m0[_2003 + 12u]);
    bool _2079 = _2077.x == 0u;
    float _2181;
    float _2183;
    float _2185;
    if (_2079)
    {
        _2181 = _2071;
        _2183 = _2072;
        _2185 = _2073;
    }
    else
    {
        uint _2189 = _2003 + 6u;
        float _2205 = (dot(vec3(cbLight._m0[_2003 + 2u].xyz), vec3(_533, _534, _535)) * 0.5) + 0.5;
        float _2206 = _2205 * _2205;
        float _4250 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2207 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _2208 = isnan(1.0) ? _2018 : (isnan(_2018) ? 1.0 : min(_2018, 1.0));
        _2181 = (((cbLight._m0[_2189].x * 0.3183098733425140380859375) * _2207) * _2208) + _2071;
        _2183 = (((cbLight._m0[_2189].y * 0.3183098733425140380859375) * _2207) * _2208) + _2072;
        _2185 = (((cbLight._m0[_2189].z * 0.3183098733425140380859375) * _2207) * _2208) + _2073;
    }
    bool _2188 = _2077.y == 0u;
    float _2243;
    float _2245;
    float _2247;
    if (_2188)
    {
        _2243 = _2181;
        _2245 = _2183;
        _2247 = _2185;
    }
    else
    {
        uint _2416 = _2003 + 7u;
        float _2432 = (dot(vec3(cbLight._m0[_2003 + 3u].xyz), vec3(_533, _534, _535)) * 0.5) + 0.5;
        float _2433 = _2432 * _2432;
        float _4266 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2434 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _2435 = isnan(1.0) ? _2019 : (isnan(_2019) ? 1.0 : min(_2019, 1.0));
        _2243 = (((cbLight._m0[_2416].x * 0.3183098733425140380859375) * _2434) * _2435) + _2181;
        _2245 = (((cbLight._m0[_2416].y * 0.3183098733425140380859375) * _2434) * _2435) + _2183;
        _2247 = (((cbLight._m0[_2416].z * 0.3183098733425140380859375) * _2434) * _2435) + _2185;
    }
    uint _2250 = _2003 + 8u;
    float _2263 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2003].w)) * _536) * 0.949999988079071044921875);
    float _2264 = _2263 * _2263;
    float _2265 = cbLight._m0[_2003].x + _613;
    float _2266 = cbLight._m0[_2003].y + _614;
    float _2267 = cbLight._m0[_2003].z + _615;
    float _2271 = inversesqrt(dot(vec3(_2265, _2266, _2267), vec3(_2265, _2266, _2267)));
    float _2272 = _2271 * _2265;
    float _2273 = _2271 * _2266;
    float _2274 = _2271 * _2267;
    float _2275 = dot(vec3(_533, _534, _535), vec3(cbLight._m0[_2003].xyz));
    float _4282 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2278 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
    float _4293 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _2279 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
    float _2280 = dot(vec3(_533, _534, _535), vec3(_2272, _2273, _2274));
    float _4304 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2283 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
    float _2284 = dot(vec3(cbLight._m0[_2003].xyz), vec3(_2272, _2273, _2274));
    float _4315 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2288 = _2264 * _2264;
    float _2292 = ((_2283 * _2283) * (_2288 + (-1.0))) + 1.0;
    float _2300 = exp2(log2(1.0 - (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0)))) * 5.0);
    float _2301 = 0.959999978542327880859375 - _680;
    float _2303 = 0.959999978542327880859375 - _681;
    float _2304 = 0.959999978542327880859375 - _682;
    float _2311 = 1.0 - _2264;
    float _2322 = (0.5 / (((_2279 * ((_2278 * _2311) + _2264)) + 9.9999999392252902907785028219223e-09) + (((_2279 * _2311) + _2264) * _2278))) * _2278;
    float _4326 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2324 = (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_2288 / ((_2292 * _2292) * 3.141590118408203125));
    uint _2338 = _2003 + 9u;
    float _2349 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2043].w)) * _536) * 0.949999988079071044921875);
    float _2350 = _2349 * _2349;
    float _2351 = cbLight._m0[_2043].x + _613;
    float _2352 = cbLight._m0[_2043].y + _614;
    float _2353 = cbLight._m0[_2043].z + _615;
    float _2357 = inversesqrt(dot(vec3(_2351, _2352, _2353), vec3(_2351, _2352, _2353)));
    float _2358 = _2357 * _2351;
    float _2359 = _2357 * _2352;
    float _2360 = _2357 * _2353;
    float _2361 = dot(vec3(_533, _534, _535), vec3(cbLight._m0[_2043].xyz));
    float _4337 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2364 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
    float _2365 = dot(vec3(_533, _534, _535), vec3(_2358, _2359, _2360));
    float _4348 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2368 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
    float _2369 = dot(vec3(cbLight._m0[_2043].xyz), vec3(_2358, _2359, _2360));
    float _4359 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2373 = _2350 * _2350;
    float _2377 = ((_2368 * _2368) * (_2373 + (-1.0))) + 1.0;
    float _2384 = exp2(log2(1.0 - (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0)))) * 5.0);
    float _2391 = 1.0 - _2350;
    float _2401 = (0.5 / (((_2279 * ((_2364 * _2391) + _2350)) + 9.9999999392252902907785028219223e-09) + (((_2279 * _2391) + _2350) * _2364))) * _2364;
    float _4370 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2403 = (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (_2373 / ((_2377 * _2377) * 3.141590118408203125));
    float _2413 = (((((_2384 * _2301) + _683) * cbLight._m0[_2338].x) * _2403) * _2026) + ((((cbLight._m0[_2250].x * _1992) * ((_2300 * _2301) + _683)) * _2324) * _2039);
    float _2414 = (((((_2384 * _2303) + _685) * cbLight._m0[_2338].y) * _2403) * _2026) + ((((cbLight._m0[_2250].y * _1994) * ((_2300 * _2303) + _685)) * _2324) * _2039);
    float _2415 = (((((_2384 * _2304) + _686) * cbLight._m0[_2338].z) * _2403) * _2026) + ((((cbLight._m0[_2250].z * _1996) * ((_2300 * _2304) + _686)) * _2324) * _2039);
    float _2471;
    float _2473;
    float _2475;
    if (_2079)
    {
        _2471 = _2413;
        _2473 = _2414;
        _2475 = _2415;
    }
    else
    {
        uint _2477 = _2003 + 2u;
        uint _2481 = _2003 + 10u;
        float _2495 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2477].w)) * _536) * 0.949999988079071044921875);
        float _2496 = _2495 * _2495;
        float _2497 = cbLight._m0[_2477].x + _613;
        float _2498 = cbLight._m0[_2477].y + _614;
        float _2499 = cbLight._m0[_2477].z + _615;
        float _2503 = inversesqrt(dot(vec3(_2497, _2498, _2499), vec3(_2497, _2498, _2499)));
        float _2504 = _2503 * _2497;
        float _2505 = _2503 * _2498;
        float _2506 = _2503 * _2499;
        float _2507 = dot(vec3(_533, _534, _535), vec3(cbLight._m0[_2477].xyz));
        float _4381 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        float _2510 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _2511 = dot(vec3(_533, _534, _535), vec3(_2504, _2505, _2506));
        float _4392 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2514 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _2515 = dot(vec3(cbLight._m0[_2477].xyz), vec3(_2504, _2505, _2506));
        float _4403 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2519 = _2496 * _2496;
        float _2523 = ((_2514 * _2514) * (_2519 + (-1.0))) + 1.0;
        float _2530 = exp2(log2(1.0 - (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0)))) * 5.0);
        float _2537 = 1.0 - _2496;
        float _2547 = (0.5 / (((_2279 * ((_2510 * _2537) + _2496)) + 9.9999999392252902907785028219223e-09) + (((_2279 * _2537) + _2496) * _2510))) * _2510;
        float _4414 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2549 = (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_2519 / ((_2523 * _2523) * 3.141590118408203125));
        float _2550 = isnan(1.0) ? _2018 : (isnan(_2018) ? 1.0 : min(_2018, 1.0));
        _2471 = (((((_2530 * _2301) + _683) * cbLight._m0[_2481].x) * _2549) * _2550) + _2413;
        _2473 = (((((_2530 * _2303) + _685) * cbLight._m0[_2481].y) * _2549) * _2550) + _2414;
        _2475 = (((((_2530 * _2304) + _686) * cbLight._m0[_2481].z) * _2549) * _2550) + _2415;
    }
    float _2581;
    float _2583;
    float _2585;
    if (_2188)
    {
        _2581 = _2471;
        _2583 = _2473;
        _2585 = _2475;
    }
    else
    {
        uint _2592 = _2003 + 3u;
        uint _2596 = _2003 + 11u;
        float _2610 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2592].w)) * _536) * 0.949999988079071044921875);
        float _2611 = _2610 * _2610;
        float _2612 = cbLight._m0[_2592].x + _613;
        float _2613 = cbLight._m0[_2592].y + _614;
        float _2614 = cbLight._m0[_2592].z + _615;
        float _2618 = inversesqrt(dot(vec3(_2612, _2613, _2614), vec3(_2612, _2613, _2614)));
        float _2619 = _2618 * _2612;
        float _2620 = _2618 * _2613;
        float _2621 = _2618 * _2614;
        float _2622 = dot(vec3(_533, _534, _535), vec3(cbLight._m0[_2592].xyz));
        float _4430 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        float _2625 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
        float _2626 = dot(vec3(_533, _534, _535), vec3(_2619, _2620, _2621));
        float _4441 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
        float _2629 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _2630 = dot(vec3(cbLight._m0[_2592].xyz), vec3(_2619, _2620, _2621));
        float _4452 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        float _2634 = _2611 * _2611;
        float _2638 = ((_2629 * _2629) * (_2634 + (-1.0))) + 1.0;
        float _2645 = exp2(log2(1.0 - (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0)))) * 5.0);
        float _2652 = 1.0 - _2611;
        float _2662 = (0.5 / (((_2279 * ((_2625 * _2652) + _2611)) + 9.9999999392252902907785028219223e-09) + (((_2279 * _2652) + _2611) * _2625))) * _2625;
        float _4463 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
        float _2664 = (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_2634 / ((_2638 * _2638) * 3.141590118408203125));
        float _2665 = isnan(1.0) ? _2019 : (isnan(_2019) ? 1.0 : min(_2019, 1.0));
        _2581 = (((((_2645 * _2301) + _683) * cbLight._m0[_2596].x) * _2664) * _2665) + _2471;
        _2583 = (((((_2645 * _2303) + _685) * cbLight._m0[_2596].y) * _2664) * _2665) + _2473;
        _2585 = (((((_2645 * _2304) + _686) * cbLight._m0[_2596].z) * _2664) * _2665) + _2475;
    }
    float _2731;
    float _2733;
    float _2735;
    float _2737;
    float _2739;
    float _2741;
    if (_2001.y == 0u)
    {
        uvec4 _2686 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2687 = _2686.x;
        uint _2698 = uint((float(_2686.y) * floor(float(uint(cbSceneParam._m0[85u].y * _622) / _2687))) + floor(float(uint(cbSceneParam._m0[85u].x * _621) / _2687)));
        float _2708 = (log2(_1779 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2709 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
        uint _2712 = uint(isnan(14.0) ? _2709 : (isnan(_2709) ? 14.0 : min(_2709, 14.0)));
        uvec4 _2717 = texelFetch(g_lightClusterGridBuffer, int(((_2712 << 2u) + (_2698 << 6u)) >> 2u));
        uint _2718 = _2717.x;
        uint _2719 = _2686.z;
        float _2798;
        float _2800;
        float _2802;
        float _2804;
        float _2806;
        float _2808;
        if (((((1u << ((_2719 >> 4u) & 15u)) + 4294967295u) & _2718) == 0u) || ((_2719 & 240u) == 0u))
        {
            _2798 = 0.0;
            _2800 = 0.0;
            _2802 = 0.0;
            _2804 = 0.0;
            _2806 = 0.0;
            _2808 = 0.0;
        }
        else
        {
            float _2799;
            float _2801;
            float _2803;
            float _2805;
            float _2807;
            float _2809;
            float _2943 = 0.0;
            float _2944 = 0.0;
            float _2945 = 0.0;
            float _2946 = 0.0;
            float _2947 = 0.0;
            float _2948 = 0.0;
            uint _2949 = 0u;
            uint _2958;
            bool _2959;
            for (;;)
            {
                _2958 = texelFetch(g_lightClassification, int((((_2712 << 5u) + (_2698 << 9u)) + (_2949 << 2u)) >> 2u)).x;
                _2959 = _2958 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2959)
                {
                    frontier_phi_66_pred = _2948;
                    frontier_phi_66_pred_1 = _2947;
                    frontier_phi_66_pred_2 = _2946;
                    frontier_phi_66_pred_3 = _2945;
                    frontier_phi_66_pred_4 = _2944;
                    frontier_phi_66_pred_5 = _2943;
                }
                else
                {
                    float _3067;
                    float _3068;
                    float _3069;
                    float _3070;
                    float _3071;
                    float _3072;
                    uint _3073;
                    _3067 = _2943;
                    _3068 = _2944;
                    _3069 = _2945;
                    _3070 = _2946;
                    _3071 = _2947;
                    _3072 = _2948;
                    _3073 = _2958;
                    float _2999;
                    float _3000;
                    float _3001;
                    float _3002;
                    float _3003;
                    float _3004;
                    for (;;)
                    {
                        uint _3077 = uint(findLSB(_3073)) + (_2949 << 5u);
                        uint _3074 = (_3073 + 4294967295u) & _3073;
                        uint _3079 = _3077 * 48u;
                        vec4 _3093 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3079)).x, texelFetch(g_PointLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3079 + 3u)).x));
                        uint _3099 = (_3077 * 48u) + 4u;
                        vec4 _3112 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3099)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 3u)).x));
                        uint _3118 = (_3077 * 48u) + 8u;
                        vec3 _3129 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3118)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 2u)).x));
                        float _3133 = _3093.x - _1777;
                        float _3134 = _3093.y - _1778;
                        float _3135 = _3093.z - _1779;
                        float _3136 = dot(vec3(_3133, _3134, _3135), vec3(_3133, _3134, _3135));
                        float _3139 = inversesqrt(_3136);
                        float _3140 = _3139 * _3133;
                        float _3141 = _3139 * _3134;
                        float _3142 = _3139 * _3135;
                        float _3143 = dot(vec3(_640, _643, _646), vec3(_3140, _3141, _3142));
                        float _3148 = 1.0 - (_3136 * _3093.w);
                        float _4489 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                        float _3149 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
                        float _3150 = sqrt(_3136) * _3112.w;
                        float _3153 = 1.39999997615814208984375 / (_3150 + 1.39999997615814208984375);
                        float _3154 = _3153 * _3153;
                        float _3157 = ((1.0 - _3154) * _3143) + _3154;
                        float _3160 = _3150 * _3150;
                        float _3164 = ((isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0))) * _3149) / ((_3160 * 0.699999988079071044921875) + 1.0);
                        float _3168 = (-0.0) - _1777;
                        float _3169 = (-0.0) - _1778;
                        float _3170 = (-0.0) - _1779;
                        float _3174 = inversesqrt(dot(vec3(_3168, _3169, _3170), vec3(_3168, _3169, _3170)));
                        float _3175 = _3174 * _3168;
                        float _3176 = _3174 * _3169;
                        float _3177 = _3174 * _3170;
                        float _3184 = exp2(log2(1.0 / ((_3160 * 3.5) + 5.0)) * 0.25);
                        float _3185 = 1.0 - _715;
                        float _3192 = sqrt(1.0 - ((1.0 - (_3185 * _3185)) * (1.0 - (_3184 * _3184))));
                        float _3193 = _3192 * _3192;
                        float _3194 = _3193 * _3193;
                        float _3195 = _3175 + _3140;
                        float _3196 = _3176 + _3141;
                        float _3197 = _3177 + _3142;
                        float _3201 = inversesqrt(dot(vec3(_3195, _3196, _3197), vec3(_3195, _3196, _3197)));
                        float _3205 = dot(vec3(_640, _643, _646), vec3(_3175, _3176, _3177));
                        float _4505 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                        float _3208 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
                        float _3209 = dot(vec3(_640, _643, _646), vec3(_3201 * _3195, _3201 * _3196, _3201 * _3197));
                        float _4516 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                        float _3212 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
                        float _3216 = ((_3212 * _3212) * (_3194 + (-1.0))) + 1.0;
                        float _3217 = _3153 * _3193;
                        float _3218 = _3217 * _3217;
                        float _3221 = ((1.0 - _3218) * _3143) + _3218;
                        float _4527 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                        float _3222 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                        float _3223 = 1.0 - _3193;
                        float _3233 = (0.5 / (((_3222 * ((_3208 * _3223) + _3193)) + 9.9999999392252902907785028219223e-09) + (((_3222 * _3223) + _3193) * _3208))) * _3222;
                        float _4538 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                        float _3244 = (((_3194 * 3.1415927410125732421875) * (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0)))) / ((_3216 * _3216) * ((_3160 * 2.1991131305694580078125) + 3.141590118408203125))) * _3149;
                        _3002 = (_3164 * _3112.x) + _3070;
                        _3003 = (_3164 * _3112.y) + _3071;
                        _3004 = (_3164 * _3112.z) + _3072;
                        _2999 = (_3244 * _3129.x) + _3067;
                        _3000 = (_3244 * _3129.y) + _3068;
                        _3001 = (_3244 * _3129.z) + _3069;
                        if (_3074 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3067 = _2999;
                            _3068 = _3000;
                            _3069 = _3001;
                            _3070 = _3002;
                            _3071 = _3003;
                            _3072 = _3004;
                            _3073 = _3074;
                        }
                    }
                    frontier_phi_66_pred = _3004;
                    frontier_phi_66_pred_1 = _3003;
                    frontier_phi_66_pred_2 = _3002;
                    frontier_phi_66_pred_3 = _3001;
                    frontier_phi_66_pred_4 = _3000;
                    frontier_phi_66_pred_5 = _2999;
                }
                _2809 = frontier_phi_66_pred;
                _2807 = frontier_phi_66_pred_1;
                _2805 = frontier_phi_66_pred_2;
                _2803 = frontier_phi_66_pred_3;
                _2801 = frontier_phi_66_pred_4;
                _2799 = frontier_phi_66_pred_5;
                uint _2950 = _2949 + 1u;
                if (_2950 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2943 = _2799;
                    _2944 = _2801;
                    _2945 = _2803;
                    _2946 = _2805;
                    _2947 = _2807;
                    _2948 = _2809;
                    _2949 = _2950;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2798 = _2799;
            _2800 = _2801;
            _2802 = _2803;
            _2804 = _2805;
            _2806 = _2807;
            _2808 = _2809;
        }
        uvec4 _2812 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2813 = _2812.z;
        uint _2815 = (_2813 >> 8u) & 15u;
        float _2911;
        float _2913;
        float _2915;
        float _2917;
        float _2919;
        float _2921;
        if (((4294967295u << _2815) & _2718) == 0u)
        {
            _2911 = _2798;
            _2913 = _2800;
            _2915 = _2802;
            _2917 = _2804;
            _2919 = _2806;
            _2921 = _2808;
        }
        else
        {
            float _2936 = inversesqrt(dot(vec3(_1777, _1778, _1779), vec3(_1777, _1778, _1779)));
            float _2937 = _2936 * _1777;
            float _2938 = _2936 * _1778;
            float _2939 = _2936 * _1779;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2815 < ((_2813 >> 12u) & 15u))
            {
                float _2912;
                float _2914;
                float _2916;
                float _2918;
                float _2920;
                float _2922;
                float _3050 = _2798;
                float _3051 = _2800;
                float _3052 = _2802;
                float _3053 = _2804;
                float _3054 = _2806;
                float _3055 = _2808;
                uint _3056 = _2815;
                uint _3065;
                bool _3066;
                for (;;)
                {
                    _3065 = texelFetch(g_lightClassification, int((((_2712 << 5u) + (_2698 << 9u)) + (_3056 << 2u)) >> 2u)).x;
                    _3066 = _3065 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3066)
                    {
                        frontier_phi_72_pred = _3055;
                        frontier_phi_72_pred_1 = _3054;
                        frontier_phi_72_pred_2 = _3053;
                        frontier_phi_72_pred_3 = _3052;
                        frontier_phi_72_pred_4 = _3051;
                        frontier_phi_72_pred_5 = _3050;
                    }
                    else
                    {
                        float _3249;
                        float _3250;
                        float _3251;
                        float _3252;
                        float _3253;
                        float _3254;
                        float _3543;
                        float _3544;
                        float _3545;
                        float _3546;
                        float _3547;
                        float _3548;
                        float _3262 = _3050;
                        float _3263 = _3051;
                        float _3264 = _3052;
                        float _3265 = _3053;
                        float _3266 = _3054;
                        float _3267 = _3055;
                        uint _3268 = _3065;
                        uint _3269;
                        vec4 _3294;
                        float _3295;
                        vec4 _3310;
                        vec3 _3322;
                        vec4 _3337;
                        vec4 _3353;
                        float _3399;
                        bool _3400;
                        for (;;)
                        {
                            uint _3279 = ((_3056 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3268));
                            _3269 = (_3268 + 4294967295u) & _3268;
                            uint _3281 = _3279 * 40u;
                            _3294 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3281)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 3u)).x));
                            _3295 = _3294.w;
                            uint _3297 = (_3279 * 40u) + 4u;
                            _3310 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 3u)).x));
                            uint _3312 = (_3279 * 40u) + 8u;
                            _3322 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3312)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 2u)).x));
                            uint _3324 = (_3279 * 40u) + 16u;
                            _3337 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3324)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 3u)).x));
                            uint _3340 = (_3279 * 40u) + 20u;
                            _3353 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3340)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 3u)).x));
                            uint _3355 = (_3279 * 40u) + 24u;
                            vec4 _3368 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3355)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 3u)).x));
                            uint _3374 = (_3279 * 40u) + 28u;
                            vec4 _3387 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 3u)).x));
                            _3399 = fma(_1779, _3387.z, fma(_1778, _3387.y, _3387.x * _1777)) + _3387.w;
                            _3400 = !((fma(_1779, _3368.z, fma(_1778, _3368.y, _3368.x * _1777)) + _3368.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3400)
                            {
                                float _3427 = _3294.x - _1777;
                                float _3428 = _3294.y - _1778;
                                float _3429 = _3294.z - _1779;
                                float _3430 = dot(vec3(_3427, _3428, _3429), vec3(_3427, _3428, _3429));
                                float _3433 = inversesqrt(_3430);
                                float _3434 = _3433 * _3427;
                                float _3435 = _3433 * _3428;
                                float _3436 = _3433 * _3429;
                                float _3440 = 1.0 - (_3430 / (_3295 * _3295));
                                float _4549 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                                float _3441 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
                                float _3445 = sqrt(_3430) * _3310.w;
                                float _3447 = 1.39999997615814208984375 / (_3445 + 1.39999997615814208984375);
                                float _3448 = _3447 * _3447;
                                float _3451 = ((1.0 - _3448) * dot(vec3(_3434, _3435, _3436), vec3(_640, _643, _646))) + _3448;
                                float _3454 = _3445 * _3445;
                                float _3458 = (fma(_1779, _3337.z, fma(_1778, _3337.y, _3337.x * _1777)) + _3337.w) / _3399;
                                float _3459 = (fma(_1779, _3353.z, fma(_1778, _3353.y, _3353.x * _1777)) + _3353.w) / _3399;
                                float _3463 = 1.0 - dot(vec2(_3458, _3459), vec2(_3458, _3459));
                                float _4565 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                                float _3464 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                                float _3465 = _3464 * (((isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0))) * _3441) / ((_3454 * 0.699999988079071044921875) + 1.0));
                                float _3477 = exp2(log2(1.0 / ((_3454 * 3.5) + 5.0)) * 0.25);
                                float _3478 = 1.0 - _715;
                                float _3485 = sqrt(1.0 - ((1.0 - (_3478 * _3478)) * (1.0 - (_3477 * _3477))));
                                float _3486 = _3485 * _3485;
                                float _3487 = _3486 * _3486;
                                float _3488 = _3434 - _2937;
                                float _3489 = _3435 - _2938;
                                float _3490 = _3436 - _2939;
                                float _3494 = inversesqrt(dot(vec3(_3488, _3489, _3490), vec3(_3488, _3489, _3490)));
                                float _3498 = dot(vec3(_640, _643, _646), vec3((-0.0) - _2937, (-0.0) - _2938, (-0.0) - _2939));
                                float _4576 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                                float _3501 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                                float _3502 = dot(vec3(_640, _643, _646), vec3(_3494 * _3488, _3494 * _3489, _3494 * _3490));
                                float _4587 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                                float _3505 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                                float _3509 = ((_3505 * _3505) * (_3487 + (-1.0))) + 1.0;
                                float _3510 = _3447 * _3486;
                                float _3511 = _3510 * _3510;
                                float _3517 = ((1.0 - _3511) * dot(vec3(_640, _643, _646), vec3(_3434, _3435, _3436))) + _3511;
                                float _4598 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                                float _3518 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
                                float _3519 = 1.0 - _3486;
                                float _3529 = (0.5 / (((_3518 * ((_3501 * _3519) + _3486)) + 9.9999999392252902907785028219223e-09) + (((_3518 * _3519) + _3486) * _3501))) * _3518;
                                float _4609 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                                float _3539 = (_3464 * _3441) * (((_3487 * 3.1415927410125732421875) * (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0)))) / ((_3509 * _3509) * ((_3454 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3465 * _3310.y;
                                frontier_phi_78_pred_1 = _3465 * _3310.x;
                                frontier_phi_78_pred_2 = _3539 * _3322.z;
                                frontier_phi_78_pred_3 = _3539 * _3322.y;
                                frontier_phi_78_pred_4 = _3539 * _3322.x;
                                frontier_phi_78_pred_5 = _3465 * _3310.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3547 = frontier_phi_78_pred;
                            _3546 = frontier_phi_78_pred_1;
                            _3545 = frontier_phi_78_pred_2;
                            _3544 = frontier_phi_78_pred_3;
                            _3543 = frontier_phi_78_pred_4;
                            _3548 = frontier_phi_78_pred_5;
                            _3252 = _3546 + _3265;
                            _3253 = _3547 + _3266;
                            _3254 = _3548 + _3267;
                            _3249 = _3543 + _3262;
                            _3250 = _3544 + _3263;
                            _3251 = _3545 + _3264;
                            if (_3269 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3262 = _3249;
                                _3263 = _3250;
                                _3264 = _3251;
                                _3265 = _3252;
                                _3266 = _3253;
                                _3267 = _3254;
                                _3268 = _3269;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3254;
                        frontier_phi_72_pred_1 = _3253;
                        frontier_phi_72_pred_2 = _3252;
                        frontier_phi_72_pred_3 = _3251;
                        frontier_phi_72_pred_4 = _3250;
                        frontier_phi_72_pred_5 = _3249;
                    }
                    _2922 = frontier_phi_72_pred;
                    _2920 = frontier_phi_72_pred_1;
                    _2918 = frontier_phi_72_pred_2;
                    _2916 = frontier_phi_72_pred_3;
                    _2914 = frontier_phi_72_pred_4;
                    _2912 = frontier_phi_72_pred_5;
                    uint _3057 = _3056 + 1u;
                    if (_3057 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3050 = _2912;
                        _3051 = _2914;
                        _3052 = _2916;
                        _3053 = _2918;
                        _3054 = _2920;
                        _3055 = _2922;
                        _3056 = _3057;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2922;
                frontier_phi_60_61_ladder_1 = _2920;
                frontier_phi_60_61_ladder_2 = _2916;
                frontier_phi_60_61_ladder_3 = _2914;
                frontier_phi_60_61_ladder_4 = _2912;
                frontier_phi_60_61_ladder_5 = _2918;
            }
            else
            {
                frontier_phi_60_61_ladder = _2808;
                frontier_phi_60_61_ladder_1 = _2806;
                frontier_phi_60_61_ladder_2 = _2802;
                frontier_phi_60_61_ladder_3 = _2800;
                frontier_phi_60_61_ladder_4 = _2798;
                frontier_phi_60_61_ladder_5 = _2804;
            }
            _2911 = frontier_phi_60_61_ladder_4;
            _2913 = frontier_phi_60_61_ladder_3;
            _2915 = frontier_phi_60_61_ladder_2;
            _2917 = frontier_phi_60_61_ladder_5;
            _2919 = frontier_phi_60_61_ladder_1;
            _2921 = frontier_phi_60_61_ladder;
        }
        float _2926 = isnan(1.0) ? _699 : (isnan(_699) ? 1.0 : min(_699, 1.0));
        _2731 = (_2926 * _2917) + _2243;
        _2733 = (_2926 * _2919) + _2245;
        _2735 = (_2926 * _2921) + _2247;
        _2737 = ((_2911 * _683) * _2926) + _2581;
        _2739 = ((_2913 * _685) * _2926) + _2583;
        _2741 = ((_2915 * _686) * _2926) + _2585;
    }
    else
    {
        _2731 = _2243;
        _2733 = _2245;
        _2735 = _2247;
        _2737 = _2581;
        _2739 = _2583;
        _2741 = _2585;
    }
    float _4625 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _4636 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _4647 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    uint _2761 = _232 + 6u;
    float _2769 = _621 / cbSceneParam._m0[86u].x;
    float _2770 = _622 / cbSceneParam._m0[86u].y;
    vec4 _2784 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2769, _2770, (log2((isnan(cbSceneParam._m0[77u].w) ? _555 : (isnan(_555) ? cbSceneParam._m0[77u].w : min(_555, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2786 = _2784.x;
    float _2787 = _2784.y;
    float _2788 = _2784.z;
    float _2789 = _2784.w;
    float _2861;
    float _2863;
    float _2865;
    float _2867;
    if (_555 > cbSceneParam._m0[78u].w)
    {
        float _2823 = isnan(_555) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _555 : min(cbSceneParam._m0[80u].w, _555));
        float _2824 = _2823 / _555;
        float _2835 = _2824 * _606;
        float _2836 = _607 * _2824;
        float _2837 = (-0.0) - _2836;
        float _2839 = _2824 * _608;
        float _2841 = (cbSceneParam._m0[77u].w * _2837) / _2823;
        float _2842 = _2841 + cbSceneParam._m0[79u].w;
        float _2843 = cbSceneParam._m0[79u].w - _2836;
        float _2849 = sqrt(((_2835 * _2835) + (_2836 * _2836)) + (_2839 * _2839));
        float _2852 = (1.0 - (cbSceneParam._m0[77u].w / _2823)) * _2849;
        float _2857 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2859 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3012;
        if (abs((_2837 - _2841) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3012 = ((((_2842 > 0.0) ? exp2(_2857 * _2842) : (2.0 - exp2(_2859 * _2842))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2852;
        }
        else
        {
            float _2972 = 1.0 / cbSceneParam._m0[80u].x;
            float _2973 = isnan(_2843) ? _2842 : (isnan(_2842) ? _2843 : max(_2842, _2843));
            float _2974 = isnan(_2843) ? _2842 : (isnan(_2842) ? _2843 : min(_2842, _2843));
            float _2983 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : min(_2973, 0.0));
            float _2984 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : min(_2974, 0.0));
            _3012 = ((abs(_2849 / _2837) * cbSceneParam._m0[80u].y) * ((((_2983 - _2984) * 2.0) - ((exp2(_2857 * (isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0)))) - exp2(_2857 * (isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0))))) * _2972)) - ((exp2(_2859 * _2983) - exp2(_2859 * _2984)) * _2972))) + (_2852 * cbSceneParam._m0[80u].z);
        }
        vec4 _3014 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2769, _2770, 1.0), 0.0);
        float _3023 = exp2((_3012 * (-1.44269502162933349609375)) * (1.0 - _3014.w));
        float _3024 = log2(_3023);
        float _3040 = log2(_2789);
        _2861 = (exp2(_3040 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3024 * cbSceneParam._m0[78u].x)) * _3014.x) / cbSceneParam._m0[78u].x)) + _2786;
        _2863 = (exp2(_3040 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3024 * cbSceneParam._m0[78u].y)) * _3014.y) / cbSceneParam._m0[78u].y)) + _2787;
        _2865 = (exp2(_3040 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3024 * cbSceneParam._m0[78u].z)) * _3014.z) / cbSceneParam._m0[78u].z)) + _2788;
        _2867 = _3023 * _2789;
    }
    else
    {
        _2861 = _2786;
        _2863 = _2787;
        _2865 = _2788;
        _2867 = _2789;
    }
    float _2879 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2880 = _2879 == 3.0;
    float _2881 = log2(_2867);
    float _2888 = exp2(_2881 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_2731 + ((isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0))) * _699))) + ((_2737 + ((isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))) * _1507)) * cbPerFrame._m0[3u].x));
    float _2889 = exp2(_2881 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * (_2733 + ((isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))) * _699))) + ((_2739 + ((isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))) * _1507)) * cbPerFrame._m0[3u].x));
    float _2890 = exp2(_2881 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0))) * (_2735 + ((isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0))) * _699))) + ((_2741 + ((isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))) * _1507)) * cbPerFrame._m0[3u].x));
    float _2899 = (_2879 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2899 * (_2880 ? _2888 : (_2888 + (cbSceneParam._m0[72u].w * _2861)));
    SV_Target.y = _2899 * (_2880 ? _2889 : (_2889 + (cbSceneParam._m0[72u].w * _2863)));
    SV_Target.z = _2899 * (_2880 ? _2890 : (_2890 + (cbSceneParam._m0[72u].w * _2865)));
    SV_Target.w = cbInstanceData._m0[_2761].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2761].w;
}


