#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1095;
float _3503;
float _3504;
float _3505;
float _3506;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _241 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _241 + 1u;
    uint _250 = _241 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_241].x * cbInstanceData._m0[_241].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _280 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _286 = _280.x * cbMtdParam._m0[9u].x;
    float _287 = _280.y * cbMtdParam._m0[9u].y;
    float _288 = _280.z * cbMtdParam._m0[9u].z;
    vec4 _301 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_3, SS_BumpMap), vec2((_260 * cbTextureTilingScale._m0[20u].x) + cbTextureTilingScale._m0[20u].z, (_261 * cbTextureTilingScale._m0[20u].y) + cbTextureTilingScale._m0[20u].w));
    vec4 _327 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _331 = _327.z;
    float _335 = (_327.x * 2.0) + (-1.0);
    float _336 = (_327.y * 2.0) + (-1.0);
    float _337 = dot(vec2(_335, _336), vec2(_335, _336));
    float _3515 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _343 = sqrt(1.0 - (isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0))));
    float _348 = _335 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_301.x * 2.0) + (-1.0)));
    float _349 = _336 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_301.y * 2.0) + (-1.0)));
    vec4 _362 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _260) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _261) + cbTextureTilingScale._m0[19u].w));
    float _364 = _362.x;
    float _365 = 1.0 - _364;
    float _398 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_364 - _365) * cbMtdParam._m0[24u].w) + _365) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3526 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _399 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
    float _407 = ((((cbMtdParam._m0[10u].x - _286) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _399) + _286;
    float _408 = ((((cbMtdParam._m0[10u].y - _287) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _399) + _287;
    float _409 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _288)) * _399) + _288;
    vec4 _422 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _424 = _422.x;
    float _426 = _424 - (_424 * _399);
    float _431 = (((_301.z - _331) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _331;
    float _435 = ((cbMtdParam._m0[23u].y - _431) * _399) + _431;
    vec4 _457 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _260) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].w * cbPerFrame._m0[22u].x) + _261) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _463 = (_457.x * 2.0) + (-1.0);
    float _464 = (_457.y * 2.0) + (-1.0);
    float _465 = dot(vec2(_463, _464), vec2(_463, _464));
    float _3537 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _481 = (_399 * (((cbMtdParam._m0[22u].z * _348) - _348) + _463)) + _348;
    float _482 = (_399 * (((cbMtdParam._m0[22u].z * _349) - _349) + _464)) + _349;
    float _483 = (_399 * (sqrt(1.0 - (isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0)))) - _343)) + _343;
    float _485 = cbMtdParam._m0[22u].x + _327.w;
    float _489 = gl_FragCoord.x * 0.125;
    float _491 = gl_FragCoord.y * 0.125;
    float _501 = fma(_483, _228 * NORMAL.x, fma(_482, _235 * TANGENT.x, (_221 * _213) * _481));
    float _504 = fma(_483, _228 * NORMAL.y, fma(_482, _235 * TANGENT.y, (_221 * _214) * _481));
    float _507 = fma(_483, _228 * NORMAL.z, fma(_482, _235 * TANGENT.z, (_221 * _215) * _481));
    float _511 = inversesqrt(dot(vec3(_501, _504, _507), vec3(_501, _504, _507)));
    float _512 = _511 * _501;
    float _513 = _511 * _504;
    float _514 = _511 * _507;
    float _3548 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _515 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
    float _3559 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _3570 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _3581 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _3592 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _3603 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _520 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_489, _491)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _538 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _579 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _589 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _579);
    float _590 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _579);
    float _591 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _579);
    float _595 = inversesqrt(dot(vec3(_589, _590, _591), vec3(_589, _590, _591)));
    float _596 = _589 * _595;
    float _597 = _590 * _595;
    float _598 = _591 * _595;
    vec4 _600 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_489, _491));
    float _602 = _600.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _777 = sqrt(((_589 * _589) + (_590 * _590)) + (_591 * _591));
        float _783 = (cbMatDynParam._m0[5u].x * _777) + cbMatDynParam._m0[5u].y;
        float _3614 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _784 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _788 = (cbMatDynParam._m0[5u].z * _777) + cbMatDynParam._m0[5u].w;
        float _3625 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0))) - _784)) + _784) < ((_602 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _614 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _615 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _635 = fma(_514, cbSceneParam._m0[5u].z, fma(_513, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _512));
    float _638 = fma(_514, cbSceneParam._m0[6u].z, fma(_513, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _512));
    float _641 = fma(_514, cbSceneParam._m0[7u].z, fma(_513, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _512));
    uint _654 = _241 + 9u;
    uint _655 = _654 + uint(cbMatDynParam._m0[0u].w);
    float _661 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0)))) * cbInstanceData._m0[_655].x;
    float _662 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0)))) * cbInstanceData._m0[_655].y;
    float _663 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0)))) * cbInstanceData._m0[_655].z;
    float _3636 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _664 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
    float _3647 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _665 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
    float _3658 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _666 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
    float _667 = 1.0 - _520;
    float _668 = _664 * _667;
    float _669 = _665 * _667;
    float _670 = _666 * _667;
    float _675 = (_664 + (-0.039999999105930328369140625)) * _520;
    float _676 = (_665 + (-0.039999999105930328369140625)) * _520;
    float _677 = (_666 + (-0.039999999105930328369140625)) * _520;
    float _678 = _675 + 0.039999999105930328369140625;
    float _680 = _676 + 0.039999999105930328369140625;
    float _681 = _677 + 0.039999999105930328369140625;
    vec4 _690 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _614, cbSceneParam._m0[86u].y * _615));
    float _694 = ((isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0))) * TEXCOORD_5.w) * _690.x;
    float _695 = dot(vec3(_512, _513, _514), vec3(_596, _597, _598));
    float _698 = _695 * 2.0;
    float _702 = (_698 * _512) - _596;
    float _703 = (_698 * _513) - _597;
    float _704 = (_698 * _514) - _598;
    float _708 = abs(dot(vec3(_596, _597, _598), vec3(_512, _513, _514)));
    float _3669 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _710 = sqrt(_515);
    float _723 = exp2((_710 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_710 * 3.0));
    float _729 = (1.0 - _723) * ((_710 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _730 = _723 * _710;
    float _758 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _762 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _766 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1094;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _819 = fma(_766, cbModelParam._m0[26u].z, fma(_762, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _758));
        float _823 = fma(_766, cbModelParam._m0[27u].z, fma(_762, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _758));
        float _827 = fma(_766, cbModelParam._m0[28u].z, fma(_762, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _758));
        float _852 = _758 + _512;
        float _853 = _762 + _513;
        float _854 = _766 + _514;
        float _864 = fma(_854, cbModelParam._m0[26u].z, fma(_853, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _852)) - _819;
        float _865 = fma(_854, cbModelParam._m0[27u].z, fma(_853, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _852)) - _823;
        float _866 = fma(_854, cbModelParam._m0[28u].z, fma(_853, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _852)) - _827;
        float _870 = inversesqrt(dot(vec3(_864, _865, _866), vec3(_864, _865, _866)));
        float _883 = ((_870 * _864) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_819 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _884 = ((_870 * _865) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_823 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _885 = ((_870 * _866) / cbModelParam._m0[34u].z) + ((((((_827 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _888 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_883, _884, _885), 0.0);
        vec4 _895 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_883, _884, _885), 0.0);
        vec4 _902 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_883, _884, _885), 0.0);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_883, _884, _885), 0.0);
        float _922 = exp2((_888.w + (-0.5)) * 20.0) * 2.0;
        float _923 = _922 * (_888.x + (-0.5));
        float _924 = _922 * (_888.y + (-0.5));
        float _925 = _922 * (_888.z + (-0.5));
        float _932 = exp2((_895.w + (-0.5)) * 20.0) * 2.0;
        float _933 = _932 * (_895.x + (-0.5));
        float _934 = _932 * (_895.y + (-0.5));
        float _935 = _932 * (_895.z + (-0.5));
        float _942 = exp2((_902.w + (-0.5)) * 20.0) * 2.0;
        float _943 = _942 * (_902.x + (-0.5));
        float _944 = _942 * (_902.y + (-0.5));
        float _945 = _942 * (_902.z + (-0.5));
        float _952 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _953 = _952 * (_909.x + (-0.5));
        float _954 = _952 * (_909.y + (-0.5));
        float _955 = _952 * (_909.z + (-0.5));
        float _956 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _957 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _958 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _959 = _923 * 0.5;
        float _960 = _933 * 0.5;
        float _961 = _943 * 0.5;
        float _962 = dot(vec3(_959, _960, _961), vec3(_959, _960, _961));
        float _967 = (_962 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_962);
        float _976 = (dot(vec3(_512, _513, _514), vec3(_967 * _959, _967 * _960, _967 * _961)) + 1.0) * 0.5;
        float _3695 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _986 = sqrt(((_960 * _960) + (_959 * _959)) + (_961 * _961)) / (_956 + 9.9999997473787516355514526367188e-06);
        float _3706 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _988 = _987 * 2.0;
        float _992 = (1.0 - _987) / (_987 + 1.0);
        float _3717 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _993 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1002 = ((((1.0 - _993) * (_988 + 2.0)) * exp2(log2(isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * (_988 + 1.0))) + _993) * _956;
        float _1003 = _924 * 0.5;
        float _1004 = _934 * 0.5;
        float _1005 = _944 * 0.5;
        float _1006 = dot(vec3(_1003, _1004, _1005), vec3(_1003, _1004, _1005));
        float _1011 = (_1006 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1006);
        float _1019 = (dot(vec3(_512, _513, _514), vec3(_1011 * _1003, _1011 * _1004, _1011 * _1005)) + 1.0) * 0.5;
        float _3728 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1028 = sqrt(((_1004 * _1004) + (_1003 * _1003)) + (_1005 * _1005)) / (_957 + 9.9999997473787516355514526367188e-06);
        float _3739 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1030 = _1029 * 2.0;
        float _1034 = (1.0 - _1029) / (_1029 + 1.0);
        float _3750 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1044 = ((((1.0 - _1035) * (_1030 + 2.0)) * exp2(log2(isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * (_1030 + 1.0))) + _1035) * _957;
        float _1045 = _925 * 0.5;
        float _1046 = _935 * 0.5;
        float _1047 = _945 * 0.5;
        float _1048 = dot(vec3(_1045, _1046, _1047), vec3(_1045, _1046, _1047));
        float _1053 = (_1048 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1048);
        float _1061 = (dot(vec3(_512, _513, _514), vec3(_1053 * _1045, _1053 * _1046, _1053 * _1047)) + 1.0) * 0.5;
        float _3761 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1070 = sqrt(((_1046 * _1046) + (_1045 * _1045)) + (_1047 * _1047)) / (_958 + 9.9999997473787516355514526367188e-06);
        float _3772 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1072 = _1071 * 2.0;
        float _1076 = (1.0 - _1071) / (_1071 + 1.0);
        float _3783 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1086 = ((((1.0 - _1077) * (_1072 + 2.0)) * exp2(log2(isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * (_1072 + 1.0))) + _1077) * _958;
        _1094 = _925;
        _1096 = _924;
        _1097 = _923;
        _1098 = _935;
        _1099 = _934;
        _1100 = _933;
        _1101 = _945;
        _1102 = _944;
        _1103 = _943;
        _1104 = _958;
        _1105 = _957;
        _1106 = _956;
        _1107 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0)));
        _1108 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0)));
        _1109 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0)));
    }
    else
    {
        _1094 = _1095;
        _1096 = _1095;
        _1097 = _1095;
        _1098 = _1095;
        _1099 = _1095;
        _1100 = _1095;
        _1101 = _1095;
        _1102 = _1095;
        _1103 = _1095;
        _1104 = _1095;
        _1105 = _1095;
        _1106 = _1095;
        _1107 = 0.0;
        _1108 = 0.0;
        _1109 = 0.0;
    }
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1134 = fma(_766, cbModelParam._m0[30u].z, fma(_762, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _758));
        float _1138 = fma(_766, cbModelParam._m0[31u].z, fma(_762, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _758));
        float _1142 = fma(_766, cbModelParam._m0[32u].z, fma(_762, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _758));
        float _1165 = _758 + _512;
        float _1166 = _762 + _513;
        float _1167 = _766 + _514;
        float _1177 = fma(_1167, cbModelParam._m0[30u].z, fma(_1166, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1165)) - _1134;
        float _1178 = fma(_1167, cbModelParam._m0[31u].z, fma(_1166, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1165)) - _1138;
        float _1179 = fma(_1167, cbModelParam._m0[32u].z, fma(_1166, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1165)) - _1142;
        float _1183 = inversesqrt(dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179)));
        float _1196 = ((_1183 * _1177) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1134 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1197 = ((_1183 * _1178) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1138 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1198 = ((_1183 * _1179) / cbModelParam._m0[35u].z) + ((((((_1142 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        float _1233 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1200.x + (-0.5));
        float _1235 = _1233 * (_1200.y + (-0.5));
        float _1236 = _1233 * (_1200.z + (-0.5));
        float _1243 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1207.x + (-0.5));
        float _1245 = _1243 * (_1207.y + (-0.5));
        float _1246 = _1243 * (_1207.z + (-0.5));
        float _1253 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1214.x + (-0.5));
        float _1255 = _1253 * (_1214.y + (-0.5));
        float _1256 = _1253 * (_1214.z + (-0.5));
        float _1263 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1221.x + (-0.5));
        float _1265 = _1263 * (_1221.y + (-0.5));
        float _1266 = _1263 * (_1221.z + (-0.5));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1270 = _1234 * 0.5;
        float _1271 = _1244 * 0.5;
        float _1272 = _1254 * 0.5;
        float _1273 = dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272));
        float _1278 = (_1273 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1273);
        float _1286 = (dot(vec3(_512, _513, _514), vec3(_1278 * _1270, _1278 * _1271, _1278 * _1272)) + 1.0) * 0.5;
        float _3824 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1295 = sqrt(((_1271 * _1271) + (_1270 * _1270)) + (_1272 * _1272)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _3835 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1297 = _1296 * 2.0;
        float _1301 = (1.0 - _1296) / (_1296 + 1.0);
        float _3846 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1311 = ((((1.0 - _1302) * (_1297 + 2.0)) * exp2(log2(isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * (_1297 + 1.0))) + _1302) * _1267;
        float _1312 = _1235 * 0.5;
        float _1313 = _1245 * 0.5;
        float _1314 = _1255 * 0.5;
        float _1315 = dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314));
        float _1320 = (_1315 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1315);
        float _1328 = (dot(vec3(_512, _513, _514), vec3(_1320 * _1312, _1320 * _1313, _1320 * _1314)) + 1.0) * 0.5;
        float _3857 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1337 = sqrt(((_1313 * _1313) + (_1312 * _1312)) + (_1314 * _1314)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _3868 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1339 = _1338 * 2.0;
        float _1343 = (1.0 - _1338) / (_1338 + 1.0);
        float _3879 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1353 = ((((1.0 - _1344) * (_1339 + 2.0)) * exp2(log2(isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * (_1339 + 1.0))) + _1344) * _1268;
        float _1354 = _1236 * 0.5;
        float _1355 = _1246 * 0.5;
        float _1356 = _1256 * 0.5;
        float _1357 = dot(vec3(_1354, _1355, _1356), vec3(_1354, _1355, _1356));
        float _1362 = (_1357 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1357);
        float _1370 = (dot(vec3(_512, _513, _514), vec3(_1362 * _1354, _1362 * _1355, _1362 * _1356)) + 1.0) * 0.5;
        float _3890 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1379 = sqrt(((_1355 * _1355) + (_1354 * _1354)) + (_1356 * _1356)) / (_1269 + 9.9999997473787516355514526367188e-06);
        float _3901 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1381 = _1380 * 2.0;
        float _1385 = (1.0 - _1380) / (_1380 + 1.0);
        float _3912 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1395 = ((((1.0 - _1386) * (_1381 + 2.0)) * exp2(log2(isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * (_1381 + 1.0))) + _1386) * _1269;
        _1403 = _1236;
        _1404 = _1235;
        _1405 = _1234;
        _1406 = _1246;
        _1407 = _1245;
        _1408 = _1244;
        _1409 = _1256;
        _1410 = _1255;
        _1411 = _1254;
        _1412 = _1269;
        _1413 = _1268;
        _1414 = _1267;
        _1415 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)));
        _1416 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)));
        _1417 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)));
    }
    else
    {
        _1403 = _1095;
        _1404 = _1095;
        _1405 = _1095;
        _1406 = _1095;
        _1407 = _1095;
        _1408 = _1095;
        _1409 = _1095;
        _1410 = _1095;
        _1411 = _1095;
        _1412 = _1095;
        _1413 = _1095;
        _1414 = _1095;
        _1415 = 0.0;
        _1416 = 0.0;
        _1417 = 0.0;
    }
    float _1427 = (cbModelParam._m0[1u].x * (_1415 - _1107)) + _1107;
    float _1428 = (cbModelParam._m0[1u].x * (_1416 - _1108)) + _1108;
    float _1429 = (cbModelParam._m0[1u].x * (_1417 - _1109)) + _1109;
    float _1450 = fma(_1429, cbSceneParam._m0[89u].z, fma(_1428, cbSceneParam._m0[89u].y, _1427 * cbSceneParam._m0[89u].x));
    float _1453 = fma(_1429, cbSceneParam._m0[90u].z, fma(_1428, cbSceneParam._m0[90u].y, _1427 * cbSceneParam._m0[90u].x));
    float _1456 = fma(_1429, cbSceneParam._m0[91u].z, fma(_1428, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1427));
    float _1471 = _702 * 0.5;
    float _1472 = _703 * 0.5;
    float _1473 = _704 * 0.5;
    float _1474 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1405, _1408, _1411, _1414));
    float _1477 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1404, _1407, _1410, _1413));
    float _1480 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1403, _1406, _1409, _1412));
    float _1514;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1487 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1094, _1098, _1101, _1104));
        float _1491 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1096, _1099, _1102, _1105));
        float _1495 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1097, _1100, _1103, _1106));
        float _1502 = dot(vec4(cbModelParam._m0[39u]), vec4(_1471, _1472, _1473, 1.0));
        _1514 = dot(vec3(isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)), isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)), isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1502) ? 0.0 : (isnan(0.0) ? _1502 : max(0.0, _1502))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1514 = 1.0;
    }
    float _1525;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1516 = dot(vec4(cbModelParam._m0[40u]), vec4(_1471, _1472, _1473, 1.0));
        _1525 = dot(vec3(isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)), isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)), isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1516) ? 0.0 : (isnan(0.0) ? _1516 : max(0.0, _1516))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1525 = 1.0;
    }
    float _1529 = (_1525 * cbModelParam._m0[1u].x) + (_1514 * (1.0 - cbModelParam._m0[1u].x));
    float _1539 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _515);
    float _1540 = isnan(_1539) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1539 : min(cbModelParam._m0[25u].z, _1539));
    float _1622;
    float _1624;
    float _1626;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1589 = fma(_766, cbModelParam._m0[13u].z, fma(_762, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _758)) + cbModelParam._m0[13u].w;
        float _1593 = fma(_766, cbModelParam._m0[14u].z, fma(_762, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _758)) + cbModelParam._m0[14u].w;
        float _1597 = fma(_766, cbModelParam._m0[15u].z, fma(_762, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _758)) + cbModelParam._m0[15u].w;
        float _1600 = fma(_704, cbModelParam._m0[13u].z, fma(_703, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _702));
        float _1603 = fma(_704, cbModelParam._m0[14u].z, fma(_703, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _702));
        float _1606 = fma(_704, cbModelParam._m0[15u].z, fma(_703, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _702));
        float _1634;
        if (_1600 > 0.0)
        {
            _1634 = abs((1.0 - _1589) / _1600);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1600 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1589 + 1.0) / _1600);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1634 = frontier_phi_19_17_ladder;
        }
        float _1860;
        if (_1603 > 0.0)
        {
            _1860 = abs((1.0 - _1593) / _1603);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1603 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1593 + 1.0) / _1603);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1860 = frontier_phi_28_24_ladder;
        }
        float _2117;
        if (_1606 > 0.0)
        {
            _2117 = abs((1.0 - _1597) / _1606);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1606 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1597 + 1.0) / _1606);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2117 = frontier_phi_40_35_ladder;
        }
        float _2119 = isnan(_1860) ? _1634 : (isnan(_1634) ? _1860 : min(_1634, _1860));
        float _2120 = isnan(_2117) ? _2119 : (isnan(_2119) ? _2117 : min(_2119, _2117));
        float _2124 = (_2120 * _1600) + _1589;
        float _2125 = (_2120 * _1603) + _1593;
        float _2126 = (_2120 * _1606) + _1597;
        float _2127 = _2120 * 9.9999997473787516355514526367188e-05;
        float _2129 = (-1.0) - _2127;
        float _2131 = _2127 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2126 > _2131) || ((_2126 < _2129) || ((_2125 > _2131) || ((_2125 < _2129) || ((_2124 < _2129) || (_2124 > _2131))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2254 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2126, cbModelParam._m0[9u].z, fma(_2125, cbModelParam._m0[9u].y, _2124 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2126, cbModelParam._m0[10u].z, fma(_2125, cbModelParam._m0[10u].y, _2124 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2126, cbModelParam._m0[11u].z, fma(_2125, cbModelParam._m0[11u].y, _2124 * cbModelParam._m0[11u].x))), _1540);
            frontier_phi_18_40_ladder = _2254.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2254.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2254.x * cbModelParam._m0[1u].y;
        }
        _1622 = frontier_phi_18_40_ladder_2;
        _1624 = frontier_phi_18_40_ladder_1;
        _1626 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1610 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_702, _703, _704), _1540);
        _1622 = _1610.x * cbModelParam._m0[1u].y;
        _1624 = _1610.y * cbModelParam._m0[1u].y;
        _1626 = _1610.z * cbModelParam._m0[1u].y;
    }
    float _1630 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _515);
    float _1631 = isnan(_1630) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1630 : min(cbModelParam._m0[25u].w, _1630));
    float _1722;
    float _1724;
    float _1726;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1686 = fma(_766, cbModelParam._m0[21u].z, fma(_762, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _758)) + cbModelParam._m0[21u].w;
        float _1690 = fma(_766, cbModelParam._m0[22u].z, fma(_762, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _758)) + cbModelParam._m0[22u].w;
        float _1694 = fma(_766, cbModelParam._m0[23u].z, fma(_762, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _758)) + cbModelParam._m0[23u].w;
        float _1697 = fma(_704, cbModelParam._m0[21u].z, fma(_703, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _702));
        float _1700 = fma(_704, cbModelParam._m0[22u].z, fma(_703, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _702));
        float _1703 = fma(_704, cbModelParam._m0[23u].z, fma(_703, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _702));
        float _1865;
        if (_1697 > 0.0)
        {
            _1865 = abs((1.0 - _1686) / _1697);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1697 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1686 + 1.0) / _1697);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1865 = frontier_phi_30_26_ladder;
        }
        float _2144;
        if (_1700 > 0.0)
        {
            _2144 = abs((1.0 - _1690) / _1700);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1700 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1690 + 1.0) / _1700);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2144 = frontier_phi_42_37_ladder;
        }
        float _2357;
        if (_1703 > 0.0)
        {
            _2357 = abs((1.0 - _1694) / _1703);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1703 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1694 + 1.0) / _1703);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2357 = frontier_phi_51_48_ladder;
        }
        float _2359 = isnan(_2144) ? _1865 : (isnan(_1865) ? _2144 : min(_1865, _2144));
        float _2360 = isnan(_2357) ? _2359 : (isnan(_2359) ? _2357 : min(_2359, _2357));
        float _2364 = (_2360 * _1697) + _1686;
        float _2365 = (_2360 * _1700) + _1690;
        float _2366 = (_2360 * _1703) + _1694;
        float _2367 = _2360 * 9.9999997473787516355514526367188e-05;
        float _2368 = (-1.0) - _2367;
        float _2370 = _2367 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2366 > _2370) || ((_2366 < _2368) || ((_2365 > _2370) || ((_2365 < _2368) || ((_2364 < _2368) || (_2364 > _2370))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2565 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2366, cbModelParam._m0[17u].z, fma(_2365, cbModelParam._m0[17u].y, _2364 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2366, cbModelParam._m0[18u].z, fma(_2365, cbModelParam._m0[18u].y, _2364 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2366, cbModelParam._m0[19u].z, fma(_2365, cbModelParam._m0[19u].y, _2364 * cbModelParam._m0[19u].x))), _1631);
            frontier_phi_27_51_ladder = _2565.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2565.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2565.x * cbModelParam._m0[1u].z;
        }
        _1722 = frontier_phi_27_51_ladder_2;
        _1724 = frontier_phi_27_51_ladder_1;
        _1726 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1706 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_702, _703, _704), _1631);
        _1722 = _1706.x * cbModelParam._m0[1u].z;
        _1724 = _1706.y * cbModelParam._m0[1u].z;
        _1726 = _1706.z * cbModelParam._m0[1u].z;
    }
    float _1739 = (((_729 * _678) + _730) * _694) * ((cbModelParam._m0[1u].w * (_1722 - _1622)) + _1622);
    float _1741 = (((_729 * _680) + _730) * _694) * ((cbModelParam._m0[1u].w * (_1724 - _1624)) + _1624);
    float _1743 = (((_729 * _681) + _730) * _694) * ((cbModelParam._m0[1u].w * (_1726 - _1626)) + _1626);
    float _1746 = fma(_1743, cbSceneParam._m0[89u].z, fma(_1741, cbSceneParam._m0[89u].y, _1739 * cbSceneParam._m0[89u].x));
    float _1749 = fma(_1743, cbSceneParam._m0[90u].z, fma(_1741, cbSceneParam._m0[90u].y, _1739 * cbSceneParam._m0[90u].x));
    float _1752 = fma(_1743, cbSceneParam._m0[91u].z, fma(_1741, cbSceneParam._m0[91u].y, _1739 * cbSceneParam._m0[91u].x));
    vec4 _1760 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_614, _615));
    float _1762 = _1760.w;
    float _1774 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1762);
    float _1775 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1762);
    float _1776 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1762);
    uvec4 _1780 = floatBitsToUint(cbInstanceData._m0[_241 + 5u]);
    uint _1782 = _1780.x * 14u;
    uint _1783 = _1782 + 13u;
    float _1790 = _694 + (-1.0);
    float _1795 = (cbLight._m0[_1783].x * _1790) + 1.0;
    float _1796 = (cbLight._m0[_1783].y * _1790) + 1.0;
    float _1797 = (cbLight._m0[_1783].z * _1790) + 1.0;
    float _1798 = (cbLight._m0[_1783].w * _1790) + 1.0;
    uint _1799 = _1782 + 5u;
    float _1805 = isnan(1.0) ? _1796 : (isnan(_1796) ? 1.0 : min(_1796, 1.0));
    uint _1809 = _1782 + 4u;
    float _1819 = isnan(1.0) ? _1795 : (isnan(_1795) ? 1.0 : min(_1795, 1.0));
    uint _1823 = _1782 | 1u;
    float _1834 = dot(vec3(cbLight._m0[_1782].xyz), vec3(_512, _513, _514));
    float _1837 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_512, _513, _514));
    float _4048 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _4059 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1842 = (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * 0.3183098733425140380859375;
    float _1844 = (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * 0.3183098733425140380859375;
    float _1851 = ((cbLight._m0[_1799].x * _1805) * _1844) + (((cbLight._m0[_1809].x * _1774) * _1819) * _1842);
    float _1852 = ((_1805 * cbLight._m0[_1799].y) * _1844) + (((cbLight._m0[_1809].y * _1775) * _1819) * _1842);
    float _1853 = ((_1805 * cbLight._m0[_1799].z) * _1844) + (((cbLight._m0[_1809].z * _1776) * _1819) * _1842);
    uvec4 _1857 = floatBitsToUint(cbLight._m0[_1782 + 12u]);
    bool _1859 = _1857.x == 0u;
    float _1870;
    float _1872;
    float _1874;
    if (_1859)
    {
        _1870 = _1851;
        _1872 = _1852;
        _1874 = _1853;
    }
    else
    {
        uint _1878 = _1782 + 6u;
        float _1894 = (dot(vec3(cbLight._m0[_1782 + 2u].xyz), vec3(_512, _513, _514)) * 0.5) + 0.5;
        float _1895 = _1894 * _1894;
        float _4070 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        float _1896 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1897 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
        _1870 = (((cbLight._m0[_1878].x * 0.3183098733425140380859375) * _1896) * _1897) + _1851;
        _1872 = (((cbLight._m0[_1878].y * 0.3183098733425140380859375) * _1896) * _1897) + _1852;
        _1874 = (((cbLight._m0[_1878].z * 0.3183098733425140380859375) * _1896) * _1897) + _1853;
    }
    bool _1877 = _1857.y == 0u;
    float _1915;
    float _1917;
    float _1919;
    if (_1877)
    {
        _1915 = _1870;
        _1917 = _1872;
        _1919 = _1874;
    }
    else
    {
        uint _2088 = _1782 + 7u;
        float _2104 = (dot(vec3(cbLight._m0[_1782 + 3u].xyz), vec3(_512, _513, _514)) * 0.5) + 0.5;
        float _2105 = _2104 * _2104;
        float _4086 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2106 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _2107 = isnan(1.0) ? _1798 : (isnan(_1798) ? 1.0 : min(_1798, 1.0));
        _1915 = (((cbLight._m0[_2088].x * 0.3183098733425140380859375) * _2106) * _2107) + _1870;
        _1917 = (((cbLight._m0[_2088].y * 0.3183098733425140380859375) * _2106) * _2107) + _1872;
        _1919 = (((cbLight._m0[_2088].z * 0.3183098733425140380859375) * _2106) * _2107) + _1874;
    }
    uint _1922 = _1782 + 8u;
    float _1935 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1782].w)) * _515) * 0.949999988079071044921875);
    float _1936 = _1935 * _1935;
    float _1937 = cbLight._m0[_1782].x + _596;
    float _1938 = cbLight._m0[_1782].y + _597;
    float _1939 = cbLight._m0[_1782].z + _598;
    float _1943 = inversesqrt(dot(vec3(_1937, _1938, _1939), vec3(_1937, _1938, _1939)));
    float _1944 = _1943 * _1937;
    float _1945 = _1943 * _1938;
    float _1946 = _1943 * _1939;
    float _1947 = dot(vec3(_512, _513, _514), vec3(cbLight._m0[_1782].xyz));
    float _4102 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _1950 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _4113 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _1951 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _1952 = dot(vec3(_512, _513, _514), vec3(_1944, _1945, _1946));
    float _4124 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _1955 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
    float _1956 = dot(vec3(cbLight._m0[_1782].xyz), vec3(_1944, _1945, _1946));
    float _4135 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _1960 = _1936 * _1936;
    float _1964 = ((_1955 * _1955) * (_1960 + (-1.0))) + 1.0;
    float _1972 = exp2(log2(1.0 - (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0)))) * 5.0);
    float _1973 = 0.959999978542327880859375 - _675;
    float _1975 = 0.959999978542327880859375 - _676;
    float _1976 = 0.959999978542327880859375 - _677;
    float _1983 = 1.0 - _1936;
    float _1994 = (0.5 / (((_1951 * ((_1950 * _1983) + _1936)) + 9.9999999392252902907785028219223e-09) + (((_1951 * _1983) + _1936) * _1950))) * _1950;
    float _4146 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _1996 = (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_1960 / ((_1964 * _1964) * 3.141590118408203125));
    uint _2010 = _1782 + 9u;
    float _2021 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1823].w)) * _515) * 0.949999988079071044921875);
    float _2022 = _2021 * _2021;
    float _2023 = cbLight._m0[_1823].x + _596;
    float _2024 = cbLight._m0[_1823].y + _597;
    float _2025 = cbLight._m0[_1823].z + _598;
    float _2029 = inversesqrt(dot(vec3(_2023, _2024, _2025), vec3(_2023, _2024, _2025)));
    float _2030 = _2029 * _2023;
    float _2031 = _2029 * _2024;
    float _2032 = _2029 * _2025;
    float _2033 = dot(vec3(_512, _513, _514), vec3(cbLight._m0[_1823].xyz));
    float _4157 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2036 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
    float _2037 = dot(vec3(_512, _513, _514), vec3(_2030, _2031, _2032));
    float _4168 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2040 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
    float _2041 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_2030, _2031, _2032));
    float _4179 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2045 = _2022 * _2022;
    float _2049 = ((_2040 * _2040) * (_2045 + (-1.0))) + 1.0;
    float _2056 = exp2(log2(1.0 - (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0)))) * 5.0);
    float _2063 = 1.0 - _2022;
    float _2073 = (0.5 / (((_1951 * ((_2036 * _2063) + _2022)) + 9.9999999392252902907785028219223e-09) + (((_1951 * _2063) + _2022) * _2036))) * _2036;
    float _4190 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2075 = (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_2045 / ((_2049 * _2049) * 3.141590118408203125));
    float _2085 = (((((_2056 * _1973) + _678) * cbLight._m0[_2010].x) * _2075) * _1805) + ((((cbLight._m0[_1922].x * _1774) * ((_1972 * _1973) + _678)) * _1996) * _1819);
    float _2086 = (((((_2056 * _1975) + _680) * cbLight._m0[_2010].y) * _2075) * _1805) + ((((cbLight._m0[_1922].y * _1775) * ((_1972 * _1975) + _680)) * _1996) * _1819);
    float _2087 = (((((_2056 * _1976) + _681) * cbLight._m0[_2010].z) * _2075) * _1805) + ((((cbLight._m0[_1922].z * _1776) * ((_1972 * _1976) + _681)) * _1996) * _1819);
    float _2149;
    float _2151;
    float _2153;
    if (_1859)
    {
        _2149 = _2085;
        _2151 = _2086;
        _2153 = _2087;
    }
    else
    {
        uint _2155 = _1782 + 2u;
        uint _2159 = _1782 + 10u;
        float _2173 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2155].w)) * _515) * 0.949999988079071044921875);
        float _2174 = _2173 * _2173;
        float _2175 = cbLight._m0[_2155].x + _596;
        float _2176 = cbLight._m0[_2155].y + _597;
        float _2177 = cbLight._m0[_2155].z + _598;
        float _2181 = inversesqrt(dot(vec3(_2175, _2176, _2177), vec3(_2175, _2176, _2177)));
        float _2182 = _2181 * _2175;
        float _2183 = _2181 * _2176;
        float _2184 = _2181 * _2177;
        float _2185 = dot(vec3(_512, _513, _514), vec3(cbLight._m0[_2155].xyz));
        float _4201 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
        float _2188 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _2189 = dot(vec3(_512, _513, _514), vec3(_2182, _2183, _2184));
        float _4212 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        float _2192 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _2193 = dot(vec3(cbLight._m0[_2155].xyz), vec3(_2182, _2183, _2184));
        float _4223 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2197 = _2174 * _2174;
        float _2201 = ((_2192 * _2192) * (_2197 + (-1.0))) + 1.0;
        float _2208 = exp2(log2(1.0 - (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0)))) * 5.0);
        float _2215 = 1.0 - _2174;
        float _2225 = (0.5 / (((_1951 * ((_2188 * _2215) + _2174)) + 9.9999999392252902907785028219223e-09) + (((_1951 * _2215) + _2174) * _2188))) * _2188;
        float _4234 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2227 = (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_2197 / ((_2201 * _2201) * 3.141590118408203125));
        float _2228 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
        _2149 = (((((_2208 * _1973) + _678) * cbLight._m0[_2159].x) * _2227) * _2228) + _2085;
        _2151 = (((((_2208 * _1975) + _680) * cbLight._m0[_2159].y) * _2227) * _2228) + _2086;
        _2153 = (((((_2208 * _1976) + _681) * cbLight._m0[_2159].z) * _2227) * _2228) + _2087;
    }
    float _2263;
    float _2265;
    float _2267;
    if (_1877)
    {
        _2263 = _2149;
        _2265 = _2151;
        _2267 = _2153;
    }
    else
    {
        uint _2274 = _1782 + 3u;
        uint _2278 = _1782 + 11u;
        float _2292 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2274].w)) * _515) * 0.949999988079071044921875);
        float _2293 = _2292 * _2292;
        float _2294 = cbLight._m0[_2274].x + _596;
        float _2295 = cbLight._m0[_2274].y + _597;
        float _2296 = cbLight._m0[_2274].z + _598;
        float _2300 = inversesqrt(dot(vec3(_2294, _2295, _2296), vec3(_2294, _2295, _2296)));
        float _2301 = _2300 * _2294;
        float _2302 = _2300 * _2295;
        float _2303 = _2300 * _2296;
        float _2304 = dot(vec3(_512, _513, _514), vec3(cbLight._m0[_2274].xyz));
        float _4250 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2307 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _2308 = dot(vec3(_512, _513, _514), vec3(_2301, _2302, _2303));
        float _4261 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2311 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _2312 = dot(vec3(cbLight._m0[_2274].xyz), vec3(_2301, _2302, _2303));
        float _4272 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2316 = _2293 * _2293;
        float _2320 = ((_2311 * _2311) * (_2316 + (-1.0))) + 1.0;
        float _2327 = exp2(log2(1.0 - (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0)))) * 5.0);
        float _2334 = 1.0 - _2293;
        float _2344 = (0.5 / (((_1951 * ((_2307 * _2334) + _2293)) + 9.9999999392252902907785028219223e-09) + (((_1951 * _2334) + _2293) * _2307))) * _2307;
        float _4283 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        float _2346 = (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_2316 / ((_2320 * _2320) * 3.141590118408203125));
        float _2347 = isnan(1.0) ? _1798 : (isnan(_1798) ? 1.0 : min(_1798, 1.0));
        _2263 = (((((_2327 * _1973) + _678) * cbLight._m0[_2278].x) * _2346) * _2347) + _2149;
        _2265 = (((((_2327 * _1975) + _680) * cbLight._m0[_2278].y) * _2346) * _2347) + _2151;
        _2267 = (((((_2327 * _1976) + _681) * cbLight._m0[_2278].z) * _2346) * _2347) + _2153;
    }
    float _2482;
    float _2484;
    float _2486;
    float _2488;
    float _2490;
    float _2492;
    if (_1780.y == 0u)
    {
        float _2422 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2423 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2422;
        float _2424 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2422;
        float _2425 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2422;
        uvec4 _2437 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2438 = _2437.x;
        uint _2449 = uint((float(_2437.y) * floor(float(uint(cbSceneParam._m0[85u].y * _615) / _2438))) + floor(float(uint(cbSceneParam._m0[85u].x * _614) / _2438)));
        float _2459 = (log2(_2425 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2460 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        uint _2463 = uint(isnan(14.0) ? _2460 : (isnan(_2460) ? 14.0 : min(_2460, 14.0)));
        uvec4 _2468 = texelFetch(g_lightClusterGridBuffer, int(((_2463 << 2u) + (_2449 << 6u)) >> 2u));
        uint _2469 = _2468.x;
        uint _2470 = _2437.z;
        float _2570;
        float _2572;
        float _2574;
        float _2576;
        float _2578;
        float _2580;
        if (((((1u << ((_2470 >> 4u) & 15u)) + 4294967295u) & _2469) == 0u) || ((_2470 & 240u) == 0u))
        {
            _2570 = 0.0;
            _2572 = 0.0;
            _2574 = 0.0;
            _2576 = 0.0;
            _2578 = 0.0;
            _2580 = 0.0;
        }
        else
        {
            float _2571;
            float _2573;
            float _2575;
            float _2577;
            float _2579;
            float _2581;
            float _2723 = 0.0;
            float _2724 = 0.0;
            float _2725 = 0.0;
            float _2726 = 0.0;
            float _2727 = 0.0;
            float _2728 = 0.0;
            uint _2729 = 0u;
            uint _2738;
            bool _2739;
            for (;;)
            {
                _2738 = texelFetch(g_lightClassification, int((((_2463 << 5u) + (_2449 << 9u)) + (_2729 << 2u)) >> 2u)).x;
                _2739 = _2738 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2739)
                {
                    frontier_phi_68_pred = _2723;
                    frontier_phi_68_pred_1 = _2728;
                    frontier_phi_68_pred_2 = _2727;
                    frontier_phi_68_pred_3 = _2726;
                    frontier_phi_68_pred_4 = _2725;
                    frontier_phi_68_pred_5 = _2724;
                }
                else
                {
                    float _2868;
                    float _2869;
                    float _2870;
                    float _2871;
                    float _2872;
                    float _2873;
                    uint _2874;
                    _2868 = _2723;
                    _2869 = _2724;
                    _2870 = _2725;
                    _2871 = _2726;
                    _2872 = _2727;
                    _2873 = _2728;
                    _2874 = _2738;
                    float _2795;
                    float _2796;
                    float _2797;
                    float _2798;
                    float _2799;
                    float _2800;
                    for (;;)
                    {
                        uint _2878 = uint(findLSB(_2874)) + (_2729 << 5u);
                        uint _2875 = (_2874 + 4294967295u) & _2874;
                        uint _2880 = _2878 * 48u;
                        vec4 _2894 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2880)).x, texelFetch(g_PointLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2880 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2880 + 3u)).x));
                        uint _2900 = (_2878 * 48u) + 4u;
                        vec4 _2913 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2900)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 3u)).x));
                        uint _2919 = (_2878 * 48u) + 8u;
                        vec3 _2930 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2919)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 2u)).x));
                        float _2934 = _2894.x - _2423;
                        float _2935 = _2894.y - _2424;
                        float _2936 = _2894.z - _2425;
                        float _2937 = dot(vec3(_2934, _2935, _2936), vec3(_2934, _2935, _2936));
                        float _2940 = inversesqrt(_2937);
                        float _2941 = _2940 * _2934;
                        float _2942 = _2940 * _2935;
                        float _2943 = _2940 * _2936;
                        float _2944 = dot(vec3(_635, _638, _641), vec3(_2941, _2942, _2943));
                        float _2949 = 1.0 - (_2937 * _2894.w);
                        float _4309 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
                        float _2950 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
                        float _2951 = sqrt(_2937) * _2913.w;
                        float _2954 = 1.39999997615814208984375 / (_2951 + 1.39999997615814208984375);
                        float _2955 = _2954 * _2954;
                        float _2958 = ((1.0 - _2955) * _2944) + _2955;
                        float _2961 = _2951 * _2951;
                        float _2965 = ((isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0))) * _2950) / ((_2961 * 0.699999988079071044921875) + 1.0);
                        float _2969 = (-0.0) - _2423;
                        float _2970 = (-0.0) - _2424;
                        float _2971 = (-0.0) - _2425;
                        float _2975 = inversesqrt(dot(vec3(_2969, _2970, _2971), vec3(_2969, _2970, _2971)));
                        float _2976 = _2975 * _2969;
                        float _2977 = _2975 * _2970;
                        float _2978 = _2975 * _2971;
                        float _2986 = exp2(log2(1.0 / ((_2961 * 3.5) + 5.0)) * 0.25);
                        float _2987 = 1.0 - _710;
                        float _2994 = sqrt(1.0 - ((1.0 - (_2987 * _2987)) * (1.0 - (_2986 * _2986))));
                        float _2995 = _2994 * _2994;
                        float _2996 = _2995 * _2995;
                        float _2997 = _2976 + _2941;
                        float _2998 = _2977 + _2942;
                        float _2999 = _2978 + _2943;
                        float _3003 = inversesqrt(dot(vec3(_2997, _2998, _2999), vec3(_2997, _2998, _2999)));
                        float _3007 = dot(vec3(_635, _638, _641), vec3(_2976, _2977, _2978));
                        float _4325 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                        float _3010 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                        float _3011 = dot(vec3(_635, _638, _641), vec3(_3003 * _2997, _3003 * _2998, _3003 * _2999));
                        float _4336 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                        float _3014 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                        float _3018 = ((_3014 * _3014) * (_2996 + (-1.0))) + 1.0;
                        float _3019 = _2954 * _2995;
                        float _3020 = _3019 * _3019;
                        float _3023 = ((1.0 - _3020) * _2944) + _3020;
                        float _4347 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                        float _3024 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
                        float _3025 = 1.0 - _2995;
                        float _3035 = (0.5 / (((_3024 * ((_3010 * _3025) + _2995)) + 9.9999999392252902907785028219223e-09) + (((_3024 * _3025) + _2995) * _3010))) * _3024;
                        float _4358 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                        float _3046 = (((_2996 * 3.1415927410125732421875) * (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0)))) / ((_3018 * _3018) * ((_2961 * 2.1991131305694580078125) + 3.141590118408203125))) * _2950;
                        _2798 = (_2965 * _2913.x) + _2871;
                        _2799 = (_2965 * _2913.y) + _2872;
                        _2800 = (_2965 * _2913.z) + _2873;
                        _2795 = (_3046 * _2930.x) + _2868;
                        _2796 = (_3046 * _2930.y) + _2869;
                        _2797 = (_3046 * _2930.z) + _2870;
                        if (_2875 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2868 = _2795;
                            _2869 = _2796;
                            _2870 = _2797;
                            _2871 = _2798;
                            _2872 = _2799;
                            _2873 = _2800;
                            _2874 = _2875;
                        }
                    }
                    frontier_phi_68_pred = _2795;
                    frontier_phi_68_pred_1 = _2800;
                    frontier_phi_68_pred_2 = _2799;
                    frontier_phi_68_pred_3 = _2798;
                    frontier_phi_68_pred_4 = _2797;
                    frontier_phi_68_pred_5 = _2796;
                }
                _2571 = frontier_phi_68_pred;
                _2581 = frontier_phi_68_pred_1;
                _2579 = frontier_phi_68_pred_2;
                _2577 = frontier_phi_68_pred_3;
                _2575 = frontier_phi_68_pred_4;
                _2573 = frontier_phi_68_pred_5;
                uint _2730 = _2729 + 1u;
                if (_2730 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2723 = _2571;
                    _2724 = _2573;
                    _2725 = _2575;
                    _2726 = _2577;
                    _2727 = _2579;
                    _2728 = _2581;
                    _2729 = _2730;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2570 = _2571;
            _2572 = _2573;
            _2574 = _2575;
            _2576 = _2577;
            _2578 = _2579;
            _2580 = _2581;
        }
        uvec4 _2584 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2585 = _2584.z;
        uint _2587 = (_2585 >> 8u) & 15u;
        float _2691;
        float _2693;
        float _2695;
        float _2697;
        float _2699;
        float _2701;
        if (((4294967295u << _2587) & _2469) == 0u)
        {
            _2691 = _2570;
            _2693 = _2572;
            _2695 = _2574;
            _2697 = _2576;
            _2699 = _2578;
            _2701 = _2580;
        }
        else
        {
            float _2716 = inversesqrt(dot(vec3(_2423, _2424, _2425), vec3(_2423, _2424, _2425)));
            float _2717 = _2716 * _2423;
            float _2718 = _2716 * _2424;
            float _2719 = _2716 * _2425;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2587 < ((_2585 >> 12u) & 15u))
            {
                float _2692;
                float _2694;
                float _2696;
                float _2698;
                float _2700;
                float _2702;
                float _2851 = _2570;
                float _2852 = _2572;
                float _2853 = _2574;
                float _2854 = _2576;
                float _2855 = _2578;
                float _2856 = _2580;
                uint _2857 = _2587;
                uint _2866;
                bool _2867;
                for (;;)
                {
                    _2866 = texelFetch(g_lightClassification, int((((_2463 << 5u) + (_2449 << 9u)) + (_2857 << 2u)) >> 2u)).x;
                    _2867 = _2866 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2867)
                    {
                        frontier_phi_79_pred = _2856;
                        frontier_phi_79_pred_1 = _2855;
                        frontier_phi_79_pred_2 = _2854;
                        frontier_phi_79_pred_3 = _2853;
                        frontier_phi_79_pred_4 = _2852;
                        frontier_phi_79_pred_5 = _2851;
                    }
                    else
                    {
                        float _3060;
                        float _3061;
                        float _3062;
                        float _3063;
                        float _3064;
                        float _3065;
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3359;
                        float _3073 = _2851;
                        float _3074 = _2852;
                        float _3075 = _2853;
                        float _3076 = _2854;
                        float _3077 = _2855;
                        float _3078 = _2856;
                        uint _3079 = _2866;
                        uint _3080;
                        vec4 _3105;
                        float _3106;
                        vec4 _3121;
                        vec3 _3133;
                        vec4 _3149;
                        vec4 _3164;
                        float _3210;
                        bool _3211;
                        for (;;)
                        {
                            uint _3090 = ((_2857 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3079));
                            _3080 = (_3079 + 4294967295u) & _3079;
                            uint _3092 = _3090 * 40u;
                            _3105 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3092)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 3u)).x));
                            _3106 = _3105.w;
                            uint _3108 = (_3090 * 40u) + 4u;
                            _3121 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3108)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 3u)).x));
                            uint _3123 = (_3090 * 40u) + 8u;
                            _3133 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3123)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 2u)).x));
                            uint _3136 = (_3090 * 40u) + 16u;
                            _3149 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3136)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 3u)).x));
                            uint _3151 = (_3090 * 40u) + 20u;
                            _3164 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3151)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 3u)).x));
                            uint _3166 = (_3090 * 40u) + 24u;
                            vec4 _3179 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3166)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 3u)).x));
                            uint _3185 = (_3090 * 40u) + 28u;
                            vec4 _3198 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3185)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 3u)).x));
                            _3210 = fma(_2425, _3198.z, fma(_2424, _3198.y, _3198.x * _2423)) + _3198.w;
                            _3211 = !((fma(_2425, _3179.z, fma(_2424, _3179.y, _3179.x * _2423)) + _3179.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3211)
                            {
                                float _3238 = _3105.x - _2423;
                                float _3239 = _3105.y - _2424;
                                float _3240 = _3105.z - _2425;
                                float _3241 = dot(vec3(_3238, _3239, _3240), vec3(_3238, _3239, _3240));
                                float _3244 = inversesqrt(_3241);
                                float _3245 = _3244 * _3238;
                                float _3246 = _3244 * _3239;
                                float _3247 = _3244 * _3240;
                                float _3251 = 1.0 - (_3241 / (_3106 * _3106));
                                float _4369 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
                                float _3252 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
                                float _3256 = sqrt(_3241) * _3121.w;
                                float _3258 = 1.39999997615814208984375 / (_3256 + 1.39999997615814208984375);
                                float _3259 = _3258 * _3258;
                                float _3262 = ((1.0 - _3259) * dot(vec3(_3245, _3246, _3247), vec3(_635, _638, _641))) + _3259;
                                float _3265 = _3256 * _3256;
                                float _3269 = (fma(_2425, _3149.z, fma(_2424, _3149.y, _3149.x * _2423)) + _3149.w) / _3210;
                                float _3270 = (fma(_2425, _3164.z, fma(_2424, _3164.y, _3164.x * _2423)) + _3164.w) / _3210;
                                float _3274 = 1.0 - dot(vec2(_3269, _3270), vec2(_3269, _3270));
                                float _4385 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                                float _3275 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                                float _3276 = _3275 * (((isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0))) * _3252) / ((_3265 * 0.699999988079071044921875) + 1.0));
                                float _3288 = exp2(log2(1.0 / ((_3265 * 3.5) + 5.0)) * 0.25);
                                float _3289 = 1.0 - _710;
                                float _3296 = sqrt(1.0 - ((1.0 - (_3289 * _3289)) * (1.0 - (_3288 * _3288))));
                                float _3297 = _3296 * _3296;
                                float _3298 = _3297 * _3297;
                                float _3299 = _3245 - _2717;
                                float _3300 = _3246 - _2718;
                                float _3301 = _3247 - _2719;
                                float _3305 = inversesqrt(dot(vec3(_3299, _3300, _3301), vec3(_3299, _3300, _3301)));
                                float _3309 = dot(vec3(_635, _638, _641), vec3((-0.0) - _2717, (-0.0) - _2718, (-0.0) - _2719));
                                float _4396 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                                float _3312 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
                                float _3313 = dot(vec3(_635, _638, _641), vec3(_3305 * _3299, _3305 * _3300, _3305 * _3301));
                                float _4407 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                                float _3316 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                                float _3320 = ((_3316 * _3316) * (_3298 + (-1.0))) + 1.0;
                                float _3321 = _3258 * _3297;
                                float _3322 = _3321 * _3321;
                                float _3328 = ((1.0 - _3322) * dot(vec3(_635, _638, _641), vec3(_3245, _3246, _3247))) + _3322;
                                float _4418 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                                float _3329 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
                                float _3330 = 1.0 - _3297;
                                float _3340 = (0.5 / (((_3329 * ((_3312 * _3330) + _3297)) + 9.9999999392252902907785028219223e-09) + (((_3329 * _3330) + _3297) * _3312))) * _3329;
                                float _4429 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                                float _3350 = (_3275 * _3252) * (((_3298 * 3.1415927410125732421875) * (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0)))) / ((_3320 * _3320) * ((_3265 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3276 * _3121.y;
                                frontier_phi_85_pred_1 = _3276 * _3121.x;
                                frontier_phi_85_pred_2 = _3350 * _3133.z;
                                frontier_phi_85_pred_3 = _3350 * _3133.y;
                                frontier_phi_85_pred_4 = _3350 * _3133.x;
                                frontier_phi_85_pred_5 = _3276 * _3121.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3358 = frontier_phi_85_pred;
                            _3357 = frontier_phi_85_pred_1;
                            _3356 = frontier_phi_85_pred_2;
                            _3355 = frontier_phi_85_pred_3;
                            _3354 = frontier_phi_85_pred_4;
                            _3359 = frontier_phi_85_pred_5;
                            _3063 = _3357 + _3076;
                            _3064 = _3358 + _3077;
                            _3065 = _3359 + _3078;
                            _3060 = _3354 + _3073;
                            _3061 = _3355 + _3074;
                            _3062 = _3356 + _3075;
                            if (_3080 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3073 = _3060;
                                _3074 = _3061;
                                _3075 = _3062;
                                _3076 = _3063;
                                _3077 = _3064;
                                _3078 = _3065;
                                _3079 = _3080;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3065;
                        frontier_phi_79_pred_1 = _3064;
                        frontier_phi_79_pred_2 = _3063;
                        frontier_phi_79_pred_3 = _3062;
                        frontier_phi_79_pred_4 = _3061;
                        frontier_phi_79_pred_5 = _3060;
                    }
                    _2702 = frontier_phi_79_pred;
                    _2700 = frontier_phi_79_pred_1;
                    _2698 = frontier_phi_79_pred_2;
                    _2696 = frontier_phi_79_pred_3;
                    _2694 = frontier_phi_79_pred_4;
                    _2692 = frontier_phi_79_pred_5;
                    uint _2858 = _2857 + 1u;
                    if (_2858 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2851 = _2692;
                        _2852 = _2694;
                        _2853 = _2696;
                        _2854 = _2698;
                        _2855 = _2700;
                        _2856 = _2702;
                        _2857 = _2858;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2696;
                frontier_phi_60_61_ladder_1 = _2702;
                frontier_phi_60_61_ladder_2 = _2700;
                frontier_phi_60_61_ladder_3 = _2698;
                frontier_phi_60_61_ladder_4 = _2694;
                frontier_phi_60_61_ladder_5 = _2692;
            }
            else
            {
                frontier_phi_60_61_ladder = _2574;
                frontier_phi_60_61_ladder_1 = _2580;
                frontier_phi_60_61_ladder_2 = _2578;
                frontier_phi_60_61_ladder_3 = _2576;
                frontier_phi_60_61_ladder_4 = _2572;
                frontier_phi_60_61_ladder_5 = _2570;
            }
            _2691 = frontier_phi_60_61_ladder_5;
            _2693 = frontier_phi_60_61_ladder_4;
            _2695 = frontier_phi_60_61_ladder;
            _2697 = frontier_phi_60_61_ladder_3;
            _2699 = frontier_phi_60_61_ladder_2;
            _2701 = frontier_phi_60_61_ladder_1;
        }
        float _2706 = isnan(1.0) ? _694 : (isnan(_694) ? 1.0 : min(_694, 1.0));
        _2482 = (_2706 * _2697) + _1915;
        _2484 = (_2706 * _2699) + _1917;
        _2486 = (_2706 * _2701) + _1919;
        _2488 = ((_2691 * _678) * _2706) + _2263;
        _2490 = ((_2693 * _680) * _2706) + _2265;
        _2492 = ((_2695 * _681) * _2706) + _2267;
    }
    else
    {
        _2482 = _1915;
        _2484 = _1917;
        _2486 = _1919;
        _2488 = _2263;
        _2490 = _2265;
        _2492 = _2267;
    }
    float _4445 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _4456 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _4467 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _2509 = ((isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_2482 + ((isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))) * _694))) + ((_2488 + ((isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))) * _1529)) * cbPerFrame._m0[3u].x);
    float _2510 = ((isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_2484 + ((isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0))) * _694))) + ((_2490 + ((isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))) * _1529)) * cbPerFrame._m0[3u].x);
    float _2511 = ((isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_2486 + ((isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))) * _694))) + ((_2492 + ((isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))) * _1529)) * cbPerFrame._m0[3u].x);
    uint _2512 = _241 + 6u;
    float _2520 = _614 / cbSceneParam._m0[86u].x;
    float _2521 = _615 / cbSceneParam._m0[86u].y;
    vec4 _2535 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2520, _2521, (log2((isnan(cbSceneParam._m0[77u].w) ? _538 : (isnan(_538) ? cbSceneParam._m0[77u].w : min(_538, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2537 = _2535.x;
    float _2538 = _2535.y;
    float _2539 = _2535.z;
    float _2540 = _2535.w;
    float _2633;
    float _2635;
    float _2637;
    float _2639;
    if (_538 > cbSceneParam._m0[78u].w)
    {
        float _2595 = isnan(_538) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _538 : min(cbSceneParam._m0[80u].w, _538));
        float _2596 = _2595 / _538;
        float _2607 = _2596 * _589;
        float _2608 = _590 * _2596;
        float _2609 = (-0.0) - _2608;
        float _2611 = _2596 * _591;
        float _2613 = (cbSceneParam._m0[77u].w * _2609) / _2595;
        float _2614 = _2613 + cbSceneParam._m0[79u].w;
        float _2615 = cbSceneParam._m0[79u].w - _2608;
        float _2621 = sqrt(((_2607 * _2607) + (_2608 * _2608)) + (_2611 * _2611));
        float _2624 = (1.0 - (cbSceneParam._m0[77u].w / _2595)) * _2621;
        float _2629 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2631 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2808;
        if (abs((_2609 - _2613) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2808 = ((((_2614 > 0.0) ? exp2(_2629 * _2614) : (2.0 - exp2(_2631 * _2614))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2624;
        }
        else
        {
            float _2752 = 1.0 / cbSceneParam._m0[80u].x;
            float _2753 = isnan(_2615) ? _2614 : (isnan(_2614) ? _2615 : max(_2614, _2615));
            float _2754 = isnan(_2615) ? _2614 : (isnan(_2614) ? _2615 : min(_2614, _2615));
            float _2763 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : min(_2753, 0.0));
            float _2764 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : min(_2754, 0.0));
            _2808 = ((abs(_2621 / _2609) * cbSceneParam._m0[80u].y) * ((((_2763 - _2764) * 2.0) - ((exp2(_2629 * (isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0)))) - exp2(_2629 * (isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0))))) * _2752)) - ((exp2(_2631 * _2763) - exp2(_2631 * _2764)) * _2752))) + (_2624 * cbSceneParam._m0[80u].z);
        }
        vec4 _2810 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2520, _2521, 1.0), 0.0);
        float _2819 = exp2((_2808 * (-1.44269502162933349609375)) * (1.0 - _2810.w));
        float _2820 = log2(_2819);
        float _2836 = log2(_2540);
        _2633 = (exp2(_2836 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2820 * cbSceneParam._m0[78u].x)) * _2810.x) / cbSceneParam._m0[78u].x)) + _2537;
        _2635 = (exp2(_2836 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2820 * cbSceneParam._m0[78u].y)) * _2810.y) / cbSceneParam._m0[78u].y)) + _2538;
        _2637 = (exp2(_2836 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2820 * cbSceneParam._m0[78u].z)) * _2810.z) / cbSceneParam._m0[78u].z)) + _2539;
        _2639 = _2819 * _2540;
    }
    else
    {
        _2633 = _2537;
        _2635 = _2538;
        _2637 = _2539;
        _2639 = _2540;
    }
    bool _2846;
    vec4 _2649;
    vec4 _2671;
    float _2673;
    float _2677;
    float _2678;
    float _2679;
    float _2680;
    bool _2690;
    for (;;)
    {
        _2649 = cbMatDynParam._m0[0u];
        float _2651 = roundEven(_2649.y);
        bool _2652 = _2651 == 3.0;
        float _2653 = log2(_2639);
        float _2660 = exp2(_2653 * cbSceneParam._m0[78u].x) * _2509;
        float _2661 = exp2(_2653 * cbSceneParam._m0[78u].y) * _2510;
        float _2662 = exp2(_2653 * cbSceneParam._m0[78u].z) * _2511;
        float _2669 = _602 + (-0.5);
        _2671 = cbMtdParam._m0[1u];
        _2673 = _2671.y * _2669;
        float _2676 = (_2651 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2677 = _2676 * (_2652 ? _2660 : (_2660 + (cbSceneParam._m0[72u].w * _2633)));
        _2678 = _2676 * (_2652 ? _2661 : (_2661 + (cbSceneParam._m0[72u].w * _2635)));
        _2679 = _2676 * (_2652 ? _2662 : (_2662 + (cbSceneParam._m0[72u].w * _2637)));
        _2680 = _2669 * 0.999000012874603271484375;
        _2690 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2690)
        {
            if ((cbInstanceData._m0[_241 + 7u].x + _2680) < 0.5)
            {
                _2846 = true;
                break;
            }
        }
        uint _2787 = _654 + uint(_2649.w);
        if ((cbInstanceData._m0[_2787].w < 1.0) && ((cbInstanceData._m0[_2787].w + _2680) < 0.5))
        {
            _2846 = true;
            break;
        }
        if ((_2673 + 1.0) < _2671.x)
        {
            _2846 = true;
            break;
        }
        _2846 = false;
        break;
    }
    float _3051;
    if (_2846)
    {
        discard_state = true;
        _3051 = 0.0;
    }
    else
    {
        _3051 = cbInstanceData._m0[_2512].w;
    }
    SV_Target.x = _2677;
    SV_Target.y = _2678;
    SV_Target.z = _2679;
    SV_Target.w = _3051;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2512].w;
    discard_exit();
}


