#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _969;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _233 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _235 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _236 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3301 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3312 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3323 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    uint _246 = uint(roundEven(NORMAL.w)) * 13u;
    uint _251 = _246 + 1u;
    uint _255 = _246 + 2u;
    float _264 = sqrt(((cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x)) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x));
    float _265 = _264 * TEXCOORD.z;
    float _266 = _264 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _265) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _266) + cbTextureTilingScale._m0[13u].w));
    vec4 _302 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _307 = _302.x * cbMtdParam._m0[9u].x;
    float _308 = _302.y * cbMtdParam._m0[9u].y;
    float _309 = _302.z * cbMtdParam._m0[9u].z;
    float _313 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _279.x) * _307;
    float _316 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _279.y) * _308;
    float _319 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _279.z) * _309;
    float _326 = ((_307 - _313) * (isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0)))) + _313;
    float _327 = ((_308 - _316) * (isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0)))) + _316;
    float _328 = ((_309 - _319) * (isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0)))) + _319;
    vec4 _341 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _265) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _266) + cbTextureTilingScale._m0[20u].w));
    vec4 _367 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _371 = _367.z;
    float _375 = (_367.x * 2.0) + (-1.0);
    float _376 = (_367.y * 2.0) + (-1.0);
    float _377 = dot(vec2(_375, _376), vec2(_375, _376));
    float _3334 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _382 = sqrt(1.0 - (isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0))));
    float _387 = _375 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_341.x * 2.0) + (-1.0)));
    float _388 = _376 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_341.y * 2.0) + (-1.0)));
    vec4 _401 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _403 = _401.x;
    float _408 = (((_341.z - _371) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _371;
    float _410 = cbMtdParam._m0[22u].x + _367.w;
    float _413 = fma(_382, _212 * NORMAL.x, fma(_388, _219 * TANGENT.x, (_205 * _197) * _387));
    float _416 = fma(_382, _212 * NORMAL.y, fma(_388, _219 * TANGENT.y, (_205 * _198) * _387));
    float _419 = fma(_382, _212 * NORMAL.z, fma(_388, _219 * TANGENT.z, (_205 * _199) * _387));
    float _423 = inversesqrt(dot(vec3(_413, _416, _419), vec3(_413, _416, _419)));
    float _424 = _423 * _413;
    float _425 = _423 * _416;
    float _426 = _423 * _419;
    float _3345 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _427 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
    float _3356 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _3367 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _3378 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _3389 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _3400 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _432 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
    float _446 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _488 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _498 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _488);
    float _499 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _488);
    float _500 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _488);
    float _504 = inversesqrt(dot(vec3(_498, _499, _500), vec3(_498, _499, _500)));
    float _505 = _498 * _504;
    float _506 = _499 * _504;
    float _507 = _500 * _504;
    float _513 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _514 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _535 = fma(_426, cbSceneParam._m0[5u].z, fma(_425, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _424));
    float _538 = fma(_426, cbSceneParam._m0[6u].z, fma(_425, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _424));
    float _541 = fma(_426, cbSceneParam._m0[7u].z, fma(_425, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _424));
    uint _555 = (_246 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _561 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0)))) * cbInstanceData._m0[_555].x;
    float _562 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0)))) * cbInstanceData._m0[_555].y;
    float _563 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0)))) * cbInstanceData._m0[_555].z;
    float _3411 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _564 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
    float _3422 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _565 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
    float _3433 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _566 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
    float _567 = 1.0 - _432;
    float _568 = _564 * _567;
    float _569 = _565 * _567;
    float _570 = _566 * _567;
    float _575 = (_564 + (-0.039999999105930328369140625)) * _432;
    float _576 = (_565 + (-0.039999999105930328369140625)) * _432;
    float _577 = (_566 + (-0.039999999105930328369140625)) * _432;
    float _578 = _575 + 0.039999999105930328369140625;
    float _580 = _576 + 0.039999999105930328369140625;
    float _581 = _577 + 0.039999999105930328369140625;
    vec4 _590 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _513, cbSceneParam._m0[86u].y * _514));
    float _594 = ((isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0))) * TEXCOORD_5.w) * _590.x;
    float _595 = dot(vec3(_424, _425, _426), vec3(_505, _506, _507));
    float _598 = _595 * 2.0;
    float _602 = (_598 * _424) - _505;
    float _603 = (_598 * _425) - _506;
    float _604 = (_598 * _426) - _507;
    float _608 = abs(dot(vec3(_505, _506, _507), vec3(_424, _425, _426)));
    float _3444 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _610 = sqrt(_427);
    float _623 = exp2((_610 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_610 * 3.0));
    float _629 = (1.0 - _623) * ((_610 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _630 = _623 * _610;
    float _658 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _662 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _666 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _968;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _693 = fma(_666, cbModelParam._m0[26u].z, fma(_662, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _658));
        float _697 = fma(_666, cbModelParam._m0[27u].z, fma(_662, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _658));
        float _701 = fma(_666, cbModelParam._m0[28u].z, fma(_662, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _658));
        float _726 = _658 + _424;
        float _727 = _662 + _425;
        float _728 = _666 + _426;
        float _738 = fma(_728, cbModelParam._m0[26u].z, fma(_727, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _726)) - _693;
        float _739 = fma(_728, cbModelParam._m0[27u].z, fma(_727, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _726)) - _697;
        float _740 = fma(_728, cbModelParam._m0[28u].z, fma(_727, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _726)) - _701;
        float _744 = inversesqrt(dot(vec3(_738, _739, _740), vec3(_738, _739, _740)));
        float _757 = ((_744 * _738) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_693 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _758 = ((_744 * _739) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_697 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _759 = ((_744 * _740) / cbModelParam._m0[34u].z) + ((((((_701 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _762 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_757, _758, _759), 0.0);
        vec4 _769 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_757, _758, _759), 0.0);
        vec4 _776 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_757, _758, _759), 0.0);
        vec4 _783 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_757, _758, _759), 0.0);
        float _796 = exp2((_762.w + (-0.5)) * 20.0) * 2.0;
        float _797 = _796 * (_762.x + (-0.5));
        float _798 = _796 * (_762.y + (-0.5));
        float _799 = _796 * (_762.z + (-0.5));
        float _806 = exp2((_769.w + (-0.5)) * 20.0) * 2.0;
        float _807 = _806 * (_769.x + (-0.5));
        float _808 = _806 * (_769.y + (-0.5));
        float _809 = _806 * (_769.z + (-0.5));
        float _816 = exp2((_776.w + (-0.5)) * 20.0) * 2.0;
        float _817 = _816 * (_776.x + (-0.5));
        float _818 = _816 * (_776.y + (-0.5));
        float _819 = _816 * (_776.z + (-0.5));
        float _826 = exp2((_783.w + (-0.5)) * 20.0) * 2.0;
        float _827 = _826 * (_783.x + (-0.5));
        float _828 = _826 * (_783.y + (-0.5));
        float _829 = _826 * (_783.z + (-0.5));
        float _830 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _831 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _832 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _833 = _797 * 0.5;
        float _834 = _807 * 0.5;
        float _835 = _817 * 0.5;
        float _836 = dot(vec3(_833, _834, _835), vec3(_833, _834, _835));
        float _841 = (_836 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_836);
        float _850 = (dot(vec3(_424, _425, _426), vec3(_841 * _833, _841 * _834, _841 * _835)) + 1.0) * 0.5;
        float _3470 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _860 = sqrt(((_834 * _834) + (_833 * _833)) + (_835 * _835)) / (_830 + 9.9999997473787516355514526367188e-06);
        float _3481 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _861 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
        float _862 = _861 * 2.0;
        float _866 = (1.0 - _861) / (_861 + 1.0);
        float _3492 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _867 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
        float _876 = ((((1.0 - _867) * (_862 + 2.0)) * exp2(log2(isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0))) * (_862 + 1.0))) + _867) * _830;
        float _877 = _798 * 0.5;
        float _878 = _808 * 0.5;
        float _879 = _818 * 0.5;
        float _880 = dot(vec3(_877, _878, _879), vec3(_877, _878, _879));
        float _885 = (_880 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_880);
        float _893 = (dot(vec3(_424, _425, _426), vec3(_885 * _877, _885 * _878, _885 * _879)) + 1.0) * 0.5;
        float _3503 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _902 = sqrt(((_878 * _878) + (_877 * _877)) + (_879 * _879)) / (_831 + 9.9999997473787516355514526367188e-06);
        float _3514 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _903 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _904 = _903 * 2.0;
        float _908 = (1.0 - _903) / (_903 + 1.0);
        float _3525 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _909 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _918 = ((((1.0 - _909) * (_904 + 2.0)) * exp2(log2(isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0))) * (_904 + 1.0))) + _909) * _831;
        float _919 = _799 * 0.5;
        float _920 = _809 * 0.5;
        float _921 = _819 * 0.5;
        float _922 = dot(vec3(_919, _920, _921), vec3(_919, _920, _921));
        float _927 = (_922 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_922);
        float _935 = (dot(vec3(_424, _425, _426), vec3(_927 * _919, _927 * _920, _927 * _921)) + 1.0) * 0.5;
        float _3536 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _944 = sqrt(((_920 * _920) + (_919 * _919)) + (_921 * _921)) / (_832 + 9.9999997473787516355514526367188e-06);
        float _3547 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
        float _946 = _945 * 2.0;
        float _950 = (1.0 - _945) / (_945 + 1.0);
        float _3558 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _951 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _960 = ((((1.0 - _951) * (_946 + 2.0)) * exp2(log2(isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0))) * (_946 + 1.0))) + _951) * _832;
        _968 = _799;
        _970 = _798;
        _971 = _797;
        _972 = _809;
        _973 = _808;
        _974 = _807;
        _975 = _819;
        _976 = _818;
        _977 = _817;
        _978 = _832;
        _979 = _831;
        _980 = _830;
        _981 = cbModelParam._m0[36u].z * (isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0)));
        _982 = cbModelParam._m0[36u].z * (isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0)));
        _983 = cbModelParam._m0[36u].z * (isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0)));
    }
    else
    {
        _968 = _969;
        _970 = _969;
        _971 = _969;
        _972 = _969;
        _973 = _969;
        _974 = _969;
        _975 = _969;
        _976 = _969;
        _977 = _969;
        _978 = _969;
        _979 = _969;
        _980 = _969;
        _981 = 0.0;
        _982 = 0.0;
        _983 = 0.0;
    }
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1008 = fma(_666, cbModelParam._m0[30u].z, fma(_662, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _658));
        float _1012 = fma(_666, cbModelParam._m0[31u].z, fma(_662, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _658));
        float _1016 = fma(_666, cbModelParam._m0[32u].z, fma(_662, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _658));
        float _1039 = _658 + _424;
        float _1040 = _662 + _425;
        float _1041 = _666 + _426;
        float _1051 = fma(_1041, cbModelParam._m0[30u].z, fma(_1040, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1039)) - _1008;
        float _1052 = fma(_1041, cbModelParam._m0[31u].z, fma(_1040, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1039)) - _1012;
        float _1053 = fma(_1041, cbModelParam._m0[32u].z, fma(_1040, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1039)) - _1016;
        float _1057 = inversesqrt(dot(vec3(_1051, _1052, _1053), vec3(_1051, _1052, _1053)));
        float _1070 = ((_1057 * _1051) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1008 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1071 = ((_1057 * _1052) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1012 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1072 = ((_1057 * _1053) / cbModelParam._m0[35u].z) + ((((((_1016 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        float _1107 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1074.x + (-0.5));
        float _1109 = _1107 * (_1074.y + (-0.5));
        float _1110 = _1107 * (_1074.z + (-0.5));
        float _1117 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1081.x + (-0.5));
        float _1119 = _1117 * (_1081.y + (-0.5));
        float _1120 = _1117 * (_1081.z + (-0.5));
        float _1127 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1088.x + (-0.5));
        float _1129 = _1127 * (_1088.y + (-0.5));
        float _1130 = _1127 * (_1088.z + (-0.5));
        float _1137 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1095.x + (-0.5));
        float _1139 = _1137 * (_1095.y + (-0.5));
        float _1140 = _1137 * (_1095.z + (-0.5));
        float _1141 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1142 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = _1108 * 0.5;
        float _1145 = _1118 * 0.5;
        float _1146 = _1128 * 0.5;
        float _1147 = dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146));
        float _1152 = (_1147 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1147);
        float _1160 = (dot(vec3(_424, _425, _426), vec3(_1152 * _1144, _1152 * _1145, _1152 * _1146)) + 1.0) * 0.5;
        float _3599 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1169 = sqrt(((_1145 * _1145) + (_1144 * _1144)) + (_1146 * _1146)) / (_1141 + 9.9999997473787516355514526367188e-06);
        float _3610 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _1171 = _1170 * 2.0;
        float _1175 = (1.0 - _1170) / (_1170 + 1.0);
        float _3621 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _1185 = ((((1.0 - _1176) * (_1171 + 2.0)) * exp2(log2(isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))) * (_1171 + 1.0))) + _1176) * _1141;
        float _1186 = _1109 * 0.5;
        float _1187 = _1119 * 0.5;
        float _1188 = _1129 * 0.5;
        float _1189 = dot(vec3(_1186, _1187, _1188), vec3(_1186, _1187, _1188));
        float _1194 = (_1189 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1189);
        float _1202 = (dot(vec3(_424, _425, _426), vec3(_1194 * _1186, _1194 * _1187, _1194 * _1188)) + 1.0) * 0.5;
        float _3632 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1211 = sqrt(((_1187 * _1187) + (_1186 * _1186)) + (_1188 * _1188)) / (_1142 + 9.9999997473787516355514526367188e-06);
        float _3643 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _1213 = _1212 * 2.0;
        float _1217 = (1.0 - _1212) / (_1212 + 1.0);
        float _3654 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _1227 = ((((1.0 - _1218) * (_1213 + 2.0)) * exp2(log2(isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) * (_1213 + 1.0))) + _1218) * _1142;
        float _1228 = _1110 * 0.5;
        float _1229 = _1120 * 0.5;
        float _1230 = _1130 * 0.5;
        float _1231 = dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230));
        float _1236 = (_1231 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1231);
        float _1244 = (dot(vec3(_424, _425, _426), vec3(_1236 * _1228, _1236 * _1229, _1236 * _1230)) + 1.0) * 0.5;
        float _3665 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1253 = sqrt(((_1229 * _1229) + (_1228 * _1228)) + (_1230 * _1230)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _3676 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1255 = _1254 * 2.0;
        float _1259 = (1.0 - _1254) / (_1254 + 1.0);
        float _3687 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1269 = ((((1.0 - _1260) * (_1255 + 2.0)) * exp2(log2(isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * (_1255 + 1.0))) + _1260) * _1143;
        _1277 = _1110;
        _1278 = _1109;
        _1279 = _1108;
        _1280 = _1120;
        _1281 = _1119;
        _1282 = _1118;
        _1283 = _1130;
        _1284 = _1129;
        _1285 = _1128;
        _1286 = _1143;
        _1287 = _1142;
        _1288 = _1141;
        _1289 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)));
        _1290 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)));
        _1291 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)));
    }
    else
    {
        _1277 = _969;
        _1278 = _969;
        _1279 = _969;
        _1280 = _969;
        _1281 = _969;
        _1282 = _969;
        _1283 = _969;
        _1284 = _969;
        _1285 = _969;
        _1286 = _969;
        _1287 = _969;
        _1288 = _969;
        _1289 = 0.0;
        _1290 = 0.0;
        _1291 = 0.0;
    }
    float _1301 = (cbModelParam._m0[1u].x * (_1289 - _981)) + _981;
    float _1302 = (cbModelParam._m0[1u].x * (_1290 - _982)) + _982;
    float _1303 = (cbModelParam._m0[1u].x * (_1291 - _983)) + _983;
    float _1324 = fma(_1303, cbSceneParam._m0[89u].z, fma(_1302, cbSceneParam._m0[89u].y, _1301 * cbSceneParam._m0[89u].x));
    float _1327 = fma(_1303, cbSceneParam._m0[90u].z, fma(_1302, cbSceneParam._m0[90u].y, _1301 * cbSceneParam._m0[90u].x));
    float _1330 = fma(_1303, cbSceneParam._m0[91u].z, fma(_1302, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1301));
    float _1345 = _602 * 0.5;
    float _1346 = _603 * 0.5;
    float _1347 = _604 * 0.5;
    float _1348 = dot(vec4(_1345, _1346, _1347, 1.0), vec4(_1279, _1282, _1285, _1288));
    float _1351 = dot(vec4(_1345, _1346, _1347, 1.0), vec4(_1278, _1281, _1284, _1287));
    float _1354 = dot(vec4(_1345, _1346, _1347, 1.0), vec4(_1277, _1280, _1283, _1286));
    float _1388;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1361 = dot(vec4(_1345, _1346, _1347, 1.0), vec4(_968, _972, _975, _978));
        float _1365 = dot(vec4(_1345, _1346, _1347, 1.0), vec4(_970, _973, _976, _979));
        float _1369 = dot(vec4(_1345, _1346, _1347, 1.0), vec4(_971, _974, _977, _980));
        float _1376 = dot(vec4(cbModelParam._m0[39u]), vec4(_1345, _1346, _1347, 1.0));
        _1388 = dot(vec3(isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)), isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)), isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1376) ? 0.0 : (isnan(0.0) ? _1376 : max(0.0, _1376))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1388 = 1.0;
    }
    float _1399;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1390 = dot(vec4(cbModelParam._m0[40u]), vec4(_1345, _1346, _1347, 1.0));
        _1399 = dot(vec3(isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)), isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)), isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1390) ? 0.0 : (isnan(0.0) ? _1390 : max(0.0, _1390))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1399 = 1.0;
    }
    float _1403 = (_1399 * cbModelParam._m0[1u].x) + (_1388 * (1.0 - cbModelParam._m0[1u].x));
    float _1413 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _427);
    float _1414 = isnan(_1413) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1413 : min(cbModelParam._m0[25u].z, _1413));
    float _1496;
    float _1498;
    float _1500;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1463 = fma(_666, cbModelParam._m0[13u].z, fma(_662, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _658)) + cbModelParam._m0[13u].w;
        float _1467 = fma(_666, cbModelParam._m0[14u].z, fma(_662, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _658)) + cbModelParam._m0[14u].w;
        float _1471 = fma(_666, cbModelParam._m0[15u].z, fma(_662, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _658)) + cbModelParam._m0[15u].w;
        float _1474 = fma(_604, cbModelParam._m0[13u].z, fma(_603, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _602));
        float _1477 = fma(_604, cbModelParam._m0[14u].z, fma(_603, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _602));
        float _1480 = fma(_604, cbModelParam._m0[15u].z, fma(_603, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _602));
        float _1508;
        if (_1474 > 0.0)
        {
            _1508 = abs((1.0 - _1463) / _1474);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1474 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1463 + 1.0) / _1474);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1508 = frontier_phi_14_12_ladder;
        }
        float _1714;
        if (_1477 > 0.0)
        {
            _1714 = abs((1.0 - _1467) / _1477);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1477 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1467 + 1.0) / _1477);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1714 = frontier_phi_23_19_ladder;
        }
        float _1968;
        if (_1480 > 0.0)
        {
            _1968 = abs((1.0 - _1471) / _1480);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1480 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1471 + 1.0) / _1480);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1968 = frontier_phi_35_30_ladder;
        }
        float _1970 = isnan(_1714) ? _1508 : (isnan(_1508) ? _1714 : min(_1508, _1714));
        float _1971 = isnan(_1968) ? _1970 : (isnan(_1970) ? _1968 : min(_1970, _1968));
        float _1975 = (_1971 * _1474) + _1463;
        float _1976 = (_1971 * _1477) + _1467;
        float _1977 = (_1971 * _1480) + _1471;
        float _1978 = _1971 * 9.9999997473787516355514526367188e-05;
        float _1980 = (-1.0) - _1978;
        float _1982 = _1978 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1977 > _1982) || ((_1977 < _1980) || ((_1976 > _1982) || ((_1976 < _1980) || ((_1975 < _1980) || (_1975 > _1982))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2105 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1977, cbModelParam._m0[9u].z, fma(_1976, cbModelParam._m0[9u].y, _1975 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1977, cbModelParam._m0[10u].z, fma(_1976, cbModelParam._m0[10u].y, _1975 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1977, cbModelParam._m0[11u].z, fma(_1976, cbModelParam._m0[11u].y, _1975 * cbModelParam._m0[11u].x))), _1414);
            frontier_phi_13_35_ladder = _2105.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2105.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2105.x * cbModelParam._m0[1u].y;
        }
        _1496 = frontier_phi_13_35_ladder_2;
        _1498 = frontier_phi_13_35_ladder_1;
        _1500 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1484 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_602, _603, _604), _1414);
        _1496 = _1484.x * cbModelParam._m0[1u].y;
        _1498 = _1484.y * cbModelParam._m0[1u].y;
        _1500 = _1484.z * cbModelParam._m0[1u].y;
    }
    float _1504 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _427);
    float _1505 = isnan(_1504) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1504 : min(cbModelParam._m0[25u].w, _1504));
    float _1597;
    float _1599;
    float _1601;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1561 = fma(_666, cbModelParam._m0[21u].z, fma(_662, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _658)) + cbModelParam._m0[21u].w;
        float _1565 = fma(_666, cbModelParam._m0[22u].z, fma(_662, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _658)) + cbModelParam._m0[22u].w;
        float _1569 = fma(_666, cbModelParam._m0[23u].z, fma(_662, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _658)) + cbModelParam._m0[23u].w;
        float _1572 = fma(_604, cbModelParam._m0[21u].z, fma(_603, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _602));
        float _1575 = fma(_604, cbModelParam._m0[22u].z, fma(_603, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _602));
        float _1578 = fma(_604, cbModelParam._m0[23u].z, fma(_603, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _602));
        float _1719;
        if (_1572 > 0.0)
        {
            _1719 = abs((1.0 - _1561) / _1572);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1572 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1561 + 1.0) / _1572);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1719 = frontier_phi_25_21_ladder;
        }
        float _1995;
        if (_1575 > 0.0)
        {
            _1995 = abs((1.0 - _1565) / _1575);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1575 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1565 + 1.0) / _1575);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1995 = frontier_phi_37_32_ladder;
        }
        float _2208;
        if (_1578 > 0.0)
        {
            _2208 = abs((1.0 - _1569) / _1578);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1578 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1569 + 1.0) / _1578);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2208 = frontier_phi_46_43_ladder;
        }
        float _2210 = isnan(_1995) ? _1719 : (isnan(_1719) ? _1995 : min(_1719, _1995));
        float _2211 = isnan(_2208) ? _2210 : (isnan(_2210) ? _2208 : min(_2210, _2208));
        float _2215 = (_2211 * _1572) + _1561;
        float _2216 = (_2211 * _1575) + _1565;
        float _2217 = (_2211 * _1578) + _1569;
        float _2218 = _2211 * 9.9999997473787516355514526367188e-05;
        float _2219 = (-1.0) - _2218;
        float _2221 = _2218 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2217 > _2221) || ((_2217 < _2219) || ((_2216 > _2221) || ((_2216 < _2219) || ((_2215 < _2219) || (_2215 > _2221))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2416 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2217, cbModelParam._m0[17u].z, fma(_2216, cbModelParam._m0[17u].y, _2215 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2217, cbModelParam._m0[18u].z, fma(_2216, cbModelParam._m0[18u].y, _2215 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2217, cbModelParam._m0[19u].z, fma(_2216, cbModelParam._m0[19u].y, _2215 * cbModelParam._m0[19u].x))), _1505);
            frontier_phi_22_46_ladder = _2416.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2416.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2416.x * cbModelParam._m0[1u].z;
        }
        _1597 = frontier_phi_22_46_ladder_2;
        _1599 = frontier_phi_22_46_ladder_1;
        _1601 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1581 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_602, _603, _604), _1505);
        _1597 = _1581.x * cbModelParam._m0[1u].z;
        _1599 = _1581.y * cbModelParam._m0[1u].z;
        _1601 = _1581.z * cbModelParam._m0[1u].z;
    }
    float _1614 = (((_629 * _578) + _630) * _594) * ((cbModelParam._m0[1u].w * (_1597 - _1496)) + _1496);
    float _1616 = (((_629 * _580) + _630) * _594) * ((cbModelParam._m0[1u].w * (_1599 - _1498)) + _1498);
    float _1618 = (((_629 * _581) + _630) * _594) * ((cbModelParam._m0[1u].w * (_1601 - _1500)) + _1500);
    float _1621 = fma(_1618, cbSceneParam._m0[89u].z, fma(_1616, cbSceneParam._m0[89u].y, _1614 * cbSceneParam._m0[89u].x));
    float _1624 = fma(_1618, cbSceneParam._m0[90u].z, fma(_1616, cbSceneParam._m0[90u].y, _1614 * cbSceneParam._m0[90u].x));
    float _1627 = fma(_1618, cbSceneParam._m0[91u].z, fma(_1616, cbSceneParam._m0[91u].y, _1614 * cbSceneParam._m0[91u].x));
    uvec4 _1637 = floatBitsToUint(cbInstanceData._m0[_246 + 5u]);
    uint _1639 = _1637.x * 14u;
    uint _1640 = _1639 + 13u;
    float _1647 = _594 + (-1.0);
    float _1652 = (cbLight._m0[_1640].x * _1647) + 1.0;
    float _1653 = (cbLight._m0[_1640].y * _1647) + 1.0;
    float _1654 = (cbLight._m0[_1640].z * _1647) + 1.0;
    float _1655 = (cbLight._m0[_1640].w * _1647) + 1.0;
    uint _1656 = _1639 + 5u;
    float _1662 = isnan(1.0) ? _1653 : (isnan(_1653) ? 1.0 : min(_1653, 1.0));
    uint _1666 = _1639 + 4u;
    float _1673 = isnan(1.0) ? _1652 : (isnan(_1652) ? 1.0 : min(_1652, 1.0));
    uint _1677 = _1639 | 1u;
    float _1688 = dot(vec3(cbLight._m0[_1639].xyz), vec3(_424, _425, _426));
    float _1691 = dot(vec3(cbLight._m0[_1677].xyz), vec3(_424, _425, _426));
    float _3823 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
    float _3834 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
    float _1696 = (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * 0.3183098733425140380859375;
    float _1698 = (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * 0.3183098733425140380859375;
    float _1705 = ((cbLight._m0[_1656].x * _1662) * _1698) + ((cbLight._m0[_1666].x * _1673) * _1696);
    float _1706 = ((_1662 * cbLight._m0[_1656].y) * _1698) + ((_1673 * cbLight._m0[_1666].y) * _1696);
    float _1707 = ((_1662 * cbLight._m0[_1656].z) * _1698) + ((_1673 * cbLight._m0[_1666].z) * _1696);
    uvec4 _1711 = floatBitsToUint(cbLight._m0[_1639 + 12u]);
    bool _1713 = _1711.x == 0u;
    float _1724;
    float _1726;
    float _1728;
    if (_1713)
    {
        _1724 = _1705;
        _1726 = _1706;
        _1728 = _1707;
    }
    else
    {
        uint _1732 = _1639 + 6u;
        float _1748 = (dot(vec3(cbLight._m0[_1639 + 2u].xyz), vec3(_424, _425, _426)) * 0.5) + 0.5;
        float _1749 = _1748 * _1748;
        float _3845 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1750 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1751 = isnan(1.0) ? _1654 : (isnan(_1654) ? 1.0 : min(_1654, 1.0));
        _1724 = (((cbLight._m0[_1732].x * 0.3183098733425140380859375) * _1750) * _1751) + _1705;
        _1726 = (((cbLight._m0[_1732].y * 0.3183098733425140380859375) * _1750) * _1751) + _1706;
        _1728 = (((cbLight._m0[_1732].z * 0.3183098733425140380859375) * _1750) * _1751) + _1707;
    }
    bool _1731 = _1711.y == 0u;
    float _1769;
    float _1771;
    float _1773;
    if (_1731)
    {
        _1769 = _1724;
        _1771 = _1726;
        _1773 = _1728;
    }
    else
    {
        uint _1939 = _1639 + 7u;
        float _1955 = (dot(vec3(cbLight._m0[_1639 + 3u].xyz), vec3(_424, _425, _426)) * 0.5) + 0.5;
        float _1956 = _1955 * _1955;
        float _3861 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
        float _1957 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1958 = isnan(1.0) ? _1655 : (isnan(_1655) ? 1.0 : min(_1655, 1.0));
        _1769 = (((cbLight._m0[_1939].x * 0.3183098733425140380859375) * _1957) * _1958) + _1724;
        _1771 = (((cbLight._m0[_1939].y * 0.3183098733425140380859375) * _1957) * _1958) + _1726;
        _1773 = (((cbLight._m0[_1939].z * 0.3183098733425140380859375) * _1957) * _1958) + _1728;
    }
    uint _1776 = _1639 + 8u;
    float _1789 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1639].w)) * _427) * 0.949999988079071044921875);
    float _1790 = _1789 * _1789;
    float _1791 = cbLight._m0[_1639].x + _505;
    float _1792 = cbLight._m0[_1639].y + _506;
    float _1793 = cbLight._m0[_1639].z + _507;
    float _1797 = inversesqrt(dot(vec3(_1791, _1792, _1793), vec3(_1791, _1792, _1793)));
    float _1798 = _1797 * _1791;
    float _1799 = _1797 * _1792;
    float _1800 = _1797 * _1793;
    float _1801 = dot(vec3(_424, _425, _426), vec3(cbLight._m0[_1639].xyz));
    float _3877 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _1804 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _3888 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _1805 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _1806 = dot(vec3(_424, _425, _426), vec3(_1798, _1799, _1800));
    float _3899 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
    float _1809 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _1810 = dot(vec3(cbLight._m0[_1639].xyz), vec3(_1798, _1799, _1800));
    float _3910 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _1814 = _1790 * _1790;
    float _1818 = ((_1809 * _1809) * (_1814 + (-1.0))) + 1.0;
    float _1826 = exp2(log2(1.0 - (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0)))) * 5.0);
    float _1827 = 0.959999978542327880859375 - _575;
    float _1829 = 0.959999978542327880859375 - _576;
    float _1830 = 0.959999978542327880859375 - _577;
    float _1837 = 1.0 - _1790;
    float _1848 = (0.5 / (((_1805 * ((_1804 * _1837) + _1790)) + 9.9999999392252902907785028219223e-09) + (((_1805 * _1837) + _1790) * _1804))) * _1804;
    float _3921 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _1850 = (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * (_1814 / ((_1818 * _1818) * 3.141590118408203125));
    uint _1861 = _1639 + 9u;
    float _1872 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1677].w)) * _427) * 0.949999988079071044921875);
    float _1873 = _1872 * _1872;
    float _1874 = cbLight._m0[_1677].x + _505;
    float _1875 = cbLight._m0[_1677].y + _506;
    float _1876 = cbLight._m0[_1677].z + _507;
    float _1880 = inversesqrt(dot(vec3(_1874, _1875, _1876), vec3(_1874, _1875, _1876)));
    float _1881 = _1880 * _1874;
    float _1882 = _1880 * _1875;
    float _1883 = _1880 * _1876;
    float _1884 = dot(vec3(_424, _425, _426), vec3(cbLight._m0[_1677].xyz));
    float _3932 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _1887 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _1888 = dot(vec3(_424, _425, _426), vec3(_1881, _1882, _1883));
    float _3943 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _1891 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _1892 = dot(vec3(cbLight._m0[_1677].xyz), vec3(_1881, _1882, _1883));
    float _3954 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1896 = _1873 * _1873;
    float _1900 = ((_1891 * _1891) * (_1896 + (-1.0))) + 1.0;
    float _1907 = exp2(log2(1.0 - (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0)))) * 5.0);
    float _1914 = 1.0 - _1873;
    float _1924 = (0.5 / (((_1805 * ((_1887 * _1914) + _1873)) + 9.9999999392252902907785028219223e-09) + (((_1805 * _1914) + _1873) * _1887))) * _1887;
    float _3965 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1926 = (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * (_1896 / ((_1900 * _1900) * 3.141590118408203125));
    float _1936 = (((((_1907 * _1827) + _578) * cbLight._m0[_1861].x) * _1926) * _1662) + (((((_1826 * _1827) + _578) * cbLight._m0[_1776].x) * _1850) * _1673);
    float _1937 = (((((_1907 * _1829) + _580) * cbLight._m0[_1861].y) * _1926) * _1662) + (((((_1826 * _1829) + _580) * cbLight._m0[_1776].y) * _1850) * _1673);
    float _1938 = (((((_1907 * _1830) + _581) * cbLight._m0[_1861].z) * _1926) * _1662) + (((((_1826 * _1830) + _581) * cbLight._m0[_1776].z) * _1850) * _1673);
    float _2000;
    float _2002;
    float _2004;
    if (_1713)
    {
        _2000 = _1936;
        _2002 = _1937;
        _2004 = _1938;
    }
    else
    {
        uint _2006 = _1639 + 2u;
        uint _2010 = _1639 + 10u;
        float _2024 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2006].w)) * _427) * 0.949999988079071044921875);
        float _2025 = _2024 * _2024;
        float _2026 = cbLight._m0[_2006].x + _505;
        float _2027 = cbLight._m0[_2006].y + _506;
        float _2028 = cbLight._m0[_2006].z + _507;
        float _2032 = inversesqrt(dot(vec3(_2026, _2027, _2028), vec3(_2026, _2027, _2028)));
        float _2033 = _2032 * _2026;
        float _2034 = _2032 * _2027;
        float _2035 = _2032 * _2028;
        float _2036 = dot(vec3(_424, _425, _426), vec3(cbLight._m0[_2006].xyz));
        float _3976 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
        float _2039 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _2040 = dot(vec3(_424, _425, _426), vec3(_2033, _2034, _2035));
        float _3987 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
        float _2043 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _2044 = dot(vec3(cbLight._m0[_2006].xyz), vec3(_2033, _2034, _2035));
        float _3998 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
        float _2048 = _2025 * _2025;
        float _2052 = ((_2043 * _2043) * (_2048 + (-1.0))) + 1.0;
        float _2059 = exp2(log2(1.0 - (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0)))) * 5.0);
        float _2066 = 1.0 - _2025;
        float _2076 = (0.5 / (((_1805 * ((_2039 * _2066) + _2025)) + 9.9999999392252902907785028219223e-09) + (((_1805 * _2066) + _2025) * _2039))) * _2039;
        float _4009 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
        float _2078 = (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * (_2048 / ((_2052 * _2052) * 3.141590118408203125));
        float _2079 = isnan(1.0) ? _1654 : (isnan(_1654) ? 1.0 : min(_1654, 1.0));
        _2000 = (((((_2059 * _1827) + _578) * cbLight._m0[_2010].x) * _2078) * _2079) + _1936;
        _2002 = (((((_2059 * _1829) + _580) * cbLight._m0[_2010].y) * _2078) * _2079) + _1937;
        _2004 = (((((_2059 * _1830) + _581) * cbLight._m0[_2010].z) * _2078) * _2079) + _1938;
    }
    float _2114;
    float _2116;
    float _2118;
    if (_1731)
    {
        _2114 = _2000;
        _2116 = _2002;
        _2118 = _2004;
    }
    else
    {
        uint _2125 = _1639 + 3u;
        uint _2129 = _1639 + 11u;
        float _2143 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2125].w)) * _427) * 0.949999988079071044921875);
        float _2144 = _2143 * _2143;
        float _2145 = cbLight._m0[_2125].x + _505;
        float _2146 = cbLight._m0[_2125].y + _506;
        float _2147 = cbLight._m0[_2125].z + _507;
        float _2151 = inversesqrt(dot(vec3(_2145, _2146, _2147), vec3(_2145, _2146, _2147)));
        float _2152 = _2151 * _2145;
        float _2153 = _2151 * _2146;
        float _2154 = _2151 * _2147;
        float _2155 = dot(vec3(_424, _425, _426), vec3(cbLight._m0[_2125].xyz));
        float _4025 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2158 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _2159 = dot(vec3(_424, _425, _426), vec3(_2152, _2153, _2154));
        float _4036 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2162 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _2163 = dot(vec3(cbLight._m0[_2125].xyz), vec3(_2152, _2153, _2154));
        float _4047 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
        float _2167 = _2144 * _2144;
        float _2171 = ((_2162 * _2162) * (_2167 + (-1.0))) + 1.0;
        float _2178 = exp2(log2(1.0 - (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0)))) * 5.0);
        float _2185 = 1.0 - _2144;
        float _2195 = (0.5 / (((_1805 * ((_2158 * _2185) + _2144)) + 9.9999999392252902907785028219223e-09) + (((_1805 * _2185) + _2144) * _2158))) * _2158;
        float _4058 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        float _2197 = (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_2167 / ((_2171 * _2171) * 3.141590118408203125));
        float _2198 = isnan(1.0) ? _1655 : (isnan(_1655) ? 1.0 : min(_1655, 1.0));
        _2114 = (((((_2178 * _1827) + _578) * cbLight._m0[_2129].x) * _2197) * _2198) + _2000;
        _2116 = (((((_2178 * _1829) + _580) * cbLight._m0[_2129].y) * _2197) * _2198) + _2002;
        _2118 = (((((_2178 * _1830) + _581) * cbLight._m0[_2129].z) * _2197) * _2198) + _2004;
    }
    float _2333;
    float _2335;
    float _2337;
    float _2339;
    float _2341;
    float _2343;
    if (_1637.y == 0u)
    {
        float _2273 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2274 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2273;
        float _2275 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2273;
        float _2276 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2273;
        uvec4 _2288 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2289 = _2288.x;
        uint _2300 = uint((float(_2288.y) * floor(float(uint(cbSceneParam._m0[85u].y * _514) / _2289))) + floor(float(uint(cbSceneParam._m0[85u].x * _513) / _2289)));
        float _2310 = (log2(_2276 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2311 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
        uint _2314 = uint(isnan(14.0) ? _2311 : (isnan(_2311) ? 14.0 : min(_2311, 14.0)));
        uvec4 _2319 = texelFetch(g_lightClusterGridBuffer, int(((_2314 << 2u) + (_2300 << 6u)) >> 2u));
        uint _2320 = _2319.x;
        uint _2321 = _2288.z;
        float _2421;
        float _2423;
        float _2425;
        float _2427;
        float _2429;
        float _2431;
        if (((((1u << ((_2321 >> 4u) & 15u)) + 4294967295u) & _2320) == 0u) || ((_2321 & 240u) == 0u))
        {
            _2421 = 0.0;
            _2423 = 0.0;
            _2425 = 0.0;
            _2427 = 0.0;
            _2429 = 0.0;
            _2431 = 0.0;
        }
        else
        {
            float _2422;
            float _2424;
            float _2426;
            float _2428;
            float _2430;
            float _2432;
            float _2566 = 0.0;
            float _2567 = 0.0;
            float _2568 = 0.0;
            float _2569 = 0.0;
            float _2570 = 0.0;
            float _2571 = 0.0;
            uint _2572 = 0u;
            uint _2581;
            bool _2582;
            for (;;)
            {
                _2581 = texelFetch(g_lightClassification, int((((_2314 << 5u) + (_2300 << 9u)) + (_2572 << 2u)) >> 2u)).x;
                _2582 = _2581 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2582)
                {
                    frontier_phi_61_pred = _2566;
                    frontier_phi_61_pred_1 = _2571;
                    frontier_phi_61_pred_2 = _2570;
                    frontier_phi_61_pred_3 = _2569;
                    frontier_phi_61_pred_4 = _2568;
                    frontier_phi_61_pred_5 = _2567;
                }
                else
                {
                    float _2690;
                    float _2691;
                    float _2692;
                    float _2693;
                    float _2694;
                    float _2695;
                    uint _2696;
                    _2690 = _2566;
                    _2691 = _2567;
                    _2692 = _2568;
                    _2693 = _2569;
                    _2694 = _2570;
                    _2695 = _2571;
                    _2696 = _2581;
                    float _2622;
                    float _2623;
                    float _2624;
                    float _2625;
                    float _2626;
                    float _2627;
                    for (;;)
                    {
                        uint _2700 = uint(findLSB(_2696)) + (_2572 << 5u);
                        uint _2697 = (_2696 + 4294967295u) & _2696;
                        uint _2702 = _2700 * 48u;
                        vec4 _2716 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2702)).x, texelFetch(g_PointLightRenderingBuffer, int(_2702 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2702 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2702 + 3u)).x));
                        uint _2722 = (_2700 * 48u) + 4u;
                        vec4 _2735 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2722)).x, texelFetch(g_PointLightRenderingBuffer, int(_2722 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2722 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2722 + 3u)).x));
                        uint _2741 = (_2700 * 48u) + 8u;
                        vec3 _2752 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2741)).x, texelFetch(g_PointLightRenderingBuffer, int(_2741 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2741 + 2u)).x));
                        float _2756 = _2716.x - _2274;
                        float _2757 = _2716.y - _2275;
                        float _2758 = _2716.z - _2276;
                        float _2759 = dot(vec3(_2756, _2757, _2758), vec3(_2756, _2757, _2758));
                        float _2762 = inversesqrt(_2759);
                        float _2763 = _2762 * _2756;
                        float _2764 = _2762 * _2757;
                        float _2765 = _2762 * _2758;
                        float _2766 = dot(vec3(_535, _538, _541), vec3(_2763, _2764, _2765));
                        float _2771 = 1.0 - (_2759 * _2716.w);
                        float _4084 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
                        float _2772 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
                        float _2773 = sqrt(_2759) * _2735.w;
                        float _2776 = 1.39999997615814208984375 / (_2773 + 1.39999997615814208984375);
                        float _2777 = _2776 * _2776;
                        float _2780 = ((1.0 - _2777) * _2766) + _2777;
                        float _2783 = _2773 * _2773;
                        float _2787 = ((isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0))) * _2772) / ((_2783 * 0.699999988079071044921875) + 1.0);
                        float _2791 = (-0.0) - _2274;
                        float _2792 = (-0.0) - _2275;
                        float _2793 = (-0.0) - _2276;
                        float _2797 = inversesqrt(dot(vec3(_2791, _2792, _2793), vec3(_2791, _2792, _2793)));
                        float _2798 = _2797 * _2791;
                        float _2799 = _2797 * _2792;
                        float _2800 = _2797 * _2793;
                        float _2808 = exp2(log2(1.0 / ((_2783 * 3.5) + 5.0)) * 0.25);
                        float _2809 = 1.0 - _610;
                        float _2816 = sqrt(1.0 - ((1.0 - (_2809 * _2809)) * (1.0 - (_2808 * _2808))));
                        float _2817 = _2816 * _2816;
                        float _2818 = _2817 * _2817;
                        float _2819 = _2798 + _2763;
                        float _2820 = _2799 + _2764;
                        float _2821 = _2800 + _2765;
                        float _2825 = inversesqrt(dot(vec3(_2819, _2820, _2821), vec3(_2819, _2820, _2821)));
                        float _2829 = dot(vec3(_535, _538, _541), vec3(_2798, _2799, _2800));
                        float _4100 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
                        float _2832 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
                        float _2833 = dot(vec3(_535, _538, _541), vec3(_2825 * _2819, _2825 * _2820, _2825 * _2821));
                        float _4111 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
                        float _2836 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
                        float _2840 = ((_2836 * _2836) * (_2818 + (-1.0))) + 1.0;
                        float _2841 = _2776 * _2817;
                        float _2842 = _2841 * _2841;
                        float _2845 = ((1.0 - _2842) * _2766) + _2842;
                        float _4122 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
                        float _2846 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
                        float _2847 = 1.0 - _2817;
                        float _2857 = (0.5 / (((_2846 * ((_2832 * _2847) + _2817)) + 9.9999999392252902907785028219223e-09) + (((_2846 * _2847) + _2817) * _2832))) * _2846;
                        float _4133 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
                        float _2868 = (((_2818 * 3.1415927410125732421875) * (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0)))) / ((_2840 * _2840) * ((_2783 * 2.1991131305694580078125) + 3.141590118408203125))) * _2772;
                        _2625 = (_2787 * _2735.x) + _2693;
                        _2626 = (_2787 * _2735.y) + _2694;
                        _2627 = (_2787 * _2735.z) + _2695;
                        _2622 = (_2868 * _2752.x) + _2690;
                        _2623 = (_2868 * _2752.y) + _2691;
                        _2624 = (_2868 * _2752.z) + _2692;
                        if (_2697 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2690 = _2622;
                            _2691 = _2623;
                            _2692 = _2624;
                            _2693 = _2625;
                            _2694 = _2626;
                            _2695 = _2627;
                            _2696 = _2697;
                        }
                    }
                    frontier_phi_61_pred = _2622;
                    frontier_phi_61_pred_1 = _2627;
                    frontier_phi_61_pred_2 = _2626;
                    frontier_phi_61_pred_3 = _2625;
                    frontier_phi_61_pred_4 = _2624;
                    frontier_phi_61_pred_5 = _2623;
                }
                _2422 = frontier_phi_61_pred;
                _2432 = frontier_phi_61_pred_1;
                _2430 = frontier_phi_61_pred_2;
                _2428 = frontier_phi_61_pred_3;
                _2426 = frontier_phi_61_pred_4;
                _2424 = frontier_phi_61_pred_5;
                uint _2573 = _2572 + 1u;
                if (_2573 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2566 = _2422;
                    _2567 = _2424;
                    _2568 = _2426;
                    _2569 = _2428;
                    _2570 = _2430;
                    _2571 = _2432;
                    _2572 = _2573;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2421 = _2422;
            _2423 = _2424;
            _2425 = _2426;
            _2427 = _2428;
            _2429 = _2430;
            _2431 = _2432;
        }
        uvec4 _2435 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2436 = _2435.z;
        uint _2438 = (_2436 >> 8u) & 15u;
        float _2534;
        float _2536;
        float _2538;
        float _2540;
        float _2542;
        float _2544;
        if (((4294967295u << _2438) & _2320) == 0u)
        {
            _2534 = _2421;
            _2536 = _2423;
            _2538 = _2425;
            _2540 = _2427;
            _2542 = _2429;
            _2544 = _2431;
        }
        else
        {
            float _2559 = inversesqrt(dot(vec3(_2274, _2275, _2276), vec3(_2274, _2275, _2276)));
            float _2560 = _2559 * _2274;
            float _2561 = _2559 * _2275;
            float _2562 = _2559 * _2276;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2438 < ((_2436 >> 12u) & 15u))
            {
                float _2535;
                float _2537;
                float _2539;
                float _2541;
                float _2543;
                float _2545;
                float _2673 = _2421;
                float _2674 = _2423;
                float _2675 = _2425;
                float _2676 = _2427;
                float _2677 = _2429;
                float _2678 = _2431;
                uint _2679 = _2438;
                uint _2688;
                bool _2689;
                for (;;)
                {
                    _2688 = texelFetch(g_lightClassification, int((((_2314 << 5u) + (_2300 << 9u)) + (_2679 << 2u)) >> 2u)).x;
                    _2689 = _2688 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2689)
                    {
                        frontier_phi_67_pred = _2676;
                        frontier_phi_67_pred_1 = _2677;
                        frontier_phi_67_pred_2 = _2678;
                        frontier_phi_67_pred_3 = _2675;
                        frontier_phi_67_pred_4 = _2674;
                        frontier_phi_67_pred_5 = _2673;
                    }
                    else
                    {
                        float _2873;
                        float _2874;
                        float _2875;
                        float _2876;
                        float _2877;
                        float _2878;
                        float _3167;
                        float _3168;
                        float _3169;
                        float _3170;
                        float _3171;
                        float _3172;
                        float _2886 = _2673;
                        float _2887 = _2674;
                        float _2888 = _2675;
                        float _2889 = _2676;
                        float _2890 = _2677;
                        float _2891 = _2678;
                        uint _2892 = _2688;
                        uint _2893;
                        vec4 _2918;
                        float _2919;
                        vec4 _2934;
                        vec3 _2946;
                        vec4 _2961;
                        vec4 _2976;
                        float _3023;
                        bool _3024;
                        for (;;)
                        {
                            uint _2903 = ((_2679 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2892));
                            _2893 = (_2892 + 4294967295u) & _2892;
                            uint _2905 = _2903 * 40u;
                            _2918 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2905)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 3u)).x));
                            _2919 = _2918.w;
                            uint _2921 = (_2903 * 40u) + 4u;
                            _2934 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2921)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 3u)).x));
                            uint _2936 = (_2903 * 40u) + 8u;
                            _2946 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2936)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 2u)).x));
                            uint _2948 = (_2903 * 40u) + 16u;
                            _2961 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2948)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 3u)).x));
                            uint _2963 = (_2903 * 40u) + 20u;
                            _2976 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2963)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 3u)).x));
                            uint _2979 = (_2903 * 40u) + 24u;
                            vec4 _2992 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2979)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 3u)).x));
                            uint _2998 = (_2903 * 40u) + 28u;
                            vec4 _3011 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2998)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 3u)).x));
                            _3023 = fma(_2276, _3011.z, fma(_2275, _3011.y, _3011.x * _2274)) + _3011.w;
                            _3024 = !((fma(_2276, _2992.z, fma(_2275, _2992.y, _2992.x * _2274)) + _2992.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3024)
                            {
                                float _3051 = _2918.x - _2274;
                                float _3052 = _2918.y - _2275;
                                float _3053 = _2918.z - _2276;
                                float _3054 = dot(vec3(_3051, _3052, _3053), vec3(_3051, _3052, _3053));
                                float _3057 = inversesqrt(_3054);
                                float _3058 = _3057 * _3051;
                                float _3059 = _3057 * _3052;
                                float _3060 = _3057 * _3053;
                                float _3064 = 1.0 - (_3054 / (_2919 * _2919));
                                float _4144 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                                float _3065 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
                                float _3069 = sqrt(_3054) * _2934.w;
                                float _3071 = 1.39999997615814208984375 / (_3069 + 1.39999997615814208984375);
                                float _3072 = _3071 * _3071;
                                float _3075 = ((1.0 - _3072) * dot(vec3(_3058, _3059, _3060), vec3(_535, _538, _541))) + _3072;
                                float _3078 = _3069 * _3069;
                                float _3082 = (fma(_2276, _2961.z, fma(_2275, _2961.y, _2961.x * _2274)) + _2961.w) / _3023;
                                float _3083 = (fma(_2276, _2976.z, fma(_2275, _2976.y, _2976.x * _2274)) + _2976.w) / _3023;
                                float _3087 = 1.0 - dot(vec2(_3082, _3083), vec2(_3082, _3083));
                                float _4160 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                                float _3088 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
                                float _3089 = _3088 * (((isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0))) * _3065) / ((_3078 * 0.699999988079071044921875) + 1.0));
                                float _3101 = exp2(log2(1.0 / ((_3078 * 3.5) + 5.0)) * 0.25);
                                float _3102 = 1.0 - _610;
                                float _3109 = sqrt(1.0 - ((1.0 - (_3102 * _3102)) * (1.0 - (_3101 * _3101))));
                                float _3110 = _3109 * _3109;
                                float _3111 = _3110 * _3110;
                                float _3112 = _3058 - _2560;
                                float _3113 = _3059 - _2561;
                                float _3114 = _3060 - _2562;
                                float _3118 = inversesqrt(dot(vec3(_3112, _3113, _3114), vec3(_3112, _3113, _3114)));
                                float _3122 = dot(vec3(_535, _538, _541), vec3((-0.0) - _2560, (-0.0) - _2561, (-0.0) - _2562));
                                float _4171 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                                float _3125 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
                                float _3126 = dot(vec3(_535, _538, _541), vec3(_3118 * _3112, _3118 * _3113, _3118 * _3114));
                                float _4182 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                                float _3129 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
                                float _3133 = ((_3129 * _3129) * (_3111 + (-1.0))) + 1.0;
                                float _3134 = _3071 * _3110;
                                float _3135 = _3134 * _3134;
                                float _3141 = ((1.0 - _3135) * dot(vec3(_535, _538, _541), vec3(_3058, _3059, _3060))) + _3135;
                                float _4193 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                                float _3142 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
                                float _3143 = 1.0 - _3110;
                                float _3153 = (0.5 / (((_3142 * ((_3125 * _3143) + _3110)) + 9.9999999392252902907785028219223e-09) + (((_3142 * _3143) + _3110) * _3125))) * _3142;
                                float _4204 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                                float _3163 = (_3088 * _3065) * (((_3111 * 3.1415927410125732421875) * (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0)))) / ((_3133 * _3133) * ((_3078 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3163 * _2946.x;
                                frontier_phi_73_pred_1 = _3163 * _2946.y;
                                frontier_phi_73_pred_2 = _3089 * _2934.z;
                                frontier_phi_73_pred_3 = _3089 * _2934.y;
                                frontier_phi_73_pred_4 = _3089 * _2934.x;
                                frontier_phi_73_pred_5 = _3163 * _2946.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3167 = frontier_phi_73_pred;
                            _3168 = frontier_phi_73_pred_1;
                            _3172 = frontier_phi_73_pred_2;
                            _3171 = frontier_phi_73_pred_3;
                            _3170 = frontier_phi_73_pred_4;
                            _3169 = frontier_phi_73_pred_5;
                            _2876 = _3170 + _2889;
                            _2877 = _3171 + _2890;
                            _2878 = _3172 + _2891;
                            _2873 = _3167 + _2886;
                            _2874 = _3168 + _2887;
                            _2875 = _3169 + _2888;
                            if (_2893 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2886 = _2873;
                                _2887 = _2874;
                                _2888 = _2875;
                                _2889 = _2876;
                                _2890 = _2877;
                                _2891 = _2878;
                                _2892 = _2893;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2876;
                        frontier_phi_67_pred_1 = _2877;
                        frontier_phi_67_pred_2 = _2878;
                        frontier_phi_67_pred_3 = _2875;
                        frontier_phi_67_pred_4 = _2874;
                        frontier_phi_67_pred_5 = _2873;
                    }
                    _2541 = frontier_phi_67_pred;
                    _2543 = frontier_phi_67_pred_1;
                    _2545 = frontier_phi_67_pred_2;
                    _2539 = frontier_phi_67_pred_3;
                    _2537 = frontier_phi_67_pred_4;
                    _2535 = frontier_phi_67_pred_5;
                    uint _2680 = _2679 + 1u;
                    if (_2680 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2673 = _2535;
                        _2674 = _2537;
                        _2675 = _2539;
                        _2676 = _2541;
                        _2677 = _2543;
                        _2678 = _2545;
                        _2679 = _2680;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2543;
                frontier_phi_55_56_ladder_1 = _2545;
                frontier_phi_55_56_ladder_2 = _2541;
                frontier_phi_55_56_ladder_3 = _2539;
                frontier_phi_55_56_ladder_4 = _2537;
                frontier_phi_55_56_ladder_5 = _2535;
            }
            else
            {
                frontier_phi_55_56_ladder = _2429;
                frontier_phi_55_56_ladder_1 = _2431;
                frontier_phi_55_56_ladder_2 = _2427;
                frontier_phi_55_56_ladder_3 = _2425;
                frontier_phi_55_56_ladder_4 = _2423;
                frontier_phi_55_56_ladder_5 = _2421;
            }
            _2534 = frontier_phi_55_56_ladder_5;
            _2536 = frontier_phi_55_56_ladder_4;
            _2538 = frontier_phi_55_56_ladder_3;
            _2540 = frontier_phi_55_56_ladder_2;
            _2542 = frontier_phi_55_56_ladder;
            _2544 = frontier_phi_55_56_ladder_1;
        }
        float _2549 = isnan(1.0) ? _594 : (isnan(_594) ? 1.0 : min(_594, 1.0));
        _2333 = (_2549 * _2540) + _1769;
        _2335 = (_2549 * _2542) + _1771;
        _2337 = (_2549 * _2544) + _1773;
        _2339 = ((_2534 * _578) * _2549) + _2114;
        _2341 = ((_2536 * _580) * _2549) + _2116;
        _2343 = ((_2538 * _581) * _2549) + _2118;
    }
    else
    {
        _2333 = _1769;
        _2335 = _1771;
        _2337 = _1773;
        _2339 = _2114;
        _2341 = _2116;
        _2343 = _2118;
    }
    float _4220 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _4231 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _4242 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    uint _2363 = _246 + 6u;
    float _2371 = _513 / cbSceneParam._m0[86u].x;
    float _2372 = _514 / cbSceneParam._m0[86u].y;
    vec4 _2386 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2371, _2372, (log2((isnan(cbSceneParam._m0[77u].w) ? _446 : (isnan(_446) ? cbSceneParam._m0[77u].w : min(_446, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2388 = _2386.x;
    float _2389 = _2386.y;
    float _2390 = _2386.z;
    float _2391 = _2386.w;
    float _2484;
    float _2486;
    float _2488;
    float _2490;
    if (_446 > cbSceneParam._m0[78u].w)
    {
        float _2446 = isnan(_446) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _446 : min(cbSceneParam._m0[80u].w, _446));
        float _2447 = _2446 / _446;
        float _2458 = _2447 * _498;
        float _2459 = _499 * _2447;
        float _2460 = (-0.0) - _2459;
        float _2462 = _2447 * _500;
        float _2464 = (cbSceneParam._m0[77u].w * _2460) / _2446;
        float _2465 = _2464 + cbSceneParam._m0[79u].w;
        float _2466 = cbSceneParam._m0[79u].w - _2459;
        float _2472 = sqrt(((_2458 * _2458) + (_2459 * _2459)) + (_2462 * _2462));
        float _2475 = (1.0 - (cbSceneParam._m0[77u].w / _2446)) * _2472;
        float _2480 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2482 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2635;
        if (abs((_2460 - _2464) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2635 = ((((_2465 > 0.0) ? exp2(_2480 * _2465) : (2.0 - exp2(_2482 * _2465))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2475;
        }
        else
        {
            float _2595 = 1.0 / cbSceneParam._m0[80u].x;
            float _2596 = isnan(_2466) ? _2465 : (isnan(_2465) ? _2466 : max(_2465, _2466));
            float _2597 = isnan(_2466) ? _2465 : (isnan(_2465) ? _2466 : min(_2465, _2466));
            float _2606 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : min(_2596, 0.0));
            float _2607 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : min(_2597, 0.0));
            _2635 = ((abs(_2472 / _2460) * cbSceneParam._m0[80u].y) * ((((_2606 - _2607) * 2.0) - ((exp2(_2480 * (isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0)))) - exp2(_2480 * (isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0))))) * _2595)) - ((exp2(_2482 * _2606) - exp2(_2482 * _2607)) * _2595))) + (_2475 * cbSceneParam._m0[80u].z);
        }
        vec4 _2637 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2371, _2372, 1.0), 0.0);
        float _2646 = exp2((_2635 * (-1.44269502162933349609375)) * (1.0 - _2637.w));
        float _2647 = log2(_2646);
        float _2663 = log2(_2391);
        _2484 = (exp2(_2663 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2647 * cbSceneParam._m0[78u].x)) * _2637.x) / cbSceneParam._m0[78u].x)) + _2388;
        _2486 = (exp2(_2663 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2647 * cbSceneParam._m0[78u].y)) * _2637.y) / cbSceneParam._m0[78u].y)) + _2389;
        _2488 = (exp2(_2663 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2647 * cbSceneParam._m0[78u].z)) * _2637.z) / cbSceneParam._m0[78u].z)) + _2390;
        _2490 = _2646 * _2391;
    }
    else
    {
        _2484 = _2388;
        _2486 = _2389;
        _2488 = _2390;
        _2490 = _2391;
    }
    float _2502 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2503 = _2502 == 3.0;
    float _2504 = log2(_2490);
    float _2511 = exp2(_2504 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_2333 + ((isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0))) * _594))) + ((_2339 + ((isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0))) * _1403)) * cbPerFrame._m0[3u].x));
    float _2512 = exp2(_2504 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_2335 + ((isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0))) * _594))) + ((_2341 + ((isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))) * _1403)) * cbPerFrame._m0[3u].x));
    float _2513 = exp2(_2504 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_2337 + ((isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0))) * _594))) + ((_2343 + ((isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))) * _1403)) * cbPerFrame._m0[3u].x));
    float _2522 = (_2502 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2522 * (_2503 ? _2511 : (_2511 + (cbSceneParam._m0[72u].w * _2484)));
    SV_Target.y = _2522 * (_2503 ? _2512 : (_2512 + (cbSceneParam._m0[72u].w * _2486)));
    SV_Target.z = _2522 * (_2503 ? _2513 : (_2513 + (cbSceneParam._m0[72u].w * _2488)));
    SV_Target.w = cbInstanceData._m0[_2363].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2363].w;
}


