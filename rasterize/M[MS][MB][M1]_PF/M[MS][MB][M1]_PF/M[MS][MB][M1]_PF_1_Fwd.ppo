#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _849;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _227 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _233 = _227.x * cbMtdParam._m0[9u].x;
    float _234 = _227.y * cbMtdParam._m0[9u].y;
    float _235 = _227.z * cbMtdParam._m0[9u].z;
    vec4 _248 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _252 = _248.z;
    float _257 = (_248.x * 2.0) + (-1.0);
    float _259 = (_248.y * 2.0) + (-1.0);
    float _260 = dot(vec2(_257, _259), vec2(_257, _259));
    float _3183 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _266 = sqrt(1.0 - (isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0))));
    vec4 _279 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _281 = _279.x;
    float _286 = cbMtdParam._m0[22u].x + _248.w;
    float _289 = fma(_266, _197 * NORMAL.x, fma(_259, _204 * TANGENT.x, (_190 * _182) * _257));
    float _292 = fma(_266, _197 * NORMAL.y, fma(_259, _204 * TANGENT.y, (_190 * _183) * _257));
    float _295 = fma(_266, _197 * NORMAL.z, fma(_259, _204 * TANGENT.z, (_190 * _184) * _257));
    float _299 = inversesqrt(dot(vec3(_289, _292, _295), vec3(_289, _292, _295)));
    float _300 = _299 * _289;
    float _301 = _299 * _292;
    float _302 = _299 * _295;
    float _3194 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _303 = isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0));
    float _3205 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _3216 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3227 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3238 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3249 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _308 = isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0));
    float _324 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _366 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _376 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _366);
    float _377 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _366);
    float _378 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _366);
    float _382 = inversesqrt(dot(vec3(_376, _377, _378), vec3(_376, _377, _378)));
    float _383 = _376 * _382;
    float _384 = _377 * _382;
    float _385 = _378 * _382;
    float _391 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _392 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _413 = fma(_302, cbSceneParam._m0[5u].z, fma(_301, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _300));
    float _416 = fma(_302, cbSceneParam._m0[6u].z, fma(_301, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _300));
    float _419 = fma(_302, cbSceneParam._m0[7u].z, fma(_301, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _300));
    uint _432 = uint(roundEven(NORMAL.w)) * 13u;
    uint _435 = (_432 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _441 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3216 : (isnan(_3216) ? 1.0 : min(_3216, 1.0)))) * cbInstanceData._m0[_435].x;
    float _442 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3227 : (isnan(_3227) ? 1.0 : min(_3227, 1.0)))) * cbInstanceData._m0[_435].y;
    float _443 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3238 : (isnan(_3238) ? 1.0 : min(_3238, 1.0)))) * cbInstanceData._m0[_435].z;
    float _3260 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _444 = isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0));
    float _3271 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _445 = isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0));
    float _3282 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _446 = isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0));
    float _447 = 1.0 - _308;
    float _448 = _444 * _447;
    float _449 = _445 * _447;
    float _450 = _446 * _447;
    float _455 = (_444 + (-0.039999999105930328369140625)) * _308;
    float _456 = (_445 + (-0.039999999105930328369140625)) * _308;
    float _457 = (_446 + (-0.039999999105930328369140625)) * _308;
    float _458 = _455 + 0.039999999105930328369140625;
    float _460 = _456 + 0.039999999105930328369140625;
    float _461 = _457 + 0.039999999105930328369140625;
    vec4 _470 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _391, cbSceneParam._m0[86u].y * _392));
    float _474 = ((isnan(1.0) ? _3205 : (isnan(_3205) ? 1.0 : min(_3205, 1.0))) * TEXCOORD_5.w) * _470.x;
    float _475 = dot(vec3(_300, _301, _302), vec3(_383, _384, _385));
    float _478 = _475 * 2.0;
    float _482 = (_478 * _300) - _383;
    float _483 = (_478 * _301) - _384;
    float _484 = (_478 * _302) - _385;
    float _488 = abs(dot(vec3(_383, _384, _385), vec3(_300, _301, _302)));
    float _3293 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _490 = sqrt(_303);
    float _503 = exp2((_490 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_490 * 3.0));
    float _509 = (1.0 - _503) * ((_490 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _510 = _503 * _490;
    float _538 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _542 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _546 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _848;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _573 = fma(_546, cbModelParam._m0[26u].z, fma(_542, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _538));
        float _577 = fma(_546, cbModelParam._m0[27u].z, fma(_542, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _538));
        float _581 = fma(_546, cbModelParam._m0[28u].z, fma(_542, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _538));
        float _606 = _538 + _300;
        float _607 = _542 + _301;
        float _608 = _546 + _302;
        float _618 = fma(_608, cbModelParam._m0[26u].z, fma(_607, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _606)) - _573;
        float _619 = fma(_608, cbModelParam._m0[27u].z, fma(_607, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _606)) - _577;
        float _620 = fma(_608, cbModelParam._m0[28u].z, fma(_607, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _606)) - _581;
        float _624 = inversesqrt(dot(vec3(_618, _619, _620), vec3(_618, _619, _620)));
        float _637 = ((_624 * _618) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_573 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _638 = ((_624 * _619) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_577 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _639 = ((_624 * _620) / cbModelParam._m0[34u].z) + ((((((_581 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _642 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_637, _638, _639), 0.0);
        vec4 _649 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_637, _638, _639), 0.0);
        vec4 _656 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_637, _638, _639), 0.0);
        vec4 _663 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_637, _638, _639), 0.0);
        float _676 = exp2((_642.w + (-0.5)) * 20.0) * 2.0;
        float _677 = _676 * (_642.x + (-0.5));
        float _678 = _676 * (_642.y + (-0.5));
        float _679 = _676 * (_642.z + (-0.5));
        float _686 = exp2((_649.w + (-0.5)) * 20.0) * 2.0;
        float _687 = _686 * (_649.x + (-0.5));
        float _688 = _686 * (_649.y + (-0.5));
        float _689 = _686 * (_649.z + (-0.5));
        float _696 = exp2((_656.w + (-0.5)) * 20.0) * 2.0;
        float _697 = _696 * (_656.x + (-0.5));
        float _698 = _696 * (_656.y + (-0.5));
        float _699 = _696 * (_656.z + (-0.5));
        float _706 = exp2((_663.w + (-0.5)) * 20.0) * 2.0;
        float _707 = _706 * (_663.x + (-0.5));
        float _708 = _706 * (_663.y + (-0.5));
        float _709 = _706 * (_663.z + (-0.5));
        float _710 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _711 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _712 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        float _713 = _677 * 0.5;
        float _714 = _687 * 0.5;
        float _715 = _697 * 0.5;
        float _716 = dot(vec3(_713, _714, _715), vec3(_713, _714, _715));
        float _721 = (_716 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_716);
        float _730 = (dot(vec3(_300, _301, _302), vec3(_721 * _713, _721 * _714, _721 * _715)) + 1.0) * 0.5;
        float _3319 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _740 = sqrt(((_714 * _714) + (_713 * _713)) + (_715 * _715)) / (_710 + 9.9999997473787516355514526367188e-06);
        float _3330 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _741 = isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0));
        float _742 = _741 * 2.0;
        float _746 = (1.0 - _741) / (_741 + 1.0);
        float _3341 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _747 = isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0));
        float _756 = ((((1.0 - _747) * (_742 + 2.0)) * exp2(log2(isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0))) * (_742 + 1.0))) + _747) * _710;
        float _757 = _678 * 0.5;
        float _758 = _688 * 0.5;
        float _759 = _698 * 0.5;
        float _760 = dot(vec3(_757, _758, _759), vec3(_757, _758, _759));
        float _765 = (_760 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_760);
        float _773 = (dot(vec3(_300, _301, _302), vec3(_765 * _757, _765 * _758, _765 * _759)) + 1.0) * 0.5;
        float _3352 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _782 = sqrt(((_758 * _758) + (_757 * _757)) + (_759 * _759)) / (_711 + 9.9999997473787516355514526367188e-06);
        float _3363 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _783 = isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0));
        float _784 = _783 * 2.0;
        float _788 = (1.0 - _783) / (_783 + 1.0);
        float _3374 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
        float _798 = ((((1.0 - _789) * (_784 + 2.0)) * exp2(log2(isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0))) * (_784 + 1.0))) + _789) * _711;
        float _799 = _679 * 0.5;
        float _800 = _689 * 0.5;
        float _801 = _699 * 0.5;
        float _802 = dot(vec3(_799, _800, _801), vec3(_799, _800, _801));
        float _807 = (_802 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_802);
        float _815 = (dot(vec3(_300, _301, _302), vec3(_807 * _799, _807 * _800, _807 * _801)) + 1.0) * 0.5;
        float _3385 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _824 = sqrt(((_800 * _800) + (_799 * _799)) + (_801 * _801)) / (_712 + 9.9999997473787516355514526367188e-06);
        float _3396 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _825 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
        float _826 = _825 * 2.0;
        float _830 = (1.0 - _825) / (_825 + 1.0);
        float _3407 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _831 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
        float _840 = ((((1.0 - _831) * (_826 + 2.0)) * exp2(log2(isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0))) * (_826 + 1.0))) + _831) * _712;
        _848 = _679;
        _850 = _678;
        _851 = _677;
        _852 = _689;
        _853 = _688;
        _854 = _687;
        _855 = _699;
        _856 = _698;
        _857 = _697;
        _858 = _712;
        _859 = _711;
        _860 = _710;
        _861 = cbModelParam._m0[36u].z * (isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0)));
        _862 = cbModelParam._m0[36u].z * (isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0)));
        _863 = cbModelParam._m0[36u].z * (isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0)));
    }
    else
    {
        _848 = _849;
        _850 = _849;
        _851 = _849;
        _852 = _849;
        _853 = _849;
        _854 = _849;
        _855 = _849;
        _856 = _849;
        _857 = _849;
        _858 = _849;
        _859 = _849;
        _860 = _849;
        _861 = 0.0;
        _862 = 0.0;
        _863 = 0.0;
    }
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _888 = fma(_546, cbModelParam._m0[30u].z, fma(_542, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _538));
        float _892 = fma(_546, cbModelParam._m0[31u].z, fma(_542, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _538));
        float _896 = fma(_546, cbModelParam._m0[32u].z, fma(_542, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _538));
        float _919 = _538 + _300;
        float _920 = _542 + _301;
        float _921 = _546 + _302;
        float _931 = fma(_921, cbModelParam._m0[30u].z, fma(_920, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _919)) - _888;
        float _932 = fma(_921, cbModelParam._m0[31u].z, fma(_920, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _919)) - _892;
        float _933 = fma(_921, cbModelParam._m0[32u].z, fma(_920, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _919)) - _896;
        float _937 = inversesqrt(dot(vec3(_931, _932, _933), vec3(_931, _932, _933)));
        float _950 = ((_937 * _931) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_888 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _951 = ((_937 * _932) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_892 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _952 = ((_937 * _933) / cbModelParam._m0[35u].z) + ((((((_896 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        float _987 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_954.x + (-0.5));
        float _989 = _987 * (_954.y + (-0.5));
        float _990 = _987 * (_954.z + (-0.5));
        float _997 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_961.x + (-0.5));
        float _999 = _997 * (_961.y + (-0.5));
        float _1000 = _997 * (_961.z + (-0.5));
        float _1007 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_968.x + (-0.5));
        float _1009 = _1007 * (_968.y + (-0.5));
        float _1010 = _1007 * (_968.z + (-0.5));
        float _1017 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = _1017 * (_975.x + (-0.5));
        float _1019 = _1017 * (_975.y + (-0.5));
        float _1020 = _1017 * (_975.z + (-0.5));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1024 = _988 * 0.5;
        float _1025 = _998 * 0.5;
        float _1026 = _1008 * 0.5;
        float _1027 = dot(vec3(_1024, _1025, _1026), vec3(_1024, _1025, _1026));
        float _1032 = (_1027 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1027);
        float _1040 = (dot(vec3(_300, _301, _302), vec3(_1032 * _1024, _1032 * _1025, _1032 * _1026)) + 1.0) * 0.5;
        float _3448 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1049 = sqrt(((_1025 * _1025) + (_1024 * _1024)) + (_1026 * _1026)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _3459 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
        float _1051 = _1050 * 2.0;
        float _1055 = (1.0 - _1050) / (_1050 + 1.0);
        float _3470 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
        float _1065 = ((((1.0 - _1056) * (_1051 + 2.0)) * exp2(log2(isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0))) * (_1051 + 1.0))) + _1056) * _1021;
        float _1066 = _989 * 0.5;
        float _1067 = _999 * 0.5;
        float _1068 = _1009 * 0.5;
        float _1069 = dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068));
        float _1074 = (_1069 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1069);
        float _1082 = (dot(vec3(_300, _301, _302), vec3(_1074 * _1066, _1074 * _1067, _1074 * _1068)) + 1.0) * 0.5;
        float _3481 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1091 = sqrt(((_1067 * _1067) + (_1066 * _1066)) + (_1068 * _1068)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3492 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
        float _1093 = _1092 * 2.0;
        float _1097 = (1.0 - _1092) / (_1092 + 1.0);
        float _3503 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
        float _1107 = ((((1.0 - _1098) * (_1093 + 2.0)) * exp2(log2(isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0))) * (_1093 + 1.0))) + _1098) * _1022;
        float _1108 = _990 * 0.5;
        float _1109 = _1000 * 0.5;
        float _1110 = _1010 * 0.5;
        float _1111 = dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110));
        float _1116 = (_1111 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1111);
        float _1124 = (dot(vec3(_300, _301, _302), vec3(_1116 * _1108, _1116 * _1109, _1116 * _1110)) + 1.0) * 0.5;
        float _3514 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1133 = sqrt(((_1109 * _1109) + (_1108 * _1108)) + (_1110 * _1110)) / (_1023 + 9.9999997473787516355514526367188e-06);
        float _3525 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _1135 = _1134 * 2.0;
        float _1139 = (1.0 - _1134) / (_1134 + 1.0);
        float _3536 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _1149 = ((((1.0 - _1140) * (_1135 + 2.0)) * exp2(log2(isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0))) * (_1135 + 1.0))) + _1140) * _1023;
        _1157 = _990;
        _1158 = _989;
        _1159 = _988;
        _1160 = _1000;
        _1161 = _999;
        _1162 = _998;
        _1163 = _1010;
        _1164 = _1009;
        _1165 = _1008;
        _1166 = _1023;
        _1167 = _1022;
        _1168 = _1021;
        _1169 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0)));
        _1170 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0)));
        _1171 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)));
    }
    else
    {
        _1157 = _849;
        _1158 = _849;
        _1159 = _849;
        _1160 = _849;
        _1161 = _849;
        _1162 = _849;
        _1163 = _849;
        _1164 = _849;
        _1165 = _849;
        _1166 = _849;
        _1167 = _849;
        _1168 = _849;
        _1169 = 0.0;
        _1170 = 0.0;
        _1171 = 0.0;
    }
    float _1181 = (cbModelParam._m0[1u].x * (_1169 - _861)) + _861;
    float _1182 = (cbModelParam._m0[1u].x * (_1170 - _862)) + _862;
    float _1183 = (cbModelParam._m0[1u].x * (_1171 - _863)) + _863;
    float _1204 = fma(_1183, cbSceneParam._m0[89u].z, fma(_1182, cbSceneParam._m0[89u].y, _1181 * cbSceneParam._m0[89u].x));
    float _1207 = fma(_1183, cbSceneParam._m0[90u].z, fma(_1182, cbSceneParam._m0[90u].y, _1181 * cbSceneParam._m0[90u].x));
    float _1210 = fma(_1183, cbSceneParam._m0[91u].z, fma(_1182, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1181));
    float _1225 = _482 * 0.5;
    float _1226 = _483 * 0.5;
    float _1227 = _484 * 0.5;
    float _1228 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_1159, _1162, _1165, _1168));
    float _1231 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_1158, _1161, _1164, _1167));
    float _1234 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_1157, _1160, _1163, _1166));
    float _1268;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1241 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_848, _852, _855, _858));
        float _1245 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_850, _853, _856, _859));
        float _1249 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_851, _854, _857, _860));
        float _1256 = dot(vec4(cbModelParam._m0[39u]), vec4(_1225, _1226, _1227, 1.0));
        _1268 = dot(vec3(isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)), isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)), isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1256) ? 0.0 : (isnan(0.0) ? _1256 : max(0.0, _1256))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1268 = 1.0;
    }
    float _1279;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1270 = dot(vec4(cbModelParam._m0[40u]), vec4(_1225, _1226, _1227, 1.0));
        _1279 = dot(vec3(isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)), isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)), isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1270) ? 0.0 : (isnan(0.0) ? _1270 : max(0.0, _1270))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1279 = 1.0;
    }
    float _1283 = (_1279 * cbModelParam._m0[1u].x) + (_1268 * (1.0 - cbModelParam._m0[1u].x));
    float _1293 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _303);
    float _1294 = isnan(_1293) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1293 : min(cbModelParam._m0[25u].z, _1293));
    float _1376;
    float _1378;
    float _1380;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1343 = fma(_546, cbModelParam._m0[13u].z, fma(_542, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _538)) + cbModelParam._m0[13u].w;
        float _1347 = fma(_546, cbModelParam._m0[14u].z, fma(_542, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _538)) + cbModelParam._m0[14u].w;
        float _1351 = fma(_546, cbModelParam._m0[15u].z, fma(_542, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _538)) + cbModelParam._m0[15u].w;
        float _1354 = fma(_484, cbModelParam._m0[13u].z, fma(_483, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _482));
        float _1357 = fma(_484, cbModelParam._m0[14u].z, fma(_483, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _482));
        float _1360 = fma(_484, cbModelParam._m0[15u].z, fma(_483, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _482));
        float _1388;
        if (_1354 > 0.0)
        {
            _1388 = abs((1.0 - _1343) / _1354);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1354 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1343 + 1.0) / _1354);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1388 = frontier_phi_14_12_ladder;
        }
        float _1594;
        if (_1357 > 0.0)
        {
            _1594 = abs((1.0 - _1347) / _1357);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1357 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1347 + 1.0) / _1357);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1594 = frontier_phi_23_19_ladder;
        }
        float _1848;
        if (_1360 > 0.0)
        {
            _1848 = abs((1.0 - _1351) / _1360);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1360 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1351 + 1.0) / _1360);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1848 = frontier_phi_35_30_ladder;
        }
        float _1850 = isnan(_1594) ? _1388 : (isnan(_1388) ? _1594 : min(_1388, _1594));
        float _1851 = isnan(_1848) ? _1850 : (isnan(_1850) ? _1848 : min(_1850, _1848));
        float _1855 = (_1851 * _1354) + _1343;
        float _1856 = (_1851 * _1357) + _1347;
        float _1857 = (_1851 * _1360) + _1351;
        float _1858 = _1851 * 9.9999997473787516355514526367188e-05;
        float _1860 = (-1.0) - _1858;
        float _1862 = _1858 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1857 > _1862) || ((_1857 < _1860) || ((_1856 > _1862) || ((_1856 < _1860) || ((_1855 < _1860) || (_1855 > _1862))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1985 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1857, cbModelParam._m0[9u].z, fma(_1856, cbModelParam._m0[9u].y, _1855 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1857, cbModelParam._m0[10u].z, fma(_1856, cbModelParam._m0[10u].y, _1855 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1857, cbModelParam._m0[11u].z, fma(_1856, cbModelParam._m0[11u].y, _1855 * cbModelParam._m0[11u].x))), _1294);
            frontier_phi_13_35_ladder = _1985.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1985.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1985.x * cbModelParam._m0[1u].y;
        }
        _1376 = frontier_phi_13_35_ladder_2;
        _1378 = frontier_phi_13_35_ladder_1;
        _1380 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1364 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_482, _483, _484), _1294);
        _1376 = _1364.x * cbModelParam._m0[1u].y;
        _1378 = _1364.y * cbModelParam._m0[1u].y;
        _1380 = _1364.z * cbModelParam._m0[1u].y;
    }
    float _1384 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _303);
    float _1385 = isnan(_1384) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1384 : min(cbModelParam._m0[25u].w, _1384));
    float _1477;
    float _1479;
    float _1481;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1441 = fma(_546, cbModelParam._m0[21u].z, fma(_542, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _538)) + cbModelParam._m0[21u].w;
        float _1445 = fma(_546, cbModelParam._m0[22u].z, fma(_542, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _538)) + cbModelParam._m0[22u].w;
        float _1449 = fma(_546, cbModelParam._m0[23u].z, fma(_542, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _538)) + cbModelParam._m0[23u].w;
        float _1452 = fma(_484, cbModelParam._m0[21u].z, fma(_483, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _482));
        float _1455 = fma(_484, cbModelParam._m0[22u].z, fma(_483, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _482));
        float _1458 = fma(_484, cbModelParam._m0[23u].z, fma(_483, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _482));
        float _1599;
        if (_1452 > 0.0)
        {
            _1599 = abs((1.0 - _1441) / _1452);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1452 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1441 + 1.0) / _1452);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1599 = frontier_phi_25_21_ladder;
        }
        float _1875;
        if (_1455 > 0.0)
        {
            _1875 = abs((1.0 - _1445) / _1455);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1455 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1445 + 1.0) / _1455);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1875 = frontier_phi_37_32_ladder;
        }
        float _2088;
        if (_1458 > 0.0)
        {
            _2088 = abs((1.0 - _1449) / _1458);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1458 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1449 + 1.0) / _1458);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2088 = frontier_phi_46_43_ladder;
        }
        float _2090 = isnan(_1875) ? _1599 : (isnan(_1599) ? _1875 : min(_1599, _1875));
        float _2091 = isnan(_2088) ? _2090 : (isnan(_2090) ? _2088 : min(_2090, _2088));
        float _2095 = (_2091 * _1452) + _1441;
        float _2096 = (_2091 * _1455) + _1445;
        float _2097 = (_2091 * _1458) + _1449;
        float _2098 = _2091 * 9.9999997473787516355514526367188e-05;
        float _2099 = (-1.0) - _2098;
        float _2101 = _2098 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2097 > _2101) || ((_2097 < _2099) || ((_2096 > _2101) || ((_2096 < _2099) || ((_2095 < _2099) || (_2095 > _2101))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2296 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2097, cbModelParam._m0[17u].z, fma(_2096, cbModelParam._m0[17u].y, _2095 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2097, cbModelParam._m0[18u].z, fma(_2096, cbModelParam._m0[18u].y, _2095 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2097, cbModelParam._m0[19u].z, fma(_2096, cbModelParam._m0[19u].y, _2095 * cbModelParam._m0[19u].x))), _1385);
            frontier_phi_22_46_ladder = _2296.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2296.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2296.x * cbModelParam._m0[1u].z;
        }
        _1477 = frontier_phi_22_46_ladder_2;
        _1479 = frontier_phi_22_46_ladder_1;
        _1481 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1461 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_482, _483, _484), _1385);
        _1477 = _1461.x * cbModelParam._m0[1u].z;
        _1479 = _1461.y * cbModelParam._m0[1u].z;
        _1481 = _1461.z * cbModelParam._m0[1u].z;
    }
    float _1494 = (((_509 * _458) + _510) * _474) * ((cbModelParam._m0[1u].w * (_1477 - _1376)) + _1376);
    float _1496 = (((_509 * _460) + _510) * _474) * ((cbModelParam._m0[1u].w * (_1479 - _1378)) + _1378);
    float _1498 = (((_509 * _461) + _510) * _474) * ((cbModelParam._m0[1u].w * (_1481 - _1380)) + _1380);
    float _1501 = fma(_1498, cbSceneParam._m0[89u].z, fma(_1496, cbSceneParam._m0[89u].y, _1494 * cbSceneParam._m0[89u].x));
    float _1504 = fma(_1498, cbSceneParam._m0[90u].z, fma(_1496, cbSceneParam._m0[90u].y, _1494 * cbSceneParam._m0[90u].x));
    float _1507 = fma(_1498, cbSceneParam._m0[91u].z, fma(_1496, cbSceneParam._m0[91u].y, _1494 * cbSceneParam._m0[91u].x));
    uvec4 _1517 = floatBitsToUint(cbInstanceData._m0[_432 + 5u]);
    uint _1519 = _1517.x * 14u;
    uint _1520 = _1519 + 13u;
    float _1527 = _474 + (-1.0);
    float _1532 = (cbLight._m0[_1520].x * _1527) + 1.0;
    float _1533 = (cbLight._m0[_1520].y * _1527) + 1.0;
    float _1534 = (cbLight._m0[_1520].z * _1527) + 1.0;
    float _1535 = (cbLight._m0[_1520].w * _1527) + 1.0;
    uint _1536 = _1519 + 5u;
    float _1542 = isnan(1.0) ? _1533 : (isnan(_1533) ? 1.0 : min(_1533, 1.0));
    uint _1546 = _1519 + 4u;
    float _1553 = isnan(1.0) ? _1532 : (isnan(_1532) ? 1.0 : min(_1532, 1.0));
    uint _1557 = _1519 | 1u;
    float _1568 = dot(vec3(cbLight._m0[_1519].xyz), vec3(_300, _301, _302));
    float _1571 = dot(vec3(cbLight._m0[_1557].xyz), vec3(_300, _301, _302));
    float _3672 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
    float _3683 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
    float _1576 = (isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * 0.3183098733425140380859375;
    float _1578 = (isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * 0.3183098733425140380859375;
    float _1585 = ((cbLight._m0[_1536].x * _1542) * _1578) + ((cbLight._m0[_1546].x * _1553) * _1576);
    float _1586 = ((_1542 * cbLight._m0[_1536].y) * _1578) + ((_1553 * cbLight._m0[_1546].y) * _1576);
    float _1587 = ((_1542 * cbLight._m0[_1536].z) * _1578) + ((_1553 * cbLight._m0[_1546].z) * _1576);
    uvec4 _1591 = floatBitsToUint(cbLight._m0[_1519 + 12u]);
    bool _1593 = _1591.x == 0u;
    float _1604;
    float _1606;
    float _1608;
    if (_1593)
    {
        _1604 = _1585;
        _1606 = _1586;
        _1608 = _1587;
    }
    else
    {
        uint _1612 = _1519 + 6u;
        float _1628 = (dot(vec3(cbLight._m0[_1519 + 2u].xyz), vec3(_300, _301, _302)) * 0.5) + 0.5;
        float _1629 = _1628 * _1628;
        float _3694 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1631 = isnan(1.0) ? _1534 : (isnan(_1534) ? 1.0 : min(_1534, 1.0));
        _1604 = (((cbLight._m0[_1612].x * 0.3183098733425140380859375) * _1630) * _1631) + _1585;
        _1606 = (((cbLight._m0[_1612].y * 0.3183098733425140380859375) * _1630) * _1631) + _1586;
        _1608 = (((cbLight._m0[_1612].z * 0.3183098733425140380859375) * _1630) * _1631) + _1587;
    }
    bool _1611 = _1591.y == 0u;
    float _1649;
    float _1651;
    float _1653;
    if (_1611)
    {
        _1649 = _1604;
        _1651 = _1606;
        _1653 = _1608;
    }
    else
    {
        uint _1819 = _1519 + 7u;
        float _1835 = (dot(vec3(cbLight._m0[_1519 + 3u].xyz), vec3(_300, _301, _302)) * 0.5) + 0.5;
        float _1836 = _1835 * _1835;
        float _3710 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
        float _1837 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1838 = isnan(1.0) ? _1535 : (isnan(_1535) ? 1.0 : min(_1535, 1.0));
        _1649 = (((cbLight._m0[_1819].x * 0.3183098733425140380859375) * _1837) * _1838) + _1604;
        _1651 = (((cbLight._m0[_1819].y * 0.3183098733425140380859375) * _1837) * _1838) + _1606;
        _1653 = (((cbLight._m0[_1819].z * 0.3183098733425140380859375) * _1837) * _1838) + _1608;
    }
    uint _1656 = _1519 + 8u;
    float _1669 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1519].w)) * _303) * 0.949999988079071044921875);
    float _1670 = _1669 * _1669;
    float _1671 = cbLight._m0[_1519].x + _383;
    float _1672 = cbLight._m0[_1519].y + _384;
    float _1673 = cbLight._m0[_1519].z + _385;
    float _1677 = inversesqrt(dot(vec3(_1671, _1672, _1673), vec3(_1671, _1672, _1673)));
    float _1678 = _1677 * _1671;
    float _1679 = _1677 * _1672;
    float _1680 = _1677 * _1673;
    float _1681 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1519].xyz));
    float _3726 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
    float _1684 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
    float _3737 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _1685 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
    float _1686 = dot(vec3(_300, _301, _302), vec3(_1678, _1679, _1680));
    float _3748 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
    float _1689 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
    float _1690 = dot(vec3(cbLight._m0[_1519].xyz), vec3(_1678, _1679, _1680));
    float _3759 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
    float _1694 = _1670 * _1670;
    float _1698 = ((_1689 * _1689) * (_1694 + (-1.0))) + 1.0;
    float _1706 = exp2(log2(1.0 - (isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0)))) * 5.0);
    float _1707 = 0.959999978542327880859375 - _455;
    float _1709 = 0.959999978542327880859375 - _456;
    float _1710 = 0.959999978542327880859375 - _457;
    float _1717 = 1.0 - _1670;
    float _1728 = (0.5 / (((_1685 * ((_1684 * _1717) + _1670)) + 9.9999999392252902907785028219223e-09) + (((_1685 * _1717) + _1670) * _1684))) * _1684;
    float _3770 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
    float _1730 = (isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * (_1694 / ((_1698 * _1698) * 3.141590118408203125));
    uint _1741 = _1519 + 9u;
    float _1752 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1557].w)) * _303) * 0.949999988079071044921875);
    float _1753 = _1752 * _1752;
    float _1754 = cbLight._m0[_1557].x + _383;
    float _1755 = cbLight._m0[_1557].y + _384;
    float _1756 = cbLight._m0[_1557].z + _385;
    float _1760 = inversesqrt(dot(vec3(_1754, _1755, _1756), vec3(_1754, _1755, _1756)));
    float _1761 = _1760 * _1754;
    float _1762 = _1760 * _1755;
    float _1763 = _1760 * _1756;
    float _1764 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1557].xyz));
    float _3781 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
    float _1767 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    float _1768 = dot(vec3(_300, _301, _302), vec3(_1761, _1762, _1763));
    float _3792 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
    float _1771 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    float _1772 = dot(vec3(cbLight._m0[_1557].xyz), vec3(_1761, _1762, _1763));
    float _3803 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    float _1776 = _1753 * _1753;
    float _1780 = ((_1771 * _1771) * (_1776 + (-1.0))) + 1.0;
    float _1787 = exp2(log2(1.0 - (isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0)))) * 5.0);
    float _1794 = 1.0 - _1753;
    float _1804 = (0.5 / (((_1685 * ((_1767 * _1794) + _1753)) + 9.9999999392252902907785028219223e-09) + (((_1685 * _1794) + _1753) * _1767))) * _1767;
    float _3814 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1806 = (isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) * (_1776 / ((_1780 * _1780) * 3.141590118408203125));
    float _1816 = (((((_1787 * _1707) + _458) * cbLight._m0[_1741].x) * _1806) * _1542) + (((((_1706 * _1707) + _458) * cbLight._m0[_1656].x) * _1730) * _1553);
    float _1817 = (((((_1787 * _1709) + _460) * cbLight._m0[_1741].y) * _1806) * _1542) + (((((_1706 * _1709) + _460) * cbLight._m0[_1656].y) * _1730) * _1553);
    float _1818 = (((((_1787 * _1710) + _461) * cbLight._m0[_1741].z) * _1806) * _1542) + (((((_1706 * _1710) + _461) * cbLight._m0[_1656].z) * _1730) * _1553);
    float _1880;
    float _1882;
    float _1884;
    if (_1593)
    {
        _1880 = _1816;
        _1882 = _1817;
        _1884 = _1818;
    }
    else
    {
        uint _1886 = _1519 + 2u;
        uint _1890 = _1519 + 10u;
        float _1904 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1886].w)) * _303) * 0.949999988079071044921875);
        float _1905 = _1904 * _1904;
        float _1906 = cbLight._m0[_1886].x + _383;
        float _1907 = cbLight._m0[_1886].y + _384;
        float _1908 = cbLight._m0[_1886].z + _385;
        float _1912 = inversesqrt(dot(vec3(_1906, _1907, _1908), vec3(_1906, _1907, _1908)));
        float _1913 = _1912 * _1906;
        float _1914 = _1912 * _1907;
        float _1915 = _1912 * _1908;
        float _1916 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1886].xyz));
        float _3825 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
        float _1919 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1920 = dot(vec3(_300, _301, _302), vec3(_1913, _1914, _1915));
        float _3836 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
        float _1923 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1924 = dot(vec3(cbLight._m0[_1886].xyz), vec3(_1913, _1914, _1915));
        float _3847 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
        float _1928 = _1905 * _1905;
        float _1932 = ((_1923 * _1923) * (_1928 + (-1.0))) + 1.0;
        float _1939 = exp2(log2(1.0 - (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0)))) * 5.0);
        float _1946 = 1.0 - _1905;
        float _1956 = (0.5 / (((_1685 * ((_1919 * _1946) + _1905)) + 9.9999999392252902907785028219223e-09) + (((_1685 * _1946) + _1905) * _1919))) * _1919;
        float _3858 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
        float _1958 = (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * (_1928 / ((_1932 * _1932) * 3.141590118408203125));
        float _1959 = isnan(1.0) ? _1534 : (isnan(_1534) ? 1.0 : min(_1534, 1.0));
        _1880 = (((((_1939 * _1707) + _458) * cbLight._m0[_1890].x) * _1958) * _1959) + _1816;
        _1882 = (((((_1939 * _1709) + _460) * cbLight._m0[_1890].y) * _1958) * _1959) + _1817;
        _1884 = (((((_1939 * _1710) + _461) * cbLight._m0[_1890].z) * _1958) * _1959) + _1818;
    }
    float _1994;
    float _1996;
    float _1998;
    if (_1611)
    {
        _1994 = _1880;
        _1996 = _1882;
        _1998 = _1884;
    }
    else
    {
        uint _2005 = _1519 + 3u;
        uint _2009 = _1519 + 11u;
        float _2023 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2005].w)) * _303) * 0.949999988079071044921875);
        float _2024 = _2023 * _2023;
        float _2025 = cbLight._m0[_2005].x + _383;
        float _2026 = cbLight._m0[_2005].y + _384;
        float _2027 = cbLight._m0[_2005].z + _385;
        float _2031 = inversesqrt(dot(vec3(_2025, _2026, _2027), vec3(_2025, _2026, _2027)));
        float _2032 = _2031 * _2025;
        float _2033 = _2031 * _2026;
        float _2034 = _2031 * _2027;
        float _2035 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_2005].xyz));
        float _3874 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        float _2038 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _2039 = dot(vec3(_300, _301, _302), vec3(_2032, _2033, _2034));
        float _3885 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2042 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _2043 = dot(vec3(cbLight._m0[_2005].xyz), vec3(_2032, _2033, _2034));
        float _3896 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2047 = _2024 * _2024;
        float _2051 = ((_2042 * _2042) * (_2047 + (-1.0))) + 1.0;
        float _2058 = exp2(log2(1.0 - (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) * 5.0);
        float _2065 = 1.0 - _2024;
        float _2075 = (0.5 / (((_1685 * ((_2038 * _2065) + _2024)) + 9.9999999392252902907785028219223e-09) + (((_1685 * _2065) + _2024) * _2038))) * _2038;
        float _3907 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
        float _2077 = (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * (_2047 / ((_2051 * _2051) * 3.141590118408203125));
        float _2078 = isnan(1.0) ? _1535 : (isnan(_1535) ? 1.0 : min(_1535, 1.0));
        _1994 = (((((_2058 * _1707) + _458) * cbLight._m0[_2009].x) * _2077) * _2078) + _1880;
        _1996 = (((((_2058 * _1709) + _460) * cbLight._m0[_2009].y) * _2077) * _2078) + _1882;
        _1998 = (((((_2058 * _1710) + _461) * cbLight._m0[_2009].z) * _2077) * _2078) + _1884;
    }
    float _2213;
    float _2215;
    float _2217;
    float _2219;
    float _2221;
    float _2223;
    if (_1517.y == 0u)
    {
        float _2153 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2154 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2153;
        float _2155 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2153;
        float _2156 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2153;
        uvec4 _2168 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2169 = _2168.x;
        uint _2180 = uint((float(_2168.y) * floor(float(uint(cbSceneParam._m0[85u].y * _392) / _2169))) + floor(float(uint(cbSceneParam._m0[85u].x * _391) / _2169)));
        float _2190 = (log2(_2156 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2191 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
        uint _2194 = uint(isnan(14.0) ? _2191 : (isnan(_2191) ? 14.0 : min(_2191, 14.0)));
        uvec4 _2199 = texelFetch(g_lightClusterGridBuffer, int(((_2194 << 2u) + (_2180 << 6u)) >> 2u));
        uint _2200 = _2199.x;
        uint _2201 = _2168.z;
        float _2301;
        float _2303;
        float _2305;
        float _2307;
        float _2309;
        float _2311;
        if (((((1u << ((_2201 >> 4u) & 15u)) + 4294967295u) & _2200) == 0u) || ((_2201 & 240u) == 0u))
        {
            _2301 = 0.0;
            _2303 = 0.0;
            _2305 = 0.0;
            _2307 = 0.0;
            _2309 = 0.0;
            _2311 = 0.0;
        }
        else
        {
            float _2302;
            float _2304;
            float _2306;
            float _2308;
            float _2310;
            float _2312;
            float _2446 = 0.0;
            float _2447 = 0.0;
            float _2448 = 0.0;
            float _2449 = 0.0;
            float _2450 = 0.0;
            float _2451 = 0.0;
            uint _2452 = 0u;
            uint _2461;
            bool _2462;
            for (;;)
            {
                _2461 = texelFetch(g_lightClassification, int((((_2194 << 5u) + (_2180 << 9u)) + (_2452 << 2u)) >> 2u)).x;
                _2462 = _2461 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2462)
                {
                    frontier_phi_61_pred = _2446;
                    frontier_phi_61_pred_1 = _2451;
                    frontier_phi_61_pred_2 = _2450;
                    frontier_phi_61_pred_3 = _2449;
                    frontier_phi_61_pred_4 = _2448;
                    frontier_phi_61_pred_5 = _2447;
                }
                else
                {
                    float _2570;
                    float _2571;
                    float _2572;
                    float _2573;
                    float _2574;
                    float _2575;
                    uint _2576;
                    _2570 = _2446;
                    _2571 = _2447;
                    _2572 = _2448;
                    _2573 = _2449;
                    _2574 = _2450;
                    _2575 = _2451;
                    _2576 = _2461;
                    float _2502;
                    float _2503;
                    float _2504;
                    float _2505;
                    float _2506;
                    float _2507;
                    for (;;)
                    {
                        uint _2580 = uint(findLSB(_2576)) + (_2452 << 5u);
                        uint _2577 = (_2576 + 4294967295u) & _2576;
                        uint _2582 = _2580 * 48u;
                        vec4 _2596 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2582)).x, texelFetch(g_PointLightRenderingBuffer, int(_2582 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2582 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2582 + 3u)).x));
                        uint _2602 = (_2580 * 48u) + 4u;
                        vec4 _2615 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2602)).x, texelFetch(g_PointLightRenderingBuffer, int(_2602 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2602 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2602 + 3u)).x));
                        uint _2621 = (_2580 * 48u) + 8u;
                        vec3 _2632 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2621)).x, texelFetch(g_PointLightRenderingBuffer, int(_2621 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2621 + 2u)).x));
                        float _2636 = _2596.x - _2154;
                        float _2637 = _2596.y - _2155;
                        float _2638 = _2596.z - _2156;
                        float _2639 = dot(vec3(_2636, _2637, _2638), vec3(_2636, _2637, _2638));
                        float _2642 = inversesqrt(_2639);
                        float _2643 = _2642 * _2636;
                        float _2644 = _2642 * _2637;
                        float _2645 = _2642 * _2638;
                        float _2646 = dot(vec3(_413, _416, _419), vec3(_2643, _2644, _2645));
                        float _2651 = 1.0 - (_2639 * _2596.w);
                        float _3933 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
                        float _2652 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
                        float _2653 = sqrt(_2639) * _2615.w;
                        float _2656 = 1.39999997615814208984375 / (_2653 + 1.39999997615814208984375);
                        float _2657 = _2656 * _2656;
                        float _2660 = ((1.0 - _2657) * _2646) + _2657;
                        float _2663 = _2653 * _2653;
                        float _2667 = ((isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0))) * _2652) / ((_2663 * 0.699999988079071044921875) + 1.0);
                        float _2671 = (-0.0) - _2154;
                        float _2672 = (-0.0) - _2155;
                        float _2673 = (-0.0) - _2156;
                        float _2677 = inversesqrt(dot(vec3(_2671, _2672, _2673), vec3(_2671, _2672, _2673)));
                        float _2678 = _2677 * _2671;
                        float _2679 = _2677 * _2672;
                        float _2680 = _2677 * _2673;
                        float _2688 = exp2(log2(1.0 / ((_2663 * 3.5) + 5.0)) * 0.25);
                        float _2689 = 1.0 - _490;
                        float _2696 = sqrt(1.0 - ((1.0 - (_2689 * _2689)) * (1.0 - (_2688 * _2688))));
                        float _2697 = _2696 * _2696;
                        float _2698 = _2697 * _2697;
                        float _2699 = _2678 + _2643;
                        float _2700 = _2679 + _2644;
                        float _2701 = _2680 + _2645;
                        float _2705 = inversesqrt(dot(vec3(_2699, _2700, _2701), vec3(_2699, _2700, _2701)));
                        float _2709 = dot(vec3(_413, _416, _419), vec3(_2678, _2679, _2680));
                        float _3949 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
                        float _2712 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
                        float _2713 = dot(vec3(_413, _416, _419), vec3(_2705 * _2699, _2705 * _2700, _2705 * _2701));
                        float _3960 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
                        float _2716 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
                        float _2720 = ((_2716 * _2716) * (_2698 + (-1.0))) + 1.0;
                        float _2721 = _2656 * _2697;
                        float _2722 = _2721 * _2721;
                        float _2725 = ((1.0 - _2722) * _2646) + _2722;
                        float _3971 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
                        float _2726 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
                        float _2727 = 1.0 - _2697;
                        float _2737 = (0.5 / (((_2726 * ((_2712 * _2727) + _2697)) + 9.9999999392252902907785028219223e-09) + (((_2726 * _2727) + _2697) * _2712))) * _2726;
                        float _3982 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
                        float _2748 = (((_2698 * 3.1415927410125732421875) * (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0)))) / ((_2720 * _2720) * ((_2663 * 2.1991131305694580078125) + 3.141590118408203125))) * _2652;
                        _2505 = (_2667 * _2615.x) + _2573;
                        _2506 = (_2667 * _2615.y) + _2574;
                        _2507 = (_2667 * _2615.z) + _2575;
                        _2502 = (_2748 * _2632.x) + _2570;
                        _2503 = (_2748 * _2632.y) + _2571;
                        _2504 = (_2748 * _2632.z) + _2572;
                        if (_2577 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2570 = _2502;
                            _2571 = _2503;
                            _2572 = _2504;
                            _2573 = _2505;
                            _2574 = _2506;
                            _2575 = _2507;
                            _2576 = _2577;
                        }
                    }
                    frontier_phi_61_pred = _2502;
                    frontier_phi_61_pred_1 = _2507;
                    frontier_phi_61_pred_2 = _2506;
                    frontier_phi_61_pred_3 = _2505;
                    frontier_phi_61_pred_4 = _2504;
                    frontier_phi_61_pred_5 = _2503;
                }
                _2302 = frontier_phi_61_pred;
                _2312 = frontier_phi_61_pred_1;
                _2310 = frontier_phi_61_pred_2;
                _2308 = frontier_phi_61_pred_3;
                _2306 = frontier_phi_61_pred_4;
                _2304 = frontier_phi_61_pred_5;
                uint _2453 = _2452 + 1u;
                if (_2453 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2446 = _2302;
                    _2447 = _2304;
                    _2448 = _2306;
                    _2449 = _2308;
                    _2450 = _2310;
                    _2451 = _2312;
                    _2452 = _2453;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2301 = _2302;
            _2303 = _2304;
            _2305 = _2306;
            _2307 = _2308;
            _2309 = _2310;
            _2311 = _2312;
        }
        uvec4 _2315 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2316 = _2315.z;
        uint _2318 = (_2316 >> 8u) & 15u;
        float _2414;
        float _2416;
        float _2418;
        float _2420;
        float _2422;
        float _2424;
        if (((4294967295u << _2318) & _2200) == 0u)
        {
            _2414 = _2301;
            _2416 = _2303;
            _2418 = _2305;
            _2420 = _2307;
            _2422 = _2309;
            _2424 = _2311;
        }
        else
        {
            float _2439 = inversesqrt(dot(vec3(_2154, _2155, _2156), vec3(_2154, _2155, _2156)));
            float _2440 = _2439 * _2154;
            float _2441 = _2439 * _2155;
            float _2442 = _2439 * _2156;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2318 < ((_2316 >> 12u) & 15u))
            {
                float _2415;
                float _2417;
                float _2419;
                float _2421;
                float _2423;
                float _2425;
                float _2553 = _2301;
                float _2554 = _2303;
                float _2555 = _2305;
                float _2556 = _2307;
                float _2557 = _2309;
                float _2558 = _2311;
                uint _2559 = _2318;
                uint _2568;
                bool _2569;
                for (;;)
                {
                    _2568 = texelFetch(g_lightClassification, int((((_2194 << 5u) + (_2180 << 9u)) + (_2559 << 2u)) >> 2u)).x;
                    _2569 = _2568 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2569)
                    {
                        frontier_phi_67_pred = _2556;
                        frontier_phi_67_pred_1 = _2557;
                        frontier_phi_67_pred_2 = _2558;
                        frontier_phi_67_pred_3 = _2555;
                        frontier_phi_67_pred_4 = _2554;
                        frontier_phi_67_pred_5 = _2553;
                    }
                    else
                    {
                        float _2753;
                        float _2754;
                        float _2755;
                        float _2756;
                        float _2757;
                        float _2758;
                        float _3049;
                        float _3050;
                        float _3051;
                        float _3052;
                        float _3053;
                        float _3054;
                        float _2766 = _2553;
                        float _2767 = _2554;
                        float _2768 = _2555;
                        float _2769 = _2556;
                        float _2770 = _2557;
                        float _2771 = _2558;
                        uint _2772 = _2568;
                        uint _2773;
                        vec4 _2798;
                        float _2799;
                        vec4 _2814;
                        vec3 _2826;
                        vec4 _2842;
                        vec4 _2858;
                        float _2905;
                        bool _2906;
                        for (;;)
                        {
                            uint _2783 = ((_2559 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2772));
                            _2773 = (_2772 + 4294967295u) & _2772;
                            uint _2785 = _2783 * 40u;
                            _2798 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2785)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2785 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2785 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2785 + 3u)).x));
                            _2799 = _2798.w;
                            uint _2801 = (_2783 * 40u) + 4u;
                            _2814 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2801)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 3u)).x));
                            uint _2816 = (_2783 * 40u) + 8u;
                            _2826 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2816)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 2u)).x));
                            uint _2829 = (_2783 * 40u) + 16u;
                            _2842 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2829)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 3u)).x));
                            uint _2845 = (_2783 * 40u) + 20u;
                            _2858 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2845)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 3u)).x));
                            uint _2861 = (_2783 * 40u) + 24u;
                            vec4 _2874 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2861)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 3u)).x));
                            uint _2880 = (_2783 * 40u) + 28u;
                            vec4 _2893 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2880)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 3u)).x));
                            _2905 = fma(_2156, _2893.z, fma(_2155, _2893.y, _2893.x * _2154)) + _2893.w;
                            _2906 = !((fma(_2156, _2874.z, fma(_2155, _2874.y, _2874.x * _2154)) + _2874.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2906)
                            {
                                float _2933 = _2798.x - _2154;
                                float _2934 = _2798.y - _2155;
                                float _2935 = _2798.z - _2156;
                                float _2936 = dot(vec3(_2933, _2934, _2935), vec3(_2933, _2934, _2935));
                                float _2939 = inversesqrt(_2936);
                                float _2940 = _2939 * _2933;
                                float _2941 = _2939 * _2934;
                                float _2942 = _2939 * _2935;
                                float _2946 = 1.0 - (_2936 / (_2799 * _2799));
                                float _3993 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
                                float _2947 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
                                float _2951 = sqrt(_2936) * _2814.w;
                                float _2953 = 1.39999997615814208984375 / (_2951 + 1.39999997615814208984375);
                                float _2954 = _2953 * _2953;
                                float _2957 = ((1.0 - _2954) * dot(vec3(_2940, _2941, _2942), vec3(_413, _416, _419))) + _2954;
                                float _2960 = _2951 * _2951;
                                float _2964 = (fma(_2156, _2842.z, fma(_2155, _2842.y, _2842.x * _2154)) + _2842.w) / _2905;
                                float _2965 = (fma(_2156, _2858.z, fma(_2155, _2858.y, _2858.x * _2154)) + _2858.w) / _2905;
                                float _2969 = 1.0 - dot(vec2(_2964, _2965), vec2(_2964, _2965));
                                float _4009 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
                                float _2970 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
                                float _2971 = _2970 * (((isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0))) * _2947) / ((_2960 * 0.699999988079071044921875) + 1.0));
                                float _2983 = exp2(log2(1.0 / ((_2960 * 3.5) + 5.0)) * 0.25);
                                float _2984 = 1.0 - _490;
                                float _2991 = sqrt(1.0 - ((1.0 - (_2984 * _2984)) * (1.0 - (_2983 * _2983))));
                                float _2992 = _2991 * _2991;
                                float _2993 = _2992 * _2992;
                                float _2994 = _2940 - _2440;
                                float _2995 = _2941 - _2441;
                                float _2996 = _2942 - _2442;
                                float _3000 = inversesqrt(dot(vec3(_2994, _2995, _2996), vec3(_2994, _2995, _2996)));
                                float _3004 = dot(vec3(_413, _416, _419), vec3((-0.0) - _2440, (-0.0) - _2441, (-0.0) - _2442));
                                float _4020 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                                float _3007 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
                                float _3008 = dot(vec3(_413, _416, _419), vec3(_3000 * _2994, _3000 * _2995, _3000 * _2996));
                                float _4031 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                                float _3011 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
                                float _3015 = ((_3011 * _3011) * (_2993 + (-1.0))) + 1.0;
                                float _3016 = _2953 * _2992;
                                float _3017 = _3016 * _3016;
                                float _3023 = ((1.0 - _3017) * dot(vec3(_413, _416, _419), vec3(_2940, _2941, _2942))) + _3017;
                                float _4042 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                                float _3024 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
                                float _3025 = 1.0 - _2992;
                                float _3035 = (0.5 / (((_3024 * ((_3007 * _3025) + _2992)) + 9.9999999392252902907785028219223e-09) + (((_3024 * _3025) + _2992) * _3007))) * _3024;
                                float _4053 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                                float _3045 = (_2970 * _2947) * (((_2993 * 3.1415927410125732421875) * (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)))) / ((_3015 * _3015) * ((_2960 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3045 * _2826.x;
                                frontier_phi_73_pred_1 = _3045 * _2826.y;
                                frontier_phi_73_pred_2 = _2971 * _2814.z;
                                frontier_phi_73_pred_3 = _2971 * _2814.y;
                                frontier_phi_73_pred_4 = _2971 * _2814.x;
                                frontier_phi_73_pred_5 = _3045 * _2826.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3049 = frontier_phi_73_pred;
                            _3050 = frontier_phi_73_pred_1;
                            _3054 = frontier_phi_73_pred_2;
                            _3053 = frontier_phi_73_pred_3;
                            _3052 = frontier_phi_73_pred_4;
                            _3051 = frontier_phi_73_pred_5;
                            _2756 = _3052 + _2769;
                            _2757 = _3053 + _2770;
                            _2758 = _3054 + _2771;
                            _2753 = _3049 + _2766;
                            _2754 = _3050 + _2767;
                            _2755 = _3051 + _2768;
                            if (_2773 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2766 = _2753;
                                _2767 = _2754;
                                _2768 = _2755;
                                _2769 = _2756;
                                _2770 = _2757;
                                _2771 = _2758;
                                _2772 = _2773;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2756;
                        frontier_phi_67_pred_1 = _2757;
                        frontier_phi_67_pred_2 = _2758;
                        frontier_phi_67_pred_3 = _2755;
                        frontier_phi_67_pred_4 = _2754;
                        frontier_phi_67_pred_5 = _2753;
                    }
                    _2421 = frontier_phi_67_pred;
                    _2423 = frontier_phi_67_pred_1;
                    _2425 = frontier_phi_67_pred_2;
                    _2419 = frontier_phi_67_pred_3;
                    _2417 = frontier_phi_67_pred_4;
                    _2415 = frontier_phi_67_pred_5;
                    uint _2560 = _2559 + 1u;
                    if (_2560 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2553 = _2415;
                        _2554 = _2417;
                        _2555 = _2419;
                        _2556 = _2421;
                        _2557 = _2423;
                        _2558 = _2425;
                        _2559 = _2560;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2423;
                frontier_phi_55_56_ladder_1 = _2425;
                frontier_phi_55_56_ladder_2 = _2421;
                frontier_phi_55_56_ladder_3 = _2419;
                frontier_phi_55_56_ladder_4 = _2417;
                frontier_phi_55_56_ladder_5 = _2415;
            }
            else
            {
                frontier_phi_55_56_ladder = _2309;
                frontier_phi_55_56_ladder_1 = _2311;
                frontier_phi_55_56_ladder_2 = _2307;
                frontier_phi_55_56_ladder_3 = _2305;
                frontier_phi_55_56_ladder_4 = _2303;
                frontier_phi_55_56_ladder_5 = _2301;
            }
            _2414 = frontier_phi_55_56_ladder_5;
            _2416 = frontier_phi_55_56_ladder_4;
            _2418 = frontier_phi_55_56_ladder_3;
            _2420 = frontier_phi_55_56_ladder_2;
            _2422 = frontier_phi_55_56_ladder;
            _2424 = frontier_phi_55_56_ladder_1;
        }
        float _2429 = isnan(1.0) ? _474 : (isnan(_474) ? 1.0 : min(_474, 1.0));
        _2213 = (_2429 * _2420) + _1649;
        _2215 = (_2429 * _2422) + _1651;
        _2217 = (_2429 * _2424) + _1653;
        _2219 = ((_2414 * _458) * _2429) + _1994;
        _2221 = ((_2416 * _460) * _2429) + _1996;
        _2223 = ((_2418 * _461) * _2429) + _1998;
    }
    else
    {
        _2213 = _1649;
        _2215 = _1651;
        _2217 = _1653;
        _2219 = _1994;
        _2221 = _1996;
        _2223 = _1998;
    }
    float _4069 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _4080 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _4091 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    uint _2243 = _432 + 6u;
    float _2251 = _391 / cbSceneParam._m0[86u].x;
    float _2252 = _392 / cbSceneParam._m0[86u].y;
    vec4 _2266 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2251, _2252, (log2((isnan(cbSceneParam._m0[77u].w) ? _324 : (isnan(_324) ? cbSceneParam._m0[77u].w : min(_324, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2268 = _2266.x;
    float _2269 = _2266.y;
    float _2270 = _2266.z;
    float _2271 = _2266.w;
    float _2364;
    float _2366;
    float _2368;
    float _2370;
    if (_324 > cbSceneParam._m0[78u].w)
    {
        float _2326 = isnan(_324) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _324 : min(cbSceneParam._m0[80u].w, _324));
        float _2327 = _2326 / _324;
        float _2338 = _2327 * _376;
        float _2339 = _377 * _2327;
        float _2340 = (-0.0) - _2339;
        float _2342 = _2327 * _378;
        float _2344 = (cbSceneParam._m0[77u].w * _2340) / _2326;
        float _2345 = _2344 + cbSceneParam._m0[79u].w;
        float _2346 = cbSceneParam._m0[79u].w - _2339;
        float _2352 = sqrt(((_2338 * _2338) + (_2339 * _2339)) + (_2342 * _2342));
        float _2355 = (1.0 - (cbSceneParam._m0[77u].w / _2326)) * _2352;
        float _2360 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2362 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2515;
        if (abs((_2340 - _2344) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2515 = ((((_2345 > 0.0) ? exp2(_2360 * _2345) : (2.0 - exp2(_2362 * _2345))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2355;
        }
        else
        {
            float _2475 = 1.0 / cbSceneParam._m0[80u].x;
            float _2476 = isnan(_2346) ? _2345 : (isnan(_2345) ? _2346 : max(_2345, _2346));
            float _2477 = isnan(_2346) ? _2345 : (isnan(_2345) ? _2346 : min(_2345, _2346));
            float _2486 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : min(_2476, 0.0));
            float _2487 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : min(_2477, 0.0));
            _2515 = ((abs(_2352 / _2340) * cbSceneParam._m0[80u].y) * ((((_2486 - _2487) * 2.0) - ((exp2(_2360 * (isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0)))) - exp2(_2360 * (isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0))))) * _2475)) - ((exp2(_2362 * _2486) - exp2(_2362 * _2487)) * _2475))) + (_2355 * cbSceneParam._m0[80u].z);
        }
        vec4 _2517 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2251, _2252, 1.0), 0.0);
        float _2526 = exp2((_2515 * (-1.44269502162933349609375)) * (1.0 - _2517.w));
        float _2527 = log2(_2526);
        float _2543 = log2(_2271);
        _2364 = (exp2(_2543 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2527 * cbSceneParam._m0[78u].x)) * _2517.x) / cbSceneParam._m0[78u].x)) + _2268;
        _2366 = (exp2(_2543 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2527 * cbSceneParam._m0[78u].y)) * _2517.y) / cbSceneParam._m0[78u].y)) + _2269;
        _2368 = (exp2(_2543 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2527 * cbSceneParam._m0[78u].z)) * _2517.z) / cbSceneParam._m0[78u].z)) + _2270;
        _2370 = _2526 * _2271;
    }
    else
    {
        _2364 = _2268;
        _2366 = _2269;
        _2368 = _2270;
        _2370 = _2271;
    }
    float _2382 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2383 = _2382 == 3.0;
    float _2384 = log2(_2370);
    float _2391 = exp2(_2384 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_2213 + ((isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0))) * _474))) + ((_2219 + ((isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))) * _1283)) * cbPerFrame._m0[3u].x));
    float _2392 = exp2(_2384 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_2215 + ((isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0))) * _474))) + ((_2221 + ((isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))) * _1283)) * cbPerFrame._m0[3u].x));
    float _2393 = exp2(_2384 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_2217 + ((isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0))) * _474))) + ((_2223 + ((isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))) * _1283)) * cbPerFrame._m0[3u].x));
    float _2402 = (_2382 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2402 * (_2383 ? _2391 : (_2391 + (cbSceneParam._m0[72u].w * _2364)));
    SV_Target.y = _2402 * (_2383 ? _2392 : (_2392 + (cbSceneParam._m0[72u].w * _2366)));
    SV_Target.z = _2402 * (_2383 ? _2393 : (_2393 + (cbSceneParam._m0[72u].w * _2368)));
    SV_Target.w = cbInstanceData._m0[_2243].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2243].w;
}


